uint64_t re::PrimitiveRenderingDynamicGeometry::numShapes<unsigned long>(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>(a1, a2, 0) + 16);
  if (!v4)
    return 0;
  if (*(_QWORD *)(a1 + 1032) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 1048) + 8 * a2) + (v4 << 7) - 128;
}

uint64_t re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  if (*(_QWORD *)(a1 + 40 * a3 + 552) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 40 * a3 + 568) + 40 * a2;
}

{
  if (*(_QWORD *)(a1 + 40 * a3 + 552) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 40 * a3 + 568) + 40 * a2;
}

uint64_t re::PrimitiveRenderingDynamicGeometry::isAttributeVarying<unsigned long>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  if (*(_QWORD *)(a1 + 40 * a3 + 872) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 40 * a3 + 888) + a2);
}

uint64_t re::PrimitiveRenderingDynamicGeometry::append<re::PrimitiveRenderingShapeAttribute>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, re *a5)
{
  uint64_t v9;
  uint64_t v10;
  _anonymous_namespace_ *v11;
  _QWORD v13[4];

  v9 = 0;
  v10 = a4 & 0x7F;
  do
  {
    if (!v10 && *(_BYTE *)(a3 + v9))
    {
      v11 = *(_anonymous_namespace_ **)(a2 + 8 * v9);
      re::attributeInfo(*(unsigned __int8 *)(a1 + v9), a2);
      re::allocate(a5, (const re::RenderManager *)0x10, 0x10uLL, v13);
      re::DynamicArray<re::EvaluationRegister>::add(v11, (uint64_t)v13);
    }
    ++v9;
  }
  while (v9 != 4);
  return v10 + 1;
}

double re::fill<re::Vector3<float>,re::PrimitiveRenderingShapeAttribute>(uint64_t a1, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  char *v5;
  double result;
  __int128 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  re::PrimitiveRenderingDynamicGeometry::attributeDefaultValue((uint64_t)&v7, a2);
  if (v8 != 2)
    std::__throw_bad_variant_access[abi:nn180100]();
  v3 = (char *)objc_msgSend(**(id **)(a1 + 24), sel_contents);
  v4 = 0;
  v5 = &v3[*(_QWORD *)(a1 + 8)];
  do
  {
    result = *(double *)&v7;
    *(_OWORD *)&v5[v4] = v7;
    v4 += 16;
  }
  while (v4 != 2048);
  return result;
}

char *re::fill<re::Vector4<float>,re::PrimitiveRenderingShapeAttribute>(uint64_t a1, uint64_t a2)
{
  char *result;
  uint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  re::PrimitiveRenderingDynamicGeometry::attributeDefaultValue((uint64_t)&v7, a2);
  if (v8 != 3)
    std::__throw_bad_variant_access[abi:nn180100]();
  v6 = v7;
  result = (char *)objc_msgSend(**(id **)(a1 + 24), sel_contents);
  v4 = 0;
  v5 = &result[*(_QWORD *)(a1 + 8)];
  do
  {
    *(_OWORD *)&v5[v4] = v6;
    v4 += 16;
  }
  while (v4 != 2048);
  return result;
}

uint64_t re::PrimitiveRenderingContext::addShape<re::PrimitiveRenderingShape>(uint64_t a1, unsigned int a2, _OWORD *a3, _OWORD *a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[4];
  int v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  int v27;
  const char *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  unint64_t v32;
  __int16 v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v7 = a1;
  v40 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<re::PrimitiveRenderingShape>(a1, a2, 0) + 16);
  if (v8)
  {
    v9 = a2;
    v10 = *(_QWORD *)(v7 + 1032);
    if (v10 <= a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*(_QWORD *)(v7 + 1048) + 8 * a2) + (v8 << 7) - 128;
  }
  else
  {
    v9 = 0;
  }
  v11 = 0;
  v23 = 50462976;
  v25 = 0u;
  v26 = 0u;
  do
  {
    v12 = *((unsigned __int8 *)&v23 + v11);
    *((_QWORD *)&v25 + v11) = re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<re::PrimitiveRenderingShape>(v7, a2, v12);
    v22[v11++] = re::PrimitiveRenderingDynamicGeometry::isAttributeVarying<re::PrimitiveRenderingShape>(v7, a2, v12);
  }
  while (v11 != 4);
  re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<re::PrimitiveRenderingShape>(v7, a2, 0);
  v10 = a2;
  v13 = *(_QWORD *)(v7 + 1032);
  if (v13 <= a2)
  {
    v24 = 0;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v35 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v27 = 136315906;
    v28 = "operator[]";
    v29 = 1024;
    v30 = 789;
    v31 = 2048;
    v32 = a2;
    v33 = 2048;
    v34 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_17;
  }
  v14 = re::PrimitiveRenderingDynamicGeometry::append<re::PrimitiveRenderingShapeAttribute>((uint64_t)&v23, (uint64_t)&v25, (uint64_t)v22, *(_QWORD *)(*(_QWORD *)(v7 + 1048) + 8 * a2), *(re **)(v7 + 1192));
  v13 = *(_QWORD *)(v7 + 1032);
  if (v13 <= a2)
  {
LABEL_17:
    v24 = 0;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v35 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v27 = 136315906;
    v28 = "operator[]";
    v29 = 1024;
    v30 = 789;
    v31 = 2048;
    v32 = a2;
    v33 = 2048;
    v34 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  v16 = v14;
  *(_QWORD *)(*(_QWORD *)(v7 + 1048) + 8 * v10) = v14;
  v7 = *(_QWORD *)(v7 + 1032);
  if (v7 <= v10)
  {
LABEL_18:
    v24 = 0;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v35 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v27 = 136315906;
    v28 = "operator[]";
    v29 = 1024;
    v30 = 789;
    v31 = 2048;
    v32 = v10;
    v33 = 2048;
    v34 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_19:
    *(_QWORD *)&v25 = 0;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v35 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v27 = 136315906;
    v28 = "operator[]";
    v29 = 1024;
    v30 = 797;
    v31 = 2048;
    v32 = v9;
    v33 = 2048;
    v34 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v14 == 1)
  {
    if (v22[2])
      v15 = re::fill<re::Vector3<float>,re::PrimitiveRenderingShapeAttribute>(*(_QWORD *)(v26 + 32) + 32 * *(_QWORD *)(v26 + 16) - 32, 2);
    if (v22[3])
      re::fill<re::Vector4<float>,re::PrimitiveRenderingShapeAttribute>(*(_QWORD *)(*((_QWORD *)&v26 + 1) + 32) + 32 * *(_QWORD *)(*((_QWORD *)&v26 + 1) + 16) - 32, 3);
  }
  v17 = *(_QWORD *)(v25 + 32) + 32 * *(_QWORD *)(v25 + 16);
  v18 = (char *)objc_msgSend(**(id **)(v17 - 8), sel_contents, v15) + *(_QWORD *)(v17 - 24);
  v19 = 16 * v16 - 16;
  *(_OWORD *)&v18[v19] = *a3;
  v20 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 32) + 32 * *(_QWORD *)(*((_QWORD *)&v25 + 1) + 16);
  *(_OWORD *)((char *)objc_msgSend(**(id **)(v20 - 8), sel_contents) + *(_QWORD *)(v20 - 24) + v19) = *a4;
  return v9;
}

uint64_t re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<re::PrimitiveRenderingShape>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (*(_QWORD *)(a1 + 40 * a3 + 552) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 40 * a3 + 568) + 40 * a2;
}

{
  if (*(_QWORD *)(a1 + 40 * a3 + 552) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 40 * a3 + 568) + 40 * a2;
}

uint64_t re::PrimitiveRenderingDynamicGeometry::isAttributeVarying<re::PrimitiveRenderingShape>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (*(_QWORD *)(a1 + 40 * a3 + 872) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 40 * a3 + 888) + a2);
}

float re::PrimitiveRenderingDynamicGeometry::set<float,re::PrimitiveRenderingAttribute>(uint64_t a1, unint64_t a2, float *a3, _anonymous_namespace_ *a4, _BYTE *a5, uint64_t a6, uint64_t a7, re *a8)
{
  uint64_t v15;
  unint64_t v16;
  const re::RenderManager *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  float result;
  _OWORD v22[5];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (!*a5)
  {
    v15 = re::attributeInfo(a1, a2);
    if (a6)
    {
      v17 = (const re::RenderManager *)v15;
      v18 = v16;
      do
      {
        re::allocate(a8, v17, v18, v22);
        re::fill<float,re::PrimitiveRenderingAttribute>((uint64_t)v22, a1);
        re::DynamicArray<re::EvaluationRegister>::add(a4, (uint64_t)v22);
        --a6;
      }
      while (a6);
    }
    *a5 = 1;
  }
  if (*((_QWORD *)a4 + 2) <= a2 >> 7)
  {
    memset(v22, 0, sizeof(v22));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v19 = *((_QWORD *)a4 + 4) + 32 * (a2 >> 7);
  v20 = (char *)objc_msgSend(**(id **)(v19 + 24), sel_contents);
  result = *a3;
  *(float *)&v20[4 * (a2 & 0x7F) + *(_QWORD *)(v19 + 8)] = *a3;
  return result;
}

__n128 re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(uint64_t a1, unint64_t a2, __n128 *a3, _anonymous_namespace_ *a4, _BYTE *a5, uint64_t a6, uint64_t a7, re *a8)
{
  uint64_t v15;
  unint64_t v16;
  const re::RenderManager *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  __n128 result;
  _OWORD v22[5];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (!*a5)
  {
    v15 = re::attributeInfo(a1, a2);
    if (a6)
    {
      v17 = (const re::RenderManager *)v15;
      v18 = v16;
      do
      {
        re::allocate(a8, v17, v18, v22);
        re::fill<re::Vector4<float>,re::PrimitiveRenderingAttribute>((uint64_t)v22, a1);
        re::DynamicArray<re::EvaluationRegister>::add(a4, (uint64_t)v22);
        --a6;
      }
      while (a6);
    }
    *a5 = 1;
  }
  if (*((_QWORD *)a4 + 2) <= a2 >> 7)
  {
    memset(v22, 0, sizeof(v22));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v19 = *((_QWORD *)a4 + 4) + 32 * (a2 >> 7);
  v20 = (char *)objc_msgSend(**(id **)(v19 + 24), sel_contents);
  result = *a3;
  *(__n128 *)&v20[16 * (a2 & 0x7F) + *(_QWORD *)(v19 + 8)] = *a3;
  return result;
}

uint64_t re::PrimitiveRenderingDynamicGeometry::varyingAttributeSize<re::PrimitiveRenderingShape>(uint64_t a1, unsigned int a2)
{
  uint64_t v4;

  v4 = re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<re::PrimitiveRenderingShape>(a1, a2, 0);
  if (*(_QWORD *)(a1 + 1032) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(v4 + 16);
}

uint64_t re::PrimitiveRenderingDynamicGeometry::getAttributeVarying<re::PrimitiveRenderingShape>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (*(_QWORD *)(a1 + 40 * a3 + 872) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 40 * a3 + 888) + a2;
}

double re::PrimitiveRenderingContext::setAttribute<re::Vector4<float>,re::PrimitiveRenderingShape>(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, __n128 *a5)
{
  _anonymous_namespace_ *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  double result;

  v10 = (_anonymous_namespace_ *)re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<re::PrimitiveRenderingShape>(a1, a3, a4);
  v11 = re::PrimitiveRenderingDynamicGeometry::varyingAttributeSize<re::PrimitiveRenderingShape>(a1, a3);
  v13 = v12;
  v14 = (_BYTE *)re::PrimitiveRenderingDynamicGeometry::getAttributeVarying<re::PrimitiveRenderingShape>(a1, a3, a4);
  *(_QWORD *)&result = re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingShapeAttribute>(a4, a2, a5, v10, v14, v11, v13, (re *)*(_QWORD *)(a1 + 1192)).n128_u64[0];
  return result;
}

__n128 re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingShapeAttribute>(uint64_t a1, unint64_t a2, __n128 *a3, _anonymous_namespace_ *a4, _BYTE *a5, uint64_t a6, uint64_t a7, re *a8)
{
  uint64_t v15;
  char *v16;
  __n128 result;
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (!*a5)
  {
    re::attributeInfo(a1, a2);
    for (; a6; --a6)
    {
      re::allocate(a8, (const re::RenderManager *)0x10, 0x10uLL, v18);
      re::fill<re::Vector4<float>,re::PrimitiveRenderingShapeAttribute>((uint64_t)v18, a1);
      re::DynamicArray<re::EvaluationRegister>::add(a4, (uint64_t)v18);
    }
    *a5 = 1;
  }
  if (*((_QWORD *)a4 + 2) <= a2 >> 7)
  {
    memset(v18, 0, sizeof(v18));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v15 = *((_QWORD *)a4 + 4) + 32 * (a2 >> 7);
  v16 = (char *)objc_msgSend(**(id **)(v15 + 24), sel_contents);
  result = *a3;
  *(__n128 *)&v16[16 * (a2 & 0x7F) + *(_QWORD *)(v15 + 8)] = *a3;
  return result;
}

double re::PrimitiveRenderingContext::setAttribute<re::Vector3<float>,re::PrimitiveRenderingShape>(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, __n128 *a5)
{
  _anonymous_namespace_ *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  double result;

  v10 = (_anonymous_namespace_ *)re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<re::PrimitiveRenderingShape>(a1, a3, a4);
  v11 = re::PrimitiveRenderingDynamicGeometry::varyingAttributeSize<re::PrimitiveRenderingShape>(a1, a3);
  v13 = v12;
  v14 = (_BYTE *)re::PrimitiveRenderingDynamicGeometry::getAttributeVarying<re::PrimitiveRenderingShape>(a1, a3, a4);
  *(_QWORD *)&result = re::PrimitiveRenderingDynamicGeometry::set<re::Vector3<float>,re::PrimitiveRenderingShapeAttribute>(a4, a2, a5, v10, v14, v11, v13, (re *)*(_QWORD *)(a1 + 1192)).n128_u64[0];
  return result;
}

__n128 re::PrimitiveRenderingDynamicGeometry::set<re::Vector3<float>,re::PrimitiveRenderingShapeAttribute>(uint64_t a1, unint64_t a2, __n128 *a3, _anonymous_namespace_ *a4, _BYTE *a5, uint64_t a6, uint64_t a7, re *a8)
{
  uint64_t v15;
  char *v16;
  __n128 result;
  _OWORD v18[5];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (!*a5)
  {
    re::attributeInfo(a1, a2);
    for (; a6; --a6)
    {
      re::allocate(a8, (const re::RenderManager *)0x10, 0x10uLL, v18);
      re::fill<re::Vector3<float>,re::PrimitiveRenderingShapeAttribute>((uint64_t)v18, a1);
      re::DynamicArray<re::EvaluationRegister>::add(a4, (uint64_t)v18);
    }
    *a5 = 1;
  }
  if (*((_QWORD *)a4 + 2) <= a2 >> 7)
  {
    memset(v18, 0, sizeof(v18));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v15 = *((_QWORD *)a4 + 4) + 32 * (a2 >> 7);
  v16 = (char *)objc_msgSend(**(id **)(v15 + 24), sel_contents);
  result = *a3;
  *(__n128 *)&v16[16 * (a2 & 0x7F) + *(_QWORD *)(v15 + 8)] = *a3;
  return result;
}

uint64_t re::PrimitiveRenderingDynamicGeometry::varyingAttributeSize<unsigned long>(uint64_t a1, unint64_t a2)
{
  uint64_t Attribute;

  Attribute = re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>(a1, a2, 0);
  if (*(_QWORD *)(a1 + 1032) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(Attribute + 16);
}

unint64_t re::PrimitiveRenderingDynamicGeometry::getAttributeVarying<unsigned long>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  if (*(_QWORD *)(a1 + 40 * a3 + 872) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 40 * a3 + 888) + a2;
}

double re::PrimitiveRenderingContext::setAttribute<re::Vector4<float>,unsigned long>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, __n128 *a5)
{
  _anonymous_namespace_ *Attribute;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  double result;

  Attribute = (_anonymous_namespace_ *)re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>(a1, a3, a4);
  v11 = re::PrimitiveRenderingDynamicGeometry::varyingAttributeSize<unsigned long>(a1, a3);
  v13 = v12;
  v14 = (_BYTE *)re::PrimitiveRenderingDynamicGeometry::getAttributeVarying<unsigned long>(a1, a3, a4);
  *(_QWORD *)&result = re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingShapeAttribute>(a4, a2, a5, Attribute, v14, v11, v13, (re *)*(_QWORD *)(a1 + 1192)).n128_u64[0];
  return result;
}

double re::PrimitiveRenderingContext::setAttribute<re::Vector3<float>,unsigned long>(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, __n128 *a5)
{
  _anonymous_namespace_ *Attribute;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  double result;

  Attribute = (_anonymous_namespace_ *)re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>(a1, a3, a4);
  v11 = re::PrimitiveRenderingDynamicGeometry::varyingAttributeSize<unsigned long>(a1, a3);
  v13 = v12;
  v14 = (_BYTE *)re::PrimitiveRenderingDynamicGeometry::getAttributeVarying<unsigned long>(a1, a3, a4);
  *(_QWORD *)&result = re::PrimitiveRenderingDynamicGeometry::set<re::Vector3<float>,re::PrimitiveRenderingShapeAttribute>(a4, a2, a5, Attribute, v14, v11, v13, (re *)*(_QWORD *)(a1 + 1192)).n128_u64[0];
  return result;
}

__n128 re::PrimitiveRenderingDynamicGeometry::setUniform<re::Vector4<float>,re::PrimitiveRenderingShape>(uint64_t a1, unsigned int a2, unsigned int a3, __n128 *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;

  v4 = a2;
  v5 = a1 + 40 * a3;
  if (*(_QWORD *)(v5 + 872) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  v9 = a1 + 40 * a3;
  if (*(_BYTE *)(*(_QWORD *)(v9 + 888) + a2))
  {
    v10 = (unint64_t *)(v5 + 872);
    v11 = re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<re::PrimitiveRenderingShape>(a1, a2, a3);
    *(_QWORD *)(v11 + 16) = 0;
    ++*(_DWORD *)(v11 + 24);
    if (*v10 <= v4)
      goto LABEL_12;
    *(_BYTE *)(*(_QWORD *)(v9 + 888) + v4) = 0;
  }
  if (*(_QWORD *)(a1 + 40 * a3 + 712) <= v4)
  {
LABEL_11:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v12 = *(_QWORD *)(a1 + 40 * a3 + 728) + 32 * v4;
  if (*(_DWORD *)(v12 + 16) == 3)
  {
    result = *a4;
    *(__n128 *)v12 = *a4;
  }
  else
  {
    *(_DWORD *)(v12 + 16) = -1;
    result = *a4;
    *(__n128 *)v12 = *a4;
    *(_DWORD *)(v12 + 16) = 3;
  }
  return result;
}

__n128 re::PrimitiveRenderingDynamicGeometry::setUniform<re::Vector3<float>,re::PrimitiveRenderingShape>(uint64_t a1, unsigned int a2, unsigned int a3, __n128 *a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 result;

  v4 = a2;
  v5 = a1 + 40 * a3;
  if (*(_QWORD *)(v5 + 872) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  v9 = a1 + 40 * a3;
  if (*(_BYTE *)(*(_QWORD *)(v9 + 888) + a2))
  {
    v10 = (unint64_t *)(v5 + 872);
    v11 = re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<re::PrimitiveRenderingShape>(a1, a2, a3);
    *(_QWORD *)(v11 + 16) = 0;
    ++*(_DWORD *)(v11 + 24);
    if (*v10 <= v4)
      goto LABEL_12;
    *(_BYTE *)(*(_QWORD *)(v9 + 888) + v4) = 0;
  }
  if (*(_QWORD *)(a1 + 40 * a3 + 712) <= v4)
  {
LABEL_11:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v12 = *(_QWORD *)(a1 + 40 * a3 + 728) + 32 * v4;
  if (*(_DWORD *)(v12 + 16) == 2)
  {
    result = *a4;
    *(__n128 *)v12 = *a4;
  }
  else
  {
    *(_DWORD *)(v12 + 16) = -1;
    result = *a4;
    *(__n128 *)v12 = *a4;
    *(_DWORD *)(v12 + 16) = 2;
  }
  return result;
}

__n128 re::PrimitiveRenderingDynamicGeometry::setUniform<re::Vector4<float>,unsigned long>(uint64_t a1, unint64_t a2, unsigned int a3, __n128 *a4)
{
  uint64_t v5;
  uint64_t v9;
  unint64_t *v10;
  uint64_t Attribute;
  uint64_t v12;
  __n128 result;

  v5 = a1 + 40 * a3;
  if (*(_QWORD *)(v5 + 872) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  v9 = a1 + 40 * a3;
  if (*(_BYTE *)(*(_QWORD *)(v9 + 888) + a2))
  {
    v10 = (unint64_t *)(v5 + 872);
    Attribute = re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>(a1, a2, a3);
    *(_QWORD *)(Attribute + 16) = 0;
    ++*(_DWORD *)(Attribute + 24);
    if (*v10 <= a2)
      goto LABEL_12;
    *(_BYTE *)(*(_QWORD *)(v9 + 888) + a2) = 0;
  }
  if (*(_QWORD *)(a1 + 40 * a3 + 712) <= a2)
  {
LABEL_11:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v12 = *(_QWORD *)(a1 + 40 * a3 + 728) + 32 * a2;
  if (*(_DWORD *)(v12 + 16) == 3)
  {
    result = *a4;
    *(__n128 *)v12 = *a4;
  }
  else
  {
    *(_DWORD *)(v12 + 16) = -1;
    result = *a4;
    *(__n128 *)v12 = *a4;
    *(_DWORD *)(v12 + 16) = 3;
  }
  return result;
}

__n128 re::PrimitiveRenderingDynamicGeometry::setUniform<re::Vector3<float>,unsigned long>(uint64_t a1, unint64_t a2, unsigned int a3, __n128 *a4)
{
  uint64_t v5;
  uint64_t v9;
  unint64_t *v10;
  uint64_t Attribute;
  uint64_t v12;
  __n128 result;

  v5 = a1 + 40 * a3;
  if (*(_QWORD *)(v5 + 872) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  v9 = a1 + 40 * a3;
  if (*(_BYTE *)(*(_QWORD *)(v9 + 888) + a2))
  {
    v10 = (unint64_t *)(v5 + 872);
    Attribute = re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>(a1, a2, a3);
    *(_QWORD *)(Attribute + 16) = 0;
    ++*(_DWORD *)(Attribute + 24);
    if (*v10 <= a2)
      goto LABEL_12;
    *(_BYTE *)(*(_QWORD *)(v9 + 888) + a2) = 0;
  }
  if (*(_QWORD *)(a1 + 40 * a3 + 712) <= a2)
  {
LABEL_11:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v12 = *(_QWORD *)(a1 + 40 * a3 + 728) + 32 * a2;
  if (*(_DWORD *)(v12 + 16) == 2)
  {
    result = *a4;
    *(__n128 *)v12 = *a4;
  }
  else
  {
    *(_DWORD *)(v12 + 16) = -1;
    result = *a4;
    *(__n128 *)v12 = *a4;
    *(_DWORD *)(v12 + 16) = 2;
  }
  return result;
}

void re::PrimitiveRenderingContext::buildMeshScene(uint64_t a1, uint64_t a2, re::MaterialParameterTableBuilder *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, re::Allocator *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  char *v12;
  float32x4_t v13;
  re::DynamicString *v14;
  uint64_t v15;
  _anonymous_namespace_ *v16;
  _anonymous_namespace_ *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  unint64_t v24;
  uint64_t *v25;
  _anonymous_namespace_ *v26;
  unint64_t v27;
  void *v28;
  _anonymous_namespace_ *v29;
  unint64_t v30;
  __int128 v31;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int v38;
  int v39;
  void *v40;
  unint64_t v41;
  uint64_t v42;
  re::MaterialParameterTableBuilder *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t v54;
  uint64_t v55;
  uint64_t v56;
  re::DynamicString *v58;
  int32x4_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v67;
  int v68;
  __int16 v69;
  uint64_t v70[2];
  _OWORD v71[2];
  uint64_t v72;
  unint64_t v73;
  re::DynamicString *v74;
  uint64_t v75;
  uint64_t *v76;
  char *v77;
  uint64_t v78;
  const char *v79;
  float32x4_t v80;
  float32x4_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE v86[48];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97[21];
  uint64_t v98;
  _BYTE v99[12];
  __int16 v100;
  int v101;
  __int16 v102;
  unint64_t v103;
  __int16 v104;
  uint64_t *v105;
  const void *v106[6];
  __int128 v107;
  __int128 v108;
  uint64_t v109;

  *(_QWORD *)&v63 = a6;
  *(_QWORD *)&v64 = a5;
  v11 = 0;
  *(_QWORD *)&v62 = a10;
  v109 = *MEMORY[0x24BDAC8D0];
  v78 = 0;
  v79 = (const char *)&str_110;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  do
  {
    v12 = (char *)&v78 + v11;
    *((_QWORD *)v12 + 12) = 0;
    *((_QWORD *)v12 + 16) = 0;
    v11 += 40;
  }
  while (v11 != 720);
  v61 = vdupq_n_s32(0x7F800000u);
  v80 = (float32x4_t)v61;
  v13.i64[0] = 0x7F0000007FLL;
  v13.i64[1] = 0x7F0000007FLL;
  v81 = v13;
  re::StringID::destroyString((re::StringID *)&v78);
  v78 = 0xD2E811B7E678E9E0;
  v79 = "PrimitiveRendering Instance";
  v14 = (re::DynamicString *)(*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 24, 8);
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = 0;
  re::FixedArray<unsigned long>::init<>((uint64_t *)v14, (uint64_t)a3, v64);
  v15 = (*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 24, 8);
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)v15 = 0;
  re::FixedArray<unsigned long>::init<>((uint64_t *)v15, (uint64_t)a3, v64);
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v17 = (_anonymous_namespace_ *)re::FixedArray<re::AABB>::init<>((uint64_t)&v75, (uint64_t)a3, v64);
  if (!(_QWORD)v64)
  {
LABEL_43:
    v41 = re::DataArray<re::MeshModel>::create<re::MeshModel>(*(_QWORD *)(*(_QWORD *)(a2 + 1192) + 32) + 8, &v78);
    re::MeshManager::destroyModel(*(uint64_t **)(*(_QWORD *)(a2 + 1192) + 32), v41);
    *(_QWORD *)&v88 = 0;
    *((_QWORD *)&v88 + 1) = &str_110;
    BYTE8(v89) = 0;
    HIDWORD(v89) = 1065353216;
    v94 = 0u;
    v95 = 0u;
    v96 = 0u;
    *(_QWORD *)&v89 = v41;
    v67 = xmmword_2260E5F10;
    v90 = xmmword_2260E5F10;
    v91 = xmmword_2260E5F20;
    v64 = xmmword_2260E5F20;
    v62 = xmmword_2260E5D70;
    v63 = xmmword_2260E5F40;
    v92 = xmmword_2260E5F40;
    v93 = xmmword_2260E5D70;
    *(_QWORD *)v86 = re::DataArray<re::MeshInstance>::create<re::MeshInstance>(*(_QWORD *)(*(_QWORD *)(a2 + 1192) + 32) + 72, (uint64_t)&v88);
    re::MeshManager::destroyInstance(*(uint64_t **)(*(_QWORD *)(a2 + 1192) + 32), *(uint64_t *)v86);
    v42 = a1;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_BYTE *)(a1 + 328) = 0;
    *(_BYTE *)(a1 + 344) = 0;
    *(_OWORD *)(a1 + 352) = 0u;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_BYTE *)(a1 + 176) = 0;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_OWORD *)(a1 + 264) = 0u;
    *(_OWORD *)(a1 + 280) = 0u;
    *(_OWORD *)(a1 + 296) = 0u;
    *(_OWORD *)(a1 + 308) = 0u;
    if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
      goto LABEL_56;
    goto LABEL_44;
  }
  v18 = 0;
  v19 = 0;
  *(_QWORD *)&v67 = &v106[5];
  v20 = 536;
  v58 = v14;
  while (1)
  {
    v21 = v15;
    if ((_QWORD)v64 - 1 == v19)
      v15 = v63;
    else
      v15 = 128;
    v22 = 1;
    if (*(_QWORD *)(a7 + 16))
      v22 = 2;
    v23 = *(void ***)(a7 + 80);
    v73 = 0;
    v74 = 0;
    v24 = v23 ? v22 + 1 : v22;
    v72 = 0;
    LOWORD(v106[4]) = 287;
    v106[5] = *(id *)(a7 + 64);
    LODWORD(v107) = 0;
    DWORD1(v107) = objc_msgSend(*(id *)(a7 + 64), sel_length);
    *((_QWORD *)&v107 + 1) = 0xFFFFFFFF00000000;
    v27 = v73;
    if (!v73)
      break;
    v14 = v74;
    re::DynamicString::operator=(v74, (re::DynamicString *)v106);
    *((_WORD *)v14 + 16) = v106[4];
    NS::SharedPtr<MTL::Texture>::operator=((void **)v14 + 5, (void **)&v106[5]);
    v28 = (void *)v106[5];
    *((_OWORD *)v14 + 3) = v107;
    if (v28)
    {

      v106[5] = 0;
    }
    v29 = (_anonymous_namespace_ *)v106[0];
    if (v106[0] && ((uint64_t)v106[1] & 1) != 0)
      v29 = (_anonymous_namespace_ *)(*(uint64_t (**)(const void *, const void *))(*(_QWORD *)v106[0] + 40))(v106[0], v106[2]);
    if (!*(_QWORD *)(a7 + 16))
    {
      v30 = 1;
      if (!v23)
        goto LABEL_35;
LABEL_29:
      LOWORD(v106[4]) = 287;
      v106[5] = *(id *)(a7 + 80);
      LODWORD(v107) = 0;
      DWORD1(v107) = objc_msgSend(*(id *)(a7 + 80), sel_length);
      *((_QWORD *)&v107 + 1) = 0xFFFFFFFF00000000;
      if (v27 <= v30)
        goto LABEL_55;
      v23 = (void **)((char *)v14 + 64 * v30);
      re::DynamicString::operator=((re::DynamicString *)v23, (re::DynamicString *)v106);
      *((_WORD *)v23 + 16) = v106[4];
      NS::SharedPtr<MTL::Texture>::operator=(v23 + 5, (void **)&v106[5]);
      *((_OWORD *)v23 + 3) = v107;
      if (v106[5])
      {

        v106[5] = 0;
      }
      if (v106[0] && ((uint64_t)v106[1] & 1) != 0)
        (*(void (**)(const void *, const void *))(*(_QWORD *)v106[0] + 40))(v106[0], v106[2]);
      goto LABEL_35;
    }
    strcpy((char *)&v106[4], "1");
    v106[5] = *(id *)(a7 + 72);
    LODWORD(v107) = 0;
    DWORD1(v107) = objc_msgSend(*(id *)(a7 + 72), sel_length);
    *((_QWORD *)&v107 + 1) = 0xFFFFFFFF00000000;
    if (v27 <= 1)
      goto LABEL_54;
    re::DynamicString::operator=((re::DynamicString *)((char *)v14 + 64), (re::DynamicString *)v106);
    *((_WORD *)v14 + 48) = v106[4];
    NS::SharedPtr<MTL::Texture>::operator=((void **)v14 + 13, (void **)&v106[5]);
    *((_OWORD *)v14 + 7) = v107;
    if (v106[5])
    {

      v106[5] = 0;
    }
    v29 = (_anonymous_namespace_ *)v106[0];
    if (v106[0] && ((uint64_t)v106[1] & 1) != 0)
      v29 = (_anonymous_namespace_ *)(*(uint64_t (**)(const void *, const void *))(*(_QWORD *)v106[0] + 40))(v106[0], v106[2]);
    v30 = 2;
    if (v23)
      goto LABEL_29;
LABEL_35:
    *(_QWORD *)&v31 = 0x7F0000007FLL;
    *((_QWORD *)&v31 + 1) = 0x7F0000007FLL;
    v71[0] = v61;
    v71[1] = v31;
    *(_QWORD *)&v88 = v19;
    v106[0] = (const void *)v15;
    (*(void (**)(_BYTE *__return_ptr, _QWORD, __int128 *, const void **))(**(_QWORD **)(a10 + 32) + 16))(v86, *(_QWORD *)(a10 + 32), &v88, v106);
    v25 = v76;
    if ((unint64_t)v76 <= v19)
      goto LABEL_49;
    v32 = (float32x4_t *)&v77[v18];
    v23 = (void **)v86;
    v33 = *(float32x4_t *)&v86[16];
    *v32 = *(float32x4_t *)v86;
    v32[1] = v33;
    if (*(_BYTE *)(a2 + 1184))
    {
      v34 = v80;
      v35 = *v32;
      v34.i32[3] = 0;
      v35.i32[3] = 0;
      v80 = vminnmq_f32(v34, v35);
      v36 = v81;
      v37 = v32[1];
      v36.i32[3] = 0;
      v37.i32[3] = 0;
      v81 = vmaxnmq_f32(v36, v37);
    }
    v70[0] = 0xD2E811B7E678E9E0;
    v70[1] = (uint64_t)"PrimitiveRendering Instance";
    v38 = *(_DWORD *)(a7 + 16);
    v39 = *(_DWORD *)(a7 + 8);
    *(_OWORD *)v86 = xmmword_2260E5F10;
    *(_OWORD *)&v86[16] = xmmword_2260E5F20;
    *(_OWORD *)&v86[32] = xmmword_2260E5F40;
    v87 = xmmword_2260E5D70;
    v69 = 0;
    v68 = 0;
    re::MeshPart::MeshPart((uint64_t)&v88, v70, v19, (uint64_t)v14, v27, v38, v39, v15, v71, v19, (__int128 *)v86, (re::MeshPartFlags *)&v68, -1, 0);
    v25 = (uint64_t *)*((_QWORD *)&v82 + 1);
    if (*((_QWORD *)&v82 + 1) <= v19)
      goto LABEL_50;
    re::MeshPart::operator=((uint64_t *)(v83 + v20 - 536), (uint64_t *)&v88);
    re::StringID::destroyString((re::StringID *)&v98);
    re::FixedArray<re::StringID>::deinit(v97);
    re::AttributeTable::~AttributeTable((re::AttributeTable *)&v88);
    re::StringID::destroyString((re::StringID *)v70);
    v25 = (uint64_t *)*((_QWORD *)&v82 + 1);
    if (*((_QWORD *)&v82 + 1) <= v19)
      goto LABEL_51;
    *(_BYTE *)(v83 + v20) = *(_BYTE *)a7;
    *(_QWORD *)&v88 = v19;
    (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(a9 + 32) + 16))(*(_QWORD *)(a9 + 32), &v88);
    v40 = re::MaterialParameterBlock::copyCurrentStateAsMaterialParameterTable(a8, a3);
    v14 = v58;
    v25 = (uint64_t *)*((_QWORD *)v58 + 1);
    if ((unint64_t)v25 <= v19)
      goto LABEL_52;
    *(_QWORD *)(*((_QWORD *)v58 + 2) + 8 * v19) = v40;
    v25 = *(uint64_t **)(v21 + 8);
    if ((unint64_t)v25 <= v19)
      goto LABEL_53;
    v15 = v21;
    *(_QWORD *)(*(_QWORD *)(v21 + 16) + 8 * v19) = a4;
    v17 = (_anonymous_namespace_ *)re::FixedArray<re::NamedVertexBuffer>::deinit(&v72);
    v20 += 560;
    v18 += 32;
    if ((_QWORD)v64 == ++v19)
      goto LABEL_43;
  }
  *(_QWORD *)v99 = 0;
  v91 = 0u;
  v92 = 0u;
  v89 = 0u;
  v90 = 0u;
  v88 = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  *(_DWORD *)v86 = 136315906;
  *(_QWORD *)&v86[4] = "operator[]";
  *(_WORD *)&v86[12] = 1024;
  *(_DWORD *)&v86[14] = 468;
  *(_WORD *)&v86[18] = 2048;
  *(_QWORD *)&v86[20] = 0;
  *(_WORD *)&v86[28] = 2048;
  *(_QWORD *)&v86[30] = 0;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_49:
  *(_QWORD *)v99 = 0;
  v91 = 0u;
  v92 = 0u;
  v89 = 0u;
  v90 = 0u;
  v88 = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  LODWORD(v106[0]) = 136315906;
  *(const void **)((char *)v106 + 4) = "operator[]";
  WORD2(v106[1]) = 1024;
  *(_DWORD *)((char *)&v106[1] + 6) = 468;
  WORD1(v106[2]) = 2048;
  *(const void **)((char *)&v106[2] + 4) = (const void *)v19;
  WORD2(v106[3]) = 2048;
  *(const void **)((char *)&v106[3] + 6) = v25;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_50:
  v85 = 0;
  v107 = 0u;
  v108 = 0u;
  memset(v106, 0, sizeof(v106));
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  *(_DWORD *)v99 = 136315906;
  *(_QWORD *)&v99[4] = "operator[]";
  v100 = 1024;
  v101 = 468;
  v102 = 2048;
  v103 = v19;
  v104 = 2048;
  v105 = v25;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_51:
  *(_QWORD *)v86 = 0;
  *((_OWORD *)v23 + 7) = 0u;
  *((_OWORD *)v23 + 8) = 0u;
  *((_OWORD *)v23 + 5) = 0u;
  *((_OWORD *)v23 + 6) = 0u;
  *((_OWORD *)v23 + 4) = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  LODWORD(v106[0]) = 136315906;
  *(const void **)((char *)v106 + 4) = "operator[]";
  WORD2(v106[1]) = 1024;
  *(_DWORD *)((char *)&v106[1] + 6) = 468;
  WORD1(v106[2]) = 2048;
  *(const void **)((char *)&v106[2] + 4) = (const void *)v19;
  WORD2(v106[3]) = 2048;
  *(const void **)((char *)&v106[3] + 6) = v25;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_52:
  *(_QWORD *)v86 = 0;
  *((_OWORD *)v23 + 7) = 0u;
  *((_OWORD *)v23 + 8) = 0u;
  *((_OWORD *)v23 + 5) = 0u;
  *((_OWORD *)v23 + 6) = 0u;
  *((_OWORD *)v23 + 4) = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  LODWORD(v106[0]) = 136315906;
  *(const void **)((char *)v106 + 4) = "operator[]";
  WORD2(v106[1]) = 1024;
  *(_DWORD *)((char *)&v106[1] + 6) = 468;
  WORD1(v106[2]) = 2048;
  *(const void **)((char *)&v106[2] + 4) = (const void *)v19;
  WORD2(v106[3]) = 2048;
  *(const void **)((char *)&v106[3] + 6) = v25;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_53:
  *(_QWORD *)v86 = 0;
  *((_OWORD *)v23 + 7) = 0u;
  *((_OWORD *)v23 + 8) = 0u;
  *((_OWORD *)v23 + 5) = 0u;
  *((_OWORD *)v23 + 6) = 0u;
  *((_OWORD *)v23 + 4) = 0u;
  v27 = MEMORY[0x24BDACB70];
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  LODWORD(v106[0]) = 136315906;
  *(const void **)((char *)v106 + 4) = "operator[]";
  WORD2(v106[1]) = 1024;
  *(_DWORD *)((char *)&v106[1] + 6) = 468;
  WORD1(v106[2]) = 2048;
  *(const void **)((char *)&v106[2] + 4) = (const void *)v19;
  WORD2(v106[3]) = 2048;
  *(const void **)((char *)&v106[3] + 6) = v25;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_54:
  *(_QWORD *)v99 = 0;
  v30 = (unint64_t)v86;
  v91 = 0u;
  v92 = 0u;
  v89 = 0u;
  v90 = 0u;
  v88 = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  *(_DWORD *)v86 = 136315906;
  *(_QWORD *)&v86[4] = "operator[]";
  *(_WORD *)&v86[12] = 1024;
  *(_DWORD *)&v86[14] = 468;
  *(_WORD *)&v86[18] = 2048;
  *(_QWORD *)&v86[20] = 1;
  *(_WORD *)&v86[28] = 2048;
  *(_QWORD *)&v86[30] = v27;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_55:
  *(_QWORD *)v99 = 0;
  v91 = 0u;
  v92 = 0u;
  v89 = 0u;
  v90 = 0u;
  v88 = 0u;
  v42 = MEMORY[0x24BDACB70];
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  *(_DWORD *)v86 = 136315906;
  *(_QWORD *)&v86[4] = "operator[]";
  *(_WORD *)&v86[12] = 1024;
  *(_DWORD *)&v86[14] = 468;
  *(_WORD *)&v86[18] = 2048;
  *(_QWORD *)&v86[20] = v30;
  *(_WORD *)&v86[28] = 2048;
  *(_QWORD *)&v86[30] = v27;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_56:
  dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
LABEL_44:
  *(_QWORD *)(v42 + 368) = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v42 + 376) = _D0;
  *(_DWORD *)(v42 + 384) = 1065353216;
  *(_OWORD *)(v42 + 392) = 0u;
  *(_OWORD *)(v42 + 408) = 0u;
  *(_DWORD *)(v42 + 423) = 0;
  *(_QWORD *)(v42 + 428) = 0xFFFFFFFF00000001;
  *(_BYTE *)(v42 + 496) = 0;
  *(_QWORD *)(v42 + 544) = 0;
  *(_BYTE *)(v42 + 560) = 0;
  *(_QWORD *)(v42 + 640) = 0x10100010001;
  v48 = a3;
  v49 = (_QWORD *)(*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(_QWORD *)a3 + 32))(a3, 24, 8);
  v49[1] = 0;
  v49[2] = 0;
  *v49 = 0;
  re::FixedArray<re::DataArrayHandle<re::MeshInstance>>::init<re::DataArrayHandle<re::MeshInstance>&>(v49, (uint64_t)a3, v86);
  v50 = v49[1];
  *(_QWORD *)v42 = v49[2];
  *(_QWORD *)(v42 + 8) = v50;
  v106[0] = &v80;
  v106[1] = (const void *)1;
  v51 = (*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(_QWORD *)v48 + 32))(v48, 72, 8);
  *(_QWORD *)(v42 + 24) = re::MeshBoundingBoxes::MeshBoundingBoxes(v51, (uint64_t)a3, v106, 1);
  v106[0] = v77;
  v106[1] = v76;
  v52 = (*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(_QWORD *)v48 + 32))(v48, 72, 8);
  v53 = re::MeshBoundingBoxes::MeshBoundingBoxes(v52, (uint64_t)a3, v106, 1);
  *(_QWORD *)(v42 + 32) = v53;
  v54 = v81;
  *(float32x4_t *)(v42 + 448) = v80;
  *(float32x4_t *)(v42 + 464) = v54;
  *(_QWORD *)(v42 + 480) = v53;
  *(_OWORD *)(v42 + 48) = v67;
  *(_OWORD *)(v42 + 64) = v64;
  *(_OWORD *)(v42 + 80) = v63;
  *(_OWORD *)(v42 + 96) = v62;
  v55 = *((_QWORD *)v14 + 1);
  *(_QWORD *)(v42 + 184) = *((_QWORD *)v14 + 2);
  *(_QWORD *)(v42 + 192) = v55;
  v56 = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v42 + 112) = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(v42 + 120) = v56;
  *(_DWORD *)(v42 + 408) = *(_DWORD *)(v42 + 408) & 0xFFFFFFF7 | (8 * *(unsigned __int8 *)(a2 + 1184));
  *(_DWORD *)(v42 + 412) |= 8u;
  re::MeshInstance::~MeshInstance((re::MeshInstance *)&v88);
  if (v75 && v76)
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v75 + 40))(v75, v77);
  re::MeshModel::~MeshModel((re::MeshModel *)&v78);
}

unint64_t *re::PrimitiveMeshAttribute::uniformCustomAttribute<float>@<X0>(uint64_t *a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t *result;
  int v5;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = &str_110;
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 48) = 0;
  result = re::StringID::operator=((unint64_t *)a3, a1);
  *((_WORD *)result + 8) = 256;
  *((_BYTE *)result + 18) = 28;
  v5 = *a2;
  if (*((_DWORD *)result + 12))
    *((_DWORD *)result + 12) = 0;
  *((_DWORD *)result + 8) = v5;
  return result;
}

unint64_t *re::PrimitiveMeshAttribute::uniformCustomAttribute<re::Vector2<float>>@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t *result;
  unint64_t v5;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = &str_110;
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 48) = 0;
  result = re::StringID::operator=((unint64_t *)a3, a1);
  *((_WORD *)result + 8) = 256;
  *((_BYTE *)result + 18) = 29;
  v5 = *a2;
  if (*((_DWORD *)result + 12) != 1)
    *((_DWORD *)result + 12) = 1;
  result[4] = v5;
  return result;
}

unint64_t *re::PrimitiveMeshAttribute::uniformCustomAttribute<re::Vector3<float>>@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t *result;
  int v5;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = &str_110;
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 48) = 0;
  result = re::StringID::operator=((unint64_t *)a3, a1);
  *((_WORD *)result + 8) = 256;
  *((_BYTE *)result + 18) = 30;
  v5 = *((_DWORD *)result + 12);
  *((_OWORD *)result + 2) = *a2;
  if (v5 != 2)
    *((_DWORD *)result + 12) = 2;
  return result;
}

unint64_t *re::PrimitiveMeshAttribute::uniformCustomAttribute<re::Vector4<float>>@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t *result;
  int v5;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = &str_110;
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 48) = 0;
  result = re::StringID::operator=((unint64_t *)a3, a1);
  *((_WORD *)result + 8) = 256;
  *((_BYTE *)result + 18) = 31;
  v5 = *((_DWORD *)result + 12);
  *((_OWORD *)result + 2) = *a2;
  if (v5 != 3)
    *((_DWORD *)result + 12) = 3;
  return result;
}

void re::PrimitiveRenderer::~PrimitiveRenderer(re::PrimitiveRenderer *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *(_BYTE *)this = 0;
  re::DynamicArray<re::PrimitiveRenderingContext>::deinit((uint64_t)this + 256);
  re::DynamicArray<re::PrimitiveShapeGeometry>::deinit((uint64_t)this + 208);
  v2 = (void *)*((_QWORD *)this + 24);
  if (v2)
  {

    *((_QWORD *)this + 24) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 23);
  if (v3)
  {

    *((_QWORD *)this + 23) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 22);
  if (v4)
  {

    *((_QWORD *)this + 22) = 0;
  }
  v5 = (void *)*((_QWORD *)this + 12);
  if (v5)
  {

    *((_QWORD *)this + 12) = 0;
  }
  v6 = (void *)*((_QWORD *)this + 11);
  if (v6)
  {

    *((_QWORD *)this + 11) = 0;
  }
  v7 = (void *)*((_QWORD *)this + 10);
  if (v7)
  {

    *((_QWORD *)this + 10) = 0;
  }
}

uint64_t re::PrimitiveRenderer::init(re::PrimitiveRenderer *this, id *a2)
{
  uint64_t result;

  *((_QWORD *)this + 31) = a2;
  re::createRectangle((uint64_t)this + 16, a2 + 23);
  re::createCylinder(4uLL, (uint64_t)this + 112, (id *)(*((_QWORD *)this + 31) + 184));
  re::PrimitiveRenderer::createUnitBox(this);
  re::PrimitiveRenderer::createRectangle(this);
  re::PrimitiveRenderer::createCylinder(this, 0x10uLL);
  re::PrimitiveRenderer::createUVSphere(this, 0x10uLL);
  re::PrimitiveRenderer::createCone(this, 0x10uLL);
  re::PrimitiveRenderer::createCapsule(this, 0x10uLL);
  re::PrimitiveRenderer::createBoneBipyramid(this);
  result = re::PrimitiveRenderer::createHemisphere(this, 0x10uLL);
  *(_BYTE *)this = 1;
  return result;
}

void re::PrimitiveRenderer::createUnitBox(re::PrimitiveRenderer *this)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  int v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  float v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _QWORD *v23;
  id *v24;
  __int128 v25;
  _QWORD v26[2];
  _QWORD v27[2];
  float32x4_t *v28[2];
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32[4];
  int32x4_t v33;
  __int128 v34;
  id v35;
  id v36;
  id v37;
  _OWORD v38[36];
  _BYTE v39[4];
  int v40;
  _QWORD v41[73];

  v41[72] = *MEMORY[0x24BDAC8D0];
  v2 = v39;
  bzero(v39, 0x240uLL);
  bzero(v38, 0x240uLL);
  v3 = 0;
  v4 = 0;
  v5 = &v40;
  v6 = v41;
  v7 = 1;
  v8 = 2;
  v9 = v38;
  do
  {
    v10 = -1;
    v11 = v8;
    v12 = v6;
    v13 = v7;
    v14 = v5;
    do
    {
      v15 = 0;
      v16 = v10;
      v17 = (float)v10;
      v18 = &v9[v4];
      v19 = (uint64_t)v14 + 16 * v4 - 12 * (v13 / 3);
      v20 = (uint64_t)v12 + 16 * v4 - 12 * (v11 / 3);
      v21 = &v2[16 * v4];
      v22 = 5u;
      do
      {
        *(float *)&v21[1 * v15] = v17;
        *(_DWORD *)(v20 + 1 * v15) = dword_226134070[v15];
        *(_DWORD *)(v19 + 1 * v15) = dword_226134070[v22];
        v23 = &v38[v4];
        *v23 = 0;
        v23[1] = 0;
        *(float *)&v18[v15] = v17;
        ++v4;
        ++v15;
        --v22;
      }
      while (v15 != 6);
      v10 = v16 + 2;
      v14 += 4;
      v13 += 4;
      ++v12;
      v11 += 2;
    }
    while (v16 < 0);
    ++v3;
    v9 = (_OWORD *)((char *)v9 + 4);
    ++v5;
    ++v7;
    v6 = (_QWORD *)((char *)v6 + 4);
    ++v8;
    v2 += 4;
  }
  while (v3 != 3);
  v24 = (id *)(*((_QWORD *)this + 31) + 184);
  *(_QWORD *)&v25 = 0x7F0000007FLL;
  *((_QWORD *)&v25 + 1) = 0x7F0000007FLL;
  v33 = vdupq_n_s32(0x7F800000u);
  v34 = v25;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  v29.i64[0] = 0xBF800000BF800000;
  v29.i64[1] = 3212836864;
  v30 = 0x3F8000003F800000;
  v31 = 1065353216;
  v28[0] = (float32x4_t *)v39;
  v28[1] = (float32x4_t *)36;
  v27[0] = 0;
  v27[1] = 0;
  v26[0] = v38;
  v26[1] = 36;
  re::setShape(v28, v27, v26, (uint64_t)v32, v24, &v29);
  re::DynamicArray<re::PrimitiveShapeGeometry>::add((re::PrimitiveRenderer *)((char *)this + 208), v32);
  if (v37)
  {

    v37 = 0;
  }
  if (v36)
  {

    v36 = 0;
  }
  if (v35)

}

void re::PrimitiveRenderer::createRectangle(re::PrimitiveRenderer *this)
{
  id *v2;
  __int128 v3;
  id v4[4];
  int32x4_t v5;
  __int128 v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = (id *)(*((_QWORD *)this + 31) + 184);
  *(_QWORD *)&v3 = 0x7F0000007FLL;
  *((_QWORD *)&v3 + 1) = 0x7F0000007FLL;
  v5 = vdupq_n_s32(0x7F800000u);
  v6 = v3;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  re::createRectangle((uint64_t)v4, v2);
  re::DynamicArray<re::PrimitiveShapeGeometry>::add((re::PrimitiveRenderer *)((char *)this + 208), v4);
  if (v9)
  {

    v9 = 0;
  }
  if (v8)
  {

    v8 = 0;
  }
  if (v7)

}

void re::PrimitiveRenderer::createCylinder(re::PrimitiveRenderer *this, unint64_t a2)
{
  id *v3;
  __int128 v4;
  id v5[4];
  int32x4_t v6;
  __int128 v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = (id *)(*((_QWORD *)this + 31) + 184);
  *(_QWORD *)&v4 = 0x7F0000007FLL;
  *((_QWORD *)&v4 + 1) = 0x7F0000007FLL;
  v6 = vdupq_n_s32(0x7F800000u);
  v7 = v4;
  v9 = 0;
  v10 = 0;
  v8 = 0;
  re::createCylinder(a2, (uint64_t)v5, v3);
  re::DynamicArray<re::PrimitiveShapeGeometry>::add((re::PrimitiveRenderer *)((char *)this + 208), v5);
  if (v10)
  {

    v10 = 0;
  }
  if (v9)
  {

    v9 = 0;
  }
  if (v8)

}

void re::PrimitiveRenderer::createUVSphere(re::PrimitiveRenderer *this, unint64_t a2)
{
  id *v3;
  __int128 v4;
  id v5[4];
  int32x4_t v6;
  __int128 v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = (id *)(*((_QWORD *)this + 31) + 184);
  *(_QWORD *)&v4 = 0x7F0000007FLL;
  *((_QWORD *)&v4 + 1) = 0x7F0000007FLL;
  v6 = vdupq_n_s32(0x7F800000u);
  v7 = v4;
  v9 = 0;
  v10 = 0;
  v8 = 0;
  re::createUVSphere(a2, (uint64_t)v5, v3, 0.0);
  re::DynamicArray<re::PrimitiveShapeGeometry>::add((re::PrimitiveRenderer *)((char *)this + 208), v5);
  if (v10)
  {

    v10 = 0;
  }
  if (v9)
  {

    v9 = 0;
  }
  if (v8)

}

uint64_t re::PrimitiveRenderer::createCone(re::PrimitiveRenderer *this, unint64_t a2)
{
  unint64_t v4;
  float v5;
  __float2 v6;
  __float2 v7;
  __n128 v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  float32x2_t v14;
  float32x2_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id *v20;
  __n128 v21;
  uint64_t result;
  _QWORD v23[2];
  float32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  float32x4_t v28;
  __int128 v29;
  _QWORD v30[2];
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD v34[2];
  unint64_t v35;
  int v36;
  unint64_t v37;
  __n128 v38[4];
  id v39;
  id v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v37 = 0;
  v34[1] = 0;
  v35 = 0;
  v33 = 0;
  v34[0] = 0;
  v36 = 0;
  v30[1] = 0;
  v31 = 0;
  v30[0] = 0;
  v32 = 0;
  v29 = xmmword_2260E5F30;
  if (a2)
  {
    v4 = 0;
    v5 = 6.2832 / (float)a2;
    do
    {
      v6 = __sincosf_stret(v5 * (float)v4++);
      v7 = __sincosf_stret(v5 * (float)v4);
      v8.n128_u32[0] = 0;
      v8.n128_u32[1] = LODWORD(v6.__cosval);
      v8.n128_u64[1] = LODWORD(v6.__sinval);
      v38[0] = v8;
      v8.n128_u32[0] = 0;
      v8.n128_u32[1] = LODWORD(v7.__cosval);
      v8.n128_u64[1] = LODWORD(v7.__sinval);
      v24 = (float32x4_t)v8;
      v28 = (float32x4_t)xmmword_2260E5F10;
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v34, (__n128 *)&v28);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v34, v38);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v34, (__n128 *)&v24);
      v9 = vaddq_f32((float32x4_t)v38[0], (float32x4_t)xmmword_2261027D0);
      v10 = vaddq_f32(v24, (float32x4_t)xmmword_2261027D0);
      v11 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL), vnegq_f32(v9)), v10, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL));
      v12 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL);
      v13 = (int32x4_t)vmulq_f32(v11, v11);
      v13.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v13, 2), *(float32x2_t *)v13.i8)).u32[0];
      v14 = vrsqrte_f32((float32x2_t)v13.u32[0]);
      v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v14, v14)));
      v28 = vmulq_n_f32(v12, vmul_f32(v15, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(v15, v15))).f32[0]);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v30, (__n128 *)&v28);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v30, (__n128 *)&v28);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v30, (__n128 *)&v28);
      v27 = 0uLL;
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v34, &v27);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v34, (__n128 *)&v24);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v34, v38);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v30, (__n128 *)&v29);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v30, (__n128 *)&v29);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v30, (__n128 *)&v29);
    }
    while (a2 != v4);
    v16 = v37;
    v17 = v35;
    v18 = v33;
    v19 = v31;
  }
  else
  {
    v19 = 0;
    v18 = 0;
    v17 = 0;
    v16 = 0;
  }
  v20 = (id *)(*((_QWORD *)this + 31) + 184);
  v21.n128_u64[0] = 0x7F0000007FLL;
  v21.n128_u64[1] = 0x7F0000007FLL;
  v38[2] = (__n128)vdupq_n_s32(0x7F800000u);
  v38[3] = v21;
  v40 = 0;
  v41 = 0;
  v39 = 0;
  v24 = (float32x4_t)xmmword_226134040;
  v25 = 0x3F8000003F800000;
  v26 = 1065353216;
  v28.i64[0] = v16;
  v28.i64[1] = v17;
  v27 = 0uLL;
  v23[0] = v18;
  v23[1] = v19;
  re::setShape((float32x4_t **)&v28, &v27, v23, (uint64_t)v38, v20, &v24);
  re::DynamicArray<re::PrimitiveShapeGeometry>::add((re::PrimitiveRenderer *)((char *)this + 208), (id *)v38);
  if (v41)
  {

    v41 = 0;
  }
  if (v40)
  {

    v40 = 0;
  }
  if (v39)

  if (v30[0] && v33)
    (*(void (**)(void))(*(_QWORD *)v30[0] + 40))();
  result = v34[0];
  if (v34[0])
  {
    if (v37)
      return (*(uint64_t (**)(void))(*(_QWORD *)v34[0] + 40))();
  }
  return result;
}

void re::PrimitiveRenderer::createCapsule(re::PrimitiveRenderer *this, unint64_t a2)
{
  id *v3;
  __int128 v4;
  id v5[4];
  int32x4_t v6;
  __int128 v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = (id *)(*((_QWORD *)this + 31) + 184);
  *(_QWORD *)&v4 = 0x7F0000007FLL;
  *((_QWORD *)&v4 + 1) = 0x7F0000007FLL;
  v6 = vdupq_n_s32(0x7F800000u);
  v7 = v4;
  v9 = 0;
  v10 = 0;
  v8 = 0;
  re::createUVSphere(a2, (uint64_t)v5, v3, 2.0);
  re::DynamicArray<re::PrimitiveShapeGeometry>::add((re::PrimitiveRenderer *)((char *)this + 208), v5);
  if (v10)
  {

    v10 = 0;
  }
  if (v9)
  {

    v9 = 0;
  }
  if (v8)

}

uint64_t re::PrimitiveRenderer::createBoneBipyramid(re::PrimitiveRenderer *this)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  float32x4_t v14;
  id *v15;
  __n128 v16;
  uint64_t result;
  __int128 v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  _QWORD v26[2];
  unint64_t v27;
  int v28;
  unint64_t v29;
  _QWORD v30[2];
  unint64_t v31;
  int v32;
  unint64_t v33;
  __n128 v34[4];
  id v35;
  id v36;
  id v37;
  uint64_t v38;

  v2 = 0;
  v38 = *MEMORY[0x24BDAC8D0];
  v33 = 0;
  v30[1] = 0;
  v31 = 0;
  v29 = 0;
  v30[0] = 0;
  v32 = 0;
  v26[1] = 0;
  v27 = 0;
  v26[0] = 0;
  v3 = xmmword_2260E5F10;
  v25 = (float32x4_t)xmmword_2260E5F10;
  LODWORD(v3) = 1036831949;
  v18 = v3;
  v28 = 0;
  do
  {
    v4 = v2 + 1;
    v5 = (float32x4_t)v18;
    v6 = (float32x4_t)v18;
    v6.f32[1] = flt_226134060[v2] * *(float *)&v18;
    v6.f32[2] = flt_226134060[(v2 + 1) & 3] * *(float *)&v18;
    v34[0] = (__n128)v6;
    v5.i32[1] = v6.i32[2];
    v5.f32[2] = flt_226134060[((_BYTE)v2 + 2) & 3] * *(float *)&v18;
    v19 = (__n128)v5;
    v7 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL), vnegq_f32(v5)), v6, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL));
    v8 = (int32x4_t)vmulq_f32(v7, v7);
    v8.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v8, 2), *(float32x2_t *)v8.i8)).u32[0];
    v9 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL);
    *(float32x2_t *)v7.f32 = vrsqrte_f32((float32x2_t)v8.u32[0]);
    *(float32x2_t *)v7.f32 = vmul_f32(*(float32x2_t *)v7.f32, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32)));
    v24 = vmulq_n_f32(v9, vmul_f32(*(float32x2_t *)v7.f32, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(*(float32x2_t *)v7.f32, *(float32x2_t *)v7.f32))).f32[0]);
    v10 = vsubq_f32(v6, v25);
    v11 = vsubq_f32(v5, v25);
    v12 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), vnegq_f32(v10)), v11, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL));
    v13 = (int32x4_t)vmulq_f32(v12, v12);
    v13.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v13, 2), *(float32x2_t *)v13.i8)).u32[0];
    v14 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL);
    *(float32x2_t *)v12.f32 = vrsqrte_f32((float32x2_t)v13.u32[0]);
    *(float32x2_t *)v12.f32 = vmul_f32(*(float32x2_t *)v12.f32, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32)));
    v23 = vmulq_n_f32(v14, vmul_f32(*(float32x2_t *)v12.f32, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v12.f32))).f32[0]);
    v22 = 0uLL;
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v30, &v22);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v30, &v19);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v30, v34);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v26, (__n128 *)&v24);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v26, (__n128 *)&v24);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v26, (__n128 *)&v24);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v30, (__n128 *)&v25);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v30, v34);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v30, &v19);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v26, (__n128 *)&v23);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v26, (__n128 *)&v23);
    re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v26, (__n128 *)&v23);
    v2 = v4;
  }
  while (v4 != 4);
  v15 = (id *)(*((_QWORD *)this + 31) + 184);
  v16.n128_u64[0] = 0x7F0000007FLL;
  v16.n128_u64[1] = 0x7F0000007FLL;
  v34[2] = (__n128)vdupq_n_s32(0x7F800000u);
  v34[3] = v16;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  v19.n128_u64[0] = 0xBF800000BF800000;
  v19.n128_u64[1] = 3212836864;
  v20 = 0x3F8000003F800000;
  v21 = 1065353216;
  v24.i64[0] = v33;
  v24.i64[1] = v31;
  v23 = 0uLL;
  v22.n128_u64[0] = v29;
  v22.n128_u64[1] = v27;
  re::setShape((float32x4_t **)&v24, &v23, &v22, (uint64_t)v34, v15, (float32x4_t *)&v19);
  re::DynamicArray<re::PrimitiveShapeGeometry>::add((re::PrimitiveRenderer *)((char *)this + 208), (id *)v34);
  if (v37)
  {

    v37 = 0;
  }
  if (v36)
  {

    v36 = 0;
  }
  if (v35)

  if (v26[0] && v29)
    (*(void (**)(void))(*(_QWORD *)v26[0] + 40))();
  result = v30[0];
  if (v30[0])
  {
    if (v33)
      return (*(uint64_t (**)(void))(*(_QWORD *)v30[0] + 40))();
  }
  return result;
}

uint64_t re::PrimitiveRenderer::createHemisphere(re::PrimitiveRenderer *this, unint64_t a2)
{
  float v4;
  float v5;
  uint64_t v6;
  __float2 v7;
  unint64_t v8;
  uint64_t v9;
  __float2 v10;
  __float2 v11;
  __int128 v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  __float2 v16;
  __n128 v17;
  __float2 v18;
  float32x4_t v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id *v28;
  __n128 v29;
  uint64_t result;
  __int128 v31;
  float cosval;
  float v33;
  float32x4_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  __n128 v39;
  __n128 v40;
  float32x4_t v41;
  float32x4_t v42;
  _QWORD v43[2];
  unint64_t v44;
  int v45;
  unint64_t v46;
  _QWORD v47[2];
  unint64_t v48;
  int v49;
  unint64_t v50;
  __n128 v51[4];
  id v52;
  id v53;
  id v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v50 = 0;
  v47[1] = 0;
  v48 = 0;
  v47[0] = 0;
  v49 = 0;
  v46 = 0;
  v43[1] = 0;
  v44 = 0;
  v43[0] = 0;
  v45 = 0;
  v42 = (float32x4_t)xmmword_2260E5F10;
  if (a2)
  {
    v4 = 6.2832 / (float)a2;
    v5 = 3.1416 / (float)(a2 >> 1);
    v7 = __sincosf_stret(v5);
    *(float *)&v6 = v7.__cosval;
    *(_QWORD *)&v31 = v6;
    v8 = 0;
    if (a2 >> 2 <= 2)
      v9 = 2;
    else
      v9 = a2 >> 2;
    do
    {
      v10 = __sincosf_stret(v4 * (float)v8);
      cosval = v10.__cosval;
      LODWORD(v33) = *(_QWORD *)&v10;
      v11 = __sincosf_stret(v4 * (float)++v8);
      v12 = v31;
      v13 = (__n128)v31;
      v13.n128_f32[1] = v7.__sinval * cosval;
      v13.n128_f32[2] = v7.__sinval * v33;
      v51[0] = v13;
      *((float *)&v12 + 1) = v7.__sinval * v11.__cosval;
      *((float *)&v12 + 2) = v7.__sinval * v11.__sinval;
      v35 = v12;
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v47, (__n128 *)&v42);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v47, v51);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v47, (__n128 *)&v35);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v43, (__n128 *)&v42);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v43, v51);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v43, (__n128 *)&v35);
      if (a2 >= 8)
      {
        v14 = 1;
        do
        {
          v16 = __sincosf_stret(v5 * (float)v14);
          *(float *)&v15 = v16.__cosval;
          v34.i64[0] = v15;
          v18 = __sincosf_stret(v5 * (float)++v14);
          v17.n128_f32[0] = v18.__cosval;
          v19 = v34;
          v19.f32[1] = cosval * v16.__sinval;
          v19.f32[2] = v33 * v16.__sinval;
          v20 = v17;
          v20.n128_f32[1] = cosval * v18.__sinval;
          v20.n128_f32[2] = v33 * v18.__sinval;
          v40 = v20;
          v41 = v19;
          v17.n128_f32[1] = v11.__cosval * v18.__sinval;
          v17.n128_f32[2] = v11.__sinval * v18.__sinval;
          v39 = v17;
          v21 = (__n128)v34;
          v21.n128_f32[1] = v11.__cosval * v16.__sinval;
          v21.n128_f32[2] = v11.__sinval * v16.__sinval;
          v38 = v21;
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v47, (__n128 *)&v41);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v47, &v40);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v47, &v39);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v43, (__n128 *)&v41);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v43, &v40);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v43, &v39);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v47, (__n128 *)&v41);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v47, &v39);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v47, &v38);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v43, (__n128 *)&v41);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v43, &v39);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v43, &v38);
        }
        while (v9 != v14);
      }
      v22.n128_u32[0] = 0;
      v22.n128_f32[1] = cosval;
      v22.n128_u64[1] = LODWORD(v33);
      LODWORD(v23) = 0;
      DWORD1(v23) = LODWORD(v11.__cosval);
      v51[0] = v22;
      *((_QWORD *)&v23 + 1) = LODWORD(v11.__sinval);
      v35 = v23;
      v41 = 0uLL;
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v47, (__n128 *)&v41);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v47, (__n128 *)&v35);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v47, v51);
      v41 = vnegq_f32(v42);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v43, (__n128 *)&v41);
      v41 = vnegq_f32(v42);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v43, (__n128 *)&v41);
      v41 = vnegq_f32(v42);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v43, (__n128 *)&v41);
    }
    while (v8 != a2);
    v24 = v50;
    v25 = v48;
    v26 = v46;
    v27 = v44;
  }
  else
  {
    v27 = 0;
    v26 = 0;
    v25 = 0;
    v24 = 0;
  }
  v28 = (id *)(*((_QWORD *)this + 31) + 184);
  v29.n128_u64[0] = 0x7F0000007FLL;
  v29.n128_u64[1] = 0x7F0000007FLL;
  v51[2] = (__n128)vdupq_n_s32(0x7F800000u);
  v51[3] = v29;
  v53 = 0;
  v54 = 0;
  v52 = 0;
  v35 = xmmword_226134040;
  v36 = 0x3F8000003F800000;
  v37 = 1065353216;
  v41.i64[0] = v24;
  v41.i64[1] = v25;
  v40 = 0uLL;
  v39.n128_u64[0] = v26;
  v39.n128_u64[1] = v27;
  re::setShape((float32x4_t **)&v41, &v40, &v39, (uint64_t)v51, v28, (float32x4_t *)&v35);
  re::DynamicArray<re::PrimitiveShapeGeometry>::add((re::PrimitiveRenderer *)((char *)this + 208), (id *)v51);
  if (v54)
  {

    v54 = 0;
  }
  if (v53)
  {

    v53 = 0;
  }
  if (v52)

  if (v43[0] && v46)
    (*(void (**)(void))(*(_QWORD *)v43[0] + 40))();
  result = v47[0];
  if (v47[0])
  {
    if (v50)
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v47[0] + 40))(v47[0]);
  }
  return result;
}

uint64_t re::createCylinder(unint64_t a1, uint64_t a2, id *a3)
{
  float v6;
  unint64_t i;
  __float2 v8;
  __float2 v9;
  __n128 v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v21[2];
  __n128 v22[2];
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  __n128 v26;
  _QWORD v27[2];
  uint64_t v28;
  int v29;
  uint64_t v30;
  _QWORD v31[2];
  unint64_t v32;
  int v33;
  unint64_t v34;

  v34 = 0;
  v31[1] = 0;
  v32 = 0;
  v31[0] = 0;
  v33 = 0;
  v30 = 0;
  v27[1] = 0;
  v28 = 0;
  v27[0] = 0;
  v29 = 0;
  v26 = 0uLL;
  v25 = (float32x4_t)xmmword_2260E5F10;
  if (a1)
  {
    v6 = 6.2832 / (float)a1;
    for (i = 1; i <= a1; ++i)
    {
      v8 = __sincosf_stret(v6 * (float)(i - 1));
      v9 = __sincosf_stret(v6 * (float)i);
      v10.n128_u32[0] = 0;
      v10.n128_u32[1] = LODWORD(v8.__cosval);
      v10.n128_u64[1] = LODWORD(v8.__sinval);
      v22[0] = v10;
      v10.n128_u32[0] = 0;
      v10.n128_u32[1] = LODWORD(v9.__cosval);
      v10.n128_u64[1] = LODWORD(v9.__sinval);
      v24 = (float32x4_t)v10;
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v31, &v26);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v31, (__n128 *)&v24);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v31, v22);
      v23 = vnegq_f32(v25);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v27, (__n128 *)&v23);
      v23 = vnegq_f32(v25);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v27, (__n128 *)&v23);
      v23 = vnegq_f32(v25);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v27, (__n128 *)&v23);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v31, (__n128 *)&v25);
      v23 = vaddq_f32((float32x4_t)v22[0], v25);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v31, (__n128 *)&v23);
      v23 = vaddq_f32(v24, v25);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v31, (__n128 *)&v23);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v27, (__n128 *)&v25);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v27, (__n128 *)&v25);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v27, (__n128 *)&v25);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v31, v22);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v31, (__n128 *)&v24);
      v23 = vaddq_f32((float32x4_t)v22[0], v25);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v31, (__n128 *)&v23);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v27, v22);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v27, (__n128 *)&v24);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v27, v22);
      v23 = vaddq_f32(v24, v25);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v31, (__n128 *)&v23);
      v23 = vaddq_f32((float32x4_t)v22[0], v25);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v31, (__n128 *)&v23);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v31, (__n128 *)&v24);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v27, (__n128 *)&v24);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v27, v22);
      re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v27, (__n128 *)&v24);
    }
    v11 = v34;
    v12 = v32;
    v13 = v30;
    v14 = v28;
  }
  else
  {
    v14 = 0;
    v13 = 0;
    v12 = 0;
    v11 = 0;
  }
  __asm { FMOV            V1.4S, #1.0 }
  v22[0] = (__n128)xmmword_226134040;
  v22[1] = _Q1;
  v24.i64[0] = v11;
  v24.i64[1] = v12;
  v23 = 0uLL;
  v21[0] = v13;
  v21[1] = v14;
  re::setShape((float32x4_t **)&v24, &v23, v21, a2, a3, (float32x4_t *)v22);
  if (v27[0] && v30)
    (*(void (**)(void))(*(_QWORD *)v27[0] + 40))();
  result = v31[0];
  if (v31[0])
  {
    if (v34)
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v31[0] + 40))(v31[0]);
  }
  return result;
}

id re::DynamicArray<re::PrimitiveShapeGeometry>::add(_anonymous_namespace_ *this, id *a2)
{
  unint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  id result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::PrimitiveShapeGeometry>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 96 * v4;
  v6 = *(_OWORD *)a2;
  v7 = *((_OWORD *)a2 + 1);
  v8 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(v5 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(v5 + 48) = v8;
  *(_OWORD *)v5 = v6;
  *(_OWORD *)(v5 + 16) = v7;
  *(_QWORD *)(v5 + 64) = a2[8];
  *(_QWORD *)(v5 + 72) = a2[9];
  result = a2[10];
  *(_QWORD *)(v5 + 80) = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::createRectangle(uint64_t a1, id *a2)
{
  _QWORD v2[2];
  _QWORD v3[2];
  float32x4_t *v4[2];
  float32x4_t v5[2];
  uint64_t v6;
  int v7;
  _OWORD v8[4];
  _OWORD v9[4];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v9[0] = constinit;
  v9[1] = unk_2261340F0;
  v9[2] = xmmword_226134100;
  v9[3] = unk_226134110;
  v8[0] = constinit_13;
  v8[1] = unk_226134130;
  v8[2] = xmmword_226134140;
  v8[3] = unk_226134150;
  v7 = 3;
  v6 = 0x2000200010000;
  v5[0] = (float32x4_t)xmmword_226134050;
  v5[1] = (float32x4_t)xmmword_2260FD430;
  v4[0] = (float32x4_t *)v9;
  v4[1] = (float32x4_t *)4;
  v3[0] = &v6;
  v3[1] = 6;
  v2[0] = v8;
  v2[1] = 4;
  re::setShape(v4, v3, v2, a1, a2, v5);
}

uint64_t re::createUVSphere(unint64_t a1, uint64_t a2, id *a3, float a4)
{
  uint64_t v8;
  unint64_t v9;
  float v10;
  unint64_t v11;
  __float2 v12;
  unint64_t v13;
  __float2 v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  unsigned __int16 v23;
  __int16 v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  id *v36;
  float v37;
  _QWORD v38[2];
  _QWORD v39[2];
  float32x4_t *v40[2];
  __n128 v41[2];
  float32x4_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  _QWORD v46[2];
  uint64_t v47;
  int v48;
  uint64_t v49;
  _QWORD v50[2];
  float32x4_t *v51;
  int v52;
  float32x4_t *v53;

  v37 = a4 * 0.5;
  v53 = 0;
  v50[1] = 0;
  v51 = 0;
  v50[0] = 0;
  v52 = 0;
  v49 = 0;
  v46[1] = 0;
  v47 = 0;
  v46[0] = 0;
  v48 = 0;
  v42 = (float32x4_t)COERCE_UNSIGNED_INT(-1.0 - (float)(a4 * 0.5));
  re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v50, (__n128 *)&v42);
  v42 = (float32x4_t)xmmword_2260E5F30;
  re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v46, (__n128 *)&v42);
  v42 = (float32x4_t)COERCE_UNSIGNED_INT(v37 + 1.0);
  re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v50, (__n128 *)&v42);
  v42 = (float32x4_t)xmmword_2260E5F10;
  re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v46, (__n128 *)&v42);
  v8 = 2 * a1;
  if (2 * a1)
  {
    v9 = 0;
    v10 = 3.1416 / (float)a1;
    v11 = a1 >> 1;
    do
    {
      if (a1 >= 2)
      {
        v12 = __sincosf_stret(v10 * (float)v9);
        v13 = 1;
        do
        {
          v14 = __sincosf_stret((float)(v10 * (float)v13) + -1.5708);
          v15.f32[0] = v14.__sinval;
          v15.f32[1] = v14.__cosval * (float)-v12.__sinval;
          v15.f32[2] = v12.__cosval * v14.__cosval;
          v42 = v15;
          if (v13 <= v11)
            v16 = vsubq_f32(v15, (float32x4_t)LODWORD(v37));
          else
            v16 = vaddq_f32((float32x4_t)LODWORD(v37), v15);
          v41[0] = (__n128)v16;
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v50, v41);
          re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v46, (__n128 *)&v42);
          if (a4 != 0.0 && v11 == v13)
          {
            v41[0] = (__n128)vaddq_f32((float32x4_t)LODWORD(v37), v42);
            re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v50, v41);
            re::DynamicArray<re::Vector3<float>>::add((_anonymous_namespace_ *)v46, (__n128 *)&v42);
          }
          ++v13;
        }
        while (a1 != v13);
      }
      ++v9;
    }
    while (v9 != v8);
    v36 = a3;
    v17 = 0;
    v45 = 0;
    if (a4 != 0.0)
      ++a1;
    v18 = a1 - 1;
    v43 = 0;
    v42 = 0uLL;
    v44 = 0;
    v19 = 2;
    do
    {
      v20 = v17++;
      if (v17 == v8)
        v21 = 0;
      else
        v21 = v20 + 1;
      v41[0].n128_u16[0] = 0;
      re::DynamicArray<unsigned short>::add(&v42, v41);
      v22 = v21 * v18;
      v23 = v22 + 2;
      v41[0].n128_u16[0] = v22 + 2;
      re::DynamicArray<unsigned short>::add(&v42, v41);
      v24 = v20 * v18;
      v41[0].n128_u16[0] = v24 + 2;
      re::DynamicArray<unsigned short>::add(&v42, v41);
      v41[0].n128_u16[0] = 1;
      re::DynamicArray<unsigned short>::add(&v42, v41);
      v41[0].n128_u16[0] = v24 + a1;
      re::DynamicArray<unsigned short>::add(&v42, v41);
      v41[0].n128_u16[0] = v22 + a1;
      re::DynamicArray<unsigned short>::add(&v42, v41);
      if (v18 >= 2)
      {
        v25 = v19;
        v26 = a1 - 2;
        do
        {
          v41[0].n128_u16[0] = v25;
          re::DynamicArray<unsigned short>::add(&v42, v41);
          v41[0].n128_u16[0] = v23;
          re::DynamicArray<unsigned short>::add(&v42, v41);
          v41[0].n128_u16[0] = v25 + 1;
          re::DynamicArray<unsigned short>::add(&v42, v41);
          v41[0].n128_u16[0] = v23 + 1;
          re::DynamicArray<unsigned short>::add(&v42, v41);
          v41[0].n128_u16[0] = v25 + 1;
          re::DynamicArray<unsigned short>::add(&v42, v41);
          v41[0].n128_u16[0] = v23;
          re::DynamicArray<unsigned short>::add(&v42, v41);
          ++v23;
          ++v25;
          --v26;
        }
        while (v26);
      }
      v19 += v18;
    }
    while (v17 != v8);
    v27 = v45;
    v28 = v43;
    a3 = v36;
  }
  else
  {
    v28 = 0;
    v27 = 0;
    v45 = 0;
    v43 = 0;
    v42 = 0uLL;
    v44 = 0;
  }
  __asm { FMOV            V2.4S, #-1.0 }
  _Q2.n128_f32[0] = -1.0 - (float)(a4 * 0.5);
  __asm { FMOV            V1.4S, #1.0 }
  _Q1.n128_f32[0] = (float)(a4 * 0.5) + 1.0;
  v41[0] = _Q2;
  v41[1] = _Q1;
  v40[0] = v53;
  v40[1] = v51;
  v39[0] = v27;
  v39[1] = v28;
  v38[0] = v49;
  v38[1] = v47;
  re::setShape(v40, v39, v38, a2, a3, (float32x4_t *)v41);
  if (v42.i64[0])
  {
    if (v45)
      (*(void (**)(void))(*(_QWORD *)v42.i64[0] + 40))();
    v45 = 0;
  }
  if (v46[0] && v49)
    (*(void (**)(void))(*(_QWORD *)v46[0] + 40))();
  result = v50[0];
  if (v50[0])
  {
    if (v53)
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v50[0] + 40))(v50[0]);
  }
  return result;
}

void re::setShape(float32x4_t **a1, _QWORD *a2, _QWORD *a3, uint64_t a4, id *a5, float32x4_t *a6)
{
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t *v12;
  float32x4_t *v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  void **v18;
  void *v19;
  uint64_t v20;
  id v21;

  if (a6)
  {
    v10 = *a6;
    v11 = a6[1];
    v12 = a1[1];
  }
  else
  {
    v12 = a1[1];
    if (v12)
    {
      v13 = *a1;
      v10 = (float32x4_t)vdupq_n_s32(0x7F800000u);
      v14 = 16 * (_QWORD)v12;
      v11.i64[0] = 0x7F0000007FLL;
      v11.i32[2] = 127;
      do
      {
        v15 = *v13++;
        v16 = v15;
        v10.i32[3] = 0;
        v16.i32[3] = 0;
        v10 = vminnmq_f32(v10, v16);
        v11.i32[3] = 0;
        v11 = vmaxnmq_f32(v11, v16);
        v14 -= 16;
      }
      while (v14);
    }
    else
    {
      v10 = (float32x4_t)vdupq_n_s32(0x7F800000u);
      v11.i64[0] = 0x7F0000007FLL;
      v11.i64[1] = 0x7F0000007FLL;
    }
  }
  *(_BYTE *)a4 = 3;
  *(_QWORD *)(a4 + 8) = v12;
  *(_QWORD *)(a4 + 16) = a2[1];
  *(float32x4_t *)(a4 + 32) = v10;
  *(float32x4_t *)(a4 + 48) = v11;
  v21 = objc_msgSend(*a5, sel_newBufferWithBytes_length_options_, *a1, 16 * (_QWORD)a1[1], 0);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a4 + 64), &v21);
  if (v21)

  *(_QWORD *)(a4 + 72) = 0;
  v17 = a2[1];
  if (v17)
  {
    v21 = objc_msgSend(*a5, sel_newBufferWithBytes_length_options_, *a2, 2 * v17, 0);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a4 + 72), &v21);
    if (v21)

  }
  v19 = *(void **)(a4 + 80);
  v18 = (void **)(a4 + 80);

  *v18 = 0;
  v20 = a3[1];
  if (v20)
  {
    v21 = objc_msgSend(*a5, sel_newBufferWithBytes_length_options_, *a3, 16 * v20, 0);
    NS::SharedPtr<MTL::Texture>::operator=(v18, &v21);
    if (v21)

  }
}

uint64_t re::PrimitiveRenderer::addCustomShape(_QWORD *a1, float32x4_t **a2, _QWORD *a3, _QWORD *a4)
{
  id *v5;
  __int128 v6;
  _anonymous_namespace_ *v7;
  uint64_t v8;
  id v10[4];
  int32x4_t v11;
  __int128 v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v5 = (id *)(a1[31] + 184);
  *(_QWORD *)&v6 = 0x7F0000007FLL;
  *((_QWORD *)&v6 + 1) = 0x7F0000007FLL;
  v11 = vdupq_n_s32(0x7F800000u);
  v12 = v6;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  re::setShape(a2, a3, a4, (uint64_t)v10, v5, 0);
  v7 = (_anonymous_namespace_ *)(a1 + 26);
  v8 = a1[28];
  re::DynamicArray<re::PrimitiveShapeGeometry>::add(v7, v10);
  if (v15)
  {

    v15 = 0;
  }
  if (v14)
  {

    v14 = 0;
  }
  if (v13)

  return v8;
}

uint64_t re::PrimitiveRenderer::submitContext(uint64_t a1, unint64_t *a2)
{
  re::DynamicArray<re::PrimitiveRenderingContext>::add((_anonymous_namespace_ *)(a1 + 256), (uint64_t)a2);
  re::PrimitiveRenderingDynamicGeometry::init((re::PrimitiveRenderingDynamicGeometry *)a2, a2[147]);
  return re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::clear((uint64_t)(a2 + 132));
}

__n128 re::DynamicArray<re::PrimitiveRenderingContext>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::PrimitiveRenderingContext>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = re::PrimitiveRenderingDynamicGeometry::PrimitiveRenderingDynamicGeometry(*((_QWORD *)this + 4) + 1200 * v4, a2);
  *(_QWORD *)(v5 + 1088) = 0;
  *(_DWORD *)(v5 + 1080) = 0;
  *(_QWORD *)(v5 + 1072) = 0;
  *(_QWORD *)(v5 + 1064) = 0;
  *(_QWORD *)(v5 + 1056) = 0;
  *(_QWORD *)(v5 + 1056) = *(_QWORD *)(a2 + 1056);
  *(_QWORD *)(a2 + 1056) = 0;
  *(_QWORD *)(v5 + 1064) = *(_QWORD *)(a2 + 1064);
  *(_QWORD *)(a2 + 1064) = 0;
  v6 = *(_QWORD *)(v5 + 1072);
  *(_QWORD *)(v5 + 1072) = *(_QWORD *)(a2 + 1072);
  *(_QWORD *)(a2 + 1072) = v6;
  v7 = *(_QWORD *)(v5 + 1088);
  *(_QWORD *)(v5 + 1088) = *(_QWORD *)(a2 + 1088);
  *(_QWORD *)(a2 + 1088) = v7;
  ++*(_DWORD *)(a2 + 1080);
  ++*(_DWORD *)(v5 + 1080);
  v8 = *(_OWORD *)(a2 + 1096);
  v9 = *(_OWORD *)(a2 + 1112);
  *(_DWORD *)(v5 + 1128) = *(_DWORD *)(a2 + 1128);
  *(_OWORD *)(v5 + 1096) = v8;
  *(_OWORD *)(v5 + 1112) = v9;
  *(_QWORD *)(v5 + 1168) = 0;
  *(_QWORD *)(v5 + 1136) = 0;
  *(_QWORD *)(v5 + 1152) = 0;
  *(_QWORD *)(v5 + 1144) = 0;
  *(_DWORD *)(v5 + 1160) = 0;
  *(_QWORD *)(v5 + 1136) = *(_QWORD *)(a2 + 1136);
  *(_QWORD *)(a2 + 1136) = 0;
  *(_QWORD *)(v5 + 1144) = *(_QWORD *)(a2 + 1144);
  *(_QWORD *)(a2 + 1144) = 0;
  v10 = *(_QWORD *)(v5 + 1152);
  *(_QWORD *)(v5 + 1152) = *(_QWORD *)(a2 + 1152);
  *(_QWORD *)(a2 + 1152) = v10;
  v11 = *(_QWORD *)(v5 + 1168);
  *(_QWORD *)(v5 + 1168) = *(_QWORD *)(a2 + 1168);
  *(_QWORD *)(a2 + 1168) = v11;
  ++*(_DWORD *)(a2 + 1160);
  ++*(_DWORD *)(v5 + 1160);
  result = *(__n128 *)(a2 + 1176);
  *(_QWORD *)(v5 + 1192) = *(_QWORD *)(a2 + 1192);
  *(__n128 *)(v5 + 1176) = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::PrimitiveRenderingDynamicGeometry::attributeDefaultValue@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;

  switch((int)result)
  {
    case 0:
    case 3:
    case 4:
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v3 = 2;
      break;
    case 1:
    case 5:
      *(_QWORD *)a3 = 0x3F8000003F800000;
      *(_QWORD *)(a3 + 8) = 0x3F8000003F800000;
      v3 = 3;
      break;
    case 2:
    case 6:
      v3 = 0;
      *(_DWORD *)a3 = 1065353216;
      break;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) incorrect attribute", "!\"Unreachable code\"", "attributeDefaultValue", 555);
      _os_crash();
      __break(1u);
      JUMPOUT(0x22596FD58);
  }
  *(_DWORD *)(a3 + 16) = v3;
  return result;
}

uint64_t re::PrimitiveRenderingDynamicGeometry::attributeDefaultValue(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = 0;
  v3 = 0;
  v4 = 2;
  switch((int)a2)
  {
    case 0:
      break;
    case 1:
      v2 = 0;
      v3 = 0x3F80000000000000;
      v4 = 4;
      break;
    case 2:
      v2 = 0x3F8000003F800000;
      v3 = 1065353216;
      break;
    case 3:
      v2 = 0x3F8000003F800000;
      v4 = 3;
      v3 = 0x3F8000003F800000;
      break;
    default:
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) incorrect attribute", "!\"Unreachable code\"", "attributeDefaultValue", 574);
      _os_crash();
      __break(1u);
      JUMPOUT(0x22596FE28);
  }
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = v3;
  *(_DWORD *)(result + 16) = v4;
  return result;
}

void re::PrimitiveRenderingDynamicGeometry::init(re::PrimitiveRenderingDynamicGeometry *this, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t i;
  char *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  __n128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v4 = 0;
  v34 = *MEMORY[0x24BDAC8D0];
  *(_WORD *)((char *)this + 517) = 0;
  *(_DWORD *)((char *)this + 513) = 0;
  do
  {
    v5 = (char *)this + v4;
    *((_QWORD *)v5 + 2) = 0;
    *((_DWORD *)v5 + 6) = *(_DWORD *)((char *)this + v4 + 24) + 1;
    v4 += 40;
  }
  while (v4 != 280);
  *((_BYTE *)this + 512) = 1;
  *(_WORD *)((char *)this + 515) = 257;
  if (*((_DWORD *)this + 84) != 3)
    *((_DWORD *)this + 84) = 3;
  *((_QWORD *)this + 40) = 0x3F8000003F800000;
  *((_QWORD *)this + 41) = 0x3F8000003F800000;
  if (*((_DWORD *)this + 92))
    *((_DWORD *)this + 92) = 0;
  *((_DWORD *)this + 88) = 1065353216;
  if (*((_DWORD *)this + 116) != 3)
    *((_DWORD *)this + 116) = 3;
  *((_QWORD *)this + 56) = 0x3F8000003F800000;
  *((_QWORD *)this + 57) = 0x3F8000003F800000;
  if (*((_DWORD *)this + 124))
    *((_DWORD *)this + 124) = 0;
  *((_DWORD *)this + 120) = 1065353216;
  *(_OWORD *)((char *)this + 520) = 0u;
  re::DynamicArray<unsigned long>::resize((uint64_t)this + 1016, a2);
  for (i = 0; i != 4; ++i)
  {
    v7 = (char *)this + 40 * i;
    v8 = (unint64_t *)(v7 + 552);
    v9 = *((_QWORD *)v7 + 69);
    if (v9 >= a2)
    {
      if (v9 <= a2)
        goto LABEL_27;
      v13 = (uint64_t *)((char *)this + 40 * i + 568);
      v14 = 40 * a2;
      v15 = a2;
      do
      {
        v16 = *v13;
        v17 = (_QWORD *)(*v13 + v14);
        if (*v17)
        {
          if (v17[4])
            (*(void (**)(_QWORD))(*(_QWORD *)*v17 + 40))(*v17);
          v17[4] = 0;
          v17[1] = 0;
          v17[2] = 0;
          *v17 = 0;
          ++*(_DWORD *)(v16 + v14 + 24);
          v9 = *v8;
        }
        ++v15;
        v14 += 40;
      }
      while (v15 < v9);
    }
    else
    {
      if (*((_QWORD *)this + 5 * i + 68) < a2)
      {
        re::DynamicArray<re::DynamicArray<unsigned char>>::setCapacity((_QWORD *)v7 + 67, a2);
        v9 = *v8;
      }
      v10 = a2 - v9;
      if (a2 > v9)
      {
        v11 = 40 * v9;
        do
        {
          v12 = *((_QWORD *)this + 5 * i + 71) + v11;
          *(_QWORD *)(v12 + 32) = 0;
          *(_QWORD *)(v12 + 8) = 0;
          *(_QWORD *)(v12 + 16) = 0;
          *(_QWORD *)v12 = 0;
          *(_DWORD *)(v12 + 24) = 0;
          v11 += 40;
          --v10;
        }
        while (v10);
      }
    }
    *v8 = a2;
    ++*((_DWORD *)this + 10 * i + 140);
LABEL_27:
    v18 = (char *)this + 40 * i;
    v19 = (unint64_t *)(v18 + 712);
    v20 = *((_QWORD *)v18 + 89);
    if (v20 >= a2)
    {
      if (v20 <= a2)
        goto LABEL_37;
    }
    else
    {
      if (*((_QWORD *)this + 5 * i + 88) < a2)
      {
        re::DynamicArray<re::AABB>::setCapacity((_QWORD *)v18 + 87, a2);
        v20 = *v19;
      }
      if (v20 < a2)
      {
        v21 = *((_QWORD *)this + 5 * i + 91);
        v22 = (_DWORD *)(v21 + 32 * v20);
        v23 = v21 + 32 * a2 - (_QWORD)v22;
        if (v23 >= 1)
        {
          v24 = ((unint64_t)v23 >> 5) + 1;
          do
          {
            *v22 = 0;
            v22[4] = 0;
            --v24;
            v22 += 8;
          }
          while (v24 > 1);
        }
      }
    }
    *v19 = a2;
    ++*((_DWORD *)this + 10 * i + 180);
LABEL_37:
    re::DynamicArray<BOOL>::resize((uint64_t)this + 40 * i + 856, a2);
  }
  if (!a2)
    return;
  v25 = 0;
  do
  {
    if (*((_QWORD *)this + 129) <= v25)
      goto LABEL_51;
    v26 = 0;
    *(_QWORD *)(*((_QWORD *)this + 131) + 8 * v25) = 0;
    do
    {
      v27 = (char *)this + v26;
      if (*(_QWORD *)((char *)this + v26 + 552) <= v25)
      {
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v29 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_50:
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v29 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_51:
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v29 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_52:
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v29 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_53:
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v29 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v28 = *((_QWORD *)v27 + 71) + 40 * v25;
      *(_QWORD *)(v28 + 16) = 0;
      ++*(_DWORD *)(v28 + 24);
      if (*((_QWORD *)v27 + 109) <= v25)
        goto LABEL_50;
      *(_BYTE *)(*(_QWORD *)((char *)this + v26 + 888) + v25) = 0;
      v26 += 40;
    }
    while (v26 != 160);
    if (*((_QWORD *)this + 109) <= v25)
      goto LABEL_52;
    *(_BYTE *)(*((_QWORD *)this + 111) + v25) = 1;
    if (*((_QWORD *)this + 114) <= v25)
      goto LABEL_53;
    *(_BYTE *)(*((_QWORD *)this + 116) + v25) = 1;
    v29.n128_u64[0] = 0x3F8000003F800000;
    v29.n128_u64[1] = 1065353216;
    LODWORD(v30) = 2;
    re::PrimitiveRenderingDynamicGeometry::setUniform<re::Vector3<float>,unsigned long>((uint64_t)this, v25, 2u, &v29);
    v29.n128_u64[0] = 0x3F8000003F800000;
    v29.n128_u64[1] = 0x3F8000003F800000;
    LODWORD(v30) = 3;
    re::PrimitiveRenderingDynamicGeometry::setUniform<re::Vector4<float>,unsigned long>((uint64_t)this, v25++, 3u, &v29);
  }
  while (v25 != a2);
}

re::PrimitiveRenderingContext *re::PrimitiveRenderingContext::PrimitiveRenderingContext(re::PrimitiveRenderingContext *this, unint64_t a2, re::RenderManager *a3)
{
  uint64_t i;
  char *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t j;
  char *v11;
  uint64_t k;
  char *v13;
  uint64_t m;
  char *v15;

  for (i = 0; i != 280; i += 40)
  {
    v7 = (char *)this + i;
    *((_QWORD *)v7 + 4) = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    *(_QWORD *)v7 = 0;
    *((_DWORD *)v7 + 6) = 0;
  }
  v8 = 288;
  do
  {
    v9 = (_DWORD *)((char *)this + v8);
    *v9 = 0;
    v9[4] = 0;
    v8 += 32;
  }
  while (v9 + 8 != (_DWORD *)((char *)this + 512));
  for (j = 0; j != 160; j += 40)
  {
    v11 = (char *)this + j;
    *((_QWORD *)v11 + 71) = 0;
    *((_QWORD *)v11 + 67) = 0;
    *((_QWORD *)v11 + 69) = 0;
    *((_QWORD *)v11 + 68) = 0;
    *((_DWORD *)v11 + 140) = 0;
  }
  for (k = 0; k != 160; k += 40)
  {
    v13 = (char *)this + k;
    *((_QWORD *)v13 + 91) = 0;
    *((_QWORD *)v13 + 87) = 0;
    *((_QWORD *)v13 + 89) = 0;
    *((_QWORD *)v13 + 88) = 0;
    *((_DWORD *)v13 + 180) = 0;
  }
  for (m = 0; m != 160; m += 40)
  {
    v15 = (char *)this + m;
    *((_QWORD *)v15 + 111) = 0;
    *((_QWORD *)v15 + 107) = 0;
    *((_QWORD *)v15 + 109) = 0;
    *((_QWORD *)v15 + 108) = 0;
    *((_DWORD *)v15 + 220) = 0;
  }
  *((_QWORD *)this + 127) = 0;
  *((_QWORD *)this + 128) = 0;
  *((_DWORD *)this + 260) = 0;
  *((_QWORD *)this + 129) = 0;
  *((_DWORD *)this + 270) = 0;
  *(_OWORD *)((char *)this + 1048) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_OWORD *)this + 69) = 0u;
  *((_QWORD *)this + 140) = 0;
  *((_DWORD *)this + 282) = 16843009;
  *((_QWORD *)this + 146) = 0;
  *((_QWORD *)this + 142) = 0;
  *((_QWORD *)this + 144) = 0;
  *((_QWORD *)this + 143) = 0;
  *((_DWORD *)this + 290) = 0;
  *((_BYTE *)this + 1184) = 1;
  re::PrimitiveRenderingDynamicGeometry::init(this, a2);
  *((_QWORD *)this + 147) = a2;
  *((_QWORD *)this + 149) = a3;
  return this;
}

uint64_t re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)(result + 16) = 0;
  if (v2)
  {
    v3 = *(_QWORD *)(result + 32);
    v4 = 96 * v2;
    do
    {
      result = re::DynamicArray<re::PrimitiveMeshAttribute>::deinit(v3);
      v3 += 96;
      v4 -= 96;
    }
    while (v4);
  }
  ++*(_DWORD *)(v1 + 24);
  return result;
}

BOOL re::PrimitiveRenderingContext::isEmpty(re::PrimitiveRenderingContext *this)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  unint64_t v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 2);
  if (v2 && (v2 << 7) - 128 + *((_QWORD *)this + 65))
    return 0;
  v3 = *((_QWORD *)this + 17);
  if (v3)
  {
    if ((v3 << 7) - 128 + *((_QWORD *)this + 66))
      return 0;
  }
  if (*((_QWORD *)this + 134))
    return 0;
  if (!*((_QWORD *)this + 147))
    return 1;
  v5 = 0;
  do
  {
    v6 = re::PrimitiveRenderingDynamicGeometry::numShapes<unsigned long>((uint64_t)this, v5);
    result = v6 == 0;
    if (v6)
      break;
    ++v5;
  }
  while (v5 < *((_QWORD *)this + 147));
  return result;
}

uint64_t re::PrimitiveRenderingContext::addPoint(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v11[3];
  __int16 v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    v5 = *(_QWORD *)(a1 + 520) + (v4 << 7) - 128;
  else
    v5 = 0;
  v6 = 0;
  v13 = 2;
  v12 = 256;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  do
  {
    v7 = *((unsigned __int8 *)&v12 + v6);
    *(&v14 + v6) = a1 + 40 * v7;
    v11[v6++] = *(_BYTE *)(a1 + v7 + 512);
  }
  while (v6 != 3);
  v8 = re::PrimitiveRenderingDynamicGeometry::append<re::PrimitiveRenderingAttribute>((unsigned __int8 *)&v12, (uint64_t)&v14, v11, 3, v4, *(_QWORD *)(a1 + 520), *(re **)(a1 + 1192));
  *(_QWORD *)(a1 + 520) = v8;
  if (v8 == 1)
  {
    if (v11[1])
      re::fill<re::Vector4<float>,re::PrimitiveRenderingAttribute>(*(_QWORD *)(v15 + 32) + 32 * *(_QWORD *)(v15 + 16) - 32, HIBYTE(v12));
    if (v11[2])
      re::fill<float,re::PrimitiveRenderingAttribute>(*(_QWORD *)(v16 + 32) + 32 * *(_QWORD *)(v16 + 16) - 32, v13);
  }
  v9 = *(_QWORD *)(v14 + 32) + 32 * *(_QWORD *)(v14 + 16);
  *(_OWORD *)((char *)objc_msgSend(**(id **)(v9 - 8), sel_contents)
            + 16 * *(_QWORD *)(a1 + 520)
            + *(_QWORD *)(v9 - 24)
            - 16) = *a2;
  return v5;
}

uint64_t re::PrimitiveRenderingDynamicGeometry::append<re::PrimitiveRenderingAttribute>(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, char a6, re *a7)
{
  uint64_t v7;
  uint64_t v9;
  _anonymous_namespace_ **v11;
  int v13;
  int v14;
  _anonymous_namespace_ *v15;
  const re::RenderManager *v16;
  unint64_t v17;
  _QWORD v19[4];

  v7 = a6 & 0x7F;
  if (a4)
  {
    v9 = a4;
    v11 = (_anonymous_namespace_ **)a2;
    do
    {
      v14 = *a3++;
      v13 = v14;
      if (!v7 && v13)
      {
        v15 = *v11;
        v16 = (const re::RenderManager *)re::attributeInfo(*a1, a2);
        re::allocate(a7, v16, v17, v19);
        re::DynamicArray<re::EvaluationRegister>::add(v15, (uint64_t)v19);
      }
      ++a1;
      ++v11;
      --v9;
    }
    while (v9);
  }
  return v7 + 1;
}

char *re::fill<re::Vector4<float>,re::PrimitiveRenderingAttribute>(uint64_t a1, uint64_t a2)
{
  char *result;
  uint64_t v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  re::PrimitiveRenderingDynamicGeometry::attributeDefaultValue(a2, a2, (uint64_t)&v7);
  if (v8 != 3)
    std::__throw_bad_variant_access[abi:nn180100]();
  v6 = v7;
  result = (char *)objc_msgSend(**(id **)(a1 + 24), sel_contents);
  v4 = 0;
  v5 = &result[*(_QWORD *)(a1 + 8)];
  do
  {
    *(_OWORD *)&v5[v4] = v6;
    v4 += 16;
  }
  while (v4 != 2048);
  return result;
}

char *re::fill<float,re::PrimitiveRenderingAttribute>(uint64_t a1, uint64_t a2)
{
  char *result;
  uint64_t v4;
  char *v5;
  int32x4_t v6;
  int32x2_t v7;
  __int128 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  re::PrimitiveRenderingDynamicGeometry::attributeDefaultValue(a2, a2, (uint64_t)&v8);
  if (v9)
    std::__throw_bad_variant_access[abi:nn180100]();
  v7 = (int32x2_t)v8;
  result = (char *)objc_msgSend(**(id **)(a1 + 24), sel_contents);
  v4 = 0;
  v5 = &result[*(_QWORD *)(a1 + 8)];
  v6 = vdupq_lane_s32(v7, 0);
  do
  {
    *(int32x4_t *)&v5[v4] = v6;
    v4 += 16;
  }
  while (v4 != 512);
  return result;
}

uint64_t re::PrimitiveRenderingContext::addLine(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v14[4];
  int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 136);
  if (v6)
    v7 = *(_QWORD *)(a1 + 528) + (v6 << 7) - 128;
  else
    v7 = 0;
  v8 = 0;
  v15 = 100992003;
  v16 = 0u;
  v17 = 0u;
  do
  {
    v9 = *((unsigned __int8 *)&v15 + v8);
    *((_QWORD *)&v16 + v8) = a1 + 40 * v9;
    v14[v8++] = *(_BYTE *)(a1 + v9 + 512);
  }
  while (v8 != 4);
  v10 = re::PrimitiveRenderingDynamicGeometry::append<re::PrimitiveRenderingAttribute>((unsigned __int8 *)&v15, (uint64_t)&v16, v14, 4, v6, *(_QWORD *)(a1 + 528), *(re **)(a1 + 1192));
  *(_QWORD *)(a1 + 528) = v10;
  if (v10 == 1)
  {
    if (v14[2])
      re::fill<re::Vector4<float>,re::PrimitiveRenderingAttribute>(*(_QWORD *)(v17 + 32) + 32 * *(_QWORD *)(v17 + 16) - 32, BYTE2(v15));
    if (v14[3])
      re::fill<float,re::PrimitiveRenderingAttribute>(*(_QWORD *)(*((_QWORD *)&v17 + 1) + 32) + 32 * *(_QWORD *)(*((_QWORD *)&v17 + 1) + 16) - 32, HIBYTE(v15));
  }
  v11 = *(_QWORD *)(v16 + 32) + 32 * *(_QWORD *)(v16 + 16);
  *(_OWORD *)((char *)objc_msgSend(**(id **)(v11 - 8), sel_contents)
            + 16 * *(_QWORD *)(a1 + 528)
            + *(_QWORD *)(v11 - 24)
            - 16) = *a2;
  v12 = *(_QWORD *)(*((_QWORD *)&v16 + 1) + 32) + 32 * *(_QWORD *)(*((_QWORD *)&v16 + 1) + 16);
  *(_OWORD *)((char *)objc_msgSend(**(id **)(v12 - 8), sel_contents)
            + 16 * *(_QWORD *)(a1 + 528)
            + *(_QWORD *)(v12 - 24)
            - 16) = *a3;
  return v7;
}

void re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re *a1@<X0>, re::MaterialParameterTableBuilder *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  re::RenderManager *v8;
  uint64_t *v9;
  uint64_t v10;
  id v11;
  re *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  re *v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  void (***v23)(_QWORD);
  uint64_t v24[5];
  uint64_t v25[5];
  __int128 v26;
  _BYTE v27[24];
  uint64_t v28;
  _QWORD *v29;
  _BYTE v30[24];
  uint64_t v31;
  void (***v32)(_QWORD);
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v8 = (re::RenderManager *)*((_QWORD *)a1 + 149);
  v9 = re::globalAllocators(a1);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9[2] + 32))(v9[2], 1008, 8);
  re::MaterialParameterBlock::MaterialParameterBlock((re::MaterialParameterBlock *)v10, v8);
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)v25, (uint64_t *)a1);
  *(_QWORD *)&v26 = v10;
  if (v10)
    v11 = (id)(v10 + 8);
  *((_QWORD *)&v26 + 1) = a1;
  v12 = (re *)re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)v24, (uint64_t *)a1);
  v13 = *(_QWORD *)(*((_QWORD *)a1 + 149) + 104);
  if (v13)
    v13 = *(_QWORD *)(v13 + 312);
  v14 = *((_QWORD *)a1 + 2);
  v15 = *((_QWORD *)a1 + 65);
  v16 = v13 + 16;
  v17 = re::globalAllocators(v12)[2];
  v31 = v17;
  v32 = 0;
  if (v17)
    v18 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 64, 0);
  else
    v18 = 0;
  *(_QWORD *)v18 = &off_24ED73C68;
  v19 = (re *)re::DynamicArray<re::GPUAllocation>::DynamicArray(v18 + 8, v25);
  v20 = v26;
  *(_QWORD *)&v26 = 0;
  *(_OWORD *)(v18 + 48) = v20;
  v32 = (void (***)(_QWORD))v18;
  v21 = re::globalAllocators(v19)[2];
  v28 = v21;
  v29 = 0;
  if (v21)
    v22 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 48, 0);
  else
    v22 = 0;
  *v22 = &off_24ED73CC0;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(v22 + 1), v24);
  v29 = v22;
  re::PrimitiveRenderingContext::buildMeshScene(a4, (uint64_t)a1, a2, a3, v14, v15, v16, (re::Allocator *)v10, (uint64_t)v30, (uint64_t)v27);
  (*(void (**)(_QWORD *))*v22)(v22);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v28 + 40))(v28, v22);
  v23 = v32;
  if (v32)
  {
    (**v32)(v32);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v31 + 40))(v31, v23);
  }
  if (v24[0] && v24[4])
    (*(void (**)(void))(*(_QWORD *)v24[0] + 40))();
  if ((_QWORD)v26)
  {

    *(_QWORD *)&v26 = 0;
  }
  if (v25[0] && v25[4])
    (*(void (**)(void))(*(_QWORD *)v25[0] + 40))();
  if (v10)

}

void re::PrimitiveRenderingContext::buildMeshSceneOfLines(uint64_t *a1@<X0>, re::MaterialParameterTableBuilder *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v7;
  uint64_t *v8;
  re::RenderManager *v9;
  uint64_t *v10;
  uint64_t v11;
  id v12;
  re *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  re *v20;
  uint64_t v21;
  _QWORD *v22;
  void (***v23)(_QWORD);
  uint64_t v25[5];
  uint64_t v26[3];
  int v27;
  uint64_t v28;
  uint64_t v29[5];
  uint64_t v30;
  uint64_t v31[3];
  int v32;
  uint64_t v33;
  uint64_t *v34;
  _BYTE v35[24];
  uint64_t v36;
  _QWORD *v37;
  _BYTE v38[24];
  uint64_t v39;
  void (***v40)(_QWORD);
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v7 = a1 + 15;
  v8 = a1 + 20;
  v9 = (re::RenderManager *)a1[149];
  v10 = re::globalAllocators((re *)a1);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10[2] + 32))(v10[2], 1008, 8);
  re::MaterialParameterBlock::MaterialParameterBlock((re::MaterialParameterBlock *)v11, v9);
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)v29, v7);
  v30 = v11;
  if (v11)
    v12 = (id)(v11 + 8);
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)v31, v8);
  v34 = a1;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)v25, v7);
  v13 = (re *)re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)v26, v8);
  v14 = *(_QWORD *)(a1[149] + 104);
  if (v14)
    v14 = *(_QWORD *)(v14 + 312);
  v15 = a1[17];
  v16 = a1[66];
  v17 = v14 + 112;
  v18 = re::globalAllocators(v13)[2];
  v39 = v18;
  v40 = 0;
  if (v18)
    v19 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v18 + 32))(v18, 104, 0);
  else
    v19 = 0;
  *v19 = &off_24ED73D18;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(v19 + 1), v29);
  v19[6] = v30;
  v30 = 0;
  v20 = (re *)re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(v19 + 7), v31);
  v19[12] = v34;
  v40 = (void (***)(_QWORD))v19;
  v21 = re::globalAllocators(v20)[2];
  v36 = v21;
  v37 = 0;
  if (v21)
    v22 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v21 + 32))(v21, 88, 0);
  else
    v22 = 0;
  *v22 = &off_24ED73D70;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(v22 + 1), v25);
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(v22 + 6), v26);
  v37 = v22;
  re::PrimitiveRenderingContext::buildMeshScene(a4, (uint64_t)a1, a2, a3, v15, v16, v17, (re::Allocator *)v11, (uint64_t)v38, (uint64_t)v35);
  (*(void (**)(_QWORD *))*v22)(v22);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v36 + 40))(v36, v22);
  v23 = v40;
  if (v40)
  {
    (**v40)(v40);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v39 + 40))(v39, v23);
  }
  if (v26[0])
  {
    if (v28)
      (*(void (**)(void))(*(_QWORD *)v26[0] + 40))();
    v28 = 0;
    memset(v26, 0, sizeof(v26));
    ++v27;
  }
  if (v25[0] && v25[4])
    (*(void (**)(void))(*(_QWORD *)v25[0] + 40))();
  if (v31[0])
  {
    if (v33)
      (*(void (**)(void))(*(_QWORD *)v31[0] + 40))();
    v33 = 0;
    memset(v31, 0, sizeof(v31));
    ++v32;
  }
  if (v30)
  {

    v30 = 0;
  }
  if (v29[0] && v29[4])
    (*(void (**)(void))(*(_QWORD *)v29[0] + 40))();
  if (v11)

}

void re::PrimitiveRenderingContext::buildMeshSceneOfShapes(_QWORD *a1@<X0>, re::MaterialParameterTableBuilder *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  int *v8;
  unint64_t *v9;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *Attribute;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  id v57;
  re *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  re *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  int v74;
  _BYTE *v75;
  uint64_t v76;
  int v77;
  _BYTE *v78;
  uint64_t v79;
  _BYTE *v80;
  void (***v81)(_QWORD);
  uint64_t v82;
  uint64_t v85;
  uint64_t v86[5];
  uint64_t v87[5];
  uint64_t v88;
  uint64_t v89[3];
  int v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  char v94[24];
  uint64_t v95;
  _QWORD *v96;
  char v97[24];
  uint64_t v98;
  void (***v99)(_QWORD);
  _BYTE v100[256];
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  unsigned __int8 v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  _BYTE v112[80];
  unsigned __int8 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  unsigned __int8 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  int v123;
  const char *v124;
  __int16 v125;
  int v126;
  __int16 v127;
  unint64_t *v128;
  __int16 v129;
  unint64_t v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;

  v136 = *MEMORY[0x24BDAC8D0];
  if (a1[147])
  {
    v6 = 0;
    v7 = 0;
    do
    {
      if (re::PrimitiveRenderingDynamicGeometry::numShapes<unsigned long>((uint64_t)a1, v7))
        ++v6;
      ++v7;
    }
    while (v7 < a1[147]);
  }
  else
  {
    v6 = 0;
  }
  v8 = (int *)v100;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v9 = (unint64_t *)(a4 + 8);
  *(_QWORD *)(a4 + 16) = 0;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)a4 = a2;
  re::DynamicArray<re::MeshScene>::setCapacity((_QWORD *)a4, 0);
  ++*(_DWORD *)(a4 + 24);
  bzero(v100, 0x290uLL);
  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
    goto LABEL_98;
  while (1)
  {
    *((_QWORD *)&v109 + 1) = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)&v110 = _D0;
    DWORD2(v110) = 1065353216;
    v111 = 0u;
    memset(v112, 0, 19);
    *(_QWORD *)&v112[20] = 0xFFFFFFFF00000001;
    *(_QWORD *)&v15 = 0x7F0000007FLL;
    *((_QWORD *)&v15 + 1) = 0x7F0000007FLL;
    *((int32x4_t *)v8 + 28) = vdupq_n_s32(0x7F800000u);
    *((_OWORD *)v8 + 29) = v15;
    *(_QWORD *)&v112[72] = 0;
    v113 = 0;
    v116 = 0;
    v117 = 0;
    v122 = 0x10100010001;
    v16 = *(_QWORD *)(a4 + 16);
    v85 = a4;
    if (v16 >= v6)
    {
      if (v16 <= v6)
        goto LABEL_30;
      v48 = 656 * v6 + 256;
      v49 = v6;
      do
      {
        re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(*(_QWORD *)(a4 + 32) + v48);
        ++v49;
        v48 += 656;
      }
      while (v49 < *(_QWORD *)(a4 + 16));
LABEL_29:
      *(_QWORD *)(a4 + 16) = v6;
      ++*(_DWORD *)(a4 + 24);
      goto LABEL_30;
    }
    if (*v9 < v6)
    {
      re::DynamicArray<re::MeshScene>::setCapacity((_QWORD *)a4, v6);
      v16 = *(_QWORD *)(a4 + 16);
    }
    if (v16 >= v6)
      goto LABEL_29;
    v17 = 656 * v16;
    do
    {
      v18 = *(_QWORD *)(a4 + 32);
      v19 = v18 + v17;
      v20 = *(_OWORD *)v8;
      v21 = *((_OWORD *)v8 + 1);
      v22 = *((_OWORD *)v8 + 3);
      *(_OWORD *)(v19 + 32) = *((_OWORD *)v8 + 2);
      *(_OWORD *)(v19 + 48) = v22;
      v23 = *((_OWORD *)v8 + 7);
      v25 = *((_OWORD *)v8 + 4);
      v24 = *((_OWORD *)v8 + 5);
      *(_OWORD *)(v19 + 96) = *((_OWORD *)v8 + 6);
      *(_OWORD *)(v19 + 112) = v23;
      *(_OWORD *)(v19 + 64) = v25;
      *(_OWORD *)(v19 + 80) = v24;
      v26 = *((_OWORD *)v8 + 11);
      v28 = *((_OWORD *)v8 + 8);
      v27 = *((_OWORD *)v8 + 9);
      *(_OWORD *)(v19 + 160) = *((_OWORD *)v8 + 10);
      *(_OWORD *)(v19 + 176) = v26;
      *(_OWORD *)(v19 + 128) = v28;
      *(_OWORD *)(v19 + 144) = v27;
      v29 = *((_OWORD *)v8 + 15);
      v31 = *((_OWORD *)v8 + 12);
      v30 = *((_OWORD *)v8 + 13);
      *(_OWORD *)(v19 + 224) = *((_OWORD *)v8 + 14);
      *(_OWORD *)(v19 + 240) = v29;
      *(_OWORD *)(v19 + 192) = v31;
      *(_OWORD *)(v19 + 208) = v30;
      *(_OWORD *)v19 = v20;
      *(_OWORD *)(v19 + 16) = v21;
      re::HashBrown<unsigned long,unsigned int,re::Hash<unsigned long>,re::EqualTo<unsigned long>,re::Hash<unsigned int>,false>::HashBrown(v18 + v17 + 256, &v101);
      *(_DWORD *)(v19 + 320) = v105;
      v32 = v106;
      *(_BYTE *)(v19 + 328) = v106;
      if (v32)
        *(_QWORD *)(v19 + 336) = v107;
      *(_OWORD *)(v19 + 344) = v108;
      v33 = v109;
      v34 = v110;
      v35 = *(_OWORD *)v112;
      *(_OWORD *)(v19 + 392) = v111;
      *(_OWORD *)(v19 + 408) = v35;
      *(_OWORD *)(v19 + 360) = v33;
      *(_OWORD *)(v19 + 376) = v34;
      v36 = *(_OWORD *)&v112[16];
      v37 = *(_OWORD *)&v112[32];
      v38 = *(_OWORD *)&v112[64];
      *(_OWORD *)(v19 + 456) = *(_OWORD *)&v112[48];
      *(_OWORD *)(v19 + 472) = v38;
      *(_OWORD *)(v19 + 424) = v36;
      *(_OWORD *)(v19 + 440) = v37;
      v39 = v113;
      *(_BYTE *)(v19 + 496) = v113;
      if (v39)
      {
        v40 = v18 + v17;
        v41 = v115;
        *(_OWORD *)(v40 + 512) = v114;
        *(_OWORD *)(v40 + 528) = v41;
      }
      v42 = v18 + v17;
      *(_QWORD *)(v42 + 544) = v116;
      v43 = v117;
      *(_BYTE *)(v42 + 560) = v117;
      if (v43)
      {
        v44 = v118;
        v45 = v119;
        v46 = v121;
        *(_OWORD *)(v42 + 608) = v120;
        *(_OWORD *)(v42 + 624) = v46;
        *(_OWORD *)(v42 + 576) = v44;
        *(_OWORD *)(v42 + 592) = v45;
      }
      *(_QWORD *)(v42 + 640) = v122;
      ++v16;
      v17 += 656;
      a4 = v85;
    }
    while (v6 != v16);
    v47 = v104;
    *(_QWORD *)(v85 + 16) = v6;
    ++*(_DWORD *)(v85 + 24);
    if (v47)
    {
      if (v102)
        v102 = 0;
      if (v101)
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 40))(v47);
    }
LABEL_30:
    v50 = *(_QWORD *)(a1[149] + 104);
    v51 = v50 ? *(_QWORD *)(v50 + 312) : 0;
    if (!a1[147])
      break;
    v52 = 0;
    v6 = 0;
    v9 = 0;
    v82 = v51;
    while (1)
    {
      if (!re::PrimitiveRenderingDynamicGeometry::numShapes<unsigned long>((uint64_t)a1, v6))
        goto LABEL_93;
      Attribute = (uint64_t *)re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>((uint64_t)a1, v6, 0);
      v54 = (re *)re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>((uint64_t)a1, v6, 1u);
      a4 = a1[149];
      v55 = re::globalAllocators(v54);
      v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v55[2] + 32))(v55[2], 1008, 8);
      re::MaterialParameterBlock::MaterialParameterBlock((re::MaterialParameterBlock *)v56, (re::RenderManager *)a4);
      re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)v87, Attribute);
      v88 = v56;
      if (v56)
        v57 = (id)(v56 + 8);
      re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)v89, (uint64_t *)v54);
      *(_QWORD *)&v92 = a1;
      *((_QWORD *)&v92 + 1) = v6;
      v58 = (re *)re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)v86, Attribute);
      v59 = a1[129];
      if (v59 <= v6)
        break;
      v59 = *(_QWORD *)(v51 + 224);
      if (v59 <= v6)
        goto LABEL_96;
      v60 = Attribute[2];
      a4 = *(_QWORD *)(a1[131] + 8 * v6);
      v61 = *(_QWORD *)(v51 + 240);
      v62 = re::globalAllocators(v58)[2];
      v98 = v62;
      v99 = 0;
      if (v62)
        v63 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v62 + 32))(v62, 112, 0);
      else
        v63 = 0;
      *(_QWORD *)v63 = &off_24ED73DC8;
      re::DynamicArray<re::GPUAllocation>::DynamicArray(v63 + 8, v87);
      *(_QWORD *)(v63 + 48) = v88;
      v88 = 0;
      v64 = (re *)re::DynamicArray<re::GPUAllocation>::DynamicArray(v63 + 56, v89);
      *(_OWORD *)(v63 + 96) = v92;
      v99 = (void (***)(_QWORD))v63;
      v65 = re::globalAllocators(v64)[2];
      v95 = v65;
      v96 = 0;
      if (v65)
        v66 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v65 + 32))(v65, 48, 0);
      else
        v66 = 0;
      *v66 = &off_24ED73E20;
      re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(v66 + 1), v86);
      v96 = v66;
      re::PrimitiveRenderingContext::buildMeshScene((uint64_t)v100, (uint64_t)a1, a2, a3, v60, a4, v61 + v52, (re::Allocator *)v56, (uint64_t)v97, (uint64_t)v94);
      v59 = *(_QWORD *)(v85 + 16);
      if (v59 <= (unint64_t)v9)
        goto LABEL_97;
      v67 = *(_QWORD *)(v85 + 32);
      v68 = v67 + 656 * (_QWORD)v9;
      *(_OWORD *)(v68 + 192) = *((_OWORD *)v8 + 12);
      *(_OWORD *)(v68 + 208) = *((_OWORD *)v8 + 13);
      *(_OWORD *)(v68 + 224) = *((_OWORD *)v8 + 14);
      *(_OWORD *)(v68 + 240) = *((_OWORD *)v8 + 15);
      *(_OWORD *)(v68 + 128) = *((_OWORD *)v8 + 8);
      *(_OWORD *)(v68 + 144) = *((_OWORD *)v8 + 9);
      *(_OWORD *)(v68 + 160) = *((_OWORD *)v8 + 10);
      *(_OWORD *)(v68 + 176) = *((_OWORD *)v8 + 11);
      *(_OWORD *)(v68 + 64) = *((_OWORD *)v8 + 4);
      *(_OWORD *)(v68 + 80) = *((_OWORD *)v8 + 5);
      *(_OWORD *)(v68 + 96) = *((_OWORD *)v8 + 6);
      *(_OWORD *)(v68 + 112) = *((_OWORD *)v8 + 7);
      *(_OWORD *)v68 = *(_OWORD *)v8;
      *(_OWORD *)(v68 + 16) = *((_OWORD *)v8 + 1);
      *(_OWORD *)(v68 + 32) = *((_OWORD *)v8 + 2);
      *(_OWORD *)(v68 + 48) = *((_OWORD *)v8 + 3);
      v69 = *(_QWORD *)(v68 + 312);
      *(_QWORD *)(v68 + 312) = v104;
      v104 = v69;
      v70 = *(_OWORD *)(v68 + 256);
      *(_OWORD *)(v68 + 256) = *((_OWORD *)v8 + 16);
      *((_OWORD *)v8 + 16) = v70;
      v71 = *(_QWORD *)(v68 + 304);
      *(_QWORD *)(v68 + 304) = v103;
      v103 = v71;
      v72 = *(_OWORD *)(v68 + 272);
      *(_OWORD *)(v68 + 272) = *((_OWORD *)v8 + 17);
      *((_OWORD *)v8 + 17) = v72;
      v73 = *(_OWORD *)(v68 + 288);
      *(_OWORD *)(v68 + 288) = *((_OWORD *)v8 + 18);
      *((_OWORD *)v8 + 18) = v73;
      *(_DWORD *)(v68 + 320) = v105;
      v74 = *(unsigned __int8 *)(v68 + 328);
      v51 = v82;
      if (*(_BYTE *)(v68 + 328) || v106)
      {
        v75 = (_BYTE *)(v68 + 328);
        if (!v74 || v106)
        {
          if (!v74 && v106)
            *v75 = 1;
          *(_QWORD *)(v67 + 656 * (_QWORD)v9 + 336) = v107;
        }
        else
        {
          *v75 = 0;
        }
      }
      v76 = v67 + 656 * (_QWORD)v9;
      *(_OWORD *)(v76 + 344) = v108;
      *(_OWORD *)(v76 + 360) = v109;
      *(_OWORD *)(v76 + 376) = v110;
      *(_OWORD *)(v76 + 392) = v111;
      *(_QWORD *)(v76 + 408) = *(_QWORD *)v112;
      *(_OWORD *)(v76 + 432) = *(_OWORD *)&v112[24];
      *(_OWORD *)(v76 + 448) = *(_OWORD *)&v112[40];
      *(_OWORD *)(v76 + 464) = *(_OWORD *)&v112[56];
      *(_QWORD *)(v76 + 480) = *(_QWORD *)&v112[72];
      *(_OWORD *)(v76 + 416) = *(_OWORD *)&v112[8];
      v77 = *(unsigned __int8 *)(v76 + 496);
      if (*(_BYTE *)(v76 + 496) || v113)
      {
        v78 = (_BYTE *)(v76 + 496);
        if (!v77 || v113)
        {
          if (!v77 && v113)
            *v78 = 1;
          *(_OWORD *)(v67 + 656 * (_QWORD)v9 + 512) = v114;
          *(_OWORD *)(v67 + 656 * (_QWORD)v9 + 528) = v115;
        }
        else
        {
          *v78 = 0;
        }
      }
      v79 = v67 + 656 * (_QWORD)v9;
      *(_QWORD *)(v79 + 544) = v116;
      if (*(_BYTE *)(v79 + 560) || v117)
      {
        v80 = (_BYTE *)(v79 + 560);
        if (!*(_BYTE *)(v79 + 560) || v117)
        {
          if (!*(_BYTE *)(v79 + 560) && v117)
            *v80 = 1;
          *(_OWORD *)(v67 + 656 * (_QWORD)v9 + 576) = v118;
          *(_OWORD *)(v67 + 656 * (_QWORD)v9 + 592) = v119;
          *(_OWORD *)(v67 + 656 * (_QWORD)v9 + 608) = v120;
          *(_OWORD *)(v67 + 656 * (_QWORD)v9 + 624) = v121;
        }
        else
        {
          *v80 = 0;
        }
      }
      *(_QWORD *)(v67 + 656 * (_QWORD)v9 + 640) = v122;
      if (v69 && (_QWORD)v70)
        (*(void (**)(uint64_t))(*(_QWORD *)v69 + 40))(v69);
      (*(void (**)(_QWORD *))*v66)(v66);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v95 + 40))(v95, v66);
      v96 = 0;
      v81 = v99;
      if (v99)
      {
        (**v99)(v99);
        (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v98 + 40))(v98, v81);
        v99 = 0;
      }
      if (v86[0] && v86[4])
        (*(void (**)(void))(*(_QWORD *)v86[0] + 40))();
      if (v89[0])
      {
        if (v91)
          (*(void (**)(void))(*(_QWORD *)v89[0] + 40))();
        v91 = 0;
        memset(v89, 0, sizeof(v89));
        ++v90;
      }
      if (v88)
      {

        v88 = 0;
      }
      if (v87[0] && v87[4])
        (*(void (**)(void))(*(_QWORD *)v87[0] + 40))();
      v9 = (unint64_t *)((char *)v9 + 1);
      if (v56)

LABEL_93:
      ++v6;
      v52 += 96;
      if (v6 >= a1[147])
        return;
    }
    v93 = 0;
    v134 = 0u;
    v135 = 0u;
    v132 = 0u;
    v133 = 0u;
    v131 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v123 = 136315906;
    v124 = "operator[]";
    v125 = 1024;
    v126 = 797;
    v127 = 2048;
    v128 = (unint64_t *)v6;
    v129 = 2048;
    v130 = v59;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_96:
    v93 = 0;
    v134 = 0u;
    v135 = 0u;
    v132 = 0u;
    v133 = 0u;
    v131 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v123 = 136315906;
    v124 = "operator[]";
    v125 = 1024;
    v126 = 797;
    v127 = 2048;
    v128 = (unint64_t *)v6;
    v129 = 2048;
    v130 = v59;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_97:
    v93 = 0;
    v8 = &v123;
    v134 = 0u;
    v135 = 0u;
    v132 = 0u;
    v133 = 0u;
    v131 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v123 = 136315906;
    v124 = "operator[]";
    v125 = 1024;
    v126 = 789;
    v127 = 2048;
    v128 = v9;
    v129 = 2048;
    v130 = v59;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_98:
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
  }
}

void re::PrimitiveRenderingContext::buildMeshSceneOfMeshes(uint64_t a1@<X0>, re::MaterialParameterTableBuilder *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X8>)
{
  uint64_t v5;
  float32x4_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  _anonymous_namespace_ *v12;
  re *v13;
  re::RenderManager *v14;
  uint64_t *v15;
  re::MaterialParameterBlock *v16;
  _anonymous_namespace_ *v17;
  _anonymous_namespace_ *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  re *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  BOOL v38;
  const char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  _BYTE *v45;
  re::MaterialParameterBlock *v46;
  size_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 v62;
  uint64_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  int v69;
  int v70;
  void *v71;
  unint64_t v72;
  re::MaterialParameterTableBuilder *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v88;
  __int128 v89;
  __int128 v90;
  uint64_t *v91;
  __int128 v93;
  __int128 v94;
  re::MaterialParameterBlock *v95;
  uint64_t v96[2];
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  float32x4_t v105;
  float32x4_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  char *v110;
  int v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE v115[48];
  __int128 v116;
  uint8_t buf[16];
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126[21];
  uint64_t v127;
  _BYTE v128[12];
  __int16 v129;
  int v130;
  __int16 v131;
  unint64_t v132;
  __int16 v133;
  unint64_t v134;
  _OWORD v135[3];
  __int128 v136;
  __int128 v137;
  uint64_t v138;

  *(_QWORD *)&v90 = a3;
  v5 = 0;
  v138 = *MEMORY[0x24BDAC8D0];
  v103 = 0;
  v104 = (const char *)&str_110;
  v6.i64[0] = 0x7F0000007FLL;
  v6.i64[1] = 0x7F0000007FLL;
  v105 = (float32x4_t)vdupq_n_s32(0x7F800000u);
  v106 = v6;
  v107 = 0u;
  v108 = 0u;
  v109 = 0u;
  do
  {
    v7 = (char *)&v103 + v5;
    *((_QWORD *)v7 + 12) = 0;
    *((_QWORD *)v7 + 16) = 0;
    v5 += 40;
  }
  while (v5 != 720);
  re::StringID::destroyString((re::StringID *)&v103);
  v103 = 0x4B61EB17F5807C1ALL;
  v104 = "PrimitiveRendering Mesh Instance";
  v8 = *(_QWORD *)(a1 + 1072);
  v9 = re::RenderManager::perFrameAllocator(*(re::RenderManager **)(a1 + 1192));
  v10 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, 24, 8);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = 0;
  re::FixedArray<unsigned long>::init<>((uint64_t *)v10, v9, v8);
  v11 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, 24, 8);
  v11[1] = 0;
  v11[2] = 0;
  *v11 = 0;
  v91 = v11;
  re::FixedArray<unsigned long>::init<>(v11, v9, v8);
  v14 = *(re::RenderManager **)(a1 + 1192);
  v15 = re::globalAllocators(v13);
  v16 = (re::MaterialParameterBlock *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 1008, 8);
  v17 = re::MaterialParameterBlock::MaterialParameterBlock(v16, v14);
  v100 = 0;
  v101 = 0;
  v102 = 0;
  *(_QWORD *)&v93 = v8;
  *(_QWORD *)&v94 = a1;
  v19 = *(_QWORD *)(a1 + 1152);
  if (v19)
  {
    v20 = *(unint64_t **)(a1 + 1168);
    v21 = &v20[2 * v19];
    do
    {
      v22 = *v20;
      v23 = v20[1];
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      v18 = (_anonymous_namespace_ *)re::MaterialParameterBlock::addPassTechniqueMapping(v16, v22, v23, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash);
      v20 += 2;
    }
    while (v20 != v21);
  }
  v95 = v16;
  v24 = (_QWORD *)v94;
  if ((_QWORD)v93)
  {
    v25 = 0;
    v89 = xmmword_2260E5F10;
    v88 = v10;
    while (1)
    {
      v26 = v24[134];
      if (v26 <= v25)
        goto LABEL_59;
      v27 = v24[136] + 96 * v25;
      v28 = *(_QWORD *)(v27 + 16);
      if (v28)
      {
        v10 = 0;
        v29 = v28 << 6;
        v30 = (unsigned __int8 *)(*(_QWORD *)(v27 + 32) + 16);
        do
        {
          v31 = *v30;
          v30 += 64;
          v10 += v31;
          v29 -= 64;
        }
        while (v29);
      }
      else
      {
        v10 = 0;
      }
      v97 = 0;
      v98 = 0;
      v99 = 0;
      v33 = *(_QWORD *)(v27 + 16);
      if (v33)
      {
        v34 = 0;
        v35 = 0;
        v36 = *(_QWORD *)(v27 + 32);
        v26 = v33 << 6;
        do
        {
          v10 = (char *)(v36 + v34);
          if (*(_BYTE *)(v36 + v34 + 16))
          {
            v37 = re::StringID::operator==((_QWORD *)(v36 + v34), re::MeshAttributeNames::kIndexTriangles);
            v38 = !v37;
            v39 = (const char *)*((_QWORD *)v10 + 1);
            LOBYTE(v135[2]) = v10[18];
            BYTE1(v135[2]) = v38;
            *((_QWORD *)&v135[2] + 1) = *((id *)v10 + 3);
            LODWORD(v136) = 0;
            DWORD1(v136) = objc_msgSend(*((id *)v10 + 3), sel_length);
            *((_QWORD *)&v136 + 1) = 0xFFFFFFFF00000000;
            v40 = v98;
            if (v98 <= v35)
            {
              v114 = 0;
              v121 = 0u;
              v120 = 0u;
              v119 = 0u;
              v118 = 0u;
              *(_OWORD *)buf = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v115 = 136315906;
              *(_QWORD *)&v115[4] = "operator[]";
              *(_WORD *)&v115[12] = 1024;
              *(_DWORD *)&v115[14] = 468;
              *(_WORD *)&v115[18] = 2048;
              *(_QWORD *)&v115[20] = v35;
              *(_WORD *)&v115[28] = 2048;
              *(_QWORD *)&v115[30] = v40;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_59:
              *(_QWORD *)v115 = 0;
              v121 = 0u;
              v120 = 0u;
              v119 = 0u;
              v118 = 0u;
              *(_OWORD *)buf = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v135[0]) = 136315906;
              *(_QWORD *)((char *)v135 + 4) = "operator[]";
              WORD6(v135[0]) = 1024;
              *(_DWORD *)((char *)v135 + 14) = 797;
              WORD1(v135[1]) = 2048;
              *(_QWORD *)((char *)&v135[1] + 4) = v25;
              WORD6(v135[1]) = 2048;
              *(_QWORD *)((char *)&v135[1] + 14) = v26;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_60:
              *(_QWORD *)v115 = 0;
              v121 = 0u;
              v120 = 0u;
              v119 = 0u;
              v118 = 0u;
              *(_OWORD *)buf = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(v135[0]) = 136315906;
              *(_QWORD *)((char *)v135 + 4) = "operator[]";
              WORD6(v135[0]) = 1024;
              *(_DWORD *)((char *)v135 + 14) = 797;
              WORD1(v135[1]) = 2048;
              *(_QWORD *)((char *)&v135[1] + 4) = v25;
              WORD6(v135[1]) = 2048;
              *(_QWORD *)((char *)&v135[1] + 14) = v26;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_61;
            }
            v41 = v99 + (v35 << 6);
            re::DynamicString::operator=((re::DynamicString *)v41, (re::DynamicString *)v135);
            *(_WORD *)(v41 + 32) = v135[2];
            NS::SharedPtr<MTL::Texture>::operator=((void **)(v41 + 40), (void **)&v135[2] + 1);
            *(_OWORD *)(v41 + 48) = v136;
            if (*((_QWORD *)&v135[2] + 1))
            {

              *((_QWORD *)&v135[2] + 1) = 0;
            }
            v32 = *(re **)&v135[0];
            if (*(_QWORD *)&v135[0] && (BYTE8(v135[0]) & 1) != 0)
              v32 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)&v135[0] + 40))();
            ++v35;
          }
          else if (v10[17])
          {
            switch(*(_BYTE *)(v36 + v34 + 18))
            {
              case 0x1C:
                v42 = v36 + v34;
                if (*(_DWORD *)(v36 + v34 + 48))
                  goto LABEL_68;
                v43 = *(_QWORD *)v42 >> 1;
                *(_DWORD *)v115 = *(_DWORD *)(v42 + 32);
                *(_QWORD *)&v135[0] = v43;
                v44 = (uint64_t *)v135;
                v45 = v115;
                v46 = v95;
                v47 = 4;
                v48 = 1;
                goto LABEL_41;
              case 0x1D:
                v54 = (_QWORD *)(v36 + v34);
                if (*(_DWORD *)(v36 + v34 + 48) != 1)
                  goto LABEL_68;
                v55 = *v54 >> 1;
                *(_QWORD *)&v135[0] = v54[4];
                *(_QWORD *)v115 = v55;
                v44 = (uint64_t *)v115;
                v45 = v135;
                v46 = v95;
                v47 = 8;
                v48 = 32;
                goto LABEL_41;
              case 0x1E:
                v49 = (_QWORD *)(v36 + v34);
                if (*(_DWORD *)(v36 + v34 + 48) != 2)
                  goto LABEL_68;
                v50 = *v49 >> 1;
                v52 = v49[4];
                v51 = v49[5];
                *(_QWORD *)&v135[0] = v52;
                *((_QWORD *)&v135[0] + 1) = v51;
                *(_QWORD *)v115 = v50;
                v44 = (uint64_t *)v115;
                v45 = v135;
                v46 = v95;
                v47 = 16;
                v48 = 33;
                goto LABEL_41;
              case 0x1F:
                v56 = (_QWORD *)(v36 + v34);
                if (*(_DWORD *)(v36 + v34 + 48) != 3)
LABEL_68:
                  std::__throw_bad_variant_access[abi:nn180100]();
                v57 = *v56 >> 1;
                v59 = v56[4];
                v58 = v56[5];
                *(_QWORD *)&v135[0] = v59;
                *((_QWORD *)&v135[0] + 1) = v58;
                *(_QWORD *)v115 = v57;
                v44 = (uint64_t *)v115;
                v45 = v135;
                v46 = v95;
                v47 = 16;
                v48 = 34;
LABEL_41:
                re::MaterialParameterBlock::setConstant(v46, v44, v47, v45, v48, (uint64_t)buf);
                break;
              default:
                v10 = (char *)*re::graphicsLogObjects(v32);
                v32 = (re *)os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v32)
                {
                  v53 = *(unsigned __int8 *)(v36 + v34 + 18);
                  *(_DWORD *)buf = 67109120;
                  *(_DWORD *)&buf[4] = v53;
                  _os_log_impl(&dword_224FE9000, (os_log_t)v10, OS_LOG_TYPE_DEFAULT, "Format %d is not supported in PrimitiveRenderer", buf, 8u);
                }
                break;
            }
          }
          else
          {
            v113 = *(_QWORD *)(v36 + v34) >> 1;
            v10 = (char *)*(id *)(v36 + v34 + 24);
            v110 = v10;
            v111 = 0;
            v112 = objc_msgSend(*(id *)(v36 + v34 + 24), sel_length);
            re::MaterialParameterBlock::setBuffer(v95, &v113, (uint64_t)&v110, (uint64_t)v128);
            *(_QWORD *)v128 = 0;
            if (v10)
            {

              v110 = 0;
            }
            v113 = 0;
          }
          v34 += 64;
        }
        while (v26 != v34);
      }
      v24 = (_QWORD *)v94;
      v26 = *(_QWORD *)(v94 + 1072);
      if (v26 <= v25)
        goto LABEL_60;
      v26 = v101;
      if (v101 <= v25)
        break;
      v60 = *(_QWORD *)(v94 + 1088) + 96 * v25;
      v61 = (_OWORD *)(v102 + 32 * v25);
      v62 = *(_OWORD *)(v60 + 64);
      *v61 = *(_OWORD *)(v60 + 48);
      v61[1] = v62;
      v26 = *(_QWORD *)(v94 + 1072);
      if (v26 <= v25)
        goto LABEL_62;
      v63 = *(_QWORD *)(v94 + 1088) + 96 * v25;
      v64 = *(float32x4_t *)(v63 + 48);
      v63 += 48;
      v65 = v64;
      v66 = v105;
      v67 = v106;
      v66.i32[3] = 0;
      v65.i32[3] = 0;
      v105 = vminnmq_f32(v66, v65);
      v68 = *(float32x4_t *)(v63 + 16);
      v67.i32[3] = 0;
      v68.i32[3] = 0;
      v106 = vmaxnmq_f32(v67, v68);
      v96[0] = 0x4B61EB17F5807C1ALL;
      v96[1] = (uint64_t)"PrimitiveRendering Mesh Instance";
      v69 = *(_DWORD *)(v63 + 40);
      v70 = *(_DWORD *)(v63 + 32);
      *(_OWORD *)v115 = xmmword_2260E5F10;
      *(_OWORD *)&v115[16] = xmmword_2260E5F20;
      *(_OWORD *)&v115[32] = xmmword_2260E5F40;
      v116 = xmmword_2260E5D70;
      WORD2(v114) = 0;
      LODWORD(v114) = 0;
      re::MeshPart::MeshPart((uint64_t)buf, v96, v25, v99, v98, v69, v70, 1, (_OWORD *)v63, v25, (__int128 *)v115, (re::MeshPartFlags *)&v114, -1, 0);
      v26 = *((_QWORD *)&v107 + 1);
      if (*((_QWORD *)&v107 + 1) <= v25)
        goto LABEL_63;
      re::MeshPart::operator=((uint64_t *)(v108 + 560 * v25), (uint64_t *)buf);
      re::StringID::destroyString((re::StringID *)&v127);
      re::FixedArray<re::StringID>::deinit(v126);
      re::AttributeTable::~AttributeTable((re::AttributeTable *)buf);
      re::StringID::destroyString((re::StringID *)v96);
      v26 = *((_QWORD *)&v107 + 1);
      if (*((_QWORD *)&v107 + 1) <= v25)
        goto LABEL_64;
      *(_BYTE *)(v108 + 560 * v25 + 536) = 3;
      v71 = re::MaterialParameterBlock::copyCurrentStateAsMaterialParameterTable(v95, a2);
      v10 = v88;
      v26 = *((_QWORD *)v88 + 1);
      if (v26 <= v25)
        goto LABEL_65;
      *(_QWORD *)(*((_QWORD *)v88 + 2) + 8 * v25) = v71;
      v26 = v91[1];
      if (v26 <= v25)
        goto LABEL_66;
      *(_QWORD *)(v91[2] + 8 * v25) = v90;
      v18 = (_anonymous_namespace_ *)re::FixedArray<re::NamedVertexBuffer>::deinit(&v97);
      if (++v25 == (_QWORD)v93)
        goto LABEL_51;
    }
LABEL_61:
    *(_QWORD *)v115 = 0;
    v121 = 0u;
    v120 = 0u;
    v119 = 0u;
    v118 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v135[0]) = 136315906;
    *(_QWORD *)((char *)v135 + 4) = "operator[]";
    WORD6(v135[0]) = 1024;
    *(_DWORD *)((char *)v135 + 14) = 468;
    WORD1(v135[1]) = 2048;
    *(_QWORD *)((char *)&v135[1] + 4) = v25;
    WORD6(v135[1]) = 2048;
    *(_QWORD *)((char *)&v135[1] + 14) = v26;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_62:
    *(_QWORD *)v115 = 0;
    v121 = 0u;
    v120 = 0u;
    v119 = 0u;
    v118 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v135[0]) = 136315906;
    *(_QWORD *)((char *)v135 + 4) = "operator[]";
    WORD6(v135[0]) = 1024;
    *(_DWORD *)((char *)v135 + 14) = 797;
    WORD1(v135[1]) = 2048;
    *(_QWORD *)((char *)&v135[1] + 4) = v25;
    WORD6(v135[1]) = 2048;
    *(_QWORD *)((char *)&v135[1] + 14) = v26;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_63:
    v110 = 0;
    v136 = 0u;
    v137 = 0u;
    memset(v135, 0, sizeof(v135));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v128 = 136315906;
    *(_QWORD *)&v128[4] = "operator[]";
    v129 = 1024;
    v130 = 468;
    v131 = 2048;
    v132 = v25;
    v133 = 2048;
    v134 = v26;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_64:
    *(_QWORD *)v115 = 0;
    v121 = 0u;
    v120 = 0u;
    v119 = 0u;
    v118 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v135[0]) = 136315906;
    *(_QWORD *)((char *)v135 + 4) = "operator[]";
    WORD6(v135[0]) = 1024;
    *(_DWORD *)((char *)v135 + 14) = 468;
    WORD1(v135[1]) = 2048;
    *(_QWORD *)((char *)&v135[1] + 4) = v25;
    WORD6(v135[1]) = 2048;
    *(_QWORD *)((char *)&v135[1] + 14) = v26;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_65:
    *(_QWORD *)v115 = 0;
    v121 = 0u;
    v120 = 0u;
    v119 = 0u;
    v118 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v135[0]) = 136315906;
    *(_QWORD *)((char *)v135 + 4) = "operator[]";
    WORD6(v135[0]) = 1024;
    *(_DWORD *)((char *)v135 + 14) = 468;
    WORD1(v135[1]) = 2048;
    *(_QWORD *)((char *)&v135[1] + 4) = v25;
    WORD6(v135[1]) = 2048;
    *(_QWORD *)((char *)&v135[1] + 14) = v26;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_66:
    *(_QWORD *)v115 = 0;
    v121 = 0u;
    v120 = 0u;
    v119 = 0u;
    v118 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v135[0]) = 136315906;
    *(_QWORD *)((char *)v135 + 4) = "operator[]";
    WORD6(v135[0]) = 1024;
    *(_DWORD *)((char *)v135 + 14) = 468;
    WORD1(v135[1]) = 2048;
    *(_QWORD *)((char *)&v135[1] + 4) = v25;
    WORD6(v135[1]) = 2048;
    *(_QWORD *)((char *)&v135[1] + 14) = v26;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_67;
  }
LABEL_51:
  v72 = re::DataArray<re::MeshModel>::create<re::MeshModel>(*(_QWORD *)(v24[149] + 32) + 8, &v103);
  re::MeshManager::destroyModel(*(uint64_t **)(v24[149] + 32), v72);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = &str_110;
  BYTE8(v118) = 0;
  HIDWORD(v118) = 1065353216;
  v123 = 0u;
  v124 = 0u;
  v125 = 0u;
  *(_QWORD *)&v118 = v72;
  v93 = xmmword_2260E5F20;
  v94 = xmmword_2260E5F10;
  v119 = xmmword_2260E5F10;
  v120 = xmmword_2260E5F20;
  v89 = xmmword_2260E5D70;
  v90 = xmmword_2260E5F40;
  v121 = xmmword_2260E5F40;
  v122 = xmmword_2260E5D70;
  *(_QWORD *)v115 = re::DataArray<re::MeshInstance>::create<re::MeshInstance>(*(_QWORD *)(v24[149] + 32) + 72, (uint64_t)buf);
  re::MeshManager::destroyInstance(*(uint64_t **)(v24[149] + 32), *(uint64_t *)v115);
  v26 = a4;
  *(_OWORD *)(a4 + 200) = 0u;
  *(_BYTE *)(a4 + 328) = 0;
  *(_BYTE *)(a4 + 344) = 0;
  *(_OWORD *)(a4 + 352) = 0u;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(_BYTE *)(a4 + 176) = 0;
  *(_OWORD *)(a4 + 216) = 0u;
  *(_OWORD *)(a4 + 232) = 0u;
  *(_OWORD *)(a4 + 248) = 0u;
  *(_OWORD *)(a4 + 264) = 0u;
  *(_OWORD *)(a4 + 280) = 0u;
  *(_OWORD *)(a4 + 296) = 0u;
  *(_OWORD *)(a4 + 308) = 0u;
  if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
LABEL_67:
    dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
  *(_QWORD *)(v26 + 368) = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v26 + 376) = _D0;
  *(_DWORD *)(v26 + 384) = 1065353216;
  *(_OWORD *)(v26 + 392) = 0u;
  *(_OWORD *)(v26 + 408) = 0u;
  *(_DWORD *)(v26 + 423) = 0;
  *(_QWORD *)(v26 + 428) = 0xFFFFFFFF00000001;
  *(_BYTE *)(v26 + 496) = 0;
  *(_QWORD *)(v26 + 544) = 0;
  *(_BYTE *)(v26 + 560) = 0;
  *(_QWORD *)(v26 + 640) = 0x10100010001;
  v78 = a2;
  v79 = (_QWORD *)(*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 24, 8);
  v79[1] = 0;
  v79[2] = 0;
  *v79 = 0;
  re::FixedArray<re::DataArrayHandle<re::MeshInstance>>::init<re::DataArrayHandle<re::MeshInstance>&>(v79, (uint64_t)a2, v115);
  v80 = v79[1];
  *(_QWORD *)v26 = v79[2];
  *(_QWORD *)(v26 + 8) = v80;
  *(_QWORD *)&v135[0] = &v105;
  *((_QWORD *)&v135[0] + 1) = 1;
  v81 = (*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(_QWORD *)v78 + 32))(v78, 72, 8);
  *(_QWORD *)(v26 + 24) = re::MeshBoundingBoxes::MeshBoundingBoxes(v81, (uint64_t)a2, (const void **)v135, 1);
  *(_QWORD *)&v135[0] = v102;
  *((_QWORD *)&v135[0] + 1) = v101;
  v82 = (*(uint64_t (**)(re::MaterialParameterTableBuilder *, uint64_t, uint64_t))(*(_QWORD *)v78 + 32))(v78, 72, 8);
  v83 = re::MeshBoundingBoxes::MeshBoundingBoxes(v82, (uint64_t)a2, (const void **)v135, 1);
  *(_QWORD *)(v26 + 32) = v83;
  v84 = v106;
  *(float32x4_t *)(v26 + 448) = v105;
  *(float32x4_t *)(v26 + 464) = v84;
  *(_QWORD *)(v26 + 480) = v83;
  *(_OWORD *)(v26 + 48) = v94;
  *(_OWORD *)(v26 + 64) = v93;
  *(_OWORD *)(v26 + 80) = v90;
  *(_OWORD *)(v26 + 96) = v89;
  v85 = *((_QWORD *)v10 + 1);
  *(_QWORD *)(v26 + 184) = *((_QWORD *)v10 + 2);
  *(_QWORD *)(v26 + 192) = v85;
  v86 = v91[1];
  *(_QWORD *)(v26 + 112) = v91[2];
  *(_QWORD *)(v26 + 120) = v86;
  re::MeshInstance::~MeshInstance((re::MeshInstance *)buf);
  if (v100 && v101)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v100 + 40))(v100, v102);
  if (v95)

  re::MeshModel::~MeshModel((re::MeshModel *)&v103);
}

void re::populateAttribute<re::Vector3<float>,unsigned long>(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, re::MaterialParameterBlock *a5, unint64_t a6)
{
  unint64_t v10;
  char isAttribute;
  uint64_t v13;
  uint64_t Attribute;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  _QWORD v27[4];
  _QWORD v28[4];
  uint64_t v29;
  _BYTE v30[18];
  __int16 v31;
  unint64_t v32;
  __int16 v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v10 = a2;
  v40 = *MEMORY[0x24BDAC8D0];
  isAttribute = re::PrimitiveRenderingDynamicGeometry::isAttributeVarying<unsigned long>(a1, a2, 2u);
  v13 = *a4;
  v30[0] = isAttribute ^ 1;
  *(_QWORD *)&v35 = v13;
  re::MaterialParameterBlock::setConstant(a5, (uint64_t *)&v35, 1uLL, v30, 2, (uint64_t)v28);
  v28[0] = 0;
  if ((isAttribute & 1) == 0)
  {
    a6 = *(_QWORD *)(a1 + 792);
    if (a6 > v10)
    {
      v20 = *(_QWORD *)(a1 + 808) + 32 * v10;
      if (*(_DWORD *)(v20 + 16) == 2)
      {
        v22 = *(_QWORD *)v20;
        v21 = *(_QWORD *)(v20 + 8);
        v23 = *a3;
        *(_QWORD *)v30 = v22;
        *(_QWORD *)&v30[8] = v21;
        v29 = v23;
        re::MaterialParameterBlock::setConstant(a5, &v29, 0x10uLL, v30, 33, (uint64_t)&v35);
      }
      else
      {
        v24 = std::__throw_bad_variant_access[abi:nn180100]();
        re::populateAttribute<re::Vector4<float>,unsigned long>(v24);
      }
      return;
    }
LABEL_12:
    v29 = 0;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v35 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v30 = 136315906;
    *(_QWORD *)&v30[4] = "operator[]";
    *(_WORD *)&v30[12] = 1024;
    *(_DWORD *)&v30[14] = 797;
    v31 = 2048;
    v32 = v10;
    v33 = 2048;
    v34 = a6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  Attribute = re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>(a1, v10, 2u);
  v10 = *(_QWORD *)(Attribute + 16);
  if (v10 <= a6)
  {
    v29 = 0;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v35 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v30 = 136315906;
    *(_QWORD *)&v30[4] = "operator[]";
    *(_WORD *)&v30[12] = 1024;
    *(_DWORD *)&v30[14] = 797;
    v31 = 2048;
    v32 = a6;
    v33 = 2048;
    v34 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  v15 = *(_QWORD *)(Attribute + 32) + 32 * a6;
  v16 = *(_QWORD *)(v15 + 16);
  v17 = *(unsigned int *)(v15 + 8);
  v18 = **(id **)(v15 + 24);
  v26 = *a3;
  v19 = v18;
  v25[0] = v19;
  v25[1] = v17 | (v16 << 32);
  re::MaterialParameterBlock::setBuffer(a5, &v26, (uint64_t)v25, (uint64_t)v27);
  v27[0] = 0;
  if (v19)

  if (v18)
}

void re::populateAttribute<re::Vector4<float>,unsigned long>(uint64_t a1, unint64_t a2, uint64_t *a3, uint64_t *a4, re::MaterialParameterBlock *a5, unint64_t a6)
{
  unint64_t v10;
  char isAttribute;
  uint64_t v13;
  uint64_t Attribute;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  _QWORD v29[4];
  _QWORD v30[4];
  uint64_t v31;
  _BYTE v32[18];
  __int16 v33;
  unint64_t v34;
  __int16 v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v10 = a2;
  v42 = *MEMORY[0x24BDAC8D0];
  isAttribute = re::PrimitiveRenderingDynamicGeometry::isAttributeVarying<unsigned long>(a1, a2, 3u);
  v13 = *a4;
  v32[0] = isAttribute ^ 1;
  *(_QWORD *)&v37 = v13;
  re::MaterialParameterBlock::setConstant(a5, (uint64_t *)&v37, 1uLL, v32, 2, (uint64_t)v30);
  v30[0] = 0;
  if ((isAttribute & 1) == 0)
  {
    a6 = *(_QWORD *)(a1 + 832);
    if (a6 > v10)
    {
      v20 = *(_QWORD *)(a1 + 848) + 32 * v10;
      if (*(_DWORD *)(v20 + 16) == 3)
      {
        v22 = *(_QWORD *)v20;
        v21 = *(_QWORD *)(v20 + 8);
        v23 = *a3;
        *(_QWORD *)v32 = v22;
        *(_QWORD *)&v32[8] = v21;
        v31 = v23;
        re::MaterialParameterBlock::setConstant(a5, &v31, 0x10uLL, v32, 34, (uint64_t)&v37);
      }
      else
      {
        v24 = (_QWORD *)std::__throw_bad_variant_access[abi:nn180100]();
        re::FixedArray<re::NamedVertexBuffer>::init<>(v24, v25, v26);
      }
      return;
    }
LABEL_12:
    v31 = 0;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v32 = 136315906;
    *(_QWORD *)&v32[4] = "operator[]";
    *(_WORD *)&v32[12] = 1024;
    *(_DWORD *)&v32[14] = 797;
    v33 = 2048;
    v34 = v10;
    v35 = 2048;
    v36 = a6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  Attribute = re::PrimitiveRenderingDynamicGeometry::getAttributeChunks<unsigned long>(a1, v10, 3u);
  v10 = *(_QWORD *)(Attribute + 16);
  if (v10 <= a6)
  {
    v31 = 0;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v32 = 136315906;
    *(_QWORD *)&v32[4] = "operator[]";
    *(_WORD *)&v32[12] = 1024;
    *(_DWORD *)&v32[14] = 797;
    v33 = 2048;
    v34 = a6;
    v35 = 2048;
    v36 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  v15 = *(_QWORD *)(Attribute + 32) + 32 * a6;
  v16 = *(_QWORD *)(v15 + 16);
  v17 = *(unsigned int *)(v15 + 8);
  v18 = **(id **)(v15 + 24);
  v28 = *a3;
  v19 = v18;
  v27[0] = v19;
  v27[1] = v17 | (v16 << 32);
  re::MaterialParameterBlock::setBuffer(a5, &v28, (uint64_t)v27, (uint64_t)v29);
  v29[0] = 0;
  if (v19)

  if (v18)
}

_QWORD *re::FixedArray<re::NamedVertexBuffer>::init<>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  _anonymous_namespace_ *v5;
  uint64_t v6;
  _anonymous_namespace_ *v7;
  unint64_t i;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >> 58)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 64, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3 << 6, 8);
  v4[2] = v5;
  if (!v5)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v7 = v5;
  for (i = a3 - 1; i; --i)
  {
    *(_OWORD *)v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v7, 0);
    *((_WORD *)v7 + 16) = 256;
    *((_QWORD *)v7 + 5) = 0;
    *((_QWORD *)v7 + 6) = 0;
    *((_QWORD *)v7 + 7) = 0xFFFFFFFF00000000;
    v7 = (_anonymous_namespace_ *)((char *)v7 + 64);
  }
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  result = re::DynamicString::setCapacity(v7, 0);
  *((_WORD *)v7 + 16) = 256;
  *((_QWORD *)v7 + 5) = 0;
  *((_QWORD *)v7 + 6) = 0;
  *((_QWORD *)v7 + 7) = 0xFFFFFFFF00000000;
  return result;
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::~Callable(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24ED73C68;
  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {

    *(_QWORD *)(a1 + 48) = 0;
  }
  if (*v2)
  {
    if (*(_QWORD *)(a1 + 40))
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
    *(_QWORD *)(a1 + 40) = 0;
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

void re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::~Callable(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_24ED73C68;
  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {

    *(_QWORD *)(a1 + 48) = 0;
  }
  if (*v2)
  {
    if (*(_QWORD *)(a1 + 40))
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
    *(_QWORD *)(a1 + 40) = 0;
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    ++*(_DWORD *)(a1 + 32);
  }
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::operator()(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  re::MaterialParameterBlock *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[18];
  __int16 v16;
  unint64_t v17;
  __int16 v18;
  unint64_t v19;
  _OWORD v20[5];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 <= *a2)
  {
    v14 = 0;
    memset(v20, 0, sizeof(v20));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v15 = 136315906;
    *(_QWORD *)&v15[4] = "operator[]";
    *(_WORD *)&v15[12] = 1024;
    *(_DWORD *)&v15[14] = 797;
    v16 = 2048;
    v17 = v2;
    v18 = 2048;
    v19 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 40) + 32 * v2;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = *(unsigned int *)(v6 + 8);
  v9 = **(id **)(v6 + 24);
  v10 = v8 | (v7 << 32);
  v11 = *(re::MaterialParameterBlock **)(a1 + 48);
  v14 = 0x70A66CC11824C2D9;
  v12 = v9;
  *(_QWORD *)v15 = v12;
  *(_QWORD *)&v15[8] = v10;
  re::MaterialParameterBlock::setBuffer(v11, &v14, (uint64_t)v15, (uint64_t)v20);
  *(_QWORD *)&v20[0] = 0;
  if (v12)

  if (v9)
  v13 = 0xADE0D49ECE3B3;
  re::populateAttribute<re::Vector4<float>>(v5, 1u, &v13, 0x2A5B4409271D7A77, *(re::MaterialParameterBlock **)(a1 + 48), v2);
  v13 = 0x59BE5D4061B1;
  re::populateAttribute<float>(v5, 2u, &v13, 0x4BDE6E805B77B40DLL, *(re::MaterialParameterBlock **)(a1 + 48), v2);
}

_QWORD *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::cloneInto(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  id v5;

  *a2 = &off_24ED73C68;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(a2 + 1), a1 + 1);
  v4 = a1[6];
  a2[6] = v4;
  if (v4)
    v5 = (id)(v4 + 8);
  a2[7] = a1[7];
  return a2;
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED73C68;
  re::DynamicArray<re::GPUAllocation>::DynamicArray(a2 + 8, (uint64_t *)(a1 + 8));
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  return a2;
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::size()
{
  return 64;
}

void re::populateAttribute<re::Vector4<float>>(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t a4, re::MaterialParameterBlock *a5, unint64_t a6)
{
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  _QWORD v26[4];
  _QWORD v27[4];
  uint64_t v28;
  _BYTE v29[18];
  __int16 v30;
  unint64_t v31;
  __int16 v32;
  unint64_t v33;
  _OWORD v34[5];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v11 = *(unsigned __int8 *)(a1 + a2 + 512);
  v29[0] = v11 ^ 1;
  *(_QWORD *)&v34[0] = a4;
  re::MaterialParameterBlock::setConstant(a5, (uint64_t *)v34, 1uLL, v29, 2, (uint64_t)v27);
  v27[0] = 0;
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 40 * v10 + 16);
    if (v12 <= a6)
    {
      v28 = 0;
      memset(v34, 0, sizeof(v34));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v29 = 136315906;
      *(_QWORD *)&v29[4] = "operator[]";
      *(_WORD *)&v29[12] = 1024;
      *(_DWORD *)&v29[14] = 797;
      v30 = 2048;
      v31 = a6;
      v32 = 2048;
      v33 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v13 = *(_QWORD *)(a1 + 40 * v10 + 32) + 32 * a6;
    v14 = *(_QWORD *)(v13 + 16);
    v15 = *(unsigned int *)(v13 + 8);
    v16 = **(id **)(v13 + 24);
    v25 = *a3;
    v17 = v16;
    v24[0] = v17;
    v24[1] = v15 | (v14 << 32);
    re::MaterialParameterBlock::setBuffer(a5, &v25, (uint64_t)v24, (uint64_t)v26);
    v26[0] = 0;
    if (v17)

    if (v16)
  }
  else
  {
    v18 = a1 + 32 * v10;
    if (*(_DWORD *)(v18 + 304) == 3)
    {
      v19 = (uint64_t *)(v18 + 288);
      v21 = *v19;
      v20 = v19[1];
      v22 = *a3;
      *(_QWORD *)v29 = v21;
      *(_QWORD *)&v29[8] = v20;
      v28 = v22;
      re::MaterialParameterBlock::setConstant(a5, &v28, 0x10uLL, v29, 34, (uint64_t)v34);
    }
    else
    {
      v23 = std::__throw_bad_variant_access[abi:nn180100]();
      re::populateAttribute<float>(v23);
    }
  }
}

void re::populateAttribute<float>(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t a4, re::MaterialParameterBlock *a5, unint64_t a6)
{
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  _QWORD v24[4];
  _QWORD v25[4];
  uint64_t v26;
  _BYTE v27[12];
  __int16 v28;
  int v29;
  __int16 v30;
  unint64_t v31;
  __int16 v32;
  unint64_t v33;
  _OWORD v34[5];
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v11 = *(unsigned __int8 *)(a1 + a2 + 512);
  v27[0] = v11 ^ 1;
  *(_QWORD *)&v34[0] = a4;
  re::MaterialParameterBlock::setConstant(a5, (uint64_t *)v34, 1uLL, v27, 2, (uint64_t)v25);
  v25[0] = 0;
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 40 * v10 + 16);
    if (v12 <= a6)
    {
      v26 = 0;
      memset(v34, 0, sizeof(v34));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v27 = 136315906;
      *(_QWORD *)&v27[4] = "operator[]";
      v28 = 1024;
      v29 = 797;
      v30 = 2048;
      v31 = a6;
      v32 = 2048;
      v33 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v13 = *(_QWORD *)(a1 + 40 * v10 + 32) + 32 * a6;
    v14 = *(_QWORD *)(v13 + 16);
    v15 = *(unsigned int *)(v13 + 8);
    v16 = **(id **)(v13 + 24);
    v23 = *a3;
    v17 = v16;
    v22[0] = v17;
    v22[1] = v15 | (v14 << 32);
    re::MaterialParameterBlock::setBuffer(a5, &v23, (uint64_t)v22, (uint64_t)v24);
    v24[0] = 0;
    if (v17)

    if (v16)
  }
  else
  {
    v18 = a1 + 32 * v10;
    if (*(_DWORD *)(v18 + 304))
    {
      v21 = std::__throw_bad_variant_access[abi:nn180100]();
      re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::~Callable(v21);
    }
    else
    {
      v19 = *(_DWORD *)(v18 + 288);
      v20 = *a3;
      LODWORD(v26) = v19;
      *(_QWORD *)v27 = v20;
      re::MaterialParameterBlock::setConstant(a5, (uint64_t *)v27, 4uLL, &v26, 1, (uint64_t)v34);
    }
  }
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::~Callable(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)a1 = &off_24ED73CC0;
  v3 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 40))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 40) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

void re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::~Callable(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)a1 = &off_24ED73CC0;
  v3 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 40))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 40) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 32);
  }
  JUMPOUT(0x2276933B8);
}

char *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  char *result;
  float32x4_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;

  v5 = *a2;
  if (*(_QWORD *)(a1 + 24) <= (unint64_t)*a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v6 = *a3;
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)&v8 = 0x7F0000007FLL;
  *((_QWORD *)&v8 + 1) = 0x7F0000007FLL;
  v16 = vdupq_n_s32(0x7F800000u);
  *a4 = v16;
  a4[1] = v8;
  v9 = v7 + 32 * v5;
  result = (char *)objc_msgSend(**(id **)(v9 + 24), sel_contents);
  if (v6)
  {
    v11 = (float32x4_t *)&result[*(_QWORD *)(v9 + 8)];
    v12 = (float32x4_t)v16;
    v13.i64[0] = 0x7F0000007FLL;
    v13.i32[2] = 127;
    do
    {
      v14 = *v11++;
      v15 = v14;
      v12.i32[3] = 0;
      v15.i32[3] = 0;
      v12 = vminnmq_f32(v12, v15);
      v13.i32[3] = 0;
      v13 = vmaxnmq_f32(v13, v15);
      --v6;
    }
    while (v6);
    *a4 = v12;
    a4[1] = v13;
  }
  return result;
}

_QWORD *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED73CC0;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
  return a2;
}

_QWORD *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED73CC0;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
  return a2;
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfPoints(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::size()
{
  return 48;
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::~Callable(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24ED73D18;
  v2 = (_QWORD *)(a1 + 8);
  v4 = (_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 88))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *(_QWORD *)(a1 + 88) = 0;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    ++*(_DWORD *)(a1 + 80);
  }
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
  {

    *(_QWORD *)(a1 + 48) = 0;
  }
  if (*v2)
  {
    if (*(_QWORD *)(a1 + 40))
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
    *(_QWORD *)(a1 + 40) = 0;
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

void re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::~Callable(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24ED73D18;
  v2 = (_QWORD *)(a1 + 8);
  v4 = (_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 88))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *(_QWORD *)(a1 + 88) = 0;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    ++*(_DWORD *)(a1 + 80);
  }
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
  {

    *(_QWORD *)(a1 + 48) = 0;
  }
  if (*v2)
  {
    if (*(_QWORD *)(a1 + 40))
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
    *(_QWORD *)(a1 + 40) = 0;
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    ++*(_DWORD *)(a1 + 32);
  }
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::operator()(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  re::MaterialParameterBlock *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  re::MaterialParameterBlock *v19;
  id v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24[4];
  uint64_t v25;
  _BYTE v26[18];
  __int16 v27;
  unint64_t v28;
  __int16 v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4 <= *a2)
  {
    v24[0] = 0;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v31 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v26 = 136315906;
    *(_QWORD *)&v26[4] = "operator[]";
    *(_WORD *)&v26[12] = 1024;
    *(_DWORD *)&v26[14] = 797;
    v27 = 2048;
    v28 = v3;
    v29 = 2048;
    v30 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 40) + 32 * v3;
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(unsigned int *)(v7 + 8);
  v10 = **(id **)(v7 + 24);
  v11 = v9 | (v8 << 32);
  v12 = *(re::MaterialParameterBlock **)(a1 + 48);
  v23 = 0x42DD0EA8FF94AE93;
  v13 = v10;
  v22[0] = v13;
  v22[1] = v11;
  re::MaterialParameterBlock::setBuffer(v12, &v23, (uint64_t)v22, (uint64_t)v24);
  v24[0] = 0;
  if (v13)

  if (v10)
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 <= v3)
  {
LABEL_13:
    v25 = 0;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v31 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v26 = 136315906;
    *(_QWORD *)&v26[4] = "operator[]";
    *(_WORD *)&v26[12] = 1024;
    *(_DWORD *)&v26[14] = 797;
    v27 = 2048;
    v28 = v3;
    v29 = 2048;
    v30 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v14 = *(_QWORD *)(a1 + 88) + 32 * v3;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = *(unsigned int *)(v14 + 8);
  v17 = **(id **)(v14 + 24);
  v18 = v16 | (v15 << 32);
  v19 = *(re::MaterialParameterBlock **)(a1 + 48);
  v25 = 0x42DD0EA8FF94AE94;
  v20 = v17;
  *(_QWORD *)v26 = v20;
  *(_QWORD *)&v26[8] = v18;
  re::MaterialParameterBlock::setBuffer(v19, &v25, (uint64_t)v26, (uint64_t)&v31);
  *(_QWORD *)&v31 = 0;
  if (v20)

  if (v17)
  v21 = 0x567E936567CFLL;
  re::populateAttribute<re::Vector4<float>>(v6, 5u, &v21, 0xAE343F25523302FLL, *(re::MaterialParameterBlock **)(a1 + 48), v3);
  v21 = 0x567E947C6632;
  re::populateAttribute<float>(v6, 6u, &v21, 0x11DE7004A5E6CC6CLL, *(re::MaterialParameterBlock **)(a1 + 48), v3);
}

_QWORD *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::cloneInto(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  id v5;

  *a2 = &off_24ED73D18;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(a2 + 1), a1 + 1);
  v4 = a1[6];
  a2[6] = v4;
  if (v4)
    v5 = (id)(v4 + 8);
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(a2 + 7), a1 + 7);
  a2[12] = a1[12];
  return a2;
}

_QWORD *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::moveInto(uint64_t *a1, _QWORD *a2)
{
  *a2 = &off_24ED73D18;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(a2 + 1), a1 + 1);
  a2[6] = a1[6];
  a1[6] = 0;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(a2 + 7), a1 + 7);
  a2[12] = a1[12];
  return a2;
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::size()
{
  return 104;
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::~Callable(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)a1 = &off_24ED73D70;
  v2 = (_QWORD *)(a1 + 8);
  v4 = (_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 80))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *(_QWORD *)(a1 + 80) = 0;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    ++*(_DWORD *)(a1 + 72);
  }
  if (*v2)
  {
    if (*(_QWORD *)(a1 + 40))
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
    *(_QWORD *)(a1 + 40) = 0;
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

void re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::~Callable(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;

  *(_QWORD *)a1 = &off_24ED73D70;
  v2 = (_QWORD *)(a1 + 8);
  v4 = (_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 80))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *(_QWORD *)(a1 + 80) = 0;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    ++*(_DWORD *)(a1 + 72);
  }
  if (*v2)
  {
    if (*(_QWORD *)(a1 + 40))
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
    *(_QWORD *)(a1 + 40) = 0;
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    ++*(_DWORD *)(a1 + 32);
  }
  JUMPOUT(0x2276933B8);
}

char *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::operator()@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X2>, float32x4_t *a4@<X8>)
{
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  float32x4_t *v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  char *result;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;

  v5 = *a2;
  if (a1[3] <= *a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_14;
  }
  v7 = *a3;
  v8 = a1[5] + 32 * v5;
  v9 = (char *)objc_msgSend(**(id **)(v8 + 24), sel_contents);
  if (v7)
  {
    v10 = (float32x4_t *)&v9[*(_QWORD *)(v8 + 8)];
    v11 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v12.i64[0] = 0x7F0000007FLL;
    v12.i32[2] = 127;
    v13 = v7;
    do
    {
      v14 = *v10++;
      v15 = v14;
      v11.i32[3] = 0;
      v15.i32[3] = 0;
      v11 = vminnmq_f32(v11, v15);
      v12.i32[3] = 0;
      v12 = vmaxnmq_f32(v12, v15);
      --v13;
    }
    while (v13);
  }
  else
  {
    v11 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v12.i64[0] = 0x7F0000007FLL;
    v12.i64[1] = 0x7F0000007FLL;
  }
  if (a1[8] <= v5)
  {
LABEL_14:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v16 = a1[10];
  v24 = v12;
  v25 = v11;
  *a4 = v11;
  a4[1] = v12;
  v17 = v16 + 32 * v5;
  result = (char *)objc_msgSend(**(id **)(v17 + 24), sel_contents);
  if (v7)
  {
    v19 = (float32x4_t *)&result[*(_QWORD *)(v17 + 8)];
    v21 = v24;
    v20 = v25;
    do
    {
      v22 = *v19++;
      v23 = v22;
      v20.i32[3] = 0;
      v23.i32[3] = 0;
      v20 = vminnmq_f32(v20, v23);
      v21.i32[3] = 0;
      v21 = vmaxnmq_f32(v21, v23);
      --v7;
    }
    while (v7);
    *a4 = v20;
    a4[1] = v21;
  }
  return result;
}

_QWORD *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  *a2 = &off_24ED73D70;
  v4 = (uint64_t)(a2 + 6);
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
  re::DynamicArray<re::GPUAllocation>::DynamicArray(v4, (uint64_t *)(a1 + 48));
  return a2;
}

_QWORD *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED73D70;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(a2 + 6), (uint64_t *)(a1 + 48));
  return a2;
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfLines(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::size()
{
  return 88;
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::~Callable(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24ED73DC8;
  v2 = (_QWORD *)(a1 + 8);
  v4 = (_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 88))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *(_QWORD *)(a1 + 88) = 0;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    ++*(_DWORD *)(a1 + 80);
  }
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
  {

    *(_QWORD *)(a1 + 48) = 0;
  }
  if (*v2)
  {
    if (*(_QWORD *)(a1 + 40))
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
    *(_QWORD *)(a1 + 40) = 0;
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

void re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::~Callable(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_24ED73DC8;
  v2 = (_QWORD *)(a1 + 8);
  v4 = (_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 88))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *(_QWORD *)(a1 + 88) = 0;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    ++*(_DWORD *)(a1 + 80);
  }
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
  {

    *(_QWORD *)(a1 + 48) = 0;
  }
  if (*v2)
  {
    if (*(_QWORD *)(a1 + 40))
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
    *(_QWORD *)(a1 + 40) = 0;
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    ++*(_DWORD *)(a1 + 32);
  }
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::operator()(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  re::MaterialParameterBlock *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  re::MaterialParameterBlock *v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27[4];
  uint64_t v28;
  _BYTE v29[18];
  __int16 v30;
  unint64_t v31;
  __int16 v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 24);
  if (v4 <= *a2)
  {
    v27[0] = 0;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v29 = 136315906;
    *(_QWORD *)&v29[4] = "operator[]";
    *(_WORD *)&v29[12] = 1024;
    *(_DWORD *)&v29[14] = 797;
    v30 = 2048;
    v31 = v3;
    v32 = 2048;
    v33 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 40) + 32 * v3;
  v8 = *(_QWORD *)(v7 + 16);
  v9 = *(unsigned int *)(v7 + 8);
  v10 = **(id **)(v7 + 24);
  v11 = v9 | (v8 << 32);
  v12 = *(re::MaterialParameterBlock **)(a1 + 48);
  v26 = 0xEE268E43F3D1BEALL;
  v13 = v10;
  v25[0] = v13;
  v25[1] = v11;
  re::MaterialParameterBlock::setBuffer(v12, &v26, (uint64_t)v25, (uint64_t)v27);
  v27[0] = 0;
  if (v13)

  if (v10)
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 <= v3)
  {
LABEL_13:
    v28 = 0;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v29 = 136315906;
    *(_QWORD *)&v29[4] = "operator[]";
    *(_WORD *)&v29[12] = 1024;
    *(_DWORD *)&v29[14] = 797;
    v30 = 2048;
    v31 = v3;
    v32 = 2048;
    v33 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v14 = *(_QWORD *)(a1 + 88) + 32 * v3;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = *(unsigned int *)(v14 + 8);
  v17 = **(id **)(v14 + 24);
  v18 = v16 | (v15 << 32);
  v19 = *(re::MaterialParameterBlock **)(a1 + 48);
  v28 = 0x1D89B02FDAB8EF6FLL;
  v20 = v17;
  *(_QWORD *)v29 = v20;
  *(_QWORD *)&v29[8] = v18;
  re::MaterialParameterBlock::setBuffer(v19, &v28, (uint64_t)v29, (uint64_t)&v34);
  *(_QWORD *)&v34 = 0;
  if (v20)

  if (v17)
  v21 = *(_QWORD *)(a1 + 104);
  v24 = 0xB20902AF06629;
  v23 = 0x19A8EF0EE74E6741;
  re::populateAttribute<re::Vector3<float>,unsigned long>(v6, v21, &v24, &v23, *(re::MaterialParameterBlock **)(a1 + 48), v3);
  v22 = *(_QWORD *)(a1 + 104);
  v24 = 0xB20902A148C42;
  v23 = 0x14289D97E950E308;
  re::populateAttribute<re::Vector4<float>,unsigned long>(v6, v22, &v24, &v23, *(re::MaterialParameterBlock **)(a1 + 48), v3);
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::cloneInto(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id v5;

  *(_QWORD *)a2 = &off_24ED73DC8;
  re::DynamicArray<re::GPUAllocation>::DynamicArray(a2 + 8, (uint64_t *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 48) = v4;
  if (v4)
    v5 = (id)(v4 + 8);
  re::DynamicArray<re::GPUAllocation>::DynamicArray(a2 + 56, (uint64_t *)(a1 + 56));
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  return a2;
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED73DC8;
  re::DynamicArray<re::GPUAllocation>::DynamicArray(a2 + 8, (uint64_t *)(a1 + 8));
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  re::DynamicArray<re::GPUAllocation>::DynamicArray(a2 + 56, (uint64_t *)(a1 + 56));
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  return a2;
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_0,void ()(unsigned long)>::size()
{
  return 112;
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::~Callable(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)a1 = &off_24ED73E20;
  v3 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 40))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 40) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 32);
  }
  return a1;
}

void re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::~Callable(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)a1 = &off_24ED73E20;
  v3 = (_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 40))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 40) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 32);
  }
  JUMPOUT(0x2276933B8);
}

char *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  char *result;
  float32x4_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;

  v5 = *a2;
  if (*(_QWORD *)(a1 + 24) <= (unint64_t)*a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v6 = *a3;
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)&v8 = 0x7F0000007FLL;
  *((_QWORD *)&v8 + 1) = 0x7F0000007FLL;
  v16 = vdupq_n_s32(0x7F800000u);
  *a4 = v16;
  a4[1] = v8;
  v9 = v7 + 32 * v5;
  result = (char *)objc_msgSend(**(id **)(v9 + 24), sel_contents);
  if (v6)
  {
    v11 = (float32x4_t *)&result[*(_QWORD *)(v9 + 8)];
    v12 = (float32x4_t)v16;
    v13.i64[0] = 0x7F0000007FLL;
    v13.i32[2] = 127;
    do
    {
      v14 = *v11++;
      v15 = v14;
      v12.i32[3] = 0;
      v15.i32[3] = 0;
      v12 = vminnmq_f32(v12, v15);
      v13.i32[3] = 0;
      v13 = vmaxnmq_f32(v13, v15);
      --v6;
    }
    while (v6);
    *a4 = v12;
    a4[1] = v13;
  }
  return result;
}

_QWORD *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED73E20;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
  return a2;
}

_QWORD *re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED73E20;
  re::DynamicArray<re::GPUAllocation>::DynamicArray((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
  return a2;
}

uint64_t re::internal::Callable<re::PrimitiveRenderingContext::buildMeshSceneOfShapes(re::PerFrameAllocator *,re::MaterialInstance const*)::$_1,re::AABB ()(unsigned long,unsigned long)>::size()
{
  return 48;
}

uint64_t re::DynamicArray<re::PrimitiveShapeGeometry>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  void *v7;
  void *v8;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 96 * v4;
        v6 = (id *)(v3 + 80);
        do
        {
          if (*v6)
          {

            *v6 = 0;
          }
          v7 = *(v6 - 1);
          if (v7)
          {

            *(v6 - 1) = 0;
          }
          v8 = *(v6 - 2);
          if (v8)
          {

            *(v6 - 2) = 0;
          }
          v6 += 12;
          v5 -= 96;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::PrimitiveRenderingContext>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 1200 * v4;
        v6 = v3 + 1056;
        do
        {
          v7 = *(_QWORD *)(v6 + 80);
          if (v7)
          {
            if (*(_QWORD *)(v6 + 112))
              (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
            *(_QWORD *)(v6 + 112) = 0;
            *(_QWORD *)(v6 + 88) = 0;
            *(_QWORD *)(v6 + 96) = 0;
            *(_QWORD *)(v6 + 80) = 0;
            ++*(_DWORD *)(v6 + 104);
          }
          re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit(v6);
          re::PrimitiveRenderingDynamicGeometry::~PrimitiveRenderingDynamicGeometry((re::PrimitiveRenderingDynamicGeometry *)(v6 - 1056));
          v6 += 1200;
          v5 -= 1200;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::DynamicArray<re::PrimitiveShapeGeometry>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::PrimitiveShapeGeometry>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::PrimitiveShapeGeometry>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::PrimitiveShapeGeometry>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void *v16;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::PrimitiveShapeGeometry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x60uLL))
        {
          v2 = 96 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 96 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 96, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 96 * v9;
        v11 = v8 + 64;
        v12 = v7;
        do
        {
          v13 = *(_OWORD *)(v11 - 64);
          v14 = *(_OWORD *)(v11 - 48);
          v15 = *(_OWORD *)(v11 - 16);
          *((_OWORD *)v12 + 2) = *(_OWORD *)(v11 - 32);
          *((_OWORD *)v12 + 3) = v15;
          *(_OWORD *)v12 = v13;
          *((_OWORD *)v12 + 1) = v14;
          v12[8] = *(_QWORD *)v11;
          *(_QWORD *)v11 = 0;
          v12[9] = *(_QWORD *)(v11 + 8);
          *(_QWORD *)(v11 + 8) = 0;
          v12[10] = *(_QWORD *)(v11 + 16);
          *(_QWORD *)(v11 + 16) = 0;
          v16 = *(void **)(v11 + 8);
          if (v16)
          {

            *(_QWORD *)(v11 + 8) = 0;
          }
          if (*(_QWORD *)v11)
          {

            *(_QWORD *)v11 = 0;
          }
          v11 += 96;
          v12 += 12;
          v10 -= 96;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::PrimitiveRenderingContext>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::PrimitiveRenderingContext>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::PrimitiveRenderingContext>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::PrimitiveRenderingContext>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::PrimitiveRenderingContext>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x4B0uLL))
        {
          v2 = 1200 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 1200 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 1200, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 1200 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::PrimitiveRenderingContext>(v8, v11);
          v8 += 1200;
          v11 += 1200;
          v10 -= 1200;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::ObjectHelper::move<re::PrimitiveRenderingContext>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  re::PrimitiveRenderingDynamicGeometry::PrimitiveRenderingDynamicGeometry(a2, a1);
  *(_QWORD *)(a2 + 1088) = 0;
  *(_DWORD *)(a2 + 1080) = 0;
  *(_QWORD *)(a2 + 1072) = 0;
  *(_QWORD *)(a2 + 1064) = 0;
  *(_QWORD *)(a2 + 1056) = 0;
  *(_QWORD *)(a2 + 1056) = *(_QWORD *)(a1 + 1056);
  *(_QWORD *)(a1 + 1056) = 0;
  *(_QWORD *)(a2 + 1064) = *(_QWORD *)(a1 + 1064);
  *(_QWORD *)(a1 + 1064) = 0;
  v4 = *(_QWORD *)(a2 + 1072);
  *(_QWORD *)(a2 + 1072) = *(_QWORD *)(a1 + 1072);
  *(_QWORD *)(a1 + 1072) = v4;
  v5 = *(_QWORD *)(a2 + 1088);
  *(_QWORD *)(a2 + 1088) = *(_QWORD *)(a1 + 1088);
  *(_QWORD *)(a1 + 1088) = v5;
  ++*(_DWORD *)(a1 + 1080);
  ++*(_DWORD *)(a2 + 1080);
  v6 = *(_OWORD *)(a1 + 1096);
  v7 = *(_OWORD *)(a1 + 1112);
  *(_DWORD *)(a2 + 1128) = *(_DWORD *)(a1 + 1128);
  *(_OWORD *)(a2 + 1096) = v6;
  *(_OWORD *)(a2 + 1112) = v7;
  *(_QWORD *)(a2 + 1168) = 0;
  *(_QWORD *)(a2 + 1136) = 0;
  *(_QWORD *)(a2 + 1152) = 0;
  *(_QWORD *)(a2 + 1144) = 0;
  *(_DWORD *)(a2 + 1160) = 0;
  *(_QWORD *)(a2 + 1136) = *(_QWORD *)(a1 + 1136);
  *(_QWORD *)(a1 + 1136) = 0;
  *(_QWORD *)(a2 + 1144) = *(_QWORD *)(a1 + 1144);
  *(_QWORD *)(a1 + 1144) = 0;
  v8 = *(_QWORD *)(a2 + 1152);
  *(_QWORD *)(a2 + 1152) = *(_QWORD *)(a1 + 1152);
  *(_QWORD *)(a1 + 1152) = v8;
  v9 = *(_QWORD *)(a2 + 1168);
  *(_QWORD *)(a2 + 1168) = *(_QWORD *)(a1 + 1168);
  *(_QWORD *)(a1 + 1168) = v9;
  ++*(_DWORD *)(a1 + 1160);
  ++*(_DWORD *)(a2 + 1160);
  v10 = *(_OWORD *)(a1 + 1176);
  *(_QWORD *)(a2 + 1192) = *(_QWORD *)(a1 + 1192);
  *(_OWORD *)(a2 + 1176) = v10;
  v11 = *(_QWORD *)(a1 + 1136);
  if (v11)
  {
    if (*(_QWORD *)(a1 + 1168))
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    *(_QWORD *)(a1 + 1168) = 0;
    *(_QWORD *)(a1 + 1144) = 0;
    *(_QWORD *)(a1 + 1152) = 0;
    *(_QWORD *)(a1 + 1136) = 0;
    ++*(_DWORD *)(a1 + 1160);
  }
  re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit(a1 + 1056);
  re::PrimitiveRenderingDynamicGeometry::~PrimitiveRenderingDynamicGeometry((re::PrimitiveRenderingDynamicGeometry *)a1);
}

uint64_t re::attributeInfo(unsigned int a1, uint64_t a2)
{
  uint64_t result;

  if (a1 < 7)
    return qword_2261344E0[(char)a1];
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) incorrect attribute", "!\"Unreachable code\"", "attributeInfo", 30);
  result = _os_crash();
  __break(1u);
  return result;
}

double re::allocate@<D0>(re *this@<X0>, const re::RenderManager *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  re::PerFrameAllocatorGPU *v8;

  v7 = *((_QWORD *)this + 13);
  if (v7)
    v7 = *(_QWORD *)(v7 + 336);
  v8 = (re::PerFrameAllocatorGPU *)re::PerFrameAllocatorGPUManager::perFrameAllocatorGPU(v7, *(_QWORD *)(*((_QWORD *)this + 17) + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(*((_QWORD *)this + 17) + 16) << 60));
  return re::PerFrameAllocatorGPU::allocInternal(v8, (_QWORD)a2 << 7, a3, 0, a4);
}

uint64_t re::attributeInfo(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (result >= 4)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) incorrect attribute", "!\"Unreachable code\"", "attributeInfo", 49, v2, v3);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

_QWORD *re::FixedArray<re::NamedVertexBuffer>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (_QWORD *)result[2];
      v5 = v2 << 6;
      do
      {
        v6 = (void *)v4[5];
        if (v6)
        {

          v4[5] = 0;
        }
        if (*v4)
        {
          if ((v4[1] & 1) != 0)
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[2]);
          *(_OWORD *)v4 = 0u;
          *((_OWORD *)v4 + 1) = 0u;
        }
        v4 += 8;
        v5 -= 64;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

_QWORD *re::FixedArray<re::DataArrayHandle<re::MeshInstance>>::init<re::DataArrayHandle<re::MeshInstance>&>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *result;
  uint64_t v6;

  *a1 = a2;
  a1[1] = 1;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 8, 8);
  a1[2] = result;
  if (result)
  {
    *result = *a3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::DynamicArray<re::GPUAllocation>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    v6 = a2[2];
    if (v6 >= *(_QWORD *)(a1 + 16))
    {
      re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)a1, a2[2]);
      v7 = *(_QWORD *)(a1 + 16);
      if (v7)
      {
        memmove(*(void **)(a1 + 32), (const void *)a2[4], 32 * v7);
        v7 = *(_QWORD *)(a1 + 16);
      }
      memcpy((void *)(*(_QWORD *)(a1 + 32) + 32 * v7), (const void *)(a2[4] + 32 * v7), 32 * v6 - 32 * v7);
    }
    else if (v6)
    {
      memmove(*(void **)(a1 + 32), (const void *)a2[4], 32 * v6);
    }
    *(_QWORD *)(a1 + 16) = v6;
  }
  return a1;
}

re::DynamicString *re::renderGraphEncoderSplitReasonToString(_anonymous_namespace_ *a1, int a2)
{
  const char *v3;

  v3 = off_24ED73E68[a2];
}

re::DynamicString *re::multisampleDepthResolveFilterToString(_anonymous_namespace_ *a1, int a2)
{
  const char *v3;

  v3 = off_24ED73EE0[a2];
}

re::DynamicString *re::multisampleStencilResolveFilterToString(_anonymous_namespace_ *a1, int a2)
{
  const char *v4;

  if (a2)
    v4 = "kDepthResolvedSample";
  else
    v4 = "kSample0";
}

uint64_t re::RenderGraphEncoderSplitLogBuffer::clear(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  if (*(_QWORD *)(this + 16))
  {
    v1 = 0;
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(this + 32);
      v4 = v3 + v1;
      v5 = *(_QWORD *)(v3 + v1 + 8);
      if ((v5 & 1) != 0)
      {
        *(_QWORD *)(v4 + 8) = 1;
        v6 = *(_BYTE **)(v3 + v1 + 16);
      }
      else
      {
        *(_BYTE *)(v4 + 8) = v5 & 1;
        v6 = (_BYTE *)(v3 + v1 + 9);
      }
      *v6 = 0;
      ++v2;
      v1 += 32;
    }
    while (*(_QWORD *)(this + 16) > v2);
  }
  *(_DWORD *)(this + 40) = 0;
  return this;
}

void re::RenderGraphEncoderSplitLogManager::save(re::RenderGraphEncoderSplitLogManager *this, char a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;

  v4 = (char *)this + 24;
  v5 = re::RenderGraphEncoderSplitLogBuffer::calculateHash((re::RenderGraphEncoderSplitLogManager *)((char *)this + 24));
  v6 = v5;
  if ((a2 & 1) != 0 || !*((_BYTE *)this + 16) || v5 != *((_QWORD *)this + 1))
  {
    re::RenderGraphEncoderSplitLogBuffer::logBuffer((_BOOL8)v4);
    *((_BYTE *)this + 16) = 1;
  }
  *((_QWORD *)this + 1) = v6;
}

unint64_t re::RenderGraphEncoderSplitLogBuffer::calculateHash(re::RenderGraphEncoderSplitLogBuffer *this)
{
  unint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v13[3];

  v13[2] = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    while (1)
    {
      v6 = *((_QWORD *)this + 4) + v3;
      v7 = *(_QWORD *)(v6 + 8);
      v8 = v7 >> 1;
      if ((v7 & 1) == 0)
        LODWORD(v8) = v7 >> 1;
      if ((int)v8 >= 100)
        v9 = 100;
      else
        v9 = v8;
      if ((v7 & 1) != 0)
      {
        v10 = *(_QWORD *)(v6 + 16);
        if (!v9)
        {
LABEL_12:
          v11 = 0;
          goto LABEL_13;
        }
      }
      else
      {
        v10 = v6 + 9;
        if (!v9)
          goto LABEL_12;
      }
      MurmurHash3_x64_128(v10, v9, 0, v13);
      v11 = (v13[1] - 0x61C8864680B583E9 + (v13[0] << 6) + (v13[0] >> 2)) ^ v13[0];
      v1 = *((_QWORD *)this + 2);
LABEL_13:
      v5 ^= (v5 << 6) - 0x61C8864680B583E9 + (v5 >> 2) + v11;
      ++v4;
      v3 += 32;
      if (v1 <= v4)
        return v5;
    }
  }
  return 0;
}

void re::RenderGraphEncoderSplitLogBuffer::logBuffer(_BOOL8 this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t buf[16];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*(int *)(this + 40) >= 1)
  {
    v1 = this;
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = *re::graphicsLogObjects((re *)this);
      this = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      if (this)
      {
        if (*(_QWORD *)(v1 + 16) <= v3)
        {
          v10 = 0u;
          v11 = 0u;
          v8 = 0u;
          v9 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v5 = *(_QWORD *)(v1 + 32) + v2;
        if ((*(_BYTE *)(v5 + 8) & 1) != 0)
          v6 = *(_QWORD *)(v5 + 16);
        else
          v6 = v5 + 9;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v6;
        _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
      }
      ++v3;
      v2 += 32;
    }
    while ((uint64_t)v3 < *(int *)(v1 + 40));
  }
}

uint64_t re::RenderGraphEncoderSplitLogManager::logEntry(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int *a6, unsigned int *a7)
{
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  re::DynamicString *v17;
  _BYTE *v18;
  char *v19;
  _BYTE *v20;
  uint64_t v21;
  const char *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  size_t v33;
  re::StringID *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  size_t v39;
  unint64_t v40;
  unsigned int v41;
  const char *v42;
  unsigned int v43;
  const char *v44;
  const char *v45;
  const char *v46;
  const char *v47;
  const char *v48;
  char *v49;
  unsigned int v50;
  const char *v51;
  const char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  size_t v57;
  const char *v58;
  size_t v59;
  const char *v60;
  size_t v61;
  unint64_t v62;
  const char *v63;
  const char *v64;
  char v65;
  _QWORD v66[2];
  uint64_t v67;
  char v68;
  _BYTE v69[7];
  _BYTE *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _BYTE v74[18];
  __int16 v75;
  unsigned int *v76;
  __int16 v77;
  unint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)result)
  {
    v13 = result;
    v14 = *(_DWORD *)(result + 64);
    v15 = *(_QWORD *)(result + 40);
    if (v15 <= v14)
    {
      *((_QWORD *)&v79 + 1) = 0;
      v80 = 0uLL;
      re::DynamicString::setCapacity(&v79, 0);
      re::DynamicString::setCapacity(&v79, 0x400uLL);
      re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)(v13 + 24), (re::DynamicString *)&v79);
      result = v79;
      if ((_QWORD)v79 && (BYTE8(v79) & 1) != 0)
        result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v79 + 40))(v79, v80);
      v14 = *(_DWORD *)(v13 + 64);
      v15 = *(_QWORD *)(v13 + 40);
      v16 = v14;
    }
    else
    {
      v16 = v14;
    }
    if (v15 <= v16)
    {
      *(_QWORD *)&v71 = 0;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v79 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v74 = 136315906;
      *(_QWORD *)&v74[4] = "operator[]";
      *(_WORD *)&v74[12] = 1024;
      *(_DWORD *)&v74[14] = 789;
      v75 = 2048;
      v76 = (unsigned int *)v16;
      v77 = 2048;
      v78 = v15;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_159:
      v66[0] = 0;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v79 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v74 = 136315906;
      *(_QWORD *)&v74[4] = "operator[]";
      *(_WORD *)&v74[12] = 1024;
      *(_DWORD *)&v74[14] = 789;
      v75 = 2048;
      v76 = a6;
      v77 = 2048;
      v78 = a2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_160:
      v66[0] = 0;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v79 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v74 = 136315906;
      *(_QWORD *)&v74[4] = "operator[]";
      *(_WORD *)&v74[12] = 1024;
      *(_DWORD *)&v74[14] = 789;
      v75 = 2048;
      v76 = (unsigned int *)a2;
      v77 = 2048;
      v78 = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_161:
      v73 = 0;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v79 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v74 = 136315906;
      *(_QWORD *)&v74[4] = "operator[]";
      *(_WORD *)&v74[12] = 1024;
      *(_DWORD *)&v74[14] = 789;
      v75 = 2048;
      v76 = (unsigned int *)a2;
      v77 = 2048;
      v78 = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_162:
      v66[0] = 0;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v79 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v74 = 136315906;
      *(_QWORD *)&v74[4] = "operator[]";
      *(_WORD *)&v74[12] = 1024;
      *(_DWORD *)&v74[14] = 789;
      v75 = 2048;
      v76 = a6;
      v77 = 2048;
      v78 = a2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v17 = (re::DynamicString *)(*(_QWORD *)(v13 + 56) + 32 * v16);
    *(_DWORD *)(v13 + 64) = v14 + 1;
    if (a7)
    {
      re::renderGraphResourceOperationTypeToString((_anonymous_namespace_ *)(a7 + 1), (re::DynamicString *)&v71);
      re::renderGraphEncoderSplitReasonToString((_anonymous_namespace_ *)&v67, a2);
      if ((v68 & 1) != 0)
        v18 = v70;
      else
        v18 = v69;
      if ((BYTE8(v71) & 1) != 0)
        v19 = (char *)v72;
      else
        v19 = (char *)&v71 + 9;
      re::DynamicString::format((re::DynamicString *)"Encoder Split: %s for %s.\n", (re::DynamicString *)&v79, v18, v19);
    }
    else
    {
      v71 = 0u;
      v72 = 0u;
      re::DynamicString::setCapacity(&v71, 0);
      re::renderGraphEncoderSplitReasonToString((_anonymous_namespace_ *)&v67, a2);
      if ((v68 & 1) != 0)
        v20 = v70;
      else
        v20 = v69;
      re::DynamicString::format((re::DynamicString *)"Encoder Split: %s.\n", (re::DynamicString *)&v79, v20);
    }
    v13 = v80;
    v21 = BYTE8(v79) & 1;
    if ((BYTE8(v79) & 1) != 0)
      v22 = (const char *)v80;
    else
      v22 = (char *)&v79 + 9;
    if ((BYTE8(v79) & 1) != 0)
      v23 = *((_QWORD *)&v79 + 1) >> 1;
    else
      v23 = BYTE8(v79) >> 1;
    re::DynamicString::append(v17, v22, v23);
    if ((_QWORD)v79 && v21)
      (*(void (**)(_QWORD, unint64_t))(*(_QWORD *)v79 + 40))(v79, v13);
    switch((int)a2)
    {
      case 0:
        v24 = *(_QWORD *)(a3 + 296);
        a6 = (unsigned int *)a7[13];
        a2 = *(_QWORD *)(v24 + 16);
        if (a2 <= (unint64_t)a6)
          goto LABEL_159;
        re::StringID::StringID((re::StringID *)v74, (const StringID *)(*(_QWORD *)(v24 + 32) + 48 * a6 + 8));
        re::DynamicString::format((re::DynamicString *)"The new setup is trying a force clear for %s resource index %d.\n", (re::DynamicString *)&v79, *(_QWORD *)&v74[8], a7[13]);
        goto LABEL_47;
      case 1:
        v25 = *(_QWORD *)(a3 + 296);
        a2 = a7[13];
        v13 = *(_QWORD *)(v25 + 16);
        if (v13 <= a2)
          goto LABEL_160;
        re::StringID::StringID((re::StringID *)v66, (const StringID *)(*(_QWORD *)(v25 + 32) + 48 * a2 + 8));
        v26 = *(_QWORD *)(a3 + 296);
        a2 = a6[13];
        v13 = *(_QWORD *)(v26 + 16);
        if (v13 <= a2)
          goto LABEL_161;
        v27 = v66[1];
        v28 = a7[13];
        v29 = *a7;
        re::StringID::StringID((re::StringID *)v74, (const StringID *)(*(_QWORD *)(v26 + 32) + 48 * a2 + 8));
        re::DynamicString::format((re::DynamicString *)"The new setup is trying to bind %s resource index %d at attachment index %d but old setup has already bound %s resource index %d at same attachment index %d.\n", (re::DynamicString *)&v79, v27, v28, v29, *(_QWORD *)&v74[8], a6[13], *a6);
        v30 = v80;
        v31 = BYTE8(v79) & 1;
        if ((BYTE8(v79) & 1) != 0)
          v32 = (const char *)v80;
        else
          v32 = (char *)&v79 + 9;
        if ((BYTE8(v79) & 1) != 0)
          v33 = *((_QWORD *)&v79 + 1) >> 1;
        else
          v33 = BYTE8(v79) >> 1;
        re::DynamicString::append(v17, v32, v33);
        if ((_QWORD)v79 && v31)
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v79 + 40))(v79, v30);
        re::StringID::destroyString((re::StringID *)v74);
        v34 = (re::StringID *)v66;
        goto LABEL_57;
      case 2:
        v35 = *(_QWORD *)(a3 + 296);
        a6 = (unsigned int *)a7[13];
        a2 = *(_QWORD *)(v35 + 16);
        if (a2 <= (unint64_t)a6)
          goto LABEL_162;
        re::StringID::StringID((re::StringID *)v74, (const StringID *)(*(_QWORD *)(v35 + 32) + 48 * a6 + 8));
        re::DynamicString::format((re::DynamicString *)"The new setup is trying to bind %s resource index %d at attachment index %d but resource is not included in old setup encoder.\n", (re::DynamicString *)&v79, *(_QWORD *)&v74[8], a7[13], *a7);
LABEL_47:
        v36 = v80;
        v37 = BYTE8(v79) & 1;
        if ((BYTE8(v79) & 1) != 0)
          v38 = (const char *)v80;
        else
          v38 = (char *)&v79 + 9;
        if ((BYTE8(v79) & 1) != 0)
          v39 = *((_QWORD *)&v79 + 1) >> 1;
        else
          v39 = BYTE8(v79) >> 1;
        re::DynamicString::append(v17, v38, v39);
        if ((_QWORD)v79 && v37)
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v79 + 40))(v79, v36);
        v34 = (re::StringID *)v74;
LABEL_57:
        re::StringID::destroyString(v34);
        goto LABEL_125;
      case 3:
        if ((BYTE8(v71) & 1) != 0)
          v40 = v72;
        else
          v40 = (unint64_t)&v71 | 9;
        re::DynamicString::format((re::DynamicString *)"The new setup contains %s but old setup doesn't.\n", (re::DynamicString *)&v79, v40, v63);
        goto LABEL_116;
      case 4:
        v41 = a7[1];
        if (v41 == 8)
        {
          re::multisampleStencilResolveFilterToString((_anonymous_namespace_ *)&v79, a6[10]);
          if ((BYTE8(v79) & 1) != 0)
            v42 = (const char *)v80;
          else
            v42 = (char *)&v79 + 9;
          if ((_QWORD)v79 && (BYTE8(v79) & 1) != 0)
            (*(void (**)(_QWORD))(*(_QWORD *)v79 + 40))(v79);
          re::multisampleStencilResolveFilterToString((_anonymous_namespace_ *)&v79, a7[10]);
        }
        else
        {
          if (v41 != 7)
          {
            v42 = "n/a";
            v52 = "n/a";
            goto LABEL_111;
          }
          re::multisampleDepthResolveFilterToString((_anonymous_namespace_ *)&v79, a6[9]);
          if ((BYTE8(v79) & 1) != 0)
            v42 = (const char *)v80;
          else
            v42 = (char *)&v79 + 9;
          if ((_QWORD)v79 && (BYTE8(v79) & 1) != 0)
            (*(void (**)(_QWORD))(*(_QWORD *)v79 + 40))(v79);
          re::multisampleDepthResolveFilterToString((_anonymous_namespace_ *)&v79, a7[9]);
        }
        if ((BYTE8(v79) & 1) != 0)
          v52 = (const char *)v80;
        else
          v52 = (char *)&v79 + 9;
        if ((_QWORD)v79 && (BYTE8(v79) & 1) != 0)
          (*(void (**)(_QWORD))(*(_QWORD *)v79 + 40))(v79);
LABEL_111:
        if ((BYTE8(v71) & 1) != 0)
          v53 = v72;
        else
          v53 = (unint64_t)&v71 | 9;
        v63 = v52;
        v64 = v42;
        v62 = v53;
        v49 = "The new step has a %s filter of %s but the old step has a resolve filter of %s.\n";
LABEL_115:
        re::DynamicString::format((re::DynamicString *)v49, (re::DynamicString *)&v79, v62, v63, v64);
LABEL_116:
        v54 = v80;
        v55 = BYTE8(v79) & 1;
        if ((BYTE8(v79) & 1) != 0)
          v56 = (const char *)v80;
        else
          v56 = (char *)&v79 + 9;
        if ((BYTE8(v79) & 1) != 0)
          v57 = *((_QWORD *)&v79 + 1) >> 1;
        else
          v57 = BYTE8(v79) >> 1;
        re::DynamicString::append(v17, v56, v57);
        if ((_QWORD)v79 && v55)
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v79 + 40))(v79, v54);
LABEL_125:
        re::DynamicString::format((re::DynamicString *)"Old Setup:\n", (re::DynamicString *)v74);
        LOBYTE(v66[0]) = 1;
        LOBYTE(v73) = 1;
        v65 = 1;
        re::renderGraphResourceSetupToString(v74, a3, a4, v66, &v73, &v65, (re::DynamicString *)&v79);
        if ((BYTE8(v79) & 1) != 0)
          v58 = (const char *)v80;
        else
          v58 = (char *)&v79 + 9;
        if ((BYTE8(v79) & 1) != 0)
          v59 = *((_QWORD *)&v79 + 1) >> 1;
        else
          v59 = BYTE8(v79) >> 1;
        re::DynamicString::append(v17, v58, v59);
        if ((_QWORD)v79)
        {
          if ((BYTE8(v79) & 1) != 0)
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v79 + 40))(v79, v80);
          v79 = 0u;
          v80 = 0u;
        }
        if (*(_QWORD *)v74 && (v74[8] & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)v74 + 40))();
        re::DynamicString::format((re::DynamicString *)"New Setup:\n", (re::DynamicString *)v74);
        LOBYTE(v66[0]) = 1;
        LOBYTE(v73) = 1;
        v65 = 1;
        re::renderGraphResourceSetupToString(v74, a3, a5, v66, &v73, &v65, (re::DynamicString *)&v79);
        if ((BYTE8(v79) & 1) != 0)
          v60 = (const char *)v80;
        else
          v60 = (char *)&v79 + 9;
        if ((BYTE8(v79) & 1) != 0)
          v61 = *((_QWORD *)&v79 + 1) >> 1;
        else
          v61 = BYTE8(v79) >> 1;
        re::DynamicString::append(v17, v60, v61);
        if ((_QWORD)v79)
        {
          if ((BYTE8(v79) & 1) != 0)
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v79 + 40))(v79, v80);
          v79 = 0u;
          v80 = 0u;
        }
        if (*(_QWORD *)v74 && (v74[8] & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)v74 + 40))();
        if (v67 && (v68 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v67 + 40))();
        result = v71;
        if ((_QWORD)v71)
        {
          if ((BYTE8(v71) & 1) != 0)
            result = (*(uint64_t (**)(void))(*(_QWORD *)v71 + 40))();
        }
        break;
      case 5:
        re::DynamicString::format((re::DynamicString *)"The new setup has a threadgroup memory length of %zu but the old setup has a threadgroup memory length of %zu.\n", (re::DynamicString *)&v79, *(_QWORD *)(a5 + 176), *(_QWORD *)(a4 + 176));
        goto LABEL_116;
      case 6:
        v43 = *(unsigned __int8 *)(a5 + 184) - 1;
        if (v43 > 2)
          v44 = "Automatic";
        else
          v44 = off_24ED73EF8[(char)v43];
        v50 = *(unsigned __int8 *)(a4 + 184) - 1;
        if (v50 > 2)
          v51 = "Automatic";
        else
          v51 = off_24ED73EF8[(char)v50];
        re::DynamicString::format((re::DynamicString *)"The new setup has tile size overridden to %s but the old setup has a tile sizeoverridden to %s.\n", (re::DynamicString *)&v79, v44, v51);
        goto LABEL_116;
      case 7:
        v45 = " has";
        if (*(_BYTE *)(a5 + 171))
          v46 = " has";
        else
          v46 = " doesn't have";
        if (!*(_BYTE *)(a4 + 171))
          v45 = " doesn't have";
        re::DynamicString::format((re::DynamicString *)"The new setup%s VRR enabled but the old setup%s VRR enabled.\n", (re::DynamicString *)&v79, v46, v45);
        goto LABEL_116;
      case 8:
        v47 = " has";
        if (*(_BYTE *)(a5 + 169))
          v48 = " has";
        else
          v48 = " doesn't have";
        if (!*(_BYTE *)(a4 + 169))
          v47 = " doesn't have";
        re::DynamicString::format((re::DynamicString *)"The new setup%s custom encoders but the old setup%s custom encoders.\n", (re::DynamicString *)&v79, v48, v47);
        goto LABEL_116;
      case 9:
        v49 = "The old setup has a depth step but the new setup doesn't.\n";
        goto LABEL_115;
      case 10:
        v49 = "The old setup has a stencil step but the new setup doesn't.\n";
        goto LABEL_115;
      case 11:
        re::DynamicString::format((re::DynamicString *)"The old setup writes to the resource at attachment index %d and the new setup is trying to read from the same attachment index so the nodes can't be combined. This is because waits happen before an encoder and fence updates happen at the end of an encoder.\n", (re::DynamicString *)&v79, *a7, v63);
        goto LABEL_116;
      case 12:
        v49 = "The old setup and the new setup have mismatched visibility buffers.\n";
        goto LABEL_115;
      case 13:
        v49 = "The old setup and the new setup have mismatched encoder types.\n";
        goto LABEL_115;
      case 14:
        v49 = "The old setup and the new setup have mismatched write protection options.\n";
        goto LABEL_115;
      default:
        goto LABEL_125;
    }
  }
  return result;
}

re::RenderGraphEncoderSplitLogBuffer *re::RenderGraphEncoderSplitLogBuffer::RenderGraphEncoderSplitLogBuffer(re::RenderGraphEncoderSplitLogBuffer *this, const char *a2)
{
  int v3;
  int v4;
  BOOL v5;
  _anonymous_namespace_ *v6;
  unint64_t v7;
  _OWORD v9[2];

  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_DWORD *)this + 6) = 0;
  re::Defaults::intValue((re::Defaults *)"encoderSplitLogging", a2, (uint64_t)v9);
  v3 = LOBYTE(v9[0]);
  v4 = DWORD1(v9[0]);
  *((_DWORD *)this + 10) = 0;
  if (v3)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = (_anonymous_namespace_ *)re::DynamicArray<re::DynamicString>::setCapacity(this, 0xAuLL);
    if (*((_QWORD *)this + 1))
    {
      v7 = 0;
      do
      {
        memset(v9, 0, sizeof(v9));
        re::DynamicString::setCapacity(v9, 0);
        re::DynamicString::setCapacity(v9, 0x400uLL);
        re::DynamicArray<re::DynamicString>::add(this, (re::DynamicString *)v9);
        v6 = *(_anonymous_namespace_ **)&v9[0];
        if (*(_QWORD *)&v9[0] && (BYTE8(v9[0]) & 1) != 0)
          v6 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v9[0] + 40))();
        ++v7;
      }
      while (*((_QWORD *)this + 1) > v7);
    }
  }
  return this;
}

_QWORD *re::ShadowTileManager::releaseTile(_QWORD *a1, unsigned __int16 *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t i;
  _OWORD *v5;
  _OWORD v7[110];
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  v3 = a1[7];
  if (v3 <= v2)
  {
    memset(v7, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v8 = 136315906;
    v9 = "operator[]";
    v10 = 1024;
    v11 = 789;
    v12 = 2048;
    v13 = v2;
    v14 = 2048;
    v15 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  for (i = 0; i != 56; i += 14)
  {
    v5 = &v7[i];
    v5[20] = 0uLL;
    v5[21] = 0uLL;
    v5[18] = 0uLL;
    v5[19] = 0uLL;
    v5[16] = 0uLL;
    v5[17] = 0uLL;
    v5[24] = 0uLL;
    v5[25] = 0uLL;
    v5[26] = 0uLL;
    v5[27] = 0uLL;
  }
  LOWORD(v7[0]) = v2;
  return re::DynamicArray<unsigned short>::add(a1, v7);
}

_QWORD *re::ShadowTileManager::acquireTile@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  _QWORD *v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD __src[111];
  int v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;
  uint64_t v33;

  v2 = this;
  v33 = *MEMORY[0x24BDAC8D0];
  v4 = this[2];
  if (v4)
  {
    v5 = v4 - 1;
    v6 = *(unsigned __int16 *)(this[4] + 2 * v5);
    this[2] = v5;
    ++*((_DWORD *)this + 6);
    v7 = this[7];
    if (v7 <= v6)
    {
      memset(__src, 0, 80);
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v25 = 136315906;
      v26 = "operator[]";
      v27 = 1024;
      v28 = 789;
      v29 = 2048;
      v30 = v6;
      v31 = 2048;
      v32 = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v8 = this[9] + 1776 * v6;
    v9 = (unsigned __int16)(*(_WORD *)(v8 + 1760))++ + 1;
    *(_BYTE *)a2 = 1;
    *(_DWORD *)(a2 + 2) = v6 | (v9 << 16);
  }
  else
  {
    v10 = this[7];
    if (v10 - 2041 > 0xFFFFFFFFFFFFF805)
    {
      v11 = this + 5;
      bzero(&__src[14], 0x394uLL);
      v13 = 0;
      memset(__src, 0, 212);
      do
      {
        v14 = &__src[v13];
        v14[20] = 0uLL;
        v14[21] = 0uLL;
        v14[18] = 0uLL;
        v14[19] = 0uLL;
        v14[16] = 0uLL;
        v14[17] = 0uLL;
        v14[24] = 0uLL;
        v14[25] = 0uLL;
        v13 += 14;
        v14[26] = 0uLL;
        v14[27] = 0uLL;
      }
      while (v13 != 56);
      LODWORD(__src[72]) = 0;
      memset(&__src[73], 0, 72);
      memset(&__src[78], 0, 81);
      __src[84] = vdupq_n_s32(0x7F800000u);
      *(_QWORD *)&v15 = 0x7F0000007FLL;
      *((_QWORD *)&v15 + 1) = 0x7F0000007FLL;
      __src[85] = v15;
      DWORD2(__src[109]) = 0;
      LOWORD(__src[110]) = 0;
      memset(&__src[86], 0, 374);
      v16 = v10;
      v17 = v2[6];
      if (v10 >= v17)
      {
        if (v17 < v10 + 1)
        {
          if (*v11)
          {
            v18 = 2 * v17;
            v19 = v17 == 0;
            v20 = 8;
            if (!v19)
              v20 = v18;
            if (v20 <= v10 + 1)
              v21 = v10 + 1;
            else
              v21 = v20;
            re::DynamicArray<re::ShadowTileManager::TileData>::setCapacity(v2 + 5, v21);
          }
          else
          {
            re::DynamicArray<re::ShadowTileManager::TileData>::setCapacity(v2 + 5, v10 + 1);
            ++*((_DWORD *)v2 + 16);
          }
        }
        v16 = v2[7];
      }
      this = memcpy((void *)(v2[9] + 1776 * v16), __src, 0x6F0uLL);
      v22 = v2[7];
      v2[7] = v22 + 1;
      ++*((_DWORD *)v2 + 16);
      v23 = v2[9] + 1776 * v22;
      *(_BYTE *)a2 = 1;
      *(_DWORD *)(a2 + 2) = (unsigned __int16)v10 | (*(unsigned __int16 *)(v23 + 1760) << 16);
    }
    else
    {
      *(_BYTE *)a2 = 0;
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::ShadowTileManager::TileData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x6F0uLL))
        {
          v2 = 1776 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 1776 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 1776 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 1776, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::ShadowTileManager::TileData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void re::logAttributeIndexExceedsLimit(re *a1, uint64_t a2, int a3)
{
  NSObject *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = *re::graphicsLogObjects(a1);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    v7 = (uint64_t *)*((_QWORD *)a1 + 5);
    if ((v7[306] & 1) != 0)
      v8 = v7[307];
    else
      v8 = (uint64_t)v7 + 2449;
    v9 = *v7;
    if ((v7[310] & 1) != 0)
      v10 = v7[311];
    else
      v10 = (uint64_t)v7 + 2481;
    if ((*(_QWORD *)(a2 + 8) & 1) != 0)
      v11 = *(_QWORD *)(a2 + 16);
    else
      v11 = a2 + 9;
    v12[0] = 67110402;
    v12[1] = 30;
    v13 = 1024;
    v14 = a3;
    v15 = 2080;
    v16 = v9;
    v17 = 2080;
    v18 = v8;
    v19 = 2080;
    v20 = v10;
    v21 = 2080;
    v22 = v11;
    _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Attribute index exceeds limit. Maximum allowed index is %d but received index is %d. technique=%s vs=%s fs=%s fc=%s", (uint8_t *)v12, 0x36u);
  }
}

void re::makeAPIFunctionAsync(uint64_t a1, char *a2, _QWORD *a3, void *a4, int a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  id v18;

  v17 = a1 + 144;
  v18 = a4;
  re::APIFunctionCache::getOrCreateAPIFunction(v17, a2, a1, a9, a10, a3, (dispatch_group_t *)&v18, a5, a6, a7, a8);

}

void re::makeMetalPrivateLinkedFunctionsAsync(uint64_t *a1, _QWORD *a2, uint64_t a3, _QWORD *a4, dispatch_group_t *a5, unsigned int a6, uint64_t a7, _QWORD *a8, uint64_t *a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t *v17;
  char v18;
  int *v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int16 *v33;
  unint64_t v34;
  uint64_t CGColorSpaceFromWorkingColorGamut;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id *v41;
  unint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  id v46;
  re *v47;
  re *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  id v57;
  uint64_t v58;
  id v59;
  uint64_t i;
  unint64_t v61;
  char *v62;
  id v63;
  id v64;
  uint64_t v65;
  char *v66;
  id v67;
  id v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  id v74;
  id v75;
  id v76;
  id v77;
  unint64_t v78;
  uint64_t j;
  char *v80;
  id v81;
  id v82;
  unint64_t v83;
  uint64_t k;
  unint64_t v85;
  char *v86;
  id v87;
  id v88;
  uint64_t m;
  unint64_t v90;
  char *v91;
  id v92;
  id v93;
  uint64_t n;
  char *v95;
  id v96;
  id v97;
  char v98;
  uint64_t ii;
  unint64_t v100;
  char *v101;
  id v102;
  id v103;
  id v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t jj;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  id v114;
  id v115;
  char *v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  _QWORD *v121;
  id *v122;
  _QWORD *v123;
  uint64_t v124;
  unsigned int v126;
  uint64_t v127;
  id location;
  id v129;
  uint64_t v130;
  _BYTE v131[24];
  uint64_t v132;
  _BYTE *v133;
  int v134;
  const char *v135;
  __int16 v136;
  int v137;
  __int16 v138;
  unint64_t v139;
  __int16 v140;
  unint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;

  v147 = *MEMORY[0x24BDAC8D0];
  if (a3 == 1)
    v16 = *a2 + 32;
  else
    v16 = *a2 + 56;
  v17 = *(uint64_t **)(v16 + 8);
  if (v17)
  {
    v18 = 0;
    v19 = (int *)(*(_QWORD *)(v16 + 16) + 56);
    v20 = *(_QWORD *)(v16 + 8);
    do
    {
      v21 = *v19;
      v19 += 36;
      v18 |= v21;
      --v20;
    }
    while (v20);
  }
  else
  {
    v18 = 0;
  }
  if ((v18 & 1) != 0)
    v17 = (uint64_t *)((char *)v17 + 75);
  if ((v18 & 2) != 0)
    v17 = (uint64_t *)((char *)v17 + 61);
  if ((v18 & 0x20) != 0)
    v17 = (uint64_t *)((char *)v17 + 22);
  if ((v18 & 4) != 0)
    v17 = (uint64_t *)((char *)v17 + 68);
  if ((v18 & 8) != 0)
    v17 += 7;
  v117 = v18;
  if ((v18 & 0x10) != 0)
    v22 = (uint64_t *)((char *)v17 + 13);
  else
    v22 = v17;
  a8[1] = v22;
  if (v22)
  {
    if ((unint64_t)v22 >> 61)
      goto LABEL_90;
    a8[2] = v24;
    if (!v24)
    {
LABEL_91:
      re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    v26 = v24;
    if (v22 != (uint64_t *)1)
    {
      bzero(v24, 8 * (_QWORD)v22 - 8);
      v26 += (_QWORD)v22 - 1;
    }
    *v26 = 0;
  }
  v122 = (id *)a5;
  v123 = a2;
  v121 = a4;
  v127 = a7;
  v126 = a6;
  v124 = (uint64_t)a8;
  v27 = 0;
  if (*(_QWORD *)(v16 + 8))
  {
    v118 = v16;
    v28 = a1;
    while (1)
    {
      v22 = *(uint64_t **)(v16 + 16);
      v29 = &v22[18 * v27];
      v30 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD5A0], sel_alloc), sel_init);
      v31 = v29[9];
      if (v31)
      {
        v32 = v31 << 6;
        v33 = (unsigned __int16 *)(v29[10] + 32);
        do
        {
          objc_msgSend(v30, sel_setConstantValue_type_atIndex_, *((_QWORD *)v33 + 3), *v33, v33[1]);
          v33 += 32;
          v32 -= 64;
        }
        while (v32);
      }
      v120 = &v22[18 * v27];
      re::ShaderManager::makeFunctionDescriptor((re::ShaderManager *)v28[7], &v129);
      objc_msgSend(v129, sel_setName_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, v120[4], 4));
      if (!re::StringID::operator==(v120 + 3, v120 + 1))
        objc_msgSend(v129, sel_setSpecializedName_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, v22[18 * v27 + 2], 4));
      objc_msgSend(v129, sel_setConstantValues_, v30);
      location = 0;
      if (v22[18 * v27 + 6])
      {
        v34 = *(_QWORD *)(a10 + 8);
        if (v34 <= v27)
        {
          v130 = 0;
          v145 = 0u;
          v146 = 0u;
          v143 = 0u;
          v144 = 0u;
          v142 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v134 = 136315906;
          v135 = "operator[]";
          v136 = 1024;
          v137 = 468;
          v138 = 2048;
          v139 = v27;
          v140 = 2048;
          v141 = v34;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_89:
          v130 = 0;
          v145 = 0u;
          v146 = 0u;
          v143 = 0u;
          v144 = 0u;
          v142 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v134 = 136315906;
          v135 = "operator[]";
          v136 = 1024;
          v137 = 468;
          v138 = 2048;
          v139 = v27;
          v140 = 2048;
          v141 = v34;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_90:
          re::internal::assertLog((re::internal *)6, v23, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, v22);
          _os_crash();
          __break(1u);
          goto LABEL_91;
        }
        *(_QWORD *)(*(_QWORD *)(a10 + 16) + 8 * v27) = 0;
        CGColorSpaceFromWorkingColorGamut = re::ColorHelpers::getCGColorSpaceFromWorkingColorGamut(*(unsigned __int8 *)v28[19]);
      }
      else
      {
        v36 = &v22[18 * v27];
        v38 = v36[5];
        v37 = v36 + 5;
        v39 = v28[7] + 264;
        *(_QWORD *)&v142 = v38;
        v40 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v39, (uint64_t *)&v142);
        if (v40)
          v41 = (id *)(v40 + 8);
        else
          v41 = 0;
        re::ObjCObject::operator=(&location, v41);
        v22 = a9;
        v42 = *a9;
        *a9 = ((v42 << 6) + (v42 >> 2) + objc_msgSend(location, "hash") - 0x61C8864680B583E9) ^ v42;
        v34 = *(_QWORD *)(a10 + 8);
        if (v34 <= v27)
          goto LABEL_89;
        CGColorSpaceFromWorkingColorGamut = 0;
        *(_QWORD *)(*(_QWORD *)(a10 + 16) + 8 * v27) = *v37;
      }
      dispatch_group_enter(*a5);
      v43 = v28[7];
      v44 = (id)v28[23];
      v45 = location;
      v46 = v129;
      v47 = *a5;
      v48 = v47;
      v49 = *v123;
      if (*v123)
        v47 = (re *)(id)(v49 + 8);
      v132 = re::globalAllocators(v47)[2];
      v133 = 0;
      v50 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v132 + 32))(v132, 96, 0);
      *(_QWORD *)v50 = &off_24ED747E0;
      *(_QWORD *)(v50 + 8) = v44;
      *(_QWORD *)(v50 + 16) = CGColorSpaceFromWorkingColorGamut;
      *(_QWORD *)(v50 + 24) = v45;
      *(_QWORD *)(v50 + 32) = v46;
      *(_QWORD *)(v50 + 40) = v48;
      *(_QWORD *)(v50 + 48) = v27;
      *(_QWORD *)(v50 + 56) = a7;
      *(_BYTE *)(v50 + 64) = v126;
      *(_QWORD *)(v50 + 72) = v120;
      *(_QWORD *)(v50 + 80) = v124;
      *(_QWORD *)(v50 + 88) = v49;
      v133 = (_BYTE *)v50;
      re::ShaderManager::scheduleAsyncFuncOnCompilationQueue(v43, v126, a7, (uint64_t)v131);
      a5 = (dispatch_group_t *)v122;
      v28 = a1;
      if (v133)
      {
        (**(void (***)(_BYTE *))v133)(v133);
        if (v133 != v131)
          (*(void (**)(uint64_t))(*(_QWORD *)v132 + 40))(v132);
        v133 = 0;
      }

      if (v129)
      if (v30)

      ++v27;
      v16 = v118;
      if (v27 >= *(_QWORD *)(v118 + 8))
        goto LABEL_56;
    }
  }
  v28 = a1;
LABEL_56:
  v51 = v28[7];
  v119 = v51;
  if ((v117 & 1) != 0)
  {
    v53 = 0;
    v54 = v28[7];
    do
    {
      v55 = v27;
      v56 = realitykit_shader_api::textureFunctions[v53];
      v57 = *v122;
      v58 = v54;
      v59 = *(id *)(v54 + 248);
      ++v27;
      re::makeAPIFunctionAsync(a1[7], v56, v121, v57, v126, v127, v124, v55, *(_QWORD *)(*v123 + 144), *(_QWORD *)(*v123 + 136));

      v54 = v58;
      ++v53;
    }
    while (v53 != 12);
    for (i = 0; i != 9; ++i)
    {
      v61 = v27;
      v62 = realitykit_shader_api::materialFunctions[i];
      v63 = *v122;
      v64 = *(id *)(v54 + 248);
      ++v27;
      re::makeAPIFunctionAsync(a1[7], v62, v121, v63, v126, v127, v124, v61, *(_QWORD *)(*v123 + 144), *(_QWORD *)(*v123 + 136));

      v54 = v58;
    }
    v65 = 0;
    v51 = v58;
    do
    {
      v66 = realitykit_shader_api::surfaceFunctions[v65];
      v67 = *v122;
      v68 = *(id *)(v51 + 248);
      v52 = v27 + 1;
      re::makeAPIFunctionAsync(a1[7], v66, v121, v67, v126, v127, v124, v27, *(_QWORD *)(*v123 + 144), *(_QWORD *)(*v123 + 136));

      v51 = v119;
      ++v65;
      ++v27;
    }
    while (v65 != 54);
  }
  else
  {
    v52 = v27;
  }
  v69 = v117;
  if ((v117 & 2) != 0)
  {
    v70 = 0;
    v71 = v51;
    do
    {
      v72 = v52;
      v73 = realitykit_shader_api::surface_privateFunctions[v70];
      v74 = *v122;
      v75 = *(id *)(v71 + 248);
      ++v52;
      re::makeAPIFunctionAsync(a1[7], v73, v121, v74, v126, v127, v124, v72, *(_QWORD *)(*v123 + 144), *(_QWORD *)(*v123 + 136));

      ++v70;
    }
    while (v70 != 60);
    v76 = *v122;
    v77 = *(id *)(v71 + 248);
    re::makeAPIFunctionAsync(a1[7], "realitykit::texture_private::api::custom_at", v121, v76, v126, v127, v124, v52, *(_QWORD *)(*v123 + 144), *(_QWORD *)(*v123 + 136));

    ++v52;
    v69 = v117;
  }
  if ((v69 & 0x20) != 0)
  {
    for (j = 0; j != 22; ++j)
    {
      v80 = realitykit_shader_api::uisurface_privateFunctions[j];
      v81 = *v122;
      v82 = *(id *)(v119 + 248);
      v78 = v52 + 1;
      re::makeAPIFunctionAsync(a1[7], v80, v121, v81, v126, v127, v124, v52, *(_QWORD *)(*v123 + 144), *(_QWORD *)(*v123 + 136));

      ++v52;
    }
  }
  else
  {
    v78 = v52;
  }
  if ((v117 & 4) != 0)
  {
    for (k = 0; k != 12; ++k)
    {
      v85 = v78;
      v86 = realitykit_shader_api::textureFunctions[k];
      v87 = *v122;
      v88 = *(id *)(v119 + 248);
      ++v78;
      re::makeAPIFunctionAsync(a1[7], v86, v121, v87, v126, v127, v124, v85, *(_QWORD *)(*v123 + 144), *(_QWORD *)(*v123 + 136));

    }
    for (m = 0; m != 9; ++m)
    {
      v90 = v78;
      v91 = realitykit_shader_api::materialFunctions[m];
      v92 = *v122;
      v93 = *(id *)(v119 + 248);
      ++v78;
      re::makeAPIFunctionAsync(a1[7], v91, v121, v92, v126, v127, v124, v90, *(_QWORD *)(*v123 + 144), *(_QWORD *)(*v123 + 136));

    }
    for (n = 0; n != 47; ++n)
    {
      v95 = realitykit_shader_api::geometry_modifierFunctions[n];
      v96 = *v122;
      v97 = *(id *)(v119 + 248);
      v83 = v78 + 1;
      re::makeAPIFunctionAsync(a1[7], v95, v121, v96, v126, v127, v124, v78, *(_QWORD *)(*v123 + 144), *(_QWORD *)(*v123 + 136));

      ++v78;
    }
  }
  else
  {
    v83 = v78;
  }
  v98 = v117;
  if ((v117 & 8) != 0)
  {
    for (ii = 0; ii != 55; ++ii)
    {
      v100 = v83;
      v101 = realitykit_shader_api::geometry_modifier_privateFunctions[ii];
      v102 = *v122;
      v103 = *(id *)(v119 + 248);
      ++v83;
      re::makeAPIFunctionAsync(a1[7], v101, v121, v102, v126, v127, v124, v100, *(_QWORD *)(*v123 + 144), *(_QWORD *)(*v123 + 136));

    }
    v104 = *v122;
    v105 = *(id *)(v119 + 248);
    re::makeAPIFunctionAsync(a1[7], "realitykit::texture_private::api::custom_at", v121, v104, v126, v127, v124, v83, *(_QWORD *)(*v123 + 144), *(_QWORD *)(*v123 + 136));

    ++v83;
    v98 = v117;
  }
  v106 = v127;
  v107 = v126;
  v108 = v121;
  if ((v98 & 0x10) != 0)
  {
    for (jj = 0; jj != 13; ++jj)
    {
      v110 = v108;
      v111 = v107;
      v112 = v106;
      v113 = realitykit_shader_api::ui_geometry_modifier_privateFunctions[jj];
      v114 = *v122;
      v115 = *(id *)(v119 + 248);
      v116 = v113;
      v106 = v112;
      v107 = v111;
      v108 = v110;
      re::makeAPIFunctionAsync(a1[7], v116, v110, v114, v107, v106, v124, v83, *(_QWORD *)(*v123 + 144), *(_QWORD *)(*v123 + 136));

      ++v83;
    }
  }
}

BOOL re::validateCachedPipelineState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;

  v4 = *(_QWORD *)(a1 + 56) + 264;
  v25 = *(_QWORD *)(*(_QWORD *)a2 + 160);
  v5 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v4, &v25);
  v6 = *(_QWORD *)(a1 + 56) + 264;
  v25 = *(_QWORD *)(*(_QWORD *)a2 + 168);
  v7 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v6, &v25);
  v8 = *(_QWORD **)a2;
  v9 = *(_QWORD *)(*(_QWORD *)a2 + 200);
  if (v9)
  {
    v10 = 0;
    v11 = (uint64_t *)v8[26];
    v12 = 8 * v9;
    do
    {
      v13 = *(_QWORD *)(a1 + 56) + 264;
      v25 = *v11;
      v14 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v13, &v25);
      if (v14)
        v10 ^= (v10 << 6) - 0x61C8864680B583E9 + (v10 >> 2) + objc_msgSend(*(id *)(v14 + 8), "hash");
      ++v11;
      v12 -= 8;
    }
    while (v12);
    v8 = *(_QWORD **)a2;
  }
  else
  {
    v10 = 0;
  }
  v15 = v8[28];
  if (!v15)
  {
    v16 = 0;
    if (v5)
      goto LABEL_14;
LABEL_17:
    v21 = 0;
    if (v7)
      goto LABEL_15;
LABEL_18:
    v22 = 0;
    goto LABEL_19;
  }
  v16 = 0;
  v17 = (uint64_t *)v8[29];
  v18 = 8 * v15;
  do
  {
    v19 = *(_QWORD *)(a1 + 56) + 264;
    v25 = *v17;
    v20 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v19, &v25);
    if (v20)
      v16 ^= (v16 << 6) - 0x61C8864680B583E9 + (v16 >> 2) + objc_msgSend(*(id *)(v20 + 8), "hash");
    ++v17;
    v18 -= 8;
  }
  while (v18);
  if (!v5)
    goto LABEL_17;
LABEL_14:
  v21 = objc_msgSend(*(id *)(v5 + 8), "hash");
  if (!v7)
    goto LABEL_18;
LABEL_15:
  v22 = objc_msgSend(*(id *)(v7 + 8), "hash");
LABEL_19:
  v23 = *(_QWORD **)a2;
  return v22 == *(_QWORD *)(*(_QWORD *)a2 + 152) && v21 == v23[18] && v16 == v23[23] && v10 == v23[22];
}

uint64_t re::compileCachedPipelineStateAsync@<X0>(re *a1@<X0>, unsigned int a2@<W1>, char **a3@<X8>)
{
  char **v3;
  id v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char **v11;
  char **v12;
  unsigned __int8 v13;
  uint64_t v14;
  unsigned __int16 *v15;
  unsigned __int16 *v16;
  char **v17;
  char **v18;
  char *v19;
  BOOL v20;
  unint64_t v21;
  char *v22;
  int VertexFormatFromDataType;
  int v24;
  int v25;
  unsigned __int8 v26;
  char *v27;
  unsigned __int8 v28;
  int v29;
  int v30;
  re *WeakRetained;
  uint64_t v32;
  char *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  unsigned __int8 *v41;
  int *v42;
  int *v43;
  int *v44;
  int *v45;
  int *v46;
  int *v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  BOOL v55;
  NSObject *v56;
  _BOOL8 v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  int v64;
  uint64_t v65;
  const char *v66;
  NSObject *v67;
  _BOOL8 v68;
  int v69;
  int v70;
  BOOL v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  re *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t As64Bits;
  NSObject *v88;
  uint64_t v89;
  uint64_t v90;
  uint8_t *v91;
  uint8_t *v92;
  uint64_t v93;
  NSObject *v94;
  uint64_t v95;
  uint64_t v96;
  uint8_t *v97;
  size_t v98;
  uint64_t v99;
  unsigned int *v100;
  size_t v101;
  unint64_t v102;
  const char *v103;
  size_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  _BOOL8 v132;
  uint64_t v133;
  char **v134;
  char **v135;
  char *v136;
  uint64_t v137;
  unsigned __int16 *v138;
  char v139;
  char **v140;
  _anonymous_namespace_ *v141;
  uint64_t v142;
  unsigned __int16 *v143;
  char **v144;
  char **v145;
  BOOL v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  const char *v153;
  uint64_t v154;
  _BYTE *v155;
  uint64_t v156;
  unsigned int v157;
  char *v158;
  int v159;
  unsigned __int16 v160;
  int v161;
  id v162;
  unsigned int v163;
  unsigned int *v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  char *v168;
  char *v169;
  id v170;
  int v171;
  id v172;
  id v173;
  id v174;
  id v175;
  id v176;
  id v177;
  unsigned int v178;
  char *v180;
  NSObject *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char **v185;
  id v186;
  uint64_t *v187;
  uint64_t *v188;
  char *v189;
  int v190;
  char *v191;
  void *v192;
  char *v193;
  NSObject *v194;
  re *v195;
  uint64_t *v196;
  re *v197;
  uint64_t *v198;
  _QWORD *v199;
  NSObject *v200;
  re *v201;
  re *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  id *v207;
  char *v208;
  uint64_t v209;
  id v210;
  id v211;
  void *v212;
  id v213;
  NSObject *v214;
  re *v215;
  uint64_t v216;
  uint64_t v217;
  _anonymous_namespace_ *v218;
  char *v219;
  unint64_t v220;
  id v221;
  NSObject *v222;
  uint64_t v223;
  uint64_t v224;
  id *v225;
  char *v226;
  uint64_t v227;
  id v228;
  id v229;
  id v230;
  NSObject *v231;
  re *v232;
  uint64_t v233;
  uint64_t v234;
  _anonymous_namespace_ *v235;
  unint64_t v236;
  id v237;
  NSObject *v238;
  uint64_t result;
  id v240;
  uint64_t v241;
  void *v242;
  unsigned __int16 *v243;
  uint64_t v244;
  id v245;
  const char *v246;
  uint8_t v247;
  _BYTE *v248;
  unsigned int v249[2];
  char *v250;
  re *v251;
  char **v252;
  uint64_t v253;
  char *v254;
  char *v255;
  unsigned int *v256;
  uint64_t v257;
  char **v258;
  const char *v259;
  const char *v260;
  unsigned int v261;
  char *__s;
  unsigned int v263[2];
  unsigned int v264[2];
  char **v265;
  id v266;
  unint64_t v267;
  _anonymous_namespace_ *v268;
  _QWORD *v269;
  unint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  id v274;
  char *v275;
  unsigned __int16 v276;
  char *v277;
  unsigned __int8 *v278;
  uint64_t *v279;
  id v280;
  id v281;
  uint64_t *v282;
  uint64_t v283;
  const char *v284;
  uint64_t v285;
  dispatch_group_t v286;
  char **v287;
  uint64_t v288;
  id v289;
  dispatch_group_t v290;
  char **v291;
  id v292;
  NSObject *v293;
  uint8_t buf[32];
  _OWORD v295[3];
  __int16 v296;
  int v297;
  __int16 v298;
  int v299;
  __int16 v300;
  unsigned int v301;
  __int16 v302;
  unsigned int v303;
  __int16 v304;
  unsigned int v305;
  __int16 v306;
  unsigned int v307;
  __int16 v308;
  unsigned int v309;
  __int16 v310;
  unsigned int v311;
  __int16 v312;
  unsigned int v313;
  __int16 v314;
  unsigned int v315;
  __int16 v316;
  unsigned int v317;
  __int16 v318;
  char *v319;
  __int16 v320;
  const char *v321;
  __int16 v322;
  char *v323;
  __int16 v324;
  const char *v325;
  unsigned int v326;
  unsigned int v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  unsigned int v332;
  unsigned int v333;
  uint64_t v334[3];
  uint64_t v335;
  uint64_t *v336;
  _BYTE v337[40];
  uint64_t v338;

  v5 = a1;
  v338 = *MEMORY[0x24BDAC8D0];
  v7 = re::globalAllocators(a1);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 256, 8);
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_OWORD *)(v8 + 144) = 0u;
  *(_OWORD *)(v8 + 160) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 208) = 0u;
  *(_OWORD *)(v8 + 224) = 0u;
  *(_OWORD *)(v8 + 240) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v8, 0);
  *(_QWORD *)v9 = &off_24ED74990;
  *(_DWORD *)(v9 + 72) = 0;
  *(_QWORD *)(v9 + 80) = 0;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_OWORD *)(v9 + 112) = 0u;
  *(_DWORD *)(v9 + 128) = 0;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_QWORD *)(v9 + 61) = 0;
  *(_QWORD *)(v9 + 132) = 0x7FFFFFFFLL;
  *(_OWORD *)(v9 + 192) = 0u;
  *(_OWORD *)(v9 + 208) = 0u;
  *(_OWORD *)(v9 + 224) = 0u;
  *a3 = (char *)v9;
  v10 = re::internal::enableSignposts(0, 0);
  if ((_DWORD)v10)
    v10 = kdebug_trace();
  v261 = a2;
  atomic_store(1u, (unsigned __int8 *)(v8 + 240));
  ++*(_QWORD *)(*(_QWORD *)v5 + 48);
  v253 = *((_QWORD *)v5 + 1);
  v11 = (char **)*((_QWORD *)v5 + 3);
  v12 = (char **)*((_QWORD *)v5 + 8);
  v273 = *((unsigned __int8 *)v5 + 88);
  v257 = *((_QWORD *)v5 + 5);
  v13 = atomic_load((unsigned __int8 *)&qword_254118EF0);
  if ((v13 & 1) == 0)
    goto LABEL_336;
  while (2)
  {
    v284 = 0;
    v285 = 0;
    v283 = 0;
    re::DynamicString::setCapacity(&v282, 0x200uLL);
    v14 = *((_QWORD *)v5 + 10);
    if (v14)
    {
      v15 = (unsigned __int16 *)*((_QWORD *)v5 + 9);
      v16 = &v15[5 * v14];
      while (1)
      {
        v17 = v12;
        do
        {
          v18 = v17;
          v17 = (char **)v17[1];
          v19 = v18[4];
          if (v17)
            v20 = v19 == 0;
          else
            v20 = 0;
        }
        while (v20);
        v21 = v15[2];
        if ((unint64_t)v19 <= v21)
          break;
        v22 = v18[5];
        if (v15[3])
        {
          VertexFormatFromDataType = re::getVertexFormatFromDataType((re *)v15[3]);
          v24 = -1;
          v25 = 1;
          v26 = 1;
        }
        else
        {
          v27 = &v22[16 * v21];
          v24 = *(unsigned __int16 *)v27;
          VertexFormatFromDataType = v27[12];
          v28 = v27[5];
          if (*((_BYTE *)v15 + 8))
            v25 = 0;
          else
            v25 = *((unsigned __int16 *)v27 + 1);
          if (*((_BYTE *)v15 + 8))
            v26 = 0;
          else
            v26 = v28;
        }
        v29 = v15[1];
        v30 = *v15;
        v15 += 5;
        re::DynamicString::appendf((re::DynamicString *)&v282, "(att=%d fmt=%d off=%d lyt=%d str=%d sf=%d sr=%d) ", v29, VertexFormatFromDataType, *(_DWORD *)&v22[16 * v21 + 8], v30, v24, v26, v25);
        if (v15 == v16)
          goto LABEL_21;
      }
      v334[0] = 0;
      memset(v295, 0, sizeof(v295));
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v337 = 136315906;
      *(_QWORD *)&v337[4] = "operator[]";
      *(_WORD *)&v337[12] = 1024;
      *(_DWORD *)&v337[14] = 476;
      *(_WORD *)&v337[18] = 2048;
      *(_QWORD *)&v337[20] = v21;
      *(_WORD *)&v337[28] = 2048;
      *(_QWORD *)&v337[30] = v19;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_320;
    }
LABEL_21:
    WeakRetained = (re *)objc_loadWeakRetained((id *)(*((_QWORD *)v5 + 5) + 2736));
    v32 = 0;
    v33 = (char *)WeakRetained - 8;
    if (!WeakRetained)
      v33 = 0;
    v34 = (const char *)*((_QWORD *)v33 + 178);
    v270 = *(unsigned int *)v11;
    v267 = *((unsigned int *)v11 + 9);
    *(_QWORD *)v263 = *((unsigned int *)v11 + 10);
    v35 = (const char *)*((_QWORD *)v5 + 15);
    v36 = (const char *)*((_QWORD *)v5 + 16);
    v37 = (const char *)*((_QWORD *)v5 + 14);
    do
    {
      *(_OWORD *)((char *)&v326 + v32 * 8) = *(_OWORD *)((char *)&v11[v32] + 4);
      v32 += 2;
    }
    while (v32 != 4);
    v38 = "NULL";
    if (!v34)
      v34 = "NULL";
    __s = (char *)v34;
    if (v37)
      v39 = v37;
    else
      v39 = "NULL";
    v260 = v39;
    if (v36)
      v40 = v36;
    else
      v40 = "NULL";
    v259 = v40;
    if (v35)
      v38 = v35;
    v255 = (char *)v38;
    v256 = (unsigned int *)v11;
    v278 = (unsigned __int8 *)v5;
    v251 = WeakRetained;
    v252 = a3;
    v265 = v12;
    if (*(_QWORD *)(v257 + 144))
    {
      v41 = *(unsigned __int8 **)(v257 + 160);
      v42 = (int *)(v41 + 4);
      v43 = (int *)(v41 + 8);
      v44 = (int *)(v41 + 12);
      v45 = (int *)(v41 + 16);
      v46 = (int *)(v41 + 20);
      v47 = (int *)(v41 + 24);
    }
    else
    {
      v42 = (int *)(v257 + 84);
      v43 = (int *)(v257 + 88);
      v44 = (int *)(v257 + 92);
      v45 = (int *)(v257 + 96);
      v46 = (int *)(v257 + 100);
      v47 = (int *)(v257 + 104);
      v41 = (unsigned __int8 *)(v257 + 72);
    }
    v48 = *v46;
    v49 = *v44;
    v50 = *v42;
    v51 = *v43;
    v52 = *v45;
    v53 = *v47;
    v54 = *v41;
    if (v278[56] && !v278[57]
      || (*(_BYTE *)(*((_QWORD *)v278 + 5) + 2845) ? (v55 = _MergedGlobals_375 == 0) : (v55 = 0), !v55))
    {
      v56 = *re::graphicsLogObjects(WeakRetained);
      v57 = os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT);
      if (v57)
      {
        v58 = *((_QWORD *)v278 + 13);
        v59 = (_QWORD *)*((_QWORD *)v278 + 4);
        v60 = **((_QWORD **)v278 + 5);
        v61 = v59[3];
        v62 = *(_QWORD *)(v59[2] + 8);
        if (v61)
          v63 = *(const char **)(v61 + 8);
        else
          v63 = "NONE";
        v64 = v278[57];
        v65 = v59[21];
        if ((v283 & 1) != 0)
          v66 = v284;
        else
          v66 = (char *)&v283 + 1;
        *(_DWORD *)buf = 134223874;
        *(_QWORD *)&buf[4] = v58;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = __s;
        *(_WORD *)&buf[22] = 2082;
        *(_QWORD *)&buf[24] = v60;
        LOWORD(v295[0]) = 2082;
        *(_QWORD *)((char *)v295 + 2) = v62;
        WORD5(v295[0]) = 2082;
        *(_QWORD *)((char *)v295 + 12) = v63;
        WORD2(v295[1]) = 1024;
        *(_DWORD *)((char *)&v295[1] + 6) = v64;
        WORD5(v295[1]) = 2048;
        *(_QWORD *)((char *)&v295[1] + 12) = v65;
        WORD2(v295[2]) = 1024;
        *(_DWORD *)((char *)&v295[2] + 6) = v267;
        WORD5(v295[2]) = 1024;
        HIDWORD(v295[2]) = v263[0];
        v296 = 1024;
        v297 = v270;
        v298 = 1024;
        v299 = v273;
        v300 = 1024;
        v301 = v261;
        v302 = 1024;
        v303 = v326;
        v304 = 1024;
        v305 = v327;
        v306 = 1024;
        v307 = v328;
        v308 = 1024;
        v309 = v329;
        v310 = 1024;
        v311 = v330;
        v312 = 1024;
        v313 = v331;
        v314 = 1024;
        v315 = v332;
        v316 = 1024;
        v317 = v333;
        v318 = 2082;
        v319 = (char *)v66;
        v320 = 2082;
        v321 = v260;
        v322 = 2082;
        v323 = v255;
        v324 = 2082;
        v325 = v259;
        _os_log_impl(&dword_224FE9000, v56, OS_LOG_TYPE_DEFAULT, "Compiling PSO psk=%zu name=%{public}s tech=%{public}s vtx=%{public}s frag=%{public}s ciar=%d fc=%zu dFmt=%d sFmt=%d sc=%d pt=%d sof=%d pxFmt=%d %d %d %d %d %d %d %d vd=%{public}snode=%{public}s type=%{public}s graph=%{public}s ", buf, 0xBAu);
      }
      v67 = *re::graphicsLogObjects((re *)v57);
      v68 = os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT);
      if (v68)
      {
        v69 = 0;
        v70 = *(unsigned __int8 *)(v257 + 75);
        if (*(_BYTE *)(v257 + 75))
          v71 = *(_BYTE *)(v257 + 76) == 0;
        else
          v71 = 1;
        v72 = !v71;
        if (v54)
          v73 = v50;
        else
          v73 = 0;
        v74 = *((_QWORD *)v278 + 13);
        if (v54)
          v75 = v51;
        else
          v75 = 0;
        if (v54)
          v76 = v49;
        else
          v76 = 0;
        if (v54)
          v77 = v52;
        else
          v77 = 0;
        if (v54)
          v78 = v48;
        else
          v78 = 0;
        if (v54)
          v79 = v53;
        else
          v79 = 0;
        if ((v261 & 2) == 0)
          v69 = *(_DWORD *)(v257 + 108);
        *(_DWORD *)buf = 134220544;
        *(_QWORD *)&buf[4] = v74;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v70;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v72;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v54;
        *(_WORD *)&buf[30] = 1024;
        LODWORD(v295[0]) = v73;
        WORD2(v295[0]) = 1024;
        *(_DWORD *)((char *)v295 + 6) = v75;
        WORD5(v295[0]) = 1024;
        HIDWORD(v295[0]) = v76;
        LOWORD(v295[1]) = 1024;
        *(_DWORD *)((char *)&v295[1] + 2) = v77;
        WORD3(v295[1]) = 1024;
        DWORD2(v295[1]) = v78;
        WORD6(v295[1]) = 1024;
        *(_DWORD *)((char *)&v295[1] + 14) = v79;
        WORD1(v295[2]) = 1024;
        DWORD1(v295[2]) = v69;
        _os_log_impl(&dword_224FE9000, v67, OS_LOG_TYPE_DEFAULT, "Compiling PSO psk=%zu a2c=%d a21=%d be=%d rgbS=%d rgbD=%d rgbB=%d aS=%d aD=%d aB=%d wm=%d ", buf, 0x48u);
      }
      memset(&buf[8], 0, 24);
      v80 = (re *)re::DynamicString::setCapacity(buf, 0x200uLL);
      v81 = *((_QWORD *)v278 + 4);
      v82 = *(_QWORD *)(v81 + 136);
      if (v82)
      {
        v83 = 0;
        v84 = *(_QWORD *)(v81 + 144);
        v85 = v82 << 6;
        do
        {
          if ((*(_BYTE *)(v84 + 8) & 1) != 0)
            v86 = *(const char **)(v84 + 16);
          else
            v86 = (const char *)(v84 + 9);
          As64Bits = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)v84);
          v80 = (re *)re::DynamicString::appendf((re::DynamicString *)buf, "%s=%llu ", v86, As64Bits);
          if (++v83 == 20)
          {
            v88 = *re::graphicsLogObjects(v80);
            v80 = (re *)os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v80)
            {
              v89 = *((_QWORD *)v278 + 13);
              v90 = *(_QWORD *)(*((_QWORD *)v278 + 4) + 168);
              if ((buf[8] & 1) != 0)
                v91 = *(uint8_t **)&buf[16];
              else
                v91 = &buf[9];
              *(_DWORD *)v337 = 134218498;
              *(_QWORD *)&v337[4] = v89;
              *(_WORD *)&v337[12] = 2048;
              *(_QWORD *)&v337[14] = v90;
              *(_WORD *)&v337[22] = 2082;
              *(_QWORD *)&v337[24] = v91;
              _os_log_impl(&dword_224FE9000, v88, OS_LOG_TYPE_DEFAULT, "Compiling PSO psk=%zu fc=%zu %{public}s", v337, 0x20u);
            }
            if ((buf[8] & 1) != 0)
            {
              *(_QWORD *)&buf[8] = 1;
              v92 = *(uint8_t **)&buf[16];
            }
            else
            {
              buf[8] &= 1u;
              v92 = &buf[9];
            }
            v83 = 0;
            *v92 = 0;
          }
          v84 += 64;
          v85 -= 64;
        }
        while (v85);
      }
      if ((buf[8] & 1) != 0)
        v93 = *(_QWORD *)&buf[8] >> 1;
      else
        v93 = buf[8] >> 1;
      if (v93)
      {
        v94 = *re::graphicsLogObjects(v80);
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
        {
          v95 = *((_QWORD *)v278 + 13);
          v96 = *(_QWORD *)(*((_QWORD *)v278 + 4) + 168);
          if ((buf[8] & 1) != 0)
            v97 = *(uint8_t **)&buf[16];
          else
            v97 = &buf[9];
          *(_DWORD *)v337 = 134218498;
          *(_QWORD *)&v337[4] = v95;
          *(_WORD *)&v337[12] = 2048;
          *(_QWORD *)&v337[14] = v96;
          *(_WORD *)&v337[22] = 2082;
          *(_QWORD *)&v337[24] = v97;
          _os_log_impl(&dword_224FE9000, v94, OS_LOG_TYPE_DEFAULT, "Compiling PSO psk=%zu fc=%zu %{public}s", v337, 0x20u);
        }
      }
      if (*(_QWORD *)buf && (buf[8] & 1) != 0)
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)buf + 40))(*(_QWORD *)buf, *(_QWORD *)&buf[16]);
    }
    v98 = strlen(__s);
    if (v98)
    {
      MurmurHash3_x64_128((uint64_t)__s, v98, 0, (unint64_t *)buf);
      v99 = (*(_QWORD *)&buf[8] - 0x61C8864680B583E9 + (*(_QWORD *)buf << 6) + (*(_QWORD *)buf >> 2)) ^ *(_QWORD *)buf;
    }
    else
    {
      v99 = 0;
    }
    v3 = (char **)v278;
    v100 = v256;
    v101 = strlen(**((const char ***)v278 + 5));
    if (v101)
    {
      MurmurHash3_x64_128(**((_QWORD **)v278 + 5), v101, 0, (unint64_t *)buf);
      v102 = (*(_QWORD *)&buf[8] - 0x61C8864680B583E9 + (*(_QWORD *)buf << 6) + (*(_QWORD *)buf >> 2)) ^ *(_QWORD *)buf;
    }
    else
    {
      v102 = 0;
    }
    if ((v283 & 1) != 0)
      v103 = v284;
    else
      v103 = (char *)&v283 + 1;
    v104 = strlen(v103);
    if (v104)
    {
      MurmurHash3_x64_128((uint64_t)v103, v104, 0, (unint64_t *)buf);
      v105 = (*(_QWORD *)&buf[8] - 0x61C8864680B583E9 + (*(_QWORD *)buf << 6) + (*(_QWORD *)buf >> 2)) ^ *(_QWORD *)buf;
    }
    else
    {
      v105 = 0;
    }
    v106 = (((v99 - 0x61C8864680B583E9) << 6)
          - 0x61C8864680B583E9
          + ((unint64_t)(v99 - 0x61C8864680B583E9) >> 2)
          + (((v102 << 6) - 0x61C8864680B583E9 + (v102 >> 2) + v105) ^ v102)) ^ (v99 - 0x61C8864680B583E9);
    v107 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v267 ^ (v267 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v267 ^ (v267 >> 30))) >> 27));
    v108 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (*(_QWORD *)v263 ^ (*(_QWORD *)v263 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                   * (*(_QWORD *)v263 ^ (*(_QWORD *)v263 >> 30))) >> 27));
    v109 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v270 ^ (v270 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v270 ^ (v270 >> 30))) >> 27));
    v110 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v261) ^ ((0xBF58476D1CE4E5B9 * v261) >> 27));
    v111 = ((v107 ^ (v107 >> 31)) - 0x61C8864680B583E9 + (v106 << 6) + (v106 >> 2)) ^ v106;
    v112 = ((v109 ^ (v109 >> 31)) - 0x61C8864680B583E9 + ((v108 ^ (v108 >> 31)) << 6) + ((v108 ^ (v108 >> 31)) >> 2)) ^ v108 ^ (v108 >> 31);
    v113 = ((((v110 ^ (v110 >> 31)) - 0x61C8864680B583E9 + (v112 << 6) + (v112 >> 2)) ^ v112)
          - 0x61C8864680B583E9
          + (v111 << 6)
          + (v111 >> 2)) ^ v111;
    v114 = 0xBF58476D1CE4E5B9 * (v326 ^ ((unint64_t)v326 >> 30));
    v115 = 0xBF58476D1CE4E5B9 * (v327 ^ ((unint64_t)v327 >> 30));
    v116 = (0x94D049BB133111EBLL * (v115 ^ (v115 >> 27))) ^ ((0x94D049BB133111EBLL * (v115 ^ (v115 >> 27))) >> 31);
    v117 = 0xBF58476D1CE4E5B9 * (v328 ^ ((unint64_t)v328 >> 30));
    v118 = 0xBF58476D1CE4E5B9 * (v329 ^ ((unint64_t)v329 >> 30));
    v119 = (((0x94D049BB133111EBLL * (v114 ^ (v114 >> 27))) ^ ((0x94D049BB133111EBLL * (v114 ^ (v114 >> 27))) >> 31))
          - 0x61C8864680B583E9
          + (v113 << 6)
          + (v113 >> 2)) ^ v113;
    v120 = (((0x94D049BB133111EBLL * (v117 ^ (v117 >> 27))) ^ ((0x94D049BB133111EBLL * (v117 ^ (v117 >> 27))) >> 31))
          - 0x61C8864680B583E9
          + (v116 << 6)
          + (v116 >> 2)) ^ v116;
    v121 = ((v119 << 6)
          - 0x61C8864680B583E9
          + (v119 >> 2)
          + ((((0x94D049BB133111EBLL * (v118 ^ (v118 >> 27))) ^ ((0x94D049BB133111EBLL * (v118 ^ (v118 >> 27))) >> 31))
            - 0x61C8864680B583E9
            + (v120 << 6)
            + (v120 >> 2)) ^ v120)) ^ v119;
    v122 = 0xBF58476D1CE4E5B9 * (v330 ^ ((unint64_t)v330 >> 30));
    v123 = 0xBF58476D1CE4E5B9 * (v331 ^ ((unint64_t)v331 >> 30));
    v124 = (0x94D049BB133111EBLL * (v123 ^ (v123 >> 27))) ^ ((0x94D049BB133111EBLL * (v123 ^ (v123 >> 27))) >> 31);
    v125 = 0xBF58476D1CE4E5B9 * (v332 ^ ((unint64_t)v332 >> 30));
    v126 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v333 ^ ((unint64_t)v333 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                               * (v333 ^ ((unint64_t)v333 >> 30))) >> 27));
    v127 = (((0x94D049BB133111EBLL * (v122 ^ (v122 >> 27))) ^ ((0x94D049BB133111EBLL * (v122 ^ (v122 >> 27))) >> 31))
          - 0x61C8864680B583E9
          + (v121 << 6)
          + (v121 >> 2)) ^ v121;
    v128 = (((0x94D049BB133111EBLL * (v125 ^ (v125 >> 27))) ^ ((0x94D049BB133111EBLL * (v125 ^ (v125 >> 27))) >> 31))
          - 0x61C8864680B583E9
          + (v124 << 6)
          + (v124 >> 2)) ^ v124;
    v129 = ((((v126 ^ (v126 >> 31)) - 0x61C8864680B583E9 + (v128 << 6) + (v128 >> 2)) ^ v128)
          - 0x61C8864680B583E9
          + (v127 << 6)
          + (v127 >> 2)) ^ v127;
    if ((v283 & 1) != 0)
      v130 = v284;
    else
      v130 = (char *)&v283 + 1;
    LOBYTE(v250) = v278[57];
    re::REAnalyticsEventShaderCompilationRequest((re *)__s, **((const char ***)v278 + 5), v260, v259, v255, (const char *)v270, (uint64_t)&v326, (unsigned int *)v267, v263[0], v261, (uint64_t)v130, v250, v129, v278[56]);
    re::ShaderManager::makeRenderPipelineDescriptor(*(re::ShaderManager **)(v253 + 56), &v281);
    v131 = *((_QWORD *)v278 + 6);
    if (v131)
      objc_msgSend(v281, sel_setLabel_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, v131, 4));
    else
      objc_msgSend(v281, sel_setLabel_, CFSTR("MeshPartRenderPipeline"));
    objc_msgSend(v281, sel_setRasterSampleCount_, *v256);
    objc_msgSend(v281, sel_setAlphaToCoverageEnabled_, *(unsigned __int8 *)(v257 + 75));
    if (*(_BYTE *)(v257 + 76))
      v132 = *(_BYTE *)(v257 + 75) != 0;
    else
      v132 = 0;
    objc_msgSend(v281, sel_setAlphaToOneEnabled_, v132);
    if ((v273 - 1) > 3u)
      v133 = 1;
    else
      v133 = qword_226134D80[(char)(v273 - 1)];
    objc_msgSend(v281, sel_setInputPrimitiveTopology_, v133);
    v134 = (char **)*((_QWORD *)v278 + 4);
    if (v134)
      v135 = v134 + 1;
    v5 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD5A0], sel_alloc), sel_init);
    v136 = v134[17];
    if (v136)
    {
      v137 = (_QWORD)v136 << 6;
      v138 = (unsigned __int16 *)(v134[18] + 32);
      do
      {
        objc_msgSend(v5, sel_setConstantValue_type_atIndex_, *((_QWORD *)v138 + 3), *v138, v138[1]);
        v138 += 32;
        v137 -= 64;
      }
      while (v137);
    }
    if (!v273)
    {
      buf[0] = 1;
      objc_msgSend(v5, sel_setConstantValue_type_withName_, buf, 53, CFSTR("IsPointPrimitive"));
    }
    v258 = v134;
    v139 = v261;
    if (*(_BYTE *)(v253 + 302))
      objc_msgSend(v281, sel_setMaxVertexAmplificationCount_, 2);
    v254 = (char *)v5;
    if (v278[56] && *(_BYTE *)(*((_QWORD *)v278 + 5) + 2848))
    {
      objc_msgSend(v281, sel_setMaxVertexCallStackDepth_, 1);
      objc_msgSend(v281, sel_setSupportAddingVertexBinaryFunctions_, 1);
      v140 = v134;
    }
    else
    {
      v141 = (_anonymous_namespace_ *)objc_msgSend(objc_msgSend(MEMORY[0x24BDDD770], sel_alloc), sel_init);
      v268 = v141;
      v142 = *((_QWORD *)v278 + 10);
      if (v142)
      {
        v143 = (unsigned __int16 *)*((_QWORD *)v278 + 9);
        a3 = (char **)v295 + 1;
        v12 = (char **)&buf[9];
        v11 = (char **)&v337[9];
        *(_QWORD *)v264 = &v143[5 * v142];
        while (1)
        {
          v144 = v265;
          do
          {
            v145 = v144;
            v144 = (char **)v144[1];
            v15 = (unsigned __int16 *)v145[4];
            if (v144)
              v146 = v15 == 0;
            else
              v146 = 0;
          }
          while (v146);
          v3 = (char **)v143[2];
          if (v15 <= (unsigned __int16 *)v3)
            break;
          v147 = v145[5];
          if (*v143 >= 0x1Fu)
          {
            v275 = v145[5];
            memset(&v337[8], 0, 24);
            re::DynamicString::setCapacity(v337, 0x200uLL);
            v148 = *((_QWORD *)v278 + 4);
            v149 = *(_QWORD *)(v148 + 136);
            if (v149)
            {
              v150 = 0;
              v151 = *(_QWORD *)(v148 + 144);
              v152 = v151 + (v149 << 6);
              do
              {
                re::DynamicString::DynamicString((re::DynamicString *)buf, (const re::DynamicString *)v151);
                LODWORD(v295[0]) = *(_DWORD *)(v151 + 32);
                re::FixedArray<unsigned char>::FixedArray((_QWORD *)v295 + 1, (uint64_t *)(v151 + 40));
                if ((buf[8] & 1) != 0)
                  v153 = *(const char **)&buf[16];
                else
                  v153 = (const char *)&buf[9];
                v154 = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)buf);
                re::DynamicString::appendf((re::DynamicString *)v337, "%s=%llu ", v153, v154);
                if (++v150 == 20)
                {
                  re::logAttributeIndexExceedsLimit((re *)v278, (uint64_t)v337, *v143);
                  if ((v337[8] & 1) != 0)
                  {
                    *(_QWORD *)&v337[8] = 1;
                    v155 = *(_BYTE **)&v337[16];
                  }
                  else
                  {
                    v337[8] &= 1u;
                    v155 = &v337[9];
                  }
                  v150 = 0;
                  *v155 = 0;
                }
                if (*((_QWORD *)&v295[0] + 1))
                {
                  if (*(_QWORD *)&v295[1])
                  {
                    (*(void (**)(void))(**((_QWORD **)&v295[0] + 1) + 40))();
                    v295[1] = 0uLL;
                  }
                  *((_QWORD *)&v295[0] + 1) = 0;
                }
                if (*(_QWORD *)buf && (buf[8] & 1) != 0)
                  (*(void (**)(void))(**(_QWORD **)buf + 40))();
                v151 += 64;
              }
              while (v151 != v152);
            }
            if ((v337[8] & 1) != 0)
              v156 = *(_QWORD *)&v337[8] >> 1;
            else
              v156 = v337[8] >> 1;
            if (v156)
              re::logAttributeIndexExceedsLimit((re *)v278, (uint64_t)v337, *v143);
            if (*(_QWORD *)v337 && (v337[8] & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)v337 + 40))();
            v147 = v275;
          }
          if (v143[3])
          {
            v157 = re::getVertexFormatFromDataType((re *)v143[3]);
            v276 = 1;
            v271 = -1;
            v273 = 1;
          }
          else
          {
            v271 = *(unsigned __int16 *)&v147[16 * (_QWORD)v3];
            v158 = &v147[16 * (_QWORD)v3];
            v157 = v158[12];
            v159 = v158[5];
            v160 = *((_WORD *)v158 + 1);
            if (*((_BYTE *)v143 + 8))
              v160 = 0;
            v276 = v160;
            if (*((_BYTE *)v143 + 8))
              v161 = 0;
            else
              v161 = v159;
            v273 = v161;
          }
          v5 = v268;
          objc_msgSend(objc_msgSend(-[_anonymous_namespace_ attributes](v268, sel_attributes), sel_objectAtIndexedSubscript_, v143[1]), sel_setFormat_, v157);
          objc_msgSend(objc_msgSend(-[_anonymous_namespace_ attributes](v268, sel_attributes), sel_objectAtIndexedSubscript_, v143[1]), sel_setOffset_, *(unsigned int *)&v147[16 * (_QWORD)v3 + 8]);
          objc_msgSend(objc_msgSend(-[_anonymous_namespace_ attributes](v268, sel_attributes), sel_objectAtIndexedSubscript_, v143[1]), sel_setBufferIndex_, *v143);
          objc_msgSend(objc_msgSend(-[_anonymous_namespace_ layouts](v268, sel_layouts), sel_objectAtIndexedSubscript_, *v143), sel_setStride_, v271);
          objc_msgSend(objc_msgSend(-[_anonymous_namespace_ layouts](v268, sel_layouts), sel_objectAtIndexedSubscript_, *v143), sel_setStepFunction_, v273);
          v162 = -[_anonymous_namespace_ layouts](v268, sel_layouts);
          v163 = *v143;
          v143 += 5;
          v141 = (_anonymous_namespace_ *)objc_msgSend(objc_msgSend(v162, sel_objectAtIndexedSubscript_, v163), sel_setStepRate_, v276);
          v11 = (char **)&v337[9];
          if (v143 == *(unsigned __int16 **)v264)
            goto LABEL_189;
        }
LABEL_320:
        v334[0] = 0;
        memset(v295, 0, sizeof(v295));
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v337 = 136315906;
        *(_QWORD *)&v337[4] = "operator[]";
        *(_WORD *)&v337[12] = 1024;
        *(_DWORD *)&v337[14] = 476;
        *(_WORD *)&v337[18] = 2048;
        *(_QWORD *)&v337[20] = v3;
        *(_WORD *)&v337[28] = 2048;
        *(_QWORD *)&v337[30] = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_321:
        v334[0] = 0;
        memset(v295, 0, sizeof(v295));
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v337 = 136315906;
        *(_QWORD *)&v337[4] = "operator[]";
        *(_WORD *)&v337[12] = 1024;
        *(_DWORD *)&v337[14] = 797;
        *(_WORD *)&v337[18] = 2048;
        *(_QWORD *)&v337[20] = v5;
        *(_WORD *)&v337[28] = 2048;
        *(_QWORD *)&v337[30] = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_322:
        v334[0] = 0;
        memset(v295, 0, sizeof(v295));
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v337 = 136315906;
        *(_QWORD *)&v337[4] = "operator[]";
        *(_WORD *)&v337[12] = 1024;
        *(_DWORD *)&v337[14] = 797;
        *(_WORD *)&v337[18] = 2048;
        *(_QWORD *)&v337[20] = v5;
        *(_WORD *)&v337[28] = 2048;
        *(_QWORD *)&v337[30] = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_323:
        v334[0] = 0;
        memset(v295, 0, sizeof(v295));
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v337 = 136315906;
        *(_QWORD *)&v337[4] = "operator[]";
        *(_WORD *)&v337[12] = 1024;
        *(_DWORD *)&v337[14] = 797;
        *(_WORD *)&v337[18] = 2048;
        *(_QWORD *)&v337[20] = v5;
        *(_WORD *)&v337[28] = 2048;
        *(_QWORD *)&v337[30] = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_324:
        v334[0] = 0;
        memset(v295, 0, sizeof(v295));
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v337 = 136315906;
        *(_QWORD *)&v337[4] = "operator[]";
        *(_WORD *)&v337[12] = 1024;
        *(_DWORD *)&v337[14] = 797;
        *(_WORD *)&v337[18] = 2048;
        *(_QWORD *)&v337[20] = v5;
        *(_WORD *)&v337[28] = 2048;
        *(_QWORD *)&v337[30] = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_325:
        v334[0] = 0;
        memset(v295, 0, sizeof(v295));
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v337 = 136315906;
        *(_QWORD *)&v337[4] = "operator[]";
        *(_WORD *)&v337[12] = 1024;
        *(_DWORD *)&v337[14] = 797;
        *(_WORD *)&v337[18] = 2048;
        *(_QWORD *)&v337[20] = v5;
        *(_WORD *)&v337[28] = 2048;
        *(_QWORD *)&v337[30] = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_326:
        v334[0] = 0;
        memset(v295, 0, sizeof(v295));
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v337 = 136315906;
        *(_QWORD *)&v337[4] = "operator[]";
        *(_WORD *)&v337[12] = 1024;
        *(_DWORD *)&v337[14] = 797;
        *(_WORD *)&v337[18] = 2048;
        *(_QWORD *)&v337[20] = v5;
        *(_WORD *)&v337[28] = 2048;
        *(_QWORD *)&v337[30] = v15;
        v249[0] = 38;
        v248 = v337;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_327:
        dispatch_once(&qword_254118EF8, &__block_literal_global_32);
        goto LABEL_236;
      }
LABEL_189:
      v140 = v258;
      v3 = (char **)v278;
      v100 = v256;
      if (v258[23])
      {
        v240 = -[_anonymous_namespace_ layouts](v268, sel_layouts);
        v241 = *((_QWORD *)v278 + 10);
        if (v241)
        {
          v242 = v240;
          v243 = (unsigned __int16 *)*((_QWORD *)v278 + 9);
          v244 = 10 * v241;
          do
          {
            v245 = objc_msgSend(v242, sel_objectAtIndexedSubscript_, *v243);
            if (objc_msgSend(v245, sel_stepFunction) == (id)1)
            {
              objc_msgSend(v245, sel_setStepFunction_, 0);
              objc_msgSend(v245, sel_setStepRate_, 0);
            }
            v243 += 5;
            v244 -= 10;
          }
          while (v244);
        }
      }
      objc_msgSend(v281, sel_setVertexDescriptor_, v268);
      v139 = v261;
      if (v268)

    }
    if (v140[23])
    {
      objc_msgSend(v281, sel_setTessellationFactorScaleEnabled_, 0);
      objc_msgSend(v281, sel_setTessellationFactorFormat_, 0);
      objc_msgSend(v281, sel_setTessellationFactorStepFunction_, 1);
      objc_msgSend(v281, sel_setTessellationControlPointIndexType_, 0);
      objc_msgSend(v281, sel_setTessellationOutputWindingOrder_, 1);
      objc_msgSend(v281, sel_setTessellationPartitionMode_, 0);
      objc_msgSend(v281, sel_setMaxTessellationFactor_, 16);
    }
    v5 = 0;
    v164 = v100 + 1;
    v165 = -256;
    a3 = &selRef_setRate_;
    v11 = &selRef_newBufferWithBytes_length_options_;
    v12 = &selRef_newBufferWithBytes_length_options_;
    do
    {
      if (!v164[(_QWORD)v5])
        goto LABEL_224;
      objc_msgSend(objc_msgSend(objc_msgSend(v281, sel_colorAttachments), sel_objectAtIndexedSubscript_, v5), v11[133], (int)v164[(_QWORD)v5]);
      v166 = *(_QWORD *)(v257 + 144);
      if (v166)
      {
        if (v166 <= (unint64_t)v5)
        {
          objc_msgSend(objc_msgSend(objc_msgSend(v281, sel_colorAttachments), sel_objectAtIndexedSubscript_, v5), sel_setBlendingEnabled_, 0);
          objc_msgSend(objc_msgSend(objc_msgSend(v281, sel_colorAttachments), sel_objectAtIndexedSubscript_, v5), sel_setWriteMask_, 15);
          goto LABEL_224;
        }
        v167 = *(_QWORD *)(v257 + 160) + v165;
        if (*(_BYTE *)(v167 + 257) && (v168 = v3[1], v168[307]) && *v168)
        {
          objc_msgSend(objc_msgSend(objc_msgSend(v281, sel_colorAttachments), sel_objectAtIndexedSubscript_, v5), sel_setBlendingEnabled_, 0);
        }
        else if (*(_BYTE *)(v167 + 256))
        {
          v11 = v3;
          objc_msgSend(objc_msgSend(objc_msgSend(v281, sel_colorAttachments), sel_objectAtIndexedSubscript_, v5), sel_setBlendingEnabled_, 1);
          v172 = objc_msgSend(objc_msgSend(v281, sel_colorAttachments), sel_objectAtIndexedSubscript_, v5);
          v3 = &selRef_newBufferWithBytes_length_options_;
          v15 = *(unsigned __int16 **)(v257 + 144);
          if (v15 <= v5)
            goto LABEL_321;
          objc_msgSend(v172, sel_setSourceRGBBlendFactor_, *(int *)(*(_QWORD *)(v257 + 160) + v165 + 260));
          v173 = objc_msgSend(objc_msgSend(v281, sel_colorAttachments), (SEL)&selRef_setArgumentBuffer_offset_, v5);
          v15 = *(unsigned __int16 **)(v257 + 144);
          if (v15 <= v5)
            goto LABEL_322;
          objc_msgSend(v173, sel_setDestinationRGBBlendFactor_, *(int *)(*(_QWORD *)(v257 + 160) + v165 + 264));
          v174 = objc_msgSend(objc_msgSend(v281, sel_colorAttachments), (SEL)&selRef_setArgumentBuffer_offset_, v5);
          v15 = *(unsigned __int16 **)(v257 + 144);
          if (v15 <= v5)
            goto LABEL_323;
          objc_msgSend(v174, sel_setRgbBlendOperation_, *(int *)(*(_QWORD *)(v257 + 160) + v165 + 268));
          v175 = objc_msgSend(objc_msgSend(v281, sel_colorAttachments), (SEL)&selRef_setArgumentBuffer_offset_, v5);
          v15 = *(unsigned __int16 **)(v257 + 144);
          if (v15 <= v5)
            goto LABEL_324;
          objc_msgSend(v175, sel_setSourceAlphaBlendFactor_, *(int *)(*(_QWORD *)(v257 + 160) + v165 + 272));
          v176 = objc_msgSend(objc_msgSend(v281, sel_colorAttachments), (SEL)&selRef_setArgumentBuffer_offset_, v5);
          v15 = *(unsigned __int16 **)(v257 + 144);
          if (v15 <= v5)
            goto LABEL_325;
          objc_msgSend(v176, sel_setDestinationAlphaBlendFactor_, *(int *)(*(_QWORD *)(v257 + 160) + v165 + 276));
          v177 = objc_msgSend(objc_msgSend(v281, sel_colorAttachments), (SEL)&selRef_setArgumentBuffer_offset_, v5);
          v15 = *(unsigned __int16 **)(v257 + 144);
          if (v15 <= v5)
            goto LABEL_326;
          objc_msgSend(v177, sel_setAlphaBlendOperation_, *(int *)(*(_QWORD *)(v257 + 160) + v165 + 280));
          v3 = v11;
          v11 = &selRef_newBufferWithBytes_length_options_;
          v139 = v261;
        }
        v170 = objc_msgSend(objc_msgSend(v281, sel_colorAttachments), sel_objectAtIndexedSubscript_, v5);
        if ((v139 & 2) == 0)
        {
          if (*(_QWORD *)(v257 + 144) <= (unint64_t)v5)
            v171 = 15;
          else
            v171 = *(_DWORD *)(*(_QWORD *)(v257 + 160) + v165 + 284);
          goto LABEL_223;
        }
LABEL_222:
        v171 = 0;
        goto LABEL_223;
      }
      if (*(_BYTE *)(v257 + 73) && (v169 = v3[1], v169[307]) && *v169)
      {
        objc_msgSend(objc_msgSend(objc_msgSend(v281, sel_colorAttachments), sel_objectAtIndexedSubscript_, v5), sel_setBlendingEnabled_, 0);
      }
      else if (*(_BYTE *)(v257 + 72))
      {
        objc_msgSend(objc_msgSend(objc_msgSend(v281, sel_colorAttachments), sel_objectAtIndexedSubscript_, v5), sel_setBlendingEnabled_, 1);
        objc_msgSend(objc_msgSend(objc_msgSend(v281, sel_colorAttachments), sel_objectAtIndexedSubscript_, v5), sel_setSourceRGBBlendFactor_, *(int *)(v257 + 84));
        objc_msgSend(objc_msgSend(objc_msgSend(v281, sel_colorAttachments), sel_objectAtIndexedSubscript_, v5), sel_setDestinationRGBBlendFactor_, *(int *)(v257 + 88));
        objc_msgSend(objc_msgSend(objc_msgSend(v281, sel_colorAttachments), sel_objectAtIndexedSubscript_, v5), sel_setRgbBlendOperation_, *(int *)(v257 + 92));
        objc_msgSend(objc_msgSend(objc_msgSend(v281, sel_colorAttachments), sel_objectAtIndexedSubscript_, v5), sel_setSourceAlphaBlendFactor_, *(int *)(v257 + 96));
        objc_msgSend(objc_msgSend(objc_msgSend(v281, sel_colorAttachments), sel_objectAtIndexedSubscript_, v5), sel_setDestinationAlphaBlendFactor_, *(int *)(v257 + 100));
        objc_msgSend(objc_msgSend(objc_msgSend(v281, sel_colorAttachments), sel_objectAtIndexedSubscript_, v5), sel_setAlphaBlendOperation_, *(int *)(v257 + 104));
      }
      v170 = objc_msgSend(objc_msgSend(v281, sel_colorAttachments), sel_objectAtIndexedSubscript_, v5);
      if ((v139 & 2) != 0)
        goto LABEL_222;
      v171 = *(_DWORD *)(v257 + 108);
LABEL_223:
      objc_msgSend(v170, sel_setWriteMask_, v171);
LABEL_224:
      v5 = (char *)v5 + 1;
      v165 += 32;
    }
    while (v165);
    v178 = v256[9];
    if (v178 - 250 <= 0xA && ((1 << (v178 + 6)) & 0x425) != 0)
      objc_msgSend(v281, sel_setDepthAttachmentPixelFormat_);
    v15 = (unsigned __int16 *)v254;
    v12 = v258;
    if (v256[10] - 253 <= 9 && ((1 << (*((_BYTE *)v256 + 40) + 3)) & 0x385) != 0)
      objc_msgSend(v281, sel_setStencilAttachmentPixelFormat_);
    if (qword_254118EF8 != -1)
      goto LABEL_327;
LABEL_236:
    if (byte_254118EEC == 1)
    {
      v180 = v3[4];
      if (*((_QWORD *)v180 + 8))
      {
        if (*((_QWORD *)v180 + 5))
        {
          v181 = *re::graphicsLogObjects((re *)objc_msgSend(v281, sel_setShaderValidation_, 1));
          if (os_log_type_enabled(v181, OS_LOG_TYPE_DEFAULT))
          {
            v182 = v3[4];
            if (*((_QWORD *)v182 + 8))
            {
              if (*((_QWORD *)v182 + 5))
              {
                v183 = *(_QWORD *)(*((_QWORD *)v182 + 9) + 32);
                v184 = *(_QWORD *)(*((_QWORD *)v182 + 6) + 32);
                *(_DWORD *)buf = 136315394;
                *(_QWORD *)&buf[4] = v183;
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = v184;
                _os_log_impl(&dword_224FE9000, v181, OS_LOG_TYPE_DEFAULT, "Shader Validation Enabled for custom shader using SurfaceShader = %s and GeometryModifier = %s", buf, 0x16u);
                break;
              }
            }
            else
            {
              v334[0] = 0;
              memset(v295, 0, sizeof(v295));
              memset(buf, 0, sizeof(buf));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v337 = 136315906;
              *(_QWORD *)&v337[4] = "operator[]";
              *(_WORD *)&v337[12] = 1024;
              *(_DWORD *)&v337[14] = 476;
              *(_WORD *)&v337[18] = 2048;
              *(_QWORD *)&v337[20] = 0;
              *(_WORD *)&v337[28] = 2048;
              *(_QWORD *)&v337[30] = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            v334[0] = 0;
            memset(v295, 0, sizeof(v295));
            memset(buf, 0, sizeof(buf));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v337 = 136315906;
            *(_QWORD *)&v337[4] = "operator[]";
            *(_WORD *)&v337[12] = 1024;
            *(_DWORD *)&v337[14] = 476;
            *(_WORD *)&v337[18] = 2048;
            *(_QWORD *)&v337[20] = 0;
            *(_WORD *)&v337[28] = 2048;
            *(_QWORD *)&v337[30] = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_336:
            v10 = __cxa_guard_acquire(&qword_254118EF0);
            if ((_DWORD)v10)
            {
              re::Defaults::BOOLValue((re::Defaults *)"enableShaderDebugLogs", v246, (char *)buf);
              if (buf[0])
                v247 = buf[1];
              else
                v247 = 0;
              _MergedGlobals_375 = v247;
              __cxa_guard_release(&qword_254118EF0);
            }
            continue;
          }
        }
      }
    }
    break;
  }
  v279 = (uint64_t *)v3[1];
  if (v12)
    v185 = v12 + 1;
  v186 = v281;
  v280 = v15;
  v187 = (uint64_t *)*v252;
  if (*v252)
    v188 = v187 + 1;
  v189 = v3[5];
  v190 = *((unsigned __int8 *)v3 + 56);
  v277 = v3[12];
  v191 = (char *)objc_loadWeakRetained((id *)v189 + 342);
  v192 = v191;
  if (v191)
    v193 = v191 - 8;
  else
    v193 = 0;
  v194 = dispatch_group_create();

  dispatch_group_enter(v194);
  v196 = re::globalAllocators(v195);
  v197 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v196[2] + 32))(v196[2], 24, 8);
  *((_QWORD *)v197 + 1) = 0;
  *((_QWORD *)v197 + 2) = 0;
  *(_QWORD *)v197 = 0;
  v198 = re::globalAllocators(v197);
  v199 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v198[2] + 32))(v198[2], 24, 8);
  v199[1] = 0;
  v199[2] = 0;
  *v199 = 0;
  v269 = v199;
  v272 = v279[7];
  v200 = v194;
  v293 = v200;
  v274 = v186;
  v201 = (re *)v186;
  v202 = v201;
  if (v187)
    v201 = v187 + 1;
  if (v12)
    v201 = v12 + 1;
  if (v192)
    v201 = v192;
  v203 = re::globalAllocators(v201)[2];
  *(_QWORD *)&buf[24] = v203;
  *(_QWORD *)&v295[0] = 0;
  v266 = v192;
  if (v203)
    v204 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v203 + 32))(v203, 88, 0);
  else
    v204 = 0;
  *(_QWORD *)v204 = &off_24ED74838;
  *(_QWORD *)(v204 + 8) = v197;
  *(_QWORD *)(v204 + 16) = v269;
  *(_QWORD *)(v204 + 24) = v202;
  *(_QWORD *)(v204 + 32) = v187;
  *(_QWORD *)(v204 + 40) = v189;
  *(_QWORD *)(v204 + 48) = v12;
  *(_BYTE *)(v204 + 56) = v190;
  *(_QWORD *)(v204 + 64) = v277;
  *(_QWORD *)(v204 + 72) = v279;
  *(_QWORD *)(v204 + 80) = v193;
  *(_QWORD *)&v295[0] = v204;
  re::ShaderManager::scheduleGroupNotifyOnCompilationQueue(v272, v190 != 0, v277, (id *)&v293, (uint64_t)buf);
  if (*(_QWORD *)&v295[0])
  {
    (***(void (****)(_QWORD))&v295[0])(*(_QWORD *)&v295[0]);
    if (*(uint8_t **)&v295[0] != buf)
      (*(void (**)(_QWORD))(**(_QWORD **)&buf[24] + 40))(*(_QWORD *)&buf[24]);
    *(_QWORD *)&v295[0] = 0;
  }
  if (v202)

  dispatch_group_enter(v200);
  v205 = v279[7] + 264;
  *(_QWORD *)v337 = *((_QWORD *)v12[2] + 2);
  v206 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v205, (uint64_t *)v337);
  if (v206)
    v207 = (id *)(v206 + 8);
  else
    v207 = 0;
  v187[18] = objc_msgSend(*v207, "hash", v248, *(_QWORD *)v249);
  v208 = v12[2];
  v209 = *((_QWORD *)v208 + 2);
  v187[20] = v209;
  re::ShaderManager::makeFunctionDescriptor(v279[7], *((_QWORD *)v208 + 1), &v280, v207, v209, &v292);
  v210 = v292;
  v211 = v274;
  v212 = v12 + 1;
  v213 = v212;
  v214 = v200;
  v215 = (re *)*v207;
  v216 = re::globalAllocators(v215)[2];
  *(_QWORD *)&v337[24] = v216;
  *(_QWORD *)&v337[32] = 0;
  if (v216)
    v217 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v216 + 32))(v216, 64, 0);
  else
    v217 = 0;
  *(_QWORD *)v217 = &off_24ED748E0;
  *(_QWORD *)(v217 + 8) = v210;
  *(_QWORD *)(v217 + 16) = v211;
  *(_QWORD *)(v217 + 24) = v258;
  *(_BYTE *)(v217 + 32) = v190;
  *(_QWORD *)(v217 + 40) = v214;
  *(_QWORD *)(v217 + 48) = v277;
  *(_QWORD *)(v217 + 56) = v215;
  *(_QWORD *)&v337[32] = v217;
  re::ShaderManager::scheduleAsyncFuncOnCompilationQueue(v272, v190 != 0, (uint64_t)v277, (uint64_t)v337);
  v218 = *(_anonymous_namespace_ **)&v337[32];
  v219 = v254;
  if (*(_QWORD *)&v337[32])
  {
    v218 = (_anonymous_namespace_ *)(***(uint64_t (****)(_QWORD))&v337[32])(*(_QWORD *)&v337[32]);
    if (*(_BYTE **)&v337[32] != v337)
      v218 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)&v337[24] + 40))(*(_QWORD *)&v337[24]);
    *(_QWORD *)&v337[32] = 0;
  }
  if (v211)

  if (v210)
  v187[22] = 0;
  v220 = (unint64_t)v258[5];
  if (v220)
  {
    v334[0] = 0;
    v291 = v258;
    v221 = v212;
    v222 = v214;
    v290 = v222;
    re::makeMetalPrivateLinkedFunctionsAsync(v279, &v291, 1, &v280, &v290, v190 != 0, (uint64_t)v277, v197, v334, (uint64_t)(v187 + 24));

    v187[22] = v334[0];
  }
  if (v258[3])
  {
    dispatch_group_enter(v214);
    v223 = v279[7] + 264;
    v334[0] = *((_QWORD *)v258[3] + 2);
    v224 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v223, v334);
    if (v224)
      v225 = (id *)(v224 + 8);
    else
      v225 = 0;
    v187[19] = objc_msgSend(*v225, "hash");
    v226 = v258[3];
    v227 = *((_QWORD *)v226 + 2);
    v187[21] = v227;
    re::ShaderManager::makeFunctionDescriptor(v279[7], *((_QWORD *)v226 + 1), &v280, v225, v227, &v289);
    v228 = v289;
    v229 = v274;
    v230 = v212;
    v231 = v214;
    v232 = (re *)*v225;
    v233 = re::globalAllocators(v232)[2];
    v335 = v233;
    if (v233)
      v234 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v233 + 32))(v233, 64, 0);
    else
      v234 = 0;
    *(_QWORD *)v234 = &off_24ED74938;
    *(_QWORD *)(v234 + 8) = v228;
    *(_QWORD *)(v234 + 16) = v229;
    *(_QWORD *)(v234 + 24) = v258;
    *(_BYTE *)(v234 + 32) = v190;
    *(_QWORD *)(v234 + 40) = v231;
    *(_QWORD *)(v234 + 48) = v277;
    *(_QWORD *)(v234 + 56) = v232;
    v336 = (uint64_t *)v234;
    re::ShaderManager::scheduleAsyncFuncOnCompilationQueue(v272, v190 != 0, (uint64_t)v277, (uint64_t)v334);
    v235 = (_anonymous_namespace_ *)v336;
    v219 = v254;
    if (v336)
    {
      v235 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t *))*v336)(v336);
      if (v336 != v334)
        v235 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v335 + 40))(v335);
      v336 = 0;
    }
    if (v229)

    if (v228)
    v236 = (unint64_t)v258[8];
    if (v236)
    {
      v287 = v258;
      v288 = 0;
      v237 = v212;
      v238 = v231;
      v286 = v238;
      re::makeMetalPrivateLinkedFunctionsAsync(v279, &v287, 2, &v280, &v286, v190 != 0, (uint64_t)v277, v269, &v288, (uint64_t)(v187 + 27));

      v187[23] = v288;
    }
    if (v289)

  }
  else
  {
    v187[19] = 0;
    v187[23] = 0;
  }
  dispatch_group_leave(v214);
  if (v292)

  if (v266)
  if (v280)
  {

    v280 = 0;
  }
  if (v274)

  if (v219)
  if (v281)

  if (v251)
  result = (uint64_t)v282;
  if (v282)
  {
    if ((v283 & 1) != 0)
      return (*(uint64_t (**)(void))(*v282 + 40))();
  }
  return result;
}

uint64_t ___ZN2re31compileCachedPipelineStateAsyncERNS_25PipelineStateCacheContextEh_block_invoke(uint64_t a1, const char *a2)
{
  _anonymous_namespace_ *v2;
  const re::DynamicString *v3;
  uint64_t v4;
  const char *v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  _BYTE v9[8];
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  _BYTE v14[23];

  re::Defaults::stringValue((re::Defaults *)"shaderValidationMaterialFilter", a2, (uint64_t)v9);
  if (v9[0])
    v3 = (const re::DynamicString *)&v10;
  else
    v3 = (const re::DynamicString *)&v7;
  re::DynamicString::DynamicString((re::DynamicString *)&v12, v3);
  if (v7 && (v8 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v7 + 40))();
  if (v9[0] && v10 && (v11 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v10 + 40))();
  byte_254118EEC = 0;
  v4 = v13 & 1;
  if ((v13 & 1) != 0)
    v5 = *(const char **)&v14[7];
  else
    v5 = v14;
  byte_254118EEC = strcmp(v5, "custom") == 0;
  result = v12;
  if (v12)
  {
    if (v4)
      return (*(uint64_t (**)(void))(*(_QWORD *)v12 + 40))();
  }
  return result;
}

void re::makePipelineStateCacheKey(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t VertexFormatFromDataType;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  _OWORD v40[5];
  uint64_t v41;

  v3 = a2;
  v41 = *MEMORY[0x24BDAC8D0];
  v6 = 0x9E3779B97F4A7C17;
  v7 = *(_QWORD *)(a1 + 80);
  v8 = 0x9E3779B97F4A7C17;
  if (v7)
  {
    v9 = 0;
    v10 = *(unsigned __int16 **)(a1 + 72);
    v11 = &v10[5 * v7];
    while (1)
    {
      v12 = *(_QWORD *)(a1 + 64);
      do
      {
        v13 = v12;
        v12 = *(_QWORD *)(v12 + 8);
        v14 = *(_QWORD *)(v13 + 32);
        if (v12)
          v15 = v14 == 0;
        else
          v15 = 0;
      }
      while (v15);
      v16 = v10[2];
      if (v14 <= v16)
      {
        memset(v40, 0, sizeof(v40));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v17 = *(_QWORD *)(v13 + 40);
      if (v10[3])
      {
        VertexFormatFromDataType = re::getVertexFormatFromDataType((re *)v10[3]);
        v19 = 1;
        v20 = -1;
        v21 = 1;
      }
      else
      {
        if (!*((_BYTE *)v10 + 8))
        {
          v20 = 0;
          VertexFormatFromDataType = 0;
          v19 = 0;
          v22 = 0;
          v21 = 1;
          goto LABEL_14;
        }
        v20 = 0;
        v19 = 0;
        v21 = 0;
        VertexFormatFromDataType = *(unsigned __int8 *)(v17 + 16 * v16 + 12);
      }
      v22 = 1;
LABEL_14:
      v23 = v10[1];
      v24 = *v10;
      v10 += 5;
      v25 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((v24 | (v23 << 16)) ^ (v23 >> 14))) ^ ((0xBF58476D1CE4E5B9
                                                                            * ((v24 | (v23 << 16)) ^ (v23 >> 14))) >> 27));
      v9 ^= (v9 << 6)
          - 0x61C8864680B583E9
          + (v9 >> 2)
          + ((re::VertexBufferFormat::hash((unsigned __int16 *)(v17 + 16 * v16), v22, v20, VertexFormatFromDataType, v19, v21)- 0x61C8864680B583E9+ ((v25 ^ (v25 >> 31)) << 6)+ ((v25 ^ (v25 >> 31)) >> 2)) ^ v25 ^ (v25 >> 31));
      if (v10 == v11)
      {
        v8 = v9 - 0x61C8864680B583E9;
        v3 = a2;
        v6 = 0x9E3779B97F4A7C17;
        break;
      }
    }
  }
  v26 = *(_QWORD **)(a1 + 32);
  if (v26)
    v27 = v26 + 1;
  v28 = *(_QWORD *)(a1 + 8);
  v29 = *(_QWORD *)(v28 + 56) + 264;
  *(_QWORD *)&v40[0] = *(_QWORD *)(v26[2] + 16);
  v30 = objc_msgSend(*(id *)(re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v29, (uint64_t *)v40)+ 8), "hash");
  v31 = v26[3];
  if (v31)
  {
    v32 = *(_QWORD *)(v28 + 56) + 264;
    *(_QWORD *)&v40[0] = *(_QWORD *)(v31 + 16);
    v6 = objc_msgSend(*(id *)(re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v32, (uint64_t *)v40)+ 8), "hash")- 0x61C8864680B583E9;
  }
  v33 = *(_QWORD *)(a1 + 24);
  v34 = *(_OWORD *)(v33 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v33;
  *(_OWORD *)(a3 + 16) = v34;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v33 + 32);
  *(_DWORD *)(a3 + 48) = *(_DWORD *)(v33 + 48);
  v35 = re::TechniqueState::hashForPSO((re::TechniqueState *)(*(_QWORD *)(a1 + 40) + 72), v3);
  v36 = ((v35 << 6) - 0x61C8864680B583E9 + (v35 >> 2) + ((v8 + (v26[19] << 6) + (v26[19] >> 2)) ^ v26[19])) ^ v35;
  *(_QWORD *)(a3 + 56) = ((((v30 >> 2) + (v30 << 6) + v6) ^ v30) - 0x61C8864680B583E9 + (v36 << 6) + (v36 >> 2)) ^ v36;
  v37 = *(unsigned __int8 *)(a1 + 88);
  if (v37 >= 5)
    v38 = 1;
  else
    v38 = 0x303020201uLL >> (8 * v37);
  *(_BYTE *)(a3 + 64) = v38;

}

uint64_t re::VertexBufferFormat::hash(unsigned __int16 *a1, char a2, unint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if ((a2 & 1) == 0)
  {
    a3 = *a1;
    a4 = *((unsigned __int8 *)a1 + 12);
    a5 = a1[1];
    a6 = *((unsigned __int8 *)a1 + 5);
  }
  v6 = ((unint64_t)a5 << 16) | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | (a6 << 40) | (a4 << 48) | ((unint64_t)*((unsigned int *)a1 + 2) << 56);
  v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
  v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) >> 27));
  return (((v8 ^ (v8 >> 31)) << 6) + ((v8 ^ (v8 >> 31)) >> 2) - 0x61C8864680B583E9 + (v7 ^ (v7 >> 31))) ^ v8 ^ (v8 >> 31);
}

unint64_t re::TechniqueState::hashForPSO(re::TechniqueState *this, char a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64x2_t v12;
  uint64x2_t v13;
  int8x16_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v18;
  unint64_t v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  if ((a2 & 2) != 0)
    v2 = 0;
  else
    v2 = (unint64_t)*((unsigned int *)this + 9) << 51;
  v3 = *(unsigned __int8 *)this;
  v4 = *((unsigned __int8 *)this + 3);
  v5 = *((unsigned __int8 *)this + 4);
  v6 = *((unsigned int *)this + 7);
  v7 = *((unsigned int *)this + 8);
  v8 = *(_OWORD *)((char *)this + 12);
  v9 = 0x9E3779B97F4A7C17;
  v10 = *((unsigned __int8 *)this + 1);
  v11 = *((_QWORD *)this + 9);
  if (v11 && 32 * v11)
  {
    v18 = *(_OWORD *)((char *)this + 12);
    MurmurHash3_x64_128(*((_QWORD *)this + 11), 32 * v11, 0, v19);
    v8 = v18;
    v9 = ((v19[1] - 0x61C8864680B583E9 + (v19[0] << 6) + (v19[0] >> 2)) ^ v19[0]) - 0x61C8864680B583E9;
  }
  v12.i64[0] = (int)v8;
  v12.i64[1] = SDWORD1(v8);
  v13 = v12;
  v12.i64[0] = SDWORD2(v8);
  v12.i64[1] = SHIDWORD(v8);
  v14 = vorrq_s8((int8x16_t)vshlq_u64(v13, (uint64x2_t)xmmword_226134530), (int8x16_t)vshlq_u64(v12, (uint64x2_t)xmmword_2260E8080));
  v15 = *(_QWORD *)&vorr_s8(*(int8x8_t *)v14.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)) | (v6 << 35) | (v7 << 43) | (v10 << 52) | v2 | v3 | (2 * v4) | (4 * v5);
  v16 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v15 ^ (v15 >> 30))) >> 27));
  return (((v16 ^ (v16 >> 31)) >> 2) + ((v16 ^ (v16 >> 31)) << 6) + v9) ^ v16 ^ (v16 >> 31);
}

id re::getOrCreatePipelineState@<X0>(re *a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  char *v9;
  char v10;
  __int128 v11;
  __int128 v12;
  char *v13;
  _OWORD v14[4];
  char v15;

  re::makePipelineStateCacheKey((uint64_t)a1, a2, (uint64_t)v14);
  v6 = (uint64_t *)re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::tryGet(*((_QWORD *)a1 + 2) + 48, v14);
  if (v6)
  {
    v7 = *v6;
    *a3 = *v6;
    if (v7)
      return (id)(v7 + 8);
  }
  *((_QWORD *)a1 + 13) = re::Hash<re::PipelineStateCacheKey>::operator()((int)&v13, v14);
  re::compileCachedPipelineStateAsync(a1, a2, &v13);
  v9 = v13;
  *a3 = (uint64_t)v13;
  v10 = v15;
  v11 = v14[3];
  *(_OWORD *)(v9 + 56) = v14[2];
  v12 = v14[0];
  *(_OWORD *)(v9 + 40) = v14[1];
  *(_OWORD *)(v9 + 72) = v11;
  v9[88] = v10;
  *(_OWORD *)(v9 + 24) = v12;
  return (id)re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::addNew<re::SharedPtr<re::CachedPipelineState>&>(*(_QWORD *)a1, v14, a3);
}

uint64_t re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::addNew<re::SharedPtr<re::CachedPipelineState>&>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  char v15;
  char v16;

  v6 = re::Hash<re::PipelineStateCacheKey>::operator()((int)&v15, a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::addEmplace<re::SharedPtr<re::CachedPipelineState>&>(a1, v8, v7, (uint64_t)a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 16) + 96 * v12;
    return v13 + 88;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = re::EqualTo<re::PipelineStateCacheKey>::operator()((int)&v16, (void *)(v10 + 96 * v9 + 16), a2);
    v10 = *(_QWORD *)(a1 + 16);
    if (v11)
      break;
    v9 = *(_DWORD *)(v10 + 96 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v13 = v10 + 96 * v9;
  return v13 + 88;
}

void re::CachedPipelineState::getOrCreateVertexFetchPipeline(id *this@<X0>, id *a2@<X1>, uint64_t *a3@<X8>)
{
  char *v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t *v10;
  void **v11;
  _QWORD *v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  id v17;
  id v18;
  id v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned int v25;
  unsigned int v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t *v45;
  id v46;
  id v47;
  id v48;
  id v49;
  char v50;
  _BYTE v51[24];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v6 = (char *)(a2 + 3);
  v7 = re::Hash<re::CachedStandardVertexFetchFunctionKey>::operator()((uint64_t)v51, (uint64_t)(a2 + 3));
  if (!this[12] || (v8 = *((unsigned int *)this[13] + v7 % *((unsigned int *)this + 30)), (_DWORD)v8 == 0x7FFFFFFF))
  {
LABEL_6:
    v10 = re::globalAllocators((re *)v7);
    v11 = (void **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10[2] + 32))(v10[2], 32, 8);
    *(_OWORD *)v11 = 0u;
    *((_OWORD *)v11 + 1) = 0u;
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v11, 0);
    *v12 = &off_24ED74A00;
    v12[3] = 0;
    v11[2] = 0;
    v45 = a3;
    *a3 = (uint64_t)v12;
    v49 = a2[2];
    v13 = objc_msgSend(objc_msgSend(MEMORY[0x24BDBCE30], sel_alloc), sel_initWithObjects_count_, &v49, 1);
    v14 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD6C8], sel_alloc), sel_init);
    objc_msgSend(v14, sel_setVertexAdditionalBinaryFunctions_, v13);
    v48 = 0;
    v46 = v14;
    v15 = objc_msgSend(this[2], sel_newRenderPipelineStateWithAdditionalBinaryFunctions_error_, v14, &v48);
    v47 = v15;
    if (v48)
    {
      v16 = *re::graphicsLogObjects((re *)v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v44 = objc_msgSend(objc_msgSend(v48, sel_localizedDescription), sel_cStringUsingEncoding_, 4);
        *(_DWORD *)v51 = 136315138;
        *(_QWORD *)&v51[4] = v44;
        _os_log_error_impl(&dword_224FE9000, v16, OS_LOG_TYPE_ERROR, "Failed to create manual vertex fetch pipeline. %s", v51, 0xCu);
      }
    }
    NS::SharedPtr<MTL::Texture>::operator=(v11 + 2, &v47);
    v17 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD778], sel_alloc), sel_init);
    objc_msgSend(v17, sel_setFunctionCount_, 1);
    v18 = objc_msgSend(v47, sel_newVisibleFunctionTableWithDescriptor_stage_, v17, 1);
    *(_QWORD *)v51 = v18;
    v19 = objc_msgSend(v47, sel_functionHandleWithFunction_stage_, a2[2], 1);
    objc_msgSend(v18, sel_setFunction_atIndex_, v19, 0);
    NS::SharedPtr<MTL::Texture>::operator=(v11 + 3, (void **)v51);
    v20 = re::Hash<re::CachedStandardVertexFetchFunctionKey>::operator()((uint64_t)&v50, (uint64_t)v6);
    v21 = v20;
    if (this[12])
    {
      v22 = v20 % *((unsigned int *)this + 30);
      v23 = *((unsigned int *)this[13] + v22);
      if ((_DWORD)v23 != 0x7FFFFFFF)
      {
        v24 = this[14];
        while (!re::EqualTo<re::CachedStandardVertexFetchFunctionKey>::operator()((uint64_t)&v50, (uint64_t)&v24[50 * v23 + 3], (uint64_t)v6))
        {
          v24 = this[14];
          v23 = v24[50 * v23 + 2] & 0x7FFFFFFF;
          if (v23 == 0x7FFFFFFF)
            goto LABEL_16;
        }
        goto LABEL_24;
      }
    }
    else
    {
      LODWORD(v22) = 0;
    }
LABEL_16:
    v25 = *((_DWORD *)this + 33);
    if (v25 == 0x7FFFFFFF)
    {
      v25 = *((_DWORD *)this + 32);
      v26 = v25;
      if (v25 == *((_DWORD *)this + 30))
      {
        re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchPipeline>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::setCapacity((uint64_t)(this + 12), 2 * *((_DWORD *)this + 31));
        LODWORD(v22) = v21 % *((unsigned int *)this + 30);
        v26 = *((_DWORD *)this + 32);
      }
      *((_DWORD *)this + 32) = v26 + 1;
      v27 = this[14];
      v28 = v27[50 * v25 + 2];
    }
    else
    {
      v27 = this[14];
      v28 = v27[50 * v25 + 2];
      *((_DWORD *)this + 33) = v28 & 0x7FFFFFFF;
    }
    v29 = 200 * v25;
    v27[(unint64_t)v29 / 4 + 2] = v28 | 0x80000000;
    *(_DWORD *)((char *)this[14] + v29 + 8) = *(_DWORD *)((_BYTE *)this[14] + v29 + 8) & 0x80000000 | *((_DWORD *)this[13] + v22);
    *(_QWORD *)((char *)this[14] + v29) = v21;
    v30 = (char *)this[14] + v29;
    v32 = *(_OWORD *)v6;
    v31 = *((_OWORD *)v6 + 1);
    v33 = *((_OWORD *)v6 + 3);
    *(_OWORD *)(v30 + 44) = *((_OWORD *)v6 + 2);
    *(_OWORD *)(v30 + 60) = v33;
    v35 = *((_OWORD *)v6 + 6);
    v34 = *((_OWORD *)v6 + 7);
    v36 = *((_OWORD *)v6 + 5);
    *(_OWORD *)(v30 + 76) = *((_OWORD *)v6 + 4);
    *(_OWORD *)(v30 + 92) = v36;
    *(_OWORD *)(v30 + 108) = v35;
    *(_OWORD *)(v30 + 124) = v34;
    v37 = *((_DWORD *)v6 + 44);
    v39 = *((_OWORD *)v6 + 9);
    v38 = *((_OWORD *)v6 + 10);
    *(_OWORD *)(v30 + 140) = *((_OWORD *)v6 + 8);
    *(_OWORD *)(v30 + 156) = v39;
    *(_OWORD *)(v30 + 172) = v38;
    *((_DWORD *)v30 + 47) = v37;
    *(_OWORD *)(v30 + 12) = v32;
    *(_OWORD *)(v30 + 28) = v31;
    v40 = *v45;
    *(_QWORD *)((char *)this[14] + v29 + 192) = *v45;
    if (v40)
      v41 = (id)(v40 + 8);
    *((_DWORD *)this[13] + v22) = v25;
    ++*((_DWORD *)this + 31);
    ++*((_DWORD *)this + 34);
LABEL_24:
    if (v19)

    if (*(_QWORD *)v51)
    if (v17)

    if (v47)
    if (v46)

    if (v13)
    if (v49)

    return;
  }
  v9 = this[14];
  while (1)
  {
    v7 = re::EqualTo<re::CachedStandardVertexFetchFunctionKey>::operator()((uint64_t)v51, (uint64_t)&v9[50 * v8 + 3], (uint64_t)v6);
    v9 = this[14];
    if ((v7 & 1) != 0)
      break;
    v8 = v9[50 * v8 + 2] & 0x7FFFFFFF;
    if (v8 == 0x7FFFFFFF)
      goto LABEL_6;
  }
  *a3 = 0;
  v42 = *(_QWORD *)&v9[50 * v8 + 48];
  if (v42)
  {
    v43 = (id)(v42 + 8);
    *a3 = v42;
  }
}

uint64_t re::internal::Callable<re::makeMetalPrivateLinkedFunctionsAsync(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,MTL::FunctionType,NS::SharedPtr<MTL::FunctionConstantValues> const&,re::dispatch::Group,BOOL,unsigned long long,re::FixedArray<NS::SharedPtr<MTL::Function>> &,unsigned long &,re::FixedArray<unsigned long long> &)::$_0,void ()(void)>::~Callable(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)a1 = &off_24ED747E0;
  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
  {

    *(_QWORD *)(a1 + 88) = 0;
  }

  v3 = *(void **)(a1 + 32);
  if (v3)
  {

    *(_QWORD *)(a1 + 32) = 0;
  }

  return a1;
}

void re::internal::Callable<re::makeMetalPrivateLinkedFunctionsAsync(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,MTL::FunctionType,NS::SharedPtr<MTL::FunctionConstantValues> const&,re::dispatch::Group,BOOL,unsigned long long,re::FixedArray<NS::SharedPtr<MTL::Function>> &,unsigned long &,re::FixedArray<unsigned long long> &)::$_0,void ()(void)>::~Callable(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)a1 = &off_24ED747E0;
  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
  {

    *(_QWORD *)(a1 + 88) = 0;
  }

  v3 = *(void **)(a1 + 32);
  if (v3)
  {

    *(_QWORD *)(a1 + 32) = 0;
  }

  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::makeMetalPrivateLinkedFunctionsAsync(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,MTL::FunctionType,NS::SharedPtr<MTL::FunctionConstantValues> const&,re::dispatch::Group,BOOL,unsigned long long,re::FixedArray<NS::SharedPtr<MTL::Function>> &,unsigned long &,re::FixedArray<unsigned long long> &)::$_0,void ()(void)>::operator()(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  NSObject *v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14[2];
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  uint8_t buf[16];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v2 = *(id *)(a1 + 24);
  v3 = v2;
  v14[0] = v2;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 72) + 48))
  {
    if (re::internal::enableSignposts(0, 0))
      kdebug_trace();
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 48);
    v13 = *(id *)(a1 + 8);
    re::sg::CachedCompilationMaterial::compileMetalLibrary(v4, &v13, *(CGColorSpace **)(a1 + 16), (id *)buf);
    v5 = *(void **)buf;
    *(_QWORD *)buf = 0;
    v14[0] = v5;

    if (re::internal::enableSignposts(0, 0))
      kdebug_trace();
  }
  else
  {
    v5 = v2;
  }
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  re::mtl::Library::makeFunctionWithDescriptor(v14, *(void **)(a1 + 32), &v12);
  v6 = re::internal::enableSignposts(0, 0);
  if ((_DWORD)v6)
    v6 = kdebug_trace();
  if (v12)
  {
    v7 = *(_QWORD *)(a1 + 80);
    v8 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(v7 + 8);
    if (v9 <= v8)
    {
      v14[1] = 0;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v15 = 136315906;
      v16 = "operator[]";
      v17 = 1024;
      v18 = 468;
      v19 = 2048;
      v20 = v8;
      v21 = 2048;
      v22 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    NS::SharedPtr<MTL::Texture>::operator=((void **)(*(_QWORD *)(v7 + 16) + 8 * v8), &v12);
  }
  else
  {
    v10 = *re::graphicsLogObjects((re *)v6);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 32);
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v11;
      _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "Unable to create linked function %s", buf, 0xCu);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  if (v12)

}

uint64_t re::internal::Callable<re::makeMetalPrivateLinkedFunctionsAsync(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,MTL::FunctionType,NS::SharedPtr<MTL::FunctionConstantValues> const&,re::dispatch::Group,BOOL,unsigned long long,re::FixedArray<NS::SharedPtr<MTL::Function>> &,unsigned long &,re::FixedArray<unsigned long long> &)::$_0,void ()(void)>::cloneInto(uint64_t a1, uint64_t a2)
{
  void *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  id v8;

  *(_QWORD *)a2 = &off_24ED747E0;
  *(_QWORD *)(a2 + 8) = *(id *)(a1 + 8);
  v4 = *(void **)(a1 + 24);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 32) = *(id *)(a1 + 32);
  *(_QWORD *)(a2 + 40) = *(id *)(a1 + 40);
  v6 = *(_OWORD *)(a1 + 48);
  v5 = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 48) = v6;
  *(_OWORD *)(a2 + 64) = v5;
  v7 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 88) = v7;
  if (v7)
    v8 = (id)(v7 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::makeMetalPrivateLinkedFunctionsAsync(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,MTL::FunctionType,NS::SharedPtr<MTL::FunctionConstantValues> const&,re::dispatch::Group,BOOL,unsigned long long,re::FixedArray<NS::SharedPtr<MTL::Function>> &,unsigned long &,re::FixedArray<unsigned long long> &)::$_0,void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)a2 = &off_24ED747E0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a2 + 8) = v2;
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a2 + 24) = v3;
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a2 + 40) = v4;
  v5 = *(_OWORD *)(a1 + 48);
  v6 = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  return a2;
}

uint64_t re::internal::Callable<re::makeMetalPrivateLinkedFunctionsAsync(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,MTL::FunctionType,NS::SharedPtr<MTL::FunctionConstantValues> const&,re::dispatch::Group,BOOL,unsigned long long,re::FixedArray<NS::SharedPtr<MTL::Function>> &,unsigned long &,re::FixedArray<unsigned long long> &)::$_0,void ()(void)>::size()
{
  return 96;
}

_QWORD *re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_0,void ()(void)>::~Callable(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &off_24ED74838;
  v2 = a1[10];
  if (v2)
  {

    a1[10] = 0;
  }
  v3 = a1[6];
  if (v3)
  {

    a1[6] = 0;
  }
  v4 = a1[4];
  if (v4)
  {

    a1[4] = 0;
  }
  v5 = (void *)a1[3];
  if (v5)
  {

    a1[3] = 0;
  }
  return a1;
}

void re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_0,void ()(void)>::~Callable(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *a1 = &off_24ED74838;
  v2 = a1[10];
  if (v2)
  {

    a1[10] = 0;
  }
  v3 = a1[6];
  if (v3)
  {

    a1[6] = 0;
  }
  v4 = a1[4];
  if (v4)
  {

    a1[4] = 0;
  }
  v5 = (void *)a1[3];
  if (v5)
  {

    a1[3] = 0;
  }
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_0,void ()(void)>::operator()(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  const char **v13;
  const char *v14;
  const char *v15;
  NSObject *v16;
  const char *v17;
  re *v18;
  const char **v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  double v27;
  const char *v28;
  const char *v29;
  NSObject *v30;
  int v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_unfair_lock_s *v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  id v43;
  id v44;
  id v45;
  _BYTE v46[32];
  __int128 v47;
  __int128 v48;
  char v49;
  _BYTE v50[24];
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v2 = (void *)MEMORY[0x24BDDD638];
  v3 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD638], sel_alloc), sel_init);
  v4 = objc_msgSend(objc_msgSend(v2, sel_alloc), sel_init);
  v45 = 0;
  *(_QWORD *)v46 = objc_msgSend(objc_msgSend(MEMORY[0x24BDBCE30], sel_alloc), sel_initWithObjects_count_, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  NS::SharedPtr<MTL::Texture>::operator=(&v45, (void **)v46);
  if (*(_QWORD *)v46)

  v44 = 0;
  *(_QWORD *)v46 = objc_msgSend(objc_msgSend(MEMORY[0x24BDBCE30], sel_alloc), sel_initWithObjects_count_, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
  NS::SharedPtr<MTL::Texture>::operator=(&v44, (void **)v46);
  if (*(_QWORD *)v46)

  re::internal::destroyPersistent<re::FixedArray<NS::SharedPtr<MTL::Function>>>(*(re **)(a1 + 8));
  re::internal::destroyPersistent<re::FixedArray<NS::SharedPtr<MTL::Function>>>(*(re **)(a1 + 16));
  objc_msgSend(v3, sel_setPrivateFunctions_, v45);
  objc_msgSend(v4, sel_setPrivateFunctions_, v44);
  objc_msgSend(*(id *)(a1 + 24), sel_setVertexLinkedFunctions_, v3);
  objc_msgSend(*(id *)(a1 + 24), sel_setFragmentLinkedFunctions_, v4);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 248) = mach_absolute_time();
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  re::mtl::Device::makeRenderPipelineState((id *)(*(_QWORD *)(a1 + 72) + 184), *(_QWORD *)(a1 + 24), &v43);
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  v5 = NS::SharedPtr<MTL::Texture>::operator=((void **)(*(_QWORD *)(a1 + 32) + 16), &v43);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16))
  {
    v6 = mach_absolute_time();
    v7 = v6;
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 248);
    v9 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
    if (*(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale < 0.0)
    {
      v6 = mach_timebase_info((mach_timebase_info_t)v46);
      if ((_DWORD)v6)
      {
        v12 = NAN;
LABEL_20:
        v17 = "NULL";
        if (*(_QWORD *)(*(_QWORD *)(a1 + 80) + 1424))
          v18 = *(re **)(*(_QWORD *)(a1 + 80) + 1424);
        else
          v18 = (re *)"NULL";
        v19 = *(const char ***)(a1 + 40);
        if (v19)
        {
          v20 = *v19;
          if (v20)
            v17 = v20;
        }
        v21 = *(_QWORD *)(a1 + 48);
        v22 = *(_QWORD *)(v21 + 16);
        v23 = "";
        if (v22)
        {
          v24 = *(const char **)(v22 + 8);
          if (v24)
            v23 = v24;
        }
        v25 = *(_QWORD *)(v21 + 24);
        v26 = "";
        v27 = v12 / 1000000.0;
        if (v25)
        {
          v28 = *(const char **)(v25 + 8);
          if (v28)
            v26 = v28;
        }
        v29 = (const char *)(int)v27;
        v30 = *re::graphicsLogObjects((re *)v6);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          v31 = *(unsigned __int8 *)(a1 + 56);
          *(_DWORD *)v46 = 136447234;
          if (v31)
            v32 = "fallback";
          else
            v32 = "specialized";
          *(_QWORD *)&v46[4] = v32;
          *(_WORD *)&v46[12] = 2082;
          *(_QWORD *)&v46[14] = v17;
          *(_WORD *)&v46[22] = 2082;
          *(_QWORD *)&v46[24] = v23;
          LOWORD(v47) = 2082;
          *(_QWORD *)((char *)&v47 + 2) = v26;
          WORD5(v47) = 1024;
          HIDWORD(v47) = (_DWORD)v29;
          _os_log_impl(&dword_224FE9000, v30, OS_LOG_TYPE_DEFAULT, "PSO compilation completed for %{public}s technique %{public}s with vertex shader %{public}s and fragment shader %{public}s in %d", v46, 0x30u);
        }
        re::REAnalyticsEventShaderCompilationDuration(v18, v17, v29);
        goto LABEL_38;
      }
      LODWORD(v11) = *(_DWORD *)&v46[4];
      LODWORD(v10) = *(_DWORD *)v46;
      v9 = (double)v10 / (double)v11;
      re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(_QWORD *)&v9;
    }
    v12 = v9 * (double)(v7 - v8);
    goto LABEL_20;
  }
  v13 = *(const char ***)(a1 + 40);
  v14 = "";
  if (v13)
  {
    v15 = *v13;
    if (v15)
      v14 = v15;
  }
  v16 = *re::graphicsLogObjects((re *)v5);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v46 = 136315138;
    *(_QWORD *)&v46[4] = v14;
    _os_log_error_impl(&dword_224FE9000, v16, OS_LOG_TYPE_ERROR, "Pipeline for technique %s failed compilation!", v46, 0xCu);
  }
LABEL_38:
  v33 = re::internal::enableSignposts(0, 0);
  if ((_DWORD)v33)
    v33 = kdebug_trace();
  v34 = *(_QWORD *)(a1 + 32);
  v35 = *(_QWORD *)(a1 + 72);
  v36 = *(os_unfair_lock_s **)(v35 + 136);
  v37 = *(_OWORD *)(v34 + 56);
  *(_OWORD *)&v46[16] = *(_OWORD *)(v34 + 40);
  v47 = v37;
  v48 = *(_OWORD *)(v34 + 72);
  v49 = *(_BYTE *)(v34 + 88);
  *(_OWORD *)v46 = *(_OWORD *)(v34 + 24);
  v38 = *(_QWORD *)(a1 + 48);
  if (v38)
    v33 = (uint64_t)(id)(v38 + 8);
  v39 = *(_QWORD *)(a1 + 40);
  v40 = *(_QWORD *)(a1 + 80);
  if (v40)
    v33 = (uint64_t)(id)(v40 + 8);
  v51 = re::globalAllocators((re *)v33)[2];
  v41 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v51 + 32))(v51, 112, 0);
  *(_QWORD *)v41 = &off_24ED74890;
  *(_QWORD *)(v41 + 8) = v35;
  v42 = *(_OWORD *)&v46[16];
  *(_OWORD *)(v41 + 16) = *(_OWORD *)v46;
  *(_OWORD *)(v41 + 32) = v42;
  *(_OWORD *)(v41 + 48) = v47;
  *(_OWORD *)(v41 + 64) = v48;
  *(_BYTE *)(v41 + 80) = v49;
  *(_QWORD *)(v41 + 88) = v38;
  *(_QWORD *)(v41 + 96) = v39;
  *(_QWORD *)(v41 + 104) = v40;
  v52 = (_BYTE *)v41;
  if (v52)
  {
    (**(void (***)(_BYTE *))v52)(v52);
    if (v52 != v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 40))(v51);
  }
  atomic_store(2 * (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) == 0), (unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 240));
  MEMORY[0x227693220](*(_QWORD *)(a1 + 32) + 240);
  if (v43)

  if (v44)
  if (v45)

  if (v4)
  if (v3)

}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_0,void ()(void)>::cloneInto(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  __int128 v9;
  uint64_t v10;
  id v11;

  *(_QWORD *)a2 = &off_24ED74838;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v4 = *(id *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 24) = v4;
  *(_QWORD *)(a2 + 32) = v5;
  if (v5)
    v6 = (id)(v5 + 8);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 48) = v7;
  if (v7)
    v8 = (id)(v7 + 8);
  v9 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = v9;
  v10 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 80) = v10;
  if (v10)
    v11 = (id)(v10 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_0,void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a2 = &off_24ED74838;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(id *)(a1 + 24);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  v4 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = v4;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  return a2;
}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_0,void ()(void)>::size()
{
  return 88;
}

re *re::internal::destroyPersistent<re::FixedArray<NS::SharedPtr<MTL::Function>>>(re *result)
{
  re *v1;
  uint64_t v2;
  uint64_t v3;
  id *v4;
  uint64_t v5;

  if (result)
  {
    v1 = result;
    v2 = re::globalAllocators(result)[2];
    if (*(_QWORD *)v1)
    {
      v3 = *((_QWORD *)v1 + 1);
      if (v3)
      {
        v4 = (id *)*((_QWORD *)v1 + 2);
        v5 = 8 * v3;
        do
        {
          if (*v4)
          {

            *v4 = 0;
          }
          ++v4;
          v5 -= 8;
        }
        while (v5);
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v1 + 40))(*(_QWORD *)v1, *((_QWORD *)v1 + 2));
        *((_QWORD *)v1 + 1) = 0;
        *((_QWORD *)v1 + 2) = 0;
      }
      *(_QWORD *)v1 = 0;
    }
    return (re *)(*(uint64_t (**)(uint64_t, re *))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

_QWORD *re::internal::MoveOnlyCallable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_0::operator() const(void)::{lambda(void)#1},void ()(void)>::~MoveOnlyCallable(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24ED74890;
  v2 = a1[13];
  if (v2)
  {

    a1[13] = 0;
  }
  v3 = a1[11];
  if (v3)
  {

    a1[11] = 0;
  }
  return a1;
}

void re::internal::MoveOnlyCallable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_0::operator() const(void)::{lambda(void)#1},void ()(void)>::~MoveOnlyCallable(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_24ED74890;
  v2 = a1[13];
  if (v2)
  {

    a1[13] = 0;
  }
  v3 = a1[11];
  if (v3)
  {

    a1[11] = 0;
  }
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::MoveOnlyCallable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_0::operator() const(void)::{lambda(void)#1},void ()(void)>::operator()(uint64_t a1)
{
  uint64_t result;

  result = re::DrawingManager::releasePipelineState(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 104), (_QWORD *)(a1 + 16));
  --*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 104) + 96);
  return result;
}

uint64_t re::internal::MoveOnlyCallable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_0::operator() const(void)::{lambda(void)#1},void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24ED74890;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  v2 = *(_OWORD *)(a1 + 24);
  v3 = *(_OWORD *)(a1 + 40);
  v4 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 65) = *(_OWORD *)(a1 + 65);
  *(_OWORD *)(a2 + 56) = v4;
  *(_OWORD *)(a2 + 40) = v3;
  *(_OWORD *)(a2 + 24) = v2;
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  return a2;
}

uint64_t re::internal::MoveOnlyCallable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_0::operator() const(void)::{lambda(void)#1},void ()(void)>::size()
{
  return 112;
}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_1,void ()(void)>::Callable(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_24ED748E0;
  *(_QWORD *)(a1 + 8) = *(id *)a2;
  v4 = *(id *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v8;
  return a1;
}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_1,void ()(void)>::~Callable(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_24ED748E0;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {

    *(_QWORD *)(a1 + 24) = 0;
  }
  v3 = *(void **)(a1 + 16);
  if (v3)
  {

    *(_QWORD *)(a1 + 16) = 0;
  }
  v4 = *(void **)(a1 + 8);
  if (v4)
  {

    *(_QWORD *)(a1 + 8) = 0;
  }
  return a1;
}

void re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_1,void ()(void)>::~Callable(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_24ED748E0;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {

    *(_QWORD *)(a1 + 24) = 0;
  }
  v3 = *(void **)(a1 + 16);
  if (v3)
  {

    *(_QWORD *)(a1 + 16) = 0;
  }
  v4 = *(void **)(a1 + 8);
  if (v4)
  {

    *(_QWORD *)(a1 + 8) = 0;
  }
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_1,void ()(void)>::operator()(uint64_t a1)
{
  void *v2;
  void *v3;

  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  re::mtl::Library::makeFunctionWithDescriptor((id *)(a1 + 56), *(void **)(a1 + 8), &v3);
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  v2 = v3;
  objc_msgSend(*(id *)(a1 + 16), sel_setVertexFunction_, v3);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  if (v2)

}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_1,void ()(void)>::cloneInto(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  id v6;
  void *v7;

  *(_QWORD *)a2 = &off_24ED748E0;
  *(_QWORD *)(a2 + 8) = *(id *)(a1 + 8);
  v4 = *(id *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  if (v5)
    v6 = (id)(v5 + 8);
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a2 + 40) = *(id *)(a1 + 40);
  v7 = *(void **)(a1 + 56);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 56) = v7;
  return a2;
}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_1,void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  return re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_1,void ()(void)>::Callable(a2, a1 + 8);
}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_1,void ()(void)>::size()
{
  return 64;
}

void re::FixedArray<unsigned long long>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_7;
  }
  v5 = 8 * a3;
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 8 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_7:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 8);
    v8 = (_QWORD *)((char *)v8 + v5 - 8);
  }
  *v8 = 0;
}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_2,void ()(void)>::Callable(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_24ED74938;
  *(_QWORD *)(a1 + 8) = *(id *)a2;
  v4 = *(id *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v8;
  return a1;
}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_2,void ()(void)>::~Callable(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_24ED74938;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {

    *(_QWORD *)(a1 + 24) = 0;
  }
  v3 = *(void **)(a1 + 16);
  if (v3)
  {

    *(_QWORD *)(a1 + 16) = 0;
  }
  v4 = *(void **)(a1 + 8);
  if (v4)
  {

    *(_QWORD *)(a1 + 8) = 0;
  }
  return a1;
}

void re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_2,void ()(void)>::~Callable(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_24ED74938;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {

    *(_QWORD *)(a1 + 24) = 0;
  }
  v3 = *(void **)(a1 + 16);
  if (v3)
  {

    *(_QWORD *)(a1 + 16) = 0;
  }
  v4 = *(void **)(a1 + 8);
  if (v4)
  {

    *(_QWORD *)(a1 + 8) = 0;
  }
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_2,void ()(void)>::operator()(uint64_t a1)
{
  void *v2;
  void *v3;

  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  re::mtl::Library::makeFunctionWithDescriptor((id *)(a1 + 56), *(void **)(a1 + 8), &v3);
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  v2 = v3;
  objc_msgSend(*(id *)(a1 + 16), sel_setFragmentFunction_, v3);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  if (v2)

}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_2,void ()(void)>::cloneInto(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  id v6;
  void *v7;

  *(_QWORD *)a2 = &off_24ED74938;
  *(_QWORD *)(a2 + 8) = *(id *)(a1 + 8);
  v4 = *(id *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  if (v5)
    v6 = (id)(v5 + 8);
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a1 + 32);
  *(_QWORD *)(a2 + 40) = *(id *)(a1 + 40);
  v7 = *(void **)(a1 + 56);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 56) = v7;
  return a2;
}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_2,void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  return re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_2,void ()(void)>::Callable(a2, a1 + 8);
}

uint64_t re::internal::Callable<re::dispatchRenderPipelineStateCompilation(re::RenderManager const&,re::SharedPtr<re::MaterialPipelineData const>,re::PipelineStateCache *,NS::SharedPtr<MTL::RenderPipelineDescriptor>,NS::SharedPtr<MTL::FunctionConstantValues>,re::SharedPtr<re::CachedPipelineState>,re::MaterialTechniqueDefinition const*,BOOL,re::AttributeTable const&,re::Slice<re::AttributeResolution> const&,unsigned long long)::$_2,void ()(void)>::size()
{
  return 64;
}

unint64_t re::Hash<re::PipelineStateCacheKey>::operator()(int a1, _QWORD *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  MurmurHash3_x64_128((uint64_t)a2, 44, 0, v8);
  v3 = (v8[1] + (v8[0] << 6) + (v8[0] >> 2) - 0x61C8864680B583E9) ^ v8[0];
  v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2[7] ^ (a2[7] >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2[7] ^ (a2[7] >> 30))) >> 27));
  v5 = ((v3 << 6) + (v3 >> 2) - 0x61C8864680B583E9 + (v4 ^ (v4 >> 31))) ^ v3;
  v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)a2 + 64)) ^ ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)a2 + 64)) >> 27));
  return ((v6 ^ (v6 >> 31)) + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5;
}

void re::CachedPipelineState::~CachedPipelineState(re::CachedPipelineState *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_24ED74990;
  v2 = *((_QWORD *)this + 27);
  if (v2)
  {
    if (*((_QWORD *)this + 28))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 29));
      *((_QWORD *)this + 28) = 0;
      *((_QWORD *)this + 29) = 0;
    }
    *((_QWORD *)this + 27) = 0;
  }
  v3 = *((_QWORD *)this + 24);
  if (v3)
  {
    if (*((_QWORD *)this + 25))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 26));
      *((_QWORD *)this + 25) = 0;
      *((_QWORD *)this + 26) = 0;
    }
    *((_QWORD *)this + 24) = 0;
  }
  re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchPipeline>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::deinit((uint64_t *)this + 12);
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
  {

    *((_QWORD *)this + 2) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_24ED74990;
  v2 = *((_QWORD *)this + 27);
  if (v2)
  {
    if (*((_QWORD *)this + 28))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 29));
      *((_QWORD *)this + 28) = 0;
      *((_QWORD *)this + 29) = 0;
    }
    *((_QWORD *)this + 27) = 0;
  }
  v3 = *((_QWORD *)this + 24);
  if (v3)
  {
    if (*((_QWORD *)this + 25))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 26));
      *((_QWORD *)this + 25) = 0;
      *((_QWORD *)this + 26) = 0;
    }
    *((_QWORD *)this + 24) = 0;
  }
  re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchPipeline>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::deinit((uint64_t *)this + 12);
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
  {

    *((_QWORD *)this + 2) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::SharedPersistentObject<re::CachedPipelineState>::allocator(re *a1)
{
  return re::globalAllocators(a1)[2];
}

double re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchPipeline>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  uint64_t v8;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          v8 = *(_QWORD *)(v6 + 192);
          if (v8)
          {

            *(_QWORD *)(v6 + 192) = 0;
            v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 200;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::tryGet(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v9;
  char v10;

  v4 = re::Hash<re::PipelineStateCacheKey>::operator()((int)&v9, a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v7 = re::EqualTo<re::PipelineStateCacheKey>::operator()((int)&v10, (void *)(v6 + 96 * v5 + 16), a2);
    v6 = *(_QWORD *)(a1 + 16);
    if (v7)
      break;
    v5 = *(_DWORD *)(v6 + 96 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      return 0;
  }
  return v6 + 96 * v5 + 88;
}

BOOL re::EqualTo<re::PipelineStateCacheKey>::operator()(int a1, void *__s1, void *__s2)
{
  return !memcmp(__s1, __s2, 0x2CuLL) && *((_QWORD *)__s1 + 7) == *((_QWORD *)__s2 + 7);
}

uint64_t re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::addEmplace<re::SharedPtr<re::CachedPipelineState>&>(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  id v19;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 96 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 96 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 96 * v9 + 8) = v12 | 0x80000000;
  v13 = a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9) = a3;
  v14 = *(_QWORD *)(a1 + 16) + 96 * v9;
  v15 = *(_QWORD *)(a4 + 64);
  v16 = *(_OWORD *)(a4 + 48);
  v17 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v14 + 48) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v14 + 64) = v16;
  *(_QWORD *)(v14 + 80) = v15;
  *(_OWORD *)(v14 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v14 + 32) = v17;
  v18 = *a5;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9 + 88) = *a5;
  if (v18)
    v19 = (id)(v18 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v13) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 88));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 96;
        }
        while (v11 < v9);
      }
      re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 96 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 96 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 96 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9) = a3;
  v13 = *(_QWORD *)(a1 + 16) + 96 * v9;
  v14 = *(_QWORD *)(a4 + 64);
  v15 = *(_OWORD *)(a4 + 48);
  v16 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v13 + 48) = *(_OWORD *)(a4 + 32);
  *(_OWORD *)(v13 + 64) = v15;
  *(_QWORD *)(v13 + 80) = v14;
  *(_OWORD *)(v13 + 16) = *(_OWORD *)a4;
  *(_OWORD *)(v13 + 32) = v16;
  v17 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9 + 88) = *a5;
  *a5 = 0;
  *(_DWORD *)(v17 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::PipelineStateCacheKey,re::SharedPtr<re::CachedPipelineState>,re::Hash<re::PipelineStateCacheKey>,re::EqualTo<re::PipelineStateCacheKey>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 96 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_21, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

BOOL re::EqualTo<re::CachedStandardVertexFetchFunctionKey>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v3;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;

  if (*(_DWORD *)a2 != *(_DWORD *)a3)
    return 0;
  v3 = *(_DWORD *)(a2 + 4) == *(_DWORD *)(a3 + 4) && *(unsigned __int8 *)(a2 + 8) == *(unsigned __int8 *)(a3 + 8);
  if (!v3 || *(unsigned __int8 *)(a2 + 9) != *(unsigned __int8 *)(a3 + 9))
    return 0;
  v6 = 0;
  v7 = (unsigned __int8 *)(a2 + 21);
  v8 = (unsigned __int8 *)(a3 + 21);
  do
  {
    v9 = v6;
    if (v6 == 14 || *(_DWORD *)(v7 - 9) != *(_DWORD *)(v8 - 9))
      break;
    v10 = *v8;
    v11 = *(v8 - 1);
    v12 = *v7;
    v13 = *(v7 - 1);
    v14 = *(_DWORD *)(v8 - 5);
    v15 = *(_DWORD *)(v7 - 5);
    v7 += 12;
    v8 += 12;
    ++v6;
    v16 = v15 == v14 && v13 == v11;
  }
  while (v16 && v12 == v10);
  return v9 > 0xD;
}

unint64_t re::Hash<re::CachedStandardVertexFetchFunctionKey>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t result;
  unint64_t v4;

  v2 = 0;
  result = 0;
  do
  {
    v4 = ((result << 6) - 0x61C8864680B583E9 + (result >> 2) + *(_QWORD *)(a2 + v2)) ^ result;
    result = (*(unsigned __int16 *)(a2 + v2 + 8) - 0x61C8864680B583E9 + (v4 << 6) + (v4 >> 2)) ^ v4;
    v2 += 12;
  }
  while (v2 != 180);
  return result;
}

void re::CachedVertexFetchPipeline::~CachedVertexFetchPipeline(re::CachedVertexFetchPipeline *this)
{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24ED74A00;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {

    *((_QWORD *)this + 3) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {

    *((_QWORD *)this + 2) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_24ED74A00;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {

    *((_QWORD *)this + 3) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {

    *((_QWORD *)this + 2) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::SharedPersistentObject<re::CachedVertexFetchPipeline>::allocator(re *a1)
{
  return re::globalAllocators(a1)[2];
}

void re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchPipeline>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  signed int v32;
  _BYTE v33[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v33, 0, 36);
      *(_QWORD *)&v33[36] = 0x7FFFFFFFLL;
      re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchPipeline>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::init((uint64_t)v33, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v33;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v33[8];
      *(_OWORD *)v33 = v5;
      *(_QWORD *)&v33[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v33[24];
      *(_OWORD *)&v33[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v33[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (_QWORD *)(v6 + 192);
        do
        {
          if ((*(_DWORD *)(v13 - 23) & 0x80000000) != 0)
          {
            v14 = *(v13 - 24);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(_DWORD *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              v17 = *(_DWORD *)(a1 + 32);
              v18 = v17;
              if (v17 == (_DWORD)v15)
              {
                re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchPipeline>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 200 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 200 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 200 * v17 + 8) = v20 | 0x80000000;
            v21 = *(_QWORD *)(a1 + 16) + 200 * v17;
            *(_DWORD *)(v21 + 8) = *(_DWORD *)(v21 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 200 * v17) = v14;
            v22 = *(_QWORD *)(a1 + 16) + 200 * v17;
            v23 = *(_OWORD *)((char *)v13 - 180);
            v24 = *(_OWORD *)((char *)v13 - 164);
            v25 = *(_OWORD *)((char *)v13 - 148);
            *(_OWORD *)(v22 + 60) = *(_OWORD *)((char *)v13 - 132);
            *(_OWORD *)(v22 + 44) = v25;
            *(_OWORD *)(v22 + 28) = v24;
            *(_OWORD *)(v22 + 12) = v23;
            v26 = *(_OWORD *)((char *)v13 - 116);
            v27 = *(_OWORD *)((char *)v13 - 100);
            v28 = *(_OWORD *)((char *)v13 - 84);
            *(_OWORD *)(v22 + 124) = *(_OWORD *)((char *)v13 - 68);
            *(_OWORD *)(v22 + 108) = v28;
            *(_OWORD *)(v22 + 92) = v27;
            *(_OWORD *)(v22 + 76) = v26;
            v29 = *(_OWORD *)((char *)v13 - 52);
            v30 = *(_OWORD *)((char *)v13 - 36);
            v31 = *(_OWORD *)((char *)v13 - 20);
            *(_DWORD *)(v22 + 188) = *((_DWORD *)v13 - 1);
            *(_OWORD *)(v22 + 172) = v31;
            *(_OWORD *)(v22 + 156) = v30;
            *(_OWORD *)(v22 + 140) = v29;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 200 * v17 + 192) = *v13;
            *v13 = 0;
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 25;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchPipeline>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::deinit((uint64_t *)v33);
    }
  }
  else
  {
    if (a2)
      v32 = a2;
    else
      v32 = 3;
  }
}

void re::HashTable<re::CachedStandardVertexFetchFunctionKey,re::SharedPtr<re::CachedVertexFetchPipeline>,re::Hash<re::CachedStandardVertexFetchFunctionKey>,re::EqualTo<re::CachedStandardVertexFetchFunctionKey>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 200 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_21, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

__IOSurface *re::DeformationVertexBufferState::LockedSurfaces::ensureIOSurfaceLocked(re::DeformationVertexBufferState::LockedSurfaces *this, Buffer *a2)
{
  __IOSurface *result;
  __IOSurface *v4;
  Buffer *v5;

  v5 = a2;
  result = (__IOSurface *)-[Buffer iosurface](a2, "iosurface");
  if (result)
  {
    v4 = result;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)this, (uint64_t *)&v5))
    {
      IOSurfaceLock(v4, 1u, 0);
      re::HashSetBase<MTL::Buffer *,MTL::Buffer *,re::internal::ValueAsKey<MTL::Buffer *>,re::Hash<MTL::Buffer *>,re::EqualTo<MTL::Buffer *>,true,false>::addNew((uint64_t)this, (uint64_t *)&v5);
    }
    return (__IOSurface *)IOSurfaceGetBaseAddress(v4);
  }
  return result;
}

uint64_t re::HashSetBase<MTL::Buffer *,MTL::Buffer *,re::internal::ValueAsKey<MTL::Buffer *>,re::Hash<MTL::Buffer *>,re::EqualTo<MTL::Buffer *>,true,false>::addNew(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v4 = *a2;
  v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  v7 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v7)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % v7;
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v6 % v7));
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashSetBase<MTL::Buffer *,MTL::Buffer *,re::internal::ValueAsKey<MTL::Buffer *>,re::Hash<MTL::Buffer *>,re::EqualTo<MTL::Buffer *>,true,false>::addAsCopy(a1, v8, v6, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 16) + 24 * v12;
    return v11 + 16;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v10 + 24 * v9 + 16) != v4)
  {
    LODWORD(v9) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v11 = v10 + 24 * v9;
  return v11 + 16;
}

void re::DeformationVertexBufferState::LockedSurfaces::unlockAll(re::DeformationVertexBufferState::LockedSurfaces *this)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *((unsigned int *)this + 8);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = (int *)(*((_QWORD *)this + 2) + 8);
    while (1)
    {
      v5 = *v4;
      v4 += 6;
      if (v5 < 0)
        break;
      if (v2 == ++v3)
      {
        LODWORD(v3) = *((_DWORD *)this + 8);
        break;
      }
    }
  }
  else
  {
    LODWORD(v3) = 0;
  }
  if ((_DWORD)v2 != (_DWORD)v3)
  {
    v6 = v3;
    do
    {
      IOSurfaceUnlock((IOSurfaceRef)objc_msgSend(*(id *)(*((_QWORD *)this + 2) + 24 * v6 + 16), "iosurface"), 1u, 0);
      if (*((_DWORD *)this + 8) <= (v3 + 1))
        v7 = v3 + 1;
      else
        v7 = *((_DWORD *)this + 8);
      v8 = v3;
      while (1)
      {
        v6 = (v8 + 1);
        if (v7 - 1 == v8)
          break;
        ++v8;
        LODWORD(v3) = v6;
        if ((*(_DWORD *)(*((_QWORD *)this + 2) + 24 * v6 + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      LODWORD(v3) = v7;
LABEL_17:
      ;
    }
    while ((_DWORD)v2 != (_DWORD)v3);
  }
  re::HashSetBase<MTL::Buffer *,MTL::Buffer *,re::internal::ValueAsKey<MTL::Buffer *>,re::Hash<MTL::Buffer *>,re::EqualTo<MTL::Buffer *>,true,false>::clear((uint64_t)this);
}

void re::HashSetBase<MTL::Buffer *,MTL::Buffer *,re::internal::ValueAsKey<MTL::Buffer *>,re::Hash<MTL::Buffer *>,re::EqualTo<MTL::Buffer *>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_21, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 24 * v3;
      do
      {
        v6 = *(_QWORD *)(a1 + 16) + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 24;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

uint64_t re::HashSetBase<MTL::Buffer *,MTL::Buffer *,re::internal::ValueAsKey<MTL::Buffer *>,re::Hash<MTL::Buffer *>,re::EqualTo<MTL::Buffer *>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<MTL::Buffer *,MTL::Buffer *,re::internal::ValueAsKey<MTL::Buffer *>,re::Hash<MTL::Buffer *>,re::EqualTo<MTL::Buffer *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v10 + 24 * v8 + 8) = v11 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashSetBase<MTL::Buffer *,MTL::Buffer *,re::internal::ValueAsKey<MTL::Buffer *>,re::Hash<MTL::Buffer *>,re::EqualTo<MTL::Buffer *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  signed int v22;
  _BYTE v23[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(_QWORD *)&v23[36] = 0x7FFFFFFFLL;
      re::HashSetBase<MTL::Buffer *,MTL::Buffer *,re::internal::ValueAsKey<MTL::Buffer *>,re::Hash<MTL::Buffer *>,re::EqualTo<MTL::Buffer *>,true,false>::init((uint64_t)v23, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v23;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)v23 = v5;
      *(_QWORD *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (_QWORD *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v14 - 1) & 0x80000000) != 0)
          {
            v15 = *(v14 - 2);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashSetBase<MTL::Buffer *,MTL::Buffer *,re::internal::ValueAsKey<MTL::Buffer *>,re::Hash<MTL::Buffer *>,re::EqualTo<MTL::Buffer *>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 24 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 24 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 24 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18) = v15;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v18 + 16) = *v14;
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 3;
        }
        while (v11 < v10);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2)
      v22 = a2;
    else
      v22 = 3;
  }
}

void re::HashSetBase<MTL::Buffer *,MTL::Buffer *,re::internal::ValueAsKey<MTL::Buffer *>,re::Hash<MTL::Buffer *>,re::EqualTo<MTL::Buffer *>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_21, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 600);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::SkinnedMeshBoundsEstimator::init<re::SkinningInfluence>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int **a5, unsigned int a6, double a7, double a8, double a9)
{
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned __int8 v21;
  float *v22;
  float v23;
  int *v24;
  int v25;
  int *v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  float *v31;
  uint64_t v32;
  unint64_t v33;
  float v34;
  uint64_t result;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  float32x4_t *v40;
  float32x4_t *v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  _OWORD v50[4];
  _OWORD v51[4];

  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + 48) = _D0;
  if (a6)
  {
    v17 = a4[1];
    if (v17 >= a6)
    {
      v18 = 0;
      v19 = 0;
      LODWORD(_D0) = 1.0;
      LODWORD(a8) = 1.0;
      do
      {
        if (v19 <= v17)
          v20 = v17;
        else
          v20 = v19;
        v21 = v19 + a6;
        v22 = (float *)(*a4 + 8 * v19 + 4);
        LODWORD(a9) = 0;
        do
        {
          if (v20 == v19)
          {
            re::internal::assertLog((re::internal *)6, a2, _D0, a8, a9, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v20, v17);
            _os_crash();
            __break(1u);
            goto LABEL_40;
          }
          v23 = *v22;
          v22 += 2;
          *(float *)&a9 = *(float *)&a9 + fabsf(v23);
          ++v19;
        }
        while (v21 != v19);
        if (*(float *)&a9 > 0.0)
        {
          if (*(float *)&a8 > *(float *)&a9)
            *(float *)&a8 = *(float *)&a9;
          if (*(float *)&_D0 < *(float *)&a9)
            *(float *)&_D0 = *(float *)&a9;
          *(_DWORD *)(a1 + 48) = LODWORD(_D0);
          *(_DWORD *)(a1 + 52) = LODWORD(a8);
        }
        ++v18;
      }
      while (v18 != v17 / a6);
    }
  }
  else
  {
    v24 = a5[1];
    if (v24)
    {
      v25 = 0;
      v26 = *a5;
      v27 = (uint64_t)&(*a5)[(_QWORD)v24];
      v28 = a4[1];
      LODWORD(_D0) = 1.0;
      LODWORD(a8) = 1.0;
      do
      {
        v29 = *v26;
        if (v25 < *v26)
        {
          v30 = v25;
          if (v28 > v25)
            v30 = v28;
          v31 = (float *)(*a4 + 8 * v25 + 4);
          v32 = v29 - (uint64_t)v25;
          v33 = v30 - v25;
          LODWORD(a9) = 0;
          do
          {
            if (!v33)
            {
LABEL_40:
              re::internal::assertLog((re::internal *)6, a2, _D0, a8, a9, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v30, v28);
              result = _os_crash();
              __break(1u);
              return result;
            }
            v34 = *v31;
            v31 += 2;
            *(float *)&a9 = *(float *)&a9 + fabsf(v34);
            --v33;
            --v32;
          }
          while (v32);
          if (*(float *)&a9 > 0.0)
          {
            if (*(float *)&a8 > *(float *)&a9)
              *(float *)&a8 = *(float *)&a9;
            if (*(float *)&_D0 < *(float *)&a9)
              *(float *)&_D0 = *(float *)&a9;
            *(_DWORD *)(a1 + 48) = LODWORD(_D0);
            *(_DWORD *)(a1 + 52) = LODWORD(a8);
          }
        }
        ++v26;
        v25 = v29;
      }
      while (v26 != (int *)v27);
    }
  }
  re::FixedArray<re::AABB>::operator=((_anonymous_namespace_ *)a1, a2);
  re::FixedArray<re::AABB>::operator=((_anonymous_namespace_ *)(a1 + 24), a2);
  result = (uint64_t)re::FixedArray<re::Matrix4x4<float>>::operator=((_anonymous_namespace_ *)(a1 + 56), a3);
  v36 = *(_QWORD *)(a1 + 64);
  if (v36)
  {
    DWORD1(v37) = 0;
    *((_QWORD *)&v37 + 1) = 0;
    *(float *)&v37 = 1.0 / *(float *)(a1 + 52);
    *(_QWORD *)&v39 = 0;
    HIDWORD(v39) = 0;
    LODWORD(v38) = 0;
    *((_QWORD *)&v38 + 1) = 0;
    *((float *)&v38 + 1) = *(float *)&v37;
    *((float *)&v39 + 2) = *(float *)&v37;
    v40 = *(float32x4_t **)(a1 + 72);
    v41 = &v40[4 * v36];
    do
    {
      v42 = 0;
      v43 = *v40;
      v44 = v40[1];
      v45 = v40[2];
      v46 = v40[3];
      v50[0] = v37;
      v50[1] = v38;
      v50[2] = v39;
      v50[3] = xmmword_2260E5D70;
      do
      {
        v51[v42] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, COERCE_FLOAT(v50[v42])), v44, *(float32x2_t *)&v50[v42], 1), v45, (float32x4_t)v50[v42], 2), v46, (float32x4_t)v50[v42], 3);
        ++v42;
      }
      while (v42 != 4);
      v47 = (float32x4_t)v51[1];
      v48 = (float32x4_t)v51[2];
      v49 = (float32x4_t)v51[3];
      *v40 = (float32x4_t)v51[0];
      v40[1] = v47;
      v40[2] = v48;
      v40[3] = v49;
      v40 += 4;
    }
    while (v40 != v41);
  }
  return result;
}

uint64_t re::SkinnedMeshBoundsEstimator::init<re::PackedSkinningInfluence>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int **a5, unsigned int a6, double a7, double a8, double a9, double a10)
{
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 v22;
  int *v23;
  int v24;
  int *v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  int *v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t result;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  float32x4_t *v39;
  float32x4_t *v40;
  uint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  _OWORD v49[4];
  _OWORD v50[4];

  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + 48) = _D0;
  if (a6)
  {
    v18 = a4[1];
    if (v18 >= a6)
    {
      v19 = 0;
      v20 = 0;
      LODWORD(_D0) = 1.0;
      LODWORD(a8) = 880803842;
      LODWORD(a9) = 1.0;
      do
      {
        if (v20 <= v18)
          v21 = v18;
        else
          v21 = v20;
        v22 = v20 + a6;
        LODWORD(a10) = 0;
        do
        {
          if (v21 == v20)
          {
            re::internal::assertLog((re::internal *)6, a2, _D0, a8, a9, a10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v21, v18);
            _os_crash();
            __break(1u);
            goto LABEL_40;
          }
          *(float *)&a10 = *(float *)&a10 + (float)((float)(*(_DWORD *)(*a4 + 4 * v20++) & 0x3FFFFF) * 0.00000023842);
        }
        while (v22 != v20);
        if (*(float *)&a10 > 0.0)
        {
          if (*(float *)&a9 > *(float *)&a10)
            *(float *)&a9 = *(float *)&a10;
          if (*(float *)&_D0 < *(float *)&a10)
            *(float *)&_D0 = *(float *)&a10;
          *(_DWORD *)(a1 + 48) = LODWORD(_D0);
          *(_DWORD *)(a1 + 52) = LODWORD(a9);
        }
        ++v19;
      }
      while (v19 != v18 / a6);
    }
  }
  else
  {
    v23 = a5[1];
    if (v23)
    {
      v24 = 0;
      v25 = *a5;
      v26 = (uint64_t)&(*a5)[(_QWORD)v23];
      v27 = a4[1];
      LODWORD(_D0) = 1.0;
      LODWORD(a8) = 880803842;
      LODWORD(a9) = 1.0;
      do
      {
        v28 = *v25;
        if (v24 < *v25)
        {
          v29 = v24;
          if (v27 > v24)
            v29 = v27;
          v30 = (int *)(*a4 + 4 * v24);
          v31 = v28 - (uint64_t)v24;
          v32 = v29 - v24;
          LODWORD(a10) = 0;
          do
          {
            if (!v32)
            {
LABEL_40:
              re::internal::assertLog((re::internal *)6, a2, _D0, a8, a9, a10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v29, v27);
              result = _os_crash();
              __break(1u);
              return result;
            }
            v33 = *v30++;
            *(float *)&a10 = *(float *)&a10 + (float)((float)(v33 & 0x3FFFFF) * 0.00000023842);
            --v32;
            --v31;
          }
          while (v31);
          if (*(float *)&a10 > 0.0)
          {
            if (*(float *)&a9 > *(float *)&a10)
              *(float *)&a9 = *(float *)&a10;
            if (*(float *)&_D0 < *(float *)&a10)
              *(float *)&_D0 = *(float *)&a10;
            *(_DWORD *)(a1 + 48) = LODWORD(_D0);
            *(_DWORD *)(a1 + 52) = LODWORD(a9);
          }
        }
        ++v25;
        v24 = v28;
      }
      while (v25 != (int *)v26);
    }
  }
  re::FixedArray<re::AABB>::operator=((_anonymous_namespace_ *)a1, a2);
  re::FixedArray<re::AABB>::operator=((_anonymous_namespace_ *)(a1 + 24), a2);
  result = (uint64_t)re::FixedArray<re::Matrix4x4<float>>::operator=((_anonymous_namespace_ *)(a1 + 56), a3);
  v35 = *(_QWORD *)(a1 + 64);
  if (v35)
  {
    DWORD1(v36) = 0;
    *((_QWORD *)&v36 + 1) = 0;
    *(float *)&v36 = 1.0 / *(float *)(a1 + 52);
    *(_QWORD *)&v38 = 0;
    HIDWORD(v38) = 0;
    LODWORD(v37) = 0;
    *((_QWORD *)&v37 + 1) = 0;
    *((float *)&v37 + 1) = *(float *)&v36;
    *((float *)&v38 + 2) = *(float *)&v36;
    v39 = *(float32x4_t **)(a1 + 72);
    v40 = &v39[4 * v35];
    do
    {
      v41 = 0;
      v42 = *v39;
      v43 = v39[1];
      v44 = v39[2];
      v45 = v39[3];
      v49[0] = v36;
      v49[1] = v37;
      v49[2] = v38;
      v49[3] = xmmword_2260E5D70;
      do
      {
        v50[v41] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v42, COERCE_FLOAT(v49[v41])), v43, *(float32x2_t *)&v49[v41], 1), v44, (float32x4_t)v49[v41], 2), v45, (float32x4_t)v49[v41], 3);
        ++v41;
      }
      while (v41 != 4);
      v46 = (float32x4_t)v50[1];
      v47 = (float32x4_t)v50[2];
      v48 = (float32x4_t)v50[3];
      *v39 = (float32x4_t)v50[0];
      v39[1] = v46;
      v39[2] = v47;
      v39[3] = v48;
      v39 += 4;
    }
    while (v39 != v40);
  }
  return result;
}

uint64_t re::SkinnedMeshBoundsEstimator::deinit(re::SkinnedMeshBoundsEstimator *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *(_QWORD *)this;
  if (v2)
  {
    if (*((_QWORD *)this + 1))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 2));
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
    }
    *(_QWORD *)this = 0;
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    if (*((_QWORD *)this + 4))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 5));
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 5) = 0;
    }
    *((_QWORD *)this + 3) = 0;
  }
  __asm { FMOV            V0.2S, #1.0 }
  *((_QWORD *)this + 6) = _D0;
  result = *((_QWORD *)this + 7);
  if (result)
  {
    if (*((_QWORD *)this + 8))
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *((_QWORD *)this + 9));
      *((_QWORD *)this + 8) = 0;
      *((_QWORD *)this + 9) = 0;
    }
    *((_QWORD *)this + 7) = 0;
  }
  return result;
}

void re::SkinnedMeshBoundsEstimator::updateKnownBoundingBoxes(_anonymous_namespace_ *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  unint64_t v9;
  simd_float4x4 v10;

  re::FixedArray<re::AABB>::operator=(a1, a2);
  v6 = *((_QWORD *)a1 + 8);
  if (v6)
  {
    v7 = 0;
    for (i = 0; i != v6; ++i)
    {
      v9 = a3[1];
      if (v9 <= i)
      {
        re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, i, v9);
        _os_crash();
        __break(1u);
LABEL_8:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v10 = __invert_f4(*(simd_float4x4 *)(*a3 + v7));
      if (*((_QWORD *)a1 + 8) <= i)
        goto LABEL_8;
      *(simd_float4x4 *)(*((_QWORD *)a1 + 9) + v7) = v10;
      v7 += 64;
    }
  }
}

float32x4_t re::SkinnedMeshBoundsEstimator::updateEstimatedBoundingBoxes(uint64_t a1, uint64_t a2, float32x4_t result)
{
  unint64_t v3;
  unint64_t i;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  unint64_t v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  float32x4_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  uint64_t v38;
  float32x4_t *v39;
  float32x4_t *v40;
  float v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  float32x4_t v46;
  _BYTE v47[48];
  float32x4_t v48;
  _BYTE v49[12];
  __int16 v50;
  int v51;
  __int16 v52;
  _QWORD *v53;
  __int16 v54;
  unint64_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  __int128 v60;
  uint64_t v61;

  v6 = (_QWORD *)a2;
  v61 = *MEMORY[0x24BDAC8D0];
  v45 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD **)(a1 + 32);
  if (v8)
  {
    v9 = 0;
    for (i = 0; (_QWORD *)i != v8; ++i)
    {
      v10 = *(_BYTE **)(a1 + 8);
      if ((unint64_t)v10 <= i)
        goto LABEL_28;
      v10 = *(_BYTE **)(a1 + 32);
      if ((unint64_t)v10 <= i)
        goto LABEL_29;
      v11 = *(_QWORD *)(a1 + 16) + v9;
      v12 = (_OWORD *)(*(_QWORD *)(a1 + 40) + v9);
      result = *(float32x4_t *)v11;
      v13 = *(_OWORD *)(v11 + 16);
      *v12 = *(_OWORD *)v11;
      v12[1] = v13;
      v9 += 32;
    }
  }
  if (v45)
  {
    i = 0;
    v14.i64[0] = 0;
    v15.i32[0] = 0;
    v15.i32[3] = 0;
    *(uint64_t *)((char *)v15.i64 + 4) = *(unsigned int *)(a1 + 52);
    v14.i64[1] = v15.u32[1];
    v10 = v47;
    v16 = (float32x4_t)xmmword_2260E5D70;
    v43 = (float32x4_t)v15.u32[1];
    v44 = v14;
    v46 = (float32x4_t)v15.u64[0];
    while (1)
    {
      v17 = v6[1];
      if (v17 <= i)
        goto LABEL_32;
      v18 = 0;
      v19 = (float32x4_t *)(*v6 + (i << 6));
      v20 = v19[1];
      v21 = v19[2];
      v22 = v19[3];
      *(float32x4_t *)v47 = *v19;
      *(float32x4_t *)&v47[16] = v20;
      *(float32x4_t *)&v47[32] = v21;
      v48 = v22;
      do
      {
        *(float32x4_t *)((char *)&v56 + v18) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, COERCE_FLOAT(*(_OWORD *)&v47[v18])), v15, *(float32x2_t *)&v47[v18], 1), v44, *(float32x4_t *)&v47[v18], 2), v16, *(float32x4_t *)&v47[v18], 3);
        v18 += 16;
      }
      while (v18 != 64);
      v5 = *(_QWORD **)(a1 + 64);
      if ((unint64_t)v5 <= i)
        goto LABEL_33;
      v23 = 0;
      v24 = (float32x4_t *)(*(_QWORD *)(a1 + 72) + (i << 6));
      v25 = v24[1];
      v26 = v24[2];
      v27 = v24[3];
      v28 = v56;
      v29 = v57;
      v30 = v58;
      v31 = v59;
      *(float32x4_t *)v47 = *v24;
      *(float32x4_t *)&v47[16] = v25;
      *(float32x4_t *)&v47[32] = v26;
      v48 = v27;
      do
      {
        *(float32x4_t *)((char *)&v56 + v23) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v28, COERCE_FLOAT(*(_OWORD *)&v47[v23])), v29, *(float32x2_t *)&v47[v23], 1), v30, *(float32x4_t *)&v47[v23], 2), v31, *(float32x4_t *)&v47[v23], 3);
        v23 += 16;
      }
      while (v23 != 64);
      result = v56;
      *(float32x4_t *)v47 = v56;
      *(float32x4_t *)&v47[16] = v57;
      *(float32x4_t *)&v47[32] = v58;
      v48 = v59;
      if (v8)
        break;
LABEL_19:
      if (++i == v45)
        goto LABEL_20;
    }
    v32 = 0;
    v5 = 0;
    while (1)
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (v3 <= (unint64_t)v5)
        break;
      v3 = *(_QWORD *)(a1 + 32);
      if (v3 <= (unint64_t)v5)
        goto LABEL_27;
      v33 = (float32x4_t *)(*(_QWORD *)(a1 + 40) + v32);
      re::AABB::transform((float32x4_t *)(*(_QWORD *)(a1 + 16) + v32), (float32x4_t *)v47, (uint64_t)&v56);
      v16 = (float32x4_t)xmmword_2260E5D70;
      v15 = v46;
      v34 = v56;
      v35 = *v33;
      v36 = v33[1];
      v35.i32[3] = 0;
      v34.i32[3] = 0;
      *v33 = vminnmq_f32(v35, v34);
      v37 = v57;
      v36.i32[3] = 0;
      v37.i32[3] = 0;
      result = vmaxnmq_f32(v36, v37);
      v33[1] = result;
      v5 = (_QWORD *)((char *)v5 + 1);
      v32 += 32;
      if (v8 == v5)
        goto LABEL_19;
    }
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v49 = 136315906;
    *(_QWORD *)&v49[4] = "operator[]";
    v50 = 1024;
    v51 = 468;
    v52 = 2048;
    v53 = v5;
    v54 = 2048;
    v55 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_27:
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v49 = 136315906;
    *(_QWORD *)&v49[4] = "operator[]";
    v50 = 1024;
    v51 = 468;
    v52 = 2048;
    v53 = v5;
    v54 = 2048;
    v55 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_28:
    *(_QWORD *)v49 = 0;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v47 = 136315906;
    *(_QWORD *)&v47[4] = "operator[]";
    *(_WORD *)&v47[12] = 1024;
    *(_DWORD *)&v47[14] = 468;
    *(_WORD *)&v47[18] = 2048;
    *(_QWORD *)&v47[20] = i;
    *(_WORD *)&v47[28] = 2048;
    *(_QWORD *)&v47[30] = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_29:
    *(_QWORD *)v49 = 0;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v47 = 136315906;
    *(_QWORD *)&v47[4] = "operator[]";
    *(_WORD *)&v47[12] = 1024;
    *(_DWORD *)&v47[14] = 468;
    *(_WORD *)&v47[18] = 2048;
    *(_QWORD *)&v47[20] = i;
    *(_WORD *)&v47[28] = 2048;
    *(_QWORD *)&v47[30] = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_30:
    *(_QWORD *)v49 = 0;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v47 = 136315906;
    *(_QWORD *)&v47[4] = "operator[]";
    *(_WORD *)&v47[12] = 1024;
    *(_DWORD *)&v47[14] = 468;
    *(_WORD *)&v47[18] = 2048;
    *(_QWORD *)&v47[20] = v6;
    *(_WORD *)&v47[28] = 2048;
    *(_QWORD *)&v47[30] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_31:
    *(_QWORD *)v49 = 0;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v47 = 136315906;
    *(_QWORD *)&v47[4] = "operator[]";
    *(_WORD *)&v47[12] = 1024;
    *(_DWORD *)&v47[14] = 468;
    *(_WORD *)&v47[18] = 2048;
    *(_QWORD *)&v47[20] = v6;
    *(_WORD *)&v47[28] = 2048;
    *(_QWORD *)&v47[30] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_32:
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, i, v17);
    _os_crash();
    __break(1u);
LABEL_33:
    *(_QWORD *)v49 = 0;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v47 = 136315906;
    *(_QWORD *)&v47[4] = "operator[]";
    *(_WORD *)&v47[12] = 1024;
    *(_DWORD *)&v47[14] = 468;
    *(_WORD *)&v47[18] = 2048;
    *(_QWORD *)&v47[20] = i;
    *(_WORD *)&v47[28] = 2048;
    *(_QWORD *)&v47[30] = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_20:
  if (v8)
  {
    v38 = 0;
    v6 = 0;
    while (1)
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (v3 <= (unint64_t)v6)
        goto LABEL_30;
      v3 = *(_QWORD *)(a1 + 32);
      if (v3 <= (unint64_t)v6)
        goto LABEL_31;
      v39 = (float32x4_t *)(*(_QWORD *)(a1 + 16) + v38);
      v40 = (float32x4_t *)(*(_QWORD *)(a1 + 40) + v38);
      v41 = *(float *)(a1 + 48);
      result = vaddq_f32(*v39, vmulq_n_f32(vsubq_f32(*v40, *v39), v41));
      v42 = vaddq_f32(v39[1], vmulq_n_f32(vsubq_f32(v40[1], v39[1]), v41));
      *v40 = result;
      v40[1] = v42;
      v6 = (_QWORD *)((char *)v6 + 1);
      v38 += 32;
      if (v8 == v6)
        return result;
    }
  }
  return result;
}

re::DynamicString *re::renderGraphResourceOperationTypeToString@<X0>(_anonymous_namespace_ *a1@<X0>, re::DynamicString *a2@<X8>)
{
  const char *v3;

  v3 = off_24ED74A60[*(int *)a1];
}

uint64_t re::RenderGraphCompiled::targetDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 304);
  v3 = *(unsigned int *)(a2 + 12);
  if (*(_QWORD *)(v2 + 16) <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(v2 + 32) + 112 * v3;
}

_QWORD *re::renderGraphResourceSetupToString@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, _BYTE *a5@<X4>, _BYTE *a6@<X5>, re::DynamicString *a7@<X8>)
{
  re::DynamicString *v13;
  uint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  const char *v17;
  size_t v18;
  size_t v19;
  size_t v20;
  uint64_t v21;
  const char *v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  const char *v26;
  size_t v27;
  BOOL v28;
  uint64_t v29;
  const char *v30;
  size_t v31;
  _anonymous_namespace_ *v32;
  _BYTE *v33;
  const char *v34;
  size_t v35;
  _anonymous_namespace_ *v36;
  uint64_t v37;
  unint64_t v38;
  __int128 *v39;
  _BYTE *v40;
  uint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  int v45;
  _anonymous_namespace_ *v46;
  char v47;
  _BYTE *v48;
  _BYTE *v49;
  uint64_t v50;
  unint64_t v51;
  const char *v52;
  size_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  const char *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  char *v62;
  _BYTE *v63;
  const char *v64;
  const char *v65;
  const char *v66;
  const char *v67;
  size_t v68;
  uint64_t v69;
  const char *v70;
  size_t v71;
  uint64_t v72;
  const char *v73;
  size_t v74;
  uint64_t v75;
  const char *v76;
  size_t v77;
  const char *v78;
  uint64_t v79;
  const char *v80;
  size_t v81;
  const char *v82;
  uint64_t v83;
  const char *v84;
  size_t v85;
  const char *v86;
  uint64_t v87;
  const char *v88;
  size_t v89;
  uint64_t v90;
  const char *v91;
  size_t v92;
  unsigned int v93;
  const char *v94;
  uint64_t v95;
  const char *v96;
  size_t v97;
  const char *v98;
  uint64_t v99;
  const char *v100;
  size_t v101;
  uint64_t v102;
  const char *v103;
  size_t v104;
  const char *v105;
  uint64_t v106;
  const char *v107;
  size_t v108;
  _BYTE *v110;
  uint64_t v111;
  re::DynamicString *v112;
  uint64_t v113;
  _BYTE *v114;
  uint64_t *v115;
  unint64_t v116;
  _BYTE *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  _BYTE v125[23];
  uint64_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  int v131;
  _BYTE v132[14];
  __int16 v133;
  unint64_t v134;
  __int16 v135;
  unint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;

  v13 = a7;
  v142 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)a7 + 1) = 0;
  *((_QWORD *)a7 + 2) = 0;
  *((_QWORD *)a7 + 3) = 0;
  re::DynamicString::setCapacity(v13, 0);
  v14 = *((_QWORD *)v13 + 1);
  v110 = a6;
  if ((v14 & 1) != 0)
  {
    *((_QWORD *)v13 + 1) = 1;
    v15 = (_BYTE *)*((_QWORD *)v13 + 2);
  }
  else
  {
    *((_BYTE *)v13 + 8) = v14 & 1;
    v15 = (char *)v13 + 9;
  }
  *v15 = 0;
  re::DynamicString::setCapacity(v13, 0x400uLL);
  v16 = *((_QWORD *)a1 + 1);
  if ((v16 & 1) != 0)
    v17 = (const char *)*((_QWORD *)a1 + 2);
  else
    v17 = a1 + 9;
  v18 = v16 >> 1;
  v19 = v16 >> 1;
  if ((*((_QWORD *)a1 + 1) & 1) != 0)
    v20 = v18;
  else
    v20 = v19;
  re::DynamicString::append(v13, v17, v20);
  if (*a4)
  {
    re::DynamicString::format((re::DynamicString *)"\tNodes: %zu\n", (re::DynamicString *)&v137, *(_QWORD *)(a3 + 16));
    v21 = BYTE8(v137) & 1;
    if ((BYTE8(v137) & 1) != 0)
      v22 = (const char *)v138;
    else
      v22 = (char *)&v137 + 9;
    if ((BYTE8(v137) & 1) != 0)
      v23 = *((_QWORD *)&v137 + 1) >> 1;
    else
      v23 = BYTE8(v137) >> 1;
    re::DynamicString::append(v13, v22, v23);
    if ((_QWORD)v137 && v21)
      (*(void (**)(void))(*(_QWORD *)v137 + 40))();
    if (*(_QWORD *)(a3 + 16))
    {
      v24 = 0;
      do
      {
        re::DynamicString::format((re::DynamicString *)"\t\t%s\n", (re::DynamicString *)&v137, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 8 * v24) + 16));
        v25 = BYTE8(v137) & 1;
        if ((BYTE8(v137) & 1) != 0)
          v26 = (const char *)v138;
        else
          v26 = (char *)&v137 + 9;
        if ((BYTE8(v137) & 1) != 0)
          v27 = *((_QWORD *)&v137 + 1) >> 1;
        else
          v27 = BYTE8(v137) >> 1;
        re::DynamicString::append(v13, v26, v27);
        if ((_QWORD)v137)
          v28 = v25 == 0;
        else
          v28 = 1;
        if (!v28)
          (*(void (**)(void))(*(_QWORD *)v137 + 40))();
        ++v24;
      }
      while (*(_QWORD *)(a3 + 16) > v24);
    }
  }
  if (*a5)
  {
    re::DynamicString::format((re::DynamicString *)"\tSteps: %zu\n", (re::DynamicString *)&v137, *(_QWORD *)(a3 + 56));
    v29 = BYTE8(v137) & 1;
    if ((BYTE8(v137) & 1) != 0)
      v30 = (const char *)v138;
    else
      v30 = (char *)&v137 + 9;
    if ((BYTE8(v137) & 1) != 0)
      v31 = *((_QWORD *)&v137 + 1) >> 1;
    else
      v31 = BYTE8(v137) >> 1;
    re::DynamicString::append(v13, v30, v31);
    v32 = (_anonymous_namespace_ *)v137;
    if ((_QWORD)v137 && v29)
      v32 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v137 + 40))();
    if (*(_QWORD *)(a3 + 56))
    {
      *((_QWORD *)&v127 + 1) = 0;
      v128 = 0uLL;
      re::DynamicString::setCapacity(&v127, 0);
      if ((BYTE8(v127) & 1) != 0)
      {
        *((_QWORD *)&v127 + 1) = 1;
        v33 = (_BYTE *)v128;
      }
      else
      {
        BYTE8(v127) &= 1u;
        v33 = (char *)&v127 + 9;
      }
      *v33 = 0;
      re::DynamicString::setCapacity(&v127, 0x80uLL);
      re::DynamicString::format((re::DynamicString *)"\t\t%-9s%-11s%-11s%-11s%-12s%-26s%-20s%-14s%s\n", (re::DynamicString *)&v137, "Resource", "Attachment", "ForceClear", "IsOptional", "RenderStage", "StepType", "ResourceDescription", "EnableNoClear", "Name");
      re::DynamicString::operator=((re::DynamicString *)&v127, (re::DynamicString *)&v137);
      if ((_QWORD)v137 && (BYTE8(v137) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v137 + 40))();
      re::DynamicString::trimExcess(&v127);
      if ((BYTE8(v127) & 1) != 0)
        v34 = (const char *)v128;
      else
        v34 = (char *)&v127 + 9;
      if ((BYTE8(v127) & 1) != 0)
        v35 = *((_QWORD *)&v127 + 1) >> 1;
      else
        v35 = BYTE8(v127) >> 1;
      re::DynamicString::append(v13, v34, v35);
      v36 = (_anonymous_namespace_ *)v127;
      if ((_QWORD)v127 && (BYTE8(v127) & 1) != 0)
        v36 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v127 + 40))();
      if (*(_QWORD *)(a3 + 56))
      {
        v37 = 0;
        v38 = 0;
        v112 = v13;
        v111 = a3;
        do
        {
          v39 = (__int128 *)(*(_QWORD *)(a3 + 72) + v37);
          v127 = *v39;
          v128 = v39[1];
          v129 = v39[2];
          v130 = v39[3];
          v116 = 0;
          v117 = 0;
          v118 = 0;
          re::DynamicString::setCapacity(&v115, 0);
          if ((v116 & 1) != 0)
          {
            v116 = 1;
            v40 = v117;
          }
          else
          {
            LOBYTE(v116) = v116 & 1;
            v40 = (char *)&v116 + 1;
          }
          *v40 = 0;
          re::DynamicString::setCapacity(&v115, 0x80uLL);
          v41 = v127;
          v42 = v129;
          v43 = BYTE1(v129);
          v44 = DWORD1(v130);
          v45 = HIDWORD(v129);
          v46 = re::renderGraphResourceOperationTypeToString((_anonymous_namespace_ *)((char *)&v127 + 4), (re::DynamicString *)&v123);
          v47 = v124;
          v48 = *(_BYTE **)&v125[7];
          v120 = 0;
          v121 = 0;
          v122 = 0;
          re::DynamicString::setCapacity(&v119, 0);
          re::DynamicString::setCapacity(&v119, 0x20uLL);
          v114 = v48;
          if ((v120 & 1) != 0)
          {
            v120 = 1;
            v49 = v121;
          }
          else
          {
            LOBYTE(v120) = v120 & 1;
            v49 = (char *)&v120 + 1;
          }
          *v49 = 0;
          v50 = *(_QWORD *)(a2 + 296);
          v51 = *(_QWORD *)(v50 + 16);
          if (v51 <= v44)
          {
            v126 = 0;
            v140 = 0u;
            v141 = 0u;
            v138 = 0u;
            v139 = 0u;
            v137 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v131 = 136315906;
            *(_QWORD *)v132 = "operator[]";
            *(_WORD *)&v132[8] = 1024;
            *(_DWORD *)&v132[10] = 789;
            v133 = 2048;
            v134 = v44;
            v135 = 2048;
            v136 = v51;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_240:
            v126 = 0;
            v140 = 0u;
            v141 = 0u;
            v138 = 0u;
            v139 = 0u;
            v137 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v131 = 136315906;
            *(_QWORD *)v132 = "operator[]";
            *(_WORD *)&v132[8] = 1024;
            *(_DWORD *)&v132[10] = 789;
            v133 = 2048;
            v134 = v44;
            v135 = 2048;
            v136 = v51;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_241:
            v126 = 0;
            v140 = 0u;
            v141 = 0u;
            v138 = 0u;
            v139 = 0u;
            v137 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v131 = 136315906;
            *(_QWORD *)v132 = "operator[]";
            *(_WORD *)&v132[8] = 1024;
            *(_DWORD *)&v132[10] = 789;
            v133 = 2048;
            v134 = v44;
            v135 = 2048;
            v136 = v51;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if (*(_DWORD *)(*(_QWORD *)(v50 + 32) + 48 * v44))
          {
            v52 = "Buffer";
            v53 = 6;
          }
          else
          {
            re::DynamicString::append((re::DynamicString *)&v119, "Target", 6uLL);
            if (DWORD1(v127) > 8 || ((1 << SBYTE4(v127)) & 0x1EE) == 0)
              goto LABEL_81;
            v54 = *(_QWORD *)(a2 + 296);
            v51 = *(_QWORD *)(v54 + 16);
            if (v51 <= v44)
              goto LABEL_241;
            v55 = *(_QWORD *)(v54 + 32) + 48 * v44;
            *(_QWORD *)&v137 = *(_QWORD *)(v55 + 8) >> 1;
            *((_QWORD *)&v137 + 1) = *(_QWORD *)(v55 + 24);
            v56 = *(_DWORD *)(re::RenderGraphCompiled::targetDescription(a2, (uint64_t)&v137) + 56);
            re::DynamicString::append((re::DynamicString *)&v119, " ", 1uLL);
            v57 = "DontCare";
            if (v56 == 1)
              v57 = "Load";
            if (v56 == 2)
              v58 = "Clear";
            else
              v58 = v57;
            v53 = strlen(v58);
            v52 = v58;
          }
          re::DynamicString::append((re::DynamicString *)&v119, v52, v53);
LABEL_81:
          re::DynamicString::resize(&v119, 0x13uLL, 0);
          v59 = *(_QWORD *)(a2 + 296);
          v51 = *(_QWORD *)(v59 + 16);
          if (v51 <= v44)
            goto LABEL_240;
          v113 = v37;
          v60 = a2;
          if ((_BYTE)v130)
            v61 = "True";
          else
            v61 = "False";
          if ((v120 & 1) != 0)
            v62 = v121;
          else
            v62 = (char *)&v120 + 1;
          if ((v47 & 1) != 0)
            v63 = v114;
          else
            v63 = v125;
          if (v45 == 1)
            v64 = "Vertex";
          else
            v64 = "Fragment";
          if (v43)
            v65 = "True";
          else
            v65 = "False";
          if (v42)
            v66 = "True";
          else
            v66 = "False";
          re::StringID::StringID((re::StringID *)&v131, (const StringID *)(*(_QWORD *)(v59 + 32) + 48 * v44 + 8));
          re::DynamicString::format((re::DynamicString *)"\t\t%-9d%-11d%-11s%-11s%-12s%-26s%-20s%-14s%s\n", (re::DynamicString *)&v137, v44, v41, v66, v65, v64, v63, v62, v61, *(_QWORD *)&v132[4]);
          re::DynamicString::operator=((re::DynamicString *)&v115, (re::DynamicString *)&v137);
          a3 = v111;
          v13 = v112;
          if ((_QWORD)v137)
          {
            if ((BYTE8(v137) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v137 + 40))();
            v137 = 0u;
            v138 = 0u;
          }
          re::StringID::destroyString((re::StringID *)&v131);
          if (v119 && (v120 & 1) != 0)
            (*(void (**)(void))(*v119 + 40))();
          a2 = v60;
          if (v123 && (v124 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v123 + 40))();
          re::DynamicString::trimExcess(&v115);
          if ((v116 & 1) != 0)
            v67 = v117;
          else
            v67 = (char *)&v116 + 1;
          if ((v116 & 1) != 0)
            v68 = v116 >> 1;
          else
            v68 = v116 >> 1;
          re::DynamicString::append(v112, v67, v68);
          v36 = (_anonymous_namespace_ *)v115;
          if (v115 && (v116 & 1) != 0)
            v36 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*v115 + 40))();
          ++v38;
          v37 = v113 + 64;
        }
        while (*(_QWORD *)(v111 + 56) > v38);
      }
    }
  }
  if (*v110)
  {
    re::DynamicString::format((re::DynamicString *)"\tProperties:\n", (re::DynamicString *)&v137);
    v69 = BYTE8(v137) & 1;
    if ((BYTE8(v137) & 1) != 0)
      v70 = (const char *)v138;
    else
      v70 = (char *)&v137 + 9;
    if ((BYTE8(v137) & 1) != 0)
      v71 = *((_QWORD *)&v137 + 1) >> 1;
    else
      v71 = BYTE8(v137) >> 1;
    re::DynamicString::append(v13, v70, v71);
    if ((_QWORD)v137 && v69)
      (*(void (**)(void))(*(_QWORD *)v137 + 40))();
    re::DynamicString::format((re::DynamicString *)"\t\t%-35s%s\n", (re::DynamicString *)&v137, "Key", "Value");
    v72 = BYTE8(v137) & 1;
    if ((BYTE8(v137) & 1) != 0)
      v73 = (const char *)v138;
    else
      v73 = (char *)&v137 + 9;
    if ((BYTE8(v137) & 1) != 0)
      v74 = *((_QWORD *)&v137 + 1) >> 1;
    else
      v74 = BYTE8(v137) >> 1;
    re::DynamicString::append(v13, v73, v74);
    if ((_QWORD)v137 && v72)
      (*(void (**)(void))(*(_QWORD *)v137 + 40))();
    re::DynamicString::format((re::DynamicString *)"\t\t%-35s%llu\n", (re::DynamicString *)&v137, "WriteProtectionOptions", *(_QWORD *)(a3 + 160));
    v75 = BYTE8(v137) & 1;
    if ((BYTE8(v137) & 1) != 0)
      v76 = (const char *)v138;
    else
      v76 = (char *)&v137 + 9;
    if ((BYTE8(v137) & 1) != 0)
      v77 = *((_QWORD *)&v137 + 1) >> 1;
    else
      v77 = BYTE8(v137) >> 1;
    re::DynamicString::append(v13, v76, v77);
    if ((_QWORD)v137 && v75)
      (*(void (**)(void))(*(_QWORD *)v137 + 40))();
    if (*(_BYTE *)(a3 + 168))
      v78 = "True";
    else
      v78 = "False";
    re::DynamicString::format((re::DynamicString *)"\t\t%-35s%s\n", (re::DynamicString *)&v137, "HasSideEffect", v78);
    v79 = BYTE8(v137) & 1;
    if ((BYTE8(v137) & 1) != 0)
      v80 = (const char *)v138;
    else
      v80 = (char *)&v137 + 9;
    if ((BYTE8(v137) & 1) != 0)
      v81 = *((_QWORD *)&v137 + 1) >> 1;
    else
      v81 = BYTE8(v137) >> 1;
    re::DynamicString::append(v13, v80, v81);
    if ((_QWORD)v137 && v79)
      (*(void (**)(void))(*(_QWORD *)v137 + 40))();
    if (*(_BYTE *)(a3 + 169))
      v82 = "True";
    else
      v82 = "False";
    re::DynamicString::format((re::DynamicString *)"\t\t%-35s%s\n", (re::DynamicString *)&v137, "HasCustomEncoders", v82);
    v83 = BYTE8(v137) & 1;
    if ((BYTE8(v137) & 1) != 0)
      v84 = (const char *)v138;
    else
      v84 = (char *)&v137 + 9;
    if ((BYTE8(v137) & 1) != 0)
      v85 = *((_QWORD *)&v137 + 1) >> 1;
    else
      v85 = BYTE8(v137) >> 1;
    re::DynamicString::append(v13, v84, v85);
    if ((_QWORD)v137 && v83)
      (*(void (**)(void))(*(_QWORD *)v137 + 40))();
    if (*(_BYTE *)(a3 + 170))
      v86 = "True";
    else
      v86 = "False";
    re::DynamicString::format((re::DynamicString *)"\t\t%-35s%s\n", (re::DynamicString *)&v137, "IsParallel", v86);
    v87 = BYTE8(v137) & 1;
    if ((BYTE8(v137) & 1) != 0)
      v88 = (const char *)v138;
    else
      v88 = (char *)&v137 + 9;
    if ((BYTE8(v137) & 1) != 0)
      v89 = *((_QWORD *)&v137 + 1) >> 1;
    else
      v89 = BYTE8(v137) >> 1;
    re::DynamicString::append(v13, v88, v89);
    if ((_QWORD)v137 && v87)
      (*(void (**)(void))(*(_QWORD *)v137 + 40))();
    re::DynamicString::format((re::DynamicString *)"\t\t%-35s%zu\n", (re::DynamicString *)&v137, "ThreadgroupMemoryLength", *(_QWORD *)(a3 + 176));
    v90 = BYTE8(v137) & 1;
    if ((BYTE8(v137) & 1) != 0)
      v91 = (const char *)v138;
    else
      v91 = (char *)&v137 + 9;
    if ((BYTE8(v137) & 1) != 0)
      v92 = *((_QWORD *)&v137 + 1) >> 1;
    else
      v92 = BYTE8(v137) >> 1;
    re::DynamicString::append(v13, v91, v92);
    if ((_QWORD)v137 && v90)
      (*(void (**)(void))(*(_QWORD *)v137 + 40))();
    v93 = *(unsigned __int8 *)(a3 + 184) - 1;
    if (v93 > 2)
      v94 = "Automatic";
    else
      v94 = off_24ED74AC8[(char)v93];
    re::DynamicString::format((re::DynamicString *)"\t\t%-35s%s\n", (re::DynamicString *)&v137, "TileSizeOverride", v94);
    v95 = BYTE8(v137) & 1;
    if ((BYTE8(v137) & 1) != 0)
      v96 = (const char *)v138;
    else
      v96 = (char *)&v137 + 9;
    if ((BYTE8(v137) & 1) != 0)
      v97 = *((_QWORD *)&v137 + 1) >> 1;
    else
      v97 = BYTE8(v137) >> 1;
    re::DynamicString::append(v13, v96, v97);
    if ((_QWORD)v137 && v95)
      (*(void (**)(void))(*(_QWORD *)v137 + 40))();
    if (*(_BYTE *)(a3 + 171))
      v98 = "True";
    else
      v98 = "False";
    re::DynamicString::format((re::DynamicString *)"\t\t%-35s%s\n", (re::DynamicString *)&v137, "EnableVRR", v98);
    v99 = BYTE8(v137) & 1;
    if ((BYTE8(v137) & 1) != 0)
      v100 = (const char *)v138;
    else
      v100 = (char *)&v137 + 9;
    if ((BYTE8(v137) & 1) != 0)
      v101 = *((_QWORD *)&v137 + 1) >> 1;
    else
      v101 = BYTE8(v137) >> 1;
    re::DynamicString::append(v13, v100, v101);
    if ((_QWORD)v137 && v99)
      (*(void (**)(void))(*(_QWORD *)v137 + 40))();
    re::DynamicString::format((re::DynamicString *)"\t\t%-35s%hhu\n", (re::DynamicString *)&v137, "ProgrammableBlendingAttachmentMask", *(unsigned __int8 *)(a3 + 185));
    v102 = BYTE8(v137) & 1;
    if ((BYTE8(v137) & 1) != 0)
      v103 = (const char *)v138;
    else
      v103 = (char *)&v137 + 9;
    if ((BYTE8(v137) & 1) != 0)
      v104 = *((_QWORD *)&v137 + 1) >> 1;
    else
      v104 = BYTE8(v137) >> 1;
    re::DynamicString::append(v13, v103, v104);
    if ((_QWORD)v137 && v102)
      (*(void (**)(void))(*(_QWORD *)v137 + 40))();
    if (*(_BYTE *)(a3 + 186))
      v105 = "True";
    else
      v105 = "False";
    re::DynamicString::format((re::DynamicString *)"\t\t%-35s%s\n", (re::DynamicString *)&v137, "EnableNoClearOptimization", v105);
    v106 = BYTE8(v137) & 1;
    if ((BYTE8(v137) & 1) != 0)
      v107 = (const char *)v138;
    else
      v107 = (char *)&v137 + 9;
    if ((BYTE8(v137) & 1) != 0)
      v108 = *((_QWORD *)&v137 + 1) >> 1;
    else
      v108 = BYTE8(v137) >> 1;
    re::DynamicString::append(v13, v107, v108);
    if ((_QWORD)v137 && v106)
      (*(void (**)(void))(*(_QWORD *)v137 + 40))();
  }
  return re::DynamicString::trimExcess(v13);
}

uint64_t re::DynamicArray<re::RenderGraphResourceOperation>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::RigTransform>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::RenderGraphResourceOperation>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

void **re::DynamicArray<re::RenderGraphResourceOperation>::copy(void **result, uint64_t a2)
{
  void **v3;
  unint64_t v4;
  void *v5;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<re::RigTransform>::setCapacity(result, *(_QWORD *)(a2 + 16));
    v5 = v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), ((_QWORD)v5 << 6) - 8);
      v5 = v3[2];
    }
    result = (void **)memcpy((char *)v3[4] + 64 * (_QWORD)v5, (const void *)(*(_QWORD *)(a2 + 32) + ((_QWORD)v5 << 6)), (v4 << 6) - ((_QWORD)v5 << 6));
  }
  else if (v4)
  {
    result = (void **)memmove(result[4], *(const void **)(a2 + 32), (v4 << 6) - 8);
  }
  v3[2] = (void *)v4;
  return result;
}

uint64_t re::DeformerFeatureFlags::isSkinningAssignLoggingEnabled(re::DeformerFeatureFlags *this)
{
  unsigned __int8 v1;
  unsigned __int8 *v2;
  int v4;
  const char *v5;
  BOOL v6;
  char v7;
  char v8[2];

  v2 = (unsigned __int8 *)&unk_255829000;
  if ((v1 & 1) == 0)
  {
    v2 = (_BYTE *)&unk_255829000;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"DeformerSkinningAssignLogging", v5, v8);
      if (v8[0])
        v6 = v8[1] == 0;
      else
        v6 = 1;
      v7 = !v6;
      re::DeformerFeatureFlags::isSkinningAssignLoggingEnabled(void)::enabled = v7;
      v2 = (_BYTE *)&unk_255829000;
    }
  }
  return v2[696];
}

uint64_t re::DeformerFeatureFlags::isCustomDeformerLoggingEnabled(re::DeformerFeatureFlags *this)
{
  unsigned __int8 v1;
  unsigned __int8 *v2;
  int v4;
  const char *v5;
  BOOL v6;
  char v7;
  char v8[2];

  v2 = (unsigned __int8 *)&unk_255829000;
  if ((v1 & 1) == 0)
  {
    v2 = (_BYTE *)&unk_255829000;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"CustomDeformerLogging", v5, v8);
      if (v8[0])
        v6 = v8[1] == 0;
      else
        v6 = 1;
      v7 = !v6;
      re::DeformerFeatureFlags::isCustomDeformerLoggingEnabled(void)::enabled = v7;
      v2 = (_BYTE *)&unk_255829000;
    }
  }
  return v2[712];
}

void re::MaterialTextureParam::setString(re::MaterialTextureParam *this, const re::DynamicString *a2)
{
  re::AssetPath *v4;
  re *v5;
  re::AssetPath *v6;
  uint64_t v7;
  re::AssetPath *v8;
  re::Allocator *v9;
  __int128 v10;
  uint64_t v11;

  v4 = (const re::DynamicString *)((char *)a2 + 9);
  if ((*((_QWORD *)a2 + 1) & 1) != 0)
    v5 = (re *)*((_QWORD *)a2 + 2);
  else
    v5 = (const re::DynamicString *)((char *)a2 + 9);
  if (re::materialTextureParamIsAsset(v5, (const char *)a2))
  {
    v10 = 0uLL;
    v11 = 0;
    if ((*((_QWORD *)a2 + 1) & 1) != 0)
      v6 = (re::AssetPath *)*((_QWORD *)a2 + 2);
    else
      v6 = v4;
    re::AssetHandle::setSerializationString((re::DynamicString *)&v10, v6, *(re::Allocator **)a2);
    v7 = *((unsigned int *)this + 8);
    if ((_DWORD)v7 != -1)
      ((void (*)(re::Allocator **, re::MaterialTextureParam *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS6_11AssetHandleEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix_0
                                                                          + v7))(&v9, this);
    *(_OWORD *)this = v10;
    v10 = 0uLL;
    *((_QWORD *)this + 2) = v11;
    v11 = 0;
    *((_DWORD *)this + 8) = 1;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v10);
  }
  else
  {
    v8 = (re::AssetPath *)*((_QWORD *)a2 + 2);
    if ((*((_QWORD *)a2 + 1) & 1) == 0)
      v8 = v4;
    v9 = *(re::Allocator **)a2;
    *(_QWORD *)&v10 = v8;
    std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__emplace[abi:nn180100]<0ul,char const*,re::Allocator *>(this, (const char **)&v10, &v9);
  }
}

re::MaterialTextureParam *re::MaterialTextureParam::MaterialTextureParam(re::MaterialTextureParam *this, const re::DynamicString *a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  re::DynamicString::setCapacity(this, 0);
  *((_DWORD *)this + 8) = 0;
  re::MaterialTextureParam::setString(this, a2);
  return this;
}

char *re::MaterialTextureParam::serializationString(re::MaterialTextureParam *this, uint64_t a2)
{
  int v2;
  uint64_t v3;
  char *v4;
  char *result;
  char *v6;

  if (!this)
    goto LABEL_20;
  v2 = *((_DWORD *)this + 8);
  if (v2)
  {
    if (v2 == 1)
    {
      v3 = *((_QWORD *)this + 2);
      if (v3)
      {
        if ((*(_BYTE *)(v3 + 8) & 1) != 0)
        {
          v4 = *(char **)(v3 + 16);
          if (!v4)
            goto LABEL_13;
        }
        else
        {
          v4 = (char *)(v3 + 9);
        }
      }
      else
      {
        v4 = &str_1_22;
      }
      if (*v4)
      {
LABEL_16:
        if (v4)
          return v4;
        else
          return (char *)&str_17_29;
      }
LABEL_13:
      v6 = (char *)re::AssetHandle::legacy_assetPath(this);
      if ((v6[48] & 1) != 0)
        v4 = (char *)*((_QWORD *)v6 + 7);
      else
        v4 = v6 + 49;
      goto LABEL_16;
    }
LABEL_20:
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unexpected; MaterialTextureParam should be an AssetHandle or a DynamicString",
      "false",
      "serializationString",
      104);
    result = (char *)_os_crash();
    __break(1u);
    return result;
  }
  if ((*((_BYTE *)this + 8) & 1) != 0)
    return (char *)*((_QWORD *)this + 2);
  else
    return (char *)this + 9;
}

uint64_t re::MaterialTextureParam::introspectionSerialize(re::DynamicString *a1, _QWORD *a2, uint64_t a3, re::DynamicString *this)
{
  int v4;
  uint64_t result;

  if (a1)
  {
    v4 = *((_DWORD *)a1 + 8);
    if (!v4)
    {
      re::DynamicString::operator=(this, a1);
      return 1;
    }
    if (v4 == 1)
      return re::AssetHandle::introspectionSerialize(a2, a3, a1, this);
  }
  re::internal::assertLog((re::internal *)4, (uint64_t)a2, a3, this, "assertion failure: '%s' (%s:line %i) Unexpected; MaterialTextureParam should be an AssetHandle or a DynamicString",
    "false",
    "introspectionSerialize",
    120);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::MaterialTextureParam::introspectionDeserialize(uint64_t a1, re::Allocator *a2, _QWORD *a3, int a4, re *this)
{
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  uint64_t v14;
  const char *v15;
  re::Allocator *v16;
  char v17;

  v15 = (const char *)this;
  v16 = a2;
  if (re::materialTextureParamIsAsset(this, (const char *)a2))
  {
    v13 = 0uLL;
    v14 = 0;
    v10 = re::AssetHandle::introspectionDeserialize(a2, a3, a4, (re::DynamicString *)&v13, (char *)this);
    v11 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v11 != -1)
      ((void (*)(char *, uint64_t))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS6_11AssetHandleEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix_0
                                             + v11))(&v17, a1);
    *(_OWORD *)a1 = v13;
    v13 = 0uLL;
    *(_QWORD *)(a1 + 16) = v14;
    v14 = 0;
    *(_DWORD *)(a1 + 32) = 1;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v13);
  }
  else
  {
    std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__emplace[abi:nn180100]<0ul,char const*,re::Allocator *>((re::DynamicString *)a1, &v15, &v16);
    return 1;
  }
  return v10;
}

uint64_t re::MaterialTechniqueGroupData::deinit(re::MaterialTechniqueGroupData *this)
{
  uint64_t v2;
  uint64_t v3;
  const re::DynamicString *v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *(_QWORD *)this;
  if (v2)
  {
    if ((*((_BYTE *)this + 8) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 2));
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    v4 = (const re::DynamicString *)*((_QWORD *)this + 8);
    v5 = 32 * v3;
    do
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v7, v4);
      if (v7 && (v8 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v7 + 40))();
      v4 = (const re::DynamicString *)((char *)v4 + 32);
      v5 -= 32;
    }
    while (v5);
  }
  return re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32);
}

uint64_t re::MaterialTechniqueQualityLevelSetData::deinit(re::MaterialTechniqueQualityLevelSetData *this)
{
  uint64_t v2;
  uint64_t v3;
  const re::DynamicString *v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v2 = *(_QWORD *)this;
  if (v2)
  {
    if ((*((_BYTE *)this + 8) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 2));
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    v4 = (const re::DynamicString *)*((_QWORD *)this + 12);
    v5 = 32 * v3;
    do
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v7, v4);
      if (v7 && (v8 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v7 + 40))();
      v4 = (const re::DynamicString *)((char *)v4 + 32);
      v5 -= 32;
    }
    while (v5);
  }
  return re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 64);
}

double re::MaterialDefinitionFile::deinit(re::MaterialDefinitionFile *this)
{
  uint64_t *v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  __n128 v9;
  unsigned int v10;
  uint64_t v11;
  __n128 *v12;
  uint64_t v13;
  __n128 *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  __n128 v18;
  uint64_t v19;
  const re::DynamicString *v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  _OWORD v26[2];
  uint64_t v27[6];

  v2 = (uint64_t *)((char *)this + 144);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 24);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v2);
  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 30);
  v3 = re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 36);
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 42, v3);
  re::DynamicArray<re::MaterialTechniqueData>::deinit((uint64_t)this + 384);
  re::DynamicArray<re::MaterialTechniqueGroupData>::deinit((uint64_t)this + 424);
  re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::deinit((uint64_t)this + 648);
  v4 = *((unsigned int *)this + 124);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*((_QWORD *)this + 60) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 20;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *((_DWORD *)this + 124);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v8 = v5;
    v9 = 0uLL;
    v10 = *((_DWORD *)this + 124);
    do
    {
      v11 = *((_QWORD *)this + 60);
      v12 = (__n128 *)(v11 + 80 * v8);
      v15 = v12[3].n128_i64[0];
      v14 = v12 + 3;
      v13 = v15;
      if (v15)
      {
        if ((*(_BYTE *)(v11 + 80 * v8 + 56) & 1) != 0)
        {
          (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v13 + 40))(v13, *(_QWORD *)(v11 + 80 * v8 + 64), v9);
          v9 = 0uLL;
        }
        *v14 = v9;
        v14[1] = v9;
        v10 = *((_DWORD *)this + 124);
      }
      if (v10 <= (int)v5 + 1)
        v16 = v5 + 1;
      else
        v16 = v10;
      while (1)
      {
        v8 = (v5 + 1);
        if (v16 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v17 = v8;
        if ((*(_DWORD *)(*((_QWORD *)this + 60) + 80 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_20;
      }
      v17 = v16;
LABEL_20:
      LODWORD(v5) = v17;
    }
    while ((_DWORD)v4 != v17);
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 58);
  v18.n128_f64[0] = re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 64);
  v19 = *((_QWORD *)this + 72);
  if (v19)
  {
    v20 = (const re::DynamicString *)*((_QWORD *)this + 74);
    v21 = 80 * v19;
    do
    {
      re::DynamicString::DynamicString((re::DynamicString *)v26, v20);
      re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v27, (uint64_t)v20 + 32);
      if (*(_QWORD *)&v26[0])
      {
        if ((BYTE8(v26[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v26[0] + 40))();
        v22 = 0.0;
        memset(v26, 0, sizeof(v26));
      }
      v23 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v27, v22);
      v18.n128_f64[0] = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v27, v23);
      if (*(_QWORD *)&v26[0] && (BYTE8(v26[0]) & 1) != 0)
        (*(void (**)(double))(**(_QWORD **)&v26[0] + 40))(v18.n128_f64[0]);
      v20 = (const re::DynamicString *)((char *)v20 + 80);
      v21 -= 80;
    }
    while (v21);
  }
  if (*(_QWORD *)this)
  {
    if ((*((_BYTE *)this + 8) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, __n128))(**(_QWORD **)this + 40))(*(_QWORD *)this, *((_QWORD *)this + 2), v18);
    v18 = 0uLL;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  v24 = *((_QWORD *)this + 4);
  if (v24)
  {
    if ((*((_BYTE *)this + 40) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v24 + 40))(v24, *((_QWORD *)this + 6), v18);
    v18.n128_u64[0] = 0;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  return v18.n128_f64[0];
}

id re::MaterialSamplerData::makeDescriptor@<X0>(re::MaterialSamplerData *this@<X0>, _QWORD *a2@<X8>)
{
  re *v4;
  NSObject *v5;
  _BYTE *v6;
  id v7;
  double v8;
  double v9;
  uint64_t v11;
  char v12;
  _BYTE v13[23];
  uint8_t buf[4];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)this + 1) != 5)
  {
    if (*((_DWORD *)this + 2) != 5)
    {
      if (*((_DWORD *)this + 3) != 5)
        goto LABEL_15;
      goto LABEL_9;
    }
    goto LABEL_5;
  }
  v4 = (re *)re::DynamicString::append((re::DynamicString *)&v11, "ClampToBorderColor (R Address Mode)", 0x23uLL);
  if (*((_DWORD *)this + 2) == 5)
  {
    re::DynamicString::append((re::DynamicString *)&v11, ", ", 2uLL);
LABEL_5:
    v4 = (re *)re::DynamicString::append((re::DynamicString *)&v11, "ClampToBorderColor (S Address Mode)", 0x23uLL);
  }
  if (*((_DWORD *)this + 3) != 5)
    goto LABEL_10;
  re::DynamicString::append((re::DynamicString *)&v11, ", ", 2uLL);
LABEL_9:
  v4 = (re *)re::DynamicString::append((re::DynamicString *)&v11, "ClampToBorderColor (T Address Mode)", 0x23uLL);
LABEL_10:
  v5 = *re::graphicsLogObjects(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if ((v12 & 1) != 0)
      v6 = *(_BYTE **)&v13[7];
    else
      v6 = v13;
    *(_DWORD *)buf = 136315138;
    v15 = v6;
    _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }
LABEL_15:
  if (v11 && (v12 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v11 + 40))();
  v7 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD6F0], sel_alloc), sel_init);
  *a2 = v7;
  objc_msgSend(v7, sel_setNormalizedCoordinates_, *(unsigned __int8 *)this);
  objc_msgSend(v7, sel_setRAddressMode_, *((int *)this + 1));
  objc_msgSend(v7, sel_setSAddressMode_, *((int *)this + 2));
  objc_msgSend(v7, sel_setTAddressMode_, *((int *)this + 3));
  objc_msgSend(v7, sel_setBorderColor_, *((int *)this + 4));
  objc_msgSend(v7, sel_setMinFilter_, *((int *)this + 5));
  objc_msgSend(v7, sel_setMagFilter_, *((int *)this + 6));
  objc_msgSend(v7, sel_setMipFilter_, *((int *)this + 7));
  LODWORD(v8) = *((_DWORD *)this + 9);
  objc_msgSend(v7, sel_setLodMinClamp_, v8);
  LODWORD(v9) = *((_DWORD *)this + 10);
  objc_msgSend(v7, sel_setLodMaxClamp_, v9);
  objc_msgSend(v7, sel_setLodAverage_, *((unsigned __int8 *)this + 1));
  objc_msgSend(v7, sel_setMaxAnisotropy_, *((_QWORD *)this + 6));
  return objc_msgSend(v7, sel_setCompareFunction_, *((int *)this + 8));
}

unint64_t re::MaterialSamplerData::hash(re::MaterialSamplerData *this)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v2 = 0xBF58476D1CE4E5B9 * (*((int *)this + 1) ^ ((unint64_t)*((int *)this + 1) >> 30));
  v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  v4 = 0xBF58476D1CE4E5B9 * (*((int *)this + 2) ^ ((unint64_t)*((int *)this + 2) >> 30));
  v5 = (0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31);
  v6 = 0xBF58476D1CE4E5B9 * (*((int *)this + 3) ^ ((unint64_t)*((int *)this + 3) >> 30));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  v8 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (*((int *)this + 4) ^ ((unint64_t)*((int *)this + 4) >> 30))) ^ ((0xBF58476D1CE4E5B9 * (*((int *)this + 4) ^ ((unint64_t)*((int *)this + 4) >> 30))) >> 27));
  v9 = v8 ^ (v8 >> 31);
  v10 = 0xBF58476D1CE4E5B9 * (*((int *)this + 5) ^ ((unint64_t)*((int *)this + 5) >> 30));
  v11 = re::hashCombine(*(unsigned __int8 *)this, v3, v5, v7, v9, (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31));
  v12 = 0xBF58476D1CE4E5B9 * (*((int *)this + 6) ^ ((unint64_t)*((int *)this + 6) >> 30));
  v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
  v14 = 0xBF58476D1CE4E5B9 * (*((int *)this + 7) ^ ((unint64_t)*((int *)this + 7) >> 30));
  v15 = (0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) ^ ((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) >> 31);
  LODWORD(v14) = 73244475 * (*((_DWORD *)this + 9) ^ HIWORD(*((_DWORD *)this + 9)));
  v16 = (73244475 * (v14 ^ WORD1(v14))) ^ ((73244475 * (v14 ^ WORD1(v14))) >> 16);
  LODWORD(v14) = 73244475
               * ((73244475 * (*((_DWORD *)this + 10) ^ HIWORD(*((_DWORD *)this + 10)))) ^ ((73244475 * (*((_DWORD *)this + 10) ^ HIWORD(*((_DWORD *)this + 10)))) >> 16));
  v17 = v14 ^ WORD1(v14);
  v18 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * *((unsigned __int8 *)this + 1)) ^ ((0xBF58476D1CE4E5B9
                                                                   * *((unsigned __int8 *)this + 1)) >> 27));
  v19 = v18 ^ (v18 >> 31);
  v20 = 0xBF58476D1CE4E5B9 * (*((_QWORD *)this + 6) ^ (*((_QWORD *)this + 6) >> 30));
  v21 = re::hashCombine(v13, v15, v16, v17, v19, (0x94D049BB133111EBLL * (v20 ^ (v20 >> 27))) ^ ((0x94D049BB133111EBLL * (v20 ^ (v20 >> 27))) >> 31));
  v22 = 0xBF58476D1CE4E5B9 * (*((int *)this + 8) ^ ((unint64_t)*((int *)this + 8) >> 30));
  return ((v11 << 6)
        + (v11 >> 2)
        - 0x61C8864680B583E9
        + (((v21 << 6)
          + (v21 >> 2)
          + ((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) ^ ((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) >> 31))
          - 0x61C8864680B583E9) ^ v21)) ^ v11;
}

unint64_t re::hashCombine(unint64_t this, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;

  v6 = (a2 + (this << 6) + (this >> 2) - 0x61C8864680B583E9) ^ this;
  v7 = (a4 + (a3 << 6) + (a3 >> 2) - 0x61C8864680B583E9) ^ a3;
  return ((v6 << 6)
        + (v6 >> 2)
        - 0x61C8864680B583E9
        + (((v7 << 6) + (v7 >> 2) + ((a6 + (a5 << 6) + (a5 >> 2) - 0x61C8864680B583E9) ^ a5) - 0x61C8864680B583E9) ^ v7)) ^ v6;
}

void re::OptionalMaterialSamplerData::makeSamplerData(re::OptionalMaterialSamplerData *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _DWORD *v6;
  _BYTE *v7;
  int *v8;
  int v9;
  int *v10;
  int v11;
  int *v12;
  int v13;
  int *v14;
  int v15;
  int *v16;
  int v17;
  int *v18;
  int v19;
  _DWORD *v20;
  int *v21;
  int v22;
  int *v23;
  int v24;
  _BYTE *v25;
  uint64_t *v26;
  _QWORD *v27;
  _DWORD *v28;
  unsigned __int8 v29;
  uint64_t v30;
  int v31;
  const char *v32;
  uint64_t v33;
  uint64_t *v34;
  _BYTE v35[8];
  uint64_t v36;

  switch(*(_BYTE *)this)
  {
    case 0:
      v2 = 1;
      *(_WORD *)a2 = 1;
      v3 = xmmword_226134DD0;
      goto LABEL_10;
    case 1:
      v2 = 1;
      *(_WORD *)a2 = 1;
      v4 = xmmword_226134DD0;
      goto LABEL_12;
    case 3:
      *(_WORD *)a2 = 1;
      *(_OWORD *)(a2 + 4) = xmmword_226134DD0;
      *(_QWORD *)(a2 + 20) = 0x100000001;
      *(_DWORD *)(a2 + 28) = 2;
      *(_QWORD *)(a2 + 36) = 0x7F80000000000000;
      v2 = 4;
      goto LABEL_19;
    case 4:
      v2 = 1;
      *(_WORD *)a2 = 1;
      *(_QWORD *)(a2 + 4) = 0;
      *(_QWORD *)(a2 + 20) = 0;
      *(_QWORD *)(a2 + 12) = 0;
      goto LABEL_14;
    case 5:
      v2 = 1;
      *(_WORD *)a2 = 1;
      *(_QWORD *)(a2 + 12) = 0;
      *(_QWORD *)(a2 + 4) = 0;
      goto LABEL_13;
    case 6:
      v2 = 1;
      *(_WORD *)a2 = 1;
      *(_QWORD *)(a2 + 12) = 0;
      *(_QWORD *)(a2 + 4) = 0;
      goto LABEL_17;
    case 7:
      v2 = 1;
      *(_WORD *)a2 = 1;
      v3 = xmmword_226134DC0;
LABEL_10:
      *(_OWORD *)(a2 + 4) = v3;
      *(_DWORD *)(a2 + 20) = 0;
      *(_DWORD *)(a2 + 24) = 0;
      goto LABEL_14;
    case 8:
      v2 = 1;
      *(_WORD *)a2 = 1;
      v4 = xmmword_226134DC0;
LABEL_12:
      *(_OWORD *)(a2 + 4) = v4;
LABEL_13:
      *(_QWORD *)(a2 + 20) = 0x100000001;
LABEL_14:
      *(_DWORD *)(a2 + 28) = 1;
      goto LABEL_18;
    case 9:
      v2 = 1;
      *(_WORD *)a2 = 1;
      v5 = xmmword_226134DC0;
      goto LABEL_16;
    default:
      v2 = 1;
      *(_WORD *)a2 = 1;
      v5 = xmmword_226134DD0;
LABEL_16:
      *(_OWORD *)(a2 + 4) = v5;
LABEL_17:
      *(_QWORD *)(a2 + 20) = 0x100000001;
      *(_DWORD *)(a2 + 28) = 2;
LABEL_18:
      *(_QWORD *)(a2 + 36) = 0x7F80000000000000;
LABEL_19:
      *(_QWORD *)(a2 + 48) = v2;
      *(_DWORD *)(a2 + 32) = 0;
      v6 = (_DWORD *)(a2 + 32);
      if (*((_BYTE *)this + 1))
        v7 = (char *)this + 2;
      else
        v7 = (_BYTE *)a2;
      *(_BYTE *)a2 = *v7;
      v8 = (int *)(a2 + 4);
      if (*((_BYTE *)this + 8))
        v8 = (int *)((char *)this + 12);
      v9 = *v8;
      v10 = (int *)(a2 + 8);
      if (*((_BYTE *)this + 16))
        v10 = (int *)((char *)this + 20);
      v11 = *v10;
      *(_DWORD *)(a2 + 4) = v9;
      *(_DWORD *)(a2 + 8) = v11;
      v12 = (int *)(a2 + 12);
      if (*((_BYTE *)this + 24))
        v12 = (int *)((char *)this + 28);
      v13 = *v12;
      v14 = (int *)(a2 + 16);
      if (*((_BYTE *)this + 32))
        v14 = (int *)((char *)this + 36);
      v15 = *v14;
      *(_DWORD *)(a2 + 12) = v13;
      *(_DWORD *)(a2 + 16) = v15;
      v16 = (int *)(a2 + 20);
      if (*((_BYTE *)this + 40))
        v16 = (int *)((char *)this + 44);
      v17 = *v16;
      v18 = (int *)(a2 + 24);
      if (*((_BYTE *)this + 48))
        v18 = (int *)((char *)this + 52);
      v19 = *v18;
      *(_DWORD *)(a2 + 20) = v17;
      *(_DWORD *)(a2 + 24) = v19;
      v20 = (_DWORD *)(a2 + 28);
      if (*((_BYTE *)this + 56))
        v20 = (_DWORD *)((char *)this + 60);
      *(_DWORD *)(a2 + 28) = *v20;
      v21 = (int *)(a2 + 36);
      if (*((_BYTE *)this + 72))
        v21 = (int *)((char *)this + 76);
      v22 = *v21;
      v23 = (int *)(a2 + 40);
      if (*((_BYTE *)this + 80))
        v23 = (int *)((char *)this + 84);
      v24 = *v23;
      *(_DWORD *)(a2 + 36) = v22;
      *(_DWORD *)(a2 + 40) = v24;
      if (*((_BYTE *)this + 3))
        v25 = (char *)this + 4;
      else
        v25 = (_BYTE *)(a2 + 1);
      *(_BYTE *)(a2 + 1) = *v25;
      v26 = (uint64_t *)(a2 + 48);
      if (*((_BYTE *)this + 88))
        v27 = (_QWORD *)((char *)this + 96);
      else
        v27 = (_QWORD *)(a2 + 48);
      *(_QWORD *)(a2 + 48) = *v27;
      if (*((_BYTE *)this + 64))
        v28 = (_DWORD *)((char *)this + 68);
      else
        v28 = (_DWORD *)(a2 + 32);
      *v6 = *v28;
      v29 = atomic_load((unsigned __int8 *)&qword_254118F08);
      if ((v29 & 1) == 0)
      {
        v34 = v26;
        v31 = __cxa_guard_acquire(&qword_254118F08);
        v26 = v34;
        if (v31)
        {
          re::Defaults::uint64Value((re::Defaults *)"materialSamplerMaxAnisotropy", v32, (uint64_t)v35);
          if (v35[0])
            v33 = v36;
          else
            v33 = 0;
          _MergedGlobals_376 = v33;
          __cxa_guard_release(&qword_254118F08);
          v26 = v34;
        }
      }
      v30 = _MergedGlobals_376;
      if (_MergedGlobals_376)
      {
        if ((unint64_t)_MergedGlobals_376 >= 0x10)
          v30 = 16;
        *v26 = v30;
      }
      return;
  }
}

float re::OptionalMaterialSamplerData::OptionalMaterialSamplerData(uint64_t a1, uint64_t a2)
{
  float result;

  *(_WORD *)a1 = 266;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 3) = 1;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 40) = 1;
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 20);
  *(_BYTE *)(a1 + 48) = 1;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 64) = 1;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 72) = 1;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 36);
  *(_BYTE *)(a1 + 80) = 1;
  result = *(float *)(a2 + 40);
  *(float *)(a1 + 84) = result;
  *(_BYTE *)(a1 + 88) = 1;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 48);
  return result;
}

id re::MaterialSamplerData::fromDescriptor@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  id result;

  *(_BYTE *)a2 = objc_msgSend(*a1, sel_normalizedCoordinates);
  *(_DWORD *)(a2 + 4) = objc_msgSend(*a1, sel_rAddressMode);
  *(_DWORD *)(a2 + 8) = objc_msgSend(*a1, sel_sAddressMode);
  *(_DWORD *)(a2 + 12) = objc_msgSend(*a1, sel_tAddressMode);
  *(_DWORD *)(a2 + 16) = objc_msgSend(*a1, sel_borderColor);
  *(_DWORD *)(a2 + 20) = objc_msgSend(*a1, sel_minFilter);
  *(_DWORD *)(a2 + 24) = objc_msgSend(*a1, sel_magFilter);
  *(_DWORD *)(a2 + 28) = objc_msgSend(*a1, sel_mipFilter);
  objc_msgSend(*a1, sel_lodMinClamp);
  *(_DWORD *)(a2 + 36) = v4;
  objc_msgSend(*a1, sel_lodMaxClamp);
  *(_DWORD *)(a2 + 40) = v5;
  *(_BYTE *)(a2 + 1) = objc_msgSend(*a1, sel_lodAverage);
  *(_QWORD *)(a2 + 48) = objc_msgSend(*a1, sel_maxAnisotropy);
  result = objc_msgSend(*a1, sel_compareFunction);
  *(_DWORD *)(a2 + 32) = (_DWORD)result;
  return result;
}

unint64_t re::FunctionLink::appendFunctionConstant(uint64_t a1, re::DynamicString *a2, char *a3, unsigned __int16 a4)
{
  size_t Size;
  unint64_t v9;
  __int128 v11;

  Size = MTLDataTypeGetSize();
  v9 = *(_QWORD *)(a1 + 248);
  re::DynamicArray<REFrameAnalysisBottleneck>::copy((_QWORD *)(a1 + 232), v9, a3, Size);
  *(_QWORD *)&v11 = v9;
  *((_QWORD *)&v11 + 1) = a4;
  return re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::ConstantDataEntry&>(a1 + 184, a2, &v11);
}

unint64_t re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::ConstantDataEntry&>(uint64_t a1, re::DynamicString *a2, _OWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char v14;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(_QWORD *)(a1 + 16) + ((unint64_t)v12 << 6) + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + (v9 << 6);
    if (re::DynamicString::operator==(v11 + 16, (uint64_t)a2))
      return v11 + 48;
    v9 = *(_DWORD *)(v11 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

re::DynamicString *std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__emplace[abi:nn180100]<0ul,char const*,re::Allocator *>(re::DynamicString *this, const char **a2, re::Allocator **a3)
{
  uint64_t v6;
  re::DynamicString *result;
  char v8;

  v6 = *((unsigned int *)this + 8);
  if ((_DWORD)v6 != -1)
    ((void (*)(char *, re::DynamicString *))*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8nn180100IZNS0_6__dtorINS0_8__traitsIJN2re13DynamicStringENS6_11AssetHandleEEEELNS0_6_TraitE1EE9__destroyB8nn180100EvEUlRT_E_JRSB_EEEDcOSC_DpOT0____fmatrix_0
                                                       + v6))(&v8, this);
  *((_DWORD *)this + 8) = -1;
  result = re::DynamicString::DynamicString(this, *a2, *a3);
  *((_DWORD *)this + 8) = 0;
  return result;
}

uint64_t re::generatePatchPlane@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  float v7;
  unint64_t v8;
  unint64_t v9;
  __n128 v10;
  float v11;
  char v12;
  double v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unsigned __int16 v21;
  uint64_t v22;
  unsigned __int16 v23;
  int v24;
  _anonymous_namespace_ *v25;
  _anonymous_namespace_ *v26;
  int32x4_t v27;
  int32x4_t v28;
  int8x16_t v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type size;
  std::string *v36;
  std::string::size_type v37;
  void **v38;
  int v39;
  int v40;
  re *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  id *v45;
  id *v46;
  uint64_t result;
  __n128 v48;
  std::string v49;
  std::string v50;
  std::string v51;
  void *__p[2];
  uint64_t v53;
  _OWORD v54[2];
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[2];
  uint64_t v59;
  int v60;
  uint64_t v61;
  _QWORD v62[2];
  uint64_t v63;
  int v64;
  uint64_t v65;
  _BYTE v66[32];
  __int128 v67;
  __int128 v68;

  v6 = 0;
  v65 = 0;
  v62[1] = 0;
  v63 = 0;
  v62[0] = 0;
  v64 = 0;
  v7 = 1.0;
  v8 = *(_QWORD *)a2;
  do
  {
    v9 = 0;
    do
    {
      v10.n128_f32[0] = (float)((float)v9 / (float)v8) + -0.5;
      v11 = (float)((float)v6 / (float)*(unint64_t *)(a2 + 8)) + -0.5;
      if (*(_DWORD *)(a2 + 16))
        v12 = 2;
      else
        v12 = 1;
      v10.n128_u32[1] = 0;
      v10.n128_u32[2] = 0;
      v10.n128_f32[3] = v7;
      v48 = v10;
      *(float *)((unint64_t)&v48 & 0xFFFFFFFFFFFFFFF3 | (4 * (v12 & 3))) = v11;
      v55 = v48;
      *(_QWORD *)&v13 = re::DynamicArray<re::Vector4<float>>::add((_anonymous_namespace_ *)v62, &v55).n128_u64[0];
      v7 = 1.0;
      ++v9;
      v8 = *(_QWORD *)a2;
    }
    while (v9 <= *(_QWORD *)a2);
    ++v6;
    v14 = *(_QWORD *)(a2 + 8);
  }
  while (v6 <= v14);
  v61 = 0;
  v58[1] = 0;
  v59 = 0;
  v58[0] = 0;
  v60 = 0;
  if (v14)
  {
    v15 = 0;
    do
    {
      v16 = v15 + 1;
      if (v8)
      {
        v17 = 0;
        do
        {
          if (*(_DWORD *)(a2 + 16))
          {
            v18 = v17 + 1;
            v19 = v8 + 1;
            v20 = (v8 + 1) * v15;
            v21 = v20 + v17 + 1;
            v22 = v19 * v16;
            v23 = v19 * v16 + v17;
          }
          else
          {
            v24 = v8 + 1;
            v22 = (v8 + 1) * v15;
            v21 = v22 + v17;
            v20 = v24 * v16;
            v18 = v17 + 1;
            v23 = v20 + v17 + 1;
          }
          v55.n128_u64[0] = v21 | ((v22 + v18) << 48) | ((v20 + (_DWORD)v17) << 16) | ((unint64_t)v23 << 32);
          re::DynamicArray<unsigned short>::add(v58, &v55);
          re::DynamicArray<unsigned short>::add(v58, &v55.n128_u16[3]);
          re::DynamicArray<unsigned short>::add(v58, &v55.n128_u16[1]);
          re::DynamicArray<unsigned short>::add(v58, &v55.n128_u16[3]);
          re::DynamicArray<unsigned short>::add(v58, &v55.n128_u16[2]);
          re::DynamicArray<unsigned short>::add(v58, &v55.n128_u16[1]);
          v8 = *(_QWORD *)a2;
          v17 = v18;
        }
        while (v18 < *(_QWORD *)a2);
        v14 = *(_QWORD *)(a2 + 8);
      }
      ++v15;
    }
    while (v16 < v14);
  }
  v55.n128_u64[0] = 0;
  v55.n128_u32[2] = 0;
  v25 = (_anonymous_namespace_ *)objc_msgSend(*(id *)(a1 + 184), sel_newBufferWithBytes_length_options_, v65, 16 * v63, 0, v13);
  LOWORD(v67) = 287;
  *((_QWORD *)&v67 + 1) = v25;
  LODWORD(v68) = 0;
  DWORD1(v68) = -[_anonymous_namespace_ length](v25, sel_length);
  *((_QWORD *)&v68 + 1) = 0xFFFFFFFF00000000;
  re::DynamicInlineArray<re::NamedVertexBuffer,2ul>::add((uint64_t)&v55, (uint64_t)v66);
  if (*((_QWORD *)&v67 + 1))
  {

    *((_QWORD *)&v67 + 1) = 0;
  }
  if (*(_QWORD *)v66 && (v66[8] & 1) != 0)
    (*(void (**)(void))(**(_QWORD **)v66 + 40))();
  if (v25)

  v26 = (_anonymous_namespace_ *)objc_msgSend(*(id *)(a1 + 184), sel_newBufferWithBytes_length_options_, v61, 2 * v59, 0);
  LOWORD(v67) = 49;
  *((_QWORD *)&v67 + 1) = v26;
  LODWORD(v68) = 0;
  DWORD1(v68) = -[_anonymous_namespace_ length](v26, sel_length);
  *((_QWORD *)&v68 + 1) = 0xFFFFFFFF00000000;
  re::DynamicInlineArray<re::NamedVertexBuffer,2ul>::add((uint64_t)&v55, (uint64_t)v66);
  if (*((_QWORD *)&v67 + 1))
  {

    *((_QWORD *)&v67 + 1) = 0;
  }
  if (*(_QWORD *)v66 && (v66[8] & 1) != 0)
    (*(void (**)(void))(**(_QWORD **)v66 + 40))();
  if (v26)

  v27.i32[0] = 0;
  v28.i32[0] = *(_DWORD *)(a2 + 16);
  v29 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v28, v27), 0);
  v54[0] = vbslq_s8(v29, (int8x16_t)xmmword_226134E20, (int8x16_t)xmmword_226134E10);
  v54[1] = vbslq_s8(v29, (int8x16_t)xmmword_226134E00, (int8x16_t)xmmword_226134DF0);
  std::to_string(&v50, *(_QWORD *)a2);
  v30 = std::string::insert(&v50, 0, "PlanePatch-");
  v31 = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  v32 = std::string::append(&v51, "x");
  v33 = v32->__r_.__value_.__r.__words[2];
  *(_OWORD *)v66 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
  *(_QWORD *)&v66[16] = v33;
  v32->__r_.__value_.__l.__size_ = 0;
  v32->__r_.__value_.__r.__words[2] = 0;
  v32->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v49, *(_QWORD *)(a2 + 8));
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = &v49;
  else
    v34 = (std::string *)v49.__r_.__value_.__r.__words[0];
  if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
  else
    size = v49.__r_.__value_.__l.__size_;
  v36 = std::string::append((std::string *)v66, (const std::string::value_type *)v34, size);
  v37 = v36->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
  v53 = v37;
  v36->__r_.__value_.__l.__size_ = 0;
  v36->__r_.__value_.__r.__words[2] = 0;
  v36->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if ((v66[23] & 0x80000000) != 0)
    operator delete(*(void **)v66);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (v53 >= 0)
    v38 = __p;
  else
    v38 = (void **)__p[0];
  v50.__r_.__value_.__r.__words[0] = 0;
  v50.__r_.__value_.__l.__size_ = (std::string::size_type)&str_110;
  v39 = v59;
  v40 = v63;
  v42 = re::globalAllocators(v41);
  v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v42[2] + 32))(v42[2], 560, 16);
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *(_OWORD *)&v50.__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[0] = 0;
  v50.__r_.__value_.__l.__size_ = (std::string::size_type)&str_110;
  *(_OWORD *)v66 = xmmword_2260E5F10;
  *(_OWORD *)&v66[16] = xmmword_2260E5F20;
  v67 = xmmword_2260E5F40;
  v68 = xmmword_2260E5D70;
  WORD2(v49.__r_.__value_.__r.__words[0]) = 0;
  LODWORD(v49.__r_.__value_.__l.__data_) = 0;
  *a3 = re::MeshPart::MeshPart(v43, (uint64_t *)&v51, 0, (uint64_t)&v56, v55.n128_u64[0], v39, v40, 1, v54, 0, (__int128 *)v66, (re::MeshPartFlags *)&v49, -1, 0);
  a3[1] = (uint64_t)&off_24ED74B00;
  a3[4] = (uint64_t)(a3 + 1);
  re::StringID::destroyString((re::StringID *)&v51);
  re::StringID::destroyString((re::StringID *)&v50);
  if (SHIBYTE(v53) < 0)
    operator delete(__p[0]);
  if (v55.n128_u64[0])
  {
    v44 = v55.n128_u64[0] << 6;
    v45 = (id *)&v57;
    do
    {
      v46 = v45 - 5;
      if (*v45)
      {

        *v45 = 0;
      }
      if (*v46)
      {
        if ((*(_BYTE *)(v45 - 4) & 1) != 0)
          (*(void (**)(id, _QWORD))(*(_QWORD *)*v46 + 40))(*v46, *(v45 - 3));
        *(_OWORD *)v46 = 0u;
        *(_OWORD *)(v45 - 3) = 0u;
      }
      v45 += 8;
      v44 -= 64;
    }
    while (v44);
  }
  if (v58[0] && v61)
    (*(void (**)(void))(*(_QWORD *)v58[0] + 40))();
  result = v62[0];
  if (v62[0])
  {
    if (v65)
      return (*(uint64_t (**)(void))(*(_QWORD *)v62[0] + 40))();
  }
  return result;
}

id re::DynamicInlineArray<re::NamedVertexBuffer,2ul>::add(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;

  if (*(_QWORD *)a1 >= 2uLL)
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
    result = (id)_os_crash();
    __break(1u);
  }
  else
  {
    v4 = a1 + (*(_QWORD *)a1 << 6);
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_QWORD *)(v4 + 40) = *(_QWORD *)(a2 + 24);
    v5 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    v6 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 24) = 0;
    v8 = *(_QWORD *)(v4 + 24);
    v7 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(v4 + 24) = v5;
    *(_QWORD *)(v4 + 32) = v6;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v7;
    *(_WORD *)(v4 + 48) = *(_WORD *)(a2 + 32);
    result = *(id *)(a2 + 40);
    *(_QWORD *)(v4 + 56) = result;
    *(_QWORD *)(v4 + 64) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(v4 + 72) = *(_QWORD *)(a2 + 56);
    ++*(_QWORD *)a1;
    ++*(_DWORD *)(a1 + 8);
  }
  return result;
}

void std::__function::__func<std::unique_ptr<re::MeshPart,std::function<void ()(re::MeshPart*)>> re::makeDefaultUniquePtr<re::MeshPart,re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int>(re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int &&)::{lambda(re::MeshPart*)#1},std::allocator<re::MeshPart*>,void ()(re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int &&)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<std::unique_ptr<re::MeshPart,std::function<void ()(re::MeshPart*)>> re::makeDefaultUniquePtr<re::MeshPart,re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int>(re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int &&)::{lambda(re::MeshPart*)#1},std::allocator<re::MeshPart*>,void ()(re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int &&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED74B00;
  return result;
}

void std::__function::__func<std::unique_ptr<re::MeshPart,std::function<void ()(re::MeshPart*)>> re::makeDefaultUniquePtr<re::MeshPart,re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int>(re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int &&)::{lambda(re::MeshPart*)#1},std::allocator<re::MeshPart*>,void ()(re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int &&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED74B00;
}

re *std::__function::__func<std::unique_ptr<re::MeshPart,std::function<void ()(re::MeshPart*)>> re::makeDefaultUniquePtr<re::MeshPart,re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int>(re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int &&)::{lambda(re::MeshPart*)#1},std::allocator<re::MeshPart*>,void ()(re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int &&)>::operator()(re *result, _QWORD **a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    re::StringID::destroyString((re::StringID *)(v2 + 63));
    re::FixedArray<re::StringID>::deinit(v2 + 42);
    re::AttributeTable::~AttributeTable((re::AttributeTable *)v2);
    return (re *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<re::MeshPart,std::function<void ()(re::MeshPart*)>> re::makeDefaultUniquePtr<re::MeshPart,re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int>(re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int &&)::{lambda(re::MeshPart*)#1},std::allocator<re::MeshPart*>,void ()(re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int &&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::unique_ptr<re::MeshPart,std::function<void ()(re::MeshPart*)>> re::makeDefaultUniquePtr<re::MeshPart,re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int>(re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int &&)::{lambda(re::MeshPart*)#1},std::allocator<re::MeshPart*>,void ()(re::StringID,int,re::DynamicInlineArray<re::NamedVertexBuffer,2ul> &,int,int,int,re::AABB const&,int &&)>::target_type()
{
}

uint64_t re::SelectionMeshVisitor::visitMeshPart(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  re::MaterialParameterTable *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  _QWORD *v51;
  re::Allocator *v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  _QWORD v56[8];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  _DWORD v64[7];
  __int16 v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  _OWORD v76[2];
  int v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  BOOL v83;
  int v84;
  __int128 v85;
  _BYTE v86[23];
  char v87;
  __int128 v88;
  __int128 v89;
  int8x16_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  const char *v94;
  __int16 v95;
  int v96;
  __int16 v97;
  uint64_t v98;
  __int16 v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;

  v106 = *MEMORY[0x24BDAC8D0];
  result = re::MeshVisitor::findLevelIndex((re::MeshVisitor *)a1, *(unsigned int *)(a2 + 24));
  if ((result & 0x80000000) == 0)
  {
    v5 = *(_QWORD *)(a2 + 32);
    v6 = *(__int128 **)(a2 + 40);
    v7 = a1[11];
    v8 = (*(_DWORD *)(v5 + 544) ^ *(_DWORD *)(a1[10] + 216)) & ~*(_DWORD *)(a1[10] + 220) | *(_DWORD *)(a1[10] + 220) & *(_DWORD *)(a1[10] + 216);
    v56[0] = *(_QWORD *)a2;
    v56[1] = 0;
    v56[2] = v5;
    v56[3] = 0;
    v51 = (_QWORD *)a2;
    v9 = *(_QWORD *)(a2 + 48);
    v56[4] = 0;
    v56[5] = v9;
    v56[7] = 0xFFFF010000000000;
    v10 = *v6;
    v11 = v6[1];
    v12 = v6[3];
    v59 = v6[2];
    v60 = v12;
    v57 = v10;
    v58 = v11;
    v61 = 0;
    v62 = 0;
    v63 = -1;
    *(_DWORD *)((char *)&v64[1] + 3) = 0;
    *(_QWORD *)v64 = 0;
    v65 = 0;
    *(_QWORD *)&v64[3] = 0;
    *(_QWORD *)&v64[5] = 0;
    v66 = v8;
    v67 = 0x7FFFFFFF00000000;
    v68 = 0;
    v69 = 0xFFFFFFFFLL;
    v70 = 0;
    v71 = 0;
    v13 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v7 + 24) + 32))(*(_QWORD *)(v7 + 24), 224, 16);
    *(_OWORD *)(v13 + 96) = 0u;
    *(_OWORD *)(v13 + 112) = 0u;
    *(_OWORD *)(v13 + 64) = 0u;
    *(_OWORD *)(v13 + 80) = 0u;
    *(_OWORD *)v13 = 0u;
    *(_OWORD *)(v13 + 16) = 0u;
    *(_OWORD *)(v13 + 128) = 0u;
    *(_OWORD *)(v13 + 144) = 0u;
    *(_OWORD *)(v13 + 160) = 0u;
    *(_OWORD *)(v13 + 176) = 0u;
    *(_OWORD *)(v13 + 192) = 0u;
    *(_OWORD *)(v13 + 208) = 0u;
    *(_OWORD *)(v13 + 32) = 0u;
    *(_OWORD *)(v13 + 48) = 0u;
    __asm { FMOV            V1.2S, #1.0 }
    *(_QWORD *)(v13 + 152) = _D1;
    *(_DWORD *)(v13 + 160) = 1065353216;
    *(_QWORD *)(v13 + 40) = a1[10];
    v56[6] = v13;
    v54 = *(_WORD *)(a1[9] + 16);
    v19 = *(_QWORD *)(a1[11] + 24);
    v77 = 0;
    memset(v76, 0, sizeof(v76));
    v78 = 0x7FFFFFFFLL;
    v52 = (re::Allocator *)v19;
    re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init((uint64_t)v76, v19, 10);
    v20 = 0;
    v90 = vextq_s8(*(int8x16_t *)(v13 + 48), *(int8x16_t *)(v13 + 48), 8uLL);
    v55 = v13;
    v21 = *(_QWORD *)(v13 + 40) + 224;
    v91 = *(_QWORD *)(v13 + 72);
    v92 = v21;
    while (1)
    {
      v53 = v20;
      v22 = (re::MaterialParameterTable *)v90.i64[v20];
      if (v22)
      {
        if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
          dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
        v23 = re::MaterialParameterTable::passTechniqueHashTable(v22, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash, 1);
        v24 = v23;
        v25 = *((unsigned int *)v23 + 8);
        if ((_DWORD)v25)
        {
          v26 = 0;
          v27 = (int *)v23[2];
          while (1)
          {
            v28 = *v27;
            v27 += 6;
            if (v28 < 0)
              break;
            if (v25 == ++v26)
            {
              LODWORD(v26) = *((_DWORD *)v23 + 8);
              break;
            }
          }
        }
        else
        {
          LODWORD(v26) = 0;
        }
        if ((_DWORD)v25 != (_DWORD)v26)
          break;
      }
LABEL_58:
      v20 = v53 + 1;
      if (v53 == 3)
      {
        re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v76);
        return (uint64_t)re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1[9], v51);
      }
    }
    v29 = v26;
    v30 = v23[2];
    while (1)
    {
      v31 = v30 + 24 * v29;
      v32 = (uint64_t *)(v31 + 8);
      if (re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)v76, (uint64_t *)(v31 + 8)))
      {
        goto LABEL_50;
      }
      v33 = re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1[8], (uint64_t *)(v31 + 8));
      if (!v33)
        break;
LABEL_26:
      v41 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(*(_QWORD *)(v55 + 40) + 24, (uint64_t *)(v31 + 16));
      if (v41)
      {
        v42 = v41;
        LOWORD(v80) = 263;
        *(_DWORD *)((char *)&v80 + 2) = 0x1000000;
        *(_QWORD *)((char *)&v80 + 6) = 0xFFFF0000FFFFLL;
        *(_QWORD *)&v82 = 0;
        v81 = 0uLL;
        *((_QWORD *)&v82 + 1) = 0xFFFFFFFF00000000;
        v83 = 0;
        *((_QWORD *)&v85 + 1) = 0;
        v86[0] = 0;
        *((_QWORD *)&v88 + 1) = 0;
        LODWORD(v88) = 0;
        *(_QWORD *)&v86[4] = 0;
        *(_QWORD *)&v86[12] = 0;
        *(_DWORD *)&v86[19] = 0;
        v89 = 0xFF00000007FFFFFFLL;
        if (*(_QWORD *)(v41 + 8))
        {
          v43 = a1[11];
          v74 = 0;
          v75 = 0;
          v44 = re::addDrawCall(v33, (uint64_t)v56, v43, 0, (uint64_t)&v74);
          *(_WORD *)v44 = *(_WORD *)v44 & 0xFFCF | 0x10;
          *(_WORD *)(v44 + 12) = v54;
          v45 = *(_QWORD *)(v42 + 8);
          if (!v45)
          {
            v79 = 0;
            v104 = 0u;
            v105 = 0u;
            v102 = 0u;
            v103 = 0u;
            v101 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v93 = 136315906;
            v94 = "operator[]";
            v95 = 1024;
            v96 = 476;
            v97 = 2048;
            v98 = 0;
            v99 = 2048;
            v100 = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(_DWORD *)(v44 + 44) = **(_DWORD **)(v42 + 16);
          v80 = *(_OWORD *)v44;
          v81 = *(_OWORD *)(v44 + 16);
          v82 = *(_OWORD *)(v44 + 32);
          if (v83 || *(_BYTE *)(v44 + 48))
          {
            if (!v83 || *(_BYTE *)(v44 + 48))
            {
              if (!v83)
                v83 = *(_BYTE *)(v44 + 48) != 0;
              v84 = *(_DWORD *)(v44 + 52);
            }
            else
            {
              v83 = 0;
            }
          }
          v85 = *(_OWORD *)(v44 + 56);
          *(_OWORD *)v86 = *(_OWORD *)(v44 + 72);
          *(_QWORD *)&v86[14] = *(_QWORD *)(v44 + 86);
          if (v86[22] || *(_BYTE *)(v44 + 94))
          {
            if (!v86[22] || *(_BYTE *)(v44 + 94))
            {
              if (!v86[22])
                v86[22] = *(_BYTE *)(v44 + 94) != 0;
              v87 = *(_BYTE *)(v44 + 95);
            }
            else
            {
              v86[22] = 0;
            }
          }
          v88 = *(_OWORD *)(v44 + 96);
          v89 = *(_OWORD *)(v44 + 112);
          if (v45 >= 2)
          {
            v48 = 1;
            do
            {
              HIDWORD(v82) = *(_DWORD *)(*(_QWORD *)(v42 + 16) + 4 * v48);
              re::BucketArray<re::DrawCall,128ul>::add(v33, &v80);
              ++v48;
            }
            while (v48 < *(_QWORD *)(v42 + 8));
          }
        }
      }
      else
      {
        v46 = a1[11];
        v72 = 0;
        v73 = 0;
        v47 = re::addDrawCall(v33, (uint64_t)v56, v46, 0, (uint64_t)&v72);
        *(_DWORD *)(v47 + 44) = -1;
        *(_WORD *)v47 = *(_WORD *)v47 & 0xFFCF | 0x10;
        *(_WORD *)(v47 + 12) = v54;
        re::BucketArray<re::DrawCall,128ul>::add(v33, (__int128 *)v47);
      }
      re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add((uint64_t)v76, v32);
LABEL_50:
      v30 = v24[2];
      if (*((_DWORD *)v24 + 8) <= (v26 + 1))
        v49 = v26 + 1;
      else
        v49 = *((_DWORD *)v24 + 8);
      while (1)
      {
        v29 = (v26 + 1);
        if (v49 - 1 == (_DWORD)v26)
          break;
        LODWORD(v26) = v26 + 1;
        v50 = v29;
        if ((*(_DWORD *)(v30 + 24 * v29) & 0x80000000) != 0)
          goto LABEL_57;
      }
      v50 = v49;
LABEL_57:
      LODWORD(v26) = v50;
      if ((_DWORD)v25 == v50)
        goto LABEL_58;
    }
    v34 = a1[8];
    re::DrawTable::DrawTable((re::DrawTable *)&v80, v52, 1uLL);
    v35 = *v32;
    if (*(_QWORD *)v34)
    {
      v36 = v35 % *(unsigned int *)(v34 + 24);
      v37 = *(unsigned int *)(*(_QWORD *)(v34 + 8) + 4 * v36);
      if ((_DWORD)v37 != 0x7FFFFFFF)
      {
        v38 = *(_QWORD *)(v34 + 16);
        while (*(_QWORD *)(v38 + 344 * v37 + 8) != v35)
        {
          LODWORD(v37) = *(_DWORD *)(v38 + 344 * v37) & 0x7FFFFFFF;
          if ((_DWORD)v37 == 0x7FFFFFFF)
            goto LABEL_23;
        }
        v40 = v38 + 344 * v37;
        goto LABEL_25;
      }
    }
    else
    {
      LODWORD(v36) = 0;
    }
LABEL_23:
    v39 = re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(v34, v36, v35, (_QWORD *)(v31 + 8), (uint64_t)&v80);
    ++*(_DWORD *)(v34 + 40);
    v40 = *(_QWORD *)(v34 + 16) + 344 * v39;
LABEL_25:
    v33 = v40 + 16;
    re::DrawTable::~DrawTable((re::DrawTable *)&v80);
    goto LABEL_26;
  }
  return result;
}

uint64_t re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (*a2 % (unint64_t)*(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 344 * v3 + 8) != v2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 344 * v3) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v5 + 344 * v3 + 8) == v2)
        return v5 + 344 * v3 + 16;
    }
    return 0;
  }
  return v5 + 344 * v3 + 16;
}

__n128 re::BucketArray<re::DrawCall,128ul>::add(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  int v6;
  __int128 v7;
  __int128 v8;
  int v9;
  __n128 result;
  __int128 v11;

  v3 = re::BucketArray<re::DrawCall,128ul>::addUninitialized(a1);
  v4 = a2[2];
  v5 = *a2;
  *(_OWORD *)(v3 + 16) = a2[1];
  *(_OWORD *)(v3 + 32) = v4;
  *(_OWORD *)v3 = v5;
  v6 = *((unsigned __int8 *)a2 + 48);
  *(_BYTE *)(v3 + 48) = v6;
  if (v6)
    *(_DWORD *)(v3 + 52) = *((_DWORD *)a2 + 13);
  v7 = *(__int128 *)((char *)a2 + 56);
  v8 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(v3 + 86) = *(_QWORD *)((char *)a2 + 86);
  *(_OWORD *)(v3 + 72) = v8;
  *(_OWORD *)(v3 + 56) = v7;
  v9 = *((unsigned __int8 *)a2 + 94);
  *(_BYTE *)(v3 + 94) = v9;
  if (v9)
    *(_BYTE *)(v3 + 95) = *((_BYTE *)a2 + 95);
  result = (__n128)a2[6];
  v11 = a2[7];
  *(__n128 *)(v3 + 96) = result;
  *(_OWORD *)(v3 + 112) = v11;
  return result;
}

re::DrawTable *re::DrawTable::DrawTable(re::DrawTable *this, re::Allocator *a2, unint64_t a3)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 1;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 12) = 0;
  re::BucketArray<re::DrawCall,128ul>::init((uint64_t)this, (uint64_t)a2, a3);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 1;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 26) = 0;
  re::BucketArray<re::Matrix4x4<float>,128ul>::init((uint64_t)this + 56, (uint64_t)a2, a3);
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 32) = 1;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 40) = 0;
  re::BucketArray<re::ConstantTable const*,128ul>::init((uint64_t)this + 112, (uint64_t)a2, a3);
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 46) = 1;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_DWORD *)this + 54) = 0;
  re::BucketArray<float,128ul>::init((uint64_t)this + 168, (uint64_t)a2, a3);
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_DWORD *)this + 60) = 1;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_DWORD *)this + 68) = 0;
  re::BucketArray<unsigned int,128ul>::init((uint64_t)this + 224, (uint64_t)a2, a3);
  *((_BYTE *)this + 320) = 1;
  return this;
}

uint64_t re::BucketArray<re::DrawCall,128ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::DrawCall,128ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::DrawCall,128ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < a2 << 7)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 0x4000, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::BucketArray<re::Matrix4x4<float>,128ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::Matrix4x4<float>,128ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::Matrix4x4<float>,128ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < a2 << 7)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 0x2000, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::BucketArray<re::ConstantTable const*,128ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ConstantTable const*,128ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::ConstantTable const*,128ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < a2 << 7)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 1024, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::BucketArray<float,128ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<float,128ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<float,128ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < a2 << 7)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 512, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t *re::BucketArray<unsigned int,128ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<unsigned int,128ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<unsigned int,128ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < a2 << 7)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 512, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

void re::DrawTable::~DrawTable(re::DrawTable *this)
{
  if (!*((_BYTE *)this + 320))
  {
    (**((void (***)(char *))this + 35))((char *)this + 280);
    *((_BYTE *)this + 320) = 1;
  }
  re::BucketArray<unsigned int,128ul>::deinit((uint64_t)this + 224);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 224);
  re::BucketArray<unsigned int,128ul>::deinit((uint64_t)this + 168);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 168);
  re::BucketArray<re::ConstantTable const*,128ul>::deinit((uint64_t)this + 112);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 112);
  re::BucketArray<re::Matrix4x4<float>,128ul>::deinit((uint64_t)this + 56);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 56);
  re::BucketArray<re::DrawCall,128ul>::deinit((uint64_t)this);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this);
}

uint64_t re::BucketArray<unsigned int,128ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
      re::BucketArray<unsigned int,128ul>::operator[](a1, i);
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<unsigned int,128ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 7)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 7)) + 4 * (a2 & 0x7F);
}

uint64_t re::BucketArray<re::ConstantTable const*,128ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
      re::BucketArray<re::ConstantTable const*,128ul>::operator[](a1, i);
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::ConstantTable const*,128ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 7)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 7)) + 8 * (a2 & 0x7F);
}

uint64_t re::BucketArray<re::Matrix4x4<float>,128ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
      re::BucketArray<re::Matrix4x4<float>,128ul>::operator[](a1, i);
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

unint64_t re::BucketArray<re::Matrix4x4<float>,128ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 7)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 7)) + ((a2 & 0x7F) << 6);
}

uint64_t re::BucketArray<re::DrawCall,128ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
      re::BucketArray<re::DrawCall,128ul>::operator[](a1, i);
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

unint64_t re::BucketArray<re::DrawCall,128ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 7)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 7)) + ((a2 & 0x7F) << 7);
}

uint64_t re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v42[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v9 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v42, 0, 36);
          *(_QWORD *)&v42[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init((uint64_t)v42, v14, v13);
          v16 = *(_OWORD *)v42;
          *(_OWORD *)v42 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v42[16];
          *(_QWORD *)&v42[16] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v17;
          v19 = *(_OWORD *)&v42[24];
          *(_OWORD *)&v42[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v42[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = 0;
            do
            {
              if ((*(_DWORD *)(*(_QWORD *)&v42[16] + v21) & 0x80000000) != 0)
              {
                re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v42[16] + v21 + 8) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v42[16] + v21 + 8), *(_QWORD *)&v42[16] + v21 + 8, *(_QWORD *)&v42[16] + v21 + 16);
                v20 = *(_DWORD *)&v42[32];
              }
              ++v22;
              v21 += 344;
            }
            while (v22 < v20);
          }
          re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)v42);
        }
      }
      else
      {
        if (v13)
          v25 = 2 * v12;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 344 * v9);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 344 * v9);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  v26 = 344 * v9;
  *(_DWORD *)(v23 + v26) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v26 + 8) = *a4;
  v27 = *(_QWORD *)(a1 + 16);
  v28 = v27 + v26;
  *(_QWORD *)(v28 + 16) = 0;
  *(_QWORD *)(v28 + 24) = 0;
  v29 = v27 + v26 + 16;
  *(_DWORD *)(v29 + 16) = 1;
  *(_QWORD *)(v29 + 32) = 0;
  *(_QWORD *)(v29 + 40) = 0;
  *(_QWORD *)(v29 + 24) = 0;
  *(_DWORD *)(v29 + 48) = 0;
  *(_OWORD *)v42 = 0uLL;
  *(_DWORD *)&v42[16] = 1;
  *(_QWORD *)&v42[24] = 0;
  *(_QWORD *)&v42[32] = 0;
  v30 = *(_DWORD *)(v27 + v26 + 32);
  if ((v30 & 1) != 0)
  {
    if (*(_QWORD *)(v27 + v26 + 24))
    {
      re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::move((uint64_t)v42, v27 + v26 + 16);
    }
    else
    {
      *(_QWORD *)v42 = *(_QWORD *)v29;
      *(_DWORD *)(v27 + v26 + 32) = v30 + 2;
      *(_DWORD *)&v42[16] = 3;
    }
  }
  else
  {
    *(_DWORD *)&v42[16] = 3;
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap((uint64_t *)v42, (uint64_t *)(v27 + v26 + 16));
  }
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(v29, a5);
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(a5, (uint64_t)v42);
  if (*(_QWORD *)v42 && (v42[16] & 1) == 0)
    (*(void (**)(void))(**(_QWORD **)v42 + 40))();
  v31 = *(_QWORD *)(v29 + 40);
  *(_QWORD *)(v29 + 40) = *(_QWORD *)(a5 + 40);
  *(_QWORD *)(a5 + 40) = v31;
  ++*(_DWORD *)(v29 + 48);
  ++*(_DWORD *)(a5 + 48);
  v32 = v27 + 344 * v9;
  *(_QWORD *)(v32 + 72) = 0;
  *(_QWORD *)(v32 + 80) = 0;
  v32 += 72;
  *(_DWORD *)(v32 + 16) = 1;
  *(_QWORD *)(v32 + 32) = 0;
  *(_QWORD *)(v32 + 40) = 0;
  *(_QWORD *)(v32 + 24) = 0;
  *(_DWORD *)(v32 + 48) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::DynamicOverflowArray((uint64_t)v42, v32);
  re::DynamicOverflowArray<re::FixedArray<int> *,2ul>::operator=(v32, a5 + 56);
  re::DynamicOverflowArray<re::FixedArray<int> *,2ul>::operator=(a5 + 56, (uint64_t)v42);
  if (*(_QWORD *)v42 && (v42[16] & 1) == 0)
    (*(void (**)(void))(**(_QWORD **)v42 + 40))();
  v33 = v27 + 344 * v9;
  v34 = *(_QWORD *)(v33 + 112);
  *(_QWORD *)(v33 + 112) = *(_QWORD *)(a5 + 96);
  *(_QWORD *)(a5 + 96) = v34;
  ++*(_DWORD *)(v33 + 120);
  ++*(_DWORD *)(a5 + 104);
  *(_QWORD *)(v33 + 128) = 0;
  *(_QWORD *)(v33 + 136) = 0;
  v33 += 128;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)(v33 + 40) = 0;
  *(_QWORD *)(v33 + 24) = 0;
  *(_DWORD *)(v33 + 48) = 0;
  *(_QWORD *)&v42[24] = 0;
  *(_QWORD *)&v42[32] = 0;
  *(_OWORD *)v42 = 0uLL;
  *(_DWORD *)(v33 + 16) = 3;
  *(_DWORD *)&v42[16] = 3;
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(v33, a5 + 112);
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(a5 + 112, (uint64_t)v42);
  if (*(_QWORD *)v42 && (v42[16] & 1) == 0)
    (*(void (**)(void))(**(_QWORD **)v42 + 40))();
  v35 = v27 + 344 * v9;
  v36 = *(_QWORD *)(v35 + 168);
  *(_QWORD *)(v35 + 168) = *(_QWORD *)(a5 + 152);
  *(_QWORD *)(a5 + 152) = v36;
  ++*(_DWORD *)(v35 + 176);
  ++*(_DWORD *)(a5 + 160);
  *(_QWORD *)(v35 + 184) = 0;
  *(_QWORD *)(v35 + 192) = 0;
  v35 += 184;
  *(_QWORD *)(v35 + 32) = 0;
  *(_QWORD *)(v35 + 40) = 0;
  *(_QWORD *)(v35 + 24) = 0;
  *(_DWORD *)(v35 + 48) = 0;
  *(_QWORD *)&v42[24] = 0;
  *(_QWORD *)&v42[32] = 0;
  *(_OWORD *)v42 = 0uLL;
  *(_DWORD *)(v35 + 16) = 3;
  *(_DWORD *)&v42[16] = 3;
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(v35, a5 + 168);
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(a5 + 168, (uint64_t)v42);
  if (*(_QWORD *)v42 && (v42[16] & 1) == 0)
    (*(void (**)(void))(**(_QWORD **)v42 + 40))();
  v37 = v27 + 344 * v9;
  v38 = *(_QWORD *)(v37 + 224);
  *(_QWORD *)(v37 + 224) = *(_QWORD *)(a5 + 208);
  *(_QWORD *)(a5 + 208) = v38;
  ++*(_DWORD *)(v37 + 232);
  ++*(_DWORD *)(a5 + 216);
  *(_QWORD *)(v37 + 240) = 0;
  *(_QWORD *)(v37 + 248) = 0;
  v37 += 240;
  *(_QWORD *)(v37 + 32) = 0;
  *(_QWORD *)(v37 + 40) = 0;
  *(_QWORD *)(v37 + 24) = 0;
  *(_DWORD *)(v37 + 48) = 0;
  *(_QWORD *)&v42[24] = 0;
  *(_QWORD *)&v42[32] = 0;
  *(_OWORD *)v42 = 0uLL;
  *(_DWORD *)(v37 + 16) = 3;
  *(_DWORD *)&v42[16] = 3;
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(v37, a5 + 224);
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(a5 + 224, (uint64_t)v42);
  if (*(_QWORD *)v42 && (v42[16] & 1) == 0)
    (*(void (**)(void))(**(_QWORD **)v42 + 40))();
  v39 = v27 + 344 * v9;
  v40 = *(_QWORD *)(v39 + 280);
  *(_QWORD *)(v39 + 280) = *(_QWORD *)(a5 + 264);
  *(_QWORD *)(a5 + 264) = v40;
  ++*(_DWORD *)(v39 + 288);
  ++*(_DWORD *)(a5 + 272);
  *(_BYTE *)(v39 + 336) = 1;
  re::InlineFunction<40ul,void ()(re::DrawCall &,re::MeshPartDrawContext const&,unsigned char)>::operator=((_BYTE *)(v39 + 296), (_BYTE *)(a5 + 280));
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

_BYTE *re::InlineFunction<40ul,void ()(re::DrawCall &,re::MeshPartDrawContext const&,unsigned char)>::operator=(_BYTE *a1, _BYTE *a2)
{
  if (a1 != a2)
  {
    if (!a1[40])
    {
      (**(void (***)(_BYTE *))a1)(a1);
      a1[40] = 1;
    }
    if (!a2[40])
    {
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 32))(a2, a1);
      if (!a2[40])
      {
        (**(void (***)(_BYTE *))a2)(a2);
        a2[40] = 1;
      }
      a1[40] = 0;
    }
  }
  return a1;
}

{
  if (a1 != a2)
  {
    if (!a1[40])
    {
      (**(void (***)(_BYTE *))a1)(a1);
      a1[40] = 1;
    }
    if (!a2[40])
    {
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 24))(a2, a1);
      a1[40] = 0;
    }
  }
  return a1;
}

void re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 344 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<unsigned long,re::DrawTable,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::DrawTable::~DrawTable((re::DrawTable *)(v6 + v4 + 16));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 344;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::BucketArray<re::DrawCall,128ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > v3 << 7)
  {
    re::BucketArray<re::DrawCall,128ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 128) >> 7);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 7)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 7));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + ((v2 & 0x7F) << 7);
}

unsigned __int8 *re::DeformationPassBuilder::addDeformationStack(unsigned __int8 *result, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  int v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  char v28;
  unsigned __int8 v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unint64_t v38;
  unsigned __int8 v39;
  unint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  int v47;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  unsigned __int8 *v59;
  _BYTE *v60;
  _BYTE *v61;
  unint64_t i;
  char v63;
  unint64_t v64;
  int v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  unint64_t v76;
  unsigned int v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned __int8 v82;
  unsigned __int8 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  uint64_t v88;
  unsigned int v89;
  unsigned __int8 *v90;
  unint64_t v91;
  unsigned __int8 *v92;
  unsigned __int8 v93;
  uint64_t v94;
  unint64_t v98;
  uint64_t v99;
  _BYTE v100[10];
  int v101;
  const char *v102;
  __int16 v103;
  int v104;
  __int16 v105;
  unint64_t v106;
  __int16 v107;
  unint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;

  v114 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v4 = a4;
    v5 = (uint64_t)result;
    v6 = __clz(__rbit64(a3));
    v94 = (uint64_t)(result + 976);
    v7 = result + 56;
    v90 = result + 80;
    v91 = a4 + 688;
    v92 = result + 24;
    v8 = (unint64_t)v100;
    v99 = (uint64_t)(result + 56);
    while (1)
    {
      v9 = v4 + 4 * v6;
      v11 = *(_DWORD *)(v9 + 4);
      v10 = (_BYTE *)(v9 + 4);
      v12 = re::Bitset<64>::toWordIndex(v94, v11);
      *(_QWORD *)(v94 + 8 * v12) |= 1 << v11;
      *(_QWORD *)&v109 = a3;
      v14 = *(_QWORD *)(v5 + 96);
      if (*v10 == 8)
      {
        if (!v14
          || (v15 = (unsigned __int8 *)re::BucketArray<unsigned char,8ul>::operator[]((uint64_t)v7, v14 - 1),
              v16 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v5, *v15),
              !*(_QWORD *)(v16 + 40)))
        {
          LODWORD(v22) = v14;
          goto LABEL_57;
        }
        v17 = v14 - (*(_BYTE *)re::BucketArray<re::BatchedDeformationInstances,64ul>::operator[](v16, 0) == 8);
      }
      else
      {
        if ((_BYTE)v6)
        {
          v17 = 0;
          v18 = (unsigned __int8 *)(v91 + 10 * v6);
          v19 = v6;
          do
          {
            v21 = *v18++;
            v20 = v21;
            if (v21 == 255)
              break;
            re::Bitset<64>::toWordIndex((uint64_t)&v109, v20);
            if ((((unint64_t)v109 >> v20) & 1) != 0)
            {
              if (v17 <= (v100[v20] + 1))
                v17 = (v100[v20] + 1);
              else
                v17 = v17;
            }
            --v19;
          }
          while (v19);
        }
        else
        {
          v17 = 0;
        }
        v23 = v4 + (v6 << 6);
        v24 = *(_QWORD *)(v23 + 96);
        if (v24)
        {
          v25 = *(unsigned __int8 **)(v23 + 104);
          v26 = &v25[16 * v24];
          do
          {
            v27 = (unsigned __int8 *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v5 + 48 * *v25 + 112, *((_QWORD *)v25 + 1));
            if (v27)
            {
              v13 = *v27;
              if (v13 == 255)
                v28 = -1;
              else
                v28 = *(_BYTE *)(re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v5, v13) + 56);
              v29 = v28 + 1;
              if (v17 <= v29)
                v17 = v29;
              else
                v17 = v17;
            }
            v25 += 16;
          }
          while (v25 != v26);
        }
        v30 = v4 + 24 * v6;
        v31 = *(_QWORD *)(v30 + 800);
        if (v31)
        {
          v32 = *(unsigned __int8 **)(v30 + 808);
          v33 = &v32[16 * v31];
          do
          {
            v34 = re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v5 + 48 * *v32 + 112, *((_QWORD *)v32 + 1));
            if (v34)
            {
              v13 = *(unsigned __int8 *)(v34 + 1);
              v35 = v13 == 255
                  ? 255
                  : *(unsigned __int8 *)(re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v5, v13) + 56);
              if (v14 >= v35)
                LOBYTE(v14) = v35;
            }
            v32 += 16;
          }
          while (v32 != v33);
        }
        v36 = *(_QWORD *)(v5 + 96);
        if (v36 == v14)
        {
          if (v36)
          {
            v37 = (unsigned __int8 *)re::BucketArray<unsigned char,8ul>::operator[](v99, v14 - 1);
            v38 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v5, *v37);
            if (*(_QWORD *)(v38 + 40))
              LOBYTE(v14) = v14
                          - (*(_BYTE *)re::BucketArray<re::BatchedDeformationInstances,64ul>::operator[](v38, 0) == 8);
          }
        }
      }
      if (v14 <= v17)
      {
        LODWORD(v22) = v17;
        v7 = (_QWORD *)v99;
LABEL_57:
        if (v22 == v14)
        {
          v50 = *(_QWORD *)(v5 + 40);
          v51 = *(_QWORD *)(v5 + 8);
          if (v50 + 1 > 8 * v51)
          {
            re::BucketArray<re::DeformationPassBuilder::DeformationInstanceBucket,8ul>::setBucketsCapacity((_QWORD *)v5, (v50 + 8) >> 3);
            v51 = *(_QWORD *)(v5 + 8);
          }
          v52 = v50 >> 3;
          if (v51 <= v50 >> 3)
            goto LABEL_110;
          v53 = v92;
          if ((*(_BYTE *)(v5 + 16) & 1) == 0)
            v53 = *(unsigned __int8 **)(v5 + 32);
          v54 = *(_QWORD *)&v53[8 * v52];
          ++*(_QWORD *)(v5 + 40);
          ++*(_DWORD *)(v5 + 48);
          v55 = v54 + ((v50 & 7) << 6);
          *(_OWORD *)(v55 + 16) = 0u;
          *(_OWORD *)(v55 + 32) = 0u;
          *(_QWORD *)(v55 + 40) = 0;
          *(_QWORD *)(v55 + 48) = 0;
          *(_OWORD *)v55 = 0u;
          *(_DWORD *)(v55 + 16) = 1;
          *(_QWORD *)(v55 + 24) = 0;
          *(_QWORD *)(v55 + 32) = 0;
          *(_DWORD *)(v55 + 48) = 0;
          *(_BYTE *)(v55 + 56) = -1;
          v8 = v22;
          v56 = *(_QWORD *)(v5 + 96);
          if (v56 < v22)
            goto LABEL_111;
          v57 = *(_BYTE *)(v5 + 40);
          v4 = *(_QWORD *)(v5 + 64);
          if (v56 + 1 > 8 * v4)
          {
            re::BucketArray<unsigned char,8ul>::setBucketsCapacity(v7, (v56 + 8) >> 3);
            v4 = *(_QWORD *)(v5 + 64);
          }
          v51 = (unint64_t)v22 >> 3;
          if (v4 <= v51)
            goto LABEL_112;
          v58 = *(_QWORD *)(v5 + 96);
          v52 = v58 >> 3;
          if ((*(_BYTE *)(v5 + 72) & 1) != 0)
          {
            v59 = v90;
            if (v4 <= v52)
              goto LABEL_113;
          }
          else
          {
            if (v4 <= v52)
              goto LABEL_113;
            v59 = *(unsigned __int8 **)(v5 + 88);
          }
          v60 = (_BYTE *)(*(_QWORD *)&v59[8 * v51] + (v22 & 7));
          v61 = (_BYTE *)(*(_QWORD *)&v59[8 * v52] + (*(_QWORD *)(v5 + 96) & 7));
          if (v60 != v61)
          {
            *v61 = *(_BYTE *)re::BucketArray<unsigned char,8ul>::operator[]((uint64_t)v7, v58 - 1);
            for (i = *(_QWORD *)(v5 + 96) - 1; v22 != i; --i)
            {
              v63 = *(_BYTE *)re::BucketArray<unsigned char,8ul>::operator[]((uint64_t)v7, i - 1);
              *(_BYTE *)re::BucketArray<unsigned char,8ul>::operator[]((uint64_t)v7, i) = v63;
            }
          }
          *v60 = v57 - 1;
          ++*(_QWORD *)(v5 + 96);
          ++*(_DWORD *)(v5 + 104);
          if (*(_QWORD *)(v5 + 40) <= (unint64_t)v22)
          {
            v7 = (_QWORD *)v99;
          }
          else
          {
            v64 = v22;
            v65 = v22;
            v7 = (_QWORD *)v99;
            do
            {
              v66 = (unsigned __int8 *)re::BucketArray<unsigned char,8ul>::operator[](v99, v64);
              *(_BYTE *)(re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v5, *v66) + 56) = v65++;
              v64 = v65;
            }
            while (*(_QWORD *)(v5 + 40) > (unint64_t)v65);
          }
        }
        else
        {
          v8 = v22;
        }
        v67 = (unsigned __int8 *)re::BucketArray<unsigned char,8ul>::operator[]((uint64_t)v7, v8);
        v68 = (_QWORD *)re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v5, *v67);
        v4 = (unint64_t)v68;
        v69 = v68[5];
        v51 = v68[1];
        if (v69 + 1 > v51 << 6)
        {
          re::BucketArray<re::BatchedDeformationInstances,64ul>::setBucketsCapacity(v68, (v69 + 64) >> 6);
          v51 = *(_QWORD *)(v4 + 8);
        }
        v52 = v69 >> 6;
        if (v51 <= v69 >> 6)
        {
          v113 = 0u;
          v111 = 0u;
          v112 = 0u;
          v109 = 0u;
          v110 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v101 = 136315906;
          v102 = "operator[]";
          v103 = 1024;
          v104 = 858;
          v105 = 2048;
          v106 = v69 >> 6;
          v107 = 2048;
          v108 = v51;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_110:
          v113 = 0u;
          v111 = 0u;
          v112 = 0u;
          v109 = 0u;
          v110 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v101 = 136315906;
          v102 = "operator[]";
          v103 = 1024;
          v104 = 858;
          v105 = 2048;
          v106 = v52;
          v107 = 2048;
          v108 = v51;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_111:
          re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index <= m_size", "insert", 809, v8, v56);
          _os_crash();
          __break(1u);
LABEL_112:
          v113 = 0u;
          v111 = 0u;
          v112 = 0u;
          v109 = 0u;
          v110 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v101 = 136315906;
          v102 = "operator[]";
          v103 = 1024;
          v104 = 858;
          v105 = 2048;
          v106 = v51;
          v107 = 2048;
          v108 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_113:
          v113 = 0u;
          v111 = 0u;
          v112 = 0u;
          v109 = 0u;
          v110 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v101 = 136315906;
          v102 = "operator[]";
          v103 = 1024;
          v104 = 858;
          v105 = 2048;
          v106 = v52;
          v107 = 2048;
          v108 = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v70 = *(_QWORD *)(v4 + 32);
        if ((*(_DWORD *)(v4 + 16) & 1) != 0)
          v70 = v4 + 24;
        v71 = *(_QWORD *)(v70 + 8 * v52);
        ++*(_QWORD *)(v4 + 40);
        ++*(_DWORD *)(v4 + 48);
        v72 = v71 + ((v69 & 0x3F) << 6);
        *(_OWORD *)(v72 + 24) = 0u;
        *(_OWORD *)(v72 + 40) = 0u;
        *(_QWORD *)(v72 + 48) = 0;
        *(_QWORD *)(v72 + 56) = 0;
        *(_OWORD *)(v72 + 8) = 0u;
        *(_DWORD *)(v72 + 24) = 1;
        *(_QWORD *)(v72 + 32) = 0;
        *(_QWORD *)(v72 + 40) = 0;
        *(_DWORD *)(v72 + 56) = 0;
        v73 = a4;
        v74 = *(_BYTE *)(a4 + (v6 << 6) + 72);
        *(_BYTE *)v72 = *(_DWORD *)v10;
        *(_BYTE *)(v72 + 1) = v74;
        v75 = re::BucketArray<re::DeformationInstanceIndex,64ul>::addUninitialized(v72 + 8);
        *(_QWORD *)v75 = a4;
        *(_QWORD *)(v75 + 8) = a2;
        *(_BYTE *)(v75 + 16) = v6;
        v76 = v6;
      }
      else
      {
        v39 = v14;
        v40 = v4;
        v98 = v6;
        v41 = (unsigned __int8 *)(v4 + (v6 << 6) + 72);
        v22 = v17;
        v93 = v39;
        v42 = v39;
        while (1)
        {
          v43 = (unsigned __int8 *)re::BucketArray<unsigned char,8ul>::operator[](v99, v22);
          v44 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v5, *v43);
          v45 = *(_QWORD *)(v44 + 40);
          if (v45)
          {
            v8 = v44;
            v4 = 0;
            while (1)
            {
              v46 = (unsigned __int8 *)re::BucketArray<re::BatchedDeformationInstances,64ul>::operator[](v8, v4);
              v47 = *v41;
              if (*v46 == *(_DWORD *)v10 && v46[1] == v47)
                break;
              if (v45 == ++v4)
                goto LABEL_54;
            }
            if (!*((_QWORD *)v46 + 6))
            {
              *v46 = *(_DWORD *)v10;
              v46[1] = v47;
            }
            v49 = re::BucketArray<re::DeformationInstanceIndex,64ul>::addUninitialized((uint64_t)(v46 + 8));
            *(_QWORD *)v49 = v40;
            *(_QWORD *)(v49 + 8) = a2;
            *(_BYTE *)(v49 + 16) = v98;
            if ((_BYTE)v22 != 0xFF)
              break;
          }
LABEL_54:
          if (++v22 == v42)
          {
            LODWORD(v22) = v17;
            v6 = v98;
            v7 = (_QWORD *)v99;
            LOBYTE(v14) = v93;
            goto LABEL_57;
          }
        }
        v8 = v22;
        v73 = v40;
        v76 = v98;
        v7 = (_QWORD *)v99;
      }
      result = (unsigned __int8 *)re::BucketArray<unsigned char,8ul>::operator[]((uint64_t)v7, v8);
      v77 = *result;
      v78 = (uint64_t *)(v73 + (v76 << 6));
      v79 = v78[10];
      if (v79 != -1)
      {
        v80 = v5 + 48 * *(unsigned int *)v10 + 112;
        result = (unsigned __int8 *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v80, v79);
        if (result)
        {
          v81 = *result;
          if (v81 <= v77)
            v82 = v77;
          else
            v82 = *result;
          if (v81 == 255)
            v83 = v77;
          else
            v83 = v82;
          *result = v83;
        }
        else
        {
          LOBYTE(v109) = v77;
          BYTE1(v109) = -1;
          result = (unsigned __int8 *)re::HashTable<unsigned long long,re::DeformationPassBuilder::DeformationFence,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(v80, v78 + 10, &v109);
        }
      }
      v84 = v78[12];
      if (v84)
      {
        v85 = v78[13];
        v86 = 16 * v84;
        v87 = (unint64_t *)(v85 + 8);
        do
        {
          v88 = v5 + 48 * *((unsigned __int8 *)v87 - 8) + 112;
          result = (unsigned __int8 *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v88, *v87);
          if (result)
          {
            v89 = result[1];
            if (v89 >= v77)
              LOBYTE(v89) = v77;
            result[1] = v89;
          }
          else
          {
            LOBYTE(v109) = -1;
            BYTE1(v109) = v77;
            result = (unsigned __int8 *)re::HashTable<unsigned long long,re::DeformationPassBuilder::DeformationFence,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(v88, (uint64_t *)v87, &v109);
          }
          v87 += 2;
          v86 -= 16;
        }
        while (v86);
      }
      v8 = (unint64_t)v100;
      v100[v76] = v22;
      v4 = a4;
      if (v76 == 63 || ((-2 << v76) & a3) == 0)
        return result;
      v6 = __clz(__rbit64((-2 << v76) & a3));
    }
  }
  return result;
}

unint64_t re::BucketArray<unsigned char,8ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 3)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 3)) + (a2 & 7);
}

{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 3)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 3)) + (a2 & 7);
}

uint64_t re::HashTable<unsigned long long,re::DeformationPassBuilder::DeformationFence,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(uint64_t result, uint64_t *a2, _WORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(_QWORD *)result)
  {
    v9 = v8 % *(unsigned int *)(result + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *(_QWORD *)(result + 16);
      if (*(_QWORD *)(v11 + 32 * v10 + 16) == v6)
        return result;
      while (1)
      {
        v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v11 + 32 * v10 + 16) == v6)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  result = re::HashTable<unsigned long long,re::DeformationPassBuilder::DeformationFence,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

uint64_t re::BucketArray<re::DeformationInstanceIndex,64ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > v3 << 6)
  {
    re::BucketArray<re::DeformationInstanceIndex,64ul>::setBucketsCapacity((_QWORD *)a1, (v2 + 64) >> 6);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 6)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 6));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 24 * (v2 & 0x3F);
}

_QWORD *re::BucketArray<re::DeformationInstanceIndex,64ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < a2 << 6)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 1536, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::DeformationInstanceIndex,64ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

unint64_t re::BucketArray<re::BatchedDeformationInstances,64ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 6)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 6)) + ((a2 & 0x3F) << 6);
}

{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 6)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 6)) + ((a2 & 0x3F) << 6);
}

_QWORD *re::BucketArray<re::BatchedDeformationInstances,64ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < a2 << 6)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 4096, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::BatchedDeformationInstances,64ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

_QWORD *re::BucketArray<re::DeformationPassBuilder::DeformationInstanceBucket,8ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 512, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::DeformationPassBuilder::DeformationInstanceBucket,8ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

_QWORD *re::BucketArray<unsigned char,8ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 8, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<unsigned char,8ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::DeformationPassBuilder::DeformationFence,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _WORD *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  _BYTE v27[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v27, 0, 36);
          *(_QWORD *)&v27[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v27, v13, v12);
          v15 = *(_OWORD *)v27;
          *(_OWORD *)v27 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v27[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v27[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v27[24];
          *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v27[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::DeformationPassBuilder::DeformationFence,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 16), v22, v22 + 8);
              ++v21;
              v22 += 32;
            }
            while (v21 < v20);
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v27);
        }
      }
      else
      {
        if (v12)
          v25 = 2 * v11;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 32 * v9 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 32 * v9 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_WORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::dispatchMaterialPipelineDataCompilation(unint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *WeakRetained;
  char *v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  int v28;
  NSObject *v29;
  id v30;
  id v31;
  uint64_t v32;
  __int128 v33;
  double v34;
  char *v35;
  id v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  NSObject *v47;
  NSObject *v48;
  uint64_t v49[5];
  uint64_t v50[3];
  int v51;
  uint64_t v52;
  _OWORD v53[2];
  int v54;
  uint64_t v55;
  _QWORD v56[3];
  __int128 v57;
  uint64_t v58;
  _BYTE v59[24];
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = re::internal::enableSignposts(0, 0);
  if ((_DWORD)v4)
    v4 = kdebug_trace();
  v5 = *(uint64_t **)v2;
  v6 = **(_QWORD **)v2;
  re::make::shared::object<re::FunctionReflectionCache>((re *)v4, &v58);
  if (*((_BYTE *)v5 + 40))
    v7 = (uint64_t)(v5 + 6);
  else
    v7 = *v5 + 8;
  re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::FixedArray(v56, v7);
  v57 = *(_OWORD *)(v7 + 24);
  v54 = 0;
  memset(v53, 0, sizeof(v53));
  v55 = 0x7FFFFFFFLL;
  v52 = 0;
  v51 = 0;
  memset(v50, 0, sizeof(v50));
  v37 = v2;
  if (*(_BYTE *)(v2 + 16))
  {
    v8 = *(unsigned int *)(v6 + 2776);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = (int *)(*(_QWORD *)(v6 + 2760) + 8);
      while (1)
      {
        v11 = *v10;
        v10 += 28;
        if (v11 < 0)
          break;
        if (v8 == ++v9)
        {
          LODWORD(v9) = *(_DWORD *)(v6 + 2776);
          break;
        }
      }
    }
    else
    {
      LODWORD(v9) = 0;
    }
    if ((_DWORD)v8 != (_DWORD)v9)
    {
      v12 = v9;
      do
      {
        v13 = *(_QWORD *)(v6 + 2760) + 112 * v12;
        re::DynamicString::DynamicString((re::DynamicString *)&v38, (const re::DynamicString *)(v13 + 48));
        LODWORD(v40) = *(_DWORD *)(v13 + 80);
        re::FixedArray<unsigned char>::FixedArray(&v41, (uint64_t *)(v13 + 88));
        if (!re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v53, (uint64_t)&v38))
        {
          re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)v53, (re::DynamicString *)&v38);
          re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v50, (re::DynamicString *)&v38);
        }
        if ((_QWORD)v41)
        {
          if (*((_QWORD *)&v41 + 1))
          {
            (*(void (**)(void))(*(_QWORD *)v41 + 40))();
            *((_QWORD *)&v41 + 1) = 0;
            v42 = 0;
          }
          *(_QWORD *)&v41 = 0;
        }
        if ((_QWORD)v38 && (BYTE8(v38) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v38 + 40))();
        if (*(_DWORD *)(v6 + 2776) <= (v9 + 1))
          v14 = v9 + 1;
        else
          v14 = *(_DWORD *)(v6 + 2776);
        while (1)
        {
          v12 = (v9 + 1);
          if (v14 - 1 == (_DWORD)v9)
            break;
          LODWORD(v9) = v9 + 1;
          v15 = v12;
          if ((*(_DWORD *)(*(_QWORD *)(v6 + 2760) + 112 * v12 + 8) & 0x80000000) != 0)
            goto LABEL_31;
        }
        v15 = v14;
LABEL_31:
        LODWORD(v9) = v15;
      }
      while ((_DWORD)v8 != v15);
    }
    v16 = v5[3];
    if (v16)
    {
      v17 = v5[4];
      v18 = v17 + (v16 << 6);
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)&v38, (const re::DynamicString *)v17);
        LODWORD(v40) = *(_DWORD *)(v17 + 32);
        re::FixedArray<unsigned char>::FixedArray(&v41, (uint64_t *)(v17 + 40));
        if (!re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v53, (uint64_t)&v38))
        {
          re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)v53, (re::DynamicString *)&v38);
          re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v50, (re::DynamicString *)&v38);
        }
        if ((_QWORD)v41)
        {
          if (*((_QWORD *)&v41 + 1))
          {
            (*(void (**)(void))(*(_QWORD *)v41 + 40))();
            *((_QWORD *)&v41 + 1) = 0;
            v42 = 0;
          }
          *(_QWORD *)&v41 = 0;
        }
        if ((_QWORD)v38 && (BYTE8(v38) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v38 + 40))();
        v17 += 64;
      }
      while (v17 != v18);
    }
  }
  if (*(_BYTE *)(v37 + 16))
    re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray((uint64_t)v49, v50);
  else
    re::FunctionConstantsEnumerator::createPermutation((_anonymous_namespace_ *)v56, v1, v5[4], v5[3], (uint64_t)v49);
  WeakRetained = (char *)objc_loadWeakRetained((id *)(v6 + 2736));
  v20 = WeakRetained - 8;
  if (!WeakRetained)
    v20 = 0;
  v35 = v20;
  v36 = WeakRetained;
  v21 = v5[1];
  if (v21)
    v22 = (id)(v21 + 8);
  *(_QWORD *)&v38 = v49[4];
  *((_QWORD *)&v38 + 1) = v49[2];
  re::MaterialBuilder::addFunctionsToReflectionCache(v6, (uint64_t *)&v38, v58);
  v23 = dispatch_group_create();

  *(_QWORD *)(v58 + 16) = mach_absolute_time();
  dispatch_group_enter(v23);
  v24 = *(void **)(v21 + 1360);
  v25 = v58;
  v26 = v23;
  v48 = v26;
  re::FunctionReflectionCache::scheduleAllFunctionBuildTasks(v25, v3, (id *)&v48, *(_BYTE *)(v37 + 16), (uint64_t)v24);

  v27 = *(_QWORD *)(v3 + 56);
  v28 = *(unsigned __int8 *)(v37 + 16);
  v29 = v26;
  v47 = v29;
  *(_QWORD *)&v38 = v37;
  *((_QWORD *)&v38 + 1) = v58;
  if (v58)
    v30 = (id)(v58 + 8);
  *(_QWORD *)&v39 = v27;
  *((_QWORD *)&v39 + 1) = v6;
  re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray((uint64_t)&v40, v49);
  *(_QWORD *)&v44 = v24;
  *((_QWORD *)&v44 + 1) = v21 + 168;
  v45 = v3;
  *(_QWORD *)&v46 = v35;
  if (v36)
    v31 = v36;
  *((_QWORD *)&v46 + 1) = v21;
  v60 = re::globalAllocators((re *)(id)(v21 + 8))[2];
  v32 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v60 + 32))(v60, 120, 0);
  *(_QWORD *)v32 = &off_24ED74BD8;
  *(_OWORD *)(v32 + 8) = v38;
  *(_OWORD *)(v32 + 24) = v39;
  *(_DWORD *)(v32 + 64) = 0;
  *(_QWORD *)(v32 + 40) = v40;
  *((_QWORD *)&v38 + 1) = 0;
  v40 = 0;
  *(_QWORD *)(v32 + 48) = v41;
  *(_QWORD *)(v32 + 56) = 0;
  *(_QWORD *)(v32 + 56) = *((_QWORD *)&v41 + 1);
  v41 = 0u;
  *(_QWORD *)(v32 + 72) = v43;
  v43 = 0;
  LODWORD(v42) = v42 + 1;
  *(_DWORD *)(v32 + 64) = 1;
  v33 = v44;
  *(_QWORD *)(v32 + 96) = v45;
  *(_OWORD *)(v32 + 80) = v33;
  *(_OWORD *)(v32 + 104) = v46;
  v46 = 0u;
  v61 = (_BYTE *)v32;
  re::ShaderManager::scheduleGroupNotifyOnCompilationQueue(v27, v28 != 0, v24, (id *)&v47, (uint64_t)v59);
  if (v61)
  {
    (**(void (***)(_BYTE *))v61)(v61);
    if (v61 != v59)
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 40))(v60);
    v61 = 0;
  }
  if (*((_QWORD *)&v46 + 1))
  {

    *((_QWORD *)&v46 + 1) = 0;
  }
  if ((_QWORD)v46)
  {

    *(_QWORD *)&v46 = 0;
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v40);
  if (*((_QWORD *)&v38 + 1))

  dispatch_group_leave(v29);
  if (v36)

  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v49);
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v50);
  re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v53, v34);
  re::FixedArray<re::FunctionConstantsEnumerator::PermutationLayer>::deinit(v56);
  if (v58)

}

_QWORD *re::internal::Callable<re::dispatchMaterialPipelineDataCompilation(re::MaterialPipelineDataContext const&)::$_0,void ()(void)>::~Callable(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_24ED74BD8;
  v2 = a1[14];
  if (v2)
  {

    a1[14] = 0;
  }
  v3 = a1[13];
  if (v3)
  {

    a1[13] = 0;
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)(a1 + 5));
  v4 = a1[2];
  if (v4)
  {

    a1[2] = 0;
  }
  return a1;
}

void re::internal::Callable<re::dispatchMaterialPipelineDataCompilation(re::MaterialPipelineDataContext const&)::$_0,void ()(void)>::~Callable(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_24ED74BD8;
  v2 = a1[14];
  if (v2)
  {

    a1[14] = 0;
  }
  v3 = a1[13];
  if (v3)
  {

    a1[13] = 0;
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)(a1 + 5));
  v4 = a1[2];
  if (v4)
  {

    a1[2] = 0;
  }
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::dispatchMaterialPipelineDataCompilation(re::MaterialPipelineDataContext const&)::$_0,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  void *v8;
  NSObject *v9;
  uint64_t v10;
  id v11;
  re *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];
  __int128 v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  NSObject *v23;
  dispatch_group_t v24;
  _BYTE v25[24];
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v2 = dispatch_group_create();

  dispatch_group_enter(v2);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = v2;
  v24 = v5;
  re::FunctionReflectionCache::scheduleReflectionTasksForBuiltFunctions(v3, v4, &v24, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 16), *(void **)(a1 + 80));

  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 16);
  v8 = *(void **)(a1 + 80);
  v9 = v5;
  v23 = v9;
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)v16 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)&v16[8] = v10;
  if (v10)
    v11 = (id)(v10 + 8);
  v12 = (re *)re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray((uint64_t)&v16[16], (uint64_t *)(a1 + 40));
  v13 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)&v20 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)&v20 + 1) = v13;
  if (v13)
    v12 = (re *)(id)(v13 + 8);
  v21 = *(_OWORD *)(a1 + 88);
  v14 = *(_QWORD *)(a1 + 112);
  v22 = v14;
  if (v14)
    v12 = (re *)(id)(v14 + 8);
  v26 = re::globalAllocators(v12)[2];
  v15 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v26 + 32))(v26, 104, 0);
  *(_QWORD *)v15 = &off_24ED74C30;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)v16;
  *(_DWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 24) = *(_QWORD *)&v16[16];
  *(_OWORD *)&v16[8] = 0u;
  *(_OWORD *)(v15 + 32) = v17;
  v17 = 0u;
  *(_QWORD *)(v15 + 56) = v19;
  v19 = 0;
  ++v18;
  *(_DWORD *)(v15 + 48) = 1;
  *(_OWORD *)(v15 + 64) = v20;
  *(_OWORD *)(v15 + 80) = v21;
  *(_QWORD *)(v15 + 96) = v22;
  *((_QWORD *)&v20 + 1) = 0;
  v22 = 0;
  v27 = (_BYTE *)v15;
  re::ShaderManager::scheduleGroupNotifyOnCompilationQueue(v6, v7 != 0, v8, (id *)&v23, (uint64_t)v25);
  if (v27)
  {
    (**(void (***)(_BYTE *))v27)(v27);
    if (v27 != v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
    v27 = 0;
  }
  if (v22)
  {

    v22 = 0;
  }
  if (*((_QWORD *)&v20 + 1))
  {

    *((_QWORD *)&v20 + 1) = 0;
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)&v16[16]);
  if (*(_QWORD *)&v16[8])

  dispatch_group_leave(v9);
}

uint64_t re::internal::Callable<re::dispatchMaterialPipelineDataCompilation(re::MaterialPipelineDataContext const&)::$_0,void ()(void)>::cloneInto(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  __int128 v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id v11;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24ED74BD8;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (v4)
    v6 = (id)(v4 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray(a2 + 40, (uint64_t *)(a1 + 40));
  v7 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = v7;
  v8 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 104) = v8;
  if (v8)
    v9 = (id)(v8 + 8);
  v10 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a2 + 112) = v10;
  if (v10)
    v11 = (id)(v10 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::dispatchMaterialPipelineDataCompilation(re::MaterialPipelineDataContext const&)::$_0,void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24ED74BD8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 48) = v2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v3 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v3;
  v4 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v4;
  ++*(_DWORD *)(a1 + 64);
  ++*(_DWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = v5;
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  return a2;
}

uint64_t re::internal::Callable<re::dispatchMaterialPipelineDataCompilation(re::MaterialPipelineDataContext const&)::$_0,void ()(void)>::size()
{
  return 120;
}

_QWORD *re::internal::Callable<re::dispatchMaterialPipelineDataCompilation(re::MaterialPipelineDataContext const&)::$_0::operator() const(void)::{lambda(void)#1},void ()(void)>::~Callable(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_24ED74C30;
  v2 = a1[12];
  if (v2)
  {

    a1[12] = 0;
  }
  v3 = a1[9];
  if (v3)
  {

    a1[9] = 0;
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)(a1 + 3));
  v4 = a1[2];
  if (v4)
  {

    a1[2] = 0;
  }
  return a1;
}

void re::internal::Callable<re::dispatchMaterialPipelineDataCompilation(re::MaterialPipelineDataContext const&)::$_0::operator() const(void)::{lambda(void)#1},void ()(void)>::~Callable(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_24ED74C30;
  v2 = a1[12];
  if (v2)
  {

    a1[12] = 0;
  }
  v3 = a1[9];
  if (v3)
  {

    a1[9] = 0;
  }
  re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)(a1 + 3));
  v4 = a1[2];
  if (v4)
  {

    a1[2] = 0;
  }
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::dispatchMaterialPipelineDataCompilation(re::MaterialPipelineDataContext const&)::$_0::operator() const(void)::{lambda(void)#1},void ()(void)>::operator()(uint64_t a1)
{
  re *v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  unint64_t v6;
  unint64_t v7;
  double v8;
  NSObject *v9;
  _BOOL8 v10;
  NSObject *v11;
  const char *v12;
  _QWORD *v13;
  char *v14;
  re *v15;
  const char **v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  NSObject *v25;
  int v26;
  const char *v27;
  unsigned __int8 v28;
  const char *v30;
  _BYTE v31[8];
  char *v32;
  _BYTE info[12];
  __int16 v34;
  const char *v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  re::TechniqueDefinitionBuilder::buildPipelineData(*(_anonymous_namespace_ **)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 16), (uint64_t)v31);
  if (v31[0])
  {
    v3 = mach_absolute_time();
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
    v5 = *(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale;
    if (*(double *)&re::convertMachTimeToNanoSecs(unsigned long long)::tmscale < 0.0)
    {
      if (mach_timebase_info((mach_timebase_info_t)info))
      {
        v8 = NAN;
LABEL_13:
        v13 = v32;
        if (v32)
          v14 = v32 + 8;
        re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(*(_QWORD *)(a1 + 8) + 8), (uint64_t)v13);
        v16 = *(const char ***)(a1 + 64);
        v17 = "";
        if (v16)
        {
          v18 = *v16;
          if (v18)
            v17 = v18;
        }
        v19 = v13[2];
        v20 = "";
        if (v19)
        {
          v21 = *(const char **)(v19 + 8);
          if (v21)
            v20 = v21;
        }
        v22 = v13[3];
        v23 = "";
        if (v22)
        {
          v24 = *(const char **)(v22 + 8);
          if (v24)
            v23 = v24;
        }
        v25 = *re::graphicsLogObjects(v15);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          v26 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 16);
          *(_DWORD *)info = 136447234;
          if (v26)
            v27 = "fallback";
          else
            v27 = "specialized";
          *(_QWORD *)&info[4] = v27;
          v34 = 2082;
          v35 = v17;
          v36 = 2082;
          v37 = v20;
          v38 = 2082;
          v39 = v23;
          v40 = 1024;
          v41 = (int)(v8 / 1000000.0);
          _os_log_impl(&dword_224FE9000, v25, OS_LOG_TYPE_DEFAULT, "Function specialization completed for %{public}s technique %{public}s with vertex shader %{public}s and fragment shader %{public}s in %d", info, 0x30u);
        }

        goto LABEL_30;
      }
      LODWORD(v6) = *(_DWORD *)info;
      LODWORD(v7) = *(_DWORD *)&info[4];
      v5 = (double)v6 / (double)v7;
      re::convertMachTimeToNanoSecs(unsigned long long)::tmscale = *(_QWORD *)&v5;
    }
    v8 = v5 * (double)(v3 - v4);
    goto LABEL_13;
  }
  v9 = *re::graphicsLogObjects(v2);
  v10 = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
  if (v10)
  {
    v30 = re::ObjCObject::description((id *)&v32);
    *(_DWORD *)info = 136315138;
    *(_QWORD *)&info[4] = v30;
    _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "%s", info, 0xCu);
  }
  v11 = *re::graphicsLogObjects((re *)v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    v12 = **(const char ***)(a1 + 64);
    if (!v12)
      v12 = "";
    *(_DWORD *)info = 136315138;
    *(_QWORD *)&info[4] = v12;
    _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Pipeline data for technique %s failed compilation!", info, 0xCu);
  }
LABEL_30:
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  if (v31[0])
    v28 = 1;
  else
    v28 = 3;
  atomic_store(v28, (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 17));
  MEMORY[0x227693220](*(_QWORD *)(a1 + 8) + 17);
  return re::Result<re::SharedPtr<re::RealityFileWriter::AssetInfo>,re::WrappedError>::~Result((uint64_t)v31);
}

uint64_t re::internal::Callable<re::dispatchMaterialPipelineDataCompilation(re::MaterialPipelineDataContext const&)::$_0::operator() const(void)::{lambda(void)#1},void ()(void)>::cloneInto(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  id v10;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a2 = &off_24ED74C30;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  if (v4)
    v6 = (id)(v4 + 8);
  re::DynamicArray<re::TechniqueFunctionConstant>::DynamicArray(a2 + 24, (uint64_t *)(a1 + 24));
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 72) = v7;
  if (v7)
    v8 = (id)(v7 + 8);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  v9 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a2 + 96) = v9;
  if (v9)
    v10 = (id)(v9 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::dispatchMaterialPipelineDataCompilation(re::MaterialPipelineDataContext const&)::$_0::operator() const(void)::{lambda(void)#1},void ()(void)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a2 = &off_24ED74C30;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 48) = 0;
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 32) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v3;
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  ++*(_DWORD *)(a1 + 48);
  ++*(_DWORD *)(a2 + 48);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  return a2;
}

uint64_t re::internal::Callable<re::dispatchMaterialPipelineDataCompilation(re::MaterialPipelineDataContext const&)::$_0::operator() const(void)::{lambda(void)#1},void ()(void)>::size()
{
  return 104;
}

_anonymous_namespace_ *re::setVertexAmplificationCount(_anonymous_namespace_ *this, int a2, int a3, int a4, uint64_t a5, const RenderCommandEncoder *a6)
{
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  void (*v13)(uint64_t, char *, uint64_t, _QWORD *);
  uint64_t v14;
  uint64_t *v15;

  if (a3 == 2 && a2 && (_DWORD)this)
  {
    if (v8)
    {
      v10 = v8;
      v8[1] = 0x100000001;
      *v8 = 0;
      if ((~a4 & 3) != 0)
      {
        if ((a4 & 1) == 0)
        {
          if ((a4 & 2) != 0)
            (*(void (**)(_QWORD, char *, uint64_t, _QWORD *))(*(_QWORD *)(a5 + 8) + 144))(**(_QWORD **)(a5 + 8), sel_setVertexAmplificationCount_viewMappings_, 1, v8 + 1);
        }
        v15 = *(uint64_t **)(a5 + 8);
        v12 = *v15;
        v13 = (void (*)(uint64_t, char *, uint64_t, _QWORD *))v15[18];
        v14 = 1;
      }
      else
      {
        v11 = *(uint64_t **)(a5 + 8);
        v12 = *v11;
        v13 = (void (*)(uint64_t, char *, uint64_t, _QWORD *))v11[18];
        v14 = 2;
      }
      v13(v12, sel_setVertexAmplificationCount_viewMappings_, v14, v10);
    }
    re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    this = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
  }
  return this;
}

_BYTE *re::VertexCacheDeformer::init(_BYTE *this, re::RenderManager *a2)
{
  uint64_t v3;
  void **v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  void **ComputePipelineState;
  _BYTE *v8;
  _OWORD v9[2];
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  _BYTE *v15;
  char v16;
  _QWORD v17[4];
  _BYTE v18[24];
  int v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;

  if (!this[40])
  {
    v3 = 0;
    this[40] = 1;
    v8 = this;
    v4 = (void **)(this + 8);
    do
    {
      v14[0] = 0;
      v20 = 0;
      memset(v18, 0, sizeof(v18));
      v19 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      memset(v9, 0, sizeof(v9));
      v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v9, 0);
      v11 = 0;
      v12 = 0;
      v13 = 0;
      re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v9, v3);
      v10 = 33;
      re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v18, (re::DynamicString *)v9);
      ComputePipelineState = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v14);
      NS::SharedPtr<MTL::Texture>::operator=(v4, ComputePipelineState);
      if (v11)
      {
        if (v12)
        {
          (*(void (**)(void))(*(_QWORD *)v11 + 40))();
          v12 = 0;
          v13 = 0;
        }
        v11 = 0;
      }
      if (*(_QWORD *)&v9[0] && (BYTE8(v9[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v9[0] + 40))();
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v18);
      this = (_BYTE *)v17[0];
      if (v17[0])
      {
        if ((v17[1] & 1) != 0)
          this = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v17[0] + 40))();
        memset(v17, 0, sizeof(v17));
      }
      if (v14[0])
      {
        this = v15;
        if (v15)
        {
          if ((v16 & 1) != 0)
            this = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)v15 + 40))();
        }
      }
      ++v3;
      ++v4;
    }
    while (v3 != 4);
    v8[41] = 1;
  }
  return this;
}

int64x2_t re::VertexCacheDeformer::addDeformationInstance@<Q0>(uint64_t a1@<X8>)
{
  int64x2_t result;

  *(_QWORD *)a1 = 0xFFFFFFFFLL;
  result = vdupq_n_s64(2uLL);
  *(int64x2_t *)(a1 + 8) = result;
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 32) = -1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

_QWORD *re::VertexCacheDeformer::allocateBuffers(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float v28;
  float v29;
  unsigned int v30;
  float v31;
  id v32;
  id v33;
  uint64_t v34;
  NSObject *v35;
  id v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  id v52;
  uint64_t v54;
  re::FrameContext *v55;
  _QWORD *v56;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  __int16 v63;
  int v64;
  char v65;
  _BYTE v66[6];
  int v67;
  char v68;
  uint64_t v69;
  int v70;
  const char *v71;
  __int16 v72;
  int v73;
  __int16 v74;
  unint64_t v75;
  __int16 v76;
  unint64_t v77;
  uint8_t buf[32];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;

  v6 = a4;
  v82 = *MEMORY[0x24BDAC8D0];
  v8 = *a4;
  v9 = *(_QWORD *)(*a4 + 48);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2[3] + 32))(a2[3], 56, 8);
  v11 = a2[3];
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_DWORD *)(v10 + 16) = 1;
  *(_QWORD *)(v10 + 24) = 0;
  v54 = v10 + 24;
  v55 = (re::FrameContext *)a2;
  *(_DWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  v56 = (_QWORD *)v10;
  re::BucketArray<re::Pair<unsigned long,re::BufferView,true>,8ul>::init(v10, v11, 1uLL);
  v61 = v9;
  if (v9)
  {
    v12 = 0;
    v60 = v8 + 8;
    v59 = v6;
    while (1)
    {
      v13 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v60, v12);
      v15 = *(_QWORD *)(v13 + 8);
      v16 = v6[6];
      if (v16 <= v15)
        break;
      v17 = v13;
      v18 = v6[5];
      v19 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v6[1], v15);
      v4 = *(_QWORD *)(*(_QWORD *)(v19 + 352) + 152);
      if (v4)
      {
        v20 = v19;
        v21 = (_QWORD *)(v18 + 312 * v15);
        v22 = *(unsigned int *)(v4 + 36);
        buf[0] = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v21, 1u);
        v23 = *(_DWORD *)(v21[8]
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v21 + 7, buf)+ 20);
        buf[0] = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v21, 1u);
        v24 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v21 + 15, buf);
        v5 = v23 / *(unsigned __int16 *)(v21[16] + 20 * v24 + 4);
        v26 = *(unsigned int *)(v4 + 12);
        if (v27 == v5)
        {
          if (*(float *)(v4 + 32) >= 0.5)
            v28 = 1.0;
          else
            v28 = 0.0;
          if (*(_BYTE *)(a1 + 41))
            v29 = *(float *)(v4 + 32);
          else
            v29 = v28;
          *(_DWORD *)&v66[2] = 16842753;
          *(_WORD *)v66 = (re::sizeFromVertexFormat(v30, v25) + 3) & 0x1FC;
          v68 = v30;
          v67 = 0;
          if (v29 == 0.0 || (v31 = fabsf(v29) + 1.0, vabds_f32(0.0, v29) < (float)(v31 * 0.00001)))
          {
            v32 = objc_msgSend(*(id *)v4, sel_contents);
            v33 = *(id *)v4;
            *(_QWORD *)buf = v32;
            v34 = *(_QWORD *)(v4 + 8);
          }
          else if (v29 == 1.0 || vabds_f32(1.0, v29) < (float)((float)(v31 + 1.0) * 0.00001))
          {
            v36 = objc_msgSend(*(id *)(v4 + 16), sel_contents);
            v33 = *(id *)(v4 + 16);
            *(_QWORD *)buf = v36;
            v34 = *(_QWORD *)(v4 + 24);
          }
          else
          {
            re::FrameContext::perFrameAlloc(v55, 8uLL, 4uLL, (uint64_t)buf);
            v37 = *(_QWORD *)&buf[16];
            v38 = *(unsigned int *)&buf[8];
            v39 = *(unsigned int *)&buf[12];
            v40 = *(_QWORD *)buf + *(unsigned int *)&buf[8];
            *(_DWORD *)v40 = v5;
            *(float *)(v40 + 4) = v29;
            v41 = v56;
            v42 = v56[5];
            v5 = v56[1];
            if (v42 + 1 > 8 * v5)
            {
              v43 = v38;
              v44 = v39;
              re::BucketArray<re::Pair<unsigned long,re::BufferView,true>,8ul>::setBucketsCapacity(v56, (v42 + 8) >> 3);
              v39 = v44;
              v38 = v43;
              v41 = v56;
              v5 = v56[1];
            }
            v4 = v42 >> 3;
            if (v5 <= v42 >> 3)
              goto LABEL_31;
            v45 = v54;
            if ((v41[2] & 1) == 0)
              v45 = v41[4];
            v46 = *(_QWORD *)(v45 + 8 * v4);
            ++v41[5];
            ++*((_DWORD *)v41 + 12);
            v47 = (unint64_t *)(v46 + 24 * (v42 & 7));
            *v47 = v15;
            v47[1] = v37;
            v47[2] = v38 | (v39 << 32);
            v48 = *(_QWORD **)(v20 + 360);
            v49 = v59[2];
            v62 = *(_DWORD *)v66;
            v63 = *(_WORD *)&v66[4];
            v64 = v67;
            v65 = v68;
            v50 = re::DeformationBufferAllocator::alloc(v48, v49, 1, (uint64_t)&v62, *(unsigned __int8 *)(v17 + 16), v26);
            v51 = re::DeformationBufferAllocator::allocationData(*(re::DeformationBufferAllocator **)(v20 + 360), *(unsigned __int8 *)(v17 + 16), v50);
            v52 = objc_msgSend(*(id *)(v51 + 24), sel_contents);
            v33 = *(id *)(v51 + 24);
            *(_QWORD *)buf = v52;
            v34 = *(_QWORD *)(v51 + 32);
          }
          *(_QWORD *)&buf[8] = v34;
          *(_QWORD *)&buf[16] = v33;
          re::DeformationVertexBufferState::setOutputBuffer((uint64_t)v21, 1u, a3, (uint64_t)buf, (uint64_t)v66);
          v6 = v59;
        }
        else
        {
          v35 = *re::graphicsLogObjects((re *)v24);
          v6 = v59;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134218240;
            *(_QWORD *)&buf[4] = v27;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v5;
            _os_log_impl(&dword_224FE9000, v35, OS_LOG_TYPE_DEFAULT, "Vertex cache size (%zu) does not match target vertex buffer size (%zu)", buf, 0x16u);
          }
        }
      }
      if (v61 == ++v12)
        return v56;
    }
    re::internal::assertLog((re::internal *)6, v14, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, *(_QWORD *)(v13 + 8), v16);
    _os_crash();
    __break(1u);
LABEL_31:
    v69 = 0;
    v80 = 0u;
    v81 = 0u;
    v79 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v70 = 136315906;
    v71 = "operator[]";
    v72 = 1024;
    v73 = 858;
    v74 = 2048;
    v75 = v4;
    v76 = 2048;
    v77 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return v56;
}

uint64_t re::DeformationBufferAllocator::allocationData(re::DeformationBufferAllocator *this, unsigned int a2, unsigned int a3)
{
  if (*((_QWORD *)this + 1) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](*((_QWORD *)this + 2) + 72 * a2 + 16, a3);
}

uint64_t re::VertexCacheDeformer::deformGPU(uint64_t a1, uint64_t a2, void **this, uint64_t *a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;
  uint64_t v24;
  _BYTE v27[28];
  __int16 v28;
  _QWORD *v29;
  _OWORD v30[5];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  re::mtl::ComputeCommandEncoder::pushDebugGroup(this, (re::ns *)"Apply Vertex Cache Deformer");
  v24 = *(_QWORD *)(a2 + 40);
  if (v24)
  {
    v9 = 0;
    while (1)
    {
      v10 = *(_QWORD *)(a2 + 40);
      if (v10 <= v9)
        break;
      v4 = v9 >> 3;
      v5 = *(_QWORD **)(a2 + 8);
      if ((unint64_t)v5 <= v9 >> 3)
        goto LABEL_11;
      v11 = a2 + 24;
      if ((*(_BYTE *)(a2 + 16) & 1) == 0)
        v11 = *(_QWORD *)(a2 + 32);
      v12 = *(_QWORD *)(v11 + 8 * v4);
      v13 = *(_QWORD *)(v12 + 24 * (v9 & 7));
      v14 = a4[6];
      if (v14 <= v13)
        goto LABEL_12;
      v15 = v12 + 24 * (v9 & 7);
      v5 = (_QWORD *)(a4[5] + 312 * v13);
      v16 = *(_QWORD *)(*(_QWORD *)(re::BucketArray<re::ActiveDeformation,8ul>::operator[](a4[1], v13) + 352) + 152);
      LOBYTE(v30[0]) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v5, 1u);
      v17 = *(_DWORD *)(v5[8]
                      + 32
                      * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v5 + 7, (unsigned __int8 *)v30)+ 20);
      LOBYTE(v30[0]) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v5, 1u);
      v18 = v17
          / *(unsigned __int16 *)(v5[16]
                                + 20
                                * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v5 + 15, (unsigned __int8 *)v30)+ 4);
      v19 = a1 + 8 * *(unsigned int *)(v16 + 36);
      v20 = objc_msgSend(*(id *)(v19 + 8), sel_maxTotalThreadsPerThreadgroup);
      v4 = (v18 + v20 - 1) / v20;
      objc_msgSend(*this, "setComputePipelineState:", *(_QWORD *)(v19 + 8));
      objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)v16, *(unsigned int *)(v16 + 8), 0);
      objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v16 + 16), *(unsigned int *)(v16 + 24), 1);
      LOBYTE(v30[0]) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v5, 1u);
      v21 = *(_QWORD *)(v5[24]
                      + 32
                      * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v5 + 23, (unsigned __int8 *)v30)+ 24);
      LOBYTE(v30[0]) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v5, 1u);
      objc_msgSend(*this, "setBuffer:offset:atIndex:", v21, *(unsigned int *)(v5[24]+ 32* re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v5 + 23, (unsigned __int8 *)v30)+ 16), 2);
      objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v15 + 8), *(unsigned int *)(v15 + 16), 3);
      v22 = *this;
      *(_QWORD *)&v30[0] = v4;
      *(int64x2_t *)((char *)v30 + 8) = vdupq_n_s64(1uLL);
      *(_QWORD *)v27 = v20;
      *(_OWORD *)&v27[8] = *(_OWORD *)((char *)v30 + 8);
      objc_msgSend(v22, "dispatchThreadgroups:threadsPerThreadgroup:", v30, v27);
      if (v24 == ++v9)
        return objc_msgSend(*this, "popDebugGroup");
    }
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, v9, v10);
    _os_crash();
    __break(1u);
LABEL_11:
    memset(v30, 0, sizeof(v30));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v27 = 136315906;
    *(_QWORD *)&v27[4] = "operator[]";
    *(_WORD *)&v27[12] = 1024;
    *(_DWORD *)&v27[14] = 858;
    *(_WORD *)&v27[18] = 2048;
    *(_QWORD *)&v27[20] = v4;
    v28 = 2048;
    v29 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_12:
    re::internal::assertLog((re::internal *)6, v13, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v13, v14);
    _os_crash();
    __break(1u);
  }
  return objc_msgSend(*this, "popDebugGroup");
}

void re::VertexCacheDeformer::~VertexCacheDeformer(re::VertexCacheDeformer *this)
{
  uint64_t v2;
  void *v3;

  v2 = 32;
  do
  {
    v3 = *(void **)((char *)this + v2);
    if (v3)
    {

      *(_QWORD *)((char *)this + v2) = 0;
    }
    v2 -= 8;
  }
  while (v2);
}

{
  uint64_t v2;
  void *v3;

  v2 = 32;
  while (1)
  {
    v3 = *(void **)((char *)this + v2);
    if (v3)
    {

      *(_QWORD *)((char *)this + v2) = 0;
    }
    v2 -= 8;
    if (!v2)
      JUMPOUT(0x2276933B8);
  }
}

void re::VertexCacheDeformer::deformCPU(uint64_t a1, uint64_t a2)
{
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Unexpected CPU deform call for Vertex Cache Deformer.", "!\"Unreachable code\"", "deformCPU", 75);
  _os_crash();
  __break(1u);
}

uint64_t re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  unint64_t v10;
  int8x16_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1[7])
    return -1;
  v2 = a1[2];
  if (v2 < 0x10 || !a1[3])
    return -1;
  v3 = v2 >> 4;
  v4 = *a2;
  v5 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v4) ^ ((0xBF58476D1CE4E5B9 * v4) >> 27));
  v6 = v5 ^ (v5 >> 31);
  v7 = v6 % v3;
  v8 = vdupq_n_s8(v6 & 0x7F);
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  v10 = v6 % v3;
  while (1)
  {
    v11 = *(int8x16_t *)(*a1 + 16 * v10);
    v12 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v8, v11), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    v13 = __clz(__rbit64(v12));
    if (v13 <= 0x3F)
      break;
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v11, v9), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v10 + 1 == v3)
      v10 = 0;
    else
      ++v10;
    v15 = -1;
    if (v10 == v7)
      return v15;
  }
  v14 = 16 * v10;
  while (1)
  {
    v15 = v13 + v14;
    if ((_DWORD)v4 == *(unsigned __int8 *)(a1[1] + 32 * (v13 + v14)))
      return v15;
    if (v13 <= 0x3E)
    {
      v13 = __clz(__rbit64((-2 << v13) & v12));
      if (v13 < 0x40)
        continue;
    }
    goto LABEL_10;
  }
}

uint64_t re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  unint64_t v10;
  int8x16_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1[7])
    return -1;
  v2 = a1[2];
  if (v2 < 0x10 || !a1[3])
    return -1;
  v3 = v2 >> 4;
  v4 = *a2;
  v5 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v4) ^ ((0xBF58476D1CE4E5B9 * v4) >> 27));
  v6 = v5 ^ (v5 >> 31);
  v7 = v6 % v3;
  v8 = vdupq_n_s8(v6 & 0x7F);
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  v10 = v6 % v3;
  while (1)
  {
    v11 = *(int8x16_t *)(*a1 + 16 * v10);
    v12 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v8, v11), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    v13 = __clz(__rbit64(v12));
    if (v13 <= 0x3F)
      break;
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v11, v9), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v10 + 1 == v3)
      v10 = 0;
    else
      ++v10;
    v15 = -1;
    if (v10 == v7)
      return v15;
  }
  v14 = 16 * v10;
  while (1)
  {
    v15 = v13 + v14;
    if ((_DWORD)v4 == *(unsigned __int8 *)(a1[1] + 20 * (v13 + v14)))
      return v15;
    if (v13 <= 0x3E)
    {
      v13 = __clz(__rbit64((-2 << v13) & v12));
      if (v13 < 0x40)
        continue;
    }
    goto LABEL_10;
  }
}

uint64_t re::DeformationVertexBufferState::setOutputBuffer(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unsigned __int8 v23;

  v23 = a2;
  re::DeformationVertexBufferState::ensureVertexBufferInitialized(a1, a2);
  v8 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(a1 + 248), &v23);
  *(_BYTE *)(a1 + 32) |= !re::VertexBufferFormat::operator==((unsigned __int16 *)(*(_QWORD *)(a1 + 256) + 20 * v8 + 4), (unsigned __int16 *)a5);
  v9 = *(_QWORD *)(a1 + 192)
     + 32
     * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(a1 + 184), &v23);
  v10 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)(v9 + 8) = *(_OWORD *)a4;
  *(_QWORD *)(v9 + 24) = v10;
  v11 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(a1 + 248), &v23);
  v12 = *(_QWORD *)(a1 + 256);
  v13 = v12 + 20 * v11;
  v14 = *(_WORD *)(a5 + 4);
  *(_DWORD *)(v13 + 4) = *(_DWORD *)a5;
  v13 += 4;
  *(_WORD *)(v13 + 4) = v14;
  if (v13 != a5)
  {
    v15 = v12 + 20 * v11;
    *(_DWORD *)(v15 + 12) = *(_DWORD *)(a5 + 8);
    *(_BYTE *)(v15 + 16) = *(_BYTE *)(a5 + 12);
  }
  v16 = 1 << v23;
  v17 = re::Bitset<64>::toWordIndex(a1 + 8, v23);
  *(_QWORD *)(a1 + 8 + 8 * v17) |= v16;
  v18 = 1 << v23;
  v19 = re::Bitset<64>::toWordIndex(a1 + 16, v23);
  *(_QWORD *)(a1 + 16 + 8 * v19) |= v18;
  v20 = a1 + 24;
  v21 = 1 << v23;
  result = re::Bitset<64>::toWordIndex(v20, v23);
  *(_QWORD *)(v20 + 8 * result) |= v21;
  return result;
}

BOOL re::VertexBufferFormat::operator==(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && *((unsigned __int8 *)a1 + 4) == *((unsigned __int8 *)a2 + 4)
      && *((unsigned __int8 *)a1 + 5) == *((unsigned __int8 *)a2 + 5)
      && *((_DWORD *)a1 + 2) == *((_DWORD *)a2 + 2)
      && *((unsigned __int8 *)a1 + 12) == *((unsigned __int8 *)a2 + 12);
}

_QWORD *re::BucketArray<re::Pair<unsigned long,re::BufferView,true>,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::Pair<unsigned long,re::BufferView,true>,8ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::Pair<unsigned long,re::BufferView,true>,8ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  int v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;

  v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      v4 = result[1];
      if (v4 > a2)
      {
        v5 = *((_DWORD *)result + 4);
        do
        {
          v6 = v3 + 3;
          if ((v5 & 1) == 0)
            v6 = (_QWORD *)v3[4];
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 40))(*v3, v6[v4 - 1]);
          v7 = *((_DWORD *)v3 + 4);
          v4 = v3[1] - 1;
          v3[1] = v4;
          v5 = v7 + 2;
          *((_DWORD *)v3 + 4) = v5;
        }
        while (v4 > a2);
      }
      if (v4 < a2)
      {
        v8 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 192, 0);
          v9 = result;
          if (*v3)
          {
            v10 = v3[1];
            v11 = *((_DWORD *)v3 + 4);
            if ((v11 & 1) == 0)
            {
              v12 = *v8;
              v14 = v10 >= *v8;
              v13 = v10 + 1;
              v14 = !v14 || v12 >= v13;
              if (v14)
                goto LABEL_24;
              v15 = 2 * v12;
              goto LABEL_20;
            }
            v13 = v10 + 1;
            if (v13 >= 3)
            {
              v15 = 4;
LABEL_20:
              if (v15 <= v13)
                v17 = v13;
              else
                v17 = v15;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v17);
              v11 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v16 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v16);
            v11 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v11;
          }
LABEL_24:
          v18 = v3 + 3;
          if ((v11 & 1) == 0)
            v18 = (_QWORD *)v3[4];
          v19 = v3[1];
          v18[v19++] = v9;
          v3[1] = v19;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v19 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

unsigned int *re::RenderGraphStats::registerNewFrame(unsigned int *this)
{
  unsigned int v1;
  unsigned int *v2;

  v1 = *this + 1;
  *this = v1;
  if (v1 >> 3 >= 0x2A3)
  {
    v2 = this;
    this = (unsigned int *)this[1];
    if (this | v2[2] || v2[3] || v2[4])
      this = (unsigned int *)re::REAnalyticsEventRenderGraphCacheState((re *)this);
    *(_QWORD *)v2 = 0;
    *((_QWORD *)v2 + 1) = 0;
    v2[4] = 0;
  }
  return this;
}

uint64_t re::RenderFrameWorkloadPatchCamera::trackLocalEyePose(uint64_t a1, __int128 *a2, int a3, re::DynamicString *a4)
{
  _BOOL4 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12[16];
  __int128 v13;
  __int128 v14;
  char v15;
  _QWORD v16[7];

  v16[6] = *MEMORY[0x24BDAC8D0];
  v5 = a3 == 2;
  v7 = *a2;
  v8 = a2[1];
  re::DynamicString::DynamicString((re::DynamicString *)&v9, a4);
  v12[0] = 1;
  v13 = v7;
  v14 = v8;
  v15 = 0;
  v16[0] = v9;
  v16[3] = v11;
  *(_OWORD *)&v16[1] = v10;
  v11 = 0;
  v9 = 0;
  v10 = 0uLL;
  re::Optional<re::RenderFrameWorkloadPatchCamera::TrackedEyePoseInfo>::operator=(a1 + 96 * v5 + 192, v12);
  if (v12[0] && v16[0])
  {
    if ((v16[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v16[0] + 40))();
    memset(v16, 0, 32);
  }
  result = v9;
  if (v9)
  {
    if ((v10 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v9 + 40))();
  }
  return result;
}

uint64_t re::Optional<re::RenderFrameWorkloadPatchCamera::TrackedEyePoseInfo>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  BOOL v4;
  BOOL v5;
  _OWORD *v6;
  BOOL v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *a2;
  if (*(_BYTE *)a1)
    v4 = 0;
  else
    v4 = v3 == 0;
  if (!v4)
  {
    if (*(_BYTE *)a1)
      v5 = v3 == 0;
    else
      v5 = 0;
    if (v5)
    {
      v11 = (_OWORD *)(a1 + 56);
      v10 = *(_QWORD *)(a1 + 56);
      if (v10)
      {
        if ((*(_BYTE *)(a1 + 64) & 1) != 0)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 40))(v10, *(_QWORD *)(a1 + 72));
        *v11 = 0u;
        *(_OWORD *)(a1 + 72) = 0u;
      }
      *(_BYTE *)a1 = 0;
    }
    else
    {
      v6 = (_OWORD *)(a1 + 16);
      if (*(_BYTE *)a1)
        v7 = 1;
      else
        v7 = v3 == 0;
      if (v7)
      {
        v8 = *((_OWORD *)a2 + 1);
        v9 = *((_OWORD *)a2 + 2);
        *(_BYTE *)(a1 + 48) = a2[48];
        *v6 = v8;
        *(_OWORD *)(a1 + 32) = v9;
        re::DynamicString::operator=((re::DynamicString *)(a1 + 56), (re::DynamicString *)(a2 + 56));
      }
      else
      {
        *(_BYTE *)a1 = 1;
        v12 = *((_OWORD *)a2 + 1);
        v13 = *((_OWORD *)a2 + 2);
        *(_BYTE *)(a1 + 48) = a2[48];
        *v6 = v12;
        *(_OWORD *)(a1 + 32) = v13;
        *(_OWORD *)(a1 + 56) = 0u;
        *(_OWORD *)(a1 + 72) = 0u;
        *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
        v14 = *((_QWORD *)a2 + 8);
        *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 7);
        *((_QWORD *)a2 + 7) = 0;
        v15 = *((_QWORD *)a2 + 9);
        *((_QWORD *)a2 + 10) = 0;
        v17 = *(_QWORD *)(a1 + 64);
        v16 = *(_QWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 64) = v14;
        *(_QWORD *)(a1 + 72) = v15;
        *((_QWORD *)a2 + 8) = v17;
        *((_QWORD *)a2 + 9) = v16;
      }
    }
  }
  return a1;
}

uint64_t re::RenderFrameWorkloadPatchCamera::trackWorldEyePose(uint64_t a1, __int128 *a2, int a3, re::DynamicString *a4)
{
  _BOOL4 v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12[16];
  __int128 v13;
  __int128 v14;
  char v15;
  _QWORD v16[7];

  v16[6] = *MEMORY[0x24BDAC8D0];
  v5 = a3 == 2;
  v7 = *a2;
  v8 = a2[1];
  re::DynamicString::DynamicString((re::DynamicString *)&v9, a4);
  v12[0] = 1;
  v13 = v7;
  v14 = v8;
  v15 = 1;
  v16[0] = v9;
  v16[3] = v11;
  *(_OWORD *)&v16[1] = v10;
  v11 = 0;
  v9 = 0;
  v10 = 0uLL;
  re::Optional<re::RenderFrameWorkloadPatchCamera::TrackedEyePoseInfo>::operator=(a1 + 96 * v5 + 192, v12);
  if (v12[0] && v16[0])
  {
    if ((v16[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v16[0] + 40))();
    memset(v16, 0, 32);
  }
  result = v9;
  if (v9)
  {
    if ((v10 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v9 + 40))();
  }
  return result;
}

void re::RenderFrameWorkloadPatchCamera::applyPostEncode(uint64_t this, const re::RenderFrame *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  size_t v13;
  uint64_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  __int128 v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  re *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  char v50;
  float32x4_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  float32x4_t v56;
  int8x16_t v57;
  float32x4_t v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  __int128 v65;
  __int128 v66;
  uint64_t *v67;
  unsigned __int8 v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  uint8_t buf[16];
  float32x4_t v81;
  uint64_t v82[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86[2];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;

  v3 = this;
  *(_QWORD *)&v91 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(this + 32))
  {
    *(_OWORD *)v82 = 0u;
    *(_OWORD *)buf = xmmword_2260E5D70;
    v90 = 0u;
    re::decomposeScaleRotationTranslation<float>(this + 48, (int32x4_t *)v82, buf, &v90);
    v76 = (float32x4_t)v90;
    v78 = *(int32x4_t *)buf;
    this = MurmurHash3_x64_128((uint64_t)"Camera", 6, 0, (unint64_t *)v82);
    v4 = 0;
    v5 = 0;
    v88 = 0u;
    v89 = 0u;
    v6 = (v82[1] + (v82[0] << 6) + ((unint64_t)v82[0] >> 2) - 0x61C8864680B583E9) ^ v82[0];
    *(_OWORD *)v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    *(_OWORD *)v82 = 0u;
    v83 = 0u;
    v75 = v3;
    v7 = v3 + 192;
    v8 = 1;
    do
    {
      v9 = v8;
      if (*(_BYTE *)(v7 + 96 * v5))
      {
        v10 = v7 + 96 * v5;
        v11 = v10 + 16;
        if ((*(_BYTE *)(v10 + 64) & 1) != 0)
          v12 = *(const char **)(v10 + 72);
        else
          v12 = (const char *)(v10 + 65);
        v13 = strlen(v12);
        v14 = 0x9E3779B97F4A7C17;
        if (v13)
        {
          MurmurHash3_x64_128((uint64_t)v12, v13, 0, (unint64_t *)buf);
          v14 = ((*(_QWORD *)&buf[8] - 0x61C8864680B583E9 + (*(_QWORD *)buf << 6) + (*(_QWORD *)buf >> 2)) ^ *(_QWORD *)buf)
              - 0x61C8864680B583E9;
        }
        *((_QWORD *)&v90 + v5) = ((v6 >> 2) + (v6 << 6) + v14) ^ v6;
        this = (uint64_t)re::RenderFrameWorkloadPatchCamera::TrackedEyePoseInfo::worldEyePose(buf, v11, v76, v78);
        v15 = vnegq_f32(v81);
        v16 = (int8x16_t)vnegq_f32(*(float32x4_t *)buf);
        v17 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL);
        v18 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), v16, 0xCuLL), v81), v17, *(float32x4_t *)buf);
        v19 = (int8x16_t)vaddq_f32(v18, v18);
        v20 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), v19, 0xCuLL);
        v21 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL), v81), v20, v17);
        v22 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v20, v81, 3), *(float32x4_t *)buf), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), v21, 0xCuLL));
        v20.f32[0] = v15.f32[0] + v15.f32[0];
        v23 = (float)(v15.f32[0] + v15.f32[0]) * v15.f32[0];
        v24 = vmuls_lane_f32(v15.f32[1] + v15.f32[1], *(float32x2_t *)v15.f32, 1);
        v25 = vmuls_lane_f32(v15.f32[2] + v15.f32[2], v15, 2);
        v26 = vmuls_lane_f32(v15.f32[0] + v15.f32[0], *(float32x2_t *)v15.f32, 1);
        v27 = vmuls_lane_f32(v15.f32[0] + v15.f32[0], v15, 2);
        v15.f32[0] = vmuls_lane_f32(v15.f32[1] + v15.f32[1], v15, 2);
        v20.f32[0] = vmuls_lane_f32(v20.f32[0], v81, 3);
        v17.f32[0] = vmuls_lane_f32(v15.f32[1] + v15.f32[1], v81, 3);
        v28 = vmuls_lane_f32(v15.f32[2] + v15.f32[2], v81, 3);
        HIDWORD(v29) = 0;
        *(float *)&v29 = 1.0 - (float)(v24 + v25);
        *((float *)&v29 + 1) = v26 + v28;
        *((float *)&v29 + 2) = v27 - v17.f32[0];
        *(float *)v21.i32 = 1.0 - (float)(v23 + v25);
        HIDWORD(v30) = 0;
        *(float *)&v30 = v26 - v28;
        DWORD1(v30) = v21.i32[0];
        *((float *)&v30 + 2) = v15.f32[0] + v20.f32[0];
        v17.i32[3] = 0;
        v17.f32[0] = v27 + v17.f32[0];
        v17.f32[1] = v15.f32[0] - v20.f32[0];
        v17.f32[2] = 1.0 - (float)(v23 + v24);
        v22.i32[3] = 1.0;
        v31 = &v82[8 * v5];
        *(_OWORD *)v31 = v29;
        *((_OWORD *)v31 + 1) = v30;
        *((float32x4_t *)v31 + 2) = v17;
        *((float32x4_t *)v31 + 3) = v22;
        ++v4;
      }
      v8 = 0;
      v5 = 1;
    }
    while ((v9 & 1) != 0);
    if (v4)
    {
      v32 = *((unsigned int *)a2 + 162);
      if ((_DWORD)v32)
      {
        v33 = 0;
        v34 = (_DWORD *)(*((_QWORD *)a2 + 79) + 8);
        while ((*v34 & 0x80000000) == 0)
        {
          v34 += 512;
          if (v32 == ++v33)
          {
            LODWORD(v33) = *((_DWORD *)a2 + 162);
            break;
          }
        }
      }
      else
      {
        LODWORD(v33) = 0;
      }
      if ((_DWORD)v32 != (_DWORD)v33)
      {
        v36 = v33;
        v37 = v90;
        v38 = *((_QWORD *)a2 + 79);
        do
        {
          v39 = (__n128 *)(v38 + (v36 << 11));
          if (v39[1].n128_u64[0] == v37)
          {
            re::VFXLateLatch::patchTrackedVFXDrawCalls((re::LateLatch *)&v39[114].n128_i8[8], v39 + 117, (uint64_t)v82, 2);
            re::ViewConstantsLateLatch::patchTrackedViewConstantsBuffers((__n128 *)v39[16].n128_u64, (float32x4_t *)&v39[117], (unint64_t)buf, v4, v40, v41, v42, v43, v74, v75, v76.i64[0], v76.i64[1], v78.i64[0], v78.i64[1], (uint64_t)v82, 2, v81.i64[0], v81.i64[1], v82[0],
              v82[1],
              v83,
              *((uint64_t *)&v83 + 1),
              v84,
              *((uint64_t *)&v84 + 1),
              v85,
              *((uint64_t *)&v85 + 1),
              v86[0],
              v86[1],
              v87,
              v88,
              v89,
              v90,
              v91,
              v92,
              v93,
              v94);
            re::InstanceConstantsLateLatch::patchTrackedInstanceConstantsBuffers((re::LateLatch *)&v39[112], *(os_unfair_lock_s **)(*((_QWORD *)a2 + 1) + 160), *((_QWORD *)a2 + 46) & 0xFFFFFFFFFFFFFFFLL, (float32x4_t *)&v39[117]);
            LODWORD(v32) = *((_DWORD *)a2 + 162);
            v38 = *((_QWORD *)a2 + 79);
          }
          if (v32 <= (int)v33 + 1)
            v44 = v33 + 1;
          else
            v44 = v32;
          while (1)
          {
            v36 = (v33 + 1);
            if (v44 - 1 == (_DWORD)v33)
              break;
            LODWORD(v33) = v33 + 1;
            v45 = v36;
            if ((*(_DWORD *)(v38 + (v36 << 11) + 8) & 0x80000000) != 0)
              goto LABEL_31;
          }
          v45 = v44;
LABEL_31:
          LODWORD(v33) = v45;
        }
        while ((_DWORD)v32 != v45);
      }
    }
    else
    {
      v35 = *re::graphicsLogObjects((re *)this);
      this = os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
      if ((_DWORD)this)
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = "patchPostEncodeTransforms";
        _os_log_error_impl(&dword_224FE9000, v35, OS_LOG_TYPE_ERROR, "%s: Expecting at least one viewport", buf, 0xCu);
      }
    }
    v3 = v75;
  }
  if (re::LateLatch::shouldApplyHeadPoseLateLatching((re::LateLatch *)this) && *(_BYTE *)(v3 + 32))
  {
    *(_OWORD *)v82 = 0u;
    *(_OWORD *)buf = xmmword_2260E5D70;
    v90 = 0u;
    v46 = (re *)re::decomposeScaleRotationTranslation<float>(v3 + 48, (int32x4_t *)v82, buf, &v90);
    v47 = 0;
    v88 = 0u;
    v89 = 0u;
    *(_OWORD *)v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    *(_OWORD *)v82 = 0u;
    v83 = 0u;
    v48 = v3 + 192;
    v49 = 1;
    v77 = (float32x4_t)v90;
    v79 = *(int32x4_t *)buf;
    do
    {
      v50 = v49;
      if (*(_BYTE *)(v48 + 96 * v47))
      {
        v46 = (re *)re::RenderFrameWorkloadPatchCamera::TrackedEyePoseInfo::worldEyePose(buf, v48 + 96 * v47 + 16, v77, v79);
        v51 = vnegq_f32(v81);
        v52 = (int8x16_t)vnegq_f32(*(float32x4_t *)buf);
        v53 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), (int8x16_t)v51, 0xCuLL);
        v54 = vmlsq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v52, (int32x4_t)v52), v52, 0xCuLL), v81), v53, *(float32x4_t *)buf);
        v55 = (int8x16_t)vaddq_f32(v54, v54);
        v56 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v55), v55, 0xCuLL);
        v57 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v56, (int32x4_t)v56), (int8x16_t)v56, 0xCuLL), v81), v56, v53);
        v58 = vaddq_f32(vsubq_f32(vmulq_laneq_f32(v56, v81, 3), *(float32x4_t *)buf), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v57, (int32x4_t)v57), v57, 0xCuLL));
        v56.f32[0] = v51.f32[0] + v51.f32[0];
        v59 = (float)(v51.f32[0] + v51.f32[0]) * v51.f32[0];
        v60 = vmuls_lane_f32(v51.f32[1] + v51.f32[1], *(float32x2_t *)v51.f32, 1);
        v61 = vmuls_lane_f32(v51.f32[2] + v51.f32[2], v51, 2);
        v62 = vmuls_lane_f32(v51.f32[0] + v51.f32[0], *(float32x2_t *)v51.f32, 1);
        v63 = vmuls_lane_f32(v51.f32[0] + v51.f32[0], v51, 2);
        v51.f32[0] = vmuls_lane_f32(v51.f32[1] + v51.f32[1], v51, 2);
        v56.f32[0] = vmuls_lane_f32(v56.f32[0], v81, 3);
        v53.f32[0] = vmuls_lane_f32(v51.f32[1] + v51.f32[1], v81, 3);
        v64 = vmuls_lane_f32(v51.f32[2] + v51.f32[2], v81, 3);
        HIDWORD(v65) = 0;
        *(float *)&v65 = 1.0 - (float)(v60 + v61);
        *((float *)&v65 + 1) = v62 + v64;
        *((float *)&v65 + 2) = v63 - v53.f32[0];
        *(float *)v57.i32 = 1.0 - (float)(v59 + v61);
        HIDWORD(v66) = 0;
        *(float *)&v66 = v62 - v64;
        DWORD1(v66) = v57.i32[0];
        *((float *)&v66 + 2) = v51.f32[0] + v56.f32[0];
        v53.i32[3] = 0;
        v53.f32[0] = v63 + v53.f32[0];
        v53.f32[1] = v51.f32[0] - v56.f32[0];
        v53.f32[2] = 1.0 - (float)(v59 + v60);
        v58.i32[3] = 1.0;
        v67 = &v82[8 * v47];
        *(_OWORD *)v67 = v65;
        *((_OWORD *)v67 + 1) = v66;
        *((float32x4_t *)v67 + 2) = v53;
        *((float32x4_t *)v67 + 3) = v58;
      }
      v49 = 0;
      v47 = 1;
    }
    while ((v50 & 1) != 0);
    if ((*((_BYTE *)a2 + 680) & 1) == 0)
    {
      do
        v68 = __ldaxr(re::RenderFrameWorkloadPatchCamera::callPostEncodeTransformsFunctions(re::RenderFrame const&,re::Optional<re::Matrix4x4<float>> const&)::__FILE____LINE___logged);
      while (__stlxr(1u, re::RenderFrameWorkloadPatchCamera::callPostEncodeTransformsFunctions(re::RenderFrame const&,re::Optional<re::Matrix4x4<float>> const&)::__FILE____LINE___logged));
      if ((v68 & 1) == 0)
      {
        v69 = *re::graphicsLogObjects(v46);
        if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
        {
          v70 = *((_QWORD *)a2 + 84);
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v70;
          _os_log_impl(&dword_224FE9000, v69, OS_LOG_TYPE_DEFAULT, "Patch Functions Overflowed the inline space and triggered an alloc. Size: %zu", buf, 0xCu);
        }
      }
    }
    if (*((_QWORD *)a2 + 84))
    {
      v71 = 0;
      v72 = 0;
      do
      {
        if ((*((_DWORD *)a2 + 170) & 1) != 0)
          v73 = (char *)a2 + 688;
        else
          v73 = (char *)*((_QWORD *)a2 + 87);
        (*(void (**)(char *, uint64_t *, uint64_t *))(*(_QWORD *)&v73[v71] + 16))(&v73[v71], v82, v86);
        ++v72;
        v71 += 472;
      }
      while (*((_QWORD *)a2 + 84) > v72);
    }
  }
}

_OWORD *re::RenderFrameWorkloadPatchCamera::TrackedEyePoseInfo::worldEyePose(_OWORD *result, uint64_t a2, float32x4_t a3, int32x4_t _Q1)
{
  float32x4_t v4;
  float32x4_t v6;
  float32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v13;
  __int128 v18;

  if (*(_BYTE *)(a2 + 32) == 1)
  {
    v18 = *(_OWORD *)(a2 + 16);
    *result = *(_OWORD *)a2;
    result[1] = v18;
  }
  else if (*(_BYTE *)(a2 + 32))
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "worldEyePose", 201);
    result = (_OWORD *)_os_crash();
    __break(1u);
  }
  else
  {
    v4 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q1, _Q1), (int8x16_t)_Q1, 0xCuLL);
    _Q4 = *(float32x4_t *)(a2 + 16);
    v6 = vnegq_f32((float32x4_t)_Q1);
    v7 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a2, *(int32x4_t *)a2), *(int8x16_t *)a2, 0xCuLL), v6), *(float32x4_t *)a2, v4);
    v8 = (int8x16_t)vaddq_f32(v7, v7);
    v9 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), v8, 0xCuLL);
    v10 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL), v6), v9, v4);
    v11 = vaddq_f32(vaddq_f32(*(float32x4_t *)a2, vmulq_laneq_f32(v9, (float32x4_t)_Q1, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), v10, 0xCuLL));
    _Q5 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q4, (int32x4_t)_Q4), (int8x16_t)_Q4, 0xCuLL), v6), _Q4, v4);
    v13 = vmlaq_laneq_f32(vmlaq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q5, (int32x4_t)_Q5), _Q5, 0xCuLL), _Q4, (float32x4_t)_Q1, 3), (float32x4_t)_Q1, _Q4, 3);
    _Q4.i32[0] = _Q4.i32[3];
    __asm { FMLA            S5, S4, V1.S[3] }
    v13.i32[3] = _Q5.i32[0];
    *result = vaddq_f32(v11, a3);
    result[1] = v13;
  }
  return result;
}

void re::RenderFrameWorkloadPatchCamera::~RenderFrameWorkloadPatchCamera(re::RenderFrameWorkloadPatchCamera *this)
{
  uint64_t v2;
  __n128 v3;
  char *v4;
  uint64_t v5;

  v2 = 0;
  v3 = 0uLL;
  do
  {
    v4 = (char *)this + v2;
    if (*((_BYTE *)this + v2 + 288))
    {
      v5 = *((_QWORD *)v4 + 43);
      if (v5)
      {
        if ((*((_BYTE *)this + v2 + 352) & 1) != 0)
        {
          (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)((char *)this + v2 + 360), v3);
          v3 = 0uLL;
        }
        *(__n128 *)(v4 + 344) = v3;
        *(__n128 *)(v4 + 360) = v3;
      }
    }
    v2 -= 96;
  }
  while (v2 != -192);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  __n128 v3;
  char *v4;
  uint64_t v5;

  v2 = 0;
  v3 = 0uLL;
  while (1)
  {
    v4 = (char *)this + v2;
    if (*((_BYTE *)this + v2 + 288))
    {
      v5 = *((_QWORD *)v4 + 43);
      if (v5)
      {
        if ((*((_BYTE *)this + v2 + 352) & 1) != 0)
        {
          (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)((char *)this + v2 + 360), v3);
          v3 = 0uLL;
        }
        *(__n128 *)(v4 + 344) = v3;
        *(__n128 *)(v4 + 360) = v3;
      }
    }
    v2 -= 96;
    if (v2 == -192)
    {
      *(_QWORD *)this = &off_24ED426B8;
      objc_destructInstance((char *)this + 8);
      JUMPOUT(0x2276933B8);
    }
  }
}

re::ContactDeformerModelBuilder *re::ContactDeformerModelBuilder::ContactDeformerModelBuilder(re::ContactDeformerModelBuilder *this, re::Allocator *a2, const re::mtl::Device *a3, uint64_t a4, unint64_t a5, DeformationModelData *a6)
{
  _QWORD *v10;

  *(_QWORD *)this = a3;
  *((_QWORD *)this + 1) = a6;
  *((_QWORD *)this + 2) = 0;
  v10 = (_QWORD *)re::DeformationModelData::create<re::ContactDeformer,re::ContactDeformerModel>((uint64_t)a6, (uint64_t)a2);
  re::FixedArray<re::FixedArray<re::ContactDeformerModel::ContactDeformerTarget>>::init<>(v10 + 3, (uint64_t)a2, a5);
  re::FixedArray<re::StringID>::init<>(v10, (uint64_t)a2, a5);
  re::FixedArray<unsigned short>::init<unsigned short const&>(v10 + 6, (uint64_t)a2, a4, &re::ContactDeformerModel::kInvalidIndex);
  return this;
}

uint64_t re::DeformationModelData::create<re::ContactDeformer,re::ContactDeformerModel>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 88, 8);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = &str_110;
  v8[0] = &off_24ED74DD0;
  v8[1] = a2;
  v9 = v8;
  v10 = 0;
  v11[3] = v11;
  v11[0] = &off_24ED74DD0;
  v11[1] = a2;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100]((uint64_t *)(a1 + 600), v4);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)(a1 + 608), (uint64_t)v11);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v10);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return *(_QWORD *)(a1 + 600);
}

void re::FixedArray<re::FixedArray<re::ContactDeformerModel::ContactDeformerTarget>>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >= 0xAAAAAAAAAAAAAABLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 24, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 24 * a3;
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 24 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 24);
    v8 = (_QWORD *)((char *)v8 + v5 - 24);
  }
  *v8 = 0;
  v8[1] = 0;
  v8[2] = 0;
}

_QWORD *re::FixedArray<unsigned short>::init<unsigned short const&>(_QWORD *result, uint64_t a2, uint64_t a3, _WORD *a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 < 0)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 2, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v6 = result;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 2 * a3, 2);
  v6[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v8 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_WORD *)result = *a4;
      result = (_QWORD *)((char *)result + 2);
      --v8;
    }
    while (v8);
  }
  *(_WORD *)result = *a4;
  return result;
}

unint64_t *re::ContactDeformerModelBuilder::initTargetsForMeshPart(re::ContactDeformerModelBuilder *this, unint64_t a2, unint64_t a3, unint64_t a4, const re::StringID *a5)
{
  unint64_t v5;
  _QWORD *v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;

  v6 = *(_QWORD **)(*((_QWORD *)this + 1) + 600);
  if (v6[7] <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_12;
  }
  *(_WORD *)(v6[8] + 2 * a2) = a3;
  if (v6[4] <= a3)
  {
LABEL_12:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_13;
  }
  v5 = a4;
  v9 = v6[5];
  v10 = (_QWORD *)(v9 + 24 * a3);
  v10[1] = v5;
  if (v5)
  {
    if (v5 >> 60)
    {
LABEL_14:
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, v5);
      _os_crash();
      __break(1u);
LABEL_15:
      re::internal::assertLog((re::internal *)4, v14, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    v12 = 16 * v5;
    *(_QWORD *)(v9 + 24 * a3 + 16) = v13;
    if (!v13)
      goto LABEL_15;
    v15 = v13;
    if (v5 != 1)
    {
      bzero(v13, v12 - 16);
      v15 = (_QWORD *)((char *)v15 + v12 - 16);
    }
    *v15 = 0;
    v15[1] = 0;
  }
  v5 = v6[1];
  if (v5 <= a3)
  {
LABEL_13:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_14;
  }
  return re::StringID::operator=((unint64_t *)(v6[2] + 16 * a3), (uint64_t *)a5);
}

void re::ContactDeformerModelBuilder::addContactTarget(id **a1, unint64_t a2, uint64_t *a3)
{
  id **v3;
  unint64_t v5;
  id v6;
  id **v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  double v12;
  unint64_t v13;
  float v14;
  int v15;
  id v16;
  uint64_t TextureCompressionType;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id **v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  _BYTE v29[12];
  __int16 v30;
  int v31;
  __int16 v32;
  unint64_t v33;
  __int16 v34;
  id **v35;
  id v36[2];
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v5 = (unint64_t)a1[2];
  v6 = a1[1][75];
  a1[2] = (id *)(v5 + 1);
  v26 = *a3;
  v27 = 0;
  if (!a3[2])
    goto LABEL_21;
  v8 = a1;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v10 = 0;
  LODWORD(v11) = 1.0;
  LODWORD(v12) = 998277249;
  do
  {
    v13 = a3[2];
    if (v13 <= v10)
    {
      re::internal::assertLog((re::internal *)6, v9, v11, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v10, v13);
      _os_crash();
      __break(1u);
LABEL_27:
      v28 = 0;
      v38 = 0u;
      v39 = 0u;
      memset(v37, 0, sizeof(v37));
      *(_OWORD *)v36 = 0u;
      a2 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v29 = 136315906;
      *(_QWORD *)&v29[4] = "operator[]";
      v30 = 1024;
      v31 = 468;
      v32 = 2048;
      v33 = v10;
      v34 = 2048;
      v35 = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_28:
      v23 = 0;
      v38 = 0u;
      v39 = 0u;
      memset(v37, 0, sizeof(v37));
      *(_OWORD *)v36 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v29 = 136315906;
      *(_QWORD *)&v29[4] = "operator[]";
      v30 = 1024;
      v31 = 468;
      v32 = 2048;
      v33 = a2;
      v34 = 2048;
      v35 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_29:
      v23 = 0;
      v38 = 0u;
      v39 = 0u;
      memset(v37, 0, sizeof(v37));
      *(_OWORD *)v36 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v29 = 136315906;
      *(_QWORD *)&v29[4] = "operator[]";
      v30 = 1024;
      v31 = 468;
      v32 = 2048;
      v33 = v5;
      v34 = 2048;
      v35 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v14 = *(float *)(a3[1] + 4 * v10);
    if (v14 >= 1.0)
    {
      LOBYTE(v15) = -1;
    }
    else if (v14 <= 0.0)
    {
      LOBYTE(v15) = 0;
    }
    else
    {
      v15 = (int)(float)(v14 / 0.0039216);
    }
    v3 = v24;
    if ((unint64_t)v24 <= v10)
      goto LABEL_27;
    *(_BYTE *)(v25 + v10++) = v15;
  }
  while (v10 != 64800);
  v16 = **v8;
  v28 = 0;
  *(_QWORD *)v29 = v16;
  v21 = 0;
  v22 = 10;
  TextureCompressionType = re::mtl::getTextureCompressionType((id *)v29, &v21, &v22, &v28);
  v18 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  objc_msgSend(v18, sel_setUsage_, 0);
  if ((objc_msgSend(v18, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
    || objc_msgSend(v18, sel_methodSignatureForSelector_, sel_setCompressionType_))
  {
    objc_msgSend(v18, sel_setCompressionType_, TextureCompressionType);
  }
  objc_msgSend(v18, sel_setStorageMode_, 0);
  objc_msgSend(v18, sel_setWidth_, 360);
  objc_msgSend(v18, sel_setHeight_, 180);
  objc_msgSend(v18, sel_setPixelFormat_, 10);
  re::mtl::Device::makeTexture(v18, *v8, v36);
  NS::SharedPtr<MTL::Texture>::operator=(&v27, v36);
  if (v36[0])

  v36[0] = 0;
  v36[1] = 0;
  *(_QWORD *)&v37[0] = 0;
  *(_OWORD *)((char *)v37 + 8) = xmmword_2261351C0;
  *((_QWORD *)&v37[1] + 1) = 1;
  objc_msgSend(v27, sel_replaceRegion_mipmapLevel_withBytes_bytesPerRow_, v36, 0, v25, 360);
  if (v18)

  if (v23 && v24)
    (*(void (**)(void))(*(_QWORD *)v23 + 40))();
LABEL_21:
  v8 = (id **)*((_QWORD *)v6 + 4);
  if ((unint64_t)v8 <= a2)
    goto LABEL_28;
  v19 = *((_QWORD *)v6 + 5);
  v8 = *(id ***)(v19 + 24 * a2 + 8);
  if ((unint64_t)v8 <= v5)
    goto LABEL_29;
  v20 = *(_QWORD *)(v19 + 24 * a2 + 16) + 16 * v5;
  *(_QWORD *)v20 = v26;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v20 + 8), &v27);
  if (v27)

}

double re::ContactDeformer::addDeformationInstance@<D0>(re::ContactDeformer *this@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v3;
  double result;

  if (*a2)
  {
    v3 = 0;
  }
  else if (*((_BYTE *)this + 32))
  {
    v3 = *((_BYTE *)this + 33) != 0;
  }
  else
  {
    v3 = 1;
  }
  *(_QWORD *)a3 = 0xFFFFFFFFLL;
  *(_QWORD *)&result = 3;
  *(_OWORD *)(a3 + 8) = xmmword_2261351D0;
  *(_BYTE *)(a3 + 24) = v3;
  *(_QWORD *)(a3 + 32) = -1;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  return result;
}

uint64_t re::ContactDeformer::init(uint64_t this, re::RenderManager *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  _anonymous_namespace_ *v7;
  _anonymous_namespace_ *v8;
  void **ComputePipelineState;
  _OWORD v10[2];
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[8];
  uint64_t v16;
  char v17;
  _QWORD v18[4];
  _BYTE v19[24];
  int v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;

  if (!*(_BYTE *)(this + 32))
  {
    v3 = this;
    *(_BYTE *)(this + 32) = 1;
    *(_QWORD *)(this + 8) = *((_QWORD *)a2 + 4);
    if (*((_BYTE *)a2 + 265))
    {
      v4 = 0;
      v5 = 1;
      do
      {
        v6 = v5;
        v15[0] = 0;
        v21 = 0;
        memset(v19, 0, sizeof(v19));
        v20 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        memset(v10, 0, sizeof(v10));
        v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v10, 0);
        v12 = 0;
        v13 = 0;
        v14 = 0;
        re::TechniqueFunctionConstant::setAs64Bits((re::TechniqueFunctionConstant *)v10, v6 & 1);
        v11 = 53;
        re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)v19, (re::DynamicString *)v10);
        ComputePipelineState = (void **)re::getOrCreateComputePipelineState((uint64_t)a2, (uint64_t)v15);
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v3 + 8 * v4 + 16), ComputePipelineState);
        if (v12)
        {
          if (v13)
          {
            (*(void (**)(void))(*(_QWORD *)v12 + 40))();
            v13 = 0;
            v14 = 0;
          }
          v12 = 0;
        }
        if (*(_QWORD *)&v10[0] && (BYTE8(v10[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v10[0] + 40))();
        re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v19);
        this = v18[0];
        if (v18[0])
        {
          if ((v18[1] & 1) != 0)
            this = (*(uint64_t (**)(void))(*(_QWORD *)v18[0] + 40))();
          memset(v18, 0, sizeof(v18));
        }
        if (v15[0])
        {
          this = v16;
          if (v16)
          {
            if ((v17 & 1) != 0)
              this = (*(uint64_t (**)(void))(*(_QWORD *)v16 + 40))();
          }
        }
        v5 = 0;
        v4 = 1;
      }
      while ((v6 & 1) != 0);
      *(_BYTE *)(v3 + 33) = 1;
    }
  }
  return this;
}

uint64_t re::ContactDeformer::allocateBuffers(re *a1, unint64_t a2, unsigned int a3, uint64_t *a4, uint64_t a5)
{
  size_t v5;
  uint64_t *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char **v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  size_t v40;
  re::AttributeTable *v41;
  re::AttributeTable *v42;
  re::AttributeTable *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  size_t v55;
  size_t *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  unint64_t v61;
  simd_float4x4 *v62;
  BOOL v63;
  simd_float4x4 *v64;
  unsigned int v65;
  __int128 v66;
  uint64_t v67;
  simd_float4 *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unsigned int v75;
  _QWORD *v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  unint64_t v84;
  uint64_t *v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  size_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  re::FrameContext *v100;
  unint64_t v101;
  simd_float4 v102;
  simd_float4 v103;
  simd_float4 v104;
  simd_float4 v105;
  simd_float4 v106;
  simd_float4 v107;
  simd_float4 v108;
  uint64_t v109;
  simd_float4 v110;
  int v111;
  __int16 v112;
  int v113;
  char v114;
  uint64_t v115;
  int v116;
  const char *v117;
  __int16 v118;
  int v119;
  __int16 v120;
  unint64_t v121;
  __int16 v122;
  unint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t v129;
  simd_float4x4 v130;
  simd_float4x4 v131;

  v6 = a4;
  v8 = a2;
  v129 = *MEMORY[0x24BDAC8D0];
  v9 = *a4;
  v10 = *(_QWORD *)(*a4 + 48);
  v11 = *(_QWORD *)(a2 + 24);
  re::globalAllocators(a1);
  v95 = v11;
  v13 = (char **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, 24, 8);
  v14 = *(char **)(v8 + 24);
  v13[1] = (char *)v10;
  v13[2] = 0;
  *v13 = v14;
  if (v10)
  {
    if (v10 >= 0x276276276276277)
    {
LABEL_71:
      re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 104, v10);
      _os_crash();
      __break(1u);
      goto LABEL_72;
    }
    v5 = 104 * v10;
    v14 = (char *)(*(uint64_t (**)(char *, unint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, 104 * v10, 8);
    v13[2] = v14;
    if (!v14)
    {
LABEL_72:
      re::internal::assertLog((re::internal *)4, v15, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_73:
      re::internal::assertLog((re::internal *)5, v71, "assertion failure: '%s' (%s:line %i) Invalid deformation execution mode: %u.", "!\"Unreachable code\"", "allocateBuffers", 267, v75);
      _os_crash();
      __break(1u);
    }
    v16 = v14;
    if (v10 != 1)
    {
      v5 -= 104;
      bzero(v14, v5);
      v16 += v5;
    }
    *((_QWORD *)v16 + 12) = 0;
    *((_OWORD *)v16 + 4) = 0u;
    *((_OWORD *)v16 + 5) = 0u;
    *((_OWORD *)v16 + 2) = 0u;
    *((_OWORD *)v16 + 3) = 0u;
    *(_OWORD *)v16 = 0u;
    *((_OWORD *)v16 + 1) = 0u;
  }
  *((_QWORD *)&v125 + 1) = re::globalAllocators((re *)v14)[2];
  *(_QWORD *)&v126 = &v124;
  *(_QWORD *)&v124 = &off_24ED74D78;
  v89 = (*(uint64_t (**)(uint64_t, char **, __int128 *))(*(_QWORD *)v95 + 16))(v95, v13, &v124);
  if ((_QWORD)v126)
  {
    (**(void (***)(_QWORD))v126)(v126);
    if ((__int128 *)v126 != &v124)
      (*(void (**)(_QWORD))(**((_QWORD **)&v125 + 1) + 40))(*((_QWORD *)&v125 + 1));
  }
  if (v10)
  {
    v17 = 0;
    v87 = v9 + 8;
    v86 = a3;
    v84 = v10;
    v85 = v6;
    v100 = (re::FrameContext *)v8;
    while (1)
    {
      v18 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v87, v17);
      v20 = *(_QWORD *)(v18 + 8);
      v21 = v6[6];
      if (v21 <= v20)
        goto LABEL_62;
      v22 = v18;
      v96 = v17;
      v5 = v6[5];
      v23 = re::BucketArray<re::ActiveDeformation,8ul>::operator[](v6[1], v20);
      v24 = *(_QWORD **)(*(_QWORD *)(v23 + 344) + 600);
      v17 = *(unsigned __int16 *)(v23 + 392);
      v9 = v24[7];
      if (v9 <= v17)
        goto LABEL_63;
      v25 = v23;
      v17 = *(unsigned __int16 *)(v24[8] + 2 * v17);
      v26 = re::DataArray<re::MeshModel>::get(*((_QWORD *)a1 + 1) + 8, *(_QWORD *)(*(_QWORD *)(v23 + 368) + 16));
      v8 = *(unsigned __int16 *)(v25 + 392);
      v9 = *(_QWORD *)(v26 + 56);
      if (v9 <= v8)
        goto LABEL_64;
      v91 = v22;
      v109 = *(_QWORD *)(v26 + 64);
      v10 = 1;
      LOBYTE(v124) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized(v5 + 312 * v20, 1u);
      v27 = (_QWORD *)(v5 + 312 * v20);
      v28 = v25;
      v29 = *(unsigned int *)(v27[8]
                            + 32
                            * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v27 + 7, (unsigned __int8 *)&v124)+ 20);
      LOBYTE(v124) = 1;
      v93 = (uint64_t)v27;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v27, 1u);
      v31 = *(unsigned __int16 *)(v27[16]
                                + 20
                                * re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v27 + 15, (unsigned __int8 *)&v124)+ 4);
      v90 = v28;
      v32 = *(_QWORD *)(*(_QWORD *)(v28 + 352) + 144);
      if (v32)
      {
        v98 = (char *)objc_msgSend(*(id *)v32, sel_contents) + *(unsigned int *)(v32 + 8);
        v97 = (unint64_t)*(unsigned int *)(v32 + 12) >> 6;
      }
      else
      {
        v97 = 0;
        v98 = 0;
      }
      v9 = v96;
      v5 = v24[4];
      if (v5 <= v17)
        goto LABEL_65;
      v5 = *(_QWORD *)(v89 + 8);
      if (v5 <= v96)
        goto LABEL_66;
      v33 = *(_QWORD *)(v24[5] + 24 * v17 + 8);
      v34 = *(_QWORD *)(v89 + 16);
      v9 = v34 + 104 * v96;
      *(_QWORD *)(v9 + 96) = v33;
      *(_QWORD *)v9 = v95;
      *(_QWORD *)(v9 + 8) = v33;
      v101 = v33;
      if (v33)
      {
        if (v33 >= 0xAAAAAAAAAAAAAABLL)
          goto LABEL_68;
        v10 = v29;
        v35 = 24 * v33;
        v36 = v33;
        v37 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v95 + 32))(v95, 24 * v33, 8);
        *(_QWORD *)(v9 + 16) = v37;
        if (!v37)
          goto LABEL_69;
        v39 = v37;
        if (v36 == 1)
        {
          v33 = 1;
        }
        else
        {
          v40 = v35 - 24;
          bzero(v37, v40);
          v33 = v101;
          v39 = (_QWORD *)((char *)v39 + v40);
        }
        LODWORD(v29) = v10;
        *v39 = 0;
        v39[1] = 0;
        v39[2] = 0;
      }
      v41 = (re::AttributeTable *)(v109 + 560 * v8);
      v99 = v29 / v31;
      v92 = 12 * v99;
      re::FixedArray<NS::SharedPtr<MTL::Texture>>::init<>((uint64_t *)(v34 + 104 * v96 + 72), v95, v33);
      v42 = v41;
      do
      {
        v43 = v42;
        v42 = (re::AttributeTable *)*((_QWORD *)v42 + 1);
      }
      while (v42 && !*((_QWORD *)v43 + 9));
      v5 = v24[1];
      if (v5 <= v17)
        goto LABEL_67;
      *(_QWORD *)&v124 = *(_QWORD *)(v24[2] + 16 * v17) >> 1;
      v44 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v43 + 6, &v124);
      v45 = v44 == -1 ? 0 : (unsigned __int8 *)(*((_QWORD *)v43 + 7) + 16 * v44 + 8);
      v5 = 4 * v99;
      re::FrameContext::perFrameAlloc(v100, 4 * v99, 4uLL, (uint64_t)&v124);
      v46 = v124;
      v48 = DWORD2(v124);
      v47 = HIDWORD(v124);
      v49 = v125;
      v50 = v34 + 104 * v96;
      *(_QWORD *)(v50 + 24) = v124;
      *(_DWORD *)(v50 + 32) = v48;
      *(_DWORD *)(v50 + 36) = v47;
      *(_QWORD *)(v50 + 40) = v49;
      v94 = v34;
      if (v45)
      {
        v51 = re::AttributeTable::buffers(v41);
        v53 = *v45;
        if (v52 <= v53)
          goto LABEL_70;
        memcpy((void *)(v46 + v48), (char *)objc_msgSend(*(id *)(v51 + 16 * v53), sel_contents) + *(unsigned int *)(v51 + 16 * v53 + 8), v5);
      }
      else if (v47 >= 4)
      {
        bzero((void *)(v46 + v48), v47 & 0xFFFFFFFC);
      }
      if (v101)
        break;
LABEL_50:
      v8 = (unint64_t)v100;
      re::FrameContext::perFrameAlloc(v100, v92, 4uLL, (uint64_t)&v124);
      v72 = v125;
      v73 = (_QWORD *)(v94 + 104 * v96);
      v74 = *((_QWORD *)&v124 + 1);
      v73[6] = v124;
      v73[7] = v74;
      v73[8] = v72;
      v75 = v86;
      if (v86)
      {
        v10 = v84;
        v6 = v85;
        if (v86 != 1)
          goto LABEL_73;
        v76 = *(_QWORD **)(v90 + 360);
        v77 = v85[2];
        v5 = 257;
        v112 = 257;
        v9 = 65548;
        v111 = 65548;
        v114 = 30;
        v113 = 0;
        v78 = re::DeformationBufferAllocator::alloc(v76, v77, 1, (uint64_t)&v111, *(unsigned __int8 *)(v91 + 16), v92);
        v79 = re::DeformationBufferAllocator::allocationData(*(re::DeformationBufferAllocator **)(v90 + 360), *(unsigned __int8 *)(v91 + 16), v78);
        LOWORD(v117) = 257;
        v116 = 65548;
        LOBYTE(v118) = 30;
        HIDWORD(v117) = 0;
        v80 = objc_msgSend(*(id *)(v79 + 24), sel_contents);
        v81 = *(_QWORD *)(v79 + 24);
        *(_QWORD *)&v124 = v80;
        *((_QWORD *)&v124 + 1) = *(_QWORD *)(v79 + 32);
        *(_QWORD *)&v125 = v81;
        re::DeformationVertexBufferState::setOutputBuffer(v93, 1u, 1, (uint64_t)&v124, (uint64_t)&v116);
      }
      else
      {
        re::FrameContext::perFrameAlloc(v100, v92, 0x10uLL, (uint64_t)&v124);
        LOWORD(v117) = 257;
        v116 = 65548;
        LOBYTE(v118) = 30;
        HIDWORD(v117) = 0;
        re::DeformationVertexBufferState::setOutputBuffer(v93, 1u, 0, (uint64_t)&v124, (uint64_t)&v116);
        v10 = v84;
        v6 = v85;
      }
      v17 = v96 + 1;
      if (v96 + 1 == v10)
        goto LABEL_55;
    }
    v8 = 0;
    v54 = 0;
    v10 = 0;
    v5 = 0;
    v55 = v34 + 104 * v96;
    v56 = (size_t *)(v55 + 80);
    v57 = (_QWORD *)(v55 + 88);
    while (1)
    {
      v58 = v24[4];
      if (v58 <= v17)
        break;
      v59 = v24[5];
      v58 = *(_QWORD *)(v59 + 24 * v17 + 8);
      if (v58 <= v5)
        goto LABEL_57;
      v60 = (unsigned int *)(*(_QWORD *)(v59 + 24 * v17 + 16) + v10);
      v61 = *v60;
      v62 = (simd_float4x4 *)&v98[64 * v61];
      v63 = v97 > v61;
      v64 = (simd_float4x4 *)MEMORY[0x24BDAEE00];
      if (v63)
        v64 = v62;
      v130 = *v64;
      v108 = v130.columns[1];
      v110 = v64->columns[0];
      v106 = v130.columns[3];
      v107 = v130.columns[2];
      v65 = v60[1];
      v131 = __invert_f4(*v64);
      v104 = v131.columns[1];
      v105 = v131.columns[0];
      v102 = v131.columns[3];
      v103 = v131.columns[2];
      re::FrameContext::perFrameAlloc(v100, 0xA0uLL, 0x10uLL, (uint64_t)&v124);
      v66 = v124;
      v67 = v125;
      v68 = (simd_float4 *)(v124 + DWORD2(v124));
      v68->i32[0] = v65;
      v68[1] = v110;
      v68[2] = v108;
      v68[3] = v107;
      v68[4] = v106;
      v68[5] = v105;
      v68[6] = v104;
      v68[7] = v103;
      v68[8] = v102;
      v68[9].i32[0] = v99;
      v58 = *(_QWORD *)(v9 + 8);
      if (v58 <= v5)
        goto LABEL_58;
      v69 = *(_QWORD *)(v9 + 16) + v8;
      *(_OWORD *)v69 = v66;
      *(_QWORD *)(v69 + 16) = v67;
      v58 = v24[4];
      if (v58 <= v17)
        goto LABEL_59;
      v70 = v24[5];
      v58 = *(_QWORD *)(v70 + 24 * v17 + 8);
      if (v58 <= v5)
        goto LABEL_60;
      v58 = *v56;
      if (*v56 <= v5)
        goto LABEL_61;
      NS::SharedPtr<MTL::Texture>::operator=((void **)(*v57 + v54), (void **)(*(_QWORD *)(v70 + 24 * v17 + 16) + v10 + 8));
      ++v5;
      v10 += 16;
      v54 += 8;
      v8 += 24;
      if (v101 == v5)
        goto LABEL_50;
    }
    v115 = 0;
    v128 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v116 = 136315906;
    v117 = "operator[]";
    v118 = 1024;
    v119 = 476;
    v120 = 2048;
    v121 = v17;
    v122 = 2048;
    v123 = v58;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_57:
    v115 = 0;
    v128 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v116 = 136315906;
    v117 = "operator[]";
    v118 = 1024;
    v119 = 476;
    v120 = 2048;
    v121 = v5;
    v122 = 2048;
    v123 = v58;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_58:
    v115 = 0;
    v128 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v116 = 136315906;
    v117 = "operator[]";
    v118 = 1024;
    v119 = 468;
    v120 = 2048;
    v121 = v5;
    v122 = 2048;
    v123 = v58;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_59:
    v115 = 0;
    v128 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v116 = 136315906;
    v117 = "operator[]";
    v118 = 1024;
    v119 = 476;
    v120 = 2048;
    v121 = v17;
    v122 = 2048;
    v123 = v58;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_60:
    v115 = 0;
    v128 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v116 = 136315906;
    v117 = "operator[]";
    v118 = 1024;
    v119 = 476;
    v120 = 2048;
    v121 = v5;
    v122 = 2048;
    v123 = v58;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_61:
    v115 = 0;
    v128 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v20 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v116 = 136315906;
    v117 = "operator[]";
    v118 = 1024;
    v119 = 468;
    v120 = 2048;
    v121 = v5;
    v122 = 2048;
    v123 = v58;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_62:
    re::internal::assertLog((re::internal *)6, v19, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v20, v21);
    _os_crash();
    __break(1u);
LABEL_63:
    v115 = 0;
    v128 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v116 = 136315906;
    v117 = "operator[]";
    v118 = 1024;
    v119 = 476;
    v120 = 2048;
    v121 = v17;
    v122 = 2048;
    v123 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_64:
    v115 = 0;
    v128 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v116 = 136315906;
    v117 = "operator[]";
    v118 = 1024;
    v119 = 476;
    v120 = 2048;
    v121 = v8;
    v122 = 2048;
    v123 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_65:
    v115 = 0;
    v128 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v116 = 136315906;
    v117 = "operator[]";
    v118 = 1024;
    v119 = 476;
    v120 = 2048;
    v121 = v17;
    v122 = 2048;
    v123 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_66:
    v115 = 0;
    v128 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v116 = 136315906;
    v117 = "operator[]";
    v118 = 1024;
    v119 = 468;
    v120 = 2048;
    v121 = v9;
    v122 = 2048;
    v123 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_67:
    v115 = 0;
    v128 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v116 = 136315906;
    v117 = "operator[]";
    v118 = 1024;
    v119 = 476;
    v120 = 2048;
    v121 = v17;
    v122 = 2048;
    v123 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_68:
    re::internal::assertLog((re::internal *)6, v30, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 24, v33);
    _os_crash();
    __break(1u);
LABEL_69:
    re::internal::assertLog((re::internal *)4, v38, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
LABEL_70:
    re::internal::assertLog((re::internal *)6, v52, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v53, v52);
    _os_crash();
    __break(1u);
    goto LABEL_71;
  }
LABEL_55:
  *(_QWORD *)a5 |= 2uLL;
  *(_BYTE *)(a5 + 9) = 1;
  return v89;
}

void re::FixedArray<NS::SharedPtr<MTL::Texture>>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 8 * a3;
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 8 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 8);
    v8 = (_QWORD *)((char *)v8 + v5 - 8);
  }
  *v8 = 0;
}

uint64_t re::ContactDeformer::deformGPU(uint64_t a1, uint64_t a2, void **this, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int *v26;
  void *v27;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v40;
  _QWORD *v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t *v44;
  _BYTE v45[28];
  __int16 v46;
  unint64_t v47;
  _OWORD v48[2];
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  re::mtl::ComputeCommandEncoder::pushDebugGroup(this, (re::ns *)"Perform Contact");
  v32 = *(_QWORD *)(*a4 + 48);
  if (v32)
  {
    v8 = 0;
    v30 = a4;
    v31 = *a4 + 8;
    v29 = a2;
    while (1)
    {
      v9 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v31, v8);
      v11 = *(_QWORD *)(a2 + 8);
      if (v11 <= v8)
        goto LABEL_27;
      v4 = *(_QWORD *)(v9 + 8);
      v12 = a4[6];
      if (v12 <= v4)
        goto LABEL_28;
      v13 = *(_QWORD *)(a2 + 16);
      v14 = a4[5];
      v15 = (_QWORD *)(v14 + 312 * v4);
      LOBYTE(v48[0]) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v15, 1u);
      v35 = v15 + 7;
      v34 = v15 + 8;
      v16 = *(_DWORD *)(v15[8]
                      + 32
                      * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v15 + 7, (unsigned __int8 *)v48)+ 20);
      LOBYTE(v48[0]) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized((uint64_t)v15, 1u);
      v38 = (uint64_t)v15;
      v17 = re::HashBrown<re::VertexBufferID,re::VertexBufferFormat,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v15 + 15, (unsigned __int8 *)v48);
      v33 = v8;
      v44 = (unint64_t *)(v13 + 104 * v8 + 96);
      if (*v44)
        break;
LABEL_22:
      v8 = v33 + 1;
      a2 = v29;
      a4 = v30;
      if (v33 + 1 == v32)
        return objc_msgSend(*this, "popDebugGroup");
    }
    v18 = 0;
    v19 = 0;
    v43 = v13 + 104 * v8;
    v41 = (_QWORD *)(v43 + 88);
    v42 = (unint64_t *)(v43 + 80);
    v40 = v16 / *(unsigned __int16 *)(*(_QWORD *)(v38 + 128) + 20 * v17 + 4) - 1;
    v20 = v14 + 312 * v4;
    v36 = (_QWORD *)(v20 + 192);
    v37 = (_QWORD *)(v20 + 184);
    while (1)
    {
      v4 = *v42;
      if (*v42 <= v19)
        break;
      v8 = *(_QWORD *)(*v41 + 8 * v19);
      if (v8)
        v21 = 16;
      else
        v21 = 24;
      v22 = objc_msgSend(*(id *)(a1 + v21), sel_maxTotalThreadsPerThreadgroup);
      objc_msgSend(*this, "setComputePipelineState:", *(_QWORD *)(a1 + v21));
      if (v19)
      {
        v23 = *(_QWORD *)(v43 + 64);
        v24 = (unsigned int *)(v43 + 56);
      }
      else
      {
        v4 = 1;
        LOBYTE(v48[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v38, 1u);
        v23 = *(_QWORD *)(*v34
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v35, (unsigned __int8 *)v48)+ 24);
        LOBYTE(v48[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v38, 1u);
        v24 = (unsigned int *)(*v34
                             + 32
                             * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v35, (unsigned __int8 *)v48)+ 16);
      }
      objc_msgSend(*this, "setBuffer:offset:atIndex:", v23, *v24, 1);
      if (v19 == *v44 - 1)
      {
        LOBYTE(v48[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v38, 1u);
        v4 = (unint64_t)v37;
        v25 = *(_QWORD *)(*v36
                        + 32
                        * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v37, (unsigned __int8 *)v48)+ 24);
        LOBYTE(v48[0]) = 1;
        re::DeformationVertexBufferState::ensureVertexBufferInitialized(v38, 1u);
        v26 = (unsigned int *)(*v36
                             + 32
                             * re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find(v37, (unsigned __int8 *)v48)+ 16);
      }
      else
      {
        v25 = *(_QWORD *)(v43 + 64);
        v26 = (unsigned int *)(v43 + 56);
      }
      objc_msgSend(*this, "setBuffer:offset:atIndex:", v25, *v26, 0);
      objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(v43 + 40), *(unsigned int *)(v43 + 32), 2);
      v14 = *(_QWORD *)(v43 + 8);
      if (v14 <= v19)
        goto LABEL_25;
      objc_msgSend(*this, "setBuffer:offset:atIndex:", *(_QWORD *)(*(_QWORD *)(v43 + 16) + v18 + 16), *(unsigned int *)(*(_QWORD *)(v43 + 16) + v18 + 8), 3);
      if (v8)
      {
        v4 = *v42;
        if (*v42 <= v19)
          goto LABEL_26;
        objc_msgSend(*this, "setTexture:atIndex:", *(_QWORD *)(*v41 + 8 * v19), 0);
      }
      v27 = *this;
      *(_QWORD *)&v48[0] = (v40 + v22) / v22;
      *(int64x2_t *)((char *)v48 + 8) = vdupq_n_s64(1uLL);
      *(_QWORD *)v45 = v22;
      *(_OWORD *)&v45[8] = *(_OWORD *)((char *)v48 + 8);
      objc_msgSend(v27, "dispatchThreadgroups:threadsPerThreadgroup:", v48, v45);
      ++v19;
      v18 += 24;
      if (v19 >= *v44)
        goto LABEL_22;
    }
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    memset(v48, 0, sizeof(v48));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v45 = 136315906;
    *(_QWORD *)&v45[4] = "operator[]";
    *(_WORD *)&v45[12] = 1024;
    *(_DWORD *)&v45[14] = 476;
    *(_WORD *)&v45[18] = 2048;
    *(_QWORD *)&v45[20] = v19;
    v46 = 2048;
    v47 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_25:
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    memset(v48, 0, sizeof(v48));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v45 = 136315906;
    *(_QWORD *)&v45[4] = "operator[]";
    *(_WORD *)&v45[12] = 1024;
    *(_DWORD *)&v45[14] = 476;
    *(_WORD *)&v45[18] = 2048;
    *(_QWORD *)&v45[20] = v19;
    v46 = 2048;
    v47 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_26:
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    memset(v48, 0, sizeof(v48));
    v11 = MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v45 = 136315906;
    *(_QWORD *)&v45[4] = "operator[]";
    *(_WORD *)&v45[12] = 1024;
    *(_DWORD *)&v45[14] = 476;
    *(_WORD *)&v45[18] = 2048;
    *(_QWORD *)&v45[20] = v19;
    v46 = 2048;
    v47 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_27:
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    memset(v48, 0, sizeof(v48));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v45 = 136315906;
    *(_QWORD *)&v45[4] = "operator[]";
    *(_WORD *)&v45[12] = 1024;
    *(_DWORD *)&v45[14] = 468;
    *(_WORD *)&v45[18] = 2048;
    *(_QWORD *)&v45[20] = v8;
    v46 = 2048;
    v47 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_28:
    re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v4, v12);
    _os_crash();
    __break(1u);
  }
  return objc_msgSend(*this, "popDebugGroup");
}

void re::ContactDeformer::deformCPU(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t *v25;
  uint64_t v26;
  float *v27;
  unint64_t v28;
  float *v29;
  float32x4_t v30;
  float32x4_t v31;
  float v32;
  float32x2_t v33;
  float32x2_t v34;
  float32x4_t v35;
  float v36;
  float v37;
  float32x4_t v38;
  float32x4_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(*a3 + 48);
  if (v3)
  {
    v6 = 0;
    v7 = *a3 + 8;
    while (1)
    {
      v8 = re::BucketArray<re::DeformationInstanceIndex,64ul>::operator[](v7, v6);
      if (*(_QWORD *)(a2 + 8) <= v6)
        goto LABEL_18;
      v10 = *(_QWORD *)(v8 + 8);
      v11 = a3[6];
      if (v11 <= v10)
        goto LABEL_19;
      v12 = *(_QWORD *)(a2 + 16);
      v13 = a3[5] + 312 * v10;
      LOBYTE(v40) = 1;
      re::DeformationVertexBufferState::ensureVertexBufferInitialized(v13, 1u);
      v14 = re::HashBrown<re::VertexBufferID,re::FrameContextBuffer,re::Hash<re::VertexBufferID>,re::EqualTo<re::VertexBufferID>,void,false>::find((_QWORD *)(v13 + 184), (unsigned __int8 *)&v40);
      v16 = v12 + 104 * v6;
      v17 = *(_QWORD *)(v16 + 96);
      if (v17)
        break;
LABEL_14:
      if (++v6 == v3)
        return;
    }
    v18 = 0;
    v19 = v12 + 104 * v6;
    v20 = *(_QWORD *)(v13 + 192) + 32 * v14;
    v21 = (float *)(*(_QWORD *)(v16 + 24) + *(unsigned int *)(v16 + 32));
    v22 = *(unsigned int *)(v20 + 20) / 0xCuLL;
    v23 = *(_QWORD *)(v19 + 8);
    v24 = *(_QWORD *)(v20 + 8) + *(unsigned int *)(v20 + 16) + 8;
    while (1)
    {
      if (v18 == v23)
        goto LABEL_17;
      v25 = (float32x4_t *)(*(_QWORD *)(*(_QWORD *)(v19 + 16) + 24 * v18)
                          + *(unsigned int *)(*(_QWORD *)(v19 + 16) + 24 * v18 + 8));
      v26 = v25[9].u32[0];
      v27 = v21;
      v28 = v22;
      v29 = (float *)v24;
      if ((_DWORD)v26)
        break;
LABEL_13:
      if (++v18 == v17)
        goto LABEL_14;
    }
    while (v28)
    {
      v30 = vaddq_f32(v25[8], vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v25[5], *(v29 - 2)), v25[6], *(v29 - 1)), v25[7], *v29));
      v31 = vmulq_f32(v30, v30);
      v31.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).u32[0];
      v32 = sqrtf(v31.f32[0]);
      v33 = vrsqrte_f32((float32x2_t)v31.u32[0]);
      v34 = vmul_f32(v33, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(v33, v33)));
      v35 = vmulq_n_f32(v30, vmul_f32(v34, vrsqrts_f32((float32x2_t)v31.u32[0], vmul_f32(v34, v34))).f32[0]);
      v36 = *v27++;
      v37 = (float)(v25->f32[0] + v36) - v32;
      if (v37 < 0.0)
        v37 = 0.0;
      v38 = vaddq_f32(v30, vmulq_n_f32(v35, v37));
      v39 = vaddq_f32(v25[4], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25[1], v38.f32[0]), v25[2], *(float32x2_t *)v38.f32, 1), v25[3], v38, 2));
      *((_QWORD *)v29 - 1) = v39.i64[0];
      *v29 = v39.f32[2];
      v29 += 3;
      --v28;
      if (!--v26)
        goto LABEL_13;
    }
    re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v22, v22);
    _os_crash();
    __break(1u);
LABEL_17:
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v40 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_18:
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v40 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_19:
    re::internal::assertLog((re::internal *)6, v9, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 666, v10, v11);
    _os_crash();
    __break(1u);
  }
}

void re::ContactDeformerModelUtil::heightMapForTarget(re::ContactDeformerModelUtil *this@<X0>, const DeformationModelData *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  _anonymous_namespace_ *v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = *((_QWORD *)this + 75);
  if (v5)
  {
    if (*(_QWORD *)(v5 + 32) > (unint64_t)a2)
    {
      v6 = *(_QWORD *)(v5 + 40);
      if (*(_QWORD *)(v6 + 24 * a2 + 8) > a3)
      {
        v7 = *(id *)(*(_QWORD *)(v6 + 24 * a2 + 16) + 16 * a3 + 8);
        if (v7)
        {
          v8 = v7;
          if ((objc_msgSend(v7, sel_width) == (id)360 || objc_msgSend(v8, sel_height) == (id)180)
            && objc_msgSend(v8, sel_pixelFormat) == (id)10)
          {
            v17 = 0;
            v18 = 0;
            v19 = 0;
            v29 = 0uLL;
            *(_QWORD *)&v30[0] = 0;
            *(_OWORD *)((char *)v30 + 8) = xmmword_2261351C0;
            *((_QWORD *)&v30[1] + 1) = 1;
            objc_msgSend(v8, sel_getBytes_bytesPerRow_fromRegion_mipmapLevel_, v19, 360, &v29, 0);
            v11 = 0;
            v13 = v18;
            v12 = v19;
            v15 = a4[1];
            v14 = a4[2];
            v16.n128_u32[0] = 998277249;
            do
            {
              if (v13 == v11)
              {
                v20 = 0;
                v31 = 0u;
                v32 = 0u;
                memset(v30, 0, sizeof(v30));
                v29 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                v21 = 136315906;
                v22 = "operator[]";
                v23 = 1024;
                v24 = 468;
                v25 = 2048;
                v26 = v13;
                v27 = 2048;
                v28 = v13;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_17:
                v20 = 0;
                v31 = 0u;
                v32 = 0u;
                memset(v30, 0, sizeof(v30));
                v29 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                v21 = 136315906;
                v22 = "operator[]";
                v23 = 1024;
                v24 = 468;
                v25 = 2048;
                v26 = v15;
                v27 = 2048;
                v28 = v15;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
              }
              if (v15 == v11)
                goto LABEL_17;
              LOBYTE(v10) = *(_BYTE *)(v12 + v11);
              v10 = (float)LODWORD(v10) * 0.0039216;
              *(float *)(v14 + 4 * v11++) = v10;
            }
            while (v11 != 64800);
            if (v17)
              (*(void (**)(uint64_t, __n128))(*(_QWORD *)v17 + 40))(v17, v16);
          }

        }
      }
    }
  }
}

re::StringID *re::ContactDeformerModelUtil::offsetBufferName@<X0>(re::ContactDeformerModelUtil *this@<X0>, const DeformationModelData *a2@<X1>, re::StringID *a3@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 75);
  if (v3 && *(_QWORD *)(v3 + 8) > (unint64_t)a2)
    return re::StringID::StringID(a3, (const StringID *)(*(_QWORD *)(v3 + 16) + 16 * a2));
  else
    return re::StringID::invalid(a3);
}

size_t re::ContactDeformerModelUtil::computeContactModelSizeExcludingMetalBuffers(re::ContactDeformerModelUtil *this, const DeformationModelData *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char **v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;

  v2 = *((_QWORD *)this + 75);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  v4 = 16 * v3 + 88;
  if (v3)
  {
    v5 = (const char **)(*(_QWORD *)(v2 + 16) + 8);
    do
    {
      if ((*(_BYTE *)(v5 - 1) & 1) != 0)
        v6 = strlen(*v5) + 1;
      else
        v6 = 0;
      v4 += v6;
      v5 += 2;
      --v3;
    }
    while (v3);
  }
  v7 = *(_QWORD *)(v2 + 32);
  v8 = v4 + 24 * v7;
  if (v7)
  {
    v9 = (uint64_t *)(*(_QWORD *)(v2 + 40) + 8);
    do
    {
      v10 = *v9;
      v9 += 3;
      v8 += 16 * v10;
      --v7;
    }
    while (v7);
  }
  v11 = v8 + 2 * *(_QWORD *)(v2 + 56);
  if ((*(_BYTE *)(v2 + 72) & 1) != 0)
    v12 = strlen(*(const char **)(v2 + 80)) + 1;
  else
    v12 = 0;
  return v11 + v12;
}

void re::ContactDeformer::~ContactDeformer(re::ContactDeformer *this)
{
  uint64_t i;
  void *v3;

  for (i = 24; i != 8; i -= 8)
  {
    v3 = *(void **)((char *)this + i);
    if (v3)
    {

      *(_QWORD *)((char *)this + i) = 0;
    }
  }
}

{
  uint64_t v2;
  void *v3;

  v2 = 24;
  while (1)
  {
    v3 = *(void **)((char *)this + v2);
    if (v3)
    {

      *(_QWORD *)((char *)this + v2) = 0;
    }
    v2 -= 8;
    if (v2 == 8)
      JUMPOUT(0x2276933B8);
  }
}

void re::internal::Callable<re::ContactDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::ContactDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::operator()(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *a2;
  if (**a2)
  {
    v3 = v2[1];
    if (v3)
    {
      v4 = 104 * v3;
      v5 = (_QWORD *)(v2[2] + 72);
      do
      {
        re::FixedArray<NS::SharedPtr<NS::String>>::deinit(v5);
        v6 = *(v5 - 9);
        if (v6)
        {
          if (*(v5 - 8))
          {
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(v5 - 7));
            *(v5 - 8) = 0;
            *(v5 - 7) = 0;
          }
          *(v5 - 9) = 0;
        }
        v5 += 13;
        v4 -= 104;
      }
      while (v4);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v2 + 40))(*v2, v2[2]);
      v2[1] = 0;
      v2[2] = 0;
    }
    *v2 = 0;
  }
}

_QWORD *re::internal::Callable<re::ContactDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED74D78;
  return result;
}

_QWORD *re::internal::Callable<re::ContactDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED74D78;
  return result;
}

uint64_t re::internal::Callable<re::ContactDeformer::allocateBuffers(re::FrameContext &,re::DeformationExecutionMode,re::DeformationParameters &,re::BufferInitializationOptions &,re::DynamicArray<re::PostDeformationBlit> &,re::DynamicArray<re::EventWait> &)::$_0,void ()(void *)>::size()
{
  return 16;
}

void _ZNSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_15ContactDeformerENS2_20ContactDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EED0Ev()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_15ContactDeformerENS2_20ContactDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED74DD0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_15ContactDeformerENS2_20ContactDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE7__cloneEPNS0_6__baseISI_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED74DD0;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_15ContactDeformerENS2_20ContactDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EEclEOSE_(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(result + 8);
    re::StringID::destroyString((re::StringID *)(v2 + 72));
    v4 = *(_QWORD *)(v2 + 48);
    if (v4)
    {
      if (*(_QWORD *)(v2 + 56))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(v2 + 64));
        *(_QWORD *)(v2 + 56) = 0;
        *(_QWORD *)(v2 + 64) = 0;
      }
      *(_QWORD *)(v2 + 48) = 0;
    }
    if (*(_QWORD *)(v2 + 24))
    {
      v5 = *(_QWORD *)(v2 + 32);
      if (v5)
      {
        v6 = *(_QWORD **)(v2 + 40);
        v7 = &v6[3 * v5];
        do
        {
          if (*v6)
          {
            v8 = v6[1];
            if (v8)
            {
              v9 = 16 * v8;
              v10 = (id *)(v6[2] + 8);
              do
              {
                if (*v10)
                {

                  *v10 = 0;
                }
                v10 += 2;
                v9 -= 16;
              }
              while (v9);
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v6 + 40))(*v6, v6[2]);
              v6[1] = 0;
              v6[2] = 0;
            }
            *v6 = 0;
          }
          v6 += 3;
        }
        while (v6 != v7);
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 24) + 40))(*(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 40));
        *(_QWORD *)(v2 + 32) = 0;
        *(_QWORD *)(v2 + 40) = 0;
      }
      *(_QWORD *)(v2 + 24) = 0;
    }
    re::FixedArray<re::StringID>::deinit((_QWORD *)v2);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_15ContactDeformerENS2_20ContactDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re20DeformationModelData6createINS2_15ContactDeformerENS2_20ContactDeformerModelEJEEEPT0_PNS2_9AllocatorEDpOT1_EUlPvE_NS_9allocatorISF_EEFvSE_EE11target_typeEv()
{
}

re::RenderGraphResourceDescriptions *re::RenderGraphResourceDescriptions::RenderGraphResourceDescriptions(re::RenderGraphResourceDescriptions *this)
{
  uint64_t *v2;
  re::Allocator *v3;
  re::Allocator *v4;

  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *(_OWORD *)((char *)this + 188) = 0u;
  *(_QWORD *)((char *)this + 204) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 60) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_DWORD *)this + 70) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  v2 = re::globalAllocators(this);
  v3 = (re::Allocator *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 136, 8);
  v4 = re::Allocator::Allocator(v3, "RenderGraphResourceDescriptions", 1);
  *(_QWORD *)v4 = &off_24ED74EA0;
  *(_OWORD *)((char *)v4 + 88) = 0u;
  *(_OWORD *)((char *)v4 + 104) = 0u;
  *((_DWORD *)v4 + 30) = 0;
  *(_OWORD *)((char *)v4 + 24) = 0u;
  *(_OWORD *)((char *)v4 + 40) = 0u;
  *(_OWORD *)((char *)v4 + 56) = 0u;
  *(_OWORD *)((char *)v4 + 68) = 0u;
  *(_QWORD *)((char *)v4 + 124) = 0x7FFFFFFFLL;
  *(_QWORD *)this = v4;
  *((_QWORD *)v3 + 5) = 0;
  *((_QWORD *)v3 + 6) = 1024;
  *((_QWORD *)v3 + 3) = 0;
  *((_QWORD *)v3 + 4) = 0;
  *((_QWORD *)v3 + 8) = 0;
  *((_QWORD *)v3 + 9) = 0;
  return this;
}

void re::RenderGraphResourceDescriptions::~RenderGraphResourceDescriptions(re::RenderGraphResourceDescriptions *this)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  re::RenderGraphResourceDescriptions::deinit(this);
  v2 = *((_QWORD *)this + 32);
  if (v2)
  {
    if (*((_QWORD *)this + 36))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 36) = 0;
    *((_QWORD *)this + 33) = 0;
    *((_QWORD *)this + 34) = 0;
    *((_QWORD *)this + 32) = 0;
    ++*((_DWORD *)this + 70);
  }
  v3 = *((_QWORD *)this + 27);
  if (v3)
  {
    if (*((_QWORD *)this + 31))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 31) = 0;
    *((_QWORD *)this + 28) = 0;
    *((_QWORD *)this + 29) = 0;
    *((_QWORD *)this + 27) = 0;
    ++*((_DWORD *)this + 60);
  }
  v4.n128_f64[0] = re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 21);
  v5 = *((_QWORD *)this + 16);
  if (v5)
  {
    if (*((_QWORD *)this + 20))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v5 + 40))(v5, v4.n128_f64[0]);
    *((_QWORD *)this + 20) = 0;
    *((_QWORD *)this + 17) = 0;
    *((_QWORD *)this + 18) = 0;
    *((_QWORD *)this + 16) = 0;
    ++*((_DWORD *)this + 38);
  }
  v6 = *((_QWORD *)this + 11);
  if (v6)
  {
    if (*((_QWORD *)this + 15))
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v6 + 40))(v6, v4);
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 11) = 0;
    ++*((_DWORD *)this + 28);
  }
  v7 = *((_QWORD *)this + 6);
  if (v7)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v7 + 40))(v7, v4);
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 6) = 0;
    ++*((_DWORD *)this + 18);
  }
  re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8);
}

re *re::RenderGraphResourceDescriptions::deinit(re::RenderGraphResourceDescriptions *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  re *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = (_QWORD *)((char *)this + 88);
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    if (*((_QWORD *)this + 15))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 15) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 28);
  }
  v4 = *((_QWORD *)this + 6);
  if (v4)
  {
    if (*((_QWORD *)this + 10))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 6) = 0;
    ++*((_DWORD *)this + 18);
  }
  re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)this + 8);
  v5 = *((_QWORD *)this + 16);
  if (v5)
  {
    if (*((_QWORD *)this + 20))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *((_QWORD *)this + 20) = 0;
    *((_QWORD *)this + 17) = 0;
    *((_QWORD *)this + 18) = 0;
    *((_QWORD *)this + 16) = 0;
    ++*((_DWORD *)this + 38);
  }
  v6.n128_f64[0] = re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 21);
  v7 = *((_QWORD *)this + 27);
  if (v7)
  {
    if (*((_QWORD *)this + 31))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v7 + 40))(v7, v6.n128_f64[0]);
    *((_QWORD *)this + 31) = 0;
    *((_QWORD *)this + 28) = 0;
    *((_QWORD *)this + 29) = 0;
    *((_QWORD *)this + 27) = 0;
    ++*((_DWORD *)this + 60);
  }
  result = (re *)*((_QWORD *)this + 32);
  if (result)
  {
    if (*((_QWORD *)this + 36))
      result = (re *)(*(uint64_t (**)(re *, __n128))(*(_QWORD *)result + 40))(result, v6);
    *((_QWORD *)this + 36) = 0;
    *((_QWORD *)this + 33) = 0;
    *((_QWORD *)this + 34) = 0;
    *((_QWORD *)this + 32) = 0;
    ++*((_DWORD *)this + 70);
  }
  v9 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    if (!*(_QWORD *)(v9 + 48))
      goto LABEL_26;
    v10 = *(_QWORD *)(v9 + 64);
    if (v10)
    {
      do
      {
        v11 = *(_QWORD *)(v10 + 8);
        result = (re *)(*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(v9 + 56) + 40))(*(_QWORD *)(v9 + 56), v6);
        v10 = v11;
      }
      while (v11);
    }
    *(_QWORD *)(v9 + 72) = 0;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 24) = 0u;
    v9 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
LABEL_26:
      v12 = re::globalAllocators(result)[2];
      re::GrowableLinearAllocator::~GrowableLinearAllocator((re::GrowableLinearAllocator *)v9);
      result = (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, v9);
    }
    *(_QWORD *)this = 0;
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraphResource>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  re::StringID *v5;
  uint64_t v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = (re::StringID *)(v3 + 8);
        v6 = 48 * v4;
        do
        {
          re::StringID::destroyString(v5);
          v5 = (re::StringID *)((char *)v5 + 48);
          v6 -= 48;
        }
        while (v6);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 40 * v3;
      do
      {
        v6 = *(_QWORD *)(a1 + 16) + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 40;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

uint64_t re::RenderGraphResourceDescriptions::swap(re::RenderGraphResourceDescriptions *this, re::RenderGraphResourceDescriptions *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  char *v10;
  uint64_t result;
  _BYTE v12[24];
  __int128 v13;
  int v14;

  v4 = *(_QWORD *)this;
  v5 = (char *)a2 + 8;
  *(_QWORD *)this = *(_QWORD *)a2;
  *(_QWORD *)a2 = v4;
  v6 = (char *)a2 + 48;
  v8 = *((_QWORD *)this + 1);
  v7 = (_QWORD *)((char *)this + 8);
  *(_QWORD *)v12 = v8;
  *v7 = 0;
  *(_OWORD *)&v12[8] = *((_OWORD *)this + 1);
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)&v13 + 1) = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  ++*((_DWORD *)this + 8);
  LODWORD(v13) = 1;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v7, (uint64_t)a2 + 8);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v5, (uint64_t)v12);
  re::DynamicArray<re::RenderGraphResource>::deinit((uint64_t)v12);
  *(_QWORD *)v12 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  *(_OWORD *)&v12[8] = *(_OWORD *)((char *)this + 56);
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_QWORD *)&v13 + 1) = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  ++*((_DWORD *)this + 18);
  LODWORD(v13) = 1;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)this + 48, (uint64_t)v6);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v6, (uint64_t)v12);
  if (*(_QWORD *)v12 && *((_QWORD *)&v13 + 1))
    (*(void (**)(void))(**(_QWORD **)v12 + 40))();
  *(_QWORD *)v12 = *((_QWORD *)this + 11);
  *(_OWORD *)&v12[8] = *((_OWORD *)this + 6);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)&v13 + 1) = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  ++*((_DWORD *)this + 28);
  LODWORD(v13) = 1;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)this + 88, (uint64_t)a2 + 88);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)a2 + 88, (uint64_t)v12);
  if (*(_QWORD *)v12 && *((_QWORD *)&v13 + 1))
    (*(void (**)(void))(**(_QWORD **)v12 + 40))();
  *(_QWORD *)v12 = *((_QWORD *)this + 16);
  *(_OWORD *)&v12[8] = *(_OWORD *)((char *)this + 136);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)&v13 + 1) = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  ++*((_DWORD *)this + 38);
  LODWORD(v13) = 1;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)this + 128, (uint64_t)a2 + 128);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)a2 + 128, (uint64_t)v12);
  if (*(_QWORD *)v12 && *((_QWORD *)&v13 + 1))
    (*(void (**)(void))(**(_QWORD **)v12 + 40))();
  v9 = *(_OWORD *)((char *)this + 168);
  v14 = 0;
  *(_OWORD *)v12 = v9;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_QWORD *)&v12[16] = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  v13 = *((_OWORD *)this + 12);
  *((_OWORD *)this + 12) = xmmword_2260F5A80;
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=((uint64_t)this + 168, (uint64_t *)a2 + 21);
  re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=((uint64_t)a2 + 168, (uint64_t *)v12);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v12);
  *(_QWORD *)v12 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  *(_OWORD *)&v12[8] = *((_OWORD *)this + 14);
  *((_OWORD *)this + 14) = 0u;
  *((_QWORD *)&v13 + 1) = *((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  ++*((_DWORD *)this + 60);
  LODWORD(v13) = 1;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)this + 216, (uint64_t)a2 + 216);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)a2 + 216, (uint64_t)v12);
  if (*(_QWORD *)v12 && *((_QWORD *)&v13 + 1))
    (*(void (**)(void))(**(_QWORD **)v12 + 40))();
  v10 = (char *)a2 + 256;
  *(_QWORD *)v12 = *((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  *(_OWORD *)&v12[8] = *(_OWORD *)((char *)this + 264);
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)&v13 + 1) = *((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  ++*((_DWORD *)this + 70);
  LODWORD(v13) = 1;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)this + 256, (uint64_t)v10);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)v10, (uint64_t)v12);
  result = *(_QWORD *)v12;
  if (*(_QWORD *)v12)
  {
    if (*((_QWORD *)&v13 + 1))
      return (*(uint64_t (**)(void))(**(_QWORD **)v12 + 40))();
  }
  return result;
}

_QWORD *re::RenderGraphResourceDescriptions::resolveResourceSources(_QWORD *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  unint64_t v22;
  _DWORD *v23;
  unint64_t v24;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;

  v1 = (uint64_t)this;
  v2 = this[8];
  v3 = this[29];
  if (v3 >= v2)
  {
    if (v3 <= v2)
      goto LABEL_10;
  }
  else
  {
    if (this[28] < v2)
    {
      this = re::DynamicArray<re::RenderGraphTargetHandle>::setCapacity(this + 27, v2);
      v3 = *(_QWORD *)(v1 + 232);
    }
    v4 = v2 - v3;
    if (v2 > v3)
    {
      v5 = 16 * v3;
      do
      {
        v6 = (_QWORD *)(*(_QWORD *)(v1 + 248) + v5);
        *v6 = 0;
        v6[1] = -1;
        v5 += 16;
        --v4;
      }
      while (v4);
    }
  }
  *(_QWORD *)(v1 + 232) = v2;
  ++*(_DWORD *)(v1 + 240);
LABEL_10:
  v7 = *(_QWORD *)(v1 + 104);
  v8 = *(_QWORD *)(v1 + 272);
  if (v8 >= v7)
  {
    if (v8 <= v7)
      goto LABEL_19;
  }
  else
  {
    if (*(_QWORD *)(v1 + 264) < v7)
    {
      this = re::DynamicArray<re::RenderGraphTargetHandle>::setCapacity((_QWORD *)(v1 + 256), *(_QWORD *)(v1 + 104));
      v8 = *(_QWORD *)(v1 + 272);
    }
    v9 = v7 - v8;
    if (v7 > v8)
    {
      v10 = 16 * v8;
      do
      {
        v11 = (_QWORD *)(*(_QWORD *)(v1 + 288) + v10);
        *v11 = 0;
        v11[1] = -1;
        v10 += 16;
        --v9;
      }
      while (v9);
    }
  }
  *(_QWORD *)(v1 + 272) = v7;
  ++*(_DWORD *)(v1 + 280);
  v8 = v7;
LABEL_19:
  v12 = *(_QWORD *)(v1 + 24);
  if (v12)
  {
    v13 = *(_QWORD *)(v1 + 40);
    v14 = (_QWORD *)(v13 + 24);
    v15 = *(_QWORD *)(v1 + 24);
    while (1)
    {
      v16 = *((_DWORD *)v14 - 6);
      if (v16 == 1)
        break;
      if (!v16)
      {
        v17 = *v14;
        v18 = HIDWORD(*v14);
        if (*(_QWORD *)(v1 + 64) <= v18)
        {
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_51:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_52:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_53:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_54:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_55:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_56:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_57:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v19 = (_DWORD *)(*(_QWORD *)(v1 + 80) + 112 * v18);
        v20 = v19[18];
        if (*v19 != 4 || (_DWORD)v20 == -1)
        {
          if (*(_QWORD *)(v1 + 232) <= v18)
            goto LABEL_52;
          v22 = *(v14 - 2);
        }
        else
        {
          if (v12 <= v20)
            goto LABEL_54;
          if (*(_QWORD *)(v1 + 232) <= v18)
            goto LABEL_56;
          v27 = v13 + 48 * v20;
          v17 = *(_QWORD *)(v27 + 24);
          v22 = *(_QWORD *)(v27 + 8);
        }
        v28 = v22 >> 1;
        v29 = *(_QWORD *)(v1 + 248);
        goto LABEL_47;
      }
LABEL_48:
      v14 += 6;
      if (!--v15)
        return this;
    }
    v17 = *v14;
    v18 = HIDWORD(*v14);
    if (*(_QWORD *)(v1 + 104) <= v18)
      goto LABEL_51;
    v23 = (_DWORD *)(*(_QWORD *)(v1 + 120) + 48 * v18);
    v24 = v23[7];
    if (*v23 != 4 || (_DWORD)v24 == -1)
    {
      if (v8 <= v18)
        goto LABEL_53;
      v26 = *(v14 - 2);
    }
    else
    {
      if (v12 <= v24)
        goto LABEL_55;
      if (v8 <= v18)
        goto LABEL_57;
      v30 = v13 + 48 * v24;
      v17 = *(_QWORD *)(v30 + 24);
      v26 = *(_QWORD *)(v30 + 8);
    }
    v28 = v26 >> 1;
    v29 = *(_QWORD *)(v1 + 288);
LABEL_47:
    v31 = (unint64_t *)(v29 + 16 * v18);
    *v31 = v28;
    v31[1] = v17;
    goto LABEL_48;
  }
  return this;
}

uint64_t re::DynamicArray<re::RenderGraphTargetDescription>::operator[](uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 112 * a2;
}

{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 112 * a2;
}

uint64_t re::DynamicArray<re::RenderGraphBufferDescription>::operator[](uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 48 * a2;
}

{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 48 * a2;
}

void re::RenderGraphResourceDescriptions::addTarget(re::GrowableLinearAllocator **this@<X0>, const re::RenderGraphTargetDescription *a2@<X1>, const char *__s@<X2>, _QWORD *a4@<X8>)
{
  size_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  signed __int8 v11;
  unsigned __int8 *v12;
  int v13;
  re::GrowableLinearAllocator *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  int v20;
  _QWORD v21[5];
  _QWORD v22[2];

  memset(&v21[2], 255, 24);
  v20 = 0;
  v8 = strlen(__s);
  v9 = (unsigned __int8 *)re::GrowableLinearAllocator::alloc(*this, v8 + 1, 0);
  memcpy(v9, __s, v8);
  v9[v8] = 0;
  v10 = (char)*v9;
  if (*v9)
  {
    v11 = v9[1];
    if (v11)
    {
      v12 = v9 + 2;
      do
      {
        v10 = 31 * v10 + v11;
        v13 = *v12++;
        v11 = v13;
      }
      while (v13);
    }
  }
  v19[0] = 0;
  v19[1] = &str_110;
  v22[0] = 2 * v10;
  v22[1] = &str_110;
  v21[0] = 2 * v10;
  v21[1] = v9;
  re::StringID::destroyString((re::StringID *)v22);
  re::StringID::destroyString((re::StringID *)v19);
  re::DynamicArray<re::RenderGraphResource>::add((_anonymous_namespace_ *)(this + 1), (uint64_t)&v20);
  re::DynamicArray<re::RenderGraphTargetDescription>::add((_anonymous_namespace_ *)(this + 6), (__int128 *)a2);
  v14 = this[3];
  v15 = (_DWORD)v14 - 1;
  v16 = (uint64_t)this[5] + 48 * (_QWORD)v14;
  *(_DWORD *)(v16 - 24) = v15;
  *(_DWORD *)(v16 - 20) = *((_DWORD *)this + 16) - 1;
  if (*((_BYTE *)a2 + 36))
  {
    v17 = (uint64_t)this[10] + 112 * (_QWORD)this[8];
    *(_DWORD *)(v17 - 48) |= 1u;
  }
  v18 = (uint64_t)this[5] + 48 * (_QWORD)this[3];
  *a4 = *(_QWORD *)(v18 - 40) >> 1;
  a4[1] = *(_QWORD *)(v18 - 24);
  re::StringID::destroyString((re::StringID *)v21);
}

__n128 re::DynamicArray<re::RenderGraphResource>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __n128 result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::RenderGraphResource>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 48 * v4;
  *(_DWORD *)v5 = *(_DWORD *)a2;
  re::StringID::StringID((re::StringID *)(v5 + 8), (const StringID *)(a2 + 8));
  result = *(__n128 *)(a2 + 24);
  *(_QWORD *)(v5 + 40) = *(_QWORD *)(a2 + 40);
  *(__n128 *)(v5 + 24) = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

__n128 re::DynamicArray<re::RenderGraphTargetDescription>::add(_anonymous_namespace_ *this, __int128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::RenderGraphTargetDescription>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 112 * v4;
  v6 = *a2;
  v7 = a2[2];
  *(_OWORD *)(v5 + 16) = a2[1];
  *(_OWORD *)(v5 + 32) = v7;
  *(_OWORD *)v5 = v6;
  result = (__n128)a2[3];
  v9 = a2[4];
  v10 = a2[6];
  *(_OWORD *)(v5 + 80) = a2[5];
  *(_OWORD *)(v5 + 96) = v10;
  *(__n128 *)(v5 + 48) = result;
  *(_OWORD *)(v5 + 64) = v9;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::RenderGraphResourceDescriptions::targetDescription(re *a1, uint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  NSObject *v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  re *v12;
  NSObject *v13;
  uint8_t *v14;
  uint8_t v15[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  uint8_t buf[16];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a1 + 8);
  v4 = *((unsigned int *)a2 + 3);
  if (v3 < v4)
  {
    v7 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *((_DWORD *)a2 + 2);
      v8 = *((_DWORD *)a2 + 3);
      v10 = *a2;
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v8;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v9;
      *(_WORD *)&buf[14] = 2048;
      *(_QWORD *)&v24 = v10;
      _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "TargetIndex: %u ResourceIndex: %u NameHash: %llu", buf, 0x18u);
    }
    if (!*((_QWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = *((unsigned int *)a2 + 3);
      goto LABEL_18;
    }
    v11 = 0;
    do
    {
      v12 = (re *)re::DynamicArray<re::RenderGraphTargetDescription>::operator[]((uint64_t)a1 + 48, v11);
      v13 = *re::graphicsLogObjects(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        re::RenderGraphTargetDescription::valuesToString(v12, buf);
        if ((buf[8] & 1) != 0)
          v14 = (uint8_t *)v24;
        else
          v14 = &buf[9];
        *(_DWORD *)v15 = 136315138;
        v16 = (const char *)v14;
        _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "%s", v15, 0xCu);
        if (*(_QWORD *)buf)
        {
          if ((buf[8] & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)buf + 40))();
        }
      }
      ++v11;
      v3 = *((_QWORD *)a1 + 8);
    }
    while (v3 > v11);
    v4 = *((unsigned int *)a2 + 3);
  }
  if (v3 > v4)
    return *((_QWORD *)a1 + 10) + 112 * v4;
LABEL_18:
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  *(_OWORD *)buf = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  *(_DWORD *)v15 = 136315906;
  v16 = "operator[]";
  v17 = 1024;
  v18 = 789;
  v19 = 2048;
  v20 = v4;
  v21 = 2048;
  v22 = v3;
  _os_log_send_and_compose_impl();
  result = _os_crash_msg();
  __break(1u);
  return result;
}

{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  NSObject *v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  re *v12;
  NSObject *v13;
  uint8_t *v14;
  uint8_t v15[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  uint8_t buf[16];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a1 + 8);
  v4 = *((unsigned int *)a2 + 3);
  if (v3 < v4)
  {
    v7 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *((_DWORD *)a2 + 2);
      v8 = *((_DWORD *)a2 + 3);
      v10 = *a2;
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v8;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v9;
      *(_WORD *)&buf[14] = 2048;
      *(_QWORD *)&v24 = v10;
      _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "TargetIndex: %u ResourceIndex: %u NameHash: %llu", buf, 0x18u);
    }
    if (!*((_QWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = *((unsigned int *)a2 + 3);
      goto LABEL_18;
    }
    v11 = 0;
    do
    {
      v12 = (re *)re::DynamicArray<re::RenderGraphTargetDescription>::operator[]((uint64_t)a1 + 48, v11);
      v13 = *re::graphicsLogObjects(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        re::RenderGraphTargetDescription::valuesToString(v12, buf);
        if ((buf[8] & 1) != 0)
          v14 = (uint8_t *)v24;
        else
          v14 = &buf[9];
        *(_DWORD *)v15 = 136315138;
        v16 = (const char *)v14;
        _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "%s", v15, 0xCu);
        if (*(_QWORD *)buf)
        {
          if ((buf[8] & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)buf + 40))();
        }
      }
      ++v11;
      v3 = *((_QWORD *)a1 + 8);
    }
    while (v3 > v11);
    v4 = *((unsigned int *)a2 + 3);
  }
  if (v3 > v4)
    return *((_QWORD *)a1 + 10) + 112 * v4;
LABEL_18:
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  *(_OWORD *)buf = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  *(_DWORD *)v15 = 136315906;
  v16 = "operator[]";
  v17 = 1024;
  v18 = 797;
  v19 = 2048;
  v20 = v4;
  v21 = 2048;
  v22 = v3;
  _os_log_send_and_compose_impl();
  result = _os_crash_msg();
  __break(1u);
  return result;
}

double re::RenderGraphResourceDescriptions::targetDescriptionSource@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  double result;

  v3 = *(unsigned int *)(a2 + 12);
  if (*(_QWORD *)(a1 + 232) <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = *(_QWORD *)(a1 + 248) + 16 * v3;
  *(_QWORD *)a3 = *(_QWORD *)v4;
  result = *(double *)(v4 + 8);
  *(double *)(a3 + 8) = result;
  return result;
}

void re::RenderGraphResourceDescriptions::addBuffer(re::GrowableLinearAllocator **this@<X0>, const re::RenderGraphBufferDescription *a2@<X1>, const char *__s@<X2>, _QWORD *a4@<X8>)
{
  size_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  signed __int8 v11;
  unsigned __int8 *v12;
  int v13;
  re::GrowableLinearAllocator *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  int v19;
  _QWORD v20[5];
  _QWORD v21[2];

  memset(&v20[2], 255, 24);
  v19 = 1;
  v8 = strlen(__s);
  v9 = (unsigned __int8 *)re::GrowableLinearAllocator::alloc(*this, v8 + 1, 0);
  memcpy(v9, __s, v8);
  v9[v8] = 0;
  v10 = (char)*v9;
  if (*v9)
  {
    v11 = v9[1];
    if (v11)
    {
      v12 = v9 + 2;
      do
      {
        v10 = 31 * v10 + v11;
        v13 = *v12++;
        v11 = v13;
      }
      while (v13);
    }
  }
  v18[0] = 0;
  v18[1] = &str_110;
  v21[0] = 2 * v10;
  v21[1] = &str_110;
  v20[0] = 2 * v10;
  v20[1] = v9;
  re::StringID::destroyString((re::StringID *)v21);
  re::StringID::destroyString((re::StringID *)v18);
  re::DynamicArray<re::RenderGraphResource>::add((_anonymous_namespace_ *)(this + 1), (uint64_t)&v19);
  re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::add((_anonymous_namespace_ *)(this + 11), (uint64_t)a2);
  v14 = this[3];
  v15 = (_DWORD)v14 - 1;
  v16 = (uint64_t)this[5] + 48 * (_QWORD)v14;
  *(_DWORD *)(v16 - 24) = v15;
  *(_DWORD *)(v16 - 20) = *((_DWORD *)this + 26) - 1;
  v17 = (uint64_t)this[5] + 48 * (_QWORD)this[3];
  *a4 = *(_QWORD *)(v17 - 40) >> 1;
  a4[1] = *(_QWORD *)(v17 - 24);
  re::StringID::destroyString((re::StringID *)v20);
}

uint64_t re::RenderGraphResourceDescriptions::bufferDescription(re *a1, uint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  NSObject *v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  re *v12;
  NSObject *v13;
  uint8_t *v14;
  uint8_t v15[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  uint8_t buf[16];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a1 + 13);
  v4 = *((unsigned int *)a2 + 3);
  if (v3 < v4)
  {
    v7 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *((_DWORD *)a2 + 2);
      v8 = *((_DWORD *)a2 + 3);
      v10 = *a2;
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v8;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v9;
      *(_WORD *)&buf[14] = 2048;
      *(_QWORD *)&v24 = v10;
      _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "BufferIndex: %u ResourceIndex: %u NameHash: %llu", buf, 0x18u);
    }
    if (!*((_QWORD *)a1 + 13))
    {
      v3 = 0;
      v4 = *((unsigned int *)a2 + 3);
      goto LABEL_18;
    }
    v11 = 0;
    do
    {
      v12 = (re *)re::DynamicArray<re::RenderGraphBufferDescription>::operator[]((uint64_t)a1 + 88, v11);
      v13 = *re::graphicsLogObjects(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        re::RenderGraphBufferDescription::valuesToString(v12, buf);
        if ((buf[8] & 1) != 0)
          v14 = (uint8_t *)v24;
        else
          v14 = &buf[9];
        *(_DWORD *)v15 = 136315138;
        v16 = (const char *)v14;
        _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "%s", v15, 0xCu);
        if (*(_QWORD *)buf)
        {
          if ((buf[8] & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)buf + 40))();
        }
      }
      ++v11;
      v3 = *((_QWORD *)a1 + 13);
    }
    while (v3 > v11);
    v4 = *((unsigned int *)a2 + 3);
  }
  if (v3 > v4)
    return *((_QWORD *)a1 + 15) + 48 * v4;
LABEL_18:
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  *(_OWORD *)buf = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  *(_DWORD *)v15 = 136315906;
  v16 = "operator[]";
  v17 = 1024;
  v18 = 789;
  v19 = 2048;
  v20 = v4;
  v21 = 2048;
  v22 = v3;
  _os_log_send_and_compose_impl();
  result = _os_crash_msg();
  __break(1u);
  return result;
}

{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  NSObject *v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  re *v12;
  NSObject *v13;
  uint8_t *v14;
  uint8_t v15[4];
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  uint8_t buf[16];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)a1 + 13);
  v4 = *((unsigned int *)a2 + 3);
  if (v3 < v4)
  {
    v7 = *re::graphicsLogObjects(a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *((_DWORD *)a2 + 2);
      v8 = *((_DWORD *)a2 + 3);
      v10 = *a2;
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&buf[4] = v8;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v9;
      *(_WORD *)&buf[14] = 2048;
      *(_QWORD *)&v24 = v10;
      _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "BufferIndex: %u ResourceIndex: %u NameHash: %llu", buf, 0x18u);
    }
    if (!*((_QWORD *)a1 + 13))
    {
      v3 = 0;
      v4 = *((unsigned int *)a2 + 3);
      goto LABEL_18;
    }
    v11 = 0;
    do
    {
      v12 = (re *)re::DynamicArray<re::RenderGraphBufferDescription>::operator[]((uint64_t)a1 + 88, v11);
      v13 = *re::graphicsLogObjects(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        re::RenderGraphBufferDescription::valuesToString(v12, buf);
        if ((buf[8] & 1) != 0)
          v14 = (uint8_t *)v24;
        else
          v14 = &buf[9];
        *(_DWORD *)v15 = 136315138;
        v16 = (const char *)v14;
        _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "%s", v15, 0xCu);
        if (*(_QWORD *)buf)
        {
          if ((buf[8] & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)buf + 40))();
        }
      }
      ++v11;
      v3 = *((_QWORD *)a1 + 13);
    }
    while (v3 > v11);
    v4 = *((unsigned int *)a2 + 3);
  }
  if (v3 > v4)
    return *((_QWORD *)a1 + 15) + 48 * v4;
LABEL_18:
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  *(_OWORD *)buf = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  *(_DWORD *)v15 = 136315906;
  v16 = "operator[]";
  v17 = 1024;
  v18 = 797;
  v19 = 2048;
  v20 = v4;
  v21 = 2048;
  v22 = v3;
  _os_log_send_and_compose_impl();
  result = _os_crash_msg();
  __break(1u);
  return result;
}

double re::RenderGraphResourceDescriptions::bufferDescriptionSource@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3;
  uint64_t v4;
  double result;

  v3 = *(unsigned int *)(a2 + 12);
  if (*(_QWORD *)(a1 + 272) <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = *(_QWORD *)(a1 + 288) + 16 * v3;
  *(_QWORD *)a3 = *(_QWORD *)v4;
  result = *(double *)(v4 + 8);
  *(double *)(a3 + 8) = result;
  return result;
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 40 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 40 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 40 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 40 * v10;
  return v12 + 24;
}

void re::RenderGraphResourceDescriptions::specify(unint64_t *a1, uint64_t a2, uint64_t a3, int a4, _anonymous_namespace_ *a5)
{
  unint64_t v5;
  _anonymous_namespace_ *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v13;
  int v14;
  int v16;
  int v17;
  int v19;
  int v20;
  int v22;
  int v23;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  const char *Name;
  const char *v36;
  const char *TextureTypeName;
  const char *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  __int8 *v53;
  unsigned __int8 v54;
  __int8 *v55;
  __n128 v56;
  _DWORD *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  _QWORD v61[2];
  _QWORD v62[2];
  _BYTE v63[38];
  __n128 v64;
  _OWORD v65[2];
  __int128 v66;
  __int128 v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v7 = *(unsigned int *)(a2 + 12);
  v8 = a1[8];
  if (v8 <= v7)
  {
    v62[0] = 0;
    v66 = 0u;
    v67 = 0u;
    memset(v65, 0, sizeof(v65));
    v64 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v63 = 136315906;
    *(_QWORD *)&v63[4] = "operator[]";
    *(_WORD *)&v63[12] = 1024;
    *(_DWORD *)&v63[14] = 789;
    *(_WORD *)&v63[18] = 2048;
    *(_QWORD *)&v63[20] = v7;
    *(_WORD *)&v63[28] = 2048;
    *(_QWORD *)&v63[30] = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_93;
  }
  v5 = *(unsigned int *)(a3 + 12);
  if (v8 <= v5)
  {
LABEL_93:
    v62[0] = 0;
    v66 = 0u;
    v67 = 0u;
    memset(v65, 0, sizeof(v65));
    v64 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v63 = 136315906;
    *(_QWORD *)&v63[4] = "operator[]";
    *(_WORD *)&v63[12] = 1024;
    *(_DWORD *)&v63[14] = 789;
    *(_WORD *)&v63[18] = 2048;
    *(_QWORD *)&v63[20] = v5;
    *(_WORD *)&v63[28] = 2048;
    *(_QWORD *)&v63[30] = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_94;
  }
  if (a4)
  {
    v13 = a1[10];
    v14 = *(_DWORD *)(v13 + 112 * v7);
    if (v14 != 3 && v14 != *(_DWORD *)(v13 + 112 * v5))
      goto LABEL_36;
    v16 = *(_DWORD *)(v13 + 112 * v7 + 4);
    if (v16)
    {
      v17 = *(_DWORD *)(v13 + 112 * v5 + 4);
      if (v17 && v16 != v17)
        goto LABEL_36;
    }
    v19 = *(_DWORD *)(v13 + 112 * v7 + 12);
    if (v19 != -1)
    {
      v20 = *(_DWORD *)(v13 + 112 * v5 + 12);
      if (v20 != -1 && v19 != v20)
        goto LABEL_36;
    }
    v22 = *(_DWORD *)(v13 + 112 * v7 + 16);
    if (v22 != -1)
    {
      v23 = *(_DWORD *)(v13 + 112 * v5 + 16);
      if (v23 != -1 && v22 != v23)
        goto LABEL_36;
    }
    v25 = *(_DWORD *)(v13 + 112 * v7 + 20);
    if (v25 != -1)
    {
      v26 = *(_DWORD *)(v13 + 112 * v5 + 20);
      if (v26 != -1 && v25 != v26)
        goto LABEL_36;
    }
    if ((v27 = *(_DWORD *)(v13 + 112 * v7 + 24), v27 != -1)
      && (v28 = *(_DWORD *)(v13 + 112 * v5 + 24), v28 != -1)
      && v27 != v28
      || (v29 = *(_QWORD *)(v13 + 112 * v7 + 88), v29 != -1)
      && (v30 = *(_QWORD *)(v13 + 112 * v5 + 88), v30 != -1)
      && v29 != v30
      || (v58 = *(_DWORD *)(v13 + 112 * v7 + 8),
          v59 = *(_DWORD *)(v13 + 112 * v5 + 8),
          v58 != v59)
      && (v59 | v58) >= 2
      && (v58 > 8 || ((1 << v58) & 0x11C) == 0 || v59 > 8 || ((1 << v59) & 0x11C) == 0)
      && ((v59 - 5) | (v58 - 5)) >= 2)
    {
LABEL_36:
      v8 = *(unsigned int *)(a3 + 8);
      v6 = (_anonymous_namespace_ *)a1[3];
      if ((unint64_t)v6 <= v8)
      {
LABEL_95:
        v62[0] = 0;
        v66 = 0u;
        v67 = 0u;
        memset(v65, 0, sizeof(v65));
        v64 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v63 = 136315906;
        *(_QWORD *)&v63[4] = "operator[]";
        *(_WORD *)&v63[12] = 1024;
        *(_DWORD *)&v63[14] = 789;
        *(_WORD *)&v63[18] = 2048;
        *(_QWORD *)&v63[20] = v8;
        *(_WORD *)&v63[28] = 2048;
        *(_QWORD *)&v63[30] = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_96:
        v61[0] = 0;
        v66 = 0u;
        v67 = 0u;
        memset(v65, 0, sizeof(v65));
        v64 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v63 = 136315906;
        *(_QWORD *)&v63[4] = "operator[]";
        *(_WORD *)&v63[12] = 1024;
        *(_DWORD *)&v63[14] = 789;
        *(_WORD *)&v63[18] = 2048;
        *(_QWORD *)&v63[20] = v8;
        *(_WORD *)&v63[28] = 2048;
        *(_QWORD *)&v63[30] = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::StringID::StringID((re::StringID *)v62, (const StringID *)(a1[5] + 48 * v8 + 8));
      v8 = *(unsigned int *)(a2 + 8);
      v6 = (_anonymous_namespace_ *)a1[3];
      if ((unint64_t)v6 <= v8)
        goto LABEL_96;
      v6 = a5;
      v60 = v62[1];
      re::StringID::StringID((re::StringID *)v61, (const StringID *)(a1[5] + 48 * v8 + 8));
      v31 = v61[1];
      v32 = *a1;
      v65[0] = 0uLL;
      v64 = (__n128)v32;
      re::DynamicString::setCapacity(&v64, 0x200uLL);
      v33 = *(_DWORD *)(v13 + 112 * v5 + 4);
      if (v33)
      {
        v34 = *(_DWORD *)(v13 + 112 * v7 + 4);
        if (v34)
        {
          if (v33 != v34)
          {
            Name = (const char *)MTLPixelFormatGetName();
            v36 = (const char *)MTLPixelFormatGetName();
            re::DynamicString::appendf((re::DynamicString *)&v64, "--- %s: %s (current) vs. %s\n", "format", Name, v36);
          }
        }
      }
      if (*(_DWORD *)(v13 + 112 * v5 + 8) != *(_DWORD *)(v13 + 112 * v7 + 8))
      {
        TextureTypeName = (const char *)re::mtl::getTextureTypeName();
        v38 = (const char *)re::mtl::getTextureTypeName();
        re::DynamicString::appendf((re::DynamicString *)&v64, "--- %s: %s (current) vs. %s\n", "textureType", TextureTypeName, v38);
      }
      v39 = *(_DWORD *)(v13 + 112 * v5 + 12);
      if (v39 != -1)
      {
        v40 = *(_DWORD *)(v13 + 112 * v7 + 12);
        if (v40 != -1 && v39 != v40)
          re::DynamicString::appendf((re::DynamicString *)&v64, "--- %s: %u (current) vs. %u\n", "width", *(_DWORD *)(v13 + 112 * v5 + 12), v40);
      }
      v41 = *(_DWORD *)(v13 + 112 * v5 + 16);
      if (v41 != -1)
      {
        v42 = *(_DWORD *)(v13 + 112 * v7 + 16);
        if (v42 != -1 && v41 != v42)
          re::DynamicString::appendf((re::DynamicString *)&v64, "--- %s: %u (current) vs. %u\n", "height", *(_DWORD *)(v13 + 112 * v5 + 16), v42);
      }
      v43 = *(_DWORD *)(v13 + 112 * v5 + 20);
      if (v43 != -1)
      {
        v44 = *(_DWORD *)(v13 + 112 * v7 + 20);
        if (v44 != -1 && v43 != v44)
          re::DynamicString::appendf((re::DynamicString *)&v64, "--- %s: %u (current) vs. %u\n", "sampleCount", *(_DWORD *)(v13 + 112 * v5 + 20), v44);
      }
      v45 = *(_DWORD *)(v13 + 112 * v5 + 24);
      if (v45 != -1)
      {
        v46 = *(_DWORD *)(v13 + 112 * v7 + 24);
        if (v46 != -1 && v45 != v46)
          re::DynamicString::appendf((re::DynamicString *)&v64, "--- %s: %u (current) vs. %u\n", "arrayLength", *(_DWORD *)(v13 + 112 * v5 + 24), v46);
      }
      v47 = *(_DWORD *)(v13 + 112 * v5 + 28);
      if (v47 != -1)
      {
        v48 = *(_DWORD *)(v13 + 112 * v7 + 28);
        if (v48 != -1 && v47 != v48)
          re::DynamicString::appendf((re::DynamicString *)&v64, "--- %s: %u (current) vs. %u\n", "mipLevelCount", *(_DWORD *)(v13 + 112 * v5 + 28), v48);
      }
      v49 = *(_DWORD *)(v13 + 112 * v5 + 32);
      if (v49 != -1)
      {
        v50 = *(_DWORD *)(v13 + 112 * v7 + 32);
        if (v50 != -1 && v49 != v50)
          re::DynamicString::appendf((re::DynamicString *)&v64, "--- %s: %u (current) vs. %u\n", "tonemapInPlace", *(_DWORD *)(v13 + 112 * v5 + 32), v50);
      }
      v51 = *(_QWORD *)(v13 + 112 * v5 + 88);
      if (v51 != -1)
      {
        v52 = *(_QWORD *)(v13 + 112 * v7 + 88);
        if (v52 != -1 && v51 != v52)
          re::DynamicString::appendf((re::DynamicString *)&v64, "--- %s: %llu (current) vs. %llu\n", "protectionOptions", *(_QWORD *)(v13 + 112 * v5 + 88), v52);
      }
      v54 = v64.n128_u8[8];
      v53 = *(__int8 **)&v65[0];
      if (v64.n128_u64[0] && (v64.n128_u8[8] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v64.n128_u64[0] + 40))();
      v55 = &v64.n128_i8[9];
      if ((v54 & 1) != 0)
        v55 = v53;
      re::DynamicString::format((re::DynamicString *)"Specify called on target (%s) which has already been specified; the following properties fr"
                             "om other target (%s) did not match:\n"
                             "%s",
        (re::DynamicString *)v63,
        v60,
        v31,
        v55);
      v64.n128_u64[0] = 2000;
      v64.n128_u64[1] = (unint64_t)&re::GraphicsErrorCategory(void)::instance;
      *(_QWORD *)&v65[0] = *(_QWORD *)v63;
      *((_QWORD *)&v65[1] + 1) = *(_QWORD *)&v63[24];
      *(_OWORD *)((char *)v65 + 8) = *(_OWORD *)&v63[8];
      v56 = re::DynamicArray<re::DetailedError>::add(a5, &v64);
      if (*(_QWORD *)&v65[0])
      {
        if ((BYTE8(v65[0]) & 1) != 0)
          (*(void (**)(__n128))(**(_QWORD **)&v65[0] + 40))(v56);
        memset(v65, 0, sizeof(v65));
      }
      re::StringID::destroyString((re::StringID *)v61);
      re::StringID::destroyString((re::StringID *)v62);
      v7 = *(unsigned int *)(a2 + 12);
      v8 = a1[8];
    }
  }
  if (v8 <= v7)
  {
LABEL_94:
    v62[0] = 0;
    v66 = 0u;
    v67 = 0u;
    memset(v65, 0, sizeof(v65));
    v64 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v63 = 136315906;
    *(_QWORD *)&v63[4] = "operator[]";
    *(_WORD *)&v63[12] = 1024;
    *(_DWORD *)&v63[14] = 789;
    *(_WORD *)&v63[18] = 2048;
    *(_QWORD *)&v63[20] = v7;
    *(_WORD *)&v63[28] = 2048;
    *(_QWORD *)&v63[30] = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_95;
  }
  v57 = (_DWORD *)(a1[10] + 112 * v7);
  *v57 = 4;
  v57[18] = *(_DWORD *)(a3 + 8);
}

re::StringID *re::RenderGraphResourceDescriptions::resourceFromIndex@<X0>(re::StringID *this@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  __int128 v5;

  if (*((_QWORD *)this + 3) <= (unint64_t)a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = &str_110;
    a3[3] = -1;
    a3[4] = -1;
    a3[5] = -1;
  }
  else
  {
    v4 = *((_QWORD *)this + 5) + 48 * a2;
    *(_DWORD *)a3 = *(_DWORD *)v4;
    this = re::StringID::StringID((re::StringID *)(a3 + 1), (const StringID *)(v4 + 8));
    v5 = *(_OWORD *)(v4 + 24);
    a3[5] = *(_QWORD *)(v4 + 40);
    *(_OWORD *)(a3 + 3) = v5;
  }
  return this;
}

unint64_t re::GrowableLinearAllocator::alloc(re::GrowableLinearAllocator *this, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t result;

  if (a3 <= 8)
    v5 = 8;
  else
    v5 = a3;
  v6 = v5 + a2;
  v7 = *((_QWORD *)this + 4);
  if (v7)
    v7 = **((_QWORD **)this + 3) + v7 - *((_QWORD *)this + 5);
  if (v7 >= v6)
  {
    v9 = (_QWORD *)*((_QWORD *)this + 5);
  }
  else
  {
    v8 = (unint64_t *)*((_QWORD *)this + 3);
    if (v8)
    {
      while (1)
      {
        v8 = (unint64_t *)v8[1];
        if (!v8)
          break;
        *((_QWORD *)this + 3) = v8;
        if (*v8 >= v6)
        {
          v9 = v8 + 2;
          *((_QWORD *)this + 4) = v8 + 2;
          goto LABEL_18;
        }
      }
    }
    if (v6 + 16 > *((_QWORD *)this + 6))
    {
      v10 = (v6 + 15) | ((v6 + 15) >> 1) | (((v6 + 15) | ((v6 + 15) >> 1)) >> 2);
      v11 = v10 | (v10 >> 4) | ((v10 | (v10 >> 4)) >> 8);
      *((_QWORD *)this + 6) = (v11 | (v11 >> 16) | ((v11 | (v11 >> 16)) >> 32)) + 1;
    }
    v12 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 32))(*((_QWORD *)this + 7));
    v13 = *((_QWORD *)this + 6);
    *v12 = v13 - 16;
    v12[1] = 0;
    v14 = *((_QWORD *)this + 3);
    if (v14)
      v15 = (_QWORD *)(v14 + 8);
    else
      v15 = (_QWORD *)((char *)this + 64);
    *v15 = v12;
    v9 = v12 + 2;
    *((_QWORD *)this + 3) = v12;
    *((_QWORD *)this + 4) = v12 + 2;
    *((_QWORD *)this + 6) = 2 * v13;
  }
LABEL_18:
  result = ((unint64_t)v9 + v5 - 1) & -v5;
  *((_QWORD *)this + 5) = result + a2;
  *((_QWORD *)this + 9) += a2;
  return result;
}

void re::GrowableLinearAllocator::~GrowableLinearAllocator(re::GrowableLinearAllocator *this)
{
  re::GrowableLinearAllocator::~GrowableLinearAllocator(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;
  uint64_t v3;

  if (*((_QWORD *)this + 6))
  {
    v2 = *((_QWORD *)this + 8);
    if (v2)
    {
      do
      {
        v3 = *(_QWORD *)(v2 + 8);
        (*(void (**)(_QWORD))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7));
        v2 = v3;
      }
      while (v3);
    }
    *((_QWORD *)this + 9) = 0;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 11);
  re::Allocator::~Allocator(this);
}

uint64_t re::GrowableLinearAllocator::parent(re::GrowableLinearAllocator *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t re::GrowableLinearAllocator::statistics(re::GrowableLinearAllocator *this)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  result = *((_QWORD *)this + 9);
  v3 = (uint64_t *)*((_QWORD *)this + 8);
  if (v3)
  {
    v4 = 0;
    do
    {
      v5 = *v3;
      v3 = (uint64_t *)v3[1];
      v4 += v5 + 16;
    }
    while (v3);
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *(_QWORD *)a1;
    v5 = *a2;
    if (*(_QWORD *)a1)
      v6 = v4 == v5;
    else
      v6 = 1;
    if (v6)
    {
      *(_QWORD *)a1 = v5;
      *a2 = v4;
      v7 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = a2[1];
      a2[1] = v7;
      v8 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = a2[2];
      a2[2] = v8;
      LODWORD(v8) = *(_DWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = v8;
      LODWORD(v8) = *(_DWORD *)(a1 + 28);
      *(_DWORD *)(a1 + 28) = *((_DWORD *)a2 + 7);
      *((_DWORD *)a2 + 7) = v8;
      LODWORD(v8) = *(_DWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
      *((_DWORD *)a2 + 8) = v8;
      LODWORD(v8) = *(_DWORD *)(a1 + 36);
      *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
      *((_DWORD *)a2 + 9) = v8;
    }
    else
    {
      re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(a1);
      if (v5)
      {
        v9 = *((_DWORD *)a2 + 7);
        if (*(_DWORD *)(a1 + 24) < v9)
          re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, v9);
        v10 = *((unsigned int *)a2 + 8);
        if ((_DWORD)v10)
        {
          v11 = 0;
          for (i = 0; i < v10; ++i)
          {
            v13 = a2[2] + v11;
            if ((*(_DWORD *)(v13 + 8) & 0x80000000) != 0)
            {
              re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(a1, *(_QWORD *)v13 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v13, (_QWORD *)(v13 + 16), (_QWORD *)(v13 + 24));
              v10 = *((unsigned int *)a2 + 8);
            }
            v11 += 40;
          }
        }
        ++*(_DWORD *)(a1 + 40);
      }
    }
  }
  return a1;
}

void re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 40;
        }
        while (v11 < v9);
      }
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 40 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 40 * v9 + 8) = v12 | 0x80000000;
  v13 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 16) = *a4;
  v14 = *(_QWORD *)(a1 + 16) + 40 * v9;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = -1;
  *(_QWORD *)(v14 + 24) = *a5;
  *(_QWORD *)(v14 + 32) = a5[1];
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

_QWORD *re::DynamicArray<re::RenderGraphResource>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RenderGraphResource>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderGraphResource>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::RenderGraphResource>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderGraphResource>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 48 * v9;
        v11 = v7 + 1;
        v12 = v8 + 8;
        do
        {
          *((_DWORD *)v11 - 2) = *(_DWORD *)(v12 - 8);
          re::StringID::StringID((re::StringID *)v11, (const StringID *)v12);
          v13 = *(_OWORD *)(v12 + 16);
          v11[4] = *(_QWORD *)(v12 + 32);
          *((_OWORD *)v11 + 1) = v13;
          re::StringID::destroyString((re::StringID *)v12);
          v11 += 6;
          v14 = v12 + 40;
          v12 += 48;
        }
        while (v14 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::RenderGraphTargetDescription>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RenderGraphTargetDescription>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderGraphTargetDescription>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::RenderGraphTargetDescription>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x70uLL))
        {
          v2 = 112 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 112 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 112 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 112, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::RenderGraphTargetDescription>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::addVFXSceneDrawsToTechniqueBuckets(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  re *v11;
  void (*v12)(uint64_t, void *, _QWORD *);
  void *v13;
  re *v14;
  id v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[8];
  int v20;
  uint8_t buf[8];
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;

  if (!*(_BYTE *)(a1 + 794))
  {
    v5 = *re::graphicsLogObjects((re *)a1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      v6 = "VFX simulation did not run, can't draw VFXScene";
      goto LABEL_12;
    }
    return 0;
  }
  if (*(_BYTE *)(a1 + 795))
  {
    v5 = *re::graphicsLogObjects((re *)a1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      v6 = "Should not arrive here when VFXScene culled by clipping";
LABEL_12:
      _os_log_debug_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEBUG, v6, buf, 2u);
      return 0;
    }
    return 0;
  }
  v11 = (re *)objc_retainAutorelease(*(id *)(a1 + 664));
  v12 = (void (*)(uint64_t, void *, _QWORD *))re::getVFXREForEachDrawCallFct(v11);
  -[re transientDrawCall](v11, "transientDrawCall");
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v13)
  {
    v15 = objc_alloc_init(re::getVFXREDrawCallClass(v14));
    -[re setTransientDrawCall:](v11, "setTransientDrawCall:", v15);

  }
  *(_QWORD *)buf = 0;
  v22 = buf;
  v23 = 0x2020000000;
  v24 = 0;
  v16 = -[re opaqueECS](v11, "opaqueECS");
  -[re transientDrawCall](v11, "transientDrawCall");
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v19[0] = MEMORY[0x24BDAC760];
  v19[1] = 3221225472;
  v19[2] = ___ZN2re34addVFXSceneDrawsToTechniqueBucketsERKNS_8VFXSceneERKNS_18RenderGraphContextERNS_11MeshVisitorEj_block_invoke;
  v19[3] = &unk_24ED74F08;
  v19[4] = buf;
  v19[5] = a2;
  v20 = a4;
  v19[6] = a1;
  v19[7] = a3;
  v12(v16, v17, v19);

  v7 = *((_QWORD *)v22 + 3);
  _Block_object_dispose(buf, 8);

  return v7;
}

void ___ZN2re34addVFXSceneDrawsToTechniqueBucketsERKNS_8VFXSceneERKNS_18RenderGraphContextERNS_11MeshVisitorEj_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  __int128 v4;
  re *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  _QWORD v19[2];
  int v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  __int128 v32;
  char v33;
  id v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (objc_msgSend(v3, "hasCustomHandler"))
  {
    objc_msgSend(v3, "boundingBoxMin");
    v18 = v4;
    v5 = (re *)objc_msgSend(v3, "boundingBoxMax");
    v17 = v6;
    re::globalAllocators(v5);
    v7 = *(_QWORD *)(**(_QWORD **)(a1 + 40) + 24);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, 560, 16);
    *(_OWORD *)v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_OWORD *)(v8 + 80) = 0u;
    *(_OWORD *)(v8 + 96) = 0u;
    *(_OWORD *)(v8 + 112) = 0u;
    *(_OWORD *)(v8 + 128) = 0u;
    *(_OWORD *)(v8 + 144) = 0u;
    *(_OWORD *)(v8 + 160) = 0u;
    *(_OWORD *)(v8 + 176) = 0u;
    *(_OWORD *)(v8 + 192) = 0u;
    *(_OWORD *)(v8 + 208) = 0u;
    *(_OWORD *)(v8 + 224) = 0u;
    *(_OWORD *)(v8 + 240) = 0u;
    *(_OWORD *)(v8 + 256) = 0u;
    *(_OWORD *)(v8 + 272) = 0u;
    *(_OWORD *)(v8 + 288) = 0u;
    *(_OWORD *)(v8 + 304) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    *(_OWORD *)(v8 + 320) = 0u;
    *(_DWORD *)(v8 + 208) = 1;
    *(_QWORD *)(v8 + 216) = 0;
    *(_QWORD *)(v8 + 224) = 0;
    *(_QWORD *)(v8 + 232) = 0;
    *(_DWORD *)(v8 + 240) = 0;
    *(_QWORD *)(v8 + 248) = 0;
    *(_QWORD *)(v8 + 256) = 0;
    *(_QWORD *)(v8 + 264) = 0;
    *(_DWORD *)(v8 + 272) = 0;
    *(_OWORD *)(v8 + 280) = 0u;
    *(_OWORD *)(v8 + 296) = 0u;
    *(_DWORD *)(v8 + 312) = 0;
    *(_QWORD *)(v8 + 344) = 0;
    *(_QWORD *)(v8 + 352) = 0;
    *(_QWORD *)(v8 + 336) = 0;
    *(_OWORD *)(v8 + 368) = xmmword_2260E5F10;
    *(_OWORD *)(v8 + 384) = xmmword_2260E5F20;
    *(_OWORD *)(v8 + 400) = xmmword_2260E5F40;
    *(_OWORD *)(v8 + 416) = xmmword_2260E5D70;
    *(_QWORD *)&v9 = 0x7F0000007FLL;
    *((_QWORD *)&v9 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)(v8 + 432) = vdupq_n_s32(0x7F800000u);
    *(_OWORD *)(v8 + 448) = v9;
    *(_WORD *)(v8 + 474) = 0;
    *(_BYTE *)(v8 + 472) = 0;
    *(_QWORD *)(v8 + 464) = 0;
    *(_QWORD *)(v8 + 504) = 0;
    *(_QWORD *)(v8 + 512) = &str_110;
    *(_QWORD *)(v8 + 528) = 0;
    *(_BYTE *)(v8 + 536) = 3;
    *(_QWORD *)(v8 + 540) = 0x180197E00000001;
    *(_QWORD *)(v8 + 476) = -1;
    *(_QWORD *)(v8 + 484) = -1;
    *(_QWORD *)(v8 + 492) = -1;
    v10 = re::globalAllocators((re *)v8)[2];
    v19[0] = &off_24ED74F60;
    v22 = v10;
    v23 = v19;
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v7 + 16))(v7, v8, v19);
    if (v23)
    {
      (*(void (**)(_QWORD *))*v23)(v23);
      if (v23 != v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
    }
    re::StringID::destroyString((re::StringID *)(v11 + 504));
    *(_QWORD *)(v11 + 504) = 0x8B87378FFD0D002ALL;
    *(_QWORD *)(v11 + 512) = "VFX Particles";
    *(_OWORD *)(v11 + 432) = v18;
    *(_OWORD *)(v11 + 448) = v17;
    *(_BYTE *)(v11 + 536) = objc_msgSend(v3, "primitiveType");
    v12 = objc_msgSend(v3, "materialType");
    *(_WORD *)(v11 + 474) = v12;
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v14 = *(_QWORD *)(v13 + 24);
    *(_QWORD *)(v13 + 24) = v14 + 1;
    v15 = *(_QWORD *)(a1 + 48);
    v16 = *(_QWORD *)(v15 + 544);
    if (!v16)
      v16 = *(_QWORD *)(v15 + 416);
    v19[0] = *(_QWORD *)(v15 + 416);
    v19[1] = v16;
    v20 = *(_DWORD *)(a1 + 64);
    v21 = 0;
    v22 = v14;
    v23 = (_QWORD *)v11;
    v24 = v15 + 48;
    v25 = 0;
    v26 = v11 + 432;
    v27 = v11 + 432;
    v28 = v12;
    v29 = v15 + 408;
    v30 = 0;
    v31 = *(_BYTE *)(v15 + 344);
    v32 = *(_OWORD *)(v15 + 352);
    v33 = 1;
    v34 = v3;
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56), v19);

  }
}

void re::bucketVFXMeshPart(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  re *v7;
  re *v8;
  re *v9;
  re::MaterialParameterTable *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  VFXREDrawCallContextImpl *v22;
  void *v23;
  re::_anonymous_namespace_ *v24;
  unsigned __int8 v25;
  BOOL v26;
  uint64_t v27;
  VFXREDrawCallContextImpl *v28;
  id v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  int v43;
  const char *v44;
  VFXRECachedRenderCommandEncoder *v45;
  re *v47;
  uint8_t buf[8];
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  _QWORD v57[4];
  VFXREDrawCallContextImpl *v58;
  VFXRECachedRenderCommandEncoder *v59;
  id v60;
  re::_anonymous_namespace_ *v61;
  re::_anonymous_namespace_ *v62[2];

  v7 = a5;
  re::getVFXREDrawCallClass(v7);
  if ((objc_opt_isKindOfClass() & 1) != 0)
    v8 = v7;
  else
    v8 = 0;
  v9 = v8;
  v47 = v9;
  if (!v9)
  {
    v18 = *re::graphicsLogObjects(0);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      goto LABEL_16;
    *(_WORD *)buf = 0;
    v19 = "Bad object passed to bucketVFXMeshPart, can't render VFX";
LABEL_38:
    _os_log_debug_impl(&dword_224FE9000, v18, OS_LOG_TYPE_DEBUG, v19, buf, 2u);
    goto LABEL_16;
  }
  v10 = *(re::MaterialParameterTable **)(a2 + 56);
  if (!v10)
  {
    v18 = *re::graphicsLogObjects(v9);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      goto LABEL_16;
    *(_WORD *)buf = 0;
    v19 = "Missing MaterialParameterTable, can't render VFX";
    goto LABEL_38;
  }
  v11 = *(_QWORD *)(a2 + 144);
  v45 = objc_alloc_init(VFXRECachedRenderCommandEncoder);
  v12 = re::MaterialParameterTable::passTechniqueHashTable(v10, v11, 1);
  v13 = v12;
  v14 = *((unsigned int *)v12 + 8);
  v15 = 0;
  if ((_DWORD)v14)
  {
    v16 = (int *)v12[2];
    while (1)
    {
      v17 = *v16;
      v16 += 6;
      if (v17 < 0)
        break;
      if (v14 == ++v15)
      {
        LODWORD(v15) = *((_DWORD *)v12 + 8);
        break;
      }
    }
  }
  if ((_DWORD)v14 != (_DWORD)v15)
  {
    v20 = v15;
    v21 = v12[2];
    do
    {
      v62[0] = 0;
      v62[0] = *(re::_anonymous_namespace_ **)(v21 + 24 * v20 + 8);
      v22 = objc_alloc_init(VFXREDrawCallContextImpl);
      -[re customHandler](v47, "customHandler");
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_BYTE *)(a1 + 208) = 1;
      *(_BYTE *)(a1 + 211) = 0;
      v24 = v62[0];
      v25 = atomic_load((unsigned __int8 *)&qword_254118F48);
      if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_254118F48))
      {
        qword_254118F40 = re::hashString((re *)"Opaque", v44);
        __cxa_guard_release(&qword_254118F48);
      }
      *(_BYTE *)(a1 + 210) = v26;
      v27 = *(_QWORD *)(a3 + 24);
      v57[0] = MEMORY[0x24BDAC760];
      v57[1] = 3221225472;
      v57[2] = ___ZN2re17bucketVFXMeshPartERNS_19MeshPartDrawContextEPKNS_28MaterialParameterTableLayersERKNS_12FrameContextERNS_9HashTableImNS_12MeshPassInfoENS_17PrecalculatedHashENS_7EqualToImEELb0ELb0EEEP11objc_objectb_block_invoke;
      v57[3] = &unk_24ED74F30;
      v28 = v22;
      v58 = v28;
      v61 = v62[0];
      v59 = v45;
      v29 = v23;
      v60 = v29;
      re::DrawCallHandler::registerHandler(a1 + 208, v27, v57);
      v30 = re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a4, (uint64_t *)v62);
      if (!v30)
      {
        *(_QWORD *)buf = 0;
        v50 = 0;
        v51 = 1;
        v53 = 0;
        v54 = 0;
        v52 = 0;
        v55 = 0;
        re::BucketArray<re::MeshPartDrawContext,128ul>::init((uint64_t)buf, v27, 1uLL);
        v56 = 0;
        v30 = re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(a4, (unint64_t *)v62, (uint64_t)buf);
        re::BucketArray<re::MeshPartDrawContext,128ul>::deinit((uint64_t)buf);
        if (*(_QWORD *)buf)
        {
          if ((v51 & 1) == 0)
            (*(void (**)(void))(**(_QWORD **)buf + 40))();
        }
      }
      *(_WORD *)(a1 + 148) = 0;
      *(_DWORD *)(a1 + 144) = -1;
      *(_BYTE *)(a1 + 150) = 0;
      v31 = (_OWORD *)re::BucketArray<re::MeshPartDrawContext,128ul>::addUninitialized(v30);
      v32 = *(_OWORD *)(a1 + 16);
      *v31 = *(_OWORD *)a1;
      v31[1] = v32;
      v33 = *(_OWORD *)(a1 + 80);
      v35 = *(_OWORD *)(a1 + 32);
      v34 = *(_OWORD *)(a1 + 48);
      v31[4] = *(_OWORD *)(a1 + 64);
      v31[5] = v33;
      v31[2] = v35;
      v31[3] = v34;
      v36 = *(_OWORD *)(a1 + 144);
      v38 = *(_OWORD *)(a1 + 96);
      v37 = *(_OWORD *)(a1 + 112);
      v31[8] = *(_OWORD *)(a1 + 128);
      v31[9] = v36;
      v31[6] = v38;
      v31[7] = v37;
      v39 = *(_OWORD *)(a1 + 208);
      v41 = *(_OWORD *)(a1 + 160);
      v40 = *(_OWORD *)(a1 + 176);
      v31[12] = *(_OWORD *)(a1 + 192);
      v31[13] = v39;
      v31[10] = v41;
      v31[11] = v40;

      v21 = v13[2];
      if (*((_DWORD *)v13 + 8) <= (v15 + 1))
        v42 = v15 + 1;
      else
        v42 = *((_DWORD *)v13 + 8);
      while (1)
      {
        v20 = (v15 + 1);
        if (v42 - 1 == (_DWORD)v15)
          break;
        LODWORD(v15) = v15 + 1;
        v43 = v20;
        if ((*(_DWORD *)(v21 + 24 * v20) & 0x80000000) != 0)
          goto LABEL_30;
      }
      v43 = v42;
LABEL_30:
      LODWORD(v15) = v43;
    }
    while ((_DWORD)v14 != v43);
  }

LABEL_16:
}

BOOL re::`anonymous namespace'::isDepthOnly(re::_anonymous_namespace_ *this)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  const char *v6;
  int v7;
  const char *v8;
  int v9;
  const char *v10;
  int v11;
  re::_anonymous_namespace_ *v12;
  re::_anonymous_namespace_ *v13;
  re::_anonymous_namespace_ *v14;

  v1 = atomic_load((unsigned __int8 *)&qword_254118F18);
  if ((v1 & 1) == 0)
  {
    v12 = this;
    v7 = __cxa_guard_acquire(&qword_254118F18);
    this = v12;
    if (v7)
    {
      _MergedGlobals_377 = re::hashString((re *)"FadeDepthPrepass", v6);
      __cxa_guard_release(&qword_254118F18);
      this = v12;
    }
  }
  v2 = atomic_load((unsigned __int8 *)&qword_254118F28);
  if ((v2 & 1) == 0)
  {
    v13 = this;
    v9 = __cxa_guard_acquire(&qword_254118F28);
    this = v13;
    if (v9)
    {
      qword_254118F20 = re::hashString((re *)"VFXDepthWrite", v8);
      __cxa_guard_release(&qword_254118F28);
      this = v13;
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254118F38);
  if ((v3 & 1) == 0)
  {
    v14 = this;
    v11 = __cxa_guard_acquire(&qword_254118F38);
    this = v14;
    if (v11)
    {
      qword_254118F30 = re::hashString((re *)"VFXFadeOpaqueDepthWrite", v10);
      __cxa_guard_release(&qword_254118F38);
      this = v14;
    }
  }
  return (re::_anonymous_namespace_ *)_MergedGlobals_377 == this
      || qword_254118F20 == (_QWORD)this
      || qword_254118F30 == (_QWORD)this;
}

uint64_t ___ZN2re17bucketVFXMeshPartERNS_19MeshPartDrawContextEPKNS_28MaterialParameterTableLayersERKNS_12FrameContextERNS_9HashTableImNS_12MeshPassInfoENS_17PrecalculatedHashENS_7EqualToImEELb0ELb0EEEP11objc_objectb_block_invoke(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v5;
  void *v6;
  id v7;
  double v8;
  __int128 v10;
  char v11;

  v5 = *a3;
  v6 = *(void **)(a1 + 32);
  v7 = a2;
  objc_msgSend(v6, "set_textureTable:", v5);
  objc_msgSend(*(id *)(a1 + 32), "set_bufferTable:", a3[1]);
  objc_msgSend(*(id *)(a1 + 32), "set_samplerTable:", a3[2]);
  objc_msgSend(*(id *)(a1 + 32), "set_constantTable:", a3[3]);
  objc_msgSend(*(id *)(a1 + 32), "set_viewports:", a3[4]);
  objc_msgSend(*(id *)(a1 + 32), "set_renderTargetInfo:", a3[5]);
  objc_msgSend(*(id *)(a1 + 32), "set_patchHandler:", a3[7]);
  objc_msgSend(*(id *)(a1 + 32), "set_stateOverride:", *((unsigned __int8 *)a3 + 88));
  objc_msgSend(*(id *)(a1 + 32), "set_isDrawingBlur:", *((unsigned __int8 *)a3 + 89));
  v10 = *((_OWORD *)a3 + 4);
  v11 = *((_BYTE *)a3 + 80);
  objc_msgSend(*(id *)(a1 + 32), "set_stencilInfo:", &v10);
  LODWORD(v8) = *((_DWORD *)a3 + 21);
  objc_msgSend(*(id *)(a1 + 32), "set_fadeOpacity:", v8);
  objc_msgSend(*(id *)(a1 + 32), "set_dynamicFunctionConstants:", a3[6]);
  objc_msgSend(*(id *)(a1 + 32), "set_meshStats:", a3[12]);
  objc_msgSend(*(id *)(a1 + 40), "setEncoder:state:", v7, a3[13]);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

uint64_t re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (*a2 % (unint64_t)*(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 80 * v3 + 8) != v2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 80 * v3) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v5 + 80 * v3 + 8) == v2)
        return v5 + 80 * v3 + 16;
    }
    return 0;
  }
  return v5 + 80 * v3 + 16;
}

uint64_t re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::add(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  v6 = *a2;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  v7 = v6 % *(unsigned int *)(a1 + 24);
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v7);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 16) + 80 * v11;
    return v10 + 16;
  }
  v9 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v9 + 80 * v8 + 8) != v6)
  {
    LODWORD(v8) = *(_DWORD *)(v9 + 80 * v8) & 0x7FFFFFFF;
    if ((_DWORD)v8 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v10 = v9 + 80 * v8;
  return v10 + 16;
}

void _ZN2re8internal8CallableIZZNS_34addVFXSceneDrawsToTechniqueBucketsERKNS_8VFXSceneERKNS_18RenderGraphContextERNS_11MeshVisitorEjEUb_E3__0FvPvEJEED0Ev()
{
  JUMPOUT(0x2276933B8);
}

void _ZNK2re8internal8CallableIZZNS_34addVFXSceneDrawsToTechniqueBucketsERKNS_8VFXSceneERKNS_18RenderGraphContextERNS_11MeshVisitorEjEUb_E3__0FvPvEJEEclEOSB_(uint64_t a1, re::AttributeTable **a2)
{
  re::AttributeTable *v2;

  v2 = *a2;
  re::StringID::destroyString((re::AttributeTable *)((char *)*a2 + 504));
  re::FixedArray<re::StringID>::deinit((_QWORD *)v2 + 42);
  re::AttributeTable::~AttributeTable(v2);
}

_QWORD *_ZNK2re8internal8CallableIZZNS_34addVFXSceneDrawsToTechniqueBucketsERKNS_8VFXSceneERKNS_18RenderGraphContextERNS_11MeshVisitorEjEUb_E3__0FvPvEJEE9cloneIntoESB_(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED74F60;
  return result;
}

_QWORD *_ZN2re8internal8CallableIZZNS_34addVFXSceneDrawsToTechniqueBucketsERKNS_8VFXSceneERKNS_18RenderGraphContextERNS_11MeshVisitorEjEUb_E3__0FvPvEJEE8moveIntoESB_(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED74F60;
  return result;
}

uint64_t _ZNK2re8internal8CallableIZZNS_34addVFXSceneDrawsToTechniqueBucketsERKNS_8VFXSceneERKNS_18RenderGraphContextERNS_11MeshVisitorEjEUb_E3__0FvPvEJEE4sizeEv()
{
  return 16;
}

uint64_t *re::BucketArray<re::MeshPartDrawContext,128ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::MeshPartDrawContext,128ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<re::MeshPartDrawContext,128ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < a2 << 7)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 28672, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::MeshPartDrawContext,128ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
      re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](a1, i);
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::MeshPartDrawContext,128ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 7)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 7)) + 224 * (a2 & 0x7F);
}

{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 7)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 7)) + 224 * (a2 & 0x7F);
}

uint64_t re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 80 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 80 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 80 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9 + 8) = *a4;
  v15 = *(_QWORD *)(a1 + 16) + 80 * v9;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  v15 += 16;
  *(_DWORD *)(v15 + 16) = 1;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_DWORD *)(v15 + 48) = 0;
  re::BucketArray<RESubscriptionHandle,8ul>::swap(v15, a5);
  *(_DWORD *)(v15 + 56) = *(_DWORD *)(a5 + 56);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10 + 8) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10 + 8), *(_QWORD *)&v13[16] + v10 + 8, *(_QWORD *)&v13[16] + v10 + 16);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 80;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

double re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::EntryWithoutHash::free((_DWORD *)(a1[2] + v3));
        ++v4;
        v3 += 80;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

_DWORD *re::HashTable<unsigned long,re::MeshPassInfo,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::EntryWithoutHash::free(_DWORD *result)
{
  uint64_t v1;

  if ((*result & 0x80000000) != 0)
  {
    *result &= ~0x80000000;
    v1 = (uint64_t)(result + 4);
    re::BucketArray<re::MeshPartDrawContext,128ul>::deinit((uint64_t)(result + 4));
    return (_DWORD *)re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v1);
  }
  return result;
}

uint64_t re::BucketArray<re::MeshPartDrawContext,128ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > v3 << 7)
  {
    re::BucketArray<re::MeshPartDrawContext,128ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 128) >> 7);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 7)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 7));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 224 * (v2 & 0x7F);
}

uint64_t re::CameraStreamContext::init(re::CameraStreamContext *this)
{
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  __int128 *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t result;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  BOOL v19;
  uint64_t v20;
  __int128 v21;
  unsigned int v22;
  _BOOL4 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  id v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v2 = (__int128 *)MEMORY[0x24BDAEE00];
  v49 = 0x11844F475DLL;
  v3 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 16);
  v24 = *MEMORY[0x24BDAEE00];
  v25 = v3;
  v4 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 48);
  v26 = *(_OWORD *)(MEMORY[0x24BDAEE00] + 32);
  v27 = v4;
  v28 = v24;
  v29 = v3;
  v30 = v26;
  v31 = v4;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v5 = (__int128 *)MEMORY[0x24BDAEDF8];
  v7 = *(_OWORD *)(MEMORY[0x24BDAEDF8] + 16);
  v6 = *(_OWORD *)(MEMORY[0x24BDAEDF8] + 32);
  v32 = *MEMORY[0x24BDAEDF8];
  v33 = v7;
  v34 = v6;
  v35 = 0u;
  *(_OWORD *)v36 = 0u;
  v37 = 0u;
  re::SmallHashTable<re::WeakStringID,re::CameraStreamParams,4ul,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false>::add((uint64_t)this, &v49, (uint64_t)&v24);
  if (v36[1])
  {

    v36[1] = 0;
  }
  if ((_QWORD)v35 && *((_QWORD *)&v35 + 1))
    (*(void (**)(void))(*(_QWORD *)v35 + 40))();
  v49 = 0x21F05F00586;
  v8 = v2[1];
  v24 = *v2;
  v25 = v8;
  v9 = v2[3];
  v26 = v2[2];
  v27 = v9;
  v28 = v24;
  v29 = v8;
  v30 = v26;
  v31 = v9;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v11 = v5[1];
  v10 = v5[2];
  v32 = *v5;
  v33 = v11;
  v34 = v10;
  v35 = 0u;
  *(_OWORD *)v36 = 0u;
  v37 = 0u;
  re::SmallHashTable<re::WeakStringID,re::CameraStreamParams,4ul,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false>::add((uint64_t)this, &v49, (uint64_t)&v24);
  if (v36[1])
  {

    v36[1] = 0;
  }
  result = v35;
  if ((_QWORD)v35 && *((_QWORD *)&v35 + 1))
    result = (*(uint64_t (**)(void))(*(_QWORD *)v35 + 40))();
  v13 = *((_DWORD *)this + 431);
  if (v13)
  {
    v14 = (char *)this + 1696;
    v15 = *((unsigned int *)this + 432);
    if ((_DWORD)v15)
    {
      v16 = 0;
      v17 = (_DWORD *)*((_QWORD *)this + 214);
      while ((*v17 & 0x80000000) == 0)
      {
        v17 += 104;
        if (v15 == ++v16)
        {
          LODWORD(v16) = *((_DWORD *)this + 432);
          break;
        }
      }
    }
    else
    {
      LODWORD(v16) = 0;
    }
    v18 = (char *)this + 1696;
  }
  else
  {
    v14 = (char *)this + 32;
    v15 = *((_QWORD *)this + 2);
    LODWORD(v16) = 416;
    v18 = (char *)this + 416 * v15 + 32;
  }
  v19 = v14 == v18;
  if (v13)
    v19 = (_DWORD)v15 == (_DWORD)v16;
  if (!v19)
  {
    do
    {
      if (v13)
        v20 = *((_QWORD *)v14 + 2) + 416 * v16 + 16;
      else
        v20 = (uint64_t)(v14 + 16);
      v21 = *(_OWORD *)(v20 + 128);
      DWORD1(v21) = *(_DWORD *)(v20 + 148);
      *(_QWORD *)(v20 + 208) = *(_QWORD *)(v20 + 160);
      *(_QWORD *)(v20 + 216) = v21;
      if (v13)
      {
        v22 = v16 + 1;
        do
        {
          LODWORD(v16) = v22;
          if (v22 >= *((_DWORD *)v14 + 8))
            break;
          ++v22;
        }
        while ((*(_DWORD *)(*((_QWORD *)v14 + 2) + 416 * v16) & 0x80000000) == 0);
      }
      else
      {
        v14 += 416;
      }
      v23 = v14 == v18;
      if (v13)
        v23 = v15 == v16;
    }
    while (!v23);
  }
  return result;
}

id re::CameraStreamManager::context@<X0>(re::CameraStreamManager *this@<X0>, uint64_t a2@<X8>)
{
  id result;

  re::SmallHashTable<re::WeakStringID,re::CameraStreamParams,4ul,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false>::SmallHashTable(a2, (uint64_t)this + 16);
  *(_OWORD *)(a2 + 1760) = *((_OWORD *)this + 111);
  *(_OWORD *)(a2 + 1776) = *((_OWORD *)this + 112);
  *(_OWORD *)(a2 + 1792) = *((_OWORD *)this + 113);
  *(_DWORD *)(a2 + 1808) = *((_DWORD *)this + 456);
  *(_OWORD *)(a2 + 1744) = *((_OWORD *)this + 110);
  *(_QWORD *)(a2 + 1816) = *((id *)this + 229);
  result = *((id *)this + 230);
  *(_QWORD *)(a2 + 1824) = result;
  return result;
}

uint64_t re::SmallHashTable<re::WeakStringID,re::CameraStreamParams,4ul,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false>::add(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  v5 = result;
  if (*(_DWORD *)(result + 1724))
  {
    v6 = (_QWORD *)(result + 1696);
    return re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addNew((uint64_t)v6, a2, (__int128 *)a3);
  }
  v8 = (_QWORD *)(result + 16);
  v7 = *(_QWORD *)(result + 16);
  v9 = result + 32;
  v10 = *a2;
  if (v7)
  {
    v11 = 0;
    do
    {
      if (*(_QWORD *)(result + v11 + 32) == v10)
        return result;
      v11 += 416;
    }
    while (416 * v7 != v11);
    if ((v7 & 0xFFFFFFFC) != 0)
    {
      v26 = (uint64_t *)(result + 16);
      v6 = (_QWORD *)(result + 1696);
      if (!*(_QWORD *)(result + 1696))
      {
        v12 = *(uint64_t **)result;
        if (!*(_QWORD *)result)
        {
        }
        re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(v5 + 1696, (uint64_t)v12, 8);
        v7 = *v26;
        if (!*v26)
        {
LABEL_23:
          re::DynamicInlineArray<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams>,4ul>::clear((uint64_t)v26);
          return re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addNew((uint64_t)v6, a2, (__int128 *)a3);
        }
      }
      v13 = v9 + 416 * v7;
      while (1)
      {
        v14 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)v9 ^ (*(_QWORD *)v9 >> 30));
        v15 = (0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) ^ ((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) >> 31);
        if (*v6)
        {
          v16 = v15 % *(unsigned int *)(v5 + 1720);
          v17 = *(unsigned int *)(*(_QWORD *)(v5 + 1704) + 4 * v16);
          if ((_DWORD)v17 != 0x7FFFFFFF)
          {
            v18 = *(_QWORD *)(v5 + 1712);
            while (*(_QWORD *)(v18 + 416 * v17 + 8) != *(_QWORD *)v9)
            {
              LODWORD(v17) = *(_DWORD *)(v18 + 416 * v17) & 0x7FFFFFFF;
              if ((_DWORD)v17 == 0x7FFFFFFF)
                goto LABEL_21;
            }
            goto LABEL_22;
          }
        }
        else
        {
          LODWORD(v16) = 0;
        }
LABEL_21:
        re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(v5 + 1696, v16, v15, (_QWORD *)v9, (__int128 *)(v9 + 16));
        ++*(_DWORD *)(v5 + 1736);
LABEL_22:
        v9 += 416;
        if (v9 == v13)
          goto LABEL_23;
      }
    }
  }
  v44 = *(_OWORD *)(a3 + 112);
  v45 = *(_OWORD *)(a3 + 128);
  v46 = *(_OWORD *)(a3 + 144);
  v47 = *(_OWORD *)(a3 + 160);
  v40 = *(_OWORD *)(a3 + 48);
  v41 = *(_OWORD *)(a3 + 64);
  v42 = *(_OWORD *)(a3 + 80);
  v43 = *(_OWORD *)(a3 + 96);
  v37 = *(_OWORD *)a3;
  v38 = *(_OWORD *)(a3 + 16);
  v39 = *(_OWORD *)(a3 + 32);
  v33 = *(_OWORD *)(a3 + 336);
  v34 = *(_OWORD *)(a3 + 352);
  v35 = *(_OWORD *)(a3 + 368);
  v36 = *(_OWORD *)(a3 + 384);
  v19 = *(_OWORD *)(a3 + 256);
  v29 = *(_OWORD *)(a3 + 272);
  v30 = *(_OWORD *)(a3 + 288);
  v31 = *(_OWORD *)(a3 + 304);
  v32 = *(_OWORD *)(a3 + 320);
  v20 = *(_OWORD *)(a3 + 192);
  v21 = *(_OWORD *)(a3 + 240);
  v27 = *(_OWORD *)(a3 + 208);
  v28 = *(_OWORD *)(a3 + 224);
  v22 = *(_QWORD *)(a3 + 176);
  v23 = *(_QWORD *)(a3 + 184);
  *(_QWORD *)(a3 + 176) = 0;
  *(_QWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 192) = 0;
  *(_QWORD *)(a3 + 200) = 0;
  if (*v8 >= 4uLL)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, *(double *)&v20, "assertion failure: '%s' (%s:line %i) Capacity limit reached. DynamicInlineArray<T,N> cannot be resized.", "false", "ensureCapacity", 277);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    v24 = v9 + 416 * *v8;
    *(_OWORD *)(v24 + 144) = v45;
    *(_OWORD *)(v24 + 160) = v46;
    *(_OWORD *)(v24 + 176) = v47;
    *(_OWORD *)(v24 + 80) = v41;
    *(_OWORD *)(v24 + 96) = v42;
    *(_OWORD *)(v24 + 112) = v43;
    *(_OWORD *)(v24 + 128) = v44;
    *(_OWORD *)(v24 + 16) = v37;
    *(_OWORD *)(v24 + 32) = v38;
    *(_OWORD *)(v24 + 48) = v39;
    *(_OWORD *)(v24 + 64) = v40;
    *(_OWORD *)(v24 + 368) = v34;
    *(_OWORD *)(v24 + 384) = v35;
    *(_OWORD *)(v24 + 400) = v36;
    *(_OWORD *)(v24 + 304) = v30;
    *(_OWORD *)(v24 + 320) = v31;
    *(_OWORD *)(v24 + 336) = v32;
    *(_OWORD *)(v24 + 352) = v33;
    *(_OWORD *)(v24 + 208) = v20;
    *(_OWORD *)(v24 + 224) = v27;
    *(_OWORD *)(v24 + 240) = v28;
    *(_OWORD *)(v24 + 256) = v21;
    *(_QWORD *)v24 = v10;
    *(_QWORD *)(v24 + 192) = v22;
    *(_QWORD *)(v24 + 200) = v23;
    *(_OWORD *)(v24 + 272) = v19;
    *(_OWORD *)(v24 + 288) = v29;
    v25 = *(_QWORD *)(result + 16);
    ++*(_DWORD *)(result + 24);
    *(_QWORD *)(result + 16) = v25 + 1;
    if (v25 == -1)
    {
      re::internal::assertLog((re::internal *)6, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 381, -1, 0);
      _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addNew(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 416 * v13;
    return v12 + 16;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 416 * v10 + 8) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 416 * v10) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 416 * v10;
  return v12 + 16;
}

void re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 416 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_22, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, __int128 *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 416 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 416 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 416 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v13 + 8) = *a4;
  v14 = *(_QWORD *)(a1 + 16) + v13;
  v16 = *a5;
  v15 = a5[1];
  *(_OWORD *)(v14 + 48) = a5[2];
  v18 = a5[5];
  v17 = a5[6];
  v19 = a5[4];
  *(_OWORD *)(v14 + 64) = a5[3];
  *(_OWORD *)(v14 + 80) = v19;
  *(_OWORD *)(v14 + 96) = v18;
  *(_OWORD *)(v14 + 112) = v17;
  v21 = a5[9];
  v20 = a5[10];
  v22 = a5[8];
  *(_OWORD *)(v14 + 128) = a5[7];
  *(_OWORD *)(v14 + 144) = v22;
  *(_OWORD *)(v14 + 160) = v21;
  *(_OWORD *)(v14 + 176) = v20;
  *(_OWORD *)(v14 + 16) = v16;
  *(_OWORD *)(v14 + 32) = v15;
  *(_QWORD *)(v14 + 200) = 0;
  *(_QWORD *)(v14 + 208) = 0;
  *(_QWORD *)(v14 + 192) = 0;
  v23 = *((_QWORD *)a5 + 23);
  *(_QWORD *)(v14 + 192) = *((_QWORD *)a5 + 22);
  *(_QWORD *)(v14 + 200) = v23;
  *((_QWORD *)a5 + 22) = 0;
  *((_QWORD *)a5 + 23) = 0;
  v24 = *(_QWORD *)(v14 + 208);
  *(_QWORD *)(v14 + 208) = *((_QWORD *)a5 + 24);
  *((_QWORD *)a5 + 24) = v24;
  *(_QWORD *)(v14 + 216) = *((_QWORD *)a5 + 25);
  *((_QWORD *)a5 + 25) = 0;
  v25 = a5[20];
  v27 = a5[17];
  v26 = a5[18];
  *(_OWORD *)(v14 + 320) = a5[19];
  *(_OWORD *)(v14 + 336) = v25;
  *(_OWORD *)(v14 + 288) = v27;
  *(_OWORD *)(v14 + 304) = v26;
  v28 = a5[21];
  v29 = a5[22];
  v30 = a5[24];
  *(_OWORD *)(v14 + 384) = a5[23];
  *(_OWORD *)(v14 + 400) = v30;
  *(_OWORD *)(v14 + 352) = v28;
  *(_OWORD *)(v14 + 368) = v29;
  v31 = a5[14];
  v33 = a5[15];
  v32 = a5[16];
  *(_OWORD *)(v14 + 224) = a5[13];
  *(_OWORD *)(v14 + 240) = v31;
  *(_OWORD *)(v14 + 256) = v33;
  *(_OWORD *)(v14 + 272) = v32;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 30));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, (_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8), (__int128 *)(*(_QWORD *)&v15[16] + v10 + 16));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 416;
        }
        while (v11 < v9);
      }
      re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::SmallHashTable<re::WeakStringID,re::CameraStreamParams,4ul,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false>::SmallHashTable(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = (_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1712) = 0u;
  *(_DWORD *)(a1 + 1728) = 0;
  *(_QWORD *)(a1 + 1732) = 0x7FFFFFFFLL;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  if (a1 != a2)
  {
    re::DynamicInlineArray<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams>,4ul>::copy(v4, (uint64_t *)(a2 + 16));
    ++*(_DWORD *)(a1 + 24);
  }
  re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::operator=(a1 + 1696, a2 + 1696);
  return a1;
}

uint64_t re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(a1, v4, v5);
      re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy(a1, a2);
    }
  }
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  if (a1 != a2)
  {
    v3 = *(_QWORD *)a1;
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
      v5 = v3 == v4;
    else
      v5 = 1;
    if (v5)
    {
      *(_QWORD *)a1 = v4;
      *(_QWORD *)a2 = v3;
      v6 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v6;
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v7;
      LODWORD(v7) = *(_DWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = v7;
      LODWORD(v7) = *(_DWORD *)(a1 + 28);
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
      *(_DWORD *)(a2 + 28) = v7;
      LODWORD(v7) = *(_DWORD *)(a1 + 32);
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      *(_DWORD *)(a2 + 32) = v7;
      LODWORD(v7) = *(_DWORD *)(a1 + 36);
      *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
      *(_DWORD *)(a2 + 36) = v7;
    }
    else if (v4)
    {
      re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy(a1, a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(a1);
    }
  }
  return a1;
}

void re::DynamicInlineArray<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams>,4ul>::copy(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  v3 = (uint64_t)(a2 + 2);
  v4 = *a2;
  v5 = (uint64_t)(a1 + 2);
  if ((unint64_t)*a2 >= *a1)
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams> const*,re::KeyValuePair<re::WeakStringID,re::CameraStreamParams> const*,re::KeyValuePair<re::WeakStringID,re::CameraStreamParams>*>(v3, v3 + 416 * *a1, v5);
    if (*a1 != v4)
    {
      v11 = v3 + 416 * v4;
      v12 = 416 * *a1 + 208;
      v13 = (uint64_t)a2 + v12;
      v14 = (char *)a1 + v12;
      do
      {
        *((_QWORD *)v14 - 24) = *(_QWORD *)(v13 - 192);
        v15 = *(_OWORD *)(v13 - 176);
        v16 = *(_OWORD *)(v13 - 144);
        *((_OWORD *)v14 - 10) = *(_OWORD *)(v13 - 160);
        *((_OWORD *)v14 - 9) = v16;
        *((_OWORD *)v14 - 11) = v15;
        v17 = *(_OWORD *)(v13 - 128);
        v18 = *(_OWORD *)(v13 - 112);
        v19 = *(_OWORD *)(v13 - 80);
        *((_OWORD *)v14 - 6) = *(_OWORD *)(v13 - 96);
        *((_OWORD *)v14 - 5) = v19;
        *((_OWORD *)v14 - 8) = v17;
        *((_OWORD *)v14 - 7) = v18;
        v20 = *(_OWORD *)(v13 - 64);
        v21 = *(_OWORD *)(v13 - 48);
        v22 = *(_OWORD *)(v13 - 16);
        *((_OWORD *)v14 - 2) = *(_OWORD *)(v13 - 32);
        *((_OWORD *)v14 - 1) = v22;
        *((_OWORD *)v14 - 4) = v20;
        *((_OWORD *)v14 - 3) = v21;
        re::FixedArray<double>::FixedArray((uint64_t *)v14, v13);
        *((_QWORD *)v14 + 3) = *(id *)(v13 + 24);
        v23 = *(_OWORD *)(v13 + 80);
        v25 = *(_OWORD *)(v13 + 32);
        v24 = *(_OWORD *)(v13 + 48);
        *((_OWORD *)v14 + 4) = *(_OWORD *)(v13 + 64);
        *((_OWORD *)v14 + 5) = v23;
        *((_OWORD *)v14 + 2) = v25;
        *((_OWORD *)v14 + 3) = v24;
        v26 = *(_OWORD *)(v13 + 144);
        v28 = *(_OWORD *)(v13 + 96);
        v27 = *(_OWORD *)(v13 + 112);
        *((_OWORD *)v14 + 8) = *(_OWORD *)(v13 + 128);
        *((_OWORD *)v14 + 9) = v26;
        *((_OWORD *)v14 + 6) = v28;
        *((_OWORD *)v14 + 7) = v27;
        v29 = *(_OWORD *)(v13 + 208);
        v31 = *(_OWORD *)(v13 + 160);
        v30 = *(_OWORD *)(v13 + 176);
        *((_OWORD *)v14 + 12) = *(_OWORD *)(v13 + 192);
        *((_OWORD *)v14 + 13) = v29;
        *((_OWORD *)v14 + 10) = v31;
        *((_OWORD *)v14 + 11) = v30;
        v32 = v13 + 224;
        v13 += 416;
        v14 += 416;
      }
      while (v32 != v11);
    }
  }
  else
  {
    v6 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams> const*,re::KeyValuePair<re::WeakStringID,re::CameraStreamParams> const*,re::KeyValuePair<re::WeakStringID,re::CameraStreamParams>*>(v3, v3 + 416 * v4, v5);
    if (v4 != *a1)
    {
      v7 = -416 * v4 + 416 * *a1;
      v8 = (id *)&a1[52 * v4 + 29];
      do
      {
        if (*v8)
        {

          *v8 = 0;
        }
        v9 = (uint64_t)*(v8 - 3);
        if (v9)
        {
          if (*(v8 - 2))
          {
            (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v9 + 40))(v9, *(v8 - 1), v6);
            *(v8 - 2) = 0;
            *(v8 - 1) = 0;
          }
          *(v8 - 3) = 0;
        }
        *(v8 - 27) = 0;
        v8 += 52;
        v7 -= 416;
      }
      while (v7);
    }
  }
  *a1 = v4;
}

__n128 std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::KeyValuePair<re::WeakStringID,re::CameraStreamParams> const*,re::KeyValuePair<re::WeakStringID,re::CameraStreamParams> const*,re::KeyValuePair<re::WeakStringID,re::CameraStreamParams>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __n128 result;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  if (a1 != a2)
  {
    v4 = a3 + 192;
    v5 = a1 + 192;
    do
    {
      v6 = v5 - 192;
      *(_QWORD *)(v4 - 192) = *(_QWORD *)(v5 - 192);
      v7 = *(_OWORD *)(v5 - 176);
      v8 = *(_OWORD *)(v5 - 144);
      *(_OWORD *)(v4 - 160) = *(_OWORD *)(v5 - 160);
      *(_OWORD *)(v4 - 144) = v8;
      *(_OWORD *)(v4 - 176) = v7;
      v9 = *(_OWORD *)(v5 - 128);
      v10 = *(_OWORD *)(v5 - 112);
      v11 = *(_OWORD *)(v5 - 80);
      *(_OWORD *)(v4 - 96) = *(_OWORD *)(v5 - 96);
      *(_OWORD *)(v4 - 80) = v11;
      *(_OWORD *)(v4 - 128) = v9;
      *(_OWORD *)(v4 - 112) = v10;
      v12 = *(_OWORD *)(v5 - 64);
      v13 = *(_OWORD *)(v5 - 48);
      v14 = *(_OWORD *)(v5 - 16);
      *(_OWORD *)(v4 - 32) = *(_OWORD *)(v5 - 32);
      *(_OWORD *)(v4 - 16) = v14;
      *(_OWORD *)(v4 - 64) = v12;
      *(_OWORD *)(v4 - 48) = v13;
      if (v4 != v5)
      {
        v15 = *(_QWORD *)v5;
        if (*(_QWORD *)v4)
        {
          if (!v15)
            goto LABEL_10;
          goto LABEL_9;
        }
        if (v15)
        {
          re::FixedArray<double>::init<>((uint64_t *)v4, v15, *(_QWORD *)(v5 + 8));
LABEL_9:
          re::FixedArray<unsigned long>::copy((void *)v4, v5);
        }
      }
LABEL_10:
      NS::SharedPtr<MTL::Texture>::operator=((void **)(v4 + 24), (void **)(v5 + 24));
      v16 = *(_OWORD *)(v5 + 80);
      v18 = *(_OWORD *)(v5 + 32);
      v17 = *(_OWORD *)(v5 + 48);
      *(_OWORD *)(v4 + 64) = *(_OWORD *)(v5 + 64);
      *(_OWORD *)(v4 + 80) = v16;
      *(_OWORD *)(v4 + 32) = v18;
      *(_OWORD *)(v4 + 48) = v17;
      v19 = *(_OWORD *)(v5 + 144);
      v21 = *(_OWORD *)(v5 + 96);
      v20 = *(_OWORD *)(v5 + 112);
      *(_OWORD *)(v4 + 128) = *(_OWORD *)(v5 + 128);
      *(_OWORD *)(v4 + 144) = v19;
      *(_OWORD *)(v4 + 96) = v21;
      *(_OWORD *)(v4 + 112) = v20;
      result = *(__n128 *)(v5 + 192);
      v23 = *(_OWORD *)(v5 + 208);
      v25 = *(_OWORD *)(v5 + 160);
      v24 = *(_OWORD *)(v5 + 176);
      *(__n128 *)(v4 + 192) = result;
      *(_OWORD *)(v4 + 208) = v23;
      *(_OWORD *)(v4 + 160) = v25;
      *(_OWORD *)(v4 + 176) = v24;
      v4 += 416;
      v5 += 416;
    }
    while (v6 + 416 != a2);
  }
  return result;
}

uint64_t *re::FixedArray<double>::FixedArray(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    re::FixedArray<double>::init<>(a1, v4, *(_QWORD *)(a2 + 8));
    re::FixedArray<unsigned long>::copy(a1, a2);
  }
  return a1;
}

void re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        v9 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)(v8 + v6 + 8) ^ (*(_QWORD *)(v8 + v6 + 8) >> 30));
        v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsCopy(a1, v10 % *(unsigned int *)(a1 + 24), v10, (_QWORD *)(v8 + v6 + 8), (id *)(v8 + v6 + 16));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 416;
    }
  }
}

void re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_22, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::EntryWithoutHash::free((_QWORD *)(*(_QWORD *)(a1 + 16) + v3));
        ++v4;
        v3 += 416;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

uint64_t re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, id *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::WeakStringID,re::CameraStreamParams,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 416 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 416 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 416 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v14 + 8) = *a4;
  v15 = *(_QWORD *)(a1 + 16) + v14;
  v17 = *(_OWORD *)a5;
  v16 = *((_OWORD *)a5 + 1);
  *(_OWORD *)(v15 + 48) = *((_OWORD *)a5 + 2);
  v19 = *((_OWORD *)a5 + 5);
  v18 = *((_OWORD *)a5 + 6);
  v20 = *((_OWORD *)a5 + 4);
  *(_OWORD *)(v15 + 64) = *((_OWORD *)a5 + 3);
  *(_OWORD *)(v15 + 80) = v20;
  *(_OWORD *)(v15 + 96) = v19;
  *(_OWORD *)(v15 + 112) = v18;
  v22 = *((_OWORD *)a5 + 9);
  v21 = *((_OWORD *)a5 + 10);
  v23 = *((_OWORD *)a5 + 8);
  *(_OWORD *)(v15 + 128) = *((_OWORD *)a5 + 7);
  *(_OWORD *)(v15 + 144) = v23;
  *(_OWORD *)(v15 + 160) = v22;
  *(_OWORD *)(v15 + 176) = v21;
  *(_OWORD *)(v15 + 16) = v17;
  *(_OWORD *)(v15 + 32) = v16;
  re::FixedArray<double>::FixedArray((uint64_t *)(v15 + 192), (uint64_t)(a5 + 22));
  *(_QWORD *)(v15 + 216) = a5[25];
  v24 = *((_OWORD *)a5 + 16);
  v26 = *((_OWORD *)a5 + 13);
  v25 = *((_OWORD *)a5 + 14);
  *(_OWORD *)(v15 + 256) = *((_OWORD *)a5 + 15);
  *(_OWORD *)(v15 + 272) = v24;
  *(_OWORD *)(v15 + 224) = v26;
  *(_OWORD *)(v15 + 240) = v25;
  v27 = *((_OWORD *)a5 + 20);
  v29 = *((_OWORD *)a5 + 17);
  v28 = *((_OWORD *)a5 + 18);
  *(_OWORD *)(v15 + 320) = *((_OWORD *)a5 + 19);
  *(_OWORD *)(v15 + 336) = v27;
  *(_OWORD *)(v15 + 288) = v29;
  *(_OWORD *)(v15 + 304) = v28;
  v30 = *((_OWORD *)a5 + 24);
  v32 = *((_OWORD *)a5 + 21);
  v31 = *((_OWORD *)a5 + 22);
  *(_OWORD *)(v15 + 384) = *((_OWORD *)a5 + 23);
  *(_OWORD *)(v15 + 400) = v30;
  *(_OWORD *)(v15 + 352) = v32;
  *(_OWORD *)(v15 + 368) = v31;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

char *re::MeshInstanceCollection::make(re::MeshInstanceCollection *this)
{
  unint64_t v1;
  objc_class *v2;
  char *Instance;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;

  if (this <= 3)
    v1 = 3;
  else
    v1 = this;
  v2 = (objc_class *)objc_opt_class();
  Instance = (char *)class_createInstance(v2, 0xA8uLL);
  *(_OWORD *)(Instance + 24) = 0u;
  *((_DWORD *)Instance + 10) = 0;
  *(_OWORD *)(Instance + 8) = 0u;
  *(_QWORD *)(Instance + 44) = 0x7FFFFFFFLL;
  *((_QWORD *)Instance + 11) = 0;
  *((_QWORD *)Instance + 8) = 0;
  *((_QWORD *)Instance + 9) = 0;
  *((_DWORD *)Instance + 20) = 0;
  *((_QWORD *)Instance + 7) = 0;
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::StringID>::setCapacity((_QWORD *)Instance + 7, v1);
  ++*((_DWORD *)Instance + 20);
  *((_QWORD *)Instance + 16) = 0;
  *((_QWORD *)Instance + 13) = 0;
  *((_QWORD *)Instance + 14) = 0;
  *((_DWORD *)Instance + 30) = 0;
  *((_QWORD *)Instance + 12) = 0;
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::StringID>::setCapacity((_QWORD *)Instance + 12, v1);
  ++*((_DWORD *)Instance + 30);
  *((_QWORD *)Instance + 21) = 0;
  *((_QWORD *)Instance + 18) = 0;
  *((_QWORD *)Instance + 19) = 0;
  *((_DWORD *)Instance + 40) = 0;
  *((_QWORD *)Instance + 17) = 0;
  re::DynamicArray<re::Matrix3x3<float>>::setCapacity((_QWORD *)Instance + 17, v1);
  ++*((_DWORD *)Instance + 40);
  return Instance;
}

id re::MeshInstanceCollection::makeCopy(re::MeshInstanceCollection *this, const re::MeshInstanceCollection *a2)
{
  objc_class *v3;
  id Instance;

  v3 = (objc_class *)objc_opt_class();
  Instance = class_createInstance(v3, 0xA8uLL);
  re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::HashTable((uint64_t)Instance + 8, (uint64_t)this + 8);
  re::DynamicArray<re::StringID>::DynamicArray((uint64_t)Instance + 56, (uint64_t *)this + 7);
  re::DynamicArray<re::StringID>::DynamicArray((uint64_t)Instance + 96, (uint64_t *)this + 12);
  re::DynamicArray<re::GenericSRT<float>>::DynamicArray((uint64_t)Instance + 136, (uint64_t *)this + 17);
  return Instance;
}

void re::MeshInstanceCollection::beginCOWMutation(re::MeshInstanceCollection **this, re::MeshInstanceCollection **a2)
{
  const re::MeshInstanceCollection *v3;
  re::MeshInstanceCollection *v4;

  if (CFGetRetainCount(*this) != 1)
  {
    v4 = *this;
    *this = (re::MeshInstanceCollection *)re::MeshInstanceCollection::makeCopy(*this, v3);
    CFRelease(v4);
  }
}

uint64_t re::DrawCallRecorder::DrawCallRecorder(uint64_t a1, _QWORD *a2, char a3, uint64_t a4)
{
  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = a4;
  re::DynamicArray<re::DrawCallRecorderGroup>::setCapacity((_QWORD *)(a1 + 8), 0);
  ++*(_DWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 84) = 0x7FFFFFFFLL;
  re::HashTable<unsigned long long,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1 + 48, a4, 3);
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 132) = 0x7FFFFFFFLL;
  re::HashTable<unsigned long long,re::DrawCallRecorder::RenderPassGroupDebugInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1 + 96, a4, 3);
  *(_QWORD *)(a1 + 144) = *a2;
  *(_BYTE *)(a1 + 152) = a3;
  return a1;
}

uint64_t re::DrawCallRecorder::allocateDrawCallRecorderGroup(re::DrawCallRecorder *this, const char *a2, const char *a3)
{
  _anonymous_namespace_ *v4;
  uint64_t v6;
  char v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11[6];
  uint64_t v12;

  v4 = (re::DrawCallRecorder *)((char *)this + 8);
  re::DrawCallRecorderGroup::DrawCallRecorderGroup((uint64_t)&v6, a2, a3, *(_QWORD *)this);
  re::DynamicArray<re::DrawCallRecorderGroup>::add(v4, (uint64_t)&v6);
  re::DynamicArray<re::EncodedDrawCallDetails>::deinit((uint64_t)&v12);
  re::HashTable<unsigned int,re::DrawCallMeshPartsDetails,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(v11);
  re::DynamicArray<re::DrawCallRecorderGroup::SortingContext>::deinit((uint64_t)&v10);
  if ((_QWORD)v8)
  {
    if ((BYTE8(v8) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v8 + 40))();
    v8 = 0u;
    v9 = 0u;
  }
  if (v6 && (v7 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v6 + 40))();
  return *((_QWORD *)this + 5) + (*((_QWORD *)this + 3) << 8) - 256;
}

void re::DynamicArray<re::DrawCallRecorderGroup>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::DrawCallRecorderGroup>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  re::DrawCallRecorderGroup::DrawCallRecorderGroup(*((_QWORD *)this + 4) + (v4 << 8), a2);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
}

uint64_t re::DrawCallRecorder::savePerEntityDebugInformation(re::DrawCallRecorder *this, unint64_t a2, const re::DynamicString *a3, const re::DynamicString *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v14[2];
  int v15;
  uint64_t v16;
  unint64_t v17;

  v17 = a2;
  v7 = (_QWORD *)((char *)this + 48);
  if (!re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)this + 48, (uint64_t *)&v17))
  {
    v8 = *(_QWORD *)this;
    memset(v14, 0, sizeof(v14));
    v15 = 0;
    v16 = 0x7FFFFFFFLL;
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v14, v8, 3);
    re::HashTable<unsigned long long,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add((uint64_t)v7, (uint64_t *)&v17, (uint64_t *)v14);
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v14);
  }
  LODWORD(v9) = 0x7FFFFFFF;
  if (*v7)
  {
    v10 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) >> 27));
    v11 = *(unsigned int *)(*((_QWORD *)this + 7) + 4 * ((v10 ^ (v10 >> 31)) % *((unsigned int *)this + 18)));
    if ((_DWORD)v11 != 0x7FFFFFFF)
    {
      v12 = *((_QWORD *)this + 8);
      LODWORD(v9) = v11;
      if (*(_QWORD *)(v12 + 72 * v11 + 16) != v17)
      {
        v9 = v11;
        while (1)
        {
          LODWORD(v9) = *(_DWORD *)(v12 + 72 * v9 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v9 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v12 + 72 * v9 + 16) == v17)
            return re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(*((_QWORD *)this + 8) + 72 * v9 + 24, a3, a4);
        }
        LODWORD(v9) = 0x7FFFFFFF;
      }
    }
  }
  return re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(*((_QWORD *)this + 8) + 72 * v9 + 24, a3, a4);
}

uint64_t re::HashTable<unsigned long long,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long long,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 72 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 72 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 72 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 72 * v10;
  return v12 + 24;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, const re::DynamicString *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v14;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<re::DynamicString&>(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 80 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 80 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 80 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  re::DynamicString::operator=((re::DynamicString *)(v10 + 80 * v9 + 48), a3);
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 80 * v9;
  return v12 + 48;
}

uint64_t re::HashTable<unsigned long long,re::DrawCallRecorder::RenderPassGroupDebugInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long long,re::DrawCallRecorder::RenderPassGroupDebugInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 96 * v13;
    return v12 + 32;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 96 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 96 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 96 * v10;
  return v12 + 32;
}

uint64_t re::DrawCallRecorder::drawCallRecordingEnabled(re::DrawCallRecorder *this, const re::RenderManager *a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  unsigned __int8 v10;

  if (drawCallRecordingEnabledByEnvironmentVariable(void)::onceToken != -1)
    dispatch_once(&drawCallRecordingEnabledByEnvironmentVariable(void)::onceToken, &__block_literal_global_33);
  if (drawCallRecordingEnabledByEnvironmentVariable(void)::isEnabled)
    return 1;
  result = *((_QWORD *)a2 + 11);
  if (result)
  {
    v8 = 0x422F4464C0EC2900;
    v9 = "drawcallrecording:takeSnapshotNow";
    v10 = 0;
    if (re::DebugSettingsManager::getWithErrorCode<BOOL>(result, &v8, &v10))
    {
      re::StringID::destroyString((re::StringID *)&v8);
    }
    else
    {
      v4 = v10;
      re::StringID::destroyString((re::StringID *)&v8);
      if (v4)
      {
        v7 = *((_QWORD *)a2 + 11);
        v8 = 0x422F4464C0EC2900;
        v9 = "drawcallrecording:takeSnapshotNow";
        v10 = 0;
        re::DebugSettingsManager::setWithErrorCode<BOOL>(v7, &v8, &v10);
        re::StringID::destroyString((re::StringID *)&v8);
        return 1;
      }
    }
    v5 = *((_QWORD *)a2 + 11);
    v8 = 0x184FB450F9DBB738;
    v9 = "drawcallrecording:record";
    v10 = 0;
    if (re::DebugSettingsManager::getWithErrorCode<BOOL>(v5, &v8, &v10))
    {
      re::StringID::destroyString((re::StringID *)&v8);
      return 0;
    }
    v6 = v10;
    re::StringID::destroyString((re::StringID *)&v8);
    return v6 != 0;
  }
  return result;
}

uint64_t boxStringForVisualizer(re::DynamicString *a1, re::DynamicString *this, float32x4_t *a3, float *a4)
{
  float v4;
  float v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;

  v4 = a4[1];
  v5 = a4[2];
  v6 = a3[1];
  v7 = a3[2];
  v8 = a3[3];
  v9 = vmulq_n_f32(*a3, *a4);
  v10 = vmlaq_n_f32(v9, v6, v4);
  v11 = vaddq_f32(v8, vmlaq_n_f32(v10, v7, v5));
  v12 = vdivq_f32(v11, (float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 3));
  v13 = a4[5];
  v14 = vmulq_n_f32(*a3, a4[4]);
  v15 = vmlaq_n_f32(v14, v6, v4);
  v16 = vaddq_f32(v8, vmlaq_n_f32(v15, v7, v5));
  v17 = vdivq_f32(v16, (float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 3));
  v18 = vmlaq_n_f32(v14, v6, v13);
  v19 = vaddq_f32(v8, vmlaq_n_f32(v18, v7, v5));
  v20 = vdivq_f32(v19, (float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 3));
  v21 = vmlaq_n_f32(v9, v6, v13);
  v22 = vaddq_f32(v8, vmlaq_n_f32(v21, v7, v5));
  v23 = vdivq_f32(v22, (float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 3));
  v24 = a4[6];
  v25 = vaddq_f32(v8, vmlaq_n_f32(v10, v7, v24));
  v26 = vdivq_f32(v25, (float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 3));
  v27 = vaddq_f32(v8, vmlaq_n_f32(v15, v7, v24));
  v28 = vdivq_f32(v27, (float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 3));
  v29 = vaddq_f32(v8, vmlaq_n_f32(v18, v7, v24));
  v30 = vdivq_f32(v29, (float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 3));
  v31 = vaddq_f32(v8, vmlaq_n_f32(v21, v7, v24));
  v32 = vdivq_f32(v31, (float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 3));
  return re::DynamicString::format(this, (re::Allocator *)"%f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f %f", a1, v12.f32[0], v12.f32[1], v12.f32[2], v17.f32[0], v17.f32[1], v17.f32[2], v20.f32[0], v20.f32[1], v20.f32[2], v23.f32[0], v23.f32[1], v23.f32[2], v26.f32[0], v26.f32[1], v26.f32[2], v28.f32[0],
           v28.f32[1],
           v28.f32[2],
           v30.f32[0],
           v30.f32[1],
           v30.f32[2],
           v32.f32[0],
           v32.f32[1],
           v32.f32[2]);
}

uint64_t re::DrawCallRecorder::dumpDrawCallsToDisk(re::DrawCallRecorder *this)
{
  float v1;
  float v2;
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  _anonymous_namespace_ *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  re::DrawCallRecorder *v15;
  const char *v16;
  _anonymous_namespace_ *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  const char *v23;
  int v24;
  BOOL v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  char *v41;
  char v42;
  const char *v43;
  char v45;
  uint64_t v46;
  int *v47;
  int v48;
  const char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BOOL4 v53;
  BOOL v54;
  uint64_t v55;
  unsigned __int8 *v56;
  int v57;
  int v58;
  const char *v59;
  const char *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  const char *v67;
  unsigned int v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint8_t *v76;
  int v77;
  __int8 v78;
  __int8 v79;
  BOOL v80;
  const char *v81;
  char v82;
  uint64_t v83;
  char v84;
  uint8_t *v85;
  unsigned int v86;
  const char *v88;
  char v89;
  int v90;
  const char *v91;
  const char *v92;
  const char *v93;
  const char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  const char *v102;
  const char *v103;
  re::DynamicString *v104;
  _anonymous_namespace_ *v105;
  uint64_t v106;
  float32x4_t v107;
  __int128 v108;
  __int128 v109;
  char v111;
  uint64_t v112;
  int *v113;
  int v114;
  const char *v115;
  char *v116;
  int v117;
  double v118;
  double v119;
  double v120;
  _BYTE *v121;
  _BYTE *v122;
  _BYTE *v123;
  double v124;
  double v125;
  double v126;
  const char *v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int *v134;
  unsigned int v135;
  uint64_t v136;
  int *v137;
  int v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  const char *v143;
  const char *v144;
  int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  int *v149;
  int v150;
  uint64_t v151;
  uint64_t v152;
  const char *v153;
  const char *v154;
  uint64_t v155;
  re::DynamicString *v156;
  __int128 v157;
  const char *v158;
  int v159;
  int v160;
  const char *v161;
  re *v162;
  char *v163;
  const char *v164;
  uint64_t v165;
  std::ios_base *v166;
  std::ios_base::iostate v167;
  NSObject *v168;
  re *v169;
  NSObject *v170;
  _BYTE *v171;
  const char *v172;
  const char *v173;
  size_t v174;
  re *v175;
  _BYTE *v176;
  uint64_t result;
  uint64_t v178;
  float v179;
  float v180;
  int v181;
  _BYTE *v182;
  _BYTE *v183;
  uint64_t *v184;
  _BYTE *v185;
  uint64_t v186;
  uint64_t v187;
  _BYTE *v188;
  uint64_t v189;
  uint64_t v191;
  int v192;
  _QWORD *v193;
  unint64_t *v194;
  _OWORD v195[2];
  float32x4_t v196[4];
  __int128 v197;
  __int128 v198;
  char v199[4];
  int v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  int v204;
  char v206;
  _QWORD v207[3];
  int v208;
  uint64_t v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  int v213;
  char v215;
  _QWORD v216[3];
  int v217;
  uint64_t v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  int v222;
  char v223;
  char v224;
  _QWORD v225[2];
  uint64_t v226;
  int v227;
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  int v232;
  char v233;
  char v234;
  uint64_t v235[3];
  int v236;
  uint64_t v237;
  __int128 v238;
  __int128 v239;
  uint64_t v240;
  uint64_t v241;
  const char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  const char *v246;
  uint64_t v247;
  uint64_t v248;
  char v249;
  _BYTE v250[7];
  const char *v251;
  float32x4_t v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  uint64_t v256;
  uint64_t v257;
  _OWORD v258[2];
  uint64_t v259;
  char v260;
  _BYTE v261[23];
  uint64_t v262;
  char v263;
  _BYTE v264[23];
  uint64_t v265;
  char v266;
  _BYTE v267[7];
  _BYTE *v268;
  uint8_t buf[16];
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  float32x4_t v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  unsigned __int8 v278;
  float v279;
  float v280;
  float v281;
  std::ios_base v282;
  uint64_t v283;
  int v284;
  _BYTE v285[12];
  _BYTE *v286;
  uint64_t v287;

  v287 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)this + 3);
  if (v5)
  {
    v6 = 0;
    v7 = v5 << 8;
    v8 = (_QWORD *)(*((_QWORD *)this + 5) + 176);
    do
    {
      v6 += *v8;
      v8 += 32;
      v7 -= 256;
    }
    while (v7);
    v9 = v6 << 10;
  }
  else
  {
    v9 = 0;
  }
  re::basicLocalWallTime((re *)"HH.mm.ss.SSS", (re::DynamicString *)buf);
  if ((buf[8] & 1) != 0)
    v11 = (const char *)v270;
  else
    v11 = (const char *)&buf[9];
  if (*(_QWORD *)buf && (buf[8] & 1) != 0)
    (*(void (**)(void))(**(_QWORD **)buf + 40))();
  v12 = *(_QWORD *)this;
  v247 = 0;
  v246 = 0;
  v245 = 0;
  v244 = v12;
  re::DynamicString::setCapacity(&v244, v9);
  v13 = *(_QWORD *)this;
  v243 = 0;
  v242 = 0;
  v241 = 0;
  v240 = v13;
  v14 = v9;
  v15 = this;
  re::DynamicString::setCapacity(&v240, v14);
  re::DynamicString::appendf((re::DynamicString *)&v244, "DrawCallRecorder Version %s\n", "2.0.0");
  re::DynamicString::appendf((re::DynamicString *)&v244, "Frame: %llu\n", *((_QWORD *)this + 18) & 0xFFFFFFFFFFFFFFFLL);
  if ((v249 & 1) != 0)
    v16 = v251;
  else
    v16 = v250;
  v17 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v244, "Local Time: %s\n\n", v16);
  v18 = *((_QWORD *)this + 3);
  if (v18)
  {
    v19 = 0;
    v181 = 0;
    v20 = *((_QWORD *)this + 5);
    v178 = v20 + (v18 << 8);
    v193 = (_QWORD *)((char *)this + 48);
    do
    {
      if (*(_QWORD *)(v20 + 176))
      {
        re::DynamicString::DynamicString((re::DynamicString *)&v238, (const re::DynamicString *)v20);
        v21 = 0;
        v22 = BYTE8(v238);
        if ((BYTE8(v238) & 1) != 0)
          v23 = (const char *)v239;
        else
          v23 = (char *)&v238 + 9;
        do
        {
          v24 = strcmp(v23, off_24ED74FA8[v21]);
          if (v24)
            v25 = v21 == 3;
          else
            v25 = 1;
          ++v21;
        }
        while (!v25);
        v192 = v24;
        v15 = this;
        if ((_QWORD)v238)
        {
          if ((v22 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v238 + 40))();
          v238 = 0u;
          v239 = 0u;
        }
        v26 = (*(_BYTE *)(v20 + 8) & 1) != 0 ? *(const char **)(v20 + 16) : (const char *)(v20 + 9);
        v27 = (*(_BYTE *)(v20 + 40) & 1) != 0 ? *(const char **)(v20 + 48) : (const char *)(v20 + 41);
        v17 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v244, "Group [%s] [%s]\n\n", v26, v27);
        if (*(_QWORD *)(v20 + 176))
        {
          v28 = 0;
          v187 = v20;
          do
          {
            v29 = *(_QWORD *)(v20 + 192);
            v30 = v29 + 320 * v28;
            re::DynamicString::appendf((re::DynamicString *)&v244, "          Draw-Call #: %zu\n", v19);
            if (*(_BYTE *)(v30 + 312))
            {
              re::DynamicString::appendf((re::DynamicString *)&v244, "          Technique: (VFX, details unavailable)\n");
            }
            else
            {
              if ((*(_BYTE *)(v30 + 8) & 1) != 0)
                v31 = *(const char **)(v30 + 16);
              else
                v31 = (const char *)(v30 + 9);
              if ((*(_BYTE *)(v29 + 320 * v28 + 40) & 1) != 0)
                v32 = *(const char **)(v29 + 320 * v28 + 48);
              else
                v32 = (const char *)(v29 + 320 * v28 + 41);
              if ((*(_BYTE *)(v29 + 320 * v28 + 72) & 1) != 0)
                v33 = *(const char **)(v29 + 320 * v28 + 80);
              else
                v33 = (const char *)(v29 + 320 * v28 + 73);
              re::DynamicString::appendf((re::DynamicString *)&v244, "          Technique: %s VertexShader: %s FragmentShader: %s\n", v31, v32, v33);
            }
            v188 = (_BYTE *)(v29 + 320 * v28 + 96);
            v189 = v28;
            v191 = v19;
            if (*v188)
            {
              v34 = v29 + 320 * v28;
              v35 = (__int128 *)(v34 + 104);
              v36 = *(_OWORD *)(v34 + 104);
              v37 = *(_OWORD *)(v34 + 120);
              v38 = *(_OWORD *)(v34 + 136);
              v232 = *(_DWORD *)(v34 + 152);
              v230 = v37;
              v231 = v38;
              v229 = v36;
              LODWORD(v34) = *(unsigned __int8 *)(v34 + 156);
              v233 = v34;
              if ((_DWORD)v34)
                v234 = *((_BYTE *)v35 + 53);
              re::DynamicArray<re::RenderAttachmentState>::DynamicArray((uint64_t)v235, (uint64_t *)v35 + 7);
              v39 = v29 + 320 * v28;
              v42 = *(_BYTE *)(v39 + 200);
              v41 = (char *)(v39 + 200);
              v40 = v42;
              *(_OWORD *)buf = v229;
              v270 = v230;
              v271 = v231;
              LODWORD(v272) = v232;
              BYTE4(v272) = v233;
              v43 = "Off";
              if (v233)
                BYTE5(v272) = v234;
              re::DynamicArray<re::RenderAttachmentState>::DynamicArray((uint64_t)&v272 + 8, v235);
              v45 = (v40 & 2) == 0 && DWORD1(v271) != 0;
              if (v274.i64[1])
              {
                v46 = *((_QWORD *)&v273 + 1);
                if (*((_QWORD *)&v273 + 1))
                {
                  v47 = (int *)(v274.i64[1] + 28);
                  do
                  {
                    if ((v40 & 2) != 0)
                      v48 = 0;
                    else
                      v48 = *v47;
                    v45 |= v48 != 0;
                    v47 += 8;
                    --v46;
                  }
                  while (v46);
                }
                if (*((_QWORD *)&v272 + 1))
                  (*(void (**)(_QWORD))(**((_QWORD **)&v272 + 1) + 40))(*((_QWORD *)&v272 + 1));
              }
              if ((v45 & 1) != 0)
                v49 = "On";
              else
                v49 = "Off";
              v50 = *v35;
              v51 = v35[1];
              v52 = v35[2];
              v222 = *((_DWORD *)v35 + 12);
              v220 = v51;
              v221 = v52;
              v219 = v50;
              v223 = *((_BYTE *)v35 + 52);
              v15 = this;
              if (v223)
                v224 = *((_BYTE *)v35 + 53);
              re::DynamicArray<re::RenderAttachmentState>::DynamicArray((uint64_t)v225, (uint64_t *)v35 + 7);
              v53 = (_BYTE)v219 != 0;
              v54 = BYTE1(v219) != 0;
              if (v228)
              {
                v55 = v226;
                if (v226)
                {
                  v56 = (unsigned __int8 *)(v228 + 1);
                  do
                  {
                    v57 = *(v56 - 1) | v53;
                    v58 = *v56;
                    v56 += 32;
                    v54 = (v58 | v54) != 0;
                    v53 = v57 != 0;
                    --v55;
                  }
                  while (v55);
                }
              }
              v59 = "FixedFunction";
              if (*((_BYTE *)this + 152) != 0 && v54)
                v59 = "Programmable";
              if (v53)
                v60 = v59;
              else
                v60 = "Off";
              v61 = *v35;
              v62 = v35[1];
              v63 = v35[2];
              v213 = *((_DWORD *)v35 + 12);
              v211 = v62;
              v212 = v63;
              v210 = v61;
              if (*((_BYTE *)v35 + 52))
                v215 = *((_BYTE *)v35 + 53);
              re::DynamicArray<re::RenderAttachmentState>::DynamicArray((uint64_t)v216, (uint64_t *)v35 + 7);
              if ((BYTE2(v210) & ~*v41) != 0)
                v43 = "On";
              v65 = v35[1];
              v64 = v35[2];
              v66 = *v35;
              v204 = *((_DWORD *)v35 + 12);
              v202 = v65;
              v203 = v64;
              v201 = v66;
              if (*((_BYTE *)v35 + 52))
                v206 = *((_BYTE *)v35 + 53);
              re::DynamicArray<re::RenderAttachmentState>::DynamicArray((uint64_t)v207, (uint64_t *)v35 + 7);
              v67 = "Always";
              if ((*v41 & 4) == 0)
              {
                v68 = BYTE10(v201) - 1;
                v67 = "Never";
                if (v68 <= 6)
                  v67 = off_24ED75200[(char)v68];
              }
              v69 = 0;
              v70 = 0;
              v71 = v29 + 320 * v28;
              v72 = *(_QWORD *)(v71 + 201);
              v73 = *(_QWORD *)(v71 + 209);
              *(_QWORD *)buf = v72;
              *(_QWORD *)&buf[8] = v73;
              do
              {
                v74 = 0;
                v75 = v69;
                v76 = &buf[8 * v70];
                v77 = v76[2];
                v78 = v76[4];
                v79 = v76[5];
                v252.i8[0] = v76[6];
                v252.i8[1] = v79;
                v252.i8[2] = v78;
                do
                {
                  if (v252.i8[v74])
                    v80 = v77 == 0;
                  else
                    v80 = 1;
                  if (!v80)
                  {
                    v81 = "On";
                    goto LABEL_103;
                  }
                  ++v74;
                }
                while (v74 != 3);
                v69 = 1;
                v70 = 1;
              }
              while ((v75 & 1) == 0);
              v81 = "Off";
LABEL_103:
              v82 = 0;
              v83 = 0;
              *(_QWORD *)buf = v72;
              *(_QWORD *)&buf[8] = v73;
              while (1)
              {
                v84 = v82;
                v85 = &buf[8 * v83];
                if ((*v85 & 1) != 0)
                {
                  v86 = v85[3];
                  if (v86 != 7 && v86 != 0)
                    break;
                }
                v82 = 1;
                v83 = 1;
                if ((v84 & 1) != 0)
                {
                  v88 = "None";
                  goto LABEL_114;
                }
              }
              v88 = "Never";
              if (v86 <= 6)
                v88 = off_24ED75238[(char)(v86 - 1)];
LABEL_114:
              re::DynamicString::appendf((re::DynamicString *)&v244, "          State: ColorWrite: %s AlphaBlending: %s DepthWrite: %s DepthCompare: %s StencilWrite: %s StencilTest: %s\n", v49, v60, v43, v67, v81, v88);
              v20 = v187;
              if (v207[0])
              {
                if (v209)
                  (*(void (**)(void))(*(_QWORD *)v207[0] + 40))();
                v209 = 0;
                memset(v207, 0, sizeof(v207));
                ++v208;
              }
              if (v216[0])
              {
                if (v218)
                  (*(void (**)(void))(*(_QWORD *)v216[0] + 40))();
                v218 = 0;
                memset(v216, 0, sizeof(v216));
                ++v217;
              }
              if (v225[0])
              {
                if (v228)
                  (*(void (**)(void))(*(_QWORD *)v225[0] + 40))();
                v228 = 0;
                v225[1] = 0;
                v226 = 0;
                v225[0] = 0;
                ++v227;
              }
              if (v235[0])
              {
                if (v237)
                  (*(void (**)(void))(*(_QWORD *)v235[0] + 40))();
                v237 = 0;
                memset(v235, 0, sizeof(v235));
                ++v236;
              }
              v89 = *v41;
              if (*v41)
              {
                v90 = v89 & 3;
                if (v90 == 1)
                {
                  v91 = "ColorOnly";
                }
                else
                {
                  v91 = "DepthOnly";
                  if (v90 != 2)
                  {
                    v91 = "";
                    if (v90 == 3)
                      v91 = "NoWrite";
                  }
                }
                v25 = (v89 & 4) == 0;
                v92 = "NoDepthCompare";
                if (v25)
                  v92 = "";
                re::DynamicString::format((re::DynamicString *)"%s%s", (re::DynamicString *)buf, v91, v92);
                v93 = (const char *)&buf[9];
                if ((buf[8] & 1) != 0)
                  v93 = (const char *)v270;
                re::DynamicString::appendf((re::DynamicString *)&v244, "          StateOverride: %s\n", v93);
                if (*(_QWORD *)buf && (buf[8] & 1) != 0)
                  (*(void (**)(void))(**(_QWORD **)buf + 40))();
              }
            }
            if ((*(_BYTE *)(v29 + 320 * v28 + 232) & 1) != 0)
              v94 = *(const char **)(v29 + 320 * v28 + 240);
            else
              v94 = (const char *)(v29 + 320 * v28 + 233);
            re::DynamicString::appendf((re::DynamicString *)&v244, "          Draw Details: %s\n", v94);
            if (*(_BYTE *)(v29 + 320 * v28 + 256))
            {
              v95 = v29 + 320 * v28;
              if (*(_QWORD *)(v95 + 288))
              {
                v96 = 0;
                v194 = (unint64_t *)(v95 + 288);
                v97 = v29 + 320 * v189;
                v98 = (uint64_t *)(v97 + 304);
                v185 = (_BYTE *)(v97 + 156);
                v186 = v97 + 104;
                v182 = (_BYTE *)(v97 + 157);
                v183 = (_BYTE *)(v97 + 200);
                v184 = (uint64_t *)(v97 + 160);
                do
                {
                  v99 = *v98;
                  v100 = (uint64_t *)(*v98 + 56 * v96);
                  re::DynamicString::appendf((re::DynamicString *)&v244, "          Mesh %zu: \n", v96);
                  v199[0] = *((_BYTE *)v100 + 48);
                  if (v199[0])
                    v200 = *(_DWORD *)(v99 + 56 * v96 + 52);
                  re::DrawCallRecorderGroup::getSortingContext((re::DynamicString *)v20, (uint64_t)v199, (uint64_t)buf);
                  if (*v100)
                    re::DynamicString::appendf((re::DynamicString *)&v244, "             Entity ID: %llu\n", *v100);
                  if (*(_BYTE *)(v99 + 56 * v96 + 8))
                  {
                    v101 = v99 + 56 * v96;
                    if ((*(_BYTE *)(v101 + 24) & 1) != 0)
                      v102 = *(const char **)(v101 + 32);
                    else
                      v102 = (const char *)(v101 + 25);
                    re::DynamicString::appendf((re::DynamicString *)&v244, "             MeshPart Name: %s\n", v102);
                  }
                  if (buf[0])
                  {
                    v103 = (char *)&v270 + 9;
                    if ((BYTE8(v270) & 1) != 0)
                      v103 = (const char *)v271;
                    re::DynamicString::appendf((re::DynamicString *)&v244, "             Sort Key: %s\n", v103);
                    if (!v192)
                    {
                      v104 = *(re::DynamicString **)v15;
                      v105 = re::DynamicString::DynamicString((re::DynamicString *)&v197, (const re::DynamicString *)v20);
                      v106 = *v100;
                      if (*v188)
                      {
                        v107 = *(float32x4_t *)v186;
                        v108 = *(_OWORD *)(v186 + 16);
                        v109 = *(_OWORD *)(v186 + 32);
                        LODWORD(v255) = *(_DWORD *)(v186 + 48);
                        v254 = v109;
                        v253 = v108;
                        v252 = v107;
                        BYTE4(v255) = *v185;
                        if (BYTE4(v255))
                          BYTE5(v255) = *v182;
                        v105 = (_anonymous_namespace_ *)re::DynamicArray<re::RenderAttachmentState>::DynamicArray((uint64_t)&v255 + 8, v184);
                        v111 = (*v183 & 2) == 0 && DWORD1(v254) != 0;
                        if (v257)
                        {
                          v112 = v256;
                          if (v256)
                          {
                            v113 = (int *)(v257 + 28);
                            do
                            {
                              if ((*v183 & 2) != 0)
                                v114 = 0;
                              else
                                v114 = *v113;
                              v111 |= v114 != 0;
                              v113 += 8;
                              --v112;
                            }
                            while (v112);
                          }
                          v105 = (_anonymous_namespace_ *)*((_QWORD *)&v255 + 1);
                          if (*((_QWORD *)&v255 + 1))
                            v105 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v255 + 1)
                                                                                              + 40))(*((_QWORD *)&v255 + 1));
                        }
                        v115 = "color_disabled";
                        if ((v111 & 1) != 0)
                          v115 = "color_enabled";
                      }
                      else
                      {
                        v115 = "color_disabled";
                      }
                      v116 = (char *)v198;
                      if ((BYTE8(v197) & 1) == 0)
                        v116 = (char *)&v197 + 9;
                      re::DynamicString::format(v104, (re::Allocator *)"%s_entity%llu_draw%zu_mesh%zu", (re::DynamicString *)v285, v116, v106, v191, v96);
                      v117 = v278;
                      v118 = v279;
                      v119 = v280;
                      v120 = v281;
                      if ((v285[8] & 1) != 0)
                        v121 = v286;
                      else
                        v121 = &v285[9];
                      if ((v266 & 1) != 0)
                        v122 = v268;
                      else
                        v122 = v267;
                      v252 = v274;
                      v253 = v275;
                      v254 = v276;
                      v255 = v277;
                      v258[1] = v273;
                      v258[0] = v272;
                      boxStringForVisualizer((re::DynamicString *)&v259, v104, &v252, (float *)v258);
                      v123 = v261;
                      if ((v260 & 1) != 0)
                        v123 = *(_BYTE **)&v261[7];
                      if (v117)
                        v124 = v118;
                      else
                        v124 = 0.0;
                      if (v117)
                        v125 = v119;
                      else
                        v125 = 0.0;
                      if (v117)
                        v126 = v120;
                      else
                        v126 = 0.0;
                      re::DynamicString::format(v104, (re::Allocator *)"visualize mesh_part %zu %s %s %s %d %f %f %f\n", (re::DynamicString *)&v262, v191, v121, v122, v123, v278, *(_QWORD *)&v124, *(_QWORD *)&v125, *(_QWORD *)&v126);
                      if (v259 && (v260 & 1) != 0)
                        (*(void (**)(void))(*(_QWORD *)v259 + 40))();
                      v127 = v264;
                      if ((v263 & 1) != 0)
                        v127 = *(const char **)&v264[7];
                      re::DynamicString::appendf((re::DynamicString *)&v240, "%s", v127);
                      if (v262 && (v263 & 1) != 0)
                        (*(void (**)(void))(*(_QWORD *)v262 + 40))();
                      v15 = this;
                      v20 = v187;
                      if (*(_QWORD *)v285 && (v285[8] & 1) != 0)
                        (*(void (**)(void))(**(_QWORD **)v285 + 40))();
                      if (v265 && (v266 & 1) != 0)
                        (*(void (**)(void))(*(_QWORD *)v265 + 40))();
                      if ((_QWORD)v197)
                      {
                        if ((BYTE8(v197) & 1) != 0)
                          (*(void (**)(void))(*(_QWORD *)v197 + 40))();
                        v197 = 0u;
                        v198 = 0u;
                      }
                    }
                  }
                  if (*v100
                    && re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)v193, v100))
                  {
                    if (*v193)
                    {
                      v128 = 0xBF58476D1CE4E5B9 * (*v100 ^ ((unint64_t)*v100 >> 30));
                      v129 = ((0x94D049BB133111EBLL * (v128 ^ (v128 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                               * (v128 ^ (v128 >> 27))) >> 31))
                           % *((unsigned int *)v15 + 18);
                      v130 = *((_QWORD *)v15 + 8);
                      v131 = *(unsigned int *)(*((_QWORD *)v15 + 7) + 4 * v129);
                      if ((_DWORD)v131 == 0x7FFFFFFF)
                      {
LABEL_227:
                        LODWORD(v131) = 0x7FFFFFFF;
                      }
                      else
                      {
                        while (*(_QWORD *)(v130 + 72 * v131 + 16) != *v100)
                        {
                          v131 = *(_DWORD *)(v130 + 72 * v131 + 8) & 0x7FFFFFFF;
                          if (v131 == 0x7FFFFFFF)
                            goto LABEL_227;
                        }
                      }
                    }
                    else
                    {
                      v130 = *((_QWORD *)v15 + 8);
                      LODWORD(v131) = 0x7FFFFFFF;
                    }
                    v132 = v130 + 72 * v131;
                    v135 = *(_DWORD *)(v132 + 56);
                    v134 = (int *)(v132 + 56);
                    v133 = v135;
                    if (v135)
                    {
                      v136 = 0;
                      v137 = (int *)(*(_QWORD *)(v130 + 72 * v131 + 40) + 8);
                      while (1)
                      {
                        v138 = *v137;
                        v137 += 20;
                        if (v138 < 0)
                          break;
                        if (v133 == ++v136)
                        {
                          LODWORD(v136) = v133;
                          break;
                        }
                      }
                    }
                    else
                    {
                      LODWORD(v136) = 0;
                    }
                    if ((_DWORD)v133 != (_DWORD)v136)
                    {
                      v139 = v136;
                      v140 = (uint64_t *)(v130 + 72 * v131 + 40);
                      do
                      {
                        v141 = *v140;
                        v142 = *v140 + 80 * v139;
                        if ((*(_BYTE *)(v142 + 24) & 1) != 0)
                          v143 = *(const char **)(v141 + 80 * v139 + 32);
                        else
                          v143 = (const char *)(v141 + 80 * v139 + 25);
                        if ((*(_BYTE *)(v141 + 80 * v139 + 56) & 1) != 0)
                          v144 = *(const char **)(v141 + 80 * v139 + 64);
                        else
                          v144 = (const char *)(v142 + 57);
                        re::DynamicString::appendf((re::DynamicString *)&v244, "             %s: %s\n", v143, v144);
                        v145 = *v134;
                        if (*v134 <= (v136 + 1))
                          v145 = v136 + 1;
                        while (1)
                        {
                          v139 = (v136 + 1);
                          if (v145 - 1 == (_DWORD)v136)
                            break;
                          LODWORD(v136) = v136 + 1;
                          v146 = v139;
                          if ((*(_DWORD *)(*v140 + 80 * v139 + 8) & 0x80000000) != 0)
                            goto LABEL_249;
                        }
                        v146 = v145;
LABEL_249:
                        LODWORD(v136) = v146;
                      }
                      while ((_DWORD)v133 != v146);
                    }
                  }
                  if (buf[0] && (_QWORD)v270 && (BYTE8(v270) & 1) != 0)
                    (*(void (**)(void))(*(_QWORD *)v270 + 40))();
                  ++v96;
                }
                while (v96 < *v194);
              }
            }
            if (*(_BYTE *)(v20 + 208))
            {
              v3 = *(float *)(v20 + 224);
              v2 = *(float *)(v20 + 228);
              v1 = *(float *)(v20 + 232);
              v4 = *(float *)(v20 + 248);
              v179 = *(float *)(v20 + 240);
              v180 = *(float *)(v20 + 244);
              v181 = 1;
            }
            v19 = v191 + 1;
            v17 = (_anonymous_namespace_ *)re::DynamicString::appendf((re::DynamicString *)&v244, "\n");
            v28 = v189 + 1;
          }
          while ((unint64_t)(v189 + 1) < *(_QWORD *)(v20 + 176));
        }
      }
      v20 += 256;
    }
    while (v20 != v178);
  }
  else
  {
    v181 = 0;
  }
  v147 = *((unsigned int *)v15 + 32);
  if ((_DWORD)v147)
  {
    v148 = 0;
    v149 = (int *)(*((_QWORD *)v15 + 14) + 8);
    while (1)
    {
      v150 = *v149;
      v149 += 24;
      if (v150 < 0)
        break;
      if (v147 == ++v148)
      {
        LODWORD(v148) = *((_DWORD *)v15 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v148) = 0;
  }
  if ((_DWORD)v147 != (_DWORD)v148)
  {
    v151 = v148;
    do
    {
      v152 = *((_QWORD *)this + 14) + 96 * v151;
      if (*(_BYTE *)(v152 + 40))
        v153 = "fade";
      else
        v153 = "default";
      if ((buf[8] & 1) != 0)
        v154 = (const char *)v270;
      else
        v154 = (const char *)&buf[9];
      v155 = *(_QWORD *)(v152 + 16);
      v156 = *(re::DynamicString **)this;
      v196[0] = (float32x4_t)xmmword_2260E5F10;
      v196[1] = (float32x4_t)xmmword_2260E5F20;
      v196[2] = (float32x4_t)xmmword_2260E5F40;
      v196[3] = (float32x4_t)xmmword_2260E5D70;
      v157 = *(_OWORD *)(v152 + 64);
      v195[0] = *(_OWORD *)(v152 + 48);
      v195[1] = v157;
      boxStringForVisualizer((re::DynamicString *)&v252, v156, v196, (float *)v195);
      if ((v252.i8[8] & 1) != 0)
        v158 = (const char *)v253;
      else
        v158 = &v252.i8[9];
      re::DynamicString::appendf((re::DynamicString *)&v240, "visualize rpg %s %llu %s\n", v154, v155, v158);
      if (v252.i64[0] && (v252.i8[8] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v252.i64[0] + 40))();
      v17 = *(_anonymous_namespace_ **)buf;
      if (*(_QWORD *)buf && (buf[8] & 1) != 0)
        v17 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)buf + 40))();
      if (*((_DWORD *)this + 32) <= (v148 + 1))
        v159 = v148 + 1;
      else
        v159 = *((_DWORD *)this + 32);
      while (1)
      {
        v151 = (v148 + 1);
        if (v159 - 1 == (_DWORD)v148)
          break;
        LODWORD(v148) = v148 + 1;
        v160 = v151;
        if ((*(_DWORD *)(*((_QWORD *)this + 14) + 96 * v151 + 8) & 0x80000000) != 0)
          goto LABEL_291;
      }
      v160 = v159;
LABEL_291:
      LODWORD(v148) = v160;
    }
    while ((_DWORD)v147 != v160);
  }
  if (v181)
    re::DynamicString::appendf((re::DynamicString *)&v240, "visualize sorting_camera %f %f %f %f %f %f\n", v3, v2, v1, v179, v180, v4);
  if ((v241 & 1) != 0)
    v161 = v242;
  else
    v161 = (char *)&v241 + 1;
  re::DynamicString::appendf((re::DynamicString *)&v244, "\n\nDrawCallRecorder Visualizer commands:\n%s", v161);
  re::defaultTemporaryDirectoryPath((uint64_t)&v252);
  if (v252.i8[0])
  {
    if ((v253 & 1) != 0)
      v163 = (char *)*((_QWORD *)&v253 + 1);
    else
      v163 = (char *)&v253 + 1;
    v164 = v250;
    if ((v249 & 1) != 0)
      v164 = v251;
    re::DynamicString::format(*(re::DynamicString **)this, (re::Allocator *)"%s/draw_calls__timestamp%s__frame%llu.txt", (re::DynamicString *)&v265, v163, v164, *((_QWORD *)this + 18) & 0xFFFFFFFFFFFFFFFLL);
    v282.__vftable = (std::ios_base_vtbl *)&unk_24ED75188;
    *(_QWORD *)buf = &unk_24ED75160;
    *(_QWORD *)&buf[8] = 0;
    std::ios_base::init(&v282, (char *)&v270 + 8);
    v284 = -1;
    v283 = 0;
    MEMORY[0x227692FD4]((char *)&v270 + 8);
    v165 = std::filebuf::open();
    v166 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
    if (v165)
      v167 = 0;
    else
      v167 = v166->__rdstate_ | 4;
    std::ios_base::clear(v166, v167);
    if ((*((_BYTE *)&v271 + *(_QWORD *)(*(_QWORD *)buf - 24)) & 5) != 0)
    {
      v170 = *re::graphicsLogObjects(v169);
      if (!os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
      {
LABEL_325:
        MEMORY[0x227692FE0]((char *)&v270 + 8);
        std::iostream::~basic_iostream();
        MEMORY[0x227693328](&v282);
        if (v265 && (v266 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v265 + 40))();
        goto LABEL_328;
      }
      if ((v266 & 1) != 0)
        v171 = v268;
      else
        v171 = v267;
      *(_DWORD *)v285 = 136315138;
      *(_QWORD *)&v285[4] = v171;
      v172 = "DrawCallRecorder couldn't write to file %s";
    }
    else
    {
      if ((v245 & 1) != 0)
        v173 = v246;
      else
        v173 = (char *)&v245 + 1;
      v174 = strlen(v173);
      std::__put_character_sequence[abi:nn180100]<char,std::char_traits<char>>(&v270, (uint64_t)v173, v174);
      v175 = (re *)std::filebuf::close();
      if (!v175)
        std::ios_base::clear((std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)], *(_DWORD *)((char *)&v271 + *(_QWORD *)(*(_QWORD *)buf - 24)) | 4);
      v170 = *re::graphicsLogObjects(v175);
      if (!os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
        goto LABEL_325;
      if ((v266 & 1) != 0)
        v176 = v268;
      else
        v176 = v267;
      *(_DWORD *)v285 = 136315138;
      *(_QWORD *)&v285[4] = v176;
      v172 = "DrawCallRecorder wrote to %s";
    }
    _os_log_impl(&dword_224FE9000, v170, OS_LOG_TYPE_DEFAULT, v172, v285, 0xCu);
    goto LABEL_325;
  }
  v168 = *re::graphicsLogObjects(v162);
  if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_224FE9000, v168, OS_LOG_TYPE_DEFAULT, "DrawCallRecorder couldn't determine a path to write to", buf, 2u);
  }
LABEL_328:
  if (v252.i8[0] && v252.i64[1] && (v253 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v252.i64[1] + 40))();
  if (v240 && (v241 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v240 + 40))();
  if (v244 && (v245 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v244 + 40))();
  result = v248;
  if (v248)
  {
    if ((v249 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v248 + 40))();
  }
  return result;
}

void (__cdecl ***std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this)))(std::fstream *__hidden this)
{
  _QWORD *v2;

  v2 = a1 + 54;
  MEMORY[0x227692FE0](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x227693328](v2);
  return a1;
}

uint64_t re::DynamicArray<re::EncodedDrawCallDetails>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 0;
        v6 = 320 * v4;
        do
        {
          v7 = (_QWORD *)(v3 + v5);
          if (*(_BYTE *)(v3 + v5 + 256))
            re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::deinit((uint64_t)(v7 + 34));
          v8 = v7[28];
          if (v8)
          {
            if ((*(_BYTE *)(v3 + v5 + 232) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(v3 + v5 + 240));
            *((_OWORD *)v7 + 14) = 0u;
            *((_OWORD *)v7 + 15) = 0u;
          }
          v9 = v3 + v5;
          re::Optional<re::TechniqueState>::~Optional(v3 + v5 + 96);
          v10 = *(_QWORD *)(v3 + v5 + 64);
          if (v10)
          {
            if ((*(_BYTE *)(v9 + 72) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 40))(v10, *(_QWORD *)(v3 + v5 + 80));
            *(_OWORD *)(v3 + v5 + 64) = 0u;
            *(_OWORD *)(v9 + 80) = 0u;
          }
          v13 = *(_QWORD *)(v9 + 32);
          v12 = (_OWORD *)(v9 + 32);
          v11 = v13;
          if (v13)
          {
            if ((*(_BYTE *)(v3 + v5 + 40) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 40))(v11, *(_QWORD *)(v3 + v5 + 48));
            *v12 = 0u;
            v12[1] = 0u;
          }
          if (*v7)
          {
            if ((*(_BYTE *)(v3 + v5 + 8) & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v7 + 40))(*v7, *(_QWORD *)(v3 + v5 + 16));
            *(_OWORD *)v7 = 0u;
            *((_OWORD *)v7 + 1) = 0u;
          }
          v5 += 320;
        }
        while (v6 != v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::deinit(uint64_t a1)
{
  uint64_t result;
  __n128 *v3;
  uint64_t v4;
  __n128 *v5;
  uint64_t v6;
  __n128 v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(__n128 **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = v3 + 1;
        v6 = 56 * v4;
        v7 = 0uLL;
        do
        {
          if (v5[-1].n128_u8[8] && v5->n128_u64[0])
          {
            if ((v5->n128_u8[8] & 1) != 0)
            {
              (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v5->n128_u64[0] + 40))(v5->n128_u64[0], v5[1].n128_u64[0], v7);
              v7 = 0uLL;
            }
            *v5 = v7;
            v5[1] = v7;
          }
          v5 = (__n128 *)((char *)v5 + 56);
          v6 -= 56;
        }
        while (v6);
        result = *(_QWORD *)a1;
        v3 = *(__n128 **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, __n128 *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::Optional<re::TechniqueState>::~Optional(uint64_t a1)
{
  uint64_t v2;

  if (*(_BYTE *)a1)
  {
    v2 = *(_QWORD *)(a1 + 64);
    if (v2)
    {
      if (*(_QWORD *)(a1 + 96))
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
      *(_QWORD *)(a1 + 96) = 0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 64) = 0;
      ++*(_DWORD *)(a1 + 88);
    }
  }
  return a1;
}

double re::HashTable<unsigned int,re::DrawCallMeshPartsDetails,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicArray<re::DrawCallMeshPartsDetails::PerMeshPartDetails>::deinit(v6 + 24);
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 64;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::DynamicArray<re::DrawCallRecorderGroup::SortingContext>::deinit(uint64_t a1)
{
  uint64_t result;
  __n128 *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(__n128 **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 160 * v4;
        v6 = 0uLL;
        do
        {
          if (v3->n128_u64[0])
          {
            if ((v3->n128_u8[8] & 1) != 0)
            {
              (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v3->n128_u64[0] + 40))(v3->n128_u64[0], v3[1].n128_u64[0], v6);
              v6 = 0uLL;
            }
            *v3 = v6;
            v3[1] = v6;
          }
          v3 += 10;
          v5 -= 160;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(__n128 **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, __n128 *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void ___ZL45drawCallRecordingEnabledByEnvironmentVariablev_block_invoke()
{
  char v0;
  _BYTE v1[2];

  re::readBooleanEnvironmentVariable((re *)"ENABLE_DRAW_CALL_RECORDER", (uint64_t)v1);
  if (v1[0])
    v0 = v1[1];
  else
    v0 = 0;
  drawCallRecordingEnabledByEnvironmentVariable(void)::isEnabled = v0;
}

void `non-virtual thunk to'std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  MEMORY[0x227692FE0](a1 + 1);
  std::iostream::~basic_iostream();
  JUMPOUT(0x227693328);
}

{
  _QWORD *v1;

  v1 = a1 + 52;
  MEMORY[0x227692FE0](a1 + 1);
  std::iostream::~basic_iostream();
  MEMORY[0x227693328](v1);
  JUMPOUT(0x2276933B8);
}

void `virtual thunk to'std::fstream::~fstream(_QWORD *a1)
{
  void (__cdecl ***v1)(std::fstream *__hidden);

  v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(_QWORD *)(*a1 - 24));
  MEMORY[0x227692FE0](v1 + 3);
  std::iostream::~basic_iostream();
  JUMPOUT(0x227693328);
}

{
  void (__cdecl ***v1)(std::fstream *__hidden);

  v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(_QWORD *)(*a1 - 24));
  MEMORY[0x227692FE0](v1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x227693328](v1 + 54);
  JUMPOUT(0x2276933B8);
}

void std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  _QWORD *v1;

  v1 = a1 + 54;
  MEMORY[0x227692FE0](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x227693328](v1);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::DynamicArray<re::DrawCallRecorderGroup>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::DrawCallRecorderGroup>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (HIBYTE(a2))
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 256, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 8;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 8, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_24;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_24:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = v9 << 8;
        do
        {
          v12 = (_QWORD *)(v8 + v10);
          re::DrawCallRecorderGroup::DrawCallRecorderGroup((uint64_t)&v7[v10 / 8], v8 + v10);
          re::DynamicArray<re::EncodedDrawCallDetails>::deinit(v8 + v10 + 160);
          re::HashTable<unsigned int,re::DrawCallMeshPartsDetails,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)(v8 + v10 + 112));
          re::DynamicArray<re::DrawCallRecorderGroup::SortingContext>::deinit(v8 + v10 + 72);
          v13 = *(_QWORD *)(v8 + v10 + 32);
          if (v13)
          {
            if ((v12[5] & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 40))(v13, *(_QWORD *)(v8 + v10 + 48));
            *(_OWORD *)(v8 + v10 + 32) = 0u;
            *((_OWORD *)v12 + 3) = 0u;
          }
          if (*v12)
          {
            if ((*(_BYTE *)(v8 + v10 + 8) & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v12 + 40))(*v12, *(_QWORD *)(v8 + v10 + 16));
            *(_OWORD *)v12 = 0u;
            *((_OWORD *)v12 + 1) = 0u;
          }
          v10 += 256;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_24;
    }
  }
  return result;
}

__n128 re::DrawCallRecorderGroup::DrawCallRecorderGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 56) = 0;
  v9 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a2 + 40) = v9;
  *(_QWORD *)(a2 + 48) = v8;
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v12 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = v12;
  v13 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = v13;
  ++*(_DWORD *)(a2 + 96);
  ++*(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  result.n128_u64[0] = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 148) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v15 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = v15;
  v16 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = v16;
  LODWORD(v16) = *(_DWORD *)(a1 + 136);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 136) = v16;
  LODWORD(v16) = *(_DWORD *)(a1 + 140);
  *(_DWORD *)(a1 + 140) = *(_DWORD *)(a2 + 140);
  *(_DWORD *)(a2 + 140) = v16;
  LODWORD(v16) = *(_DWORD *)(a1 + 144);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a2 + 144) = v16;
  LODWORD(v16) = *(_DWORD *)(a1 + 148);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a2 + 148) = v16;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  v17 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v17;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  v18 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = v18;
  v19 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = v19;
  ++*(_DWORD *)(a2 + 184);
  ++*(_DWORD *)(a1 + 184);
  LODWORD(v19) = *(unsigned __int8 *)(a2 + 208);
  *(_BYTE *)(a1 + 208) = v19;
  if ((_DWORD)v19)
  {
    result = *(__n128 *)(a2 + 224);
    v20 = *(_OWORD *)(a2 + 240);
    *(__n128 *)(a1 + 224) = result;
    *(_OWORD *)(a1 + 240) = v20;
  }
  return result;
}

void re::HashTable<unsigned long long,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 72 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_23, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long long,re::DrawCallRecorder::RenderPassGroupDebugInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 96 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_72, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::DynamicArray<re::DrawCallRecorderGroup>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 0;
        v6 = v4 << 8;
        do
        {
          v7 = (_QWORD *)(v3 + v5);
          re::DynamicArray<re::EncodedDrawCallDetails>::deinit(v3 + v5 + 160);
          re::HashTable<unsigned int,re::DrawCallMeshPartsDetails,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)(v3 + v5 + 112));
          re::DynamicArray<re::DrawCallRecorderGroup::SortingContext>::deinit(v3 + v5 + 72);
          v8 = *(_QWORD *)(v3 + v5 + 32);
          if (v8)
          {
            if ((v7[5] & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(v3 + v5 + 48));
            *(_OWORD *)(v3 + v5 + 32) = 0u;
            *((_OWORD *)v7 + 3) = 0u;
          }
          if (*v7)
          {
            if ((*(_BYTE *)(v3 + v5 + 8) & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v7 + 40))(*v7, *(_QWORD *)(v3 + v5 + 16));
            *(_OWORD *)v7 = 0u;
            *((_OWORD *)v7 + 1) = 0u;
          }
          v5 += 256;
        }
        while (v6 != v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::HashTable<unsigned long long,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v6 + 24));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 72;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

_QWORD *re::DynamicArray<re::DrawCallRecorderGroup>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::DrawCallRecorderGroup>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DrawCallRecorderGroup>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::HashTable<unsigned long long,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v10;
  int v11;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  _BYTE v28[44];

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v10 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v28, v14, v13);
          v16 = *(_OWORD *)v28;
          *(_OWORD *)v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v28[16];
          *(_QWORD *)&v28[16] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v17;
          v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = 0;
            do
            {
              if ((*(_DWORD *)(*(_QWORD *)&v28[16] + v21 + 8) & 0x80000000) != 0)
              {
                re::HashTable<unsigned long long,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v28[16] + v21) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v28[16] + v21), *(_QWORD *)&v28[16] + v21 + 16, *(_QWORD *)&v28[16] + v21 + 24);
                v20 = *(_DWORD *)&v28[32];
              }
              ++v22;
              v21 += 72;
            }
            while (v22 < v20);
          }
          re::HashTable<unsigned long long,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v13)
          v25 = 2 * v12;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 72 * v10 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 72 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 72 * v10 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 16) = *a4;
  v26 = *(_QWORD *)(a1 + 16) + 72 * v10;
  *(_OWORD *)(v26 + 24) = 0u;
  v26 += 24;
  *(_OWORD *)(v26 + 16) = 0u;
  *(_DWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 36) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v26, a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::HashTable<unsigned long long,re::DrawCallRecorder::RenderPassGroupDebugInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, __int128 *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v30[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v30, 0, 36);
          *(_QWORD *)&v30[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::DrawCallRecorder::RenderPassGroupDebugInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v30, v13, v12);
          v15 = *(_OWORD *)v30;
          *(_OWORD *)v30 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v30[16];
          *(_QWORD *)&v30[16] = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v16;
          v18 = *(_OWORD *)&v30[24];
          *(_OWORD *)&v30[24] = *(_OWORD *)(a1 + 24);
          v17 = *(_DWORD *)&v30[32];
          *(_OWORD *)(a1 + 24) = v18;
          v19 = v17;
          if (v17)
          {
            v20 = 0;
            v21 = 0;
            do
            {
              if ((*(_DWORD *)(*(_QWORD *)&v30[16] + v20 + 8) & 0x80000000) != 0)
              {
                re::HashTable<unsigned long long,re::DrawCallRecorder::RenderPassGroupDebugInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v30[16] + v20) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v30[16] + v20), *(_QWORD *)&v30[16] + v20 + 16, *(_QWORD *)&v30[16] + v20 + 32);
                v19 = *(_DWORD *)&v30[32];
              }
              ++v21;
              v20 += 96;
            }
            while (v21 < v19);
          }
          re::HashTable<unsigned int,re::SerializerV2<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>>::SharedObject,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::deinit((uint64_t *)v30);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 96 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 96 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 96 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9 + 16) = *a4;
  v25 = (_OWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9);
  v26 = *a5;
  v27 = a5[1];
  v28 = a5[3];
  v25[4] = a5[2];
  v25[5] = v28;
  v25[2] = v26;
  v25[3] = v27;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::DebugSettingsManager::setWithErrorCode<BOOL>(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  if (!*(_BYTE *)(a1 + 112))
    return 3;
  v6 = (std::mutex *)(a1 + 48);
  std::mutex::lock((std::mutex *)(a1 + 48));
  v7 = re::DebugSettingsManager::contains<BOOL>(a1, a2);
  if (!(_DWORD)v7)
  {
    v8 = *a3 | 0x200000000;
    v9 = 0x7FFFFFFFLL;
    if (*(_QWORD *)a1)
    {
      v10 = 0xBF58476D1CE4E5B9 * ((*a2 >> 31) ^ (*a2 >> 1));
      v11 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                            + 4
                            * (((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                               * (v10 ^ (v10 >> 27))) >> 31))
                             % *(unsigned int *)(a1 + 24)));
      if ((_DWORD)v11 != 0x7FFFFFFF)
      {
        v12 = *(_QWORD *)(a1 + 16);
        v9 = 0x7FFFFFFFLL;
        while (!re::StringID::operator==((_QWORD *)(v12 + 40 * v11 + 8), a2))
        {
          v11 = *(_DWORD *)(v12 + 40 * v11) & 0x7FFFFFFF;
          if (v11 == 0x7FFFFFFF)
            goto LABEL_11;
        }
        v9 = v11;
      }
    }
LABEL_11:
    v13 = *(_QWORD *)(a1 + 16) + 40 * v9;
    v15 = *(unsigned __int8 *)(v13 + 24);
    v14 = v13 + 24;
    if (!v15)
      *(_BYTE *)v14 = 1;
    v7 = 0;
    *(_QWORD *)(v14 + 4) = v8;
  }
  std::mutex::unlock(v6);
  return v7;
}

uint64_t re::determineClippingNeeds(uint64_t a1, uint64_t *a2, unsigned int a3, float32x4_t *a4, uint64_t a5, float32x4_t *a6, double a7, double a8, double a9, double a10, double a11, double a12, int32x4_t a13, float32x4_t a14)
{
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float v30;
  float v31;
  float v32;
  float32x4_t v33;
  float32x4_t v34;
  uint32x4_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int32x4_t v44;
  float32x4_t v45;
  float32x4_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float16x4_t *v68;
  float32x4_t v69;
  float32x4_t v72;
  uint32x4_t v75;
  uint64_t result;
  uint32x4_t v77;
  uint32x4_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;

  v16 = *a4;
  v15 = a4[1];
  v17 = vsubq_f32(v15, *a4);
  v17.i32[3] = 0;
  v18 = vmaxnmq_f32(v17, (float32x4_t)0);
  if (vmulq_laneq_f32(vmulq_lane_f32(v18, *(float32x2_t *)v18.f32, 1), v18, 2).f32[0] <= 0.00001)
    return 3;
  v19 = 0;
  v20 = *(float *)a5;
  v21 = *(float *)(a5 + 4);
  a13.i32[0] = *(_DWORD *)(a5 + 16);
  a14.i32[0] = *(_DWORD *)(a5 + 20);
  v22 = *(float *)(a5 + 8);
  v23 = *(float *)(a5 + 24);
  v24 = (float32x4_t)vdupq_n_s32(0x7F800000u);
  v85 = 0uLL;
  v86 = 0uLL;
  v83 = 0uLL;
  v84 = 0uLL;
  v81 = 0uLL;
  v82 = 0uLL;
  v79 = 0uLL;
  v80 = 0uLL;
  v25 = *a6;
  v26 = a6[1];
  v27.i64[0] = 0x7F0000007FLL;
  v27.i32[2] = 127;
  v28 = a6[2];
  v29 = a6[3];
  do
  {
    if ((v19 & 1) != 0)
      v30 = *(float *)a13.i32;
    else
      v30 = v20;
    if ((v19 & 2) != 0)
      v31 = a14.f32[0];
    else
      v31 = v21;
    if ((v19 & 4) != 0)
      v32 = v23;
    else
      v32 = v22;
    v33 = vaddq_f32(v29, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v25, v30), v26, v31), v28, v32));
    v34 = vdivq_f32(v33, (float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 3));
    *(&v79 + v19) = (__int128)v34;
    v24.i32[3] = 0;
    v34.i32[3] = 0;
    v24 = vminnmq_f32(v24, v34);
    v27.i32[3] = 0;
    v27 = vmaxnmq_f32(v27, v34);
    ++v19;
  }
  while (v19 != 8);
  v35 = (uint32x4_t)vcgtq_f32(v16, vaddq_f32(v24, (float32x4_t)vdupq_n_s32(0x3C23D70Au)));
  v35.i32[3] = v35.i32[2];
  if ((vmaxvq_u32(v35) & 0x80000000) != 0
    || (v36 = (uint32x4_t)vcgtq_f32(vaddq_f32(v24, (float32x4_t)vdupq_n_s32(0xBC23D70A)), v15),
        v36.i32[3] = v36.i32[2],
        (vmaxvq_u32(v36) & 0x80000000) != 0)
    || (v37 = (uint32x4_t)vcgtq_f32(v16, vaddq_f32(v27, (float32x4_t)vdupq_n_s32(0x3C23D70Au))),
        v37.i32[3] = v37.i32[2],
        (vmaxvq_u32(v37) & 0x80000000) != 0)
    || (v38 = (uint32x4_t)vcgtq_f32(vaddq_f32(v27, (float32x4_t)vdupq_n_s32(0xBC23D70A)), v15),
        v38.i32[3] = v38.i32[2],
        (vmaxvq_u32(v38) & 0x80000000) != 0))
  {
    v77 = (uint32x4_t)vcgtq_f32(v16, v27);
    v77.i32[3] = v77.i32[2];
    if ((vmaxvq_u32(v77) & 0x80000000) == 0)
    {
      v78 = (uint32x4_t)vcgtq_f32(v24, v15);
      v78.i32[3] = v78.i32[2];
      if ((vmaxvq_u32(v78) & 0x80000000) == 0)
        return a3 == 0;
    }
    return 3;
  }
  v39 = *(_QWORD *)(a1 + 8);
  if (!v39)
    return 2;
  v40 = 0;
  v41 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v41 = a1 + 24;
  v43 = *a2;
  v42 = a2[1];
  v44 = vdupq_n_s32(0x7F800000u);
  v45 = (float32x4_t)vdupq_n_s32(0xBC23D70A);
  __asm { FMOV            V4.4S, #1.0 }
  v51.i64[0] = 0x3F0000003F000000;
  v51.i64[1] = 0x3F0000003F000000;
  while (1)
  {
    v52 = *(unsigned __int16 *)(v41 + 2 * v40);
    if (v42 <= v52)
      break;
    v53 = 0;
    v54 = v43 + (v52 << 6);
    a13.i64[0] = *(_QWORD *)v54;
    v55.i64[0] = 0;
    v55.i64[1] = *(unsigned int *)(v54 + 8);
    v14.i64[0] = *(_QWORD *)(v54 + 16);
    v56.i64[0] = 0;
    v56.i64[1] = *(unsigned int *)(v54 + 24);
    v26.i64[0] = *(_QWORD *)(v54 + 32);
    v57.i64[0] = 0;
    v57.i64[1] = *(unsigned int *)(v54 + 40);
    v63 = (float32x4_t)vzip1q_s32(a13, (int32x4_t)v26);
    v58 = vzip2q_s32(v55, v57);
    v59 = vzip1q_s32((int32x4_t)v14, (int32x4_t)0);
    v60 = vzip2q_s32(v56, (int32x4_t)xmmword_2260E5D70);
    v14 = (float32x4_t)vzip1q_s32((int32x4_t)v63, v59);
    v61 = (float32x4_t)vzip2q_s32((int32x4_t)v63, v59);
    v26 = (float32x4_t)vzip1q_s32(v58, v60);
    v62 = (float32x4_t)vzip2q_s32(v58, v60);
    v63.i64[0] = 0x7F0000007FLL;
    v63.i32[2] = 127;
    v64 = (float32x4_t)v44;
    do
    {
      a14.i32[2] = *(_DWORD *)(v54 + 44);
      a14.i32[1] = *(_DWORD *)(v54 + 28);
      a14.i32[0] = *(_DWORD *)(v54 + 12);
      v65 = vsubq_f32(*(float32x4_t *)((char *)&v79 + v53), a14);
      v66 = vaddq_f32(v62, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v65.f32[0]), v61, *(float32x2_t *)v65.f32, 1), v26, v65, 2));
      v67 = vdivq_f32(v66, (float32x4_t)vdupq_laneq_s32((int32x4_t)v66, 3));
      v64.i32[3] = 0;
      v67.i32[3] = 0;
      v64 = vminnmq_f32(v64, v67);
      v63.i32[3] = 0;
      v63 = vmaxnmq_f32(v63, v67);
      v53 += 16;
    }
    while (v53 != 128);
    v68 = (float16x4_t *)(v43 + (v52 << 6));
    v69.i64[0] = vcvtq_f32_f16(v68[6]).u64[0];
    _H17 = v68[6].i16[2];
    __asm { FCVT            S17, H17 }
    v72.i64[0] = vcvtq_f32_f16(v68[7]).u64[0];
    _H19 = v68[7].i16[2];
    __asm { FCVT            S19, H19 }
    v69.i64[1] = _S17;
    v72.i64[1] = _S19;
    a14 = vmulq_f32(vsubq_f32(_Q4, vaddq_f32(vmaxnmq_f32(v69, v72), v45)), v51);
    v75 = (uint32x4_t)vcgeq_f32(a14, vabsq_f32(v64));
    v75.i32[3] = v75.i32[2];
    if ((vminvq_u32(v75) & 0x80000000) == 0)
      return v40 >= a3;
    a13 = vcgeq_f32(a14, vabsq_f32(v63));
    a13.i32[3] = a13.i32[2];
    a13.i32[0] = vminvq_u32((uint32x4_t)a13);
    if ((a13.i32[0] & 0x80000000) == 0)
      return v40 >= a3;
    if (++v40 == v39)
      return 2;
  }
  re::internal::assertLog((re::internal *)6, (uint64_t)a2, 0.0, 0.0, *(double *)v44.i64, *(double *)v45.i64, *(double *)_Q4.i64, 0.0000305175853, *(double *)a13.i64, *(double *)a14.i64, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, *(unsigned __int16 *)(v41 + 2 * v40), v42, v79, v80, v81,
    v82,
    v83,
    v84,
    v85,
    v86);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::RenderFrame::RenderFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15;
  re *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  _anonymous_namespace_ *v20;
  uint64_t v21;
  re *v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  id v30;

  v15 = *(_QWORD *)(a2 + 104);
  if (v15)
    v15 = *(_QWORD *)(v15 + 296);
  *(_QWORD *)a1 = v15;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a3;
  re::RenderGraphDataStore::RenderGraphDataStore(a1 + 32, a5);
  re::RenderFrameData::RenderFrameData(a1 + 264, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 104) + 296) + 688), a6);
  *(_QWORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = &str_275;
  *(_QWORD *)(a1 + 352) = &str_275;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = a5;
  *(_QWORD *)(a1 + 376) = a6;
  *(_QWORD *)(a1 + 384) = a7;
  *(_QWORD *)(a1 + 392) = a8;
  *(_BYTE *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_WORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 460) = 0u;
  *(_QWORD *)(a1 + 476) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_DWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 524) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_DWORD *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 636) = 0u;
  *(_QWORD *)(a1 + 652) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_DWORD *)(a1 + 680) = 1;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 3048) = 0u;
  *(_DWORD *)(a1 + 3064) = 1;
  *(_OWORD *)(a1 + 3072) = 0u;
  *(_QWORD *)(a1 + 3128) = 0;
  *(_DWORD *)(a1 + 3136) = 0;
  *(_OWORD *)(a1 + 3112) = 0u;
  *(_DWORD *)(a1 + 3256) = 0;
  *(_OWORD *)(a1 + 3224) = 0u;
  *(_OWORD *)(a1 + 3240) = 0u;
  *(_DWORD *)(a1 + 3296) = 0;
  *(_OWORD *)(a1 + 3280) = 0u;
  *(_OWORD *)(a1 + 3264) = 0u;
  *(_DWORD *)(a1 + 3176) = 0;
  *(_OWORD *)(a1 + 3144) = 0u;
  *(_OWORD *)(a1 + 3160) = 0u;
  *(_DWORD *)(a1 + 3216) = 0;
  *(_OWORD *)(a1 + 3200) = 0u;
  *(_OWORD *)(a1 + 3184) = 0u;
  *(_OWORD *)(a1 + 3332) = 0u;
  *(_OWORD *)(a1 + 3304) = 0u;
  *(_OWORD *)(a1 + 3320) = 0u;
  *(_QWORD *)(a1 + 3348) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 3360) = 0u;
  *(_OWORD *)(a1 + 3376) = 0u;
  *(_DWORD *)(a1 + 3392) = 0;
  *(_QWORD *)(a1 + 3396) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 3440) = 0;
  *(_DWORD *)(a1 + 3432) = 0;
  *(_QWORD *)(a1 + 3424) = 0;
  *(_OWORD *)(a1 + 3408) = 0u;
  v16 = re::RenderGraphResourceDescriptions::RenderGraphResourceDescriptions((re::RenderGraphResourceDescriptions *)(a1 + 3448));
  *(_DWORD *)(a1 + 3768) = 0;
  *(_QWORD *)(a1 + 3760) = 0;
  *(_OWORD *)(a1 + 3744) = 0u;
  *(_OWORD *)(a1 + 3776) = 0u;
  *(_OWORD *)(a1 + 3792) = 0u;
  *(_DWORD *)(a1 + 3808) = 0;
  *(_OWORD *)(a1 + 3816) = 0u;
  *(_OWORD *)(a1 + 3832) = 0u;
  *(_OWORD *)(a1 + 3844) = 0u;
  *(_OWORD *)(a1 + 3864) = 0u;
  *(_OWORD *)(a1 + 3880) = 0u;
  *(_DWORD *)(a1 + 3896) = 0;
  *(_OWORD *)(a1 + 3904) = 0u;
  *(_OWORD *)(a1 + 3920) = 0u;
  *(_DWORD *)(a1 + 3936) = 0;
  *(_DWORD *)(a1 + 3976) = 0;
  *(_OWORD *)(a1 + 3944) = 0u;
  *(_OWORD *)(a1 + 3960) = 0u;
  *(_DWORD *)(a1 + 4016) = 0;
  *(_OWORD *)(a1 + 4000) = 0u;
  *(_OWORD *)(a1 + 3984) = 0u;
  *(_DWORD *)(a1 + 4056) = 0;
  *(_OWORD *)(a1 + 4024) = 0u;
  *(_OWORD *)(a1 + 4040) = 0u;
  *(_DWORD *)(a1 + 4096) = 0;
  *(_OWORD *)(a1 + 4080) = 0u;
  *(_OWORD *)(a1 + 4064) = 0u;
  *(_OWORD *)(a1 + 4104) = 0u;
  *(_OWORD *)(a1 + 4120) = 0u;
  *(_OWORD *)(a1 + 4136) = 0u;
  *(_OWORD *)(a1 + 4148) = 0u;
  *(_OWORD *)(a1 + 4168) = 0u;
  *(_OWORD *)(a1 + 4184) = 0u;
  *(_OWORD *)(a1 + 4196) = 0u;
  *(_QWORD *)(a1 + 4212) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 4224) = 850045863;
  *(_QWORD *)(a1 + 4280) = 0;
  *(_OWORD *)(a1 + 4264) = 0u;
  *(_OWORD *)(a1 + 4248) = 0u;
  *(_OWORD *)(a1 + 4232) = 0u;
  if (a4)
  {
    v18 = re::globalAllocators(v16);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18[2] + 32))(v18[2], 160, 8);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v19, 0);
    *(_QWORD *)v19 = &off_24ED755E0;
    v20 = re::Allocator::Allocator((re::Allocator *)(v19 + 24), "RenderGraphStringAllocator", 1);
    *(_QWORD *)(v19 + 24) = &off_24ED74EA0;
    *(_OWORD *)(v19 + 112) = 0u;
    *(_OWORD *)(v19 + 128) = 0u;
    *(_DWORD *)(v19 + 144) = 0;
    *(_OWORD *)(v19 + 48) = 0u;
    *(_OWORD *)(v19 + 64) = 0u;
    *(_OWORD *)(v19 + 80) = 0u;
    *(_OWORD *)(v19 + 92) = 0u;
    *(_QWORD *)(v19 + 148) = 0x7FFFFFFFLL;
    v21 = *(_QWORD *)(a1 + 3824);
    *(_QWORD *)(a1 + 3824) = v19;
    if (v21)
    {

      v19 = *(_QWORD *)(a1 + 3824);
    }
    *(_QWORD *)(v19 + 64) = 0;
    *(_QWORD *)(v19 + 72) = 1024;
    *(_QWORD *)(v19 + 48) = 0;
    *(_QWORD *)(v19 + 56) = 0;
    *(_QWORD *)(v19 + 88) = 0;
    *(_QWORD *)(v19 + 96) = 0;
    v29 = 0xEE74EC71D35974;
    v30 = 0;
    v28 = 0x6A3DF053A9B45F3DLL;
    re::RenderFrame::registerExternalTexture(a1, &v30, &v29, &v28, 0);
    *(_QWORD *)(a1 + 536) = *(_QWORD *)(a1 + 376);
    re::DynamicArray<re::RenderFrame::ProvideCall>::setCapacity((_QWORD *)(a1 + 536), 0);
    ++*(_DWORD *)(a1 + 560);
    *(_QWORD *)(a1 + 576) = *(_QWORD *)(a1 + 376);
    re::DynamicArray<re::RenderFrame::PickupAction>::setCapacity((_QWORD *)(a1 + 576), 0);
    ++*(_DWORD *)(a1 + 600);
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1 + 440, *(_QWORD *)(a1 + 376), 3);
    re::HashTable<unsigned long long,re::DynamicString,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init(a1 + 488, *(_QWORD *)(a1 + 376), 3);
    v23 = re::globalAllocators(v22);
    v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23[2] + 32))(v23[2], 160, 16);
    *(_OWORD *)v24 = 0u;
    *(_OWORD *)(v24 + 16) = 0u;
    *(_OWORD *)(v24 + 32) = 0u;
    *(_OWORD *)(v24 + 48) = 0u;
    *(_OWORD *)(v24 + 64) = 0u;
    *(_OWORD *)(v24 + 80) = 0u;
    *(_OWORD *)(v24 + 96) = 0u;
    *(_OWORD *)(v24 + 112) = 0u;
    *(_OWORD *)(v24 + 128) = 0u;
    *(_OWORD *)(v24 + 144) = 0u;
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v24, 0);
    *(_QWORD *)v24 = &off_24ED75628;
    *(_QWORD *)&v25 = 0x7F0000007FLL;
    *((_QWORD *)&v25 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)(v24 + 32) = vdupq_n_s32(0x7F800000u);
    *(_OWORD *)(v24 + 48) = v25;
    *(_OWORD *)(v24 + 64) = 0u;
    *(_OWORD *)(v24 + 80) = 0u;
    *(_DWORD *)(v24 + 96) = 0;
    *(_QWORD *)(v24 + 100) = 0x7FFFFFFFLL;
    *(_OWORD *)(v24 + 112) = 0u;
    *(_OWORD *)(v24 + 128) = 0u;
    *(_DWORD *)(v24 + 144) = 0;
    *(_QWORD *)(v24 + 148) = 0x7FFFFFFFLL;
    v26 = *(_QWORD *)(a1 + 432);
    *(_QWORD *)(a1 + 432) = v24;
    if (v26)

    return a1;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) RenderFrame requires a ColorManager", "colorManager", "RenderFrame", 150);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

void re::RenderFrame::registerExternalTexture(uint64_t a1, id *a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  __n128 v9;
  id v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  if (*(_BYTE *)(a1 + 336))
  {
    if (!*(_BYTE *)(a1 + 425))
    {
      re::DynamicString::format((re::DynamicString *)"External texture '%s' cannot be registered inside of a provide() callback. Type scope: '%s', Graph scope: '%s'", (re::DynamicString *)&v11, a5, *(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 352));
      v14.n128_u64[0] = 2002;
      v14.n128_u64[1] = (unint64_t)&re::RenderGraphCachingErrorCategory(void)::instance;
      v15 = v11;
      v17 = v13;
      v16 = v12;
      v9 = re::DynamicArray<re::DetailedError>::add((_anonymous_namespace_ *)(a1 + 3152), &v14);
      if (v15)
      {
        if ((v16 & 1) != 0)
          (*(void (**)(__n128))(*(_QWORD *)v15 + 40))(v9);
      }
    }
  }
  v10 = *a2;
  v14.n128_u64[0] = ((*a3 << 6) + (*a3 >> 2) + *a4 - 0x61C8864680B583E9) ^ *a3;
  re::HashTable<unsigned long long,NS::SharedPtr<MTL::Texture>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add<NS::SharedPtr<MTL::Texture>&>(a1 + 3312, v14.n128_u64, &v10);
  if (v10)

}

void re::RenderFrame::~RenderFrame(re::RenderFrame *this)
{
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  uint64_t v5;
  double v6;
  __n128 v7;
  uint64_t v8;
  id **v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;

  v2 = *((_QWORD *)this + 496);
  if (v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *((_QWORD *)this + 498);
      v5 = *(_QWORD *)(v4 + 8 * i);
      if (v5)
      {

        *(_QWORD *)(v4 + 8 * i) = 0;
        v2 = *((_QWORD *)this + 496);
      }
    }
  }
  re::DynamicArray<re::RenderFrame::ProvideCall>::deinit((uint64_t)this + 536);
  re::DynamicArray<re::RenderFrame::PickupAction>::deinit((uint64_t)this + 576);
  v6 = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 55);
  v7.n128_f64[0] = re::HashTable<unsigned long long,re::DynamicString,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)this + 61, v6);
  if (*((_QWORD *)this + 381))
  {
    v8 = *((_QWORD *)this + 382);
    if (v8)
    {
      if ((*((_BYTE *)this + 3064) & 1) != 0)
        v9 = (id **)((char *)this + 3072);
      else
        v9 = (id **)*((_QWORD *)this + 385);
      v10 = 8 * v8;
      do
      {
        v11 = *v9++;
        (*((void (**)(id *, __n128))*v11 + 2))(v11, v7);
        objc_destroyWeak(v11 + 1);
        v11[1] = 0;
        v10 -= 8;
      }
      while (v10);
    }
  }
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 3048);
  v12 = *((_QWORD *)this + 54);
  if (v12)
  {

    *((_QWORD *)this + 54) = 0;
  }
  v13 = *((_QWORD *)this + 478);
  if (v13)
  {

    *((_QWORD *)this + 478) = 0;
  }
  re::RenderFrame::onCommandBuffersComplete((std::mutex *)this);
  re::RenderFrame::onFrameComplete((uint64_t)this);
  std::mutex::~mutex((std::mutex *)this + 66);
  re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 522);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 4136);
  if (*((_QWORD *)this + 514))
  {
    v14 = *((_QWORD *)this + 515);
    if (v14)
    {
      v15 = (void **)*((_QWORD *)this + 516);
      v16 = 32 * v14;
      do
      {
        v17 = *v15;
        v15 += 4;

        v16 -= 32;
      }
      while (v16);
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 514) + 40))(*((_QWORD *)this + 514), *((_QWORD *)this + 516));
      *((_QWORD *)this + 515) = 0;
      *((_QWORD *)this + 516) = 0;
    }
    *((_QWORD *)this + 514) = 0;
  }
  v18 = *((_QWORD *)this + 509);
  if (v18)
  {
    v19 = *((_QWORD *)this + 513);
    if (v19)
    {
      v20 = *((_QWORD *)this + 511);
      if (v20)
      {
        v21 = v19 + 48 * v20;
        v22 = *((_QWORD *)this + 513);
        do
        {
          *(_QWORD *)v22 = 0;
          ++*(_DWORD *)(v22 + 8);
          v22 += 48;
        }
        while (v22 != v21);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
    }
    *((_QWORD *)this + 513) = 0;
    *((_QWORD *)this + 510) = 0;
    *((_QWORD *)this + 511) = 0;
    *((_QWORD *)this + 509) = 0;
    ++*((_DWORD *)this + 1024);
  }
  v23 = *((_QWORD *)this + 504);
  if (v23)
  {
    v24 = (id *)*((_QWORD *)this + 508);
    if (v24)
    {
      v25 = *((_QWORD *)this + 506);
      if (v25)
      {
        v26 = 8 * v25;
        do
        {
          if (*v24)
          {

            *v24 = 0;
          }
          ++v24;
          v26 -= 8;
        }
        while (v26);
        v23 = *((_QWORD *)this + 504);
        v24 = (id *)*((_QWORD *)this + 508);
      }
      (*(void (**)(uint64_t, id *))(*(_QWORD *)v23 + 40))(v23, v24);
    }
    *((_QWORD *)this + 508) = 0;
    *((_QWORD *)this + 505) = 0;
    *((_QWORD *)this + 506) = 0;
    *((_QWORD *)this + 504) = 0;
    ++*((_DWORD *)this + 1014);
  }
  v27 = (uint64_t *)((char *)this + 3952);
  v28 = *((_QWORD *)this + 499);
  if (v28)
  {
    v29 = *((_QWORD *)this + 503);
    if (v29)
    {
      v30 = *((_QWORD *)this + 501);
      if (v30)
      {
        v31 = 104 * v30;
        v32 = (_QWORD *)(v29 + 32);
        do
        {
          if (*v32)
          {
            if ((v32[1] & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v32 + 40))(*v32, v32[2]);
            *(_OWORD *)v32 = 0u;
            *((_OWORD *)v32 + 1) = 0u;
          }
          v33 = (void *)*(v32 - 2);
          if (v33)
          {

            *(v32 - 2) = 0;
          }
          v34 = (void *)*(v32 - 3);
          if (v34)
          {

            *(v32 - 3) = 0;
          }
          *(v32 - 4) = 0;
          v32 += 13;
          v31 -= 104;
        }
        while (v31);
        v28 = *((_QWORD *)this + 499);
        v29 = *((_QWORD *)this + 503);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 40))(v28, v29);
    }
    *((_QWORD *)this + 503) = 0;
    *((_QWORD *)this + 500) = 0;
    *((_QWORD *)this + 501) = 0;
    *((_QWORD *)this + 499) = 0;
    ++*((_DWORD *)this + 1004);
  }
  v35 = *v27;
  if (*v27)
  {
    v36 = *((_QWORD *)this + 498);
    if (v36)
    {
      v37 = *((_QWORD *)this + 496);
      if (v37)
      {
        v38 = 8 * v37;
        do
        {
          if (*(_QWORD *)v36)
          {

            *(_QWORD *)v36 = 0;
          }
          v36 += 8;
          v38 -= 8;
        }
        while (v38);
        v35 = *((_QWORD *)this + 494);
        v36 = *((_QWORD *)this + 498);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 40))(v35, v36);
    }
    *((_QWORD *)this + 498) = 0;
    *((_QWORD *)this + 495) = 0;
    *((_QWORD *)this + 496) = 0;
    *v27 = 0;
    ++*((_DWORD *)this + 994);
  }
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 3912);
  re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit((uint64_t)this + 3872);
  re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit((uint64_t)this + 3832);
  v39 = *((_QWORD *)this + 478);
  if (v39)
  {

    *((_QWORD *)this + 478) = 0;
  }
  re::DynamicArray<re::AutomaticSpecifyScopeParameters>::deinit((uint64_t)this + 3784);
  re::DynamicArray<re::RenderGraphScopeOutput>::deinit((uint64_t)this + 3744);
  re::RenderGraphResourceDescriptions::~RenderGraphResourceDescriptions((re::RenderFrame *)((char *)this + 3448));
  re::DynamicArray<re::RenderGraph>::deinit((uint64_t)this + 3408);
  re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)this + 420);
  re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)this + 414);
  re::RenderGraphProcessorContainer::~RenderGraphProcessorContainer((re::RenderFrame *)((char *)this + 3192));
  re::DynamicArray<re::DetailedError>::deinit((uint64_t)this + 3152);
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)this + 3112);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 3048);
  re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::deinit((uint64_t)this + 664);
  re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 77);
  re::DynamicArray<re::RenderFrame::PickupAction>::deinit((uint64_t)this + 576);
  re::DynamicArray<re::RenderFrame::ProvideCall>::deinit((uint64_t)this + 536);
  re::HashTable<unsigned long long,re::DynamicString,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)this + 61, v40);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 55);
  v41 = *((_QWORD *)this + 54);
  if (v41)
  {

    *((_QWORD *)this + 54) = 0;
  }
  re::RenderFrameData::~RenderFrameData((re::RenderFrame *)((char *)this + 264));
  re::RenderGraphDataStore::deinit((re::RenderFrame *)((char *)this + 32));
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 26);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)this + 144);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 12);
  re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)this + 6);
}

void re::RenderFrame::onCommandBuffersComplete(std::mutex *this)
{
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = this + 66;
  std::mutex::lock(this + 66);
  v3 = *(_QWORD *)&this[60].__m_.__opaque[40];
  if (v3)
  {
    v4 = 40 * v3;
    v5 = (uint64_t *)(this[61].__m_.__sig + 32);
    do
    {
      v7 = *(_QWORD *)&this[5].__m_.__opaque[40];
      v6 = *v5;
      v5 += 5;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 16))(v6, &v7);
      v4 -= 40;
    }
    while (v4);
  }
  re::DynamicArray<re::Function<void ()(re::PerfMTLCounterSamplerResult)>>::clear((uint64_t (***)(_QWORD))&this[60].__m_.__opaque[24]);
  std::mutex::unlock(v2);
}

uint64_t re::RenderFrame::onFrameComplete(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_BYTE *)(this + 400))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 3848);
    if (v2)
    {
      v3 = 40 * v2;
      v4 = (uint64_t *)(*(_QWORD *)(this + 3864) + 32);
      do
      {
        v6 = *(_QWORD *)(v1 + 368);
        v5 = *v4;
        v4 += 5;
        this = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 16))(v5, &v6);
        v3 -= 40;
      }
      while (v3);
    }
    *(_BYTE *)(v1 + 400) = 1;
  }
  return this;
}

void re::HashTable<unsigned long long,re::DynamicString,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 48 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::DynamicArray<re::RenderFrame::ProvideCall>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 40 * v4;
        v6 = (_QWORD *)(v3 + 16);
        do
        {
          if (*v6)
          {
            if (v6[1])
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v6 + 40))(*v6, v6[2]);
              v6[1] = 0;
              v6[2] = 0;
            }
            *v6 = 0;
          }
          v6 += 5;
          v5 -= 40;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderFrame::PickupAction>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  __n128 *v5;
  uint64_t v6;
  __n128 v7;
  unint64_t v8;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = (__n128 *)(v3 + 40);
        v6 = 80 * v4;
        v7 = 0uLL;
        do
        {
          v5[2].n128_u64[0] = 0;
          if (v5->n128_u64[0])
          {
            if ((v5->n128_u8[8] & 1) != 0)
            {
              (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v5->n128_u64[0] + 40))(v5->n128_u64[0], v5[1].n128_u64[0], v7);
              v7 = 0uLL;
            }
            *v5 = v7;
            v5[1] = v7;
          }
          v8 = v5[-2].n128_u64[0];
          if (v8)
          {
            if ((v5[-2].n128_u8[8] & 1) != 0)
            {
              (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v8 + 40))(v8, v5[-1].n128_u64[0], v7);
              v7 = 0uLL;
            }
            v5[-2] = v7;
            v5[-1] = v7;
          }
          v5 += 5;
          v6 -= 80;
        }
        while (v6);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::HashTable<unsigned long long,re::DynamicString,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(uint64_t *a1, double result)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  int v9;
  __n128 *v10;

  v3 = *a1;
  if (v3)
  {
    v4 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = 0;
      v7 = 0uLL;
      do
      {
        v8 = a1[2];
        v9 = *(_DWORD *)(v8 + v5);
        if (v9 < 0)
        {
          *(_DWORD *)(v8 + v5) = v9 & 0x7FFFFFFF;
          v10 = (__n128 *)(v8 + v5 + 16);
          if (v10->n128_u64[0])
          {
            if ((*(_BYTE *)(v8 + v5 + 24) & 1) != 0)
            {
              (*(void (**)(unint64_t, _QWORD, __n128))(*(_QWORD *)v10->n128_u64[0] + 40))(v10->n128_u64[0], *(_QWORD *)(v8 + v5 + 32), v7);
              v7 = 0uLL;
            }
            *v10 = v7;
            v10[1] = v7;
            v4 = *((unsigned int *)a1 + 8);
          }
        }
        ++v6;
        v5 += 48;
      }
      while (v6 < v4);
      v3 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::RenderFrame::setRenderGraphScopes(re::RenderFrame *this, const char *__s, const char *a3)
{
  unint64_t v6;
  size_t v7;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v6 = 0x9E3779B97F4A7C17;
  *((_QWORD *)this + 43) = __s;
  *((_QWORD *)this + 44) = a3;
  v7 = strlen(__s);
  if (v7)
  {
    MurmurHash3_x64_128((uint64_t)__s, v7, 0, &v10);
    v8 = (v11 - 0x61C8864680B583E9 + (v10 << 6) + (v10 >> 2)) ^ v10;
  }
  else
  {
    v8 = 0;
  }
  result = strlen(a3);
  if (result)
  {
    result = MurmurHash3_x64_128((uint64_t)a3, result, 0, &v10);
    v6 = ((v11 - 0x61C8864680B583E9 + (v10 << 6) + (v10 >> 2)) ^ v10) - 0x61C8864680B583E9;
  }
  *((_QWORD *)this + 45) = ((v8 >> 2) + (v8 << 6) + v6) ^ v8;
  return result;
}

void re::RenderFrame::emitGraph(re::RenderFrame *this, const char *__s, const char *a3)
{
  unint64_t v3;
  _QWORD *v4;
  uint8_t *v5;
  size_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  _BOOL8 v13;
  NSObject *v14;
  size_t v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36[2];
  int v37;
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  unint64_t v42;
  __int16 v43;
  _QWORD *v44;
  uint8_t buf[32];
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  if (!__s || !*__s)
  {
LABEL_54:
    re::internal::assertLog((re::internal *)4, (uint64_t)__s, a3, "assertion failure: '%s' (%s:line %i) ", "typeScope != nullptr && strlen(typeScope) > 0", "emitGraph", 226);
    _os_crash();
    __break(1u);
LABEL_55:
    re::internal::assertLog((re::internal *)4, (uint64_t)__s, "assertion failure: '%s' (%s:line %i) ", "graphScope != nullptr && strlen(graphScope) > 0", "emitGraph", 227);
    _os_crash();
    __break(1u);
LABEL_56:
    v36[1] = 0;
    *((_OWORD *)v5 + 3) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    v46 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v37 = 136315906;
    v38 = "operator[]";
    v39 = 1024;
    v40 = 468;
    v41 = 2048;
    v42 = v3;
    v43 = 2048;
    v44 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (!a3 || !*a3)
    goto LABEL_55;
  v9 = strlen(__s);
  if (v9)
  {
    MurmurHash3_x64_128((uint64_t)__s, v9, 0, (unint64_t *)buf);
    v10 = (*(_QWORD *)&buf[8] - 0x61C8864680B583E9 + (*(_QWORD *)buf << 6) + (*(_QWORD *)buf >> 2)) ^ *(_QWORD *)buf;
  }
  else
  {
    v10 = 0;
  }
  v11 = strlen(a3);
  if (v11)
  {
    MurmurHash3_x64_128((uint64_t)a3, v11, 0, (unint64_t *)buf);
    v12 = (*(_QWORD *)&buf[8] - 0x61C8864680B583E9 + (*(_QWORD *)buf << 6) + (*(_QWORD *)buf >> 2)) ^ *(_QWORD *)buf;
  }
  else
  {
    v12 = 0;
  }
  v36[0] = ((v10 << 6) - 0x61C8864680B583E9 + (v10 >> 2) + v12) ^ v10;
  v13 = re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)this + 440, v36);
  if (v13)
  {
    v14 = *re::graphicsLogObjects((re *)v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = __s;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = a3;
      _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEFAULT, "Duplicate graph was emitted and skipped: %s::%s", buf, 0x16u);
    }
    return;
  }
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)this + 440, v36);
  v15 = strlen(__s);
  v4 = (_QWORD *)re::GrowableLinearAllocator::alloc((re::GrowableLinearAllocator *)(*((_QWORD *)this + 478) + 24), v15 + 1, 0);
  memcpy(v4, __s, v15);
  *((_BYTE *)v4 + v15) = 0;
  v16 = strlen(a3);
  v17 = (void *)re::GrowableLinearAllocator::alloc((re::GrowableLinearAllocator *)(*((_QWORD *)this + 478) + 24), v16 + 1, 0);
  memcpy(v17, a3, v16);
  *((_BYTE *)v17 + v16) = 0;
  re::RenderFrame::setRenderGraphScopes(this, (const char *)v4, (const char *)v17);
  if (*((_BYTE *)this + 425))
  {
    re::RenderGraphManager::getProviderPointers(*(re::RenderGraphManager **)this, __s, *((re::Allocator **)this + 47), (uint64_t)buf);
    if (!*(_QWORD *)&buf[8])
      goto LABEL_50;
    v4 = *(_QWORD **)&buf[16];
    v5 = (uint8_t *)(8 * *(_QWORD *)&buf[8]);
    while (1)
    {
      v3 = *v4;
      if (!*v4)
        break;
      if ((*(uint64_t (**)(_QWORD, const char *, const char *, re::RenderFrame *))(*(_QWORD *)v3 + 16))(*v4, __s, a3, this))
      {
        *((_BYTE *)this + 336) = 1;
        (*(void (**)(unint64_t, const char *, const char *, re::RenderFrame *))(*(_QWORD *)v3 + 24))(v3, __s, a3, this);
        *((_BYTE *)this + 336) = 0;
      }
      ++v4;
      v5 -= 8;
      if (!v5)
      {
        v19 = *(_QWORD *)buf;
        if (*(_QWORD *)buf && *(_QWORD *)&buf[8])
        {
          v20 = *(_QWORD *)&buf[16];
          goto LABEL_49;
        }
        goto LABEL_50;
      }
    }
    re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) ", "provider", "emitGraph", 242);
    _os_crash();
    __break(1u);
LABEL_53:
    re::internal::assertLog((re::internal *)4, v21, "assertion failure: '%s' (%s:line %i) ", "providerList[index]", "emitGraph", 257);
    _os_crash();
    __break(1u);
    goto LABEL_54;
  }
  re::RenderGraphManager::getProviderPointers(*(re::RenderGraphManager **)this, __s, *((re::Allocator **)this + 47), (uint64_t)&v33);
  if (v34)
  {
    v3 = 0;
    v5 = buf;
    do
    {
      v22 = *(_QWORD *)(v35 + 8 * v3);
      if (!v22)
        goto LABEL_53;
      v23 = (*(uint64_t (**)(uint64_t, const char *, const char *, re::RenderFrame *))(*(_QWORD *)v22 + 16))(v22, __s, a3, this);
      v4 = v34;
      if (!v23)
      {
        if ((unint64_t)v34 <= v3)
          goto LABEL_56;
        *(_QWORD *)(v35 + 8 * v3) = 0;
      }
      *((_QWORD *)this + 41) ^= v23
                              - 0x61C8864680B583E9
                              + (*((_QWORD *)this + 41) << 6)
                              + (*((_QWORD *)this + 41) >> 2);
      ++v3;
    }
    while (v3 < (unint64_t)v4);
    if (v4)
    {
      *(_OWORD *)buf = *(_OWORD *)((char *)this + 344);
      v24 = re::FixedArray<re::RenderGraphProviderBase const*>::FixedArray((uint64_t *)&buf[16], (uint64_t)&v33);
      v25 = *((_QWORD *)this + 69);
      v26 = *((_QWORD *)this + 68);
      if (v25 >= v26)
      {
        v27 = v25 + 1;
        if (v26 < v25 + 1)
        {
          if (*((_QWORD *)this + 67))
          {
            v28 = 2 * v26;
            v29 = v26 == 0;
            v30 = 8;
            if (!v29)
              v30 = v28;
            if (v30 <= v27)
              v31 = v27;
            else
              v31 = v30;
            re::DynamicArray<re::RenderFrame::ProvideCall>::setCapacity((_QWORD *)this + 67, v31);
          }
          else
          {
            re::DynamicArray<re::RenderFrame::ProvideCall>::setCapacity((_QWORD *)this + 67, v27);
            ++*((_DWORD *)this + 140);
          }
        }
        v25 = *((_QWORD *)this + 69);
      }
      v32 = *((_QWORD *)this + 71) + 40 * v25;
      *(_OWORD *)v32 = *(_OWORD *)buf;
      re::FixedArray<re::RenderGraphProviderBase const*>::FixedArray((uint64_t *)(v32 + 16), (uint64_t)&buf[16]);
      ++*((_QWORD *)this + 69);
      ++*((_DWORD *)this + 140);
      if (*(_QWORD *)&buf[16] && *(_QWORD *)&buf[24])
        (*(void (**)(void))(**(_QWORD **)&buf[16] + 40))();
    }
  }
  v19 = v33;
  if (v33 && v34)
  {
    v20 = v35;
LABEL_49:
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 40))(v19, v20);
  }
LABEL_50:
  *((_QWORD *)this + 43) = &str_275;
  *((_QWORD *)this + 44) = &str_275;
  *((_QWORD *)this + 45) = 0;
}

void re::RenderFrame::addTargetOutput(re::RenderFrame *this, uint64_t *a2, double *a3, char *__s)
{
  const char *v4;
  unsigned int ScopeOutputIndex;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  double v14[2];
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[2];
  int v18;
  _OWORD v19[2];
  __int128 v20;
  uint64_t v21[4];
  __int128 v22;

  v4 = __s;
  if (!__s)
    v4 = (const char *)*((_QWORD *)this + 44);
  ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex(this, v4);
  if (ScopeOutputIndex == -1)
  {
    if (v4 != *((const char **)this + 44))
    {
      v11 = strlen(v4);
      v12 = (void *)re::GrowableLinearAllocator::alloc((re::GrowableLinearAllocator *)(*((_QWORD *)this + 478) + 24), v11 + 1, 0);
      memcpy(v12, v4, v11);
      *((_BYTE *)v12 + v11) = 0;
      v4 = (const char *)v12;
    }
    v16[0] = v4;
    v16[1] = strlen(v4);
    v17[0] = 0;
    v17[1] = &str_110;
    v18 = 0;
    v20 = 0u;
    memset(v19, 0, sizeof(v19));
    DWORD1(v20) = 0x7FFFFFFF;
    v22 = 0u;
    memset(v21, 0, sizeof(v21));
    DWORD1(v22) = 0x7FFFFFFF;
    re::DynamicArray<re::RenderGraphScopeOutput>::add((re::RenderFrame *)((char *)this + 3744), (uint64_t)v16);
    re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(v21);
    re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v19);
    re::StringID::destroyString((re::StringID *)v17);
    v10 = *((_QWORD *)this + 470);
    ScopeOutputIndex = v10 - 1;
  }
  else
  {
    v10 = *((_QWORD *)this + 470);
  }
  if (v10 <= ScopeOutputIndex)
  {
    re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) ", "index < m_scopeOutputs.size()", "addTargetOutput", 310);
    _os_crash();
    __break(1u);
  }
  else
  {
    v13 = *((_QWORD *)this + 472) + 136 * ScopeOutputIndex;
    v15 = *a2;
    v14[0] = *a3;
    v14[1] = a3[1];
    re::RenderGraphScopeOutput::addTargetToLane(v13, &v15, v14, 1);
  }
}

unint64_t re::RenderFrame::getScopeOutputIndex(re::RenderFrame *this, const char *__s)
{
  unint64_t v2;
  uint64_t v4;
  size_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 470);
  if (!v2)
    return 0xFFFFFFFFLL;
  v4 = *((_QWORD *)this + 472);
  v5 = strlen(__s);
  v6 = 0;
  v7 = 0;
  while (1)
  {
    v8 = v4 + 136 * v6;
    if (*(_QWORD *)(v8 + 8) == v5 && !memcmp(*(const void **)v8, __s, v5))
      break;
    v6 = (v7 + 1);
    v7 = v6;
    if (v2 <= v6)
      return 0xFFFFFFFFLL;
  }
  return v7;
}

uint64_t *re::DynamicArray<re::RenderGraphScopeOutput>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::RenderGraphScopeOutput>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 136 * v4;
  *(_OWORD *)v5 = *(_OWORD *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v5 + 16) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = &str_110;
  *(_DWORD *)(v5 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(v5 + 56) = 0u;
  *(_DWORD *)(v5 + 72) = 0;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_QWORD *)(v5 + 76) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v5 + 40), (uint64_t *)(a2 + 40));
  *(_OWORD *)(v5 + 88) = 0u;
  v5 += 88;
  *(_DWORD *)(v5 + 32) = 0;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_QWORD *)(v5 + 36) = 0x7FFFFFFFLL;
  result = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v5, (uint64_t *)(a2 + 88));
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::RenderFrame::inheritLaneProperties(re::RenderFrame *this, uint64_t *a2, double *a3, char *__s)
{
  const char *v4;
  unsigned int ScopeOutputIndex;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  double v14[2];
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[2];
  int v18;
  _OWORD v19[2];
  __int128 v20;
  uint64_t v21[4];
  __int128 v22;

  v4 = __s;
  if (!__s)
    v4 = (const char *)*((_QWORD *)this + 44);
  ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex(this, v4);
  if (ScopeOutputIndex == -1)
  {
    if (v4 != *((const char **)this + 44))
    {
      v11 = strlen(v4);
      v12 = (void *)re::GrowableLinearAllocator::alloc((re::GrowableLinearAllocator *)(*((_QWORD *)this + 478) + 24), v11 + 1, 0);
      memcpy(v12, v4, v11);
      *((_BYTE *)v12 + v11) = 0;
      v4 = (const char *)v12;
    }
    v16[0] = v4;
    v16[1] = strlen(v4);
    v17[0] = 0;
    v17[1] = &str_110;
    v18 = 0;
    v20 = 0u;
    memset(v19, 0, sizeof(v19));
    DWORD1(v20) = 0x7FFFFFFF;
    v22 = 0u;
    memset(v21, 0, sizeof(v21));
    DWORD1(v22) = 0x7FFFFFFF;
    re::DynamicArray<re::RenderGraphScopeOutput>::add((re::RenderFrame *)((char *)this + 3744), (uint64_t)v16);
    re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(v21);
    re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v19);
    re::StringID::destroyString((re::StringID *)v17);
    v10 = *((_QWORD *)this + 470);
    ScopeOutputIndex = v10 - 1;
  }
  else
  {
    v10 = *((_QWORD *)this + 470);
  }
  if (v10 <= ScopeOutputIndex)
  {
    re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) ", "index < m_scopeOutputs.size()", "inheritLaneProperties", 339);
    _os_crash();
    __break(1u);
  }
  else
  {
    v13 = *((_QWORD *)this + 472) + 136 * ScopeOutputIndex;
    v15 = *a2;
    v14[0] = *a3;
    v14[1] = a3[1];
    re::RenderGraphScopeOutput::inheritPropertiesFromLane(v13, &v15, v14);
  }
}

{
  const char *v4;
  unsigned int ScopeOutputIndex;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  double v14[2];
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[2];
  int v18;
  _OWORD v19[2];
  __int128 v20;
  uint64_t v21[4];
  __int128 v22;

  v4 = __s;
  if (!__s)
    v4 = (const char *)*((_QWORD *)this + 44);
  ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex(this, v4);
  if (ScopeOutputIndex == -1)
  {
    if (v4 != *((const char **)this + 44))
    {
      v11 = strlen(v4);
      v12 = (void *)re::GrowableLinearAllocator::alloc((re::GrowableLinearAllocator *)(*((_QWORD *)this + 478) + 24), v11 + 1, 0);
      memcpy(v12, v4, v11);
      *((_BYTE *)v12 + v11) = 0;
      v4 = (const char *)v12;
    }
    v16[0] = v4;
    v16[1] = strlen(v4);
    v17[0] = 0;
    v17[1] = &str_110;
    v18 = 0;
    v20 = 0u;
    memset(v19, 0, sizeof(v19));
    DWORD1(v20) = 0x7FFFFFFF;
    v22 = 0u;
    memset(v21, 0, sizeof(v21));
    DWORD1(v22) = 0x7FFFFFFF;
    re::DynamicArray<re::RenderGraphScopeOutput>::add((re::RenderFrame *)((char *)this + 3744), (uint64_t)v16);
    re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(v21);
    re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v19);
    re::StringID::destroyString((re::StringID *)v17);
    v10 = *((_QWORD *)this + 470);
    ScopeOutputIndex = v10 - 1;
  }
  else
  {
    v10 = *((_QWORD *)this + 470);
  }
  if (v10 <= ScopeOutputIndex)
  {
    re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) ", "index < m_scopeOutputs.size()", "inheritLaneProperties", 397);
    _os_crash();
    __break(1u);
  }
  else
  {
    v13 = *((_QWORD *)this + 472) + 136 * ScopeOutputIndex;
    v15 = *a2;
    v14[0] = *a3;
    v14[1] = a3[1];
    re::RenderGraphScopeOutput::inheritPropertiesFromLane(v13, &v15, v14);
  }
}

void re::RenderFrame::addBufferOutput(re::RenderFrame *this, uint64_t *a2, double *a3, char *__s)
{
  const char *v4;
  unsigned int ScopeOutputIndex;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  double v14[2];
  uint64_t v15;
  _QWORD v16[2];
  _QWORD v17[2];
  int v18;
  _OWORD v19[2];
  __int128 v20;
  uint64_t v21[4];
  __int128 v22;

  v4 = __s;
  if (!__s)
    v4 = (const char *)*((_QWORD *)this + 44);
  ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex(this, v4);
  if (ScopeOutputIndex == -1)
  {
    if (v4 != *((const char **)this + 44))
    {
      v11 = strlen(v4);
      v12 = (void *)re::GrowableLinearAllocator::alloc((re::GrowableLinearAllocator *)(*((_QWORD *)this + 478) + 24), v11 + 1, 0);
      memcpy(v12, v4, v11);
      *((_BYTE *)v12 + v11) = 0;
      v4 = (const char *)v12;
    }
    v16[0] = v4;
    v16[1] = strlen(v4);
    v17[0] = 0;
    v17[1] = &str_110;
    v18 = 0;
    v20 = 0u;
    memset(v19, 0, sizeof(v19));
    DWORD1(v20) = 0x7FFFFFFF;
    v22 = 0u;
    memset(v21, 0, sizeof(v21));
    DWORD1(v22) = 0x7FFFFFFF;
    re::DynamicArray<re::RenderGraphScopeOutput>::add((re::RenderFrame *)((char *)this + 3744), (uint64_t)v16);
    re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(v21);
    re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v19);
    re::StringID::destroyString((re::StringID *)v17);
    v10 = *((_QWORD *)this + 470);
    ScopeOutputIndex = v10 - 1;
  }
  else
  {
    v10 = *((_QWORD *)this + 470);
  }
  if (v10 <= ScopeOutputIndex)
  {
    re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) ", "index < m_scopeOutputs.size()", "addBufferOutput", 368);
    _os_crash();
    __break(1u);
  }
  else
  {
    v13 = *((_QWORD *)this + 472) + 136 * ScopeOutputIndex;
    v15 = *a2;
    v14[0] = *a3;
    v14[1] = a3[1];
    re::RenderGraphScopeOutput::addBufferToLane(v13, &v15, v14, 1);
  }
}

void re::RenderFrame::createTarget(re::RenderFrame *this@<X0>, const re::RenderGraphTargetDescription *a2@<X1>, const char *__s@<X2>, _QWORD *a4@<X8>)
{
  __n128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if (!*((_BYTE *)this + 336) && !*((_BYTE *)this + 425))
  {
    re::DynamicString::format((re::DynamicString *)"Target '%s' cannot be created outside of a provide() callback. Type scope: '%s', Graph scope: '%s'", (re::DynamicString *)&v9, __s, *((_QWORD *)this + 43), *((_QWORD *)this + 44));
    v12.n128_u64[0] = 2001;
    v12.n128_u64[1] = (unint64_t)&re::RenderGraphCachingErrorCategory(void)::instance;
    v13 = v9;
    v15 = v11;
    v14 = v10;
    v8 = re::DynamicArray<re::DetailedError>::add((re::RenderFrame *)((char *)this + 3152), &v12);
    if (v13)
    {
      if ((v14 & 1) != 0)
        (*(void (**)(__n128))(*(_QWORD *)v13 + 40))(v8);
    }
  }
  re::RenderGraphResourceDescriptions::addTarget((re::GrowableLinearAllocator **)this + 431, a2, __s, a4);
}

void re::RenderFrame::createBuffer(re::RenderFrame *this@<X0>, const re::RenderGraphBufferDescription *a2@<X1>, const char *__s@<X2>, _QWORD *a4@<X8>)
{
  __n128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;

  if (!*((_BYTE *)this + 336) && !*((_BYTE *)this + 425))
  {
    re::DynamicString::format((re::DynamicString *)"Buffer '%s' cannot be created outside of a provide() callback. Type scope: '%s', Graph scope: '%s'", (re::DynamicString *)&v9, __s, *((_QWORD *)this + 43), *((_QWORD *)this + 44));
    v12.n128_u64[0] = 3001;
    v12.n128_u64[1] = (unint64_t)&re::RenderGraphCachingErrorCategory(void)::instance;
    v13 = v9;
    v15 = v11;
    v14 = v10;
    v8 = re::DynamicArray<re::DetailedError>::add((re::RenderFrame *)((char *)this + 3152), &v12);
    if (v13)
    {
      if ((v14 & 1) != 0)
        (*(void (**)(__n128))(*(_QWORD *)v13 + 40))(v8);
    }
  }
  re::RenderGraphResourceDescriptions::addBuffer((re::GrowableLinearAllocator **)this + 431, a2, __s, a4);
}

uint64_t re::HashTable<unsigned long long,NS::SharedPtr<MTL::Texture>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add<NS::SharedPtr<MTL::Texture>&>(uint64_t a1, unint64_t *a2, id *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  v6 = *a2;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  v7 = v6 % *(unsigned int *)(a1 + 24);
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v7);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<unsigned long long,NS::SharedPtr<MTL::Texture>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addEmplace<NS::SharedPtr<MTL::Texture>&>(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 16) + 24 * v11;
    return v10 + 16;
  }
  v9 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v9 + 24 * v8 + 8) != v6)
  {
    LODWORD(v8) = *(_DWORD *)(v9 + 24 * v8) & 0x7FFFFFFF;
    if ((_DWORD)v8 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v10 = v9 + 24 * v8;
  return v10 + 16;
}

uint64_t re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add<re::BufferSlice&>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  v6 = *a2;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  v7 = v6 % *(unsigned int *)(a1 + 24);
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v7);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addEmplace<re::BufferSlice&>(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 16) + 32 * v11;
    return v10 + 16;
  }
  v9 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v9 + 32 * v8 + 8) != v6)
  {
    v8 = *(_DWORD *)(v9 + 32 * v8) & 0x7FFFFFFF;
    if ((_DWORD)v8 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v10 = v9 + 32 * v8;
  return v10 + 16;
}

void re::RenderFrame::registerExternalBuffer(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  id v9;
  void *v10;
  __n128 v11;
  id v12[2];
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  if (*(_BYTE *)(a1 + 336))
  {
    if (!*(_BYTE *)(a1 + 425))
    {
      re::DynamicString::format((re::DynamicString *)"External buffer '%s' cannot be registered inside of a provide() callback. Type scope: '%s', Graph scope: '%s'", (re::DynamicString *)&v13, a5, *(_QWORD *)(a1 + 344), *(_QWORD *)(a1 + 352));
      v16.n128_u64[0] = 3002;
      v16.n128_u64[1] = (unint64_t)&re::RenderGraphCachingErrorCategory(void)::instance;
      v17 = v13;
      v19 = v15;
      v18 = v14;
      v11 = re::DynamicArray<re::DetailedError>::add((_anonymous_namespace_ *)(a1 + 3152), &v16);
      if (v17)
      {
        if ((v18 & 1) != 0)
          (*(void (**)(__n128))(*(_QWORD *)v17 + 40))(v11);
      }
    }
  }
  v9 = *(id *)a2;
  v10 = *(void **)(a2 + 8);
  v12[0] = v9;
  v12[1] = v10;
  v16.n128_u64[0] = ((*a3 << 6) + (*a3 >> 2) + *a4 - 0x61C8864680B583E9) ^ *a3;
  re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add<re::BufferSlice&>(a1 + 3360, v16.n128_u64, (uint64_t)v12);
  if (v12[0])

}

id *re::RenderFrame::getExternalBuffer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, id **a3@<X8>)
{
  id *result;
  id *v5;
  id *v6;

  result = (id *)re::HashTable<unsigned long,re::Optional<unsigned long>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 3360, (uint64_t *)(a2 + 40));
  if (result)
  {
    v5 = result;
    result = (id *)*result;
    v6 = (id *)v5[1];
    *a3 = result;
    a3[1] = v6;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

double re::RenderFrame::tryGetInputTarget@<D0>(re::RenderFrame *this@<X0>, const char *a2@<X1>, const char *__s@<X2>, double *a4@<X8>)
{
  const char *v4;
  unsigned int ScopeOutputIndex;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  const char *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  double result;
  __n128 v18;
  _BYTE v19[38];
  __n128 v20[5];
  uint64_t v21;

  v4 = __s;
  v21 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 336) && !*((_BYTE *)this + 425))
  {
    re::DynamicString::format((re::DynamicString *)"Input target (lane '%s', override scope '%s') cannot be retrieved outside of a provide() callback. Type scope: '%s', Graph scope: '%s'", (re::DynamicString *)v19, a2, __s, *((_QWORD *)this + 43), *((_QWORD *)this + 44));
    v20[0].n128_u64[0] = 2003;
    v20[0].n128_u64[1] = (unint64_t)&re::RenderGraphCachingErrorCategory(void)::instance;
    v20[1].n128_u64[0] = *(_QWORD *)v19;
    v20[2].n128_u64[1] = *(_QWORD *)&v19[24];
    *(__n128 *)((char *)&v20[1] + 8) = *(__n128 *)&v19[8];
    v18 = re::DynamicArray<re::DetailedError>::add((re::RenderFrame *)((char *)this + 3152), v20);
    if (v20[1].n128_u64[0])
    {
      if ((v20[1].n128_u8[8] & 1) != 0)
        (*(void (**)(__n128))(*(_QWORD *)v20[1].n128_u64[0] + 40))(v18);
    }
  }
  if (!v4)
    v4 = (const char *)*((_QWORD *)this + 44);
  ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex(this, v4);
  if (ScopeOutputIndex == -1)
    goto LABEL_17;
  v9 = ScopeOutputIndex;
  v10 = *((_QWORD *)this + 470);
  if (v10 <= ScopeOutputIndex)
  {
    memset(v20, 0, sizeof(v20));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v19 = 136315906;
    *(_QWORD *)&v19[4] = "operator[]";
    *(_WORD *)&v19[12] = 1024;
    *(_DWORD *)&v19[14] = 797;
    *(_WORD *)&v19[18] = 2048;
    *(_QWORD *)&v19[20] = v9;
    *(_WORD *)&v19[28] = 2048;
    *(_QWORD *)&v19[30] = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (a2)
  {
    v11 = *a2;
    if (*a2)
    {
      v12 = a2[1];
      if (v12)
      {
        v13 = a2 + 2;
        do
        {
          v11 = 31 * v11 + v12;
          v14 = *(unsigned __int8 *)v13++;
          v12 = v14;
        }
        while (v14);
      }
      v15 = v11 & 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v15 = 0;
    }
  }
  else
  {
    v15 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v16 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(*((_QWORD *)this + 472) + 136 * ScopeOutputIndex + 40, v15);
  if (!v16)
  {
LABEL_17:
    *a4 = 0.0;
    result = NAN;
    a4[1] = NAN;
  }
  else
  {
    *a4 = *(double *)(v16 + 80);
    result = *(double *)(v16 + 88);
    a4[1] = result;
  }
  return result;
}

uint64_t re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 144 * v3 + 8) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 144 * v3) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v5 + 144 * v3 + 8) == a2)
        return v5 + 144 * v3 + 16;
    }
    return 0;
  }
  return v5 + 144 * v3 + 16;
}

double re::RenderFrame::tryGetInputBuffer@<D0>(re::RenderFrame *this@<X0>, const char *a2@<X1>, const char *__s@<X2>, double *a4@<X8>)
{
  const char *v4;
  unsigned int ScopeOutputIndex;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  const char *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  double result;
  __n128 v18;
  _BYTE v19[38];
  __n128 v20[5];
  uint64_t v21;

  v4 = __s;
  v21 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 336) && !*((_BYTE *)this + 425))
  {
    re::DynamicString::format((re::DynamicString *)"Input buffer (lane '%s', override scope '%s') cannot be retrieved outside of a provide() callback. Type scope: '%s', Graph scope: '%s'", (re::DynamicString *)v19, a2, __s, *((_QWORD *)this + 43), *((_QWORD *)this + 44));
    v20[0].n128_u64[0] = 3003;
    v20[0].n128_u64[1] = (unint64_t)&re::RenderGraphCachingErrorCategory(void)::instance;
    v20[1].n128_u64[0] = *(_QWORD *)v19;
    v20[2].n128_u64[1] = *(_QWORD *)&v19[24];
    *(__n128 *)((char *)&v20[1] + 8) = *(__n128 *)&v19[8];
    v18 = re::DynamicArray<re::DetailedError>::add((re::RenderFrame *)((char *)this + 3152), v20);
    if (v20[1].n128_u64[0])
    {
      if ((v20[1].n128_u8[8] & 1) != 0)
        (*(void (**)(__n128))(*(_QWORD *)v20[1].n128_u64[0] + 40))(v18);
    }
  }
  if (!v4)
    v4 = (const char *)*((_QWORD *)this + 44);
  ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex(this, v4);
  if (ScopeOutputIndex == -1)
    goto LABEL_17;
  v9 = ScopeOutputIndex;
  v10 = *((_QWORD *)this + 470);
  if (v10 <= ScopeOutputIndex)
  {
    memset(v20, 0, sizeof(v20));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v19 = 136315906;
    *(_QWORD *)&v19[4] = "operator[]";
    *(_WORD *)&v19[12] = 1024;
    *(_DWORD *)&v19[14] = 797;
    *(_WORD *)&v19[18] = 2048;
    *(_QWORD *)&v19[20] = v9;
    *(_WORD *)&v19[28] = 2048;
    *(_QWORD *)&v19[30] = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (a2)
  {
    v11 = *a2;
    if (*a2)
    {
      v12 = a2[1];
      if (v12)
      {
        v13 = a2 + 2;
        do
        {
          v11 = 31 * v11 + v12;
          v14 = *(unsigned __int8 *)v13++;
          v12 = v14;
        }
        while (v14);
      }
      v15 = v11 & 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v15 = 0;
    }
  }
  else
  {
    v15 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v16 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(*((_QWORD *)this + 472) + 136 * ScopeOutputIndex + 88, v15);
  if (!v16)
  {
LABEL_17:
    *a4 = 0.0;
    result = NAN;
    a4[1] = NAN;
  }
  else
  {
    *a4 = *(double *)(v16 + 96);
    result = *(double *)(v16 + 104);
    a4[1] = result;
  }
  return result;
}

uint64_t re::RenderFrame::specifyScopeLane(_QWORD *a1, uint64_t *a2, void **a3, const char *a4)
{
  size_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v12;
  id v13;
  id v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD v23[2];

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = -1;
  v17 = 0uLL;
  *((_QWORD *)&v16 + 1) = 0;
  re::DynamicString::setCapacity(&v16, 0);
  HIBYTE(v18) = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0xFFFFFFFFLL;
  v22 = 0;
  v12 = *a2;
  NS::SharedPtr<MTL::Texture>::operator=(&v13, a3);
  v8 = strlen(a4);
  v23[0] = a4;
  v23[1] = v8;
  re::DynamicString::operator=((re::DynamicString *)&v16, (uint64_t)v23);
  v18 = 257;
  v9 = re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::add((_anonymous_namespace_ *)(a1 + 499), (uint64_t)&v12);
  v10 = a1[501];
  if ((_QWORD)v16)
  {
    if ((BYTE8(v16) & 1) != 0)
      (*(void (**)(__n128))(*(_QWORD *)v16 + 40))(v9);
    v16 = 0u;
    v17 = 0u;
  }
  if (v14)
  {

    v14 = 0;
  }
  if (v13)

  return (v10 - 1);
}

__n128 re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  void *v6;
  __n128 result;
  __int128 v8;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 104 * v4;
  v6 = *(void **)(a2 + 8);
  *(_QWORD *)v5 = *(_QWORD *)a2;
  *(_QWORD *)(v5 + 8) = v6;
  *(_QWORD *)(v5 + 16) = *(id *)(a2 + 16);
  *(_DWORD *)(v5 + 24) = *(_DWORD *)(a2 + 24);
  re::DynamicString::DynamicString((re::DynamicString *)(v5 + 32), (const re::DynamicString *)(a2 + 32));
  result = *(__n128 *)(a2 + 64);
  v8 = *(_OWORD *)(a2 + 80);
  *(_BYTE *)(v5 + 96) = *(_BYTE *)(a2 + 96);
  *(__n128 *)(v5 + 64) = result;
  *(_OWORD *)(v5 + 80) = v8;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::RenderFrame::specifyScopeLane(re::RenderFrame *this, const re::WeakStringID *a2, const unsigned int *a3, const char *a4)
{
  size_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v12;
  id v13;
  id v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD v23[2];

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = -1;
  v17 = 0uLL;
  *((_QWORD *)&v16 + 1) = 0;
  re::DynamicString::setCapacity(&v16, 0);
  HIBYTE(v18) = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0xFFFFFFFFLL;
  v22 = 0;
  v12 = *(_QWORD *)a2;
  v15 = *a3;
  v8 = strlen(a4);
  v23[0] = a4;
  v23[1] = v8;
  re::DynamicString::operator=((re::DynamicString *)&v16, (uint64_t)v23);
  v18 = 257;
  v9 = re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::add((re::RenderFrame *)((char *)this + 3992), (uint64_t)&v12);
  v10 = *((_QWORD *)this + 501);
  if ((_QWORD)v16)
  {
    if ((BYTE8(v16) & 1) != 0)
      (*(void (**)(__n128))(*(_QWORD *)v16 + 40))(v9);
    v16 = 0u;
    v17 = 0u;
  }
  if (v14)
  {

    v14 = 0;
  }
  if (v13)

  return (v10 - 1);
}

uint64_t re::RenderFrame::specifyScopeLane(_QWORD *a1, char *a2, void **a3, const char *a4, int a5)
{
  uint64_t v10;
  char v11;
  unsigned __int8 *v12;
  int v13;
  size_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v18;
  id v19;
  id v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _QWORD v29[2];

  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = -1;
  v23 = 0uLL;
  *((_QWORD *)&v22 + 1) = 0;
  re::DynamicString::setCapacity(&v22, 0);
  HIBYTE(v24) = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0xFFFFFFFFLL;
  v28 = 0;
  if (a2)
  {
    v10 = *a2;
    if (*a2)
    {
      v11 = a2[1];
      if (v11)
      {
        v12 = (unsigned __int8 *)(a2 + 2);
        do
        {
          v10 = 31 * v10 + v11;
          v13 = *v12++;
          v11 = v13;
        }
        while (v13);
      }
      v10 &= ~0x8000000000000000;
    }
  }
  else
  {
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  v18 = v10;
  NS::SharedPtr<MTL::Texture>::operator=(&v20, a3);
  v14 = strlen(a4);
  v29[0] = a4;
  v29[1] = v14;
  re::DynamicString::operator=((re::DynamicString *)&v22, (uint64_t)v29);
  v24 = 257;
  HIDWORD(v27) = a5;
  v15 = re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::add((_anonymous_namespace_ *)(a1 + 499), (uint64_t)&v18);
  v16 = a1[501];
  if ((_QWORD)v22)
  {
    if ((BYTE8(v22) & 1) != 0)
      (*(void (**)(__n128))(*(_QWORD *)v22 + 40))(v15);
    v22 = 0u;
    v23 = 0u;
  }
  if (v20)
  {

    v20 = 0;
  }
  if (v19)

  return (v16 - 1);
}

uint64_t re::RenderFrame::getStreamNameForWorldRoot(re::DynamicString **this, const re::StringID *a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = (a3 + (*(_QWORD *)a2 >> 3) + (*(_QWORD *)a2 >> 1 << 6) - 0x61C8864680B583E9) ^ (*(_QWORD *)a2 >> 1);
  v6 = (char *)(this + 61);
  v7 = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet((uint64_t)(this + 61), &v11);
  if (!v7)
  {
    re::DynamicString::format(this[47], (re::Allocator *)"%s_W%llu", (re::DynamicString *)&v9, *((_QWORD *)a2 + 1), a3);
    v7 = re::HashTable<unsigned long long,re::DynamicString,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add((uint64_t)v6, (unint64_t *)&v11, &v9);
    if (v9)
    {
      if ((v10 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v9 + 40))();
    }
  }
  return v7;
}

uint64_t re::HashTable<unsigned long long,re::DynamicString,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  v6 = *a2;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  v7 = v6 % *(unsigned int *)(a1 + 24);
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v7);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<unsigned long long,re::DynamicString,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addAsMove(a1, v7, v6, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 16) + 48 * v11;
    return v10 + 16;
  }
  v9 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v9 + 48 * v8 + 8) != v6)
  {
    LODWORD(v8) = *(_DWORD *)(v9 + 48 * v8) & 0x7FFFFFFF;
    if ((_DWORD)v8 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v10 = v9 + 48 * v8;
  return v10 + 16;
}

uint64_t re::RenderFrame::applyPropertiesToScopeLane(re::RenderFrame *this, const char *a2, const re::RenderGraphTargetDescription *a3, const char *__s)
{
  const char *v4;
  unsigned int ScopeOutputIndex;
  uint64_t v9;
  uint64_t v10;
  char v11;
  const char *v12;
  int v13;
  uint64_t result;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  re *v25;
  _OWORD *v26;
  _OWORD v27[5];
  uint64_t v28;

  v4 = __s;
  v28 = *MEMORY[0x24BDAC8D0];
  if (!__s)
    v4 = (const char *)*((_QWORD *)this + 44);
  ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex(this, v4);
  if (ScopeOutputIndex == -1)
  {
    re::DynamicString::format((re::DynamicString *)"applyPropertiesToScopeLane called on unknown graphScope %s.", (re::DynamicString *)v27, v4);
    re::RenderFrame::addError((uint64_t)this, (uint64_t)v27);
    result = *(_QWORD *)&v27[0];
    if (*(_QWORD *)&v27[0] && (BYTE8(v27[0]) & 1) != 0)
      return (*(uint64_t (**)(void))(**(_QWORD **)&v27[0] + 40))();
  }
  else
  {
    if (*((_QWORD *)this + 470) <= (unint64_t)ScopeOutputIndex)
    {
      memset(v27, 0, sizeof(v27));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v9 = *((_QWORD *)this + 472) + 136 * ScopeOutputIndex + 40;
    if (a2)
    {
      v10 = *a2;
      if (*a2)
      {
        v11 = a2[1];
        if (v11)
        {
          v12 = a2 + 2;
          do
          {
            v10 = 31 * v10 + v11;
            v13 = *(unsigned __int8 *)v12++;
            v11 = v13;
          }
          while (v13);
        }
        v10 &= ~0x8000000000000000;
      }
    }
    else
    {
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v27[0] = v10;
    result = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v9, (uint64_t *)v27);
    if (result)
    {
      v15 = (_QWORD *)result;
      if (*(_QWORD *)(result + 16))
      {
        v16 = 0;
        v17 = 0;
        do
        {
          v18 = (_OWORD *)(v15[4] + v16);
          *(_QWORD *)&v27[0] = 0;
          *((_QWORD *)&v27[0] + 1) = -1;
          v27[0] = *v18;
          result = re::RenderGraphResourceDescriptions::targetDescription((re::RenderFrame *)((char *)this + 3448), (uint64_t *)v27);
          if (*(_DWORD *)result == 3)
          {
            if (!*(_DWORD *)(result + 4))
              *(_DWORD *)(result + 4) = *((_DWORD *)a3 + 1);
            v19 = *(_DWORD *)(result + 12);
            if (v19 == -1)
            {
              v19 = *((_DWORD *)a3 + 3);
              *(_DWORD *)(result + 12) = v19;
            }
            v20 = *(_DWORD *)(result + 16);
            if (v20 == -1)
            {
              v20 = *((_DWORD *)a3 + 4);
              *(_DWORD *)(result + 16) = v20;
            }
            v21 = *(_DWORD *)(result + 20);
            if (v21 == -1)
            {
              v21 = *((_DWORD *)a3 + 5);
              *(_DWORD *)(result + 20) = v21;
            }
            v22 = *(_DWORD *)(result + 24);
            if (v22 == -1)
            {
              v22 = *((_DWORD *)a3 + 6);
              *(_DWORD *)(result + 24) = v22;
            }
            if (v19 != -1 && v20 != -1 && v21 != -1 && v22 != -1)
              *(_DWORD *)(result + 8) = *((_DWORD *)a3 + 2);
            if (*(_DWORD *)(result + 28) == -1)
              *(_DWORD *)(result + 28) = *((_DWORD *)a3 + 7);
            if (*(_DWORD *)(result + 32) == -1)
              *(_DWORD *)(result + 32) = *((_DWORD *)a3 + 8);
            if (*(_QWORD *)(result + 88) == -1)
              *(_QWORD *)(result + 88) = *((_QWORD *)a3 + 11);
          }
          ++v17;
          v16 += 16;
        }
        while (v15[2] > v17);
      }
      if (v15[7])
      {
        v23 = 0;
        v24 = 0;
        v25 = (re::RenderFrame *)((char *)this + 3448);
        do
        {
          v26 = (_OWORD *)(v15[9] + v23);
          *(_QWORD *)&v27[0] = 0;
          *((_QWORD *)&v27[0] + 1) = -1;
          v27[0] = *v26;
          result = re::RenderGraphResourceDescriptions::bufferDescription(v25, (uint64_t *)v27);
          if (*(_DWORD *)result == 3)
          {
            if (*(_QWORD *)(result + 8) == -1)
              *(_QWORD *)(result + 8) = (unint64_t)(float)(*(float *)(result + 20)
                                                                * (float)(*((_DWORD *)a3 + 4)
                                                                                      * *((_DWORD *)a3 + 3)));
            if (*(_QWORD *)(result + 32) == -1)
              *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 11);
          }
          ++v24;
          v23 += 16;
        }
        while (v15[7] > v24);
      }
    }
  }
  return result;
}

uint64_t re::RenderFrame::applyPropertiesToScopeLane(re::RenderFrame *this, const char *a2, const re::RenderGraphBufferDescription *a3, const char *__s)
{
  const char *v4;
  unsigned int ScopeOutputIndex;
  uint64_t v9;
  uint64_t v10;
  char v11;
  const char *v12;
  int v13;
  uint64_t result;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  re *v21;
  _OWORD *v22;
  _OWORD v23[5];
  uint64_t v24;

  v4 = __s;
  v24 = *MEMORY[0x24BDAC8D0];
  if (!__s)
    v4 = (const char *)*((_QWORD *)this + 44);
  ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex(this, v4);
  if (ScopeOutputIndex == -1)
  {
    re::DynamicString::format((re::DynamicString *)"applyPropertiesToScopeLane called on unknown graphScope %s.", (re::DynamicString *)v23, v4);
    re::RenderFrame::addError((uint64_t)this, (uint64_t)v23);
    result = *(_QWORD *)&v23[0];
    if (*(_QWORD *)&v23[0] && (BYTE8(v23[0]) & 1) != 0)
      return (*(uint64_t (**)(void))(**(_QWORD **)&v23[0] + 40))();
  }
  else
  {
    if (*((_QWORD *)this + 470) <= (unint64_t)ScopeOutputIndex)
    {
      memset(v23, 0, sizeof(v23));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v9 = *((_QWORD *)this + 472) + 136 * ScopeOutputIndex + 88;
    if (a2)
    {
      v10 = *a2;
      if (*a2)
      {
        v11 = a2[1];
        if (v11)
        {
          v12 = a2 + 2;
          do
          {
            v10 = 31 * v10 + v11;
            v13 = *(unsigned __int8 *)v12++;
            v11 = v13;
          }
          while (v13);
        }
        v10 &= ~0x8000000000000000;
      }
    }
    else
    {
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v23[0] = v10;
    result = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v9, (uint64_t *)v23);
    if (result)
    {
      v15 = (_QWORD *)result;
      if (*(_QWORD *)(result + 56))
      {
        v16 = 0;
        v17 = 0;
        do
        {
          v18 = (_OWORD *)(v15[9] + v16);
          *(_QWORD *)&v23[0] = 0;
          *((_QWORD *)&v23[0] + 1) = -1;
          v23[0] = *v18;
          result = re::RenderGraphResourceDescriptions::bufferDescription((re::RenderFrame *)((char *)this + 3448), (uint64_t *)v23);
          if (*(_DWORD *)result == 3)
          {
            if (*(_QWORD *)(result + 8) == -1)
              *(_QWORD *)(result + 8) = *((_QWORD *)a3 + 1);
            if (*(_QWORD *)(result + 32) == -1)
              *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 4);
          }
          ++v17;
          v16 += 16;
        }
        while (v15[7] > v17);
      }
      if (v15[2])
      {
        v19 = 0;
        v20 = 0;
        v21 = (re::RenderFrame *)((char *)this + 3448);
        do
        {
          v22 = (_OWORD *)(v15[4] + v19);
          *(_QWORD *)&v23[0] = 0;
          *((_QWORD *)&v23[0] + 1) = -1;
          v23[0] = *v22;
          result = re::RenderGraphResourceDescriptions::targetDescription(v21, (uint64_t *)v23);
          if (*(_DWORD *)result == 3)
          {
            if (*(_DWORD *)(result + 12) == -1)
              *(_DWORD *)(result + 12) = (float)(*(float *)(result + 40)
                                                             * (float)*((unint64_t *)a3 + 1));
            if (*(_DWORD *)(result + 16) == -1)
              *(_DWORD *)(result + 16) = (float)(*(float *)(result + 44)
                                                             * (float)*((unint64_t *)a3 + 1));
            if (*(_QWORD *)(result + 88) == -1)
              *(_QWORD *)(result + 88) = *((_QWORD *)a3 + 4);
          }
          ++v20;
          v19 += 16;
        }
        while (v15[2] > v20);
      }
    }
  }
  return result;
}

void re::RenderFrame::pickupScopeLane(re::RenderFrame *this, const char *a2, const char *__s, const char *a4)
{
  const char *v4;
  uint64_t v6;
  char v7;
  const char *v8;
  int v9;
  uint64_t v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  __n128 v13;
  _OWORD v14[2];
  uint64_t v15;
  char v16;
  int v17;
  _QWORD v18[4];
  _QWORD v19[4];
  uint64_t v20;
  uint64_t v21;

  v4 = a4;
  if (a4)
  {
    if (a2)
      goto LABEL_3;
LABEL_9:
    v10 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_11;
  }
  v4 = (const char *)*((_QWORD *)this + 44);
  if (!a2)
    goto LABEL_9;
LABEL_3:
  v6 = *a2;
  if (*a2)
  {
    v7 = a2[1];
    if (v7)
    {
      v8 = a2 + 2;
      do
      {
        v6 = 31 * v6 + v7;
        v9 = *(unsigned __int8 *)v8++;
        v7 = v9;
      }
      while (v9);
    }
    v10 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v10 = 0;
  }
LABEL_11:
  if (*((_BYTE *)this + 425))
  {
    v21 = v10;
    re::RenderFrame::pickupScopeLaneInternal(this, &v21, __s, v4);
  }
  else
  {
    v11 = (re::RenderFrame *)((char *)this + 576);
    v12 = *((_QWORD *)this + 69);
    re::DynamicString::DynamicString((re::DynamicString *)&v15, __s, *((re::Allocator **)this + 47));
    re::DynamicString::DynamicString((re::DynamicString *)v14, v4, *((re::Allocator **)this + 47));
    v17 = v12;
    re::DynamicString::DynamicString((re::DynamicString *)v18, (const re::DynamicString *)&v15);
    re::DynamicString::DynamicString((re::DynamicString *)v19, (const re::DynamicString *)v14);
    v20 = v10;
    v13 = re::DynamicArray<re::RenderFrame::PickupAction>::add(v11, (__n128 *)&v17);
    v20 = 0;
    if (v19[0])
    {
      if ((v19[1] & 1) != 0)
        (*(void (**)(__n128))(*(_QWORD *)v19[0] + 40))(v13);
      v13 = 0uLL;
      memset(v19, 0, sizeof(v19));
    }
    if (v18[0])
    {
      if ((v18[1] & 1) != 0)
        (*(void (**)(__n128))(*(_QWORD *)v18[0] + 40))(v13);
      v13 = 0uLL;
      memset(v18, 0, sizeof(v18));
    }
    if (*(_QWORD *)&v14[0])
    {
      if ((BYTE8(v14[0]) & 1) != 0)
        (*(void (**)(__n128))(**(_QWORD **)&v14[0] + 40))(v13);
      v13 = 0uLL;
      memset(v14, 0, sizeof(v14));
    }
    if (v15)
    {
      if ((v16 & 1) != 0)
        (*(void (**)(__n128))(*(_QWORD *)v15 + 40))(v13);
    }
  }
}

double re::RenderFrame::pickupScopeLaneInternal(_QWORD *a1, uint64_t *a2, const char *a3, const char *a4)
{
  unint64_t ScopeOutputIndex;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  double result;
  uint64_t v18;
  unint64_t v19;
  size_t v20;
  void *v21;
  uint64_t v22;
  const char **v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[56];
  uint64_t v55[4];
  __int128 v56;
  _BYTE v57[18];
  __int16 v58;
  unint64_t v59;
  __int16 v60;
  unint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex((re::RenderFrame *)a1, a3);
  if ((_DWORD)ScopeOutputIndex == -1)
  {
    v40 = a3;
    v16 = "pickupScopeLane called with unknown srcScopeName \"%s\".";
LABEL_7:
    re::DynamicString::format((re::DynamicString *)v16, (re::DynamicString *)&v52, v40);
    re::RenderFrame::addError((uint64_t)a1, (uint64_t)&v52);
    if ((_QWORD)v52)
    {
      if ((BYTE8(v52) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v52 + 40))();
    }
    return result;
  }
  v9 = ScopeOutputIndex;
  v10 = ScopeOutputIndex;
  v11 = a1[470];
  if (v11 <= ScopeOutputIndex)
  {
    v51 = 0;
    v53 = 0u;
    memset(v54, 0, 48);
    v52 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v57 = 136315906;
    *(_QWORD *)&v57[4] = "operator[]";
    *(_WORD *)&v57[12] = 1024;
    *(_DWORD *)&v57[14] = 789;
    v58 = 2048;
    v59 = v10;
    v60 = 2048;
    v61 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_33;
  }
  v12 = a1[472];
  if (!*(_QWORD *)(v12 + 136 * ScopeOutputIndex + 40)
    || (v13 = *a2,
        v14 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30)),
        v15 = *(unsigned int *)(*(_QWORD *)(v12 + 136 * ScopeOutputIndex + 48)
                              + 4
                              * (((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                 * (v14 ^ (v14 >> 27))) >> 31))
                               % *(unsigned int *)(v12 + 136 * ScopeOutputIndex + 64))),
        (_DWORD)v15 == 0x7FFFFFFF))
  {
LABEL_5:
    v16 = "pickupScopeLane called with missing lane.";
    goto LABEL_7;
  }
  v18 = *(_QWORD *)(v12 + 136 * ScopeOutputIndex + 56);
  while (*(_QWORD *)(v18 + 144 * v15 + 8) != v13)
  {
    LODWORD(v15) = *(_DWORD *)(v18 + 144 * v15) & 0x7FFFFFFF;
    if ((_DWORD)v15 == 0x7FFFFFFF)
      goto LABEL_5;
  }
  v19 = re::RenderFrame::getScopeOutputIndex((re::RenderFrame *)a1, a4);
  if ((_DWORD)v19 == -1)
  {
    if ((const char *)a1[44] != a4)
    {
      v20 = strlen(a4);
      v21 = (void *)re::GrowableLinearAllocator::alloc((re::GrowableLinearAllocator *)(a1[478] + 24), v20 + 1, 0);
      memcpy(v21, a4, v20);
      *((_BYTE *)v21 + v20) = 0;
      a4 = (const char *)v21;
    }
    *(_QWORD *)&v52 = a4;
    *((_QWORD *)&v52 + 1) = strlen(a4);
    *(_QWORD *)&v53 = 0;
    *((_QWORD *)&v53 + 1) = &str_110;
    *(_DWORD *)v54 = 0;
    memset(&v54[8], 0, 48);
    v56 = 0u;
    memset(v55, 0, sizeof(v55));
    *(_DWORD *)&v54[44] = 0x7FFFFFFF;
    DWORD1(v56) = 0x7FFFFFFF;
    re::DynamicArray<re::RenderGraphScopeOutput>::add((_anonymous_namespace_ *)(a1 + 468), (uint64_t)&v52);
    re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(v55);
    re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)&v54[8]);
    re::StringID::destroyString((re::StringID *)&v53);
    v11 = a1[470];
    v19 = (v11 - 1);
  }
  if ((_DWORD)v9 != (_DWORD)v19)
  {
    if (v11 > v10)
    {
      v9 = v19;
      if (v11 > v19)
      {
        v22 = a1[472];
        v23 = (const char **)(v22 + 136 * v19);
        v24 = *v23;
        *(_QWORD *)v57 = 0;
        *(_QWORD *)&v57[8] = &str_110;
        v25 = v22 + 136 * v10;
        v26 = *(_QWORD *)v57;
        v27 = *(_QWORD *)&v57[8];
        *(_QWORD *)v57 = 0;
        *(_QWORD *)&v57[8] = &str_110;
        v28 = *(_QWORD *)(v25 + 24);
        v29 = v26 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v25 + 16) & 1;
        *(_QWORD *)(v25 + 24) = v27;
        *(_QWORD *)&v52 = v29;
        *((_QWORD *)&v52 + 1) = v28;
        *(_QWORD *)(v25 + 16) = v26;
        re::StringID::destroyString((re::StringID *)&v52);
        re::StringID::destroyString((re::StringID *)v57);
        v30 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v25 + 40, a2);
        if (v30)
        {
          v31 = v30;
          v32 = *(_DWORD *)(v30 + 88);
          if (v32 != -1)
          {
            v33 = *(_DWORD *)(v30 + 92);
            if (v33 != -1)
            {
              v50 = *a2;
              v47 = *(_QWORD *)(v30 + 80);
              v48 = v32;
              v49 = v33;
              re::RenderGraphScopeOutput::addTargetToLane((uint64_t)v23, &v50, (double *)&v47, 0);
              v50 = 0;
            }
          }
          if (*(_QWORD *)(v31 + 16))
          {
            v34 = 0;
            v35 = 0;
            do
            {
              v46 = *a2;
              v36 = (uint64_t *)(*(_QWORD *)(v31 + 32) + v34);
              v44 = 0;
              v45 = -1;
              v44 = *v36;
              v45 = v36[1];
              re::RenderGraphScopeOutput::inheritPropertiesFromLane((uint64_t)v23, &v46, (double *)&v44);
              v46 = 0;
              ++v35;
              v34 += 16;
            }
            while (*(_QWORD *)(v31 + 16) > v35);
          }
          if (*(_QWORD *)(v31 + 56))
          {
            v37 = 0;
            v38 = 0;
            do
            {
              v43 = *a2;
              v39 = (uint64_t *)(*(_QWORD *)(v31 + 72) + v37);
              v41 = 0;
              v42 = -1;
              v41 = *v39;
              v42 = v39[1];
              re::RenderGraphScopeOutput::inheritPropertiesFromLane((uint64_t)v23, &v43, (double *)&v41);
              v43 = 0;
              ++v38;
              v37 += 16;
            }
            while (*(_QWORD *)(v31 + 56) > v38);
          }
          *(_QWORD *)(v31 + 80) = 0;
          result = NAN;
          *(_QWORD *)(v31 + 88) = -1;
          *(_QWORD *)(v31 + 16) = 0;
          ++*(_DWORD *)(v31 + 24);
          *(_QWORD *)(v31 + 56) = 0;
          ++*(_DWORD *)(v31 + 64);
        }
        return result;
      }
LABEL_34:
      v51 = 0;
      v53 = 0u;
      memset(v54, 0, 48);
      v52 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v57 = 136315906;
      *(_QWORD *)&v57[4] = "operator[]";
      *(_WORD *)&v57[12] = 1024;
      *(_DWORD *)&v57[14] = 789;
      v58 = 2048;
      v59 = v9;
      v60 = 2048;
      v61 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_33:
    v51 = 0;
    v53 = 0u;
    memset(v54, 0, 48);
    v52 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v57 = 136315906;
    *(_QWORD *)&v57[4] = "operator[]";
    *(_WORD *)&v57[12] = 1024;
    *(_DWORD *)&v57[14] = 789;
    v58 = 2048;
    v59 = v10;
    v60 = 2048;
    v61 = v11;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_34;
  }
  return result;
}

__n128 re::DynamicArray<re::RenderFrame::PickupAction>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __n128 result;
  unint64_t v12;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::RenderFrame::PickupAction>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 80 * v4;
  *(_DWORD *)v5 = a2->n128_u32[0];
  *(_OWORD *)(v5 + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_QWORD *)(v5 + 32) = a2[2].n128_u64[0];
  v6 = a2[1].n128_u64[0];
  *(_QWORD *)(v5 + 8) = a2->n128_u64[1];
  a2->n128_u64[1] = 0;
  v7 = a2[1].n128_u64[1];
  a2[2].n128_u64[0] = 0;
  v9 = *(_QWORD *)(v5 + 16);
  v8 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 24) = v7;
  a2[1].n128_u64[0] = v9;
  a2[1].n128_u64[1] = v8;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_QWORD *)(v5 + 40) = a2[2].n128_u64[1];
  a2[2].n128_u64[1] = 0;
  v10 = *(_QWORD *)(v5 + 56);
  *(_QWORD *)(v5 + 56) = a2[3].n128_u64[1];
  a2[3].n128_u64[1] = v10;
  result = a2[4];
  *(__n128 *)(v5 + 64) = result;
  a2[4].n128_u64[0] = 0;
  v12 = *(_QWORD *)(v5 + 48);
  *(_QWORD *)(v5 + 48) = a2[3].n128_u64[0];
  a2[3].n128_u64[0] = v12;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::RenderFrame::makeRenderGraph(re::RenderFrame *this, const char *a2, unint64_t a3)
{
  __n128 v7;
  __n128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  if (!*((_BYTE *)this + 336) && !*((_BYTE *)this + 425))
  {
    re::DynamicString::format((re::DynamicString *)"Render graph '%s' cannot be created outside of a provide() callback. Type scope: '%s', Graph scope: '%s'", (re::DynamicString *)&v12, a2, *((_QWORD *)this + 43), *((_QWORD *)this + 44));
    v8.n128_u64[0] = 1001;
    v8.n128_u64[1] = (unint64_t)&re::RenderGraphCachingErrorCategory(void)::instance;
    v9 = v12;
    v11 = v14;
    v10 = v13;
    v7 = re::DynamicArray<re::DetailedError>::add((re::RenderFrame *)((char *)this + 3152), &v8);
    if (v9)
    {
      if ((v10 & 1) != 0)
        (*(void (**)(__n128))(*(_QWORD *)v9 + 40))(v7);
    }
  }
  re::RenderGraph::RenderGraph((re::RenderGraph *)&v8, a2, a3, *((const char **)this + 43), *((const char **)this + 44), *((_QWORD *)this + 45));
  re::DynamicArray<re::RenderGraph>::add((re::RenderFrame *)((char *)this + 3408), &v8);
  re::RenderGraph::~RenderGraph((re::RenderGraph *)&v8);
  return *((_QWORD *)this + 430) + 112 * *((_QWORD *)this + 428) - 112;
}

uint64_t re::DynamicArray<re::RenderGraph>::add(_anonymous_namespace_ *this, _QWORD *a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::RenderGraph>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = re::RenderGraph::RenderGraph(*((_QWORD *)this + 4) + 112 * v4, a2);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::RenderGraphExecutable::targetDescription(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a2 + 12);
  if (*(_QWORD *)(a1 + 8) <= v2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 16) + 112 * v2;
}

void `anonymous namespace'::resourcesWithInvalidTextureBound(_anonymous_namespace_ *this)
{
  unsigned __int8 v1;
  unsigned __int8 v2;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_378);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_378))
  {
    byte_254118F70 = 0;
    qword_254118F60 = (uint64_t)&off_24ED42648;
    unk_254118F68 = "RenderFrame allocator";
    __cxa_guard_release(&_MergedGlobals_378);
  }
  v2 = atomic_load((unsigned __int8 *)&qword_254118F58);
  if ((v2 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254118F58))
    {
      dword_254118F98 = 0;
      xmmword_254118F88 = 0u;
      xmmword_254118F78 = 0u;
      unk_254118F9C = 0x7FFFFFFFLL;
      re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)&xmmword_254118F78, (uint64_t)&qword_254118F60, 3);
      __cxa_guard_release(&qword_254118F58);
    }
  }
}

uint64_t re::RenderGraphExecutable::bufferDescription(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a2 + 12);
  if (*(_QWORD *)(a1 + 32) <= v2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 40) + 48 * v2;
}

_QWORD *re::RenderFrame::buildOrRetainCachedGraph(re::RenderFrame *this, re::RenderGraphStats *a2)
{
  size_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  re::RenderFrame *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  signed int v24;
  re::RenderFrame *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  size_t v29;
  unint64_t v30;
  unint64_t v31;
  re::RenderFrame *v32;
  unint64_t v33;
  _DWORD *v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  size_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  __n128 v61;
  unint64_t v62;
  re::RenderFrame *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  const char *v67;
  size_t v68;
  unint64_t v69;
  unint64_t v70;
  const char *v71;
  size_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  re::RenderFrame *v81;
  uint64_t v82;
  _QWORD *CachedGraph;
  _anonymous_namespace_ *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  size_t v88;
  int v89;
  unint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __n128 v94;
  uint64_t v95;
  uint64_t v96;
  _DWORD *v97;
  re::RenderFrame *v98;
  re::RenderFrame *v99;
  unsigned int v100;
  uint64_t v101;
  __n128 v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  re::RenderFrame *v111;
  _DWORD *v112;
  uint64_t v113;
  unint64_t v114;
  re *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  int *v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  _BYTE *v130;
  int v131;
  unsigned int v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  size_t *v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  int *v143;
  int v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  _BYTE *v157;
  int v158;
  unsigned int v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  _DWORD *v170;
  int v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  int *v175;
  int v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _BYTE *v182;
  int v183;
  int v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  int *v188;
  int v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _BYTE *v195;
  int v196;
  int v197;
  int v198;
  re::RenderFrame *v199;
  unint64_t v200;
  uint64_t v201;
  _anonymous_namespace_ *v202;
  unint64_t v203;
  BOOL v204;
  unint64_t v205;
  uint64_t v209;
  unint64_t v210;
  _anonymous_namespace_ *v211;
  re::StringID *v212;
  unint64_t v213;
  uint64_t v214;
  char **v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  _QWORD *v220;
  BOOL v221;
  uint64_t v222;
  char *v223;
  _anonymous_namespace_ *v224;
  const char *v225;
  uint64_t v226;
  uint64_t v227;
  int *v228;
  int v229;
  int *v230;
  int v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t *v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  unsigned int ScopeOutputIndex;
  uint64_t v245;
  size_t v246;
  size_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  re::RenderGraph *v262;
  uint64_t v263;
  uint64_t CompiledGraph;
  uint64_t v265;
  re::RenderFrame *v266;
  uint64_t v267;
  uint64_t v268;
  BOOL v269;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  id v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t *v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v308;
  unint64_t v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  unint64_t v313;
  size_t v314;
  unint64_t v315;
  _QWORD *v316;
  re::RenderGraphStats *v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  char *v325;
  re::RenderFrame *v326;
  unint64_t v327;
  unint64_t v328;
  uint64_t v329;
  uint64_t v330;
  char *__s;
  unint64_t v332;
  uint64_t v333;
  _QWORD v334[2];
  unint64_t v335;
  unint64_t v336;
  unint64_t v337;
  id v338[6];
  __int128 v339;
  __int128 v340;
  _BYTE v341[24];
  char v342;
  _BYTE v343[12];
  __int16 v344;
  int v345;
  __int16 v346;
  size_t v347;
  __int16 v348;
  unint64_t v349;
  StringID v350[3];
  __int128 v351;
  __int128 v352;
  uint64_t v353;

  v353 = *MEMORY[0x24BDAC8D0];
  v8 = *((_QWORD *)this + 41);
  v330 = 0;
  __s = 0;
  v332 = 0;
  v9 = *((_QWORD *)this + 47);
  v10 = *((_QWORD *)this + 501);
  LODWORD(v338[0]) = 0;
  re::FixedArray<unsigned long long>::init<int>(&v330, v9, v10, (int *)v338);
  v12 = *((_QWORD *)this + 47);
  v13 = *((_QWORD *)this + 501);
  v326 = this;
  v317 = a2;
  v320 = v8;
  if (v13)
  {
    if (v13 >> 61)
      goto LABEL_507;
    v2 = 8 * v13;
    v14 = (char *)(*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(*(_QWORD *)v12 + 32))(v12, 8 * v13, 8);
    if (!v14)
    {
LABEL_508:
      re::internal::assertLog((re::internal *)4, v15, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
LABEL_509:
      v334[0] = 0;
      v339 = 0u;
      v340 = 0u;
      memset(v338, 0, sizeof(v338));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v343 = 136315906;
      *(_QWORD *)&v343[4] = "operator[]";
      v344 = 1024;
      v345 = 468;
      v346 = 2048;
      v347 = v2;
      v348 = 2048;
      v349 = v13;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_510:
      v334[0] = 0;
      v339 = 0u;
      v340 = 0u;
      memset(v338, 0, sizeof(v338));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v343 = 136315906;
      *(_QWORD *)&v343[4] = "operator[]";
      v344 = 1024;
      v345 = 468;
      v346 = 2048;
      v347 = v12;
      v348 = 2048;
      v349 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_511:
      v334[0] = 0;
      v339 = 0u;
      v340 = 0u;
      memset(v338, 0, sizeof(v338));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v343 = 136315906;
      *(_QWORD *)&v343[4] = "operator[]";
      v344 = 1024;
      v345 = 468;
      v346 = 2048;
      v347 = v2;
      v348 = 2048;
      v349 = v321;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_512:
      v334[0] = 0;
      v339 = 0u;
      v340 = 0u;
      memset(v338, 0, sizeof(v338));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v343 = 136315906;
      *(_QWORD *)&v343[4] = "operator[]";
      v344 = 1024;
      v345 = 468;
      v346 = 2048;
      v347 = v12;
      v348 = 2048;
      v349 = (unint64_t)v325;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_513:
      v334[0] = 0;
      v339 = 0u;
      v340 = 0u;
      memset(v338, 0, sizeof(v338));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v343 = 136315906;
      *(_QWORD *)&v343[4] = "operator[]";
      v344 = 1024;
      v345 = 468;
      v346 = 2048;
      v347 = v2;
      v348 = 2048;
      v349 = v321;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_514:
      v334[0] = 0;
      v339 = 0u;
      v340 = 0u;
      memset(v338, 0, sizeof(v338));
      v289 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v343 = 136315906;
      *(_QWORD *)&v343[4] = "operator[]";
      v344 = 1024;
      v345 = 468;
      v346 = 2048;
      v347 = v2;
      v348 = 2048;
      v349 = (unint64_t)v325;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_515:
      v337 = 0;
      v351 = 0u;
      v352 = 0u;
      memset(v350, 0, sizeof(v350));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v343 = 136315906;
      *(_QWORD *)&v343[4] = "operator[]";
      v344 = 1024;
      v345 = 797;
      v346 = 2048;
      v347 = v289;
      v348 = 2048;
      v349 = v12;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_516:
      v330 = 0;
      v351 = 0u;
      v352 = 0u;
      memset(v350, 0, sizeof(v350));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v343 = 136315906;
      *(_QWORD *)&v343[4] = "operator[]";
      v344 = 1024;
      v345 = 797;
      v346 = 2048;
      v347 = v3;
      v348 = 2048;
      v349 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_517:
      re::internal::assertLog((re::internal *)4, v265, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      _os_crash();
      __break(1u);
      goto LABEL_518;
    }
    v16 = v14;
    v17 = v14;
    if (v13 != 1)
    {
      v2 -= 8;
      memset(v14, 255, v2);
      v17 = &v16[v2];
    }
    v18 = 0;
    *(_QWORD *)v17 = -1;
    do
    {
      *(_QWORD *)&v16[8 * v18] = v18;
      ++v18;
    }
    while (v13 != v18);
    v19 = this;
    v20 = *((_QWORD *)this + 47);
    v21 = *((_QWORD *)this + 501);
  }
  else
  {
    v21 = 0;
    v16 = 0;
    v19 = this;
    v20 = *((_QWORD *)this + 47);
  }
  v318 = v12;
  v4 = 0xBF58476D1CE4E5B9;
  v22 = 0x9E3779B97F4A7C17;
  v327 = 0;
  v328 = 0;
  v329 = 0;
  LODWORD(v338[0]) = 0;
  re::FixedArray<unsigned long long>::init<int>(&v327, v20, v21, (int *)v338);
  v23 = *((_QWORD *)v19 + 47);
  if (*((_DWORD *)v19 + 1002) <= 1u)
    v24 = 1;
  else
    v24 = *((_DWORD *)v19 + 1002);
  memset(v350, 0, 36);
  *(_QWORD *)(&v350[2].var0 + 1) = 0x7FFFFFFFLL;
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v350, v23, v24);
  if (*((_QWORD *)v19 + 501))
  {
    v25 = v19;
    v2 = 0;
    v322 = 0;
    v26 = v329;
    v321 = v328;
    v3 = 104;
    v4 = v332;
    v325 = __s;
    do
    {
      v5 = *((_QWORD *)v25 + 503);
      v27 = v5 + 104 * v2;
      v337 = 0;
      if ((*(_BYTE *)(v27 + 40) & 1) != 0)
        v12 = *(_QWORD *)(v5 + 104 * v2 + 48);
      else
        v12 = v5 + 104 * v2 + 41;
      v28 = *(_QWORD *)v27;
      v29 = strlen((const char *)v12);
      if (v29)
      {
        MurmurHash3_x64_128(v12, v29, 0, (unint64_t *)v338);
        v30 = ((uint64_t)v338[1] + 64 * (uint64_t)v338[0] + ((unint64_t)v338[0] >> 2) - 0x61C8864680B583E9) ^ (uint64_t)v338[0];
      }
      else
      {
        v30 = 0;
      }
      v337 = ((v28 << 6) - 0x61C8864680B583E9 + (v28 >> 2) + v30) ^ v28;
      if (!re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::contains((uint64_t)v350, (uint64_t *)&v337))
      {
        v31 = *(_QWORD *)(v5 + 104 * v2 + 8);
        v32 = v326;
        if (v31 || *(_QWORD *)(v5 + 104 * v2 + 16))
        {
          v12 = 0;
          v33 = v5 + 104 * v2;
          v5 = v33 + 16;
          v34 = (_DWORD *)(v33 + 92);
          v35 = 1;
          while (1)
          {
            if (v31)
            {
              v36 = *((_QWORD *)v326 + 501);
              if (v36 <= v12)
              {
                v334[0] = 0;
                v339 = 0u;
                v340 = 0u;
                memset(v338, 0, sizeof(v338));
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v343 = 136315906;
                *(_QWORD *)&v343[4] = "operator[]";
                v344 = 1024;
                v345 = 789;
                v346 = 2048;
                v347 = v12;
                v348 = 2048;
                v349 = v36;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_477:
                v334[0] = 0;
                v339 = 0u;
                v340 = 0u;
                memset(v338, 0, sizeof(v338));
                v22 = MEMORY[0x24BDACB70];
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v343 = 136315906;
                *(_QWORD *)&v343[4] = "operator[]";
                v344 = 1024;
                v345 = 789;
                v346 = 2048;
                v347 = v12;
                v348 = 2048;
                v349 = v36;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_478;
              }
              if (*(_QWORD *)(*((_QWORD *)v326 + 503) + 104 * v12 + 8) == v31)
                break;
            }
            if (*(_QWORD *)v5)
            {
              v36 = *((_QWORD *)v326 + 501);
              if (v36 <= v12)
                goto LABEL_477;
              v37 = *((_QWORD *)v326 + 503);
              v38 = *(_QWORD *)(v37 + 104 * v12 + 16);
              _ZF = v38 && v38 == *(_QWORD *)v5;
              if (_ZF && *(_DWORD *)(v37 + 104 * v12 + 92) == *v34)
                break;
            }
            v12 = v35;
            _CF = v2 >= v35++;
            if (!_CF)
              goto LABEL_43;
          }
          if (v13 <= v2)
            goto LABEL_497;
          *(_QWORD *)&v16[8 * v2] = v12;
          v41 = v321;
          if (v321 <= v12)
            goto LABEL_498;
          if (v321 <= v2)
            goto LABEL_499;
          *(_QWORD *)(v26 + 8 * v2) = *(_QWORD *)(v26 + 8 * v12);
          if ((unint64_t)v325 <= v12)
            goto LABEL_500;
          *(_QWORD *)(v4 + 8 * v12) ^= v337;
LABEL_43:
          if (v13 <= v2)
            goto LABEL_488;
          if (*(_QWORD *)&v16[8 * v2] == v2)
          {
            if (v31)
              v31 = (unint64_t)objc_msgSend((id)v31, sel_protectionOptions);
            if (v321 <= v2)
              goto LABEL_495;
            v42 = *(_QWORD *)(v26 + 8 * v2) | v31;
            *(_QWORD *)(v26 + 8 * v2) = v42;
            v43 = *(_QWORD *)v5;
            if (*(_QWORD *)v5)
            {
              v43 = (unint64_t)objc_msgSend((id)v43, sel_protectionOptions);
              v42 = *(_QWORD *)(v26 + 8 * v2);
            }
            v44 = v43 | v42;
            *(_QWORD *)(v26 + 8 * v2) = v44;
            v45 = *((_QWORD *)v326 + 52) & v44;
            *(_QWORD *)(v26 + 8 * v2) = v45;
            if ((unint64_t)v325 <= v2)
            {
LABEL_496:
              v334[0] = 0;
              v339 = 0u;
              v340 = 0u;
              memset(v338, 0, sizeof(v338));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v343 = 136315906;
              *(_QWORD *)&v343[4] = "operator[]";
              v344 = 1024;
              v345 = 468;
              v346 = 2048;
              v347 = v2;
              v348 = 2048;
              v349 = (unint64_t)v325;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_497:
              v334[0] = 0;
              v339 = 0u;
              v340 = 0u;
              memset(v338, 0, sizeof(v338));
              v41 = MEMORY[0x24BDACB70];
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v343 = 136315906;
              *(_QWORD *)&v343[4] = "operator[]";
              v344 = 1024;
              v345 = 468;
              v346 = 2048;
              v347 = v2;
              v348 = 2048;
              v349 = v13;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_498:
              v334[0] = 0;
              v339 = 0u;
              v340 = 0u;
              memset(v338, 0, sizeof(v338));
              v22 = MEMORY[0x24BDACB70];
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v343 = 136315906;
              *(_QWORD *)&v343[4] = "operator[]";
              v344 = 1024;
              v345 = 468;
              v346 = 2048;
              v347 = v12;
              v348 = 2048;
              v349 = v41;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_499:
              v334[0] = 0;
              v339 = 0u;
              v340 = 0u;
              memset(v338, 0, sizeof(v338));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v343 = 136315906;
              *(_QWORD *)&v343[4] = "operator[]";
              v344 = 1024;
              v345 = 468;
              v346 = 2048;
              v347 = v2;
              v348 = 2048;
              v349 = v321;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_500:
              v334[0] = 0;
              v339 = 0u;
              v340 = 0u;
              memset(v338, 0, sizeof(v338));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v343 = 136315906;
              *(_QWORD *)&v343[4] = "operator[]";
              v344 = 1024;
              v345 = 468;
              v346 = 2048;
              v347 = v12;
              v348 = 2048;
              v349 = (unint64_t)v325;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_501:
              *(_QWORD *)v343 = 0;
              v339 = 0u;
              v340 = 0u;
              memset(v338, 0, sizeof(v338));
              v203 = MEMORY[0x24BDACB70];
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v350[0].var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315906;
              *(_QWORD *)(&v350[0].var0 + 1) = "operator[]";
              WORD2(v350[0].var1) = 1024;
              *(_DWORD *)((char *)&v350[0].var1 + 6) = 789;
              *((_WORD *)&v350[1].var0 + 1) = 2048;
              *(_QWORD *)(&v350[1].var0 + 1) = v22;
              WORD2(v350[1].var1) = 2048;
              *(char **)((char *)&v350[1].var1 + 6) = (char *)v13;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_502:
              v337 = 0;
              v351 = 0u;
              v352 = 0u;
              memset(v350, 0, sizeof(v350));
              v200 = MEMORY[0x24BDACB70];
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v343 = 136315906;
              *(_QWORD *)&v343[4] = "operator[]";
              v344 = 1024;
              v345 = 789;
              v346 = 2048;
              v347 = v203;
              v348 = 2048;
              v349 = v12;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_503:
              v330 = 0;
              v351 = 0u;
              v352 = 0u;
              memset(v350, 0, sizeof(v350));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v343 = 136315906;
              *(_QWORD *)&v343[4] = "operator[]";
              v344 = 1024;
              v345 = 789;
              v346 = 2048;
              v347 = v200;
              v348 = 2048;
              v349 = v203;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_504:
              v330 = 0;
              v351 = 0u;
              v352 = 0u;
              memset(v350, 0, sizeof(v350));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v343 = 136315906;
              *(_QWORD *)&v343[4] = "operator[]";
              v344 = 1024;
              v345 = 789;
              v346 = 2048;
              v347 = v200;
              v348 = 2048;
              v349 = v12;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_505:
              v330 = 0;
              v351 = 0u;
              v352 = 0u;
              memset(v350, 0, sizeof(v350));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v343 = 136315906;
              *(_QWORD *)&v343[4] = "operator[]";
              v344 = 1024;
              v345 = 789;
              v346 = 2048;
              v347 = v3;
              v348 = 2048;
              v349 = v4;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_506:
              v334[0] = 0;
              v339 = 0u;
              v340 = 0u;
              memset(v338, 0, sizeof(v338));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v343 = 136315906;
              *(_QWORD *)&v343[4] = "operator[]";
              v344 = 1024;
              v345 = 468;
              v346 = 2048;
              v347 = v2;
              v348 = 2048;
              v349 = v13;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_507:
              re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, v13);
              _os_crash();
              __break(1u);
              goto LABEL_508;
            }
            v46 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v45 ^ (v45 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v45 ^ (v45 >> 30))) >> 27));
            *(_QWORD *)(v4 + 8 * v2) ^= (v46 >> 31) ^ v46;
          }
        }
        else
        {
          v48 = *(unsigned int *)(v5 + 104 * v2 + 24);
          if ((_DWORD)v48 == -1)
          {
            re::DynamicString::format((re::DynamicString *)"SpecifyScopeLaneParameters index %lu does not specify a texture, texture descriptor, or render layer handle.", (re::DynamicString *)v338, v2);
            re::RenderFrame::addError((uint64_t)v326, (uint64_t)v338);
            if (v338[0] && ((uint64_t)v338[1] & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v338[0] + 40))();
          }
          else
          {
            v12 = 0;
            v49 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v48 ^ (v48 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v48 ^ (v48 >> 30))) >> 27));
            v322 ^= v49 ^ (v49 >> 31) ^ (((v49 ^ (v49 >> 31)) << 6)
                                       - 0x61C8864680B583E9
                                       + ((v49 ^ (v49 >> 31)) >> 2)
                                       + v337);
            v5 = *((_QWORD *)v326 + 501);
            v50 = 1;
            while (1)
            {
              if (v5 <= v12)
                goto LABEL_484;
              if (*(_DWORD *)(*((_QWORD *)v326 + 503) + 104 * v12 + 24) == (_DWORD)v48)
                break;
              v12 = v50;
              _CF = v2 >= v50++;
              if (!_CF)
                goto LABEL_69;
            }
            if (v13 <= v2)
              goto LABEL_509;
            *(_QWORD *)&v16[8 * v2] = v12;
            v5 = v321;
            if (v321 <= v12)
              goto LABEL_510;
            if (v321 <= v2)
              goto LABEL_511;
            *(_QWORD *)(v26 + 8 * v2) = *(_QWORD *)(v26 + 8 * v12);
            if ((unint64_t)v325 <= v12)
              goto LABEL_512;
            *(_QWORD *)(v4 + 8 * v12) ^= v337;
LABEL_69:
            if (v13 <= v2)
              goto LABEL_506;
            if (*(_QWORD *)&v16[8 * v2] == v2)
            {
              if (*((_QWORD *)v326 + 515) > v48 && (v51 = *(void **)(*((_QWORD *)v326 + 516) + 32 * v48)) != 0)
              {
                v12 = v51;
                v52 = objc_msgSend((id)v12, "protectionOptions");
                v32 = v326;
              }
              else
              {
                v12 = 0;
                v52 = 0;
              }
              if (v321 <= v2)
                goto LABEL_513;
              v53 = *(_QWORD *)(v26 + 8 * v2) | v52;
              *(_QWORD *)(v26 + 8 * v2) = v53;
              v54 = *((_QWORD *)v32 + 52) & v53;
              *(_QWORD *)(v26 + 8 * v2) = v54;
              if ((unint64_t)v325 <= v2)
                goto LABEL_514;
              v55 = 0x94D049BB133111EBLL
                  * ((0xBF58476D1CE4E5B9 * (v54 ^ (v54 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v54 ^ (v54 >> 30))) >> 27));
              *(_QWORD *)(v4 + 8 * v2) ^= (v55 >> 31) ^ v55;

            }
          }
        }
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew((uint64_t)v350, (uint64_t *)&v337);
      }
      v25 = v326;
      ++v2;
      v47 = *((_QWORD *)v326 + 501);
    }
    while (v2 < v47);
    if (v47)
    {
      v56 = 0;
      v2 = 0;
      v3 = v321;
      do
      {
        if (v325 == (char *)v2)
          goto LABEL_485;
        v57 = *(_QWORD *)(v4 + 8 * v2);
        v58 = *((_QWORD *)v326 + 503);
        if (v57)
        {
          *(_QWORD *)(v58 + v56 + 80) = v57;
          if (v321 <= v2)
            goto LABEL_490;
          v59 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v57 ^ (v57 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v57 ^ (v57 >> 30))) >> 27));
          v322 ^= (v59 >> 31) ^ v59;
        }
        else
        {
          *(_BYTE *)(v58 + v56 + 96) = 1;
          if (v13 <= v2)
            goto LABEL_492;
          v12 = *(_QWORD *)&v16[8 * v2];
          if ((unint64_t)v325 <= v12)
          {
LABEL_493:
            v334[0] = 0;
            v339 = 0u;
            v340 = 0u;
            memset(v338, 0, sizeof(v338));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v343 = 136315906;
            *(_QWORD *)&v343[4] = "operator[]";
            v344 = 1024;
            v345 = 468;
            v346 = 2048;
            v347 = v12;
            v348 = 2048;
            v349 = (unint64_t)v325;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_494:
            v334[0] = 0;
            v339 = 0u;
            v340 = 0u;
            memset(v338, 0, sizeof(v338));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v343 = 136315906;
            *(_QWORD *)&v343[4] = "operator[]";
            v344 = 1024;
            v345 = 468;
            v346 = 2048;
            v347 = v2;
            v348 = 2048;
            v349 = v3;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_495:
            v334[0] = 0;
            v339 = 0u;
            v340 = 0u;
            memset(v338, 0, sizeof(v338));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v343 = 136315906;
            *(_QWORD *)&v343[4] = "operator[]";
            v344 = 1024;
            v345 = 468;
            v346 = 2048;
            v347 = v2;
            v348 = 2048;
            v349 = v321;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_496;
          }
          *(_QWORD *)(v58 + v56 + 80) = *(_QWORD *)(v4 + 8 * v12);
          if (v321 <= v2)
            goto LABEL_494;
        }
        *(_QWORD *)(v58 + v56 + 72) = *(_QWORD *)(v26 + 8 * v2++);
        v56 += 104;
      }
      while (v47 != v2);
      v4 = 0xBF58476D1CE4E5B9;
    }
    else
    {
      v4 = 0xBF58476D1CE4E5B9;
      v3 = v321;
    }
    v60 = v322;
  }
  else
  {
    v60 = 0;
    v3 = v328;
  }
  v61.n128_f64[0] = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v350);
  if (v327 && v3)
    (*(void (**)(double))(*(_QWORD *)v327 + 40))(v61.n128_f64[0]);
  if (v318 && v13)
    (*(void (**)(__n128))(*(_QWORD *)v318 + 40))(v61);
  if (v330 && __s)
    (*(void (**)(__n128))(*(_QWORD *)v330 + 40))(v61);
  v62 = ((v320 << 6) - 0x61C8864680B583E9 + (v320 >> 2) + v60) ^ v320;
  v63 = v326;
  *((_QWORD *)v326 + 41) = v62;
  v64 = *((_QWORD *)v326 + 74);
  if (v64)
  {
    v2 = 0;
    v65 = 0;
    v12 = *((_QWORD *)v326 + 76);
    v3 = 80 * v64;
    do
    {
      v66 = v12 + v2;
      if ((*(_BYTE *)(v12 + v2 + 16) & 1) != 0)
        v67 = *(const char **)(v66 + 24);
      else
        v67 = (const char *)(v66 + 17);
      v68 = strlen(v67);
      if (v68)
      {
        MurmurHash3_x64_128((uint64_t)v67, v68, 0, (unint64_t *)v338);
        v69 = ((uint64_t)v338[1] + 64 * (uint64_t)v338[0] + ((unint64_t)v338[0] >> 2) - 0x61C8864680B583E9) ^ (uint64_t)v338[0];
      }
      else
      {
        v69 = 0;
      }
      v70 = v12 + v2;
      if ((*(_BYTE *)(v12 + v2 + 48) & 1) != 0)
        v71 = *(const char **)(v70 + 56);
      else
        v71 = (const char *)(v70 + 49);
      v72 = strlen(v71);
      if (v72)
      {
        MurmurHash3_x64_128((uint64_t)v71, v72, 0, (unint64_t *)v338);
        v73 = ((uint64_t)v338[1] + 64 * (uint64_t)v338[0] + ((unint64_t)v338[0] >> 2) - 0x61C8864680B583E9) ^ (uint64_t)v338[0];
      }
      else
      {
        v73 = 0;
      }
      v63 = v326;
      v74 = ((v69 << 6) - 0x61C8864680B583E9 + (v69 >> 2) + v73) ^ v69;
      v75 = 0xBF58476D1CE4E5B9 * (*(unsigned int *)(v12 + v2) ^ ((unint64_t)*(unsigned int *)(v12 + v2) >> 30));
      v76 = ((v65 << 6)
           - 0x61C8864680B583E9
           + (v65 >> 2)
           + ((0x94D049BB133111EBLL * (v75 ^ (v75 >> 27))) ^ ((0x94D049BB133111EBLL * (v75 ^ (v75 >> 27))) >> 31))) ^ v65;
      v65 = (((*(_QWORD *)(v12 + v2 + 72) - 0x61C8864680B583E9 + (v74 << 6) + (v74 >> 2)) ^ v74)
           - 0x61C8864680B583E9
           + (v76 << 6)
           + (v76 >> 2)) ^ v76;
      v2 += 80;
    }
    while (v3 != v2);
  }
  else
  {
    v65 = 0;
  }
  v77 = ((v62 << 6) - 0x61C8864680B583E9 + (v62 >> 2) + v65) ^ v62;
  *((_BYTE *)v63 + 256) = 1;
  v78 = (void *)((*((_QWORD *)v63 + 24) - 0x61C8864680B583E9 + (v77 << 6) + (v77 >> 2)) ^ v77);
  *((_QWORD *)v63 + 41) = v78;
  v79 = *((_QWORD *)v63 + 46);
  if (*((_BYTE *)v63 + 425))
  {
    v78 = (void *)(v79 & 0xFFFFFFFFFFFFFFFLL);
    *((_QWORD *)v63 + 41) = v79 & 0xFFFFFFFFFFFFFFFLL;
  }
  v80 = *(_QWORD *)v63;
  v338[0] = v78;
  v81 = v63;
  v82 = re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find((_QWORD *)(v80 + 424), (uint64_t *)v338);
  if (v82 != -1)
  {
    *(_QWORD *)(*(_QWORD *)(v80 + 432) + 24 * v82 + 16) = v79;
    CachedGraph = (_QWORD *)re::RenderGraphManager::getCachedGraph(*(_QWORD *)v81, *((_QWORD *)v81 + 41), *((_QWORD *)v81 + 46));
    v84 = (_anonymous_namespace_ *)re::RenderFrame::fillSpecifyParameterScopeOutputs(*((_QWORD *)v81 + 501), *((_QWORD *)v81 + 503), CachedGraph[97], CachedGraph[95]);
    v316 = CachedGraph;
    v85 = CachedGraph[100];
    if (v85)
    {
      v86 = CachedGraph[102];
      v325 = (char *)(v86 + 40 * v85);
      v4 = (unint64_t)&v340 + 8;
      v321 = (unint64_t)&v338[1];
      v2 = v86 + 32;
      do
      {
        v88 = v2 - 32;
        v87 = *(void **)(v2 - 32);
        v89 = *(unsigned __int8 *)(v2 - 8);
        if (*(_BYTE *)(v2 - 8))
          v5 = *(_QWORD *)v2;
        v12 = *(unsigned int *)(v2 - 24);
        v3 = *(unsigned int *)(v2 - 20);
        v13 = *(unsigned __int8 *)(v2 - 16);
        memset(v338, 0, 24);
        LODWORD(v338[3]) = -1;
        *(_OWORD *)&v338[4] = 0u;
        v339 = 0u;
        re::DynamicString::setCapacity(&v338[4], 0);
        BYTE1(v340) = 0;
        *((_QWORD *)&v340 + 1) = 0;
        *(_QWORD *)v341 = 0;
        *(_QWORD *)&v341[8] = 0xFFFFFFFFLL;
        v341[16] = 0;
        if (v89)
        {
          v22 = *((_QWORD *)v326 + 501);
          v90 = v5;
          if (v22 <= v5)
            goto LABEL_489;
          v91 = *((_QWORD *)v326 + 503) + 104 * v5;
          v338[0] = *(id *)v91;
          NS::SharedPtr<MTL::Texture>::operator=(&v338[1], (void **)(v91 + 8));
          NS::SharedPtr<MTL::Texture>::operator=(&v338[2], (void **)(v91 + 16));
          LODWORD(v338[3]) = *(_DWORD *)(v91 + 24);
          re::DynamicString::operator=((re::DynamicString *)&v338[4], (re::DynamicString *)(v91 + 32));
          v92 = *(_OWORD *)(v91 + 64);
          v93 = *(_OWORD *)(v91 + 80);
          v341[16] = *(_BYTE *)(v91 + 96);
          v340 = v92;
          *(_OWORD *)v341 = v93;
        }
        v338[0] = v87;
        LODWORD(v338[3]) = v12;
        *(_DWORD *)&v341[8] = v3;
        LOBYTE(v340) = v13;
        v94 = re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::add((re::RenderFrame *)((char *)v326 + 3992), (uint64_t)v338);
        if (v338[4])
        {
          if (((uint64_t)v338[5] & 1) != 0)
            (*(void (**)(__n128))(*(_QWORD *)v338[4] + 40))(v94);
          *(_OWORD *)&v338[4] = 0u;
          v339 = 0u;
        }
        if (v338[2])
        {

          v338[2] = 0;
        }
        v84 = (_anonymous_namespace_ *)v338[1];
        if (v338[1])

        v2 += 40;
      }
      while ((char *)(v88 + 40) != v325);
    }
    v95 = v316[81];
    v96 = v316[79];
    if (v317)
    {
      ++*((_DWORD *)v317 + 1);
      v97 = (_DWORD *)((char *)v317 + 8);
      goto LABEL_139;
    }
    goto LABEL_468;
  }
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v334, 5099, *((_BYTE *)v81 + 425) == 0);
  *((_BYTE *)v81 + 336) = 1;
  v99 = v81;
  if (*((_QWORD *)v81 + 69))
  {
    v3 = 0;
    v5 = 0;
    v100 = 0;
    v2 = (size_t)&str_275;
    do
    {
      v101 = *((_QWORD *)v99 + 71);
      v12 = v101 + 40 * v3;
      re::RenderFrame::setRenderGraphScopes(v326, *(const char **)v12, *(const char **)(v12 + 8));
      v99 = v326;
      if (*((_QWORD *)v326 + 74) > (unint64_t)v5)
      {
        v4 = v5;
        while (1)
        {
          v103 = *((_QWORD *)v99 + 76);
          if (*(_DWORD *)(v103 + 80 * v4) > v100)
            break;
          v104 = v103 + 80 * v4;
          v333 = *(_QWORD *)(v104 + 72);
          if ((*(_BYTE *)(v104 + 16) & 1) != 0)
            v105 = *(const char **)(v103 + 80 * v4 + 24);
          else
            v105 = (const char *)(v103 + 80 * v4 + 17);
          if ((*(_BYTE *)(v103 + 80 * v4 + 48) & 1) != 0)
            v106 = *(const char **)(v103 + 80 * v4 + 56);
          else
            v106 = (const char *)(v103 + 80 * v4 + 49);
          v4 = (v5 + 1);
          v102.n128_f64[0] = re::RenderFrame::pickupScopeLaneInternal(v326, &v333, v105, v106);
          v99 = v326;
          v333 = 0;
          v5 = v4;
          if (*((_QWORD *)v326 + 74) <= (unint64_t)v4)
            goto LABEL_154;
        }
      }
      v4 = v5;
LABEL_154:
      v107 = v101 + 40 * v3;
      v108 = *(_QWORD *)(v107 + 24);
      if (v108)
      {
        v109 = *(_QWORD **)(v107 + 32);
        v110 = 8 * v108;
        do
        {
          if (*v109)
          {
            (*(void (**)(_QWORD, _QWORD, _QWORD, re::RenderFrame *, __n128))(*(_QWORD *)*v109 + 24))(*v109, *(_QWORD *)v12, *(_QWORD *)(v12 + 8), v326, v102);
            v99 = v326;
          }
          ++v109;
          v110 -= 8;
        }
        while (v110);
      }
      *((_QWORD *)v99 + 43) = &str_275;
      *((_QWORD *)v99 + 44) = &str_275;
      *((_QWORD *)v99 + 45) = 0;
      v5 = v4;
      v3 = ++v100;
    }
    while (*((_QWORD *)v99 + 69) > (unint64_t)v100);
  }
  re::RenderFrame::fillSpecifyParameterScopeOutputs(*((_QWORD *)v99 + 501), *((_QWORD *)v326 + 503), *((_QWORD *)v99 + 472), *((_QWORD *)v99 + 470));
  v111 = v326;
  v13 = *((_QWORD *)v326 + 470);
  if (v13)
  {
    v112 = (_DWORD *)(*((_QWORD *)v326 + 472) + 32);
    v113 = *((_QWORD *)v326 + 470);
    do
    {
      *v112 = 0;
      v112 += 34;
      --v113;
    }
    while (v113);
    v114 = 0;
    v115 = (re::RenderFrame *)((char *)v326 + 3448);
    v3 = 144;
    do
    {
      v116 = *((_QWORD *)v111 + 472);
      v117 = v116 + 136 * v114;
      v118 = *(unsigned int *)(v117 + 72);
      v325 = (char *)(v117 + 72);
      v4 = 0;
      if (*(_DWORD *)(v117 + 72))
      {
        v119 = *(int **)(v116 + 136 * v114 + 56);
        while (1)
        {
          v120 = *v119;
          v119 += 36;
          if (v120 < 0)
            break;
          if (v118 == ++v4)
          {
            v4 = v118;
            break;
          }
        }
      }
      v323 = v114;
      if ((_DWORD)v118 != (_DWORD)v4)
      {
        v5 = v4;
        v13 = v116 + 136 * v114 + 56;
        do
        {
          v12 = *(_QWORD *)v13;
          v121 = *(_QWORD *)v13 + 144 * v5;
          if (*(_DWORD *)(v121 + 104) != -1
            && *(_DWORD *)(v12 + 144 * v5 + 108) != -1
            && *(_DWORD *)re::RenderGraphResourceDescriptions::targetDescription(v115, (uint64_t *)(v121 + 96)) == 3)
          {
            *(_BYTE *)(v12 + 144 * v5 + 128) = 1;
            v22 = *((_QWORD *)v326 + 470);
            v122 = v323;
            if (v22 <= v323)
              goto LABEL_482;
            ++*(_DWORD *)(*((_QWORD *)v326 + 472) + 136 * v323 + 32);
          }
          v123 = v121 + 16;
          v124 = *(_QWORD *)(v123 + 16);
          if (v124)
          {
            v125 = 0;
            v126 = 0;
            v3 = v12 + 144 * v5 + 108;
            do
            {
              v127 = *(_QWORD *)(v123 + 32) + v125;
              if (*(_DWORD *)(v127 + 12) != *(_DWORD *)v3)
              {
                if (*(_DWORD *)re::RenderGraphResourceDescriptions::targetDescription(v115, (uint64_t *)v127) == 3)
                {
                  *(_BYTE *)(v12 + 144 * v5 + 128) = 1;
                  v22 = *((_QWORD *)v326 + 470);
                  v128 = v323;
                  if (v22 <= v323)
                    goto LABEL_480;
                  ++*(_DWORD *)(*((_QWORD *)v326 + 472) + 136 * v323 + 32);
                  break;
                }
                v124 = *(_QWORD *)(v123 + 16);
              }
              ++v126;
              v125 += 16;
            }
            while (v124 > v126);
          }
          v3 = 144;
          v129 = v12 + 144 * v5;
          v131 = *(unsigned __int8 *)(v129 + 128);
          v130 = (_BYTE *)(v129 + 128);
          if (!v131)
          {
            v135 = v12 + 144 * v5;
            v137 = *(_QWORD *)(v135 + 72);
            v136 = (size_t *)(v135 + 72);
            if (v137)
            {
              v138 = 0;
              v2 = 0;
              v12 += 144 * v5 + 88;
              while (*(_DWORD *)re::RenderGraphResourceDescriptions::bufferDescription(v115, (uint64_t *)(*(_QWORD *)v12 + v138)) != 3)
              {
                ++v2;
                v138 += 16;
                if (*v136 <= v2)
                  goto LABEL_186;
              }
              *v130 = 1;
              v22 = *((_QWORD *)v326 + 470);
              v139 = v323;
              if (v22 <= v323)
                goto LABEL_486;
              ++*(_DWORD *)(*((_QWORD *)v326 + 472) + 136 * v323 + 32);
            }
          }
LABEL_186:
          v132 = *(_DWORD *)v325;
          if (*(_DWORD *)v325 <= (v4 + 1))
            v133 = (v4 + 1);
          else
            v133 = v132;
          while (1)
          {
            v5 = (v4 + 1);
            if ((_DWORD)v133 - 1 == (_DWORD)v4)
              break;
            LODWORD(v4) = v4 + 1;
            v134 = v5;
            if ((*(_DWORD *)(*(_QWORD *)v13 + 144 * v5) & 0x80000000) != 0)
              goto LABEL_193;
          }
          v134 = v133;
LABEL_193:
          v4 = v134;
        }
        while (v132 != (_DWORD)v134);
        v111 = v326;
        v13 = *((_QWORD *)v326 + 470);
        v114 = v323;
      }
      if (v13 <= v114)
        goto LABEL_491;
      v140 = *((_QWORD *)v111 + 472);
      v141 = v140 + 136 * v114;
      v142 = *(unsigned int *)(v141 + 120);
      v321 = v141 + 120;
      v4 = 0;
      if (*(_DWORD *)(v141 + 120))
      {
        v143 = *(int **)(v140 + 136 * v114 + 104);
        while (1)
        {
          v144 = *v143;
          v143 += 36;
          if (v144 < 0)
            break;
          if (v142 == ++v4)
          {
            v4 = v142;
            break;
          }
        }
      }
      if ((_DWORD)v142 != (_DWORD)v4)
      {
        v5 = v4;
        v13 = v140 + 136 * v114 + 104;
        do
        {
          v145 = *(_QWORD *)v13;
          v146 = *(_QWORD *)v13 + 144 * v5;
          if (*(_DWORD *)(v146 + 120) != -1
            && *(_DWORD *)(v146 + 124) != -1
            && *(_DWORD *)re::RenderGraphResourceDescriptions::bufferDescription(v115, (uint64_t *)(v146 + 112)) == 3)
          {
            *(_BYTE *)(v145 + 144 * v5 + 128) = 1;
            v22 = *((_QWORD *)v326 + 470);
            v147 = v323;
            if (v22 <= v323)
              goto LABEL_483;
            ++*(_DWORD *)(*((_QWORD *)v326 + 472) + 136 * v323 + 32);
          }
          v325 = (char *)v146;
          v148 = v145 + 144 * v5;
          v151 = *(_QWORD *)(v148 + 72);
          v150 = (unint64_t *)(v148 + 72);
          v149 = v151;
          if (v151)
          {
            v152 = 0;
            v3 = 0;
            v153 = v145 + 144 * v5;
            v12 = v153 + 88;
            v2 = v153 + 124;
            do
            {
              v154 = *(_QWORD *)v12 + v152;
              if (*(_DWORD *)(v154 + 12) != *(_DWORD *)v2)
              {
                if (*(_DWORD *)re::RenderGraphResourceDescriptions::bufferDescription(v115, (uint64_t *)v154) == 3)
                {
                  *(_BYTE *)(v145 + 144 * v5 + 128) = 1;
                  v22 = *((_QWORD *)v326 + 470);
                  v155 = v323;
                  if (v22 <= v323)
                    goto LABEL_481;
                  ++*(_DWORD *)(*((_QWORD *)v326 + 472) + 136 * v323 + 32);
                  break;
                }
                v149 = *v150;
              }
              ++v3;
              v152 += 16;
            }
            while (v149 > v3);
          }
          v3 = 144;
          v156 = v145 + 144 * v5;
          v158 = *(unsigned __int8 *)(v156 + 128);
          v157 = (_BYTE *)(v156 + 128);
          if (!v158 && *((_QWORD *)v325 + 4))
          {
            v162 = 0;
            v2 = 0;
            while (*(_DWORD *)re::RenderGraphResourceDescriptions::targetDescription(v115, (uint64_t *)(*((_QWORD *)v325 + 6) + v162)) != 3)
            {
              ++v2;
              v162 += 16;
              if (*((_QWORD *)v325 + 4) <= v2)
                goto LABEL_225;
            }
            *v157 = 1;
            v22 = *((_QWORD *)v326 + 470);
            v163 = v323;
            if (v22 <= v323)
              goto LABEL_487;
            ++*(_DWORD *)(*((_QWORD *)v326 + 472) + 136 * v323 + 32);
          }
LABEL_225:
          v159 = *(_DWORD *)v321;
          if (*(_DWORD *)v321 <= (v4 + 1))
            v160 = (v4 + 1);
          else
            v160 = v159;
          while (1)
          {
            v5 = (v4 + 1);
            if ((_DWORD)v160 - 1 == (_DWORD)v4)
              break;
            LODWORD(v4) = v4 + 1;
            v161 = v5;
            if ((*(_DWORD *)(*(_QWORD *)v13 + 144 * v5) & 0x80000000) != 0)
              goto LABEL_232;
          }
          v161 = v160;
LABEL_232:
          v4 = v161;
        }
        while (v159 != (_DWORD)v161);
        v111 = v326;
        v13 = *((_QWORD *)v326 + 470);
        v114 = v323;
      }
      ++v114;
    }
    while (v13 > v114);
  }
  v164 = *((_QWORD *)v111 + 501);
  if (v164)
  {
    v165 = 0;
    v166 = *((_QWORD *)v326 + 503);
    do
    {
      v167 = (uint64_t *)(v166 + 104 * v165);
      v22 = *((unsigned int *)v167 + 22);
      if (v13 >= v22)
      {
        if (v13 <= v22)
          goto LABEL_501;
        v168 = *((_QWORD *)v326 + 472);
        v169 = v168 + 136 * v22;
        v172 = *(_DWORD *)(v169 + 32);
        v170 = (_DWORD *)(v169 + 32);
        v171 = v172;
        if (v172)
        {
          v173 = *(unsigned int *)(v168 + 136 * v22 + 72);
          if ((_DWORD)v173)
          {
            v174 = 0;
            v175 = *(int **)(v168 + 136 * v22 + 56);
            while (1)
            {
              v176 = *v175;
              v175 += 36;
              if (v176 < 0)
                break;
              if (v173 == ++v174)
              {
                LODWORD(v174) = *(_DWORD *)(v168 + 136 * v22 + 72);
                break;
              }
            }
          }
          else
          {
            LODWORD(v174) = 0;
          }
          if ((_DWORD)v173 != (_DWORD)v174)
          {
            v177 = v174;
            v178 = (uint64_t *)(v168 + 136 * v22 + 56);
            v179 = *v167;
            do
            {
              v180 = *v178;
              if (v179 == *(_QWORD *)(*v178 + 144 * v177 + 8))
              {
                v181 = v180 + 144 * v177;
                v183 = *(unsigned __int8 *)(v181 + 128);
                v182 = (_BYTE *)(v181 + 128);
                if (v183)
                {
                  *v182 = 0;
                  *(_QWORD *)(v180 + 144 * v177 + 136) = v165;
                  *v170 = --v171;
                }
              }
              if (v173 <= (int)v174 + 1)
                v184 = v174 + 1;
              else
                v184 = v173;
              while (1)
              {
                v177 = (v174 + 1);
                if (v184 - 1 == (_DWORD)v174)
                  break;
                LODWORD(v174) = v174 + 1;
                v185 = v177;
                if ((*(_DWORD *)(*v178 + 144 * v177) & 0x80000000) != 0)
                  goto LABEL_265;
              }
              v185 = v184;
LABEL_265:
              LODWORD(v174) = v185;
            }
            while ((_DWORD)v173 != v185);
          }
          v186 = *(unsigned int *)(v168 + 136 * v22 + 120);
          if ((_DWORD)v186)
          {
            v187 = 0;
            v188 = *(int **)(v168 + 136 * v22 + 104);
            while (1)
            {
              v189 = *v188;
              v188 += 36;
              if (v189 < 0)
                break;
              if (v186 == ++v187)
              {
                LODWORD(v187) = *(_DWORD *)(v168 + 136 * v22 + 120);
                break;
              }
            }
          }
          else
          {
            LODWORD(v187) = 0;
          }
          if ((_DWORD)v186 != (_DWORD)v187)
          {
            v190 = v187;
            v191 = (uint64_t *)(v168 + 136 * v22 + 104);
            v192 = *v167;
            do
            {
              v193 = *v191;
              if (v192 == *(_QWORD *)(*v191 + 144 * v190 + 8))
              {
                v194 = v193 + 144 * v190;
                v196 = *(unsigned __int8 *)(v194 + 128);
                v195 = (_BYTE *)(v194 + 128);
                if (v196)
                {
                  *v195 = 0;
                  *(_QWORD *)(v193 + 144 * v190 + 136) = v165;
                  *v170 = --v171;
                }
              }
              if (v186 <= (int)v187 + 1)
                v197 = v187 + 1;
              else
                v197 = v186;
              while (1)
              {
                v190 = (v187 + 1);
                if (v197 - 1 == (_DWORD)v187)
                  break;
                LODWORD(v187) = v187 + 1;
                v198 = v190;
                if ((*(_DWORD *)(*v191 + 144 * v190) & 0x80000000) != 0)
                  goto LABEL_284;
              }
              v198 = v197;
LABEL_284:
              LODWORD(v187) = v198;
            }
            while ((_DWORD)v186 != v198);
          }
        }
      }
      ++v165;
    }
    while (v165 != v164);
  }
  v199 = v326;
  re::RenderFrame::specifyDepthOrStencilLaneWhenColorIsSpecified(v326, re::RenderFrame::kStencilOutputLaneID);
  re::RenderFrame::specifyDepthOrStencilLaneWhenColorIsSpecified(v326, re::RenderFrame::kDepthOutputLaneID);
  if (*((_QWORD *)v326 + 470))
  {
    v200 = 0;
    v13 = 65290051;
    v3 = (unint64_t)&v340 + 8;
    v2 = (size_t)v326 + 3784;
    v4 = 1;
    v5 = 136;
    do
    {
      v201 = *((_QWORD *)v199 + 472);
      if (*(_DWORD *)(v201 + 136 * v200 + 32))
      {
        v338[0] = (id)65290051;
        v202 = (_anonymous_namespace_ *)re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v201 + 136 * v200 + 40, (uint64_t *)v338);
        v199 = v326;
        if (v202)
        {
          v12 = (unint64_t)v202;
          if (*((_BYTE *)v202 + 112))
          {
            memset(v338, 0, 24);
            LODWORD(v338[3]) = -1;
            *(_OWORD *)&v338[4] = 0u;
            v339 = 0u;
            re::DynamicString::setCapacity(&v338[4], 0);
            BYTE1(v340) = 0;
            *((_QWORD *)&v340 + 1) = 0;
            *(_QWORD *)v341 = 0;
            *(_QWORD *)&v341[8] = 0xFFFFFFFFLL;
            v341[16] = 0;
            v203 = *((_QWORD *)v326 + 470);
            if (v203 <= v200)
              goto LABEL_503;
            re::DynamicString::operator=((re::DynamicString *)&v338[4], *((_QWORD *)v326 + 472) + 136 * v200);
            *(_DWORD *)&v341[8] = v4 - 1;
            v338[0] = (id)65290051;
            LODWORD(v338[3]) = 0;
            LOWORD(v340) = 257;
            re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::add((re::RenderFrame *)((char *)v326 + 3992), (uint64_t)v338);
            *(id *)&v350[0].var0 = v338[0];
            v350[0].var1 = (char *)__PAIR64__(*(unsigned int *)&v341[8], v338[3]);
            *(_WORD *)&v350[1].var0 = v340;
            LOBYTE(v350[1].var1) = 0;
            re::DynamicArray<re::AutomaticSpecifyScopeParameters>::add((_anonymous_namespace_ *)v2, (uint64_t)v350);
            v199 = v326;
            *(_BYTE *)(v12 + 112) = 0;
            *(_QWORD *)(v12 + 120) = *((_QWORD *)v326 + 501) - 1;
            v12 = *((_QWORD *)v326 + 470);
            if (v12 <= v200)
              goto LABEL_504;
            --*(_DWORD *)(*((_QWORD *)v326 + 472) + 136 * v200 + 32);
            if (v338[4])
            {
              if (((uint64_t)v338[5] & 1) != 0)
              {
                (*(void (**)(void))(*(_QWORD *)v338[4] + 40))();
                v199 = v326;
              }
              *(_OWORD *)&v338[4] = 0u;
              v339 = 0u;
            }
            if (v338[2])
            {

              v199 = v326;
              v338[2] = 0;
            }
            if (v338[1])
            {

              v199 = v326;
            }
          }
        }
      }
      v200 = v4;
      v204 = *((_QWORD *)v199 + 470) > (unint64_t)v4;
      v4 = (v4 + 1);
    }
    while (v204);
  }
  v205 = *((_QWORD *)v199 + 515);
  __asm { FMOV            V8.2S, #1.0 }
  if (v205)
  {
    v209 = 0;
    v210 = 0;
    v12 = (unint64_t)&v338[1] + 4;
    v211 = (re::RenderFrame *)((char *)v199 + 3576);
    v4 = -1;
    v325 = 0;
    v321 = -1;
    v3 = 2;
    do
    {
      if (v205 > v210 && *(_QWORD *)(*((_QWORD *)v199 + 516) + v209))
      {
        LODWORD(v338[0]) = 3;
        *(id *)((char *)v338 + 4) = (id)0x200000000;
        memset((char *)&v338[1] + 4, 255, 24);
        BYTE4(v338[4]) = 0;
        v338[5] = _D8;
        v339 = xmmword_226135530;
        v340 = xmmword_226135540;
        *(_DWORD *)v341 = -1;
        *(_OWORD *)&v341[8] = xmmword_2260FF4D0;
        v342 = 0;
        LODWORD(v338[0]) = 2;
        v212 = re::StringID::StringID((re::StringID *)v343, v350);
        *(_QWORD *)&v341[16] = ((*(_QWORD *)v343 >> 3) + 0x8756A0D28FEDB54 + (*(_QWORD *)v343 >> 1 << 6)) ^ (*(_QWORD *)v343 >> 1);
        re::StringID::destroyString(v212);
        v342 = 1;
        re::RenderFrame::createTarget(v199, (const re::RenderGraphTargetDescription *)v338, v350[0].var1, &v330);
        re::DynamicArray<re::RenderGraphTargetHandle>::add(v211, (double *)&v330);
        re::StringID::destroyString((re::StringID *)v350);
      }
      else
      {
        v338[0] = 0;
        v338[1] = (id)-1;
        re::DynamicArray<re::RenderGraphTargetHandle>::add(v211, (double *)v338);
      }
      ++v210;
      v199 = v326;
      v205 = *((_QWORD *)v326 + 515);
      v209 += 32;
    }
    while (v205 > v210);
  }
  if (*((_QWORD *)v199 + 501))
  {
    v4 = 0;
    v213 = 0;
    v12 = (unint64_t)&v338[1] + 4;
    v214 = (uint64_t)v199 + 3616;
    v215 = &off_24ED75398;
    v3 = 2;
    v325 = 0;
    do
    {
      v216 = *((_QWORD *)v199 + 503);
      v217 = v216 + v4;
      if (!*(_BYTE *)(v216 + v4 + 96))
      {
        if (*(_QWORD *)(v217 + 8))
        {
          if (*(_DWORD *)(v216 + v4 + 88) != -1)
            goto LABEL_320;
        }
        else
        {
          if (*(_QWORD *)(v216 + v4 + 16))
            v221 = *(_DWORD *)(v216 + v4 + 88) == -1;
          else
            v221 = 1;
          if (!v221)
          {
LABEL_320:
            LODWORD(v338[1]) = 2;
            memset((char *)&v338[1] + 4, 255, 24);
            BYTE4(v338[4]) = 0;
            v338[5] = _D8;
            v339 = xmmword_226135530;
            v340 = xmmword_226135540;
            *(_DWORD *)v341 = -1;
            *(_QWORD *)&v341[8] = -1;
            v338[0] = (id)2;
            v222 = v216 + v4;
            *(_QWORD *)&v341[16] = ((*(_QWORD *)(v216 + v4 + 80) << 6)
                                  + 0x8756A0D28FEDB54
                                  + (*(_QWORD *)(v216 + v4 + 80) >> 2)) ^ *(_QWORD *)(v216 + v4 + 80);
            v342 = 1;
            if (v213 > 0x1F)
            {
              v224 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"SpecifyLaneOp%d", (re::DynamicString *)v350, v213);
              if (((uint64_t)v350[0].var1 & 1) != 0)
                v225 = *(const char **)&v350[1].var0;
              else
                v225 = (char *)&v350[0].var1 + 1;
              v330 = 0;
              __s = (char *)&str_110;
              if (*(_QWORD *)&v350[0].var0 && ((uint64_t)v350[0].var1 & 1) != 0)
                (*(void (**)(void))(**(_QWORD **)&v350[0].var0 + 40))();
              v223 = __s;
              v3 = 2;
            }
            else
            {
              v223 = *v215;
              v330 = 2 * (_QWORD)*(v215 - 1);
              __s = v223;
            }
            re::RenderFrame::createTarget(v326, (const re::RenderGraphTargetDescription *)v338, v223, v350);
            re::StringID::destroyString((re::StringID *)&v330);
            v330 = *(_QWORD *)(v222 + 80);
            v219 = &v330;
            v220 = v350;
            goto LABEL_332;
          }
        }
      }
      v218 = *(_QWORD *)(v217 + 80);
      v338[0] = 0;
      v338[1] = (id)-1;
      *(_QWORD *)&v350[0].var0 = v218;
      v219 = (uint64_t *)v350;
      v220 = v338;
LABEL_332:
      re::HashTable<unsigned long long,re::RenderGraphTargetHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(v214, v219, v220);
      ++v213;
      v199 = v326;
      v4 += 104;
      v215 += 2;
    }
    while (*((_QWORD *)v326 + 501) > v213);
  }
  v226 = *((_QWORD *)v199 + 470);
  if (v226)
  {
    v22 = *((_QWORD *)v199 + 472);
    v319 = v22 + 136 * v226;
    v227 = (uint64_t)v199 + 3448;
    while (1)
    {
      v324 = *(unsigned int *)(v22 + 72);
      v2 = 0;
      if ((_DWORD)v324)
      {
        v228 = *(int **)(v22 + 56);
        while (1)
        {
          v229 = *v228;
          v228 += 36;
          if (v229 < 0)
            break;
          if (v324 == ++v2)
          {
            v2 = *(unsigned int *)(v22 + 72);
            break;
          }
        }
      }
      if ((_DWORD)v324 != (_DWORD)v2)
        break;
LABEL_341:
      v12 = *(unsigned int *)(v22 + 120);
      if ((_DWORD)v12)
      {
        v5 = 0;
        v230 = *(int **)(v22 + 104);
        while (1)
        {
          v231 = *v230;
          v230 += 36;
          if (v231 < 0)
            break;
          if (v12 == ++v5)
          {
            v5 = *(unsigned int *)(v22 + 120);
            break;
          }
        }
      }
      else
      {
        v5 = 0;
      }
      if ((_DWORD)v12 != (_DWORD)v5)
      {
        v4 = v5;
        do
        {
          v248 = *(_QWORD *)(v22 + 104);
          v249 = v248 + 144 * v4;
          v13 = *(_QWORD *)(v249 + 136);
          if (v13 != -1)
          {
            v16 = (char *)*((_QWORD *)v326 + 501);
            if ((unint64_t)v16 <= v13)
              goto LABEL_479;
            v250 = v249 + 16;
            v325 = (char *)*((_QWORD *)v326 + 503);
            v251 = *(_QWORD *)(v249 + 32);
            if (v251)
            {
              v252 = *(uint64_t **)(v250 + 32);
              v2 = (size_t)&v325[104 * v13 + 72];
              v3 = 16 * v251;
              do
              {
                v253 = re::RenderGraphResourceDescriptions::targetDescription((re *)v227, v252);
                if (*(_QWORD *)(v253 + 88) == -1)
                  *(_QWORD *)(v253 + 88) = *(_QWORD *)v2;
                v252 += 2;
                v3 -= 16;
              }
              while (v3);
            }
            v254 = v248 + 144 * v4;
            v255 = *(_QWORD *)(v254 + 72);
            if (v255)
            {
              v256 = *(uint64_t **)(v254 + 88);
              v2 = 16 * v255;
              do
              {
                v257 = re::RenderGraphResourceDescriptions::bufferDescription((re *)v227, v256);
                if (*(_QWORD *)(v257 + 32) == -1)
                  *(_QWORD *)(v257 + 32) = *(_QWORD *)&v325[104 * v13 + 72];
                v256 += 2;
                v2 -= 16;
              }
              while (v2);
            }
          }
          LODWORD(v258) = *(_DWORD *)(v22 + 120);
          if (v258 <= (int)v5 + 1)
            v258 = (v5 + 1);
          else
            v258 = v258;
          while (1)
          {
            v4 = (v5 + 1);
            if ((_DWORD)v258 - 1 == (_DWORD)v5)
              break;
            LODWORD(v5) = v5 + 1;
            v259 = v4;
            if ((*(_DWORD *)(*(_QWORD *)(v22 + 104) + 144 * v4) & 0x80000000) != 0)
              goto LABEL_399;
          }
          v259 = v258;
LABEL_399:
          v5 = v259;
        }
        while ((_DWORD)v12 != (_DWORD)v259);
      }
      v22 += 136;
      v199 = v326;
      if (v22 == v319)
        goto LABEL_401;
    }
    v5 = v2;
    while (1)
    {
      v321 = *(_QWORD *)(v22 + 56);
      v232 = v321 + 144 * v5;
      v13 = *(_QWORD *)(v232 + 136);
      if (v13 != -1)
        goto LABEL_348;
      ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex(v199, *(const char **)(v22 + 24));
      if (ScopeOutputIndex != -1)
        break;
LABEL_366:
      LODWORD(v246) = *(_DWORD *)(v22 + 72);
      if (v246 <= (int)v2 + 1)
        v246 = (v2 + 1);
      else
        v246 = v246;
      v199 = v326;
      while (1)
      {
        v5 = (v2 + 1);
        if ((_DWORD)v246 - 1 == (_DWORD)v2)
          break;
        LODWORD(v2) = v2 + 1;
        v247 = v5;
        if ((*(_DWORD *)(*(_QWORD *)(v22 + 56) + 144 * v5) & 0x80000000) != 0)
          goto LABEL_374;
      }
      v247 = v246;
LABEL_374:
      v2 = v247;
      if ((_DWORD)v324 == (_DWORD)v247)
        goto LABEL_341;
    }
    v4 = v321 + 144 * v5 + 8;
    v325 = (char *)*((_QWORD *)v326 + 470);
    while (1)
    {
      v3 = ScopeOutputIndex;
      if ((unint64_t)v325 <= ScopeOutputIndex)
        break;
      v12 = (unint64_t)v326;
      v245 = *((_QWORD *)v326 + 472);
      if (!re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v245 + 136 * ScopeOutputIndex + 40, *(_QWORD *)v4))
      {
        v13 = MEMORY[0x78];
        if (MEMORY[0x78] != -1)
        {
          v199 = v326;
          v232 = v321 + 144 * v5;
LABEL_348:
          v16 = (char *)*((_QWORD *)v199 + 501);
          if ((unint64_t)v16 > v13)
          {
            v233 = v232 + 16;
            v234 = *((_QWORD *)v199 + 503);
            v235 = *(_QWORD *)(v232 + 32);
            if (v235)
            {
              v236 = *(uint64_t **)(v233 + 32);
              v3 = v234 + 104 * v13 + 72;
              v4 = 16 * v235;
              do
              {
                v237 = re::RenderGraphResourceDescriptions::targetDescription((re *)v227, v236);
                if (*(_QWORD *)(v237 + 88) == -1)
                  *(_QWORD *)(v237 + 88) = *(_QWORD *)v3;
                v236 += 2;
                v4 -= 16;
              }
              while (v4);
            }
            v238 = v321 + 144 * v5;
            v239 = *(_QWORD *)(v238 + 72);
            if (v239)
            {
              v240 = *(uint64_t **)(v238 + 88);
              v241 = (_QWORD *)(v234 + 104 * v13 + 72);
              v242 = 16 * v239;
              do
              {
                v243 = re::RenderGraphResourceDescriptions::bufferDescription((re *)v227, v240);
                if (*(_QWORD *)(v243 + 32) == -1)
                  *(_QWORD *)(v243 + 32) = *v241;
                v240 += 2;
                v242 -= 16;
              }
              while (v242);
            }
            goto LABEL_366;
          }
LABEL_478:
          *(_QWORD *)v343 = 0;
          v339 = 0u;
          v340 = 0u;
          memset(v338, 0, sizeof(v338));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v350[0].var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315906;
          *(_QWORD *)(&v350[0].var0 + 1) = "operator[]";
          WORD2(v350[0].var1) = 1024;
          *(_DWORD *)((char *)&v350[0].var1 + 6) = 789;
          *((_WORD *)&v350[1].var0 + 1) = 2048;
          *(_QWORD *)(&v350[1].var0 + 1) = v13;
          WORD2(v350[1].var1) = 2048;
          *(char **)((char *)&v350[1].var1 + 6) = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_479:
          *(_QWORD *)v343 = 0;
          v339 = 0u;
          v340 = 0u;
          memset(v338, 0, sizeof(v338));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v350[0].var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315906;
          *(_QWORD *)(&v350[0].var0 + 1) = "operator[]";
          WORD2(v350[0].var1) = 1024;
          *(_DWORD *)((char *)&v350[0].var1 + 6) = 789;
          *((_WORD *)&v350[1].var0 + 1) = 2048;
          *(_QWORD *)(&v350[1].var0 + 1) = v13;
          WORD2(v350[1].var1) = 2048;
          *(char **)((char *)&v350[1].var1 + 6) = v16;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_480:
          *(_QWORD *)v343 = 0;
          v339 = 0u;
          v340 = 0u;
          memset(v338, 0, sizeof(v338));
          v308 = v128;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v350[0].var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315906;
          *(_QWORD *)(&v350[0].var0 + 1) = "operator[]";
          WORD2(v350[0].var1) = 1024;
          *(_DWORD *)((char *)&v350[0].var1 + 6) = 789;
          *((_WORD *)&v350[1].var0 + 1) = 2048;
          *(_QWORD *)(&v350[1].var0 + 1) = v308;
          WORD2(v350[1].var1) = 2048;
          *(char **)((char *)&v350[1].var1 + 6) = (char *)v22;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_481:
          *(_QWORD *)v343 = 0;
          v339 = 0u;
          v340 = 0u;
          memset(v338, 0, sizeof(v338));
          v309 = v155;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v350[0].var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315906;
          *(_QWORD *)(&v350[0].var0 + 1) = "operator[]";
          WORD2(v350[0].var1) = 1024;
          *(_DWORD *)((char *)&v350[0].var1 + 6) = 789;
          *((_WORD *)&v350[1].var0 + 1) = 2048;
          *(_QWORD *)(&v350[1].var0 + 1) = v309;
          WORD2(v350[1].var1) = 2048;
          *(char **)((char *)&v350[1].var1 + 6) = (char *)v22;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_482:
          *(_QWORD *)v343 = 0;
          v339 = 0u;
          v340 = 0u;
          memset(v338, 0, sizeof(v338));
          v310 = v122;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v350[0].var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315906;
          *(_QWORD *)(&v350[0].var0 + 1) = "operator[]";
          WORD2(v350[0].var1) = 1024;
          *(_DWORD *)((char *)&v350[0].var1 + 6) = 789;
          *((_WORD *)&v350[1].var0 + 1) = 2048;
          *(_QWORD *)(&v350[1].var0 + 1) = v310;
          WORD2(v350[1].var1) = 2048;
          *(char **)((char *)&v350[1].var1 + 6) = (char *)v22;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_483:
          *(_QWORD *)v343 = 0;
          v339 = 0u;
          v340 = 0u;
          memset(v338, 0, sizeof(v338));
          v311 = v147;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v350[0].var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315906;
          *(_QWORD *)(&v350[0].var0 + 1) = "operator[]";
          WORD2(v350[0].var1) = 1024;
          *(_DWORD *)((char *)&v350[0].var1 + 6) = 789;
          *((_WORD *)&v350[1].var0 + 1) = 2048;
          *(_QWORD *)(&v350[1].var0 + 1) = v311;
          WORD2(v350[1].var1) = 2048;
          *(char **)((char *)&v350[1].var1 + 6) = (char *)v22;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_484:
          v334[0] = 0;
          v339 = 0u;
          v340 = 0u;
          memset(v338, 0, sizeof(v338));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v343 = 136315906;
          *(_QWORD *)&v343[4] = "operator[]";
          v344 = 1024;
          v345 = 789;
          v346 = 2048;
          v347 = v12;
          v348 = 2048;
          v349 = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_485:
          v334[0] = 0;
          v339 = 0u;
          v340 = 0u;
          memset(v338, 0, sizeof(v338));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v343 = 136315906;
          *(_QWORD *)&v343[4] = "operator[]";
          v344 = 1024;
          v345 = 468;
          v346 = 2048;
          v347 = (size_t)v325;
          v348 = 2048;
          v349 = (unint64_t)v325;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_486:
          *(_QWORD *)v343 = 0;
          v339 = 0u;
          v340 = 0u;
          memset(v338, 0, sizeof(v338));
          v312 = v139;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v350[0].var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315906;
          *(_QWORD *)(&v350[0].var0 + 1) = "operator[]";
          WORD2(v350[0].var1) = 1024;
          *(_DWORD *)((char *)&v350[0].var1 + 6) = 789;
          *((_WORD *)&v350[1].var0 + 1) = 2048;
          *(_QWORD *)(&v350[1].var0 + 1) = v312;
          WORD2(v350[1].var1) = 2048;
          *(char **)((char *)&v350[1].var1 + 6) = (char *)v22;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_487:
          *(_QWORD *)v343 = 0;
          v339 = 0u;
          v340 = 0u;
          memset(v338, 0, sizeof(v338));
          v313 = v163;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v350[0].var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315906;
          *(_QWORD *)(&v350[0].var0 + 1) = "operator[]";
          WORD2(v350[0].var1) = 1024;
          *(_DWORD *)((char *)&v350[0].var1 + 6) = 789;
          *((_WORD *)&v350[1].var0 + 1) = 2048;
          *(_QWORD *)(&v350[1].var0 + 1) = v313;
          WORD2(v350[1].var1) = 2048;
          *(char **)((char *)&v350[1].var1 + 6) = (char *)v22;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_488:
          v334[0] = 0;
          v339 = 0u;
          v340 = 0u;
          memset(v338, 0, sizeof(v338));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v343 = 136315906;
          *(_QWORD *)&v343[4] = "operator[]";
          v344 = 1024;
          v345 = 468;
          v346 = 2048;
          v347 = v2;
          v348 = 2048;
          v349 = v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_489:
          v330 = 0;
          v351 = 0u;
          v352 = 0u;
          memset(v350, 0, sizeof(v350));
          v314 = v90;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v343 = 136315906;
          *(_QWORD *)&v343[4] = "operator[]";
          v344 = 1024;
          v345 = 789;
          v346 = 2048;
          v347 = v314;
          v348 = 2048;
          v349 = v22;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_490:
          v334[0] = 0;
          v339 = 0u;
          v340 = 0u;
          memset(v338, 0, sizeof(v338));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v343 = 136315906;
          *(_QWORD *)&v343[4] = "operator[]";
          v344 = 1024;
          v345 = 468;
          v346 = 2048;
          v347 = v2;
          v348 = 2048;
          v349 = v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_491:
          *(_QWORD *)v343 = 0;
          v339 = 0u;
          v340 = 0u;
          memset(v338, 0, sizeof(v338));
          v315 = v114;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v350[0].var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315906;
          *(_QWORD *)(&v350[0].var0 + 1) = "operator[]";
          WORD2(v350[0].var1) = 1024;
          *(_DWORD *)((char *)&v350[0].var1 + 6) = 789;
          *((_WORD *)&v350[1].var0 + 1) = 2048;
          *(_QWORD *)(&v350[1].var0 + 1) = v315;
          WORD2(v350[1].var1) = 2048;
          *(char **)((char *)&v350[1].var1 + 6) = (char *)v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_492:
          v334[0] = 0;
          v339 = 0u;
          v340 = 0u;
          memset(v338, 0, sizeof(v338));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v343 = 136315906;
          *(_QWORD *)&v343[4] = "operator[]";
          v344 = 1024;
          v345 = 468;
          v346 = 2048;
          v347 = v2;
          v348 = 2048;
          v349 = v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_493;
        }
      }
      ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex(v326, *(const char **)(v245 + 136 * v3 + 24));
      if (ScopeOutputIndex == -1)
        goto LABEL_366;
    }
    *(_QWORD *)v343 = 0;
    v339 = 0u;
    v340 = 0u;
    memset(v338, 0, sizeof(v338));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v350[0].var0 = ($19119DE20B7F3CFCAA17A8FA4D266B5D)136315906;
    *(_QWORD *)(&v350[0].var0 + 1) = "operator[]";
    WORD2(v350[0].var1) = 1024;
    *(_DWORD *)((char *)&v350[0].var1 + 6) = 789;
    *((_WORD *)&v350[1].var0 + 1) = 2048;
    *(_QWORD *)(&v350[1].var0 + 1) = v3;
    WORD2(v350[1].var1) = 2048;
    *(char **)((char *)&v350[1].var1 + 6) = v325;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_465:
    re::RenderGraphManager::addGraphToCache(*v300, v300[41], v227, v300[46]);
    v95 = *(_QWORD *)(v227 + 648);
    v96 = *(_QWORD *)(v227 + 632);
    if (!v317)
      goto LABEL_468;
    ++*((_DWORD *)v317 + 1);
    v97 = (_DWORD *)((char *)v317 + 12);
LABEL_139:
    v98 = v326;
    ++*v97;
    goto LABEL_469;
  }
LABEL_401:
  v260 = (uint64_t *)((char *)v199 + 3152);
  re::RenderGraphBuilder::RenderGraphBuilder((uint64_t)v338, (re::RenderFrame *)((char *)v199 + 3448), (uint64_t)v199 + 3744, (uint64_t)v199 + 3152);
  v261 = *((_QWORD *)v199 + 428);
  if (v261)
  {
    v262 = (re::RenderGraph *)*((_QWORD *)v326 + 430);
    v263 = 112 * v261;
    do
    {
      re::RenderGraph::setup(v262, (re::RenderGraphBuilder *)v338, (re::RenderFrame *)((char *)v326 + 32));
      v262 = (re::RenderGraph *)((char *)v262 + 112);
      v263 -= 112;
    }
    while (v263);
  }
  CompiledGraph = re::RenderGraphBuilder::createCompiledGraph((uint64_t *)v338, (uint64_t)v326 + 3408);
  v266 = v326;
  v227 = CompiledGraph;
  if ((re::RenderFrame *)(CompiledGraph + 784) != (re::RenderFrame *)((char *)v326 + 3784))
  {
    v267 = *(_QWORD *)(CompiledGraph + 784);
    v268 = *((_QWORD *)v326 + 473);
    if (v267)
      v269 = v268 == 0;
    else
      v269 = 1;
    if (!v269 && v267 != v268)
      goto LABEL_517;
    *(_QWORD *)(CompiledGraph + 784) = v268;
    *((_QWORD *)v326 + 473) = v267;
    v271 = *(_QWORD *)(CompiledGraph + 792);
    *(_QWORD *)(CompiledGraph + 792) = *((_QWORD *)v326 + 474);
    *((_QWORD *)v326 + 474) = v271;
    v272 = *(_QWORD *)(CompiledGraph + 800);
    *(_QWORD *)(CompiledGraph + 800) = *((_QWORD *)v326 + 475);
    *((_QWORD *)v326 + 475) = v272;
    v273 = *(_QWORD *)(CompiledGraph + 816);
    *(_QWORD *)(CompiledGraph + 816) = *((_QWORD *)v326 + 477);
    *((_QWORD *)v326 + 477) = v273;
    ++*((_DWORD *)v326 + 952);
    ++*(_DWORD *)(CompiledGraph + 808);
  }
  v274 = *((_QWORD *)v326 + 478);
  v275 = *(_QWORD *)(CompiledGraph + 824);
  if (v275 != v274)
  {
    if (v274)
    {
      v276 = (id)(v274 + 8);
      v275 = *(_QWORD *)(v227 + 824);
    }
    if (v275)

    *(_QWORD *)(v227 + 824) = v274;
    v266 = v326;
  }
  if (!*((_QWORD *)v266 + 501))
    goto LABEL_456;
  v277 = 0;
  v2 = *(_QWORD *)(v227 + 328);
  v325 = *(char **)(v227 + 320);
  v13 = 104;
  v3 = 136;
  v4 = 0x7FFFFFFFLL;
  v5 = 40;
  do
  {
    v278 = *((_QWORD *)v266 + 503);
    v279 = v278 + 104 * v277;
    v203 = *(unsigned int *)(v279 + 88);
    if ((_DWORD)v203 == -1)
      goto LABEL_435;
    v12 = *(_QWORD *)(v227 + 760);
    if (v12 <= v203)
      goto LABEL_502;
    v280 = *(_QWORD *)(v227 + 776) + 136 * v203;
    v281 = v278 + 104 * v277;
    v282 = *(_QWORD *)(v281 + 80);
    if (*(_QWORD *)(v281 + 8) || *(_QWORD *)(v278 + 104 * v277 + 16))
    {
      v336 = *(_QWORD *)v279;
      if (*(_QWORD *)v2)
      {
        v283 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (v282 ^ (v282 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v282 ^ (v282 >> 30))) >> 27));
        v284 = (v283 ^ (v283 >> 31)) % *(unsigned int *)(v2 + 24);
        v285 = *(_QWORD *)(v2 + 16);
        v286 = *(unsigned int *)(*(_QWORD *)(v2 + 8) + 4 * v284);
        if ((_DWORD)v286 != 0x7FFFFFFF)
        {
          while (*(_QWORD *)(v285 + 40 * v286 + 16) != v282)
          {
            v286 = *(_DWORD *)(v285 + 40 * v286 + 8) & 0x7FFFFFFF;
            if (v286 == 0x7FFFFFFF)
              goto LABEL_432;
          }
          goto LABEL_433;
        }
      }
      else
      {
        v285 = *(_QWORD *)(v2 + 16);
      }
LABEL_432:
      LODWORD(v286) = 0x7FFFFFFF;
LABEL_433:
      v287 = v285 + 40 * v286;
      v330 = *(_QWORD *)(v287 + 24);
      __s = *(char **)(v287 + 32);
      re::RenderFrame::specifyScopeLaneInternal(&v336, &v330, v280, *(unsigned __int8 *)(v278 + 104 * v277 + 64), (unint64_t *)v227);
      v336 = 0;
LABEL_434:
      v266 = v326;
      goto LABEL_435;
    }
    v289 = *(unsigned int *)(v278 + 104 * v277 + 24);
    if ((_DWORD)v289 != -1 && *((_QWORD *)v266 + 515) > v289 && *(_QWORD *)(*((_QWORD *)v266 + 516) + 32 * v289))
    {
      v335 = *(_QWORD *)v279;
      v12 = *((_QWORD *)v325 + 2);
      if (v12 <= v289)
        goto LABEL_515;
      v290 = (unint64_t *)(*((_QWORD *)v325 + 4) + 16 * v289);
      v327 = *v290;
      v328 = v290[1];
      re::RenderFrame::specifyScopeLaneInternal(&v335, &v327, v280, *(unsigned __int8 *)(v278 + 104 * v277 + 64), (unint64_t *)v227);
      v335 = 0;
      goto LABEL_434;
    }
LABEL_435:
    ++v277;
    v288 = *((_QWORD *)v266 + 501);
  }
  while (v288 > v277);
  if (v288)
  {
    v291 = 0;
    v2 = 0;
    v12 = *(_QWORD *)(v227 + 320);
    v13 = 136;
    do
    {
      v292 = *((_QWORD *)v266 + 503);
      v3 = *(unsigned int *)(v292 + v291 + 88);
      if ((_DWORD)v3 != -1)
      {
        v4 = *(_QWORD *)(v227 + 760);
        if (v4 <= v3)
          goto LABEL_505;
        v293 = *(_QWORD *)(v227 + 776) + 136 * v3;
        if (*(_QWORD *)(v292 + v291 + 8) || *(_QWORD *)(v292 + v291 + 16))
        {
          v327 = *(_QWORD *)(v292 + v291);
          re::RenderFrame::makeRenderGraphManagedInternal(&v327, v293, v227);
          v327 = 0;
        }
        else
        {
          v3 = *(unsigned int *)(v292 + v291 + 24);
          if ((_DWORD)v3 != -1 && *((_QWORD *)v326 + 515) > v3 && *(_QWORD *)(*((_QWORD *)v326 + 516) + 32 * v3))
          {
            v337 = *(_QWORD *)(v292 + v291);
            v4 = *(_QWORD *)(v12 + 16);
            if (v4 <= v3)
              goto LABEL_516;
            re::RenderFrame::makeRenderGraphManagedInternal(&v337, v293, v227);
            v337 = 0;
          }
        }
      }
      ++v2;
      v266 = v326;
      v291 += 104;
    }
    while (*((_QWORD *)v326 + 501) > v2);
  }
LABEL_456:
  re::RenderGraphResourceDescriptions::resolveResourceSources((_QWORD *)v227);
  *((_BYTE *)v326 + 336) = 0;
  re::RenderGraphBuilder::~RenderGraphBuilder((re::RenderGraphBuilder *)v338);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v334);
  re::RenderGraphProcessorManager::process(*(_QWORD *)v326, v227, (_QWORD *)v326 + 399);
  if (v260 != (uint64_t *)(v227 + 576))
  {
    v295 = *v260;
    v296 = *(_QWORD *)(v227 + 576);
    if (!*v260 || !v296 || v295 == v296)
    {
      *((_QWORD *)v326 + 394) = v296;
      *(_QWORD *)(v227 + 576) = v295;
      v297 = *((_QWORD *)v326 + 395);
      *((_QWORD *)v326 + 395) = *(_QWORD *)(v227 + 584);
      *(_QWORD *)(v227 + 584) = v297;
      v298 = *((_QWORD *)v326 + 396);
      *((_QWORD *)v326 + 396) = *(_QWORD *)(v227 + 592);
      *(_QWORD *)(v227 + 592) = v298;
      v299 = *((_QWORD *)v326 + 398);
      *((_QWORD *)v326 + 398) = *(_QWORD *)(v227 + 608);
      *(_QWORD *)(v227 + 608) = v299;
      ++*(_DWORD *)(v227 + 600);
      ++*((_DWORD *)v326 + 794);
      goto LABEL_461;
    }
LABEL_518:
    re::internal::assertLog((re::internal *)4, v294, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
    _os_crash();
    __break(1u);
  }
LABEL_461:
  re::RenderGraphCompiled::validateAttachmentsDuringGraphBuild(v227, *((_QWORD *)v326 + 47));
  v300 = (uint64_t *)v326;
  if (!*((_QWORD *)v326 + 396))
    goto LABEL_465;
  re::internal::destroyPersistent<re::RenderGraphCompiled>((re *)"buildOrRetainCachedGraph", 963, (re::RenderGraphCompiled *)v227);
  if (v317)
  {
    v96 = 0;
    v95 = 0;
    ++*((_DWORD *)v317 + 1);
    ++*((_DWORD *)v317 + 3);
    v97 = (_DWORD *)((char *)v317 + 16);
    goto LABEL_139;
  }
  v95 = 0;
  v96 = 0;
LABEL_468:
  v98 = v326;
LABEL_469:
  v301 = (char *)v98 + 4176;
  re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear((uint64_t)v98 + 4176);
  if (v96)
  {
    v302 = v95 + 112 * v96;
    do
    {
      v303 = *(_QWORD *)(v95 + 16);
      if (v303)
      {
        v304 = *(uint64_t **)(v95 + 32);
        v305 = 8 * v303;
        do
        {
          v306 = *v304++;
          (*(void (**)(uint64_t, char *))(*(_QWORD *)v306 + 32))(v306, v301);
          v305 -= 8;
        }
        while (v305);
      }
      v95 += 112;
    }
    while (v95 != v302);
  }
  return re::RenderGraphManager::deleteRemovedProviders(*(_QWORD **)v326);
}

re *re::internal::destroyPersistent<re::RenderGraphCompiled>(re *result, uint64_t a2, re::RenderGraphCompiled *a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::RenderGraphCompiled::~RenderGraphCompiled(a3);
    return (re *)(*(uint64_t (**)(uint64_t, re::RenderGraphCompiled *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

uint64_t re::RenderFrame::fillSpecifyParameterScopeOutputs(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  const void *v13;

  if (result)
  {
    v6 = a2;
    v7 = a2 + 104 * result;
    do
    {
      if (a4)
      {
        v8 = 0;
        v9 = 0;
        v10 = *(_QWORD *)(v6 + 40);
        if ((v10 & 1) != 0)
          v11 = v10 >> 1;
        else
          v11 = v10 >> 1;
        while (1)
        {
          v12 = a3 + 136 * v8;
          if (*(_QWORD *)(v12 + 8) == v11)
          {
            v13 = (v10 & 1) != 0 ? *(const void **)(v6 + 48) : (const void *)(v6 + 41);
            result = memcmp(*(const void **)v12, v13, v11);
            if (!(_DWORD)result)
              break;
          }
          v8 = ++v9;
          if (a4 <= v9)
            goto LABEL_15;
        }
        *(_DWORD *)(v6 + 88) = v9;
      }
LABEL_15:
      v6 += 104;
    }
    while (v6 != v7);
  }
  return result;
}

void re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          v8 = v6 + v4;
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          v9 = *(_QWORD *)(v6 + v4 + 16);
          if (v9)
          {

            *(_QWORD *)(v8 + 16) = 0;
            v3 = *(unsigned int *)(a1 + 32);
          }
        }
        v4 += 24;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v10 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v10;
  }
}

_QWORD *re::RenderFrame::execute(re::RenderFrame *this, re::FrameContext *a2)
{
  uint64_t v2;
  int *v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _anonymous_namespace_ *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t i;
  void *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  unint64_t v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  void *v43;
  unint64_t v44;
  id v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  _OWORD *v50;
  _DWORD *v51;
  uint64_t v53;
  unint64_t v54;
  _OWORD *v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  id *v64;
  id v65;
  id v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  id v71;
  uint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  id *v77;
  void **v78;
  BOOL v79;
  _anonymous_namespace_ *v80;
  re *v81;
  NSObject *v82;
  id v83;
  id v84;
  _DWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  _DWORD *v92;
  id v94;
  _DWORD *v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t j;
  int v103;
  uint64_t v104;
  id *v105;
  uint64_t v106;
  id v107;
  re::RenderGraphResourceAllocationManager *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t k;
  uint64_t v125;
  int v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  _QWORD *v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  unsigned __int8 *v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  const void **v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  __int128 *v177;
  _OWORD *v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _OWORD *v185;
  __int128 *v186;
  __int128 v187;
  __int128 *v188;
  _OWORD *v189;
  uint64_t v190;
  __int128 v191;
  uint64_t v192;
  __int128 v193;
  __int128 v194;
  uint64_t *v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t *v198;
  _DWORD *v199;
  int v200;
  unsigned int v201;
  uint64_t v202;
  unint64_t v203;
  _BYTE *v204;
  uint64_t *v205;
  _BYTE *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t *v215;
  _BYTE *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  BOOL v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  __n128 v229;
  uint64_t v230;
  __n128 *v231;
  int v232;
  uint64_t v233;
  __n128 *v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  _QWORD *v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  __int128 v252;
  uint64_t v253;
  int *v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  _BYTE *v259;
  uint64_t v260;
  int v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  unint64_t m;
  uint64_t v269;
  uint64_t v270;
  float32x4_t *v271;
  uint64_t v272;
  float32x4_t *v273;
  float32x4_t v274;
  uint64_t v275;
  uint64_t v276;
  _OWORD *v277;
  __int128 v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t n;
  uint64_t v283;
  uint64_t v284;
  const re::DynamicString *v285;
  const re::DynamicString *v286;
  uint64_t v287;
  char v288;
  char v289;
  float32x4_t *v290;
  float32x4_t *v291;
  float32x4_t v292;
  uint64_t v293;
  uint64_t v294;
  _OWORD *v295;
  __int128 v296;
  int v297;
  int v298;
  uint64_t v299;
  unint64_t v300;
  re::RenderFrameData *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  float32x4_t v305[2];
  float32x4_t v306[2];
  id v307;
  __int128 v308;
  __int128 v309;
  void *__dst[2];
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  uint64_t v316;
  _QWORD *v317;
  id v318;
  uint64_t v319;
  id v320;
  _BYTE *v321;
  id v322;
  id v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  uint64_t v330;
  char v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  int v335;
  unsigned int v336;
  unsigned int v337;
  int v338;
  char v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  __int128 v343;
  __int128 v344;
  uint64_t v345;
  unint64_t v346;
  unsigned int v347;
  uint64_t v348;
  uint64_t *v349;
  _BYTE v350[38];
  _OWORD buf[3];
  __int128 v352;
  __int128 v353;
  uint64_t v354;

  MEMORY[0x24BDAC7A8](this);
  v3 = (int *)v2;
  v5 = (uint64_t)v4;
  v354 = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)re::RenderGraphManager::getCachedGraph(*v4, v4[41], *(_QWORD *)(v2 + 32));
  if (result)
  {
    v314 = 0u;
    v315 = 0u;
    v312 = 0u;
    v313 = 0u;
    *(_OWORD *)__dst = 0u;
    v311 = 0u;
    v308 = 0u;
    v309 = 0u;
    v316 = v5 + 3152;
    v317 = result;
    v7 = result[8];
    if (v7)
    {
      v8 = result[10];
      *((_QWORD *)&v308 + 1) = v7;
      if (v7 >= 0x24924924924924ALL)
        goto LABEL_417;
      *(_QWORD *)&v309 = v10;
      if (!v10)
      {
LABEL_418:
        re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
        _os_crash();
        __break(1u);
        goto LABEL_419;
      }
      v12 = v10;
      v13 = v7 - 1;
      if (v7 != 1)
      {
        __asm { FMOV            V1.2S, #1.0 }
        v12 = v10;
        do
        {
          *(_QWORD *)v12 = 3;
          *((_DWORD *)v12 + 2) = 2;
          *(_QWORD *)(v12 + 12) = -1;
          *(_QWORD *)(v12 + 20) = -1;
          *(_QWORD *)(v12 + 28) = -1;
          v12[36] = 0;
          *((_QWORD *)v12 + 5) = _D1;
          *((_OWORD *)v12 + 3) = xmmword_226135530;
          *((_OWORD *)v12 + 4) = xmmword_226135540;
          *((_DWORD *)v12 + 20) = -1;
          *(_OWORD *)(v12 + 88) = xmmword_2260FF4D0;
          v12[104] = 0;
          v12 += 112;
          --v13;
        }
        while (v13);
      }
      *(_QWORD *)v12 = 3;
      *((_DWORD *)v12 + 2) = 2;
      *(_QWORD *)(v12 + 12) = -1;
      *(_QWORD *)(v12 + 20) = -1;
      *(_QWORD *)(v12 + 28) = -1;
      v12[36] = 0;
      __asm { FMOV            V0.2S, #1.0 }
      *((_QWORD *)v12 + 5) = _D0;
      *((_OWORD *)v12 + 3) = xmmword_226135530;
      *((_OWORD *)v12 + 4) = xmmword_226135540;
      *((_DWORD *)v12 + 20) = -1;
      *(_OWORD *)(v12 + 88) = xmmword_2260FF4D0;
      v12[104] = 0;
      result = memmove(v10, (const void *)v8, 112 * v7 - 7);
    }
    v7 = v317[15];
    v8 = v317[13];
    if (*((_QWORD *)&v309 + 1))
    {
LABEL_16:
      if (__dst[0] != (void *)v8)
        goto LABEL_416;
      if (v8)
        v19 = (_anonymous_namespace_ *)memmove(__dst[1], (const void *)v7, 48 * v8);
      goto LABEL_19;
    }
    if (!v8)
    {
LABEL_19:
      v302 = (uint64_t)v3;
      if (*(_QWORD *)(v5 + 4152))
      {
        v23 = 0;
        v8 = 0x6A3DF053A9B45F3DLL;
        v24 = v5 + 408;
        do
        {
          if (((*(_QWORD *)(v24 + 8 * re::Bitset<64>::toWordIndex(v5 + 408, v23)) >> v23) & 1) != 0)
          {
            v7 = *(_QWORD *)(v5 + 4152);
            if (v7 <= v23)
            {
              *(_QWORD *)v350 = 0;
              v327 = 0u;
              v328 = 0u;
              v325 = 0u;
              v326 = 0u;
              v324 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(buf[0]) = 136315906;
              *(_QWORD *)((char *)buf + 4) = "operator[]";
              WORD6(buf[0]) = 1024;
              *(_DWORD *)((char *)buf + 14) = 789;
              WORD1(buf[1]) = 2048;
              *(_QWORD *)((char *)&buf[1] + 4) = v23;
              WORD6(buf[1]) = 2048;
              *(_QWORD *)((char *)&buf[1] + 14) = v7;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_407:
              *(_QWORD *)v350 = 0;
              v327 = 0u;
              v328 = 0u;
              v325 = 0u;
              v326 = 0u;
              v324 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(buf[0]) = 136315906;
              *(_QWORD *)((char *)buf + 4) = "operator[]";
              WORD6(buf[0]) = 1024;
              *(_DWORD *)((char *)buf + 14) = 789;
              WORD1(buf[1]) = 2048;
              *(_QWORD *)((char *)&buf[1] + 4) = v23;
              WORD6(buf[1]) = 2048;
              *(_QWORD *)((char *)&buf[1] + 14) = v7;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_408:
              v320 = 0;
              v352 = 0u;
              v353 = 0u;
              memset(buf, 0, sizeof(buf));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v350 = 136315906;
              *(_QWORD *)&v350[4] = "operator[]";
              *(_WORD *)&v350[12] = 1024;
              *(_DWORD *)&v350[14] = 789;
              *(_WORD *)&v350[18] = 2048;
              *(_QWORD *)&v350[20] = v8;
              *(_WORD *)&v350[28] = 2048;
              *(_QWORD *)&v350[30] = v24;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_409:
              *(_QWORD *)v350 = 0;
              v327 = 0u;
              v328 = 0u;
              v325 = 0u;
              v326 = 0u;
              v324 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(buf[0]) = 136315906;
              *(_QWORD *)((char *)buf + 4) = "operator[]";
              WORD6(buf[0]) = 1024;
              *(_DWORD *)((char *)buf + 14) = 468;
              WORD1(buf[1]) = 2048;
              *(_QWORD *)((char *)&buf[1] + 4) = v8;
              WORD6(buf[1]) = 2048;
              *(_QWORD *)((char *)&buf[1] + 14) = v7;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_410:
              v320 = 0;
              v327 = 0u;
              v328 = 0u;
              v325 = 0u;
              v326 = 0u;
              v324 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(buf[0]) = 136315906;
              *(_QWORD *)((char *)buf + 4) = "operator[]";
              WORD6(buf[0]) = 1024;
              *(_DWORD *)((char *)buf + 14) = 468;
              WORD1(buf[1]) = 2048;
              *(_QWORD *)((char *)&buf[1] + 4) = v8;
              WORD6(buf[1]) = 2048;
              *(_QWORD *)((char *)&buf[1] + 14) = v7;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_411:
              v320 = 0;
              v352 = 0u;
              v353 = 0u;
              memset(buf, 0, sizeof(buf));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v350 = 136315906;
              *(_QWORD *)&v350[4] = "operator[]";
              *(_WORD *)&v350[12] = 1024;
              *(_DWORD *)&v350[14] = 468;
              *(_WORD *)&v350[18] = 2048;
              *(_QWORD *)&v350[20] = v8;
              *(_WORD *)&v350[28] = 2048;
              *(_QWORD *)&v350[30] = v3;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_412:
              v318 = 0;
              v327 = 0u;
              v328 = 0u;
              v325 = 0u;
              v326 = 0u;
              v324 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(buf[0]) = 136315906;
              *(_QWORD *)((char *)buf + 4) = "operator[]";
              WORD6(buf[0]) = 1024;
              *(_DWORD *)((char *)buf + 14) = 468;
              WORD1(buf[1]) = 2048;
              *(_QWORD *)((char *)&buf[1] + 4) = v8;
              WORD6(buf[1]) = 2048;
              *(_QWORD *)((char *)&buf[1] + 14) = v3;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_413:
              v318 = 0;
              v327 = 0u;
              v328 = 0u;
              v325 = 0u;
              v326 = 0u;
              v324 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(buf[0]) = 136315906;
              *(_QWORD *)((char *)buf + 4) = "operator[]";
              WORD6(buf[0]) = 1024;
              *(_DWORD *)((char *)buf + 14) = 468;
              WORD1(buf[1]) = 2048;
              *(_QWORD *)((char *)&buf[1] + 4) = v8;
              WORD6(buf[1]) = 2048;
              *(_QWORD *)((char *)&buf[1] + 14) = v3;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_414:
              v318 = 0;
              v327 = 0u;
              v328 = 0u;
              v325 = 0u;
              v326 = 0u;
              v324 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(buf[0]) = 136315906;
              *(_QWORD *)((char *)buf + 4) = "operator[]";
              WORD6(buf[0]) = 1024;
              *(_DWORD *)((char *)buf + 14) = 468;
              WORD1(buf[1]) = 2048;
              *(_QWORD *)((char *)&buf[1] + 4) = v8;
              WORD6(buf[1]) = 2048;
              *(_QWORD *)((char *)&buf[1] + 14) = v3;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_415:
              v323 = 0;
              v327 = 0u;
              v328 = 0u;
              v325 = 0u;
              v326 = 0u;
              v324 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              LODWORD(buf[0]) = 136315906;
              *(_QWORD *)((char *)buf + 4) = "operator[]";
              WORD6(buf[0]) = 1024;
              *(_DWORD *)((char *)buf + 14) = 468;
              WORD1(buf[1]) = 2048;
              *(_QWORD *)((char *)&buf[1] + 4) = v8;
              WORD6(buf[1]) = 2048;
              *(_QWORD *)((char *)&buf[1] + 14) = v3;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_416:
              re::internal::assertLog((re::internal *)4, v20, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
              _os_crash();
              __break(1u);
LABEL_417:
              re::internal::assertLog((re::internal *)6, v9, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 112, v7);
              _os_crash();
              __break(1u);
              goto LABEL_418;
            }
            if (!*(_QWORD *)(*(_QWORD *)(v5 + 4168) + 8 * v23))
            {
              re::DynamicString::format((re::DynamicString *)"Requested framebuffer %d is invalid.", (re::DynamicString *)&v324, v23);
              re::RenderFrame::addError(v5, (uint64_t)&v324);
              if ((_QWORD)v324 && (BYTE8(v324) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v324 + 40))();
              v7 = *(_QWORD *)(v5 + 4152);
            }
            if (v7 <= v23)
              goto LABEL_407;
            v25 = *(id *)(*(_QWORD *)(v5 + 4168) + 8 * v23);
            v320 = v25;
            *(_QWORD *)&buf[0] = (unint64_t)v324 >> 1;
            *(_QWORD *)v350 = 0x6A3DF053A9B45F3DLL;
            re::RenderFrame::registerExternalTexture(v5, &v320, buf, v350, 0);
            re::StringID::destroyString((re::StringID *)&v324);
            if (v25)
            {

              v320 = 0;
            }
          }
          else
          {
            v318 = 0;
            *(_QWORD *)&buf[0] = (unint64_t)v324 >> 1;
            *(_QWORD *)v350 = 0x6A3DF053A9B45F3DLL;
            re::RenderFrame::registerExternalTexture(v5, &v318, buf, v350, 0);
            re::StringID::destroyString((re::StringID *)&v324);
          }
          ++v23;
        }
        while (*(_QWORD *)(v5 + 4152) > v23);
      }
      v26 = *(_QWORD *)(v5 + 4008);
      if (v26)
      {
        v27 = 0;
        for (i = 0; i < v26; ++i)
        {
          v3 = *(int **)(v5 + 4024);
          if (!LOBYTE(v3[v27 + 24]))
          {
            v29 = *(void **)&v3[v27 + 2];
            if (v29)
            {
              if (v3[v27 + 22] != -1)
                goto LABEL_45;
            }
            else
            {
              if (*(_QWORD *)&v3[v27 + 4])
                _ZF = v3[v27 + 22] == -1;
              else
                _ZF = 1;
              if (!_ZF)
              {
LABEL_45:
                *(_QWORD *)&buf[0] = v29;
                *(_QWORD *)&v324 = ((*(_QWORD *)&v3[v27 + 20] << 6)
                                  + (*(_QWORD *)&v3[v27 + 20] >> 2)
                                  + 0x8756A0D28FEDB54) ^ *(_QWORD *)&v3[v27 + 20];
                re::HashTable<unsigned long long,NS::SharedPtr<MTL::Texture>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::add<NS::SharedPtr<MTL::Texture>&>(v5 + 3312, (unint64_t *)&v324, (id *)buf);
                if (*(_QWORD *)&buf[0])
                {

                  *(_QWORD *)&buf[0] = 0;
                }
              }
            }
          }
          v26 = *(_QWORD *)(v5 + 4008);
          v27 += 26;
        }
      }
      v31 = *(_QWORD *)(v5 + 4048);
      *(_QWORD *)&v314 = *(_QWORD *)(v5 + 4064);
      *((_QWORD *)&v314 + 1) = v31;
      v32 = *(_QWORD *)(v5 + 4088);
      *(_QWORD *)&v315 = *(_QWORD *)(v5 + 4104);
      *((_QWORD *)&v315 + 1) = v32;
      v324 = xmmword_226135550;
      v325 = xmmword_226135560;
      LODWORD(v326) = 0;
      BYTE4(v326) = 0;
      __asm { FMOV            V0.2S, #1.0 }
      *((_QWORD *)&v326 + 1) = _D0;
      v327 = xmmword_226135530;
      v328 = xmmword_226135540;
      LODWORD(v329) = -1;
      *((_QWORD *)&v329 + 1) = 0;
      v330 = 0;
      v331 = 0;
      if (v26)
      {
        v7 = 0;
        do
        {
          v34 = *(_QWORD *)(v5 + 4024);
          v35 = v34 + 104 * v7;
          v8 = *(unsigned int *)(v35 + 88);
          if ((_DWORD)v8 != -1)
          {
            v24 = v317[95];
            if (v24 <= v8)
              goto LABEL_408;
            v36 = v317[97];
            v37 = v36 + 136 * v8;
            v38 = *(void **)(v34 + 104 * v7 + 8);
            if (v38)
            {
              v39 = *(_QWORD *)v35;
              v40 = v38;
              v318 = v40;
              re::RenderFrame::fillScopeLaneProperties(v5, v39, &v318, v37, (uint64_t)&v308);
              if (v40)
              {

                v318 = 0;
              }
            }
            else if (*(_QWORD *)(v34 + 104 * v7 + 16))
            {
              if ((*(_BYTE *)(v34 + 104 * v7 + 40) & 1) != 0)
                v41 = *(_QWORD *)(v34 + 104 * v7 + 48);
              else
                v41 = v34 + 104 * v7 + 41;
              re::DynamicString::format((re::DynamicString *)"Texture descriptor for graph scope %s was never specified as a texture.", (re::DynamicString *)buf, v41);
              re::RenderFrame::addError(v5, (uint64_t)buf);
              if (*(_QWORD *)&buf[0] && (BYTE8(buf[0]) & 1) != 0)
                (*(void (**)(void))(**(_QWORD **)&buf[0] + 40))();
            }
            else
            {
              v42 = *(unsigned int *)(v34 + 104 * v7 + 24);
              if (*(_QWORD *)(v5 + 4152) > v42 && (v43 = *(void **)(*(_QWORD *)(v5 + 4168) + 8 * v42)) != 0)
              {
                v44 = *(_QWORD *)v35;
                v45 = v43;
                v323 = v45;
                re::RenderFrame::fillScopeLaneProperties(v5, v44, &v323, v37, (uint64_t)&v308);
                if (v45)
                {

                  v323 = 0;
                }
              }
              else
              {
                v46 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v36 + 136 * v8 + 40, *(_QWORD *)v35);
                if (v46)
                {
                  v47 = (_QWORD *)v46;
                  if (*(_QWORD *)(v46 + 16))
                  {
                    v48 = 0;
                    v49 = 0;
                    do
                    {
                      v50 = (_OWORD *)(v47[4] + v48);
                      *(_QWORD *)&buf[0] = 0;
                      *((_QWORD *)&buf[0] + 1) = -1;
                      buf[0] = *v50;
                      v51 = (_DWORD *)re::RenderGraphExecutable::targetDescription((uint64_t)&v308, (uint64_t)buf);
                      if (*v51 == 3 || *v51 == 0)
                      {
                        *v51 = 0;
                        re::RenderGraphTargetDescription::copySetProperties((uint64_t)v51, (uint64_t)&v324);
                      }
                      ++v49;
                      v48 += 16;
                    }
                    while (v47[2] > v49);
                  }
                  if (v47[7])
                  {
                    v53 = 0;
                    v54 = 0;
                    do
                    {
                      v55 = (_OWORD *)(v47[9] + v53);
                      *(_QWORD *)&buf[0] = 0;
                      *((_QWORD *)&buf[0] + 1) = -1;
                      buf[0] = *v55;
                      v56 = re::RenderGraphExecutable::bufferDescription((uint64_t)&v308, (uint64_t)buf);
                      if (*(_DWORD *)v56 == 3 || *(_DWORD *)v56 == 0)
                      {
                        *(_DWORD *)v56 = 0;
                        if (*(_QWORD *)(v56 + 8) == -1)
                          *(_QWORD *)(v56 + 8) = 32;
                        if (*(_QWORD *)(v56 + 32) == -1)
                          *(_QWORD *)(v56 + 32) = 0;
                      }
                      ++v54;
                      v53 += 16;
                    }
                    while (v47[7] > v54);
                  }
                }
              }
            }
          }
          ++v7;
        }
        while (*(_QWORD *)(v5 + 4008) > v7);
      }
      v58 = v317[37];
      v59 = *(_QWORD *)(v58 + 16);
      if (!v59)
        goto LABEL_117;
      v7 = *(_QWORD *)(v58 + 32) + 24;
      v60 = 48 * v59;
      while (1)
      {
        v61 = *(_DWORD *)(v7 - 24);
        if (v61 == 1)
        {
          *(_QWORD *)&buf[0] = *(_QWORD *)(v7 - 16) >> 1;
          *((_QWORD *)&buf[0] + 1) = *(_QWORD *)v7;
          v68 = re::RenderGraphExecutable::bufferDescription((uint64_t)&v308, (uint64_t)buf);
          v69 = v68;
          if (*(_DWORD *)v68 != 2)
          {
            if (*(_QWORD *)(v68 + 8) == -1)
              *(_QWORD *)(v68 + 8) = 32;
            if (*(_QWORD *)(v68 + 32) == -1)
              *(_QWORD *)(v68 + 32) = 0;
            goto LABEL_115;
          }
          re::StringID::StringID((re::StringID *)v350, (const StringID *)(v7 - 16));
          re::RenderFrame::getExternalBuffer(v5, v69, (id **)buf);
          v70 = *(void **)&buf[0];
          v71 = *(id *)&buf[0];
          v320 = v71;
          if (v70)

          re::StringID::destroyString((re::StringID *)v350);
          if (v71)
          {
            re::RenderGraphBufferDescription::makeValid(v69, &v320, *(_QWORD *)(v5 + 416));
            v67 = v71;
LABEL_108:

          }
        }
        else if (!v61)
        {
          *(_QWORD *)&buf[0] = *(_QWORD *)(v7 - 16) >> 1;
          *((_QWORD *)&buf[0] + 1) = *(_QWORD *)v7;
          v62 = re::RenderGraphExecutable::targetDescription((uint64_t)&v308, (uint64_t)buf);
          v63 = v62;
          v8 = *(unsigned int *)(v62 + 76);
          if ((_DWORD)v8 != -1)
          {
            v3 = (int *)*((_QWORD *)&v308 + 1);
            if (*((_QWORD *)&v308 + 1) <= v8)
              goto LABEL_411;
            re::RenderGraphTargetDescription::copySetProperties(v62, v309 + 112 * v8);
          }
          if (*(_DWORD *)v63 != 2)
          {
            re::RenderGraphTargetDescription::copySetProperties(v63, (uint64_t)&v324);
            goto LABEL_115;
          }
          re::StringID::StringID((re::StringID *)buf, (const StringID *)(v7 - 16));
          v64 = (id *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v5 + 3312, (uint64_t *)(v63 + 96));
          if (!v64)
          {
            re::StringID::destroyString((re::StringID *)buf);
            goto LABEL_115;
          }
          v65 = *v64;
          re::StringID::destroyString((re::StringID *)buf);
          if (v65)
          {
            v66 = v65;
            v322 = v66;
            re::RenderGraphTargetDescription::makeValid(v63, &v322, *(_QWORD *)(v5 + 416));
            if (v66)
            {

              v322 = 0;
            }
            v67 = v65;
            goto LABEL_108;
          }
        }
LABEL_115:
        v7 += 48;
        v60 -= 48;
        if (!v60)
        {
          v58 = v317[37];
LABEL_117:
          v72 = *(_QWORD *)(v58 + 16);
          if (!v72)
            goto LABEL_179;
          v73 = (unsigned int *)(*(_QWORD *)(v58 + 32) + 28);
          v74 = 48 * v72;
          v3 = &dword_224FE9000;
          while (2)
          {
            v75 = *(v73 - 7);
            if (v75 != 1)
            {
              if (v75)
                goto LABEL_143;
              *(_QWORD *)&v324 = *(_QWORD *)(v73 - 5) >> 1;
              *((_QWORD *)&v324 + 1) = *(_QWORD *)(v73 - 1);
              v76 = re::RenderGraphExecutable::targetDescription((uint64_t)&v308, (uint64_t)&v324);
              v320 = 0;
              if (*(_DWORD *)v76 == 2)
              {
                re::StringID::StringID((re::StringID *)&v324, (const StringID *)(v73 - 5));
                v77 = (id *)re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(v5 + 3312, (uint64_t *)(v76 + 96));
                if (v77)
                  v77 = (id *)*v77;
                *(_QWORD *)&buf[0] = v77;
                NS::SharedPtr<MTL::Texture>::operator=(&v320, (void **)buf);
                if (*(_QWORD *)&buf[0])
                {

                  *(_QWORD *)&buf[0] = 0;
                }
                re::StringID::destroyString((re::StringID *)&v324);
                if (!v320)
                {
                  v78 = NS::SharedPtr<MTL::Texture>::operator=(&v320, (void **)(*(_QWORD *)(*(_QWORD *)(v5 + 8) + 64) + 32));
                  re::StringID::StringID((re::StringID *)&v324, (const StringID *)(v73 - 5));
                  *(_QWORD *)&buf[0] = (unint64_t)v324 >> 1;
                  v79 = re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::contains((uint64_t)&xmmword_254118F78, (uint64_t *)buf);
                  *(_QWORD *)&buf[0] = 0;
                  re::StringID::destroyString((re::StringID *)&v324);
                  if (!v79)
                  {
                    re::StringID::StringID((re::StringID *)&v324, (const StringID *)(v73 - 5));
                    *(_QWORD *)&buf[0] = (unint64_t)v324 >> 1;
                    re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add((uint64_t)&xmmword_254118F78, (uint64_t *)buf);
                    *(_QWORD *)&buf[0] = 0;
                    re::StringID::destroyString((re::StringID *)&v324);
                    v82 = *re::graphicsLogObjects(v81);
                    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
                    {
                      re::StringID::StringID((re::StringID *)&v324, (const StringID *)(v73 - 5));
                      LODWORD(buf[0]) = 136315138;
                      *(_QWORD *)((char *)buf + 4) = *((_QWORD *)&v324 + 1);
                      _os_log_impl(&dword_224FE9000, v82, OS_LOG_TYPE_DEFAULT, "Invalid external texture bound to resource (%s). Setting it to a gray 1x1 fallback texture.", (uint8_t *)buf, 0xCu);
                      re::StringID::destroyString((re::StringID *)&v324);
                    }
                  }
                  v83 = v320;
                  v322 = v83;
                  re::RenderGraphTargetDescription::makeValid(v76, &v322, *(_QWORD *)(v5 + 416));
                  if (v83)
                  {

                    v322 = 0;
                  }
                }
              }
              v8 = *v73;
              v7 = *((_QWORD *)&v311 + 1);
              if (*((_QWORD *)&v311 + 1) <= v8)
                goto LABEL_409;
              NS::SharedPtr<MTL::Texture>::operator=((void **)(v312 + 8 * v8), &v320);
              *(_DWORD *)(v76 + 60) = *(_DWORD *)(v76 + 56);
              v84 = v320;
              if (!v320)
                goto LABEL_143;
LABEL_142:

              goto LABEL_143;
            }
            *(_OWORD *)v350 = 0uLL;
            *(_QWORD *)&v324 = *(_QWORD *)(v73 - 5) >> 1;
            *((_QWORD *)&v324 + 1) = *(_QWORD *)(v73 - 1);
            v85 = (_DWORD *)re::RenderGraphExecutable::bufferDescription((uint64_t)&v308, (uint64_t)&v324);
            if (*v85 == 2)
            {
              v86 = (uint64_t)v85;
              re::StringID::StringID((re::StringID *)buf, (const StringID *)(v73 - 5));
              re::RenderFrame::getExternalBuffer(v5, v86, (id **)&v324);
              NS::SharedPtr<MTL::Texture>::operator=((void **)v350, (void **)&v324);
              *(_QWORD *)&v350[8] = *((_QWORD *)&v324 + 1);
              if ((_QWORD)v324)
              {

                *(_QWORD *)&v324 = 0;
              }
              re::StringID::destroyString((re::StringID *)buf);
              if (!*(_QWORD *)v350)
                re::RenderGraphBufferDescription::makeValid(v86, (id *)v350, *(_QWORD *)(v5 + 416));
            }
            v8 = *v73;
            v7 = v313;
            if ((unint64_t)v313 <= v8)
              goto LABEL_410;
            v87 = *((_QWORD *)&v313 + 1) + 16 * v8;
            NS::SharedPtr<MTL::Texture>::operator=((void **)v87, (void **)v350);
            *(_QWORD *)(v87 + 8) = *(_QWORD *)&v350[8];
            v84 = *(id *)v350;
            if (*(_QWORD *)v350)
              goto LABEL_142;
LABEL_143:
            v73 += 12;
            v74 -= 48;
            if (v74)
              continue;
            break;
          }
          v88 = v317[37];
          v89 = *(_QWORD *)(v88 + 16);
          if (!v89)
            goto LABEL_179;
          v7 = *(_QWORD *)(v88 + 32) + 24;
          v90 = 48 * v89;
          while (2)
          {
            v91 = *(_DWORD *)(v7 - 24);
            if (v91 != 1)
            {
              if (v91)
                goto LABEL_164;
              *(_QWORD *)&v324 = *(_QWORD *)(v7 - 16) >> 1;
              *((_QWORD *)&v324 + 1) = *(_QWORD *)v7;
              v92 = (_DWORD *)re::RenderGraphExecutable::targetDescription((uint64_t)&v308, (uint64_t)&v324);
              if (*v92 != 4 || v92[18] == -1)
                goto LABEL_164;
              *(_QWORD *)v350 = *(_QWORD *)(v7 - 16) >> 1;
              *(_QWORD *)&v350[8] = *(_QWORD *)v7;
              re::RenderGraphResourceDescriptions::targetDescriptionSource((uint64_t)v317, (uint64_t)v350, (uint64_t)&v320);
              v8 = HIDWORD(v321);
              v3 = (int *)*((_QWORD *)&v311 + 1);
              if (*((_QWORD *)&v311 + 1) <= (unint64_t)HIDWORD(v321))
                goto LABEL_412;
              v323 = *(id *)(v312 + 8 * HIDWORD(v321));
              v8 = *(unsigned int *)&v350[12];
              v3 = (int *)*((_QWORD *)&v311 + 1);
              if (*((_QWORD *)&v311 + 1) <= (unint64_t)*(unsigned int *)&v350[12])
                goto LABEL_414;
              NS::SharedPtr<MTL::Texture>::operator=((void **)(v312 + 8 * *(unsigned int *)&v350[12]), &v323);
              v94 = v323;
              if (!v323)
                goto LABEL_164;
LABEL_163:

              goto LABEL_164;
            }
            *(_QWORD *)&v324 = *(_QWORD *)(v7 - 16) >> 1;
            *((_QWORD *)&v324 + 1) = *(_QWORD *)v7;
            v95 = (_DWORD *)re::RenderGraphExecutable::bufferDescription((uint64_t)&v308, (uint64_t)&v324);
            if (*v95 == 4 && v95[7] != -1)
            {
              *(_QWORD *)v350 = *(_QWORD *)(v7 - 16) >> 1;
              *(_QWORD *)&v350[8] = *(_QWORD *)v7;
              re::RenderGraphResourceDescriptions::bufferDescriptionSource((uint64_t)v317, (uint64_t)v350, (uint64_t)&v320);
              v8 = HIDWORD(v321);
              v3 = (int *)v313;
              if ((unint64_t)v313 <= HIDWORD(v321))
                goto LABEL_413;
              v97 = *((_QWORD *)&v313 + 1) + 16 * HIDWORD(v321);
              v318 = *(id *)v97;
              v319 = *(_QWORD *)(v97 + 8);
              v8 = *(unsigned int *)&v350[12];
              v3 = (int *)v313;
              if ((unint64_t)v313 <= *(unsigned int *)&v350[12])
                goto LABEL_415;
              v98 = *((_QWORD *)&v313 + 1) + 16 * *(unsigned int *)&v350[12];
              NS::SharedPtr<MTL::Texture>::operator=((void **)v98, &v318);
              *(_QWORD *)(v98 + 8) = v319;
              v94 = v318;
              if (v318)
                goto LABEL_163;
            }
LABEL_164:
            v7 += 48;
            v90 -= 48;
            if (v90)
              continue;
            break;
          }
          v99 = v317[37];
          v100 = *(_QWORD *)(v99 + 16);
          if (v100)
          {
            v101 = (_QWORD *)(*(_QWORD *)(v99 + 32) + 24);
            for (j = 48 * v100; j; j -= 48)
            {
              v103 = *((_DWORD *)v101 - 6);
              if (v103 == 1)
              {
                *(_QWORD *)&v324 = *(v101 - 2) >> 1;
                *((_QWORD *)&v324 + 1) = *v101;
                if (*(_DWORD *)re::RenderGraphExecutable::bufferDescription((uint64_t)&v308, (uint64_t)&v324) == 3)
                {
                  re::StringID::StringID((re::StringID *)buf, (const StringID *)v101 - 1);
                  re::DynamicString::format((re::DynamicString *)"Buffer (%s) left unspecified by the end of the frame.", (re::DynamicString *)&v324, *((_QWORD *)&buf[0] + 1));
                  goto LABEL_173;
                }
              }
              else if (!v103)
              {
                *(_QWORD *)&v324 = *(v101 - 2) >> 1;
                *((_QWORD *)&v324 + 1) = *v101;
                if (*(_DWORD *)re::RenderGraphExecutable::targetDescription((uint64_t)&v308, (uint64_t)&v324) == 3)
                {
                  re::StringID::StringID((re::StringID *)buf, (const StringID *)v101 - 1);
                  re::DynamicString::format((re::DynamicString *)"Target (%s) left unspecified by the end of the frame.", (re::DynamicString *)&v324, *((_QWORD *)&buf[0] + 1));
LABEL_173:
                  re::RenderFrame::addError(v5, (uint64_t)&v324);
                  if ((_QWORD)v324)
                  {
                    if ((BYTE8(v324) & 1) != 0)
                      (*(void (**)(void))(*(_QWORD *)v324 + 40))();
                    v324 = 0u;
                    v325 = 0u;
                  }
                  re::StringID::destroyString((re::StringID *)buf);
                }
              }
              v101 += 6;
            }
          }
LABEL_179:
          re::RenderGraphExecutable::validateAttachmentsPerFrame((uint64_t)&v308, *(_QWORD *)(v5 + 376));
          if (!*(_QWORD *)(v316 + 16))
          {
            re::RenderGraphContext::RenderGraphContext((uint64_t)&v324, v302, *(re::RenderManager **)(v5 + 8), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 16), v5 + 32, *(_QWORD *)(*(_QWORD *)v5 + 128), (uint64_t)&v308, *(_QWORD *)(*(_QWORD *)v5 + 280), *(_QWORD *)(*(_QWORD *)v5 + 288), *(_BYTE *)(v5 + 425), v5 + 4176);
            v104 = *(_QWORD *)(v5 + 3928);
            if (v104)
            {
              v105 = *(id **)(v5 + 3944);
              v106 = 8 * v104;
              do
              {
                v107 = *v105;
                v307 = v107;
                re::DynamicArray<NS::SharedPtr<MTL::RasterizationRateMap>>::add((_anonymous_namespace_ *)&v341, &v307);
                if (v307)
                {

                  v307 = 0;
                }
                if (v107)

                ++v105;
                v106 -= 8;
              }
              while (v106);
            }
            v108 = *(re::RenderGraphResourceAllocationManager **)(*(_QWORD *)v5 + 128);
            v109 = *((_QWORD *)&v311 + 1);
            v110 = v313;
            v111 = v317[37];
            v112 = *(_QWORD *)(v111 + 16);
            if (v112)
            {
              v113 = (unsigned int *)(*(_QWORD *)(v111 + 32) + 36);
              v114 = 31;
              do
              {
                v114 = *v113 + 19 * (*(v113 - 1) + 19 * v114);
                v113 += 12;
                --v112;
              }
              while (v112);
            }
            else
            {
              v114 = 31;
            }
            v116 = re::RenderGraphExecutable::calculateResourcePropertiesHash((re::RenderGraphExecutable *)&v308);
            re::RenderGraphResourceAllocationManager::onFrameStart(v108, v109, v110, v114, v116);
            re::RenderGraphExecutable::execute((re::RenderGraphExecutable *)&v308, (re::RenderGraphContext *)&v324);
            v118 = (uint64_t *)(v5 + 616);
            if ((uint64_t *)(v5 + 616) != &v342)
            {
              v119 = *v118;
              v120 = v342;
              if (!*v118 || v119 == v342)
              {
                *(_QWORD *)(v5 + 616) = v342;
                v342 = v119;
                v192 = *((_QWORD *)&v343 + 1);
                v193 = *(_OWORD *)(v5 + 624);
                v194 = *(_OWORD *)(v5 + 640);
                *(_QWORD *)(v5 + 624) = v343;
                *(_QWORD *)(v5 + 632) = v192;
                *(_OWORD *)(v5 + 640) = v344;
                v343 = v193;
                v344 = v194;
              }
              else
              {
                if (*(_DWORD *)(v5 + 644))
                {
                  v121 = *(unsigned int *)(v5 + 640);
                  if ((_DWORD)v121)
                    memset_pattern16(*(void **)(v5 + 624), &unk_2260EB7B0, 4 * v121);
                  v122 = *(unsigned int *)(v5 + 648);
                  if ((_DWORD)v122)
                  {
                    v123 = 0;
                    for (k = 0; k < v122; ++k)
                    {
                      v125 = *(_QWORD *)(v5 + 632) + v123;
                      v126 = *(_DWORD *)(v125 + 8);
                      if (v126 < 0)
                      {
                        *(_DWORD *)(v125 + 8) = v126 & 0x7FFFFFFF;
                        re::CameraLateLatch::~CameraLateLatch((re::CameraLateLatch *)(v125 + 256));
                        v122 = *(unsigned int *)(v5 + 648);
                      }
                      v123 += 2048;
                    }
                  }
                  *(_DWORD *)(v5 + 652) = 0x7FFFFFFF;
                  *(_QWORD *)(v5 + 644) = 0;
                  ++*(_DWORD *)(v5 + 656);
                }
                if (v120)
                {
                  v117 = DWORD1(v344);
                  if (*(_DWORD *)(v5 + 640) < DWORD1(v344))
                    re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(v5 + 616, DWORD1(v344));
                  v127 = DWORD2(v344);
                  if (DWORD2(v344))
                  {
                    v128 = 0;
                    do
                    {
                      v129 = *((_QWORD *)&v343 + 1);
                      v130 = (uint64_t *)(*((_QWORD *)&v343 + 1) + (v128 << 11));
                      if ((v130[1] & 0x80000000) != 0)
                      {
                        v131 = v130 + 2;
                        v132 = *v130;
                        v133 = *(unsigned int *)(v5 + 640);
                        v134 = *v130 % v133;
                        v135 = *(unsigned int *)(v5 + 652);
                        if ((_DWORD)v135 == 0x7FFFFFFF)
                        {
                          v135 = *(unsigned int *)(v5 + 648);
                          v136 = v135;
                          if ((_DWORD)v135 == (_DWORD)v133)
                          {
                            re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(v5 + 616, 2 * *(_DWORD *)(v5 + 644));
                            v134 = v132 % *(unsigned int *)(v5 + 640);
                            v136 = *(_DWORD *)(v5 + 648);
                          }
                          *(_DWORD *)(v5 + 648) = v136 + 1;
                          v137 = *(_QWORD *)(v5 + 632);
                          v138 = *(_DWORD *)(v137 + (v135 << 11) + 8);
                        }
                        else
                        {
                          v137 = *(_QWORD *)(v5 + 632);
                          v138 = *(_DWORD *)(v137 + (v135 << 11) + 8);
                          *(_DWORD *)(v5 + 652) = v138 & 0x7FFFFFFF;
                        }
                        v139 = (unsigned __int8 *)(v130 + 32);
                        *(_DWORD *)(v137 + (v135 << 11) + 8) = v138 | 0x80000000;
                        *(_DWORD *)(*(_QWORD *)(v5 + 632) + (v135 << 11) + 8) = *(_DWORD *)(*(_QWORD *)(v5 + 632)
                                                                                          + (v135 << 11)
                                                                                          + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v5 + 624) + 4 * v134);
                        *(_QWORD *)(*(_QWORD *)(v5 + 632) + (v135 << 11)) = v132;
                        *(_QWORD *)(*(_QWORD *)(v5 + 632) + (v135 << 11) + 16) = *v131;
                        v303 = *(_QWORD *)(v5 + 632);
                        v140 = v303 + (v135 << 11);
                        v141 = v140 + 256;
                        v142 = *v139;
                        *(_BYTE *)(v140 + 256) = v142;
                        if (v142)
                          memcpy((void *)(v140 + 512), v139 + 256, 0x400uLL);
                        *(_QWORD *)(v141 + 1312) = 0;
                        *(_QWORD *)(v141 + 1280) = 0;
                        *(_QWORD *)(v141 + 1296) = 0;
                        *(_QWORD *)(v141 + 1288) = 0;
                        *(_DWORD *)(v141 + 1304) = 0;
                        v143 = *((_QWORD *)v139 + 160);
                        if (v143)
                        {
                          v144 = *((_QWORD *)v139 + 162);
                          *(_QWORD *)(v141 + 1280) = v143;
                          re::DynamicArray<re::ViewConstantsLateLatch::LegacyPatchCommand>::setCapacity((_QWORD *)(v141 + 1280), v144);
                          ++*(_DWORD *)(v141 + 1304);
                          v145 = *((_QWORD *)v139 + 162);
                          if (v145 >= *(_QWORD *)(v141 + 1296))
                          {
                            re::DynamicArray<re::ViewConstantsLateLatch::LegacyPatchCommand>::setCapacity((_QWORD *)(v141 + 1280), *((_QWORD *)v139 + 162));
                            v146 = *(_QWORD *)(v141 + 1296);
                            if (v146)
                            {
                              memmove(*(void **)(v141 + 1312), *((const void **)v139 + 164), 16 * v146);
                              v146 = *(_QWORD *)(v141 + 1296);
                            }
                            memcpy((void *)(*(_QWORD *)(v141 + 1312) + 16 * v146), (const void *)(*((_QWORD *)v139 + 164) + 16 * v146), 16 * v145 - 16 * v146);
                          }
                          else if (v145)
                          {
                            memmove(*(void **)(v141 + 1312), *((const void **)v139 + 164), 16 * v145);
                          }
                          *(_QWORD *)(v141 + 1296) = v145;
                        }
                        *(_QWORD *)(v141 + 1352) = 0;
                        *(_QWORD *)(v141 + 1320) = 0;
                        *(_QWORD *)(v141 + 1336) = 0;
                        *(_QWORD *)(v141 + 1328) = 0;
                        *(_DWORD *)(v141 + 1344) = 0;
                        v147 = *((_QWORD *)v139 + 165);
                        if (v147)
                        {
                          v148 = *((_QWORD *)v139 + 167);
                          *(_QWORD *)(v141 + 1320) = v147;
                          re::DynamicArray<re::ViewConstantsLateLatch::LateLatchEntry>::setCapacity((_QWORD *)(v141 + 1320), v148);
                          ++*(_DWORD *)(v141 + 1344);
                          v149 = *((_QWORD *)v139 + 167);
                          if (v149 >= *(_QWORD *)(v141 + 1336))
                          {
                            re::DynamicArray<re::ViewConstantsLateLatch::LateLatchEntry>::setCapacity((_QWORD *)(v141 + 1320), *((_QWORD *)v139 + 167));
                            v150 = *(_QWORD *)(v141 + 1336);
                            if (v150)
                            {
                              memmove(*(void **)(v141 + 1352), *((const void **)v139 + 169), 32 * v150 - 4);
                              v150 = *(_QWORD *)(v141 + 1336);
                            }
                            memcpy((void *)(*(_QWORD *)(v141 + 1352) + 32 * v150), (const void *)(*((_QWORD *)v139 + 169) + 32 * v150), 32 * v149 - 32 * v150);
                          }
                          else if (v149)
                          {
                            memmove(*(void **)(v141 + 1352), *((const void **)v139 + 169), 32 * v149 - 4);
                          }
                          *(_QWORD *)(v141 + 1336) = v149;
                        }
                        *(_QWORD *)(v141 + 1392) = 0;
                        *(_QWORD *)(v141 + 1360) = 0;
                        *(_QWORD *)(v141 + 1376) = 0;
                        *(_QWORD *)(v141 + 1368) = 0;
                        *(_DWORD *)(v141 + 1384) = 0;
                        v151 = *((_QWORD *)v139 + 170);
                        if (v151)
                        {
                          v300 = v134;
                          v152 = *((_QWORD *)v139 + 172);
                          *(_QWORD *)(v141 + 1360) = v151;
                          re::DynamicArray<re::FixedInlineArray<re::Matrix4x4<float>,2ul>>::setCapacity((_QWORD *)(v141 + 1360), v152);
                          ++*(_DWORD *)(v141 + 1384);
                          v153 = *((_QWORD *)v139 + 172);
                          if (v153 >= *(_QWORD *)(v141 + 1376))
                          {
                            re::DynamicArray<re::FixedInlineArray<re::Matrix4x4<float>,2ul>>::setCapacity((_QWORD *)(v141 + 1360), *((_QWORD *)v139 + 172));
                            v157 = (char *)*((_QWORD *)v139 + 174);
                            v158 = *(_QWORD *)(v141 + 1376);
                            v159 = *(char **)(v141 + 1392);
                            if (v158)
                            {
                              v160 = v158 << 7;
                              do
                              {
                                if (v157 != v159)
                                  memmove(v159, v157, 0x80uLL);
                                v157 += 128;
                                v159 += 128;
                                v160 -= 128;
                              }
                              while (v160);
                              v159 = *(char **)(v141 + 1392);
                              v158 = *(_QWORD *)(v141 + 1376);
                              v157 = (char *)*((_QWORD *)v139 + 174);
                            }
                            if (v158 != v153)
                            {
                              v161 = &v157[128 * v158];
                              v162 = &v159[128 * v158];
                              v163 = (v153 << 7) - (v158 << 7);
                              do
                              {
                                *((_OWORD *)v162 + 6) = 0u;
                                *((_OWORD *)v162 + 7) = 0u;
                                *((_OWORD *)v162 + 4) = 0u;
                                *((_OWORD *)v162 + 5) = 0u;
                                *((_OWORD *)v162 + 2) = 0u;
                                *((_OWORD *)v162 + 3) = 0u;
                                *(_OWORD *)v162 = 0u;
                                *((_OWORD *)v162 + 1) = 0u;
                                memmove(v162, v161, 0x80uLL);
                                v161 += 128;
                                v162 += 128;
                                v163 -= 128;
                              }
                              while (v163);
                            }
                          }
                          else if (v153)
                          {
                            v154 = (char *)*((_QWORD *)v139 + 174);
                            v155 = *(char **)(v141 + 1392);
                            v156 = v153 << 7;
                            do
                            {
                              if (v154 != v155)
                                memmove(v155, v154, 0x80uLL);
                              v154 += 128;
                              v155 += 128;
                              v156 -= 128;
                            }
                            while (v156);
                          }
                          *(_QWORD *)(v141 + 1376) = v153;
                          v134 = v300;
                        }
                        v164 = v303;
                        v165 = v303 + (v135 << 11);
                        v166 = (_QWORD *)(v129 + (v128 << 11));
                        *(_QWORD *)(v165 + 1824) = 0;
                        *(_QWORD *)(v165 + 1792) = 0;
                        *(_QWORD *)(v165 + 1808) = 0;
                        *(_QWORD *)(v165 + 1800) = 0;
                        *(_DWORD *)(v165 + 1816) = 0;
                        v167 = v166[224];
                        if (v167)
                        {
                          v168 = v166[226];
                          *(_QWORD *)(v165 + 1792) = v167;
                          re::DynamicArray<re::ViewConstantsLateLatch::LegacyPatchCommand>::setCapacity((_QWORD *)(v165 + 1792), v168);
                          ++*(_DWORD *)(v165 + 1816);
                          v169 = v166[226];
                          if (v169 >= *(_QWORD *)(v165 + 1808))
                          {
                            re::DynamicArray<re::ViewConstantsLateLatch::LegacyPatchCommand>::setCapacity((_QWORD *)(v165 + 1792), v166[226]);
                            v170 = (const void **)(v129 + (v128 << 11) + 1824);
                            v171 = *(_QWORD *)(v165 + 1808);
                            if (v171)
                            {
                              memmove(*(void **)(v165 + 1824), *v170, 16 * v171 - 7);
                              v171 = *(_QWORD *)(v165 + 1808);
                            }
                            memcpy((void *)(*(_QWORD *)(v165 + 1824) + 16 * v171), (char *)*v170 + 16 * v171, (_BYTE *)*v170 + 16 * v169 - ((_BYTE *)*v170 + 16 * v171));
                            v164 = v303;
                          }
                          else if (v169)
                          {
                            memmove(*(void **)(v165 + 1824), *(const void **)(v129 + (v128 << 11) + 1824), 16 * v169 - 7);
                          }
                          *(_QWORD *)(v165 + 1808) = v169;
                        }
                        *(_QWORD *)(v165 + 1864) = 0;
                        *(_QWORD *)(v165 + 1832) = 0;
                        *(_QWORD *)(v165 + 1848) = 0;
                        *(_QWORD *)(v165 + 1840) = 0;
                        *(_DWORD *)(v165 + 1856) = 0;
                        v172 = v166[229];
                        if (v172)
                        {
                          v173 = v165 + 1832;
                          v174 = v129 + (v128 << 11);
                          v175 = *(_QWORD *)(v174 + 1848);
                          *(_QWORD *)v173 = v172;
                          re::DynamicArray<re::PatchHandler>::setCapacity((_QWORD *)v173, v175);
                          ++*(_DWORD *)(v173 + 24);
                          v176 = *(_QWORD *)(v174 + 1848);
                          if (v176 >= *(_QWORD *)(v173 + 16))
                          {
                            re::DynamicArray<re::PatchHandler>::setCapacity((_QWORD *)v173, *(_QWORD *)(v174 + 1848));
                            v181 = *(_QWORD *)(v174 + 1864);
                            v182 = *(_QWORD *)(v173 + 16);
                            v183 = *(_QWORD *)(v173 + 32);
                            if (v182)
                            {
                              v184 = 16 * v182;
                              v185 = *(_OWORD **)(v173 + 32);
                              v186 = *(__int128 **)(v174 + 1864);
                              do
                              {
                                v187 = *v186++;
                                *v185++ = v187;
                                v184 -= 16;
                              }
                              while (v184);
                            }
                            if (v182 != v176)
                            {
                              v188 = (__int128 *)(v181 + 16 * v182);
                              v189 = (_OWORD *)(v183 + 16 * v182);
                              v190 = 16 * v176 - 16 * v182;
                              do
                              {
                                v191 = *v188++;
                                *v189++ = v191;
                                v190 -= 16;
                              }
                              while (v190);
                            }
                          }
                          else if (v176)
                          {
                            v177 = *(__int128 **)(v174 + 1864);
                            v178 = *(_OWORD **)(v173 + 32);
                            v179 = 16 * v176;
                            do
                            {
                              v180 = *v177++;
                              *v178++ = v180;
                              v179 -= 16;
                            }
                            while (v179);
                          }
                          *(_QWORD *)(v173 + 16) = v176;
                        }
                        *(_OWORD *)(v164 + (v135 << 11) + 1872) = *(_OWORD *)(v129 + (v128 << 11) + 1872);
                        *(_DWORD *)(*(_QWORD *)(v5 + 624) + 4 * v134) = v135;
                        ++*(_DWORD *)(v5 + 644);
                        v127 = DWORD2(v344);
                      }
                      ++v128;
                    }
                    while (v128 < v127);
                  }
                  ++*(_DWORD *)(v5 + 656);
                }
              }
            }
            v195 = (uint64_t *)(v5 + 664);
            if ((uint64_t *)(v5 + 664) != &v345)
            {
              if (!*v195 || !v345 || *v195 == v345)
              {
                if ((v347 & 1) != 0)
                {
                  v203 = v346;
                  if (v346)
                  {
                    *(_QWORD *)(v5 + 664) = v345;
                    if (v203 >= *(_QWORD *)(v5 + 672))
                    {
                      re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::setCapacity(v195, v203);
                      if ((v347 & 1) != 0)
                        v205 = &v348;
                      else
                        v205 = v349;
                      if ((*(_BYTE *)(v5 + 680) & 1) != 0)
                        v206 = (_BYTE *)(v5 + 688);
                      else
                        v206 = *(_BYTE **)(v5 + 696);
                      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)> *,re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)> *,re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)> *,0>(v205, &v205[59 * *(_QWORD *)(v5 + 672)], v206);
                      if ((*(_BYTE *)(v5 + 680) & 1) != 0)
                        v208 = v5 + 688;
                      else
                        v208 = *(_QWORD *)(v5 + 696);
                      v212 = *(_QWORD *)(v5 + 672);
                      v213 = v349;
                      if ((v347 & 1) != 0)
                        v213 = &v348;
                      if (v212 != v203)
                      {
                        v214 = 472 * v212;
                        v215 = &v213[(unint64_t)v214 / 8];
                        v216 = (_BYTE *)(v208 + v214);
                        v217 = 472 * v203 - v214;
                        do
                        {
                          v216[464] = 1;
                          re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>::operator=(v216, v215);
                          v215 += 59;
                          v216 += 472;
                          v217 -= 472;
                        }
                        while (v217);
                      }
                    }
                    else
                    {
                      if ((*(_BYTE *)(v5 + 680) & 1) != 0)
                        v204 = (_BYTE *)(v5 + 688);
                      else
                        v204 = *(_BYTE **)(v5 + 696);
                      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)> *,re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)> *,re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)> *,0>(&v348, (_BYTE *)&v348 + 472 * v203, v204);
                      if ((*(_BYTE *)(v5 + 680) & 1) != 0)
                        v207 = v5 + 688;
                      else
                        v207 = *(_QWORD *)(v5 + 696);
                      v209 = *(_QWORD *)(v5 + 672);
                      if (v203 != v209)
                      {
                        v210 = v207 + 472 * v203;
                        v211 = -472 * v203 + 472 * v209;
                        do
                        {
                          if (!*(_BYTE *)(v210 + 464))
                          {
                            (**(void (***)(unint64_t))v210)(v210);
                            *(_BYTE *)(v210 + 464) = 1;
                          }
                          v210 += 472;
                          v211 -= 472;
                        }
                        while (v211);
                      }
                    }
                    *(_QWORD *)(v5 + 672) = v203;
                    re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::clear((uint64_t)&v345);
                  }
                  else
                  {
                    re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::deinit((uint64_t)v195);
                    *(_QWORD *)(v5 + 664) = v345;
                  }
                  v347 += 2;
                  v199 = (_DWORD *)(v5 + 680);
                }
                else
                {
                  re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::clear((uint64_t)v195);
                  v196 = *(_QWORD *)(v5 + 664);
                  *(_QWORD *)(v5 + 664) = v345;
                  v345 = v196;
                  v197 = *(_QWORD *)(v5 + 672);
                  *(_QWORD *)(v5 + 672) = v346;
                  v346 = v197;
                  v198 = *(uint64_t **)(v5 + 696);
                  *(_QWORD *)(v5 + 696) = v349;
                  v349 = v198;
                  v199 = (_DWORD *)(v5 + 680);
                  v200 = *(_DWORD *)(v5 + 680);
                  v201 = v347;
                  *(_DWORD *)(v5 + 680) = v200 & 0xFFFFFFFE;
                  v202 = *(_QWORD *)(v5 + 688);
                  *(_QWORD *)(v5 + 688) = v348;
                  v348 = v202;
                  v347 = (v201 & 0xFFFFFFFE | v200 & 1) + 2;
                }
                *v199 += 2;
                goto LABEL_318;
              }
LABEL_421:
              re::internal::assertLog((re::internal *)4, v117, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 527);
              _os_crash();
              __break(1u);
            }
LABEL_318:
            v218 = *(_QWORD *)(v5 + 432);
            v219 = (uint64_t *)(v218 + 64);
            if ((uint64_t *)(v218 + 64) != &v332)
            {
              v220 = *v219;
              v221 = v332;
              if (*v219)
                v222 = v220 == v332;
              else
                v222 = 1;
              if (v222)
              {
                *(_QWORD *)(v218 + 64) = v332;
                v332 = v220;
                v223 = *(_QWORD *)(v218 + 72);
                *(_QWORD *)(v218 + 72) = v333;
                v333 = v223;
                v224 = *(_QWORD *)(v218 + 80);
                *(_QWORD *)(v218 + 80) = v334;
                v334 = v224;
                LODWORD(v224) = *(_DWORD *)(v218 + 88);
                *(_DWORD *)(v218 + 88) = v335;
                v335 = v224;
                LODWORD(v224) = *(_DWORD *)(v218 + 92);
                *(_DWORD *)(v218 + 92) = v336;
                v336 = v224;
                LODWORD(v224) = *(_DWORD *)(v218 + 96);
                *(_DWORD *)(v218 + 96) = v337;
                v337 = v224;
                LODWORD(v224) = *(_DWORD *)(v218 + 100);
                *(_DWORD *)(v218 + 100) = v338;
                v338 = v224;
              }
              else
              {
                if (*(_DWORD *)(v218 + 92))
                {
                  v225 = *(unsigned int *)(v218 + 88);
                  if ((_DWORD)v225)
                    memset_pattern16(*(void **)(v218 + 72), &unk_2260EB7B0, 4 * v225);
                  v226 = *(unsigned int *)(v218 + 96);
                  if ((_DWORD)v226)
                  {
                    v227 = 0;
                    v228 = 0;
                    v229 = 0uLL;
                    do
                    {
                      v230 = *(_QWORD *)(v218 + 80);
                      v231 = (__n128 *)(v230 + v227);
                      v232 = *(_DWORD *)(v230 + v227 + 8);
                      if (v232 < 0)
                      {
                        v231->n128_u32[2] = v232 & 0x7FFFFFFF;
                        v235 = v231[1].n128_i64[0];
                        v234 = v231 + 1;
                        v233 = v235;
                        if (v235)
                        {
                          if ((*(_BYTE *)(v230 + v227 + 24) & 1) != 0)
                          {
                            (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v233 + 40))(v233, *(_QWORD *)(v230 + v227 + 32), v229);
                            v229 = 0uLL;
                          }
                          *v234 = v229;
                          v234[1] = v229;
                          v226 = *(unsigned int *)(v218 + 96);
                        }
                        v236 = v230 + v227;
                        *(_QWORD *)(v236 + 48) = 0;
                        *(_DWORD *)(v236 + 56) = *(_DWORD *)(v230 + v227 + 56) + 1;
                      }
                      ++v228;
                      v227 += 224;
                    }
                    while (v228 < v226);
                  }
                  *(_DWORD *)(v218 + 92) = 0;
                  *(_DWORD *)(v218 + 96) = 0;
                  v237 = *(_DWORD *)(v218 + 104) + 1;
                  *(_DWORD *)(v218 + 100) = 0x7FFFFFFF;
                  *(_DWORD *)(v218 + 104) = v237;
                }
                if (v221)
                {
                  if (*(_DWORD *)(v218 + 88) < v336)
                    re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(v218 + 64, v336);
                  v238 = v337;
                  if (v337)
                  {
                    v239 = 0;
                    v240 = 0;
                    do
                    {
                      v241 = (_QWORD *)(v334 + v239);
                      if ((*(_DWORD *)(v334 + v239 + 8) & 0x80000000) != 0)
                      {
                        v242 = *v241;
                        v243 = *(unsigned int *)(v218 + 88);
                        v244 = *v241 % v243;
                        v245 = *(unsigned int *)(v218 + 100);
                        if ((_DWORD)v245 == 0x7FFFFFFF)
                        {
                          v245 = *(unsigned int *)(v218 + 96);
                          v246 = v245;
                          if ((_DWORD)v245 == (_DWORD)v243)
                          {
                            re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(v218 + 64, 2 * *(_DWORD *)(v218 + 92));
                            v244 = v242 % *(unsigned int *)(v218 + 88);
                            v246 = *(_DWORD *)(v218 + 96);
                          }
                          *(_DWORD *)(v218 + 96) = v246 + 1;
                          v247 = *(_QWORD *)(v218 + 80);
                          v248 = *(_DWORD *)(v247 + 224 * v245 + 8);
                        }
                        else
                        {
                          v247 = *(_QWORD *)(v218 + 80);
                          v248 = *(_DWORD *)(v247 + 224 * v245 + 8);
                          *(_DWORD *)(v218 + 100) = v248 & 0x7FFFFFFF;
                        }
                        *(_DWORD *)(v247 + 224 * v245 + 8) = v248 | 0x80000000;
                        *(_DWORD *)(*(_QWORD *)(v218 + 80) + 224 * v245 + 8) = *(_DWORD *)(*(_QWORD *)(v218 + 80)
                                                                                         + 224 * v245
                                                                                         + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v218 + 72) + 4 * v244);
                        *(_QWORD *)(*(_QWORD *)(v218 + 80) + 224 * v245) = v242;
                        re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(v218 + 80) + 224 * v245 + 16), (const re::DynamicString *)(v241 + 2));
                        v249 = *(_QWORD *)(v218 + 80);
                        *(_QWORD *)(v249 + 224 * v245 + 48) = 0;
                        v250 = v249 + 224 * v245 + 48;
                        *(_DWORD *)(v250 + 8) = 0;
                        re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>::copy((_QWORD *)v250, v241 + 6);
                        *(_DWORD *)(*(_QWORD *)(v218 + 72) + 4 * v244) = v245;
                        ++*(_DWORD *)(v218 + 92);
                        v238 = v337;
                      }
                      ++v240;
                      v239 += 224;
                    }
                    while (v240 < v238);
                  }
                  ++*(_DWORD *)(v218 + 104);
                }
              }
            }
            v251 = *(_QWORD *)(v5 + 432);
            v252 = v329;
            *(_OWORD *)(v251 + 32) = v328;
            *(_OWORD *)(v251 + 48) = v252;
            v299 = *(unsigned int *)(v5 + 520);
            v253 = 0;
            if ((_DWORD)v299)
            {
              v254 = *(int **)(v5 + 504);
              while (1)
              {
                v255 = *v254;
                v254 += 12;
                if (v255 < 0)
                  break;
                if (v299 == ++v253)
                {
                  LODWORD(v253) = *(_DWORD *)(v5 + 520);
                  break;
                }
              }
            }
            if ((_DWORD)v299 != (_DWORD)v253)
            {
              v256 = v253;
              v301 = (re::RenderFrameData *)(v5 + 264);
              do
              {
                v257 = *(_QWORD *)(v5 + 504);
                v258 = *(_QWORD *)(v257 + 48 * v256 + 24);
                if ((v258 & 1) != 0)
                {
                  v259 = *(_BYTE **)(v257 + 48 * v256 + 32);
                  if (!v259)
                    goto LABEL_368;
                  LOBYTE(v260) = *v259;
                }
                else
                {
                  v259 = (_BYTE *)(v257 + 48 * v256 + 25);
                  v260 = v258 >> 8;
                }
                if (!(_BYTE)v260)
                {
LABEL_368:
                  v260 = 0;
                  goto LABEL_369;
                }
                v260 = (char)v260;
                LOBYTE(v261) = v259[1];
                if ((_BYTE)v261)
                {
                  v262 = 2;
                  do
                  {
                    v260 = 31 * v260 + (char)v261;
                    v261 = v259[v262++];
                  }
                  while (v261);
                }
LABEL_369:
                v263 = 2 * v260;
                v320 = (id)(2 * v260);
                v321 = v259;
                *(_QWORD *)&buf[0] = v260 & 0x7FFFFFFFFFFFFFFFLL;
                v264 = re::RenderFrameData::stream(v301, (const re::WeakStringID *)buf);
                v265 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v264 + 48) + 632))(*(_QWORD *)(v264 + 48));
                if (v265)
                {
                  v266 = v265;
                  v267 = *(_QWORD *)(v265 + 40);
                  if (v267)
                  {
                    for (m = 0; m != v267; ++m)
                    {
                      v269 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v266, m);
                      v270 = *(_QWORD *)(v269 + 16);
                      if (v270)
                      {
                        v271 = *(float32x4_t **)(v269 + 32);
                        v272 = 672 * v270;
                        do
                        {
                          *(_QWORD *)&buf[0] = 0;
                          DWORD2(buf[0]) = 0;
                          v273 = *(float32x4_t **)(v5 + 432);
                          v274 = v273[3];
                          v306[0] = v273[2];
                          v306[1] = v274;
                          re::RenderCamera::transformWorldBoundsToScreen(v271 + 2, v306, (const re::Projection *)&v271[4], (uint64_t)v350);
                          v275 = *(_QWORD *)&buf[0];
                          re::DynamicInlineArray<REFrameAnalysisBottleneck,2ul>::ensureCapacity(*(unint64_t *)&buf[0], v276);
                          v277 = &buf[2 * v275 + 1];
                          v278 = *(_OWORD *)&v350[16];
                          *v277 = *(_OWORD *)v350;
                          v277[1] = v278;
                          ++*(_QWORD *)&buf[0];
                          ++DWORD2(buf[0]);
                          re::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicInlineArray<re::AABB,2ul>&>(*(_QWORD *)(v5 + 432) + 112, (const re::DynamicString *)v271, (uint64_t *)buf);
                          v271 += 42;
                          v272 -= 672;
                        }
                        while (v272);
                      }
                    }
                    v263 = (unint64_t)v320;
                  }
                }
                *(_QWORD *)&buf[0] = v263 >> 1;
                v279 = re::RenderFrameData::stream(v301, (const re::WeakStringID *)buf);
                v280 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v279 + 48) + 664))(*(_QWORD *)(v279 + 48));
                if (v280)
                {
                  v281 = v280;
                  v304 = *(_QWORD *)(v280 + 40);
                  if (v304)
                  {
                    for (n = 0; n != v304; ++n)
                    {
                      v283 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v281, n);
                      v284 = *(_QWORD *)(v283 + 16);
                      if (v284)
                      {
                        v285 = *(const re::DynamicString **)(v283 + 32);
                        v286 = (const re::DynamicString *)((char *)v285 + 1360 * v284);
                        do
                        {
                          v287 = 0;
                          *(_QWORD *)&buf[0] = 0;
                          DWORD2(buf[0]) = 0;
                          v288 = 1;
                          do
                          {
                            v289 = v288;
                            v290 = (float32x4_t *)((char *)v285 + 672 * v287);
                            v291 = *(float32x4_t **)(v5 + 432);
                            v292 = v291[3];
                            v305[0] = v291[2];
                            v305[1] = v292;
                            re::RenderCamera::transformWorldBoundsToScreen(v290 + 2, v305, (const re::Projection *)&v290[4], (uint64_t)v350);
                            v293 = *(_QWORD *)&buf[0];
                            re::DynamicInlineArray<REFrameAnalysisBottleneck,2ul>::ensureCapacity(*(unint64_t *)&buf[0], v294);
                            v288 = 0;
                            v295 = &buf[2 * v293 + 1];
                            v296 = *(_OWORD *)&v350[16];
                            *v295 = *(_OWORD *)v350;
                            v295[1] = v296;
                            ++*(_QWORD *)&buf[0];
                            ++DWORD2(buf[0]);
                            v287 = 1;
                          }
                          while ((v289 & 1) != 0);
                          re::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicInlineArray<re::AABB,2ul>&>(*(_QWORD *)(v5 + 432) + 112, v285, (uint64_t *)buf);
                          v285 = (const re::DynamicString *)((char *)v285 + 1360);
                        }
                        while (v285 != v286);
                      }
                    }
                  }
                }
                re::StringID::destroyString((re::StringID *)&v320);
                if (*(_DWORD *)(v5 + 520) <= (v253 + 1))
                  v297 = v253 + 1;
                else
                  v297 = *(_DWORD *)(v5 + 520);
                while (1)
                {
                  v256 = (v253 + 1);
                  if (v297 - 1 == (_DWORD)v253)
                    break;
                  LODWORD(v253) = v253 + 1;
                  v298 = v256;
                  if ((*(_DWORD *)(*(_QWORD *)(v5 + 504) + 48 * v256) & 0x80000000) != 0)
                    goto LABEL_393;
                }
                v298 = v297;
LABEL_393:
                LODWORD(v253) = v298;
              }
              while ((_DWORD)v299 != v298);
            }
            re::RenderGraphResourceAllocationManager::onFrameFinish(*(re::RenderGraphResourceAllocationManager **)(*(_QWORD *)v5 + 128));
            if (v339)
              re::DrawCallRecorder::dumpDrawCallsToDisk((re::DrawCallRecorder *)&v340);
            re::RenderGraphContext::~RenderGraphContext((re::RenderGraphContext *)&v324);
          }
          re::FixedArray<re::BufferSlice>::deinit((_QWORD *)&v312 + 1);
          re::FixedArray<NS::SharedPtr<NS::String>>::deinit(&v311);
          if (*((_QWORD *)&v309 + 1))
          {
            if (__dst[0])
            {
              (*(void (**)(void))(**((_QWORD **)&v309 + 1) + 40))();
              __dst[0] = 0;
              __dst[1] = 0;
            }
            *((_QWORD *)&v309 + 1) = 0;
          }
          result = (_QWORD *)v308;
          if ((_QWORD)v308 && *((_QWORD *)&v308 + 1))
          {
            v115 = v309;
            return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 40))(result, v115);
          }
          return result;
        }
      }
    }
    __dst[0] = (void *)v8;
    if (v8 < 0x555555555555556)
    {
      __dst[1] = v19;
      if (v19)
      {
        v22 = v8 - 1;
        if (v8 != 1)
        {
          do
          {
            *(_DWORD *)v19 = 0;
            *((_QWORD *)v19 + 1) = -1;
            *((_BYTE *)v19 + 16) = 0;
            *((_DWORD *)v19 + 5) = 1065353216;
            *((_QWORD *)v19 + 3) = 0xFFFFFFFF00000020;
            *((_OWORD *)v19 + 2) = xmmword_2260FF4D0;
            v19 = (_anonymous_namespace_ *)((char *)v19 + 48);
            --v22;
          }
          while (v22);
        }
        *(_DWORD *)v19 = 0;
        *((_QWORD *)v19 + 1) = -1;
        *((_BYTE *)v19 + 16) = 0;
        *((_DWORD *)v19 + 5) = 1065353216;
        *((_QWORD *)v19 + 3) = 0xFFFFFFFF00000020;
        *((_OWORD *)v19 + 2) = xmmword_2260FF4D0;
        goto LABEL_16;
      }
LABEL_420:
      re::internal::assertLog((re::internal *)4, v20, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
      goto LABEL_421;
    }
LABEL_419:
    re::internal::assertLog((re::internal *)6, v21, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 48, v8);
    _os_crash();
    __break(1u);
    goto LABEL_420;
  }
  if (!*(_QWORD *)(v5 + 3168))
  {
    re::DynamicString::format((re::DynamicString *)"No compiled render graph found for a frame without errors. Graph hash: %llu", (re::DynamicString *)&v324, *(_QWORD *)(v5 + 328));
    re::RenderFrame::addError(v5, (uint64_t)&v324);
    result = (_QWORD *)v324;
    if ((_QWORD)v324)
    {
      if ((BYTE8(v324) & 1) != 0)
      {
        v115 = v325;
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 40))(result, v115);
      }
    }
  }
  return result;
}

void *re::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicInlineArray<re::AABB,2ul>&>(uint64_t a1, const re::DynamicString *a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v19, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v13 == 0x7FFFFFFF)
    {
      v13 = *(unsigned int *)(a1 + 32);
      v14 = v13;
      if ((_DWORD)v13 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v8) = v7 % *(unsigned int *)(a1 + 24);
        v14 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 32) = v14 + 1;
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(_DWORD *)(v15 + (v13 << 7) + 8);
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(_DWORD *)(v15 + (v13 << 7) + 8);
      *(_DWORD *)(a1 + 36) = v16 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v15 + (v13 << 7) + 8) = v16 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v13 << 7) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v13 << 7) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v8);
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v13 << 7)) = v7;
    re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + (v13 << 7) + 16), a2);
    v17 = *(_QWORD *)(a1 + 16) + (v13 << 7);
    *(_QWORD *)(v17 + 48) = 0;
    *(_DWORD *)(v17 + 56) = 0;
    v18 = *a3;
    result = memcpy((void *)(v17 + 64), a3 + 2, 32 * *a3);
    *(_QWORD *)(v17 + 48) = v18;
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v8) = v13;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    return result;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + (v9 << 7);
    result = (void *)re::DynamicString::operator==(v11 + 16, (uint64_t)a2);
    if ((result & 1) != 0)
      return result;
    v9 = *(_DWORD *)(v11 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

uint64_t re::RenderFrame::addRateMap(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  id v6;
  id v7;

  if (!*a2)
    return 0xFFFFFFFFLL;
  v3 = *(_QWORD *)(a1 + 8);
  v7 = 0;
  if (*(_BYTE *)(v3 + 300))
  {
    v6 = objc_msgSend(*(id *)(v3 + 184), sel_newRasterizationRateMapWithDescriptor_);
    NS::SharedPtr<MTL::Texture>::operator=(&v7, &v6);
    if (v6)

  }
  re::DynamicArray<NS::SharedPtr<MTL::RasterizationRateMap>>::add((_anonymous_namespace_ *)(a1 + 4032), &v7);
  v4 = (*(_DWORD *)(a1 + 4048) - 1);
  if (v7)

  return v4;
}

id re::DynamicArray<NS::SharedPtr<MTL::RasterizationRateMap>>::add(_anonymous_namespace_ *this, id *a2)
{
  unint64_t v4;
  uint64_t v5;
  id result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<NS::SharedPtr<MTL::Fence>>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4);
  result = *a2;
  *(_QWORD *)(v5 + 8 * v4) = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::RenderFrame::reserveDynamicArraysSize(_QWORD *this, unint64_t a2, unint64_t a3)
{
  _QWORD *v5;

  v5 = this;
  if (this[500] < a3)
    this = re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::setCapacity(this + 499, a3);
  if (*(_BYTE *)(v5[1] + 300))
  {
    if (v5[505] < a2)
      this = re::DynamicArray<NS::SharedPtr<MTL::Fence>>::setCapacity(v5 + 504, a2);
    if (v5[510] < a3)
      return re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::setCapacity(v5 + 509, a3);
  }
  return this;
}

uint64_t re::RenderFrame::addRateMap(uint64_t a1, void **a2)
{
  uint64_t v3;
  id v5;

  if (!*a2 || !*(_BYTE *)(*(_QWORD *)(a1 + 8) + 300))
    return 0xFFFFFFFFLL;
  v5 = 0;
  NS::SharedPtr<MTL::Texture>::operator=(&v5, a2);
  re::DynamicArray<NS::SharedPtr<MTL::RasterizationRateMap>>::add((_anonymous_namespace_ *)(a1 + 4032), &v5);
  v3 = (*(_DWORD *)(a1 + 4048) - 1);
  if (v5)

  return v3;
}

void *re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::add(_anonymous_namespace_ *this, uint64_t *__src)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 48 * v4;
  *(_QWORD *)v5 = 0;
  *(_DWORD *)(v5 + 8) = 0;
  v6 = *__src;
  result = memcpy((void *)(v5 + 16), __src + 2, 16 * *__src);
  *(_QWORD *)v5 = v6;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_anonymous_namespace_ *re::FixedArray<re::RenderLayer>::operator=(_anonymous_namespace_ *a1, uint64_t *a2)
{
  unint64_t v4;

  if (*(_QWORD *)a1)
    goto LABEL_4;
  v4 = a2[1];
  if (v4)
  {
LABEL_4:
    re::FixedArray<re::RenderLayer>::copy((uint64_t)a1, a2);
  }
  return a1;
}

_QWORD *re::RenderFrame::identifyUsedRenderLayers(_QWORD *this)
{
  unint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  this[51] = 0;
  v1 = this[501];
  if (v1)
  {
    v2 = this;
    v3 = 0;
    v4 = 0;
    v5 = (uint64_t)(this + 51);
    do
    {
      v6 = v2[503];
      if (!*(_QWORD *)(v6 + v3 + 8) && !*(_QWORD *)(v6 + v3 + 16))
      {
        v7 = *(unsigned int *)(v6 + v3 + 24);
        if ((_DWORD)v7 != -1 && v2[515] > v7)
        {
          this = (_QWORD *)re::Bitset<64>::toWordIndex(v5, v7);
          *(_QWORD *)(v5 + 8 * this) |= 1 << v7;
          v1 = v2[501];
        }
      }
      ++v4;
      v3 += 104;
    }
    while (v1 > v4);
  }
  return this;
}

void re::RenderFrame::acquireDrawables(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id *v18;
  uint64_t v19;
  float *v20;
  float v21;
  float v22;
  double v23;
  float v24;
  double v25;
  float v26;
  uint64_t v27;
  double v29;
  float v30;
  double v31;
  float v32;
  float v33;
  id *v34;
  id v35;
  id v36;
  id *v37;
  id v38;
  _BYTE v39[16];
  uint64_t v40;
  int v41;
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  unint64_t v46;
  __int16 v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 4120);
  a2[1] = v4;
  if (v4)
  {
    if (v4 >> 61)
      goto LABEL_51;
    a2[2] = v6;
    if (!v6)
    {
LABEL_52:
      re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
      _os_crash();
      __break(1u);
    }
    v8 = v6;
    if (v4 != 1)
    {
      bzero(v6, 8 * v4 - 8);
      v8 += v4 - 1;
    }
    *v8 = 0;
  }
  v9 = *(_QWORD *)(a1 + 4120);
  v10 = *(_QWORD *)(a1 + 4152);
  if (v10 >= v9)
  {
    if (v10 <= v9)
      goto LABEL_18;
    v11 = *(_QWORD *)(a1 + 4120);
    do
    {
      v12 = *(_QWORD *)(a1 + 4168);
      v13 = *(void **)(v12 + 8 * v11);
      if (v13)
      {

        *(_QWORD *)(v12 + 8 * v11) = 0;
        v10 = *(_QWORD *)(a1 + 4152);
      }
      ++v11;
    }
    while (v11 < v10);
  }
  else
  {
    if (*(_QWORD *)(a1 + 4144) < v9)
    {
      re::DynamicArray<NS::SharedPtr<MTL::Fence>>::setCapacity((_QWORD *)(a1 + 4136), *(_QWORD *)(a1 + 4120));
      v10 = *(_QWORD *)(a1 + 4152);
    }
    if (v9 > v10)
      bzero((void *)(*(_QWORD *)(a1 + 4168) + 8 * v10), 8 * (v9 - v10));
  }
  *(_QWORD *)(a1 + 4152) = v9;
  ++*(_DWORD *)(a1 + 4160);
LABEL_18:
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v39, 5006, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)(a1 + 4120))
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    while (1)
    {
      v17 = *(_QWORD *)(a1 + 4128);
      v18 = (id *)(v17 + v14);
      if (!*(_QWORD *)(v17 + v14)
        || ((*(_QWORD *)(a1 + 408 + 8 * re::Bitset<64>::toWordIndex(a1 + 408, v16)) >> v16) & 1) == 0)
      {
        goto LABEL_46;
      }
      v19 = v17 + v14;
      if (*(_BYTE *)(v17 + v14 + 20))
        break;
      if (*(_BYTE *)(v17 + v14 + 8))
      {
        objc_msgSend(*v18, "drawableSize");
        v24 = v23;
        v26 = v25;
        v27 = v17 + 4 * v15;
        v21 = *(float *)(v27 + 12);
        v22 = *(float *)(v27 + 16);
        if (v21 != v24 || v22 != v26)
LABEL_33:
          objc_msgSend(*v18, "setDrawableSize:", v21, v22);
        if (*(_BYTE *)(v19 + 8))
          *(_BYTE *)(v19 + 8) = 0;
      }
      if (*(_BYTE *)(v19 + 20))
        *(_BYTE *)(v19 + 20) = 0;
      re::mtl::Layer::nextDrawable(v18, &v38);
      v4 = a2[1];
      if (v4 <= v16)
      {
        v40 = 0;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v49 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v41 = 136315906;
        v42 = "operator[]";
        v43 = 1024;
        v44 = 468;
        v45 = 2048;
        v46 = v16;
        v47 = 2048;
        v48 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_49:
        v40 = 0;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v49 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v41 = 136315906;
        v42 = "operator[]";
        v43 = 1024;
        v44 = 468;
        v45 = 2048;
        v46 = v16;
        v47 = 2048;
        v48 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_50:
        v40 = 0;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v49 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v41 = 136315906;
        v42 = "operator[]";
        v43 = 1024;
        v44 = 789;
        v45 = 2048;
        v46 = v16;
        v47 = 2048;
        v48 = v4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_51:
        re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, v4);
        _os_crash();
        __break(1u);
        goto LABEL_52;
      }
      v34 = (id *)(a2[2] + v15);
      if (v34 != &v38)
      {
        v35 = v38;
        v38 = 0;
        v36 = *v34;
        *v34 = v35;

      }
      v4 = a2[1];
      if (v4 <= v16)
        goto LABEL_49;
      v37 = (id *)(a2[2] + v15);
      if (*v37)
      {
        re::mtl::Drawable::texture(v37, &v38);
        v4 = *(_QWORD *)(a1 + 4152);
        if (v4 <= v16)
          goto LABEL_50;
        NS::SharedPtr<MTL::Texture>::operator=((void **)(*(_QWORD *)(a1 + 4168) + v15), &v38);
        if (v38)

      }
LABEL_46:
      ++v16;
      v15 += 8;
      v14 += 32;
      if (*(_QWORD *)(a1 + 4120) <= v16)
        goto LABEL_47;
    }
    if (*(_BYTE *)(v17 + v14 + 8))
    {
      v20 = (float *)(v17 + 4 * v15);
      objc_msgSend(*v18, "setContentsScale:", v20[6]);
      v21 = v20[3];
      v22 = v20[4];
    }
    else
    {
      objc_msgSend(*v18, "bounds");
      v30 = v29;
      v32 = v31;
      v33 = *(float *)(v17 + 4 * v15 + 24);
      objc_msgSend(*v18, "setContentsScale:", v33);
      v21 = v33 * v30;
      v22 = v33 * v32;
    }
    goto LABEL_33;
  }
LABEL_47:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v39);
}

void re::RenderFrame::specifyDepthOrStencilLaneWhenColorIsSpecified(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int ScopeOutputIndex;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  re::DynamicString *v18;
  __int128 v19;
  __int128 v20;
  _anonymous_namespace_ *v21;
  _anonymous_namespace_ *v22;
  id v23[2];
  id v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char v29;
  _BYTE v30[12];
  __int16 v31;
  int v32;
  __int16 v33;
  unint64_t v34;
  __int16 v35;
  unint64_t v36;
  _QWORD v37[6];
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (!a1[470])
    return;
  v5 = 0;
  v22 = (_anonymous_namespace_ *)(a1 + 499);
  v21 = (_anonymous_namespace_ *)(a1 + 473);
  do
  {
    v6 = a1[472];
    if (!*(_DWORD *)(v6 + 136 * v5 + 32))
      goto LABEL_30;
    v23[0] = (id)(*a2 & 0x7FFFFFFFFFFFFFFFLL);
    v7 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v6 + 136 * v5 + 40, (uint64_t *)v23);
    if (!v7)
      goto LABEL_30;
    v8 = v7;
    if (!*(_BYTE *)(v7 + 112))
      goto LABEL_30;
    v9 = a1[470];
    if (v9 <= v5)
      goto LABEL_33;
    v10 = a1[472] + 136 * v5 + 40;
    v23[0] = (id)65290051;
    v11 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v10, (uint64_t *)v23);
    if (!v11)
      goto LABEL_30;
    v12 = v11;
    if (*(_BYTE *)(v11 + 112))
      goto LABEL_30;
    v2 = *(_QWORD *)(v11 + 120);
    if (v2 != -1)
      goto LABEL_19;
    v9 = a1[470];
    if (v9 <= v5)
      goto LABEL_37;
    ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex((re::RenderFrame *)a1, *(const char **)(a1[472] + 136 * v5 + 24));
    if (ScopeOutputIndex == -1)
      goto LABEL_18;
    do
    {
      v9 = ScopeOutputIndex;
      v14 = a1[470];
      if (v14 <= ScopeOutputIndex)
      {
        *(_QWORD *)v30 = 0;
        v26 = 0u;
        v27 = 0u;
        *(_OWORD *)v24 = 0u;
        v25 = 0u;
        *(_OWORD *)v23 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v37[0]) = 136315906;
        *(_QWORD *)((char *)v37 + 4) = "operator[]";
        WORD2(v37[1]) = 1024;
        *(_DWORD *)((char *)&v37[1] + 6) = 789;
        WORD1(v37[2]) = 2048;
        *(_QWORD *)((char *)&v37[2] + 4) = v9;
        WORD2(v37[3]) = 2048;
        *(_QWORD *)((char *)&v37[3] + 6) = v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_33:
        *(_QWORD *)v30 = 0;
        v26 = 0u;
        v27 = 0u;
        *(_OWORD *)v24 = 0u;
        v25 = 0u;
        *(_OWORD *)v23 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v37[0]) = 136315906;
        *(_QWORD *)((char *)v37 + 4) = "operator[]";
        WORD2(v37[1]) = 1024;
        *(_DWORD *)((char *)&v37[1] + 6) = 789;
        WORD1(v37[2]) = 2048;
        *(_QWORD *)((char *)&v37[2] + 4) = v5;
        WORD2(v37[3]) = 2048;
        *(_QWORD *)((char *)&v37[3] + 6) = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_34:
        v38 = 0u;
        v39 = 0u;
        memset(v37, 0, sizeof(v37));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v30 = 136315906;
        *(_QWORD *)&v30[4] = "operator[]";
        v31 = 1024;
        v32 = 789;
        v33 = 2048;
        v34 = v2;
        v35 = 2048;
        v36 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_35:
        v38 = 0u;
        v39 = 0u;
        memset(v37, 0, sizeof(v37));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v30 = 136315906;
        *(_QWORD *)&v30[4] = "operator[]";
        v31 = 1024;
        v32 = 789;
        v33 = 2048;
        v34 = v5;
        v35 = 2048;
        v36 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_36:
        v38 = 0u;
        v39 = 0u;
        memset(v37, 0, sizeof(v37));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v30 = 136315906;
        *(_QWORD *)&v30[4] = "operator[]";
        v31 = 1024;
        v32 = 789;
        v33 = 2048;
        v34 = v5;
        v35 = 2048;
        v36 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_37:
        *(_QWORD *)v30 = 0;
        v26 = 0u;
        v27 = 0u;
        *(_OWORD *)v24 = 0u;
        v25 = 0u;
        *(_OWORD *)v23 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v37[0]) = 136315906;
        *(_QWORD *)((char *)v37 + 4) = "operator[]";
        WORD2(v37[1]) = 1024;
        *(_DWORD *)((char *)&v37[1] + 6) = 789;
        WORD1(v37[2]) = 2048;
        *(_QWORD *)((char *)&v37[2] + 4) = v5;
        WORD2(v37[3]) = 2048;
        *(_QWORD *)((char *)&v37[3] + 6) = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v15 = a1[472];
      v23[0] = (id)65290051;
      v16 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v15 + 136 * ScopeOutputIndex + 40, (uint64_t *)v23);
      v12 = v16;
      if (v16)
      {
        if (!*(_BYTE *)(v16 + 112))
        {
          v2 = *(_QWORD *)(v16 + 120);
          if (v2 != -1)
            goto LABEL_19;
        }
      }
      ScopeOutputIndex = re::RenderFrame::getScopeOutputIndex((re::RenderFrame *)a1, *(const char **)(v15 + 136 * v9 + 24));
    }
    while (ScopeOutputIndex != -1);
    if (!v12)
      goto LABEL_30;
LABEL_18:
    v2 = *(_QWORD *)(v12 + 120);
LABEL_19:
    v9 = a1[501];
    if (v9 <= v2)
      goto LABEL_34;
    v17 = a1[503] + 104 * v2;
    v23[0] = *(id *)v17;
    v23[1] = *(id *)(v17 + 8);
    v24[0] = *(id *)(v17 + 16);
    LODWORD(v24[1]) = *(_DWORD *)(v17 + 24);
    v18 = re::DynamicString::DynamicString((re::DynamicString *)&v25, (const re::DynamicString *)(v17 + 32));
    v19 = *(_OWORD *)(v17 + 64);
    v20 = *(_OWORD *)(v17 + 80);
    v29 = *(_BYTE *)(v17 + 96);
    v27 = v19;
    v28 = v20;
    v9 = a1[470];
    if (v9 <= v5)
      goto LABEL_35;
    re::DynamicString::operator=(v18, a1[472] + 136 * v5);
    DWORD2(v28) = v5;
    v23[0] = (id)(*a2 & 0x7FFFFFFFFFFFFFFFLL);
    LOWORD(v27) = 0;
    re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::add(v22, (uint64_t)v23);
    v37[0] = v23[0];
    v37[1] = __PAIR64__(DWORD2(v28), v24[1]);
    LOWORD(v37[2]) = v27;
    LOBYTE(v37[3]) = 1;
    v37[4] = *(_QWORD *)(v12 + 120);
    re::DynamicArray<re::AutomaticSpecifyScopeParameters>::add(v21, (uint64_t)v37);
    *(_BYTE *)(v8 + 112) = 0;
    *(_QWORD *)(v8 + 120) = a1[501] - 1;
    v9 = a1[470];
    if (v9 <= v5)
      goto LABEL_36;
    --*(_DWORD *)(a1[472] + 136 * v5 + 32);
    if ((_QWORD)v25)
    {
      if ((BYTE8(v25) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v25 + 40))();
      v25 = 0u;
      v26 = 0u;
    }
    if (v24[0])
    {

      v24[0] = 0;
    }
    if (v23[1])

LABEL_30:
    ++v5;
  }
  while (v5 < a1[470]);
}

_anonymous_namespace_ *re::DynamicArray<re::AutomaticSpecifyScopeParameters>::add(_anonymous_namespace_ *result, uint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v5 = *((_QWORD *)result + 1);
  v4 = *((_QWORD *)result + 2);
  if (v4 >= v5)
  {
    v6 = v4 + 1;
    if (v5 < v4 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v5;
        if (!v5)
          v7 = 8;
        if (v7 <= v6)
          v8 = v6;
        else
          v8 = v7;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::AutomaticSpecifyScopeParameters>::setCapacity(result, v8);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::AutomaticSpecifyScopeParameters>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v4 = *((_QWORD *)v3 + 2);
  }
  v9 = *((_QWORD *)v3 + 4);
  v10 = v9 + 40 * v4;
  *(_QWORD *)v10 = *(_QWORD *)a2;
  v11 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(v10 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(v10 + 8) = v11;
  LODWORD(v11) = *(unsigned __int8 *)(a2 + 24);
  *(_BYTE *)(v10 + 24) = v11;
  if ((_DWORD)v11)
    *(_QWORD *)(v9 + 40 * v4 + 32) = *(_QWORD *)(a2 + 32);
  ++*((_QWORD *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::FixedArray<unsigned long long>::init<int>(_QWORD *result, uint64_t a2, unint64_t a3, int *a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v6 = result;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 8 * a3, 8);
  v6[2] = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v8 = *a4;
  v9 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *result++ = v8;
      --v9;
    }
    while (v9);
  }
  *result = v8;
  return result;
}

re::StringID *`anonymous namespace'::getSpecifyWithRenderLayerID(re::StringID *this, uint64_t a2)
{
  re::StringID *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _anonymous_namespace_ *v7;
  const char *v8;
  uint64_t v9;
  char v10;
  _BYTE v11[23];

  v3 = this;
  if (a2 > 7)
  {
    v7 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"SpecifyRenderLayer%d", (re::DynamicString *)&v9, a2);
    if ((v10 & 1) != 0)
      v8 = *(const char **)&v11[7];
    else
      v8 = v11;
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = &str_110;
    this = (re::StringID *)v9;
    if (v9)
    {
      if ((v10 & 1) != 0)
        return (re::StringID *)(*(uint64_t (**)(void))(*(_QWORD *)v9 + 40))();
    }
  }
  else
  {
    v4 = (uint64_t *)((char *)&unk_24ED752D0 + 16 * a2);
    v6 = *v4;
    v5 = v4[1];
    *(_QWORD *)this = 2 * v6;
    *((_QWORD *)this + 1) = v5;
  }
  return this;
}

_DWORD *re::RenderFrame::specifyScopeLaneInternal(unint64_t *a1, _QWORD *a2, uint64_t a3, int a4, unint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *result;
  _QWORD v15[2];
  _QWORD v16[2];

  v10 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a3 + 40, *a1);
  if (v10)
  {
    v11 = v10;
    if (*(_DWORD *)(v10 + 88) != -1 && *(_DWORD *)(v10 + 92) != -1)
    {
      v12 = (_DWORD *)re::RenderGraphCompiled::targetDescription((uint64_t)a5, v10 + 80);
      if (*v12 == 3)
      {
        v13 = v12;
        if (a4)
        {
          v16[0] = *(_QWORD *)(v11 + 80);
          v16[1] = *(_QWORD *)(v11 + 88);
          v15[0] = *a2;
          v15[1] = a2[1];
          re::RenderGraphResourceDescriptions::specify(a5, (uint64_t)v16, (uint64_t)v15, 1, (_anonymous_namespace_ *)(a5 + 72));
          *((_BYTE *)v13 + 104) = 1;
        }
        else
        {
          *v12 = 0;
        }
      }
    }
  }
  result = (_DWORD *)re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a3 + 88, *a1);
  if (result && result[26] != -1 && result[27] != -1)
  {
    result = (_DWORD *)re::RenderGraphCompiled::bufferDescription((uint64_t)a5, (uint64_t)(result + 24));
    if (*result == 3)
      *result = 0;
  }
  return result;
}

uint64_t re::RenderGraphCompiled::bufferDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(a1 + 312);
  v3 = *(unsigned int *)(a2 + 12);
  if (*(_QWORD *)(v2 + 16) <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(v2 + 32) + 48 * v3;
}

uint64_t re::RenderFrame::makeRenderGraphManagedInternal(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  _DWORD *v15;
  uint64_t result;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;

  v6 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a2 + 40, *a1);
  if (v6)
  {
    v7 = (_QWORD *)v6;
    if (*(_QWORD *)(v6 + 16))
    {
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = (uint64_t *)(v7[4] + v8);
        v24 = 0;
        v25 = -1;
        v24 = *v10;
        v25 = v10[1];
        v11 = (_DWORD *)re::RenderGraphCompiled::targetDescription(a3, (uint64_t)&v24);
        if (*v11 == 3)
          *v11 = 0;
        ++v9;
        v8 += 16;
      }
      while (v7[2] > v9);
    }
    if (v7[7])
    {
      v12 = 0;
      v13 = 0;
      do
      {
        v14 = (uint64_t *)(v7[9] + v12);
        v24 = 0;
        v25 = -1;
        v24 = *v14;
        v25 = v14[1];
        v15 = (_DWORD *)re::RenderGraphCompiled::bufferDescription(a3, (uint64_t)&v24);
        if (*v15 == 3)
          *v15 = 0;
        ++v13;
        v12 += 16;
      }
      while (v7[7] > v13);
    }
  }
  result = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a2 + 88, *a1);
  if (result)
  {
    v17 = (_QWORD *)result;
    if (*(_QWORD *)(result + 56))
    {
      v18 = 0;
      v19 = 0;
      do
      {
        v20 = (uint64_t *)(v17[9] + v18);
        v24 = 0;
        v25 = -1;
        v24 = *v20;
        v25 = v20[1];
        result = re::RenderGraphCompiled::bufferDescription(a3, (uint64_t)&v24);
        if (*(_DWORD *)result == 3)
          *(_DWORD *)result = 0;
        ++v19;
        v18 += 16;
      }
      while (v17[7] > v19);
    }
    if (v17[2])
    {
      v21 = 0;
      v22 = 0;
      do
      {
        v23 = (uint64_t *)(v17[4] + v21);
        v24 = 0;
        v25 = -1;
        v24 = *v23;
        v25 = v23[1];
        result = re::RenderGraphCompiled::targetDescription(a3, (uint64_t)&v24);
        if (*(_DWORD *)result == 3)
          *(_DWORD *)result = 0;
        ++v22;
        v21 += 16;
      }
      while (v17[2] > v22);
    }
  }
  return result;
}

void re::RenderFrame::fillScopeLaneProperties(uint64_t a1, unint64_t a2, id *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _DWORD *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  _DWORD *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;

  v8 = re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(a4 + 40, a2);
  if (v8)
  {
    v9 = (_QWORD *)v8;
    if (*(_QWORD *)(v8 + 16))
    {
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = (uint64_t *)(v9[4] + v10);
        v21 = 0;
        v22 = -1;
        v21 = *v12;
        v22 = v12[1];
        v13 = (_DWORD *)re::RenderGraphExecutable::targetDescription(a5, (uint64_t)&v21);
        if ((*v13 | 4) == 4)
        {
          v14 = (uint64_t)v13;
          if (*a3)
          {
            v15 = *a3;
            v20 = v15;
            re::RenderGraphTargetDescription::makeValid(v14, &v20, *(_QWORD *)(a1 + 416));
            if (v15)
            {

              v20 = 0;
            }
          }
        }
        ++v11;
        v10 += 16;
      }
      while (v9[2] > v11);
    }
    if (v9[7])
    {
      v16 = 0;
      v17 = 0;
      do
      {
        v18 = (uint64_t *)(v9[9] + v16);
        v21 = 0;
        v22 = -1;
        v21 = *v18;
        v22 = v18[1];
        v19 = (_DWORD *)re::RenderGraphExecutable::bufferDescription(a5, (uint64_t)&v21);
        if ((*v19 | 4) == 4)
        {
          if (*a3)
            re::RenderGraphBufferDescription::makeValid((uint64_t)v19, a3, *(_QWORD *)(a1 + 416));
        }
        ++v17;
        v16 += 16;
      }
      while (v9[7] > v17);
    }
  }
}

_QWORD *re::RenderFrame::createWorkload@<X0>(re::RenderFrame *this@<X0>, uint64_t *a2@<X8>)
{
  re::make::shared::object<re::RenderFrameWorkload>(this, a2);
  *(_QWORD *)(*a2 + 40) = *((_QWORD *)this + 46);
  *(_QWORD *)(*a2 + 48) = *((_QWORD *)this + 48);
  *(_QWORD *)(*a2 + 32) = *((_QWORD *)this + 3);
  return re::DynamicArray<re::SharedPtr<re::RenderFrameWorkload>>::add((_QWORD *)this + 494, a2);
}

_QWORD *re::DynamicArray<re::SharedPtr<re::RenderFrameWorkload>>::add(_QWORD *this, uint64_t *a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<NS::SharedPtr<MTL::Fence>>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = *a2;
  *(_QWORD *)(v3[4] + 8 * v4) = *a2;
  if (v5)
  {
    this = (id)(v5 + 8);
    v4 = v3[2];
  }
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

void re::RenderFrameWorkload::~RenderFrameWorkload(re::RenderFrameWorkload *this)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;

  *(_QWORD *)this = &off_24ED75298;
  v2 = *((_QWORD *)this + 7);
  if (v2)
  {

    *((_QWORD *)this + 7) = 0;
  }
  re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit((uint64_t)this + 472);
  re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit((uint64_t)this + 432);
  re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit((uint64_t)this + 392);
  re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit((uint64_t)this + 352);
  re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit((uint64_t)this + 312);
  re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit((uint64_t)this + 272);
  re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit((uint64_t)this + 232);
  v3 = *((_QWORD *)this + 24);
  if (v3)
  {
    v4 = (void **)*((_QWORD *)this + 28);
    if (v4)
    {
      v5 = *((_QWORD *)this + 26);
      if (v5)
      {
        v6 = 8 * v5;
        do
        {
          v7 = *v4++;

          v6 -= 8;
        }
        while (v6);
        v3 = *((_QWORD *)this + 24);
        v4 = (void **)*((_QWORD *)this + 28);
      }
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 40))(v3, v4);
    }
    *((_QWORD *)this + 28) = 0;
    *((_QWORD *)this + 25) = 0;
    *((_QWORD *)this + 26) = 0;
    *((_QWORD *)this + 24) = 0;
    ++*((_DWORD *)this + 54);
  }
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)this + 144);
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)this + 104);
  v8 = (void *)*((_QWORD *)this + 11);
  if (v8)
  {

    *((_QWORD *)this + 11) = 0;
  }
  v9 = (void *)*((_QWORD *)this + 9);
  if (v9)
  {

    *((_QWORD *)this + 9) = 0;
  }
  v10 = *((_QWORD *)this + 7);
  if (v10)
  {

    *((_QWORD *)this + 7) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::RenderFrameWorkload::~RenderFrameWorkload(this);
  JUMPOUT(0x2276933ACLL);
}

uint64_t re::RenderFrameWorkload::configure(re::RenderFrameWorkload *this, re::RenderFrameSettings *a2)
{
  re::RenderFrameSettings *v2;
  char *v4;
  uint64_t v5;

  v2 = a2;
  if (a2)
    v4 = (char *)a2 + 8;
  v5 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v2;
  if (v5)
  {

    v2 = (re::RenderFrameSettings *)*((_QWORD *)this + 7);
  }
  *((_DWORD *)this + 16) = *((_DWORD *)v2 + 6);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 9, (void **)v2 + 4);
  *((_QWORD *)this + 10) = *((_QWORD *)v2 + 5);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 11, (void **)v2 + 6);
  *((_QWORD *)this + 12) = *((_QWORD *)v2 + 7);
  re::DynamicArray<re::RenderFrameEvent>::operator=((uint64_t)this + 104, (uint64_t *)v2 + 8);
  return re::DynamicArray<re::RenderFrameEvent>::operator=((uint64_t)this + 144, (uint64_t *)v2 + 13);
}

uint64_t re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 40 * v4;
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v5 + 32) = 0;
  result = re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(v5, a2);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

id re::DynamicArray<re::mtl::Drawable>::add(_anonymous_namespace_ *this, id *a2)
{
  unint64_t v4;
  uint64_t v5;
  id result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::mtl::Drawable>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4);
  result = *a2;
  *(_QWORD *)(v5 + 8 * v4) = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::RenderFrameWorkload::beforeEmit(re::RenderFrameWorkload *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  re::RenderFrameWorkload *v7;

  v2 = *((_QWORD *)this + 31);
  if (v2)
  {
    v3 = 40 * v2;
    v4 = (uint64_t *)(*((_QWORD *)this + 33) + 32);
    do
    {
      v7 = this;
      v5 = *v4;
      v4 += 5;
      (*(void (**)(uint64_t, re::RenderFrameWorkload **))(*(_QWORD *)v5 + 16))(v5, &v7);
      v3 -= 40;
    }
    while (v3);
  }
  return re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit((uint64_t)this + 232);
}

uint64_t re::RenderFrameWorkload::beforeEncode(uint64_t this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = this;
  v2 = (unsigned __int8 *)(this + 512);
  do
  {
    if (__ldaxr(v2))
    {
      __clrex();
      return this;
    }
  }
  while (__stlxr(1u, v2));
  v4 = *(_QWORD *)(this + 288);
  if (v4)
  {
    v5 = 40 * v4;
    v6 = (uint64_t *)(*(_QWORD *)(this + 304) + 32);
    do
    {
      v8 = v1;
      v7 = *v6;
      v6 += 5;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 16))(v7, &v8);
      v5 -= 40;
    }
    while (v5);
  }
  return re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit(v1 + 272);
}

uint64_t re::RenderFrameWorkload::postEncode(re::RenderFrameWorkload *this)
{
  uint64_t result;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  re::RenderFrameWorkload *v9;

  result = re::RenderFrameWorkload::beforeEncode((uint64_t)this);
  v3 = (unsigned __int8 *)this + 576;
  do
  {
    if (__ldaxr(v3))
    {
      __clrex();
      return result;
    }
  }
  while (__stlxr(1u, v3));
  v5 = *((_QWORD *)this + 41);
  if (v5)
  {
    v6 = 40 * v5;
    v7 = (uint64_t *)(*((_QWORD *)this + 43) + 32);
    do
    {
      v9 = this;
      v8 = *v7;
      v7 += 5;
      (*(void (**)(uint64_t, re::RenderFrameWorkload **))(*(_QWORD *)v8 + 16))(v8, &v9);
      v6 -= 40;
    }
    while (v6);
  }
  return re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit((uint64_t)this + 312);
}

uint64_t re::RenderFrameWorkload::encoded(re::RenderFrameWorkload *this)
{
  uint64_t result;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  re::RenderFrameWorkload *v9;

  result = re::RenderFrameWorkload::postEncode(this);
  v3 = (unsigned __int8 *)this + 640;
  do
  {
    if (__ldaxr(v3))
    {
      __clrex();
      return result;
    }
  }
  while (__stlxr(1u, v3));
  v5 = *((_QWORD *)this + 46);
  if (v5)
  {
    v6 = 40 * v5;
    v7 = (uint64_t *)(*((_QWORD *)this + 48) + 32);
    do
    {
      v9 = this;
      v8 = *v7;
      v7 += 5;
      (*(void (**)(uint64_t, re::RenderFrameWorkload **))(*(_QWORD *)v8 + 16))(v8, &v9);
      v6 -= 40;
    }
    while (v6);
  }
  return re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit((uint64_t)this + 352);
}

uint64_t re::RenderFrameWorkload::scheduled(re::RenderFrameWorkload *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  re::RenderFrameWorkload *v7;

  re::RenderFrameWorkload::encoded(this);
  v2 = *((_QWORD *)this + 56);
  if (v2)
  {
    v3 = 40 * v2;
    v4 = (uint64_t *)(*((_QWORD *)this + 58) + 32);
    do
    {
      v7 = this;
      v5 = *v4;
      v4 += 5;
      (*(void (**)(uint64_t, re::RenderFrameWorkload **))(*(_QWORD *)v5 + 16))(v5, &v7);
      v3 -= 40;
    }
    while (v3);
  }
  return re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit((uint64_t)this + 432);
}

uint64_t re::RenderFrameWorkload::completed(re::RenderFrameWorkload *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  re::RenderFrameWorkload *v7;

  re::RenderFrameWorkload::scheduled(this);
  v2 = *((_QWORD *)this + 51);
  if (v2)
  {
    v3 = 40 * v2;
    v4 = (uint64_t *)(*((_QWORD *)this + 53) + 32);
    do
    {
      v7 = this;
      v5 = *v4;
      v4 += 5;
      (*(void (**)(uint64_t, re::RenderFrameWorkload **))(*(_QWORD *)v5 + 16))(v5, &v7);
      v3 -= 40;
    }
    while (v3);
  }
  return re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit((uint64_t)this + 392);
}

uint64_t re::RenderFrameWorkload::beforeCommandBufferCommitted(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 488);
  if (v3)
  {
    v5 = 40 * v3;
    v6 = (uint64_t *)(*(_QWORD *)(a1 + 504) + 32);
    do
    {
      v7 = *v6;
      v6 += 5;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      v5 -= 40;
    }
    while (v5);
  }
  return re::DynamicArray<re::Function<re::SceneAssetRemapperImplementation::SceneRemappingResult ()(re::ecs2::Scene *)>>::deinit(a1 + 472);
}

void re::RenderFrameWorkload::presentDrawables(re::RenderFrameWorkload *this, id *a2)
{
  unint64_t v4;

  if (*((_QWORD *)this + 26))
  {
    v4 = 0;
    do
      objc_msgSend(*a2, "presentDrawable:afterMinimumDuration:", *(_QWORD *)(*((_QWORD *)this + 28) + 8 * v4++), 1.0 / *(float *)(*((_QWORD *)this + 4) + 1760));
    while (*((_QWORD *)this + 26) > v4);
  }
  re::DynamicArray<re::mtl::Drawable>::clear((uint64_t)this + 192);
}

void re::DynamicArray<re::mtl::Drawable>::clear(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = *(void ***)(a1 + 32);
    v4 = 8 * v2;
    do
    {
      v5 = *v3++;

      v4 -= 8;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

void re::RenderFrameWorkload::immediatePresentDrawables(re::RenderFrameWorkload *this, double a2)
{
  unint64_t v3;

  if (*((_QWORD *)this + 26))
  {
    v3 = 0;
    do
      objc_msgSend(*(id *)(*((_QWORD *)this + 28) + 8 * v3++), "present", a2);
    while (*((_QWORD *)this + 26) > v3);
  }
  re::DynamicArray<re::mtl::Drawable>::clear((uint64_t)this + 192);
}

uint64_t re::RenderFrameWorkload::applyPostEncodePatch(uint64_t result, _BYTE *a2)
{
  if (a2[28])
  {
    result = re::RenderFrameBox::get(*(_QWORD *)(result + 32) + 344, *(_QWORD *)(result + 40));
    if (result)
      return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  }
  return result;
}

unint64_t re::RenderFrame::getScopeResolution(re::RenderFrame *this, const char *__s2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  double v8;
  double v9;
  void *v10;
  void *v11;
  uint64_t v12;
  unsigned int LayerSize;
  re::DrawingManager *v14;
  float v15;

  v2 = *((_QWORD *)this + 501);
  if (!v2)
  {
    v12 = 1;
    LayerSize = 1;
    return LayerSize | (unint64_t)(v12 << 32);
  }
  v5 = *((_QWORD *)this + 503) + 24;
  v6 = 104 * v2;
  while (1)
  {
    if ((*(_QWORD *)(v5 + 16) & 1) != 0)
      v7 = *(const char **)(v5 + 24);
    else
      v7 = (const char *)(v5 + 17);
    if (strcmp(v7, __s2))
      goto LABEL_10;
    v10 = *(void **)(v5 - 16);
    if (v10)
    {
      LayerSize = objc_msgSend(v10, sel_width);
      v12 = (uint64_t)objc_msgSend(*(id *)(v5 - 16), sel_height);
      return LayerSize | (unint64_t)(v12 << 32);
    }
    if (*(_DWORD *)v5 != -1)
      break;
    v11 = *(void **)(v5 - 8);
    if (v11)
    {
      LayerSize = objc_msgSend(v11, sel_width);
      v12 = (uint64_t)objc_msgSend(*(id *)(v5 - 8), sel_height);
      return LayerSize | (unint64_t)(v12 << 32);
    }
LABEL_10:
    v5 += 104;
    v6 -= 104;
    if (!v6)
      goto LABEL_11;
  }
  v14 = *(re::DrawingManager **)(*((_QWORD *)this + 1) + 104);
  if (!v14)
  {
LABEL_11:
    v12 = 1;
    LayerSize = 1;
    return LayerSize | (unint64_t)(v12 << 32);
  }
  LayerSize = (int)re::DrawingManager::getLayerSize(v14, *(_DWORD *)v5, v8, v9);
  v12 = (int)v15;
  return LayerSize | (unint64_t)(v12 << 32);
}

id re::RenderFrame::getScopePixelFormat(uint64_t a1, const char *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  const char *v8;
  void *v9;

  v3 = *(_QWORD *)(a1 + 4008);
  if (!v3)
    return 0;
  v5 = *a3;
  v6 = (_QWORD *)(*(_QWORD *)(a1 + 4024) + 48);
  v7 = 104 * v3;
  while (1)
  {
    if (*(v6 - 6) == v5)
    {
      v8 = (*(v6 - 1) & 1) != 0 ? (const char *)*v6 : (char *)v6 - 7;
      if (!strcmp(v8, a2))
      {
        v9 = (void *)*(v6 - 5);
        if (v9)
          break;
        v9 = (void *)*(v6 - 4);
        if (v9)
          break;
      }
    }
    v6 += 13;
    v7 -= 104;
    if (!v7)
      return 0;
  }
  return objc_msgSend(v9, sel_pixelFormat);
}

id re::RenderFrame::getScopeProtectionOptions(uint64_t a1, const char *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  const char *v8;
  void *v9;

  v3 = *(_QWORD *)(a1 + 4008);
  if (!v3)
    return 0;
  v5 = *a3;
  v6 = (_QWORD *)(*(_QWORD *)(a1 + 4024) + 48);
  v7 = 104 * v3;
  while (1)
  {
    if (*(v6 - 6) == v5)
    {
      v8 = (*(v6 - 1) & 1) != 0 ? (const char *)*v6 : (char *)v6 - 7;
      if (!strcmp(v8, a2))
      {
        v9 = (void *)*(v6 - 5);
        if (v9)
          break;
        v9 = (void *)*(v6 - 4);
        if (v9)
          break;
      }
    }
    v6 += 13;
    v7 -= 104;
    if (!v7)
      return 0;
  }
  return objc_msgSend(v9, sel_protectionOptions);
}

uint64_t re::RenderFrame::getScopeLayer(re::RenderFrame *this, const char *__s2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  const char *v6;
  uint64_t result;

  v2 = *((_QWORD *)this + 501);
  if (!v2)
    return 0xFFFFFFFFLL;
  v4 = (_QWORD *)(*((_QWORD *)this + 503) + 48);
  v5 = 104 * v2;
  while (1)
  {
    v6 = (*(v4 - 1) & 1) != 0 ? (const char *)*v4 : (char *)v4 - 7;
    if (!strcmp(v6, __s2))
    {
      result = *((unsigned int *)v4 - 6);
      if ((_DWORD)result != -1)
        break;
    }
    v4 += 13;
    v5 -= 104;
    if (!v5)
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a1)
  {
    if (v4)
    {
      re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::copy((int *)a1, 0, *(char **)a2, v4);
      re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::resize((_anonymous_namespace_ *)a1, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) += 2;
    }
  }
  else if (v4)
  {
    re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::setCapacity((_QWORD *)a1, v4);
    *(_DWORD *)(a1 + 16) += 2;
    re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::copy((int *)a1, 0, *(char **)a2, *(_QWORD *)(a2 + 8));
  }
  return a1;
}

uint64_t re::RenderFrame::applyRenderFrameDeltas(re::RenderFrame *this)
{
  int v2;
  void (****v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  void (***v6)(_QWORD);
  id **v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;

  v2 = *((_DWORD *)this + 766);
  if ((v2 & 1) != 0)
    v3 = (void (****)(_QWORD))((char *)this + 3072);
  else
    v3 = (void (****)(_QWORD))*((_QWORD *)this + 385);
  v4 = *((_QWORD *)this + 382);
  if (v4)
  {
    v5 = 8 * v4;
    do
    {
      v6 = *v3++;
      (**v6)(v6);
      v5 -= 8;
    }
    while (v5);
    v2 = *((_DWORD *)this + 766);
  }
  if ((v2 & 1) != 0)
    v7 = (id **)((char *)this + 3072);
  else
    v7 = (id **)*((_QWORD *)this + 385);
  v8 = *((_QWORD *)this + 382);
  if (v8)
  {
    v9 = 8 * v8;
    do
    {
      v10 = *v7++;
      (*((void (**)(id *))*v10 + 2))(v10);
      objc_destroyWeak(v10 + 1);
      v10[1] = 0;
      v9 -= 8;
    }
    while (v9);
  }
  return re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 3048);
}

uint64_t re::DynamicArray<re::Pair<NS::SharedPtr<MTL::Event>,unsigned long long,true>>::operator=(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (result != a2)
  {
    v2 = *(_QWORD *)result;
    v3 = *(_QWORD *)a2;
    if (*(_QWORD *)result)
      v4 = v3 == 0;
    else
      v4 = 1;
    if (v4 || v2 == v3)
    {
      v6 = *(_QWORD *)(result + 8);
      v7 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)result = v3;
      *(_QWORD *)(result + 8) = v7;
      *(_QWORD *)a2 = v2;
      *(_QWORD *)(a2 + 8) = v6;
      v8 = *(_QWORD *)(result + 16);
      *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v8;
      v9 = *(_QWORD *)(result + 32);
      *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 32) = v9;
      ++*(_DWORD *)(a2 + 24);
      ++*(_DWORD *)(result + 24);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

void re::RenderGraphProcessorContainer::~RenderGraphProcessorContainer(re::RenderGraphProcessorContainer *this)
{
  uint64_t v2;
  uint64_t v3;

  re::RenderGraphProcessorContainer::reset(this);
  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    if (*((_QWORD *)this + 9))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 5) = 0;
    ++*((_DWORD *)this + 16);
  }
  if (*(_QWORD *)this)
  {
    if (*((_QWORD *)this + 4))
      (*(void (**)(_QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this);
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *(_QWORD *)this = 0;
    ++*((_DWORD *)this + 6);
  }
}

_QWORD *re::RenderGraphProcessorContainer::reset(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  void (****v3)(_QWORD);
  uint64_t v4;
  void (***v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  void (****v8)(_QWORD);
  uint64_t v9;
  void (***v10)(_QWORD);
  uint64_t v11;
  uint64_t v12;
  void (****v13)(_QWORD);
  uint64_t v14;
  void (***v15)(_QWORD);
  uint64_t v16;

  v1 = this;
  v2 = this[2];
  if (v2)
  {
    v3 = (void (****)(_QWORD))this[4];
    v4 = 8 * v2;
    do
    {
      v5 = *v3;
      if (*v3)
      {
        v6 = re::globalAllocators((re *)this)[2];
        (**v5)(v5);
        this = (_QWORD *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v6 + 40))(v6, v5);
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  v7 = v1[7];
  if (v7)
  {
    v8 = (void (****)(_QWORD))v1[9];
    v9 = 8 * v7;
    do
    {
      v10 = *v8;
      if (*v8)
      {
        v11 = re::globalAllocators((re *)this)[2];
        (**v10)(v10);
        this = (_QWORD *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v11 + 40))(v11, v10);
      }
      ++v8;
      v9 -= 8;
    }
    while (v9);
  }
  v12 = v1[12];
  if (v12)
  {
    v13 = (void (****)(_QWORD))v1[14];
    v14 = 8 * v12;
    do
    {
      v15 = *v13;
      if (*v13)
      {
        v16 = re::globalAllocators((re *)this)[2];
        (**v15)(v15);
        this = (_QWORD *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v16 + 40))(v16, v15);
      }
      ++v13;
      v14 -= 8;
    }
    while (v14);
  }
  v1[2] = 0;
  ++*((_DWORD *)v1 + 6);
  v1[7] = 0;
  ++*((_DWORD *)v1 + 16);
  v1[12] = 0;
  ++*((_DWORD *)v1 + 26);
  return this;
}

uint64_t *re::FixedArray<re::RenderGraphProviderBase const*>::FixedArray(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    re::FixedArray<re::RenderGraphProviderBase const*>::init<>(a1, v4, *(_QWORD *)(a2 + 8));
    re::FixedArray<re::RenderGraphProviderBase const*>::copy(a1, a2);
  }
  return a1;
}

void re::FixedArray<re::RenderGraphProviderBase const*>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = 8 * a3;
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 8 * a3, 8);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 8);
    v8 = (_QWORD *)((char *)v8 + v5 - 8);
  }
  *v8 = 0;
}

void *re::FixedArray<re::RenderGraphProviderBase const*>::copy(void *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)result + 1);
  if (v2 == *(_QWORD *)(a2 + 8))
  {
    if (v2)
      return memmove(*((void **)result + 2), *(const void **)(a2 + 16), 8 * v2);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a FixedArray of a different size", "m_size == other.m_size", "copy", 388);
    result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

_QWORD *re::DynamicArray<NS::SharedPtr<MTL::Fence>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<NS::SharedPtr<MTL::Fence>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<NS::SharedPtr<MTL::Fence>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<NS::SharedPtr<MTL::Fence>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<NS::SharedPtr<MTL::Fence>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 61)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 8, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 8 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_15;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_15:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 8 * v9;
        v11 = v7;
        v12 = (_QWORD *)v5[4];
        do
        {
          *v11++ = *v12;
          *v12++ = 0;
          v10 -= 8;
        }
        while (v10);
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_15;
    }
  }
  return result;
}

void ___ZN12_GLOBAL__N_127getSpecifyWithRenderLayerIDEj_block_invoke(re *a1)
{
  NSObject *v1;
  _DWORD v2[2];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  v1 = *re::graphicsLogObjects(a1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109120;
    v2[1] = 8;
    _os_log_impl(&dword_224FE9000, v1, OS_LOG_TYPE_DEFAULT, "More than %ul SpecifyRenderLayer targets have been created, falling back to dynamic string allocation. Performance may be impacted.", (uint8_t *)v2, 8u);
  }
}

void ___ZN12_GLOBAL__N_118getSpecifyLaneOpIDEj_block_invoke(re *a1)
{
  NSObject *v1;
  _DWORD v2[2];
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  v1 = *re::graphicsLogObjects(a1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 67109120;
    v2[1] = 32;
    _os_log_impl(&dword_224FE9000, v1, OS_LOG_TYPE_DEFAULT, "More than %ul SpecifyLaneOp targets have been created, falling back to dynamic string allocation. Performance may be impacted.", (uint8_t *)v2, 8u);
  }
}

uint64_t re::DynamicArray<re::RenderFrameEvent>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::RenderFrameEvent>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::RenderFrameEvent>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::RenderFrameEvent>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::RenderFrameEvent>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

void re::DynamicArray<re::RenderFrameEvent>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  id *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::RenderFrameEvent>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::RenderFrameEvent *,re::RenderFrameEvent *,re::RenderFrameEvent *,0>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 16 * a1[2], a1[4]);
    v8 = a1[2];
    if (v8 != v4)
    {
      v9 = *(_QWORD *)(a2 + 32);
      v10 = v9 + 16 * v4;
      v11 = v9 + 16 * v8;
      v12 = (_QWORD *)(a1[4] + 16 * v8);
      do
      {
        v13 = *(id *)v11;
        v14 = *(_QWORD *)(v11 + 8);
        *v12 = v13;
        v12[1] = v14;
        v12 += 2;
        v11 += 16;
      }
      while (v11 != v10);
    }
  }
  else
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::RenderFrameEvent *,re::RenderFrameEvent *,re::RenderFrameEvent *,0>(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 16 * v4, a1[4]);
    v5 = a1[2];
    if (v4 != v5)
    {
      v6 = (id *)(a1[4] + 16 * v4);
      v7 = 16 * v5 - 16 * v4;
      do
      {
        if (*v6)
        {

          *v6 = 0;
        }
        v6 += 2;
        v7 -= 16;
      }
      while (v7);
    }
  }
  a1[2] = v4;
}

void re::DynamicArray<re::RenderFrameEvent>::clear(uint64_t a1)
{
  uint64_t v2;
  id *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
  {
    v3 = *(id **)(a1 + 32);
    v4 = 16 * v2;
    do
    {
      if (*v3)
      {

        *v3 = 0;
      }
      v3 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::DynamicArray<re::RenderFrameEvent>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderFrameEvent>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 16 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_15;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_15:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (_QWORD *)(v8 + 16 * v9);
        v11 = v7;
        v12 = (_QWORD *)v5[4];
        do
        {
          v13 = v12[1];
          *v11 = *v12;
          *v12 = 0;
          v12 += 2;
          v11[1] = v13;
          v11 += 2;
        }
        while (v12 != v10);
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::RenderFrameEvent *,re::RenderFrameEvent *,re::RenderFrameEvent *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    NS::SharedPtr<MTL::Texture>::operator=((void **)a3, (void **)v4);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(v4 + 8);
    a3 += 16;
    v4 += 16;
  }
  while (v4 != v5);
  return v5;
}

uint64_t re::DynamicArray<re::DetailedError>::deinit(uint64_t a1)
{
  uint64_t result;
  __n128 *v3;
  uint64_t v4;
  __n128 *v5;
  uint64_t v6;
  __n128 v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(__n128 **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = v3 + 1;
        v6 = 48 * v4;
        v7 = 0uLL;
        do
        {
          if (v5->n128_u64[0])
          {
            if ((v5->n128_u8[8] & 1) != 0)
            {
              (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v5->n128_u64[0] + 40))(v5->n128_u64[0], v5[1].n128_u64[0], v7);
              v7 = 0uLL;
            }
            *v5 = v7;
            v5[1] = v7;
          }
          v5 += 3;
          v6 -= 48;
        }
        while (v6);
        result = *(_QWORD *)a1;
        v3 = *(__n128 **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, __n128 *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraph>::deinit(uint64_t a1)
{
  uint64_t result;
  re::RenderGraph *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::RenderGraph **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 112 * v4;
        do
        {
          re::RenderGraph::~RenderGraph(v3);
          v3 = (re::RenderGraph *)((char *)v3 + 112);
          v5 -= 112;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::RenderGraph **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::RenderGraph *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraphScopeOutput>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 136 * v4;
        v6 = (uint64_t *)(v3 + 88);
        do
        {
          re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(v6);
          re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(v6 - 6);
          re::StringID::destroyString((re::StringID *)(v6 - 9));
          v6 += 17;
          v5 -= 136;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::AutomaticSpecifyScopeParameters>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3)
      {
        v4 = 40 * v3;
        v5 = *(_QWORD **)(a1 + 32);
        do
        {
          *v5 = 0;
          v5 += 5;
          v4 -= 40;
        }
        while (v4);
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::CameraLateLatch::~CameraLateLatch((re::CameraLateLatch *)(v6 + 256));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 2048;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::CameraLateLatch::~CameraLateLatch(re::CameraLateLatch *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_QWORD *)this + 197);
  if (v2)
  {
    if (*((_QWORD *)this + 201))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 201) = 0;
    *((_QWORD *)this + 198) = 0;
    *((_QWORD *)this + 199) = 0;
    *((_QWORD *)this + 197) = 0;
    ++*((_DWORD *)this + 400);
  }
  v3 = *((_QWORD *)this + 192);
  if (v3)
  {
    if (*((_QWORD *)this + 196))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 196) = 0;
    *((_QWORD *)this + 193) = 0;
    *((_QWORD *)this + 194) = 0;
    *((_QWORD *)this + 192) = 0;
    ++*((_DWORD *)this + 390);
  }
  v4 = *((_QWORD *)this + 170);
  if (v4)
  {
    if (*((_QWORD *)this + 174))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 174) = 0;
    *((_QWORD *)this + 171) = 0;
    *((_QWORD *)this + 172) = 0;
    *((_QWORD *)this + 170) = 0;
    ++*((_DWORD *)this + 346);
  }
  v5 = *((_QWORD *)this + 165);
  if (v5)
  {
    if (*((_QWORD *)this + 169))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *((_QWORD *)this + 169) = 0;
    *((_QWORD *)this + 166) = 0;
    *((_QWORD *)this + 167) = 0;
    *((_QWORD *)this + 165) = 0;
    ++*((_DWORD *)this + 336);
  }
  v6 = *((_QWORD *)this + 160);
  if (v6)
  {
    if (*((_QWORD *)this + 164))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *((_QWORD *)this + 164) = 0;
    *((_QWORD *)this + 161) = 0;
    *((_QWORD *)this + 162) = 0;
    *((_QWORD *)this + 160) = 0;
    ++*((_DWORD *)this + 326);
  }
}

uint64_t re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::deinit(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;

  if (*(_QWORD *)result)
  {
    v1 = (_QWORD *)result;
    v2 = *(_QWORD *)(result + 8);
    if (v2)
    {
      if ((*(_BYTE *)(result + 16) & 1) != 0)
        v3 = result + 24;
      else
        v3 = *(_QWORD *)(result + 32);
      v4 = 472 * v2;
      do
      {
        if (!*(_BYTE *)(v3 + 464))
        {
          result = (**(uint64_t (***)(uint64_t))v3)(v3);
          *(_BYTE *)(v3 + 464) = 1;
        }
        v3 += 472;
        v4 -= 472;
      }
      while (v4);
    }
    v5 = *((_DWORD *)v1 + 4);
    if ((v5 & 1) == 0)
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[4]);
      v5 = *((_DWORD *)v1 + 4);
    }
    *v1 = 0;
    v1[1] = 0;
    *((_DWORD *)v1 + 4) = (v5 | 1) + 2;
  }
  return result;
}

double re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          v8 = v6 + v4;
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          v9 = *(void **)(v6 + v4 + 16);
          if (v9)
          {

            *(_QWORD *)(v8 + 16) = 0;
            v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 32;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<unsigned long,re::SharedPtr<re::MaterialParameterTable>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          v8 = v6 + v4;
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          v9 = *(_QWORD *)(v6 + v4 + 16);
          if (v9)
          {

            *(_QWORD *)(v8 + 16) = 0;
            v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 24;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::SharedStringAllocatorWrapper::~SharedStringAllocatorWrapper(re::SharedStringAllocatorWrapper *this)
{
  re::GrowableLinearAllocator::~GrowableLinearAllocator((re::SharedStringAllocatorWrapper *)((char *)this + 24));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::GrowableLinearAllocator::~GrowableLinearAllocator((re::SharedStringAllocatorWrapper *)((char *)this + 24));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::DynamicArray<re::RenderFrame::ProvideCall>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderFrame::ProvideCall>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          v2 = 40 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v7 + 2;
        v11 = 40 * v9;
        v12 = (_QWORD *)(v8 + 16);
        do
        {
          *((_OWORD *)v10 - 1) = *((_OWORD *)v12 - 1);
          re::FixedArray<re::RenderGraphProviderBase const*>::FixedArray(v10, (uint64_t)v12);
          if (*v12)
          {
            if (v12[1])
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v12 + 40))(*v12, v12[2]);
              v12[1] = 0;
              v12[2] = 0;
            }
            *v12 = 0;
          }
          v10 += 5;
          v12 += 5;
          v11 -= 40;
        }
        while (v11);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::RenderFrame::PickupAction>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderFrame::PickupAction>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x50uLL))
        {
          v2 = 80 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_24;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 80, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_24:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 80 * v9;
        v12 = 0uLL;
        do
        {
          v13 = &v7[v10 / 8];
          v14 = (_QWORD *)(v8 + v10);
          *(_DWORD *)v13 = *(_DWORD *)(v8 + v10);
          *(_OWORD *)(v13 + 1) = v12;
          *(_OWORD *)(v13 + 3) = v12;
          v15 = (_QWORD *)(v8 + v10 + 8);
          v13[1] = *v15;
          *v15 = 0;
          v13[4] = *(_QWORD *)(v8 + v10 + 32);
          v14[4] = 0;
          v17 = v7[v10 / 8 + 2];
          v16 = v7[v10 / 8 + 3];
          v18 = *(_QWORD *)(v8 + v10 + 24);
          v13[2] = *(_QWORD *)(v8 + v10 + 16);
          v13[3] = v18;
          v14[2] = v17;
          v14[3] = v16;
          *(_OWORD *)(v13 + 7) = v12;
          *(_OWORD *)(v13 + 5) = v12;
          v19 = (_QWORD *)(v8 + v10 + 40);
          v13[5] = *v19;
          *v19 = 0;
          v20 = v7[v10 / 8 + 7];
          v13[7] = *(_QWORD *)(v8 + v10 + 56);
          v14[7] = v20;
          *((_OWORD *)v13 + 4) = *(_OWORD *)(v8 + v10 + 64);
          v21 = *(_QWORD *)(v8 + v10 + 48);
          v14[8] = 0;
          v14[9] = 0;
          v22 = v7[v10 / 8 + 6];
          v13[6] = v21;
          v14[6] = v22;
          if (*v19)
          {
            if ((v14[6] & 1) != 0)
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v19 + 40))(*v19, v14[7]);
              v12 = 0uLL;
            }
            *(_OWORD *)v19 = v12;
            *(_OWORD *)(v8 + v10 + 56) = v12;
          }
          if (*v15)
          {
            if ((v14[2] & 1) != 0)
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v15 + 40))(*v15, v14[3]);
              v12 = 0uLL;
            }
            *(_OWORD *)v15 = v12;
            *(_OWORD *)(v8 + v10 + 24) = v12;
          }
          v10 += 80;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_24;
    }
  }
  return result;
}

void re::RenderFrameBounds::~RenderFrameBounds(re::RenderFrameBounds *this, double a2)
{
  double v3;

  v3 = re::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 14, a2);
  re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8, v3);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  double v3;

  v3 = re::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 14, a2);
  re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 8, v3);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

double re::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1, double result)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  __n128 *v9;
  int v10;
  uint64_t v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  if (v3)
  {
    v4 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = 0;
      v7 = 0uLL;
      do
      {
        v8 = a1[2];
        v9 = (__n128 *)(v8 + v5);
        v10 = *(_DWORD *)(v8 + v5 + 8);
        if (v10 < 0)
        {
          v9->n128_u32[2] = v10 & 0x7FFFFFFF;
          v13 = v9[1].n128_i64[0];
          v12 = v9 + 1;
          v11 = v13;
          if (v13)
          {
            if ((*(_BYTE *)(v8 + v5 + 24) & 1) != 0)
            {
              (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v11 + 40))(v11, *(_QWORD *)(v8 + v5 + 32), v7);
              v7 = 0uLL;
            }
            *v12 = v7;
            v12[1] = v7;
            v4 = *((unsigned int *)a1 + 8);
          }
          v14 = v8 + v5;
          *(_QWORD *)(v14 + 48) = 0;
          *(_DWORD *)(v14 + 56) = *(_DWORD *)(v8 + v5 + 56) + 1;
        }
        ++v6;
        v5 += 128;
      }
      while (v6 < v4);
      v3 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1, double result)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  __n128 *v9;
  int v10;
  uint64_t v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  if (v3)
  {
    v4 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = 0;
      v7 = 0uLL;
      do
      {
        v8 = a1[2];
        v9 = (__n128 *)(v8 + v5);
        v10 = *(_DWORD *)(v8 + v5 + 8);
        if (v10 < 0)
        {
          v9->n128_u32[2] = v10 & 0x7FFFFFFF;
          v13 = v9[1].n128_i64[0];
          v12 = v9 + 1;
          v11 = v13;
          if (v13)
          {
            if ((*(_BYTE *)(v8 + v5 + 24) & 1) != 0)
            {
              (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v11 + 40))(v11, *(_QWORD *)(v8 + v5 + 32), v7);
              v7 = 0uLL;
            }
            *v12 = v7;
            v12[1] = v7;
            v4 = *((unsigned int *)a1 + 8);
          }
          v14 = v8 + v5;
          *(_QWORD *)(v14 + 48) = 0;
          *(_DWORD *)(v14 + 56) = *(_DWORD *)(v8 + v5 + 56) + 1;
        }
        ++v6;
        v5 += 224;
      }
      while (v6 < v4);
      v3 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

_QWORD *re::DynamicArray<re::RenderGraphScopeOutput>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RenderGraphScopeOutput>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderGraphScopeOutput>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::RenderGraphScopeOutput>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderGraphScopeOutput>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x88uLL))
        {
          v2 = 136 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 136 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 136, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 136 * v9;
        v11 = v7;
        do
        {
          *(_OWORD *)v11 = *(_OWORD *)v8;
          v13 = *(_QWORD *)(v8 + 16);
          v12 = v8 + 16;
          v11[2] = v11[2] & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
          v11[2] = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
          v11[3] = *(_QWORD *)(v12 + 8);
          *(_QWORD *)v12 = 0;
          *(_QWORD *)(v12 + 8) = &str_110;
          *((_DWORD *)v11 + 8) = *(_DWORD *)(v12 + 16);
          *(_OWORD *)(v11 + 7) = 0u;
          *((_DWORD *)v11 + 18) = 0;
          *(_OWORD *)(v11 + 5) = 0u;
          *(_QWORD *)((char *)v11 + 76) = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap(v11 + 5, (uint64_t *)(v12 + 24));
          *(_OWORD *)(v11 + 11) = 0u;
          v14 = v11 + 11;
          *((_DWORD *)v14 + 8) = 0;
          *((_OWORD *)v14 + 1) = 0u;
          *(_QWORD *)((char *)v14 + 36) = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap(v14, (uint64_t *)(v12 + 72));
          re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)(v12 + 72));
          re::HashTable<re::WeakStringID,re::RenderGraphScopeOutput::Lane,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)(v12 + 24));
          re::StringID::destroyString((re::StringID *)v12);
          v8 = v12 + 120;
          v11 = v14 + 6;
        }
        while (v8 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,NS::SharedPtr<MTL::Texture>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addEmplace<NS::SharedPtr<MTL::Texture>&>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, id *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,NS::SharedPtr<MTL::Texture>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 24 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 24 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 24 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9 + 8) = *a4;
  v15 = *(_QWORD *)(a1 + 16) + 24 * v9;
  *(_QWORD *)(v15 + 16) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,NS::SharedPtr<MTL::Texture>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  signed int v22;
  _BYTE v23[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(_QWORD *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,NS::SharedPtr<MTL::Texture>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init((uint64_t)v23, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v23;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)v23 = v5;
      *(_QWORD *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (_QWORD *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v13 - 2) & 0x80000000) != 0)
          {
            v14 = *(v13 - 1);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<unsigned long long,NS::SharedPtr<MTL::Texture>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
                v14 = *(v13 - 1);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 24 * v17);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 24 * v17);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            v21 = 24 * v17;
            *(_DWORD *)(v19 + v21) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + v21) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 8) = v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 16) = *v13;
            *v13 = 0;
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 3;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned long,re::CachedTileRenderPipelineState,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2)
      v22 = a2;
    else
      v22 = 3;
  }
}

void re::HashTable<unsigned long long,NS::SharedPtr<MTL::Texture>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addEmplace<re::BufferSlice&>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 32 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *a4;
  v15 = *(_QWORD *)(a1 + 16) + 32 * v9;
  *(_QWORD *)(v15 + 16) = *(id *)a5;
  *(_QWORD *)(v15 + 24) = *(_QWORD *)(a5 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  signed int v23;
  _BYTE v24[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(_QWORD *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init((uint64_t)v24, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v24;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)v24 = v5;
      *(_QWORD *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v13 - 16) & 0x80000000) != 0)
          {
            v14 = *(_QWORD *)(v13 - 8);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
                v14 = *(_QWORD *)(v13 - 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            v21 = 32 * v17;
            *(_DWORD *)(v19 + v21) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + v21) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) = v14;
            v22 = *(_QWORD *)(a1 + 16) + 32 * v17;
            *(_QWORD *)(v22 + 16) = *(id *)v13;
            *(_QWORD *)(v22 + 24) = *(_QWORD *)(v13 + 8);
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 32;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2)
      v23 = a2;
    else
      v23 = 3;
  }
}

void re::HashTable<unsigned long long,re::BufferSlice,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

_QWORD *re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  void *v19;
  void *v20;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderFrame::SpecifyScopeLaneParameters>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x68uLL))
        {
          v2 = 104 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 104 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_24;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 104, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_24:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (_QWORD *)(v8 + 32);
        v11 = 104 * v9;
        v12 = v7;
        do
        {
          *v12 = *(v10 - 4);
          *(_OWORD *)(v12 + 1) = *(_OWORD *)(v10 - 3);
          *(v10 - 3) = 0;
          *(v10 - 2) = 0;
          *((_DWORD *)v12 + 6) = *((_DWORD *)v10 - 2);
          *((_OWORD *)v12 + 2) = 0u;
          *((_OWORD *)v12 + 3) = 0u;
          v12[7] = v10[3];
          v13 = v10[1];
          v12[4] = *v10;
          *v10 = 0;
          v14 = v10[2];
          v10[3] = 0;
          v16 = v12[5];
          v15 = v12[6];
          v12[5] = v13;
          v12[6] = v14;
          v10[1] = v16;
          v10[2] = v15;
          v17 = *((_OWORD *)v10 + 2);
          v18 = *((_OWORD *)v10 + 3);
          *((_BYTE *)v12 + 96) = *((_BYTE *)v10 + 64);
          *((_OWORD *)v12 + 4) = v17;
          *((_OWORD *)v12 + 5) = v18;
          if (*v10)
          {
            if ((v10[1] & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v10 + 40))(*v10, v10[2]);
            *(_OWORD *)v10 = 0u;
            *((_OWORD *)v10 + 1) = 0u;
          }
          v19 = (void *)*(v10 - 2);
          if (v19)
          {

            *(v10 - 2) = 0;
          }
          v20 = (void *)*(v10 - 3);
          if (v20)
          {

            *(v10 - 3) = 0;
          }
          *(v10 - 4) = 0;
          v10 += 13;
          v12 += 13;
          v11 -= 104;
        }
        while (v11);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::DynamicString,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  int v9;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v30[44];

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v8 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v30, 0, 36);
          *(_QWORD *)&v30[36] = 0x7FFFFFFFLL;
          re::HashTable<unsigned long long,re::DynamicString,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::init((uint64_t)v30, v13, v12);
          v15 = *(_OWORD *)v30;
          *(_OWORD *)v30 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v30[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v30[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v30[24];
          *(_OWORD *)&v30[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_OWORD *)&v30[24];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = DWORD2(v18);
          if (DWORD2(v18))
          {
            v21 = (_QWORD *)(v17 + 8);
            do
            {
              if ((*(_DWORD *)(v21 - 1) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::DynamicString,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::addAsMove(a1, *v21 % (unint64_t)*(unsigned int *)(a1 + 24), *v21, v21, v21 + 1);
              v21 += 6;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::DynamicString,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit((uint64_t *)v30, *(double *)&v18);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 48 * v8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 48 * v8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  v25 = 48 * v8;
  *(_DWORD *)(v22 + v25) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v25) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v8 + 8) = *a4;
  v26 = *(_QWORD *)(a1 + 16) + 48 * v8;
  *(_OWORD *)(v26 + 16) = 0u;
  *(_OWORD *)(v26 + 32) = 0u;
  *(_QWORD *)(v26 + 16) = *a5;
  *a5 = 0;
  v27 = *(_QWORD *)(v26 + 32);
  *(_QWORD *)(v26 + 32) = a5[2];
  a5[2] = v27;
  *(_QWORD *)(v26 + 40) = a5[3];
  a5[3] = 0;
  v28 = *(_QWORD *)(v26 + 24);
  *(_QWORD *)(v26 + 24) = a5[1];
  a5[1] = v28;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

_QWORD *re::DynamicArray<re::RenderFrame::PickupAction>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RenderFrame::PickupAction>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderFrame::PickupAction>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::RenderGraph>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RenderGraph>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderGraph>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::RenderGraph>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  re::RenderGraph *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderGraph>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x70uLL))
        {
          v2 = 112 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 112 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 112, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (re::RenderGraph *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 112 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::RenderGraph::RenderGraph(v11, v8);
          re::RenderGraph::~RenderGraph(v8);
          v8 = (re::RenderGraph *)((char *)v8 + 112);
          v11 += 112;
          v10 -= 112;
        }
        while (v10);
        v8 = (re::RenderGraph *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, re::RenderGraph *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::RenderGraph::RenderGraph(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  re::DynamicString::setCapacity((_QWORD *)(a1 + 40), 0);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = &str_275;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = &str_275;
  re::RenderGraph::move((_QWORD *)a1, a2);
  return a1;
}

void re::RenderGraph::move(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  re::DynamicArray<re::Pair<NS::SharedPtr<MTL::Event>,unsigned long long,true>>::operator=((uint64_t)a1, (uint64_t)a2);
  re::DynamicString::operator=((re::DynamicString *)(a1 + 5), (re::DynamicString *)(a2 + 5));
  v4 = a2[9];
  v5 = a2[10];
  a2[9] = 0;
  a2[10] = &str_110;
  v6 = a1[9];
  v7 = a1[10];
  a1[9] = v4;
  a1[10] = v5;
  v12 = v4 & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  v13 = v7;
  re::StringID::destroyString((re::StringID *)&v12);
  v8 = a2[11];
  v9 = a2[12];
  a2[11] = 0;
  a2[12] = &str_110;
  v10 = a1[11];
  v11 = a1[12];
  a1[11] = v8;
  a1[12] = v9;
  v12 = v8 & 0xFFFFFFFFFFFFFFFELL | v10 & 1;
  v13 = v11;
  re::StringID::destroyString((re::StringID *)&v12);
  a1[13] = a2[13];
}

void re::RenderGraphCompiled::~RenderGraphCompiled(re::RenderGraphCompiled *this)
{
  re::RenderGraphCompiled *v1;
  uint64_t v2;
  void (****v3)(_QWORD);
  uint64_t v4;
  void (***v5)(_QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = this;
  v2 = *((_QWORD *)this + 90);
  if (v2)
  {
    v3 = (void (****)(_QWORD))*((_QWORD *)this + 92);
    v4 = 8 * v2;
    do
    {
      v5 = *v3;
      if (*v3)
      {
        v6 = re::globalAllocators(this)[2];
        (**v5)(v5);
        this = (re::RenderGraphCompiled *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v6 + 40))(v6, v5);
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  *((_QWORD *)v1 + 90) = 0;
  ++*((_DWORD *)v1 + 182);
  v7 = *((_QWORD *)v1 + 103);
  if (v7)
  {

    *((_QWORD *)v1 + 103) = 0;
  }
  re::DynamicArray<re::AutomaticSpecifyScopeParameters>::deinit((uint64_t)v1 + 784);
  re::DynamicArray<re::RenderGraphScopeOutput>::deinit((uint64_t)v1 + 744);
  v8 = *((_QWORD *)v1 + 88);
  if (v8)
  {
    if (*((_QWORD *)v1 + 92))
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    *((_QWORD *)v1 + 92) = 0;
    *((_QWORD *)v1 + 89) = 0;
    *((_QWORD *)v1 + 90) = 0;
    *((_QWORD *)v1 + 88) = 0;
    ++*((_DWORD *)v1 + 182);
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v1 + 82);
  re::DynamicArray<re::RenderGraph>::deinit((uint64_t)v1 + 616);
  re::DynamicArray<re::DetailedError>::deinit((uint64_t)v1 + 576);
  v9 = *((_QWORD *)v1 + 67);
  if (v9)
  {
    if (*((_QWORD *)v1 + 71))
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    *((_QWORD *)v1 + 71) = 0;
    *((_QWORD *)v1 + 68) = 0;
    *((_QWORD *)v1 + 69) = 0;
    *((_QWORD *)v1 + 67) = 0;
    ++*((_DWORD *)v1 + 140);
  }
  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)v1 + 496);
  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)v1 + 456);
  v10 = *((_QWORD *)v1 + 52);
  if (v10)
  {
    if (*((_QWORD *)v1 + 56))
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    *((_QWORD *)v1 + 56) = 0;
    *((_QWORD *)v1 + 53) = 0;
    *((_QWORD *)v1 + 54) = 0;
    *((_QWORD *)v1 + 52) = 0;
    ++*((_DWORD *)v1 + 110);
  }
  v11 = *((_QWORD *)v1 + 47);
  if (v11)
  {
    if (*((_QWORD *)v1 + 51))
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    *((_QWORD *)v1 + 51) = 0;
    *((_QWORD *)v1 + 48) = 0;
    *((_QWORD *)v1 + 49) = 0;
    *((_QWORD *)v1 + 47) = 0;
    ++*((_DWORD *)v1 + 100);
  }
  re::DynamicArray<re::RenderGraphResourceSetup>::deinit((uint64_t)v1 + 336);
  re::RenderGraphResourceDescriptions::~RenderGraphResourceDescriptions(v1);
}

uint64_t re::DynamicArray<re::RenderGraphResourceSetup>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 192 * v4;
        v6 = (_QWORD *)(v3 + 80);
        do
        {
          v7 = v6[5];
          if (v7)
          {
            if (v6[9])
              (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
            v6[9] = 0;
            v6[6] = 0;
            v6[7] = 0;
            v6[5] = 0;
            ++*((_DWORD *)v6 + 16);
          }
          if (*v6)
          {
            if (v6[4])
              (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 40))(*v6);
            v6[4] = 0;
            v6[1] = 0;
            v6[2] = 0;
            *v6 = 0;
            ++*((_DWORD *)v6 + 6);
          }
          v8 = *(v6 - 5);
          if (v8)
          {
            if (*(v6 - 1))
              (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
            *(v6 - 1) = 0;
            *(v6 - 4) = 0;
            *(v6 - 3) = 0;
            *(v6 - 5) = 0;
            ++*((_DWORD *)v6 - 4);
          }
          v9 = *(v6 - 10);
          if (v9)
          {
            if (*(v6 - 6))
              (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
            *(v6 - 6) = 0;
            *(v6 - 9) = 0;
            *(v6 - 8) = 0;
            *(v6 - 10) = 0;
            ++*((_DWORD *)v6 - 14);
          }
          v6 += 24;
          v5 -= 192;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 16), (unsigned __int8 *)(*(_QWORD *)&v13[16] + v10 + 256));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 2048;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, unsigned __int8 *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + (v10 << 11) + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + (v10 << 11) + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + (v10 << 11) + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 11) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 11) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 11)) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 11) + 16) = *a4;
  re::CameraLateLatch::CameraLateLatch(*(_QWORD *)(a1 + 16) + (v10 << 11) + 256, a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<unsigned long,re::CameraLateLatch,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + (v10 << 11), 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::CameraLateLatch::CameraLateLatch(uint64_t a1, unsigned __int8 *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a2;
  *(_BYTE *)a1 = v4;
  if (v4)
    memcpy((void *)(a1 + 256), a2 + 256, 0x400uLL);
  *(_QWORD *)(a1 + 1312) = 0;
  *(_QWORD *)(a1 + 1280) = 0;
  *(_QWORD *)(a1 + 1296) = 0;
  *(_QWORD *)(a1 + 1288) = 0;
  *(_DWORD *)(a1 + 1304) = 0;
  *(_QWORD *)(a1 + 1280) = *((_QWORD *)a2 + 160);
  *((_QWORD *)a2 + 160) = 0;
  *(_QWORD *)(a1 + 1288) = *((_QWORD *)a2 + 161);
  *((_QWORD *)a2 + 161) = 0;
  v5 = *(_QWORD *)(a1 + 1296);
  *(_QWORD *)(a1 + 1296) = *((_QWORD *)a2 + 162);
  *((_QWORD *)a2 + 162) = v5;
  v6 = *(_QWORD *)(a1 + 1312);
  *(_QWORD *)(a1 + 1312) = *((_QWORD *)a2 + 164);
  *((_QWORD *)a2 + 164) = v6;
  ++*((_DWORD *)a2 + 326);
  ++*(_DWORD *)(a1 + 1304);
  *(_QWORD *)(a1 + 1352) = 0;
  *(_QWORD *)(a1 + 1320) = 0;
  *(_QWORD *)(a1 + 1336) = 0;
  *(_QWORD *)(a1 + 1328) = 0;
  *(_DWORD *)(a1 + 1344) = 0;
  *(_QWORD *)(a1 + 1320) = *((_QWORD *)a2 + 165);
  *((_QWORD *)a2 + 165) = 0;
  *(_QWORD *)(a1 + 1328) = *((_QWORD *)a2 + 166);
  *((_QWORD *)a2 + 166) = 0;
  v7 = *(_QWORD *)(a1 + 1336);
  *(_QWORD *)(a1 + 1336) = *((_QWORD *)a2 + 167);
  *((_QWORD *)a2 + 167) = v7;
  v8 = *(_QWORD *)(a1 + 1352);
  *(_QWORD *)(a1 + 1352) = *((_QWORD *)a2 + 169);
  *((_QWORD *)a2 + 169) = v8;
  ++*((_DWORD *)a2 + 336);
  ++*(_DWORD *)(a1 + 1344);
  *(_QWORD *)(a1 + 1392) = 0;
  *(_QWORD *)(a1 + 1360) = 0;
  *(_QWORD *)(a1 + 1376) = 0;
  *(_QWORD *)(a1 + 1368) = 0;
  *(_DWORD *)(a1 + 1384) = 0;
  *(_QWORD *)(a1 + 1360) = *((_QWORD *)a2 + 170);
  *((_QWORD *)a2 + 170) = 0;
  *(_QWORD *)(a1 + 1368) = *((_QWORD *)a2 + 171);
  *((_QWORD *)a2 + 171) = 0;
  v9 = *(_QWORD *)(a1 + 1376);
  *(_QWORD *)(a1 + 1376) = *((_QWORD *)a2 + 172);
  *((_QWORD *)a2 + 172) = v9;
  v10 = *(_QWORD *)(a1 + 1392);
  *(_QWORD *)(a1 + 1392) = *((_QWORD *)a2 + 174);
  *((_QWORD *)a2 + 174) = v10;
  ++*((_DWORD *)a2 + 346);
  ++*(_DWORD *)(a1 + 1384);
  *(_QWORD *)(a1 + 1568) = 0;
  *(_QWORD *)(a1 + 1536) = 0;
  *(_QWORD *)(a1 + 1552) = 0;
  *(_QWORD *)(a1 + 1544) = 0;
  *(_DWORD *)(a1 + 1560) = 0;
  *(_QWORD *)(a1 + 1536) = *((_QWORD *)a2 + 192);
  *((_QWORD *)a2 + 192) = 0;
  *(_QWORD *)(a1 + 1544) = *((_QWORD *)a2 + 193);
  *((_QWORD *)a2 + 193) = 0;
  v11 = *(_QWORD *)(a1 + 1552);
  *(_QWORD *)(a1 + 1552) = *((_QWORD *)a2 + 194);
  *((_QWORD *)a2 + 194) = v11;
  v12 = *(_QWORD *)(a1 + 1568);
  *(_QWORD *)(a1 + 1568) = *((_QWORD *)a2 + 196);
  *((_QWORD *)a2 + 196) = v12;
  ++*((_DWORD *)a2 + 390);
  ++*(_DWORD *)(a1 + 1560);
  *(_QWORD *)(a1 + 1608) = 0;
  *(_QWORD *)(a1 + 1576) = 0;
  *(_QWORD *)(a1 + 1592) = 0;
  *(_QWORD *)(a1 + 1584) = 0;
  *(_DWORD *)(a1 + 1600) = 0;
  *(_QWORD *)(a1 + 1576) = *((_QWORD *)a2 + 197);
  *((_QWORD *)a2 + 197) = 0;
  *(_QWORD *)(a1 + 1584) = *((_QWORD *)a2 + 198);
  *((_QWORD *)a2 + 198) = 0;
  v13 = *(_QWORD *)(a1 + 1592);
  *(_QWORD *)(a1 + 1592) = *((_QWORD *)a2 + 199);
  *((_QWORD *)a2 + 199) = v13;
  v14 = *(_QWORD *)(a1 + 1608);
  *(_QWORD *)(a1 + 1608) = *((_QWORD *)a2 + 201);
  *((_QWORD *)a2 + 201) = v14;
  ++*((_DWORD *)a2 + 400);
  ++*(_DWORD *)(a1 + 1600);
  *(_OWORD *)(a1 + 1616) = *((_OWORD *)a2 + 101);
  return a1;
}

_QWORD *re::DynamicArray<re::ViewConstantsLateLatch::LegacyPatchCommand>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 16 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 16 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::ViewConstantsLateLatch::LegacyPatchCommand>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::ViewConstantsLateLatch::LateLatchEntry>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 32 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 32 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::ViewConstantsLateLatch::LateLatchEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::FixedInlineArray<re::Matrix4x4<float>,2ul>>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _OWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::FixedInlineArray<re::Matrix4x4<float>,2ul>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 57)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 128, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 7;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 7, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (char *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v9 << 7;
        v11 = v7;
        do
        {
          v11[6] = 0u;
          v11[7] = 0u;
          v11[4] = 0u;
          v11[5] = 0u;
          v11[2] = 0u;
          v11[3] = 0u;
          *v11 = 0u;
          v11[1] = 0u;
          memmove(v11, v8, 0x80uLL);
          v8 += 128;
          v11 += 8;
          v10 -= 128;
        }
        while (v10);
        v8 = (char *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::PatchHandler>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  __int128 v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::PatchHandler>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 60)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 16, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 16 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 16 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_15;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_15:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 16 * v9;
        v11 = v7;
        v12 = (__int128 *)v5[4];
        do
        {
          v13 = *v12++;
          *v11++ = v13;
          v10 -= 16;
        }
        while (v10);
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_15;
    }
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::clear(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)(result + 8) = 0;
  v3 = *(_DWORD *)(result + 16);
  if ((v3 & 1) != 0)
  {
    v4 = result + 24;
    if (!v2)
      goto LABEL_10;
  }
  else
  {
    v4 = *(_QWORD *)(result + 32);
    if (!v2)
      goto LABEL_10;
  }
  v5 = 472 * v2;
  do
  {
    if (!*(_BYTE *)(v4 + 464))
    {
      result = (**(uint64_t (***)(uint64_t))v4)(v4);
      *(_BYTE *)(v4 + 464) = 1;
    }
    v4 += 472;
    v5 -= 472;
  }
  while (v5);
  v3 = *(_DWORD *)(v1 + 16);
LABEL_10:
  *(_DWORD *)(v1 + 16) = v3 + 2;
  return result;
}

uint64_t re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::setCapacity(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;

  result = *a1;
  if (a2 && !result)
  {
    result = re::DynamicOverflowArray<re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>,5ul>::setCapacity(a1, a2);
    v6 = *((_DWORD *)a1 + 4) + 2;
LABEL_4:
    *((_DWORD *)a1 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)a1 + 4);
  if ((v7 & 1) != 0)
    v8 = 5;
  else
    v8 = a1[3];
  if (v8 != a2)
  {
    v9 = a1[1];
    if (v9 <= a2 && (a2 > 5 || (v7 & 1) == 0))
    {
      if (a2 < 6)
      {
        v14 = a1[4];
        if ((v7 & 1) != 0)
          v15 = a1 + 3;
        else
          v15 = (_QWORD *)a1[4];
        if (v9)
        {
          v16 = 0;
          v17 = 472 * v9;
          do
          {
            v18 = &v15[v16 / 8];
            LOBYTE(a1[v16 / 8 + 61]) = 1;
            re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>::operator=(&a1[v16 / 8 + 3], &v15[v16 / 8]);
            if (!LOBYTE(v15[v16 / 8 + 58]))
            {
              (*(void (**)(_QWORD *))*v18)(&v15[v16 / 8]);
              *((_BYTE *)v18 + 464) = 1;
            }
            v16 += 472;
          }
          while (v17 != v16);
          result = *a1;
        }
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v14);
        v6 = *((_DWORD *)a1 + 4) | 1;
        goto LABEL_4;
      }
      if (is_mul_ok(a2, 0x1D8uLL))
      {
        v2 = 472 * a2;
        result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)result + 32))(result, 472 * a2, 8);
        if (result)
        {
          v11 = result;
          v12 = *((_DWORD *)a1 + 4);
          if ((v12 & 1) != 0)
            v13 = a1 + 3;
          else
            v13 = (_BYTE *)a1[4];
          v19 = a1[1];
          if (v19)
          {
            v20 = 472 * v19;
            v21 = (_BYTE *)result;
            do
            {
              v21[464] = 1;
              result = (uint64_t)re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>::operator=(v21, v13);
              if (!v13[464])
              {
                result = (**(uint64_t (***)(_BYTE *))v13)(v13);
                v13[464] = 1;
              }
              v13 += 472;
              v21 += 472;
              v20 -= 472;
            }
            while (v20);
            v12 = *((_DWORD *)a1 + 4);
          }
          if ((v12 & 1) == 0)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a1[4]);
            v12 = *((_DWORD *)a1 + 4);
          }
          *((_DWORD *)a1 + 4) = v12 & 0xFFFFFFFE;
          a1[3] = a2;
          a1[4] = v11;
          return result;
        }
      }
      else
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 472, a2);
        _os_crash();
        __break(1u);
      }
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*a1 + 8));
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

_BYTE *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)> *,re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)> *,re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)> *,0>(_BYTE *result, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v5;

  if (result != a2)
  {
    v5 = result;
    do
    {
      result = re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>::operator=(a3, v5);
      v5 += 472;
      a3 += 472;
    }
    while (v5 != a2);
  }
  return result;
}

_BYTE *re::InlineFunction<464ul,void ()(re::Matrix4x4<float> const&,re::Matrix4x4<float> const&)>::operator=(_BYTE *a1, _BYTE *a2)
{
  if (a1 != a2)
  {
    if (!a1[464])
    {
      (**(void (***)(_BYTE *))a1)(a1);
      a1[464] = 1;
    }
    if (!a2[464])
    {
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a2 + 32))(a2, a1);
      if (!a2[464])
      {
        (**(void (***)(_BYTE *))a2)(a2);
        a2[464] = 1;
      }
      a1[464] = 0;
    }
  }
  return a1;
}

void re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_OWORD *)&v13[24];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = DWORD2(v7);
      if (DWORD2(v7))
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (re::DynamicString *)(*(_QWORD *)&v13[16] + v10 + 16), (unint64_t *)(*(_QWORD *)&v13[16] + v10 + 48));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 224;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13, *(double *)&v7);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, unint64_t *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 224 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 224 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 224 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 224 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 224 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 224 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 224 * v10 + 16), a4);
  v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v14 + 224 * v10 + 48) = 0;
  v15 = v14 + 224 * v10 + 48;
  *(_DWORD *)(v15 + 8) = 0;
  re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>::move((unint64_t *)v15, a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 224 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

unint64_t *re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>::move(unint64_t *result, unint64_t *a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = result;
  v4 = *a2;
  v5 = *result;
  if (*a2 >= *result)
  {
    v6 = (uint64_t *)(a2 + 2);
    v7 = (uint64_t)&a2[10 * v5 + 2];
    v8 = result + 2;
    if (v5)
      memmove(result + 2, a2 + 2, 80 * v5 - 6);
    result = (unint64_t *)memcpy(&v8[10 * v5], &a2[10 * v5 + 2], (size_t)&v6[10 * v4] - v7);
  }
  else if (v4)
  {
    result = (unint64_t *)memmove(result + 2, a2 + 2, 80 * v4 - 6);
  }
  *v3 = v4;
  *a2 = 0;
  ++*((_DWORD *)a2 + 2);
  return result;
}

_QWORD *re::DynamicInlineArray<re::FixedOccupancyGrid,2ul>::copy(_QWORD *result, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;

  v2 = result;
  v3 = *a2;
  v4 = *result;
  if ((unint64_t)*a2 >= *result)
  {
    v5 = a2 + 2;
    v6 = &a2[10 * v4 + 2];
    v7 = result + 2;
    if (v4)
      memmove(result + 2, a2 + 2, 80 * v4 - 6);
    result = memcpy(&v7[10 * v4], v6, (char *)&v5[10 * v3] - (char *)v6);
  }
  else if (v3)
  {
    result = memmove(result + 2, a2 + 2, 80 * v3 - 6);
  }
  *v2 = v3;
  return result;
}

void re::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  signed int v23;
  _BYTE v24[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(_QWORD *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v24, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v24;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)v24 = v5;
      *(_QWORD *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (uint64_t *)(v6 + 48);
        do
        {
          if ((*(_DWORD *)(v13 - 5) & 0x80000000) != 0)
          {
            v14 = *(v13 - 6);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + (v17 << 7) + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + (v17 << 7) + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + (v17 << 7) + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v17 << 7) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v17 << 7) + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v17 << 7)) = v14;
            re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + (v17 << 7) + 16), (const re::DynamicString *)(v13 - 4));
            v21 = *(_QWORD *)(a1 + 16) + (v17 << 7);
            *(_QWORD *)(v21 + 48) = 0;
            *(_DWORD *)(v21 + 56) = 0;
            v22 = *v13;
            memcpy((void *)(v21 + 64), v13 + 2, 32 * *v13);
            *(_QWORD *)(v21 + 48) = v22;
            *v13 = 0;
            ++*((_DWORD *)v13 + 2);
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 16;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v24, *(double *)&v7);
    }
  }
  else
  {
    if (a2)
      v23 = a2;
    else
      v23 = 3;
  }
}

void re::HashTable<re::DynamicString,re::DynamicInlineArray<re::AABB,2ul>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + (v10 << 7), 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

_QWORD *re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 48 * v9;
        v11 = v7;
        do
        {
          *v11 = 0;
          *((_DWORD *)v11 + 2) = 0;
          re::DynamicInlineArray<re::PlaneF,6ul>::move(v11, (unint64_t *)v8);
          *(_QWORD *)v8 = 0;
          ++*(_DWORD *)(v8 + 8);
          v8 += 48;
          v11 += 6;
        }
        while (v8 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DynamicInlineArray<re::Vector4<float>,2ul>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::FixedArray<re::RenderLayer>::copy(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == a2[1])
    return std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RenderLayer const*,re::RenderLayer const*,re::RenderLayer*>((uint64_t)&v4, *a2, *a2 + 32 * v2, *(_QWORD *)(a1 + 16));
  re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::FixedArray<re::RenderLayer>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
    return result;
  if (a3 >> 59)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 32, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 32 * a3, 8);
  *(_QWORD *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_QWORD *)result = 0;
      *(_BYTE *)(result + 8) = 0;
      *(_BYTE *)(result + 20) = 0;
      result += 32;
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)result = 0;
  *(_BYTE *)(result + 8) = 0;
  *(_BYTE *)(result + 20) = 0;
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::RenderLayer const*,re::RenderLayer const*,re::RenderLayer*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  id *v8;
  int v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  int v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  int v17;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v8 = re::ObjCObject::operator=((id *)(a4 + v7), (id *)(a2 + v7));
    v9 = *(unsigned __int8 *)(a2 + v7 + 8);
    if (*((_BYTE *)v8 + 8))
      v10 = 0;
    else
      v10 = v9 == 0;
    if (!v10)
    {
      if (*((_BYTE *)v8 + 8))
        v11 = v9 == 0;
      else
        v11 = 0;
      if (v11)
      {
        *((_BYTE *)v8 + 8) = 0;
      }
      else
      {
        if (*((_BYTE *)v8 + 8))
          v12 = 1;
        else
          v12 = v9 == 0;
        if (!v12)
          *((_BYTE *)v8 + 8) = 1;
        *(_QWORD *)(a4 + v7 + 12) = *(_QWORD *)(a2 + v7 + 12);
      }
    }
    v13 = *(unsigned __int8 *)(a2 + v7 + 20);
    if (*((_BYTE *)v8 + 20))
      v14 = 0;
    else
      v14 = v13 == 0;
    if (!v14)
    {
      if (*((_BYTE *)v8 + 20))
        v15 = v13 == 0;
      else
        v15 = 0;
      if (v15)
      {
        *((_BYTE *)v8 + 20) = 0;
      }
      else
      {
        if (*((_BYTE *)v8 + 20) || !*(_BYTE *)(a2 + v7 + 20))
        {
          v17 = *(_DWORD *)(a2 + v7 + 24);
          v16 = a4 + v7;
        }
        else
        {
          *((_BYTE *)v8 + 20) = 1;
          v16 = a4 + v7;
          v17 = *(_DWORD *)(a2 + v7 + 24);
        }
        *(_DWORD *)(v16 + 24) = v17;
      }
    }
    v7 += 32;
  }
  while (a2 + v7 != v6);
  return v6;
}

_QWORD *re::DynamicArray<re::AutomaticSpecifyScopeParameters>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::AutomaticSpecifyScopeParameters>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          v2 = 40 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (_QWORD *)(v8 + 40 * v9);
        v11 = v7 + 4;
        v12 = (_QWORD *)(v8 + 32);
        do
        {
          v13 = v12 - 4;
          *(v11 - 4) = *(v12 - 4);
          v14 = *(v12 - 3);
          *((_WORD *)v11 - 8) = *((_WORD *)v12 - 8);
          *(v11 - 3) = v14;
          LODWORD(v14) = *((unsigned __int8 *)v12 - 8);
          *((_BYTE *)v11 - 8) = v14;
          if ((_DWORD)v14)
            *v11 = *v12;
          *(v12 - 4) = 0;
          v11 += 5;
          v12 += 5;
        }
        while (v13 + 5 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

double re::make::shared::object<re::RenderFrameWorkload>@<D0>(re *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  _QWORD *v4;
  _anonymous_namespace_ *v5;
  double result;

  v3 = re::globalAllocators(a1);
  v4 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 704, 64);
  bzero(v4, 0x2C0uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *v4 = &off_24ED75298;
  *((_BYTE *)v4 + 24) = 0;
  v4[4] = 0;
  *(int64x2_t *)(v4 + 5) = vdupq_n_s64(0xFFFFFFFFFFFFFFFuLL);
  v4[7] = 0;
  *((_DWORD *)v4 + 16) = 0;
  v4[9] = 0;
  v4[11] = 0;
  v4[14] = 0;
  v4[15] = 0;
  v4[13] = 0;
  *((_DWORD *)v4 + 32) = 0;
  v4[22] = 0;
  result = 0.0;
  *(_OWORD *)(v4 + 17) = 0u;
  *(_OWORD *)(v4 + 19) = 0u;
  *((_DWORD *)v4 + 42) = 0;
  v4[25] = 0;
  v4[26] = 0;
  v4[24] = 0;
  *((_DWORD *)v4 + 54) = 0;
  v4[63] = 0;
  *((_BYTE *)v4 + 512) = 0;
  *((_BYTE *)v4 + 576) = 0;
  *((_BYTE *)v4 + 640) = 0;
  *((_OWORD *)v4 + 14) = 0u;
  *((_OWORD *)v4 + 15) = 0u;
  *((_DWORD *)v4 + 64) = 0;
  *(_OWORD *)(v4 + 33) = 0u;
  *(_OWORD *)(v4 + 35) = 0u;
  *((_DWORD *)v4 + 74) = 0;
  *((_OWORD *)v4 + 19) = 0u;
  *((_OWORD *)v4 + 20) = 0u;
  *((_DWORD *)v4 + 84) = 0;
  *(_OWORD *)(v4 + 43) = 0u;
  *(_OWORD *)(v4 + 45) = 0u;
  *((_DWORD *)v4 + 94) = 0;
  *((_DWORD *)v4 + 104) = 0;
  *((_OWORD *)v4 + 24) = 0u;
  *((_OWORD *)v4 + 25) = 0u;
  *((_DWORD *)v4 + 114) = 0;
  *(_OWORD *)(v4 + 53) = 0u;
  *(_OWORD *)(v4 + 55) = 0u;
  *((_DWORD *)v4 + 124) = 0;
  *((_OWORD *)v4 + 29) = 0u;
  *((_OWORD *)v4 + 30) = 0u;
  *a2 = v4;
  return result;
}

_QWORD *re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v3 = result[1];
  if (v3 == a2)
    return result;
  v5 = result;
  if (result[2] > a2)
    return result;
  result = (_QWORD *)*result;
  if (!*v5)
  {
    result = (_QWORD *)re::DynamicArray<re::Function<void ()(re::RenderFrameWorkload *)>>::setCapacity(v5, a2);
    ++*((_DWORD *)v5 + 6);
    return result;
  }
  if (a2)
  {
    if (is_mul_ok(a2, 0x28uLL))
    {
      v2 = 40 * a2;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
      if (result)
      {
        v7 = result;
        if (!v5[1])
          goto LABEL_27;
        goto LABEL_11;
      }
    }
    else
    {
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
      _os_crash();
      __break(1u);
    }
    re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v7 = 0;
  if (!v3)
    goto LABEL_27;
LABEL_11:
  v8 = v5[4];
  v9 = v5[2];
  if (!v9)
    goto LABEL_26;
  v10 = 40 * v9;
  v11 = (uint64_t)v7;
  do
  {
    *(_QWORD *)(v11 + 24) = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v11 + 32) = 0;
    if (v8 == v11)
      goto LABEL_24;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(v11);
    v12 = *(_QWORD *)(v8 + 32);
    if (*(_QWORD *)(v11 + 24) == *(_QWORD *)(v8 + 24))
    {
      v13 = v8;
      if (v8 != v12)
      {
        *(_QWORD *)(v11 + 32) = v12;
        *(_QWORD *)(v8 + 32) = 0;
        goto LABEL_24;
      }
    }
    else
    {
      v13 = *(_QWORD *)(v8 + 32);
      if (!v12)
        goto LABEL_24;
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
    v15 = v11;
    if (v14 >= 0x19)
    {
      v16 = v14;
      v17 = *(_QWORD *)(v11 + 24);
      if (v17)
        v15 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, v16, 0);
      else
        v15 = 0;
    }
    *(_QWORD *)(v11 + 32) = v15;
    (*(void (**)(_QWORD))(**(_QWORD **)(v8 + 32) + 32))(*(_QWORD *)(v8 + 32));
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(v8);
LABEL_24:
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(v8);
    v8 += 40;
    v11 += 40;
    v10 -= 40;
  }
  while (v10);
  v8 = v5[4];
LABEL_26:
  result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
LABEL_27:
  v5[4] = v7;
  v5[1] = a2;
  return result;
}

_QWORD *re::DynamicArray<re::mtl::Drawable>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::mtl::Drawable>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::mtl::Drawable>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::mtl::Drawable>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  void *v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::mtl::Drawable>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 61)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 8, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 8 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 8 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (void **)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 8 * v9;
        v11 = v7;
        do
        {
          v12 = *v8;
          *v8 = 0;
          *v11++ = v12;
          v13 = *v8++;

          v10 -= 8;
        }
        while (v10);
        v8 = (void **)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, void **))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::resize(_anonymous_namespace_ *result, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
  }
  else
  {
    result = re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::reserve(result, a2);
    v5 = *((_QWORD *)v3 + 1);
    if (v5 < a2)
    {
      do
      {
        v6 = (char *)v3 + 24;
        if ((*((_BYTE *)v3 + 16) & 1) == 0)
          v6 = (char *)*((_QWORD *)v3 + 4);
        *(_QWORD *)&v6[8 * v5++] = 0;
      }
      while (a2 != v5);
    }
  }
  *((_QWORD *)v3 + 1) = a2;
  *((_DWORD *)v3 + 4) += 2;
  return result;
}

_QWORD *re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (a2 && !v5)
  {
    result = (_QWORD *)re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::setCapacity(v4, a2);
    v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)result + 4);
  if ((v7 & 1) != 0)
    v8 = 5;
  else
    v8 = result[3];
  if (v8 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 5 || (v7 & 1) == 0))
    {
      if (a2 < 6)
      {
        v14 = result + 3;
        v15 = v4[4];
        if ((v7 & 1) != 0)
          v16 = v4 + 3;
        else
          v16 = (const void *)v4[4];
        memcpy(v14, v16, 8 * v9);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 8 * a2;
        v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          v12 = v10;
          if ((v4[2] & 1) != 0)
            v13 = v4 + 3;
          else
            v13 = (const void *)v4[4];
          result = memcpy(v10, v13, 8 * v4[1]);
          v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
            v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

int *re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::copy(int *result, unint64_t a2, char *__src, uint64_t a4)
{
  uint64_t v4;
  int *v6;
  unint64_t v7;
  unint64_t v8;
  int v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;

  if (a4)
  {
    v6 = result;
    v7 = *((_QWORD *)result + 1);
    if (v7 + 1 <= a2)
    {
      v20 = 0;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v21) = 136315906;
      *(_QWORD *)((char *)&v21 + 4) = "copy";
      WORD6(v21) = 1024;
      HIWORD(v21) = 678;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      v4 = a4;
      v8 = a2 + a4;
      if (!__CFADD__(a2, a4))
      {
        if (v7 >= v8)
        {
          if ((result[4] & 1) != 0)
            v13 = (char *)(result + 6);
          else
            v13 = (char *)*((_QWORD *)result + 4);
          result = (int *)memmove(&v13[8 * a2], __src, 8 * a4);
LABEL_29:
          v6[4] += 2;
          return result;
        }
        if (*(_QWORD *)result)
        {
          v10 = result[4];
          if ((v10 & 1) != 0)
          {
            if (v8 > 5)
            {
              v12 = 10;
              goto LABEL_16;
            }
          }
          else
          {
            v11 = *((_QWORD *)result + 3);
            if (v11 < v8)
            {
              v12 = 2 * v11;
LABEL_16:
              if (v12 <= v8)
                v14 = a2 + a4;
              else
                v14 = v12;
              re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::setCapacity(result, v14);
              v10 = v6[4];
            }
          }
        }
        else
        {
          re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::setCapacity(v6, v8);
          v10 = v6[4] + 2;
          v6[4] = v10;
        }
        v15 = *((_QWORD *)v6 + 1);
        v16 = v15 - a2;
        if ((v10 & 1) != 0)
          v17 = (char *)(v6 + 6);
        else
          v17 = (char *)*((_QWORD *)v6 + 4);
        v18 = &__src[8 * v16];
        if (v15 != a2)
        {
          memmove(&v17[8 * a2], __src, 8 * v16);
          v10 = v6[4];
        }
        if ((v10 & 1) != 0)
          v19 = (char *)(v6 + 6);
        else
          v19 = (char *)*((_QWORD *)v6 + 4);
        result = (int *)memcpy(&v19[8 * *((_QWORD *)v6 + 1)], v18, &__src[8 * v4] - v18);
        *((_QWORD *)v6 + 1) = v8;
        goto LABEL_29;
      }
    }
    re::internal::assertLog((re::internal *)7, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::copy(). size = %zu, pos = %zu, count = %zu", "!overflow", "copy", 682, v7, a2, v4, v20, v21);
    _os_crash();
    __break(1u);
  }
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::reserve(_anonymous_namespace_ *result, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  int v5;

  v3 = result;
  if (*(_QWORD *)result)
  {
    if ((*((_DWORD *)result + 4) & 1) == 0)
    {
LABEL_3:
      v4 = *((_QWORD *)v3 + 3);
      goto LABEL_6;
    }
  }
  else
  {
    result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::setCapacity(v3, a2);
    v5 = *((_DWORD *)v3 + 4) + 2;
    *((_DWORD *)v3 + 4) = v5;
    if ((v5 & 1) == 0)
      goto LABEL_3;
  }
  v4 = 5;
LABEL_6:
  if (v4 < a2)
    return (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderFrameDelta *,5ul>::setCapacity(v3, a2);
  return result;
}

void re::createMaterialSystemShaderMetadata(uint64_t a1@<X8>)
{
  unsigned __int8 v3;
  char v4;
  const char *v5;
  char v6;
  char v7;
  StringID v8;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  if ((v3 & 1) == 0
  {
    re::Defaults::BOOLValue((re::Defaults *)"supportsManualVertexFetch", v5, (char *)&v8);
    if (v8.var0)
      v6 = *((_BYTE *)&v8.var0 + 1);
    else
      v6 = 0;
    re::createMaterialSystemShaderMetadata(BOOL,BOOL,BOOL)::_supports = v6;
  }
  v4 = re::createMaterialSystemShaderMetadata(BOOL,BOOL,BOOL)::_supports;
  *(_QWORD *)&v8.var0 = 0x3EE7B1A0B0613218;
  v8.var1 = "realitykit::vsGeometryModifier";
  v7 = re::createMaterialSystemShaderMetadata(BOOL,BOOL,BOOL)::_supports;
  re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addNew(a1, &v8, &v7);
  re::StringID::destroyString((re::StringID *)&v8);
  *(_QWORD *)&v8.var0 = 0x55E544DB28BE8DDALL;
  v8.var1 = "vsRealityPbr";
  v7 = v4;
  re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addNew(a1, &v8, &v7);
  re::StringID::destroyString((re::StringID *)&v8);
  *(_QWORD *)&v8.var0 = 0x32567C2142;
  v8.var1 = "vsUnlit";
  v7 = v4;
  re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addNew(a1, &v8, &v7);
  re::StringID::destroyString((re::StringID *)&v8);
  *(_QWORD *)&v8.var0 = 0x74EED1ADBD89D054;
  v8.var1 = "vsIncrementStencil";
  v7 = v4;
  re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addNew(a1, &v8, &v7);
  re::StringID::destroyString((re::StringID *)&v8);
  *(_QWORD *)&v8.var0 = 0x1D9CEB56E2FABFF2;
  v8.var1 = "vsVideoPlayback";
  v7 = v4;
  re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addNew(a1, &v8, &v7);
  re::StringID::destroyString((re::StringID *)&v8);
  *(_QWORD *)&v8.var0 = 0xCCDE6D7516E4C5C4;
  v8.var1 = "vsRealityShadowReceiver";
  v7 = v4;
  re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addNew(a1, &v8, &v7);
  re::StringID::destroyString((re::StringID *)&v8);
  *(_QWORD *)&v8.var0 = 0x2C5500CFF2B76A0;
  v8.var1 = "vsOcclusion";
  v7 = v4;
  re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addNew(a1, &v8, &v7);
  re::StringID::destroyString((re::StringID *)&v8);
}

uint64_t re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addNew(uint64_t a1, StringID *a2, _BYTE *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(_QWORD *)(a1 + 16) + 32 * v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + 32 * v9;
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      return v11 + 24;
    v9 = *(_DWORD *)(v10 + 32 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

uint64_t re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, StringID *a4, _BYTE *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 32 * v9);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  v14 = 32 * v9;
  *(_DWORD *)(v12 + v14) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8), a4);
  v15 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(v15 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * ((*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 31) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 1));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::StringID,re::ShaderFunctionMetadata,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, (StringID *)(*(_QWORD *)&v15[16] + v10 + 8));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

void re::GraphicsErrorCategoryImpl::~GraphicsErrorCategoryImpl(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x2276933B8);
}

const char *re::GraphicsErrorCategoryImpl::name(re::GraphicsErrorCategoryImpl *this)
{
  return "REGraphics error";
}

_QWORD *re::GraphicsErrorCategoryImpl::message@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  const char *v3;
  const char *v4;
  char *v5;

  v3 = "Error encountered when executing the render frame";
  v4 = "Unknown REGraphics error";
  if (a1 == 1001)
    v4 = "Invalid custom deformer";
  if (a1 != 2000)
    v3 = v4;
  if (a1 == 1000)
    v5 = "Invalid blend shape group definition";
  else
    v5 = (char *)v3;
  return std::string::basic_string[abi:nn180100]<0>(a2, v5);
}

id re::makeMetalTypeInfoForPointer@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  id v5;
  _DWORD *v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  __int16 v10;
  id result;
  __int128 v12;
  _OWORD v13[4];
  unint64_t v14;
  void *v15;

  v4 = objc_msgSend(*a1, sel_dataTypeDescription);
  v5 = objc_msgSend(v4, sel_elementType);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 1;
  *(_DWORD *)(a2 + 32) = 0;
  v6 = (_DWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = &str_110;
  *(_WORD *)(a2 + 36) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 72) = 0;
  *(_WORD *)(a2 + 76) = 256;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 61) = 0;
  if (v5 == (id)1)
  {
    re::makeMetalTypeInfo((_anonymous_namespace_ *)objc_msgSend(v4, sel_elementStructType), (const char *)objc_msgSend(objc_msgSend(*a1, sel_name), sel_UTF8String), 0, (_BYTE *)objc_msgSend(v4, sel_dataSize), (unsigned int *)&v12);
    *(_QWORD *)a2 = v12;
    *(_DWORD *)(a2 + 8) = DWORD2(v12);
    v7 = v13[0];
    *(_QWORD *)&v13[0] = 0;
    *((_QWORD *)&v13[0] + 1) = &str_110;
    v8 = *(_QWORD *)(a2 + 16);
    v9 = *(void **)(a2 + 24);
    *(_OWORD *)(a2 + 16) = v7;
    v14 = v7 & 0xFFFFFFFFFFFFFFFELL | v8 & 1;
    v15 = v9;
    re::StringID::destroyString((re::StringID *)&v14);
    *v6 = v13[1];
    *(_WORD *)(a2 + 36) = WORD2(v13[1]);
    re::FixedArray<re::MetalTypeInfo>::operator=((uint64_t *)(a2 + 40), (uint64_t *)&v13[1] + 1);
    *(_QWORD *)(a2 + 64) = *(_QWORD *)&v13[3];
    *(_QWORD *)(a2 + 70) = *(_QWORD *)((char *)&v13[3] + 6);
    re::FixedArray<re::MetalTypeInfo>::deinit((_QWORD *)&v13[1] + 1);
    re::StringID::destroyString((re::StringID *)v13);
  }
  else
  {
    v10 = (__int16)v5;
    v12 = 0u;
    DWORD2(v12) = 1;
    memset(&v13[1], 0, 48);
    DWORD2(v13[3]) = 0;
    BYTE13(v13[3]) = 1;
    *(_DWORD *)(a2 + 8) = 1;
    *(_QWORD *)a2 = v12;
    *(_QWORD *)&v13[0] = 0;
    *((_QWORD *)&v13[0] + 1) = &str_110;
    v14 = 0;
    v15 = &str_110;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = &str_110;
    re::StringID::destroyString((re::StringID *)&v14);
    *v6 = v13[1];
    *(_WORD *)(a2 + 36) = WORD2(v13[1]);
    re::FixedArray<re::MetalTypeInfo>::operator=((uint64_t *)(a2 + 40), (uint64_t *)&v13[1] + 1);
    *(_QWORD *)(a2 + 64) = *(_QWORD *)&v13[3];
    *(_QWORD *)(a2 + 70) = *(_QWORD *)((char *)&v13[3] + 6);
    re::FixedArray<re::MetalTypeInfo>::deinit((_QWORD *)&v13[1] + 1);
    re::StringID::destroyString((re::StringID *)v13);
    *(_WORD *)(a2 + 36) = v10;
  }
  *(_DWORD *)(a2 + 8) = objc_msgSend(v4, sel_alignment, v12, v13[0]);
  result = objc_msgSend(v4, sel_alignment);
  if (!result)
    *(_DWORD *)(a2 + 8) = 16;
  return result;
}

id re::makeMetalTypeInfo@<X0>(_anonymous_namespace_ *a1@<X0>, const char *a2@<X1>, unsigned int a3@<W2>, _BYTE *a4@<X3>, unsigned int *a5@<X8>)
{
  void *v9;
  id v10;
  id result;
  id v12;
  _anonymous_namespace_ *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;
  unsigned int v18;
  id v19;
  char *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  _anonymous_namespace_ *v24;
  unint64_t v25;
  void *v26;
  char v27;
  void *v28;
  unsigned int v29;
  id v30;
  char **v31;
  const char *v32;
  _anonymous_namespace_ *v33;
  unsigned int v34;
  unint64_t v35;
  void *v36;
  char v37;
  void *v38;
  const char *v39;
  _anonymous_namespace_ *v40;
  int v41;
  unint64_t v42;
  void *v43;
  char v44;
  void *v45;
  unsigned int TypeSize;
  unsigned int v47;
  _BYTE *v48;
  _anonymous_namespace_ *v49;
  unint64_t v50;
  void *v51;
  char v52;
  void *v53;
  unsigned int v54;
  id v55;
  id v56;
  unint64_t v57;
  void *v58;
  char v59;
  void *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  re::StringID *v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  unsigned int *v80;
  id v81;
  __int128 v82;
  unint64_t v83;
  void *v84;
  unsigned int v85;
  __int16 v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE v89[22];
  unint64_t v90;
  int v91;
  unint64_t v92;
  void *v93;
  unsigned int v94;
  unsigned __int16 v95;
  unint64_t v96;
  unint64_t v97;
  _BYTE v98[22];
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  _QWORD *v103;
  unint64_t v104;
  void *v105;

  *a5 = a3;
  *(_QWORD *)(a5 + 1) = 0x100000000;
  *((_QWORD *)a5 + 2) = 0;
  v9 = &str_110;
  *((_QWORD *)a5 + 3) = &str_110;
  *((_QWORD *)a5 + 5) = 0;
  a5[8] = 0;
  a5[18] = 0;
  *((_WORD *)a5 + 38) = 256;
  *((_QWORD *)a5 + 6) = 0;
  *((_QWORD *)a5 + 7) = 0;
  *(_QWORD *)((char *)a5 + 61) = 0;
  v80 = a5;
  v78 = a4;
  a5[1] = a4;
  *((_WORD *)a5 + 18) = 1;
  v10 = -[_anonymous_namespace_ members](a1, sel_members);
  result = objc_msgSend(v10, sel_count);
  if (result)
  {
    v103 = 0;
    v100 = 0;
    v101 = 0;
    v99 = 0;
    v102 = 0;
    v12 = objc_msgSend(v10, sel_count);
    if (v12)
      re::DynamicArray<re::MetalTypeInfo>::setCapacity(&v99, (unint64_t)v12);
    v77 = (uint64_t)(a5 + 10);
    v13 = (_anonymous_namespace_ *)objc_msgSend(v10, sel_count);
    if (v13)
    {
      v14 = 0;
      v15 = 0;
      v81 = v10;
      v79 = *v80;
      v16 = 1;
      while (1)
      {
        v17 = v9;
        v18 = v16 - 1;
        v19 = objc_msgSend(v10, sel_objectAtIndex_, v14);
        v20 = (char *)objc_msgSend(v19, sel_offset) + v79;
        v90 = 0;
        v91 = 1;
        v92 = 0;
        v93 = v17;
        v21 = v17;
        v94 = 0;
        v95 = 0;
        *(_DWORD *)&v98[16] = 0;
        *(_WORD *)&v98[20] = 256;
        v97 = 0;
        *(_QWORD *)v98 = 0;
        v96 = 0;
        *(_QWORD *)&v98[5] = 0;
        v22 = (uint64_t)objc_msgSend(v19, sel_dataType);
        if (v22 <= 57)
        {
          if (v22 == 1)
          {
            if (objc_msgSend(v19, sel_structType))
            {
              v47 = objc_msgSend(v81, sel_count) - 1;
              v48 = v78;
              if (v78)
              {
                if (v18 == v47)
                {
LABEL_29:
                  v30 = (id)(v48 - (_BYTE *)objc_msgSend(v19, sel_offset));
                  goto LABEL_30;
                }
              }
              else if (v18 == v47)
              {
                v30 = 0;
LABEL_30:
                v55 = objc_msgSend(v19, sel_structType);
                v56 = objc_msgSend(objc_msgSend(v19, sel_name), sel_UTF8String);
                objc_msgSend(v19, sel_argumentIndex);
                re::makeMetalTypeInfo(&v82, v55, v56, v20, v30);
                v90 = v82;
                v91 = DWORD2(v82);
                v57 = v83;
                v58 = v84;
                v9 = v21;
                v83 = 0;
                v84 = v21;
                v59 = v92;
                v60 = v93;
                v92 = v57;
                v93 = v58;
                v104 = v57 & 0xFFFFFFFFFFFFFFFELL | v59 & 1;
                v105 = v60;
                re::StringID::destroyString((re::StringID *)&v104);
                v94 = v85;
                v95 = v86;
                re::FixedArray<re::MetalTypeInfo>::operator=((uint64_t *)&v96, &v87);
                *(_QWORD *)&v98[8] = *(_QWORD *)&v89[8];
                *(_QWORD *)&v98[14] = *(_QWORD *)&v89[14];
                re::FixedArray<re::MetalTypeInfo>::deinit(&v87);
                re::StringID::destroyString((re::StringID *)&v83);
                goto LABEL_31;
              }
              v48 = objc_msgSend(objc_msgSend(v81, sel_objectAtIndex_, v16), sel_offset);
              goto LABEL_29;
            }
          }
          else if (v22 == 2 && objc_msgSend(v19, sel_arrayType))
          {
            v30 = objc_msgSend(v19, sel_arrayType);
            v32 = (const char *)objc_msgSend(objc_msgSend(v19, sel_name), sel_UTF8String);
            v33 = (_anonymous_namespace_ *)objc_msgSend(v19, sel_argumentIndex);
            LODWORD(v82) = (_DWORD)v20;
            *(_QWORD *)((char *)&v82 + 4) = 0x100000000;
            v83 = 0;
            v84 = v21;
            v9 = v21;
            v85 = 0;
            v86 = 0;
            *(_DWORD *)&v89[16] = 0;
            *(_WORD *)&v89[20] = 256;
            v88 = 0;
            *(_QWORD *)v89 = 0;
            v87 = 0;
            *(_QWORD *)&v89[5] = 0;
            v85 = objc_msgSend(v30, sel_arrayLength);
            v34 = objc_msgSend(v30, sel_stride);
            DWORD1(v82) = v85 * v34;
            v91 = DWORD2(v82);
            v90 = v82;
            v35 = v83;
            v36 = v84;
            v83 = 0;
            v84 = v21;
            v37 = v92;
            v38 = v93;
            v92 = v35;
            v93 = v36;
            v104 = v35 & 0xFFFFFFFFFFFFFFFELL | v37 & 1;
            v105 = v38;
            re::StringID::destroyString((re::StringID *)&v104);
            v94 = v85;
            v95 = v86;
            re::FixedArray<re::MetalTypeInfo>::operator=((uint64_t *)&v96, &v87);
            *(_QWORD *)&v98[8] = *(_QWORD *)&v89[8];
            *(_QWORD *)&v98[14] = *(_QWORD *)&v89[14];
            re::FixedArray<re::MetalTypeInfo>::deinit(&v87);
            re::StringID::destroyString((re::StringID *)&v83);
            LODWORD(v30) = HIDWORD(v90);
LABEL_31:
            v10 = v81;
            v31 = &selRef_newBufferWithBytes_length_options_;
            goto LABEL_32;
          }
        }
        else
        {
          switch(v22)
          {
            case ':':
              v30 = objc_msgSend(v19, sel_textureReferenceType);
              v39 = (const char *)objc_msgSend(objc_msgSend(v19, sel_name), sel_UTF8String);
              v40 = (_anonymous_namespace_ *)objc_msgSend(v19, sel_argumentIndex);
              v41 = (int)v40;
              *(_QWORD *)&v82 = 0;
              DWORD2(v82) = 1;
              v83 = 0;
              v84 = v21;
              v9 = v21;
              v85 = 0;
              *(_DWORD *)&v89[16] = 0;
              *(_WORD *)&v89[20] = 256;
              v88 = 0;
              *(_QWORD *)v89 = 0;
              v87 = 0;
              *(_QWORD *)&v89[5] = 0;
              v86 = 58;
              *(_DWORD *)&v89[8] = objc_msgSend(v30, sel_textureType);
              *(_DWORD *)&v89[16] = v41;
              v89[12] = objc_msgSend(v30, sel_isDepthTexture);
              v90 = v82;
              v91 = DWORD2(v82);
              v42 = v83;
              v43 = v84;
              v83 = 0;
              v84 = v21;
              v44 = v92;
              v45 = v93;
              v92 = v42;
              v93 = v43;
              v104 = v42 & 0xFFFFFFFFFFFFFFFELL | v44 & 1;
              v105 = v45;
              re::StringID::destroyString((re::StringID *)&v104);
              v94 = v85;
              v95 = v86;
              re::FixedArray<re::MetalTypeInfo>::operator=((uint64_t *)&v96, &v87);
              *(_QWORD *)&v98[8] = *(_QWORD *)&v89[8];
              *(_QWORD *)&v98[14] = *(_QWORD *)&v89[14];
              re::FixedArray<re::MetalTypeInfo>::deinit(&v87);
              re::StringID::destroyString((re::StringID *)&v83);
              TypeSize = re::mtl::getTypeSize(v95);
              v90 = __PAIR64__(TypeSize, v20);
              LODWORD(v30) = TypeSize;
              *((_BYTE *)v80 + 76) = 1;
              goto LABEL_31;
            case '<':
              if (objc_msgSend(v19, sel_pointerType))
              {
                v24 = (_anonymous_namespace_ *)objc_msgSend(objc_msgSend(v19, sel_name), sel_UTF8String);
                v104 = 0;
                v105 = v21;
                v9 = v21;
                v25 = v104;
                v26 = v105;
                v104 = 0;
                v105 = v21;
                v27 = v92;
                v28 = v93;
                v92 = v25;
                v93 = v26;
                *(_QWORD *)&v82 = v25 & 0xFFFFFFFFFFFFFFFELL | v27 & 1;
                *((_QWORD *)&v82 + 1) = v28;
                re::StringID::destroyString((re::StringID *)&v82);
                re::StringID::destroyString((re::StringID *)&v104);
                v95 = 60;
                v90 = v20;
                v29 = objc_msgSend(v19, sel_argumentIndex);
                LODWORD(v30) = 0;
                *(_DWORD *)&v98[16] = v29;
                v10 = v81;
                *((_BYTE *)v80 + 76) = 1;
                v31 = &selRef_newBufferWithBytes_length_options_;
                if (!v29)
                  goto LABEL_34;
LABEL_33:
                *((_BYTE *)v80 + 76) = 1;
                goto LABEL_34;
              }
              break;
            case ';':
              re::internal::assertLog((re::internal *)4, v23, "assertion failure: '%s' (%s:line %i) Samplers within argument buffers are not supported by the material system.", "!\"Unreachable code\"", "makeMetalTypeInfo", 219);
              result = (id)_os_crash();
              __break(1u);
              return result;
          }
        }
        v49 = (_anonymous_namespace_ *)objc_msgSend(objc_msgSend(v19, sel_name), sel_UTF8String);
        v104 = 0;
        v105 = v21;
        v50 = v104;
        v51 = v105;
        v104 = 0;
        v105 = v21;
        v52 = v92;
        v53 = v93;
        v92 = v50;
        v93 = v51;
        *(_QWORD *)&v82 = v50 & 0xFFFFFFFFFFFFFFFELL | v52 & 1;
        *((_QWORD *)&v82 + 1) = v53;
        re::StringID::destroyString((re::StringID *)&v82);
        re::StringID::destroyString((re::StringID *)&v104);
        LODWORD(v90) = (_DWORD)v20;
        v95 = (unsigned __int16)objc_msgSend(v19, sel_dataType);
        HIDWORD(v90) = re::mtl::getTypeSize(v95);
        *(_DWORD *)&v98[16] = objc_msgSend(v19, sel_argumentIndex);
        v31 = &selRef_newBufferWithBytes_length_options_;
        v10 = v81;
        if (v18 == objc_msgSend(v81, sel_count) - 1)
        {
          LODWORD(v30) = HIDWORD(v90);
        }
        else
        {
          v54 = objc_msgSend(objc_msgSend(v81, sel_objectAtIndex_, v16), sel_offset);
          LODWORD(v30) = v54 - objc_msgSend(v19, sel_offset);
          v31 = &selRef_newBufferWithBytes_length_options_;
        }
        v9 = v21;
LABEL_32:
        if (*(_DWORD *)&v98[16])
          goto LABEL_33;
LABEL_34:
        v61 = v101;
        if (v101 >= v100)
        {
          re::DynamicArray<re::MetalTypeInfo>::growCapacity(&v99, v101 + 1);
          v61 = v101;
        }
        v62 = &v103[10 * v61];
        v63 = v90;
        *((_DWORD *)v62 + 2) = v91;
        *v62 = v63;
        LOBYTE(v63) = v92;
        v62[2] = v62[2] & 0xFFFFFFFFFFFFFFFELL | v92 & 1;
        v62[2] = v92 & 0xFFFFFFFFFFFFFFFELL | v63 & 1;
        v62[3] = (unint64_t)v93;
        v92 = 0;
        v93 = v9;
        LODWORD(v63) = v94;
        *((_WORD *)v62 + 18) = v95;
        *((_DWORD *)v62 + 8) = v63;
        v62[6] = 0;
        v62[7] = 0;
        v62[5] = 0;
        v62[5] = v96;
        v96 = 0;
        v62[6] = v97;
        v97 = 0;
        v64 = v62[7];
        v62[7] = *(_QWORD *)v98;
        *(_QWORD *)v98 = v64;
        v65 = *(_QWORD *)&v98[8];
        *(unint64_t *)((char *)v62 + 70) = *(_QWORD *)&v98[14];
        v62[8] = v65;
        ++v101;
        ++v102;
        v15 += v30;
        re::FixedArray<re::MetalTypeInfo>::deinit(&v96);
        re::StringID::destroyString((re::StringID *)&v92);
        v14 = v16;
        v13 = (_anonymous_namespace_ *)objc_msgSend(v10, v31[245]);
        if ((unint64_t)v13 <= v16++)
          goto LABEL_39;
      }
    }
    v15 = 0;
LABEL_39:
    if (!v78)
      v80[1] = v15;
    v67 = v101;
    if (v101)
    {
      v68 = v103;
      v69 = &v103[10 * v101];
      v70 = *((_QWORD *)v80 + 7);
      do
      {
        v71 = *v68;
        *(_DWORD *)(v70 + 8) = *((_DWORD *)v68 + 2);
        *(_QWORD *)v70 = v71;
        v72 = (re::StringID *)(v68 + 2);
        LOBYTE(v71) = v68[2];
        *(_QWORD *)(v70 + 16) = *(_QWORD *)(v70 + 16) & 0xFFFFFFFFFFFFFFFELL | v68[2] & 1;
        *(_QWORD *)(v70 + 16) = v68[2] & 0xFFFFFFFFFFFFFFFELL | v71 & 1;
        *(_QWORD *)(v70 + 24) = v68[3];
        v68[3] = v9;
        v68[2] = 0;
        LODWORD(v71) = *((_DWORD *)v68 + 8);
        *(_WORD *)(v70 + 36) = *((_WORD *)v68 + 18);
        *(_DWORD *)(v70 + 32) = v71;
        *(_QWORD *)(v70 + 48) = 0;
        *(_QWORD *)(v70 + 56) = 0;
        *(_QWORD *)(v70 + 40) = 0;
        v74 = v68[5];
        v73 = v68 + 5;
        *(_QWORD *)(v70 + 40) = v74;
        *v73 = 0;
        *(_QWORD *)(v70 + 48) = v73[1];
        v73[1] = 0;
        v75 = *(_QWORD *)(v70 + 56);
        *(_QWORD *)(v70 + 56) = v73[2];
        v73[2] = v75;
        v76 = v73[3];
        *(_QWORD *)(v70 + 70) = *(_QWORD *)((char *)v73 + 30);
        *(_QWORD *)(v70 + 64) = v76;
        re::FixedArray<re::MetalTypeInfo>::deinit(v73);
        re::StringID::destroyString(v72);
        v68 = v73 + 5;
        v70 += 80;
      }
      while (v68 != v69);
    }
    return (id)re::DynamicArray<re::MetalTypeInfo>::deinit((uint64_t)&v99);
  }
  return result;
}

void re::collectArguments(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _anonymous_namespace_ *a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  char **v13;
  id v14;
  id v15;
  id v16;
  BOOL v17;
  id v18;
  id v19;
  id v20;
  id v21;
  _anonymous_namespace_ *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  _anonymous_namespace_ *v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  _anonymous_namespace_ *v30;
  unint64_t v31;
  char *v32;
  char var0;
  char *var1;
  unsigned __int16 v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  const char *v41;
  size_t v42;
  BOOL v43;
  id v45;
  id v46;
  _anonymous_namespace_ *v47;
  unint64_t v48;
  unsigned int v49;
  _anonymous_namespace_ *v50;
  const char *v51;
  unint64_t v52;
  __n128 *v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  unint64_t v57;
  unsigned __int16 v58;
  unsigned __int16 v59;
  unsigned __int16 v60;
  unsigned __int8 v61;
  id v62;
  BOOL v63;
  __n128 *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  BOOL v79;
  _anonymous_namespace_ *v80;
  unsigned int v81;
  _anonymous_namespace_ *v82;
  const char *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  unsigned __int16 v89;
  char *v90;
  uint64_t *v91;
  uint64_t v92;
  char v93;
  size_t v94;
  _anonymous_namespace_ *v95;
  _anonymous_namespace_ *v96;
  const char *v97;
  unint64_t v98;
  char *v99;
  unint64_t v100;
  _anonymous_namespace_ *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  re::StringID *v111;
  uint64_t v112;
  char *__endptr;
  unint64_t v121;
  __n128 *v122;
  unint64_t v123;
  char *v124;
  char *v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  _BYTE v129[38];
  uint64_t v130[3];
  _QWORD v131[2];
  StringID v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  _BYTE v137[22];
  char v138;
  uint64_t v139;

  v9 = a9;
  v139 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a8 + 16))
  {
    v10 = a8;
    v12 = 0;
    v13 = &selRef_newBufferWithBytes_length_options_;
    while (1)
    {
      v14 = *(id *)(*(_QWORD *)(v10 + 32) + 8 * v12);
      v15 = objc_msgSend(v14, v13[229]);
      v16 = objc_msgSend(v14, v13[229]);
      v17 = !v15 || v16 == (id)28;
      if (v17)
        break;
      if (objc_msgSend(v14, v13[229]) != (id)2)
      {
        if (objc_msgSend(v14, v13[229]) != (id)3)
          goto LABEL_88;
        if (objc_msgSend(v14, sel_arrayLength) == (id)1)
        {
          v21 = v14;
          v26 = (_anonymous_namespace_ *)objc_msgSend(objc_msgSend(v21, sel_name), sel_UTF8String);
          v123 = 0;
          v124 = (char *)&str_110;
          v27 = v123;
          v28 = v124;
          v29 = v123 & 0xFFFFFFFFFFFFFFFELL;
          v123 = 0;
          v124 = (char *)&str_110;
          *(_QWORD *)v129 = v29;
          *(_QWORD *)&v129[8] = &str_110;
          *(_QWORD *)&v132.var0 = v27;
          v132.var1 = v28;
          re::StringID::destroyString((re::StringID *)v129);
          re::StringID::destroyString((re::StringID *)&v123);
          LOWORD(v133) = (unsigned __int16)objc_msgSend(v21, sel_index);
          BYTE2(v133) = strncmp("dynamicSampler", (const char *)objc_msgSend(objc_msgSend(v21, sel_name), sel_UTF8String), 0xEuLL) == 0;
          re::DynamicArray<re::SamplerArgument>::add(a5, (uint64_t *)&v132);
          goto LABEL_19;
        }
        v112 = v10;
        v78 = v14;
        v79 = strcmp("dynamicSamplers", (const char *)objc_msgSend(objc_msgSend(v78, sel_name), sel_UTF8String)) == 0;
        v121 = 0;
        v122 = 0;
        __endptr = 0;
        v80 = (_anonymous_namespace_ *)objc_msgSend(v78, sel_arrayLength);
        if (objc_msgSend(v78, sel_arrayLength))
        {
          v48 = 0;
          v81 = 1;
          while (1)
          {
            v82 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"%s[%u]", (re::DynamicString *)&v123, objc_msgSend(objc_msgSend(v78, sel_name), sel_UTF8String), v81 - 1);
            v83 = (v124 & 1) != 0 ? v125 : (char *)&v124 + 1;
            v126 = 0;
            v127 = &str_110;
            v52 = v121;
            if (v121 <= v48)
              break;
            v84 = &v122->n128_u64[3 * v48];
            v85 = v126;
            v86 = (unint64_t)v127;
            v126 = 0;
            v127 = &str_110;
            v87 = (char *)v84[1];
            v88 = v85 & 0xFFFFFFFFFFFFFFFELL | *v84 & 1;
            v84[1] = v86;
            *(_QWORD *)&v132.var0 = v88;
            v132.var1 = v87;
            *v84 = v85;
            re::StringID::destroyString((re::StringID *)&v132);
            re::StringID::destroyString((re::StringID *)&v126);
            if (v123 && (v124 & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v123 + 40))();
            v89 = (unsigned __int16)objc_msgSend(v78, sel_index);
            v52 = v121;
            if (v121 <= v48)
              goto LABEL_120;
            v90 = (char *)v122 + 24 * v48;
            *((_WORD *)v90 + 8) = v89 + v48;
            v90[18] = v79;
            v48 = v81;
            v63 = (unint64_t)objc_msgSend(v78, sel_arrayLength) > v81++;
            if (!v63)
              goto LABEL_81;
          }
LABEL_119:
          v128 = 0;
          v135 = 0u;
          v136 = 0u;
          v133 = 0u;
          v134 = 0u;
          v132 = (StringID)0;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v129 = 136315906;
          *(_QWORD *)&v129[4] = "operator[]";
          *(_WORD *)&v129[12] = 1024;
          *(_DWORD *)&v129[14] = 468;
          *(_WORD *)&v129[18] = 2048;
          *(_QWORD *)&v129[20] = v48;
          *(_WORD *)&v129[28] = 2048;
          *(_QWORD *)&v129[30] = v52;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_120:
          v123 = 0;
          v135 = 0u;
          v136 = 0u;
          v133 = 0u;
          v134 = 0u;
          v132 = (StringID)0;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v129 = 136315906;
          *(_QWORD *)&v129[4] = "operator[]";
          *(_WORD *)&v129[12] = 1024;
          *(_DWORD *)&v129[14] = 468;
          *(_WORD *)&v129[18] = 2048;
          *(_QWORD *)&v129[20] = v48;
          *(_WORD *)&v129[28] = 2048;
          *(_QWORD *)&v129[30] = v52;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_81:
        if (v78)

        v10 = v112;
        if (v121)
        {
          v91 = (uint64_t *)v122;
          v92 = 24 * v121;
          do
          {
            re::DynamicArray<re::SamplerArgument>::add(a5, v91);
            v91 += 3;
            v92 -= 24;
          }
          while (v92);
        }
        re::FixedArray<re::AttributeArgument>::deinit(&__endptr);
LABEL_87:
        v9 = a9;
        goto LABEL_88;
      }
      if (objc_msgSend(v14, sel_arrayLength) == (id)1)
      {
        v21 = v14;
        v22 = (_anonymous_namespace_ *)objc_msgSend(objc_msgSend(v21, sel_name), sel_UTF8String);
        v123 = 0;
        v124 = (char *)&str_110;
        v23 = v123;
        v24 = v124;
        v25 = v123 & 0xFFFFFFFFFFFFFFFELL;
        v123 = 0;
        v124 = (char *)&str_110;
        *(_QWORD *)v129 = v25;
        *(_QWORD *)&v129[8] = &str_110;
        *(_QWORD *)&v132.var0 = v23;
        v132.var1 = v24;
        re::StringID::destroyString((re::StringID *)v129);
        re::StringID::destroyString((re::StringID *)&v123);
        LOWORD(v133) = (unsigned __int16)objc_msgSend(v21, sel_index);
        WORD1(v133) = (unsigned __int16)objc_msgSend(v21, sel_textureType);
        WORD2(v133) = (unsigned __int16)objc_msgSend(v21, sel_textureDataType);
        BYTE6(v133) = objc_msgSend(v21, sel_isDepthTexture);
        *((_QWORD *)&v133 + 1) = objc_msgSend(v21, sel_access);
        re::DynamicArray<re::TextureArgument>::add(a4, (__n128 *)&v132);
LABEL_19:
        re::StringID::destroyString((re::StringID *)&v132);
        if (v21)

        goto LABEL_87;
      }
      v46 = v14;
      v121 = 0;
      v122 = 0;
      __endptr = 0;
      v47 = (_anonymous_namespace_ *)objc_msgSend(v46, sel_arrayLength);
      if (objc_msgSend(v46, sel_arrayLength))
      {
        v48 = 0;
        v49 = 1;
        while (1)
        {
          v50 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"%s[%u]", (re::DynamicString *)&v123, objc_msgSend(objc_msgSend(v46, sel_name), sel_UTF8String), v49 - 1);
          v51 = (v124 & 1) != 0 ? v125 : (char *)&v124 + 1;
          v126 = 0;
          v127 = &str_110;
          v52 = v121;
          if (v121 <= v48)
            break;
          v53 = &v122[2 * v48];
          v54 = v126;
          v55 = (unint64_t)v127;
          v126 = 0;
          v127 = &str_110;
          v56 = (char *)v53->n128_u64[1];
          v57 = v54 & 0xFFFFFFFFFFFFFFFELL | v53->n128_u64[0] & 1;
          v53->n128_u64[1] = v55;
          *(_QWORD *)&v132.var0 = v57;
          v132.var1 = v56;
          v53->n128_u64[0] = v54;
          re::StringID::destroyString((re::StringID *)&v132);
          re::StringID::destroyString((re::StringID *)&v126);
          if (v123 && (v124 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v123 + 40))();
          v58 = (unsigned __int16)objc_msgSend(v46, sel_index);
          v52 = v121;
          if (v121 <= v48)
            goto LABEL_114;
          v122[2 * v48 + 1].n128_u16[0] = v58 + v48;
          v59 = (unsigned __int16)objc_msgSend(v46, sel_textureType);
          v52 = v121;
          if (v121 <= v48)
            goto LABEL_115;
          v122[2 * v48 + 1].n128_u16[1] = v59;
          v60 = (unsigned __int16)objc_msgSend(v46, sel_textureDataType);
          v52 = v121;
          if (v121 <= v48)
            goto LABEL_116;
          v122[2 * v48 + 1].n128_u16[2] = v60;
          v61 = objc_msgSend(v46, sel_isDepthTexture);
          v52 = v121;
          if (v121 <= v48)
            goto LABEL_117;
          v122[2 * v48 + 1].n128_u8[6] = v61;
          v62 = objc_msgSend(v46, sel_access);
          v52 = v121;
          if (v121 <= v48)
            goto LABEL_118;
          v122[2 * v48 + 1].n128_u64[1] = (unint64_t)v62;
          v48 = v49;
          v63 = (unint64_t)objc_msgSend(v46, sel_arrayLength) > v49++;
          if (!v63)
            goto LABEL_54;
        }
        v128 = 0;
        v135 = 0u;
        v136 = 0u;
        v133 = 0u;
        v134 = 0u;
        v132 = (StringID)0;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v129 = 136315906;
        *(_QWORD *)&v129[4] = "operator[]";
        *(_WORD *)&v129[12] = 1024;
        *(_DWORD *)&v129[14] = 468;
        *(_WORD *)&v129[18] = 2048;
        *(_QWORD *)&v129[20] = v48;
        *(_WORD *)&v129[28] = 2048;
        *(_QWORD *)&v129[30] = v52;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_114:
        v123 = 0;
        v135 = 0u;
        v136 = 0u;
        v133 = 0u;
        v134 = 0u;
        v132 = (StringID)0;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v129 = 136315906;
        *(_QWORD *)&v129[4] = "operator[]";
        *(_WORD *)&v129[12] = 1024;
        *(_DWORD *)&v129[14] = 468;
        *(_WORD *)&v129[18] = 2048;
        *(_QWORD *)&v129[20] = v48;
        *(_WORD *)&v129[28] = 2048;
        *(_QWORD *)&v129[30] = v52;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_115:
        v123 = 0;
        v135 = 0u;
        v136 = 0u;
        v133 = 0u;
        v134 = 0u;
        v132 = (StringID)0;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v129 = 136315906;
        *(_QWORD *)&v129[4] = "operator[]";
        *(_WORD *)&v129[12] = 1024;
        *(_DWORD *)&v129[14] = 468;
        *(_WORD *)&v129[18] = 2048;
        *(_QWORD *)&v129[20] = v48;
        *(_WORD *)&v129[28] = 2048;
        *(_QWORD *)&v129[30] = v52;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_116:
        v123 = 0;
        v135 = 0u;
        v136 = 0u;
        v133 = 0u;
        v134 = 0u;
        v132 = (StringID)0;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v129 = 136315906;
        *(_QWORD *)&v129[4] = "operator[]";
        *(_WORD *)&v129[12] = 1024;
        *(_DWORD *)&v129[14] = 468;
        *(_WORD *)&v129[18] = 2048;
        *(_QWORD *)&v129[20] = v48;
        *(_WORD *)&v129[28] = 2048;
        *(_QWORD *)&v129[30] = v52;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_117:
        v123 = 0;
        v135 = 0u;
        v136 = 0u;
        v133 = 0u;
        v134 = 0u;
        v132 = (StringID)0;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v129 = 136315906;
        *(_QWORD *)&v129[4] = "operator[]";
        *(_WORD *)&v129[12] = 1024;
        *(_DWORD *)&v129[14] = 468;
        *(_WORD *)&v129[18] = 2048;
        *(_QWORD *)&v129[20] = v48;
        *(_WORD *)&v129[28] = 2048;
        *(_QWORD *)&v129[30] = v52;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_118:
        v123 = 0;
        v135 = 0u;
        v136 = 0u;
        v133 = 0u;
        v134 = 0u;
        v132 = (StringID)0;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v129 = 136315906;
        *(_QWORD *)&v129[4] = "operator[]";
        *(_WORD *)&v129[12] = 1024;
        *(_DWORD *)&v129[14] = 468;
        *(_WORD *)&v129[18] = 2048;
        *(_QWORD *)&v129[20] = v48;
        *(_WORD *)&v129[28] = 2048;
        *(_QWORD *)&v129[30] = v52;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_119;
      }
LABEL_54:
      if (v46)

      v9 = a9;
      if (v121)
      {
        v64 = v122;
        v65 = 32 * v121;
        do
        {
          re::DynamicArray<re::TextureArgument>::add(a4, v64);
          v64 += 2;
          v65 -= 32;
        }
        while (v65);
      }
      re::FixedArray<re::TextureArgument>::deinit(&__endptr);
LABEL_88:
      *(_BYTE *)v9 = 0;
      v93 = 1;
      if (v14)
        goto LABEL_89;
LABEL_90:
      if ((v93 & 1) == 0)
        return;
      ++v12;
      v13 = &selRef_newBufferWithBytes_length_options_;
      if (*(_QWORD *)(v10 + 16) <= v12)
        goto LABEL_111;
    }
    v18 = v16;
    if (a7 && objc_msgSend(v14, sel_index) - 29 <= 1)
      goto LABEL_88;
    if (v15)
    {
      v19 = objc_msgSend(v14, sel_dataTypeDescription);
      if (!v19)
      {
LABEL_27:
        if ((objc_msgSend(v14, sel_isVertexDescriptorBuffer) & 1) != 0)
          goto LABEL_88;
        if (a6)
        {
          v41 = (const char *)objc_msgSend(objc_msgSend(v14, sel_name), sel_UTF8String);
          v42 = strlen(v41);
          if (v42 >= 0x15)
          {
            v43 = *(_QWORD *)v41 == 0x4157524F465F4552 && *((_QWORD *)v41 + 1) == 0x4655425F44454452;
            if (v43 && *((_DWORD *)v41 + 4) == 1599227206)
            {
              v94 = v42;
              __endptr = 0;
              v95 = (_anonymous_namespace_ *)strtoull(v41 + 20, &__endptr, 10);
              if (__endptr + 1 >= &v41[v94])
              {
                re::DynamicString::format((re::DynamicString *)"Forwarded buffer argument is malformed: %s. No valid shader function name found.", (re::DynamicString *)&v132, v41);
                re::makeMaterialBuilderErr((__CFString *)0x28, (uint64_t)&v132, v129);
                *(_BYTE *)v9 = 1;
                v109 = *(_QWORD *)v129;
                *(_QWORD *)v129 = 0;
                *(_QWORD *)(v9 + 8) = v109;
                if (*(_QWORD *)&v132.var0 && ((uint64_t)v132.var1 & 1) != 0)
                  (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)&v132.var0 + 40))(*(_QWORD *)&v132.var0, v133);
                v93 = 0;
                if (!v14)
                  goto LABEL_90;
LABEL_89:

                goto LABEL_90;
              }
              v96 = v95;
              v123 = 0;
              v124 = (char *)&str_110;
              v97 = __endptr + 1;
              v98 = v123;
              v99 = v124;
              v100 = v123 & 0xFFFFFFFFFFFFFFFELL;
              v123 = 0;
              v124 = (char *)&str_110;
              *(_QWORD *)v129 = v100;
              *(_QWORD *)&v129[8] = &str_110;
              *(_QWORD *)&v132.var0 = v98;
              v132.var1 = v99;
              re::StringID::destroyString((re::StringID *)v129);
              re::StringID::destroyString((re::StringID *)&v123);
              *(_QWORD *)&v133 = v96;
              v101 = (_anonymous_namespace_ *)objc_msgSend(v14, sel_index);
              WORD4(v133) = (_WORD)v101;
              v102 = a6;
              v103 = *(_QWORD *)(a6 + 8);
              v104 = *(_QWORD *)(a6 + 16);
              if (v104 >= v103)
              {
                v105 = v104 + 1;
                if (v103 < v104 + 1)
                {
                  if (*(_QWORD *)a6)
                  {
                    v106 = 2 * v103;
                    v17 = v103 == 0;
                    v107 = 8;
                    if (!v17)
                      v107 = v106;
                    if (v107 <= v105)
                      v108 = v105;
                    else
                      v108 = v107;
                    re::DynamicArray<re::ForwardedBufferArgument>::setCapacity((_QWORD *)a6, v108);
                    v102 = a6;
                  }
                  else
                  {
                    re::DynamicArray<re::ForwardedBufferArgument>::setCapacity((_QWORD *)a6, v105);
                    v102 = a6;
                    ++*(_DWORD *)(a6 + 24);
                  }
                }
                v104 = *(_QWORD *)(v102 + 16);
              }
              v110 = v102;
              v111 = re::StringID::StringID((re::StringID *)(*(_QWORD *)(v102 + 32) + 32 * v104), &v132);
              *((_QWORD *)v111 + 2) = v133;
              *((_WORD *)v111 + 12) = WORD4(v133);
              ++*(_QWORD *)(v110 + 16);
              ++*(_DWORD *)(v110 + 24);
              goto LABEL_69;
            }
          }
        }
        v45 = v14;
        *(_QWORD *)v129 = v45;
        re::makeBufferArgument((uint64_t)&v132, (id *)v129);
        re::DynamicArray<re::BufferArgument>::add(a1, (uint64_t *)&v132);
        re::StringID::destroyString((re::StringID *)&v132);
        if (v45)

        goto LABEL_88;
      }
      v20 = objc_msgSend(v19, sel_elementStructType);
    }
    else
    {
      v20 = objc_msgSend(v14, sel_bufferStructType);
    }
    if (v20)
    {
      *(_QWORD *)&v132.var0 = 0;
      v132.var1 = (char *)&str_110;
      LOWORD(v133) = 0;
      *((_QWORD *)&v133 + 1) = 0;
      LODWORD(v134) = 1;
      *((_QWORD *)&v134 + 1) = 0;
      *(_QWORD *)&v135 = &str_110;
      DWORD2(v135) = 0;
      WORD6(v135) = 0;
      *(_DWORD *)&v137[16] = 0;
      *(_WORD *)&v137[20] = 256;
      *(_QWORD *)v137 = 0;
      v136 = 0uLL;
      *(_QWORD *)&v137[5] = 0;
      v138 = 0;
      v30 = (_anonymous_namespace_ *)objc_msgSend(objc_msgSend(v14, sel_name), sel_UTF8String);
      v123 = 0;
      v124 = (char *)&str_110;
      v31 = v123;
      v32 = v124;
      v123 = 0;
      v124 = (char *)&str_110;
      var0 = (char)v132.var0;
      var1 = v132.var1;
      *(_QWORD *)&v132.var0 = v31;
      v132.var1 = v32;
      *(_QWORD *)v129 = v31 & 0xFFFFFFFFFFFFFFFELL | var0 & 1;
      *(_QWORD *)&v129[8] = var1;
      re::StringID::destroyString((re::StringID *)v129);
      re::StringID::destroyString((re::StringID *)&v123);
      v35 = v12;
      if (v18 != (id)28)
        v35 = (unsigned __int16)objc_msgSend(v14, sel_index);
      LOWORD(v133) = v35;
      v36 = (char *)v14;
      if (v15)
      {
        __endptr = v36;
        re::makeMetalTypeInfoForPointer((id *)&__endptr, (uint64_t)v129);
        *((_QWORD *)&v133 + 1) = *(_QWORD *)v129;
        LODWORD(v134) = *(_DWORD *)&v129[8];
        v37 = *(_QWORD *)&v129[16];
        v38 = *(_QWORD *)&v129[24];
        *(_QWORD *)&v129[16] = 0;
        *(_QWORD *)&v129[24] = &str_110;
        v39 = BYTE8(v134);
        v40 = (char *)v135;
        *((_QWORD *)&v134 + 1) = v37;
        *(_QWORD *)&v135 = v38;
        v123 = v37 & 0xFFFFFFFFFFFFFFFELL | v39 & 1;
        v124 = v40;
      }
      else
      {
        re::makeMetalTypeInfo((_anonymous_namespace_ *)objc_msgSend(v36, sel_bufferStructType), (const char *)objc_msgSend(objc_msgSend(v36, sel_name), sel_UTF8String), 0, objc_msgSend(v36, sel_bufferDataSize), (unsigned int *)v129);
        *(_DWORD *)&v129[8] = objc_msgSend(v36, sel_bufferAlignment);
        *((_QWORD *)&v133 + 1) = *(_QWORD *)v129;
        LODWORD(v134) = *(_DWORD *)&v129[8];
        v67 = *(_QWORD *)&v129[16];
        v66 = *(_QWORD *)&v129[24];
        *(_QWORD *)&v129[16] = 0;
        *(_QWORD *)&v129[24] = &str_110;
        v68 = BYTE8(v134);
        v69 = (char *)v135;
        *((_QWORD *)&v134 + 1) = v67;
        *(_QWORD *)&v135 = v66;
        v123 = v67 & 0xFFFFFFFFFFFFFFFELL | v68 & 1;
        v124 = v69;
      }
      re::StringID::destroyString((re::StringID *)&v123);
      DWORD2(v135) = *(_DWORD *)&v129[32];
      WORD6(v135) = *(_WORD *)&v129[36];
      re::FixedArray<re::MetalTypeInfo>::operator=((uint64_t *)&v136, v130);
      *(_QWORD *)&v137[8] = v131[0];
      *(_QWORD *)&v137[14] = *(_QWORD *)((char *)v131 + 6);
      re::FixedArray<re::MetalTypeInfo>::deinit(v130);
      re::StringID::destroyString((re::StringID *)&v129[16]);
      if (v36)

      v9 = a9;
      if (v137[20])
        v70 = a3;
      else
        v70 = a2;
      v71 = *(_QWORD *)(v70 + 16);
      if (v71 >= *(_QWORD *)(v70 + 8))
      {
        re::DynamicArray<re::TypedArgument>::growCapacity((_QWORD *)v70, v71 + 1);
        v71 = *(_QWORD *)(v70 + 16);
      }
      v72 = *(_QWORD *)(v70 + 32) + 112 * v71;
      v73 = (char)v132.var0;
      *(_QWORD *)v72 = *(_QWORD *)v72 & 0xFFFFFFFFFFFFFFFELL | *(_BYTE *)&v132.var0 & 1;
      *(_QWORD *)v72 = *(_QWORD *)&v132.var0 & 0xFFFFFFFFFFFFFFFELL | v73 & 1;
      *(_QWORD *)(v72 + 8) = v132.var1;
      *(_QWORD *)&v132.var0 = 0;
      v132.var1 = (char *)&str_110;
      *(_WORD *)(v72 + 16) = v133;
      v74 = v134;
      *(_QWORD *)(v72 + 24) = *((_QWORD *)&v133 + 1);
      *(_DWORD *)(v72 + 32) = v74;
      LOBYTE(v74) = BYTE8(v134);
      *(_QWORD *)(v72 + 40) = *(_QWORD *)(v72 + 40) & 0xFFFFFFFFFFFFFFFELL | BYTE8(v134) & 1;
      *(_QWORD *)(v72 + 40) = *((_QWORD *)&v134 + 1) & 0xFFFFFFFFFFFFFFFELL | v74 & 1;
      *(_QWORD *)(v72 + 48) = v135;
      *((_QWORD *)&v134 + 1) = 0;
      *(_QWORD *)&v135 = &str_110;
      v75 = DWORD2(v135);
      *(_WORD *)(v72 + 60) = WORD6(v135);
      *(_DWORD *)(v72 + 56) = v75;
      *(_QWORD *)(v72 + 72) = 0;
      *(_QWORD *)(v72 + 80) = 0;
      *(_QWORD *)(v72 + 64) = 0;
      *(_QWORD *)(v72 + 64) = v136;
      *(_QWORD *)&v136 = 0;
      *(_QWORD *)(v72 + 72) = *((_QWORD *)&v136 + 1);
      *((_QWORD *)&v136 + 1) = 0;
      v76 = *(_QWORD *)(v72 + 80);
      *(_QWORD *)(v72 + 80) = *(_QWORD *)v137;
      *(_QWORD *)v137 = v76;
      v77 = *(_QWORD *)&v137[8];
      *(_QWORD *)(v72 + 94) = *(_QWORD *)&v137[14];
      *(_QWORD *)(v72 + 88) = v77;
      *(_BYTE *)(v72 + 104) = v138;
      ++*(_QWORD *)(v70 + 16);
      ++*(_DWORD *)(v70 + 24);
      re::FixedArray<re::MetalTypeInfo>::deinit(&v136);
      re::StringID::destroyString((re::StringID *)((char *)&v134 + 8));
LABEL_69:
      re::StringID::destroyString((re::StringID *)&v132);
      goto LABEL_88;
    }
    goto LABEL_27;
  }
LABEL_111:
  *(_BYTE *)v9 = 0;
}

uint64_t re::createArgumentEncoderForBindlessArgument@<X0>(re *this@<X0>, id *a2@<X1>, const re::mtl::Device *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  void *v7;
  _BYTE v11[40];
  id v12;
  uint64_t v13[3];
  int v14;
  uint64_t v15;

  v15 = 0;
  memset(v13, 0, sizeof(v13));
  v14 = 0;
  v4 = *((_QWORD *)this + 9);
  if (v4)
  {
    v5 = 80 * v4;
    v6 = (unsigned __int16 *)(*((_QWORD *)this + 10) + 36);
    v7 = (void *)MEMORY[0x24BDDD4C0];
    do
    {
      v12 = objc_msgSend(objc_msgSend(v7, sel_alloc, a3), sel_init);
      objc_msgSend(v12, sel_setIndex_, *((unsigned int *)v6 + 9));
      objc_msgSend(v12, sel_setDataType_, *v6);
      objc_msgSend(v12, sel_setArrayLength_, *((unsigned int *)v6 - 1));
      objc_msgSend(v12, sel_setAccess_, 0);
      if (*v6 == 58)
        objc_msgSend(v12, sel_setTextureType_, *((int *)v6 + 7));
      re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)v13, &v12);
      if (v12)

      v6 += 40;
      v5 -= 80;
    }
    while (v5);
  }
  re::DynamicArray<NS::SharedPtr<MTL::ArgumentDescriptor>>::DynamicArray((uint64_t)v11, v13);
  re::mtl::Device::makeArgumentEncoder(a2, (uint64_t)v11, &v12);
  *(_BYTE *)a4 = 1;
  *(_QWORD *)(a4 + 8) = v12;
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v11);
  return re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v13);
}

_QWORD *re::validateArgumentsCount@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, int a5@<W5>, uint64_t a6@<X8>)
{
  unsigned __int8 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _anonymous_namespace_ *v19;
  uint64_t *v20;
  __int128 v21;
  uint64_t v22;

  if ((v7 & 1) == 0)
  {
    v18 = a2;
    v19 = a1;
    v12 = a4;
    v13 = a3;
    a3 = v13;
    a4 = v12;
    v16 = v15;
    a2 = v18;
    a1 = v19;
    if (v16)
    {
      v17 = 31;
      if (a5)
        v17 = 96;
      re::validateArgumentsCount(re::DynamicArray<re::BufferArgument> const&,re::DynamicArray<re::TypedArgument> const&,re::DynamicArray<re::TypedArgument> const&,re::DynamicArray<re::TextureArgument> const&,re::DynamicArray<re::SamplerArgument> const&,BOOL)::textureLimit = v17;
      a2 = v18;
      a1 = v19;
      a3 = v13;
      a4 = v12;
    }
  }
  v8 = *((_QWORD *)a1 + 2) + *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(a4 + 16);
  v21 = 0uLL;
  v22 = 0;
  result = re::DynamicString::setCapacity(&v20, 0);
  if (v8 >= 0x20)
    result = (_QWORD *)re::DynamicString::appendf((re::DynamicString *)&v20, "Constant buffer count [%zu] exceeds limit [%zu]. ", v8, 0x1FuLL);
  if (v9 > re::validateArgumentsCount(re::DynamicArray<re::BufferArgument> const&,re::DynamicArray<re::TypedArgument> const&,re::DynamicArray<re::TypedArgument> const&,re::DynamicArray<re::TextureArgument> const&,re::DynamicArray<re::SamplerArgument> const&,BOOL)::textureLimit)
  {
    result = (_QWORD *)re::DynamicString::appendf((re::DynamicString *)&v20, "Texture count [%zu] exceeds limit [%zu]. ", v9, re::validateArgumentsCount(re::DynamicArray<re::BufferArgument> const&,re::DynamicArray<re::TypedArgument> const&,re::DynamicArray<re::TypedArgument> const&,re::DynamicArray<re::TextureArgument> const&,re::DynamicArray<re::SamplerArgument> const&,BOOL)::textureLimit);
    if (v10 < 0x11)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (v10 > 0x10)
  {
LABEL_8:
    result = (_QWORD *)re::DynamicString::appendf((re::DynamicString *)&v20, "Sampler count [%zu] exceeds limit [%zu]. ", v10, 0x10uLL);
LABEL_9:
    *(_BYTE *)a6 = 1;
    *(_QWORD *)(a6 + 8) = v20;
    *(_QWORD *)(a6 + 32) = v22;
    *(_OWORD *)(a6 + 16) = v21;
    return result;
  }
  if (v8 >= 0x20)
    goto LABEL_9;
  *(_BYTE *)a6 = 0;
  result = v20;
  if (v20)
  {
    if ((v21 & 1) != 0)
      return (_QWORD *)(*(uint64_t (**)(void))(*v20 + 40))();
  }
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::BufferArgument>::add(_anonymous_namespace_ *result, uint64_t *a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)result + 2);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::BufferArgument>::setCapacity(result, v10);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::BufferArgument>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v5 = *((_QWORD *)v3 + 2);
  }
  v11 = (unint64_t *)(*((_QWORD *)v3 + 4) + 24 * v5);
  v12 = *a2;
  *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *v11 = *a2 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  v11[1] = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  v11[2] = a2[2];
  ++*((_QWORD *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

void re::makeBufferArgument(uint64_t a1, id *a2)
{
  _anonymous_namespace_ *v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD v10[2];

  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 16) = (unsigned __int16)objc_msgSend(*a2, sel_index);
  *(_WORD *)(a1 + 18) = (unsigned __int16)objc_msgSend(*a2, sel_bufferAlignment);
  *(_WORD *)(a1 + 20) = (unsigned __int16)objc_msgSend(*a2, sel_bufferDataSize);
  v4 = (_anonymous_namespace_ *)objc_msgSend(objc_msgSend(*a2, sel_name), sel_UTF8String);
  v8 = 0;
  v9 = &str_110;
  v5 = v8;
  v6 = v9;
  v7 = v8 & 0xFFFFFFFFFFFFFFFELL;
  v8 = 0;
  v9 = &str_110;
  v10[0] = v7;
  v10[1] = &str_110;
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  re::StringID::destroyString((re::StringID *)v10);
  re::StringID::destroyString((re::StringID *)&v8);
}

__n128 re::DynamicArray<re::TextureArgument>::add(uint64_t a1, __n128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  __n128 *v11;
  unint64_t v12;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::RigPose>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::RigPose>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  v11 = (__n128 *)(*(_QWORD *)(a1 + 32) + 32 * v5);
  v12 = a2->n128_u64[0];
  v11->n128_u64[0] = v11->n128_u64[0] & 0xFFFFFFFFFFFFFFFELL | a2->n128_u64[0] & 1;
  v11->n128_u64[0] = a2->n128_u64[0] & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  v11->n128_u64[1] = a2->n128_u64[1];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = (unint64_t)&str_110;
  result = a2[1];
  v11[1] = result;
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::SamplerArgument>::add(_anonymous_namespace_ *result, uint64_t *a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)result + 2);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::SamplerArgument>::setCapacity(result, v10);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::SamplerArgument>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v5 = *((_QWORD *)v3 + 2);
  }
  v11 = *((_QWORD *)v3 + 4) + 24 * v5;
  v12 = *a2;
  *(_QWORD *)v11 = *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(_QWORD *)v11 = *a2 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  *(_QWORD *)(v11 + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  LOWORD(v12) = *((_WORD *)a2 + 8);
  *(_BYTE *)(v11 + 18) = *((_BYTE *)a2 + 18);
  *(_WORD *)(v11 + 16) = v12;
  ++*((_QWORD *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::DynamicArray<re::ForwardedBufferArgument>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ForwardedBufferArgument>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 32 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[4 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *v8 = 0;
          v8[1] = (uint64_t)&str_110;
          v13 = v8[2];
          *((_WORD *)v11 + 12) = *((_WORD *)v8 + 12);
          v11[2] = v13;
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 4;
          v11 += 4;
        }
        while (v8 != v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::BufferArgument>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  re::StringID *v8;
  uint64_t v9;
  re::StringID *v10;
  unint64_t *v11;
  uint64_t v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::BufferArgument>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          v2 = 24 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (re::StringID *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (re::StringID *)((char *)v8 + 24 * v9);
        v11 = v7;
        do
        {
          v12 = *(_QWORD *)v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)v8 & 1;
          *v11 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = *((_QWORD *)v8 + 1);
          *(_QWORD *)v8 = 0;
          *((_QWORD *)v8 + 1) = &str_110;
          v11[2] = *((_QWORD *)v8 + 2);
          re::StringID::destroyString(v8);
          v8 = (re::StringID *)((char *)v8 + 24);
          v11 += 3;
        }
        while (v8 != v10);
        v8 = (re::StringID *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, re::StringID *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::SamplerArgument>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  uint64_t v12;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::SamplerArgument>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          v2 = 24 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[3 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *v8 = 0;
          v8[1] = (uint64_t)&str_110;
          LOWORD(v12) = *((_WORD *)v8 + 8);
          *((_BYTE *)v11 + 18) = *((_BYTE *)v8 + 18);
          *((_WORD *)v11 + 8) = v12;
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 3;
          v11 += 3;
        }
        while (v8 != v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::DynamicArray<NS::SharedPtr<MTL::ArgumentDescriptor>>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<NS::SharedPtr<MTL::ArgumentDescriptor>>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<NS::SharedPtr<MTL::ArgumentDescriptor>>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void **v13;
  uint64_t v14;
  void **v15;
  void **v16;
  uint64_t v17;
  void *v18;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = a1[2];
  if (v4 >= v5)
  {
    re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    v11 = *(void ***)(a2 + 32);
    v12 = a1[2];
    v13 = (void **)a1[4];
    if (v12)
    {
      v14 = 8 * v12;
      do
      {
        NS::SharedPtr<MTL::Texture>::operator=(v13++, v11++);
        v14 -= 8;
      }
      while (v14);
      v13 = (void **)a1[4];
      v12 = a1[2];
      v11 = *(void ***)(a2 + 32);
    }
    if (v12 != v4)
    {
      v15 = &v11[v12];
      v16 = &v13[v12];
      v17 = 8 * v4 - 8 * v12;
      do
      {
        v18 = *v15++;
        *v16++ = v18;
        v17 -= 8;
      }
      while (v17);
    }
  }
  else
  {
    v6 = (void **)a1[4];
    if (v4)
    {
      v7 = *(void ***)(a2 + 32);
      v8 = 8 * v4;
      do
      {
        NS::SharedPtr<MTL::Texture>::operator=(v6++, v7++);
        v8 -= 8;
      }
      while (v8);
      v6 = (void **)a1[4];
      v5 = a1[2];
    }
    if (v4 != v5)
    {
      v9 = &v6[v4];
      v10 = 8 * v5 - 8 * v4;
      do
      {
        if (*v9)
        {

          *v9 = 0;
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
  a1[2] = v4;
}

id re::makeView1DTo1DArray@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  id v5;
  id result;

  v4 = objc_msgSend(*a1, sel_arrayLength);
  v5 = *a1;
  if ((unint64_t)v4 < 2)
    result = objc_msgSend(*a1, sel_newTextureViewWithPixelFormat_textureType_levels_slices_, objc_msgSend(*a1, sel_pixelFormat), 1, 0, objc_msgSend(v5, sel_mipmapLevelCount), 0, 1);
  else
    result = v5;
  *a2 = result;
  return result;
}

id re::makeView2DTo2DArray@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  id v5;
  id result;

  v4 = objc_msgSend(*a1, sel_arrayLength);
  v5 = *a1;
  if ((unint64_t)v4 < 2)
    result = objc_msgSend(*a1, sel_newTextureViewWithPixelFormat_textureType_levels_slices_, objc_msgSend(*a1, sel_pixelFormat), 3, 0, objc_msgSend(v5, sel_mipmapLevelCount), 0, 1);
  else
    result = v5;
  *a2 = result;
  return result;
}

id re::makeView2DArrayTo2D@<X0>(id *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v6;
  id v7;
  id result;

  v6 = objc_msgSend(*a1, sel_arrayLength);
  v7 = *a1;
  if (v6 == (id)1)
    result = v7;
  else
    result = objc_msgSend(*a1, sel_newTextureViewWithPixelFormat_textureType_levels_slices_, objc_msgSend(*a1, sel_pixelFormat), 2, 0, objc_msgSend(v7, sel_mipmapLevelCount), a2, 1);
  *a3 = result;
  return result;
}

id re::makeView2DMultisampleTo2DMultisampleArray@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  id v5;
  id result;

  v4 = objc_msgSend(*a1, sel_arrayLength);
  v5 = *a1;
  if ((unint64_t)v4 < 2)
    result = objc_msgSend(*a1, sel_newTextureViewWithPixelFormat_textureType_levels_slices_, objc_msgSend(*a1, sel_pixelFormat), 8, 0, objc_msgSend(v5, sel_mipmapLevelCount), 0, 1);
  else
    result = v5;
  *a2 = result;
  return result;
}

uint64_t *re::RenderGraphProcessor::updateTextureLifetimes(uint64_t *this, re::RenderGraphCompiled *a2)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;

  if (this[49])
  {
    v2 = this;
    v3 = 0;
    while (1)
    {
      if (v2[59] <= v3)
        goto LABEL_17;
      v4 = v2[61] + 40 * v3;
      v5 = *(_QWORD *)(v4 + 16);
      if (v5)
        break;
LABEL_8:
      if (v2[64] <= v3)
        goto LABEL_18;
      v9 = v2[66] + 40 * v3;
      v10 = *(_QWORD *)(v9 + 16);
      if (v10)
      {
        v11 = *(unsigned int **)(v9 + 32);
        v12 = 4 * v10;
        while (v2[49] > v3)
        {
          v13 = *v11++;
          this = (uint64_t *)re::RenderGraphCompiled::setLastRead(v2[37], v13, *(_DWORD *)(v2[51] + 4 * v3));
          v12 -= 4;
          if (!v12)
            goto LABEL_13;
        }
LABEL_16:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_17:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_18:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
LABEL_13:
      if (++v3 >= v2[49])
        return this;
    }
    v6 = *(unsigned int **)(v4 + 32);
    v7 = 4 * v5;
    while (v2[49] > v3)
    {
      v8 = *v6++;
      this = (uint64_t *)re::RenderGraphCompiled::setFirstWritten(v2[37], v8, *(_DWORD *)(v2[51] + 4 * v3));
      v7 -= 4;
      if (!v7)
        goto LABEL_8;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_16;
  }
  return this;
}

uint64_t re::RenderGraphCompiled::setFirstWritten(uint64_t this, unsigned int a2, int a3)
{
  if (*(_QWORD *)(this + 16) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_DWORD *)(*(_QWORD *)(this + 32) + 48 * a2 + 32) = a3;
  return this;
}

uint64_t re::RenderGraphCompiled::setLastRead(uint64_t this, unsigned int a2, int a3)
{
  if (*(_QWORD *)(this + 16) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  *(_DWORD *)(*(_QWORD *)(this + 32) + 48 * a2 + 36) = a3;
  return this;
}

_anonymous_namespace_ *re::RenderGraphProcessorManager::addDefaultProcessors(re::RenderGraphProcessorManager *this)
{
  uint64_t *v2;
  re *v3;
  uint64_t v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  _anonymous_namespace_ *v8;
  uint64_t *v9;
  re::RenderGraphNodeCombineProcessor *v10;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t v14;
  unsigned __int8 v15;
  int v16;
  uint64_t *v17;
  re::RenderGraphNodeCombineProcessor *v18;
  uint64_t *v19;
  re::RenderGraphNodeCombineProcessor *v20;
  const char *v21;
  _anonymous_namespace_ *v22;
  uint64_t *v23;
  re *v24;
  uint64_t v25;
  _anonymous_namespace_ *v26;
  uint64_t *v27;
  re *v28;
  uint64_t v29;
  re *v30;
  uint64_t *v31;
  re *v32;
  uint64_t v33;
  re *v34;
  uint64_t *v35;
  re::RenderGraphNodeCombineProcessor *v36;
  const char *v38;
  char v39;
  re::RenderGraphNodeCombineProcessor *v40;
  _QWORD v41[3];
  uint64_t v42;
  re *v43;
  _QWORD v44[3];
  uint64_t v45;
  re *v46;
  _QWORD v47[3];
  uint64_t v48;
  _anonymous_namespace_ *v49;
  _QWORD v50[3];
  uint64_t v51;
  re *v52;
  _QWORD v53[3];
  uint64_t v54;
  re *v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v2 = re::globalAllocators(this);
  v3 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 48, 8);
  v4 = re::globalAllocators(v3)[2];
  v53[0] = &off_24ED756D0;
  v54 = v4;
  v55 = (re *)v53;
  *(_QWORD *)v3 = &off_24ED75738;
  *((_QWORD *)v3 + 4) = v4;
  *((_QWORD *)v3 + 5) = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v3 + 8, (uint64_t)v53);
  v40 = v3;
  re::DynamicArray<re::RigDataValue *>::add(this, &v40);
  v5 = v55;
  if (v55)
  {
    v5 = (re *)(**(uint64_t (***)(re *))v55)(v55);
    if (v55 != (re *)v53)
      v5 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v54 + 40))(v54);
    v55 = 0;
  }
  if (*((_BYTE *)this + 121))
  {
    v6 = re::globalAllocators(v5);
    v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 176, 8);
    *(_OWORD *)(v7 + 40) = xmmword_24ED75788;
    *(_OWORD *)(v7 + 56) = *(_OWORD *)&off_24ED75798;
    *(_OWORD *)(v7 + 72) = xmmword_24ED757A8;
    *(_OWORD *)(v7 + 8) = xmmword_24ED75768;
    *(_OWORD *)(v7 + 120) = 0u;
    *(_OWORD *)(v7 + 136) = 0u;
    *(_OWORD *)(v7 + 152) = 0u;
    *(_QWORD *)v7 = &off_24ED768F8;
    *(_OWORD *)(v7 + 24) = *(_OWORD *)&off_24ED75778;
    *(_QWORD *)(v7 + 88) = "QueryVisibility";
    *(_QWORD *)(v7 + 96) = 0;
    *(_QWORD *)(v7 + 104) = 0;
    *(_QWORD *)(v7 + 112) = 0;
    *(_DWORD *)(v7 + 120) = 0;
    *(_QWORD *)(v7 + 168) = 0;
    *(_DWORD *)(v7 + 160) = 0;
    *(_OWORD *)(v7 + 128) = 0u;
    *(_OWORD *)(v7 + 144) = 0u;
    v40 = (re::RenderGraphNodeCombineProcessor *)v7;
    v8 = re::DynamicArray<re::RigDataValue *>::add(this, &v40);
    v9 = re::globalAllocators(v8);
    v10 = (re::RenderGraphNodeCombineProcessor *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9[2] + 32))(v9[2], 8, 8);
    *(_QWORD *)v10 = &off_24ED757D0;
    v40 = v10;
    v11 = re::DynamicArray<re::RigDataValue *>::add(this, &v40);
  }
  else
  {
    v12 = re::globalAllocators(v5);
    v13 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 48, 8);
    v14 = re::globalAllocators(v13)[2];
    v50[0] = &off_24ED75810;
    v51 = v14;
    v52 = (re *)v50;
    *(_QWORD *)v13 = &off_24ED75738;
    *((_QWORD *)v13 + 4) = v14;
    *((_QWORD *)v13 + 5) = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v13 + 8, (uint64_t)v50);
    v40 = v13;
    re::DynamicArray<re::RigDataValue *>::add(this, &v40);
    v11 = v52;
    if (v52)
    {
      v11 = (re *)(**(uint64_t (***)(re *))v52)(v52);
      if (v52 != (re *)v50)
        v11 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v51 + 40))(v51);
      v52 = 0;
    }
  }
  v15 = atomic_load((unsigned __int8 *)&qword_254118FB0);
  if ((v15 & 1) == 0)
  {
    v11 = (re *)__cxa_guard_acquire(&qword_254118FB0);
    if ((_DWORD)v11)
    {
      re::Defaults::BOOLValue((re::Defaults *)"disableNoClearOptimization", v38, (char *)&v40);
      _MergedGlobals_379 = 1;
      if ((_BYTE)v40)
        v39 = BYTE1(v40);
      else
        v39 = 1;
      byte_254118FA9 = v39;
      __cxa_guard_release(&qword_254118FB0);
    }
  }
  if ((_MergedGlobals_379 & 1) == 0)
  {
    if (!*((_BYTE *)this + 120))
      goto LABEL_17;
    goto LABEL_16;
  }
  v16 = byte_254118FA9 ^ 1;
  *((_BYTE *)this + 120) = byte_254118FA9 ^ 1;
  if (v16)
  {
LABEL_16:
    v17 = re::globalAllocators(v11);
    v18 = (re::RenderGraphNodeCombineProcessor *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17[2] + 32))(v17[2], 8, 8);
    *(_QWORD *)v18 = &off_24ED75C78;
    v40 = v18;
    v11 = re::DynamicArray<re::RigDataValue *>::add(this, &v40);
  }
LABEL_17:
  if (*((_BYTE *)this + 122))
  {
    v19 = re::globalAllocators(v11);
    v20 = (re::RenderGraphNodeCombineProcessor *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19[2] + 32))(v19[2], 88, 8);
    v40 = re::RenderGraphNodeCombineProcessor::RenderGraphNodeCombineProcessor(v20, v21);
    v22 = re::DynamicArray<re::RigDataValue *>::add(this, &v40);
  }
  else
  {
    v23 = re::globalAllocators(v11);
    v24 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23[2] + 32))(v23[2], 48, 8);
    v25 = re::globalAllocators(v24)[2];
    v47[0] = &off_24ED75868;
    v48 = v25;
    v49 = (_anonymous_namespace_ *)v47;
    *(_QWORD *)v24 = &off_24ED75738;
    *((_QWORD *)v24 + 4) = v25;
    *((_QWORD *)v24 + 5) = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v24 + 8, (uint64_t)v47);
    v40 = v24;
    re::DynamicArray<re::RigDataValue *>::add(this, &v40);
    v22 = v49;
    if (v49)
    {
      v22 = (_anonymous_namespace_ *)(**(uint64_t (***)(_anonymous_namespace_ *))v49)(v49);
      if (v49 != (_anonymous_namespace_ *)v47)
        v22 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 40))(v48);
      v49 = 0;
    }
  }
  v26 = (re::RenderGraphProcessorManager *)((char *)this + 80);
  v27 = re::globalAllocators(v22);
  v28 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v27[2] + 32))(v27[2], 48, 8);
  v29 = re::globalAllocators(v28)[2];
  v44[0] = &off_24ED758C0;
  v45 = v29;
  v46 = (re *)v44;
  *(_QWORD *)v28 = &off_24ED75738;
  *((_QWORD *)v28 + 4) = v29;
  *((_QWORD *)v28 + 5) = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v28 + 8, (uint64_t)v44);
  v40 = v28;
  re::DynamicArray<re::RigDataValue *>::add((re::RenderGraphProcessorManager *)((char *)this + 80), &v40);
  v30 = v46;
  if (v46)
  {
    v30 = (re *)(**(uint64_t (***)(re *))v46)(v46);
    if (v46 != (re *)v44)
      v30 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 40))(v45);
    v46 = 0;
  }
  v31 = re::globalAllocators(v30);
  v32 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v31[2] + 32))(v31[2], 48, 8);
  v33 = re::globalAllocators(v32)[2];
  v41[0] = &off_24ED75918;
  v41[1] = this;
  v42 = v33;
  v43 = (re *)v41;
  *(_QWORD *)v32 = &off_24ED75738;
  *((_QWORD *)v32 + 4) = v33;
  *((_QWORD *)v32 + 5) = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v32 + 8, (uint64_t)v41);
  v40 = v32;
  re::DynamicArray<re::RigDataValue *>::add(v26, &v40);
  v34 = v43;
  if (v43)
  {
    v34 = (re *)(**(uint64_t (***)(re *))v43)(v43);
    if (v43 != (re *)v41)
      v34 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
    v43 = 0;
  }
  v35 = re::globalAllocators(v34);
  v36 = (re::RenderGraphNodeCombineProcessor *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35[2] + 32))(v35[2], 8, 8);
  *(_QWORD *)v36 = &off_24ED75970;
  v40 = v36;
  return re::DynamicArray<re::RigDataValue *>::add(v26, &v40);
}

void re::RenderGraphProcessorManager::process(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[16];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v30, 5020, *(unsigned __int8 *)(a1 + 121));
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(uint64_t **)(a1 + 32);
    v8 = 8 * v6;
    do
    {
      v9 = *v7++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, a2);
      v8 -= 8;
    }
    while (v8);
  }
  v10 = a3[2];
  if (v10)
  {
    v11 = (uint64_t *)a3[4];
    v12 = 8 * v10;
    do
    {
      v13 = *v11++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, a2);
      v12 -= 8;
    }
    while (v12);
  }
  v14 = *(_QWORD *)(a1 + 56);
  if (v14)
  {
    v15 = *(uint64_t **)(a1 + 72);
    v16 = 8 * v14;
    do
    {
      v17 = *v15++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(v17, a2);
      v16 -= 8;
    }
    while (v16);
  }
  v18 = a3[7];
  if (v18)
  {
    v19 = (uint64_t *)a3[9];
    v20 = 8 * v18;
    do
    {
      v21 = *v19++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, a2);
      v20 -= 8;
    }
    while (v20);
  }
  v22 = *(_QWORD *)(a1 + 96);
  if (v22)
  {
    v23 = *(uint64_t **)(a1 + 112);
    v24 = 8 * v22;
    do
    {
      v25 = *v23++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, a2);
      v24 -= 8;
    }
    while (v24);
  }
  v26 = a3[12];
  if (v26)
  {
    v27 = (uint64_t *)a3[14];
    v28 = 8 * v26;
    do
    {
      v29 = *v27++;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 16))(v29, a2);
      v28 -= 8;
    }
    while (v28);
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v30);
}

void re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_0,void ()(re::RenderGraphCompiled &)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_0,void ()(re::RenderGraphCompiled &)>::operator()(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  _QWORD v24[3];
  int v25;
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v3 = a2[44];
  if (v3)
  {
    v5 = a2[46];
    v6 = v5 + 192 * v3;
    do
    {
      v7 = *(_QWORD *)(v5 + 56);
      if (v7)
      {
        v8 = v7 << 6;
        v9 = (_DWORD *)(*(_QWORD *)(v5 + 72) + 52);
        do
        {
          v10 = a2[37];
          v11 = *v9;
          v12 = *(_QWORD *)(v10 + 16);
          if (v12 <= v11)
          {
            v24[0] = 0;
            v37 = 0u;
            v35 = 0u;
            v36 = 0u;
            v33 = 0u;
            v34 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v25 = 136315906;
            v26 = "operator[]";
            v27 = 1024;
            v28 = 789;
            v29 = 2048;
            v30 = v11;
            v31 = 2048;
            v32 = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_19:
            v24[2] = 0;
            v37 = 0u;
            v35 = 0u;
            v36 = 0u;
            v33 = 0u;
            v34 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v25 = 136315906;
            v26 = "operator[]";
            v27 = 1024;
            v28 = 789;
            v29 = 2048;
            v30 = v12;
            v31 = 2048;
            v32 = v2;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v13 = *(_QWORD *)(v10 + 32);
          v14 = *(_DWORD *)(v13 + 48 * v11);
          if (v14 == 1)
          {
            v21 = v13 + 48 * v11;
            *(_QWORD *)&v33 = *(_QWORD *)(v21 + 8) >> 1;
            *((_QWORD *)&v33 + 1) = *(_QWORD *)(v21 + 24);
            v22 = (_DWORD *)re::RenderGraphCompiled::bufferDescription((uint64_t)a2, (uint64_t)&v33);
            if (*v22 == 4)
            {
              v23 = v22[7];
              if (v23 != -1)
                *v9 = v23;
            }
          }
          else if (!v14)
          {
            v15 = v13 + 48 * v11;
            v24[0] = *(_QWORD *)(v15 + 8) >> 1;
            v24[1] = *(_QWORD *)(v15 + 24);
            v16 = (_DWORD *)re::RenderGraphCompiled::targetDescription((uint64_t)a2, (uint64_t)v24);
            if (*v16 == 4)
            {
              v17 = v16;
              v12 = v16[18];
              if ((_DWORD)v12 != -1)
              {
                *v9 = v12;
                v18 = a2[37];
                v2 = *(_QWORD *)(v18 + 16);
                if (v2 <= v12)
                  goto LABEL_19;
                v19 = *(_QWORD *)(v18 + 32) + 48 * v12;
                *(_QWORD *)&v33 = *(_QWORD *)(v19 + 8) >> 1;
                *((_QWORD *)&v33 + 1) = *(_QWORD *)(v19 + 24);
                v20 = re::RenderGraphCompiled::targetDescription((uint64_t)a2, (uint64_t)&v33);
                *(_DWORD *)(v20 + 64) |= v17[16];
              }
            }
          }
          v9 += 16;
          v8 -= 64;
        }
        while (v8);
      }
      v5 += 192;
    }
    while (v5 != v6);
  }
}

_QWORD *re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_0,void ()(re::RenderGraphCompiled &)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED756D0;
  return result;
}

_QWORD *re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_0,void ()(re::RenderGraphCompiled &)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED756D0;
  return result;
}

uint64_t re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_0,void ()(re::RenderGraphCompiled &)>::size()
{
  return 16;
}

void re::RenderGraphInlineProcessor::~RenderGraphInlineProcessor(re::RenderGraphInlineProcessor *this)
{
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 8);
}

{
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::RenderGraphInlineProcessor::process(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
}

void re::FixLifetimeOfExternalsProcessor::~FixLifetimeOfExternalsProcessor(re::FixLifetimeOfExternalsProcessor *this)
{
  JUMPOUT(0x2276933B8);
}

re::FixLifetimeOfExternalsProcessor *re::FixLifetimeOfExternalsProcessor::process(uint64_t this, re::RenderGraphCompiled *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  re::RenderGraphCompiled *v21;
  uint64_t v22;
  unsigned int v23;
  int FirstWritten;
  int v25;
  unint64_t v26;
  re::RenderGraphCompiled *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 IsValid;
  unsigned int v33;
  unsigned int v34;
  re::FixLifetimeOfExternalsProcessor *result;
  unsigned int v36;
  re::FixLifetimeOfExternalsProcessor *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  unint64_t v46;
  __int16 v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)a2 + 44))
    goto LABEL_20;
  v5 = *(_QWORD *)(*((_QWORD *)a2 + 37) + 16);
  LOBYTE(v49) = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  v6 = *((_QWORD *)a2 + 44);
  if (!v6)
    goto LABEL_17;
  v7 = 0;
  v8 = 0;
  v2 = 1;
  do
  {
    v9 = *((_QWORD *)a2 + 46) + 192 * v7;
    v10 = *(_QWORD *)(v9 + 56);
    if (!v10)
      goto LABEL_16;
    v3 = v10 << 6;
    v11 = (unsigned int *)(*(_QWORD *)(v9 + 72) + 52);
    do
    {
      if (!re::RenderGraphCompiled::resourceIsExternal(a2, *v11))
        goto LABEL_14;
      v12 = *(v11 - 12);
      if ((v12 - 1) >= 8)
      {
        if (v12)
          goto LABEL_14;
      }
      else
      {
        v13 = *v11;
        v14 = v38;
        if (v38 <= v13)
        {
          v40 = 0;
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v49 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v41 = 136315906;
          v42 = "operator[]";
          v43 = 1024;
          v44 = 468;
          v45 = 2048;
          v46 = v13;
          v47 = 2048;
          v48 = v14;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_60;
        }
        if (*(_BYTE *)(v39 + v13))
          goto LABEL_13;
        *(_BYTE *)(v39 + v13) = 1;
        re::RenderGraphCompiled::setFirstWritten(*((_QWORD *)a2 + 37), v13, v8);
      }
      LODWORD(v13) = *v11;
LABEL_13:
      re::RenderGraphCompiled::setLastRead(*((_QWORD *)a2 + 37), v13, v8);
LABEL_14:
      v11 += 16;
      v3 -= 64;
    }
    while (v3);
    v6 = *((_QWORD *)a2 + 44);
LABEL_16:
    v7 = (v8 + 1);
    v8 = v7;
  }
  while (v6 > v7);
LABEL_17:
  this = (uint64_t)v37;
  if (v37 && v38)
    this = (*(uint64_t (**)(void))(*(_QWORD *)v37 + 40))();
LABEL_20:
  v15 = *((_QWORD *)a2 + 37);
  if (*(_QWORD *)(v15 + 16))
  {
    v16 = 0;
    v17 = 0;
    v2 = 48;
    do
    {
      v18 = *(_QWORD *)(v15 + 32);
      v19 = *(_DWORD *)(v18 + v16);
      if (v19 == 1)
      {
        v22 = v18 + v16;
        v37 = (re::FixLifetimeOfExternalsProcessor *)(*(_QWORD *)(v22 + 8) >> 1);
        v38 = *(_QWORD *)(v22 + 24);
        this = re::RenderGraphCompiled::bufferDescription((uint64_t)a2, (uint64_t)&v37);
        if (*(_DWORD *)this != 2)
          goto LABEL_36;
        this = re::RenderGraphCompiled::firstWrittenIsValid(*((re::RenderGraphCompiled **)a2 + 37), v17);
        if ((this & 1) != 0)
          goto LABEL_36;
        this = re::RenderGraphCompiled::bufferDescription((uint64_t)a2, (uint64_t)&v37);
        if (*(_DWORD *)this != 4)
          goto LABEL_36;
        v13 = *(unsigned int *)(this + 28);
        if ((_DWORD)v13 == -1)
          goto LABEL_36;
        v21 = (re::RenderGraphCompiled *)*((_QWORD *)a2 + 37);
        v3 = *((_QWORD *)v21 + 2);
        if (v3 <= v13)
          goto LABEL_66;
      }
      else
      {
        if (v19)
          goto LABEL_36;
        v20 = v18 + v16;
        v37 = (re::FixLifetimeOfExternalsProcessor *)(*(_QWORD *)(v20 + 8) >> 1);
        v38 = *(_QWORD *)(v20 + 24);
        this = re::RenderGraphCompiled::targetDescription((uint64_t)a2, (uint64_t)&v37);
        if (*(_DWORD *)this != 2)
          goto LABEL_36;
        this = re::RenderGraphCompiled::firstWrittenIsValid(*((re::RenderGraphCompiled **)a2 + 37), v17);
        if ((this & 1) != 0)
          goto LABEL_36;
        this = re::RenderGraphCompiled::targetDescription((uint64_t)a2, (uint64_t)&v37);
        if (*(_DWORD *)this != 4)
          goto LABEL_36;
        v13 = *(unsigned int *)(this + 72);
        if ((_DWORD)v13 == -1)
          goto LABEL_36;
        v21 = (re::RenderGraphCompiled *)*((_QWORD *)a2 + 37);
        v3 = *((_QWORD *)v21 + 2);
        if (v3 <= v13)
          goto LABEL_65;
      }
      v23 = *(_DWORD *)(*((_QWORD *)v21 + 4) + 48 * v13 + 24);
      FirstWritten = re::RenderGraphCompiled::getFirstWritten(v21, v23);
      re::RenderGraphCompiled::setFirstWritten(*((_QWORD *)a2 + 37), v17, FirstWritten);
      v25 = re::RenderGraphCompiled::getLastRead(*((re::RenderGraphCompiled **)a2 + 37), v23);
      this = re::RenderGraphCompiled::setLastRead(*((_QWORD *)a2 + 37), v17, v25);
LABEL_36:
      ++v17;
      v15 = *((_QWORD *)a2 + 37);
      v16 += 48;
    }
    while (*(_QWORD *)(v15 + 16) > v17);
  }
  v26 = *((_QWORD *)a2 + 44);
  LODWORD(v49) = -1;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v28 = *((_QWORD *)a2 + 49);
  if (v28)
  {
    v29 = 0;
    v30 = *((_QWORD *)a2 + 51);
    v8 = v38;
    v31 = v39;
    while (1)
    {
      v13 = *(unsigned int *)(v30 + 4 * v29);
      if (v8 <= v13)
        break;
      *(_DWORD *)(v31 + 4 * v13) = v29++;
      if (v28 == v29)
        goto LABEL_41;
    }
LABEL_60:
    v40 = 0;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v41 = 136315906;
    v42 = "operator[]";
    v43 = 1024;
    v44 = 468;
    v45 = 2048;
    v46 = v13;
    v47 = 2048;
    v48 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_61:
    v40 = 0;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v41 = 136315906;
    v42 = "operator[]";
    v43 = 1024;
    v44 = 468;
    v45 = 2048;
    v46 = v13;
    v47 = 2048;
    v48 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_62:
    v40 = 0;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v41 = 136315906;
    v42 = "operator[]";
    v43 = 1024;
    v44 = 468;
    v45 = 2048;
    v46 = v8;
    v47 = 2048;
    v48 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_63:
    v40 = 0;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v41 = 136315906;
    v42 = "operator[]";
    v43 = 1024;
    v44 = 789;
    v45 = 2048;
    v46 = v13;
    v47 = 2048;
    v48 = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_64:
    v40 = 0;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v41 = 136315906;
    v42 = "operator[]";
    v43 = 1024;
    v44 = 789;
    v45 = 2048;
    v46 = v8;
    v47 = 2048;
    v48 = v13;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_65:
    v40 = 0;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v41 = 136315906;
    v42 = "operator[]";
    v43 = 1024;
    v44 = 789;
    v45 = 2048;
    v46 = v13;
    v47 = 2048;
    v48 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_66:
    v40 = 0;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v41 = 136315906;
    v42 = "operator[]";
    v43 = 1024;
    v44 = 789;
    v45 = 2048;
    v46 = v13;
    v47 = 2048;
    v48 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_41:
  v36 = 0;
  if (*(_QWORD *)(*((_QWORD *)a2 + 37) + 16))
  {
    LODWORD(v27) = 0;
    do
    {
      if (re::RenderGraphCompiled::resourceIsExternal(a2, v27))
      {
        IsValid = re::RenderGraphCompiled::firstWrittenIsValid(*((re::RenderGraphCompiled **)a2 + 37), v36);
        v8 = re::RenderGraphCompiled::lastReadIsValid(*((re::RenderGraphCompiled **)a2 + 37), v36);
        if (IsValid)
        {
          v33 = re::RenderGraphCompiled::getFirstWritten(*((re::RenderGraphCompiled **)a2 + 37), v36);
          v13 = v33;
          v2 = v38;
          if (v38 <= v33)
            goto LABEL_61;
          v13 = *(unsigned int *)(v39 + 4 * v33);
          if ((v13 & 0x80000000) == 0)
          {
            v2 = *((_QWORD *)a2 + 59);
            if (v2 <= v13)
              goto LABEL_63;
            re::DynamicArray<int>::add((_QWORD *)(*((_QWORD *)a2 + 61) + 40 * v13), &v36);
          }
        }
        if ((_DWORD)v8)
        {
          v34 = re::RenderGraphCompiled::getLastRead(*((re::RenderGraphCompiled **)a2 + 37), v36);
          v8 = v34;
          v13 = v38;
          if (v38 <= v34)
            goto LABEL_62;
          v8 = *(unsigned int *)(v39 + 4 * v34);
          if ((v8 & 0x80000000) == 0)
          {
            v13 = *((_QWORD *)a2 + 64);
            if (v13 <= v8)
              goto LABEL_64;
            re::DynamicArray<int>::add((_QWORD *)(*((_QWORD *)a2 + 66) + 40 * v8), &v36);
          }
        }
      }
      v27 = (re::RenderGraphCompiled *)++v36;
    }
    while (*(_QWORD *)(*((_QWORD *)a2 + 37) + 16) > (unint64_t)v36);
  }
  re::RenderGraphProcessor::updateTextureLifetimes((uint64_t *)a2, v27);
  result = v37;
  if (v37)
  {
    if (v38)
      return (re::FixLifetimeOfExternalsProcessor *)(*(uint64_t (**)(void))(*(_QWORD *)v37 + 40))();
  }
  return result;
}

BOOL re::RenderGraphCompiled::resourceIsExternal(re::RenderGraphCompiled *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 37);
  if (*(_QWORD *)(v2 + 16) <= (unint64_t)a2)
  {
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v10 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  v3 = *(_QWORD *)(v2 + 32);
  v4 = *(_DWORD *)(v3 + 48 * a2);
  if (!v4)
  {
    v8 = v3 + 48 * a2;
    *(_QWORD *)&v10 = *(_QWORD *)(v8 + 8) >> 1;
    *((_QWORD *)&v10 + 1) = *(_QWORD *)(v8 + 24);
    v7 = *(_DWORD *)re::RenderGraphCompiled::targetDescription((uint64_t)this, (uint64_t)&v10);
    return v7 == 2;
  }
  if (v4 == 1)
  {
    v5 = *(unsigned int *)(v3 + 48 * a2 + 28);
    v6 = *((_QWORD *)this + 39);
    if (*(_QWORD *)(v6 + 16) > v5)
    {
      v7 = *(_DWORD *)(*(_QWORD *)(v6 + 32) + 48 * v5);
      return v7 == 2;
    }
LABEL_11:
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v10 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return 0;
}

BOOL re::RenderGraphCompiled::firstWrittenIsValid(re::RenderGraphCompiled *this, unsigned int a2)
{
  if (*((_QWORD *)this + 2) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_DWORD *)(*((_QWORD *)this + 4) + 48 * a2 + 32) != -1;
}

uint64_t re::RenderGraphCompiled::getFirstWritten(re::RenderGraphCompiled *this, unsigned int a2)
{
  if (*((_QWORD *)this + 2) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*((_QWORD *)this + 4) + 48 * a2 + 32);
}

uint64_t re::RenderGraphCompiled::getLastRead(re::RenderGraphCompiled *this, unsigned int a2)
{
  if (*((_QWORD *)this + 2) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(unsigned int *)(*((_QWORD *)this + 4) + 48 * a2 + 36);
}

BOOL re::RenderGraphCompiled::lastReadIsValid(re::RenderGraphCompiled *this, unsigned int a2)
{
  if (*((_QWORD *)this + 2) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_DWORD *)(*((_QWORD *)this + 4) + 48 * a2 + 36) != -1;
}

void re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_1,void ()(re::RenderGraphCompiled &)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t *re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_1,void ()(re::RenderGraphCompiled &)>::operator()(_anonymous_namespace_ *a1, re::RenderGraphProcessor *this)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  re::RenderGraphCompiled *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  re::RenderGraphCompiled *v23;
  uint64_t v24;
  _DWORD *v25;
  unsigned int v26;
  int FirstWritten;
  int v28;
  unint64_t v29;
  _BOOL4 IsValid;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36[2];
  int v37;
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  unint64_t v42;
  __int16 v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v3 = (uint64_t *)this;
  v50 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)this + 44))
    goto LABEL_27;
  v4 = *(_QWORD *)(v3[37] + 16);
  LOBYTE(v45) = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v32 = 0;
  if (!v3[44])
    goto LABEL_24;
  v5 = (unint64_t)(v3 + 47);
  v6 = (unint64_t)(v3 + 57);
  do
  {
    re::DynamicArray<int>::add(v3 + 47, &v32);
    *(_QWORD *)&v47 = 0;
    *(_QWORD *)&v46 = 0;
    v45 = 0uLL;
    DWORD2(v46) = 0;
    re::DynamicArray<re::DynamicArray<unsigned int>>::add(v3 + 57, (uint64_t)&v45);
    if ((_QWORD)v45 && (_QWORD)v47)
      (*(void (**)(void))(*(_QWORD *)v45 + 40))();
    *(_QWORD *)&v47 = 0;
    *(_QWORD *)&v46 = 0;
    v45 = 0uLL;
    DWORD2(v46) = 0;
    re::DynamicArray<re::DynamicArray<unsigned int>>::add(v3 + 62, (uint64_t)&v45);
    if ((_QWORD)v45)
    {
      this = (re::RenderGraphProcessor *)v47;
      if ((_QWORD)v47)
        (*(void (**)(void))(*(_QWORD *)v45 + 40))();
    }
    v7 = v32;
    v8 = v3[44];
    if (v8 <= v32)
      goto LABEL_62;
    v9 = v3[46] + 192 * v32;
    v10 = *(_QWORD *)(v9 + 56);
    if (!v10)
      goto LABEL_23;
    v7 = v10 << 6;
    v11 = (unsigned int *)(*(_QWORD *)(v9 + 72) + 52);
    do
    {
      v12 = *(v11 - 12);
      if ((v12 - 1) < 8)
      {
        v8 = *v11;
        v2 = v34;
        if (v34 <= v8)
        {
          *(_QWORD *)v36 = 0;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v45 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v37 = 136315906;
          v38 = "operator[]";
          v39 = 1024;
          v40 = 468;
          v41 = 2048;
          v42 = v8;
          v43 = 2048;
          v44 = v2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_62:
          *(_QWORD *)v36 = 0;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v45 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v37 = 136315906;
          v38 = "operator[]";
          v39 = 1024;
          v40 = 789;
          v41 = 2048;
          v42 = v7;
          v43 = 2048;
          v44 = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_63:
          v33 = 0;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v45 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v37 = 136315906;
          v38 = "operator[]";
          v39 = 1024;
          v40 = 789;
          v41 = 2048;
          v42 = v6;
          v43 = 2048;
          v44 = v8;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_64:
          v33 = 0;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v45 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v37 = 136315906;
          v38 = "operator[]";
          v39 = 1024;
          v40 = 789;
          v41 = 2048;
          v42 = v5;
          v43 = 2048;
          v44 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_65:
          v33 = 0;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v45 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v37 = 136315906;
          v38 = "operator[]";
          v39 = 1024;
          v40 = 789;
          v41 = 2048;
          v42 = v5;
          v43 = 2048;
          v44 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_66:
          v33 = 0;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v45 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v37 = 136315906;
          v38 = "operator[]";
          v39 = 1024;
          v40 = 789;
          v41 = 2048;
          v42 = v5;
          v43 = 2048;
          v44 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_67:
          v33 = 0;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v45 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v37 = 136315906;
          v38 = "operator[]";
          v39 = 1024;
          v40 = 789;
          v41 = 2048;
          v42 = v5;
          v43 = 2048;
          v44 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_68:
          v33 = 0;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v45 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v37 = 136315906;
          v38 = "operator[]";
          v39 = 1024;
          v40 = 789;
          v41 = 2048;
          v42 = v5;
          v43 = 2048;
          v44 = v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_69:
          *(_QWORD *)v36 = 0;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v45 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v37 = 136315906;
          v38 = "operator[]";
          v39 = 1024;
          v40 = 789;
          v41 = 2048;
          v42 = v6;
          v43 = 2048;
          v44 = v2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_70:
          *(_QWORD *)v36 = 0;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v45 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v37 = 136315906;
          v38 = "operator[]";
          v39 = 1024;
          v40 = 789;
          v41 = 2048;
          v42 = v6;
          v43 = 2048;
          v44 = v2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v13 = v32;
        if (!*(_BYTE *)(v35 + v8))
        {
          *(_BYTE *)(v35 + v8) = 1;
          re::RenderGraphCompiled::setFirstWritten(v3[37], v8, v13);
          LODWORD(v8) = *v11;
          v13 = v32;
        }
        v14 = v3[37];
        v15 = v8;
        goto LABEL_18;
      }
      if (!v12)
      {
        v15 = *v11;
        v13 = v32;
        v14 = v3[37];
LABEL_18:
        re::RenderGraphCompiled::setLastRead(v14, v15, v13);
      }
      v11 += 16;
      v7 -= 64;
    }
    while (v7);
    LODWORD(v7) = v32;
    v8 = v3[44];
LABEL_23:
    v32 = v7 + 1;
  }
  while (v8 > (v7 + 1));
LABEL_24:
  if (v33 && v34)
    (*(void (**)(void))(*(_QWORD *)v33 + 40))();
LABEL_27:
  v16 = (re::RenderGraphCompiled *)v3[37];
  if (!*((_QWORD *)v16 + 2))
    return re::RenderGraphProcessor::updateTextureLifetimes(v3, this);
  v17 = 0;
  v18 = 0;
  while (2)
  {
    v19 = *((_QWORD *)v16 + 4);
    v20 = *(_DWORD *)(v19 + v17);
    if (v20 == 1)
    {
      v24 = v19 + v17;
      v33 = *(_QWORD *)(v24 + 8) >> 1;
      v34 = *(_QWORD *)(v24 + 24);
      if (!re::RenderGraphCompiled::firstWrittenIsValid(v16, v18))
      {
        v25 = (_DWORD *)re::RenderGraphCompiled::bufferDescription((uint64_t)v3, (uint64_t)&v33);
        if (*v25 == 4)
        {
          v6 = v25[7];
          if ((_DWORD)v6 != -1)
          {
            v23 = (re::RenderGraphCompiled *)v3[37];
            v2 = *((_QWORD *)v23 + 2);
            if (v2 <= v6)
              goto LABEL_70;
LABEL_40:
            v26 = *(_DWORD *)(*((_QWORD *)v23 + 4) + 48 * v6 + 24);
            FirstWritten = re::RenderGraphCompiled::getFirstWritten(v23, v26);
            re::RenderGraphCompiled::setFirstWritten(v3[37], v18, FirstWritten);
            v28 = re::RenderGraphCompiled::getLastRead((re::RenderGraphCompiled *)v3[37], v26);
            re::RenderGraphCompiled::setLastRead(v3[37], v18, v28);
          }
        }
      }
    }
    else if (!v20)
    {
      v21 = v19 + v17;
      v33 = *(_QWORD *)(v21 + 8) >> 1;
      v34 = *(_QWORD *)(v21 + 24);
      if (!re::RenderGraphCompiled::firstWrittenIsValid(v16, v18))
      {
        v22 = (_DWORD *)re::RenderGraphCompiled::targetDescription((uint64_t)v3, (uint64_t)&v33);
        if (*v22 == 4)
        {
          v6 = v22[18];
          if ((_DWORD)v6 != -1)
          {
            v23 = (re::RenderGraphCompiled *)v3[37];
            v2 = *((_QWORD *)v23 + 2);
            if (v2 <= v6)
              goto LABEL_69;
            goto LABEL_40;
          }
        }
      }
    }
    ++v18;
    v16 = (re::RenderGraphCompiled *)v3[37];
    v29 = *((_QWORD *)v16 + 2);
    v17 += 48;
    if (v29 > v18)
      continue;
    break;
  }
  v36[0] = 0;
  if (v29)
  {
    LODWORD(this) = 0;
    while (1)
    {
      IsValid = re::RenderGraphCompiled::firstWrittenIsValid(v16, this);
      v5 = re::RenderGraphCompiled::lastReadIsValid((re::RenderGraphCompiled *)v3[37], v36[0]);
      if (re::RenderGraphCompiled::resourceIsExternal((re::RenderGraphCompiled *)v3, v36[0]))
      {
        if (IsValid)
        {
          v6 = re::RenderGraphCompiled::getFirstWritten((re::RenderGraphCompiled *)v3[37], v36[0]);
          v8 = v3[59];
          if (v8 <= v6)
            goto LABEL_63;
          re::DynamicArray<int>::add((_QWORD *)(v3[61] + 40 * v6), v36);
        }
        if (!(_DWORD)v5)
          goto LABEL_59;
        v5 = re::RenderGraphCompiled::getLastRead((re::RenderGraphCompiled *)v3[37], v36[0]);
        v6 = v3[64];
        if (v6 <= v5)
          goto LABEL_65;
        goto LABEL_58;
      }
      if ((IsValid & v5) == 1)
        break;
      if (((v5 | !IsValid) & 1) == 0)
      {
        v5 = re::RenderGraphCompiled::getFirstWritten((re::RenderGraphCompiled *)v3[37], v36[0]);
        v6 = v3[59];
        if (v6 <= v5)
          goto LABEL_67;
        re::DynamicArray<int>::add((_QWORD *)(v3[61] + 40 * v5), v36);
        v5 = re::RenderGraphCompiled::getFirstWritten((re::RenderGraphCompiled *)v3[37], v36[0]);
        v6 = v3[64];
        if (v6 <= v5)
          goto LABEL_68;
        goto LABEL_58;
      }
LABEL_59:
      this = (re::RenderGraphProcessor *)++v36[0];
      v16 = (re::RenderGraphCompiled *)v3[37];
      if (*((_QWORD *)v16 + 2) <= (unint64_t)v36[0])
        return re::RenderGraphProcessor::updateTextureLifetimes(v3, this);
    }
    v5 = re::RenderGraphCompiled::getFirstWritten((re::RenderGraphCompiled *)v3[37], v36[0]);
    v6 = v3[59];
    if (v6 <= v5)
      goto LABEL_64;
    re::DynamicArray<int>::add((_QWORD *)(v3[61] + 40 * v5), v36);
    v5 = re::RenderGraphCompiled::getLastRead((re::RenderGraphCompiled *)v3[37], v36[0]);
    v6 = v3[64];
    if (v6 <= v5)
      goto LABEL_66;
LABEL_58:
    re::DynamicArray<int>::add((_QWORD *)(v3[66] + 40 * v5), v36);
    goto LABEL_59;
  }
  return re::RenderGraphProcessor::updateTextureLifetimes(v3, this);
}

_QWORD *re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_1,void ()(re::RenderGraphCompiled &)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED75810;
  return result;
}

_QWORD *re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_1,void ()(re::RenderGraphCompiled &)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED75810;
  return result;
}

uint64_t re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_1,void ()(re::RenderGraphCompiled &)>::size()
{
  return 16;
}

_QWORD *re::DynamicArray<re::DynamicArray<unsigned int>>::add(_QWORD *this, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::SkeletalAnimationQueryEntry>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  v5 = v3[4] + 40 * v4;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = 0;
  *(_DWORD *)(v5 + 24) = 0;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v5 = *(_QWORD *)a2;
  *(_QWORD *)(v5 + 8) = v6;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v7 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v7;
  v8 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v8;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v5 + 24);
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

void re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_2,void ()(re::RenderGraphCompiled &)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t *re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_2,void ()(re::RenderGraphCompiled &)>::operator()(int a1, re::RenderGraphProcessor *this)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 49))
  {
    v3 = 0;
    v4 = 1;
    do
    {
      v5 = *(unsigned int *)(*((_QWORD *)this + 51) + 4 * v3);
      if (*((_QWORD *)this + 44) <= v5)
      {
        v13 = 0u;
        v14 = 0u;
        v11 = 0u;
        v12 = 0u;
        v10 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_8:
        v13 = 0u;
        v14 = 0u;
        v11 = 0u;
        v12 = 0u;
        v10 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v6 = *((_QWORD *)this + 46) + 192 * v5;
      if (!*(_QWORD *)(v6 + 16))
        goto LABEL_8;
      v7 = *(uint64_t **)(v6 + 32);
      *(_QWORD *)&v10 = v5;
      re::HashTable<re::RenderGraphNodeBase *,re::NodeSetupIndex,re::Hash<re::RenderGraphNodeBase *>,re::EqualTo<re::RenderGraphNodeBase *>,true,false>::add((uint64_t)this + 656, v7, &v10);
      v3 = v4;
    }
    while (*((_QWORD *)this + 49) > (unint64_t)v4++);
  }
  return re::RenderGraphProcessor::updateTextureLifetimes((uint64_t *)this, this);
}

_QWORD *re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_2,void ()(re::RenderGraphCompiled &)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED75868;
  return result;
}

_QWORD *re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_2,void ()(re::RenderGraphCompiled &)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED75868;
  return result;
}

uint64_t re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_2,void ()(re::RenderGraphCompiled &)>::size()
{
  return 16;
}

uint64_t re::HashTable<re::RenderGraphNodeBase *,re::NodeSetupIndex,re::Hash<re::RenderGraphNodeBase *>,re::EqualTo<re::RenderGraphNodeBase *>,true,false>::add(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::RenderGraphNodeBase *,re::NodeSetupIndex,re::Hash<re::RenderGraphNodeBase *>,re::EqualTo<re::RenderGraphNodeBase *>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 32 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 32 * v10;
  return v12 + 24;
}

uint64_t re::HashTable<re::RenderGraphNodeBase *,re::NodeSetupIndex,re::Hash<re::RenderGraphNodeBase *>,re::EqualTo<re::RenderGraphNodeBase *>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::RenderGraphNodeBase *,re::NodeSetupIndex,re::Hash<re::RenderGraphNodeBase *>,re::EqualTo<re::RenderGraphNodeBase *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::RenderGraphNodeBase *,re::NodeSetupIndex,re::Hash<re::RenderGraphNodeBase *>,re::EqualTo<re::RenderGraphNodeBase *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::RenderGraphNodeBase *,re::NodeSetupIndex,re::Hash<re::RenderGraphNodeBase *>,re::EqualTo<re::RenderGraphNodeBase *>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

void re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_3,void ()(re::RenderGraphCompiled &)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_3,void ()(re::RenderGraphCompiled &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;
  int v15;
  int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int FirstWritten;
  int v22;
  _BYTE v23[14];
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a2 + 432);
  if (v2)
  {
    v4 = *(unsigned int **)(a2 + 448);
    v5 = 4 * v2;
    while (1)
    {
      v6 = *v4;
      v7 = *(_QWORD *)(a2 + 296);
      v8 = *(_QWORD *)(v7 + 16);
      if (v8 <= v6)
      {
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v28 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v22 = 136315906;
        *(_QWORD *)v23 = "operator[]";
        *(_WORD *)&v23[8] = 1024;
        *(_DWORD *)&v23[10] = 789;
        v24 = 2048;
        v25 = v6;
        v26 = 2048;
        v27 = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v9 = *(_QWORD *)(v7 + 32);
      v10 = *(_DWORD *)(v9 + 48 * v6);
      if (v10 != 1)
        break;
      v18 = v9 + 48 * v6;
      v20 = *(_QWORD *)(v18 + 8);
      v19 = v18 + 8;
      *(_QWORD *)&v28 = v20 >> 1;
      *((_QWORD *)&v28 + 1) = *(_QWORD *)(v19 + 16);
      if (*(_DWORD *)re::RenderGraphCompiled::bufferDescription(a2, (uint64_t)&v28) != 2)
      {
        FirstWritten = re::RenderGraphCompiled::getFirstWritten(*(re::RenderGraphCompiled **)(a2 + 296), v6);
        if (FirstWritten > re::RenderGraphCompiled::getLastRead(*(re::RenderGraphCompiled **)(a2 + 296), v6))
        {
          re::StringID::StringID((re::StringID *)&v22, (const StringID *)v19);
          re::DynamicString::format((re::DynamicString *)"Buffer (%s) with invalid lifecycle detected (firstWritten > lastRead).", (re::DynamicString *)&v28, *(_QWORD *)&v23[4]);
LABEL_20:
          re::RenderGraphCompiled::addError(a2, (uint64_t)&v28);
          if ((_QWORD)v28)
          {
            if ((BYTE8(v28) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v28 + 40))();
            v28 = 0u;
            v29 = 0u;
          }
          re::StringID::destroyString((re::StringID *)&v22);
        }
      }
LABEL_25:
      ++v4;
      v5 -= 4;
      if (!v5)
        return;
    }
    if (v10)
      goto LABEL_25;
    v11 = v9 + 48 * v6;
    v13 = *(_QWORD *)(v11 + 8);
    v12 = v11 + 8;
    *(_QWORD *)&v28 = v13 >> 1;
    *((_QWORD *)&v28 + 1) = *(_QWORD *)(v12 + 16);
    v14 = (int *)re::RenderGraphCompiled::targetDescription(a2, (uint64_t)&v28);
    v15 = *v14;
    if ((*v14 - 2) >= 3)
    {
      v16 = v14;
      if (*(_QWORD *)(a2 + 352) <= (unint64_t)re::RenderGraphCompiled::getLastRead(*(re::RenderGraphCompiled **)(a2 + 296), v6))
      {
        re::StringID::StringID((re::StringID *)&v22, (const StringID *)v12);
        re::DynamicString::format((re::DynamicString *)"Texture (%s) with invalid lifecycle detected (lastRead later than end of graph).", (re::DynamicString *)&v28, *(_QWORD *)&v23[4]);
        re::RenderGraphCompiled::addError(a2, (uint64_t)&v28);
        if ((_QWORD)v28)
        {
          if ((BYTE8(v28) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v28 + 40))();
          v28 = 0u;
          v29 = 0u;
        }
        re::StringID::destroyString((re::StringID *)&v22);
      }
      v15 = *v16;
    }
    if (v15 == 2)
      goto LABEL_25;
    v17 = re::RenderGraphCompiled::getFirstWritten(*(re::RenderGraphCompiled **)(a2 + 296), v6);
    if (v17 <= re::RenderGraphCompiled::getLastRead(*(re::RenderGraphCompiled **)(a2 + 296), v6))
      goto LABEL_25;
    re::StringID::StringID((re::StringID *)&v22, (const StringID *)v12);
    re::DynamicString::format((re::DynamicString *)"Texture (%s) with invalid lifecycle detected (firstWritten > lastRead).", (re::DynamicString *)&v28, *(_QWORD *)&v23[4]);
    goto LABEL_20;
  }
}

_QWORD *re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_3,void ()(re::RenderGraphCompiled &)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED758C0;
  return result;
}

_QWORD *re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_3,void ()(re::RenderGraphCompiled &)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED758C0;
  return result;
}

uint64_t re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_3,void ()(re::RenderGraphCompiled &)>::size()
{
  return 16;
}

uint64_t re::RenderGraphCompiled::addError(uint64_t a1, uint64_t a2)
{
  __n128 v2;
  uint64_t result;
  __n128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;

  v4.n128_u64[0] = 2000;
  v4.n128_u64[1] = (unint64_t)&re::GraphicsErrorCategory(void)::instance;
  v5 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 24);
  v6 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = re::DynamicArray<re::DetailedError>::add((_anonymous_namespace_ *)(a1 + 576), &v4);
  result = v5;
  if (v5)
  {
    if ((v6 & 1) != 0)
      return (*(uint64_t (**)(__n128))(*(_QWORD *)v5 + 40))(v2);
  }
  return result;
}

void re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_4,void ()(re::RenderGraphCompiled &)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_4,void ()(re::RenderGraphCompiled &)>::operator()(uint64_t a1, re::RenderGraphCompiled *this)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL IsExternal;
  unsigned int FirstWritten;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE v17[8];
  uint64_t v18;
  __int128 v19;
  __int128 v20;

  v2 = *((_QWORD *)this + 37);
  if (*(_QWORD *)(v2 + 16))
  {
    v4 = 0;
    v5 = 0;
    v6 = *(_QWORD *)(a1 + 8);
    do
    {
      v7 = *(_QWORD *)(v2 + 32);
      IsExternal = re::RenderGraphCompiled::resourceIsExternal(this, v5);
      if (!*(_BYTE *)(v6 + 121) && !IsExternal)
      {
        FirstWritten = re::RenderGraphCompiled::getFirstWritten(*((re::RenderGraphCompiled **)this + 37), v5);
        if (FirstWritten > re::RenderGraphCompiled::getLastRead(*((re::RenderGraphCompiled **)this + 37), v5))
        {
          re::StringID::StringID((re::StringID *)v17, (const StringID *)(v7 + 48 * v4 + 8));
          re::DynamicString::format((re::DynamicString *)"Resource (%s) with invalid lifecycle detected (firstWritten > lastRead).", (re::DynamicString *)&v19, v18);
          re::RenderGraphCompiled::addError((uint64_t)this, (uint64_t)&v19);
          if ((_QWORD)v19)
          {
            if ((BYTE8(v19) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v19 + 40))();
            v19 = 0u;
            v20 = 0u;
          }
          re::StringID::destroyString((re::StringID *)v17);
        }
        v10 = *(_DWORD *)(v7 + 48 * v4);
        if (v10 == 1)
        {
          v14 = v7 + 48 * v4;
          v16 = *(_QWORD *)(v14 + 8);
          v15 = v14 + 8;
          *(_QWORD *)&v19 = v16 >> 1;
          *((_QWORD *)&v19 + 1) = *(_QWORD *)(v15 + 16);
          if ((*(_DWORD *)re::RenderGraphCompiled::bufferDescription((uint64_t)this, (uint64_t)&v19) & 0xFFFFFFFE) != 2
            && *((_QWORD *)this + 44) <= (unint64_t)re::RenderGraphCompiled::getLastRead(*((re::RenderGraphCompiled **)this + 37), v5))
          {
            re::StringID::StringID((re::StringID *)v17, (const StringID *)v15);
            re::DynamicString::format((re::DynamicString *)"Buffer (%s) with invalid lifecycle detected (lastRead later than end of graph).", (re::DynamicString *)&v19, v18);
            goto LABEL_19;
          }
        }
        else if (!v10)
        {
          v11 = v7 + 48 * v4;
          v13 = *(_QWORD *)(v11 + 8);
          v12 = v11 + 8;
          *(_QWORD *)&v19 = v13 >> 1;
          *((_QWORD *)&v19 + 1) = *(_QWORD *)(v12 + 16);
          if ((*(_DWORD *)re::RenderGraphCompiled::targetDescription((uint64_t)this, (uint64_t)&v19) & 0xFFFFFFFE) != 2
            && *((_QWORD *)this + 44) <= (unint64_t)re::RenderGraphCompiled::getLastRead(*((re::RenderGraphCompiled **)this + 37), v5))
          {
            re::StringID::StringID((re::StringID *)v17, (const StringID *)v12);
            re::DynamicString::format((re::DynamicString *)"Texture (%s) with invalid lifecycle detected (lastRead later than end of graph).", (re::DynamicString *)&v19, v18);
LABEL_19:
            re::RenderGraphCompiled::addError((uint64_t)this, (uint64_t)&v19);
            if ((_QWORD)v19)
            {
              if ((BYTE8(v19) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v19 + 40))();
              v19 = 0u;
              v20 = 0u;
            }
            re::StringID::destroyString((re::StringID *)v17);
          }
        }
      }
      v2 = *((_QWORD *)this + 37);
      v4 = ++v5;
    }
    while (*(_QWORD *)(v2 + 16) > (unint64_t)v5);
  }
}

_QWORD *re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_4,void ()(re::RenderGraphCompiled &)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED75918;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_4,void ()(re::RenderGraphCompiled &)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED75918;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderGraphProcessorManager::addDefaultProcessors(BOOL)::$_4,void ()(re::RenderGraphCompiled &)>::size()
{
  return 16;
}

void re::MarkMemorylessProcessor::~MarkMemorylessProcessor(re::MarkMemorylessProcessor *this)
{
  JUMPOUT(0x2276933B8);
}

re::RenderGraphCompiled *re::MarkMemorylessProcessor::process(re::MarkMemorylessProcessor *this, re::RenderGraphCompiled *a2)
{
  re::RenderGraphCompiled *result;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int v25;
  BOOL v26;
  BOOL v27;
  int FirstWritten;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  int v45;
  BOOL v46;
  BOOL v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  result = (re::RenderGraphCompiled *)*((_QWORD *)a2 + 37);
  if (*((_QWORD *)result + 2))
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = *((_QWORD *)result + 4);
      v7 = *(_DWORD *)(v6 + 48 * v4);
      if (v7 == 1)
      {
        if (re::RenderGraphCompiled::firstWrittenIsValid(result, v5)
          && re::RenderGraphCompiled::lastReadIsValid(*((re::RenderGraphCompiled **)a2 + 37), v5))
        {
          FirstWritten = re::RenderGraphCompiled::getFirstWritten(*((re::RenderGraphCompiled **)a2 + 37), v5);
          v29 = re::RenderGraphCompiled::getLastRead(*((re::RenderGraphCompiled **)a2 + 37), v5);
          v30 = v6 + 48 * v4;
          *(_QWORD *)&v48 = *(_QWORD *)(v30 + 8) >> 1;
          *((_QWORD *)&v48 + 1) = *(_QWORD *)(v30 + 24);
          v31 = (_DWORD *)re::RenderGraphCompiled::bufferDescription((uint64_t)a2, (uint64_t)&v48);
          if (*v31 != 2)
          {
            v32 = *((_QWORD *)a2 + 49);
            if (v32)
            {
              v33 = 0;
              v34 = *((_QWORD *)a2 + 51);
              v35 = *((_QWORD *)a2 + 44);
              while (1)
              {
                v36 = v35 + 1;
                if (v33 < v32 - 1)
                  v36 = *(_DWORD *)(v34 + 4 * v33 + 4);
                v37 = *(unsigned int *)(v34 + 4 * v33);
                if (FirstWritten >= (int)v37 && v29 < v36)
                {
                  if (v35 <= v37)
                    goto LABEL_56;
                  v39 = *((_QWORD *)a2 + 46) + 192 * v37;
                  v40 = *(_QWORD *)(v39 + 56);
                  if (!v40)
                    break;
                  v41 = 0;
                  v42 = *(_QWORD *)(v39 + 72);
                  v43 = (v40 << 6) - 64;
                  v44 = (int *)(v42 + 4);
                  do
                  {
                    v45 = *v44;
                    v44 += 16;
                    v46 = (v45 & 0xFFFFFFFE) == 4;
                    v47 = (v45 & 0xFFFFFFFE) == 4 || v43 == 0;
                    v43 -= 64;
                    v41 |= v46;
                  }
                  while (!v47);
                  if ((v41 & 1) == 0)
                    break;
                }
                if (++v33 == v32)
                  goto LABEL_53;
              }
              v31[6] = 48;
            }
          }
        }
      }
      else if (!v7
             && re::RenderGraphCompiled::firstWrittenIsValid(result, v5)
             && re::RenderGraphCompiled::lastReadIsValid(*((re::RenderGraphCompiled **)a2 + 37), v5))
      {
        v8 = re::RenderGraphCompiled::getFirstWritten(*((re::RenderGraphCompiled **)a2 + 37), v5);
        v9 = re::RenderGraphCompiled::getLastRead(*((re::RenderGraphCompiled **)a2 + 37), v5);
        v10 = v6 + 48 * v4;
        *(_QWORD *)&v48 = *(_QWORD *)(v10 + 8) >> 1;
        *((_QWORD *)&v48 + 1) = *(_QWORD *)(v10 + 24);
        v11 = (_DWORD *)re::RenderGraphCompiled::targetDescription((uint64_t)a2, (uint64_t)&v48);
        if (*v11 != 2)
        {
          v12 = *((_QWORD *)a2 + 49);
          if (v12)
          {
            v13 = 0;
            v14 = *((_QWORD *)a2 + 51);
            v15 = *((_QWORD *)a2 + 44);
            do
            {
              v16 = v15 + 1;
              if (v13 < v12 - 1)
                v16 = *(_DWORD *)(v14 + 4 * v13 + 4);
              v17 = *(unsigned int *)(v14 + 4 * v13);
              if (v8 >= (int)v17 && v9 < v16)
              {
                if (v15 <= v17)
                {
                  v51 = 0u;
                  v52 = 0u;
                  v49 = 0u;
                  v50 = 0u;
                  v48 = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_56:
                  v51 = 0u;
                  v52 = 0u;
                  v49 = 0u;
                  v50 = 0u;
                  v48 = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
                }
                v19 = *((_QWORD *)a2 + 46) + 192 * v17;
                v20 = *(_QWORD *)(v19 + 56);
                if (!v20)
                  goto LABEL_51;
                v21 = 0;
                v22 = *(_QWORD *)(v19 + 72);
                v23 = (v20 << 6) - 64;
                v24 = (int *)(v22 + 4);
                do
                {
                  v25 = *v24;
                  v24 += 16;
                  v26 = (v25 & 0xFFFFFFFE) == 4;
                  v27 = (v25 & 0xFFFFFFFE) == 4 || v23 == 0;
                  v23 -= 64;
                  v21 |= v26;
                }
                while (!v27);
                if ((v21 & 1) == 0)
                {
LABEL_51:
                  v11[17] = 48;
                  break;
                }
              }
              ++v13;
            }
            while (v13 != v12);
          }
        }
      }
LABEL_53:
      result = (re::RenderGraphCompiled *)*((_QWORD *)a2 + 37);
      v4 = ++v5;
    }
    while (*((_QWORD *)result + 2) > (unint64_t)v5);
  }
  return result;
}

_QWORD *re::PbrConstantSource::constantNameMap(re::PbrConstantSource *this)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  int *v3;
  char *v4;
  uint64_t v5;
  char v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  int v11;
  char v12;
  uint64_t v13;

  if ((v1 & 1) == 0
  {
    byte_255829540 = 0;
    re::PbrConstantSource::constantNameMap(void)::linearAllocator = (uint64_t)&off_24ED42408;
    *(_QWORD *)algn_255829538 = "pbrConstantAllocator";
    xmmword_255829570 = 0u;
    unk_255829580 = 0u;
    dword_255829590 = 0;
    *(_OWORD *)&qword_255829548 = 0u;
    *(_OWORD *)&qword_255829558 = 0u;
    dword_255829568 = 0;
    *(_QWORD *)algn_255829594 = 0x7FFFFFFFLL;
    byte_2558295A0 = 1;
    __cxa_atexit((void (*)(void *))re::LinearAllocator::~LinearAllocator, &re::PbrConstantSource::constantNameMap(void)::linearAllocator, &dword_224FE9000);
  }
  {
    __cxa_atexit((void (*)(void *))re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::~HashBrown, re::PbrConstantSource::constantNameMap(void)::nameMap, &dword_224FE9000);
  }
  if ((re::PbrConstantSource::constantNameMap(void)::initialized & 1) == 0)
  {
    qword_255829548 = (uint64_t)&re::PbrConstantSource::constantNameMap(void)::s_pbrConstantMemory;
    unk_255829550 = &re::PbrConstantSource::constantNameMap(void)::linearAllocator;
    qword_255829558 = (uint64_t)&re::PbrConstantSource::constantNameMap(void)::s_pbrConstantMemory;
    unk_255829560 = &re::PbrConstantSource::constantNameMap(void)::linearAllocator;
    re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::init(re::PbrConstantSource::constantNameMap(void)::nameMap, (uint64_t)&re::PbrConstantSource::constantNameMap(void)::linearAllocator, 16);
    v3 = &re::s_pbrConstantMembers;
    do
    {
      v4 = (char *)*((_QWORD *)v3 + 2);
      if (v4)
      {
        v5 = *v4;
        if (*v4)
        {
          v6 = v4[1];
          if (v6)
          {
            v7 = (unsigned __int8 *)(v4 + 2);
            do
            {
              v5 = 31 * v5 + v6;
              v8 = *v7++;
              v6 = v8;
            }
            while (v8);
          }
          v5 &= ~0x8000000000000000;
        }
      }
      else
      {
        v5 = 0x7FFFFFFFFFFFFFFFLL;
      }
      v13 = v5;
      v9 = v3[1];
      LOWORD(v11) = *v3;
      HIWORD(v11) = v9;
      v12 = *((_BYTE *)v3 + 24);
      re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::addNew((_anonymous_namespace_ *)re::PbrConstantSource::constantNameMap(void)::nameMap, &v13, &v11);
      v3 += 8;
    }
    while (v3 != &re::PortalUserDefaults::maximumPortalCount(void)::maximumPortalCount);
    re::PbrConstantSource::constantNameMap(void)::initialized = 1;
  }
  return re::PbrConstantSource::constantNameMap(void)::nameMap;
}

uint64_t re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::~HashBrown(uint64_t a1)
{
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit(a1);
  return a1;
}

_QWORD *re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t i;
  _QWORD *v12;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v6 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 17 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v7 = 0;
      *(_QWORD *)&v8 = -1;
      *((_QWORD *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      result = (_QWORD *)*v3;
    }
    v3[1] = &result[2 * v6];
    v9 = v3[2];
    if (v9)
    {
      v10 = 0;
      for (i = 0; i < v9; ++i)
      {
        v12 = (_QWORD *)(v3[1] + v10);
        *(_QWORD *)((char *)v12 + 6) = 0;
        *v12 = 0;
        v9 = v3[2];
        v10 += 16;
      }
    }
  }
  else
  {
    v9 = 0;
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v9;
  return result;
}

uint64_t re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::addNew(_anonymous_namespace_ *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;

  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::internalAdd(a1, a2, a3);
  else
    return *((_QWORD *)a1 + 1) + 16 * v6 + 8;
}

_QWORD *re::PbrTextureSource::textureNameMap(re::PbrTextureSource *this)
{
  unsigned __int8 v1;
  unsigned __int8 v2;
  uint64_t i;
  char *v4;
  uint64_t v5;
  char v6;
  unsigned __int8 *v7;
  int v8;
  __int16 v10;
  uint64_t v11;

  if ((v1 & 1) == 0
  {
    byte_255829720 = 0;
    re::PbrTextureSource::textureNameMap(void)::linearAllocator = (uint64_t)&off_24ED42408;
    *(_QWORD *)algn_255829718 = "pbrTextureAllocator";
    xmmword_255829750 = 0u;
    unk_255829760 = 0u;
    dword_255829770 = 0;
    *(_OWORD *)&qword_255829728 = 0u;
    *(_OWORD *)&qword_255829738 = 0u;
    dword_255829748 = 0;
    *(_QWORD *)algn_255829774 = 0x7FFFFFFFLL;
    byte_255829780 = 1;
    __cxa_atexit((void (*)(void *))re::LinearAllocator::~LinearAllocator, &re::PbrTextureSource::textureNameMap(void)::linearAllocator, &dword_224FE9000);
  }
  {
    __cxa_atexit((void (*)(void *))re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::~HashBrown, re::PbrTextureSource::textureNameMap(void)::nameMap, &dword_224FE9000);
  }
  if ((re::PbrTextureSource::textureNameMap(void)::initialized & 1) == 0)
  {
    qword_255829728 = (uint64_t)&re::PbrTextureSource::textureNameMap(void)::s_pbrTextureMemory;
    unk_255829730 = &re::PbrTextureSource::textureNameMap(void)::linearAllocator;
    qword_255829738 = (uint64_t)&re::PbrTextureSource::textureNameMap(void)::s_pbrTextureMemory;
    unk_255829740 = &re::PbrTextureSource::textureNameMap(void)::linearAllocator;
    re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::init(re::PbrTextureSource::textureNameMap(void)::nameMap, (uint64_t)&re::PbrTextureSource::textureNameMap(void)::linearAllocator, 14);
    for (i = 0; i != 14; ++i)
    {
      v4 = re::s_pbrTextureNames[i];
      v5 = *v4;
      if (*v4)
      {
        v6 = v4[1];
        if (v6)
        {
          v7 = (unsigned __int8 *)(v4 + 2);
          do
          {
            v5 = 31 * v5 + v6;
            v8 = *v7++;
            v6 = v8;
          }
          while (v8);
        }
        v5 &= ~0x8000000000000000;
      }
      v11 = v5;
      LOBYTE(v10) = 0;
      HIBYTE(v10) = i;
      re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::addNew((_anonymous_namespace_ *)re::PbrTextureSource::textureNameMap(void)::nameMap, &v11, &v10);
    }
    re::PbrTextureSource::textureNameMap(void)::initialized = 1;
  }
  return re::PbrTextureSource::textureNameMap(void)::nameMap;
}

uint64_t re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::~HashBrown(uint64_t a1)
{
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit(a1);
  return a1;
}

uint64_t re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::addNew(_anonymous_namespace_ *a1, _QWORD *a2, __int16 *a3)
{
  uint64_t v6;

  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::internalAdd(a1, a2, a3);
  else
    return *((_QWORD *)a1 + 1) + 16 * v6 + 8;
}

uint64_t re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v21;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::resize((__int128 *)a1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v11;
  v21 = *((_WORD *)a3 + 2);
  v17 = *a3;
  v18 = *((_QWORD *)a1 + 1) + 16 * v16;
  *(_QWORD *)v18 = *a2;
  *(_DWORD *)(v18 + 8) = v17;
  *(_BYTE *)(v18 + 12) = v21;
  v19 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v19;
  re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::updateHashes((uint64_t)a1, *((_QWORD *)a1 + 1) + 16 * v16);
  return *((_QWORD *)a1 + 1) + 16 * v16 + 8;
}

void re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::resize(__int128 *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _anonymous_namespace_ *updated;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int8x16_t v14;
  unsigned __int16 v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  __int128 v50;
  _OWORD v51[3];
  __int16 v52;

  v3 = *((_QWORD *)a1 + 2);
  v2 = *((_QWORD *)a1 + 3);
  v4 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v5 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v4 > (192 * v3) >> 7)
    v5 = (((unint64_t)(151 * (v2 + 1)) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = (v5 << 7) / 0x97;
  v7 = *((_QWORD *)a1 + 7);
  v50 = 0u;
  v51[0] = 0u;
  if (v4 <= v3)
    v8 = v2 + 1;
  else
    v8 = v6;
  memset(&v51[1], 0, 32);
  updated = (_anonymous_namespace_ *)re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::init(&v50, v7, v8);
  v11 = *((_QWORD *)a1 + 2);
  if (v11 >= 0x10)
  {
    v12 = 0;
    v13 = v11 >> 4;
    v14 = (int8x16_t)xmmword_2260EE390;
    while (1)
    {
      v15 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v12)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v16 = (unsigned __int16)~v15;
      if (v15 != 0xFFFF)
        break;
      v12 += 16;
      if (!--v13)
        goto LABEL_12;
    }
    v17 = __clz(__rbit64(v16)) + v12;
    while (v17 != -1)
    {
      v24 = *((_QWORD *)a1 + 1);
      if (*((_QWORD *)&v51[2] + 1))
      {
        v25 = *(_QWORD *)&v51[1];
        if (!*(_QWORD *)&v51[1])
          goto LABEL_38;
      }
      else
      {
        *(_QWORD *)&v51[0] = 16;
        *(_QWORD *)&v46 = -1;
        *((_QWORD *)&v46 + 1) = -1;
        *(_OWORD *)v50 = v46;
        *((_QWORD *)&v50 + 1) = v50 + 16;
        if (*(_QWORD *)&v51[0])
        {
          v47 = 0;
          v48 = 0;
          do
          {
            v49 = (_QWORD *)(*((_QWORD *)&v50 + 1) + v47);
            *(_QWORD *)((char *)v49 + 6) = 0;
            *v49 = 0;
            ++v48;
            v25 = *(_QWORD *)&v51[0];
            v47 += 16;
          }
          while (v48 < *(_QWORD *)&v51[0]);
        }
        else
        {
          v25 = 0;
        }
        v14 = (int8x16_t)xmmword_2260EE390;
        *(_QWORD *)&v51[2] = 0;
        *((_QWORD *)&v51[0] + 1) = 0;
        v51[1] = v25;
        if (!v25)
        {
LABEL_38:
          re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::resize(&v50);
          v14 = (int8x16_t)xmmword_2260EE390;
          v26 = *(_QWORD *)&v51[0];
          goto LABEL_16;
        }
      }
      v26 = *(_QWORD *)&v51[0];
      if (*(_QWORD *)&v51[0] > 8 * v25)
        goto LABEL_38;
LABEL_16:
      v27 = (uint64_t *)(v24 + 16 * v17);
      v28 = v27 + 1;
      v29 = 0xBF58476D1CE4E5B9 * (*v27 ^ ((unint64_t)*v27 >> 30));
      v30 = (0x94D049BB133111EBLL * (v29 ^ (v29 >> 27))) ^ ((0x94D049BB133111EBLL * (v29 ^ (v29 >> 27))) >> 31);
      v31 = v26 >> 4;
      v32 = v30 % (v26 >> 4);
      v33 = v32;
      while (1)
      {
        v34 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v50 + 16 * v33)), v14)))), (int8x8_t)0x3830282018100800)));
        if (v34 < 0x40)
          break;
        if (v33 + 1 == v31)
          v33 = 0;
        else
          ++v33;
        if (v33 == v32)
        {
          re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
          _os_crash();
          __break(1u);
          return;
        }
      }
      v35 = v50 + 16 * v33;
      v36 = *(unsigned __int8 *)(v35 + v34) == 255;
      *(_BYTE *)(v35 + v34) = v30 & 0x7F;
      v37 = v34 + 16 * v33;
      v38 = *v27;
      v52 = *((_WORD *)v28 + 2);
      v39 = *(_DWORD *)v28;
      v40 = *((_QWORD *)&v50 + 1) + 16 * v37;
      *(_QWORD *)v40 = v38;
      *(_DWORD *)(v40 + 8) = v39;
      *(_BYTE *)(v40 + 12) = v52;
      ++*((_QWORD *)&v51[0] + 1);
      *(_QWORD *)&v51[1] -= v36;
      updated = (_anonymous_namespace_ *)re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::updateHashes((uint64_t)&v50, *((_QWORD *)&v50 + 1) + 16 * v37);
      v41 = v17 >> 4;
      v11 = *((_QWORD *)a1 + 2);
      if (v17 >> 4 >= v11 >> 4)
        break;
      v42 = __clz(__rbit64((-2 << (v17 & 0xF)) & v16));
      if (v42 >= 0x40)
      {
        v43 = 16 * v41;
        v44 = ~v41 + (v11 >> 4);
        v14 = (int8x16_t)xmmword_2260EE390;
        while (v44)
        {
          v16 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + v43 + 16)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
          v45 = __clz(__rbit64(v16));
          v43 += 16;
          --v44;
          if (v45 <= 0x3F)
          {
            v17 = v45 + v43;
            goto LABEL_30;
          }
        }
        break;
      }
      v17 = v42 + (v17 & 0xFFFFFFFFFFFFFFF0);
      v14 = (int8x16_t)xmmword_2260EE390;
LABEL_30:
      ;
    }
  }
LABEL_12:
  v18 = *((_QWORD *)&v51[2] + 1);
  *((_QWORD *)&v51[2] + 1) = *((_QWORD *)a1 + 7);
  v19 = v50;
  v20 = v51[0];
  v50 = *a1;
  *(_QWORD *)&v51[0] = v11;
  v21 = v51[1];
  v22 = *(__int128 *)((char *)a1 + 40);
  *((_QWORD *)a1 + 6) = *(_QWORD *)&v51[2];
  *((_QWORD *)a1 + 7) = v18;
  *(_OWORD *)((char *)&v51[1] + 8) = v22;
  v23 = *(__int128 *)((char *)a1 + 24);
  *a1 = v19;
  a1[1] = v20;
  a1[2] = v21;
  *(_OWORD *)((char *)v51 + 8) = v23;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)&v50);
}

uint64_t re::HashBrown<re::WeakStringID,re::LocationWithType,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::LocationWithType>,false>::updateHashes(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;

  v2 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)a2 ^ (*(_QWORD *)a2 >> 30));
  v3 = (0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31);
  v4 = v3 ^ *(_QWORD *)(result + 40);
  v5 = 0xBF58476D1CE4E5B9
     * ((*(unsigned __int16 *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 11) << 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 10) << 16)) ^ ((unint64_t)*(unsigned __int8 *)(a2 + 11) >> 6));
  v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  v7 = 73244475
     * ((73244475 * *(unsigned __int8 *)(a2 + 12)) ^ ((73244475 * *(unsigned __int8 *)(a2 + 12)) >> 16));
  v8 = *(_QWORD *)(result + 48) ^ v3 ^ ((v3 << 6)
                                      + (v3 >> 2)
                                      - 0x61C8864680B583E9
                                      + (((v7 ^ HIWORD(v7)) + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9) ^ v6));
  *(_QWORD *)(result + 40) = v4;
  *(_QWORD *)(result + 48) = v8;
  return result;
}

void re::RenderGraphExecutable::execute(re::RenderGraphExecutable *this, re::RenderGraphContext *a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[16];
  uint64_t v36;
  int v37;
  const char *v38;
  __int16 v39;
  int v40;
  __int16 v41;
  _QWORD *v42;
  __int16 v43;
  _QWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v35, 5018, *(_QWORD *)(*((_QWORD *)this + 17) + 392));
  v4 = (_QWORD *)*((_QWORD *)this + 17);
  if (v4[49])
  {
    v5 = 0;
    while (1)
    {
      v6 = (_QWORD *)*(unsigned int *)(v4[51] + 4 * v5);
      *((_DWORD *)a2 + 12) = (_DWORD)v6;
      v7 = (_QWORD *)v4[44];
      if (v7 <= v6)
        goto LABEL_47;
      v8 = v4[46] + 192 * v6;
      if (!*(_QWORD *)(v8 + 16))
        goto LABEL_48;
      *((_QWORD *)a2 + 5) = **(_QWORD **)(v8 + 32);
      re::RenderGraphResourceAllocationManager::startSetup(*((_QWORD *)a2 + 4));
      re::RenderGraphContext::allocateRenderTargetsBeforeSetup(a2);
      re::RenderGraphContext::checkForReadAfterWriteDependenciesWait(a2);
      v9 = *((_QWORD *)this + 17);
      v6 = (_QWORD *)*((unsigned int *)a2 + 12);
      v7 = *(_QWORD **)(v9 + 352);
      if (v7 <= v6)
        goto LABEL_49;
      v10 = *(_QWORD *)(v9 + 368) + 192 * v6;
      v11 = *(_QWORD *)(v10 + 16);
      if (v11)
        break;
LABEL_25:
      re::RenderGraphContext::handleManagedForceClear(a2);
      v29 = *((_QWORD *)this + 17);
      v6 = (_QWORD *)*((unsigned int *)a2 + 12);
      v7 = *(_QWORD **)(v29 + 352);
      if (v7 <= v6)
        goto LABEL_50;
      v30 = *(_QWORD *)(v29 + 368) + 192 * v6;
      v31 = *(_QWORD *)(v30 + 16);
      if (v31)
      {
        v32 = *(uint64_t **)(v30 + 32);
        v33 = 8 * v31;
        do
        {
          v34 = *v32;
          *((_QWORD *)a2 + 5) = *v32;
          if (re::RenderGraphContext::setupUsesCustomEncoders(a2))
            re::RenderGraphContext::releaseManagedEncoder(a2, 1);
          (*(void (**)(uint64_t, re::RenderGraphContext *))(*(_QWORD *)v34 + 104))(v34, a2);
          if ((re::RenderGraphContext::setupUsesCustomEncoders(a2) & 1) == 0
            && re::RenderGraphContext::isSetupParallel(a2))
          {
            re::RenderGraphContext::releaseManagedRenderEncodersFromParallelEncoder(a2);
          }
          ++v32;
          v33 -= 8;
        }
        while (v33);
      }
      if ((re::RenderGraphContext::setupUsesCustomEncoders(a2) & 1) == 0)
      {
        if (re::GraphicsFeatureFlags::mergeComputeEncoders(void)::onceToken != -1)
          dispatch_once(&re::GraphicsFeatureFlags::mergeComputeEncoders(void)::onceToken, &__block_literal_global_5_1);
        if (re::GraphicsFeatureFlags::mergeComputeEncoders(void)::gMergeComputeEncoders && *((_DWORD *)a2 + 296) == 1)
          re::RenderGraphResourceAllocationManager::addCompleteFence(*((re::RenderGraphResourceAllocationManager **)a2 + 4), *((re::mtl::ComputeCommandEncoder **)a2 + 150));
        else
          re::RenderGraphContext::releaseManagedEncoder(a2, 1);
      }
      re::RenderGraphContext::releaseRenderTargetsAfterSetup(a2);
      ++v5;
      v4 = (_QWORD *)*((_QWORD *)this + 17);
      if (v5 >= v4[49])
        goto LABEL_42;
    }
    v12 = 0;
    v6 = *(_QWORD **)(v10 + 32);
    v7 = &v6[v11];
    while (1)
    {
      v13 = *v6;
      (*(void (**)(_QWORD, re::RenderGraphContext *))(*(_QWORD *)*v6 + 96))(*v6, a2);
      if ((v12 & 1) == 0)
      {
        v14 = *((_QWORD *)this + 17);
        v15 = (_QWORD *)*((unsigned int *)a2 + 12);
        v16 = *(_QWORD **)(v14 + 352);
        if (v16 <= v15)
          goto LABEL_46;
        v17 = *(_QWORD *)(v14 + 368) + 192 * v15;
        *(_BYTE *)(v17 + 171) = *(_BYTE *)(v13 + 67);
        *(_QWORD *)(v17 + 176) = *(_QWORD *)(v13 + 72);
        *(_BYTE *)(v17 + 184) = *(_BYTE *)(v13 + 80);
        v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
        if (v19)
          break;
      }
LABEL_24:
      ++v6;
      v12 = 1;
      if (v6 == v7)
        goto LABEL_25;
    }
    v20 = v18 + (v19 << 6);
    while (1)
    {
      v21 = *((_QWORD *)this + 17);
      v22 = (_QWORD *)*((unsigned int *)a2 + 12);
      v15 = *(_QWORD **)(v21 + 352);
      if (v15 <= v22)
        break;
      v23 = *(_QWORD *)(v21 + 368) + 192 * v22;
      v24 = *(_QWORD *)(v23 + 56);
      if (v24)
      {
        v25 = *(_QWORD *)(v23 + 72);
        v26 = v24 << 6;
        do
        {
          v27 = *(_DWORD *)(v18 + 20);
          if (v27 == *(_DWORD *)(v25 + 4) && (v27 - 1) <= 2 && *(_DWORD *)(v18 + 16) == *(_DWORD *)v25)
            *(_OWORD *)(v25 + 16) = *(_OWORD *)(v18 + 32);
          v25 += 64;
          v26 -= 64;
        }
        while (v26);
      }
      v18 += 64;
      if (v18 == v20)
        goto LABEL_24;
    }
    v36 = 0;
    v49 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v37 = 136315906;
    v38 = "operator[]";
    v39 = 1024;
    v40 = 789;
    v41 = 2048;
    v42 = v22;
    v43 = 2048;
    v44 = v15;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_46:
    v36 = 0;
    v49 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v37 = 136315906;
    v38 = "operator[]";
    v39 = 1024;
    v40 = 789;
    v41 = 2048;
    v42 = v15;
    v43 = 2048;
    v44 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_47:
    v36 = 0;
    v49 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v37 = 136315906;
    v38 = "operator[]";
    v39 = 1024;
    v40 = 789;
    v41 = 2048;
    v42 = v6;
    v43 = 2048;
    v44 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_48:
    v36 = 0;
    v49 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v37 = 136315906;
    v38 = "operator[]";
    v39 = 1024;
    v40 = 789;
    v41 = 2048;
    v42 = 0;
    v43 = 2048;
    v44 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_49:
    v36 = 0;
    v49 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v37 = 136315906;
    v38 = "operator[]";
    v39 = 1024;
    v40 = 789;
    v41 = 2048;
    v42 = v6;
    v43 = 2048;
    v44 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_50:
    v36 = 0;
    v49 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v37 = 136315906;
    v38 = "operator[]";
    v39 = 1024;
    v40 = 789;
    v41 = 2048;
    v42 = v6;
    v43 = 2048;
    v44 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_42:
  if (*((_DWORD *)a2 + 296) != 4)
    re::RenderGraphContext::releaseManagedEncoder(a2, 1);
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v35);
}

uint64_t re::RenderGraphExecutable::validateAttachmentsPerFrame(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(result + 136);
  v3 = *(_QWORD *)(v2 + 392);
  if (v3)
  {
    v5 = result;
    v6 = *(unsigned int **)(v2 + 408);
    v7 = &v6[v3];
    while (1)
    {
      v8 = *(_QWORD *)(v5 + 136);
      v9 = *v6;
      if (*(_QWORD *)(v8 + 352) <= v9)
        goto LABEL_11;
      v10 = *(_QWORD *)(v8 + 368);
      v11 = v10 + 192 * v9;
      v12 = *(_QWORD *)(v11 + 96);
      if (v12)
        break;
LABEL_8:
      if (++v6 == v7)
        return result;
    }
    v13 = *(_QWORD **)(v11 + 112);
    v14 = v10 + 192 * v9;
    v15 = 8 * v12;
    while (*(_QWORD *)(v14 + 16) > *v13)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 8 * *v13);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 112))(v16, v5, a2);
      ++v13;
      v15 -= 8;
      if (!v15)
        goto LABEL_8;
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_11:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

unint64_t re::RenderGraphExecutable::calculateResourcePropertiesHash(re::RenderGraphExecutable *this)
{
  uint64_t v1;
  unsigned int *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v2 = (unsigned int *)(*((_QWORD *)this + 2) + 44);
    v3 = 31;
    do
    {
      v4 = 0xBF58476D1CE4E5B9 * ((int)*(v2 - 11) ^ ((unint64_t)(int)*(v2 - 11) >> 30));
      v5 = 0xBF58476D1CE4E5B9 * ((int)*(v2 - 10) ^ ((unint64_t)(int)*(v2 - 10) >> 30));
      v6 = ((v3 << 6)
          - 0x61C8864680B583E9
          + (v3 >> 2)
          + ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))) ^ v3;
      v7 = ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31))
         - 0x61C8864680B583E9
         + (v6 << 6);
      v8 = 0xBF58476D1CE4E5B9 * ((int)*(v2 - 9) ^ ((unint64_t)(int)*(v2 - 9) >> 30));
      v9 = (v7 + (v6 >> 2)) ^ v6;
      v10 = ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31))
          - 0x61C8864680B583E9
          + (v9 << 6)
          + (v9 >> 2);
      v11 = 0xBF58476D1CE4E5B9 * (*(v2 - 8) ^ ((unint64_t)*(v2 - 8) >> 30));
      v12 = v10 ^ v9;
      v13 = ((0x94D049BB133111EBLL * (v11 ^ (v11 >> 27))) ^ ((0x94D049BB133111EBLL * (v11 ^ (v11 >> 27))) >> 31))
          - 0x61C8864680B583E9
          + (v12 << 6);
      v14 = 0xBF58476D1CE4E5B9 * (*(v2 - 7) ^ ((unint64_t)*(v2 - 7) >> 30));
      v15 = (((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) ^ ((0x94D049BB133111EBLL * (v14 ^ (v14 >> 27))) >> 31))
           - 0x61C8864680B583E9
           + (((v13 + (v12 >> 2)) ^ v12) << 6)
           + (((v13 + (v12 >> 2)) ^ v12) >> 2)) ^ (v13 + (v12 >> 2)) ^ v12;
      v16 = 0xBF58476D1CE4E5B9 * (*(v2 - 6) ^ ((unint64_t)*(v2 - 6) >> 30));
      v17 = 0xBF58476D1CE4E5B9 * (*(v2 - 5) ^ ((unint64_t)*(v2 - 5) >> 30));
      v18 = (((0x94D049BB133111EBLL * (v16 ^ (v16 >> 27))) ^ ((0x94D049BB133111EBLL * (v16 ^ (v16 >> 27))) >> 31))
           - 0x61C8864680B583E9
           + (v15 << 6)
           + (v15 >> 2)) ^ v15;
      v19 = ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) ^ ((0x94D049BB133111EBLL * (v17 ^ (v17 >> 27))) >> 31))
          - 0x61C8864680B583E9
          + (v18 << 6)
          + (v18 >> 2);
      v20 = 0xBF58476D1CE4E5B9 * (*(v2 - 4) ^ ((unint64_t)*(v2 - 4) >> 30));
      v21 = (((0x94D049BB133111EBLL * (v20 ^ (v20 >> 27))) ^ ((0x94D049BB133111EBLL * (v20 ^ (v20 >> 27))) >> 31))
           - 0x61C8864680B583E9
           + ((v19 ^ v18) << 6)
           + ((v19 ^ v18) >> 2)) ^ v19 ^ v18;
      v22 = 0xBF58476D1CE4E5B9 * (*(v2 - 3) ^ ((unint64_t)*(v2 - 3) >> 30));
      v23 = 0xBF58476D1CE4E5B9 * (*(v2 - 1) ^ ((unint64_t)*(v2 - 1) >> 30));
      v24 = (((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) ^ ((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) >> 31))
           - 0x61C8864680B583E9
           + (v21 << 6)
           + (v21 >> 2)) ^ v21;
      v25 = ((0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) ^ ((0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) >> 31))
          - 0x61C8864680B583E9
          + (v24 << 6);
      v26 = 0xBF58476D1CE4E5B9 * (*v2 ^ ((unint64_t)*v2 >> 30));
      v27 = (((0x94D049BB133111EBLL * (v26 ^ (v26 >> 27))) ^ ((0x94D049BB133111EBLL * (v26 ^ (v26 >> 27))) >> 31))
           - 0x61C8864680B583E9
           + (((v25 + (v24 >> 2)) ^ v24) << 6)
           + (((v25 + (v24 >> 2)) ^ v24) >> 2)) ^ (v25 + (v24 >> 2)) ^ v24;
      v28 = 0xBF58476D1CE4E5B9 * ((int)v2[1] ^ ((unint64_t)(int)v2[1] >> 30));
      v29 = 0xBF58476D1CE4E5B9 * ((int)v2[2] ^ ((unint64_t)(int)v2[2] >> 30));
      v30 = (((0x94D049BB133111EBLL * (v28 ^ (v28 >> 27))) ^ ((0x94D049BB133111EBLL * (v28 ^ (v28 >> 27))) >> 31))
           - 0x61C8864680B583E9
           + (v27 << 6)
           + (v27 >> 2)) ^ v27;
      v31 = ((0x94D049BB133111EBLL * (v29 ^ (v29 >> 27))) ^ ((0x94D049BB133111EBLL * (v29 ^ (v29 >> 27))) >> 31))
          - 0x61C8864680B583E9
          + (v30 << 6);
      v32 = 0xBF58476D1CE4E5B9 * (v2[5] ^ ((unint64_t)v2[5] >> 30));
      v33 = (((0x94D049BB133111EBLL * (v32 ^ (v32 >> 27))) ^ ((0x94D049BB133111EBLL * (v32 ^ (v32 >> 27))) >> 31))
           - 0x61C8864680B583E9
           + (((v31 + (v30 >> 2)) ^ v30) << 6)
           + (((v31 + (v30 >> 2)) ^ v30) >> 2)) ^ (v31 + (v30 >> 2)) ^ v30;
      v34 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((int)v2[6] ^ ((unint64_t)(int)v2[6] >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                            * ((int)v2[6] ^ ((unint64_t)(int)v2[6] >> 30))) >> 27));
      v35 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)(v2 + 11) ^ (*(_QWORD *)(v2 + 11) >> 30));
      v36 = ((v34 ^ (v34 >> 31)) - 0x61C8864680B583E9 + (v33 << 6) + (v33 >> 2)) ^ v33;
      v37 = ((0x94D049BB133111EBLL * (v35 ^ (v35 >> 27))) ^ ((0x94D049BB133111EBLL * (v35 ^ (v35 >> 27))) >> 31))
          - 0x61C8864680B583E9
          + (v36 << 6)
          + (v36 >> 2);
      if ((v2[6] & 0x70) == 0x30)
        v38 = 0xBF58476D1CE4E5B9;
      else
        v38 = 0;
      v3 = (((0x94D049BB133111EBLL * (v38 ^ (v38 >> 27))) ^ ((0x94D049BB133111EBLL * (v38 ^ (v38 >> 27))) >> 31))
          - 0x61C8864680B583E9
          + ((v37 ^ v36) << 6)
          + ((v37 ^ v36) >> 2)) ^ v37 ^ v36;
      v2 += 28;
      --v1;
    }
    while (v1);
  }
  else
  {
    v3 = 31;
  }
  v39 = *((_QWORD *)this + 4);
  if (v39)
  {
    v40 = (unsigned int *)(*((_QWORD *)this + 5) + 20);
    do
    {
      v41 = 0xBF58476D1CE4E5B9 * ((int)*(v40 - 5) ^ ((unint64_t)(int)*(v40 - 5) >> 30));
      v42 = ((v3 << 6)
           - 0x61C8864680B583E9
           + (v3 >> 2)
           + ((0x94D049BB133111EBLL * (v41 ^ (v41 >> 27))) ^ ((0x94D049BB133111EBLL * (v41 ^ (v41 >> 27))) >> 31))) ^ v3;
      v43 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)(v40 - 3) ^ (*(_QWORD *)(v40 - 3) >> 30));
      v44 = (((0x94D049BB133111EBLL * (v43 ^ (v43 >> 27))) ^ ((0x94D049BB133111EBLL * (v43 ^ (v43 >> 27))) >> 31))
           - 0x61C8864680B583E9
           + (v42 << 6)
           + (v42 >> 2)) ^ v42;
      v45 = 0xBF58476D1CE4E5B9 * (*v40 ^ ((unint64_t)*v40 >> 30));
      v46 = (((0x94D049BB133111EBLL * (v45 ^ (v45 >> 27))) ^ ((0x94D049BB133111EBLL * (v45 ^ (v45 >> 27))) >> 31))
           - 0x61C8864680B583E9
           + (v44 << 6)
           + (v44 >> 2)) ^ v44;
      v47 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((int)v40[1] ^ ((unint64_t)(int)v40[1] >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                              * ((int)v40[1] ^ ((unint64_t)(int)v40[1] >> 30))) >> 27));
      v48 = ((v47 ^ (v47 >> 31)) - 0x61C8864680B583E9 + (v46 << 6) + (v46 >> 2)) ^ v46;
      v49 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)(v40 + 3) ^ (*(_QWORD *)(v40 + 3) >> 30));
      v50 = (((0x94D049BB133111EBLL * (v49 ^ (v49 >> 27))) ^ ((0x94D049BB133111EBLL * (v49 ^ (v49 >> 27))) >> 31))
           - 0x61C8864680B583E9
           + (v48 << 6)
           + (v48 >> 2)) ^ v48;
      if ((v40[1] & 0x70) == 0x30)
        v51 = 0xBF58476D1CE4E5B9;
      else
        v51 = 0;
      v3 = (((0x94D049BB133111EBLL * (v51 ^ (v51 >> 27))) ^ ((0x94D049BB133111EBLL * (v51 ^ (v51 >> 27))) >> 31))
          - 0x61C8864680B583E9
          + (v50 << 6)
          + (v50 >> 2)) ^ v50;
      v40 += 12;
      --v39;
    }
    while (v39);
  }
  return v3;
}

void re::RenderLayer::invalidate(re::RenderLayer *this)
{
  void *v2;

  v2 = *(void **)this;
  *(_QWORD *)this = 0;

  if (*((_BYTE *)this + 8))
    *((_BYTE *)this + 8) = 0;
  if (*((_BYTE *)this + 20))
    *((_BYTE *)this + 20) = 0;
}

re::RenderGraphNodeCombineProcessor *re::RenderGraphNodeCombineProcessor::RenderGraphNodeCombineProcessor(re::RenderGraphNodeCombineProcessor *this, const char *a2)
{
  const char *v3;
  re *v4;
  const char *v5;
  BOOL v6;
  re *v7;
  const char *v8;
  NSObject *v9;
  uint8_t v12[4];
  int v13;

  *(_QWORD *)this = &off_24ED75A30;
  *((_BYTE *)this + 8) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 0;
  re::RenderGraphEncoderSplitLogBuffer::RenderGraphEncoderSplitLogBuffer((re::RenderGraphNodeCombineProcessor *)((char *)this + 32), a2);
  re::Defaults::intValue((re::Defaults *)"encoderSplitLoggingPerFrame", v3, (uint64_t)v12);
  if (v12[0])
    v6 = v13 == 0;
  else
    v6 = 1;
  if (v6)
  {
    re::Defaults::intValue((re::Defaults *)"encoderSplitLoggingOnChange", v5, (uint64_t)v12);
    if (v12[0] && v13)
    {
      *((_BYTE *)this + 80) = 1;
      v9 = *re::graphicsLogObjects(v7);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v12 = 0;
        v8 = "Encoder Split: Logging OnChange.";
LABEL_14:
        _os_log_impl(&dword_224FE9000, v9, OS_LOG_TYPE_DEFAULT, v8, v12, 2u);
      }
    }
    else
    {
      *((_BYTE *)this + 80) = 0;
      v9 = *re::graphicsLogObjects(v7);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v12 = 0;
        v8 = "Encoder Split: Logging Disabled.";
        goto LABEL_14;
      }
    }
  }
  else
  {
    *((_BYTE *)this + 80) = 2;
    v9 = *re::graphicsLogObjects(v4);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v12 = 0;
      v8 = "Encoder Split: Logging PerFrame.";
      goto LABEL_14;
    }
  }
  return this;
}

uint64_t re::RenderGraphNodeCombineProcessor::process(re::RenderGraphNodeCombineProcessor *this, re::RenderGraphCompiled *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int v13;
  re::RenderGraphCompiled *v14;
  int v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int *v21;
  uint64_t v22;
  __int128 *v23;
  __n128 v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __int128 *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  re::RenderGraphCompiled *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  int v66;
  uint64_t *v67;
  int v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  re::RenderGraphNodeCombineProcessor *v79;
  int v80;
  uint64_t v81;
  unsigned int v82;
  char v83;
  uint64_t v84;
  unsigned int v85;
  int v86;
  int v87;
  unsigned int *v88;
  unsigned int *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int *v92;
  unsigned int *v93;
  int v94;
  uint64_t v95;
  _QWORD v96[2];
  uint64_t v97;
  int v98;
  _QWORD *v99;
  _QWORD v100[2];
  uint64_t v101;
  int v102;
  _QWORD *v103;
  _QWORD v104[3];
  int v105;
  __int128 v106;
  __int128 v107;
  int v108;
  __int128 v109;
  __int128 v110;
  int v111;
  __int128 v112;
  __int128 v113;
  int v114;
  _BYTE v115[44];
  uint64_t v116;
  _QWORD v117[2];
  uint64_t v118;
  int v119;
  unint64_t v120;
  unsigned int *v121;
  unint64_t v122;
  uint64_t v123[4];
  int v124;
  uint64_t v125;
  uint64_t v126[4];
  int v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  _BYTE v134[44];
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  memset(v104, 0, sizeof(v104));
  v105 = 0;
  v106 = 0u;
  v107 = 0u;
  v109 = 0u;
  v110 = 0u;
  v108 = 0;
  v111 = 0;
  v112 = 0u;
  v113 = 0u;
  v114 = 0;
  memset(v115, 0, sizeof(v115));
  v116 = 0x7FFFFFFFLL;
  if (!*((_QWORD *)a2 + 49))
    goto LABEL_30;
  if (*((_BYTE *)this + 80))
  {
    *((_BYTE *)this + 8) = 1;
    re::RenderGraphEncoderSplitLogBuffer::clear((uint64_t)this + 32);
    if (!*((_QWORD *)a2 + 49))
      goto LABEL_228;
  }
  v4 = **((unsigned int **)a2 + 51);
  v5 = *((_QWORD *)a2 + 44);
  if (v5 <= v4)
    goto LABEL_220;
  v6 = *((_QWORD *)a2 + 46) + 192 * v4;
  v103 = 0;
  v100[1] = 0;
  v101 = 0;
  v100[0] = 0;
  v102 = 0;
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_221:
    v126[0] = 0;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v129 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v134 = 136315906;
    *(_QWORD *)&v134[4] = "operator[]";
    *(_WORD *)&v134[12] = 1024;
    *(_DWORD *)&v134[14] = 789;
    *(_WORD *)&v134[18] = 2048;
    *(_QWORD *)&v134[20] = 0;
    *(_WORD *)&v134[28] = 2048;
    *(_QWORD *)&v134[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_222:
    v126[0] = 0;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v129 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v134 = 136315906;
    *(_QWORD *)&v134[4] = "operator[]";
    *(_WORD *)&v134[12] = 1024;
    *(_DWORD *)&v134[14] = 789;
    *(_WORD *)&v134[18] = 2048;
    *(_QWORD *)&v134[20] = 0;
    *(_WORD *)&v134[28] = 2048;
    *(_QWORD *)&v134[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_223:
    v126[0] = 0;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v129 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v134 = 136315906;
    *(_QWORD *)&v134[4] = "operator[]";
    *(_WORD *)&v134[12] = 1024;
    *(_DWORD *)&v134[14] = 789;
    *(_WORD *)&v134[18] = 2048;
    *(_QWORD *)&v134[20] = 0;
    *(_WORD *)&v134[28] = 2048;
    *(_QWORD *)&v134[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_224;
  }
  if ((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v6 + 32) + 16))(**(_QWORD **)(v6 + 32)))
  {
    if (!*(_QWORD *)(v6 + 16))
    {
LABEL_229:
      v126[0] = 0;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v134 = 136315906;
      *(_QWORD *)&v134[4] = "operator[]";
      *(_WORD *)&v134[12] = 1024;
      *(_DWORD *)&v134[14] = 789;
      *(_WORD *)&v134[18] = 2048;
      *(_QWORD *)&v134[20] = 0;
      *(_WORD *)&v134[28] = 2048;
      *(_QWORD *)&v134[30] = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_230;
    }
    *(_QWORD *)&v129 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v6 + 32) + 16))(**(_QWORD **)(v6 + 32));
    re::DynamicArray<re::TransitionCondition *>::add(v100, &v129);
  }
  v99 = 0;
  v96[1] = 0;
  v97 = 0;
  v96[0] = 0;
  v98 = 0;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_222;
  if ((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v6 + 32) + 24))(**(_QWORD **)(v6 + 32)))
  {
    if (!*(_QWORD *)(v6 + 16))
    {
LABEL_230:
      v126[0] = 0;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v134 = 136315906;
      *(_QWORD *)&v134[4] = "operator[]";
      *(_WORD *)&v134[12] = 1024;
      *(_DWORD *)&v134[14] = 789;
      *(_WORD *)&v134[18] = 2048;
      *(_QWORD *)&v134[20] = 0;
      *(_WORD *)&v134[28] = 2048;
      *(_QWORD *)&v134[30] = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_231:
      re::internal::assertLog((re::internal *)5, v9, "assertion failure: '%s' (%s:line %i) Invalid RenderGraphResourceOperationType %d.", "!\"Unreachable code\"", "operator()", 131, v22);
      _os_crash();
      __break(1u);
LABEL_232:
      re::internal::assertLog((re::internal *)5, v9, "assertion failure: '%s' (%s:line %i) Invalid RenderGraphResourceOperationType %d.", "!\"Unreachable code\"", "operator()", 306, v33);
      _os_crash();
      __break(1u);
    }
    *(_QWORD *)&v129 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v6 + 32) + 24))(**(_QWORD **)(v6 + 32));
    re::DynamicArray<re::TransitionCondition *>::add(v96, &v129);
  }
  if (!*((_QWORD *)a2 + 49))
    goto LABEL_223;
  re::DynamicArray<int>::add(v104, *((_DWORD **)a2 + 51));
  if (!*((_QWORD *)a2 + 59))
  {
LABEL_224:
    v126[0] = 0;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v129 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v134 = 136315906;
    *(_QWORD *)&v134[4] = "operator[]";
    *(_WORD *)&v134[12] = 1024;
    *(_DWORD *)&v134[14] = 789;
    *(_WORD *)&v134[18] = 2048;
    *(_QWORD *)&v134[20] = 0;
    *(_WORD *)&v134[28] = 2048;
    *(_QWORD *)&v134[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_225;
  }
  re::DynamicArray<re::DynamicArray<unsigned int>>::add((_anonymous_namespace_ *)((char *)&v109 + 8), *((uint64_t **)a2 + 61));
  if (!*((_QWORD *)a2 + 64))
  {
LABEL_225:
    v126[0] = 0;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v129 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v134 = 136315906;
    *(_QWORD *)&v134[4] = "operator[]";
    *(_WORD *)&v134[12] = 1024;
    *(_DWORD *)&v134[14] = 789;
    *(_WORD *)&v134[18] = 2048;
    *(_QWORD *)&v134[20] = 0;
    *(_WORD *)&v134[28] = 2048;
    *(_QWORD *)&v134[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_226;
  }
  re::DynamicArray<re::DynamicArray<unsigned int>>::add((_anonymous_namespace_ *)((char *)&v112 + 8), *((uint64_t **)a2 + 66));
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_226:
    v126[0] = 0;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v129 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v134 = 136315906;
    *(_QWORD *)&v134[4] = "operator[]";
    *(_WORD *)&v134[12] = 1024;
    *(_DWORD *)&v134[14] = 789;
    *(_WORD *)&v134[18] = 2048;
    *(_QWORD *)&v134[20] = 0;
    *(_WORD *)&v134[28] = 2048;
    *(_QWORD *)&v134[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_227;
  }
  if (!*((_QWORD *)a2 + 49))
  {
LABEL_227:
    v126[0] = 0;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v129 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v134 = 136315906;
    *(_QWORD *)&v134[4] = "operator[]";
    *(_WORD *)&v134[12] = 1024;
    *(_DWORD *)&v134[14] = 789;
    *(_WORD *)&v134[18] = 2048;
    *(_QWORD *)&v134[20] = 0;
    *(_WORD *)&v134[28] = 2048;
    *(_QWORD *)&v134[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_228:
    v126[0] = 0;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v129 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v134 = 136315906;
    *(_QWORD *)&v134[4] = "operator[]";
    *(_WORD *)&v134[12] = 1024;
    *(_DWORD *)&v134[14] = 789;
    *(_WORD *)&v134[18] = 2048;
    *(_QWORD *)&v134[20] = 0;
    *(_WORD *)&v134[28] = 2048;
    *(_QWORD *)&v134[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_229;
  }
  v79 = this;
  v7 = (char *)a2 + 656;
  v8 = *(uint64_t **)(v6 + 32);
  *(_QWORD *)&v129 = **((unsigned int **)a2 + 51);
  re::HashTable<re::RenderGraphNodeBase *,re::NodeSetupIndex,re::Hash<re::RenderGraphNodeBase *>,re::EqualTo<re::RenderGraphNodeBase *>,true,false>::add((uint64_t)a2 + 656, v8, &v129);
  v4 = *((_QWORD *)a2 + 49);
  if (v4 == 1)
    goto LABEL_19;
  v82 = 0;
  LODWORD(v17) = 0;
LABEL_39:
  v17 = (v17 + 1);
  if (v4 <= v17)
  {
    v126[0] = 0;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v129 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v134 = 136315906;
    *(_QWORD *)&v134[4] = "operator[]";
    *(_WORD *)&v134[12] = 1024;
    *(_DWORD *)&v134[14] = 789;
    *(_WORD *)&v134[18] = 2048;
    *(_QWORD *)&v134[20] = v17;
    *(_WORD *)&v134[28] = 2048;
    *(_QWORD *)&v134[30] = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_206:
    v126[0] = 0;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v129 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v134 = 136315906;
    *(_QWORD *)&v134[4] = "operator[]";
    *(_WORD *)&v134[12] = 1024;
    *(_DWORD *)&v134[14] = 789;
    *(_WORD *)&v134[18] = 2048;
    *(_QWORD *)&v134[20] = v5;
    *(_WORD *)&v134[28] = 2048;
    *(_QWORD *)&v134[30] = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_207;
  }
  v5 = *(unsigned int *)(*((_QWORD *)a2 + 51) + 4 * v17);
  v4 = *((_QWORD *)a2 + 44);
  if (v4 <= v5)
    goto LABEL_206;
  v91 = *((_QWORD *)a2 + 46);
  v18 = v91 + 192 * v5;
  v120 = 0;
  v117[1] = 0;
  v118 = 0;
  v117[0] = 0;
  v119 = 0;
  v95 = v18;
  if (*(unsigned __int8 *)(v18 + 169) | *(unsigned __int8 *)(v6 + 169))
  {
    re::RenderGraphEncoderSplitLogManager::logEntry((uint64_t)v79 + 8, 8uLL, (uint64_t)a2, v6, v18, 0, 0);
    goto LABEL_142;
  }
  v85 = v5;
  LODWORD(v131) = 0;
  v129 = 0u;
  v130 = 0u;
  *(_QWORD *)((char *)&v131 + 4) = 0x7FFFFFFFLL;
  memset(v134, 0, 36);
  *(_QWORD *)&v134[36] = 0x7FFFFFFFLL;
  v127 = 0;
  memset(v126, 0, sizeof(v126));
  v128 = 0x7FFFFFFFLL;
  v124 = 0;
  memset(v123, 0, sizeof(v123));
  v125 = 0x7FFFFFFFLL;
  v19 = *(_QWORD *)(v6 + 56);
  if (v19)
  {
    v4 = 0;
    v20 = 0;
    v94 = 0;
    v88 = 0;
    v89 = 0;
    v92 = 0;
    v93 = 0;
    v21 = *(unsigned int **)(v6 + 72);
    v5 = v19 << 6;
    v90 = 0xFFFFFFFFLL;
    while (2)
    {
      v22 = v21[1];
      switch((int)v22)
      {
        case 0:
        case 10:
          v122 = v21[13];
          v121 = v21;
          re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace((uint64_t)v123, (uint64_t *)&v122, &v121);
          goto LABEL_56;
        case 1:
          v122 = *v21;
          v121 = v21;
          v23 = &v129;
          goto LABEL_52;
        case 2:
          v122 = v21[13];
          v121 = v21;
          re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace((uint64_t)v126, (uint64_t *)&v122, &v121);
          v4 = 1;
          v93 = v21;
          goto LABEL_56;
        case 3:
          v122 = v21[13];
          v121 = v21;
          re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace((uint64_t)v126, (uint64_t *)&v122, &v121);
          v4 = 1;
          v92 = v21;
          goto LABEL_56;
        case 4:
        case 11:
          v122 = v21[13];
          v121 = v21;
          re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace((uint64_t)v123, (uint64_t *)&v122, &v121);
          v122 = v21[13];
          v121 = v21;
          re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace((uint64_t)v126, (uint64_t *)&v122, &v121);
          v94 = 1;
          goto LABEL_56;
        case 5:
          v122 = v21[13];
          v121 = v21;
          re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace((uint64_t)v123, (uint64_t *)&v122, &v121);
          v122 = v21[13];
          v121 = v21;
          re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace((uint64_t)v126, (uint64_t *)&v122, &v121);
          v20 = 1;
          goto LABEL_56;
        case 6:
          v122 = *v21;
          v121 = v21;
          v23 = (__int128 *)v134;
LABEL_52:
          re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace((uint64_t)v23, (uint64_t *)&v122, &v121);
          v122 = v21[13];
          v121 = v21;
          re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace((uint64_t)v126, (uint64_t *)&v122, &v121);
          v4 = 1;
          goto LABEL_56;
        case 7:
          v122 = v21[13];
          v121 = v21;
          re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace((uint64_t)v126, (uint64_t *)&v122, &v121);
          v4 = 1;
          v89 = v21;
          goto LABEL_56;
        case 8:
          v122 = v21[13];
          v121 = v21;
          re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace((uint64_t)v126, (uint64_t *)&v122, &v121);
          v4 = 1;
          v88 = v21;
          goto LABEL_56;
        case 9:
          v90 = v21[13];
LABEL_56:
          v21 += 16;
          v5 -= 64;
          if (!v5)
            goto LABEL_60;
          continue;
        default:
          goto LABEL_231;
      }
    }
  }
  v92 = 0;
  v93 = 0;
  v88 = 0;
  v89 = 0;
  v94 = 0;
  v20 = 0;
  v4 = 0;
  v90 = 0xFFFFFFFFLL;
LABEL_60:
  v86 = v20;
  v81 = v6;
  v25 = v91 + 192 * v85;
  v27 = *(_QWORD *)(v25 + 56);
  v26 = (_QWORD *)(v25 + 56);
  if (!v27)
  {
    v29 = 0;
    v87 = 0;
    v84 = 0;
    v83 = 0;
    v80 = 0;
LABEL_111:
    v7 = (char *)a2 + 656;
    v6 = v81;
    if (((v4 | v86 | v94) & 1) != 0 && ((v29 | HIDWORD(v84) | v87) & 1) != 0)
    {
      if ((v4 & v86 & v94 & 1) != 0
        || (v29 & HIDWORD(v84) & v87 & 1) != 0
        || ((v4 ^ v29) & 1) != 0
        || ((v86 ^ HIDWORD(v84)) & 1) != 0
        || ((v94 ^ v87) & 1) != 0)
      {
        v49 = (uint64_t)v79 + 8;
        v50 = 13;
        goto LABEL_128;
      }
      if (!((v93 == 0) | v84 & 1))
      {
        v49 = (uint64_t)v79 + 8;
        v50 = 9;
        goto LABEL_128;
      }
      if (!((v92 == 0) | v83 & 1))
      {
        v49 = (uint64_t)v79 + 8;
        v50 = 10;
        goto LABEL_128;
      }
      if (*(_QWORD *)(v81 + 160) != *(_QWORD *)(v91 + 192 * v85 + 160))
      {
        v49 = (uint64_t)v79 + 8;
        v50 = 14;
        goto LABEL_128;
      }
      if ((((v90 == 0xFFFFFFFFLL) ^ v80) & 1) == 0)
      {
        v49 = (uint64_t)v79 + 8;
        v50 = 12;
        goto LABEL_128;
      }
      if (!((*(_QWORD *)(v81 + 176) == *(_QWORD *)(v91 + 192 * v85 + 176)) | v86 & 1))
      {
        v49 = (uint64_t)v79 + 8;
        v50 = 5;
        goto LABEL_128;
      }
      if (*(_BYTE *)(v81 + 184)
        && *(_BYTE *)(v91 + 192 * v85 + 184)
        && *(unsigned __int8 *)(v81 + 184) != *(unsigned __int8 *)(v91 + 192 * v85 + 184))
      {
        v49 = (uint64_t)v79 + 8;
        v50 = 6;
LABEL_128:
        re::RenderGraphEncoderSplitLogManager::logEntry(v49, v50, (uint64_t)a2, v81, v95, 0, 0);
        goto LABEL_141;
      }
      if (*(unsigned __int8 *)(v81 + 171) != *(unsigned __int8 *)(v91 + 192 * v85 + 171))
      {
        v49 = (uint64_t)v79 + 8;
        v50 = 7;
        goto LABEL_128;
      }
    }
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v123);
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v126);
    re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v134);
    v24.n128_f64[0] = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v129);
    v70 = *(_QWORD *)(v95 + 16);
    if (v70)
    {
      v5 = *(_QWORD *)(v95 + 32);
      v71 = v5 + 8 * v70;
      v4 = v81 + 120;
      do
      {
        *(_QWORD *)&v129 = *(_QWORD *)v5;
        if ((*(uint64_t (**)(_QWORD, __n128))(*(_QWORD *)v129 + 16))(v129, v24))
        {
          v72 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v129 + 16))(v129);
          if (v101)
          {
            v73 = 8 * v101;
            v74 = v103;
            while (*v74 != v72)
            {
              ++v74;
              v73 -= 8;
              if (!v73)
              {
                v74 = &v103[v101];
                break;
              }
            }
          }
          else
          {
            v74 = v103;
          }
          if (v101 == v74 - v103)
          {
            *(_QWORD *)v134 = *(_QWORD *)(v81 + 16);
            re::DynamicArray<unsigned long>::add((_QWORD *)(v81 + 80), v134);
            *(_QWORD *)v134 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v129 + 16))(v129);
            re::DynamicArray<re::TransitionCondition *>::add(v100, v134);
          }
        }
        if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v129 + 24))(v129))
        {
          v75 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v129 + 24))(v129);
          if (v97)
          {
            v76 = 8 * v97;
            v77 = v99;
            while (*v77 != v75)
            {
              ++v77;
              v76 -= 8;
              if (!v76)
              {
                v77 = &v99[v97];
                break;
              }
            }
          }
          else
          {
            v77 = v99;
          }
          if (v97 == v77 - v99)
          {
            *(_QWORD *)v134 = *(_QWORD *)(v81 + 16);
            re::DynamicArray<unsigned long>::add((_QWORD *)(v81 + 120), v134);
            *(_QWORD *)v134 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v129 + 24))(v129);
            re::DynamicArray<re::TransitionCondition *>::add(v96, v134);
          }
        }
        re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)v81, &v129);
        v5 += 8;
      }
      while (v5 != v71);
    }
    if (v118)
    {
      v4 = v120;
      v5 = 8 * v118;
      do
      {
        v78 = *(_QWORD *)v4;
        v4 += 8;
        v24 = re::DynamicArray<re::RigTransform>::add((_anonymous_namespace_ *)(v81 + 40), v78);
        v5 -= 8;
      }
      while (v5);
    }
    *(_BYTE *)(v81 + 170) = (*(unsigned __int8 *)(v91 + 192 * v85 + 170) | *(unsigned __int8 *)(v81 + 170)) != 0;
    v57 = 1;
    goto LABEL_143;
  }
  v28 = 0;
  v80 = 0;
  v83 = 0;
  v84 = 0;
  v87 = 0;
  v29 = 0;
  v30 = (uint64_t *)(v91 + 192 * v85 + 72);
  v31 = 1;
  while (1)
  {
    v32 = *v30;
    v5 = *v30 + (v28 << 6);
    v33 = *(unsigned int *)(v5 + 4);
    switch((int)v33)
    {
      case 0:
        v34 = atomic_load((unsigned __int8 *)&qword_254118FC0);
        if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_254118FC0))
        {
          re::Defaults::BOOLValue((re::Defaults *)"disableComputeReadAfterWrite", v47, (char *)&v122);
          if ((_BYTE)v122)
            v48 = BYTE1(v122);
          else
            v48 = 0;
          _MergedGlobals_380 = v48;
          __cxa_guard_release(&qword_254118FC0);
        }
        v35 = v32 + (v28 << 6);
        v36 = *(unsigned int *)(v35 + 52);
        if ((v86 & (_MergedGlobals_380 == 0)) != 0
          || !re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::containsKey((uint64_t)v126, *(unsigned int *)(v35 + 52)))
        {
          v37 = v36;
LABEL_101:
          if (!re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::containsKey((uint64_t)v123, v37))
          {
            v122 = v5;
            re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v117, &v122);
          }
          goto LABEL_103;
        }
        v51 = (uint64_t)v79 + 8;
        v52 = 11;
LABEL_138:
        v53 = a2;
        v6 = v81;
        v54 = v81;
        v55 = v95;
        v40 = 0;
LABEL_139:
        v56 = (unsigned int *)v5;
LABEL_140:
        re::RenderGraphEncoderSplitLogManager::logEntry(v51, v52, (uint64_t)v53, v54, v55, v40, v56);
        v7 = (char *)a2 + 656;
LABEL_141:
        re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v123);
        re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v126);
        re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v134);
        v24.n128_f64[0] = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v129);
LABEL_142:
        v57 = 0;
LABEL_143:
        if (v117[0] && v120)
          (*(void (**)(__n128))(*(_QWORD *)v117[0] + 40))(v24);
        if (v57)
        {
          v4 = *((_QWORD *)a2 + 59);
          if (v4 > v17)
          {
            v58 = *((_QWORD *)a2 + 61) + 40 * v17;
            v59 = *(_QWORD *)(v58 + 16);
            if (v59)
            {
              v60 = *(int **)(v58 + 32);
              v61 = 4 * v59;
              do
              {
                LODWORD(v129) = 0;
                v62 = *v60++;
                LODWORD(v129) = v62;
                re::DynamicArray<int>::add((_QWORD *)(v112 + 40 * *((_QWORD *)&v110 + 1) - 40), &v129);
                v61 -= 4;
              }
              while (v61);
            }
            v4 = *((_QWORD *)a2 + 64);
            if (v4 > v17)
            {
              v63 = *((_QWORD *)a2 + 66) + 40 * v17;
              v64 = *(_QWORD *)(v63 + 16);
              if (v64)
              {
                v65 = *(int **)(v63 + 32);
                v4 = 4 * v64;
                do
                {
                  LODWORD(v129) = 0;
                  v66 = *v65++;
                  LODWORD(v129) = v66;
                  re::DynamicArray<int>::add((_QWORD *)(*(_QWORD *)v115 + 40 * *((_QWORD *)&v113 + 1) - 40), &v129);
                  v4 -= 4;
                }
                while (v4);
              }
              if (*(_QWORD *)(v95 + 16))
              {
                v4 = v82;
                v5 = *((_QWORD *)a2 + 49);
                if (v5 > v82)
                {
                  v67 = *(uint64_t **)(v95 + 32);
                  v68 = *(_DWORD *)(v6 + 16) - 1;
                  LODWORD(v129) = *(_DWORD *)(*((_QWORD *)a2 + 51) + 4 * v82);
                  DWORD1(v129) = v68;
                  re::HashTable<re::RenderGraphNodeBase *,re::NodeSetupIndex,re::Hash<re::RenderGraphNodeBase *>,re::EqualTo<re::RenderGraphNodeBase *>,true,false>::add((uint64_t)v7, v67, &v129);
                  goto LABEL_172;
                }
LABEL_212:
                v126[0] = 0;
                v132 = 0u;
                v133 = 0u;
                v130 = 0u;
                v131 = 0u;
                v129 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v134 = 136315906;
                *(_QWORD *)&v134[4] = "operator[]";
                *(_WORD *)&v134[12] = 1024;
                *(_DWORD *)&v134[14] = 789;
                *(_WORD *)&v134[18] = 2048;
                *(_QWORD *)&v134[20] = v4;
                *(_WORD *)&v134[28] = 2048;
                *(_QWORD *)&v134[30] = v5;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_213:
                v126[0] = 0;
                v132 = 0u;
                v133 = 0u;
                v130 = 0u;
                v131 = 0u;
                v129 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v134 = 136315906;
                *(_QWORD *)&v134[4] = "operator[]";
                *(_WORD *)&v134[12] = 1024;
                *(_DWORD *)&v134[14] = 789;
                *(_WORD *)&v134[18] = 2048;
                *(_QWORD *)&v134[20] = v17;
                *(_WORD *)&v134[28] = 2048;
                *(_QWORD *)&v134[30] = v4;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
                goto LABEL_214;
              }
LABEL_211:
              v126[0] = 0;
              v132 = 0u;
              v133 = 0u;
              v130 = 0u;
              v131 = 0u;
              v129 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v134 = 136315906;
              *(_QWORD *)&v134[4] = "operator[]";
              *(_WORD *)&v134[12] = 1024;
              *(_DWORD *)&v134[14] = 789;
              *(_WORD *)&v134[18] = 2048;
              *(_QWORD *)&v134[20] = 0;
              *(_WORD *)&v134[28] = 2048;
              *(_QWORD *)&v134[30] = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_212;
            }
LABEL_209:
            v126[0] = 0;
            v132 = 0u;
            v133 = 0u;
            v130 = 0u;
            v131 = 0u;
            v129 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v134 = 136315906;
            *(_QWORD *)&v134[4] = "operator[]";
            *(_WORD *)&v134[12] = 1024;
            *(_DWORD *)&v134[14] = 789;
            *(_WORD *)&v134[18] = 2048;
            *(_QWORD *)&v134[20] = v17;
            *(_WORD *)&v134[28] = 2048;
            *(_QWORD *)&v134[30] = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_210:
            v126[0] = 0;
            v132 = 0u;
            v133 = 0u;
            v130 = 0u;
            v131 = 0u;
            v129 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v134 = 136315906;
            *(_QWORD *)&v134[4] = "operator[]";
            *(_WORD *)&v134[12] = 1024;
            *(_DWORD *)&v134[14] = 789;
            *(_WORD *)&v134[18] = 2048;
            *(_QWORD *)&v134[20] = 0;
            *(_WORD *)&v134[28] = 2048;
            *(_QWORD *)&v134[30] = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_211;
          }
LABEL_207:
          v126[0] = 0;
          v132 = 0u;
          v133 = 0u;
          v130 = 0u;
          v131 = 0u;
          v129 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v134 = 136315906;
          *(_QWORD *)&v134[4] = "operator[]";
          *(_WORD *)&v134[12] = 1024;
          *(_DWORD *)&v134[14] = 789;
          *(_WORD *)&v134[18] = 2048;
          *(_QWORD *)&v134[20] = v17;
          *(_WORD *)&v134[28] = 2048;
          *(_QWORD *)&v134[30] = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_208:
          v126[0] = 0;
          v132 = 0u;
          v133 = 0u;
          v130 = 0u;
          v131 = 0u;
          v129 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v134 = 136315906;
          *(_QWORD *)&v134[4] = "operator[]";
          *(_WORD *)&v134[12] = 1024;
          *(_DWORD *)&v134[14] = 789;
          *(_WORD *)&v134[18] = 2048;
          *(_QWORD *)&v134[20] = 0;
          *(_WORD *)&v134[28] = 2048;
          *(_QWORD *)&v134[30] = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_209;
        }
        v101 = 0;
        ++v102;
        v6 = v95;
        if (!*(_QWORD *)(v95 + 16))
          goto LABEL_208;
        if ((*(uint64_t (**)(_QWORD, __n128))(***(_QWORD ***)(v95 + 32) + 16))(**(_QWORD **)(v95 + 32), v24))
        {
          if (*(_QWORD *)(v95 + 16))
          {
            *(_QWORD *)&v129 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v95 + 32) + 16))(**(_QWORD **)(v95 + 32));
            re::DynamicArray<re::TransitionCondition *>::add(v100, &v129);
            goto LABEL_162;
          }
LABEL_218:
          v126[0] = 0;
          v132 = 0u;
          v133 = 0u;
          v130 = 0u;
          v131 = 0u;
          v129 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v134 = 136315906;
          *(_QWORD *)&v134[4] = "operator[]";
          *(_WORD *)&v134[12] = 1024;
          *(_DWORD *)&v134[14] = 789;
          *(_WORD *)&v134[18] = 2048;
          *(_QWORD *)&v134[20] = 0;
          *(_WORD *)&v134[28] = 2048;
          *(_QWORD *)&v134[30] = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_219:
          v126[0] = 0;
          v132 = 0u;
          v133 = 0u;
          v130 = 0u;
          v131 = 0u;
          v129 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v134 = 136315906;
          *(_QWORD *)&v134[4] = "operator[]";
          *(_WORD *)&v134[12] = 1024;
          *(_DWORD *)&v134[14] = 789;
          *(_WORD *)&v134[18] = 2048;
          *(_QWORD *)&v134[20] = 0;
          *(_WORD *)&v134[28] = 2048;
          *(_QWORD *)&v134[30] = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_220:
          v126[0] = 0;
          v132 = 0u;
          v133 = 0u;
          v130 = 0u;
          v131 = 0u;
          v129 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v134 = 136315906;
          *(_QWORD *)&v134[4] = "operator[]";
          *(_WORD *)&v134[12] = 1024;
          *(_DWORD *)&v134[14] = 789;
          *(_WORD *)&v134[18] = 2048;
          *(_QWORD *)&v134[20] = v4;
          *(_WORD *)&v134[28] = 2048;
          *(_QWORD *)&v134[30] = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_221;
        }
LABEL_162:
        v97 = 0;
        ++v98;
        if (!*(_QWORD *)(v95 + 16))
          goto LABEL_210;
        if ((*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v95 + 32) + 24))(**(_QWORD **)(v95 + 32)))
        {
          if (!*(_QWORD *)(v95 + 16))
            goto LABEL_219;
          *(_QWORD *)&v129 = (*(uint64_t (**)(_QWORD))(***(_QWORD ***)(v95 + 32) + 24))(**(_QWORD **)(v95 + 32));
          re::DynamicArray<re::TransitionCondition *>::add(v96, &v129);
        }
        v4 = *((_QWORD *)a2 + 49);
        if (v4 <= v17)
          goto LABEL_213;
        re::DynamicArray<int>::add(v104, (_DWORD *)(*((_QWORD *)a2 + 51) + 4 * v17));
        v4 = *((_QWORD *)a2 + 59);
        if (v4 <= v17)
        {
LABEL_214:
          v126[0] = 0;
          v132 = 0u;
          v133 = 0u;
          v130 = 0u;
          v131 = 0u;
          v129 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v134 = 136315906;
          *(_QWORD *)&v134[4] = "operator[]";
          *(_WORD *)&v134[12] = 1024;
          *(_DWORD *)&v134[14] = 789;
          *(_WORD *)&v134[18] = 2048;
          *(_QWORD *)&v134[20] = v17;
          *(_WORD *)&v134[28] = 2048;
          *(_QWORD *)&v134[30] = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_215:
          v126[0] = 0;
          v132 = 0u;
          v133 = 0u;
          v130 = 0u;
          v131 = 0u;
          v129 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v134 = 136315906;
          *(_QWORD *)&v134[4] = "operator[]";
          *(_WORD *)&v134[12] = 1024;
          *(_DWORD *)&v134[14] = 789;
          *(_WORD *)&v134[18] = 2048;
          *(_QWORD *)&v134[20] = v17;
          *(_WORD *)&v134[28] = 2048;
          *(_QWORD *)&v134[30] = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_216:
          v126[0] = 0;
          v132 = 0u;
          v133 = 0u;
          v130 = 0u;
          v131 = 0u;
          v129 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v134 = 136315906;
          *(_QWORD *)&v134[4] = "operator[]";
          *(_WORD *)&v134[12] = 1024;
          *(_DWORD *)&v134[14] = 789;
          *(_WORD *)&v134[18] = 2048;
          *(_QWORD *)&v134[20] = 0;
          *(_WORD *)&v134[28] = 2048;
          *(_QWORD *)&v134[30] = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_217:
          v126[0] = 0;
          v132 = 0u;
          v133 = 0u;
          v130 = 0u;
          v131 = 0u;
          v129 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v134 = 136315906;
          *(_QWORD *)&v134[4] = "operator[]";
          *(_WORD *)&v134[12] = 1024;
          *(_DWORD *)&v134[14] = 789;
          *(_WORD *)&v134[18] = 2048;
          *(_QWORD *)&v134[20] = v17;
          *(_WORD *)&v134[28] = 2048;
          *(_QWORD *)&v134[30] = v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_218;
        }
        re::DynamicArray<re::DynamicArray<unsigned int>>::add((_anonymous_namespace_ *)((char *)&v109 + 8), (uint64_t *)(*((_QWORD *)a2 + 61) + 40 * v17));
        v4 = *((_QWORD *)a2 + 64);
        if (v4 <= v17)
          goto LABEL_215;
        re::DynamicArray<re::DynamicArray<unsigned int>>::add((_anonymous_namespace_ *)((char *)&v112 + 8), (uint64_t *)(*((_QWORD *)a2 + 66) + 40 * v17));
        if (!*(_QWORD *)(v95 + 16))
          goto LABEL_216;
        v4 = *((_QWORD *)a2 + 49);
        if (v4 <= v17)
          goto LABEL_217;
        v69 = *(uint64_t **)(v95 + 32);
        *(_QWORD *)&v129 = *(unsigned int *)(*((_QWORD *)a2 + 51) + 4 * v17);
        re::HashTable<re::RenderGraphNodeBase *,re::NodeSetupIndex,re::Hash<re::RenderGraphNodeBase *>,re::EqualTo<re::RenderGraphNodeBase *>,true,false>::add((uint64_t)v7, v69, &v129);
        v82 = v17;
LABEL_172:
        v4 = *((_QWORD *)a2 + 49);
        if (v4 - 1 > v17)
          goto LABEL_39;
LABEL_19:
        v10 = *((_QWORD *)a2 + 54);
        if (v10)
        {
          v11 = (int *)*((_QWORD *)a2 + 56);
          v12 = 4 * v10;
          do
          {
            v13 = *v11++;
            LODWORD(v129) = v13;
            re::DynamicArray<int>::add((_QWORD *)&v106 + 1, &v129);
            v12 -= 4;
          }
          while (v12);
        }
        re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)a2 + 376, (uint64_t)v104);
        re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)a2 + 456, (uint64_t)&v109 + 8);
        re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)a2 + 496, (uint64_t)&v112 + 8);
        re::DynamicArray<re::RigComponentConstraint>::operator=((uint64_t)a2 + 416, (uint64_t)&v106 + 8);
        re::RenderGraphProcessor::updateTextureLifetimes((uint64_t *)a2, v14);
        v15 = *((unsigned __int8 *)v79 + 80);
        if (*((_BYTE *)v79 + 80))
        {
          *((_BYTE *)v79 + 8) = 0;
          re::RenderGraphEncoderSplitLogManager::save((re::RenderGraphNodeCombineProcessor *)((char *)v79 + 8), v15 == 2);
        }
        if (v96[0] && v99)
          (*(void (**)(void))(*(_QWORD *)v96[0] + 40))();
        if (v100[0] && v103)
          (*(void (**)(void))(*(_QWORD *)v100[0] + 40))();
LABEL_30:
        re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v115[8]);
        re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)&v112 + 8);
        re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)&v109 + 8);
        if (*((_QWORD *)&v106 + 1))
        {
          if ((_QWORD)v109)
            (*(void (**)(void))(**((_QWORD **)&v106 + 1) + 40))();
          *(_QWORD *)&v109 = 0;
          v107 = 0uLL;
          *((_QWORD *)&v106 + 1) = 0;
          ++v108;
        }
        result = v104[0];
        if (v104[0])
        {
          if ((_QWORD)v106)
            return (*(uint64_t (**)(void))(*(_QWORD *)v104[0] + 40))();
        }
        return result;
      case 1:
        if (*(_BYTE *)(v32 + (v28 << 6) + 32))
          goto LABEL_130;
        v38 = *(unsigned int *)v5;
        v39 = &v129;
        goto LABEL_83;
      case 2:
        v40 = v93;
        if (!v93)
          goto LABEL_131;
        v41 = v32 + (v28 << 6);
        if (v93[13] != *(_DWORD *)(v41 + 52))
          goto LABEL_129;
        goto LABEL_90;
      case 3:
        v40 = v92;
        if (!v92)
          goto LABEL_131;
        v42 = v32 + (v28 << 6);
        if (v92[13] != *(_DWORD *)(v42 + 52))
          goto LABEL_129;
        goto LABEL_96;
      case 4:
      case 11:
        if (!re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::containsKey((uint64_t)v123, *(unsigned int *)(v32 + (v28 << 6) + 52)))
        {
          v122 = v5;
          re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v117, &v122);
        }
        v87 = 1;
        goto LABEL_103;
      case 5:
        if (!re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::containsKey((uint64_t)v123, *(unsigned int *)(v32 + (v28 << 6) + 52)))
        {
          v122 = v5;
          re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v117, &v122);
        }
        HIDWORD(v84) = 1;
        goto LABEL_103;
      case 6:
        if (*(_BYTE *)(v32 + (v28 << 6) + 32))
          goto LABEL_130;
        v38 = *(unsigned int *)v5;
        v39 = (__int128 *)v134;
LABEL_83:
        v43 = re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v39, v38);
        if (!v43)
        {
          v51 = (uint64_t)v79 + 8;
          v52 = 2;
          goto LABEL_138;
        }
        v40 = *(unsigned int **)v43;
        if (*(_DWORD *)(*(_QWORD *)v43 + 52) != *(_DWORD *)(v32 + (v28 << 6) + 52))
          goto LABEL_129;
        v29 = 1;
        goto LABEL_103;
      case 7:
        v40 = v89;
        if (!v89)
          goto LABEL_131;
        v44 = v32 + (v28 << 6);
        if (v89[13] != *(_DWORD *)(v44 + 52))
          goto LABEL_129;
        if (v89[9] != *(_DWORD *)(v44 + 36))
          goto LABEL_133;
        v41 = v32 + (v28 << 6);
LABEL_90:
        if (*(_BYTE *)(v41 + 32))
          goto LABEL_130;
        v29 = 1;
        LOBYTE(v84) = 1;
        goto LABEL_103;
      case 8:
        v40 = v88;
        if (!v88)
        {
LABEL_131:
          v51 = (uint64_t)v79 + 8;
          v52 = 3;
          goto LABEL_134;
        }
        v45 = v32 + (v28 << 6);
        if (v88[13] != *(_DWORD *)(v45 + 52))
        {
LABEL_129:
          v51 = (uint64_t)v79 + 8;
          v52 = 1;
LABEL_134:
          v53 = a2;
          v6 = v81;
          v54 = v81;
          v55 = v95;
          goto LABEL_139;
        }
        if (v88[10] != *(_DWORD *)(v45 + 40))
        {
LABEL_133:
          v51 = (uint64_t)v79 + 8;
          v52 = 4;
          goto LABEL_134;
        }
        v42 = v32 + (v28 << 6);
LABEL_96:
        if (*(_BYTE *)(v42 + 32))
        {
LABEL_130:
          v51 = (uint64_t)v79 + 8;
          v52 = 0;
          goto LABEL_138;
        }
        v29 = 1;
        v83 = 1;
LABEL_103:
        v28 = v31;
        if (*v26 <= (unint64_t)v31++)
          goto LABEL_111;
        break;
      case 9:
        if (v90 != *(_DWORD *)(v32 + (v28 << 6) + 52))
        {
          v51 = (uint64_t)v79 + 8;
          v6 = v81;
          v52 = 12;
          v53 = a2;
          v54 = v81;
          v55 = v95;
          v40 = 0;
          v56 = 0;
          goto LABEL_140;
        }
        v80 = 1;
        goto LABEL_103;
      case 10:
        v37 = *(unsigned int *)(v32 + (v28 << 6) + 52);
        goto LABEL_101;
      default:
        goto LABEL_232;
    }
  }
}

uint64_t re::DynamicArray<re::DynamicArray<unsigned int>>::add(_anonymous_namespace_ *this, uint64_t *a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::SkeletalAnimationQueryEntry>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = re::DynamicArray<float>::DynamicArray(*((_QWORD *)this + 4) + 40 * v4, a2);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::RenderGraphNodeCombineProcessor::~RenderGraphNodeCombineProcessor(re::RenderGraphNodeCombineProcessor *this)
{
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32);
}

{
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32);
  JUMPOUT(0x2276933B8);
}

uint64_t re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addOrReplace(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)result)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(result + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    result = re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(result, v9, v8, a2, a3);
    goto LABEL_9;
  }
  v11 = *(_QWORD *)(result + 16);
  while (*(_QWORD *)(v11 + 32 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_QWORD *)(v11 + 32 * v10 + 24) = *a3;
LABEL_9:
  ++*(_DWORD *)(v5 + 40);
  return result;
}

BOOL re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::containsKey(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 32 * v3 + 16) == a2)
    return 1;
  do
  {
    v3 = *(_DWORD *)(v5 + 32 * v3 + 8) & 0x7FFFFFFF;
    result = (_DWORD)v3 != 0x7FFFFFFF;
  }
  while ((_DWORD)v3 != 0x7FFFFFFF && *(_QWORD *)(v5 + 32 * v3 + 16) != a2);
  return result;
}

uint64_t re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  _BYTE v26[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v26, 0, 36);
          *(_QWORD *)&v26[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v26, v13, v12);
          v15 = *(_OWORD *)v26;
          *(_OWORD *)v26 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v26[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v26[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v26[24];
          *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v26[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long,re::RenderGraphResourceOperation const*,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 32;
              --v20;
            }
            while (v20);
          }
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v26);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 32 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 32 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void DeviceHeap::~DeviceHeap(DeviceHeap *this)
{
  char *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24ED75A70;
  v2 = (char *)this + 56;
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 96);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v2);
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    if ((*((_BYTE *)this + 32) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 5));
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
  }

}

{
  DeviceHeap::~DeviceHeap(this);
  JUMPOUT(0x2276933B8);
}

uint64_t DeviceHeap::makeTexture(uint64_t a1, id *a2)
{
  uint64_t v3;
  id v5;

  re::mtl::Device::makeTexture(*a2, (id *)(a1 + 16), &v5);
  if (!v5)
    return -1;
  re::DynamicArray<NS::SharedPtr<MTL::RasterizationRateMap>>::add((_anonymous_namespace_ *)(a1 + 56), &v5);
  v3 = *(_QWORD *)(a1 + 72) - 1;
  if (v5)

  return v3;
}

void DeviceHeap::releaseTexture(DeviceHeap *this, unint64_t a2)
{
  uint64_t v3;

  if (*((_QWORD *)this + 9) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v3 = *((_QWORD *)this + 11);

  *(_QWORD *)(v3 + 8 * a2) = 0;
}

uint64_t DeviceHeap::makeBuffer(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v9;

  if (a3 == 0xFFFF)
    v4 = 0;
  else
    v4 = a3;
  v5 = objc_msgSend(*(id *)(a1 + 16), sel_newBufferWithLength_options_, a2, v4);
  v9 = v5;
  if (!v5)
    return -1;
  v6 = v5;
  re::DynamicArray<NS::SharedPtr<MTL::Buffer>>::add(a1 + 96, &v9);
  v7 = *(_QWORD *)(a1 + 112) - 1;

  return v7;
}

id re::DynamicArray<NS::SharedPtr<MTL::Buffer>>::add(uint64_t a1, id *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v6)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  v11 = *(_QWORD *)(a1 + 32);
  result = *a2;
  *(_QWORD *)(v11 + 8 * v5) = result;
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void DeviceHeap::releaseBuffer(DeviceHeap *this, unint64_t a2)
{
  uint64_t v3;

  if (*((_QWORD *)this + 14) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v3 = *((_QWORD *)this + 16);

  *(_QWORD *)(v3 + 8 * a2) = 0;
}

void DeviceHeap::onFrameFinish(DeviceHeap *this)
{
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::clear((uint64_t)this + 56);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::clear((uint64_t)this + 96);
}

void MetalHeap::init(uint64_t a1, void *a2, id *a3, uint64_t a4)
{
  re::DynamicString *v7;
  id v8;
  id *v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  id v12[2];

  v7 = (re::DynamicString *)(a1 + 32);
  v12[0] = a2;
  v12[1] = (id)strlen((const char *)a2);
  re::DynamicString::operator=(v7, (uint64_t)v12);
  v8 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD5F0], sel_alloc), sel_init);
  objc_msgSend(v8, sel_setStorageMode_, 2);
  objc_msgSend(v8, sel_setSize_, a4);
  v12[0] = objc_msgSend(*a3, sel_newHeapWithDescriptor_, v8);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 16), v12);
  if (v12[0])

  v9 = re::ObjCObject::operator=((id *)(a1 + 24), a3);
  *(_DWORD *)(a1 + 8) = 2;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)(a1 + 64), 0);
  ++*(_DWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 108) = 4096;
  v10 = re::DataArray<MetalHeap::TextureEntry>::allocBlock((_QWORD *)(a1 + 64));
  v11 = a1 + 128;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)v11, 0);
  ++*(_DWORD *)(v11 + 24);
  *(_DWORD *)(v11 + 44) = 4096;
  re::DataArray<MetalHeap::TextureEntry>::allocBlock((_QWORD *)v11);
  if (v8)

}

void MetalHeap::~MetalHeap(id *this)
{
  _QWORD *v2;
  double v3;
  _QWORD *v4;
  id v5;
  _QWORD *v6;
  double v7;
  _QWORD *v8;
  id v9;
  id v10;
  id v11;

  *this = &off_24ED75B00;

  this[2] = 0;
  v2 = this + 16;
  if (*((_DWORD *)this + 43))
  {
    v3 = re::DataArray<MetalHeap::TextureEntry>::clear(this + 16);
    if (!this[18])
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_31;
    }
    v4 = this[20];
    (*(void (**)(id, _QWORD, double))(*(_QWORD *)this[16] + 40))(this[16], *v4, v3);
    (*(void (**)(id, _QWORD))(*(_QWORD *)this[16] + 40))(this[16], v4[1]);
    v5 = this[16];
    if (v5)
    {
      if (this[20])
        (*(void (**)(id))(*(_QWORD *)v5 + 40))(v5);
      this[20] = 0;
      this[17] = 0;
      this[18] = 0;
      *v2 = 0;
      ++*((_DWORD *)this + 38);
    }
    *((_DWORD *)this + 43) = 0;
  }
  else if (*v2)
  {
    if (this[20])
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
    this[20] = 0;
    this[17] = 0;
    this[18] = 0;
    *v2 = 0;
    ++*((_DWORD *)this + 38);
  }
  v6 = this + 8;
  if (*((_DWORD *)this + 27))
  {
    v7 = re::DataArray<MetalHeap::TextureEntry>::clear(this + 8);
    if (this[10])
    {
      v8 = this[12];
      (*(void (**)(id, _QWORD, double))(*(_QWORD *)this[8] + 40))(this[8], *v8, v7);
      (*(void (**)(id, _QWORD))(*(_QWORD *)this[8] + 40))(this[8], v8[1]);
      v9 = this[8];
      if (v9)
      {
        if (this[12])
          (*(void (**)(id))(*(_QWORD *)v9 + 40))(v9);
        this[12] = 0;
        this[9] = 0;
        this[10] = 0;
        *v6 = 0;
        ++*((_DWORD *)this + 22);
      }
      *((_DWORD *)this + 27) = 0;
      goto LABEL_23;
    }
LABEL_31:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*v6)
  {
    if (this[12])
      (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 40))(*v6);
    this[12] = 0;
    this[9] = 0;
    this[10] = 0;
    *v6 = 0;
    ++*((_DWORD *)this + 22);
  }
LABEL_23:
  v10 = this[4];
  if (v10)
  {
    if (((_BYTE)this[5] & 1) != 0)
      (*(void (**)(id, id))(*(_QWORD *)v10 + 40))(v10, this[6]);
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }

  v11 = this[2];
  if (v11)
  {

    this[2] = 0;
  }
}

{
  MetalHeap::~MetalHeap(this);
  JUMPOUT(0x2276933B8);
}

uint64_t MetalHeap::makeTexture(uint64_t a1, _QWORD *a2, char a3, uint64_t *a4)
{
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  __int128 v25;

  v7 = objc_msgSend(*(id *)(a1 + 16), sel_newTextureWithDescriptor_, *a2);
  if (!v7)
    return -1;
  v8 = v7;
  v9 = objc_msgSend(*(id *)(a1 + 16), sel_maxAvailableSizeWithAlignment_, 16);
  if ((unint64_t)v9 < *(_QWORD *)(a1 + 192))
  {
    *(_QWORD *)(a1 + 192) = v9;
    *(_QWORD *)(a1 + 200) = objc_msgSend(*(id *)(a1 + 16), sel_usedSize);
  }
  v10 = v8;
  v12 = v10;
  if (v10)

  v13 = *a4;
  v14 = *(_DWORD *)(a1 + 120);
  if ((v14 + 1) >> 24)
    v15 = 1;
  else
    v15 = v14 + 1;
  *(_DWORD *)(a1 + 120) = v15;
  v16 = *(unsigned __int16 *)(a1 + 116);
  v17 = *(unsigned __int16 *)(a1 + 118);
  if (v16 != 0xFFFF || (_DWORD)v17 != 0xFFFF)
  {
    if (*(_QWORD *)(a1 + 80) > v17)
    {
      v22 = (_QWORD *)(*(_QWORD *)(a1 + 96) + 16 * v17);
      *(_DWORD *)(v22[1] + 4 * v16) = v15;
      v20 = *v22 + 24 * v16;
      *(_DWORD *)(a1 + 116) = *(_DWORD *)v20;
      goto LABEL_19;
    }
LABEL_25:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_DWORD *)(a1 + 112) >= *(_DWORD *)(a1 + 108))
    re::DataArray<MetalHeap::TextureEntry>::allocBlock((_QWORD *)(a1 + 64));
  v18 = *(_QWORD *)(a1 + 80);
  v17 = (unsigned __int16)(v18 - 1);
  if (!v18)
  {
    v24 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v25) = 136315906;
    *(_QWORD *)((char *)&v25 + 4) = "operator[]";
    WORD6(v25) = 1024;
    HIWORD(v25) = 789;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  v16 = *(unsigned int *)(a1 + 112);
  if (v16 >= 0x10000)
  {
LABEL_24:
    re::internal::assertLog((re::internal *)5, v11, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v16, v24, v25);
    _os_crash();
    __break(1u);
    goto LABEL_25;
  }
  v19 = (_QWORD *)(*(_QWORD *)(a1 + 96) + 16 * v17);
  *(_DWORD *)(a1 + 112) = v16 + 1;
  *(_DWORD *)(v19[1] + 4 * v16) = *(_DWORD *)(a1 + 120);
  v20 = *v19 + 24 * v16;
LABEL_19:
  ++*(_DWORD *)(a1 + 104);
  *(_QWORD *)v20 = v12;
  *(_BYTE *)(v20 + 8) = a3;
  *(_QWORD *)(v20 + 16) = v13;
  v21 = (v17 << 16) | ((unint64_t)(*(_DWORD *)(a1 + 120) & 0xFFFFFF) << 32) | v16;
  if (v12)

  return v21;
}

double MetalHeap::releaseTexture(MetalHeap *this, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  double result;

  v4 = (_QWORD *)((char *)this + 64);
  v5 = re::DataArray<re::TextureAtlasTile>::get((uint64_t)this + 64, a2);
  if (!*(_BYTE *)(v5 + 8))
    objc_msgSend(*(id *)v5, sel_makeAliasable);
  re::DataArray<MetalHeap::TextureEntry>::destroy((uint64_t)v4, a2);
  if (!*((_DWORD *)this + 26))
    return re::DataArray<MetalHeap::TextureEntry>::clear(v4);
  return result;
}

void re::DataArray<MetalHeap::TextureEntry>::destroy(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;

  v2 = a2;
  v4 = a2 >> 16;
  v5 = re::DataArray<re::TextureAtlasTile>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (v5)
  {
    v6 = (_QWORD *)v5;
    *(_QWORD *)(v5 + 16) = 0;
    v7 = *(void **)v5;
    if (v7)
    {

      *v6 = 0;
    }
    if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    *(_DWORD *)v6 = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
}

double re::DataArray<MetalHeap::TextureEntry>::clear(_QWORD *a1)
{
  unint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  double result;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v11 = a1;
  if (*((_DWORD *)a1 + 10))
  {
    LODWORD(v12) = 0;
    if (!a1[2])
      goto LABEL_27;
    v3 = a1;
    if (!**(_DWORD **)(a1[4] + 8))
    {
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v11);
      v3 = v11;
    }
  }
  else
  {
    LODWORD(v12) = -1;
    v3 = a1;
  }
  v11 = v3;
  v4 = (unsigned __int16)v12;
  if (v3 != a1 || ((unsigned __int16)v12 == 0xFFFFLL ? (v5 = (v12 & 0xFFFF0000) == 4294901760) : (v5 = 0), !v5))
  {
    v6 = WORD1(v12);
    do
    {
      v7 = v3[2];
      if (v7 <= v6)
        goto LABEL_26;
      re::DataArray<MetalHeap::TextureEntry>::destroy((uint64_t)a1, ((unint64_t)(*(_DWORD *)(*(_QWORD *)(v3[4] + 16 * v6 + 8) + 4 * v4) & 0xFFFFFF) << 32) | (v6 << 16) | v4);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v11);
      v3 = v11;
      v4 = (unsigned __int16)v12;
      v6 = WORD1(v12);
    }
    while (v11 != a1 || (unsigned __int16)v12 != 0xFFFFLL || WORD1(v12) != 0xFFFFLL);
  }
  v8 = a1[2];
  v6 = v8 - 1;
  if (v8 != 1)
  {
    v7 = 16 * v8 - 16;
    while (v8 > v6)
    {
      v9 = (_QWORD *)(a1[4] + v7);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *v9);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, v9[1]);
      v1 = a1[2];
      if (v1 <= v6)
        goto LABEL_25;
      v8 = v1 - 1;
      if (v1 - 1 > v6)
      {
        *(_OWORD *)(a1[4] + v7) = *(_OWORD *)(a1[4] + 16 * v1 - 16);
        v8 = a1[2] - 1;
      }
      a1[2] = v8;
      ++*((_DWORD *)a1 + 6);
      v7 -= 16;
      if (!--v6)
        goto LABEL_23;
    }
    v11 = 0;
    v26 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v14 = 136315906;
    v15 = "operator[]";
    v16 = 1024;
    v17 = 789;
    v18 = 2048;
    v19 = v6;
    v20 = 2048;
    v21 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_25:
    v11 = 0;
    v26 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v14 = 136315906;
    v15 = "removeAt";
    v16 = 1024;
    v17 = 931;
    v18 = 2048;
    v19 = v6;
    v20 = 2048;
    v21 = v1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_26:
    v13 = 0;
    v26 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v14 = 136315906;
    v15 = "operator[]";
    v16 = 1024;
    v17 = 797;
    v18 = 2048;
    v19 = v6;
    v20 = 2048;
    v21 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_27:
    v13 = 0;
    v26 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v14 = 136315906;
    v15 = "operator[]";
    v16 = 1024;
    v17 = 797;
    v18 = 2048;
    v19 = 0;
    v20 = 2048;
    v21 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_23:
  result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

id *MetalHeap::releaseTextureForCaching(MetalHeap *this, int a2)
{
  id *result;
  unsigned __int8 v3;
  const char *v4;
  int v5;
  char v6;
  id *v7;
  char v8[2];

  result = (id *)re::DataArray<re::TextureAtlasTile>::get((uint64_t)this + 64, a2);
  if (!*((_BYTE *)result + 8))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_254118FD0);
    if ((v3 & 1) == 0)
    {
      v7 = result;
      v5 = __cxa_guard_acquire(&qword_254118FD0);
      result = v7;
      if (v5)
      {
        re::Defaults::BOOLValue((re::Defaults *)"enableRenderGraphResourceAliasingWhenCaching", v4, v8);
        if (v8[0])
          v6 = v8[1];
        else
          v6 = 1;
        _MergedGlobals_381 = v6;
        __cxa_guard_release(&qword_254118FD0);
        result = v7;
      }
    }
    if (_MergedGlobals_381)
      return (id *)objc_msgSend(*result, sel_makeAliasable);
  }
  return result;
}

uint64_t MetalHeap::makeBuffer(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t *a5)
{
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  __int128 v26;

  v8 = objc_msgSend(*(id *)(a1 + 16), sel_newBufferWithLength_options_, a2, a3);
  if (!v8)
    return -1;
  v9 = v8;
  v10 = objc_msgSend(*(id *)(a1 + 16), sel_maxAvailableSizeWithAlignment_, 16);
  if ((unint64_t)v10 < *(_QWORD *)(a1 + 192))
  {
    *(_QWORD *)(a1 + 192) = v10;
    *(_QWORD *)(a1 + 200) = objc_msgSend(*(id *)(a1 + 16), sel_usedSize);
  }
  v11 = v9;
  v13 = v11;
  if (v11)

  v14 = *a5;
  v15 = *(_DWORD *)(a1 + 184);
  if ((v15 + 1) >> 24)
    v16 = 1;
  else
    v16 = v15 + 1;
  *(_DWORD *)(a1 + 184) = v16;
  v17 = *(unsigned __int16 *)(a1 + 180);
  v18 = *(unsigned __int16 *)(a1 + 182);
  if (v17 != 0xFFFF || (_DWORD)v18 != 0xFFFF)
  {
    if (*(_QWORD *)(a1 + 144) > v18)
    {
      v23 = (_QWORD *)(*(_QWORD *)(a1 + 160) + 16 * v18);
      *(_DWORD *)(v23[1] + 4 * v17) = v16;
      v21 = *v23 + 24 * v17;
      *(_DWORD *)(a1 + 180) = *(_DWORD *)v21;
      goto LABEL_19;
    }
LABEL_25:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_DWORD *)(a1 + 176) >= *(_DWORD *)(a1 + 172))
    re::DataArray<MetalHeap::TextureEntry>::allocBlock((_QWORD *)(a1 + 128));
  v19 = *(_QWORD *)(a1 + 144);
  v18 = (unsigned __int16)(v19 - 1);
  if (!v19)
  {
    v25 = 0;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v26) = 136315906;
    *(_QWORD *)((char *)&v26 + 4) = "operator[]";
    WORD6(v26) = 1024;
    HIWORD(v26) = 789;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  v17 = *(unsigned int *)(a1 + 176);
  if (v17 >= 0x10000)
  {
LABEL_24:
    re::internal::assertLog((re::internal *)5, v12, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v17, v25, v26);
    _os_crash();
    __break(1u);
    goto LABEL_25;
  }
  v20 = (_QWORD *)(*(_QWORD *)(a1 + 160) + 16 * v18);
  *(_DWORD *)(a1 + 176) = v17 + 1;
  *(_DWORD *)(v20[1] + 4 * v17) = *(_DWORD *)(a1 + 184);
  v21 = *v20 + 24 * v17;
LABEL_19:
  ++*(_DWORD *)(a1 + 168);
  *(_QWORD *)v21 = v13;
  *(_BYTE *)(v21 + 8) = a4;
  *(_QWORD *)(v21 + 16) = v14;
  v22 = (v18 << 16) | ((unint64_t)(*(_DWORD *)(a1 + 184) & 0xFFFFFF) << 32) | v17;
  if (v13)

  return v22;
}

double MetalHeap::releaseBuffer(MetalHeap *this, unint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  double result;

  v4 = (_QWORD *)((char *)this + 128);
  v5 = re::DataArray<re::TextureAtlasTile>::get((uint64_t)this + 128, a2);
  if (!*(_BYTE *)(v5 + 8))
    objc_msgSend(*(id *)v5, sel_makeAliasable);
  re::DataArray<MetalHeap::TextureEntry>::destroy((uint64_t)v4, a2);
  if (!*((_DWORD *)this + 42))
    return re::DataArray<MetalHeap::TextureEntry>::clear(v4);
  return result;
}

id *MetalHeap::releaseBufferForCaching(MetalHeap *this, int a2)
{
  id *result;
  unsigned __int8 v3;
  const char *v4;
  int v5;
  char v6;
  id *v7;
  char v8[2];

  result = (id *)re::DataArray<re::TextureAtlasTile>::get((uint64_t)this + 128, a2);
  if (!*((_BYTE *)result + 8))
  {
    v3 = atomic_load((unsigned __int8 *)&qword_254118FD8);
    if ((v3 & 1) == 0)
    {
      v7 = result;
      v5 = __cxa_guard_acquire(&qword_254118FD8);
      result = v7;
      if (v5)
      {
        re::Defaults::BOOLValue((re::Defaults *)"enableRenderGraphResourceAliasingWhenCaching", v4, v8);
        if (v8[0])
          v6 = v8[1];
        else
          v6 = 1;
        byte_254118FC9 = v6;
        __cxa_guard_release(&qword_254118FD8);
        result = v7;
      }
    }
    if (byte_254118FC9)
      return (id *)objc_msgSend(*result, sel_makeAliasable);
  }
  return result;
}

id MetalHeap::onFrameStart(id *this)
{
  id result;

  result = objc_msgSend(this[2], sel_size);
  this[24] = result;
  this[25] = 0;
  return result;
}

void CachingHeap::~CachingHeap(CachingHeap *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24ED75B90;
  v2 = (char *)this + 56;
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::clear((uint64_t)this + 56);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::clear((uint64_t)this + 96);
  if (*((_DWORD *)this + 41))
  {
    v3 = *((unsigned int *)this + 40);
    if ((_DWORD)v3)
      memset_pattern16(*((void **)this + 18), &unk_2260EB7B0, 4 * v3);
    if (*((_DWORD *)this + 42))
    {
      v4 = 0;
      v5 = 0;
      do
      {
        re::HashTable<CachingHeap::TextureCacheKey,re::DynamicArray<CachingHeap::TextureEntry>,CachingHeap::TextureCacheKeyHasher,CachingHeap::TextureCacheKeyEqualTo,true,false>::EntryWithHash::free(*((_QWORD *)this + 19) + v4);
        ++v5;
        v4 += 72;
      }
      while (v5 < *((unsigned int *)this + 42));
    }
    *((_DWORD *)this + 41) = 0;
    *((_DWORD *)this + 42) = 0;
    v6 = *((_DWORD *)this + 44) + 1;
    *((_DWORD *)this + 43) = 0x7FFFFFFF;
    *((_DWORD *)this + 44) = v6;
  }
  re::HashTable<CachingHeap::TextureCacheKey,re::DynamicArray<CachingHeap::TextureEntry>,CachingHeap::TextureCacheKeyHasher,CachingHeap::TextureCacheKeyEqualTo,true,false>::deinit((uint64_t *)this + 17);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 96);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)v2);
  v7 = *((_QWORD *)this + 3);
  if (v7)
  {
    if ((*((_BYTE *)this + 32) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)this + 5));
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
  }

}

{
  CachingHeap::~CachingHeap(this);
  JUMPOUT(0x2276933B8);
}

uint64_t CachingHeap::makeTexture(uint64_t a1, id *a2, int a3, uint64_t *a4)
{
  id v8;
  char **v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned __int8 v17;
  id v18;
  id v19;
  uint64_t v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  id v56;
  _QWORD v57[2];
  unint64_t v58;
  int v59;
  uint64_t v60;
  id v61;
  char v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  id v66;

  v8 = *a2;
  v9 = &selRef_newBufferWithBytes_length_options_;
  v10 = objc_msgSend(v8, sel_hash);
  if (!*(_QWORD *)(a1 + 136))
    goto LABEL_5;
  v11 = 0xBF58476D1CE4E5B9;
  if (!a3)
    v11 = 0;
  v12 = (0x94D049BB133111EBLL * (v11 ^ (v11 >> 27))) ^ ((0x94D049BB133111EBLL * (v11 ^ (v11 >> 27))) >> 31);
  v13 = *(unsigned int *)(*(_QWORD *)(a1 + 144)
                        + 4
                        * ((((unint64_t)v10 + 64 * v12 + (v12 >> 2) - 0x61C8864680B583E9) ^ v12)
                         % *(unsigned int *)(a1 + 160)));
  if ((_DWORD)v13 != 0x7FFFFFFF)
  {
    v16 = *(_QWORD *)(a1 + 152);
    while (1)
    {
      if (*(unsigned __int8 *)(v16 + 72 * v13 + 24) == a3)
      {
        v17 = objc_msgSend(*(id *)(v16 + 72 * v13 + 16), sel_isEqual_, v8);
        v16 = *(_QWORD *)(a1 + 152);
        if ((v17 & 1) != 0)
          break;
      }
      v13 = *(_DWORD *)(v16 + 72 * v13 + 8) & 0x7FFFFFFF;
      if (v13 == 0x7FFFFFFF)
      {
        v14 = 0;
        v15 = 1;
LABEL_11:
        v9 = &selRef_newBufferWithBytes_length_options_;
        goto LABEL_12;
      }
    }
    v45 = v16 + 72 * v13;
    v14 = v45 + 32;
    v46 = *(_QWORD *)(v45 + 48);
    if (!v46)
    {
      v15 = 0;
      goto LABEL_11;
    }
    v47 = *(_QWORD *)(v45 + 64);
    v48 = 40 * v46;
    v9 = &selRef_newBufferWithBytes_length_options_;
    while (*(_QWORD *)(v47 + 32) != -1)
    {
      v47 += 40;
      v48 -= 40;
      if (!v48)
        goto LABEL_62;
    }
    re::DynamicArray<NS::SharedPtr<MTL::RasterizationRateMap>>::add((_anonymous_namespace_ *)(a1 + 56), (id *)v47);
    v54 = *(_QWORD *)(a1 + 72);
    v20 = v54 - 1;
    *(_QWORD *)(v47 + 32) = v54 - 1;
    *(_DWORD *)(v47 + 24) = 0;
    if (v54)
      goto LABEL_57;
LABEL_62:
    v15 = 0;
  }
  else
  {
LABEL_5:
    v14 = 0;
    v15 = 1;
  }
LABEL_12:
  re::mtl::Device::makeTexture(*a2, (id *)(a1 + 16), &v66);
  if (!v66)
  {
    v20 = -1;
    goto LABEL_57;
  }
  v18 = v66;
  v19 = v18;
  v61 = v19;
  v62 = 0;
  if (v18)

  v63 = *a4;
  re::DynamicArray<NS::SharedPtr<MTL::RasterizationRateMap>>::add((_anonymous_namespace_ *)(a1 + 56), &v66);
  v20 = *(_QWORD *)(a1 + 72) - 1;
  v65 = v20;
  v64 = 0;
  if ((v15 & 1) != 0)
  {
    v56 = v19;
    v57[0] = 0;
    v60 = 0;
    v57[1] = 0;
    v58 = 0;
    v59 = 0;
    *(_QWORD *)&v21 = re::DynamicArray<CachingHeap::TextureEntry>::add((uint64_t)v57, (uint64_t)&v61).n128_u64[0];
    v22 = 0xBF58476D1CE4E5B9;
    if (!a3)
      v22 = 0;
    v23 = (0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) ^ ((0x94D049BB133111EBLL * (v22 ^ (v22 >> 27))) >> 31);
    v24 = objc_msgSend(v8, v9[247], v21);
    v25 = ((unint64_t)v24 + 64 * v23 + (v23 >> 2) - 0x61C8864680B583E9) ^ v23;
    if (*(_QWORD *)(a1 + 136))
    {
      v26 = v25 % *(unsigned int *)(a1 + 160);
      v27 = *(unsigned int *)(*(_QWORD *)(a1 + 144) + 4 * v26);
      if ((_DWORD)v27 != 0x7FFFFFFF)
      {
        v55 = ((unint64_t)v24 + 64 * v23 + (v23 >> 2) - 0x61C8864680B583E9) ^ v23;
        v28 = *(_QWORD *)(a1 + 152);
        do
        {
          if (*(unsigned __int8 *)(v28 + 72 * v27 + 24) == a3)
          {
            if ((objc_msgSend(*(id *)(v28 + 72 * v27 + 16), sel_isEqual_, v8) & 1) != 0)
              goto LABEL_53;
            v28 = *(_QWORD *)(a1 + 152);
          }
          v27 = *(_DWORD *)(v28 + 72 * v27 + 8) & 0x7FFFFFFF;
        }
        while (v27 != 0x7FFFFFFF);
        v25 = v55;
      }
    }
    else
    {
      LODWORD(v26) = 0;
    }
    v29 = *(unsigned int *)(a1 + 172);
    if ((_DWORD)v29 == 0x7FFFFFFF)
    {
      v29 = *(unsigned int *)(a1 + 168);
      v30 = v29;
      if ((_DWORD)v29 == *(_DWORD *)(a1 + 160))
      {
        re::HashTable<CachingHeap::TextureCacheKey,re::DynamicArray<CachingHeap::TextureEntry>,CachingHeap::TextureCacheKeyHasher,CachingHeap::TextureCacheKeyEqualTo,true,false>::setCapacity(a1 + 136, 2 * *(_DWORD *)(a1 + 164));
        LODWORD(v26) = v25 % *(unsigned int *)(a1 + 160);
        v30 = *(_DWORD *)(a1 + 168);
      }
      *(_DWORD *)(a1 + 168) = v30 + 1;
      v31 = *(_QWORD *)(a1 + 152);
      v32 = *(_DWORD *)(v31 + 72 * v29 + 8);
    }
    else
    {
      v31 = *(_QWORD *)(a1 + 152);
      v32 = *(_DWORD *)(v31 + 72 * v29 + 8);
      *(_DWORD *)(a1 + 172) = v32 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v31 + 72 * v29 + 8) = v32 | 0x80000000;
    v33 = v26;
    *(_DWORD *)(*(_QWORD *)(a1 + 152) + 72 * v29 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 152) + 72 * v29 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v26);
    *(_QWORD *)(*(_QWORD *)(a1 + 152) + 72 * v29) = v25;
    v34 = *(_QWORD *)(a1 + 152) + 72 * v29;
    *(_QWORD *)(v34 + 16) = v8;
    *(_BYTE *)(v34 + 24) = a3;
    v35 = *(_QWORD *)(a1 + 152);
    v36 = v35 + 72 * v29;
    *(_QWORD *)(v36 + 32) = 0;
    v37 = v36 + 32;
    *(_QWORD *)(v37 + 32) = 0;
    v38 = (uint64_t *)(v37 + 32);
    *(_DWORD *)(v37 + 24) = 0;
    *(_QWORD *)(v37 + 8) = 0;
    *(_QWORD *)(v37 + 16) = 0;
    if (v57[0])
    {
      v39 = v35 + 72 * v29;
      v40 = v58;
      *(_QWORD *)v37 = v57[0];
      re::DynamicArray<CachingHeap::TextureEntry>::setCapacity((_QWORD *)v37, v40);
      v42 = *(_QWORD *)(v39 + 48);
      v41 = v39 + 48;
      ++*(_DWORD *)(v41 + 8);
      if (v40 >= v42)
      {
        re::DynamicArray<CachingHeap::TextureEntry>::setCapacity((_QWORD *)v37, v40);
        v49 = v60;
        std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,CachingHeap::TextureEntry *,CachingHeap::TextureEntry *,CachingHeap::TextureEntry *,0>(v60, v60 + 40 * *(_QWORD *)v41, *v38);
        if (*(_QWORD *)v41 != v40)
        {
          v50 = v49 + 40 * v40;
          v51 = v49 + 40 * *(_QWORD *)v41;
          v52 = *v38 + 40 * *(_QWORD *)v41;
          do
          {
            *(_QWORD *)v52 = *(id *)v51;
            *(_BYTE *)(v52 + 8) = *(_BYTE *)(v51 + 8);
            *(_QWORD *)(v52 + 16) = *(_QWORD *)(v51 + 16);
            *(_OWORD *)(v52 + 24) = *(_OWORD *)(v51 + 24);
            v51 += 40;
            v52 += 40;
          }
          while (v51 != v50);
        }
      }
      else
      {
        std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,CachingHeap::TextureEntry *,CachingHeap::TextureEntry *,CachingHeap::TextureEntry *,0>(v60, v60 + 40 * v40, *v38);
        if (v40 != *(_QWORD *)v41)
        {
          v43 = *v38 + 40 * v40;
          v44 = 40 * *(_QWORD *)v41 - 40 * v40;
          do
          {
            *(_QWORD *)(v43 + 16) = 0;
            if (*(_QWORD *)v43)
            {

              *(_QWORD *)v43 = 0;
            }
            v43 += 40;
            v44 -= 40;
          }
          while (v44);
        }
      }
      *(_QWORD *)v41 = v40;
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 144) + 4 * v33) = v29;
    ++*(_DWORD *)(a1 + 164);
    ++*(_DWORD *)(a1 + 176);
LABEL_53:
    re::DynamicArray<CachingHeap::TextureEntry>::deinit((uint64_t)v57);
    v19 = v56;
    if (!v56)
      goto LABEL_55;
    goto LABEL_54;
  }
  re::DynamicArray<CachingHeap::TextureEntry>::add(v14, (uint64_t)&v61);
  if (v19)
LABEL_54:

LABEL_55:
  if (v66)

LABEL_57:
  if (v8)

  return v20;
}

__n128 re::DynamicArray<CachingHeap::TextureEntry>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<CachingHeap::TextureEntry>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<CachingHeap::TextureEntry>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  v11 = *(_QWORD *)(a1 + 32) + 40 * v5;
  *(_QWORD *)v11 = *(id *)a2;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(a2 + 16);
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v11 + 24) = result;
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t CachingHeap::makeBuffer(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v9;

  if (a3 == 0xFFFF)
    v4 = 0;
  else
    v4 = a3;
  v5 = objc_msgSend(*(id *)(a1 + 16), sel_newBufferWithLength_options_, a2, v4);
  v9 = v5;
  if (!v5)
    return -1;
  v6 = v5;
  re::DynamicArray<NS::SharedPtr<MTL::Buffer>>::add(a1 + 96, &v9);
  v7 = *(_QWORD *)(a1 + 112) - 1;

  return v7;
}

void CachingHeap::releaseBuffer(CachingHeap *this, unint64_t a2)
{
  uint64_t v3;

  if (*((_QWORD *)this + 14) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v3 = *((_QWORD *)this + 16);

  *(_QWORD *)(v3 + 8 * a2) = 0;
}

void CachingHeap::onFrameFinish(CachingHeap *this)
{
  uint64_t v2;
  id *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned int v32;
  id v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;

  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::clear((uint64_t)this + 56);
  v2 = *((_QWORD *)this + 14);
  if (v2)
  {
    v3 = (id *)*((_QWORD *)this + 16);
    v4 = 8 * v2;
    do
    {
      v5 = *v3;
      if (v5)

      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::clear((uint64_t)this + 96);
  v45 = *((unsigned int *)this + 42);
  v6 = 0;
  if ((_DWORD)v45)
  {
    v7 = (int *)(*((_QWORD *)this + 19) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 18;
      if (v8 < 0)
        break;
      if (v45 == ++v6)
      {
        LODWORD(v6) = *((_DWORD *)this + 42);
        break;
      }
    }
  }
  if ((_DWORD)v45 == (_DWORD)v6)
    return;
  v9 = v6;
  do
  {
    v10 = *((_QWORD *)this + 19);
    v11 = v10 + 72 * v9;
    v14 = *(_QWORD *)(v11 + 48);
    v13 = (unint64_t *)(v11 + 48);
    v12 = v14;
    if (v14)
    {
      v15 = 0;
      v44 = *((_QWORD *)this + 19);
      v16 = v10 + 72 * v9;
      v17 = (uint64_t *)(v16 + 64);
      v18 = (_DWORD *)(v16 + 56);
      do
      {
        v19 = *v17;
        v20 = *v17 + 40 * v15;
        v23 = *(_DWORD *)(v20 + 24);
        v21 = (_DWORD *)(v20 + 24);
        v22 = v23;
        if (v23 < 4)
        {
          *(_QWORD *)(v19 + 40 * v15 + 32) = -1;
          *v21 = v22 + 1;
          ++v15;
        }
        else
        {

          *(_QWORD *)(v19 + 40 * v15) = 0;
          v24 = *v13;
          if (*v13 <= v15)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          if (v24 - 1 > v15)
          {
            v25 = *v17 + 40 * v24;
            v26 = *v17 + 40 * v15;
            NS::SharedPtr<MTL::Texture>::operator=((void **)v26, (void **)(v25 - 40));
            *(_BYTE *)(v26 + 8) = *(_BYTE *)(v25 - 32);
            *(_QWORD *)(v26 + 16) = *(_QWORD *)(v25 - 24);
            *(_OWORD *)(v26 + 24) = *(_OWORD *)(v25 - 16);
            v24 = *v13;
          }
          v27 = *v17 + 40 * v24;
          *(_QWORD *)(v27 - 24) = 0;
          v28 = *(void **)(v27 - 40);
          if (v28)
          {

            *(_QWORD *)(v27 - 40) = 0;
            v24 = *v13;
          }
          v12 = v24 - 1;
          *v13 = v24 - 1;
          ++*v18;
        }
      }
      while (v15 < v12);
      v10 = v44;
      if (v12)
        goto LABEL_37;
    }
    v29 = v10 + 72 * v9;
    v32 = *(unsigned __int8 *)(v29 + 24);
    v31 = (unsigned __int8 *)(v29 + 24);
    v30 = v32;
    v33 = objc_msgSend((id)*(v13 - 4), sel_hash);
    if (!*((_QWORD *)this + 17))
      goto LABEL_37;
    v34 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v30) ^ ((0xBF58476D1CE4E5B9 * v30) >> 27));
    v35 = (((unint64_t)v33 + 64 * (v34 ^ (v34 >> 31)) + ((v34 ^ (v34 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v34 ^ (v34 >> 31))
        % *((unsigned int *)this + 40);
    v36 = *(unsigned int *)(*((_QWORD *)this + 18) + 4 * v35);
    if ((_DWORD)v36 == 0x7FFFFFFF)
      goto LABEL_37;
    v37 = *((_QWORD *)this + 19);
    v38 = 0x7FFFFFFFLL;
    while (*(unsigned __int8 *)(v37 + 72 * v36 + 24) != *v31)
    {
LABEL_31:
      v38 = v36;
      v36 = *(_DWORD *)(v37 + 72 * v36 + 8) & 0x7FFFFFFF;
      if (v36 == 0x7FFFFFFF)
        goto LABEL_37;
    }
    if ((objc_msgSend(*(id *)(v37 + 72 * v36 + 16), sel_isEqual_, *(v13 - 4)) & 1) == 0)
    {
      v37 = *((_QWORD *)this + 19);
      goto LABEL_31;
    }
    v39 = *((_QWORD *)this + 19);
    v40 = *(_DWORD *)(v39 + 72 * v36 + 8) & 0x7FFFFFFF;
    if (v38 == 0x7FFFFFFF)
      *(_DWORD *)(*((_QWORD *)this + 18) + 4 * v35) = v40;
    else
      *(_DWORD *)(v39 + 72 * v38 + 8) = *(_DWORD *)(v39 + 72 * v38 + 8) & 0x80000000 | v40;
    re::HashTable<CachingHeap::TextureCacheKey,re::DynamicArray<CachingHeap::TextureEntry>,CachingHeap::TextureCacheKeyHasher,CachingHeap::TextureCacheKeyEqualTo,true,false>::EntryWithHash::free(*((_QWORD *)this + 19) + 72 * v36);
    *(_DWORD *)(*((_QWORD *)this + 19) + 72 * v36 + 8) = *(_DWORD *)(*((_QWORD *)this + 19) + 72 * v36 + 8) & 0x80000000 | *((_DWORD *)this + 43);
    --*((_DWORD *)this + 41);
    v41 = *((_DWORD *)this + 44) + 1;
    *((_DWORD *)this + 43) = v36;
    *((_DWORD *)this + 44) = v41;
LABEL_37:
    v42 = *((_DWORD *)this + 42);
    if (v42 <= (int)v6 + 1)
      v42 = v6 + 1;
    while (1)
    {
      v9 = (v6 + 1);
      if (v42 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v43 = v9;
      if ((*(_DWORD *)(*((_QWORD *)this + 19) + 72 * v9 + 8) & 0x80000000) != 0)
        goto LABEL_43;
    }
    v43 = v42;
LABEL_43:
    LODWORD(v6) = v43;
  }
  while ((_DWORD)v45 != v43);
}

double re::RenderGraphResourceAllocationManager::RenderGraphResourceAllocationManager(re::RenderGraphResourceAllocationManager *this)
{
  double result;

  *((_QWORD *)this + 4) = 0;
  *(_QWORD *)this = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 6) = 0;
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_WORD *)this + 56) = 0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_DWORD *)this + 24) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 36) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 180) = 0u;
  *(_QWORD *)((char *)this + 196) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 31) = 0;
  *((_WORD *)this + 128) = 0;
  *((_DWORD *)this + 60) = 0;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 1032) = xmmword_2260E7ED0;
  *((_DWORD *)this + 262) = 2;
  *((_QWORD *)this + 132) = 0;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *((_DWORD *)this + 270) = 0;
  *((_QWORD *)this + 141) = 0;
  *((_BYTE *)this + 1136) = 0;
  *((_QWORD *)this + 143) = 0;
  *((_OWORD *)this + 72) = 0u;
  *((_DWORD *)this + 292) = 0;
  *((_QWORD *)this + 166) = 0;
  *(_OWORD *)((char *)this + 1336) = 0u;
  *((_DWORD *)this + 338) = 0;
  *((_QWORD *)this + 205) = 0;
  *((_BYTE *)this + 1649) = 0;
  *((_OWORD *)this + 85) = 0u;
  *((_OWORD *)this + 86) = 0u;
  *((_DWORD *)this + 348) = 0;
  *(_OWORD *)((char *)this + 1400) = 0u;
  *(_OWORD *)((char *)this + 1416) = 0u;
  *((_DWORD *)this + 358) = 0;
  *((_DWORD *)this + 368) = 0;
  *((_OWORD *)this + 91) = 0u;
  *((_OWORD *)this + 90) = 0u;
  *(_OWORD *)((char *)this + 1480) = 0u;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *((_DWORD *)this + 378) = 0;
  *((_OWORD *)this + 95) = 0u;
  *((_OWORD *)this + 96) = 0u;
  *((_DWORD *)this + 388) = 0;
  *(_OWORD *)((char *)this + 1560) = 0u;
  *(_OWORD *)((char *)this + 1576) = 0u;
  *((_DWORD *)this + 398) = 0;
  *((_OWORD *)this + 100) = 0u;
  *((_OWORD *)this + 101) = 0u;
  *((_DWORD *)this + 408) = 0;
  *((_QWORD *)this + 209) = 0;
  *((_DWORD *)this + 420) = 0;
  *(_OWORD *)((char *)this + 1656) = 0u;
  *((_DWORD *)this + 280) = 0;
  *((_OWORD *)this + 69) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_DWORD *)this + 302) = 0;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 1192) = 0u;
  *((_DWORD *)this + 312) = 0;
  *((_OWORD *)this + 77) = 0u;
  *((_OWORD *)this + 76) = 0u;
  *((_DWORD *)this + 322) = 0;
  *(_OWORD *)((char *)this + 1256) = 0u;
  *(_OWORD *)((char *)this + 1272) = 0u;
  *((_QWORD *)this + 163) = 0;
  *((_QWORD *)this + 162) = 0;
  *((_QWORD *)this + 164) = 0;
  *(_OWORD *)((char *)this + 1688) = 0u;
  *(_OWORD *)((char *)this + 1704) = 0u;
  *(_OWORD *)((char *)this + 1720) = 0u;
  *(_OWORD *)((char *)this + 1736) = 0u;
  *(_OWORD *)((char *)this + 1752) = 0u;
  *((_QWORD *)this + 221) = 0;
  return result;
}

void re::RenderGraphResourceAllocationManager::~RenderGraphResourceAllocationManager(re::RenderGraphResourceAllocationManager *this)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  void *v18;
  uint64_t v19;
  uint64_t v20;

  re::RenderGraphResourceAllocationManager::deinit(this);
  v2 = *((_QWORD *)this + 207);
  if (v2)
  {
    v3 = (void **)*((_QWORD *)this + 211);
    if (v3)
    {
      v4 = *((_QWORD *)this + 209);
      if (v4)
      {
        v5 = 48 * v4;
        do
        {

          re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)(v3 + 1));
          v6 = *v3;
          v3 += 6;

          v5 -= 48;
        }
        while (v5);
        v2 = *((_QWORD *)this + 207);
        v3 = (void **)*((_QWORD *)this + 211);
      }
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v2 + 40))(v2, v3);
    }
    *((_QWORD *)this + 211) = 0;
    *((_QWORD *)this + 208) = 0;
    *((_QWORD *)this + 209) = 0;
    *((_QWORD *)this + 207) = 0;
    ++*((_DWORD *)this + 420);
  }
  v7 = *((_QWORD *)this + 201);
  if (v7)
  {
    if (*((_QWORD *)this + 205))
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    *((_QWORD *)this + 205) = 0;
    *((_QWORD *)this + 202) = 0;
    *((_QWORD *)this + 203) = 0;
    *((_QWORD *)this + 201) = 0;
    ++*((_DWORD *)this + 408);
  }
  v8 = *((_QWORD *)this + 196);
  if (v8)
  {
    if (*((_QWORD *)this + 200))
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    *((_QWORD *)this + 200) = 0;
    *((_QWORD *)this + 197) = 0;
    *((_QWORD *)this + 198) = 0;
    *((_QWORD *)this + 196) = 0;
    ++*((_DWORD *)this + 398);
  }
  v9 = *((_QWORD *)this + 191);
  if (v9)
  {
    if (*((_QWORD *)this + 195))
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    *((_QWORD *)this + 195) = 0;
    *((_QWORD *)this + 192) = 0;
    *((_QWORD *)this + 193) = 0;
    *((_QWORD *)this + 191) = 0;
    ++*((_DWORD *)this + 388);
  }
  v10 = *((_QWORD *)this + 186);
  if (v10)
  {
    if (*((_QWORD *)this + 190))
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    *((_QWORD *)this + 190) = 0;
    *((_QWORD *)this + 187) = 0;
    *((_QWORD *)this + 188) = 0;
    *((_QWORD *)this + 186) = 0;
    ++*((_DWORD *)this + 378);
  }
  v11 = *((_QWORD *)this + 181);
  if (v11)
  {
    if (*((_QWORD *)this + 185))
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    *((_QWORD *)this + 185) = 0;
    *((_QWORD *)this + 182) = 0;
    *((_QWORD *)this + 183) = 0;
    *((_QWORD *)this + 181) = 0;
    ++*((_DWORD *)this + 368);
  }
  v12 = *((_QWORD *)this + 176);
  if (v12)
  {
    if (*((_QWORD *)this + 180))
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    *((_QWORD *)this + 180) = 0;
    *((_QWORD *)this + 177) = 0;
    *((_QWORD *)this + 178) = 0;
    *((_QWORD *)this + 176) = 0;
    ++*((_DWORD *)this + 358);
  }
  v13 = (_QWORD *)((char *)this + 1328);
  v14 = *((_QWORD *)this + 171);
  if (v14)
  {
    if (*((_QWORD *)this + 175))
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
    *((_QWORD *)this + 175) = 0;
    *((_QWORD *)this + 172) = 0;
    *((_QWORD *)this + 173) = 0;
    *((_QWORD *)this + 171) = 0;
    ++*((_DWORD *)this + 348);
  }
  if (*v13)
  {
    if (*((_QWORD *)this + 170))
      (*(void (**)(_QWORD))(*(_QWORD *)*v13 + 40))(*v13);
    *((_QWORD *)this + 170) = 0;
    *((_QWORD *)this + 167) = 0;
    *((_QWORD *)this + 168) = 0;
    *v13 = 0;
    ++*((_DWORD *)this + 338);
  }
  v15 = *((_QWORD *)this + 158);
  if (v15)
  {
    if (*((_QWORD *)this + 162))
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
    *((_QWORD *)this + 162) = 0;
    *((_QWORD *)this + 159) = 0;
    *((_QWORD *)this + 160) = 0;
    *((_QWORD *)this + 158) = 0;
    ++*((_DWORD *)this + 322);
  }
  v16 = *((_QWORD *)this + 153);
  if (v16)
  {
    if (*((_QWORD *)this + 157))
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
    *((_QWORD *)this + 157) = 0;
    *((_QWORD *)this + 154) = 0;
    *((_QWORD *)this + 155) = 0;
    *((_QWORD *)this + 153) = 0;
    ++*((_DWORD *)this + 312);
  }
  re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::deinit((uint64_t)this + 1184);
  re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::deinit((uint64_t)this + 1144);
  re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::deinit((uint64_t)this + 1096);
  re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::deinit((uint64_t)this + 1056);
  for (i = 768; i != 256; i -= 8)
  {
    v18 = *(void **)((char *)this + i);
    if (v18)
    {

      *(_QWORD *)((char *)this + i) = 0;
    }
  }
  v19 = *((_QWORD *)this + 27);
  if (v19)
  {
    if (*((_QWORD *)this + 31))
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    *((_QWORD *)this + 31) = 0;
    *((_QWORD *)this + 28) = 0;
    *((_QWORD *)this + 29) = 0;
    *((_QWORD *)this + 27) = 0;
    ++*((_DWORD *)this + 60);
  }
  re::HashTable<unsigned long long,re::RenderGraphResourceAllocationManager::HeapGroupHierarchy,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 20);
  re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapGroup>::deinit((uint64_t)this + 120);
  v20 = *((_QWORD *)this + 9);
  if (v20)
  {
    if (*((_QWORD *)this + 13))
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 9) = 0;
    ++*((_DWORD *)this + 24);
  }

  if (*(_QWORD *)this)
  {
    if (*((_QWORD *)this + 4))
      (*(void (**)(_QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this);
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *(_QWORD *)this = 0;
    ++*((_DWORD *)this + 6);
  }
}

_QWORD *re::RenderGraphResourceAllocationManager::deinit(_QWORD *this)
{
  _QWORD *v1;
  void (***v2)(_QWORD);
  uint64_t v3;
  void (***v4)(_QWORD);
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (***v14)(_QWORD);
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (***v22)(_QWORD);
  uint64_t v23;
  void (***v24)(_QWORD);
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (***v37)(_QWORD);
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t *v58;

  if (*((_BYTE *)this + 40))
  {
    v1 = this;
    v2 = (void (***)(_QWORD))this[26];
    if (v2)
    {
      v3 = re::globalAllocators((re *)this)[2];
      (**v2)(v2);
      this = (_QWORD *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
    }
    v1[26] = 0;
    v1[29] = 0;
    ++*((_DWORD *)v1 + 60);
    v4 = (void (***)(_QWORD))v1[8];
    if (v4)
    {
      v5 = re::globalAllocators((re *)this)[2];
      (**v4)(v4);
      this = (_QWORD *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v5 + 40))(v5, v4);
    }
    v1[8] = 0;
    v1[11] = 0;
    ++*((_DWORD *)v1 + 24);
    v57 = v1;
    if (v1[17])
    {
      v6 = 0;
      do
      {
        v7 = v1[19];
        v8 = v7 + 48 * v6;
        v11 = *(_QWORD *)(v8 + 24);
        v10 = (unint64_t *)(v8 + 24);
        v9 = v11;
        if (v11)
        {
          v12 = 0;
          v13 = 0;
          do
          {
            v14 = *(void (****)(_QWORD))(*(_QWORD *)(v7 + 48 * v6 + 40) + v12);
            if (v14)
            {
              v15 = re::globalAllocators((re *)this)[2];
              (**v14)(v14);
              this = (_QWORD *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v15 + 40))(v15, v14);
              v9 = *v10;
            }
            ++v13;
            v12 += 56;
          }
          while (v9 > v13);
        }
        this = re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::clear((_QWORD *)(v7 + 48 * v6++ + 8));
        v1 = v57;
      }
      while (v57[17] > v6);
    }
    v56 = *((unsigned int *)v1 + 48);
    v16 = 0;
    if ((_DWORD)v56)
    {
      v17 = (int *)(v1[22] + 8);
      while (1)
      {
        v18 = *v17;
        v17 += 30;
        if (v18 < 0)
          break;
        if (v56 == ++v16)
        {
          LODWORD(v16) = *((_DWORD *)v1 + 48);
          break;
        }
      }
    }
    if ((_DWORD)v56 != (_DWORD)v16)
    {
      v19 = v16;
      do
      {
        v20 = v1[22];
        v21 = v20 + 120 * v19;
        v24 = *(void (****)(_QWORD))(v21 + 24);
        v23 = v21 + 24;
        v22 = v24;
        if (v24)
        {
          v25 = re::globalAllocators((re *)this)[2];
          (**v22)(v22);
          this = (_QWORD *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v25 + 40))(v25, v22);
        }
        *(_QWORD *)v23 = 0;
        *(_QWORD *)(v23 + 24) = 0;
        ++*(_DWORD *)(v23 + 32);
        v26 = v20 + 120 * v19;
        v28 = *(_QWORD *)(v26 + 96);
        v27 = (unint64_t *)(v26 + 96);
        if (v28)
        {
          v29 = 0;
          v58 = (uint64_t *)(v20 + 120 * v19 + 112);
          do
          {
            v30 = *v58;
            v31 = *v58 + 48 * v29;
            v34 = *(_QWORD *)(v31 + 24);
            v33 = (unint64_t *)(v31 + 24);
            v32 = v34;
            if (v34)
            {
              v35 = 0;
              v36 = 0;
              do
              {
                v37 = *(void (****)(_QWORD))(*(_QWORD *)(v30 + 48 * v29 + 40) + v35);
                if (v37)
                {
                  v38 = re::globalAllocators((re *)this)[2];
                  (**v37)(v37);
                  this = (_QWORD *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v38 + 40))(v38, v37);
                  v32 = *v33;
                }
                ++v36;
                v35 += 56;
              }
              while (v32 > v36);
            }
            this = re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::clear((_QWORD *)(v30 + 48 * v29++ + 8));
          }
          while (*v27 > v29);
        }
        v1 = v57;
        v39 = *((_DWORD *)v57 + 48);
        if (v39 <= (int)v16 + 1)
          v39 = v16 + 1;
        while (1)
        {
          v19 = (v16 + 1);
          if (v39 - 1 == (_DWORD)v16)
            break;
          LODWORD(v16) = v16 + 1;
          v40 = v19;
          if ((*(_DWORD *)(v57[22] + 120 * v19 + 8) & 0x80000000) != 0)
            goto LABEL_37;
        }
        v40 = v39;
LABEL_37:
        LODWORD(v16) = v40;
      }
      while ((_DWORD)v56 != v40);
    }
    if (v1[145])
    {
      v41 = 0;
      v42 = 0;
      v43 = 0;
      __asm { FMOV            V1.2S, #1.0 }
      while (1)
      {
        v49 = v1[147] + v42;
        *(_QWORD *)v49 = -1;
        *(_QWORD *)(v49 + 16) = 0;
        *(_DWORD *)(v49 + 24) += 2;
        *(_QWORD *)(v49 + 88) = 0;
        *(_DWORD *)(v49 + 96) += 2;
        *(_QWORD *)(v49 + 152) = 0;
        *(_BYTE *)(v49 + 160) = 0;
        *(_QWORD *)(v49 + 168) = 0;
        if (v1[155] <= v43)
          break;
        v50 = v1[157] + v41;
        *(_QWORD *)v50 = 3;
        *(_DWORD *)(v50 + 8) = 2;
        *(_QWORD *)(v50 + 28) = -1;
        *(_QWORD *)(v50 + 20) = -1;
        *(_QWORD *)(v50 + 12) = -1;
        *(_BYTE *)(v50 + 36) = 0;
        *(_QWORD *)(v50 + 40) = _D1;
        *(_OWORD *)(v50 + 48) = xmmword_226135530;
        *(_OWORD *)(v50 + 64) = xmmword_226135540;
        *(_DWORD *)(v50 + 80) = -1;
        *(_OWORD *)(v50 + 88) = xmmword_2260FF4D0;
        *(_BYTE *)(v50 + 104) = 0;
        ++v43;
        v42 += 184;
        v41 += 112;
        if (v1[145] <= v43)
          goto LABEL_42;
      }
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_49:
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_42:
    if (v1[150])
    {
      v51 = 0;
      v52 = 0;
      v53 = 168;
      do
      {
        v54 = (_QWORD *)(v1[152] + v53);
        *(v54 - 21) = -1;
        *(v54 - 19) = 0;
        *((_DWORD *)v54 - 36) += 2;
        *(v54 - 10) = 0;
        *((_DWORD *)v54 - 18) += 2;
        *(v54 - 2) = 0;
        *((_BYTE *)v54 - 8) = 0;
        *v54 = 0;
        if (v1[160] <= v52)
          goto LABEL_49;
        v55 = v1[162] + v51;
        *(_DWORD *)v55 = 0;
        *(_QWORD *)(v55 + 8) = -1;
        *(_BYTE *)(v55 + 16) = 0;
        *(_DWORD *)(v55 + 20) = 1065353216;
        *(_QWORD *)(v55 + 24) = 0xFFFFFFFF00000020;
        *(_OWORD *)(v55 + 32) = xmmword_2260FF4D0;
        ++v52;
        v53 += 184;
        v51 += 48;
      }
      while (v1[150] > v52);
    }
    *((_BYTE *)v1 + 40) = 0;
  }
  return this;
}

void re::RenderGraphResourceAllocationManager::init(re::RenderGraphResourceAllocationManager *this, id *a2)
{
  id *v4;
  id v5;
  uint64_t TextureCompressionType;
  id v7;
  id *v8;
  id v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  re *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[12];
  __int16 v34;
  int v35;
  __int16 v36;
  unint64_t v37;
  __int16 v38;
  unint64_t v39;
  id v40[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 40))
  {
    v4 = (id *)((char *)this + 48);
    re::ObjCObject::operator=((id *)this + 6, a2 + 23);
    *((_QWORD *)this + 7) = a2;
    *(_WORD *)((char *)this + 41) = 0;
    v5 = *((id *)this + 6);
    v40[0] = v5;
    *(_QWORD *)v33 = 4;
    v32 = 70;
    v31 = 2;
    TextureCompressionType = re::mtl::getTextureCompressionType(v40, &v31, &v32, v33);
    v7 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
    objc_msgSend(v7, sel_setStorageMode_, 2);
    if ((objc_msgSend(v7, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
      || objc_msgSend(v7, sel_methodSignatureForSelector_, sel_setCompressionType_))
    {
      objc_msgSend(v7, sel_setCompressionType_, TextureCompressionType);
    }
    objc_msgSend(v7, sel_setTextureType_, 2);
    objc_msgSend(v7, sel_setWidth_, 128);
    objc_msgSend(v7, sel_setHeight_, 129);
    objc_msgSend(v7, sel_setPixelFormat_, 70);
    objc_msgSend(v7, sel_setMipmapLevelCount_, 1);
    objc_msgSend(v7, sel_setUsage_, 4);
    objc_msgSend(v7, sel_setSampleCount_, 1);
    *((_BYTE *)this + 41) = (unint64_t)objc_msgSend(*((id *)this + 6), sel_heapTextureSizeAndAlignWithDescriptor_, v7) > 0x1FBD0;
    if (v7)

    if (*((_BYTE *)this + 41))
    {
      v40[0] = (id)41943040;
      re::DynamicArray<unsigned long>::add(this, v40);
      v40[0] = (id)((uint64_t)v40[0] * 2);
      re::DynamicArray<unsigned long>::add(this, v40);
      v40[0] = (char *)v40[0] + ((unint64_t)v40[0] >> 1);
      re::DynamicArray<unsigned long>::add(this, v40);
      v40[0] = (char *)v40[0] + ((unint64_t)v40[0] >> 1);
      re::DynamicArray<unsigned long>::add(this, v40);
      v40[0] = (char *)v40[0] + ((unint64_t)v40[0] >> 1);
      re::DynamicArray<unsigned long>::add(this, v40);
      v40[0] = (char *)v40[0] + ((unint64_t)v40[0] >> 1);
      re::DynamicArray<unsigned long>::add(this, v40);
      v40[0] = (char *)v40[0] + ((unint64_t)v40[0] >> 1);
      re::DynamicArray<unsigned long>::add(this, v40);
      v40[0] = (char *)v40[0] + ((unint64_t)v40[0] >> 1);
      v8 = v40;
    }
    else
    {
      v9 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
      if ((objc_msgSend(v9, sel_respondsToSelector_, sel_setCompressionType_) & 1) != 0
        || objc_msgSend(v9, sel_methodSignatureForSelector_, sel_setCompressionType_))
      {
        objc_msgSend(v9, sel_setCompressionType_, 0);
      }
      objc_msgSend(v9, sel_setWidth_, 1024);
      objc_msgSend(v9, sel_setHeight_, 1024);
      objc_msgSend(v9, sel_setPixelFormat_, 13);
      objc_msgSend(v9, sel_setTextureType_, 2);
      objc_msgSend(v9, sel_setStorageMode_, 2);
      objc_msgSend(v9, sel_setUsage_, 5);
      v10 = objc_msgSend(*v4, sel_heapTextureSizeAndAlignWithDescriptor_, v9);
      v12 = v11;
      v13 = (int)(v10 - 0x100000);
      if (v9)

      v14 = v13 + 2 * v12;
      v15 = 0x2000000;
      do
      {
        v40[0] = (id)(v15 + (v15 >> 20) * v14);
        re::DynamicArray<unsigned long>::add(this, v40);
        v16 = v15 >> 29;
        v15 *= 2;
      }
      while (!v16);
      v8 = (id *)&re::RenderGraphResourceAllocationManager::kHeapTopMemorySize;
    }
    re::DynamicArray<unsigned long>::add(this, v8);
    v17 = *((_QWORD *)this + 2);
    if (v17)
    {
      v18 = 0;
      while (!(*(_QWORD *)(*((_QWORD *)this + 4) + 8 * v18) >> 30))
      {
        if (v17 == ++v18)
          goto LABEL_21;
      }
    }
    else
    {
LABEL_21:
      v18 = v17 - 1;
    }
    re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapGroup>::resize((_QWORD *)this + 15, v18 + 1);
    if (*((_QWORD *)this + 17))
    {
      v19 = 0;
      v20 = 0;
      do
      {
        v21 = re::RenderGraphResourceAllocationManager::indexToSize(this, v20);
        v22 = *((_QWORD *)this + 17);
        if (v22 <= v20)
        {
          v32 = 0;
          v43 = 0u;
          v44 = 0u;
          v41 = 0u;
          v42 = 0u;
          *(_OWORD *)v40 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v33 = 136315906;
          *(_QWORD *)&v33[4] = "operator[]";
          v34 = 1024;
          v35 = 789;
          v36 = 2048;
          v37 = v20;
          v38 = 2048;
          v39 = v22;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v23 = (uint64_t *)(*((_QWORD *)this + 19) + v19);
        *v23 = v21;
        if ((unint64_t)v23[2] <= 0x7F)
        {
          re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::setCapacity(v23 + 1, 0x80uLL);
          v22 = *((_QWORD *)this + 17);
        }
        ++v20;
        v19 += 48;
      }
      while (v22 > v20);
    }
    *(_BYTE *)(re::RenderGraphResourceAllocationManager::allocateNewHeap((uint64_t)this, 32505856, 1024, 0) + 49) = 1;
    re::RenderGraphResourceAllocationManager::allocateSmallBlockHeap((re::RenderGraphResourceAllocationManager *)v40, (uint64_t)this, 0);
    *((id *)this + 8) = v40[0];
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)this + 72, (uint64_t)&v40[1]);
    *((_WORD *)this + 56) = v43;
    v24 = (re *)v40[1];
    if (v40[1] && *((_QWORD *)&v42 + 1))
      v24 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v40[1] + 40))();
    v25 = re::globalAllocators(v24);
    v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25[2] + 32))(v25[2], 136, 8);
    *(_OWORD *)(v26 + 40) = 0u;
    *(_OWORD *)(v26 + 8) = 0u;
    *(_OWORD *)(v26 + 56) = 0u;
    *(_OWORD *)(v26 + 72) = 0u;
    *(_OWORD *)(v26 + 88) = 0u;
    *(_OWORD *)(v26 + 104) = 0u;
    *(_OWORD *)(v26 + 120) = 0u;
    *(_OWORD *)(v26 + 24) = 0u;
    *(_QWORD *)v26 = &off_24ED75A70;
    *(_OWORD *)(v26 + 32) = 0u;
    *(_QWORD *)(v26 + 48) = 0;
    *(_OWORD *)(v26 + 16) = 0u;
    re::DynamicString::setCapacity((_QWORD *)(v26 + 24), 0);
    *(_QWORD *)(v26 + 56) = 0;
    *(_QWORD *)(v26 + 64) = 0;
    *(_DWORD *)(v26 + 80) = 0;
    *(_QWORD *)(v26 + 72) = 0;
    *(_QWORD *)(v26 + 128) = 0;
    *(_OWORD *)(v26 + 88) = 0u;
    *(_OWORD *)(v26 + 104) = 0u;
    *(_DWORD *)(v26 + 120) = 0;
    v30 = *((id *)this + 6);
    v40[0] = "HeapForMemoryless";
    v40[1] = (id)17;
    re::DynamicString::operator=((re::DynamicString *)(v26 + 24), (uint64_t)v40);
    re::ObjCObject::operator=((id *)(v26 + 16), &v30);
    *(_DWORD *)(v26 + 8) = 1;

    *((_QWORD *)&v42 + 1) = 0;
    v40[0] = (id)v26;
    v40[1] = 0;
    v41 = 0uLL;
    LODWORD(v42) = 0;
    LOWORD(v43) = 0;
    *((_QWORD *)this + 26) = v26;
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)this + 216, (uint64_t)&v40[1]);
    *((_WORD *)this + 128) = v43;
    if (v40[1] && *((_QWORD *)&v42 + 1))
      (*(void (**)(void))(*(_QWORD *)v40[1] + 40))();
    v27 = 0;
    v28 = (char *)this + 776;
    v29 = -512;
    do
    {
      v40[0] = objc_msgSend(*v4, sel_newFence);
      NS::SharedPtr<MTL::Texture>::operator=((void **)&v28[v29], v40);
      if (v40[0])

      *(_DWORD *)&v28[v27] = -1;
      v27 += 4;
      v29 += 8;
    }
    while (v29);
    *((_BYTE *)this + 40) = 1;
  }
}

_QWORD *re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapGroup>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = (48 * a2) | 8;
    v9 = a2;
    do
    {
      result = (_QWORD *)re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::deinit(v3[4] + v8);
      ++v9;
      v8 += 48;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapGroup>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 48 * v4;
      do
      {
        v7 = v3[4] + v6;
        *(_QWORD *)(v7 + 40) = 0;
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_DWORD *)(v7 + 32) = 0;
        v6 += 48;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::RenderGraphResourceAllocationManager::indexToSize(re::RenderGraphResourceAllocationManager *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *((_QWORD *)this + 2);
  if (a2 >= v2 - 1)
    v3 = v2 - 1;
  else
    v3 = a2;
  if (v2 <= v3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v3);
}

uint64_t re::RenderGraphResourceAllocationManager::allocateNewHeap(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  re *v14;
  uint64_t *v15;
  unint64_t v16;
  const char *v17;
  size_t v18;
  id *v19;
  int v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  char *v23;
  _anonymous_namespace_ *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  char v43;
  _BYTE v44[7];
  char *v45;
  uint64_t v46;
  int v47;
  const char *v48;
  __int16 v49;
  int v50;
  __int16 v51;
  unint64_t v52;
  __int16 v53;
  unint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v8 = re::RenderGraphResourceAllocationManager::heapGroupHierarchyFor((re::RenderGraphResourceAllocationManager *)a1, a4);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v11 = 0;
    while (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v11) < (unint64_t)(a2 + a3))
    {
      if (v10 == ++v11)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v11 = v10 - 1;
  }
  if (v11 >= *(_QWORD *)(v8 + 72))
    return 0;
  v12 = re::RenderGraphResourceAllocationManager::indexToSize((re::RenderGraphResourceAllocationManager *)a1, v11);
  v13 = *(_QWORD *)(a1 + 1696);
  *(_QWORD *)(a1 + 1696) = v13 + 1;
  v14 = (re *)re::DynamicString::format((re::DynamicString *)"Heap_%zu_(%zuMB)", (re::DynamicString *)&v42, v13, v12 >> 20);
  if (*(_BYTE *)(a1 + 42))
  {
    v15 = re::globalAllocators(v14);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 184, 8);
    *(_OWORD *)(v16 + 40) = 0u;
    *(_OWORD *)(v16 + 8) = 0u;
    *(_OWORD *)(v16 + 56) = 0u;
    *(_OWORD *)(v16 + 72) = 0u;
    *(_OWORD *)(v16 + 88) = 0u;
    *(_OWORD *)(v16 + 104) = 0u;
    *(_OWORD *)(v16 + 120) = 0u;
    *(_OWORD *)(v16 + 136) = 0u;
    *(_OWORD *)(v16 + 152) = 0u;
    *(_OWORD *)(v16 + 168) = 0u;
    *(_OWORD *)(v16 + 24) = 0u;
    *(_QWORD *)v16 = &off_24ED75B90;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_QWORD *)(v16 + 48) = 0;
    *(_OWORD *)(v16 + 16) = 0u;
    re::DynamicString::setCapacity((_QWORD *)(v16 + 24), 0);
    *(_QWORD *)(v16 + 56) = 0;
    *(_QWORD *)(v16 + 64) = 0;
    *(_DWORD *)(v16 + 80) = 0;
    *(_QWORD *)(v16 + 72) = 0;
    *(_OWORD *)(v16 + 88) = 0u;
    *(_OWORD *)(v16 + 104) = 0u;
    *(_DWORD *)(v16 + 120) = 0;
    *(_OWORD *)(v16 + 144) = 0u;
    *(_OWORD *)(v16 + 160) = 0u;
    *(_OWORD *)(v16 + 128) = 0u;
    *(_QWORD *)(v16 + 176) = 0;
    *(_DWORD *)(v16 + 172) = 0x7FFFFFFF;
    if ((v43 & 1) != 0)
      v17 = v45;
    else
      v17 = v44;
    v41 = *(id *)(a1 + 48);
    v18 = strlen(v17);
    *(_QWORD *)&v55 = v17;
    *((_QWORD *)&v55 + 1) = v18;
    re::DynamicString::operator=((re::DynamicString *)(v16 + 24), (uint64_t)&v55);
    v19 = &v41;
    re::ObjCObject::operator=((id *)(v16 + 16), &v41);
    v20 = 3;
LABEL_18:
    *(_DWORD *)(v16 + 8) = v20;
    goto LABEL_19;
  }
  v22 = *(uint64_t (**)(void))(*(_QWORD *)re::globalAllocators(v14)[2] + 32);
  if (a4)
  {
    v16 = v22();
    *(_OWORD *)v16 = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_OWORD *)(v16 + 64) = 0u;
    *(_OWORD *)(v16 + 80) = 0u;
    *(_OWORD *)(v16 + 96) = 0u;
    *(_OWORD *)(v16 + 112) = 0u;
    *(_QWORD *)(v16 + 128) = 0;
    *(_OWORD *)(v16 + 16) = 0u;
    DeviceHeap::DeviceHeap((DeviceHeap *)v16);
    if ((v43 & 1) != 0)
      v23 = v45;
    else
      v23 = v44;
    v40 = *(id *)(a1 + 48);
    re::DynamicString::operator=((re::DynamicString *)(v16 + 24), v23);
    v19 = &v40;
    re::ObjCObject::operator=((id *)(v16 + 16), &v40);
    v20 = 1;
    goto LABEL_18;
  }
  v16 = v22();
  *(_OWORD *)(v16 + 56) = 0u;
  *(_OWORD *)(v16 + 8) = 0u;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 88) = 0u;
  *(_OWORD *)(v16 + 104) = 0u;
  *(_OWORD *)(v16 + 120) = 0u;
  *(_OWORD *)(v16 + 136) = 0u;
  *(_OWORD *)(v16 + 152) = 0u;
  *(_OWORD *)(v16 + 168) = 0u;
  *(_OWORD *)(v16 + 184) = 0u;
  *(_QWORD *)(v16 + 200) = 0;
  *(_QWORD *)v16 = &off_24ED75B00;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 40) = 0u;
  *(_QWORD *)(v16 + 56) = 0;
  re::DynamicString::setCapacity((_QWORD *)(v16 + 32), 0);
  *(_QWORD *)(v16 + 64) = 0;
  *(_QWORD *)(v16 + 72) = 0;
  *(_DWORD *)(v16 + 88) = 0;
  *(_QWORD *)(v16 + 80) = 0;
  *(_QWORD *)(v16 + 96) = 0;
  *(_QWORD *)(v16 + 104) = 0;
  *(_DWORD *)(v16 + 112) = 0;
  *(_QWORD *)(v16 + 116) = 0x1FFFFFFFFLL;
  *(_QWORD *)(v16 + 136) = 0;
  *(_QWORD *)(v16 + 144) = 0;
  *(_QWORD *)(v16 + 128) = 0;
  *(_DWORD *)(v16 + 152) = 0;
  *(_QWORD *)(v16 + 160) = 0;
  *(_QWORD *)(v16 + 168) = 0;
  *(_DWORD *)(v16 + 176) = 0;
  *(_QWORD *)(v16 + 180) = 0x1FFFFFFFFLL;
  if ((v43 & 1) != 0)
    v35 = v45;
  else
    v35 = v44;
  v39 = *(id *)(a1 + 48);
  v19 = &v39;
  MetalHeap::init(v16, v35, &v39, v12);
LABEL_19:

  v25 = *(_QWORD *)(v9 + 72);
  if (v25 <= v11)
  {
    v46 = 0;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v55 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v47 = 136315906;
    v48 = "operator[]";
    v49 = 1024;
    v50 = 789;
    v51 = 2048;
    v52 = v11;
    v53 = 2048;
    v54 = v25;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_41;
  }
  v26 = *(_QWORD *)(v9 + 88);
  v27 = v26 + 48 * v11;
  v30 = *(_QWORD *)(v27 + 24);
  v29 = (unint64_t *)(v27 + 24);
  v28 = v30;
  v31 = *(v29 - 1);
  if (v30 >= v31)
  {
    v32 = v28 + 1;
    if (v31 < v28 + 1)
    {
      if (*(v29 - 2))
      {
        v33 = 2 * v31;
        if (!v31)
          v33 = 8;
        if (v33 <= v32)
          v34 = v32;
        else
          v34 = v33;
        re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::setCapacity(v29 - 2, v34);
      }
      else
      {
        re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::setCapacity(v29 - 2, v32);
        ++*(_DWORD *)(v26 + 48 * v11 + 32);
      }
    }
    v28 = *v29;
  }
  v36 = v26 + 48 * v11;
  v37 = *(_QWORD *)(v36 + 40) + 56 * v28;
  *(_QWORD *)(v37 + 40) = 0;
  *(_DWORD *)(v37 + 32) = 0;
  *(_QWORD *)(v37 + 16) = 0;
  *(_QWORD *)(v37 + 24) = 0;
  *(_QWORD *)v37 = v16;
  *(_QWORD *)(v37 + 8) = 0;
  *(_DWORD *)(v37 + 32) = 1;
  *(_WORD *)(v37 + 48) = 0;
  ++*v29;
  ++*(_DWORD *)(v36 + 32);
  v16 = *(_QWORD *)(v9 + 72);
  if (v16 <= v11)
  {
LABEL_41:
    v46 = 0;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v55 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v47 = 136315906;
    v48 = "operator[]";
    v49 = 1024;
    v50 = 789;
    v51 = 2048;
    v52 = v11;
    v53 = 2048;
    v54 = v16;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v21 = *(_QWORD *)(*(_QWORD *)(v9 + 88) + 48 * v11 + 40)
      + 56 * *(_QWORD *)(*(_QWORD *)(v9 + 88) + 48 * v11 + 24)
      - 56;
  if (v42 && (v43 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v42 + 40))();
  return v21;
}

void re::RenderGraphResourceAllocationManager::allocateSmallBlockHeap(re::RenderGraphResourceAllocationManager *this, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  id *v7;
  int v8;
  uint64_t (*v10)(void);
  id v11;
  id v12;
  id v13;
  _QWORD v14[2];

  if (*(_BYTE *)(a2 + 42))
  {
    v5 = re::globalAllocators(this);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 184, 8);
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 8) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_OWORD *)(v6 + 120) = 0u;
    *(_OWORD *)(v6 + 136) = 0u;
    *(_OWORD *)(v6 + 152) = 0u;
    *(_OWORD *)(v6 + 168) = 0u;
    *(_OWORD *)(v6 + 24) = 0u;
    *(_QWORD *)v6 = &off_24ED75B90;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_QWORD *)(v6 + 48) = 0;
    *(_OWORD *)(v6 + 16) = 0u;
    re::DynamicString::setCapacity((_QWORD *)(v6 + 24), 0);
    *(_QWORD *)(v6 + 56) = 0;
    *(_QWORD *)(v6 + 64) = 0;
    *(_DWORD *)(v6 + 80) = 0;
    *(_QWORD *)(v6 + 72) = 0;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_OWORD *)(v6 + 104) = 0u;
    *(_DWORD *)(v6 + 120) = 0;
    *(_OWORD *)(v6 + 144) = 0u;
    *(_OWORD *)(v6 + 160) = 0u;
    *(_OWORD *)(v6 + 128) = 0u;
    *(_QWORD *)(v6 + 176) = 0;
    *(_DWORD *)(v6 + 172) = 0x7FFFFFFF;
    v13 = *(id *)(a2 + 48);
    v14[0] = "SmallBlock";
    v14[1] = 10;
    re::DynamicString::operator=((re::DynamicString *)(v6 + 24), (uint64_t)v14);
    v7 = &v13;
    re::ObjCObject::operator=((id *)(v6 + 16), &v13);
    v8 = 3;
  }
  else
  {
    v10 = *(uint64_t (**)(void))(*(_QWORD *)re::globalAllocators(this)[2] + 32);
    if (!a3)
    {
      v6 = v10();
      *(_OWORD *)(v6 + 56) = 0u;
      *(_OWORD *)(v6 + 8) = 0u;
      *(_OWORD *)(v6 + 72) = 0u;
      *(_OWORD *)(v6 + 88) = 0u;
      *(_OWORD *)(v6 + 104) = 0u;
      *(_OWORD *)(v6 + 120) = 0u;
      *(_OWORD *)(v6 + 136) = 0u;
      *(_OWORD *)(v6 + 152) = 0u;
      *(_OWORD *)(v6 + 168) = 0u;
      *(_OWORD *)(v6 + 184) = 0u;
      *(_QWORD *)(v6 + 200) = 0;
      *(_QWORD *)v6 = &off_24ED75B00;
      *(_OWORD *)(v6 + 24) = 0u;
      *(_OWORD *)(v6 + 40) = 0u;
      *(_QWORD *)(v6 + 56) = 0;
      re::DynamicString::setCapacity((_QWORD *)(v6 + 32), 0);
      *(_QWORD *)(v6 + 64) = 0;
      *(_QWORD *)(v6 + 72) = 0;
      *(_DWORD *)(v6 + 88) = 0;
      *(_QWORD *)(v6 + 80) = 0;
      *(_QWORD *)(v6 + 96) = 0;
      *(_QWORD *)(v6 + 104) = 0;
      *(_DWORD *)(v6 + 112) = 0;
      *(_QWORD *)(v6 + 116) = 0x1FFFFFFFFLL;
      *(_QWORD *)(v6 + 136) = 0;
      *(_QWORD *)(v6 + 144) = 0;
      *(_QWORD *)(v6 + 128) = 0;
      *(_DWORD *)(v6 + 152) = 0;
      *(_QWORD *)(v6 + 160) = 0;
      *(_QWORD *)(v6 + 168) = 0;
      *(_DWORD *)(v6 + 176) = 0;
      *(_QWORD *)(v6 + 180) = 0x1FFFFFFFFLL;
      v11 = *(id *)(a2 + 48);
      v7 = &v11;
      MetalHeap::init(v6, "SmallBlock", &v11, 0x800000);
      goto LABEL_6;
    }
    v6 = v10();
    *(_OWORD *)v6 = 0u;
    *(_OWORD *)(v6 + 32) = 0u;
    *(_OWORD *)(v6 + 48) = 0u;
    *(_OWORD *)(v6 + 64) = 0u;
    *(_OWORD *)(v6 + 80) = 0u;
    *(_OWORD *)(v6 + 96) = 0u;
    *(_OWORD *)(v6 + 112) = 0u;
    *(_QWORD *)(v6 + 128) = 0;
    *(_OWORD *)(v6 + 16) = 0u;
    DeviceHeap::DeviceHeap((DeviceHeap *)v6);
    v12 = *(id *)(a2 + 48);
    re::DynamicString::operator=((re::DynamicString *)(v6 + 24), "SmallBlock");
    v7 = &v12;
    re::ObjCObject::operator=((id *)(v6 + 16), &v12);
    v8 = 1;
  }
  *(_DWORD *)(v6 + 8) = v8;
LABEL_6:

  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)this = v6;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_WORD *)this + 24) = 0;
}

void DeviceHeap::DeviceHeap(DeviceHeap *this)
{
  *((_DWORD *)this + 2) = 0;
  *(_QWORD *)this = &off_24ED75A70;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_QWORD *)this + 6) = 0;
  re::DynamicString::setCapacity((_QWORD *)this + 3, 0);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 0;
}

_QWORD *re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = result;
  v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    v3 = 56 * v2;
    v4 = (_QWORD *)(result[4] + 40);
    do
    {
      result = (_QWORD *)*(v4 - 4);
      if (result)
      {
        if (*v4)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
        *v4 = 0;
        *(v4 - 3) = 0;
        *(v4 - 2) = 0;
        *(v4 - 4) = 0;
        ++*((_DWORD *)v4 - 2);
      }
      v4 += 7;
      v3 -= 56;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

void re::RenderGraphResourceAllocationManager::makeTexture(re::RenderGraphResourceAllocationManager *this@<X0>, const re::RenderGraphTargetDescription *a2@<X2>, const re::StringID *a3@<X3>, unint64_t a4@<X1>, unint64_t a5@<X8>)
{
  unint64_t v5;
  const re::StringID *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  char *v21;
  unint64_t v22;
  unint64_t *HeapFor;
  _BOOL8 v24;
  id v25;
  void *v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  const re::StringID *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _anonymous_namespace_ *v57;
  uint64_t v58;
  unsigned int v59;
  const re::StringID *v60;
  BOOL v61;
  _QWORD *v62;
  uint64_t v63;
  id v64;
  id v65[2];
  id v66[2];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  _BYTE v79[12];
  __int16 v80;
  int v81;
  __int16 v82;
  unint64_t v83;
  __int16 v84;
  unint64_t v85;
  _OWORD v86[5];
  uint64_t v87;

  v6 = a3;
  v7 = (unint64_t)a2;
  v8 = a4;
  v87 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 1136))
    goto LABEL_8;
  v11 = a4;
  v12 = *((_QWORD *)this + 145);
  if (v12 <= a4)
  {
    *(_QWORD *)v79 = 0;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    *(_OWORD *)v66 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v86[0]) = 136315906;
    *(_QWORD *)((char *)v86 + 4) = "operator[]";
    WORD6(v86[0]) = 1024;
    *(_DWORD *)((char *)v86 + 14) = 789;
    WORD1(v86[1]) = 2048;
    *(_QWORD *)((char *)&v86[1] + 4) = v8;
    WORD6(v86[1]) = 2048;
    *(_QWORD *)((char *)&v86[1] + 14) = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_60:
    *(_QWORD *)v79 = 0;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    *(_OWORD *)v66 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v86[0]) = 136315906;
    *(_QWORD *)((char *)v86 + 4) = "operator[]";
    WORD6(v86[0]) = 1024;
    *(_DWORD *)((char *)v86 + 14) = 789;
    WORD1(v86[1]) = 2048;
    *(_QWORD *)((char *)&v86[1] + 4) = v11;
    WORD6(v86[1]) = 2048;
    *(_QWORD *)((char *)&v86[1] + 14) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_61:
    v65[1] = 0;
    memset(v86, 0, sizeof(v86));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v79 = 136315906;
    *(_QWORD *)&v79[4] = "operator[]";
    v80 = 1024;
    v81 = 789;
    v82 = 2048;
    v83 = v5;
    v84 = 2048;
    v85 = a5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_62:
    *(_QWORD *)v79 = 0;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    *(_OWORD *)v66 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v86[0]) = 136315906;
    *(_QWORD *)((char *)v86 + 4) = "operator[]";
    WORD6(v86[0]) = 1024;
    *(_DWORD *)((char *)v86 + 14) = 789;
    WORD1(v86[1]) = 2048;
    *(_QWORD *)((char *)&v86[1] + 4) = v5;
    WORD6(v86[1]) = 2048;
    *(_QWORD *)((char *)&v86[1] + 14) = a5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_63;
  }
  v13 = *((_QWORD *)this + 147);
  if (*(_QWORD *)(v13 + 184 * a4 + 168))
  {
    v14 = v13 + 184 * a4;
    v16 = *(_QWORD *)(v14 + 152);
    v15 = (_QWORD *)(v14 + 152);
    if (v16 == *(_QWORD *)a3 >> 1)
    {
      v8 = *((_QWORD *)this + 134);
      if (v8 <= a4)
      {
LABEL_65:
        *(_QWORD *)v79 = 0;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        *(_OWORD *)v66 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v86[0]) = 136315906;
        *(_QWORD *)((char *)v86 + 4) = "operator[]";
        WORD6(v86[0]) = 1024;
        *(_DWORD *)((char *)v86 + 14) = 789;
        WORD1(v86[1]) = 2048;
        *(_QWORD *)((char *)&v86[1] + 4) = v11;
        WORD6(v86[1]) = 2048;
        *(_QWORD *)((char *)&v86[1] + 14) = v8;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_66;
      }
      v8 = v13 + 184 * a4;
      v17 = *((_QWORD *)this + 136) + 184 * a4;
      *(_QWORD *)v17 = *(_QWORD *)v8;
      re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=(v17 + 8, (uint64_t *)(v8 + 8));
      re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=(v17 + 80, (uint64_t *)(v8 + 80));
      *(_QWORD *)(v17 + 152) = *v15;
      v18 = *(_OWORD *)(v8 + 160);
      *(_QWORD *)(v17 + 176) = *(_QWORD *)(v8 + 176);
      *(_OWORD *)(v17 + 160) = v18;
      v6 = (const re::StringID *)*((_QWORD *)this + 134);
      if ((unint64_t)v6 <= v11)
      {
LABEL_66:
        *(_QWORD *)v79 = 0;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        *(_OWORD *)v66 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v86[0]) = 136315906;
        *(_QWORD *)((char *)v86 + 4) = "operator[]";
        WORD6(v86[0]) = 1024;
        *(_DWORD *)((char *)v86 + 14) = 789;
        WORD1(v86[1]) = 2048;
        *(_QWORD *)((char *)&v86[1] + 4) = v11;
        WORD6(v86[1]) = 2048;
        *(_QWORD *)((char *)&v86[1] + 14) = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_67;
      }
      *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 136) + 184 * v11 + 168) + 48) = 1;
      goto LABEL_51;
    }
    v19 = 1;
  }
  else
  {
LABEL_8:
    v19 = 0;
  }
  textureDescFromTargetDesc((uint64_t)a2, v65);
  v5 = 0;
  v20 = *(_DWORD *)(v7 + 68) & 0x70;
  if (*((_BYTE *)this + 42))
  {
    v21 = 0;
  }
  else
  {
    v21 = 0;
    if (v20 != 48)
    {
      v21 = (char *)objc_msgSend(*((id *)this + 6), sel_heapTextureSizeAndAlignWithDescriptor_, v65[0]);
      v5 = v22;
    }
  }
  v62 = (_QWORD *)a5;
  if (v20 == 48)
  {
    HeapFor = (unint64_t *)((char *)this + 208);
  }
  else
  {
    HeapFor = re::RenderGraphResourceAllocationManager::findHeapFor(this, (unint64_t)v21, v5, *(_QWORD *)(v7 + 88));
    if (!HeapFor)
    {
LABEL_46:
      v50 = 0;
      a5 = (unint64_t)v62;
      *v62 = 0;
      goto LABEL_47;
    }
  }
  v61 = v20 == 48;
  v24 = v20 == 48;
  v11 = *HeapFor;
  v25 = v65[0];
  v63 = *(_QWORD *)v6 >> 1;
  v64 = v25;
  v26 = (void *)(*(uint64_t (**)(unint64_t, id *, _BOOL8, uint64_t *))(*(_QWORD *)v11 + 24))(v11, &v64, v24, &v63);
  v63 = 0;
  if (v64)
  {

    v64 = 0;
  }
  if (v26 == (void *)-1)
    goto LABEL_46;
  *((_BYTE *)HeapFor + 48) = 1;
  v27 = (unint64_t)&v21[v5];
  *((_QWORD *)this + 215) += v27;
  v28 = (char *)(*((_QWORD *)this + 213) + v27);
  *((_QWORD *)this + 213) = v28;
  if ((unint64_t)v28 > *((_QWORD *)this + 214))
    *((_QWORD *)this + 214) = v28;
  if (v27 > *((_QWORD *)this + 216))
    *((_QWORD *)this + 216) = v27;
  ++*((_QWORD *)this + 219);
  v29 = *(_QWORD *)v6 >> 1;
  v66[1] = 0;
  *(_QWORD *)&v67 = 0;
  v66[0] = v26;
  DWORD2(v67) = 1;
  v68 = 0uLL;
  v71 = 0;
  v72 = 0;
  v73 = 1;
  v74 = 0;
  v75 = 0;
  v76 = v29;
  LOBYTE(v77) = 0;
  *((_QWORD *)&v77 + 1) = HeapFor;
  v78 = 0;
  v5 = v8;
  a5 = *((_QWORD *)this + 134);
  if (a5 <= v8)
    goto LABEL_61;
  v59 = v8;
  v8 = v19;
  v60 = v6;
  v6 = (const re::StringID *)(*((_QWORD *)this + 136) + 184 * v5);
  *(_QWORD *)v6 = v26;
  re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=((uint64_t)v6 + 8, (uint64_t)&v66[1]);
  re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=((uint64_t)v6 + 80, (uint64_t)&v71);
  *((_QWORD *)v6 + 19) = v76;
  v30 = v77;
  *((_QWORD *)v6 + 22) = v78;
  *((_OWORD *)v6 + 10) = v30;
  v76 = 0;
  if (v71)
  {
    v31 = v73;
    if ((v73 & 1) == 0)
    {
      (*(void (**)(void))(*(_QWORD *)v71 + 40))();
      v31 = v73;
    }
    v71 = 0;
    v72 = 0;
    v73 = (v31 | 1) + 2;
  }
  if (v66[1] && (BYTE8(v67) & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v66[1] + 40))();
  a5 = *((_QWORD *)this + 134);
  v32 = v60;
  if (a5 <= v5)
    goto LABEL_62;
  v33 = *((_QWORD *)this + 136) + 184 * v5;
  *(_BYTE *)(v33 + 160) = v61;
  *(_QWORD *)(v33 + 176) = v27;
  if ((_DWORD)v8)
  {
    a5 = *((_QWORD *)this + 145);
    if (a5 <= v5)
    {
LABEL_63:
      *(_QWORD *)v79 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      *(_OWORD *)v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v86[0]) = 136315906;
      *(_QWORD *)((char *)v86 + 4) = "operator[]";
      WORD6(v86[0]) = 1024;
      *(_DWORD *)((char *)v86 + 14) = 789;
      WORD1(v86[1]) = 2048;
      *(_QWORD *)((char *)&v86[1] + 4) = v5;
      WORD6(v86[1]) = 2048;
      *(_QWORD *)((char *)&v86[1] + 14) = a5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_64;
    }
    v34 = *((_QWORD *)this + 147) + 184 * v5;
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(v34 + 168) + 32))(**(_QWORD **)(v34 + 168), *(_QWORD *)v34);
    a5 = *((_QWORD *)this + 155);
    if (a5 <= v5)
    {
LABEL_64:
      *(_QWORD *)v79 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      *(_OWORD *)v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v86[0]) = 136315906;
      *(_QWORD *)((char *)v86 + 4) = "operator[]";
      WORD6(v86[0]) = 1024;
      *(_DWORD *)((char *)v86 + 14) = 789;
      WORD1(v86[1]) = 2048;
      *(_QWORD *)((char *)&v86[1] + 4) = v5;
      WORD6(v86[1]) = 2048;
      *(_QWORD *)((char *)&v86[1] + 14) = a5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_65;
    }
    v35 = *((_QWORD *)this + 157) + 112 * v5;
    *(_QWORD *)v35 = 3;
    *(_DWORD *)(v35 + 8) = 2;
    *(_QWORD *)(v35 + 12) = -1;
    *(_QWORD *)(v35 + 20) = -1;
    *(_QWORD *)(v35 + 28) = -1;
    *(_BYTE *)(v35 + 36) = 0;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)(v35 + 40) = _D0;
    *(_OWORD *)(v35 + 48) = xmmword_226135530;
    *(_OWORD *)(v35 + 64) = xmmword_226135540;
    *(_DWORD *)(v35 + 80) = -1;
    *(_OWORD *)(v35 + 88) = xmmword_2260FF4D0;
    *(_BYTE *)(v35 + 104) = 0;
  }
  v8 = v59;
  if (*((_BYTE *)this + 1136) && *(_DWORD *)(v11 + 8) == 2)
  {
    a5 = *((_QWORD *)this + 134);
    if (a5 <= v5)
    {
LABEL_67:
      *(_QWORD *)v79 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      *(_OWORD *)v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v86[0]) = 136315906;
      *(_QWORD *)((char *)v86 + 4) = "operator[]";
      WORD6(v86[0]) = 1024;
      *(_DWORD *)((char *)v86 + 14) = 789;
      WORD1(v86[1]) = 2048;
      *(_QWORD *)((char *)&v86[1] + 4) = v5;
      WORD6(v86[1]) = 2048;
      *(_QWORD *)((char *)&v86[1] + 14) = a5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_68;
    }
    a5 = *((_QWORD *)this + 145);
    if (a5 <= v5)
    {
LABEL_68:
      *(_QWORD *)v79 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      *(_OWORD *)v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v86[0]) = 136315906;
      *(_QWORD *)((char *)v86 + 4) = "operator[]";
      WORD6(v86[0]) = 1024;
      *(_DWORD *)((char *)v86 + 14) = 789;
      WORD1(v86[1]) = 2048;
      *(_QWORD *)((char *)&v86[1] + 4) = v5;
      WORD6(v86[1]) = 2048;
      *(_QWORD *)((char *)&v86[1] + 14) = a5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_69:
      *(_QWORD *)v79 = 0;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      *(_OWORD *)v66 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v86[0]) = 136315906;
      *(_QWORD *)((char *)v86 + 4) = "operator[]";
      WORD6(v86[0]) = 1024;
      *(_DWORD *)((char *)v86 + 14) = 789;
      WORD1(v86[1]) = 2048;
      *(_QWORD *)((char *)&v86[1] + 4) = v5;
      WORD6(v86[1]) = 2048;
      *(_QWORD *)((char *)&v86[1] + 14) = a5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v41 = *((_QWORD *)this + 136) + 184 * v5;
    v42 = *((_QWORD *)this + 147) + 184 * v5;
    *(_QWORD *)v42 = *(_QWORD *)v41;
    re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=(v42 + 8, (uint64_t *)(v41 + 8));
    re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=(v42 + 80, (uint64_t *)(v41 + 80));
    *(_QWORD *)(v42 + 152) = *(_QWORD *)(v41 + 152);
    v43 = *(_OWORD *)(v41 + 160);
    *(_QWORD *)(v42 + 176) = *(_QWORD *)(v41 + 176);
    *(_OWORD *)(v42 + 160) = v43;
    a5 = *((_QWORD *)this + 155);
    if (a5 <= v5)
      goto LABEL_69;
    v44 = (_OWORD *)(*((_QWORD *)this + 157) + 112 * v5);
    v45 = *(_OWORD *)v7;
    v46 = *(_OWORD *)(v7 + 32);
    v44[1] = *(_OWORD *)(v7 + 16);
    v44[2] = v46;
    *v44 = v45;
    v47 = *(_OWORD *)(v7 + 48);
    v48 = *(_OWORD *)(v7 + 64);
    v49 = *(_OWORD *)(v7 + 80);
    *(_OWORD *)((char *)v44 + 89) = *(_OWORD *)(v7 + 89);
    v44[4] = v48;
    v44[5] = v49;
    v44[3] = v47;
    v32 = v60;
  }
  (*(void (**)(id *__return_ptr, unint64_t, void *))(*(_QWORD *)v11 + 96))(v66, v11, v26);
  v7 = (unint64_t)v66[0];
  objc_msgSend(v66[0], sel_setLabel_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, *((_QWORD *)v32 + 1), 4));
  if (v66[0])

  v50 = 1;
  a5 = (unint64_t)v62;
LABEL_47:
  if (v65[0])

  if (v50)
  {
    v6 = (const re::StringID *)*((_QWORD *)this + 134);
    v11 = v8;
LABEL_51:
    if ((unint64_t)v6 > v11)
    {
      v51 = *((_QWORD *)this + 136) + 184 * v11;
      v52 = *(uint64_t **)(v51 + 168);
      v53 = *v52;
      v54 = *(_QWORD *)v51;
      if (*(_BYTE *)(v51 + 160))
      {
        ++*((_QWORD *)this + 217);
      }
      else if (v52[3])
      {
        v55 = 0;
        v56 = 0;
        v57 = (re::RenderGraphResourceAllocationManager *)((char *)this + 1328);
        do
        {
          v58 = v52[5] + v55;
          v7 = v7 & 0xFFFFFFFF00000000 | *(unsigned int *)(v58 + 8);
          re::RenderGraphResourceAllocationManager::SetupData::addUniqueFence(v57, *(_QWORD *)v58, v7);
          ++v56;
          v55 += 12;
        }
        while (v52[3] > v56);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v53 + 96))(v53, v54);
      return;
    }
    goto LABEL_60;
  }
}

_QWORD *re::RenderGraphResourceAllocationManager::findHeapFor(re::RenderGraphResourceAllocationManager *a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v34;

  v8 = (_QWORD *)re::RenderGraphResourceAllocationManager::heapGroupHierarchyFor(a1, a4);
  v9 = v8;
  v10 = a2 + a3;
  v11 = *((_QWORD *)a1 + 2);
  if (v11)
  {
    v12 = 0;
    while (*(_QWORD *)(*((_QWORD *)a1 + 4) + 8 * v12) < v10)
    {
      if (v11 == ++v12)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v12 = v11 - 1;
  }
  v13 = v8[9];
  if (v12 >= v13)
    return 0;
  if (a2 >> 21)
    goto LABEL_10;
  if ((*(uint64_t (**)(void))(*(_QWORD *)*v8 + 112))() < a2)
  {
    v13 = v9[9];
LABEL_10:
    if (v13 <= v12)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      v34 = a4;
      v14 = v9[11];
      v15 = v14 + 48 * v12;
      v17 = *(_QWORD *)(v15 + 24);
      v16 = (unint64_t *)(v15 + 24);
      if (!v17)
      {
LABEL_15:
        if (re::RenderGraphResourceAllocationManager::indexToSize(a1, v12) >= 2 * v10)
          return (_QWORD *)re::RenderGraphResourceAllocationManager::allocateNewHeap((uint64_t)a1, a2, a3, v34);
        v23 = v12 + 1;
        if (v12 + 1 >= v9[9])
          return (_QWORD *)re::RenderGraphResourceAllocationManager::allocateNewHeap((uint64_t)a1, a2, a3, v34);
        v24 = v9[11];
        v25 = v24 + 48 * v23;
        v27 = *(_QWORD *)(v25 + 24);
        v26 = (unint64_t *)(v25 + 24);
        if (!v27)
          return (_QWORD *)re::RenderGraphResourceAllocationManager::allocateNewHeap((uint64_t)a1, a2, a3, v34);
        v28 = 0;
        v29 = 0;
        v30 = (_QWORD *)(v24 + 48 * v23 + 40);
        while (1)
        {
          v31 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*v30 + v28) + 112))(*(_QWORD *)(*v30 + v28), a3);
          v32 = *v26;
          if (v31 >= a2)
            break;
          ++v29;
          v28 += 56;
          if (v32 <= v29)
            return (_QWORD *)re::RenderGraphResourceAllocationManager::allocateNewHeap((uint64_t)a1, a2, a3, v34);
        }
        if (v32 > v29)
          return (_QWORD *)(*v30 + v28);
LABEL_30:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v18 = 0;
      v19 = 0;
      v20 = (_QWORD *)(v14 + 48 * v12 + 40);
      while (1)
      {
        v21 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*v20 + v18) + 112))(*(_QWORD *)(*v20 + v18), a3);
        v22 = *v16;
        if (v21 >= a2)
          break;
        ++v19;
        v18 += 56;
        if (v22 <= v19)
          goto LABEL_15;
      }
      if (v22 > v19)
        return (_QWORD *)(*v20 + v18);
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_30;
  }
  return v9;
}

_anonymous_namespace_ *re::RenderGraphResourceAllocationManager::SetupData::addUniqueFence(_anonymous_namespace_ *result, uint64_t a2, int a3)
{
  uint64_t v3;
  _DWORD *i;
  uint64_t v5;
  int v6;

  v5 = a2;
  v6 = a3;
  if ((_DWORD)a2 != -1)
  {
    v3 = *((_QWORD *)result + 32);
    if (v3)
    {
      for (i = (_DWORD *)(*((_QWORD *)result + 34) + 8); *(i - 2) != (_DWORD)a2 || *i > a3; i += 3)
      {
        if (!--v3)
          return re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)((char *)result + 240), &v5);
      }
    }
    else
    {
      return re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)((char *)result + 240), &v5);
    }
  }
  return result;
}

_anonymous_namespace_ *re::RenderGraphResourceAllocationManager::releaseTexture(_anonymous_namespace_ *this, unsigned int a2, const char *a3)
{
  unint64_t v3;
  _anonymous_namespace_ *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _anonymous_namespace_ *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (*((_QWORD *)this + 134) <= (unint64_t)a2)
  {
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_15;
  }
  v4 = this;
  v5 = *((_QWORD *)this + 136);
  if (*(_QWORD *)(v5 + 184 * a2) == -1)
    return this;
  v6 = v5 + 184 * a2;
  v7 = *(_QWORD ***)(v6 + 168);
  v8 = *v7;
  *((_QWORD *)v4 + 213) -= *(_QWORD *)(v6 + 176);
  v9 = 40;
  if (!*((_BYTE *)v4 + 1136))
    v9 = 32;
  this = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*v8 + v9))();
  if (*((_QWORD *)v4 + 134) <= v3)
  {
LABEL_15:
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v10 = *((_QWORD *)v4 + 136) + 184 * v3;
  *(_QWORD *)v10 = -1;
  *(_QWORD *)(v10 + 16) = 0;
  *(_DWORD *)(v10 + 24) += 2;
  *(_QWORD *)(v10 + 88) = 0;
  *(_DWORD *)(v10 + 96) += 2;
  *(_QWORD *)(v10 + 152) = 0;
  *(_BYTE *)(v10 + 160) = 0;
  *(_QWORD *)(v10 + 168) = 0;
  v11 = *((_QWORD *)v4 + 203);
  if (v11)
  {
    v12 = *((_QWORD *)v4 + 205);
    v13 = 12 * v11;
    do
    {
      *(_QWORD *)&v18 = *(_QWORD *)v12;
      DWORD2(v18) = *(_DWORD *)(v12 + 8);
      this = re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)(v7 + 1), (uint64_t *)&v18);
      v12 += 12;
      v13 -= 12;
    }
    while (v13);
  }
  if (!*((_BYTE *)v4 + 1649))
  {
    v14 = *((_QWORD *)v4 + 198);
    if (v14)
    {
      v15 = *((_QWORD *)v4 + 200);
      v16 = (_anonymous_namespace_ *)(v7 + 1);
      v17 = 12 * v14;
      do
      {
        *(_QWORD *)&v18 = *(_QWORD *)v15;
        DWORD2(v18) = *(_DWORD *)(v15 + 8);
        this = re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v16, (uint64_t *)&v18);
        v15 += 12;
        v17 -= 12;
      }
      while (v17);
    }
  }
  return this;
}

_anonymous_namespace_ *re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(_anonymous_namespace_ *result, uint64_t *a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)result + 2);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::MeshLodLevelInfo>::setCapacity(result, v10);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::MeshLodLevelInfo>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v5 = *((_QWORD *)v3 + 2);
  }
  v11 = *((_QWORD *)v3 + 4) + 12 * v5;
  v12 = *a2;
  *(_DWORD *)(v11 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v11 = v12;
  ++*((_QWORD *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

char *re::RenderGraphResourceAllocationManager::makeBuffer@<X0>(re::RenderGraphResourceAllocationManager *this@<X0>, const re::RenderGraphBufferDescription *a2@<X2>, const re::StringID *a3@<X3>, unint64_t a4@<X1>, _QWORD *a5@<X8>)
{
  __int128 *v5;
  const re::StringID *v6;
  unint64_t v8;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *result;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _anonymous_namespace_ *v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  _QWORD *v56;
  _QWORD v57[2];
  id v58[2];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  _BYTE v71[12];
  __int16 v72;
  int v73;
  __int16 v74;
  unint64_t v75;
  __int16 v76;
  __int128 *v77;
  _OWORD v78[5];
  uint64_t v79;

  v6 = a3;
  v8 = a4;
  v79 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 1136))
    goto LABEL_8;
  v11 = a4;
  v12 = *((_QWORD *)this + 150);
  if (v12 <= a4)
  {
    *(_QWORD *)v71 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    *(_OWORD *)v58 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v78[0]) = 136315906;
    *(_QWORD *)((char *)v78 + 4) = "operator[]";
    WORD6(v78[0]) = 1024;
    *(_DWORD *)((char *)v78 + 14) = 789;
    WORD1(v78[1]) = 2048;
    *(_QWORD *)((char *)&v78[1] + 4) = v8;
    WORD6(v78[1]) = 2048;
    *(_QWORD *)((char *)&v78[1] + 14) = v12;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_49;
  }
  v13 = *((_QWORD *)this + 152);
  if (*(_QWORD *)(v13 + 184 * a4 + 168))
  {
    v56 = a5;
    v14 = v13 + 184 * a4;
    v16 = *(_QWORD *)(v14 + 152);
    v15 = (_QWORD *)(v14 + 152);
    if (v16 == *(_QWORD *)a3 >> 1)
    {
      v6 = (const re::StringID *)*((_QWORD *)this + 139);
      if ((unint64_t)v6 <= a4)
      {
LABEL_54:
        *(_QWORD *)v71 = 0;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        *(_OWORD *)v58 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v78[0]) = 136315906;
        *(_QWORD *)((char *)v78 + 4) = "operator[]";
        WORD6(v78[0]) = 1024;
        *(_DWORD *)((char *)v78 + 14) = 789;
        WORD1(v78[1]) = 2048;
        *(_QWORD *)((char *)&v78[1] + 4) = v11;
        WORD6(v78[1]) = 2048;
        *(_QWORD *)((char *)&v78[1] + 14) = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_55;
      }
      v17 = v13 + 184 * a4;
      v18 = *((_QWORD *)this + 141) + 184 * a4;
      *(_QWORD *)v18 = *(_QWORD *)v17;
      re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=(v18 + 8, (uint64_t *)(v17 + 8));
      re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=(v18 + 80, (uint64_t *)(v17 + 80));
      *(_QWORD *)(v18 + 152) = *v15;
      v19 = *(_OWORD *)(v17 + 160);
      *(_QWORD *)(v18 + 176) = *(_QWORD *)(v17 + 176);
      *(_OWORD *)(v18 + 160) = v19;
      v6 = (const re::StringID *)*((_QWORD *)this + 139);
      if ((unint64_t)v6 <= v8)
      {
LABEL_55:
        *(_QWORD *)v71 = 0;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        *(_OWORD *)v58 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v78[0]) = 136315906;
        *(_QWORD *)((char *)v78 + 4) = "operator[]";
        WORD6(v78[0]) = 1024;
        *(_DWORD *)((char *)v78 + 14) = 789;
        WORD1(v78[1]) = 2048;
        *(_QWORD *)((char *)&v78[1] + 4) = v11;
        WORD6(v78[1]) = 2048;
        *(_QWORD *)((char *)&v78[1] + 14) = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_56;
      }
      *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 141) + 184 * v11 + 168) + 48) = 1;
      goto LABEL_39;
    }
    v20 = 1;
    a5 = v56;
  }
  else
  {
LABEL_8:
    v20 = 0;
  }
  v21 = *((_DWORD *)a2 + 6) & 0x70;
  v23 = objc_msgSend(*((id *)this + 6), "heapBufferSizeAndAlignWithLength:options:", *((_QWORD *)a2 + 1));
  v24 = v22;
  v55 = v21 == 48;
  if (v21 == 48)
  {
    v25 = (char *)this + 208;
  }
  else
  {
    result = (char *)re::RenderGraphResourceAllocationManager::findHeapFor(this, v23, v22, *((_QWORD *)a2 + 4));
    v25 = result;
    if (!result)
      goto LABEL_42;
  }
  v54 = v20;
  v27 = v21 == 48;
  v12 = *(_QWORD *)v25;
  v28 = *((_QWORD *)a2 + 1);
  v29 = *((unsigned int *)a2 + 6);
  v57[0] = *(_QWORD *)v6 >> 1;
  result = (char *)(*(uint64_t (**)(unint64_t, uint64_t, uint64_t, _BOOL8, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v28, v29, v27, v57);
  v57[0] = 0;
  if (result == (char *)-1)
  {
LABEL_42:
    *a5 = 0;
    return result;
  }
  v30 = result;
  v25[48] = 1;
  v31 = v24 + v23;
  *((_QWORD *)this + 220) += v31;
  v32 = *((_QWORD *)this + 213) + v31;
  *((_QWORD *)this + 213) = v32;
  if (v32 > *((_QWORD *)this + 214))
    *((_QWORD *)this + 214) = v32;
  ++*((_QWORD *)this + 221);
  v33 = *(_QWORD *)v6 >> 1;
  v58[1] = 0;
  *(_QWORD *)&v59 = 0;
  v58[0] = result;
  DWORD2(v59) = 1;
  v60 = 0uLL;
  v63 = 0;
  v64 = 0;
  v65 = 1;
  v66 = 0;
  v67 = 0;
  v68 = v33;
  LOBYTE(v69) = 0;
  *((_QWORD *)&v69 + 1) = v25;
  v70 = 0;
  v11 = v8;
  v5 = (__int128 *)*((_QWORD *)this + 139);
  if ((unint64_t)v5 <= v8)
    goto LABEL_50;
  v5 = &v69;
  v34 = *((_QWORD *)this + 141) + 184 * v8;
  *(_QWORD *)v34 = result;
  re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=(v34 + 8, (uint64_t)&v58[1]);
  re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=(v34 + 80, (uint64_t)&v63);
  *(_QWORD *)(v34 + 152) = v68;
  v35 = v69;
  *(_QWORD *)(v34 + 176) = v70;
  *(_OWORD *)(v34 + 160) = v35;
  v68 = 0;
  if (v63)
  {
    v36 = v65;
    if ((v65 & 1) == 0)
    {
      (*(void (**)(void))(*(_QWORD *)v63 + 40))();
      v36 = v65;
    }
    v63 = 0;
    v64 = 0;
    v65 = (v36 | 1) + 2;
  }
  if (v58[1] && (BYTE8(v59) & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v58[1] + 40))();
  v8 = *((_QWORD *)this + 139);
  if (v8 <= v11)
    goto LABEL_51;
  v37 = *((_QWORD *)this + 141) + 184 * v11;
  *(_BYTE *)(v37 + 160) = v55;
  *(_QWORD *)(v37 + 176) = v31;
  if (v54)
  {
    v8 = *((_QWORD *)this + 150);
    if (v8 <= v11)
    {
LABEL_52:
      *(_QWORD *)v71 = 0;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      *(_OWORD *)v58 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v78[0]) = 136315906;
      *(_QWORD *)((char *)v78 + 4) = "operator[]";
      WORD6(v78[0]) = 1024;
      *(_DWORD *)((char *)v78 + 14) = 789;
      WORD1(v78[1]) = 2048;
      *(_QWORD *)((char *)&v78[1] + 4) = v11;
      WORD6(v78[1]) = 2048;
      *(_QWORD *)((char *)&v78[1] + 14) = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_53;
    }
    v38 = *((_QWORD *)this + 152) + 184 * v11;
    (*(void (**)(_QWORD, _QWORD))(***(_QWORD ***)(v38 + 168) + 56))(**(_QWORD **)(v38 + 168), *(_QWORD *)v38);
    v8 = *((_QWORD *)this + 160);
    if (v8 <= v11)
    {
LABEL_53:
      *(_QWORD *)v71 = 0;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      *(_OWORD *)v58 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v78[0]) = 136315906;
      *(_QWORD *)((char *)v78 + 4) = "operator[]";
      WORD6(v78[0]) = 1024;
      *(_DWORD *)((char *)v78 + 14) = 789;
      WORD1(v78[1]) = 2048;
      *(_QWORD *)((char *)&v78[1] + 4) = v11;
      WORD6(v78[1]) = 2048;
      *(_QWORD *)((char *)&v78[1] + 14) = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_54;
    }
    v39 = *((_QWORD *)this + 162) + 48 * v11;
    *(_DWORD *)v39 = 0;
    *(_QWORD *)(v39 + 8) = -1;
    *(_BYTE *)(v39 + 16) = 0;
    *(_DWORD *)(v39 + 20) = 1065353216;
    *(_QWORD *)(v39 + 24) = 0xFFFFFFFF00000020;
    *(_OWORD *)(v39 + 32) = xmmword_2260FF4D0;
  }
  if (*((_BYTE *)this + 1136) && *(_DWORD *)(v12 + 8) == 2)
  {
    v8 = *((_QWORD *)this + 139);
    if (v8 <= v11)
    {
LABEL_56:
      *(_QWORD *)v71 = 0;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      *(_OWORD *)v58 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v78[0]) = 136315906;
      *(_QWORD *)((char *)v78 + 4) = "operator[]";
      WORD6(v78[0]) = 1024;
      *(_DWORD *)((char *)v78 + 14) = 789;
      WORD1(v78[1]) = 2048;
      *(_QWORD *)((char *)&v78[1] + 4) = v11;
      WORD6(v78[1]) = 2048;
      *(_QWORD *)((char *)&v78[1] + 14) = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_57;
    }
    v8 = *((_QWORD *)this + 150);
    if (v8 <= v11)
    {
LABEL_57:
      *(_QWORD *)v71 = 0;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      *(_OWORD *)v58 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v78[0]) = 136315906;
      *(_QWORD *)((char *)v78 + 4) = "operator[]";
      WORD6(v78[0]) = 1024;
      *(_DWORD *)((char *)v78 + 14) = 789;
      WORD1(v78[1]) = 2048;
      *(_QWORD *)((char *)&v78[1] + 4) = v11;
      WORD6(v78[1]) = 2048;
      *(_QWORD *)((char *)&v78[1] + 14) = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_58:
      *(_QWORD *)v71 = 0;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      *(_OWORD *)v58 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v78[0]) = 136315906;
      *(_QWORD *)((char *)v78 + 4) = "operator[]";
      WORD6(v78[0]) = 1024;
      *(_DWORD *)((char *)v78 + 14) = 789;
      WORD1(v78[1]) = 2048;
      *(_QWORD *)((char *)&v78[1] + 4) = v11;
      WORD6(v78[1]) = 2048;
      *(_QWORD *)((char *)&v78[1] + 14) = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v40 = *((_QWORD *)this + 141) + 184 * v11;
    v41 = *((_QWORD *)this + 152) + 184 * v11;
    *(_QWORD *)v41 = *(_QWORD *)v40;
    re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=(v41 + 8, (uint64_t *)(v40 + 8));
    re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=(v41 + 80, (uint64_t *)(v40 + 80));
    *(_QWORD *)(v41 + 152) = *(_QWORD *)(v40 + 152);
    v42 = *(_OWORD *)(v40 + 160);
    *(_QWORD *)(v41 + 176) = *(_QWORD *)(v40 + 176);
    *(_OWORD *)(v41 + 160) = v42;
    v8 = *((_QWORD *)this + 160);
    if (v8 <= v11)
      goto LABEL_58;
    v43 = (_OWORD *)(*((_QWORD *)this + 162) + 48 * v11);
    v44 = *(_OWORD *)a2;
    v45 = *((_OWORD *)a2 + 2);
    v43[1] = *((_OWORD *)a2 + 1);
    v43[2] = v45;
    *v43 = v44;
  }
  (*(void (**)(id *__return_ptr, unint64_t, char *))(*(_QWORD *)v12 + 104))(v58, v12, v30);
  objc_msgSend(v58[0], sel_setLabel_, objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, *((_QWORD *)v6 + 1), 4));
  if (v58[0])

  v6 = (const re::StringID *)*((_QWORD *)this + 139);
LABEL_39:
  if ((unint64_t)v6 <= v11)
  {
LABEL_49:
    *(_QWORD *)v71 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    *(_OWORD *)v58 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v78[0]) = 136315906;
    *(_QWORD *)((char *)v78 + 4) = "operator[]";
    WORD6(v78[0]) = 1024;
    *(_DWORD *)((char *)v78 + 14) = 789;
    WORD1(v78[1]) = 2048;
    *(_QWORD *)((char *)&v78[1] + 4) = v11;
    WORD6(v78[1]) = 2048;
    *(_QWORD *)((char *)&v78[1] + 14) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_50:
    v57[1] = 0;
    memset(v78, 0, sizeof(v78));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v71 = 136315906;
    *(_QWORD *)&v71[4] = "operator[]";
    v72 = 1024;
    v73 = 789;
    v74 = 2048;
    v75 = v11;
    v76 = 2048;
    v77 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_51:
    *(_QWORD *)v71 = 0;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    *(_OWORD *)v58 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v78[0]) = 136315906;
    *(_QWORD *)((char *)v78 + 4) = "operator[]";
    WORD6(v78[0]) = 1024;
    *(_DWORD *)((char *)v78 + 14) = 789;
    WORD1(v78[1]) = 2048;
    *(_QWORD *)((char *)&v78[1] + 4) = v11;
    WORD6(v78[1]) = 2048;
    *(_QWORD *)((char *)&v78[1] + 14) = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_52;
  }
  v46 = *((_QWORD *)this + 141) + 184 * v11;
  v47 = *(uint64_t **)(v46 + 168);
  v48 = *v47;
  v49 = *(_QWORD *)v46;
  if (*(_BYTE *)(v46 + 160))
  {
    ++*((_QWORD *)this + 218);
  }
  else if (v47[3])
  {
    v50 = 0;
    v51 = 0;
    v52 = (re::RenderGraphResourceAllocationManager *)((char *)this + 1328);
    do
    {
      v53 = v47[5] + v50;
      v12 = v12 & 0xFFFFFFFF00000000 | *(unsigned int *)(v53 + 8);
      re::RenderGraphResourceAllocationManager::SetupData::addUniqueFence(v52, *(_QWORD *)v53, v12);
      ++v51;
      v50 += 12;
    }
    while (v47[3] > v51);
  }
  return (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v48 + 104))(v48, v49);
}

_anonymous_namespace_ *re::RenderGraphResourceAllocationManager::releaseBuffer(_anonymous_namespace_ *this, unsigned int a2, const char *a3)
{
  unint64_t v3;
  _anonymous_namespace_ *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _anonymous_namespace_ *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if (*((_QWORD *)this + 139) <= (unint64_t)a2)
  {
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v15 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_11;
  }
  v4 = this;
  v5 = *((_QWORD *)this + 141);
  if (*(_QWORD *)(v5 + 184 * a2) == -1)
    return this;
  v6 = v5 + 184 * a2;
  v7 = *(_QWORD ***)(v6 + 168);
  v8 = *v7;
  *((_QWORD *)v4 + 213) -= *(_QWORD *)(v6 + 176);
  v9 = 64;
  if (!*((_BYTE *)v4 + 1136))
    v9 = 56;
  this = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*v8 + v9))();
  if (*((_QWORD *)v4 + 139) <= v3)
  {
LABEL_11:
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v15 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v10 = *((_QWORD *)v4 + 141) + 184 * v3;
  *(_QWORD *)v10 = -1;
  *(_QWORD *)(v10 + 16) = 0;
  *(_DWORD *)(v10 + 24) += 2;
  *(_QWORD *)(v10 + 88) = 0;
  *(_DWORD *)(v10 + 96) += 2;
  *(_QWORD *)(v10 + 152) = 0;
  *(_BYTE *)(v10 + 160) = 0;
  *(_QWORD *)(v10 + 168) = 0;
  v11 = *((_QWORD *)v4 + 203);
  if (v11)
  {
    v12 = *((_QWORD *)v4 + 205);
    v13 = (_anonymous_namespace_ *)(v7 + 1);
    v14 = 12 * v11;
    do
    {
      *(_QWORD *)&v15 = *(_QWORD *)v12;
      DWORD2(v15) = *(_DWORD *)(v12 + 8);
      this = re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v13, (uint64_t *)&v15);
      v12 += 12;
      v14 -= 12;
    }
    while (v14);
  }
  return this;
}

uint64_t re::RenderGraphResourceAllocationManager::onFrameStart(re::RenderGraphResourceAllocationManager *this, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  re::RenderGraphResourceAllocationManager *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t i;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v42;
  uint64_t v43;
  unint64_t j;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t k;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  uint64_t v86;
  int *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _DWORD *v101;
  int v102;
  int v103;
  uint64_t v104;
  char *v105;
  int v106;
  uint64_t result;
  unint64_t v108;
  unint64_t m;
  uint64_t v110;
  uint64_t v111;
  unint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  _BYTE *v117;
  uint64_t v118;
  int *v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  unint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  unint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  _BYTE *v135;
  unsigned int v136;
  unsigned int v137;
  const char *v138;
  char v139;
  uint64_t v142;
  re::RenderGraphResourceAllocationManager *v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;

  v6 = a2;
  v7 = this;
  v149 = *MEMORY[0x24BDAC8D0];
  re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::resize((_QWORD *)this + 132, a2);
  if (*((_QWORD *)v7 + 134))
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = *((_QWORD *)v7 + 136) + v8;
      *(_QWORD *)v10 = -1;
      *(_QWORD *)(v10 + 16) = 0;
      *(_DWORD *)(v10 + 24) += 2;
      *(_QWORD *)(v10 + 88) = 0;
      *(_DWORD *)(v10 + 96) += 2;
      *(_QWORD *)(v10 + 152) = 0;
      *(_BYTE *)(v10 + 160) = 0;
      *(_QWORD *)(v10 + 168) = 0;
      ++v9;
      v8 += 184;
    }
    while (*((_QWORD *)v7 + 134) > v9);
  }
  re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::resize((_QWORD *)v7 + 137, a3);
  if (*((_QWORD *)v7 + 139))
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = *((_QWORD *)v7 + 141) + v11;
      *(_QWORD *)v13 = -1;
      *(_QWORD *)(v13 + 16) = 0;
      *(_DWORD *)(v13 + 24) += 2;
      *(_QWORD *)(v13 + 88) = 0;
      *(_DWORD *)(v13 + 96) += 2;
      *(_QWORD *)(v13 + 152) = 0;
      *(_BYTE *)(v13 + 160) = 0;
      *(_QWORD *)(v13 + 168) = 0;
      ++v12;
      v11 += 184;
    }
    while (*((_QWORD *)v7 + 139) > v12);
  }
  v14 = atomic_load((unsigned __int8 *)&qword_254118FE0);
  if ((v14 & 1) == 0)
    goto LABEL_161;
  while (1)
  {
    v15 = &qword_254118000;
    v16 = byte_254118FCA;
    v143 = v7;
    if (*((_BYTE *)v7 + 1136) && !byte_254118FCA)
    {
      v17 = *((_QWORD *)v7 + 145);
      if (v17)
      {
        v18 = 0;
        v19 = 0;
        v20 = 0;
        __asm { FMOV            V9.2S, #1.0 }
        do
        {
          v26 = *((_QWORD *)v7 + 147);
          v27 = *(_QWORD **)(v26 + v18 + 168);
          if (v27)
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v27 + 32))(*v27, *(_QWORD *)(v26 + v18));
            if (*((_QWORD *)v7 + 155) <= v20)
              goto LABEL_159;
            v28 = *((_QWORD *)v7 + 157) + v19;
            *(_QWORD *)v28 = 3;
            *(_DWORD *)(v28 + 8) = 2;
            *(_QWORD *)(v28 + 28) = -1;
            *(_QWORD *)(v28 + 20) = -1;
            *(_QWORD *)(v28 + 12) = -1;
            *(_BYTE *)(v28 + 36) = 0;
            *(_QWORD *)(v28 + 40) = _D9;
            *(_OWORD *)(v28 + 48) = xmmword_226135530;
            *(_OWORD *)(v28 + 64) = xmmword_226135540;
            *(_DWORD *)(v28 + 80) = -1;
            *(_OWORD *)(v28 + 88) = xmmword_2260FF4D0;
            *(_BYTE *)(v28 + 104) = 0;
            v17 = *((_QWORD *)v7 + 145);
          }
          ++v20;
          v19 += 112;
          v18 += 184;
        }
        while (v17 > v20);
        *((_QWORD *)v7 + 145) = 0;
        v15 = &qword_254118000;
        if (v17)
        {
          v29 = 184 * v17;
          v30 = *((_QWORD *)v143 + 147) + 80;
          do
          {
            *(_QWORD *)(v30 + 72) = 0;
            re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v30);
            re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v30 - 72);
            v30 += 184;
            v29 -= 184;
          }
          while (v29);
        }
      }
      else
      {
        *((_QWORD *)v7 + 145) = 0;
      }
      ++*((_DWORD *)v143 + 292);
      *((_QWORD *)v143 + 155) = 0;
      ++*((_DWORD *)v143 + 312);
      v31 = *((_QWORD *)v143 + 150);
      if (v31)
      {
        v32 = 0;
        v33 = 0;
        for (i = 0; i < v31; ++i)
        {
          v35 = *((_QWORD *)v143 + 152);
          v36 = *(_QWORD **)(v35 + v32 + 168);
          if (v36)
          {
            (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v36 + 56))(*v36, *(_QWORD *)(v35 + v32));
            if (*((_QWORD *)v143 + 160) <= i)
              goto LABEL_160;
            v37 = *((_QWORD *)v143 + 162) + v33;
            *(_DWORD *)v37 = 0;
            *(_QWORD *)(v37 + 8) = -1;
            *(_BYTE *)(v37 + 16) = 0;
            *(_DWORD *)(v37 + 20) = 1065353216;
            *(_QWORD *)(v37 + 24) = 0xFFFFFFFF00000020;
            *(_OWORD *)(v37 + 32) = xmmword_2260FF4D0;
            v31 = *((_QWORD *)v143 + 150);
          }
          v33 += 48;
          v32 += 184;
        }
        *((_QWORD *)v143 + 150) = 0;
        if (v31)
        {
          v38 = 184 * v31;
          v39 = *((_QWORD *)v143 + 152) + 80;
          do
          {
            *(_QWORD *)(v39 + 72) = 0;
            re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v39);
            re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v39 - 72);
            v39 += 184;
            v38 -= 184;
          }
          while (v38);
        }
      }
      else
      {
        *((_QWORD *)v143 + 150) = 0;
      }
      v7 = v143;
      ++*((_DWORD *)v143 + 302);
      *((_QWORD *)v143 + 160) = 0;
      ++*((_DWORD *)v143 + 322);
      v16 = *((unsigned __int8 *)v15 + 4042);
    }
    *((_BYTE *)v7 + 1136) = v16;
    if (!v16)
      break;
    v40 = *((_QWORD *)v7 + 145);
    if (v40 == *((_QWORD *)v7 + 134)
      && *((_QWORD *)v7 + 150) == *((_QWORD *)v7 + 139)
      && *((_QWORD *)v7 + 163) == a4
      && *((_QWORD *)v7 + 164) == a5)
    {
      break;
    }
    __asm { FMOV            V8.2S, #1.0 }
    if (v40)
    {
      v42 = 0;
      v43 = 0;
      for (j = 0; j < v40; ++j)
      {
        v45 = *((_QWORD *)v7 + 147);
        v46 = *(_QWORD **)(v45 + v42 + 168);
        if (v46)
        {
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v46 + 32))(*v46, *(_QWORD *)(v45 + v42));
          if (*((_QWORD *)v7 + 155) <= j)
            goto LABEL_157;
          v47 = *((_QWORD *)v7 + 157) + v43;
          *(_QWORD *)v47 = 3;
          *(_DWORD *)(v47 + 8) = 2;
          *(_QWORD *)(v47 + 28) = -1;
          *(_QWORD *)(v47 + 20) = -1;
          *(_QWORD *)(v47 + 12) = -1;
          *(_BYTE *)(v47 + 36) = 0;
          *(_QWORD *)(v47 + 40) = _D8;
          *(_OWORD *)(v47 + 48) = xmmword_226135530;
          *(_OWORD *)(v47 + 64) = xmmword_226135540;
          *(_DWORD *)(v47 + 80) = -1;
          *(_OWORD *)(v47 + 88) = xmmword_2260FF4D0;
          *(_BYTE *)(v47 + 104) = 0;
          v40 = *((_QWORD *)v7 + 145);
        }
        v43 += 112;
        v42 += 184;
      }
    }
    re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::resize((_QWORD *)v7 + 143, v6);
    v48 = *((_QWORD *)v7 + 155);
    if (v48 >= v6)
    {
      if (v48 <= v6)
        goto LABEL_54;
    }
    else
    {
      if (*((_QWORD *)v7 + 154) < v6)
      {
        re::DynamicArray<re::RenderGraphTargetDescription>::setCapacity((_QWORD *)v7 + 153, v6);
        v48 = *((_QWORD *)v7 + 155);
      }
      if (v48 < v6)
      {
        v49 = *((_QWORD *)v7 + 157);
        v50 = v49 + 112 * v48;
        v51 = v49 + 112 * v6 - v50;
        if (v51 >= 1)
        {
          v52 = ((((unint64_t)v51 >> 4) * (unsigned __int128)0x2492492492492493uLL) >> 64) + 1;
          do
          {
            *(_QWORD *)v50 = 3;
            *(_DWORD *)(v50 + 8) = 2;
            *(_QWORD *)(v50 + 12) = -1;
            *(_QWORD *)(v50 + 20) = -1;
            *(_QWORD *)(v50 + 28) = -1;
            *(_BYTE *)(v50 + 36) = 0;
            *(_QWORD *)(v50 + 40) = _D8;
            *(_OWORD *)(v50 + 48) = xmmword_226135530;
            *(_OWORD *)(v50 + 64) = xmmword_226135540;
            *(_DWORD *)(v50 + 80) = -1;
            --v52;
            *(_OWORD *)(v50 + 88) = xmmword_2260FF4D0;
            *(_BYTE *)(v50 + 104) = 0;
            v50 += 112;
          }
          while (v52 > 1);
        }
      }
    }
    *((_QWORD *)v7 + 155) = v6;
    ++*((_DWORD *)v7 + 312);
LABEL_54:
    if (*((_QWORD *)v7 + 145))
    {
      v53 = 0;
      v54 = 0;
      v6 = 0;
      while (1)
      {
        v55 = *((_QWORD *)v7 + 147) + v54;
        *(_QWORD *)v55 = -1;
        *(_QWORD *)(v55 + 16) = 0;
        *(_DWORD *)(v55 + 24) += 2;
        *(_QWORD *)(v55 + 88) = 0;
        *(_DWORD *)(v55 + 96) += 2;
        *(_QWORD *)(v55 + 152) = 0;
        *(_BYTE *)(v55 + 160) = 0;
        *(_QWORD *)(v55 + 168) = 0;
        if (*((_QWORD *)v7 + 155) <= v6)
          break;
        v56 = *((_QWORD *)v7 + 157) + v53;
        *(_QWORD *)v56 = 3;
        *(_DWORD *)(v56 + 8) = 2;
        *(_QWORD *)(v56 + 28) = -1;
        *(_QWORD *)(v56 + 20) = -1;
        *(_QWORD *)(v56 + 12) = -1;
        *(_BYTE *)(v56 + 36) = 0;
        *(_QWORD *)(v56 + 40) = _D8;
        *(_OWORD *)(v56 + 48) = xmmword_226135530;
        *(_OWORD *)(v56 + 64) = xmmword_226135540;
        *(_DWORD *)(v56 + 80) = -1;
        *(_OWORD *)(v56 + 88) = xmmword_2260FF4D0;
        *(_BYTE *)(v56 + 104) = 0;
        ++v6;
        v54 += 184;
        v53 += 112;
        if (*((_QWORD *)v7 + 145) <= v6)
          goto LABEL_58;
      }
      v147 = 0u;
      v148 = 0u;
      v145 = 0u;
      v146 = 0u;
      v144 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_156;
    }
LABEL_58:
    v57 = *((_QWORD *)v7 + 150);
    v6 = (unint64_t)"treamEiPKNS_9HashTableINS_13DynamicStringENSt3__17variantIJS5_NS_4DataEmEEENS_4HashIS5_EENS_7EqualToIS5_EELb1ELb0EEEE3$_0";
    if (v57)
    {
      v58 = 0;
      v59 = 0;
      for (k = 0; k < v57; ++k)
      {
        v61 = *((_QWORD *)v7 + 152);
        v62 = *(_QWORD **)(v61 + v58 + 168);
        if (v62)
        {
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v62 + 56))(*v62, *(_QWORD *)(v61 + v58));
          if (*((_QWORD *)v7 + 160) <= k)
            goto LABEL_158;
          v63 = *((_QWORD *)v7 + 162) + v59;
          *(_DWORD *)v63 = 0;
          *(_QWORD *)(v63 + 8) = -1;
          *(_BYTE *)(v63 + 16) = 0;
          *(_DWORD *)(v63 + 20) = 1065353216;
          *(_QWORD *)(v63 + 24) = 0xFFFFFFFF00000020;
          *(_OWORD *)(v63 + 32) = xmmword_2260FF4D0;
          v57 = *((_QWORD *)v7 + 150);
        }
        v59 += 48;
        v58 += 184;
      }
    }
    re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::resize((_QWORD *)v7 + 148, a3);
    v64 = *((_QWORD *)v7 + 160);
    if (v64 < a3)
    {
      if (*((_QWORD *)v7 + 159) < a3)
      {
        re::DynamicArray<re::Encoder<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>,re::DynamicArrayBufferedOutputStream>::State>::setCapacity((_QWORD *)v7 + 158, a3);
        v64 = *((_QWORD *)v7 + 160);
      }
      if (v64 < a3)
      {
        v65 = *((_QWORD *)v7 + 162);
        v66 = v65 + 48 * v64;
        v67 = v65 + 48 * a3 - v66;
        if (v67 >= 1)
        {
          v68 = v67 / 0x30uLL + 1;
          do
          {
            *(_DWORD *)v66 = 0;
            *(_QWORD *)(v66 + 8) = -1;
            *(_BYTE *)(v66 + 16) = 0;
            *(_DWORD *)(v66 + 20) = 1065353216;
            --v68;
            *(_QWORD *)(v66 + 24) = 0xFFFFFFFF00000020;
            *(_OWORD *)(v66 + 32) = xmmword_2260FF4D0;
            v66 += 48;
          }
          while (v68 > 1);
        }
      }
LABEL_73:
      *((_QWORD *)v7 + 160) = a3;
      ++*((_DWORD *)v7 + 322);
      goto LABEL_74;
    }
    if (v64 > a3)
      goto LABEL_73;
LABEL_74:
    if (!*((_QWORD *)v7 + 150))
    {
LABEL_78:
      *((_QWORD *)v7 + 163) = a4;
      *((_QWORD *)v7 + 164) = a5;
      break;
    }
    v69 = 0;
    a3 = 0;
    v70 = 168;
    while (1)
    {
      v71 = (_QWORD *)(*((_QWORD *)v7 + 152) + v70);
      *(v71 - 21) = -1;
      *(v71 - 19) = 0;
      *((_DWORD *)v71 - 36) += 2;
      *(v71 - 10) = 0;
      *((_DWORD *)v71 - 18) += 2;
      *(v71 - 2) = 0;
      *((_BYTE *)v71 - 8) = 0;
      *v71 = 0;
      if (*((_QWORD *)v7 + 160) <= a3)
        break;
      v72 = *((_QWORD *)v7 + 162) + v69;
      *(_DWORD *)v72 = 0;
      *(_QWORD *)(v72 + 8) = -1;
      *(_BYTE *)(v72 + 16) = 0;
      *(_DWORD *)(v72 + 20) = 1065353216;
      *(_QWORD *)(v72 + 24) = 0xFFFFFFFF00000020;
      *(_OWORD *)(v72 + 32) = xmmword_2260FF4D0;
      ++a3;
      v70 += 184;
      v69 += 48;
      if (*((_QWORD *)v7 + 150) <= a3)
        goto LABEL_78;
    }
LABEL_156:
    v147 = 0u;
    v148 = 0u;
    v145 = 0u;
    v146 = 0u;
    v144 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_157:
    v147 = 0u;
    v148 = 0u;
    v145 = 0u;
    v146 = 0u;
    v144 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_158:
    v147 = 0u;
    v148 = 0u;
    v145 = 0u;
    v146 = 0u;
    v144 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_159:
    v147 = 0u;
    v148 = 0u;
    v145 = 0u;
    v146 = 0u;
    v144 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_160:
    v147 = 0u;
    v148 = 0u;
    v145 = 0u;
    v146 = 0u;
    v144 = 0u;
    v7 = (re::RenderGraphResourceAllocationManager *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_161:
    if (__cxa_guard_acquire(&qword_254118FE0))
    {
      re::Defaults::BOOLValue((re::Defaults *)"enableRenderGraphResourceCaching", v138, (char *)&v144);
      if ((_BYTE)v144)
        v139 = BYTE1(v144);
      else
        v139 = 1;
      byte_254118FCA = v139;
      __cxa_guard_release(&qword_254118FE0);
    }
  }
  *(_QWORD *)((char *)v7 + 1036) = 0;
  *((_DWORD *)v7 + 261) = *((_DWORD *)v7 + 258);
  *((_DWORD *)v7 + 262) = 2;
  v73 = *((_QWORD *)v7 + 11);
  if (v73)
  {
    v74 = (_DWORD *)*((_QWORD *)v7 + 13);
    do
    {
      *v74 += 1000;
      v74 += 3;
      --v73;
    }
    while (v73);
  }
  v75 = *((_QWORD *)v7 + 29);
  if (v75)
  {
    v76 = (_DWORD *)*((_QWORD *)v7 + 31);
    do
    {
      *v76 += 1000;
      v76 += 3;
      --v75;
    }
    while (v75);
  }
  v77 = *((_QWORD *)v7 + 17);
  if (v77)
  {
    v78 = 0;
    v79 = *((_QWORD *)v7 + 19);
    do
    {
      v80 = *(_QWORD *)(v79 + 48 * v78 + 24);
      if (v80)
      {
        v81 = 0;
        v82 = *(_QWORD *)(v79 + 48 * v78 + 40);
        do
        {
          v83 = *(_QWORD *)(v82 + 56 * v81 + 24);
          if (v83)
          {
            v84 = *(_DWORD **)(v82 + 56 * v81 + 40);
            do
            {
              *v84 += 1000;
              v84 += 3;
              --v83;
            }
            while (v83);
          }
          ++v81;
        }
        while (v81 != v80);
      }
      ++v78;
    }
    while (v78 != v77);
  }
  v85 = *((unsigned int *)v7 + 48);
  if ((_DWORD)v85)
  {
    v86 = 0;
    v87 = (int *)(*((_QWORD *)v7 + 22) + 8);
    while (1)
    {
      v88 = *v87;
      v87 += 30;
      if (v88 < 0)
        break;
      if (v85 == ++v86)
      {
        LODWORD(v86) = *((_DWORD *)v7 + 48);
        break;
      }
    }
  }
  else
  {
    LODWORD(v86) = 0;
  }
  if ((_DWORD)v85 != (_DWORD)v86)
  {
    v89 = v86;
    do
    {
      v90 = *((_QWORD *)v7 + 22);
      v91 = v90 + 120 * v89;
      v92 = *(_QWORD *)(v91 + 48);
      if (v92)
      {
        v93 = *(_DWORD **)(v91 + 64);
        do
        {
          *v93 += 1000;
          v93 += 3;
          --v92;
        }
        while (v92);
      }
      v94 = *(_QWORD *)(v90 + 120 * v89 + 96);
      if (v94)
      {
        v95 = 0;
        v96 = *(_QWORD *)(v90 + 120 * v89 + 112);
        do
        {
          v97 = *(_QWORD *)(v96 + 48 * v95 + 24);
          if (v97)
          {
            v98 = 0;
            v99 = *(_QWORD *)(v96 + 48 * v95 + 40);
            do
            {
              v100 = *(_QWORD *)(v99 + 56 * v98 + 24);
              if (v100)
              {
                v101 = *(_DWORD **)(v99 + 56 * v98 + 40);
                do
                {
                  *v101 += 1000;
                  v101 += 3;
                  --v100;
                }
                while (v100);
              }
              ++v98;
            }
            while (v98 != v97);
          }
          ++v95;
        }
        while (v95 != v94);
      }
      if (v85 <= (int)v86 + 1)
        v102 = v86 + 1;
      else
        v102 = v85;
      while (1)
      {
        v89 = (v86 + 1);
        if (v102 - 1 == (_DWORD)v86)
          break;
        LODWORD(v86) = v86 + 1;
        v103 = v89;
        if ((*(_DWORD *)(*((_QWORD *)v7 + 22) + 120 * v89 + 8) & 0x80000000) != 0)
          goto LABEL_121;
      }
      v103 = v102;
LABEL_121:
      LODWORD(v86) = v103;
    }
    while ((_DWORD)v85 != v103);
  }
  v104 = 0;
  v105 = (char *)v7 + 776;
  do
  {
    v106 = *(_DWORD *)&v105[v104];
    if (v106 != -1)
      *(_DWORD *)&v105[v104] = v106 + 1000;
    v104 += 4;
  }
  while (v104 != 256);
  (*(void (**)(_QWORD))(**((_QWORD **)v7 + 8) + 72))(*((_QWORD *)v7 + 8));
  *((_BYTE *)v7 + 112) = 0;
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v7 + 26) + 72))(*((_QWORD *)v7 + 26));
  *((_BYTE *)v7 + 256) = 0;
  v108 = *((_QWORD *)v7 + 17);
  if (v108)
  {
    for (m = 0; m < v108; ++m)
    {
      v110 = *((_QWORD *)v7 + 19);
      v111 = v110 + 48 * m;
      v113 = *(_QWORD *)(v111 + 24);
      v112 = (unint64_t *)(v111 + 24);
      if (v113)
      {
        v114 = 0;
        v115 = 0;
        v116 = (_QWORD *)(v110 + 48 * m + 40);
        do
        {
          v117 = (_BYTE *)(*v116 + v114);
          result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v117 + 72))(*(_QWORD *)v117);
          v117[48] = 0;
          ++v115;
          v114 += 56;
        }
        while (*v112 > v115);
        v7 = v143;
        v108 = *((_QWORD *)v143 + 17);
      }
    }
  }
  v142 = *((unsigned int *)v7 + 48);
  v118 = 0;
  if ((_DWORD)v142)
  {
    v119 = (int *)(*((_QWORD *)v7 + 22) + 8);
    while (1)
    {
      v120 = *v119;
      v119 += 30;
      if (v120 < 0)
        break;
      if (v142 == ++v118)
      {
        LODWORD(v118) = *((_DWORD *)v7 + 48);
        break;
      }
    }
  }
  if ((_DWORD)v142 != (_DWORD)v118)
  {
    v121 = v118;
    do
    {
      v122 = *((_QWORD *)v7 + 22);
      v123 = v122 + 120 * v121;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v123 + 24) + 72))(*(_QWORD *)(v123 + 24));
      v126 = *(_QWORD *)(v123 + 96);
      v125 = (_QWORD *)(v123 + 96);
      v124 = v126;
      *((_BYTE *)v125 - 24) = 0;
      if (v126)
      {
        v127 = 0;
        v128 = (_QWORD *)(v122 + 120 * v121 + 112);
        do
        {
          v129 = *v128 + 48 * v127;
          v131 = *(_QWORD *)(v129 + 24);
          v130 = (unint64_t *)(v129 + 24);
          if (v131)
          {
            v132 = 0;
            v133 = 0;
            v134 = (_QWORD *)(*v128 + 48 * v127 + 40);
            do
            {
              v135 = (_BYTE *)(*v134 + v132);
              result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v135 + 72))(*(_QWORD *)v135);
              v135[48] = 0;
              ++v133;
              v132 += 56;
            }
            while (*v130 > v133);
            v124 = *v125;
          }
          ++v127;
        }
        while (v124 > v127);
      }
      v7 = v143;
      v136 = *((_DWORD *)v143 + 48);
      if (v136 <= (int)v118 + 1)
        v136 = v118 + 1;
      while (1)
      {
        v121 = (v118 + 1);
        if (v136 - 1 == (_DWORD)v118)
          break;
        LODWORD(v118) = v118 + 1;
        v137 = v121;
        if ((*(_DWORD *)(*((_QWORD *)v143 + 22) + 120 * v121 + 8) & 0x80000000) != 0)
          goto LABEL_153;
      }
      v137 = v136;
LABEL_153:
      LODWORD(v118) = v137;
    }
    while ((_DWORD)v142 != v137);
  }
  return result;
}

_QWORD *re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 184 * a2 + 152;
    v9 = a2;
    do
    {
      v10 = v3[4];
      *(_QWORD *)(v10 + v8) = 0;
      v11 = v10 + v8 - 144;
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v10 + v8 - 72);
      result = (_QWORD *)re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v11);
      ++v9;
      v8 += 184;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 184 * v4 + 168;
      do
      {
        v7 = (_QWORD *)(v3[4] + v6);
        *((_OWORD *)v7 - 9) = 0uLL;
        *((_OWORD *)v7 - 8) = 0uLL;
        *((_OWORD *)v7 - 5) = 0uLL;
        *((_OWORD *)v7 - 4) = 0uLL;
        *((_OWORD *)v7 - 2) = 0uLL;
        *((_OWORD *)v7 - 1) = 0uLL;
        *((_OWORD *)v7 - 3) = 0uLL;
        *((_OWORD *)v7 - 7) = 0uLL;
        *((_OWORD *)v7 - 6) = 0uLL;
        *(v7 - 20) = 0;
        *(v7 - 19) = 0;
        *(v7 - 21) = -1;
        *((_DWORD *)v7 - 36) = 1;
        *(v7 - 17) = 0;
        *(v7 - 16) = 0;
        *(v7 - 11) = 0;
        *(v7 - 10) = 0;
        *((_DWORD *)v7 - 18) = 1;
        *(v7 - 8) = 0;
        *(v7 - 7) = 0;
        *((_BYTE *)v7 - 8) = 0;
        v6 += 184;
        *v7 = 0;
        v7[1] = 0;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

re *re::RenderGraphResourceAllocationManager::onFrameFinish(re::RenderGraphResourceAllocationManager *this)
{
  re::RenderGraphResourceAllocationManager *v1;
  re::ProfilerConfig *isStatisticCollectionEnabled;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  re::RenderGraphResourceAllocationManager *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int64x2_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int64x2_t v35;
  uint64_t v36;
  int64x2_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int64x2_t v41;
  uint64_t v42;
  int64x2_t *v43;
  unint64_t v44;
  unint64_t v45;
  int64x2_t v46;
  uint64_t v47;
  int64x2_t *v48;
  unint64_t v49;
  unint64_t v50;
  int64x2_t v51;
  uint64_t v52;
  int64x2_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int64x2_t v57;
  uint64_t v58;
  int64x2_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int64x2_t v63;
  uint64_t v64;
  int64x2_t *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int64x2_t v69;
  uint64_t v70;
  int64x2_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int64x2_t v75;
  uint64_t v76;
  int64x2_t *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int64x2_t v81;
  uint64_t v82;
  int64x2_t *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  int64x2_t v87;
  re *v88;
  uint64_t v89;
  int64x2_t *v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int64x2_t v94;
  re *started;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  unint64_t *v102;
  uint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void (***v110)(_QWORD);
  uint64_t v111;
  unint64_t i;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unint64_t *v116;
  uint64_t v117;
  _QWORD *v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  void (***v122)(_QWORD);
  uint64_t v123;
  uint64_t v124;
  re *result;
  uint64_t v126;
  uint64_t v127;
  int *v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unsigned int v139;
  unint64_t *v140;
  uint64_t v141;
  _QWORD *v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  void (***v148)(_QWORD);
  uint64_t v149;
  unsigned int v150;
  int v151;
  unsigned int v152;
  int v153;
  unint64_t v154;
  int v155;
  unint64_t *v156;
  uint64_t v157;
  _QWORD *v158;
  re::RenderGraphResourceAllocationManager *v159;

  v1 = this;
  isStatisticCollectionEnabled = (re::ProfilerConfig *)re::ProfilerConfig::isStatisticCollectionEnabled(this);
  v159 = v1;
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    v3 = *(_QWORD *)(*((_QWORD *)v1 + 7) + 104);
    if (v3)
    {
      v4 = *(_BYTE **)(v3 + 1648);
      if (v4)
      {
        if (v4[204] && !v4[17] && (v4[177] & 1) != 0)
        {
          v5 = *((_QWORD *)v1 + 17);
          if (v5)
          {
            v6 = v1;
            v7 = 0;
            v8 = 0;
            v9 = (uint64_t *)*((_QWORD *)v6 + 19);
            v10 = 48 * v5;
            do
            {
              v11 = v9[3];
              v7 += v11;
              v12 = *v9;
              v9 += 6;
              v8 += v12 * v11;
              v10 -= 48;
            }
            while (v10);
          }
          else
          {
            v8 = 0;
            v7 = 0;
          }
          v13 = *((unsigned int *)v159 + 48);
          if ((_DWORD)v13)
          {
            v14 = 0;
            v15 = (int *)(*((_QWORD *)v159 + 22) + 8);
            while (1)
            {
              v16 = *v15;
              v15 += 30;
              if (v16 < 0)
                break;
              if (v13 == ++v14)
              {
                LODWORD(v14) = *((_DWORD *)v159 + 48);
                break;
              }
            }
          }
          else
          {
            LODWORD(v14) = 0;
          }
          if ((_DWORD)v13 == (_DWORD)v14)
          {
            v17 = 0;
            v18 = 0;
          }
          else
          {
            v18 = 0;
            v17 = 0;
            v19 = v14;
            v20 = *((_QWORD *)v159 + 22);
            do
            {
              ++v18;
              v17 += 0x800000;
              v21 = v20 + 120 * v19;
              v22 = *(_QWORD *)(v21 + 96);
              if (v22)
              {
                v23 = *(uint64_t **)(v21 + 112);
                v24 = 48 * v22;
                do
                {
                  v25 = v23[3];
                  v18 += v25;
                  v26 = *v23;
                  v23 += 6;
                  v17 += v26 * v25;
                  v24 -= 48;
                }
                while (v24);
              }
              if (v13 <= (int)v14 + 1)
                v27 = v14 + 1;
              else
                v27 = *((_DWORD *)v159 + 48);
              while (1)
              {
                v19 = (v14 + 1);
                if (v27 - 1 == (_DWORD)v14)
                  break;
                LODWORD(v14) = v14 + 1;
                v28 = v19;
                if ((*(_DWORD *)(v20 + 120 * v19 + 8) & 0x80000000) != 0)
                  goto LABEL_31;
              }
              v28 = v27;
LABEL_31:
              LODWORD(v14) = v28;
            }
            while ((_DWORD)v13 != v28);
          }
          v29 = re::ProfilerConfig::isStatisticCollectionEnabled(isStatisticCollectionEnabled);
          if ((v29 & 1) != 0)
          {
            v29 = re::profilerThreadContext((re *)v29);
            v30 = *(int64x2_t **)(v29 + 152);
            if (v30)
            {
              v31 = v7 + v18;
              v32 = v7 + v18 + 1;
              v33 = v30[324].u64[0];
              if (v33 >= v32)
                v33 = v31 + 1;
              v30[324].i64[0] = v33;
              if (v30[324].i64[1] <= v32)
                v34 = v31 + 1;
              else
                v34 = v30[324].i64[1];
              v30[324].i64[1] = v34;
              v35 = vdupq_n_s64(1uLL);
              v35.i64[0] = v7 + v18 + 1;
              v30[325] = vaddq_s64(v30[325], v35);
              *(_BYTE *)(v29 + 184) = 0;
            }
          }
          v36 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v29);
          if ((_DWORD)v36)
          {
            v36 = re::profilerThreadContext((re *)v36);
            v37 = *(int64x2_t **)(v36 + 152);
            if (v37)
            {
              v38 = v8 + v17 + 0x800000;
              v39 = v37[328].u64[0];
              if (v39 >= v38)
                v39 = v8 + v17 + 0x800000;
              v37[328].i64[0] = v39;
              v40 = v37[328].u64[1];
              if (v40 <= v38)
                v40 = v8 + v17 + 0x800000;
              v37[328].i64[1] = v40;
              v41 = vdupq_n_s64(1uLL);
              v41.i64[0] = v8 + v17 + 0x800000;
              v37[329] = vaddq_s64(v37[329], v41);
              *(_BYTE *)(v36 + 184) = 0;
            }
          }
          v42 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v36);
          v1 = v159;
          if ((_DWORD)v42)
          {
            v42 = re::profilerThreadContext((re *)v42);
            v43 = *(int64x2_t **)(v42 + 152);
            if (v43)
            {
              v44 = v43[332].u64[0];
              if (v44 >= v18)
                v44 = v18;
              v43[332].i64[0] = v44;
              v45 = v43[332].u64[1];
              if (v45 <= v18)
                v45 = v18;
              v43[332].i64[1] = v45;
              v46 = vdupq_n_s64(1uLL);
              v46.i64[0] = v18;
              v43[333] = vaddq_s64(v43[333], v46);
              *(_BYTE *)(v42 + 184) = 0;
            }
          }
          v47 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v42);
          if ((_DWORD)v47)
          {
            v47 = re::profilerThreadContext((re *)v47);
            v48 = *(int64x2_t **)(v47 + 152);
            if (v48)
            {
              v49 = v48[336].u64[0];
              if (v49 >= v17)
                v49 = v17;
              v48[336].i64[0] = v49;
              v50 = v48[336].u64[1];
              if (v50 <= v17)
                v50 = v17;
              v48[336].i64[1] = v50;
              v51 = vdupq_n_s64(1uLL);
              v51.i64[0] = v17;
              v48[337] = vaddq_s64(v48[337], v51);
              *(_BYTE *)(v47 + 184) = 0;
            }
          }
          v52 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v47);
          if ((_DWORD)v52)
          {
            v52 = re::profilerThreadContext((re *)v52);
            v53 = *(int64x2_t **)(v52 + 152);
            if (v53)
            {
              v54 = *((_QWORD *)v159 + 219);
              v55 = v53[340].u64[0];
              if (v55 >= v54)
                v55 = *((_QWORD *)v159 + 219);
              v53[340].i64[0] = v55;
              v56 = v53[340].u64[1];
              if (v56 <= v54)
                v56 = v54;
              v53[340].i64[1] = v56;
              v57 = vdupq_n_s64(1uLL);
              v57.i64[0] = v54;
              v53[341] = vaddq_s64(v53[341], v57);
              *(_BYTE *)(v52 + 184) = 0;
            }
          }
          v58 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v52);
          if ((_DWORD)v58)
          {
            v58 = re::profilerThreadContext((re *)v58);
            v59 = *(int64x2_t **)(v58 + 152);
            if (v59)
            {
              v60 = *((_QWORD *)v159 + 221);
              v61 = v59[348].u64[0];
              if (v61 >= v60)
                v61 = *((_QWORD *)v159 + 221);
              v59[348].i64[0] = v61;
              v62 = v59[348].u64[1];
              if (v62 <= v60)
                v62 = v60;
              v59[348].i64[1] = v62;
              v63 = vdupq_n_s64(1uLL);
              v63.i64[0] = v60;
              v59[349] = vaddq_s64(v59[349], v63);
              *(_BYTE *)(v58 + 184) = 0;
            }
          }
          v64 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v58);
          if ((_DWORD)v64)
          {
            v64 = re::profilerThreadContext((re *)v64);
            v65 = *(int64x2_t **)(v64 + 152);
            if (v65)
            {
              v66 = *((_QWORD *)v159 + 215);
              v67 = v65[352].u64[0];
              if (v67 >= v66)
                v67 = *((_QWORD *)v159 + 215);
              v65[352].i64[0] = v67;
              v68 = v65[352].u64[1];
              if (v68 <= v66)
                v68 = v66;
              v65[352].i64[1] = v68;
              v69 = vdupq_n_s64(1uLL);
              v69.i64[0] = v66;
              v65[353] = vaddq_s64(v65[353], v69);
              *(_BYTE *)(v64 + 184) = 0;
            }
          }
          v70 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v64);
          if ((_DWORD)v70)
          {
            v70 = re::profilerThreadContext((re *)v70);
            v71 = *(int64x2_t **)(v70 + 152);
            if (v71)
            {
              v72 = *((_QWORD *)v159 + 220);
              v73 = v71[360].u64[0];
              if (v73 >= v72)
                v73 = *((_QWORD *)v159 + 220);
              v71[360].i64[0] = v73;
              v74 = v71[360].u64[1];
              if (v74 <= v72)
                v74 = v72;
              v71[360].i64[1] = v74;
              v75 = vdupq_n_s64(1uLL);
              v75.i64[0] = v72;
              v71[361] = vaddq_s64(v71[361], v75);
              *(_BYTE *)(v70 + 184) = 0;
            }
          }
          v76 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v70);
          if ((_DWORD)v76)
          {
            v76 = re::profilerThreadContext((re *)v76);
            v77 = *(int64x2_t **)(v76 + 152);
            if (v77)
            {
              v78 = *((_QWORD *)v159 + 216);
              v79 = v77[356].u64[0];
              if (v79 >= v78)
                v79 = *((_QWORD *)v159 + 216);
              v77[356].i64[0] = v79;
              v80 = v77[356].u64[1];
              if (v80 <= v78)
                v80 = v78;
              v77[356].i64[1] = v80;
              v81 = vdupq_n_s64(1uLL);
              v81.i64[0] = v78;
              v77[357] = vaddq_s64(v77[357], v81);
              *(_BYTE *)(v76 + 184) = 0;
            }
          }
          v82 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v76);
          if ((_DWORD)v82)
          {
            v82 = re::profilerThreadContext((re *)v82);
            v83 = *(int64x2_t **)(v82 + 152);
            if (v83)
            {
              v84 = *((_QWORD *)v159 + 217);
              v85 = v83[344].u64[0];
              if (v85 >= v84)
                v85 = *((_QWORD *)v159 + 217);
              v83[344].i64[0] = v85;
              v86 = v83[344].u64[1];
              if (v86 <= v84)
                v86 = v84;
              v83[344].i64[1] = v86;
              v87 = vdupq_n_s64(1uLL);
              v87.i64[0] = v84;
              v83[345] = vaddq_s64(v83[345], v87);
              *(_BYTE *)(v82 + 184) = 0;
            }
          }
          v88 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v82);
          if ((_DWORD)v88)
          {
            v89 = re::profilerThreadContext(v88);
            v90 = *(int64x2_t **)(v89 + 152);
            if (v90)
            {
              v91 = *((_QWORD *)v159 + 214);
              v92 = v90[364].u64[0];
              if (v92 >= v91)
                v92 = *((_QWORD *)v159 + 214);
              v90[364].i64[0] = v92;
              v93 = v90[364].u64[1];
              if (v93 <= v91)
                v93 = v91;
              v90[364].i64[1] = v93;
              v94 = vdupq_n_s64(1uLL);
              v94.i64[0] = v91;
              v90[365] = vaddq_s64(v90[365], v94);
              *(_BYTE *)(v89 + 184) = 0;
            }
          }
        }
      }
    }
  }
  *((_QWORD *)v1 + 221) = 0;
  *(_OWORD *)((char *)v1 + 1736) = 0u;
  *(_OWORD *)((char *)v1 + 1752) = 0u;
  *(_OWORD *)((char *)v1 + 1704) = 0u;
  *(_OWORD *)((char *)v1 + 1720) = 0u;
  started = (re *)re::RenderGraphResourceAllocationManager::startSetup((uint64_t)v1);
  v96 = *((_QWORD *)v1 + 17);
  if (v96)
  {
    v97 = 0;
    v157 = 0;
    v98 = 0;
    do
    {
      v99 = *((_QWORD *)v1 + 19);
      v100 = v99 + 48 * v97;
      v103 = *(_QWORD *)(v100 + 24);
      v102 = (unint64_t *)(v100 + 24);
      v101 = v103;
      if ((int)v103 >= 1)
      {
        v154 = v97;
        v104 = (_QWORD *)(v99 + 48 * v97 + 40);
        v105 = v101 + 1;
        do
        {
          v106 = (v105 - 2);
          if (*v102 <= v106)
            goto LABEL_183;
          v107 = *v104 + 56 * v106;
          if (*((_BYTE *)v1 + 1136))
            v108 = 88;
          else
            v108 = 80;
          started = (re *)(*(uint64_t (**)(void))(**(_QWORD **)v107 + v108))();
          *(_QWORD *)(v107 + 24) = 0;
          ++*(_DWORD *)(v107 + 32);
          if (*(_BYTE *)(v107 + 48))
          {
            if (*(_BYTE *)(v107 + 49))
              ++v98;
            else
              ++v157;
          }
          else if (!*(_BYTE *)(v107 + 49))
          {
            v109 = *v102;
            if (*v102 <= v106)
              goto LABEL_188;
            v110 = *(void (****)(_QWORD))(*v104 + 56 * v106);
            if (v110)
            {
              v111 = re::globalAllocators(started)[2];
              (**v110)(v110);
              (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v111 + 40))(v111, v110);
              v109 = *v102;
            }
            if (v109 <= v106)
              goto LABEL_189;
            *(_QWORD *)(*v104 + 56 * v106) = 0;
            started = (re *)re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::removeAt((uint64_t)(v102 - 2), (v105 - 2));
            v1 = v159;
          }
          --v105;
        }
        while (v105 > 1);
        v96 = *((_QWORD *)v1 + 17);
        v97 = v154;
      }
      ++v97;
    }
    while (v96 > v97);
    if (v96 && v157 && !v98)
    {
      for (i = 0; i < v96; ++i)
      {
        v113 = *((_QWORD *)v1 + 19);
        v114 = v113 + 48 * i;
        v117 = *(_QWORD *)(v114 + 24);
        v116 = (unint64_t *)(v114 + 24);
        v115 = v117;
        if ((int)v117 >= 1)
        {
          v118 = (_QWORD *)(v113 + 48 * i + 40);
          v119 = v115 + 1;
          do
          {
            v120 = (v119 - 2);
            v121 = *v116;
            if (*v116 <= v120)
              goto LABEL_186;
            if (*(_BYTE *)(*v118 + 56 * v120 + 49))
            {
              v122 = *(void (****)(_QWORD))(*v118 + 56 * v120);
              if (v122)
              {
                v123 = re::globalAllocators(started)[2];
                (**v122)(v122);
                (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v123 + 40))(v123, v122);
                v121 = *v116;
              }
              if (v121 <= v120)
                goto LABEL_187;
              *(_QWORD *)(*v118 + 56 * v120) = 0;
              started = (re *)re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::removeAt((uint64_t)(v116 - 2), (v119 - 2));
            }
            --v119;
          }
          while (v119 > 1);
          v1 = v159;
          v96 = *((_QWORD *)v159 + 17);
        }
      }
    }
  }
  v124 = 88;
  if (!*((_BYTE *)v1 + 1136))
    v124 = 80;
  (*(void (**)(void))(**((_QWORD **)v1 + 8) + v124))();
  *((_QWORD *)v1 + 11) = 0;
  ++*((_DWORD *)v1 + 24);
  result = (re *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v1 + 26) + 80))(*((_QWORD *)v1 + 26));
  *((_QWORD *)v1 + 29) = 0;
  ++*((_DWORD *)v1 + 60);
  v126 = *((unsigned int *)v1 + 48);
  if ((_DWORD)v126)
  {
    v127 = 0;
    v128 = (int *)(*((_QWORD *)v1 + 22) + 8);
    while (1)
    {
      v129 = *v128;
      v128 += 30;
      if (v129 < 0)
        break;
      if (v126 == ++v127)
      {
        LODWORD(v127) = *((_DWORD *)v1 + 48);
        break;
      }
    }
  }
  else
  {
    LODWORD(v127) = 0;
  }
  if ((_DWORD)v126 == (_DWORD)v127)
    return result;
  v130 = v127;
  v153 = *((_DWORD *)v1 + 48);
  do
  {
    v155 = v127;
    v131 = *((_QWORD *)v1 + 22);
    v132 = v131 + 120 * v130;
    v133 = 88;
    if (!*((_BYTE *)v1 + 1136))
      v133 = 80;
    result = (re *)(*(uint64_t (**)(void))(**(_QWORD **)(v132 + 24) + v133))();
    v136 = *(_QWORD *)(v132 + 96);
    v135 = (unint64_t *)(v132 + 96);
    v134 = v136;
    *(v135 - 6) = 0;
    v156 = v135;
    ++*((_DWORD *)v135 - 10);
    if (!v136)
      goto LABEL_174;
    v137 = 0;
    v158 = (_QWORD *)(v131 + 120 * v130 + 112);
    do
    {
      v138 = *v158 + 48 * v137;
      v141 = *(_QWORD *)(v138 + 24);
      v140 = (unint64_t *)(v138 + 24);
      v139 = v141;
      if ((int)v141 < 1)
        goto LABEL_173;
      v142 = (_QWORD *)(*v158 + 48 * v137 + 40);
      v143 = v139 + 1;
      do
      {
        v144 = (v143 - 2);
        if (*v140 <= v144)
        {
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_183:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_184:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_185:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_186:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_187:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_188:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_189:
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v145 = *v142 + 56 * v144;
        v146 = 88;
        if (!*((_BYTE *)v1 + 1136))
          v146 = 80;
        result = (re *)(*(uint64_t (**)(void))(**(_QWORD **)v145 + v146))();
        *(_QWORD *)(v145 + 24) = 0;
        ++*(_DWORD *)(v145 + 32);
        if (!*(_BYTE *)(v145 + 48))
        {
          v147 = *v140;
          if (*v140 <= v144)
            goto LABEL_184;
          v148 = *(void (****)(_QWORD))(*v142 + 56 * v144);
          if (v148)
          {
            v149 = re::globalAllocators(result)[2];
            (**v148)(v148);
            (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v149 + 40))(v149, v148);
            v147 = *v140;
          }
          if (v147 <= v144)
            goto LABEL_185;
          *(_QWORD *)(*v142 + 56 * v144) = 0;
          result = (re *)re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::removeAt((uint64_t)(v140 - 2), (v143 - 2));
          v1 = v159;
        }
        --v143;
      }
      while (v143 > 1);
      v134 = *v156;
LABEL_173:
      ++v137;
    }
    while (v134 > v137);
LABEL_174:
    v150 = *((_DWORD *)v1 + 48);
    v151 = v155;
    if (v150 <= v155 + 1)
      v150 = v155 + 1;
    while (1)
    {
      v130 = (v151 + 1);
      if (v150 - 1 == v151)
        break;
      ++v151;
      v152 = v130;
      if ((*(_DWORD *)(*((_QWORD *)v1 + 22) + 120 * v130 + 8) & 0x80000000) != 0)
        goto LABEL_180;
    }
    v152 = v150;
LABEL_180:
    LODWORD(v127) = v152;
  }
  while (v153 != v152);
  return result;
}

uint64_t re::RenderGraphResourceAllocationManager::startSetup(uint64_t this)
{
  *(_QWORD *)(this + 1344) = 0;
  ++*(_DWORD *)(this + 1352);
  *(_QWORD *)(this + 1384) = 0;
  ++*(_DWORD *)(this + 1392);
  *(_QWORD *)(this + 1424) = 0;
  ++*(_DWORD *)(this + 1432);
  *(_QWORD *)(this + 1464) = 0;
  ++*(_DWORD *)(this + 1472);
  *(_QWORD *)(this + 1504) = 0;
  ++*(_DWORD *)(this + 1512);
  *(_QWORD *)(this + 1544) = 0;
  ++*(_DWORD *)(this + 1552);
  *(_QWORD *)(this + 1584) = 0;
  ++*(_DWORD *)(this + 1592);
  *(_QWORD *)(this + 1624) = 0;
  ++*(_DWORD *)(this + 1632);
  *(_WORD *)(this + 1648) = 1;
  return this;
}

uint64_t re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::removeAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = v4 + 56 * v2;
    v6 = v4 + 56 * a2;
    *(_QWORD *)v6 = *(_QWORD *)(v5 - 56);
    re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v6 + 8, v5 - 48);
    *(_WORD *)(v6 + 48) = *(_WORD *)(v5 - 8);
    v2 = *(_QWORD *)(a1 + 16);
  }
  v7 = *(_QWORD *)(a1 + 32) + 56 * v2;
  result = *(_QWORD *)(v7 - 48);
  if (result)
  {
    if (*(_QWORD *)(v7 - 16))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(v7 - 16) = 0;
    *(_QWORD *)(v7 - 40) = 0;
    *(_QWORD *)(v7 - 32) = 0;
    *(_QWORD *)(v7 - 48) = 0;
    ++*(_DWORD *)(v7 - 24);
    v2 = *(_QWORD *)(a1 + 16);
  }
  *(_QWORD *)(a1 + 16) = v2 - 1;
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void re::RenderGraphResourceAllocationManager::waitForFence<re::mtl::RenderCommandEncoder>(_QWORD *a1, id *a2)
{
  uint64_t v2;
  int *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint8_t v10[16];

  v2 = a1[209];
  if (v2)
  {
    v5 = (int *)(a1[211] + 40);
    while (*((id *)v5 - 4) != *a2)
    {
      v5 += 12;
      if (!--v2)
        goto LABEL_5;
    }
    re::RenderGraphResourceAllocationManager::markLastAccess((uint64_t)a1, *((_QWORD *)v5 - 1), *v5);
    v7 = *(v5 - 1);
    if (*((_DWORD *)a1 + v7 + 194) != -1)
      objc_msgSend(*a2, sel_waitForFence_beforeStages_, a1[v7 + 33], *v5);
    if (a1[198])
    {
      v8 = 0;
      v9 = 0;
      do
      {
        objc_msgSend(*a2, sel_waitForFence_beforeStages_, a1[*(int *)(a1[200] + v8 + 4) + 33], *(int *)(a1[200] + v8 + 8));
        ++v9;
        v8 += 12;
      }
      while (a1[198] > v9);
    }
  }
  else
  {
LABEL_5:
    v6 = *re::graphicsLogObjects((re *)a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEFAULT, "ResourceAllocationManager: Failed to find matching encoder", v10, 2u);
    }
  }
}

uint64_t re::RenderGraphResourceAllocationManager::markLastAccess(uint64_t result, uint64_t a2, int a3)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  unint64_t v28;
  __int16 v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v5 = (_QWORD *)result;
  v36 = *MEMORY[0x24BDAC8D0];
  v20 = a2;
  v21 = a3;
  if (*(_BYTE *)(result + 1648))
  {
    *(_BYTE *)(result + 1648) = 0;
    if (*(_QWORD *)(result + 1344))
    {
      v6 = 0;
      v7 = 0;
      do
      {
        v8 = *(unsigned int *)(*(_QWORD *)(result + 1360) + v6);
        v9 = *(_QWORD *)(result + 1072);
        if (v9 <= v8)
          goto LABEL_61;
        v10 = *(_QWORD *)(result + 1088) + 184 * v8;
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) += 2;
        ++v7;
        v6 += 8;
      }
      while (*(_QWORD *)(result + 1344) > v7);
    }
    if (*(_QWORD *)(result + 1424))
    {
      v11 = 0;
      do
      {
        v8 = *(unsigned int *)(*(_QWORD *)(result + 1440) + 4 * v11);
        v9 = *(_QWORD *)(result + 1072);
        if (v9 <= v8)
          goto LABEL_62;
        v12 = *(_QWORD *)(result + 1088) + 184 * v8;
        *(_QWORD *)(v12 + 88) = 0;
        *(_DWORD *)(v12 + 96) += 2;
      }
      while (*(_QWORD *)(result + 1424) > (unint64_t)++v11);
    }
    if (*(_QWORD *)(result + 1384))
    {
      v13 = 0;
      v14 = 0;
      do
      {
        v8 = *(unsigned int *)(*(_QWORD *)(result + 1400) + v13);
        v9 = *(_QWORD *)(result + 1112);
        if (v9 <= v8)
          goto LABEL_63;
        v15 = *(_QWORD *)(result + 1128) + 184 * v8;
        *(_QWORD *)(v15 + 16) = 0;
        *(_DWORD *)(v15 + 24) += 2;
        ++v14;
        v13 += 8;
      }
      while (*(_QWORD *)(result + 1384) > v14);
    }
    if (*(_QWORD *)(result + 1464))
    {
      v16 = 0;
      while (1)
      {
        v8 = *(unsigned int *)(*(_QWORD *)(result + 1480) + 4 * v16);
        v9 = *(_QWORD *)(result + 1112);
        if (v9 <= v8)
          break;
        v17 = *(_QWORD *)(result + 1128) + 184 * v8;
        *(_QWORD *)(v17 + 88) = 0;
        *(_DWORD *)(v17 + 96) += 2;
        if (*(_QWORD *)(result + 1464) <= (unint64_t)++v16)
          goto LABEL_18;
      }
LABEL_64:
      v22 = 0;
      v35 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v23 = 136315906;
      v24 = "operator[]";
      v25 = 1024;
      v26 = 789;
      v27 = 2048;
      v28 = v8;
      v29 = 2048;
      v30 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_65:
      v22 = 0;
      v35 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v23 = 136315906;
      v24 = "operator[]";
      v25 = 1024;
      v26 = 789;
      v27 = 2048;
      v28 = v8;
      v29 = 2048;
      v30 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_66:
      v22 = 0;
      v35 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v23 = 136315906;
      v24 = "operator[]";
      v25 = 1024;
      v26 = 789;
      v27 = 2048;
      v28 = v8;
      v29 = 2048;
      v30 = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_67:
      v22 = 0;
      v35 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v23 = 136315906;
      v24 = "operator[]";
      v25 = 1024;
      v26 = 789;
      v27 = 2048;
      v28 = v8;
      v29 = 2048;
      v30 = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_68:
      v22 = 0;
      v35 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v23 = 136315906;
      v24 = "operator[]";
      v25 = 1024;
      v26 = 789;
      v27 = 2048;
      v28 = v8;
      v29 = 2048;
      v30 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_69:
      v22 = 0;
      v35 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v23 = 136315906;
      v24 = "operator[]";
      v25 = 1024;
      v26 = 789;
      v27 = 2048;
      v28 = v8;
      v29 = 2048;
      v30 = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_70:
      v22 = 0;
      v35 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v23 = 136315906;
      v24 = "operator[]";
      v25 = 1024;
      v26 = 789;
      v27 = 2048;
      v28 = v8;
      v29 = 2048;
      v30 = v3;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
  }
LABEL_18:
  if (*(_QWORD *)(result + 1344))
  {
    v9 = 0;
    v18 = 0;
    v3 = 184;
    while (1)
    {
      v8 = *(unsigned int *)(v5[170] + v9);
      v4 = v5[134];
      if (v4 <= v8)
        break;
      result = re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::indexOf((uint64_t)&v31, v5[136] + 184 * v8 + 8, &v20);
      if (!(_BYTE)v31)
      {
        v4 = v5[134];
        if (v4 <= v8)
          goto LABEL_65;
        result = (uint64_t)re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::add((_anonymous_namespace_ *)(v5[136] + 184 * v8 + 8), &v20);
      }
      ++v18;
      v9 += 8;
      if (v5[168] <= v18)
        goto LABEL_25;
    }
    v22 = 0;
    v35 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v23 = 136315906;
    v24 = "operator[]";
    v25 = 1024;
    v26 = 789;
    v27 = 2048;
    v28 = v8;
    v29 = 2048;
    v30 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_56;
  }
LABEL_25:
  if (v5[178])
  {
    v9 = 0;
    while (1)
    {
      v8 = *(unsigned int *)(v5[180] + 4 * v9);
      v3 = v5[134];
      if (v3 <= v8)
        break;
      re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::indexOf((uint64_t)&v31, v5[136] + 184 * v8 + 80, &v20);
      if (!(_BYTE)v31)
      {
        v3 = v5[134];
        if (v3 <= v8)
          goto LABEL_66;
        re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::add((_anonymous_namespace_ *)(v5[136] + 184 * v8 + 80), &v20);
      }
      v3 = v5[134];
      if (v3 <= v8)
        goto LABEL_57;
      result = re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::indexOf((uint64_t)&v31, v5[136] + 184 * v8 + 8, &v20);
      if (!(_BYTE)v31)
      {
        v3 = v5[134];
        if (v3 <= v8)
          goto LABEL_67;
        result = (uint64_t)re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::add((_anonymous_namespace_ *)(v5[136] + 184 * v8 + 8), &v20);
      }
      if (v5[178] <= ++v9)
        goto LABEL_36;
    }
LABEL_56:
    v22 = 0;
    v35 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v23 = 136315906;
    v24 = "operator[]";
    v25 = 1024;
    v26 = 789;
    v27 = 2048;
    v28 = v8;
    v29 = 2048;
    v30 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_57:
    v22 = 0;
    v35 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v23 = 136315906;
    v24 = "operator[]";
    v25 = 1024;
    v26 = 789;
    v27 = 2048;
    v28 = v8;
    v29 = 2048;
    v30 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_58;
  }
LABEL_36:
  if (v5[173])
  {
    v9 = 0;
    v19 = 0;
    v3 = 184;
    while (1)
    {
      v8 = *(unsigned int *)(v5[175] + v9);
      v4 = v5[139];
      if (v4 <= v8)
        break;
      result = re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::indexOf((uint64_t)&v31, v5[141] + 184 * v8 + 8, &v20);
      if (!(_BYTE)v31)
      {
        v4 = v5[139];
        if (v4 <= v8)
          goto LABEL_68;
        result = (uint64_t)re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::add((_anonymous_namespace_ *)(v5[141] + 184 * v8 + 8), &v20);
      }
      ++v19;
      v9 += 8;
      if (v5[173] <= v19)
        goto LABEL_43;
    }
LABEL_58:
    v22 = 0;
    v35 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v23 = 136315906;
    v24 = "operator[]";
    v25 = 1024;
    v26 = 789;
    v27 = 2048;
    v28 = v8;
    v29 = 2048;
    v30 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_59:
    v22 = 0;
    v35 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v23 = 136315906;
    v24 = "operator[]";
    v25 = 1024;
    v26 = 789;
    v27 = 2048;
    v28 = v8;
    v29 = 2048;
    v30 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_60:
    v22 = 0;
    v35 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v23 = 136315906;
    v24 = "operator[]";
    v25 = 1024;
    v26 = 789;
    v27 = 2048;
    v28 = v8;
    v29 = 2048;
    v30 = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_61:
    v22 = 0;
    v35 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v23 = 136315906;
    v24 = "operator[]";
    v25 = 1024;
    v26 = 789;
    v27 = 2048;
    v28 = v8;
    v29 = 2048;
    v30 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_62:
    v22 = 0;
    v35 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v23 = 136315906;
    v24 = "operator[]";
    v25 = 1024;
    v26 = 789;
    v27 = 2048;
    v28 = v8;
    v29 = 2048;
    v30 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_63:
    v22 = 0;
    v35 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v23 = 136315906;
    v24 = "operator[]";
    v25 = 1024;
    v26 = 789;
    v27 = 2048;
    v28 = v8;
    v29 = 2048;
    v30 = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_64;
  }
LABEL_43:
  if (v5[183])
  {
    v9 = 0;
    while (1)
    {
      v8 = *(unsigned int *)(v5[185] + 4 * v9);
      v3 = v5[139];
      if (v3 <= v8)
        goto LABEL_59;
      re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::indexOf((uint64_t)&v31, v5[141] + 184 * v8 + 80, &v20);
      if (!(_BYTE)v31)
      {
        v3 = v5[139];
        if (v3 <= v8)
          goto LABEL_69;
        re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::add((_anonymous_namespace_ *)(v5[141] + 184 * v8 + 80), &v20);
      }
      v3 = v5[139];
      if (v3 <= v8)
        goto LABEL_60;
      result = re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::indexOf((uint64_t)&v31, v5[141] + 184 * v8 + 8, &v20);
      if (!(_BYTE)v31)
      {
        v3 = v5[139];
        if (v3 <= v8)
          goto LABEL_70;
        result = (uint64_t)re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::add((_anonymous_namespace_ *)(v5[141] + 184 * v8 + 8), &v20);
      }
      if (v5[183] <= ++v9)
        return result;
    }
  }
  return result;
}

void re::RenderGraphResourceAllocationManager::onAcquireEncoder<re::mtl::BlitCommandEncoder>(uint64_t a1, id *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  id v11;
  _QWORD v12[2];
  id v13;
  uint64_t v14;
  int v15;

  v11 = 0;
  v12[0] = 0;
  v4 = re::globalAllocators((re *)a1);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 264, 8);
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_QWORD *)(v5 + 256) = 0;
  v12[1] = v5;
  v13 = 0;
  v14 = -1;
  v15 = 2;
  re::ObjCObject::operator=(&v11, a2);
  v14 = *(_QWORD *)(a1 + 1040);
  v15 = *(_DWORD *)(a1 + 1048);
  re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::add((_anonymous_namespace_ *)(a1 + 1656), (uint64_t)&v11);
  re::RenderGraphResourceAllocationManager::waitForFence<re::mtl::BlitCommandEncoder>((_QWORD *)a1, a2);
  *(_DWORD *)(a1 + 4 * *(int *)(a1 + 1044) + 776) = *(_DWORD *)(a1 + 1040);
  v6 = *(_DWORD *)(a1 + 1036) + 1;
  *(_DWORD *)(a1 + 1036) = v6;
  v7 = *(_DWORD *)(a1 + 1032) + 1;
  v8 = -v7 < 0;
  v9 = -v7 & 0x3F;
  v10 = v7 & 0x3F;
  if (!v8)
    v10 = -v9;
  *(_DWORD *)(a1 + 1032) = v10;
  *(_DWORD *)(a1 + 1040) = v6;
  *(_DWORD *)(a1 + 1044) = v10;
  *(_DWORD *)(a1 + 1048) = 2;
  *(_BYTE *)(a1 + 1649) = 1;

  re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)v12);
}

id re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  id result;
  int v7;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 48 * v4;
  *(_QWORD *)v5 = *(id *)a2;
  re::mtl::RenderCommandEncoder::RenderCommandEncoder((re::mtl::RenderCommandEncoder *)(v5 + 8), (id *)(a2 + 8));
  result = *(id *)(a2 + 24);
  *(_QWORD *)(v5 + 24) = result;
  v7 = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(v5 + 40) = v7;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::RenderGraphResourceAllocationManager::waitForFence<re::mtl::BlitCommandEncoder>(_QWORD *a1, id *a2)
{
  uint64_t v2;
  int *v5;
  NSObject *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t i;
  _DWORD *v11;
  uint8_t v12[16];

  v2 = a1[209];
  if (v2)
  {
    v5 = (int *)(a1[211] + 40);
    while (*((id *)v5 - 5) != *a2)
    {
      v5 += 12;
      if (!--v2)
        goto LABEL_5;
    }
    re::RenderGraphResourceAllocationManager::markLastAccess((uint64_t)a1, *((_QWORD *)v5 - 1), *v5);
    v7 = *(v5 - 1);
    if (*((_DWORD *)a1 + v7 + 194) != -1)
      objc_msgSend(*a2, "waitForFence:", a1[v7 + 33]);
    v8 = a1[198];
    if (v8)
    {
      v9 = 0;
      for (i = 0; i < v8; ++i)
      {
        v11 = (_DWORD *)(a1[200] + v9);
        if (*v11 != *(v5 - 2) || *(_QWORD *)(v11 + 1) != *(_QWORD *)(v5 - 1))
        {
          objc_msgSend(*a2, "waitForFence:", a1[v11[1] + 33]);
          v8 = a1[198];
        }
        v9 += 12;
      }
    }
  }
  else
  {
LABEL_5:
    v6 = *re::graphicsLogObjects((re *)a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEFAULT, "ResourceAllocationManager: Failed to find matching encoder", v12, 2u);
    }
  }
}

void re::RenderGraphResourceAllocationManager::onAcquireEncoder<re::mtl::ComputeCommandEncoder>(uint64_t a1, id *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  id v11;
  _QWORD v12[2];
  id v13;
  uint64_t v14;
  int v15;

  v11 = 0;
  v12[0] = 0;
  v4 = re::globalAllocators((re *)a1);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 264, 8);
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_QWORD *)(v5 + 256) = 0;
  v12[1] = v5;
  v13 = 0;
  v14 = -1;
  v15 = 2;
  re::ObjCObject::operator=(&v13, a2);
  v14 = *(_QWORD *)(a1 + 1040);
  v15 = *(_DWORD *)(a1 + 1048);
  re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::add((_anonymous_namespace_ *)(a1 + 1656), (uint64_t)&v11);
  re::RenderGraphResourceAllocationManager::waitForFence<re::mtl::ComputeCommandEncoder>((_QWORD *)a1, a2);
  *(_DWORD *)(a1 + 4 * *(int *)(a1 + 1044) + 776) = *(_DWORD *)(a1 + 1040);
  v6 = *(_DWORD *)(a1 + 1036) + 1;
  *(_DWORD *)(a1 + 1036) = v6;
  v7 = *(_DWORD *)(a1 + 1032) + 1;
  v8 = -v7 < 0;
  v9 = -v7 & 0x3F;
  v10 = v7 & 0x3F;
  if (!v8)
    v10 = -v9;
  *(_DWORD *)(a1 + 1032) = v10;
  *(_DWORD *)(a1 + 1040) = v6;
  *(_DWORD *)(a1 + 1044) = v10;
  *(_DWORD *)(a1 + 1048) = 2;
  *(_BYTE *)(a1 + 1649) = 1;

  re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)v12);
}

void re::RenderGraphResourceAllocationManager::waitForFence<re::mtl::ComputeCommandEncoder>(_QWORD *a1, id *a2)
{
  uint64_t v2;
  int *v5;
  NSObject *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t i;
  _DWORD *v11;
  uint8_t v12[16];

  v2 = a1[209];
  if (v2)
  {
    v5 = (int *)(a1[211] + 40);
    while (*((id *)v5 - 2) != *a2)
    {
      v5 += 12;
      if (!--v2)
        goto LABEL_5;
    }
    re::RenderGraphResourceAllocationManager::markLastAccess((uint64_t)a1, *((_QWORD *)v5 - 1), *v5);
    v7 = *(v5 - 1);
    if (*((_DWORD *)a1 + v7 + 194) != -1)
      objc_msgSend(*a2, "waitForFence:", a1[v7 + 33]);
    v8 = a1[198];
    if (v8)
    {
      v9 = 0;
      for (i = 0; i < v8; ++i)
      {
        v11 = (_DWORD *)(a1[200] + v9);
        if (*v11 != *(v5 - 2) || *(_QWORD *)(v11 + 1) != *(_QWORD *)(v5 - 1))
        {
          objc_msgSend(*a2, "waitForFence:", a1[v11[1] + 33]);
          v8 = a1[198];
        }
        v9 += 12;
      }
    }
  }
  else
  {
LABEL_5:
    v6 = *re::graphicsLogObjects((re *)a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_224FE9000, v6, OS_LOG_TYPE_DEFAULT, "ResourceAllocationManager: Failed to find matching encoder", v12, 2u);
    }
  }
}

void re::RenderGraphResourceAllocationManager::onAcquireEncoder<re::mtl::RenderCommandEncoder>(uint64_t a1, id *a2)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  id v11;
  id v12;
  re::mtl::RenderEncoderImpCache *v13;
  id v14;
  uint64_t v15;
  int v16;

  v11 = 0;
  v12 = 0;
  v4 = re::globalAllocators((re *)a1);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 264, 8);
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_QWORD *)(v5 + 256) = 0;
  v13 = (re::mtl::RenderEncoderImpCache *)v5;
  v14 = 0;
  v15 = -1;
  v16 = 2;
  re::ObjCObject::operator=(&v12, a2);
  re::mtl::RenderEncoderImpCache::build(v13, v12);
  v15 = *(_QWORD *)(a1 + 1040);
  v16 = *(_DWORD *)(a1 + 1048);
  re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::add((_anonymous_namespace_ *)(a1 + 1656), (uint64_t)&v11);
  re::RenderGraphResourceAllocationManager::waitForFence<re::mtl::RenderCommandEncoder>((_QWORD *)a1, a2);
  *(_DWORD *)(a1 + 4 * *(int *)(a1 + 1044) + 776) = *(_DWORD *)(a1 + 1040);
  v6 = *(_DWORD *)(a1 + 1036) + 1;
  *(_DWORD *)(a1 + 1036) = v6;
  v7 = *(_DWORD *)(a1 + 1032) + 1;
  v8 = -v7 < 0;
  v9 = -v7 & 0x3F;
  v10 = v7 & 0x3F;
  if (!v8)
    v10 = -v9;
  *(_DWORD *)(a1 + 1032) = v10;
  *(_DWORD *)(a1 + 1040) = v6;
  *(_DWORD *)(a1 + 1044) = v10;
  *(_DWORD *)(a1 + 1048) = 2;
  *(_BYTE *)(a1 + 1649) = 1;

  re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)&v12);
}

void re::RenderGraphResourceAllocationManager::addCompleteFence(re::RenderGraphResourceAllocationManager *this, re::mtl::ComputeCommandEncoder *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  NSObject *v5;
  uint8_t v6[16];

  v2 = *((_QWORD *)this + 209);
  if (v2)
  {
    v3 = *(_QWORD *)a2;
    v4 = (uint64_t *)(*((_QWORD *)this + 211) + 32);
    while (*(v4 - 1) != v3)
    {
      v4 += 6;
      if (!--v2)
        goto LABEL_5;
    }
    re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((re::RenderGraphResourceAllocationManager *)((char *)this + 1608), v4);
  }
  else
  {
LABEL_5:
    v5 = *re::graphicsLogObjects(this);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_224FE9000, v5, OS_LOG_TYPE_DEFAULT, "ResourceAllocationManager: Failed to find matching encoder", v6, 2u);
    }
  }
}

void re::RenderGraphResourceAllocationManager::onReleaseEncoder<re::mtl::RenderCommandEncoder>(_QWORD *a1, _QWORD **a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t buf[16];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = a1[209];
  if (v2)
  {
    v3 = a1;
    v4 = 0;
    v5 = 0;
    v6 = a1[211];
    a1 = *a2;
    while (*(_QWORD **)(v6 + v4 + 8) != a1)
    {
      ++v5;
      v4 += 48;
      if (v2 == v5)
        goto LABEL_5;
    }
    objc_msgSend(a1, sel_updateFence_afterStages_, v3[*(int *)(v6 + v4 + 36) + 33], 2);
    if (v3[209] <= v5)
    {
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)(v3 + 201), (uint64_t *)(v3[211] + v4 + 32));
    re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::removeAt((uint64_t)(v3 + 207), v5);
  }
  else
  {
LABEL_5:
    v7 = *re::graphicsLogObjects((re *)a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "ResourceAllocationManager: Failed to find matching encoder", buf, 2u);
    }
  }
}

void re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::removeAt(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void **v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v3 - 1 > a2)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = v5 + 48 * v3;
    v7 = (void **)(v6 - 48);
    v8 = (void **)(v5 + 48 * a2);
    if (v8 != (void **)(v6 - 48))
    {
      v9 = *v7;
      *v7 = 0;
      v10 = *v8;
      *v8 = v9;

    }
    v11 = v5 + 48 * a2;
    re::ObjCObject::operator=((id *)(v11 + 8), (id *)(v6 - 40));
    re::mtl::RenderEncoderImpCache::build(*(re::mtl::RenderEncoderImpCache **)(v11 + 16), *(id *)(v11 + 8));
    if ((void **)v11 != v7)
    {
      v12 = *(_QWORD *)(v6 - 24);
      *(_QWORD *)(v6 - 24) = 0;
      v13 = *(void **)(v11 + 24);
      *(_QWORD *)(v11 + 24) = v12;

    }
    v14 = v5 + 48 * a2;
    v15 = *(_QWORD *)(v6 - 16);
    *(_DWORD *)(v14 + 40) = *(_DWORD *)(v6 - 8);
    *(_QWORD *)(v14 + 32) = v15;
    v3 = *(_QWORD *)(a1 + 16);
  }
  v16 = *(_QWORD *)(a1 + 32) + 48 * v3;

  re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)(v16 - 40));
  --*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
}

void re::RenderGraphResourceAllocationManager::onReleaseEncoder<re::mtl::BlitCommandEncoder>(_QWORD *a1, _QWORD **a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t buf[16];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = a1[209];
  if (v2)
  {
    v3 = a1;
    v4 = 0;
    v5 = 0;
    v6 = a1[211];
    a1 = *a2;
    while (*(_QWORD **)(v6 + v4) != a1)
    {
      ++v5;
      v4 += 48;
      if (v2 == v5)
        goto LABEL_5;
    }
    objc_msgSend(a1, "updateFence:", v3[*(int *)(v6 + v4 + 36) + 33]);
    if (v3[209] <= v5)
    {
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)(v3 + 201), (uint64_t *)(v3[211] + v4 + 32));
    re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::removeAt((uint64_t)(v3 + 207), v5);
  }
  else
  {
LABEL_5:
    v7 = *re::graphicsLogObjects((re *)a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "ResourceAllocationManager: Failed to find matching encoder", buf, 2u);
    }
  }
}

void re::RenderGraphResourceAllocationManager::onReleaseEncoder<re::mtl::ComputeCommandEncoder>(_QWORD *a1, _QWORD **a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint8_t buf[16];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = a1[209];
  if (v2)
  {
    v3 = a1;
    v4 = 0;
    v5 = 0;
    v6 = a1[211];
    a1 = *a2;
    while (*(_QWORD **)(v6 + v4 + 24) != a1)
    {
      ++v5;
      v4 += 48;
      if (v2 == v5)
        goto LABEL_5;
    }
    objc_msgSend(a1, "updateFence:", v3[*(int *)(v6 + v4 + 36) + 33]);
    if (v3[209] <= v5)
    {
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)(v3 + 201), (uint64_t *)(v3[211] + v4 + 32));
    re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::removeAt((uint64_t)(v3 + 207), v5);
  }
  else
  {
LABEL_5:
    v7 = *re::graphicsLogObjects((re *)a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "ResourceAllocationManager: Failed to find matching encoder", buf, 2u);
    }
  }
}

_QWORD *re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureIndexAndStage>::add(_QWORD *this, _QWORD *a2)
{
  _QWORD *v3;
  unint64_t v4;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureIndexAndStage>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  *(_QWORD *)(v3[4] + 8 * v4) = *a2;
  ++v3[2];
  ++*((_DWORD *)v3 + 6);
  return this;
}

_anonymous_namespace_ *re::RenderGraphResourceAllocationManager::processResourceHazards(_anonymous_namespace_ *this)
{
  unint64_t v1;
  _anonymous_namespace_ *v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v2 = this;
  v47 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 168);
  if (v3)
  {
    v1 = *((_QWORD *)this + 170);
    v4 = v1 + 8 * v3;
    do
    {
      v5 = *(_DWORD *)v1;
      v6 = *(_DWORD *)(v1 + 4);
      v1 += 8;
      LODWORD(v42) = v5;
      BYTE4(v42) = 0;
      DWORD2(v42) = v6;
      this = re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)((char *)v2 + 1488), (uint64_t *)&v42);
    }
    while (v1 != v4);
  }
  v7 = *((_QWORD *)v2 + 178);
  if (v7)
  {
    v1 = *((_QWORD *)v2 + 180);
    v8 = 4 * v7;
    do
    {
      v9 = *(_DWORD *)v1;
      v1 += 4;
      LODWORD(v42) = v9;
      BYTE4(v42) = 1;
      DWORD2(v42) = 2;
      this = re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)((char *)v2 + 1488), (uint64_t *)&v42);
      v8 -= 4;
    }
    while (v8);
  }
  v10 = *((_QWORD *)v2 + 173);
  if (v10)
  {
    v1 = *((_QWORD *)v2 + 175);
    v11 = v1 + 8 * v10;
    do
    {
      v12 = *(_DWORD *)v1;
      v13 = *(_DWORD *)(v1 + 4);
      v1 += 8;
      LODWORD(v42) = v12;
      BYTE4(v42) = 0;
      DWORD2(v42) = v13;
      this = re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)((char *)v2 + 1528), (uint64_t *)&v42);
    }
    while (v1 != v11);
  }
  v14 = *((_QWORD *)v2 + 183);
  if (v14)
  {
    v15 = (int *)*((_QWORD *)v2 + 185);
    v1 = (unint64_t)v2 + 1528;
    v16 = 4 * v14;
    do
    {
      v17 = *v15++;
      LODWORD(v42) = v17;
      BYTE4(v42) = 1;
      DWORD2(v42) = 2;
      this = re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)((char *)v2 + 1528), (uint64_t *)&v42);
      v16 -= 4;
    }
    while (v16);
  }
  v18 = *((_QWORD *)v2 + 188);
  if (v18)
  {
    v19 = 0;
    while (1)
    {
      v20 = *((_QWORD *)v2 + 190);
      v21 = *(unsigned int *)(v20 + 12 * v19);
      if (*((_QWORD *)v2 + 134) <= v21)
        break;
      v22 = *((_QWORD *)v2 + 136) + 184 * v21;
      v23 = v22 + 8;
      v24 = v22 + 80;
      if (*(_BYTE *)(v20 + 12 * v19 + 4))
        v25 = v23;
      else
        v25 = v24;
      if (*(_QWORD *)(v25 + 8))
      {
        v26 = 0;
        v27 = 0;
        v28 = (unsigned int *)(v20 + 12 * v19 + 8);
        do
        {
          v29 = v25 + 24;
          if ((*(_BYTE *)(v25 + 16) & 1) == 0)
            v29 = *(_QWORD *)(v25 + 32);
          v1 = v1 & 0xFFFFFFFF00000000 | *v28;
          this = re::RenderGraphResourceAllocationManager::SetupData::addUniqueFence((_anonymous_namespace_ *)((char *)v2 + 1328), *(_QWORD *)(v29 + v26), v1);
          ++v27;
          v26 += 12;
        }
        while (*(_QWORD *)(v25 + 8) > v27);
        v18 = *((_QWORD *)v2 + 188);
      }
      if (v18 <= ++v19)
        goto LABEL_26;
    }
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v42 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_41:
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v42 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_26:
  v30 = *((_QWORD *)v2 + 193);
  if (v30)
  {
    v31 = 0;
    while (1)
    {
      v32 = *((_QWORD *)v2 + 195);
      v33 = *(unsigned int *)(v32 + 12 * v31);
      if (*((_QWORD *)v2 + 139) <= v33)
        break;
      v34 = *((_QWORD *)v2 + 141) + 184 * v33;
      v35 = v34 + 8;
      v36 = v34 + 80;
      if (*(_BYTE *)(v32 + 12 * v31 + 4))
        v37 = v35;
      else
        v37 = v36;
      if (*(_QWORD *)(v37 + 8))
      {
        v38 = 0;
        v39 = 0;
        v40 = (unsigned int *)(v32 + 12 * v31 + 8);
        do
        {
          v41 = v37 + 24;
          if ((*(_BYTE *)(v37 + 16) & 1) == 0)
            v41 = *(_QWORD *)(v37 + 32);
          v1 = v1 & 0xFFFFFFFF00000000 | *v40;
          this = re::RenderGraphResourceAllocationManager::SetupData::addUniqueFence((_anonymous_namespace_ *)((char *)v2 + 1328), *(_QWORD *)(v41 + v38), v1);
          ++v39;
          v38 += 12;
        }
        while (*(_QWORD *)(v37 + 8) > v39);
        v30 = *((_QWORD *)v2 + 193);
      }
      if (v30 <= ++v31)
        return this;
    }
    goto LABEL_41;
  }
  return this;
}

uint64_t re::RenderGraphResourceAllocationManager::heapGroupHierarchyFor(re::RenderGraphResourceAllocationManager *this, unint64_t a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD v23[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  int v31;
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  unint64_t v36;
  __int16 v37;
  unint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v23[0] = a2;
  if (!a2)
    return (uint64_t)this + 64;
  v4 = (char *)this + 160;
  v5 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v6 = v5 ^ (v5 >> 31);
  if (*((_QWORD *)this + 20))
  {
    v7 = *(unsigned int *)(*((_QWORD *)this + 21) + 4 * (v6 % *((unsigned int *)this + 46)));
    if ((_DWORD)v7 != 0x7FFFFFFF)
    {
      v21 = *((_QWORD *)this + 22);
      if (*(_QWORD *)(v21 + 120 * v7 + 16) == a2)
        return v21 + 120 * v7 + 24;
      while (1)
      {
        LODWORD(v7) = *(_DWORD *)(v21 + 120 * v7 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v7 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v21 + 120 * v7 + 16) == a2)
          return v21 + 120 * v7 + 24;
      }
    }
    v30 = 0;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0;
    v8 = v6 % *((unsigned int *)this + 46);
    v9 = *(unsigned int *)(*((_QWORD *)this + 21) + 4 * v8);
    if ((_DWORD)v9 != 0x7FFFFFFF)
    {
      v10 = *((_QWORD *)this + 22);
      if (*(_QWORD *)(v10 + 120 * v9 + 16) == a2)
      {
LABEL_8:
        v11 = v10 + 120 * v9;
        goto LABEL_12;
      }
      while (1)
      {
        LODWORD(v9) = *(_DWORD *)(v10 + 120 * v9 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v9 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v10 + 120 * v9 + 16) == a2)
          goto LABEL_8;
      }
    }
  }
  else
  {
    LODWORD(v8) = 0;
    v30 = 0;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0;
  }
  v13 = re::HashTable<unsigned long long,re::RenderGraphResourceAllocationManager::HeapGroupHierarchy,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)v4, v8, v6, v23, (uint64_t *)&v24);
  ++*((_DWORD *)this + 50);
  v11 = *((_QWORD *)this + 22) + 120 * v13;
LABEL_12:
  v12 = v11 + 24;
  re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapGroup>::deinit((uint64_t)&v27 + 8);
  if (*((_QWORD *)&v24 + 1) && *((_QWORD *)&v26 + 1))
    (*(void (**)(void))(**((_QWORD **)&v24 + 1) + 40))();
  re::RenderGraphResourceAllocationManager::allocateSmallBlockHeap((re::RenderGraphResourceAllocationManager *)&v24, (uint64_t)this, a2);
  *(_QWORD *)v12 = v24;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v12 + 8, (uint64_t)&v24 + 8);
  *(_WORD *)(v12 + 48) = v27;
  if (*((_QWORD *)&v24 + 1) && *((_QWORD *)&v26 + 1))
    (*(void (**)(void))(**((_QWORD **)&v24 + 1) + 40))();
  v14 = *((_QWORD *)this + 2);
  if (v14)
  {
    v15 = 0;
    while (!(*(_QWORD *)(*((_QWORD *)this + 4) + 8 * v15) >> 30))
    {
      if (v14 == ++v15)
        goto LABEL_22;
    }
  }
  else
  {
LABEL_22:
    v15 = v14 - 1;
  }
  re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapGroup>::resize((_QWORD *)(v12 + 56), v15 + 1);
  if (*(_QWORD *)(v12 + 72))
  {
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = re::RenderGraphResourceAllocationManager::indexToSize(this, v17);
      v19 = *(_QWORD *)(v12 + 72);
      if (v19 <= v17)
      {
        v23[1] = 0;
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v24 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v31 = 136315906;
        v32 = "operator[]";
        v33 = 1024;
        v34 = 789;
        v35 = 2048;
        v36 = v17;
        v37 = 2048;
        v38 = v19;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v20 = (uint64_t *)(*(_QWORD *)(v12 + 88) + v16);
      *v20 = v18;
      if ((unint64_t)v20[2] <= 0x7F)
      {
        re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::setCapacity(v20 + 1, 0x80uLL);
        v19 = *(_QWORD *)(v12 + 72);
      }
      ++v17;
      v16 += 48;
    }
    while (v19 > v17);
  }
  return v12;
}

_anonymous_namespace_ *re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::add(_anonymous_namespace_ *result, uint64_t *a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = result;
  if (!*(_QWORD *)result)
  {
    v10 = *((_QWORD *)v3 + 1) + 1;
    result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::setCapacity(v3, v10);
    v11 = *((_DWORD *)v3 + 4) + 2;
    *((_DWORD *)v3 + 4) = v11;
    if ((v11 & 1) == 0)
      goto LABEL_12;
LABEL_18:
    v12 = (_QWORD *)((char *)v3 + 24);
    goto LABEL_19;
  }
  v4 = *((_QWORD *)result + 1);
  v5 = *((_DWORD *)result + 4);
  if ((v5 & 1) == 0)
  {
    v6 = *((_QWORD *)result + 3);
    v8 = v4 >= v6;
    v7 = v4 + 1;
    v8 = !v8 || v6 >= v7;
    if (!v8)
    {
      v9 = 2 * v6;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  v7 = v4 + 1;
  if (v7 < 5)
  {
LABEL_11:
    if ((v5 & 1) == 0)
      goto LABEL_12;
    goto LABEL_18;
  }
  v9 = 8;
LABEL_14:
  if (v9 <= v7)
    v13 = v7;
  else
    v13 = v9;
  result = (_anonymous_namespace_ *)re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::setCapacity(result, v13);
  if ((*((_DWORD *)v3 + 4) & 1) != 0)
    goto LABEL_18;
LABEL_12:
  v12 = (_QWORD *)*((_QWORD *)v3 + 4);
LABEL_19:
  v14 = (uint64_t)v12 + 12 * *((_QWORD *)v3 + 1);
  v15 = *a2;
  *(_DWORD *)(v14 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v14 = v15;
  ++*((_QWORD *)v3 + 1);
  *((_DWORD *)v3 + 4) += 2;
  return result;
}

uint64_t DeviceHeap::name(DeviceHeap *this)
{
  if ((*((_BYTE *)this + 32) & 1) != 0)
    return *((_QWORD *)this + 5);
  else
    return (uint64_t)this + 33;
}

uint64_t re::Heap::releaseTextureForCaching(re::Heap *this)
{
  return (*(uint64_t (**)(re::Heap *))(*(_QWORD *)this + 32))(this);
}

uint64_t re::Heap::releaseBufferForCaching(re::Heap *this)
{
  return (*(uint64_t (**)(re::Heap *))(*(_QWORD *)this + 56))(this);
}

uint64_t re::Heap::onFrameFinishForCaching(re::Heap *this)
{
  return (*(uint64_t (**)(re::Heap *))(*(_QWORD *)this + 80))(this);
}

id DeviceHeap::texture@<X0>(DeviceHeap *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id result;

  if (*((_QWORD *)this + 9) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  result = *(id *)(*((_QWORD *)this + 11) + 8 * a2);
  *a3 = result;
  return result;
}

id DeviceHeap::buffer@<X0>(DeviceHeap *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id result;

  if (*((_QWORD *)this + 14) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  result = *(id *)(*((_QWORD *)this + 16) + 8 * a2);
  *a3 = result;
  return result;
}

uint64_t DeviceHeap::maxAvailableSize(DeviceHeap *this)
{
  return 0x40000000;
}

uint64_t MetalHeap::name(MetalHeap *this)
{
  if ((*((_BYTE *)this + 40) & 1) != 0)
    return *((_QWORD *)this + 6);
  else
    return (uint64_t)this + 41;
}

id *MetalHeap::texture@<X0>(MetalHeap *this@<X0>, uint64_t a2@<X1>, id **a3@<X8>)
{
  id *result;

  result = (id *)re::DataArray<re::TextureAtlasTile>::tryGet((uint64_t)this + 64, a2);
  if (result)
    result = (id *)*result;
  *a3 = result;
  return result;
}

id *MetalHeap::buffer@<X0>(MetalHeap *this@<X0>, uint64_t a2@<X1>, id **a3@<X8>)
{
  id *result;

  result = (id *)re::DataArray<re::TextureAtlasTile>::tryGet((uint64_t)this + 128, a2);
  if (result)
    result = (id *)*result;
  *a3 = result;
  return result;
}

id MetalHeap::maxAvailableSize(id *this, uint64_t a2)
{
  return objc_msgSend(this[2], sel_maxAvailableSizeWithAlignment_, a2);
}

uint64_t CachingHeap::name(CachingHeap *this)
{
  if ((*((_BYTE *)this + 32) & 1) != 0)
    return *((_QWORD *)this + 5);
  else
    return (uint64_t)this + 33;
}

id CachingHeap::texture@<X0>(CachingHeap *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id result;

  if (*((_QWORD *)this + 9) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  result = *(id *)(*((_QWORD *)this + 11) + 8 * a2);
  *a3 = result;
  return result;
}

id CachingHeap::buffer@<X0>(CachingHeap *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id result;

  if (*((_QWORD *)this + 14) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  result = *(id *)(*((_QWORD *)this + 16) + 8 * a2);
  *a3 = result;
  return result;
}

uint64_t CachingHeap::maxAvailableSize(CachingHeap *this)
{
  return 0x40000000;
}

uint64_t re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapGroup>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 48 * v4;
        v6 = v3 + 8;
        do
        {
          re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::deinit(v6);
          v6 += 48;
          v5 -= 48;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 56 * v4;
        v6 = (_QWORD *)(v3 + 40);
        do
        {
          v7 = *(v6 - 4);
          if (v7)
          {
            if (*v6)
              (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
            *v6 = 0;
            *(v6 - 3) = 0;
            *(v6 - 2) = 0;
            *(v6 - 4) = 0;
            ++*((_DWORD *)v6 - 2);
          }
          v6 += 7;
          v5 -= 56;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a1 != a2)
  {
    if (*(_QWORD *)a1)
    {
      if (*(_QWORD *)a2 && *(_QWORD *)a1 != *(_QWORD *)a2)
      {
        re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 527);
        result = _os_crash();
        __break(1u);
        return result;
      }
    }
    if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    {
      if (*(_QWORD *)(a2 + 8))
      {
        re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::move(a1, a2);
      }
      else
      {
        re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_DWORD *)(a2 + 16) += 2;
        *(_DWORD *)(a1 + 16) += 2;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) += 2;
      re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap((uint64_t *)a1, (uint64_t *)a2);
    }
  }
  return a1;
}

void *re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::move(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  const void *v5;
  void *result;
  const void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (v4 >= *(_QWORD *)(a1 + 8))
  {
    re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::setCapacity((_QWORD *)a1, v4);
    if ((*(_BYTE *)(a2 + 16) & 1) != 0)
      v7 = (const void *)(a2 + 24);
    else
      v7 = *(const void **)(a2 + 32);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_DWORD *)(a1 + 16);
    if ((v9 & 1) != 0)
    {
      v10 = (void *)(a1 + 24);
      if (!v8)
      {
LABEL_18:
        if ((v9 & 1) != 0)
          v11 = a1 + 24;
        else
          v11 = *(_QWORD *)(a1 + 32);
        v12 = (void *)(v11 + 12 * *(_QWORD *)(a1 + 8));
        if ((*(_DWORD *)(a2 + 16) & 1) != 0)
          v13 = a2 + 24;
        else
          v13 = *(_QWORD *)(a2 + 32);
        result = memcpy(v12, (const void *)(v13 + 12 * *(_QWORD *)(a1 + 8)), 12 * v4 - 12 * *(_QWORD *)(a1 + 8));
        goto LABEL_25;
      }
    }
    else
    {
      v10 = *(void **)(a1 + 32);
      if (!v8)
        goto LABEL_18;
    }
    memmove(v10, v7, 12 * v8);
    v9 = *(_DWORD *)(a1 + 16);
    goto LABEL_18;
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    v5 = (const void *)(a2 + 24);
  else
    v5 = *(const void **)(a2 + 32);
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    result = *(void **)(a1 + 32);
    if (!v4)
      goto LABEL_25;
    goto LABEL_15;
  }
  result = (void *)(a1 + 24);
  if (v4)
LABEL_15:
    result = memmove(result, v5, 12 * v4);
LABEL_25:
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) += 4;
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

_QWORD *re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (a2 && !v5)
  {
    result = (_QWORD *)re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::setCapacity(v4, a2);
    v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)result + 4);
  if ((v7 & 1) != 0)
    v8 = 4;
  else
    v8 = result[3];
  if (v8 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 4 || (v7 & 1) == 0))
    {
      if (a2 < 5)
      {
        v14 = result + 3;
        v15 = v4[4];
        if ((v7 & 1) != 0)
          v16 = v4 + 3;
        else
          v16 = (const void *)v4[4];
        memcpy(v14, v16, 12 * v9);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (is_mul_ok(a2, 0xCuLL))
      {
        v2 = 12 * a2;
        v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, 12 * a2, 4);
        if (v10)
        {
          v12 = v10;
          if ((v4[2] & 1) != 0)
            v13 = v4 + 3;
          else
            v13 = (const void *)v4[4];
          result = memcpy(v10, v13, 12 * v4[1]);
          v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
            v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      else
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 12, a2);
        _os_crash();
        __break(1u);
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
        re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::copy(a1, (uint64_t)a2);
      else
        *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) += 2;
    }
    else if (v4)
    {
      v5 = a2[1];
      *(_QWORD *)a1 = v4;
      re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::setCapacity((_QWORD *)a1, v5);
      *(_DWORD *)(a1 + 16) += 2;
      re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::copy(a1, (uint64_t)a2);
    }
  }
  return a1;
}

void *re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  const void *v5;
  void *result;
  const void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 >= *(_QWORD *)(a1 + 8))
  {
    re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::setCapacity((_QWORD *)a1, *(_QWORD *)(a2 + 8));
    if ((*(_BYTE *)(a2 + 16) & 1) != 0)
      v7 = (const void *)(a2 + 24);
    else
      v7 = *(const void **)(a2 + 32);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_DWORD *)(a1 + 16);
    if ((v9 & 1) != 0)
    {
      v10 = (void *)(a1 + 24);
      if (!v8)
      {
LABEL_18:
        if ((v9 & 1) != 0)
          v11 = a1 + 24;
        else
          v11 = *(_QWORD *)(a1 + 32);
        v12 = (void *)(v11 + 12 * *(_QWORD *)(a1 + 8));
        if ((*(_DWORD *)(a2 + 16) & 1) != 0)
          v13 = a2 + 24;
        else
          v13 = *(_QWORD *)(a2 + 32);
        result = memcpy(v12, (const void *)(v13 + 12 * *(_QWORD *)(a1 + 8)), 12 * v4 - 12 * *(_QWORD *)(a1 + 8));
        goto LABEL_25;
      }
    }
    else
    {
      v10 = *(void **)(a1 + 32);
      if (!v8)
        goto LABEL_18;
    }
    memmove(v10, v7, 12 * v8);
    v9 = *(_DWORD *)(a1 + 16);
    goto LABEL_18;
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    v5 = (const void *)(a2 + 24);
  else
    v5 = *(const void **)(a2 + 32);
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    result = *(void **)(a1 + 32);
    if (!v4)
      goto LABEL_25;
    goto LABEL_15;
  }
  result = (void *)(a1 + 24);
  if (v4)
LABEL_15:
    result = memmove(result, v5, 12 * v4);
LABEL_25:
  *(_QWORD *)(a1 + 8) = v4;
  return result;
}

_anonymous_namespace_ *re::DataArray<MetalHeap::TextureEntry>::allocBlock(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _anonymous_namespace_ *result;
  uint64_t v8;
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;

  v3 = 24 * *((unsigned int *)a1 + 11);
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v3, 0);
  if (!v4)
  {
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v3, *(_QWORD *)(*a1 + 8));
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  v6 = v4;
  v1 = 4 * *((unsigned int *)a1 + 11);
  result = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v1, 0);
  if (!result)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v1, *(_QWORD *)(*a1 + 8));
    result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    return result;
  }
  v9 = result;
  v11 = a1[1];
  v10 = a1[2];
  if (v10 >= v11)
  {
    v12 = v10 + 1;
    if (v11 < v10 + 1)
    {
      if (*a1)
      {
        v13 = 2 * v11;
        if (!v11)
          v13 = 8;
        if (v13 <= v12)
          v14 = v12;
        else
          v14 = v13;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v14);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v12);
        ++*((_DWORD *)a1 + 6);
      }
    }
    v10 = a1[2];
  }
  v15 = (uint64_t *)(a1[4] + 16 * v10);
  *v15 = v6;
  v15[1] = (uint64_t)v9;
  a1[2] = v10 + 1;
  ++*((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 12) = 0;
  return result;
}

uint64_t re::HashTable<CachingHeap::TextureCacheKey,re::DynamicArray<CachingHeap::TextureEntry>,CachingHeap::TextureCacheKeyHasher,CachingHeap::TextureCacheKeyEqualTo,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1;
  uint64_t v2;
  void *v3;

  v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    v2 = result;
    *(_DWORD *)(result + 8) = v1 & 0x7FFFFFFF;
    v3 = *(void **)(result + 16);
    if (v3)
    {

      *(_QWORD *)(v2 + 16) = 0;
    }
    return re::DynamicArray<CachingHeap::TextureEntry>::deinit(v2 + 32);
  }
  return result;
}

double re::HashTable<CachingHeap::TextureCacheKey,re::DynamicArray<CachingHeap::TextureEntry>,CachingHeap::TextureCacheKeyHasher,CachingHeap::TextureCacheKeyEqualTo,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<CachingHeap::TextureCacheKey,re::DynamicArray<CachingHeap::TextureEntry>,CachingHeap::TextureCacheKeyHasher,CachingHeap::TextureCacheKeyEqualTo,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 72;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

_QWORD *re::DynamicArray<CachingHeap::TextureEntry>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<CachingHeap::TextureEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x28uLL))
        {
          v2 = 40 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 40 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 40, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 40 * v9;
        v11 = v7;
        do
        {
          *v11 = *(_QWORD *)v8;
          *(_QWORD *)v8 = 0;
          *((_BYTE *)v11 + 8) = *(_BYTE *)(v8 + 8);
          v11[2] = *(_QWORD *)(v8 + 16);
          *(_OWORD *)(v11 + 3) = *(_OWORD *)(v8 + 24);
          *(_QWORD *)(v8 + 16) = 0;
          if (*(_QWORD *)v8)
          {

            *(_QWORD *)v8 = 0;
          }
          v8 += 40;
          v11 += 5;
          v10 -= 40;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t re::DynamicArray<CachingHeap::TextureEntry>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 40 * v4;
        do
        {
          *(_QWORD *)(v3 + 16) = 0;
          if (*(_QWORD *)v3)
          {

            *(_QWORD *)v3 = 0;
          }
          v3 += 40;
          v5 -= 40;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

__n128 std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,CachingHeap::TextureEntry *,CachingHeap::TextureEntry *,CachingHeap::TextureEntry *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __n128 result;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      NS::SharedPtr<MTL::Texture>::operator=((void **)a3, (void **)v5);
      *(_BYTE *)(a3 + 8) = *(_BYTE *)(v5 + 8);
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(v5 + 16);
      result = *(__n128 *)(v5 + 24);
      *(__n128 *)(a3 + 24) = result;
      v5 += 40;
      a3 += 40;
    }
    while (v5 != a2);
  }
  return result;
}

void re::HashTable<CachingHeap::TextureCacheKey,re::DynamicArray<CachingHeap::TextureEntry>,CachingHeap::TextureCacheKeyHasher,CachingHeap::TextureCacheKeyEqualTo,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  signed int v25;
  _BYTE v26[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v26, 0, 36);
      *(_QWORD *)&v26[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v26, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v26;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v26[8];
      *(_OWORD *)v26 = v5;
      *(_QWORD *)&v26[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v26[24];
      *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v26[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = v6 + 32;
        do
        {
          if ((*(_DWORD *)(v13 - 24) & 0x80000000) != 0)
          {
            v14 = *(_QWORD *)(v13 - 32);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<CachingHeap::TextureCacheKey,re::DynamicArray<CachingHeap::TextureEntry>,CachingHeap::TextureCacheKeyHasher,CachingHeap::TextureCacheKeyEqualTo,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 72 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 72 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 72 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v17) = v14;
            v21 = *(_QWORD *)(a1 + 16) + 72 * v17;
            *(_QWORD *)(v21 + 16) = *(id *)(v13 - 16);
            *(_BYTE *)(v21 + 24) = *(_BYTE *)(v13 - 8);
            v22 = *(_QWORD *)(a1 + 16) + 72 * v17;
            *(_QWORD *)(v22 + 64) = 0;
            *(_DWORD *)(v22 + 56) = 0;
            *(_QWORD *)(v22 + 40) = 0;
            *(_QWORD *)(v22 + 48) = 0;
            *(_QWORD *)(v22 + 32) = 0;
            *(_QWORD *)(v22 + 32) = *(_QWORD *)v13;
            *(_QWORD *)v13 = 0;
            *(_QWORD *)(v22 + 40) = *(_QWORD *)(v13 + 8);
            *(_QWORD *)(v13 + 8) = 0;
            v23 = *(_QWORD *)(v22 + 48);
            *(_QWORD *)(v22 + 48) = *(_QWORD *)(v13 + 16);
            *(_QWORD *)(v13 + 16) = v23;
            v24 = *(_QWORD *)(v22 + 64);
            *(_QWORD *)(v22 + 64) = *(_QWORD *)(v13 + 32);
            *(_QWORD *)(v13 + 32) = v24;
            ++*(_DWORD *)(v13 + 24);
            ++*(_DWORD *)(v22 + 56);
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 72;
          --v10;
        }
        while (v10);
      }
      re::HashTable<CachingHeap::TextureCacheKey,re::DynamicArray<CachingHeap::TextureEntry>,CachingHeap::TextureCacheKeyHasher,CachingHeap::TextureCacheKeyEqualTo,true,false>::deinit((uint64_t *)v26);
    }
  }
  else
  {
    if (a2)
      v25 = a2;
    else
      v25 = 3;
  }
}

double re::HashTable<unsigned long long,re::RenderGraphResourceAllocationManager::HeapGroupHierarchy,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        v5 = a1[2];
        v6 = v5 + v3;
        v7 = *(_DWORD *)(v5 + v3 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapGroup>::deinit(v6 + 80);
          v10 = *(_QWORD *)(v6 + 32);
          v9 = (_QWORD *)(v6 + 32);
          v8 = v10;
          if (v10)
          {
            v11 = v5 + v3;
            if (*(_QWORD *)(v11 + 64))
              (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
            *(_QWORD *)(v11 + 64) = 0;
            v9[1] = 0;
            v9[2] = 0;
            *v9 = 0;
            ++*(_DWORD *)(v11 + 56);
          }
        }
        ++v4;
        v3 += 120;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 184 * v4;
        v6 = v3 + 80;
        do
        {
          *(_QWORD *)(v6 + 72) = 0;
          re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v6);
          re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v6 - 72);
          v6 += 184;
          v5 -= 184;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapGroup>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapGroup>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = &v8[6 * v9];
        v11 = v7;
        do
        {
          v12 = *v8;
          v11[5] = 0;
          *v11 = v12;
          v11[1] = 0;
          *((_DWORD *)v11 + 8) = 0;
          v11[2] = 0;
          v11[3] = 0;
          v13 = v8[1];
          v14 = v8[2];
          v15 = (uint64_t)(v8 + 1);
          v11[1] = v13;
          v11[2] = v14;
          *(_QWORD *)v15 = 0;
          *(_QWORD *)(v15 + 8) = 0;
          v16 = v11[3];
          v11[3] = *(_QWORD *)(v15 + 16);
          *(_QWORD *)(v15 + 16) = v16;
          v17 = v11[5];
          v11[5] = *(_QWORD *)(v15 + 32);
          *(_QWORD *)(v15 + 32) = v17;
          ++*(_DWORD *)(v15 + 24);
          ++*((_DWORD *)v11 + 8);
          re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::deinit(v15);
          v8 = (uint64_t *)(v15 + 40);
          v11 += 6;
        }
        while (v8 != v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderGraphResourceAllocationManager::HeapAndFences>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x38uLL))
        {
          v2 = 56 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 56 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 56, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 56 * v9;
        v11 = v8 + 24;
        v12 = v7;
        do
        {
          v13 = *(_QWORD *)(v11 - 24);
          v12[5] = 0;
          *v12 = v13;
          v12[1] = 0;
          v12[2] = 0;
          v12[3] = 0;
          *((_DWORD *)v12 + 8) = 0;
          v14 = *(_QWORD *)(v11 - 8);
          v12[1] = *(_QWORD *)(v11 - 16);
          *(_QWORD *)(v11 - 16) = 0;
          v12[2] = v14;
          *(_QWORD *)(v11 - 8) = 0;
          v15 = v12[3];
          v12[3] = *(_QWORD *)v11;
          *(_QWORD *)v11 = v15;
          v16 = v12[5];
          v12[5] = *(_QWORD *)(v11 + 16);
          *(_QWORD *)(v11 + 16) = v16;
          ++*(_DWORD *)(v11 + 8);
          ++*((_DWORD *)v12 + 8);
          *((_WORD *)v12 + 24) = *(_WORD *)(v11 + 24);
          v17 = *(_QWORD *)(v11 - 16);
          if (v17)
          {
            if (*(_QWORD *)(v11 + 16))
              (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
            *(_QWORD *)(v11 + 16) = 0;
            *(_QWORD *)(v11 - 8) = 0;
            *(_QWORD *)v11 = 0;
            *(_QWORD *)(v11 - 16) = 0;
            ++*(_DWORD *)(v11 + 8);
          }
          v11 += 56;
          v12 += 7;
          v10 -= 56;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xB8uLL))
        {
          v2 = 184 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 184 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 184, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 184 * v9;
        v11 = (uint64_t)(v7 + 10);
        v12 = v8 + 80;
        do
        {
          *(_QWORD *)(v11 - 80) = *(_QWORD *)(v12 - 80);
          re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::DynamicOverflowArray(v11 - 72, v12 - 72);
          re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::DynamicOverflowArray(v11, v12);
          *(_QWORD *)(v11 + 72) = *(_QWORD *)(v12 + 72);
          v13 = *(_OWORD *)(v12 + 80);
          *(_QWORD *)(v11 + 96) = *(_QWORD *)(v12 + 96);
          *(_OWORD *)(v11 + 80) = v13;
          *(_QWORD *)(v12 + 72) = 0;
          re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v12);
          re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v12 - 72);
          v11 += 184;
          v14 = v12 + 104;
          v12 += 184;
        }
        while (v14 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::DynamicOverflowArray(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
      re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::move(a1, a2);
    }
    else
    {
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_DWORD *)(a2 + 16) += 2;
      *(_DWORD *)(a1 + 16) += 2;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 16) = 3;
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap((uint64_t *)a1, (uint64_t *)a2);
  }
  return a1;
}

_QWORD *re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderGraphResourceAllocationManager::EncoderAndFence>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 48 * v9;
        v11 = (__int128 *)(v8 + 8);
        v12 = v7;
        do
        {
          v13 = *((_QWORD *)v11 - 1);
          *((_QWORD *)v11 - 1) = 0;
          *v12 = v13;
          v14 = *v11;
          *(_QWORD *)v11 = 0;
          *(_OWORD *)(v12 + 1) = v14;
          v15 = *((_QWORD *)v11 + 2);
          *((_QWORD *)v11 + 1) = 0;
          *((_QWORD *)v11 + 2) = 0;
          v12[3] = v15;
          v16 = *((_QWORD *)v11 + 3);
          *((_DWORD *)v12 + 10) = *((_DWORD *)v11 + 8);
          v12[4] = v16;

          re::mtl::RenderCommandEncoder::~RenderCommandEncoder((re::mtl::RenderCommandEncoder *)v11);
          v17 = (uint64_t)v11 + 40;
          v11 += 3;
          v12 += 6;
        }
        while (v17 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::RenderGraphResourceAllocationManager::TextureIndexAndStage>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::DynamicOverflowArray<re::RenderGraphResourceAllocationManager::FenceIndex,4ul>::indexOf(uint64_t result, uint64_t a2, _DWORD *a3)
{
  int v3;
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_DWORD *)(a2 + 16);
  if ((v3 & 1) != 0)
    v4 = (_DWORD *)(a2 + 24);
  else
    v4 = *(_DWORD **)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    v6 = &v4[3 * v5];
    v7 = 12 * v5;
    while (*v4 != *a3 || v4[1] != a3[1] || v4[2] != a3[2])
    {
      v4 += 3;
      v7 -= 12;
      if (!v7)
      {
        v4 = v6;
        break;
      }
    }
  }
  if ((v3 & 1) != 0)
    v8 = a2 + 24;
  else
    v8 = *(_QWORD *)(a2 + 32);
  if (v4 == (_DWORD *)(v8 + 12 * v5))
  {
    *(_BYTE *)result = 0;
  }
  else
  {
    *(_BYTE *)result = 1;
    *(_QWORD *)(result + 8) = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - v8) >> 2);
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::RenderGraphResourceAllocationManager::HeapGroupHierarchy,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v32[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v32, 0, 36);
          *(_QWORD *)&v32[36] = 0x7FFFFFFFLL;
          re::HashTable<re::DynamicString,re::MeshCompileOptions,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v32, v13, v12);
          v15 = *(_OWORD *)v32;
          *(_OWORD *)v32 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v32[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v32[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v32[24];
          *(_OWORD *)&v32[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v32[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::RenderGraphResourceAllocationManager::HeapGroupHierarchy,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 120;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::RenderGraphResourceAllocationManager::HeapGroupHierarchy,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v32);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 120 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 120 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 120 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 120 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 120 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 120 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 120 * v9 + 16) = *a4;
  v25 = *(_QWORD *)(a1 + 16) + 120 * v9;
  v26 = *a5;
  *(_QWORD *)(v25 + 64) = 0;
  *(_QWORD *)(v25 + 40) = 0;
  *(_QWORD *)(v25 + 48) = 0;
  *(_QWORD *)(v25 + 24) = v26;
  *(_QWORD *)(v25 + 32) = 0;
  *(_DWORD *)(v25 + 56) = 0;
  *(_QWORD *)(v25 + 32) = a5[1];
  a5[1] = 0;
  *(_QWORD *)(v25 + 40) = a5[2];
  a5[2] = 0;
  v27 = *(_QWORD *)(v25 + 48);
  *(_QWORD *)(v25 + 48) = a5[3];
  a5[3] = v27;
  v28 = *(_QWORD *)(v25 + 64);
  *(_QWORD *)(v25 + 64) = a5[5];
  a5[5] = v28;
  ++*((_DWORD *)a5 + 8);
  ++*(_DWORD *)(v25 + 56);
  *(_WORD *)(v25 + 72) = *((_WORD *)a5 + 24);
  *(_QWORD *)(v25 + 112) = 0;
  *(_DWORD *)(v25 + 104) = 0;
  *(_QWORD *)(v25 + 88) = 0;
  *(_QWORD *)(v25 + 96) = 0;
  *(_QWORD *)(v25 + 80) = 0;
  *(_QWORD *)(v25 + 80) = a5[7];
  a5[7] = 0;
  *(_QWORD *)(v25 + 88) = a5[8];
  a5[8] = 0;
  v29 = *(_QWORD *)(v25 + 96);
  *(_QWORD *)(v25 + 96) = a5[9];
  a5[9] = v29;
  v30 = *(_QWORD *)(v25 + 112);
  *(_QWORD *)(v25 + 112) = a5[11];
  a5[11] = v30;
  ++*((_DWORD *)a5 + 20);
  ++*(_DWORD *)(v25 + 104);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::FixedOccupancyGrid::settingOccupied(uint64_t this, int a2, int a3, unsigned int a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = (a2 + *(_DWORD *)(this + 64) * a3);
  v5 = 1;
  if ((a4 & 0x3F) > 64 - (unint64_t)(((_BYTE)a2 + *(_BYTE *)(this + 64) * (_BYTE)a3) & 0x3F))
    v5 = 2;
  v6 = v5 + ((unint64_t)a4 >> 6);
  do
  {
    v7 = 64 - (v4 & 0x3F);
    if (v7 >= a4)
      v7 = a4;
    v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7 << v4;
    v9 = v4 >> 3;
    v4 += v7;
    a4 -= v7;
    *(_QWORD *)(this + (v9 & 0x1FFFFFFFFFFFFFF8)) |= v8;
    --v6;
  }
  while (v6);
  return this;
}

uint64_t re::FixedOccupancyGrid::clearingOccupied(uint64_t this, int a2, int a3, unsigned int a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = (a2 + *(_DWORD *)(this + 64) * a3);
  v5 = 1;
  if ((a4 & 0x3F) > 64 - (unint64_t)(((_BYTE)a2 + *(_BYTE *)(this + 64) * (_BYTE)a3) & 0x3F))
    v5 = 2;
  v6 = v5 + ((unint64_t)a4 >> 6);
  do
  {
    v7 = 64 - (v4 & 0x3F);
    if (v7 >= a4)
      v7 = a4;
    v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7 << v4;
    v9 = v4 >> 3;
    v4 += v7;
    a4 -= v7;
    *(_QWORD *)(this + (v9 & 0x1FFFFFFFFFFFFFF8)) &= ~v8;
    --v6;
  }
  while (v6);
  return this;
}

uint64_t re::FixedOccupancyGrid::setOccupied(uint64_t this, uint64_t *a2, int a3)
{
  float32x4_t v3;
  int16x4_t v4;
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float v10;
  int v11;
  float v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _BOOL4 v16;
  unsigned int v17;
  unsigned int v18;

  v3.i64[0] = a2[2];
  v3.i64[1] = *a2;
  v4.i32[0] = vmovn_s32(vcgeq_f32((float32x4_t)xmmword_22610BC10, v3)).u32[0];
  v4.i32[1] = vmovn_s32(vcgeq_f32(v3, (float32x4_t)xmmword_22610BC10)).i32[1];
  if ((vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(v4, 0xFuLL))) & 1) == 0)
  {
    v5 = this;
    v6 = *(float32x4_t *)a2;
    v7 = *((float32x4_t *)a2 + 1);
    v6.i32[3] = 0;
    v8 = vmaxnmq_f32(v6, (float32x4_t)0);
    v8.i32[3] = 0;
    v7.i32[3] = 0;
    v8.i64[0] = vminnmq_f32(v8, (float32x4_t)xmmword_2260EDC60).u64[0];
    v9 = vmaxnmq_f32(v7, (float32x4_t)0);
    v9.i32[3] = 0;
    v9.i64[0] = vminnmq_f32(v9, (float32x4_t)xmmword_2260EDC60).u64[0];
    v10 = (float)*(unsigned int *)(this + 64);
    v11 = (float)(v10 * v8.f32[0]);
    v12 = (float)*(unsigned int *)(this + 68);
    v13 = vmuls_lane_f32(v12, *(float32x2_t *)v8.f32, 1);
    v14 = vcvtps_u32_f32(v10 * v9.f32[0]);
    v15 = vcvtps_u32_f32(vmuls_lane_f32(v12, *(float32x2_t *)v9.f32, 1));
    v16 = *(_BYTE *)(this + 72) == 0;
    if (a3)
      v16 = a3 == 2;
    if (v16)
    {
      if (v13 < v15)
      {
        v17 = v14 - v11;
        do
          this = re::FixedOccupancyGrid::settingOccupied(v5, v11, v13++, v17);
        while (v15 != v13);
      }
    }
    else if (*(_BYTE *)(this + 73) == 1 && v13 < v15)
    {
      v18 = v14 - v11;
      do
        this = re::FixedOccupancyGrid::clearingOccupied(v5, v11, v13++, v18);
      while (v15 != v13);
    }
  }
  return this;
}

void re::RenderGraphNoClearProcessor::process(re::RenderGraphNoClearProcessor *this, re::RenderGraphCompiled *a2)
{
  unint64_t v2;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;

  v2 = *((_QWORD *)a2 + 44);
  if (v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v5 = *((_QWORD *)a2 + 46);
      v6 = v5 + 192 * i;
      v8 = *(_QWORD *)(v6 + 56);
      v7 = (unint64_t *)(v6 + 56);
      if (v8)
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v31 = 0;
        v28 = 0;
        v29 = 0;
        v27 = 0;
        v30 = 0;
        v24 = v5;
        v25 = i;
        v14 = (_QWORD *)(v5 + 192 * i + 72);
        do
        {
          v15 = *v14 + v9;
          v26 = 0;
          v16 = re::RenderGraphNoClearProcessor::process(re::RenderGraphCompiled &)::$_0::operator()((uint64_t)a2, (int *)(v15 + 4), *(_DWORD *)(v15 + 52), &v26);
          if (v16)
          {
            if (v12 >= v28)
            {
              v17 = v12 + 1;
              if (v28 < v17)
              {
                if (v27)
                {
                  v18 = 8;
                  if (v28)
                    v18 = 2 * v28;
                  if (v18 <= v17)
                    v19 = v17;
                  else
                    v19 = v18;
                  re::DynamicArray<float *>::setCapacity(&v27, v19);
                  v10 = v30;
                }
                else
                {
                  re::DynamicArray<float *>::setCapacity(&v27, v17);
                  v10 = v30 + 1;
                }
              }
              v12 = v29;
              v11 = v31;
            }
            *(_QWORD *)(v11 + 8 * v12++) = v15;
            v29 = v12;
            v30 = ++v10;
          }
          ++v13;
          v9 += 64;
        }
        while (*v7 > v13);
        if (*v7)
        {
          v20 = 0;
          v21 = 0;
          do
          {
            v22 = *v14 + v20;
            v26 = 1;
            if (re::RenderGraphNoClearProcessor::process(re::RenderGraphCompiled &)::$_0::operator()((uint64_t)a2, (int *)(v22 + 4), *(_DWORD *)(v22 + 52), &v26))
            {
              *(_BYTE *)(v22 + 48) = 1;
            }
            ++v21;
            v20 += 64;
          }
          while (*v7 > v21);
        }
        v23 = v27;
        i = v25;
        *(_BYTE *)(v24 + 192 * v25 + 186) = v12 != 0;
        if (v23)
        {
          if (v31)
            (*(void (**)(uint64_t *))(*v23 + 40))(v23);
        }
        v2 = *((_QWORD *)a2 + 44);
      }
    }
  }
}

BOOL re::RenderGraphNoClearProcessor::process(re::RenderGraphCompiled &)::$_0::operator()(uint64_t a1, int *a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  int v11;
  _OWORD v12[5];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 296);
  if (*(_QWORD *)(v4 + 16) <= (unint64_t)a3)
  {
    memset(v12, 0, sizeof(v12));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v5 = *(_QWORD *)(v4 + 32);
  if (*(_DWORD *)(v5 + 48 * a3))
    return 0;
  v8 = v5 + 48 * a3;
  *(_QWORD *)&v12[0] = *(_QWORD *)(v8 + 8) >> 1;
  *((_QWORD *)&v12[0] + 1) = *(_QWORD *)(v8 + 24);
  v9 = re::RenderGraphCompiled::targetDescription(a1, (uint64_t)v12);
  result = 0;
  v11 = *a2;
  if (*a2 > 8 || ((1 << v11) & 0x1EE) == 0)
    return result;
  if (*(_DWORD *)(v9 + 56) != 2)
    return 0;
  if (*a4)
    *(_DWORD *)(v9 + 56) = 0;
  return v11 != 5;
}

void re::RenderGraphNoClearProcessor::~RenderGraphNoClearProcessor(re::RenderGraphNoClearProcessor *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::DeformationBufferAllocator::init(re::DeformationBufferAllocator *this, unint64_t a2)
{
  _anonymous_namespace_ *v4;

}

BOOL re::DeformationBufferAllocator::updateAllocationDataFrameForInputHash(uint64_t a1, _QWORD *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)(a1 + 8) <= (unint64_t)a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(v4 + 72 * a3 + 8);
  if (v5 == a4)
    *(_QWORD *)(v4 + 72 * a3) = *a2;
  return v5 == a4;
}

void re::DeformationBufferAllocator::resetAllocationData(_QWORD *a1, _QWORD *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t i;
  uint64_t v36;
  void *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if (a1[1] <= (unint64_t)a3)
  {
LABEL_33:
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v43 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_34:
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v43 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_35;
  }
  v5 = a1[2];
  v6 = (_QWORD *)(v5 + 72 * a3);
  v7 = v6 + 7;
  if (!v6[7])
  {
    *v6 = *a2;
    *(_QWORD *)(v5 + 72 * a3 + 8) = a4;
    goto LABEL_31;
  }
  if (a1[4] <= (unint64_t)a3)
    goto LABEL_34;
  v8 = a1[5];
  v9 = v8 + 56 * a3;
  v10 = *(_QWORD *)(v9 + 40);
  v11 = *(_QWORD *)(v9 + 8);
  if (v10 + 1 > 4 * v11)
  {
    re::BucketArray<re::DeformationBufferAllocator::DeformationStackAllocation,4ul>::setBucketsCapacity((_QWORD *)(v8 + 56 * a3), (v10 + 4) >> 2);
    v6 = (_QWORD *)(v5 + 72 * a3);
    v11 = *(_QWORD *)(v9 + 8);
  }
  if (v11 <= v10 >> 2)
  {
LABEL_35:
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v43 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v12 = v6 + 2;
  if ((*(_BYTE *)(v9 + 16) & 1) != 0)
    v13 = v9 + 24;
  else
    v13 = *(_QWORD *)(v9 + 32);
  v14 = *(_QWORD *)(v13 + 8 * (v10 >> 2));
  v15 = v10 & 3;
  ++*(_QWORD *)(v9 + 40);
  ++*(_DWORD *)(v8 + 56 * a3 + 48);
  v16 = v14 + 72 * v15;
  *(_OWORD *)v16 = *(_OWORD *)v6;
  *(_QWORD *)(v16 + 24) = 0;
  *(_DWORD *)(v16 + 32) = 1;
  v17 = v16;
  *(_DWORD *)(v16 + 64) = 0;
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = 0;
  *(_QWORD *)(v16 + 16) = 0;
  v18 = v16 + 16;
  *(_QWORD *)(v17 + 40) = 0;
  v19 = v17 + 40;
  if (*v12)
  {
    v38 = v6;
    v39 = v5;
    re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::init(v18, *v12, v6[3]);
    v20 = *v7;
    v21 = v14 + 72 * v15;
    v23 = *(_QWORD *)(v21 + 56);
    v22 = (unint64_t *)(v21 + 56);
    v40 = *v7;
    if (*v7 < v23)
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::BucketArrayIterator<re::DeformationBufferAllocator::VertexBufferAllocation,re::DeformationBufferAllocator::VertexBufferAllocation const&,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul> const&,true>,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::BucketArrayIterator<re::DeformationBufferAllocator::VertexBufferAllocation,re::DeformationBufferAllocator::VertexBufferAllocation const&,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul> const&,true>,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::BucketArrayIterator<re::DeformationBufferAllocator::VertexBufferAllocation,re::DeformationBufferAllocator::VertexBufferAllocation&,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>&,true>>((void **)&v43, (uint64_t)v12, 0, (uint64_t)v12, v20, v18, 0);
      if (v20 != *v22)
      {
        v24 = v40;
        do
        {
          v25 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v18, v24);
          v26 = *(void **)(v25 + 24);
          if (v26)
          {

            *(_QWORD *)(v25 + 24) = 0;
          }
          ++v24;
        }
        while (v24 != *v22);
      }
      goto LABEL_25;
    }
    re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::setBucketsCapacity((_QWORD *)v18, (v20 + 3) >> 2);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::BucketArrayIterator<re::DeformationBufferAllocator::VertexBufferAllocation,re::DeformationBufferAllocator::VertexBufferAllocation const&,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul> const&,true>,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::BucketArrayIterator<re::DeformationBufferAllocator::VertexBufferAllocation,re::DeformationBufferAllocator::VertexBufferAllocation const&,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul> const&,true>,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::BucketArrayIterator<re::DeformationBufferAllocator::VertexBufferAllocation,re::DeformationBufferAllocator::VertexBufferAllocation&,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>&,true>>((void **)&v43, (uint64_t)v12, 0, (uint64_t)v12, *v22, v18, 0);
    v27 = v20 - *v22;
    if (v20 == *v22)
    {
LABEL_25:
      *v22 = v40;
      v6 = v38;
      v5 = v39;
      goto LABEL_26;
    }
    v28 = 0;
    while (1)
    {
      v29 = v28 + *v22;
      if (*(_QWORD *)(v18 + 8) <= v29 >> 2)
        break;
      v30 = v19;
      if ((*(_BYTE *)(v18 + 16) & 1) == 0)
        v30 = *(_QWORD *)(v18 + 32);
      v31 = *(_QWORD *)(v30 + 8 * (v29 >> 2)) + 40 * (v29 & 3);
      v32 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)v12, v29);
      *(_BYTE *)v31 = *(_BYTE *)v32;
      v33 = *(_DWORD *)(v32 + 4);
      *(_WORD *)(v31 + 8) = *(_WORD *)(v32 + 8);
      *(_DWORD *)(v31 + 4) = v33;
      *(_DWORD *)(v31 + 12) = *(_DWORD *)(v32 + 12);
      *(_BYTE *)(v31 + 16) = *(_BYTE *)(v32 + 16);
      *(_QWORD *)(v31 + 24) = *(id *)(v32 + 24);
      *(_QWORD *)(v31 + 32) = *(_QWORD *)(v32 + 32);
      if (v27 == ++v28)
        goto LABEL_25;
    }
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v43 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_33;
  }
LABEL_26:
  v34 = *v7;
  *v6 = *a2;
  *(_QWORD *)(v5 + 72 * a3 + 8) = a4;
  if (v34)
  {
    for (i = 0; i != v34; ++i)
    {
      v36 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)v12, i);
      v37 = *(void **)(v36 + 24);
      if (v37)
      {

        *(_QWORD *)(v36 + 24) = 0;
      }
    }
  }
LABEL_31:
  *v7 = 0;
  ++*(_DWORD *)(v5 + 72 * a3 + 64);
}

unint64_t re::DeformationBufferAllocator::alloc(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _DWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  id v33;
  id v34;
  uint64_t v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  if (a1[1] <= (unint64_t)a5)
  {
LABEL_40:
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_41;
  }
  if (a1[4] <= (unint64_t)a5)
  {
LABEL_41:
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_42:
    re::internal::assertLog((re::internal *)4, v22, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || allocator() == other.allocator()", "operator=", 526);
    _os_crash();
    __break(1u);
  }
  v7 = a1[2] + 72 * a5;
  v44 = v7 + 16;
  v8 = *(unsigned int *)(v7 + 56);
  v9 = a1[5];
  v10 = v9 + 56 * a5;
  v11 = (unint64_t *)(v10 + 40);
  if (*(_QWORD *)(v10 + 40))
  {
    v12 = 0;
    v13 = (_DWORD *)(v9 + 56 * a5 + 48);
    do
    {
      v14 = (_QWORD *)re::BucketArray<re::DeformationBufferAllocator::DeformationStackAllocation,4ul>::operator[](v10, v12);
      if ((*v14 & 0xFFFFFFFFFFFFFFFuLL) <= (*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFuLL))
      {
        if (v8 < v14[7])
        {
          v17 = (uint64_t)(v14 + 2);
          if (*(unsigned __int8 *)re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[]((uint64_t)(v14 + 2), v8) == a3)
          {
            v18 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v17, v8);
            if (re::VertexBufferFormat::operator==((unsigned __int16 *)(v18 + 4), (unsigned __int16 *)a4)
              && *(_DWORD *)(re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v17, v8)+ 36) == a6)
            {
              v40 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v17, v8);
              v41 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::addUninitialized(v44);
              *(_BYTE *)v41 = *(_BYTE *)v40;
              v42 = *(_DWORD *)(v40 + 4);
              *(_WORD *)(v41 + 8) = *(_WORD *)(v40 + 8);
              *(_DWORD *)(v41 + 4) = v42;
              *(_DWORD *)(v41 + 12) = *(_DWORD *)(v40 + 12);
              *(_BYTE *)(v41 + 16) = *(_BYTE *)(v40 + 16);
              *(_QWORD *)(v41 + 24) = *(id *)(v40 + 24);
              *(_QWORD *)(v41 + 32) = *(_QWORD *)(v40 + 32);
              v43 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](v17, v8);
              *(_BYTE *)v43 = 0;
              *(_DWORD *)(v43 + 4) = 0x10000;
              *(_WORD *)(v43 + 8) = 256;

              *(_QWORD *)(v43 + 24) = 0;
              *(_QWORD *)(v43 + 32) = 0;
              return v8;
            }
          }
        }
        v19 = *v11;
        if (*v11 <= v12)
        {
          re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "removeAt", 848, v12, v19, v44);
          _os_crash();
          __break(1u);
          goto LABEL_40;
        }
        if (v19 - 1 > v12)
        {
          v20 = re::BucketArray<re::DeformationBufferAllocator::DeformationStackAllocation,4ul>::operator[](v10, v19 - 1);
          v21 = re::BucketArray<re::DeformationBufferAllocator::DeformationStackAllocation,4ul>::operator[](v10, v12);
          *(_OWORD *)v21 = *(_OWORD *)v20;
          if (v21 != v20)
          {
            v23 = v21;
            v24 = (uint64_t *)(v21 + 16);
            v25 = (_QWORD *)(v20 + 16);
            v26 = *(_QWORD *)(v21 + 16);
            if (v26)
            {
              if (*v25 && v26 != *v25)
                goto LABEL_42;
            }
            v48 = 0uLL;
            LODWORD(v49) = 1;
            *((_QWORD *)&v49 + 1) = 0;
            *(_QWORD *)&v50 = 0;
            v28 = *(_DWORD *)(v21 + 32);
            if ((v28 & 1) != 0)
            {
              if (*(_QWORD *)(v21 + 24))
              {
                re::DynamicOverflowArray<re::DeformationBufferAllocator::VertexBufferAllocation *,2ul>::move((uint64_t)&v48, (uint64_t)v24);
              }
              else
              {
                *(_QWORD *)&v48 = v26;
                *(_DWORD *)(v21 + 32) = v28 + 2;
                LODWORD(v49) = 3;
              }
            }
            else
            {
              LODWORD(v49) = 3;
              re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap((uint64_t *)&v48, v24);
            }
            re::DynamicOverflowArray<re::DeformationBufferAllocator::VertexBufferAllocation *,2ul>::operator=((uint64_t)v24, v20 + 16);
            re::DynamicOverflowArray<re::DeformationBufferAllocator::VertexBufferAllocation *,2ul>::operator=(v20 + 16, (uint64_t)&v48);
            if ((_QWORD)v48 && (v49 & 1) == 0)
              (*(void (**)(void))(*(_QWORD *)v48 + 40))();
            v29 = *(_QWORD *)(v23 + 56);
            *(_QWORD *)(v23 + 56) = *(_QWORD *)(v20 + 56);
            *(_QWORD *)(v20 + 56) = v29;
            ++*(_DWORD *)(v23 + 64);
            ++*(_DWORD *)(v20 + 64);
          }
        }
        v30 = re::BucketArray<re::DeformationBufferAllocator::DeformationStackAllocation,4ul>::operator[](v10, *v11 - 1)
            + 16;
        re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::deinit(v30);
        re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v30);
        v16 = *v11 - 1;
        *v11 = v16;
        ++*v13;
      }
      else
      {
        ++v12;
        v16 = *v11;
      }
    }
    while (v12 < v16);
  }
  if (a6)
  {
    *(_DWORD *)((char *)&v48 + 3) = *(_DWORD *)a4;
    *(_WORD *)((char *)&v48 + 7) = *(_WORD *)(a4 + 4);
    v31 = *(_DWORD *)(a4 + 8);
    v32 = *(_BYTE *)(a4 + 12);
    v33 = objc_msgSend(**(id **)(a2 + 16), sel_newBufferWithLength_options_, a6, 0);
    v34 = v33;
    v35 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::addUninitialized(v44);
    *(_BYTE *)v35 = a3;
    *(_DWORD *)(v35 + 4) = *(_DWORD *)((char *)&v48 + 3);
    *(_WORD *)(v35 + 8) = *(_WORD *)((char *)&v48 + 7);
    *(_DWORD *)(v35 + 12) = v31;
    *(_BYTE *)(v35 + 16) = v32;
    *(_QWORD *)(v35 + 24) = v34;
    *(_QWORD *)(v35 + 32) = a6 << 32;
    if (v34)

    if (v33)
  }
  else
  {
    *(_DWORD *)((char *)&v48 + 3) = *(_DWORD *)a4;
    *(_WORD *)((char *)&v48 + 7) = *(_WORD *)(a4 + 4);
    v36 = *(_DWORD *)(a4 + 8);
    v37 = *(_BYTE *)(a4 + 12);
    v38 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::addUninitialized(v44);
    *(_BYTE *)v38 = a3;
    *(_DWORD *)(v38 + 4) = *(_DWORD *)((char *)&v48 + 3);
    *(_WORD *)(v38 + 8) = *(_WORD *)((char *)&v48 + 7);
    *(_DWORD *)(v38 + 12) = v36;
    *(_BYTE *)(v38 + 16) = v37;
    *(_QWORD *)(v38 + 24) = 0;
    *(_QWORD *)(v38 + 32) = 0;
  }
  return v8;
}

uint64_t re::FixedArray<re::DeformationBufferAllocator::DeformationStackAllocation>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
    return result;
  if (a3 >= 0x38E38E38E38E38FLL)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 72, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 72 * a3, 8);
  *(_QWORD *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_QWORD *)result = 0xFFFFFFFFFFFFFFFLL;
      *(_OWORD *)(result + 24) = 0uLL;
      *(_OWORD *)(result + 40) = 0uLL;
      *(_OWORD *)(result + 56) = 0uLL;
      *(_OWORD *)(result + 8) = 0uLL;
      *(_DWORD *)(result + 32) = 1;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 48) = 0;
      *(_DWORD *)(result + 64) = 0;
      *(_QWORD *)(result + 56) = 0;
      result += 72;
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)result = 0xFFFFFFFFFFFFFFFLL;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 8) = 0u;
  *(_DWORD *)(result + 32) = 1;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 56) = 0;
  return result;
}

uint64_t re::FixedArray<re::BucketArray<re::DeformationBufferAllocator::DeformationStackAllocation,4ul>>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
    return result;
  if (a3 >= 0x492492492492493)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 56, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 56 * a3, 8);
  *(_QWORD *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_OWORD *)(result + 16) = 0uLL;
      *(_OWORD *)(result + 32) = 0uLL;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 48) = 0;
      *(_OWORD *)result = 0uLL;
      *(_DWORD *)(result + 16) = 1;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_DWORD *)(result + 48) = 0;
      result += 56;
      --v6;
    }
    while (v6);
  }
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_OWORD *)result = 0u;
  *(_DWORD *)(result + 16) = 1;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

_QWORD *re::BucketArray<re::DeformationBufferAllocator::DeformationStackAllocation,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 288, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<re::DeformationBufferAllocator::DeformationStackAllocation *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<re::DeformationBufferAllocator::DeformationStackAllocation *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<re::DeformationBufferAllocator::DeformationStackAllocation *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::DeformationBufferAllocator::DeformationStackAllocation,4ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

_QWORD *re::DynamicOverflowArray<re::DeformationBufferAllocator::DeformationStackAllocation *,2ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (a2 && !v5)
  {
    result = (_QWORD *)re::DynamicOverflowArray<re::DeformationBufferAllocator::DeformationStackAllocation *,2ul>::setCapacity(v4, a2);
    v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)result + 4);
  if ((v7 & 1) != 0)
    v8 = 2;
  else
    v8 = result[3];
  if (v8 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 2 || (v7 & 1) == 0))
    {
      if (a2 < 3)
      {
        v14 = result + 3;
        v15 = v4[4];
        if ((v7 & 1) != 0)
          v16 = v4 + 3;
        else
          v16 = (const void *)v4[4];
        memcpy(v14, v16, 8 * v9);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 8 * a2;
        v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          v12 = v10;
          if ((v4[2] & 1) != 0)
            v13 = v4 + 3;
          else
            v13 = (const void *)v4[4];
          result = memcpy(v10, v13, 8 * v4[1]);
          v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
            v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<re::DeformationBufferAllocator::DeformationStackAllocation *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 160, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<re::DeformationBufferAllocator::DeformationStackAllocation *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<re::DeformationBufferAllocator::DeformationStackAllocation *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::BucketArrayIterator<re::DeformationBufferAllocator::VertexBufferAllocation,re::DeformationBufferAllocator::VertexBufferAllocation const&,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul> const&,true>,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::BucketArrayIterator<re::DeformationBufferAllocator::VertexBufferAllocation,re::DeformationBufferAllocator::VertexBufferAllocation const&,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul> const&,true>,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::BucketArrayIterator<re::DeformationBufferAllocator::VertexBufferAllocation,re::DeformationBufferAllocator::VertexBufferAllocation&,re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>&,true>>(void **result, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v12 = result;
  if (a2 != a4 || a3 != a5)
  {
    v13 = a5 - 1;
    do
    {
      v14 = a3;
      v15 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](a2, a3);
      v16 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](a6, a7);
      v17 = v16;
      *(_BYTE *)v16 = *(_BYTE *)v15;
      v18 = *(_DWORD *)(v15 + 4);
      *(_WORD *)(v16 + 8) = *(_WORD *)(v15 + 8);
      *(_DWORD *)(v16 + 4) = v18;
      if (v16 != v15)
      {
        *(_DWORD *)(v16 + 12) = *(_DWORD *)(v15 + 12);
        *(_BYTE *)(v16 + 16) = *(_BYTE *)(v15 + 16);
      }
      result = NS::SharedPtr<MTL::Texture>::operator=((void **)(v16 + 24), (void **)(v15 + 24));
      *(_QWORD *)(v17 + 32) = *(_QWORD *)(v15 + 32);
      a3 = v14 + 1;
      ++a7;
    }
    while (a2 != a4 || v13 != v14);
    a3 = a5;
  }
  *v12 = a2;
  v12[1] = a3;
  v12[2] = a6;
  v12[3] = a7;
  return result;
}

uint64_t re::DynamicOverflowArray<re::DeformationBufferAllocator::VertexBufferAllocation *,2ul>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a1 != a2)
  {
    if (*(_QWORD *)a1)
    {
      if (*(_QWORD *)a2 && *(_QWORD *)a1 != *(_QWORD *)a2)
      {
        re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 527);
        result = _os_crash();
        __break(1u);
        return result;
      }
    }
    if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    {
      if (*(_QWORD *)(a2 + 8))
      {
        re::DynamicOverflowArray<re::DeformationBufferAllocator::VertexBufferAllocation *,2ul>::move(a1, a2);
      }
      else
      {
        re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_DWORD *)(a2 + 16) += 2;
        *(_DWORD *)(a1 + 16) += 2;
      }
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) += 2;
      re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::swap((uint64_t *)a1, (uint64_t *)a2);
    }
  }
  return a1;
}

void *re::DynamicOverflowArray<re::DeformationBufferAllocator::VertexBufferAllocation *,2ul>::move(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  const void *v5;
  void *result;
  const void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (v4 >= *(_QWORD *)(a1 + 8))
  {
    re::DynamicOverflowArray<re::DeformationBufferAllocator::DeformationStackAllocation *,2ul>::setCapacity((_QWORD *)a1, v4);
    if ((*(_BYTE *)(a2 + 16) & 1) != 0)
      v7 = (const void *)(a2 + 24);
    else
      v7 = *(const void **)(a2 + 32);
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(_DWORD *)(a1 + 16);
    if ((v9 & 1) != 0)
    {
      v10 = (void *)(a1 + 24);
      if (!v8)
      {
LABEL_18:
        if ((v9 & 1) != 0)
          v11 = a1 + 24;
        else
          v11 = *(_QWORD *)(a1 + 32);
        v12 = *(_QWORD *)(a1 + 8);
        v13 = (void *)(v11 + 8 * v12);
        if ((*(_DWORD *)(a2 + 16) & 1) != 0)
          v14 = a2 + 24;
        else
          v14 = *(_QWORD *)(a2 + 32);
        result = memcpy(v13, (const void *)(v14 + 8 * v12), 8 * v4 - 8 * v12);
        goto LABEL_25;
      }
    }
    else
    {
      v10 = *(void **)(a1 + 32);
      if (!v8)
        goto LABEL_18;
    }
    memmove(v10, v7, 8 * v8);
    v9 = *(_DWORD *)(a1 + 16);
    goto LABEL_18;
  }
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    v5 = (const void *)(a2 + 24);
  else
    v5 = *(const void **)(a2 + 32);
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    result = *(void **)(a1 + 32);
    if (!v4)
      goto LABEL_25;
    goto LABEL_15;
  }
  result = (void *)(a1 + 24);
  if (v4)
LABEL_15:
    result = memmove(result, v5, 8 * v4);
LABEL_25:
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) += 4;
  *(_DWORD *)(a1 + 16) += 2;
  return result;
}

uint64_t re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::setBucketsCapacity((_QWORD *)a1, (v2 + 4) >> 2);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 40 * (v2 & 3);
}

void re::ProbeManager::init(re::ProbeManager *this, const re::RenderManager *a2)
{
  int v4;
  _anonymous_namespace_ *v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _anonymous_namespace_ *v12;
  id *v13;
  void *v14;
  id v15;
  int v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t i;
  _OWORD *v24;
  uint64_t j;
  _OWORD *v26;
  __int128 v27;
  id v28;
  id v29;
  char v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  void *v36[2];

  *((_QWORD *)this + 1) = a2;
  v4 = 7;
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::Optional<re::ProbeManager::ProbeSlice>>::setCapacity((_QWORD *)this + 17, 7uLL);
  v6 = *((_DWORD *)this + 40) + 1;
  *((_DWORD *)this + 40) = v6;
  v7 = *((_QWORD *)this + 19);
  do
  {
    v8 = *((_QWORD *)this + 18);
    if (v7 >= v8)
    {
      v9 = v7 + 1;
      if (v8 < v7 + 1)
      {
        if (*((_QWORD *)this + 17))
        {
          v10 = 2 * v8;
          if (!v8)
            v10 = 8;
          if (v10 <= v9)
            v11 = v7 + 1;
          else
            v11 = v10;
          v5 = (_anonymous_namespace_ *)re::DynamicArray<re::Optional<re::ProbeManager::ProbeSlice>>::setCapacity((_QWORD *)this + 17, v11);
          v6 = *((_DWORD *)this + 40);
        }
        else
        {
          v5 = (_anonymous_namespace_ *)re::DynamicArray<re::Optional<re::ProbeManager::ProbeSlice>>::setCapacity((_QWORD *)this + 17, v9);
          v6 = *((_DWORD *)this + 40) + 1;
        }
      }
      v7 = *((_QWORD *)this + 19);
    }
    *(_BYTE *)(*((_QWORD *)this + 21) + 160 * v7++) = 0;
    *((_QWORD *)this + 19) = v7;
    *((_DWORD *)this + 40) = ++v6;
    --v4;
  }
  while (v4);
  v12 = (_anonymous_namespace_ *)re::DynamicArray<re::ProbeSpecularWorkload>::setCapacity((_QWORD *)this + 43, 0x25uLL);
  ++*((_DWORD *)this + 92);
  re::DynamicArray<re::MeshLodLevelInfo>::setCapacity((_QWORD *)this + 56, 2uLL);
  ++*((_DWORD *)this + 118);
  *((_BYTE *)this + 808) = *((_BYTE *)a2 + 305);
  v14 = (void *)*((_QWORD *)a2 + 23);
  v13 = (id *)((char *)a2 + 184);
  v29 = v14;
  v15 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  objc_msgSend(v15, sel_setStorageMode_, 2);
  objc_msgSend(v15, sel_setTextureType_, 5);
  objc_msgSend(v15, sel_setWidth_, 256);
  objc_msgSend(v15, sel_setHeight_, 256);
  objc_msgSend(v15, sel_setPixelFormat_, 115);
  objc_msgSend(v15, sel_setMipmapLevelCount_, 9);
  objc_msgSend(v15, sel_setProtectionOptions_, re::protectionOptions((re *)objc_msgSend(v15, sel_setUsage_, 3)));
  re::mtl::Device::makeTexture(v15, &v29, v36);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 13, v36);
  if (v36[0])

  re::mtl::Device::makeTexture(v15, &v29, v36);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 14, v36);
  if (v36[0])

  if (v15)
  v16 = *((unsigned __int8 *)this + 808);
  v17 = *v13;
  v18 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
  objc_msgSend(v18, sel_setStorageMode_, 2);
  if (v16)
  {
    objc_msgSend(v18, sel_setTextureType_, 6);
    objc_msgSend(v18, sel_setWidth_, 256);
    objc_msgSend(v18, sel_setHeight_, 256);
  }
  else
  {
    objc_msgSend(v18, sel_setTextureType_, 3);
    objc_msgSend(v18, sel_setWidth_, 512);
    objc_msgSend(v18, sel_setHeight_, 512);
  }
  objc_msgSend(v18, sel_setArrayLength_, 7);
  objc_msgSend(v18, sel_setPixelFormat_, 115);
  objc_msgSend(v18, sel_setMipmapLevelCount_, 9);
  objc_msgSend(v18, sel_setProtectionOptions_, re::protectionOptions((re *)objc_msgSend(v18, sel_setUsage_, 3)));
  re::mtl::Device::makeTexture(v18, v13, &v29);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 10, &v29);
  if (v29)

  if (v18)
  if (*((_BYTE *)this + 808))
  {
    v19 = *v13;
    v20 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), (SEL)0x24EDB7DC8);
    objc_msgSend(v20, sel_setStorageMode_, 2);
    objc_msgSend(v20, sel_setTextureType_, 6);
    objc_msgSend(v20, (SEL)&selRef_newFunctionWithDescriptor_error_, 8);
    objc_msgSend(v20, sel_setHeight_, 8);
    objc_msgSend(v20, sel_setArrayLength_, 7);
    objc_msgSend(v20, sel_setPixelFormat_, 115);
    objc_msgSend(v20, sel_setMipmapLevelCount_, 1);
    objc_msgSend(v20, sel_setUsage_, 3);
    re::mtl::Device::makeTexture(v20, v13, &v29);
    NS::SharedPtr<MTL::Texture>::operator=((void **)this + 11, &v29);
    if (v29)

    if (v20)
    if (*((_BYTE *)this + 808))
    {
      v21 = *v13;
      v22 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), (SEL)0x24EDB7DC8);
      objc_msgSend(v22, sel_setStorageMode_, 2);
      objc_msgSend(v22, sel_setTextureType_, 5);
      objc_msgSend(v22, (SEL)&selRef_newFunctionWithDescriptor_error_, 8);
      objc_msgSend(v22, sel_setHeight_, 8);
      objc_msgSend(v22, sel_setPixelFormat_, 115);
      objc_msgSend(v22, sel_setMipmapLevelCount_, 1);
      objc_msgSend(v22, sel_setUsage_, 3);
      re::mtl::Device::makeTexture(v22, v13, &v29);
      NS::SharedPtr<MTL::Texture>::operator=((void **)this + 15, &v29);
      if (v29)

      if (v22)
    }
  }
  for (i = 16; i != 464; i += 112)
  {
    v24 = (_OWORD *)((char *)&v29 + i);
    v24[1] = 0uLL;
    v24[2] = 0uLL;
    *v24 = 0uLL;
  }
  for (j = 464; j != 800; j += 112)
  {
    v26 = (_OWORD *)((char *)&v29 + j);
    v26[1] = 0uLL;
    v26[2] = 0uLL;
    *v26 = 0uLL;
  }
  v29 = 0;
  v30 = 1;
  v31 = 1065353216;
  v27 = *(_OWORD *)(MEMORY[0x24BDAEDF8] + 16);
  v32 = *MEMORY[0x24BDAEDF8];
  v33 = v27;
  v34 = *(_OWORD *)(MEMORY[0x24BDAEDF8] + 32);
  v35 = 0;
  *((_BYTE *)this + 824) = 0;
  v28 = *v13;
  v36[0] = objc_msgSend(v28, sel_newBufferWithBytes_length_options_, &v29, 864, 0);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 16, v36);
  if (v36[0])

  *((_BYTE *)this + 184) = 0;
}

void re::ProbeManager::addProbe(uint64_t a1, id a2, id *a3, char a4, __int128 *a5, float a6)
{
  _anonymous_namespace_ *v11;
  __int128 v12;
  id v13;
  id v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  float v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v13 = a2;
  v11 = (_anonymous_namespace_ *)(a1 + 16);
  v14 = objc_msgSend(*a3, sel_hash);
  re::HashBrown<long long,unsigned long,re::Hash<long long>,re::EqualTo<long long>,void,false>::addNew(v11, (unint64_t *)&v13, (uint64_t *)&v14);
  v14 = v13;
  v15 = *a3;
  v12 = a5[1];
  v16 = *a5;
  v17 = v12;
  v18 = a5[2];
  v19 = a6;
  v20 = a4;
  re::DynamicArray<re::ProbeManager::ProbeAdd>::add((_anonymous_namespace_ *)(a1 + 600), (uint64_t)&v14);
  if (v15)

}

uint64_t re::HashBrown<long long,unsigned long,re::Hash<long long>,re::EqualTo<long long>,void,false>::addNew(_anonymous_namespace_ *a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6;

  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<long long,unsigned long,re::Hash<long long>,re::EqualTo<long long>,void,false>::internalAdd(a1, a2, a3);
  else
    return *((_QWORD *)a1 + 1) + 16 * v6 + 8;
}

__n128 re::DynamicArray<re::ProbeManager::ProbeAdd>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::ProbeManager::ProbeAdd>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 80 * v4;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v5 = *(_QWORD *)a2;
  *(_QWORD *)(v5 + 8) = v6;
  *(_QWORD *)(a2 + 8) = 0;
  result = *(__n128 *)(a2 + 16);
  v8 = *(_OWORD *)(a2 + 32);
  v9 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(v5 + 61) = *(_QWORD *)(a2 + 61);
  *(_OWORD *)(v5 + 32) = v8;
  *(_OWORD *)(v5 + 48) = v9;
  *(__n128 *)(v5 + 16) = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::ProbeManager::updateProbe(uint64_t a1, uint64_t a2, id *a3, float a4)
{
  _QWORD *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t i;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *j;
  _anonymous_namespace_ *v19;
  _anonymous_namespace_ *v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD v31[2];
  int v32;
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  unint64_t v37;
  __int16 v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v31[0] = a2;
  v7 = (_QWORD *)(a1 + 16);
  v8 = objc_msgSend(*a3, sel_hash);
  v9 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(v7, v31);
  if (v9 != -1)
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16 * v9 + 8) = v8;
  v10 = *(_QWORD *)(a1 + 616);
  if (v10)
  {
    v11 = (void **)(*(_QWORD *)(a1 + 632) + 8);
    while (*(v11 - 1) != (void *)v31[0])
    {
      v11 += 10;
      if (!--v10)
        goto LABEL_7;
    }
    NS::SharedPtr<MTL::Texture>::operator=(v11, a3);
  }
  else
  {
LABEL_7:
    v12 = *(_QWORD *)(a1 + 576);
    if (v12)
    {
      v13 = 0;
      for (i = 0; i < v12; ++i)
      {
        if (*(_QWORD *)(*(_QWORD *)(a1 + 592) + v13) == v31[0])
        {
          re::DynamicArray<re::ProbeManager::ProbeUpdate>::removeAt(a1 + 560, i);
          v12 = *(_QWORD *)(a1 + 576);
        }
        v13 += 24;
      }
    }
    v15 = *(_QWORD *)(a1 + 152);
    if (v15)
    {
      v16 = 0;
      v17 = v31[0];
      for (j = (_BYTE *)(*(_QWORD *)(a1 + 168) + 32); !*(j - 32) || *((_QWORD *)j - 1) != v31[0]; j += 160)
      {
        if (v15 == ++v16)
          return;
      }
      if (v15 <= v16)
      {
        v31[1] = 0;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v40 = 0u;
        v30 = v16;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v32 = 136315906;
        v33 = "operator[]";
        v34 = 1024;
        v35 = 789;
        v36 = 2048;
        v37 = v30;
        v38 = 2048;
        v39 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v19 = (_anonymous_namespace_ *)*a3;
      v20 = v19;
      v21 = *j;
      v22 = *(_QWORD *)(a1 + 576);
      v23 = *(_QWORD *)(a1 + 568);
      if (v22 >= v23)
      {
        v24 = v22 + 1;
        if (v23 < v22 + 1)
        {
          if (*(_QWORD *)(a1 + 560))
          {
            v25 = 2 * v23;
            v26 = v23 == 0;
            v27 = 8;
            if (!v26)
              v27 = v25;
            if (v27 <= v24)
              v28 = v24;
            else
              v28 = v27;
            re::DynamicArray<re::ProbeManager::ProbeUpdate>::setCapacity((_QWORD *)(a1 + 560), v28);
          }
          else
          {
            re::DynamicArray<re::ProbeManager::ProbeUpdate>::setCapacity((_QWORD *)(a1 + 560), v24);
            ++*(_DWORD *)(a1 + 584);
          }
        }
        v22 = *(_QWORD *)(a1 + 576);
      }
      v29 = *(_QWORD *)(a1 + 592) + 24 * v22;
      *(_QWORD *)v29 = v17;
      *(_QWORD *)(v29 + 8) = v20;
      *(float *)(v29 + 16) = a4;
      *(_BYTE *)(v29 + 20) = v21;
      ++*(_QWORD *)(a1 + 576);
      ++*(_DWORD *)(a1 + 584);
    }
  }
}

void re::DynamicArray<re::ProbeManager::ProbeUpdate>::removeAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = v4 + 24 * v2;
    v6 = v4 + 24 * a2;
    *(_QWORD *)v6 = *(_QWORD *)(v5 - 24);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v6 + 8), (void **)(v5 - 16));
    v7 = *(_DWORD *)(v5 - 8);
    *(_BYTE *)(v6 + 20) = *(_BYTE *)(v5 - 4);
    *(_DWORD *)(v6 + 16) = v7;
    v2 = *(_QWORD *)(a1 + 16);
  }
  v8 = *(_QWORD *)(a1 + 32) + 24 * v2;
  v9 = *(void **)(v8 - 16);
  if (v9)
  {

    *(_QWORD *)(v8 - 16) = 0;
    v2 = *(_QWORD *)(a1 + 16);
  }
  *(_QWORD *)(a1 + 16) = v2 - 1;
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::ProbeManager::removeProbe(re::ProbeManager *this, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  unint64_t v6;
  uint64_t v7;
  unint64_t j;
  int v10;
  unint64_t v11;

  v11 = a2;
  re::HashBrown<long long,unsigned long,re::Hash<long long>,re::EqualTo<long long>,void,false>::remove((uint64_t *)this + 2, &v11);
  v3 = *((_QWORD *)this + 77);
  if (v3)
  {
    v4 = 0;
    for (i = 0; i < v3; ++i)
    {
      if (*(_QWORD *)(*((_QWORD *)this + 79) + v4) == v11)
      {
        re::DynamicArray<re::ProbeManager::ProbeAdd>::removeAt((uint64_t)this + 600, i);
        v3 = *((_QWORD *)this + 77);
      }
      v4 += 80;
    }
  }
  v6 = *((_QWORD *)this + 72);
  if (v6)
  {
    v7 = 0;
    for (j = 0; j < v6; ++j)
    {
      if (*(_QWORD *)(*((_QWORD *)this + 74) + v7) == v11)
      {
        re::DynamicArray<re::ProbeManager::ProbeUpdate>::removeAt((uint64_t)this + 560, j);
        v6 = *((_QWORD *)this + 72);
      }
      v7 += 24;
    }
  }
  if (*((_BYTE *)this + 232))
  {
    if (*((_QWORD *)this + 36) == v11)
    {
      re::ProbeManager::cancelSliceOperation(this);
      if (*((_BYTE *)this + 768))
      {
        if (*((_QWORD *)this + 98) == v11)
          *((_BYTE *)this + 768) = 0;
      }
    }
  }
  v10 = 0;
  return re::HashBrown<long long,float,re::Hash<long long>,re::EqualTo<long long>,void,false>::addNew((re::ProbeManager *)((char *)this + 704), &v11, &v10);
}

BOOL re::HashBrown<long long,unsigned long,re::Hash<long long>,re::EqualTo<long long>,void,false>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int8x16_t *v5;
  int8x16_t v6;
  int8x8_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  v4 = v3;
  if (v3 != -1)
  {
    v5 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    if (v7)
      v8 = -1;
    else
      v8 = 0x80;
    v5->i8[v3 & 0xF] = v8;
    v9 = a1[2];
    v10 = *(_QWORD *)(a1[1] + 16 * v3);
    v11 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) >> 27));
    a1[5] ^= (v11 >> 31) ^ v11;
    v12 = a1[4];
    if (v7)
      ++v12;
    v13 = a1[3] - 1;
    a1[3] = v13;
    a1[4] = v12;
    if (v9 >= 0x11 && v13 < v9 >> 2)
      re::HashBrown<long long,unsigned long,re::Hash<long long>,re::EqualTo<long long>,void,false>::resize(a1, 0);
  }
  return v4 != -1;
}

void re::DynamicArray<re::ProbeManager::ProbeAdd>::removeAt(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  void *v11;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v2 - 1 > a2)
  {
    v4 = *(_QWORD *)(a1 + 32);
    v5 = v4 + 80 * v2;
    v6 = v4 + 80 * a2;
    *(_QWORD *)v6 = *(_QWORD *)(v5 - 80);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v6 + 8), (void **)(v5 - 72));
    v7 = *(_OWORD *)(v5 - 64);
    v8 = *(_OWORD *)(v5 - 48);
    v9 = *(_OWORD *)(v5 - 32);
    *(_QWORD *)(v6 + 61) = *(_QWORD *)(v5 - 19);
    *(_OWORD *)(v6 + 32) = v8;
    *(_OWORD *)(v6 + 48) = v9;
    *(_OWORD *)(v6 + 16) = v7;
    v2 = *(_QWORD *)(a1 + 16);
  }
  v10 = *(_QWORD *)(a1 + 32) + 80 * v2;
  v11 = *(void **)(v10 - 72);
  if (v11)
  {

    *(_QWORD *)(v10 - 72) = 0;
    v2 = *(_QWORD *)(a1 + 16);
  }
  *(_QWORD *)(a1 + 16) = v2 - 1;
  ++*(_DWORD *)(a1 + 24);
}

uint64_t re::ProbeManager::cancelSliceOperation(re::ProbeManager *this)
{
  char *v2;
  void *v4[10];

  v4[9] = *(void **)MEMORY[0x24BDAC8D0];
  v2 = (char *)this + 232;
  re::ProbeManager::freeSlice((uint64_t)this, *((_QWORD *)this + 31));
  LOBYTE(v4[0]) = 0;
  re::Optional<re::ProbeManager::SliceOperation>::operator=((uint64_t)v2, v4);
  re::Optional<re::ProbeManager::SliceOperation>::~Optional((uint64_t)v4);
  if (*((_BYTE *)this + 304))
    *((_BYTE *)this + 304) = 0;
  if (*((_BYTE *)this + 336))
    *((_BYTE *)this + 336) = 0;
  *((_QWORD *)this + 45) = 0;
  ++*((_DWORD *)this + 92);
  if (*((_BYTE *)this + 384))
    *((_BYTE *)this + 384) = 0;
  *((_QWORD *)this + 58) = 0;
  ++*((_DWORD *)this + 118);
  LOBYTE(v4[0]) = 0;
  re::Optional<re::ProbeLatLongComputeWorkload>::operator=((uint64_t)this + 488, (unsigned __int8 *)v4);
  return re::Optional<re::ProbeLatLongComputeWorkload>::~Optional((uint64_t)v4);
}

uint64_t re::HashBrown<long long,float,re::Hash<long long>,re::EqualTo<long long>,void,false>::addNew(_anonymous_namespace_ *a1, unint64_t *a2, int *a3)
{
  uint64_t v6;

  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<long long,float,re::Hash<long long>,re::EqualTo<long long>,void,false>::internalAdd(a1, a2, a3);
  else
    return *((_QWORD *)a1 + 1) + 16 * v6 + 8;
}

uint64_t re::ProbeManager::addProbeCallBack(re::ProbeManager *this, unint64_t a2)
{
  int v3;
  unint64_t v4;

  v4 = a2;
  v3 = 0;
  return re::HashBrown<long long,float,re::Hash<long long>,re::EqualTo<long long>,void,false>::addNew((re::ProbeManager *)((char *)this + 640), &v4, &v3);
}

uint64_t re::ProbeManager::updateProbeCallBack(uint64_t this)
{
  *(_BYTE *)(this + 776) = 1;
  return this;
}

void re::ProbeManager::update(re::ProbeManager *this, float a2)
{
  re::ProbeManager::freeStaleTextureSlices((uint64_t)this);
  if ((*((_DWORD *)this + 44) + *((_DWORD *)this + 45)) <= 6)
    re::ProbeManager::assignTextureSlices(this);
  re::ProbeManager::updateWeights(this, a2);
  re::ProbeManager::regenerateBuffer(this);
}

uint64_t re::ProbeManager::freeStaleTextureSlices(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float *v13;
  float *v14;

  v1 = this;
  if (*(_BYTE *)(this + 768) && *(float *)(this + 800) >= 1.0)
  {
    v2 = *(unsigned int *)(this + 796);
    if (*(_QWORD *)(this + 152) <= v2)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v3 = *(_QWORD *)(this + 168) + 160 * v2;
    v4 = v3 + 16;
    v5 = *(unsigned __int8 *)(v3 + 32);
    v6 = *(_DWORD *)(v3 + 144);
    if (v5)
      *(_DWORD *)(v4 + 132) = v6;
    else
      *(_DWORD *)(v4 + 136) = v6;
    this = re::ProbeManager::freeSlice(this, *(unsigned int *)(this + 792));
    if (*(_BYTE *)(v1 + 768))
      *(_BYTE *)(v1 + 768) = 0;
  }
  v7 = *(_QWORD *)(v1 + 152);
  if (v7)
  {
    v8 = 0;
    for (i = 0; i < v7; ++i)
    {
      v10 = *(_QWORD *)(v1 + 168);
      if (*(_BYTE *)(v10 + v8))
      {
        v11 = v10 + v8;
        v12 = *(unsigned __int8 *)(v11 + 32);
        v13 = (float *)(v11 + 132);
        v14 = (float *)(v11 + 136);
        if (v12)
          v14 = v13;
        if (*v14 <= 0.0)
        {
          this = re::ProbeManager::freeSlice(v1, i);
          v7 = *(_QWORD *)(v1 + 152);
        }
      }
      v8 += 160;
    }
  }
  return this;
}

void re::ProbeManager::assignTextureSlices(re::ProbeManager *this)
{
  id *v1;
  _QWORD *v2;
  uint64_t v4;
  const float *v5;
  float32x2_t v6;
  unint64_t v12;
  uint64_t i;
  _BOOL4 v14;
  uint64_t v15;
  id v16;
  _QWORD *v17;
  _QWORD *v18;
  unsigned __int8 *v19;
  id *v20;
  int v21;
  int v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  unint64_t v26;
  char v27;
  int v28;
  int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _BOOL4 v46;
  uint64_t v47;
  id v48;
  id v49;
  _QWORD *v50;
  unsigned __int8 *v51;
  _DWORD *v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  int v56;
  char v57;
  int *v58;
  int v59;
  int *v60;
  int v61;
  int v62;
  char *v63;
  int v64;
  int v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD *v69;
  uint64_t v70;
  __int32 v71;
  unsigned int v72;
  int v73[2];
  __int128 __src;
  uint64_t v75;
  float v76;
  int v77;
  uint64_t v78;
  float v79;
  int v80;
  uint64_t v81;
  float v82;
  int v83;
  __int128 v84;
  float32x4_t v85;
  unint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  char v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _BYTE v99[23];
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  id v107;
  int v108;
  char v109;
  uint64_t v110;
  _QWORD v111[3];
  _QWORD *v112;
  __int128 v113;
  __int128 v114;
  float32x4_t v115;
  __int128 v116;
  _BYTE v117[21];
  _QWORD v118[3];
  _QWORD *v119;
  int v120;
  const char *v121;
  __int16 v122;
  int v123;
  __int16 v124;
  _QWORD *v125;
  __int16 v126;
  _QWORD *v127;
  uint64_t v128;

  v128 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 768))
  {
    v1 = &v107;
    do
    {
      v44 = *((_QWORD *)this + 72);
      if (!v44)
        break;
      v45 = 0;
      v2 = (_QWORD *)(*((_QWORD *)this + 74) + 16);
      while (1)
      {
        v46 = *((_DWORD *)this + 45) < 4u;
        if (*((_BYTE *)v2 + 4))
          v46 = *((_DWORD *)this + 44) < 3u;
        if (v46)
          break;
        ++v45;
        v2 += 3;
        if (v44 == v45)
          goto LABEL_2;
      }
      v47 = *(v2 - 2);
      v48 = (id)*(v2 - 1);
      v108 = *(_DWORD *)v2;
      v109 = *((_BYTE *)v2 + 4);
      re::DynamicArray<re::ProbeManager::ProbeUpdate>::removeAt((uint64_t)this + 560, v45);
      v106 = v47;
      v49 = v48;
      v107 = v49;
      v50 = (_QWORD *)*((_QWORD *)this + 19);
      if (v50)
      {
        v2 = 0;
        v51 = (unsigned __int8 *)*((_QWORD *)this + 21);
        v52 = v51 + 136;
        while (!*((_BYTE *)v52 - 136) || *((_QWORD *)v52 - 14) != v47)
        {
          v2 = (_QWORD *)((char *)v2 + 1);
          v52 += 40;
          if (v50 == v2)
            goto LABEL_59;
        }
        v53 = 0;
        while (1)
        {
          v54 = *v51;
          v51 += 160;
          if (!v54)
            break;
          if (v50 == (_QWORD *)++v53)
          {
            v55 = *(_QWORD *)v73;
            goto LABEL_48;
          }
        }
        v55 = v53;
LABEL_48:
        if (!*((_BYTE *)this + 768))
          *((_BYTE *)this + 768) = 1;
        *((_BYTE *)this + 776) = 0;
        *((_QWORD *)this + 98) = v47;
        *((_DWORD *)this + 198) = (_DWORD)v2;
        *((_DWORD *)this + 199) = v55;
        *((_DWORD *)this + 200) = 0;
        if (v50 <= v2)
        {
          v110 = 0;
          v116 = 0u;
          *(_OWORD *)v117 = 0u;
          v114 = 0u;
          v115 = 0u;
          v113 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v120 = 136315906;
          v121 = "operator[]";
          v122 = 1024;
          v123 = 789;
          v124 = 2048;
          v125 = v2;
          v126 = 2048;
          v127 = v50;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v56 = v108;
        v57 = *((_BYTE *)v52 - 104);
        if (v57)
        {
          v58 = v52 + 5;
          v59 = v52[2];
          v60 = v52 + 1;
          v61 = 0;
          v62 = v108;
          v56 = v55;
        }
        else
        {
          v62 = 0;
          v58 = v52 + 2;
          v61 = *v52;
          v60 = v52 + 3;
          v59 = v55;
        }
        v63 = (char *)v52 - 103;
        v64 = *v60;
        v65 = *v58;
        v93 = v57;
        v66 = *((_OWORD *)v63 + 5);
        v98 = *((_OWORD *)v63 + 4);
        *(_OWORD *)v99 = v66;
        *(_QWORD *)&v99[15] = *(_QWORD *)(v63 + 95);
        v67 = *((_OWORD *)v63 + 1);
        v94 = *(_OWORD *)v63;
        v95 = v67;
        v68 = *((_OWORD *)v63 + 3);
        v96 = *((_OWORD *)v63 + 2);
        v97 = v68;
        v100 = v61;
        v101 = v62;
        v102 = v56;
        v103 = v59;
        v104 = v64;
        v105 = v65;
        v118[0] = &off_24ED75CF8;
        v118[1] = re::ProbeManager::updateProbeCallBack;
        v2 = v118;
        v118[2] = 0;
        v119 = v118;
        *(_QWORD *)v73 = v55;
        re::ProbeManager::assignSliceToProbe((uint64_t)this, v55, v47, &v107, &v93, (uint64_t)v118);
        v69 = v119;
        if (v119 == v118)
        {
          v69 = v118;
          v70 = 4;
          goto LABEL_58;
        }
        if (v119)
        {
          v70 = 5;
LABEL_58:
          (*(void (**)(void))(*v69 + 8 * v70))();
        }
      }
LABEL_59:
      if (v49)

      if (v48)
    }
    while (!*((_BYTE *)this + 768));
  }
LABEL_2:
  v4 = *((_QWORD *)this + 77);
  if (v4)
  {
    v5 = (const float *)&dword_2260ECE14;
    v6 = vld1_dup_f32(v5);
    v71 = v6.i32[1];
    __asm { FMOV            V0.2S, #1.0 }
    v72 = HIDWORD(_D0);
    while (1)
    {
      v12 = 0;
      for (i = *((_QWORD *)this + 79); ; i += 80)
      {
        v14 = *((_DWORD *)this + 45) < 4u;
        if (*(_BYTE *)(i + 68))
          v14 = *((_DWORD *)this + 44) < 3u;
        if (v14)
          break;
        if (v4 == ++v12)
          return;
      }
      v15 = *(_QWORD *)i;
      v16 = *(id *)(i + 8);
      v115 = *(float32x4_t *)(i + 16);
      v116 = *(_OWORD *)(i + 32);
      *(_OWORD *)v117 = *(_OWORD *)(i + 48);
      *(_QWORD *)&v117[13] = *(_QWORD *)(i + 61);
      re::DynamicArray<re::ProbeManager::ProbeAdd>::removeAt((uint64_t)this + 600, v12);
      LOBYTE(v113) = 1;
      *(_QWORD *)&v114 = v15;
      *((_QWORD *)&v114 + 1) = v16;
      v17 = (_QWORD *)*((_QWORD *)this + 19);
      if (v17)
      {
        v18 = 0;
        v19 = (unsigned __int8 *)*((_QWORD *)this + 21);
        v20 = v1;
        while (1)
        {
          v21 = *v19;
          v19 += 160;
          if (!v21)
            break;
          v18 = (_QWORD *)((char *)v18 + 1);
          if (v17 == v18)
            goto LABEL_17;
        }
        v2 = v18;
      }
      else
      {
        v20 = v1;
      }
LABEL_17:
      v22 = *(_DWORD *)&v117[16];
      if (v117[20])
      {
        v23.i64[0] = 0x3F0000003F000000;
        v23.i64[1] = 0x3F0000003F000000;
        v24 = vmulq_f32(v115, v23);
        v25 = vmulq_f32(v24, v24);
        v26 = __PAIR64__(v72, COERCE_UNSIGNED_INT(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0])));
        v27 = 1;
        v28 = (int)v2;
        v29 = *(_DWORD *)&v117[16];
      }
      else
      {
        v27 = 0;
        v26 = __PAIR64__(v71, COERCE_UNSIGNED_INT(fminf(v115.f32[0], fminf(v115.f32[1], v115.f32[2]))));
        v20 = (id *)*(unsigned int *)&v117[16];
        v28 = *(_DWORD *)&v117[16];
        v22 = 1065353216;
        v29 = (int)v2;
      }
      v30 = *(float *)&v116 * (float)(*(float *)&v116 + *(float *)&v116);
      v31 = *((float *)&v116 + 1) * (float)(*((float *)&v116 + 1) + *((float *)&v116 + 1));
      v32 = *((float *)&v116 + 2) * (float)(*((float *)&v116 + 2) + *((float *)&v116 + 2));
      v33 = (float)(*(float *)&v116 + *(float *)&v116) * *((float *)&v116 + 1);
      v34 = (float)(*(float *)&v116 + *(float *)&v116) * *((float *)&v116 + 2);
      v35 = (float)(*((float *)&v116 + 1) + *((float *)&v116 + 1)) * *((float *)&v116 + 2);
      v36 = (float)(*(float *)&v116 + *(float *)&v116) * *((float *)&v116 + 3);
      v37 = (float)(*((float *)&v116 + 1) + *((float *)&v116 + 1)) * *((float *)&v116 + 3);
      v38 = (float)(*((float *)&v116 + 2) + *((float *)&v116 + 2)) * *((float *)&v116 + 3);
      *(float *)&v39 = 1.0 - (float)(v31 + v32);
      *(float *)&v40 = v33 + v38;
      *(float *)&v41 = v34 - v37;
      *((float *)&v39 + 1) = v33 - v38;
      *((float *)&v40 + 1) = 1.0 - (float)(v30 + v32);
      *((float *)&v41 + 1) = v35 + v36;
      LOBYTE(__src) = v27;
      v76 = v34 + v37;
      v75 = v39;
      v77 = 0;
      v79 = v35 - v36;
      v78 = v40;
      v80 = 0;
      v82 = 1.0 - (float)(v30 + v31);
      v81 = v41;
      v83 = 0;
      v84 = *(_OWORD *)v117;
      v85 = v115;
      v86 = v26;
      v87 = 1065353216;
      v88 = v22;
      v89 = v28;
      v90 = (int)v2;
      v91 = v29;
      v92 = (int)v20;
      v1 = v20;
      v111[0] = &off_24ED75CF8;
      v111[1] = re::ProbeManager::addProbeCallBack;
      v111[2] = 0;
      v112 = v111;
      re::ProbeManager::assignSliceToProbe((uint64_t)this, (unint64_t)v2, v15, (id *)&v114 + 1, &__src, (uint64_t)v111);
      v42 = v112;
      if (v112 == v111)
        break;
      if (v112)
      {
        v43 = 5;
LABEL_24:
        (*(void (**)(void))(*v42 + 8 * v43))();
      }
      if (v16)

      v4 = *((_QWORD *)this + 77);
      if (!v4)
        return;
    }
    v42 = v111;
    v43 = 4;
    goto LABEL_24;
  }
}

_QWORD *re::ProbeManager::updateWeights(_QWORD *this, float a2)
{
  unint64_t v2;
  _QWORD *v4;
  float v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  float v26;
  uint64_t v27;
  float v28;
  float *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float *v38;
  float v39;
  uint64_t v40;
  float v41;
  float *v42;
  float v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t i;
  uint64_t v48;
  int v49;
  const char *v50;
  __int16 v51;
  int v52;
  __int16 v53;
  unint64_t v54;
  __int16 v55;
  _QWORD *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;

  v4 = this;
  v62 = *MEMORY[0x24BDAC8D0];
  if (this[83] || this[91] || *((_BYTE *)this + 768))
  {
    if (*((_BYTE *)this + 768) && *((_BYTE *)this + 776))
    {
      v5 = *((float *)this + 200) + a2;
      if (v5 > 1.0)
        v5 = 1.0;
      if (v5 < 0.0)
        v5 = 0.0;
      *((float *)this + 200) = v5;
      v6 = *((unsigned int *)this + 198);
      v7 = (_QWORD *)this[19];
      if ((unint64_t)v7 <= v6)
        goto LABEL_77;
      v8 = this[21];
      if (*(_BYTE *)(v8 + 160 * v6))
      {
        v2 = *((unsigned int *)this + 199);
        if ((unint64_t)v7 <= v2)
          goto LABEL_78;
        if (*(_BYTE *)(v8 + 160 * v2))
        {
          v9 = 1.0 - v5;
          v10 = v8 + 160 * v6;
          if (*(_BYTE *)(v10 + 32))
            v11 = 120;
          else
            v11 = 124;
          *(float *)(v10 + v11 + 16) = v9;
          v12 = v8 + 160 * v2;
          if (*(_BYTE *)(v12 + 32))
            v13 = 120;
          else
            v13 = 124;
          *(_DWORD *)(v12 + v13 + 16) = *((_DWORD *)this + 200);
        }
      }
    }
    v7 = this + 80;
    v14 = this[19];
    if (v14)
    {
      v15 = this[21] + 136;
      do
      {
        if (*(_BYTE *)(v15 - 136))
        {
          if (*(_BYTE *)(v15 - 104))
            v16 = (_DWORD *)(v15 - 4);
          else
            v16 = (_DWORD *)v15;
          *v16 = 1065353216;
        }
        v15 += 160;
        --v14;
      }
      while (v14);
    }
    v45 = this + 80;
    v17 = this[82];
    if (v17 >= 0x10)
    {
      v18 = 0;
      v19 = *v7;
      v20 = v17 >> 4;
      while (1)
      {
        v21 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v19 + v18)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
        v46 = (unsigned __int16)~v21;
        if (v21 != 0xFFFF)
          break;
        v18 += 16;
        if (!--v20)
          goto LABEL_51;
      }
      v22 = __clz(__rbit64((unsigned __int16)~v21)) + v18;
      for (i = v22; i != -1; v22 = i)
      {
        v23 = v45[1];
        v24 = v23 + 16 * v22;
        v44 = 0;
        v26 = *(float *)(v24 + 8);
        v25 = (float *)(v24 + 8);
        v27 = *(_QWORD *)(v23 + 16 * v22);
        v44 = v27;
        v28 = v26 + a2;
        *v25 = v26 + a2;
        v6 = v4[19];
        if (!v6)
          goto LABEL_49;
        v2 = 0;
        v29 = (float *)(v4[21] + 136);
        while (!*((_BYTE *)v29 - 136) || *((_QWORD *)v29 - 14) != v27)
        {
          ++v2;
          v29 += 40;
          if (v6 == v2)
            goto LABEL_49;
        }
        if (v6 <= v2)
        {
          v48 = 0;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v57 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v49 = 136315906;
          v50 = "operator[]";
          v51 = 1024;
          v52 = 789;
          v53 = 2048;
          v54 = v2;
          v55 = 2048;
          v56 = (_QWORD *)v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_76:
          v48 = 0;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v57 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v49 = 136315906;
          v50 = "operator[]";
          v51 = 1024;
          v52 = 789;
          v53 = 2048;
          v54 = v2;
          v55 = 2048;
          v56 = (_QWORD *)v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_77:
          v45 = 0;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v57 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v49 = 136315906;
          v50 = "operator[]";
          v51 = 1024;
          v52 = 789;
          v53 = 2048;
          v54 = v6;
          v55 = 2048;
          v56 = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_78:
          v45 = 0;
          v60 = 0u;
          v61 = 0u;
          v58 = 0u;
          v59 = 0u;
          v57 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v49 = 136315906;
          v50 = "operator[]";
          v51 = 1024;
          v52 = 789;
          v53 = 2048;
          v54 = v2;
          v55 = 2048;
          v56 = v7;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        if (v28 > 1.0)
          v28 = 1.0;
        if (v28 < 0.0)
          v28 = 0.0;
        if (*((_BYTE *)v29 - 104))
          --v29;
        *v29 = v28 * *v29;
        if (*v25 >= 1.0)
LABEL_49:
          re::HashBrown<long long,float,re::Hash<long long>,re::EqualTo<long long>,void,false>::remove(v4 + 80, &v44);
        this = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v45);
      }
    }
LABEL_51:
    v7 = v4 + 88;
    v45 = v4 + 88;
    v30 = v4[90];
    if (v30 >= 0x10)
    {
      v31 = 0;
      v32 = *v7;
      v33 = v30 >> 4;
      while (1)
      {
        v34 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v32 + v31)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
        v46 = (unsigned __int16)~v34;
        if (v34 != 0xFFFF)
          break;
        v31 += 16;
        if (!--v33)
          goto LABEL_73;
      }
      v35 = __clz(__rbit64((unsigned __int16)~v34)) + v31;
      for (i = v35; i != -1; v35 = i)
      {
        v36 = v45[1];
        v37 = v36 + 16 * v35;
        v44 = 0;
        v39 = *(float *)(v37 + 8);
        v38 = (float *)(v37 + 8);
        v40 = *(_QWORD *)(v36 + 16 * v35);
        v44 = v40;
        v41 = v39 + a2;
        *v38 = v39 + a2;
        v6 = v4[19];
        if (!v6)
          goto LABEL_71;
        v2 = 0;
        v42 = (float *)(v4[21] + 136);
        while (!*((_BYTE *)v42 - 136) || *((_QWORD *)v42 - 14) != v40)
        {
          ++v2;
          v42 += 40;
          if (v6 == v2)
            goto LABEL_71;
        }
        if (v6 <= v2)
          goto LABEL_76;
        v43 = 1.0 - v41;
        if (v43 > 1.0)
          v43 = 1.0;
        if (v43 < 0.0)
          v43 = 0.0;
        if (*((_BYTE *)v42 - 104))
          --v42;
        *v42 = v43 * *v42;
        if (*v38 >= 1.0)
LABEL_71:
          re::HashBrown<long long,float,re::Hash<long long>,re::EqualTo<long long>,void,false>::remove(v4 + 88, &v44);
        this = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v45);
      }
    }
LABEL_73:
    *((_BYTE *)v4 + 184) = 1;
  }
  return this;
}

void re::ProbeManager::regenerateBuffer(re::ProbeManager *this)
{
  id v2;
  uint64_t i;
  _OWORD *v4;
  uint64_t j;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _OWORD *v11;
  __int128 *v12;
  unint64_t *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  float v19;
  unint64_t *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  float v26;
  __int128 v27;
  id v28;
  unint64_t v29;
  char v30;
  float v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  char v36;

  if (*((_BYTE *)this + 184))
  {
    *((_BYTE *)this + 184) = 0;
    *((_BYTE *)this + 824) = 0;
    v2 = *(id *)(*((_QWORD *)this + 1) + 184);
    v29 = 0;
    for (i = 16; i != 464; i += 112)
    {
      v4 = (_OWORD *)((char *)&v29 + i);
      v4[1] = 0uLL;
      v4[2] = 0uLL;
      *v4 = 0uLL;
    }
    for (j = 464; j != 800; j += 112)
    {
      v6 = (_OWORD *)((char *)&v29 + j);
      v6[1] = 0uLL;
      v6[2] = 0uLL;
      *v6 = 0uLL;
    }
    v36 = 0;
    v7 = *((_QWORD *)this + 19);
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = (_OWORD *)(*((_QWORD *)this + 21) + 140);
      do
      {
        if (*((_BYTE *)v11 - 140)
          && *((_BYTE *)v11 - 124)
          && (!*((_BYTE *)this + 768) || !*((_BYTE *)this + 776) || v8 != *((_DWORD *)this + 198)))
        {
          v12 = (_OWORD *)((char *)v11 - 92);
          if (*((_BYTE *)v11 - 108))
          {
            v13 = &v29 + 14 * v9++;
            v14 = *v12;
            v15 = *(_OWORD *)((char *)v11 - 60);
            *((_OWORD *)v13 + 30) = *(_OWORD *)((char *)v11 - 76);
            *((_OWORD *)v13 + 31) = v15;
            *((_OWORD *)v13 + 29) = v14;
            v16 = *v11;
            v17 = *(_OWORD *)((char *)v11 - 44);
            v18 = *(_OWORD *)((char *)v11 - 12);
            *((_OWORD *)v13 + 33) = *(_OWORD *)((char *)v11 - 28);
            *((_OWORD *)v13 + 34) = v18;
            *((_OWORD *)v13 + 32) = v17;
            *(_OWORD *)((char *)v13 + 556) = v16;
            v19 = *((float *)v11 - 1);
          }
          else
          {
            v20 = &v29 + 14 * v10++;
            v21 = *v12;
            v22 = *(_OWORD *)((char *)v11 - 60);
            *((_OWORD *)v20 + 2) = *(_OWORD *)((char *)v11 - 76);
            *((_OWORD *)v20 + 3) = v22;
            *((_OWORD *)v20 + 1) = v21;
            v23 = *(_OWORD *)((char *)v11 - 44);
            v24 = *(_OWORD *)((char *)v11 - 28);
            v25 = *(_OWORD *)((char *)v11 + 4);
            *((_OWORD *)v20 + 6) = *(_OWORD *)((char *)v11 - 12);
            *((_OWORD *)v20 + 7) = v25;
            *((_OWORD *)v20 + 4) = v23;
            *((_OWORD *)v20 + 5) = v24;
            v19 = *(float *)v11;
          }
          if (v19 != 1.0)
            *((_BYTE *)this + 824) = 1;
        }
        v11 += 10;
        ++v8;
      }
      while (v7 != v8);
    }
    else
    {
      v10 = 0;
      v9 = 0;
    }
    *((_DWORD *)this + 24) = v10;
    *((_DWORD *)this + 25) = v9;
    v29 = __PAIR64__(v9, v10);
    v30 = *((_BYTE *)this + 809);
    if (*((_BYTE *)this + 810))
      v26 = *((float *)this + 203);
    else
      v26 = 1.0;
    v31 = v26;
    v35 = *(_QWORD *)((char *)this + 828);
    v27 = *((_OWORD *)this + 54);
    v32 = *((_OWORD *)this + 53);
    v33 = v27;
    v34 = *((_OWORD *)this + 55);
    v36 = *((_BYTE *)this + 896);
    v28 = objc_msgSend(v2, sel_newBufferWithBytes_length_options_, &v29, 864, 0);
    NS::SharedPtr<MTL::Texture>::operator=((void **)this + 16, &v28);
    if (v28)

  }
}

uint64_t re::ProbeManager::freeSlice(uint64_t this, unint64_t a2)
{
  _BYTE *v2;

  if (*(_QWORD *)(this + 152) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v2 = (_BYTE *)(*(_QWORD *)(this + 168) + 160 * a2);
  if (v2[32])
    --*(_DWORD *)(this + 176);
  else
    --*(_DWORD *)(this + 180);
  if (*v2)
    *v2 = 0;
  *(_BYTE *)(this + 184) = 1;
  return this;
}

void re::ProbeManager::assignSliceToProbe(uint64_t a1, unint64_t a2, uint64_t a3, id *a4, _OWORD *__src, uint64_t a6)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  int v18;
  _anonymous_namespace_ *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  id v34[2];
  id v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  int v43;
  const char *v44;
  __int16 v45;
  int v46;
  __int16 v47;
  unint64_t v48;
  __int16 v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v7 = __src[5];
  v39 = __src[4];
  v40 = v7;
  v8 = __src[7];
  v41 = __src[6];
  v42 = v8;
  *(_OWORD *)v34 = *__src;
  v36 = __src[1];
  v9 = __src[3];
  v37 = __src[2];
  v38 = v9;
  v10 = *(_QWORD *)(a1 + 152);
  if (v10 <= a2)
  {
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v51 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v43 = 136315906;
    v44 = "operator[]";
    v45 = 1024;
    v46 = 789;
    v47 = 2048;
    v48 = a2;
    v49 = 2048;
    v50 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v16 = (unsigned __int8 *)(*(_QWORD *)(a1 + 168) + 160 * a2);
  v18 = *v16;
  v17 = v16 + 16;
  if (v18)
  {
    memmove(v17 + 16, __src, 0x80uLL);
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 168) + 160 * a2) = 1;
    *((_OWORD *)v17 + 5) = v39;
    *((_OWORD *)v17 + 6) = v40;
    *((_OWORD *)v17 + 7) = v41;
    *((_OWORD *)v17 + 8) = v42;
    *((_OWORD *)v17 + 1) = *(_OWORD *)v34;
    *((_OWORD *)v17 + 2) = v36;
    *((_OWORD *)v17 + 3) = v37;
    *((_OWORD *)v17 + 4) = v38;
  }
  *v17 = 0;
  *((_QWORD *)v17 + 1) = a3;
  if (*(_BYTE *)__src)
    ++*(_DWORD *)(a1 + 176);
  else
    ++*(_DWORD *)(a1 + 180);
  v35 = *a4;
  v19 = (_anonymous_namespace_ *)std::__function::__value_func<void ()(void)>::__value_func[abi:nn180100]((uint64_t)&v36, a6);
  *(_QWORD *)&v38 = a3;
  BYTE8(v38) = *(_BYTE *)__src;
  v20 = *(_QWORD *)(a1 + 200);
  v21 = *(_QWORD *)(a1 + 208);
  if (v21 >= v20)
  {
    v22 = v21 + 1;
    if (v20 < v21 + 1)
    {
      if (*(_QWORD *)(a1 + 192))
      {
        v23 = 2 * v20;
        v24 = v20 == 0;
        v25 = 8;
        if (!v24)
          v25 = v23;
        if (v25 <= v22)
          v26 = v21 + 1;
        else
          v26 = v25;
        re::DynamicArray<re::ProbeManager::SliceOperation>::setCapacity((_QWORD *)(a1 + 192), v26);
      }
      else
      {
        re::DynamicArray<re::ProbeManager::SliceOperation>::setCapacity((_QWORD *)(a1 + 192), v22);
        ++*(_DWORD *)(a1 + 216);
      }
    }
    v21 = *(_QWORD *)(a1 + 208);
  }
  v27 = *(_QWORD *)(a1 + 224);
  v28 = (_QWORD *)(v27 + (v21 << 6));
  *v28 = v35;
  v28[1] = a2;
  v29 = v28 + 2;
  if (*((_QWORD *)&v37 + 1))
  {
    if (*((__int128 **)&v37 + 1) == &v36)
    {
      v29[3] = v29;
      (*(void (**)(_QWORD, _QWORD *))(**((_QWORD **)&v37 + 1) + 24))(*((_QWORD *)&v37 + 1), v29);
    }
    else
    {
      v29[3] = (*(uint64_t (**)(void))(**((_QWORD **)&v37 + 1) + 16))();
    }
  }
  else
  {
    v29[3] = 0;
  }
  v30 = v27 + (v21 << 6);
  v31 = v38;
  *(_BYTE *)(v30 + 56) = BYTE8(v38);
  *(_QWORD *)(v30 + 48) = v31;
  ++*(_QWORD *)(a1 + 208);
  ++*(_DWORD *)(a1 + 216);
  v32 = (__int128 *)*((_QWORD *)&v37 + 1);
  if (*((__int128 **)&v37 + 1) == &v36)
  {
    v33 = 4;
    v32 = &v36;
  }
  else
  {
    if (!*((_QWORD *)&v37 + 1))
      goto LABEL_29;
    v33 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
LABEL_29:
  if (v35)

}

uint64_t re::HashBrown<long long,float,re::Hash<long long>,re::EqualTo<long long>,void,false>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  int8x16_t *v4;
  int8x16_t v5;
  int8x8_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (result != -1)
  {
    v4 = (int8x16_t *)(*a1 + (result & 0xFFFFFFFFFFFFFFF0));
    v5.i64[0] = -1;
    v5.i64[1] = -1;
    v6 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v4, v5), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    if (v6)
      v7 = -1;
    else
      v7 = 0x80;
    v4->i8[result & 0xF] = v7;
    v8 = a1[2];
    v9 = *(_QWORD *)(a1[1] + 16 * result);
    v10 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) >> 27));
    a1[5] ^= (v10 >> 31) ^ v10;
    v11 = a1[4];
    if (v6)
      ++v11;
    v12 = a1[3] - 1;
    a1[3] = v12;
    a1[4] = v11;
    if (v8 >= 0x11 && v12 < v8 >> 2)
      return re::HashBrown<long long,float,re::Hash<long long>,re::EqualTo<long long>,void,false>::resize(a1, 0);
  }
  return result;
}

uint64_t re::Optional<re::ProbeManager::SliceOperation>::operator=(uint64_t a1, void **a2)
{
  int v3;
  BOOL v4;
  BOOL v5;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  unsigned __int8 *v11;
  void *v12;
  void *v13;

  v3 = *(unsigned __int8 *)a2;
  if (*(_BYTE *)a1)
    v4 = 0;
  else
    v4 = v3 == 0;
  if (v4)
    return a1;
  if (*(_BYTE *)a1)
    v5 = v3 == 0;
  else
    v5 = 0;
  if (!v5)
  {
    if (*(_BYTE *)a1)
      v7 = 1;
    else
      v7 = v3 == 0;
    if (v7)
    {
      NS::SharedPtr<MTL::Texture>::operator=((void **)(a1 + 8), a2 + 1);
      *(_QWORD *)(a1 + 16) = a2[2];
      std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)(a1 + 24), (uint64_t)(a2 + 3));
    }
    else
    {
      *(_BYTE *)a1 = 1;
      v10 = a2[2];
      *(_QWORD *)(a1 + 8) = a2[1];
      a2[1] = 0;
      *(_QWORD *)(a1 + 16) = v10;
      v11 = (unsigned __int8 *)a2[6];
      if (v11)
      {
        if (v11 == (unsigned __int8 *)(a2 + 3))
        {
          *(_QWORD *)(a1 + 48) = a1 + 24;
          (*(void (**)(void *))(*(_QWORD *)a2[6] + 24))(a2[6]);
        }
        else
        {
          *(_QWORD *)(a1 + 48) = v11;
          a2[6] = 0;
        }
      }
      else
      {
        *(_QWORD *)(a1 + 48) = 0;
      }
    }
    v13 = a2[7];
    *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
    *(_QWORD *)(a1 + 56) = v13;
    return a1;
  }
  v8 = *(_QWORD **)(a1 + 48);
  if (v8 == (_QWORD *)(a1 + 24))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 24);
    goto LABEL_22;
  }
  if (v8)
  {
    v9 = 5;
LABEL_22:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  v12 = *(void **)(a1 + 8);
  if (v12)
  {

    *(_QWORD *)(a1 + 8) = 0;
  }
  *(_BYTE *)a1 = 0;
  return a1;
}

uint64_t re::Optional<re::ProbeLatLongComputeWorkload>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  BOOL v4;
  BOOL v5;
  _OWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  v3 = *a2;
  if (*(_BYTE *)a1)
    v4 = 0;
  else
    v4 = v3 == 0;
  if (v4)
    return a1;
  if (*(_BYTE *)a1)
    v5 = v3 == 0;
  else
    v5 = 0;
  if (v5)
  {
    v13 = *(_QWORD *)(a1 + 48);
    if (v13)
    {
      if (*(_QWORD *)(a1 + 56))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 40))(v13, *(_QWORD *)(a1 + 64));
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 64) = 0;
      }
      *(_QWORD *)(a1 + 48) = 0;
    }
    v14 = *(_QWORD *)(a1 + 24);
    if (v14)
    {
      if (*(_QWORD *)(a1 + 32))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v14 + 40))(v14, *(_QWORD *)(a1 + 40));
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = 0;
      }
      *(_QWORD *)(a1 + 24) = 0;
    }
    *(_BYTE *)a1 = 0;
    return a1;
  }
  v6 = (_OWORD *)(a1 + 8);
  if (*(_BYTE *)a1)
    v7 = 1;
  else
    v7 = v3 == 0;
  if (!v7)
  {
    *(_BYTE *)a1 = 1;
    *v6 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v15 = *((_QWORD *)a2 + 4);
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    *(_QWORD *)(a1 + 32) = v15;
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)a2 + 4) = 0;
    v16 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 5) = v16;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    v17 = *((_QWORD *)a2 + 7);
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_QWORD *)(a1 + 56) = v17;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 7) = 0;
    v18 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 8) = v18;
    return a1;
  }
  *v6 = *(_OWORD *)(a2 + 8);
  if ((unsigned __int8 *)a1 == a2)
  {
LABEL_18:
    re::FixedArray<float>::operator=((uint64_t *)(a1 + 48), (uint64_t *)a2 + 6);
    return a1;
  }
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *((_QWORD *)a2 + 3);
  if (!v8 || v8 == v9)
  {
    *(_QWORD *)(a1 + 24) = v9;
    *((_QWORD *)a2 + 3) = v8;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(_QWORD *)(a1 + 40);
    v12 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    *(_QWORD *)(a1 + 40) = v12;
    *((_QWORD *)a2 + 4) = v10;
    *((_QWORD *)a2 + 5) = v11;
    goto LABEL_18;
  }
  re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
  result = _os_crash();
  __break(1u);
  return result;
}

double re::ProbeManager::generateWorkload@<D0>(re::ProbeManager *this@<X0>, _BYTE *a2@<X8>, double result@<D0>)
{
  uint64_t v3;
  int64x2_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int v19;
  char *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _anonymous_namespace_ *v29;
  _anonymous_namespace_ *v30;
  _QWORD *v31;
  char *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  BOOL v47;
  int v48;
  int v49;
  _BYTE *v50;
  BOOL v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  BOOL v65;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  BOOL v74;
  int v75;
  int v76;
  uint64_t v77;
  __int128 v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int64x2_t *v85;
  _BYTE *v86;
  unint64_t v87;
  uint64_t v88;
  _BYTE v89[48];
  __int128 v90;
  int v91;
  _BYTE v92[38];
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE v96[84];
  uint64_t v97;
  __int128 v98;
  _QWORD v99[2];
  uint64_t v100;
  int v101;
  _BYTE v102[32];
  int v103;
  uint64_t v104;
  char v105[72];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  v6 = (int64x2_t *)((char *)this + 420);
  if (!*((_QWORD *)this + 26))
    goto LABEL_57;
  v7 = (char *)this + 232;
  if (*((_BYTE *)this + 232))
    goto LABEL_57;
  v8 = *((_QWORD *)this + 28);
  v96[0] = 1;
  *(_QWORD *)&v96[8] = *(id *)v8;
  *(_QWORD *)&v96[16] = *(_QWORD *)(v8 + 8);
  std::__function::__value_func<void ()(void)>::__value_func[abi:nn180100]((uint64_t)&v96[24], v8 + 16);
  v9 = *(_QWORD *)(v8 + 48);
  v96[64] = *(_BYTE *)(v8 + 56);
  *(_QWORD *)&v96[56] = v9;
  re::Optional<re::ProbeManager::SliceOperation>::operator=((uint64_t)this + 232, (void **)v96);
  re::Optional<re::ProbeManager::SliceOperation>::~Optional((uint64_t)v96);
  v10 = *((_QWORD *)this + 26);
  if (v10 != 1)
  {
    if (!v10)
    {
LABEL_151:
      *(_QWORD *)v92 = 0;
      memset(v96, 0, 80);
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v89 = 136315906;
      *(_QWORD *)&v89[4] = "removeAt";
      *(_WORD *)&v89[12] = 1024;
      *(_DWORD *)&v89[14] = 931;
      *(_WORD *)&v89[18] = 2048;
      *(_QWORD *)&v89[20] = 0;
      *(_WORD *)&v89[28] = 2048;
      *(_QWORD *)&v89[30] = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_152:
      memset(v96, 0, 80);
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v92 = 136315906;
      *(_QWORD *)&v92[4] = "operator[]";
      *(_WORD *)&v92[12] = 1024;
      *(_DWORD *)&v92[14] = 468;
      *(_WORD *)&v92[18] = 2048;
      *(_QWORD *)&v92[20] = 0;
      *(_WORD *)&v92[28] = 2048;
      *(_QWORD *)&v92[30] = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_153;
    }
    v11 = *((_QWORD *)this + 28);
    v12 = v11 + (v10 << 6);
    NS::SharedPtr<MTL::Texture>::operator=((void **)v11, (void **)(v12 - 64));
    *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 - 56);
    std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100]((_QWORD *)(v11 + 16), v12 - 48);
    v13 = *(_QWORD *)(v12 - 16);
    *(_BYTE *)(v11 + 56) = *(_BYTE *)(v12 - 8);
    *(_QWORD *)(v11 + 48) = v13;
    v10 = *((_QWORD *)this + 26);
  }
  v14 = *((_QWORD *)this + 28) + (v10 << 6);
  v15 = *(_QWORD **)(v14 - 24);
  if (v15 == (_QWORD *)(v14 - 48))
  {
    v16 = 4;
    v15 = (_QWORD *)(v14 - 48);
    goto LABEL_10;
  }
  if (v15)
  {
    v16 = 5;
LABEL_10:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
  v17 = *(void **)(v14 - 64);
  if (v17)
  {

    *(_QWORD *)(v14 - 64) = 0;
  }
  --*((_QWORD *)this + 26);
  ++*((_DWORD *)this + 54);
  v18 = *((_QWORD *)this + 31);
  if (*((_BYTE *)this + 808))
  {
    if (!*((_BYTE *)this + 304))
      *((_BYTE *)this + 304) = 1;
    v84 = v18;
    v85 = v6;
    v86 = a2;
    *((_QWORD *)this + 39) = 0x6000000000000;
    *((_DWORD *)this + 80) = 256;
    *((_QWORD *)this + 41) = 0x4180000000000000;
    if (!*((_BYTE *)this + 336))
      *((_BYTE *)this + 336) = 1;
    v19 = 0;
    *((_DWORD *)this + 85) = 393216;
    v20 = (char *)this + 344;
    v21 = 256;
    v22 = xmmword_2261359C0;
    v23 = xmmword_2261359D0;
    do
    {
      if (v21 < 0x80)
      {
        *(_QWORD *)v96 = 0x600000000;
        memset(&v96[8], 0, 24);
        *(_QWORD *)&v96[32] = v21;
        *(_QWORD *)&v96[40] = v21;
        *(_QWORD *)&v96[48] = 1;
        *(_DWORD *)&v96[56] = v19;
        *(_DWORD *)&v96[60] = 9;
        *(_DWORD *)&v96[64] = v21;
        re::DynamicArray<re::ProbeSpecularWorkload>::add((uint64_t)v20, (uint64_t)v96);
        v23 = xmmword_2261359D0;
        v22 = xmmword_2261359C0;
      }
      else
      {
        v24 = 0;
        v87 = (v21 + 127) >> 7;
        do
        {
          v25 = 0;
          do
          {
            v26 = 0;
            v88 = v25;
            v27 = v25 << 7;
            do
            {
              *(_DWORD *)v96 = v24;
              *(_DWORD *)&v96[4] = 1;
              *(_QWORD *)&v96[8] = v27;
              *(_QWORD *)&v96[16] = v26;
              *(_OWORD *)&v96[24] = v22;
              *(_OWORD *)&v96[40] = v23;
              *(_DWORD *)&v96[56] = v19;
              *(_DWORD *)&v96[60] = 9;
              *(_DWORD *)&v96[64] = v21;
              re::DynamicArray<re::ProbeSpecularWorkload>::add((uint64_t)v20, (uint64_t)v96);
              v23 = xmmword_2261359D0;
              v22 = xmmword_2261359C0;
              v26 += 128;
            }
            while (v87 << 7 != v26);
            v25 = v88 + 1;
          }
          while (v88 + 1 != v87);
          ++v24;
        }
        while (v24 != 6);
      }
      v21 >>= 1;
      ++v19;
    }
    while (v19 != 9);
    if (*((_BYTE *)this + 296))
    {
      a2 = v86;
      v28 = v84;
      v6 = v85;
      if (!*((_BYTE *)this + 384))
        *((_BYTE *)this + 384) = 1;
      *(_QWORD *)((char *)this + 404) = 0;
      *(_QWORD *)((char *)this + 396) = 0;
      *(_QWORD *)((char *)this + 412) = 0;
      *(_QWORD *)((char *)this + 388) = 0x600000000;
      *v85 = vdupq_n_s64(8uLL);
      v85[1].i64[0] = 1;
      v29 = (re::ProbeManager *)((char *)this + 448);
      *(_DWORD *)v96 = v84;
      *(_QWORD *)&v96[4] = 0x100000008;
      re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((re::ProbeManager *)((char *)this + 448), (uint64_t *)v96);
    }
    else
    {
      v29 = (re::ProbeManager *)((char *)this + 448);
      a2 = v86;
      v28 = v84;
      v6 = v85;
    }
    *(_DWORD *)v96 = v28;
    *(_QWORD *)&v96[4] = 256;
    re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v29, (uint64_t *)v96);
    goto LABEL_57;
  }
  v7 = &v89[16];
  v90 = 0u;
  memset(&v89[16], 0, 32);
  *(_QWORD *)v89 = v18;
  *(_QWORD *)&v89[8] = 0x5555400000000;
  if (!*(_QWORD *)&v89[24])
    goto LABEL_152;
  **(_QWORD **)&v89[32] = 0x20000000200;
  v3 = *(_QWORD *)&v89[24];
  if (*(_QWORD *)&v89[24] <= 1uLL)
  {
LABEL_153:
    memset(v96, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v92 = 136315906;
    *(_QWORD *)&v92[4] = "operator[]";
    *(_WORD *)&v92[12] = 1024;
    *(_DWORD *)&v92[14] = 468;
    *(_WORD *)&v92[18] = 2048;
    *(_QWORD *)&v92[20] = 1;
    *(_WORD *)&v92[28] = 2048;
    *(_QWORD *)&v92[30] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_154;
  }
  *(_QWORD *)(*(_QWORD *)&v89[32] + 8) = 0x10000000100;
  v3 = *(_QWORD *)&v89[24];
  if (*(_QWORD *)&v89[24] <= 2uLL)
  {
LABEL_154:
    memset(v96, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v92 = 136315906;
    *(_QWORD *)&v92[4] = "operator[]";
    *(_WORD *)&v92[12] = 1024;
    *(_DWORD *)&v92[14] = 468;
    *(_WORD *)&v92[18] = 2048;
    *(_QWORD *)&v92[20] = 2;
    *(_WORD *)&v92[28] = 2048;
    *(_QWORD *)&v92[30] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_155;
  }
  *(_QWORD *)(*(_QWORD *)&v89[32] + 16) = 0x8000000080;
  v3 = *(_QWORD *)&v89[24];
  if (*(_QWORD *)&v89[24] <= 3uLL)
  {
LABEL_155:
    memset(v96, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v92 = 136315906;
    *(_QWORD *)&v92[4] = "operator[]";
    *(_WORD *)&v92[12] = 1024;
    *(_DWORD *)&v92[14] = 468;
    *(_WORD *)&v92[18] = 2048;
    *(_QWORD *)&v92[20] = 3;
    *(_WORD *)&v92[28] = 2048;
    *(_QWORD *)&v92[30] = v3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_156;
  }
  *(_QWORD *)(*(_QWORD *)&v89[32] + 24) = 0x4000000040;
  v7 = *(char **)&v89[24];
  if (*(_QWORD *)&v89[24] <= 4uLL)
  {
LABEL_156:
    memset(v96, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v92 = 136315906;
    *(_QWORD *)&v92[4] = "operator[]";
    *(_WORD *)&v92[12] = 1024;
    *(_DWORD *)&v92[14] = 468;
    *(_WORD *)&v92[18] = 2048;
    *(_QWORD *)&v92[20] = 4;
    *(_WORD *)&v92[28] = 2048;
    *(_QWORD *)&v92[30] = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_157;
  }
  *(_QWORD *)(*(_QWORD *)&v89[32] + 32) = 0x2000000020;
  if (v7 == (char *)5)
  {
LABEL_157:
    memset(v96, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v92 = 136315906;
    *(_QWORD *)&v92[4] = "operator[]";
    *(_WORD *)&v92[12] = 1024;
    *(_DWORD *)&v92[14] = 468;
    *(_WORD *)&v92[18] = 2048;
    *(_QWORD *)&v92[20] = 5;
    *(_WORD *)&v92[28] = 2048;
    *(_QWORD *)&v92[30] = 5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_158;
  }
  v31 = *(_QWORD **)&v89[32];
  *(_QWORD *)(*(_QWORD *)&v89[32] + 40) = 0x1000000010;
  if ((unint64_t)v7 <= 6)
  {
LABEL_158:
    memset(v96, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v92 = 136315906;
    *(_QWORD *)&v92[4] = "operator[]";
    *(_WORD *)&v92[12] = 1024;
    *(_DWORD *)&v92[14] = 468;
    *(_WORD *)&v92[18] = 2048;
    *(_QWORD *)&v92[20] = 6;
    *(_WORD *)&v92[28] = 2048;
    *(_QWORD *)&v92[30] = 6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_159;
  }
  v31[6] = 0x800000008;
  if (v7 == (char *)7)
  {
LABEL_159:
    memset(v96, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v92 = 136315906;
    *(_QWORD *)&v92[4] = "operator[]";
    *(_WORD *)&v92[12] = 1024;
    *(_DWORD *)&v92[14] = 468;
    *(_WORD *)&v92[18] = 2048;
    *(_QWORD *)&v92[20] = 7;
    *(_WORD *)&v92[28] = 2048;
    *(_QWORD *)&v92[30] = 7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_160;
  }
  v31[7] = 0x400000004;
  if ((unint64_t)v7 <= 8)
  {
LABEL_160:
    memset(v96, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v92 = 136315906;
    *(_QWORD *)&v92[4] = "operator[]";
    *(_WORD *)&v92[12] = 1024;
    *(_DWORD *)&v92[14] = 468;
    *(_WORD *)&v92[18] = 2048;
    *(_QWORD *)&v92[20] = 8;
    *(_WORD *)&v92[28] = 2048;
    *(_QWORD *)&v92[30] = 8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_161;
  }
  v31[8] = 0x200000002;
  if (v7 == (char *)9)
  {
LABEL_161:
    memset(v96, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v92 = 136315906;
    *(_QWORD *)&v92[4] = "operator[]";
    *(_WORD *)&v92[12] = 1024;
    *(_DWORD *)&v92[14] = 468;
    *(_WORD *)&v92[18] = 2048;
    *(_QWORD *)&v92[20] = 9;
    *(_WORD *)&v92[28] = 2048;
    *(_QWORD *)&v92[30] = 9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_162:
    memset(v96, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v92 = 136315906;
    *(_QWORD *)&v92[4] = "operator[]";
    *(_WORD *)&v92[12] = 1024;
    *(_DWORD *)&v92[14] = 468;
    *(_WORD *)&v92[18] = 2048;
    *(_QWORD *)&v92[20] = 0;
    *(_WORD *)&v92[28] = 2048;
    *(_QWORD *)&v92[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v31[9] = 0x100000001;
  v7 = (char *)v90;
  if (!(_QWORD)v90)
    goto LABEL_162;
  v32 = 0;
  v33 = 0;
  v34 = *((_QWORD *)&v90 + 1);
  v35 = *((_QWORD *)&v90 + 1);
  **((_DWORD **)&v90 + 1) = 0;
  v36 = v35 + 4;
  v38 = *(char **)&v89[24];
  v37 = *(_QWORD *)&v89[32];
  do
  {
    if (v38 == v32)
    {
      memset(v96, 0, 80);
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v92 = 136315906;
      *(_QWORD *)&v92[4] = "operator[]";
      *(_WORD *)&v92[12] = 1024;
      *(_DWORD *)&v92[14] = 468;
      *(_WORD *)&v92[18] = 2048;
      *(_QWORD *)&v92[20] = v32;
      *(_WORD *)&v92[28] = 2048;
      *(_QWORD *)&v92[30] = v38;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_150:
      memset(v96, 0, 80);
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v92 = 136315906;
      *(_QWORD *)&v92[4] = "operator[]";
      *(_WORD *)&v92[12] = 1024;
      *(_DWORD *)&v92[14] = 468;
      *(_WORD *)&v92[18] = 2048;
      *(_QWORD *)&v92[20] = v7;
      *(_WORD *)&v92[28] = 2048;
      *(_QWORD *)&v92[30] = v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_151;
    }
    if (v7 - 1 == v32)
      goto LABEL_150;
    v33 += vmul_lane_s32(*(int32x2_t *)(v37 + 8 * (_QWORD)v32), *(int32x2_t *)(v37 + 8 * (_QWORD)v32), 1).u32[0];
    *(_DWORD *)(v36 + 4 * (_QWORD)v32++) = v33;
  }
  while (v32 != (char *)9);
  v96[0] = 1;
  *(_OWORD *)&v96[8] = *(_OWORD *)v89;
  *(_QWORD *)&v96[24] = *(_QWORD *)&v89[16];
  *(_QWORD *)&v96[32] = v38;
  *(_QWORD *)&v96[40] = v37;
  *(_QWORD *)&v96[48] = *(_QWORD *)&v89[40];
  memset(&v89[16], 0, 32);
  v90 = 0u;
  *(_QWORD *)&v96[56] = v7;
  *(_QWORD *)&v96[64] = v34;
  re::Optional<re::ProbeLatLongComputeWorkload>::operator=((uint64_t)this + 488, v96);
  re::Optional<re::ProbeLatLongComputeWorkload>::~Optional((uint64_t)v96);
  if (*(_QWORD *)&v89[40])
  {
    if ((_QWORD)v90)
    {
      (*(void (**)(void))(**(_QWORD **)&v89[40] + 40))();
      v90 = 0uLL;
    }
    *(_QWORD *)&v89[40] = 0;
  }
  if (*(_QWORD *)&v89[16] && *(_QWORD *)&v89[24])
    (*(void (**)(void))(**(_QWORD **)&v89[16] + 40))();
LABEL_57:
  if (!*((_BYTE *)this + 232))
    goto LABEL_148;
  if (!*((_BYTE *)this + 304)
    && !*((_BYTE *)this + 336)
    && !*((_BYTE *)this + 384)
    && !*((_QWORD *)this + 45)
    && !*((_QWORD *)this + 58)
    && !*((_BYTE *)this + 488))
  {
    v79 = *((_QWORD *)this + 31);
    v80 = *((_QWORD *)this + 19);
    if (v80 <= v79)
    {
      *(_QWORD *)v92 = 0;
      memset(v96, 0, 80);
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v89 = 136315906;
      *(_QWORD *)&v89[4] = "operator[]";
      *(_WORD *)&v89[12] = 1024;
      *(_DWORD *)&v89[14] = 789;
      *(_WORD *)&v89[18] = 2048;
      *(_QWORD *)&v89[20] = v79;
      *(_WORD *)&v89[28] = 2048;
      *(_QWORD *)&v89[30] = v80;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      *(_BYTE *)(*((_QWORD *)this + 21) + 160 * v79 + 16) = 1;
      v81 = *((_QWORD *)this + 35);
      *(_QWORD *)v96 = *((_QWORD *)this + 36);
      if (v81)
      {
        (*(void (**)(uint64_t, re::ProbeManager *, _BYTE *))(*(_QWORD *)v81 + 48))(v81, this, v96);
        *((_BYTE *)this + 184) = 1;
        v96[0] = 0;
        re::Optional<re::ProbeManager::SliceOperation>::operator=((uint64_t)this + 232, (void **)v96);
        re::Optional<re::ProbeManager::SliceOperation>::~Optional((uint64_t)v96);
LABEL_148:
        *a2 = 0;
        return result;
      }
    }
    v82 = std::__throw_bad_function_call[abi:nn180100]();
    *(_QWORD *)&result = re::DynamicArray<re::ProbeSpecularWorkload>::add(v82, v83).n128_u64[0];
    return result;
  }
  *(_QWORD *)v96 = &off_24ED75CB8;
  v96[8] = 0;
  v96[40] = 0;
  v96[48] = 0;
  v99[1] = 0;
  v100 = 0;
  v99[0] = 0;
  v104 = 0;
  v105[0] = 0;
  memset(v102, 0, sizeof(v102));
  v101 = 0;
  v103 = 0;
  v106 = 0u;
  v107 = 0u;
  v108 = 0u;
  NS::SharedPtr<MTL::Texture>::operator=((void **)&v106, (void **)this + 10);
  NS::SharedPtr<MTL::Texture>::operator=((void **)&v106 + 1, (void **)this + 11);
  NS::SharedPtr<MTL::Texture>::operator=((void **)&v107, (void **)this + 13);
  NS::SharedPtr<MTL::Texture>::operator=((void **)&v107 + 1, (void **)this + 14);
  NS::SharedPtr<MTL::Texture>::operator=((void **)&v108, (void **)this + 15);
  NS::SharedPtr<MTL::Texture>::operator=((void **)&v108 + 1, (void **)this + 30);
  if (*((_BYTE *)this + 808))
  {
    if (*((_BYTE *)this + 296))
      v39 = 300714;
    else
      v39 = 299589;
    v40 = *((unsigned __int8 *)this + 304);
    if (*((_BYTE *)this + 304))
    {
      v41 = *((_DWORD *)this + 78);
      v42 = *((_DWORD *)this + 79);
      if ((int)v39 >= v42)
        v43 = *((_DWORD *)this + 79);
      else
        v43 = v39;
      if (!v96[8])
        v96[8] = 1;
      *(_OWORD *)&v96[24] = *((_OWORD *)this + 20);
      *(_DWORD *)&v96[16] = v41;
      *(_DWORD *)&v96[20] = v43;
      *((_DWORD *)this + 79) = v42 - v43;
      if (v42 <= v43)
      {
        v40 = 0;
        *((_BYTE *)this + 304) = 0;
      }
      else
      {
        *((_DWORD *)this + 78) = v43 + v41;
        v40 = 1;
      }
      if ((int)v39 > v42)
        goto LABEL_83;
    }
    else
    {
      v43 = 0;
LABEL_83:
      v49 = v96[40];
      v50 = (char *)this + 336;
      v51 = *((_BYTE *)this + 336) != 0;
      while (!v40 && v51)
      {
        v52 = *((_DWORD *)this + 85);
        *((_BYTE *)this + 336) = 0;
        if (!v49)
        {
          v49 = 1;
          v96[40] = 1;
        }
        v51 = 0;
        *(_DWORD *)&v96[44] = v52;
        v43 += 2 * v52;
        if (v43 >= (int)v39)
          goto LABEL_89;
      }
    }
    v50 = (char *)this + 336;
    if (v43 >= (int)v39)
    {
      v53 = (_QWORD *)((char *)this + 360);
      if (v40)
        goto LABEL_108;
    }
    else
    {
      if (v40)
      {
        v53 = (_QWORD *)((char *)this + 360);
        goto LABEL_108;
      }
      v72 = v96[48];
      v73 = *((unsigned __int8 *)this + 336);
      v74 = *((_BYTE *)this + 384) != 0;
      do
      {
        if (!v74 || v73)
          break;
        v75 = *((_DWORD *)this + 97);
        v76 = *((_DWORD *)this + 98);
        v77 = v6->i64[0];
        v78 = *(__int128 *)((char *)v6 + 8);
        *((_BYTE *)this + 384) = 0;
        if (!v72)
        {
          v72 = 1;
          v96[48] = 1;
        }
        v74 = 0;
        *(_DWORD *)&v96[52] = v75;
        *(_DWORD *)&v96[56] = v76;
        *(_OWORD *)&v96[60] = *(_OWORD *)((char *)this + 396);
        *(_QWORD *)&v96[76] = *(_QWORD *)((char *)this + 412);
        v97 = v77;
        v98 = v78;
        v43 += 40 * v76 * v77 * v78;
      }
      while (v43 < (int)v39);
LABEL_89:
      v53 = (_QWORD *)((char *)this + 360);
    }
    do
    {
      if (*v50)
        break;
      v54 = *((_QWORD *)this + 45);
      if (*((_BYTE *)this + 384) || v54 == 0)
        break;
      v56 = *((_QWORD *)this + 47);
      v57 = v54 - 1;
      if (v43)
      {
        v58 = v56 + 68 * v57;
        v59 = *(_DWORD *)(v58 + 56);
        v60 = *(_QWORD *)(v58 + 32) * *(unsigned int *)(v58 + 4);
        v61 = v59 ? 20 * v60 * *(_QWORD *)(v56 + 68 * v57 + 40) : v60 * *(_QWORD *)(v56 + 68 * v57 + 40);
        if (v61 + v43 >= v39)
          break;
      }
      v62 = v56 + 68 * v57;
      *(_OWORD *)&v89[16] = *(_OWORD *)(v62 + 16);
      *(_OWORD *)&v89[32] = *(_OWORD *)(v62 + 32);
      v90 = *(_OWORD *)(v62 + 48);
      v91 = *(_DWORD *)(v62 + 64);
      *(_OWORD *)v89 = *(_OWORD *)v62;
      *((_QWORD *)this + 45) = v57;
      ++*((_DWORD *)this + 92);
      re::DynamicArray<re::ProbeSpecularWorkload>::add((uint64_t)v99, (uint64_t)v89);
      v63 = *(_DWORD *)&v89[32] * *(_DWORD *)&v89[4];
      v64 = DWORD2(v90) ? 20 * v63 * *(_DWORD *)&v89[40] : v63 * *(_DWORD *)&v89[40];
      v43 += v64;
    }
    while (!*((_BYTE *)this + 304));
LABEL_108:
    if (v96[8])
      v65 = 0;
    else
      v65 = v96[40] == 0;
    if (v65 && v96[48] == 0 && v100 == 0 && v43 < (int)v39)
    {
      do
      {
        if (*((_BYTE *)this + 304))
          break;
        if (*v50)
          break;
        if (*((_BYTE *)this + 384))
          break;
        if (*v53)
          break;
        v69 = *((_QWORD *)this + 58);
        if (!v69)
          break;
        v70 = v69 - 1;
        v71 = *((_QWORD *)this + 60) + 12 * v70;
        *(_QWORD *)v89 = *(_QWORD *)v71;
        *(_DWORD *)&v89[8] = *(_DWORD *)(v71 + 8);
        *((_QWORD *)this + 58) = v70;
        ++*((_DWORD *)this + 118);
        re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add((_anonymous_namespace_ *)&v102[8], (uint64_t *)v89);
        v43 += 24 * *(_DWORD *)&v89[4] * *(_DWORD *)&v89[4] / 3u;
      }
      while (v43 < (int)v39);
    }
  }
  else
  {
    *(_OWORD *)v92 = *((_OWORD *)this + 31);
    re::FixedArray<unsigned long>::FixedArray((uint64_t *)&v92[16], (uint64_t)this + 512);
    re::FixedArray<unsigned int>::FixedArray(&v93, (uint64_t)this + 536);
    v44 = *(_DWORD *)&v92[12];
    if (*(int *)&v92[12] >= 29127)
      v44 = 29127;
    *(_DWORD *)&v92[12] = v44;
    v89[0] = 1;
    *(_OWORD *)&v89[8] = *(_OWORD *)v92;
    re::FixedArray<unsigned long>::FixedArray((uint64_t *)&v89[24], (uint64_t)&v92[16]);
    re::FixedArray<unsigned int>::FixedArray((uint64_t *)&v90, (uint64_t)&v93);
    re::Optional<re::ProbeLatLongComputeWorkload>::operator=((uint64_t)v105, v89);
    re::Optional<re::ProbeLatLongComputeWorkload>::~Optional((uint64_t)v89);
    v45 = *(_DWORD *)&v92[12];
    v46 = *((_DWORD *)this + 127);
    v47 = __OFSUB__(v46, *(_DWORD *)&v92[12]);
    v48 = v46 - *(_DWORD *)&v92[12];
    *((_DWORD *)this + 127) = v48;
    if ((v48 < 0) ^ v47 | (v48 == 0))
    {
      v89[0] = 0;
      re::Optional<re::ProbeLatLongComputeWorkload>::operator=((uint64_t)this + 488, v89);
      re::Optional<re::ProbeLatLongComputeWorkload>::~Optional((uint64_t)v89);
    }
    else
    {
      *((_DWORD *)this + 126) += v45;
    }
    if (v93)
    {
      if (v94)
      {
        (*(void (**)(void))(*(_QWORD *)v93 + 40))();
        v94 = 0;
        v95 = 0;
      }
      v93 = 0;
    }
    if (*(_QWORD *)&v92[16] && *(_QWORD *)&v92[24])
      (*(void (**)(void))(**(_QWORD **)&v92[16] + 40))();
  }
  *a2 = 1;
  re::ProbeWriteContext::ProbeWriteContext((uint64_t)(a2 + 8), (uint64_t)v96);
  re::ProbeWriteContext::~ProbeWriteContext((re::ProbeWriteContext *)v96);
  return result;
}

__n128 re::DynamicArray<re::ProbeSpecularWorkload>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __n128 result;
  __int128 v13;
  __int128 v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::ProbeSpecularWorkload>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::ProbeSpecularWorkload>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  v11 = *(_QWORD *)(a1 + 32) + 68 * v5;
  *(_OWORD *)v11 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v13 = *(_OWORD *)(a2 + 32);
  v14 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(v11 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(v11 + 32) = v13;
  *(_OWORD *)(v11 + 48) = v14;
  *(__n128 *)(v11 + 16) = result;
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

void re::ProbeWriteContext::~ProbeWriteContext(re::ProbeWriteContext *this)
{
  re::ProbeWriteContext::~ProbeWriteContext(this);
  JUMPOUT(0x2276933B8);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_24ED75CB8;
  v2 = (void *)*((_QWORD *)this + 38);
  if (v2)
  {

    *((_QWORD *)this + 38) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 37);
  if (v3)
  {

    *((_QWORD *)this + 37) = 0;
  }
  v4 = (void *)*((_QWORD *)this + 36);
  if (v4)
  {

    *((_QWORD *)this + 36) = 0;
  }
  v5 = (void *)*((_QWORD *)this + 35);
  if (v5)
  {

    *((_QWORD *)this + 35) = 0;
  }
  v6 = (void *)*((_QWORD *)this + 34);
  if (v6)
  {

    *((_QWORD *)this + 34) = 0;
  }
  v7 = (void *)*((_QWORD *)this + 33);
  if (v7)
  {

    *((_QWORD *)this + 33) = 0;
  }
  re::Optional<re::ProbeLatLongComputeWorkload>::~Optional((uint64_t)this + 192);
  v8 = *((_QWORD *)this + 19);
  if (v8)
  {
    if (*((_QWORD *)this + 23))
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    *((_QWORD *)this + 23) = 0;
    *((_QWORD *)this + 20) = 0;
    *((_QWORD *)this + 21) = 0;
    *((_QWORD *)this + 19) = 0;
    ++*((_DWORD *)this + 44);
  }
  v9 = *((_QWORD *)this + 14);
  if (v9)
  {
    if (*((_QWORD *)this + 18))
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    *((_QWORD *)this + 18) = 0;
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)this + 16) = 0;
    *((_QWORD *)this + 14) = 0;
    ++*((_DWORD *)this + 34);
  }
}

uint64_t re::ProbeWriteContext::ProbeWriteContext(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  int v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = &off_24ED75CB8;
  v4 = *(unsigned __int8 *)(a2 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v5;
  }
  v6 = *(unsigned __int8 *)(a2 + 40);
  *(_BYTE *)(a1 + 40) = v6;
  if (v6)
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  v7 = *(unsigned __int8 *)(a2 + 48);
  *(_BYTE *)(a1 + 48) = v7;
  if (v7)
  {
    v8 = *(_OWORD *)(a2 + 52);
    v9 = *(_OWORD *)(a2 + 68);
    v10 = *(_OWORD *)(a2 + 84);
    *(_QWORD *)(a1 + 100) = *(_QWORD *)(a2 + 100);
    *(_OWORD *)(a1 + 84) = v10;
    *(_OWORD *)(a1 + 68) = v9;
    *(_OWORD *)(a1 + 52) = v8;
  }
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  v11 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v11;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  v12 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = v12;
  v13 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = v13;
  ++*(_DWORD *)(a2 + 136);
  ++*(_DWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  v14 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v14;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  v15 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = v15;
  v16 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = v16;
  ++*(_DWORD *)(a2 + 176);
  ++*(_DWORD *)(a1 + 176);
  re::Optional<re::ProbeLatLongComputeWorkload>::Optional(a1 + 192, (unsigned __int8 *)(a2 + 192));
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a2 + 280) = 0;
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a2 + 288) = 0;
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a2 + 296) = 0;
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a2 + 304) = 0;
  return a1;
}

__n128 re::Optional<re::ProbeLatLongComputeWorkload>::Optional(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  __n128 result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a2;
  *(_BYTE *)a1 = v2;
  if (v2)
  {
    result = *(__n128 *)(a2 + 8);
    *(__n128 *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v4 = *((_QWORD *)a2 + 4);
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    *(_QWORD *)(a1 + 32) = v4;
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)a2 + 4) = 0;
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 5) = v5;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 64) = 0;
    v6 = *((_QWORD *)a2 + 7);
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
    *(_QWORD *)(a1 + 56) = v6;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 7) = 0;
    v7 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 8) = v7;
  }
  return result;
}

_QWORD *re::DynamicArray<re::ProbeSpecularWorkload>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (is_mul_ok(a2, 0x44uLL))
        {
          v2 = 68 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 68 * a2, 4);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 68 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 68, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::ProbeSpecularWorkload>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::Optional<re::ProbeManager::ProbeSlice>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  _OWORD *v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::Optional<re::ProbeManager::ProbeSlice>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xA0uLL))
        {
          v2 = 160 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 160 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 160, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v7 + 2;
        v11 = 160 * v9;
        v12 = (_OWORD *)(v8 + 16);
        do
        {
          v13 = *((unsigned __int8 *)v12 - 16);
          *((_BYTE *)v10 - 16) = v13;
          if (v13)
          {
            *v10 = *v12;
            v14 = v12[1];
            v15 = v12[2];
            v16 = v12[4];
            v10[3] = v12[3];
            v10[4] = v16;
            v10[1] = v14;
            v10[2] = v15;
            v17 = v12[5];
            v18 = v12[6];
            v19 = v12[8];
            v10[7] = v12[7];
            v10[8] = v19;
            v10[5] = v17;
            v10[6] = v18;
          }
          v10 += 10;
          v12 += 10;
          v11 -= 160;
        }
        while (v11);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t re::HashBrown<long long,unsigned long,re::Hash<long long>,re::EqualTo<long long>,void,false>::internalAdd(_anonymous_namespace_ *a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<long long,unsigned long,re::Hash<long long>,re::EqualTo<long long>,void,false>::resize((uint64_t *)a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v11;
  v17 = *a2;
  v18 = *a3;
  v19 = *((_QWORD *)a1 + 1);
  *(_QWORD *)(v19 + 16 * v16) = *a2;
  v20 = v19 + 16 * v16;
  *(_QWORD *)(v20 + 8) = v18;
  result = v20 + 8;
  v22 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v22;
  v23 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) >> 27));
  *((_QWORD *)a1 + 5) ^= (v23 >> 31) ^ v23;
  return result;
}

uint64_t re::HashBrown<long long,unsigned long,re::Hash<long long>,re::EqualTo<long long>,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[3] + a2;
  v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    v5 = 3 * v2;
    v6 = v5 << 6;
    v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7)
      v4 = v7;
    v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<long long,unsigned long,re::Hash<long long>,re::EqualTo<long long>,void,false>::doResize(a1, v3);
}

uint64_t re::HashBrown<long long,unsigned long,re::Hash<long long>,re::EqualTo<long long>,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _OWORD v25[4];

  v4 = a1[7];
  memset(v25, 0, sizeof(v25));
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(v25, v4, a2);
  v5 = a1[2];
  if (v5 >= 0x10)
  {
    v6 = 0;
    v7 = v5 >> 4;
    while (1)
    {
      v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v6)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v9 = (unsigned __int16)~v8;
      if (v8 != 0xFFFF)
        break;
      v6 += 16;
      if (!--v7)
        goto LABEL_7;
    }
    v10 = __clz(__rbit64(v9)) + v6;
    while (v10 != -1)
    {
      re::HashBrown<long long,unsigned long,re::Hash<long long>,re::EqualTo<long long>,void,false>::internalAdd(v25, a1[1] + 16 * v10, a1[1] + 16 * v10 + 8);
      v20 = v10 >> 4;
      v5 = a1[2];
      if (v10 >> 4 >= v5 >> 4)
        break;
      v21 = __clz(__rbit64((-2 << (v10 & 0xF)) & v9));
      if (v21 >= 0x40)
      {
        v22 = 16 * v20;
        v23 = ~v20 + (v5 >> 4);
        while (v23)
        {
          v9 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v22 + 16)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
          v24 = __clz(__rbit64(v9));
          v22 += 16;
          --v23;
          if (v24 <= 0x3F)
          {
            v10 = v24 + v22;
            goto LABEL_20;
          }
        }
        break;
      }
      v10 = v21 + (v10 & 0xFFFFFFFFFFFFFFF0);
LABEL_20:
      ;
    }
  }
LABEL_7:
  v12 = *((_QWORD *)&v25[3] + 1);
  *((_QWORD *)&v25[3] + 1) = a1[7];
  result = *((_QWORD *)&v25[3] + 1);
  v13 = v25[0];
  v14 = v25[1];
  *(_QWORD *)&v25[1] = v5;
  v15 = *a1;
  v16 = a1[1];
  *(_QWORD *)&v25[0] = *a1;
  *((_QWORD *)&v25[0] + 1) = v16;
  v17 = v25[2];
  v18 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v25[3];
  a1[7] = v12;
  *(_OWORD *)((char *)&v25[2] + 8) = v18;
  v19 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v13;
  *((_OWORD *)a1 + 1) = v14;
  *((_OWORD *)a1 + 2) = v17;
  *(_OWORD *)((char *)&v25[1] + 8) = v19;
  if (result)
  {
    if (v16)
      *((_QWORD *)&v25[0] + 1) = 0;
    if (v15)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

_QWORD *re::DynamicArray<re::ProbeManager::ProbeAdd>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::ProbeManager::ProbeAdd>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ProbeManager::ProbeAdd>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::ProbeManager::ProbeAdd>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ProbeManager::ProbeAdd>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x50uLL))
        {
          v2 = 80 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 80, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 80 * v9;
        v11 = v8 + 8;
        v12 = v7;
        do
        {
          v13 = *(id *)v11;
          *v12 = *(_QWORD *)(v11 - 8);
          v12[1] = v13;
          *(_QWORD *)v11 = 0;
          v14 = *(_OWORD *)(v11 + 8);
          v15 = *(_OWORD *)(v11 + 24);
          v16 = *(_OWORD *)(v11 + 40);
          *(_QWORD *)((char *)v12 + 61) = *(_QWORD *)(v11 + 53);
          *((_OWORD *)v12 + 2) = v15;
          *((_OWORD *)v12 + 3) = v16;
          *((_OWORD *)v12 + 1) = v14;
          if (*(_QWORD *)v11)
          {

            *(_QWORD *)v11 = 0;
          }
          v11 += 80;
          v12 += 10;
          v10 -= 80;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::ProbeManager::ProbeUpdate>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  int v14;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ProbeManager::ProbeUpdate>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x18uLL))
        {
          v2 = 24 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 24 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 24, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 24 * v9;
        v11 = v8 + 8;
        v12 = v7;
        do
        {
          v13 = *(id *)v11;
          *v12 = *(_QWORD *)(v11 - 8);
          v12[1] = v13;
          *(_QWORD *)v11 = 0;
          v14 = *(_DWORD *)(v11 + 8);
          *((_BYTE *)v12 + 20) = *(_BYTE *)(v11 + 12);
          *((_DWORD *)v12 + 4) = v14;
          if (*(_QWORD *)v11)
          {

            *(_QWORD *)v11 = 0;
          }
          v11 += 24;
          v12 += 3;
          v10 -= 24;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

uint64_t re::HashBrown<long long,float,re::Hash<long long>,re::EqualTo<long long>,void,false>::internalAdd(_anonymous_namespace_ *a1, unint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  unint64_t v23;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<long long,float,re::Hash<long long>,re::EqualTo<long long>,void,false>::resize((uint64_t *)a1, 1u);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v11;
  v17 = *a2;
  v18 = *a3;
  v19 = *((_QWORD *)a1 + 1);
  *(_QWORD *)(v19 + 16 * v16) = *a2;
  v20 = v19 + 16 * v16;
  *(_DWORD *)(v20 + 8) = v18;
  result = v20 + 8;
  v22 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v22;
  v23 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) >> 27));
  *((_QWORD *)a1 + 5) ^= (v23 >> 31) ^ v23;
  return result;
}

uint64_t re::HashBrown<long long,float,re::Hash<long long>,re::EqualTo<long long>,void,false>::resize(uint64_t *a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __n128 v15;
  unsigned __int16 v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _QWORD v27[2];
  uint64_t v28;
  __int128 v29;
  _BYTE v30[48];

  v3 = a1[2];
  v4 = a1[3] + a2;
  v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7)
    v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v7 = (v6 << 7) / 0x97;
  v8 = a1[7];
  v29 = 0u;
  *(_OWORD *)v30 = 0u;
  if (v5 > v3)
    v9 = v7;
  else
    v9 = v4;
  memset(&v30[16], 0, 32);
  re::HashBrown<unsigned long long,re::ecs2::PortalServiceQuery::WorldType,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::init(&v29, v8, v9);
  v27[0] = a1;
  v11 = a1[2];
  if (v11 >= 0x10)
  {
    v12 = 0;
    v13 = *a1;
    v14 = v11 >> 4;
    v15 = (__n128)xmmword_2260EE390;
    v10.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v16 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v13 + v12)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v27[1] = (unsigned __int16)~v16;
      if (v16 != 0xFFFF)
        break;
      v12 += 16;
      if (!--v14)
        goto LABEL_14;
    }
    v17 = __clz(__rbit64((unsigned __int16)~v16)) + v12;
    v28 = v17;
    if (v17 != -1)
    {
      do
      {
        re::HashBrown<long long,float,re::Hash<long long>,re::EqualTo<long long>,void,false>::internalAdd(&v29, *(_QWORD *)(v27[0] + 8) + 16 * v17, *(_QWORD *)(v27[0] + 8) + 16 * v17 + 8, v15, v10);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v27);
        v17 = v28;
      }
      while (v28 != -1);
      v11 = a1[2];
    }
  }
LABEL_14:
  v19 = *(_QWORD *)&v30[40];
  *(_QWORD *)&v30[40] = a1[7];
  result = *(_QWORD *)&v30[40];
  v20 = v29;
  v21 = *(_OWORD *)v30;
  *(_QWORD *)v30 = v11;
  v22 = *a1;
  v23 = a1[1];
  *(_QWORD *)&v29 = *a1;
  *((_QWORD *)&v29 + 1) = v23;
  v24 = *(_OWORD *)&v30[16];
  v25 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v30[32];
  a1[7] = v19;
  *(_OWORD *)&v30[24] = v25;
  v26 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v20;
  *((_OWORD *)a1 + 1) = v21;
  *((_OWORD *)a1 + 2) = v24;
  *(_OWORD *)&v30[8] = v26;
  if (result)
  {
    if (v23)
      *((_QWORD *)&v29 + 1) = 0;
    if (v22)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

void std::__function::__func<void (re::ProbeManager::*)(long long),std::allocator<void (re::ProbeManager::*)(long long)>,void ()(re::ProbeManager&,long long)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

__n128 std::__function::__func<void (re::ProbeManager::*)(long long),std::allocator<void (re::ProbeManager::*)(long long)>,void ()(re::ProbeManager&,long long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24ED75CF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void (re::ProbeManager::*)(long long),std::allocator<void (re::ProbeManager::*)(long long)>,void ()(re::ProbeManager&,long long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED75CF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void (re::ProbeManager::*)(long long),std::allocator<void (re::ProbeManager::*)(long long)>,void ()(re::ProbeManager&,long long)>::operator()(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t (*v3)(_QWORD *, _QWORD);
  uint64_t v4;
  _QWORD *v5;

  v3 = *(uint64_t (**)(_QWORD *, _QWORD))(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = (_QWORD *)(a2 + (v4 >> 1));
  if ((v4 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD))(*v5 + v3);
  return v3(v5, *a3);
}

uint64_t std::__function::__func<void (re::ProbeManager::*)(long long),std::allocator<void (re::ProbeManager::*)(long long)>,void ()(re::ProbeManager&,long long)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<void (re::ProbeManager::*)(long long),std::allocator<void (re::ProbeManager::*)(long long)>,void ()(re::ProbeManager&,long long)>::target_type()
{
}

uint64_t re::Optional<re::ProbeManager::SliceOperation>::~Optional(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;

  if (!*(_BYTE *)a1)
    return a1;
  v2 = *(_QWORD **)(a1 + 48);
  if (v2 == (_QWORD *)(a1 + 24))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 24);
  }
  else
  {
    if (!v2)
      goto LABEL_7;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_7:
  v4 = *(void **)(a1 + 8);
  if (v4)
  {

    *(_QWORD *)(a1 + 8) = 0;
  }
  return a1;
}

uint64_t re::Optional<re::ProbeLatLongComputeWorkload>::~Optional(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)a1)
  {
    v2 = *(_QWORD *)(a1 + 48);
    if (v2)
    {
      if (*(_QWORD *)(a1 + 56))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 64));
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 64) = 0;
      }
      *(_QWORD *)(a1 + 48) = 0;
    }
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      if (*(_QWORD *)(a1 + 32))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 40));
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 40) = 0;
      }
      *(_QWORD *)(a1 + 24) = 0;
    }
  }
  return a1;
}

_QWORD *re::DynamicArray<re::ProbeManager::SliceOperation>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;

  v3 = result[1];
  if (v3 == a2)
    return result;
  v5 = result;
  if (result[2] > a2)
    return result;
  result = (_QWORD *)*result;
  if (!*v5)
  {
    result = (_QWORD *)re::DynamicArray<re::ProbeManager::SliceOperation>::setCapacity(v5, a2);
    ++*((_DWORD *)v5 + 6);
    return result;
  }
  if (a2)
  {
    if (a2 >> 58)
    {
      re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
      _os_crash();
      __break(1u);
    }
    else
    {
      v2 = a2 << 6;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
      if (result)
      {
        v7 = result;
        if (!v5[1])
          goto LABEL_28;
        goto LABEL_11;
      }
    }
    re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v7 = 0;
  if (!v3)
    goto LABEL_28;
LABEL_11:
  v8 = v5[4];
  v9 = v5[2];
  if (!v9)
    goto LABEL_27;
  v10 = (_QWORD *)(v8 + 40);
  v11 = v7 + 5;
  v12 = v9 << 6;
  do
  {
    v13 = *(v10 - 4);
    *(v11 - 5) = *(v10 - 5);
    *(v10 - 5) = 0;
    *(v11 - 4) = v13;
    v14 = (_QWORD *)*v10;
    if (*v10)
    {
      if (v10 - 3 == v14)
      {
        *v11 = v11 - 3;
        (*(void (**)(_QWORD))(*(_QWORD *)*v10 + 24))(*v10);
      }
      else
      {
        *v11 = v14;
        *v10 = 0;
      }
    }
    else
    {
      *v11 = 0;
    }
    v15 = v10[1];
    *((_BYTE *)v11 + 16) = *((_BYTE *)v10 + 16);
    v11[1] = v15;
    v16 = (_QWORD *)*v10;
    if (v10 - 3 == (_QWORD *)*v10)
    {
      v16 = v10 - 3;
      v17 = 4;
    }
    else
    {
      if (!v16)
        goto LABEL_23;
      v17 = 5;
    }
    (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_23:
    v18 = (void *)*(v10 - 5);
    if (v18)
    {

      *(v10 - 5) = 0;
    }
    v10 += 8;
    v11 += 8;
    v12 -= 64;
  }
  while (v12);
  v8 = v5[4];
LABEL_27:
  result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
LABEL_28:
  v5[4] = v7;
  v5[1] = a2;
  return result;
}

void ___ZN2re18PortalUserDefaults18maximumPortalCountEv_block_invoke(uint64_t a1, const char *a2)
{
  re *v2;
  NSObject *v3;
  _BYTE v4[4];
  int v5;
  uint8_t buf[4];
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  re::Defaults::intValue((re::Defaults *)"maximumPortalCount", a2, (uint64_t)v4);
  if (v4[0] && (v5 & 0x80000000) == 0)
    re::PortalUserDefaults::maximumPortalCount(void)::maximumPortalCount = v5;
  v3 = *re::graphicsLogObjects(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v7 = re::PortalUserDefaults::maximumPortalCount(void)::maximumPortalCount;
    _os_log_impl(&dword_224FE9000, v3, OS_LOG_TYPE_DEFAULT, "The maximum portal count is now %u.", buf, 8u);
  }
}

uint64_t *re::introspect_MaterialParameterType(re *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  unint64_t i;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  unint64_t j;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  unsigned __int8 *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_mutex_base *v31;
  uint64_t *result;
  re *v33;
  uint64_t *v34;
  re *v35;
  uint64_t *v36;
  re *v37;
  uint64_t *v38;
  re *v39;
  uint64_t *v40;
  re *v41;
  uint64_t *v42;
  re *v43;
  uint64_t *v44;
  re *v45;
  uint64_t *v46;
  re *v47;
  uint64_t *v48;
  re *v49;
  uint64_t *v50;
  re *v51;
  uint64_t *v52;
  re *v53;
  uint64_t *v54;
  re *v55;
  uint64_t *v56;
  re *v57;
  uint64_t *v58;
  re *v59;
  uint64_t *v60;
  re *v61;
  uint64_t *v62;
  re *v63;
  uint64_t *v64;
  re *v65;
  uint64_t *v66;
  re *v67;
  uint64_t *v68;
  re *v69;
  uint64_t *v70;
  re *v71;
  uint64_t *v72;
  re *v73;
  uint64_t *v74;
  re *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  StringID v81;
  _QWORD v82[2];
  _QWORD v83[61];

  v2 = (int)this;
  v3 = atomic_load((unsigned __int8 *)&qword_254119000);
  if ((v3 & 1) == 0)
  {
    v33 = (re *)__cxa_guard_acquire(&qword_254119000);
    if ((_DWORD)v33)
    {
      v34 = re::introspectionAllocator(v33);
      v35 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 24, 8);
      *(_DWORD *)v35 = 1;
      *((_QWORD *)v35 + 1) = 1;
      *((_QWORD *)v35 + 2) = "Float";
      qword_255835558 = (uint64_t)v35;
      v36 = re::introspectionAllocator(v35);
      v37 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 24, 8);
      *(_DWORD *)v37 = 1;
      *((_QWORD *)v37 + 1) = 32;
      *((_QWORD *)v37 + 2) = "Vector2";
      qword_255835560 = (uint64_t)v37;
      v38 = re::introspectionAllocator(v37);
      v39 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 24, 8);
      *(_DWORD *)v39 = 1;
      *((_QWORD *)v39 + 1) = 33;
      *((_QWORD *)v39 + 2) = "Vector3";
      qword_255835568 = (uint64_t)v39;
      v40 = re::introspectionAllocator(v39);
      v41 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 24, 8);
      *(_DWORD *)v41 = 1;
      *((_QWORD *)v41 + 1) = 34;
      *((_QWORD *)v41 + 2) = "Vector4";
      qword_255835570 = (uint64_t)v41;
      v42 = re::introspectionAllocator(v41);
      v43 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 24, 8);
      *(_DWORD *)v43 = 1;
      *((_QWORD *)v43 + 1) = 48;
      *((_QWORD *)v43 + 2) = "Matrix2x2";
      qword_255835578 = (uint64_t)v43;
      v44 = re::introspectionAllocator(v43);
      v45 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 24, 8);
      *(_DWORD *)v45 = 1;
      *((_QWORD *)v45 + 1) = 49;
      *((_QWORD *)v45 + 2) = "Matrix3x3";
      qword_255835580 = (uint64_t)v45;
      v46 = re::introspectionAllocator(v45);
      v47 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 24, 8);
      *(_DWORD *)v47 = 1;
      *((_QWORD *)v47 + 1) = 50;
      *((_QWORD *)v47 + 2) = "Matrix4x4";
      qword_255835588 = (uint64_t)v47;
      v48 = re::introspectionAllocator(v47);
      v49 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v48 + 32))(v48, 24, 8);
      *(_DWORD *)v49 = 1;
      *((_QWORD *)v49 + 1) = 64;
      *((_QWORD *)v49 + 2) = "Texture";
      qword_255835590 = (uint64_t)v49;
      v50 = re::introspectionAllocator(v49);
      v51 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v50 + 32))(v50, 24, 8);
      *(_DWORD *)v51 = 1;
      *((_QWORD *)v51 + 1) = 128;
      *((_QWORD *)v51 + 2) = "Buffer";
      qword_255835598 = (uint64_t)v51;
      v52 = re::introspectionAllocator(v51);
      v53 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v52 + 32))(v52, 24, 8);
      *(_DWORD *)v53 = 1;
      *((_QWORD *)v53 + 1) = 192;
      *((_QWORD *)v53 + 2) = "Sampler";
      qword_2558355A0 = (uint64_t)v53;
      v54 = re::introspectionAllocator(v53);
      v55 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v54 + 32))(v54, 24, 8);
      *(_DWORD *)v55 = 1;
      *((_QWORD *)v55 + 1) = 0;
      *((_QWORD *)v55 + 2) = "Invalid";
      qword_2558355A8 = (uint64_t)v55;
      v56 = re::introspectionAllocator(v55);
      v57 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v56 + 32))(v56, 24, 8);
      *(_DWORD *)v57 = 1;
      *((_QWORD *)v57 + 1) = 2;
      *((_QWORD *)v57 + 2) = "Bool";
      qword_2558355B0 = (uint64_t)v57;
      v58 = re::introspectionAllocator(v57);
      v59 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v58 + 32))(v58, 24, 8);
      *(_DWORD *)v59 = 1;
      *((_QWORD *)v59 + 1) = 3;
      *((_QWORD *)v59 + 2) = "Int";
      qword_2558355B8 = (uint64_t)v59;
      v60 = re::introspectionAllocator(v59);
      v61 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v60 + 32))(v60, 24, 8);
      *(_DWORD *)v61 = 1;
      *((_QWORD *)v61 + 1) = 4;
      *((_QWORD *)v61 + 2) = "Int2";
      qword_2558355C0 = (uint64_t)v61;
      v62 = re::introspectionAllocator(v61);
      v63 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v62 + 32))(v62, 24, 8);
      *(_DWORD *)v63 = 1;
      *((_QWORD *)v63 + 1) = 5;
      *((_QWORD *)v63 + 2) = "Int3";
      qword_2558355C8 = (uint64_t)v63;
      v64 = re::introspectionAllocator(v63);
      v65 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v64 + 32))(v64, 24, 8);
      *(_DWORD *)v65 = 1;
      *((_QWORD *)v65 + 1) = 6;
      *((_QWORD *)v65 + 2) = "Int4";
      qword_2558355D0 = (uint64_t)v65;
      v66 = re::introspectionAllocator(v65);
      v67 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v66 + 32))(v66, 24, 8);
      *(_DWORD *)v67 = 1;
      *((_QWORD *)v67 + 1) = 7;
      *((_QWORD *)v67 + 2) = "UInt";
      qword_2558355D8 = (uint64_t)v67;
      v68 = re::introspectionAllocator(v67);
      v69 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v68 + 32))(v68, 24, 8);
      *(_DWORD *)v69 = 1;
      *((_QWORD *)v69 + 1) = 8;
      *((_QWORD *)v69 + 2) = "UInt2";
      qword_2558355E0 = (uint64_t)v69;
      v70 = re::introspectionAllocator(v69);
      v71 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v70 + 32))(v70, 24, 8);
      *(_DWORD *)v71 = 1;
      *((_QWORD *)v71 + 1) = 9;
      *((_QWORD *)v71 + 2) = "UInt3";
      qword_2558355E8 = (uint64_t)v71;
      v72 = re::introspectionAllocator(v71);
      v73 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v72 + 32))(v72, 24, 8);
      *(_DWORD *)v73 = 1;
      *((_QWORD *)v73 + 1) = 10;
      *((_QWORD *)v73 + 2) = "UInt4";
      qword_2558355F0 = (uint64_t)v73;
      v74 = re::introspectionAllocator(v73);
      v75 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v74 + 32))(v74, 24, 8);
      *(_DWORD *)v75 = 1;
      *((_QWORD *)v75 + 1) = 20;
      *((_QWORD *)v75 + 2) = "Color3";
      qword_2558355F8 = (uint64_t)v75;
      v76 = re::introspectionAllocator(v75);
      v77 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v76 + 32))(v76, 24, 8);
      *(_DWORD *)v77 = 1;
      *(_QWORD *)(v77 + 8) = 21;
      *(_QWORD *)(v77 + 16) = "Color4";
      qword_255835600 = v77;
      __cxa_guard_release(&qword_254119000);
    }
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254119008);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254119008))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254119668, "MaterialParameterType", 1, 1, 1, 1);
    qword_254119668 = (uint64_t)&off_24ED7D9E8;
    qword_2541196A8 = (uint64_t)&re::introspect_MaterialParameterType(BOOL)::enumTable;
    dword_254119678 = 9;
    __cxa_guard_release(&qword_254119008);
  }
  if (v2)
  {
    if ((_MergedGlobals_382 & 1) != 0)
      return &qword_254119668;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)v83);
    v5 = _MergedGlobals_382;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)v83);
    if ((v5 & 1) != 0)
      return &qword_254119668;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((_MergedGlobals_382 & 1) != 0)
    {
LABEL_34:
      v31 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v31);
      return &qword_254119668;
    }
  }
  _MergedGlobals_382 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254119668, a2);
  v79 = 0x713A1216588B58F8;
  v80 = "MaterialParameterType";
  v83[0] = 0x31CD534126;
  v83[1] = "uint8_t";
  v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v83);
  if (v9)
  {
    v10 = *v9;
    re::StringID::destroyString((re::StringID *)v83);
    v11 = (unsigned int *)qword_2541196A8;
    v82[1] = v10;
    re::TypeBuilder::beginEnumType((uint64_t)v83, &v79, 1, 1, (uint64_t)v82);
    v13 = *v11;
    if ((_DWORD)v13)
    {
      for (i = 0; i < v13; ++i)
      {
        v15 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * i);
        if (*(_DWORD *)v15 == 1)
        {
          v16 = *(char **)(v15 + 16);
          if (v16)
          {
            v17 = *v16;
            if (*v16)
            {
              v18 = v16[1];
              if (v18)
              {
                v19 = (unsigned __int8 *)(v16 + 2);
                do
                {
                  v17 = 31 * v17 + v18;
                  v20 = *v19++;
                  v18 = v20;
                }
                while (v20);
              }
            }
          }
          else
          {
            v17 = 0;
          }
          v21 = *(_QWORD *)(v15 + 8);
          *(_QWORD *)&v81.var0 = 2 * v17;
          v81.var1 = v16;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v83, v21, &v81);
          re::StringID::destroyString((re::StringID *)&v81);
          v13 = *v11;
        }
      }
      if (v13)
      {
        for (j = 0; j < v13; ++j)
        {
          v23 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8 * j);
          if (*(_DWORD *)v23 == 2)
          {
            v24 = *(char **)(v23 + 16);
            if (v24)
            {
              v25 = *v24;
              if (*v24)
              {
                v26 = v24[1];
                if (v26)
                {
                  v27 = (unsigned __int8 *)(v24 + 2);
                  do
                  {
                    v25 = 31 * v25 + v26;
                    v28 = *v27++;
                    v26 = v28;
                  }
                  while (v28);
                }
              }
            }
            else
            {
              v25 = 0;
            }
            v29 = *(_QWORD *)(v23 + 8);
            *(_QWORD *)&v81.var0 = 2 * v25;
            v81.var1 = v24;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v83, v29, &v81);
            re::StringID::destroyString((re::StringID *)&v81);
            v13 = *v11;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v83, v30);
    xmmword_254119688 = (__int128)v81;
    re::StringID::destroyString((re::StringID *)&v79);
    if ((v2 & 1) != 0)
      return &qword_254119668;
    goto LABEL_34;
  }
  re::StringID::destroyString((re::StringID *)v83);
  re::internal::assertLog((re::internal *)5, v78, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "MaterialParameterType", v79, v80);
  result = (uint64_t *)_os_crash();
  __break(1u);
  return result;
}

void re::introspect_MaterialTextureParam(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _QWORD v3[2];
  __int128 v4;

  v2 = atomic_load((unsigned __int8 *)&qword_254119010);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254119010))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254119A18, "MaterialTextureParam", 40, 8, 0, 0);
    qword_254119A18 = (uint64_t)&off_24ED7DA28;
    qword_254119A58 = (uint64_t)re::internal::defaultConstruct<re::MaterialTextureParam>;
    dword_254119A28 = 11;
    __cxa_guard_release(&qword_254119010);
  }
  if ((byte_254118FE9 & 1) == 0)
  {
    byte_254118FE9 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254119A18, a2);
    v3[0] = 0x8270B19F5FE36E32;
    v3[1] = "MaterialTextureParam";
    xmmword_254119A38 = v4;
    re::StringID::destroyString((re::StringID *)v3);
  }
}

_QWORD *re::internal::defaultConstruct<re::MaterialTextureParam>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  result = re::DynamicString::setCapacity((_QWORD *)a3, 0);
  *(_DWORD *)(a3 + 32) = 0;
  return result;
}

uint64_t `anonymous namespace'::materialTextureParamSerialize(_QWORD *a1, uint64_t a2, re::DynamicString *a3, re::DynamicString *a4)
{
  return re::MaterialTextureParam::introspectionSerialize(a3, a1, a2, a4);
}

uint64_t `anonymous namespace'::materialTextureParamDeserialize(re::Allocator *a1, _QWORD *a2, int a3, uint64_t a4, re *a5)
{
  return re::MaterialTextureParam::introspectionDeserialize(a4, a1, a2, a3, a5);
}

uint64_t `anonymous namespace'::materialTextureParamDeepCopy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>,(std::__variant_detail::_Trait)1> const&>(a5, a4);
  return 1;
}

uint64_t `anonymous namespace'::introspectionWalkerMemberCount(_anonymous_namespace_ *this, const void *a2)
{
  return 1;
}

uint64_t `anonymous namespace'::introspectionWalkerMember(_anonymous_namespace_ *this, uint64_t a2, const void *a3)
{
  int v3;
  unsigned __int8 v4;
  uint64_t *v5;
  unsigned __int8 v6;
  int v8;
  const re::IntrospectionBase *v9;
  __guard *v10;
  int v11;
  const re::IntrospectionBase *v12;
  uint64_t *v13;

  if (!a2)
    goto LABEL_9;
  v3 = *(_DWORD *)(a2 + 32);
  if (!v3)
  {
    if ((v6 & 1) != 0)
    {
      v5 = &re::introspect<re::DynamicString>(void)::info;
      return *v5;
    }
    v5 = &re::introspect<re::DynamicString>(void)::info;
    v13 = &re::introspect<re::DynamicString>(void)::info;
    if (!v11)
      return *v5;
    re::introspect<re::DynamicString>(void)::info = (uint64_t)re::IntrospectionInfo<re::DynamicString>::get(0, v12);
LABEL_14:
    __cxa_guard_release(v10);
    v5 = v13;
    return *v5;
  }
  if (v3 != 1)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, a2, a3, "assertion failure: '%s' (%s:line %i) Unexpected; MaterialTextureParam should be an AssetHandle or a DynamicString",
      "false",
      "introspectionWalkerMember",
      53);
    _os_crash();
    __break(1u);
    goto LABEL_10;
  }
  if ((v4 & 1) == 0)
  {
LABEL_10:
    v5 = &re::introspect<re::AssetHandle>(void)::info;
    v13 = &re::introspect<re::AssetHandle>(void)::info;
    if (!v8)
      return *v5;
    re::introspect<re::AssetHandle>(void)::info = (uint64_t)re::introspect_AssetHandle(0, v9);
    goto LABEL_14;
  }
  v5 = &re::introspect<re::AssetHandle>(void)::info;
  return *v5;
}

_QWORD *re::internal::defaultConstructV2<re::MaterialTextureParam>(uint64_t a1)
{
  _QWORD *result;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  result = re::DynamicString::setCapacity((_QWORD *)a1, 0);
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::MaterialTextureParam>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  v2 = *(unsigned int *)(result + 32);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24ED75DD0 + v2))(&v3, result);
  *(_DWORD *)(v1 + 32) = -1;
  return result;
}

_QWORD *re::internal::defaultConstruct<re::MaterialTextureBlockData>(_anonymous_namespace_ *a1, uint64_t a2, _OWORD *a3)
{
  _OWORD *v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _QWORD *result;

  v3 = a3;
  *a3 = 0u;
  a3[1] = 0u;
  v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  *((_DWORD *)v3 + 8) = 0;
  *(_OWORD *)((char *)v3 + 56) = 0u;
  *(_OWORD *)((char *)v3 + 40) = 0u;
  v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v3 + 5, 0);
  *(_OWORD *)((char *)v3 + 72) = 0u;
  v3 = (_OWORD *)((char *)v3 + 72);
  v3[1] = 0u;
  result = re::DynamicString::setCapacity(v3, 0);
  *((_BYTE *)v3 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::MaterialTextureBlockData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t result;
  uint64_t v7;
  char v8;

  v5 = (_OWORD *)(a3 + 72);
  v4 = *(_QWORD *)(a3 + 72);
  if (v4)
  {
    if ((*(_BYTE *)(a3 + 80) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a3 + 88));
    *v5 = 0u;
    v5[1] = 0u;
  }
  result = *(_QWORD *)(a3 + 40);
  if (result)
  {
    if ((*(_BYTE *)(a3 + 48) & 1) != 0)
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *(_QWORD *)(a3 + 56));
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
  }
  v7 = *(unsigned int *)(a3 + 32);
  if ((_DWORD)v7 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24ED75DD0 + v7))(&v8, a3);
  *(_DWORD *)(a3 + 32) = -1;
  return result;
}

_QWORD *re::internal::defaultConstructV2<re::MaterialTextureBlockData>(_anonymous_namespace_ *a1)
{
  _anonymous_namespace_ *v1;
  _anonymous_namespace_ *v2;
  _anonymous_namespace_ *v3;
  _QWORD *result;

  v1 = a1;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v1, 0);
  *((_DWORD *)v1 + 8) = 0;
  *(_OWORD *)((char *)v1 + 56) = 0u;
  *(_OWORD *)((char *)v1 + 40) = 0u;
  v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v1 + 5, 0);
  *(_OWORD *)((char *)v1 + 72) = 0u;
  v1 = (_anonymous_namespace_ *)((char *)v1 + 72);
  *((_OWORD *)v1 + 1) = 0u;
  result = re::DynamicString::setCapacity(v1, 0);
  *((_BYTE *)v1 + 32) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::MaterialTextureBlockData>(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t result;
  uint64_t v5;
  char v6;

  v3 = (_OWORD *)(a1 + 72);
  v2 = *(_QWORD *)(a1 + 72);
  if (v2)
  {
    if ((*(_BYTE *)(a1 + 80) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 88));
    *v3 = 0u;
    v3[1] = 0u;
  }
  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *(_QWORD *)(a1 + 56));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  v5 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v5 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24ED75DD0 + v5))(&v6, a1);
  *(_DWORD *)(a1 + 32) = -1;
  return result;
}

void re::introspect_MaterialSamplerBaseType(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  re *v32;
  uint64_t *v33;
  re *v34;
  uint64_t *v35;
  re *v36;
  uint64_t *v37;
  re *v38;
  uint64_t *v39;
  re *v40;
  uint64_t *v41;
  re *v42;
  uint64_t *v43;
  re *v44;
  uint64_t *v45;
  re *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  StringID v52;
  _QWORD v53[2];
  _QWORD v54[61];

  v2 = atomic_load((unsigned __int8 *)&qword_254119030);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_254119030);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Nearest";
      qword_2541199C0 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Bilinear";
      qword_2541199C8 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *((_QWORD *)v32 + 1) = 2;
      *((_QWORD *)v32 + 2) = "Trilinear";
      qword_2541199D0 = (uint64_t)v32;
      v33 = re::introspectionAllocator(v32);
      v34 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 24, 8);
      *(_DWORD *)v34 = 1;
      *((_QWORD *)v34 + 1) = 3;
      *((_QWORD *)v34 + 2) = "Anisotropic4x";
      qword_2541199D8 = (uint64_t)v34;
      v35 = re::introspectionAllocator(v34);
      v36 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 24, 8);
      *(_DWORD *)v36 = 1;
      *((_QWORD *)v36 + 1) = 4;
      *((_QWORD *)v36 + 2) = "NearestClamp";
      qword_2541199E0 = (uint64_t)v36;
      v37 = re::introspectionAllocator(v36);
      v38 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 24, 8);
      *(_DWORD *)v38 = 1;
      *((_QWORD *)v38 + 1) = 5;
      *((_QWORD *)v38 + 2) = "BilinearClamp";
      qword_2541199E8 = (uint64_t)v38;
      v39 = re::introspectionAllocator(v38);
      v40 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 24, 8);
      *(_DWORD *)v40 = 1;
      *((_QWORD *)v40 + 1) = 6;
      *((_QWORD *)v40 + 2) = "TrilinearClamp";
      qword_2541199F0 = (uint64_t)v40;
      v41 = re::introspectionAllocator(v40);
      v42 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v41 + 32))(v41, 24, 8);
      *(_DWORD *)v42 = 1;
      *((_QWORD *)v42 + 1) = 7;
      *((_QWORD *)v42 + 2) = "NearestClampToZero";
      qword_2541199F8 = (uint64_t)v42;
      v43 = re::introspectionAllocator(v42);
      v44 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v43 + 32))(v43, 24, 8);
      *(_DWORD *)v44 = 1;
      *((_QWORD *)v44 + 1) = 8;
      *((_QWORD *)v44 + 2) = "BilinearClampToZero";
      qword_254119A00 = (uint64_t)v44;
      v45 = re::introspectionAllocator(v44);
      v46 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v45 + 32))(v45, 24, 8);
      *(_DWORD *)v46 = 1;
      *((_QWORD *)v46 + 1) = 9;
      *((_QWORD *)v46 + 2) = "TrilinearClampToZero";
      qword_254119A08 = (uint64_t)v46;
      v47 = re::introspectionAllocator(v46);
      v48 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v47 + 32))(v47, 24, 8);
      *(_DWORD *)v48 = 1;
      *(_QWORD *)(v48 + 8) = 10;
      *(_QWORD *)(v48 + 16) = "SamplerBaseTypeCount";
      qword_254119A10 = v48;
      __cxa_guard_release(&qword_254119030);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254119038);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254119038))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2541196B0, "MaterialSamplerBaseType", 1, 1, 1, 1);
    qword_2541196B0 = (uint64_t)&off_24ED7D9E8;
    qword_2541196F0 = (uint64_t)&re::introspect_MaterialSamplerBaseType(BOOL)::enumTable;
    dword_2541196C0 = 9;
    __cxa_guard_release(&qword_254119038);
  }
  if ((byte_254118FEA & 1) == 0)
  {
    byte_254118FEA = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541196B0, a2);
    v50 = 0xDC7B28CF926F5B18;
    v51 = "MaterialSamplerBaseType";
    v54[0] = 0x31CD534126;
    v54[1] = "uint8_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v54);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v54);
      v6 = (unsigned int *)qword_2541196F0;
      v53[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v54, &v50, 1, 1, (uint64_t)v53);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v52.var0 = 2 * v12;
            v52.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v54, v16, &v52);
            re::StringID::destroyString((re::StringID *)&v52);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v52.var0 = 2 * v20;
              v52.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v54, v24, &v52);
              re::StringID::destroyString((re::StringID *)&v52);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v54, v25);
      xmmword_2541196D0 = (__int128)v52;
      re::StringID::destroyString((re::StringID *)&v50);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v54);
      re::internal::assertLog((re::internal *)5, v49, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "MaterialSamplerBaseType", v50, v51);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t *re::allocInfo_OptionalMaterialSamplerData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254119040);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254119040))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254119BE0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254119BF0 = 0;
    qword_254119C00 = 0;
    qword_254119C08 = 0xFFFFFFFFLL;
    qword_254119BE0 = (uint64_t)&off_24ED7DAA8;
    qword_254119C10 = (uint64_t)"OptionalMaterialSamplerData";
    dword_254119C18 = 0;
    xmmword_254119C20 = 0u;
    xmmword_254119C30 = 0u;
    xmmword_254119C40 = 0u;
    qword_254119C50 = 0;
    __cxa_guard_release(&qword_254119040);
  }
  return &qword_254119BE0;
}

void re::initInfo_OptionalMaterialSamplerData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  uint64_t v27;
  uint64_t *v28;
  const re::IntrospectionBase *v29;
  uint64_t v30;
  uint64_t *v31;
  const re::IntrospectionBase *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  const re::IntrospectionBase *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  const re::IntrospectionBase *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  const re::IntrospectionBase *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  const re::IntrospectionBase *v48;
  uint64_t v49;
  uint64_t *v50;
  const re::IntrospectionBase *v51;
  uint64_t v52;
  __int128 v53;
  _QWORD v54[2];
  __int128 v55;

  v54[0] = 0x2A51EC199F473916;
  v54[1] = "OptionalMaterialSamplerData";
  re::StringID::destroyString((re::StringID *)v54);
  *((_OWORD *)this + 2) = v55;
  v4 = atomic_load((unsigned __int8 *)&qword_254119048);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254119048);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "normalizedCoordinates";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0x100000001;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254119A88 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      re::IntrospectionInfo<re::Optional<re::mtl::SamplerAddressMode>>::get((uint64_t)v10, v11);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "wrapR";
      *(_QWORD *)(v12 + 16) = &qword_254119368;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x800000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254119A90 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      re::IntrospectionInfo<re::Optional<re::mtl::SamplerAddressMode>>::get((uint64_t)v13, v14);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "wrapS";
      *(_QWORD *)(v15 + 16) = &qword_254119368;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x1000000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254119A98 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      re::IntrospectionInfo<re::Optional<re::mtl::SamplerAddressMode>>::get((uint64_t)v16, v17);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "wrapT";
      *(_QWORD *)(v18 + 16) = &qword_254119368;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x1800000004;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_254119AA0 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      re::IntrospectionInfo<re::Optional<re::mtl::SamplerBorderColor>>::get((uint64_t)v19, v20);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "borderColor";
      *(_QWORD *)(v21 + 16) = &qword_2541193A8;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x2000000005;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254119AA8 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      re::IntrospectionInfo<re::Optional<re::mtl::SamplerMinMagFilter>>::get((uint64_t)v22, v23);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "minFilter";
      *(_QWORD *)(v24 + 16) = &qword_2541193E8;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x2800000006;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_254119AB0 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      re::IntrospectionInfo<re::Optional<re::mtl::SamplerMinMagFilter>>::get((uint64_t)v25, v26);
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "magFilter";
      *(_QWORD *)(v27 + 16) = &qword_2541193E8;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0x3000000007;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_254119AB8 = v27;
      v28 = re::introspectionAllocator((re *)v27);
      re::IntrospectionInfo<re::Optional<re::mtl::SamplerMipFilter>>::get((uint64_t)v28, v29);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "mipFilter";
      *(_QWORD *)(v30 + 16) = &qword_254119428;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x3800000008;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_254119AC0 = v30;
      v31 = re::introspectionAllocator((re *)v30);
      v33 = re::IntrospectionInfo<re::Optional<float>>::get(1, v32);
      v34 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 72, 8);
      *(_DWORD *)v34 = 1;
      *(_QWORD *)(v34 + 8) = "minLOD";
      *(_QWORD *)(v34 + 16) = v33;
      *(_QWORD *)(v34 + 24) = 0;
      *(_QWORD *)(v34 + 32) = 0x4800000009;
      *(_DWORD *)(v34 + 40) = 0;
      *(_QWORD *)(v34 + 48) = 0;
      *(_QWORD *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_254119AC8 = v34;
      v35 = re::introspectionAllocator((re *)v34);
      v37 = re::IntrospectionInfo<re::Optional<float>>::get(1, v36);
      v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 72, 8);
      *(_DWORD *)v38 = 1;
      *(_QWORD *)(v38 + 8) = "maxLOD";
      *(_QWORD *)(v38 + 16) = v37;
      *(_QWORD *)(v38 + 24) = 0;
      *(_QWORD *)(v38 + 32) = 0x500000000ALL;
      *(_DWORD *)(v38 + 40) = 0;
      *(_QWORD *)(v38 + 48) = 0;
      *(_QWORD *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_254119AD0 = v38;
      v39 = re::introspectionAllocator((re *)v38);
      v41 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v40);
      v42 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 72, 8);
      *(_DWORD *)v42 = 1;
      *(_QWORD *)(v42 + 8) = "useAverageLOD";
      *(_QWORD *)(v42 + 16) = v41;
      *(_QWORD *)(v42 + 24) = 0;
      *(_QWORD *)(v42 + 32) = 0x30000000BLL;
      *(_DWORD *)(v42 + 40) = 0;
      *(_QWORD *)(v42 + 48) = 0;
      *(_QWORD *)(v42 + 56) = 0;
      *(_DWORD *)(v42 + 64) = 0;
      qword_254119AD8 = v42;
      v43 = re::introspectionAllocator((re *)v42);
      v45 = re::IntrospectionInfo<re::Optional<unsigned long long>>::get(1, v44);
      v46 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v43 + 32))(v43, 72, 8);
      *(_DWORD *)v46 = 1;
      *(_QWORD *)(v46 + 8) = "maxAnisoSamples";
      *(_QWORD *)(v46 + 16) = v45;
      *(_QWORD *)(v46 + 24) = 0;
      *(_QWORD *)(v46 + 32) = 0x580000000CLL;
      *(_DWORD *)(v46 + 40) = 0;
      *(_QWORD *)(v46 + 48) = 0;
      *(_QWORD *)(v46 + 56) = 0;
      *(_DWORD *)(v46 + 64) = 0;
      qword_254119AE0 = v46;
      v47 = re::introspectionAllocator((re *)v46);
      re::IntrospectionInfo<re::Optional<re::mtl::SamplerCompareFunction>>::get((uint64_t)v47, v48);
      v49 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v47 + 32))(v47, 72, 8);
      *(_DWORD *)v49 = 1;
      *(_QWORD *)(v49 + 8) = "compareFunction";
      *(_QWORD *)(v49 + 16) = &qword_254119468;
      *(_QWORD *)(v49 + 24) = 0;
      *(_QWORD *)(v49 + 32) = 0x400000000DLL;
      *(_DWORD *)(v49 + 40) = 0;
      *(_QWORD *)(v49 + 48) = 0;
      *(_QWORD *)(v49 + 56) = 0;
      *(_DWORD *)(v49 + 64) = 0;
      qword_254119AE8 = v49;
      v50 = re::introspectionAllocator((re *)v49);
      re::introspect_MaterialSamplerBaseType((re *)v50, v51);
      v52 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v50 + 32))(v50, 72, 8);
      *(_DWORD *)v52 = 1;
      *(_QWORD *)(v52 + 8) = "baseFilter";
      *(_QWORD *)(v52 + 16) = &qword_2541196B0;
      *(_QWORD *)(v52 + 24) = 0;
      *(_QWORD *)(v52 + 32) = 14;
      *(_DWORD *)(v52 + 40) = 0;
      *(_QWORD *)(v52 + 48) = 0;
      *(_QWORD *)(v52 + 56) = 0;
      *(_DWORD *)(v52 + 64) = 0;
      qword_254119AF0 = v52;
      __cxa_guard_release(&qword_254119048);
    }
  }
  *((_QWORD *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 14;
  *((_QWORD *)this + 8) = &qword_254119A88;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::OptionalMaterialSamplerData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::OptionalMaterialSamplerData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::OptionalMaterialSamplerData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::OptionalMaterialSamplerData>;
  re::IntrospectionRegistry::add(this, v3);
  v53 = v55;
}

void re::IntrospectionInfo<re::Optional<re::mtl::SamplerAddressMode>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14[2];
  __int128 v15;
  uint64_t v16;
  char v17;
  _BYTE v18[479];

  v2 = atomic_load((unsigned __int8 *)&qword_254119188);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254119188))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_254119368);
    qword_254119368 = (uint64_t)&off_24ED75DF0;
    __cxa_guard_release(&qword_254119188);
  }
  if ((byte_254118FEC & 1) == 0)
  {
    v3 = re::mtl::introspect_SamplerAddressMode((re::mtl *)1, a2);
    if ((byte_254118FEC & 1) == 0)
    {
      v4 = (uint64_t)v3;
      byte_254118FEC = 1;
      v5 = *((_DWORD *)v3 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254119368, 0);
      qword_254119378 = 0x80000000DLL;
      dword_254119380 = v5;
      word_254119384 = 0;
      *(_QWORD *)&xmmword_254119388 = 0;
      *((_QWORD *)&xmmword_254119388 + 1) = 0xFFFFFFFFLL;
      qword_254119398 = v4;
      qword_2541193A0 = 0;
      qword_254119368 = (uint64_t)&off_24ED75DF0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254119368, (const re::IntrospectionBase *)&v16);
      if ((v17 & 1) != 0)
        v8 = *(const char **)&v18[7];
      else
        v8 = v18;
      if (v16 && (v17 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v16 + 40))();
      v13 = *(_OWORD *)(v4 + 32);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v14);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v12 + 1) = v10;
      }
      else
      {
        v15 = v13;
        re::TypeBuilder::beginOptionalType((uint64_t)&v16, v14, 8uLL, 4uLL, &v15);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v16, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::mtl::SamplerAddressMode>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::mtl::SamplerAddressMode>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v16, v11);
      }
      xmmword_254119388 = v12;
      re::StringID::destroyString((re::StringID *)v14);
    }
  }
}

void re::IntrospectionInfo<re::Optional<re::mtl::SamplerBorderColor>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14[2];
  __int128 v15;
  uint64_t v16;
  char v17;
  _BYTE v18[479];

  v2 = atomic_load((unsigned __int8 *)&qword_254119190);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254119190))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_2541193A8);
    qword_2541193A8 = (uint64_t)&off_24ED75E70;
    __cxa_guard_release(&qword_254119190);
  }
  if ((byte_254118FED & 1) == 0)
  {
    v3 = re::mtl::introspect_SamplerBorderColor((re::mtl *)1, a2);
    if ((byte_254118FED & 1) == 0)
    {
      v4 = (uint64_t)v3;
      byte_254118FED = 1;
      v5 = v3[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541193A8, 0);
      qword_2541193B8 = 0x80000000DLL;
      dword_2541193C0 = v5;
      word_2541193C4 = 0;
      *(_QWORD *)&xmmword_2541193C8 = 0;
      *((_QWORD *)&xmmword_2541193C8 + 1) = 0xFFFFFFFFLL;
      qword_2541193D8 = v4;
      qword_2541193E0 = 0;
      qword_2541193A8 = (uint64_t)&off_24ED75E70;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2541193A8, (const re::IntrospectionBase *)&v16);
      if ((v17 & 1) != 0)
        v8 = *(const char **)&v18[7];
      else
        v8 = v18;
      if (v16 && (v17 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v16 + 40))();
      v13 = *(_OWORD *)(v4 + 32);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v14);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v12 + 1) = v10;
      }
      else
      {
        v15 = v13;
        re::TypeBuilder::beginOptionalType((uint64_t)&v16, v14, 8uLL, 4uLL, &v15);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v16, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::mtl::SamplerBorderColor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::mtl::SamplerBorderColor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v16, v11);
      }
      xmmword_2541193C8 = v12;
      re::StringID::destroyString((re::StringID *)v14);
    }
  }
}

void re::IntrospectionInfo<re::Optional<re::mtl::SamplerMinMagFilter>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14[2];
  __int128 v15;
  uint64_t v16;
  char v17;
  _BYTE v18[479];

  v2 = atomic_load((unsigned __int8 *)&qword_254119198);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254119198))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_2541193E8);
    qword_2541193E8 = (uint64_t)&off_24ED75EF0;
    __cxa_guard_release(&qword_254119198);
  }
  if ((byte_254118FEE & 1) == 0)
  {
    v3 = re::mtl::introspect_SamplerMinMagFilter((re::mtl *)1, a2);
    if ((byte_254118FEE & 1) == 0)
    {
      v4 = (uint64_t)v3;
      byte_254118FEE = 1;
      v5 = v3[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541193E8, 0);
      qword_2541193F8 = 0x80000000DLL;
      dword_254119400 = v5;
      word_254119404 = 0;
      *(_QWORD *)&xmmword_254119408 = 0;
      *((_QWORD *)&xmmword_254119408 + 1) = 0xFFFFFFFFLL;
      qword_254119418 = v4;
      qword_254119420 = 0;
      qword_2541193E8 = (uint64_t)&off_24ED75EF0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2541193E8, (const re::IntrospectionBase *)&v16);
      if ((v17 & 1) != 0)
        v8 = *(const char **)&v18[7];
      else
        v8 = v18;
      if (v16 && (v17 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v16 + 40))();
      v13 = *(_OWORD *)(v4 + 32);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v14);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v12 + 1) = v10;
      }
      else
      {
        v15 = v13;
        re::TypeBuilder::beginOptionalType((uint64_t)&v16, v14, 8uLL, 4uLL, &v15);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v16, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::mtl::SamplerMinMagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::mtl::SamplerMinMagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v16, v11);
      }
      xmmword_254119408 = v12;
      re::StringID::destroyString((re::StringID *)v14);
    }
  }
}

void re::IntrospectionInfo<re::Optional<re::mtl::SamplerMipFilter>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14[2];
  __int128 v15;
  uint64_t v16;
  char v17;
  _BYTE v18[479];

  v2 = atomic_load((unsigned __int8 *)&qword_2541191A0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2541191A0))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_254119428);
    qword_254119428 = (uint64_t)&off_24ED75F70;
    __cxa_guard_release(&qword_2541191A0);
  }
  if ((byte_254118FEF & 1) == 0)
  {
    v3 = re::mtl::introspect_SamplerMipFilter((re::mtl *)1, a2);
    if ((byte_254118FEF & 1) == 0)
    {
      v4 = (uint64_t)v3;
      byte_254118FEF = 1;
      v5 = v3[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254119428, 0);
      qword_254119438 = 0x80000000DLL;
      dword_254119440 = v5;
      word_254119444 = 0;
      *(_QWORD *)&xmmword_254119448 = 0;
      *((_QWORD *)&xmmword_254119448 + 1) = 0xFFFFFFFFLL;
      qword_254119458 = v4;
      qword_254119460 = 0;
      qword_254119428 = (uint64_t)&off_24ED75F70;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254119428, (const re::IntrospectionBase *)&v16);
      if ((v17 & 1) != 0)
        v8 = *(const char **)&v18[7];
      else
        v8 = v18;
      if (v16 && (v17 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v16 + 40))();
      v13 = *(_OWORD *)(v4 + 32);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v14);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v12 + 1) = v10;
      }
      else
      {
        v15 = v13;
        re::TypeBuilder::beginOptionalType((uint64_t)&v16, v14, 8uLL, 4uLL, &v15);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v16, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::mtl::SamplerMipFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::mtl::SamplerMipFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v16, v11);
      }
      xmmword_254119448 = v12;
      re::StringID::destroyString((re::StringID *)v14);
    }
  }
}

void re::IntrospectionInfo<re::Optional<re::mtl::SamplerCompareFunction>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14[2];
  __int128 v15;
  uint64_t v16;
  char v17;
  _BYTE v18[479];

  v2 = atomic_load((unsigned __int8 *)&qword_2541191A8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2541191A8))
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&qword_254119468);
    qword_254119468 = (uint64_t)&off_24ED75FF0;
    __cxa_guard_release(&qword_2541191A8);
  }
  if ((byte_254118FF0 & 1) == 0)
  {
    v3 = re::mtl::introspect_SamplerCompareFunction((re::mtl *)1, a2);
    if ((byte_254118FF0 & 1) == 0)
    {
      v4 = (uint64_t)v3;
      byte_254118FF0 = 1;
      v5 = *((_DWORD *)v3 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254119468, 0);
      qword_254119478 = 0x80000000DLL;
      dword_254119480 = v5;
      word_254119484 = 0;
      *(_QWORD *)&xmmword_254119488 = 0;
      *((_QWORD *)&xmmword_254119488 + 1) = 0xFFFFFFFFLL;
      qword_254119498 = v4;
      qword_2541194A0 = 0;
      qword_254119468 = (uint64_t)&off_24ED75FF0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254119468, (const re::IntrospectionBase *)&v16);
      if ((v17 & 1) != 0)
        v8 = *(const char **)&v18[7];
      else
        v8 = v18;
      if (v16 && (v17 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v16 + 40))();
      v13 = *(_OWORD *)(v4 + 32);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v14);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v12 + 1) = v10;
      }
      else
      {
        v15 = v13;
        re::TypeBuilder::beginOptionalType((uint64_t)&v16, v14, 8uLL, 4uLL, &v15);
        re::TypeBuilder::setOptionalAccessors((uint64_t)&v16, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::mtl::SamplerCompareFunction>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::mtl::SamplerCompareFunction>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v16, v11);
      }
      xmmword_254119488 = v12;
      re::StringID::destroyString((re::StringID *)v14);
    }
  }
}

void re::internal::defaultConstruct<re::OptionalMaterialSamplerData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a3 = 10;
  *(_BYTE *)(a3 + 3) = 0;
  *(_BYTE *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 56) = 0;
  *(_BYTE *)(a3 + 64) = 0;
  *(_BYTE *)(a3 + 72) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  *(_BYTE *)(a3 + 88) = 0;
}

uint64_t re::internal::defaultConstructV2<re::OptionalMaterialSamplerData>(uint64_t result)
{
  *(_WORD *)result = 10;
  *(_BYTE *)(result + 3) = 0;
  *(_BYTE *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = 0;
  *(_BYTE *)(result + 48) = 0;
  *(_BYTE *)(result + 56) = 0;
  *(_BYTE *)(result + 64) = 0;
  *(_BYTE *)(result + 72) = 0;
  *(_BYTE *)(result + 80) = 0;
  *(_BYTE *)(result + 88) = 0;
  return result;
}

uint64_t re::introspect_OptionalMaterialSamplerData(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"OptionalMaterialSamplerData", (uint64_t (*)(re::internal *))re::allocInfo_OptionalMaterialSamplerData, (re::IntrospectionBase *(*)(void))re::initInfo_OptionalMaterialSamplerData, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::OptionalMaterialSamplerData>, this);
}

void re::IntrospectionInfo<re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _OWORD *v3;
  const re::IntrospectionBase *v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  re::IntrospectionRegistry *v8;
  const re::IntrospectionBase *v9;
  const char *v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  _anonymous_namespace_ *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23[2];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  _QWORD v29[2];
  __int128 v30;
  StringID v31;
  const char **v32;

  v2 = atomic_load((unsigned __int8 *)&qword_2541191B0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2541191B0))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_254119790);
    qword_254119790 = (uint64_t)&off_24ED76070;
    __cxa_guard_release(&qword_2541191B0);
  }
  if ((byte_254118FF1 & 1) == 0)
  {
    v3 = re::IntrospectionInfo<re::DynamicString>::get(1, a2);
    v5 = re::introspect_int((re *)1, v4);
    if ((byte_254118FF1 & 1) == 0)
    {
      v6 = (uint64_t)v5;
      byte_254118FF1 = 1;
      v7 = v5[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254119790, 0);
      qword_2541197A0 = 0x3000000007;
      dword_2541197A8 = v7;
      word_2541197AC = 0;
      *(_QWORD *)&xmmword_2541197B0 = 0;
      *((_QWORD *)&xmmword_2541197B0 + 1) = 0xFFFFFFFFLL;
      qword_2541197C0 = (uint64_t)v3;
      qword_2541197C8 = 0;
      qword_2541197D0 = v6;
      qword_2541197D8 = 0;
      qword_254119790 = (uint64_t)&off_24ED76070;
      re::IntrospectionRegistry::add(v8, v9);
      re::getPrettyTypeName((re *)&qword_254119790, (const re::IntrospectionBase *)&v26);
      if ((v27 & 1) != 0)
        v10 = v28;
      else
        v10 = (char *)&v27 + 1;
      if (v26 && (v27 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v26 + 40))();
      v11 = v3[2];
      v21 = *(_OWORD *)(v6 + 32);
      v22 = v11;
      v12 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v23);
      if (v12)
      {
        v13 = *v12;
        *((_QWORD *)&v20 + 1) = v13;
      }
      else
      {
        v26 = 0x449AD97C4B77BED4;
        v27 = "_CompareFunc";
        v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v26);
        if (v14)
        {
          v15 = *v14;
          re::StringID::destroyString((re::StringID *)&v26);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v26);
          *(_QWORD *)&v31.var0 = 0x449AD97C4B77BED4;
          v31.var1 = "_CompareFunc";
          v16 = (void *)v26;
          v15 = (uint64_t)v27;
          re::StringID::destroyString((re::StringID *)&v31);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v31, (uint64_t)&v27);
        if (!v16
          || (v17 = *v32,
              v26 = v15,
              v27 = v17,
              LODWORD(v28) = -1,
              (v18 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v31.var0 + 768, &v26)) == 0)|| !*(_QWORD *)v18)
        {
          v30 = v22;
          v29[0] = v16;
          v29[1] = v15;
        }
        v24 = v21;
        v25 = v22;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v26, v23, 1, 0x30uLL, 8uLL, &v25, &v24);
        re::TypeBuilder::setConstructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v26, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v26, v19);
      }
      xmmword_2541197B0 = v20;
      re::StringID::destroyString((re::StringID *)v23);
    }
  }
}

double re::internal::defaultConstruct<re::DebugMapping>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::DynamicString::setCapacity((_QWORD *)a3, 0);
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(a3 + 68) = 0x7FFFFFFFLL;
  return result;
}

double re::internal::defaultDestruct<re::DebugMapping>(double a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  double result;

  result = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a4 + 4, a1);
  if (*a4)
  {
    if ((a4[1] & 1) != 0)
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)*a4 + 40))(*a4, a4[2], result);
    result = 0.0;
    *(_OWORD *)a4 = 0u;
    *((_OWORD *)a4 + 1) = 0u;
  }
  return result;
}

double re::internal::defaultConstructV2<re::DebugMapping>(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::DynamicString::setCapacity((_QWORD *)a1, 0);
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 68) = 0x7FFFFFFFLL;
  return result;
}

double re::internal::defaultDestructV2<re::DebugMapping>(uint64_t *a1, double a2)
{
  double result;

  result = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 4, a2);
  if (*a1)
  {
    if ((a1[1] & 1) != 0)
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)*a1 + 40))(*a1, a1[2], result);
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

void re::internal::defaultConstruct<re::OptionalMaterialParameterProperties>(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  *a3 = 0;
  a3[40] = 0;
}

double re::internal::defaultDestruct<re::OptionalMaterialParameterProperties>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _OWORD *v4;
  double result;

  if (*(_BYTE *)a3)
  {
    v4 = (_OWORD *)(a3 + 8);
    v3 = *(_QWORD *)(a3 + 8);
    if (v3)
    {
      if ((*(_BYTE *)(a3 + 16) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a3 + 24));
      result = 0.0;
      *v4 = 0u;
      v4[1] = 0u;
    }
  }
  return result;
}

_BYTE *re::internal::defaultConstructV2<re::OptionalMaterialParameterProperties>(_BYTE *result)
{
  *result = 0;
  result[40] = 0;
  return result;
}

double re::internal::defaultDestructV2<re::OptionalMaterialParameterProperties>(uint64_t a1)
{
  uint64_t v1;
  _OWORD *v2;
  double result;

  if (*(_BYTE *)a1)
  {
    v2 = (_OWORD *)(a1 + 8);
    v1 = *(_QWORD *)(a1 + 8);
    if (v1)
    {
      if ((*(_BYTE *)(a1 + 16) & 1) != 0)
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v1 + 40))(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 24));
      result = 0.0;
      *v2 = 0u;
      v2[1] = 0u;
    }
  }
  return result;
}

uint64_t *re::allocInfo_MaterialShaderData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254119080);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254119080))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254119D48, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254119D58 = 0;
    qword_254119D68 = 0;
    qword_254119D70 = 0xFFFFFFFFLL;
    qword_254119D48 = (uint64_t)&off_24ED7DAA8;
    qword_254119D78 = (uint64_t)"MaterialShaderData";
    dword_254119D80 = 0;
    xmmword_254119D88 = 0u;
    xmmword_254119D98 = 0u;
    xmmword_254119DA8 = 0u;
    qword_254119DB8 = 0;
    __cxa_guard_release(&qword_254119080);
  }
  return &qword_254119D48;
}

void re::initInfo_MaterialShaderData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD v15[2];
  __int128 v16;

  v15[0] = 0xCBEC3AED4BA4B3ACLL;
  v15[1] = "MaterialShaderData";
  re::StringID::destroyString((re::StringID *)v15);
  *((_OWORD *)this + 2) = v16;
  v4 = atomic_load((unsigned __int8 *)&qword_254119088);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254119088);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_AssetHandle((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "library";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254119240 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::IntrospectionInfo<re::DynamicString>::get(1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "entry";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x1800000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254119248 = v13;
      __cxa_guard_release(&qword_254119088);
    }
  }
  *((_QWORD *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254119240;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::MaterialShaderData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::MaterialShaderData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::MaterialShaderData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::MaterialShaderData>;
  re::IntrospectionRegistry::add(this, v3);
  v14 = v16;
}

_QWORD *re::internal::defaultConstruct<re::MaterialShaderData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  return re::DynamicString::setCapacity((_QWORD *)(a3 + 24), 0);
}

void re::internal::defaultDestruct<re::MaterialShaderData>(int a1, int a2, re::AssetHandle *this)
{
  uint64_t v4;
  _OWORD *v5;

  v5 = (_OWORD *)((char *)this + 24);
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    if ((*((_BYTE *)this + 32) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 5));
    *v5 = 0u;
    v5[1] = 0u;
  }
  re::AssetHandle::~AssetHandle(this);
}

_QWORD *re::internal::defaultConstructV2<re::MaterialShaderData>(uint64_t a1)
{
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return re::DynamicString::setCapacity((_QWORD *)(a1 + 24), 0);
}

void re::internal::defaultDestructV2<re::MaterialShaderData>(re::AssetHandle *this)
{
  uint64_t v2;
  _OWORD *v3;

  v3 = (_OWORD *)((char *)this + 24);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if ((*((_BYTE *)this + 32) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 5));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::AssetHandle::~AssetHandle(this);
}

double re::internal::defaultConstruct<re::RenderAttachmentState>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_WORD *)a3 = 0;
  *(_OWORD *)(a3 + 4) = xmmword_226133C50;
  *(_QWORD *)&result = 5;
  *(_QWORD *)(a3 + 20) = 5;
  *(_DWORD *)(a3 + 28) = 15;
  return result;
}

double re::internal::defaultConstructV2<re::RenderAttachmentState>(uint64_t a1)
{
  double result;

  *(_WORD *)a1 = 0;
  *(_OWORD *)(a1 + 4) = xmmword_226133C50;
  *(_QWORD *)&result = 5;
  *(_QWORD *)(a1 + 20) = 5;
  *(_DWORD *)(a1 + 28) = 15;
  return result;
}

uint64_t *re::allocInfo_TechniqueState(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541190B0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541190B0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254119E38, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254119E48 = 0;
    qword_254119E58 = 0;
    qword_254119E60 = 0xFFFFFFFFLL;
    qword_254119E38 = (uint64_t)&off_24ED7DAA8;
    qword_254119E68 = (uint64_t)"TechniqueState";
    dword_254119E70 = 0;
    xmmword_254119E78 = 0u;
    xmmword_254119E88 = 0u;
    xmmword_254119E98 = 0u;
    qword_254119EA8 = 0;
    __cxa_guard_release(&qword_2541190B0);
  }
  return &qword_254119E38;
}

void re::initInfo_TechniqueState(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  const re::IntrospectionBase *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  const re::IntrospectionBase *v31;
  void *v32;
  uint64_t v33;
  uint64_t *v34;
  const re::IntrospectionBase *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  const re::IntrospectionBase *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  const re::IntrospectionBase *v43;
  void *v44;
  uint64_t v45;
  uint64_t *v46;
  const re::IntrospectionBase *v47;
  void *v48;
  uint64_t v49;
  uint64_t *v50;
  const re::IntrospectionBase *v51;
  void *v52;
  uint64_t v53;
  uint64_t *v54;
  const re::IntrospectionBase *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  const re::IntrospectionBase *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  const re::IntrospectionBase *v65;
  void *v66;
  uint64_t v67;
  uint64_t *v68;
  const re::IntrospectionBase *v69;
  void *v70;
  uint64_t v71;
  uint64_t *v72;
  const re::IntrospectionBase *v73;
  void *v74;
  uint64_t v75;
  uint64_t *v76;
  const re::IntrospectionBase *v77;
  void *v78;
  uint64_t v79;
  __int128 v80;
  _QWORD v81[2];
  __int128 v82;

  v81[0] = 0x49118B545AE53882;
  v81[1] = "TechniqueState";
  re::StringID::destroyString((re::StringID *)v81);
  *((_OWORD *)this + 2) = v82;
  v4 = atomic_load((unsigned __int8 *)&qword_2541190B8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541190B8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::introspect_BOOL((re *)1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "alphaBlend";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2558354C0 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_BOOL((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "writeDepth";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x200000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2558354C8 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_uint8_t((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "stencilReferenceValue";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x600000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2558354D0 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::mtl::introspect_CompareFunction((re::mtl *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "depthCompareFunction";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0xA00000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_2558354D8 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::mtl::introspect_BlendFactor((re::mtl *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "rgbSourceFactor";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0xC00000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_2558354E0 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v28 = re::mtl::introspect_BlendFactor((re::mtl *)1, v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v29 = 1;
      *(_QWORD *)(v29 + 8) = "rgbDestinationFactor";
      *(_QWORD *)(v29 + 16) = v28;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0x1000000006;
      *(_DWORD *)(v29 + 40) = 0;
      *(_QWORD *)(v29 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
      *(_DWORD *)(v29 + 64) = 0;
      qword_2558354E8 = v29;
      v30 = re::introspectionAllocator((re *)v29);
      v32 = re::mtl::introspect_BlendOperation((re::mtl *)1, v31);
      v33 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v30 + 32))(v30, 72, 8);
      *(_DWORD *)v33 = 1;
      *(_QWORD *)(v33 + 8) = "rgbBlendOperation";
      *(_QWORD *)(v33 + 16) = v32;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0x1400000007;
      *(_DWORD *)(v33 + 40) = 0;
      *(_QWORD *)(v33 + 48) = 0;
      *(_QWORD *)(v33 + 56) = 0;
      *(_DWORD *)(v33 + 64) = 0;
      qword_2558354F0 = v33;
      v34 = re::introspectionAllocator((re *)v33);
      v36 = re::mtl::introspect_BlendFactor((re::mtl *)1, v35);
      v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v34 + 32))(v34, 72, 8);
      *(_DWORD *)v37 = 1;
      *(_QWORD *)(v37 + 8) = "alphaSourceFactor";
      *(_QWORD *)(v37 + 16) = v36;
      *(_QWORD *)(v37 + 24) = 0;
      *(_QWORD *)(v37 + 32) = 0x1800000008;
      *(_DWORD *)(v37 + 40) = 0;
      *(_QWORD *)(v37 + 48) = 0;
      *(_QWORD *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_2558354F8 = v37;
      v38 = re::introspectionAllocator((re *)v37);
      v40 = re::mtl::introspect_BlendFactor((re::mtl *)1, v39);
      v41 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 72, 8);
      *(_DWORD *)v41 = 1;
      *(_QWORD *)(v41 + 8) = "alphaDestinationFactor";
      *(_QWORD *)(v41 + 16) = v40;
      *(_QWORD *)(v41 + 24) = 0;
      *(_QWORD *)(v41 + 32) = 0x1C00000009;
      *(_DWORD *)(v41 + 40) = 0;
      *(_QWORD *)(v41 + 48) = 0;
      *(_QWORD *)(v41 + 56) = 0;
      *(_DWORD *)(v41 + 64) = 0;
      qword_255835500 = v41;
      v42 = re::introspectionAllocator((re *)v41);
      v44 = re::mtl::introspect_BlendOperation((re::mtl *)1, v43);
      v45 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 72, 8);
      *(_DWORD *)v45 = 1;
      *(_QWORD *)(v45 + 8) = "alphaBlendOperation";
      *(_QWORD *)(v45 + 16) = v44;
      *(_QWORD *)(v45 + 24) = 0;
      *(_QWORD *)(v45 + 32) = 0x200000000ALL;
      *(_DWORD *)(v45 + 40) = 0;
      *(_QWORD *)(v45 + 48) = 0;
      *(_QWORD *)(v45 + 56) = 0;
      *(_DWORD *)(v45 + 64) = 0;
      qword_255835508 = v45;
      v46 = re::introspectionAllocator((re *)v45);
      v48 = re::introspect_BOOL((re *)1, v47);
      v49 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 72, 8);
      *(_DWORD *)v49 = 1;
      *(_QWORD *)(v49 + 8) = "alphaToCoverage";
      *(_QWORD *)(v49 + 16) = v48;
      *(_QWORD *)(v49 + 24) = 0;
      *(_QWORD *)(v49 + 32) = 0x30000000BLL;
      *(_DWORD *)(v49 + 40) = 0;
      *(_QWORD *)(v49 + 48) = 0;
      *(_QWORD *)(v49 + 56) = 0;
      *(_DWORD *)(v49 + 64) = 0;
      qword_255835510 = v49;
      v50 = re::introspectionAllocator((re *)v49);
      v52 = re::introspect_BOOL((re *)1, v51);
      v53 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v50 + 32))(v50, 72, 8);
      *(_DWORD *)v53 = 1;
      *(_QWORD *)(v53 + 8) = "alphaToOne";
      *(_QWORD *)(v53 + 16) = v52;
      *(_QWORD *)(v53 + 24) = 0;
      *(_QWORD *)(v53 + 32) = 0x40000000CLL;
      *(_DWORD *)(v53 + 40) = 0;
      *(_QWORD *)(v53 + 48) = 0;
      *(_QWORD *)(v53 + 56) = 0;
      *(_DWORD *)(v53 + 64) = 0;
      qword_255835518 = v53;
      v54 = re::introspectionAllocator((re *)v53);
      v56 = re::mtl::introspect_ColorWriteMask((re::mtl *)1, v55);
      v57 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v54 + 32))(v54, 72, 8);
      *(_DWORD *)v57 = 1;
      *(_QWORD *)(v57 + 8) = "colorWriteMask";
      *(_QWORD *)(v57 + 16) = v56;
      *(_QWORD *)(v57 + 24) = 0;
      *(_QWORD *)(v57 + 32) = 0x240000000DLL;
      *(_DWORD *)(v57 + 40) = 0;
      *(_QWORD *)(v57 + 48) = 0;
      *(_QWORD *)(v57 + 56) = 0;
      *(_DWORD *)(v57 + 64) = 0;
      qword_255835520 = v57;
      v58 = re::introspectionAllocator((re *)v57);
      re::IntrospectionInfo<re::DynamicArray<re::RenderAttachmentState>>::get();
      v59 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v58 + 32))(v58, 72, 8);
      *(_DWORD *)v59 = 1;
      *(_QWORD *)(v59 + 8) = "renderAttachmentState";
      *(_QWORD *)(v59 + 16) = &qword_2541194A8;
      *(_QWORD *)(v59 + 24) = 0;
      *(_QWORD *)(v59 + 32) = 0x380000000ELL;
      *(_DWORD *)(v59 + 40) = 0;
      *(_QWORD *)(v59 + 48) = 0;
      *(_QWORD *)(v59 + 56) = 0;
      *(_DWORD *)(v59 + 64) = 0;
      qword_255835528 = v59;
      v60 = re::introspectionAllocator((re *)v59);
      v62 = re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(1, v61);
      v63 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v60 + 32))(v60, 72, 8);
      *(_DWORD *)v63 = 1;
      *(_QWORD *)(v63 + 8) = "cullMode";
      *(_QWORD *)(v63 + 16) = v62;
      *(_QWORD *)(v63 + 24) = 0;
      *(_QWORD *)(v63 + 32) = 0x340000000FLL;
      *(_DWORD *)(v63 + 40) = 0;
      *(_QWORD *)(v63 + 48) = 0;
      *(_QWORD *)(v63 + 56) = 0;
      *(_DWORD *)(v63 + 64) = 0;
      qword_255835530 = v63;
      v64 = re::introspectionAllocator((re *)v63);
      v66 = re::introspect_float((re *)1, v65);
      v67 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v64 + 32))(v64, 72, 8);
      *(_DWORD *)v67 = 1;
      *(_QWORD *)(v67 + 8) = "depthBias";
      *(_QWORD *)(v67 + 16) = v66;
      *(_QWORD *)(v67 + 24) = 0;
      *(_QWORD *)(v67 + 32) = 0x2800000010;
      *(_DWORD *)(v67 + 40) = 0;
      *(_QWORD *)(v67 + 48) = 0;
      *(_QWORD *)(v67 + 56) = 0;
      *(_DWORD *)(v67 + 64) = 0;
      qword_255835538 = v67;
      v68 = re::introspectionAllocator((re *)v67);
      v70 = re::introspect_float((re *)1, v69);
      v71 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v68 + 32))(v68, 72, 8);
      *(_DWORD *)v71 = 1;
      *(_QWORD *)(v71 + 8) = "depthSlopeScale";
      *(_QWORD *)(v71 + 16) = v70;
      *(_QWORD *)(v71 + 24) = 0;
      *(_QWORD *)(v71 + 32) = 0x2C00000011;
      *(_DWORD *)(v71 + 40) = 0;
      *(_QWORD *)(v71 + 48) = 0;
      *(_QWORD *)(v71 + 56) = 0;
      *(_DWORD *)(v71 + 64) = 0;
      qword_255835540 = v71;
      v72 = re::introspectionAllocator((re *)v71);
      v74 = re::introspect_float((re *)1, v73);
      v75 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v72 + 32))(v72, 72, 8);
      *(_DWORD *)v75 = 1;
      *(_QWORD *)(v75 + 8) = "depthClamp";
      *(_QWORD *)(v75 + 16) = v74;
      *(_QWORD *)(v75 + 24) = 0;
      *(_QWORD *)(v75 + 32) = 0x3000000012;
      *(_DWORD *)(v75 + 40) = 0;
      *(_QWORD *)(v75 + 48) = 0;
      *(_QWORD *)(v75 + 56) = 0;
      *(_DWORD *)(v75 + 64) = 0;
      qword_255835548 = v75;
      v76 = re::introspectionAllocator((re *)v75);
      v78 = re::introspect_BOOL((re *)1, v77);
      v79 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v76 + 32))(v76, 72, 8);
      *(_DWORD *)v79 = 1;
      *(_QWORD *)(v79 + 8) = "preferProgrammableBlending";
      *(_QWORD *)(v79 + 16) = v78;
      *(_QWORD *)(v79 + 24) = 0;
      *(_QWORD *)(v79 + 32) = 0x100000013;
      *(_DWORD *)(v79 + 40) = 0;
      *(_QWORD *)(v79 + 48) = 0;
      *(_QWORD *)(v79 + 56) = 0;
      *(_DWORD *)(v79 + 64) = 0;
      qword_255835550 = v79;
      __cxa_guard_release(&qword_2541190B8);
    }
  }
  *((_QWORD *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 19;
  *((_QWORD *)this + 8) = &qword_2558354C0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::TechniqueState>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::TechniqueState>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::TechniqueState>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::TechniqueState>;
  re::IntrospectionRegistry::add(this, v3);
  v80 = v82;
}

void re::IntrospectionInfo<re::DynamicArray<re::RenderAttachmentState>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  re *v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  const re::IntrospectionBase *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  const re::IntrospectionBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  const re::IntrospectionBase *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  const re::IntrospectionBase *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  const re::IntrospectionBase *v45;
  void *v46;
  uint64_t v47;
  uint64_t *v48;
  const re::IntrospectionBase *v49;
  uint64_t *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54[2];
  __int128 v55;
  const char *v56;
  __int128 v57;

  v0 = atomic_load((unsigned __int8 *)&qword_2541191B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541191B8))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2541194A8);
    qword_2541194A8 = (uint64_t)&off_24ED76110;
    __cxa_guard_release(&qword_2541191B8);
  }
  if ((byte_254118FF2 & 1) == 0)
  {
    v1 = (uint64_t *)qword_2541190A8;
    if (qword_2541190A8)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254119098);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254119098))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254119DC0, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254119DD0 = 0;
      *(_QWORD *)&xmmword_254119DE0 = 0;
      *((_QWORD *)&xmmword_254119DE0 + 1) = 0xFFFFFFFFLL;
      qword_254119DC0 = (uint64_t)&off_24ED7DAA8;
      qword_254119DF0 = (uint64_t)"RenderAttachmentState";
      dword_254119DF8 = 0;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + 80) = 0u;
      *(_OWORD *)(v12 + 96) = 0u;
      qword_254119E30 = 0;
      __cxa_guard_release(&qword_254119098);
    }
    qword_2541190A8 = (uint64_t)&qword_254119DC0;
    *(_QWORD *)&v57 = 0xA6BA137CEBA0C130;
    *((_QWORD *)&v57 + 1) = "RenderAttachmentState";
    re::StringID::destroyString((re::StringID *)&v57);
    xmmword_254119DE0 = v55;
    v4 = atomic_load((unsigned __int8 *)&qword_2541190A0);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_2541190A0);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::introspect_BOOL((re *)1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "alphaBlend";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_254119740 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v20 = re::introspect_BOOL((re *)1, v19);
        v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = "preferProgrammableBlending";
        *(_QWORD *)(v21 + 16) = v20;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0x100000002;
        *(_DWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        *(_QWORD *)(v21 + 56) = 0;
        *(_DWORD *)(v21 + 64) = 0;
        qword_254119748 = v21;
        v22 = re::introspectionAllocator((re *)v21);
        v23 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 24, 8);
        *(_DWORD *)v23 = 5;
        *((_QWORD *)v23 + 1) = "programmableBlending";
        *((_QWORD *)v23 + 2) = "preferProgrammableBlending";
        qword_254119750 = (uint64_t)v23;
        v24 = re::introspectionAllocator(v23);
        v26 = re::mtl::introspect_BlendFactor((re::mtl *)1, v25);
        v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
        *(_DWORD *)v27 = 1;
        *(_QWORD *)(v27 + 8) = "rgbSourceFactor";
        *(_QWORD *)(v27 + 16) = v26;
        *(_QWORD *)(v27 + 24) = 0;
        *(_QWORD *)(v27 + 32) = 0x400000003;
        *(_DWORD *)(v27 + 40) = 0;
        *(_QWORD *)(v27 + 48) = 0;
        *(_QWORD *)(v27 + 56) = 0;
        *(_DWORD *)(v27 + 64) = 0;
        qword_254119758 = v27;
        v28 = re::introspectionAllocator((re *)v27);
        v30 = re::mtl::introspect_BlendFactor((re::mtl *)1, v29);
        v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
        *(_DWORD *)v31 = 1;
        *(_QWORD *)(v31 + 8) = "rgbDestinationFactor";
        *(_QWORD *)(v31 + 16) = v30;
        *(_QWORD *)(v31 + 24) = 0;
        *(_QWORD *)(v31 + 32) = 0x800000004;
        *(_DWORD *)(v31 + 40) = 0;
        *(_QWORD *)(v31 + 48) = 0;
        *(_QWORD *)(v31 + 56) = 0;
        *(_DWORD *)(v31 + 64) = 0;
        qword_254119760 = v31;
        v32 = re::introspectionAllocator((re *)v31);
        v34 = re::mtl::introspect_BlendOperation((re::mtl *)1, v33);
        v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v32 + 32))(v32, 72, 8);
        *(_DWORD *)v35 = 1;
        *(_QWORD *)(v35 + 8) = "rgbBlendOperation";
        *(_QWORD *)(v35 + 16) = v34;
        *(_QWORD *)(v35 + 24) = 0;
        *(_QWORD *)(v35 + 32) = 0xC00000005;
        *(_DWORD *)(v35 + 40) = 0;
        *(_QWORD *)(v35 + 48) = 0;
        *(_QWORD *)(v35 + 56) = 0;
        *(_DWORD *)(v35 + 64) = 0;
        qword_254119768 = v35;
        v36 = re::introspectionAllocator((re *)v35);
        v38 = re::mtl::introspect_BlendFactor((re::mtl *)1, v37);
        v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 72, 8);
        *(_DWORD *)v39 = 1;
        *(_QWORD *)(v39 + 8) = "alphaSourceFactor";
        *(_QWORD *)(v39 + 16) = v38;
        *(_QWORD *)(v39 + 24) = 0;
        *(_QWORD *)(v39 + 32) = 0x1000000006;
        *(_DWORD *)(v39 + 40) = 0;
        *(_QWORD *)(v39 + 48) = 0;
        *(_QWORD *)(v39 + 56) = 0;
        *(_DWORD *)(v39 + 64) = 0;
        qword_254119770 = v39;
        v40 = re::introspectionAllocator((re *)v39);
        v42 = re::mtl::introspect_BlendFactor((re::mtl *)1, v41);
        v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
        *(_DWORD *)v43 = 1;
        *(_QWORD *)(v43 + 8) = "alphaDestinationFactor";
        *(_QWORD *)(v43 + 16) = v42;
        *(_QWORD *)(v43 + 24) = 0;
        *(_QWORD *)(v43 + 32) = 0x1400000007;
        *(_DWORD *)(v43 + 40) = 0;
        *(_QWORD *)(v43 + 48) = 0;
        *(_QWORD *)(v43 + 56) = 0;
        *(_DWORD *)(v43 + 64) = 0;
        qword_254119778 = v43;
        v44 = re::introspectionAllocator((re *)v43);
        v46 = re::mtl::introspect_BlendOperation((re::mtl *)1, v45);
        v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
        *(_DWORD *)v47 = 1;
        *(_QWORD *)(v47 + 8) = "alphaBlendOperation";
        *(_QWORD *)(v47 + 16) = v46;
        *(_QWORD *)(v47 + 24) = 0;
        *(_QWORD *)(v47 + 32) = 0x1800000008;
        *(_DWORD *)(v47 + 40) = 0;
        *(_QWORD *)(v47 + 48) = 0;
        *(_QWORD *)(v47 + 56) = 0;
        *(_DWORD *)(v47 + 64) = 0;
        qword_254119780 = v47;
        v48 = re::introspectionAllocator((re *)v47);
        v50 = re::mtl::introspect_ColorWriteMask((re::mtl *)1, v49);
        v51 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v48 + 32))(v48, 72, 8);
        *(_DWORD *)v51 = 1;
        *(_QWORD *)(v51 + 8) = "colorWriteMask";
        *(_QWORD *)(v51 + 16) = v50;
        *(_QWORD *)(v51 + 24) = 0;
        *(_QWORD *)(v51 + 32) = 0x1C00000009;
        *(_DWORD *)(v51 + 40) = 0;
        *(_QWORD *)(v51 + 48) = 0;
        *(_QWORD *)(v51 + 56) = 0;
        *(_DWORD *)(v51 + 64) = 0;
        qword_254119788 = v51;
        __cxa_guard_release(&qword_2541190A0);
      }
    }
    qword_254119DD0 = 0x2000000008;
    v1 = &qword_254119DC0;
    dword_254119DD8 = 4;
    word_254119DDC = 1;
    dword_254119DF8 = 10;
    qword_254119E00 = (uint64_t)&qword_254119740;
    qword_254119E08 = (uint64_t)re::internal::defaultConstruct<re::RenderAttachmentState>;
    qword_254119E10 = (uint64_t)re::internal::defaultDestruct<re::RenderAttachmentState>;
    qword_254119E20 = 0;
    qword_254119E18 = 0;
    qword_254119E28 = (uint64_t)re::internal::defaultConstructV2<re::RenderAttachmentState>;
    qword_254119E30 = (uint64_t)re::internal::defaultDestructV2<re::RenderAttachmentState>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254119DC0, v3);
    v57 = v55;
    if ((byte_254118FF2 & 1) == 0)
    {
LABEL_7:
      byte_254118FF2 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541194A8, 0);
      qword_2541194B8 = 0x2800000003;
      dword_2541194C0 = v5;
      word_2541194C4 = 0;
      *(_QWORD *)&xmmword_2541194C8 = 0;
      *((_QWORD *)&xmmword_2541194C8 + 1) = 0xFFFFFFFFLL;
      qword_2541194D8 = (uint64_t)v1;
      qword_2541194E0 = 0;
      qword_2541194A8 = (uint64_t)&off_24ED76110;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2541194A8, (const re::IntrospectionBase *)&v55);
      if ((BYTE8(v55) & 1) != 0)
        v8 = v56;
      else
        v8 = (char *)&v55 + 9;
      if ((_QWORD)v55 && (BYTE8(v55) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v55 + 40))();
      v53 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v54);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v52 + 1) = v10;
      }
      else
      {
        v57 = v53;
        re::TypeBuilder::beginListType((uint64_t)&v55, v54, 1, 0x28uLL, 8uLL, &v57);
        re::TypeBuilder::setConstructor((uint64_t)&v55, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v55, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v55, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v55, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v55, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v55, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v55, v11);
      }
      xmmword_2541194C8 = v52;
      re::StringID::destroyString((re::StringID *)v54);
    }
  }
}

double re::internal::defaultConstruct<re::TechniqueState>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0xFFFF000100010000;
  *(_WORD *)(a3 + 8) = 1792;
  *(_BYTE *)(a3 + 10) = 4;
  *(_OWORD *)(a3 + 12) = xmmword_226133C50;
  *(_QWORD *)&result = 5;
  *(_QWORD *)(a3 + 28) = 5;
  *(_DWORD *)(a3 + 36) = 15;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_DWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 45) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::TechniqueState>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v4;

  v4 = (_QWORD *)(a3 + 56);
  result = *(_QWORD *)(a3 + 56);
  if (result)
  {
    if (*(_QWORD *)(a3 + 88))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a3 + 88) = 0;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    ++*(_DWORD *)(a3 + 80);
  }
  return result;
}

double re::internal::defaultConstructV2<re::TechniqueState>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0xFFFF000100010000;
  *(_WORD *)(a1 + 8) = 1792;
  *(_BYTE *)(a1 + 10) = 4;
  *(_OWORD *)(a1 + 12) = xmmword_226133C50;
  *(_QWORD *)&result = 5;
  *(_QWORD *)(a1 + 28) = 5;
  *(_DWORD *)(a1 + 36) = 15;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 45) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::TechniqueState>(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 56);
  result = *(_QWORD *)(a1 + 56);
  if (result)
  {
    if (*(_QWORD *)(a1 + 88))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 88) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 80);
  }
  return result;
}

re::MaterialTechniqueData *re::internal::defaultConstruct<re::MaterialTechniqueData>(int a1, int a2, re::MaterialTechniqueData *this)
{
  return re::MaterialTechniqueData::MaterialTechniqueData(this);
}

void re::internal::defaultDestruct<re::MaterialTechniqueData>(int a1, int a2, re::MaterialTechniqueData *this)
{
  re::MaterialTechniqueData::~MaterialTechniqueData(this);
}

_QWORD *re::internal::defaultConstruct<re::MaterialTechniqueGroupData>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  result = re::DynamicString::setCapacity((_QWORD *)a3, 0);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 56) = 0;
  return result;
}

double re::internal::defaultDestruct<re::MaterialTechniqueGroupData>(int a1, int a2, re::MaterialTechniqueGroupData *this)
{
  double result;

  re::MaterialTechniqueGroupData::deinit(this);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 32);
  if (*(_QWORD *)this)
  {
    if ((*((_BYTE *)this + 8) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this, *((_QWORD *)this + 2));
    result = 0.0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  return result;
}

_QWORD *re::internal::defaultConstructV2<re::MaterialTechniqueGroupData>(uint64_t a1)
{
  _QWORD *result;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  result = re::DynamicString::setCapacity((_QWORD *)a1, 0);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  return result;
}

double re::internal::defaultDestructV2<re::MaterialTechniqueGroupData>(re::MaterialTechniqueGroupData *a1)
{
  double result;

  re::MaterialTechniqueGroupData::deinit(a1);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)a1 + 32);
  if (*(_QWORD *)a1)
  {
    if ((*((_BYTE *)a1 + 8) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)a1 + 40))(*(_QWORD *)a1, *((_QWORD *)a1 + 2));
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

_QWORD *re::internal::defaultConstruct<re::MaterialTechniqueQualityLevelSetData>(_anonymous_namespace_ *a1, uint64_t a2, _OWORD *a3)
{
  _OWORD *v3;
  _anonymous_namespace_ *v4;
  _QWORD *result;

  v3 = a3;
  *a3 = 0u;
  a3[1] = 0u;
  v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  v3[2] = 0u;
  v3[3] = 0u;
  v3 += 2;
  result = re::DynamicString::setCapacity(v3, 0);
  *((_QWORD *)v3 + 8) = 0;
  *((_QWORD *)v3 + 5) = 0;
  *((_QWORD *)v3 + 6) = 0;
  *((_QWORD *)v3 + 4) = 0;
  *((_DWORD *)v3 + 14) = 0;
  return result;
}

void re::internal::defaultDestruct<re::MaterialTechniqueQualityLevelSetData>(int a1, int a2, re::MaterialTechniqueQualityLevelSetData *this)
{
  re::MaterialTechniqueQualityLevelSetData::~MaterialTechniqueQualityLevelSetData(this);
}

_QWORD *re::internal::defaultConstructV2<re::MaterialTechniqueQualityLevelSetData>(_anonymous_namespace_ *a1)
{
  _anonymous_namespace_ *v1;
  _anonymous_namespace_ *v2;
  _QWORD *result;

  v1 = a1;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v1, 0);
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  v1 = (_anonymous_namespace_ *)((char *)v1 + 32);
  result = re::DynamicString::setCapacity(v1, 0);
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 5) = 0;
  *((_QWORD *)v1 + 6) = 0;
  *((_QWORD *)v1 + 4) = 0;
  *((_DWORD *)v1 + 14) = 0;
  return result;
}

void *re::allocInfo_MaterialParameterData(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254119110);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254119110))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_2558351D8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "MaterialParameterData";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_254119110);
  }
  return &unk_2558351D8;
}

void re::initInfo_MaterialParameterData(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  uint64_t v19;
  uint64_t *v20;
  const re::IntrospectionBase *v21;
  uint64_t v22;
  __int128 v23;
  _QWORD v24[2];
  __int128 v25;

  v24[0] = 0x713A1216587C19D8;
  v24[1] = "MaterialParameterData";
  re::StringID::destroyString((re::StringID *)v24);
  *((_OWORD *)this + 2) = v25;
  v4 = atomic_load((unsigned __int8 *)&qword_254119118);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254119118);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "constants";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2541192A8 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "buffers";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x3000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_2541192B0 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      re::IntrospectionInfo<re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v14, v15);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "textures";
      *(_QWORD *)(v16 + 16) = &qword_2541197E0;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x6000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_2541192B8 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      re::IntrospectionInfo<re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v17, v18);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "textureBlocks";
      *(_QWORD *)(v19 + 16) = &qword_254119830;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x9000000004;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_2541192C0 = v19;
      v20 = re::introspectionAllocator((re *)v19);
      re::IntrospectionInfo<re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v20, v21);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "samplers";
      *(_QWORD *)(v22 + 16) = &qword_254119880;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0xC000000005;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_2541192C8 = v22;
      __cxa_guard_release(&qword_254119118);
    }
  }
  *((_QWORD *)this + 2) = 0xF000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_2541192A8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::MaterialParameterData>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::MaterialParameterData>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::MaterialParameterData>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::MaterialParameterData>;
  re::IntrospectionRegistry::add(this, v3);
  v23 = v25;
}

void re::IntrospectionInfo<re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  re *v3;
  const re::IntrospectionBase *v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  _anonymous_namespace_ *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21[2];
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  _QWORD v27[2];
  __int128 v28;
  StringID v29;
  const char **v30;

  v2 = atomic_load((unsigned __int8 *)&qword_2541191C0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2541191C0))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_2541197E0);
    qword_2541197E0 = (uint64_t)&off_24ED761A8;
    __cxa_guard_release(&qword_2541191C0);
  }
  if ((byte_254118FF3 & 1) == 0)
  {
    v3 = (re *)re::IntrospectionInfo<re::DynamicString>::get(1, a2);
    re::introspect_MaterialTextureParam(v3, v4);
    if ((byte_254118FF3 & 1) == 0)
    {
      byte_254118FF3 = 1;
      v5 = dword_254119A30;
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541197E0, 0);
      qword_2541197F0 = 0x3000000007;
      dword_2541197F8 = v5;
      word_2541197FC = 0;
      *(_QWORD *)&xmmword_254119800 = 0;
      *((_QWORD *)&xmmword_254119800 + 1) = 0xFFFFFFFFLL;
      qword_254119810 = (uint64_t)v3;
      qword_254119818 = 0;
      qword_254119820 = (uint64_t)&qword_254119A18;
      qword_254119828 = 0;
      qword_2541197E0 = (uint64_t)&off_24ED761A8;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2541197E0, (const re::IntrospectionBase *)&v24);
      if ((v25 & 1) != 0)
        v8 = v26;
      else
        v8 = (char *)&v25 + 1;
      if (v24 && (v25 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v24 + 40))();
      v9 = *((_OWORD *)v3 + 2);
      v19 = xmmword_254119A38;
      v20 = v9;
      v10 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v21);
      if (v10)
      {
        v11 = *v10;
        *((_QWORD *)&v18 + 1) = v11;
      }
      else
      {
        v24 = 0x449AD97C4B77BED4;
        v25 = "_CompareFunc";
        v12 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v24);
        if (v12)
        {
          v13 = *v12;
          re::StringID::destroyString((re::StringID *)&v24);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v24);
          *(_QWORD *)&v29.var0 = 0x449AD97C4B77BED4;
          v29.var1 = "_CompareFunc";
          v14 = (void *)v24;
          v13 = (uint64_t)v25;
          re::StringID::destroyString((re::StringID *)&v29);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v29, (uint64_t)&v25);
        if (!v14
          || (v15 = *v30,
              v24 = v13,
              v25 = v15,
              LODWORD(v26) = -1,
              (v16 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v29.var0 + 768, &v24)) == 0)|| !*(_QWORD *)v16)
        {
          v28 = v20;
          v27[0] = v14;
          v27[1] = v13;
        }
        v22 = v19;
        v23 = v20;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v24, v21, 1, 0x30uLL, 8uLL, &v23, &v22);
        re::TypeBuilder::setConstructor((uint64_t)&v24, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v24, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v24, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v24, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v24, v17);
      }
      xmmword_254119800 = v18;
      re::StringID::destroyString((re::StringID *)v21);
    }
  }
}

void re::IntrospectionInfo<re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  uint64_t *v3;
  _OWORD *v4;
  uint64_t *v5;
  unsigned __int8 v6;
  const re::IntrospectionBase *v7;
  unsigned __int8 v8;
  int v9;
  re::IntrospectionRegistry *v10;
  const re::IntrospectionBase *v11;
  const char *v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _anonymous_namespace_ *v20;
  uint64_t v21;
  uint64_t v22;
  re *v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  uint64_t v26;
  uint64_t *v27;
  const re::IntrospectionBase *v28;
  void *v29;
  uint64_t v30;
  uint64_t *v31;
  const re::IntrospectionBase *v32;
  void *v33;
  uint64_t v34;
  uint64_t *v35;
  const re::IntrospectionBase *v36;
  uint64_t *v37;
  uint64_t (*v38)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44[2];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  const char *v48;
  _QWORD v49[2];
  __int128 v50;
  __int128 v51;
  uint64_t *v52;

  v2 = atomic_load((unsigned __int8 *)&qword_2541191C8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2541191C8))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_254119830);
    qword_254119830 = (uint64_t)&off_24ED76248;
    __cxa_guard_release(&qword_2541191C8);
  }
  v3 = &qword_254118000;
  if ((byte_254118FF4 & 1) == 0)
  {
    v4 = re::IntrospectionInfo<re::DynamicString>::get(1, a2);
    v5 = (uint64_t *)qword_254119028;
    if (!qword_254119028)
    {
      v6 = atomic_load((unsigned __int8 *)&qword_254119018);
      if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254119018))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254119B68, 0);
        *(_QWORD *)(v22 + 22) = 0;
        qword_254119B78 = 0;
        *(_QWORD *)&xmmword_254119B88 = 0;
        *((_QWORD *)&xmmword_254119B88 + 1) = 0xFFFFFFFFLL;
        qword_254119B68 = (uint64_t)&off_24ED7DAA8;
        qword_254119B98 = (uint64_t)"MaterialTextureBlockData";
        dword_254119BA0 = 0;
        xmmword_254119BA8 = 0u;
        xmmword_254119BB8 = 0u;
        xmmword_254119BC8 = 0u;
        qword_254119BD8 = 0;
        __cxa_guard_release(&qword_254119018);
      }
      qword_254119028 = (uint64_t)&qword_254119B68;
      *(_QWORD *)&v51 = 0x9175FC30469124C6;
      *((_QWORD *)&v51 + 1) = "MaterialTextureBlockData";
      re::StringID::destroyString((re::StringID *)&v51);
      xmmword_254119B88 = v47;
      v8 = atomic_load((unsigned __int8 *)&qword_254119020);
      if ((v8 & 1) == 0)
      {
        v23 = (re *)__cxa_guard_acquire(&qword_254119020);
        if ((_DWORD)v23)
        {
          v24 = re::introspectionAllocator(v23);
          re::introspect_MaterialTextureParam((re *)v24, v25);
          v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
          *(_DWORD *)v26 = 1;
          *(_QWORD *)(v26 + 8) = "texture";
          *(_QWORD *)(v26 + 16) = &qword_254119A18;
          *(_QWORD *)(v26 + 24) = 0;
          *(_QWORD *)(v26 + 32) = 1;
          *(_DWORD *)(v26 + 40) = 0;
          *(_QWORD *)(v26 + 48) = 0;
          *(_QWORD *)(v26 + 56) = 0;
          *(_DWORD *)(v26 + 64) = 0;
          qword_254119288 = v26;
          v27 = re::introspectionAllocator((re *)v26);
          v29 = re::IntrospectionInfo<re::DynamicString>::get(1, v28);
          v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
          *(_DWORD *)v30 = 1;
          *(_QWORD *)(v30 + 8) = "sampler";
          *(_QWORD *)(v30 + 16) = v29;
          *(_QWORD *)(v30 + 24) = 0;
          *(_QWORD *)(v30 + 32) = 0x2800000002;
          *(_DWORD *)(v30 + 40) = 0;
          *(_QWORD *)(v30 + 48) = 0;
          *(_QWORD *)(v30 + 56) = 0;
          *(_DWORD *)(v30 + 64) = 0;
          qword_254119290 = v30;
          v31 = re::introspectionAllocator((re *)v30);
          v33 = re::IntrospectionInfo<re::DynamicString>::get(1, v32);
          v34 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 72, 8);
          *(_DWORD *)v34 = 1;
          *(_QWORD *)(v34 + 8) = "samplerArray";
          *(_QWORD *)(v34 + 16) = v33;
          *(_QWORD *)(v34 + 24) = 0;
          *(_QWORD *)(v34 + 32) = 0x4800000003;
          *(_DWORD *)(v34 + 40) = 0;
          *(_QWORD *)(v34 + 48) = 0;
          *(_QWORD *)(v34 + 56) = 0;
          *(_DWORD *)(v34 + 64) = 0;
          qword_254119298 = v34;
          v35 = re::introspectionAllocator((re *)v34);
          v37 = re::IntrospectionInfo<re::Optional<unsigned int>>::get(1, v36);
          v38 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32);
          v39 = v35;
          v3 = &qword_254118000;
          v40 = v38(v39, 72, 8);
          *(_DWORD *)v40 = 1;
          *(_QWORD *)(v40 + 8) = "uvIndex";
          *(_QWORD *)(v40 + 16) = v37;
          *(_QWORD *)(v40 + 24) = 0;
          *(_QWORD *)(v40 + 32) = 0x6800000004;
          *(_DWORD *)(v40 + 40) = 0;
          *(_QWORD *)(v40 + 48) = 0;
          *(_QWORD *)(v40 + 56) = 0;
          *(_DWORD *)(v40 + 64) = 0;
          qword_2541192A0 = v40;
          __cxa_guard_release(&qword_254119020);
        }
      }
      qword_254119B78 = 0x7000000008;
      v5 = &qword_254119B68;
      dword_254119B80 = 8;
      word_254119B84 = 0;
      dword_254119BA0 = 4;
      *(_QWORD *)&xmmword_254119BA8 = &qword_254119288;
      *((_QWORD *)&xmmword_254119BA8 + 1) = re::internal::defaultConstruct<re::MaterialTextureBlockData>;
      *(_QWORD *)&xmmword_254119BB8 = re::internal::defaultDestruct<re::MaterialTextureBlockData>;
      *(_QWORD *)&xmmword_254119BC8 = 0;
      *((_QWORD *)&xmmword_254119BB8 + 1) = 0;
      *((_QWORD *)&xmmword_254119BC8 + 1) = re::internal::defaultConstructV2<re::MaterialTextureBlockData>;
      qword_254119BD8 = (uint64_t)re::internal::defaultDestructV2<re::MaterialTextureBlockData>;
      re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254119B68, v7);
      v51 = v47;
    }
    if ((*((_BYTE *)v3 + 4084) & 1) == 0)
    {
      byte_254118FF4 = 1;
      v9 = *((_DWORD *)v5 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254119830, 0);
      qword_254119840 = 0x3000000007;
      dword_254119848 = v9;
      word_25411984C = 0;
      *(_QWORD *)&xmmword_254119850 = 0;
      *((_QWORD *)&xmmword_254119850 + 1) = 0xFFFFFFFFLL;
      qword_254119860 = (uint64_t)v4;
      qword_254119868 = 0;
      qword_254119870 = (uint64_t)v5;
      qword_254119878 = 0;
      qword_254119830 = (uint64_t)&off_24ED76248;
      re::IntrospectionRegistry::add(v10, v11);
      re::getPrettyTypeName((re *)&qword_254119830, (const re::IntrospectionBase *)&v47);
      if ((BYTE8(v47) & 1) != 0)
        v12 = v48;
      else
        v12 = (char *)&v47 + 9;
      if ((_QWORD)v47 && (BYTE8(v47) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v47 + 40))();
      v13 = v4[2];
      v42 = *((_OWORD *)v5 + 2);
      v43 = v13;
      v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v44);
      if (v14)
      {
        v15 = *v14;
        *((_QWORD *)&v41 + 1) = v15;
      }
      else
      {
        *(_QWORD *)&v47 = 0x449AD97C4B77BED4;
        *((_QWORD *)&v47 + 1) = "_CompareFunc";
        v16 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v47);
        if (v16)
        {
          v17 = *v16;
          re::StringID::destroyString((re::StringID *)&v47);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v47);
          *(_QWORD *)&v51 = 0x449AD97C4B77BED4;
          *((_QWORD *)&v51 + 1) = "_CompareFunc";
          v17 = *((_QWORD *)&v47 + 1);
          v18 = (void *)v47;
          re::StringID::destroyString((re::StringID *)&v51);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v51, (uint64_t)&v47 + 8);
        if (!v18
          || (v19 = *v52,
              *(_QWORD *)&v47 = v17,
              *((_QWORD *)&v47 + 1) = v19,
              LODWORD(v48) = -1,
              (v20 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(v51 + 768, (uint64_t *)&v47)) == 0)|| !*(_QWORD *)v20)
        {
          v50 = v43;
          v49[0] = v18;
          v49[1] = v17;
        }
        v45 = v42;
        v46 = v43;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v47, v44, 1, 0x30uLL, 8uLL, &v46, &v45);
        re::TypeBuilder::setConstructor((uint64_t)&v47, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v47, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v47, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v47, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v47, v21);
      }
      xmmword_254119850 = v41;
      re::StringID::destroyString((re::StringID *)v44);
    }
  }
}

void re::IntrospectionInfo<re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  re *v3;
  uint64_t v4;
  uint64_t *v5;
  re::IntrospectionBase *v6;
  int v7;
  re::IntrospectionRegistry *v8;
  const re::IntrospectionBase *v9;
  const char *v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  _anonymous_namespace_ *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23[2];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  _QWORD v29[2];
  __int128 v30;
  StringID v31;
  const char **v32;

  v2 = atomic_load((unsigned __int8 *)&qword_2541191D0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2541191D0))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_254119880);
    qword_254119880 = (uint64_t)&off_24ED762E8;
    __cxa_guard_release(&qword_2541191D0);
  }
  if ((byte_254118FF5 & 1) == 0)
  {
    v3 = (re *)re::IntrospectionInfo<re::DynamicString>::get(1, a2);
    v4 = (uint64_t)v3;
    v5 = (uint64_t *)re::internal::introspectionInfoStorage<re::OptionalMaterialSamplerData>;
    if (!re::internal::introspectionInfoStorage<re::OptionalMaterialSamplerData>)
    {
      v5 = re::allocInfo_OptionalMaterialSamplerData(v3);
      re::internal::introspectionInfoStorage<re::OptionalMaterialSamplerData> = v5;
      re::initInfo_OptionalMaterialSamplerData((re *)v5, v6);
    }
    if ((byte_254118FF5 & 1) == 0)
    {
      byte_254118FF5 = 1;
      v7 = *((_DWORD *)v5 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254119880, 0);
      qword_254119890 = 0x3000000007;
      dword_254119898 = v7;
      word_25411989C = 0;
      *(_QWORD *)&xmmword_2541198A0 = 0;
      *((_QWORD *)&xmmword_2541198A0 + 1) = 0xFFFFFFFFLL;
      qword_2541198B0 = v4;
      qword_2541198B8 = 0;
      qword_2541198C0 = (uint64_t)v5;
      qword_2541198C8 = 0;
      qword_254119880 = (uint64_t)&off_24ED762E8;
      re::IntrospectionRegistry::add(v8, v9);
      re::getPrettyTypeName((re *)&qword_254119880, (const re::IntrospectionBase *)&v26);
      if ((v27 & 1) != 0)
        v10 = v28;
      else
        v10 = (char *)&v27 + 1;
      if (v26 && (v27 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v26 + 40))();
      v11 = *(_OWORD *)(v4 + 32);
      v21 = *((_OWORD *)v5 + 2);
      v22 = v11;
      v12 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v23);
      if (v12)
      {
        v13 = *v12;
        *((_QWORD *)&v20 + 1) = v13;
      }
      else
      {
        v26 = 0x449AD97C4B77BED4;
        v27 = "_CompareFunc";
        v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v26);
        if (v14)
        {
          v15 = *v14;
          re::StringID::destroyString((re::StringID *)&v26);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v26);
          *(_QWORD *)&v31.var0 = 0x449AD97C4B77BED4;
          v31.var1 = "_CompareFunc";
          v16 = (void *)v26;
          v15 = (uint64_t)v27;
          re::StringID::destroyString((re::StringID *)&v31);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v31, (uint64_t)&v27);
        if (!v16
          || (v17 = *v32,
              v26 = v15,
              v27 = v17,
              LODWORD(v28) = -1,
              (v18 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v31.var0 + 768, &v26)) == 0)|| !*(_QWORD *)v18)
        {
          v30 = v22;
          v29[0] = v16;
          v29[1] = v15;
        }
        v24 = v21;
        v25 = v22;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v26, v23, 1, 0x30uLL, 8uLL, &v25, &v24);
        re::TypeBuilder::setConstructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v26, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v26, v19);
      }
      xmmword_2541198A0 = v20;
      re::StringID::destroyString((re::StringID *)v23);
    }
  }
}

double re::internal::defaultConstruct<re::MaterialParameterData>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_DWORD *)(a3 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_QWORD *)(a3 + 36) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_DWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 84) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_DWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 132) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_DWORD *)(a3 + 176) = 0;
  *(_QWORD *)(a3 + 180) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_DWORD *)(a3 + 224) = 0;
  *(_QWORD *)(a3 + 228) = 0x7FFFFFFFLL;
  return result;
}

double re::internal::defaultDestruct<re::MaterialParameterData>(double a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a4 + 24, a1);
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a4 + 18);
  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a4 + 12);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a4 + 6);
  return re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a4);
}

double re::internal::defaultConstructV2<re::MaterialParameterData>(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 84) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 132) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_DWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 180) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 228) = 0x7FFFFFFFLL;
  return result;
}

double re::internal::defaultDestructV2<re::MaterialParameterData>(uint64_t *a1, double a2)
{
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 24, a2);
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 18);
  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 12);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 6);
  return re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
}

void *re::allocInfo_MaterialDefinitionFile(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254119128);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254119128))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_255835250, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "MaterialDefinitionFile";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_254119128);
  }
  return &unk_255835250;
}

void re::initInfo_MaterialDefinitionFile(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  re *v24;
  re::IntrospectionBase *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  const re::IntrospectionBase *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  const re::IntrospectionBase *v43;
  uint64_t v44;
  uint64_t *v45;
  const re::IntrospectionBase *v46;
  uint64_t v47;
  uint64_t *v48;
  const re::IntrospectionBase *v49;
  void *v50;
  uint64_t v51;
  __int128 v52;
  _QWORD v53[2];
  __int128 v54;

  v53[0] = 0x40860A7DC02A152CLL;
  v53[1] = "MaterialDefinitionFile";
  re::StringID::destroyString((re::StringID *)v53);
  *((_OWORD *)this + 2) = v54;
  v4 = atomic_load((unsigned __int8 *)&qword_254119130);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254119130);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::DynamicString>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "name";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254119AF8 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::IntrospectionInfo<re::DynamicString>::get(1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "deprecationMessage";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x4000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254119B00 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_AssetHandle((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "library";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x6000000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254119B08 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_AssetHandle((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "overrideMaterial";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x7800000004;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_254119B10 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v23 = v22;
      v24 = (re *)qword_254119120;
      if (!qword_254119120)
      {
        v24 = (re *)re::allocInfo_MaterialParameterData((re *)v22);
        qword_254119120 = (uint64_t)v24;
        re::initInfo_MaterialParameterData(v24, v25);
      }
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "parameters";
      *(_QWORD *)(v26 + 16) = v24;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x9000000005;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_254119B18 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      re::IntrospectionInfo<re::DynamicArray<re::MaterialTechniqueData>>::get();
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "techniques";
      *(_QWORD *)(v28 + 16) = &qword_2541194E8;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x18000000006;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_254119B20 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      re::IntrospectionInfo<re::DynamicArray<re::MaterialTechniqueGroupData>>::get();
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "techniqueGroups";
      *(_QWORD *)(v30 + 16) = &qword_254119528;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x1A800000007;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_254119B28 = v30;
      v31 = re::introspectionAllocator((re *)v30);
      v33 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v32);
      v34 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 72, 8);
      *(_DWORD *)v34 = 1;
      *(_QWORD *)(v34 + 8) = "techniqueMapping";
      *(_QWORD *)(v34 + 16) = v33;
      *(_QWORD *)(v34 + 24) = 0;
      *(_QWORD *)(v34 + 32) = 0x1D000000008;
      *(_DWORD *)(v34 + 40) = 0;
      *(_QWORD *)(v34 + 48) = 0;
      *(_QWORD *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_254119B30 = v34;
      v35 = re::introspectionAllocator((re *)v34);
      re::IntrospectionInfo<re::DynamicArray<re::DebugMapping>>::get();
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "debugMappings";
      *(_QWORD *)(v36 + 16) = &qword_254119568;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x23000000009;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_254119B38 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      re::IntrospectionInfo<re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v37, v38);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = "parameterProperties";
      *(_QWORD *)(v39 + 16) = &qword_2541198D0;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0x2580000000ALL;
      *(_DWORD *)(v39 + 40) = 0;
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_254119B40 = v39;
      v40 = re::introspectionAllocator((re *)v39);
      re::IntrospectionInfo<re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>>::get();
      v41 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
      *(_DWORD *)v41 = 1;
      *(_QWORD *)(v41 + 8) = "techniqueQualityLevelSet";
      *(_QWORD *)(v41 + 16) = &qword_2541195A8;
      *(_QWORD *)(v41 + 24) = 0;
      *(_QWORD *)(v41 + 32) = 0x2880000000BLL;
      *(_DWORD *)(v41 + 40) = 0;
      *(_QWORD *)(v41 + 48) = 0;
      *(_QWORD *)(v41 + 56) = 0;
      *(_DWORD *)(v41 + 64) = 0;
      qword_254119B48 = v41;
      v42 = re::introspectionAllocator((re *)v41);
      re::IntrospectionInfo<re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v42, v43);
      v44 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 72, 8);
      *(_DWORD *)v44 = 1;
      *(_QWORD *)(v44 + 8) = "techniqueMappingOverrides";
      *(_QWORD *)(v44 + 16) = &qword_254119920;
      *(_QWORD *)(v44 + 24) = 0;
      *(_QWORD *)(v44 + 32) = 0x2000000000CLL;
      *(_DWORD *)(v44 + 40) = 0;
      *(_QWORD *)(v44 + 48) = 0;
      *(_QWORD *)(v44 + 56) = 0;
      *(_DWORD *)(v44 + 64) = 0;
      qword_254119B50 = v44;
      v45 = re::introspectionAllocator((re *)v44);
      re::IntrospectionInfo<re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v45, v46);
      v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v45 + 32))(v45, 72, 8);
      *(_DWORD *)v47 = 1;
      *(_QWORD *)(v47 + 8) = "shaderCompilationMode";
      *(_QWORD *)(v47 + 16) = &qword_254119790;
      *(_QWORD *)(v47 + 24) = 0;
      *(_QWORD *)(v47 + 32) = 0x2B00000000DLL;
      *(_DWORD *)(v47 + 40) = 0;
      *(_QWORD *)(v47 + 48) = 0;
      *(_QWORD *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_254119B58 = v47;
      v48 = re::introspectionAllocator((re *)v47);
      v50 = re::IntrospectionInfo<re::DynamicString>::get(1, v49);
      v51 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v48 + 32))(v48, 72, 8);
      *(_DWORD *)v51 = 1;
      *(_QWORD *)(v51 + 8) = "profilingCategory";
      *(_QWORD *)(v51 + 16) = v50;
      *(_QWORD *)(v51 + 24) = 0;
      *(_QWORD *)(v51 + 32) = 0x200000000ELL;
      *(_DWORD *)(v51 + 40) = 0;
      *(_QWORD *)(v51 + 48) = 0;
      *(_QWORD *)(v51 + 56) = 0;
      *(_DWORD *)(v51 + 64) = 0;
      qword_254119B60 = v51;
      __cxa_guard_release(&qword_254119130);
    }
  }
  *((_QWORD *)this + 2) = 0x2E000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 14;
  *((_QWORD *)this + 8) = &qword_254119AF8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::MaterialDefinitionFile>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::MaterialDefinitionFile>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::MaterialDefinitionFile>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::MaterialDefinitionFile>;
  re::IntrospectionRegistry::add(this, v3);
  v52 = v54;
}

void re::IntrospectionInfo<re::DynamicArray<re::MaterialTechniqueData>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  re::IntrospectionBase *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  re::IntrospectionBase *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  re::IntrospectionBase *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  void *v39;
  uint64_t v40;
  uint64_t *v41;
  const re::IntrospectionBase *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  const re::IntrospectionBase *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  const re::IntrospectionBase *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  const re::IntrospectionBase *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t *v57;
  const re::IntrospectionBase *v58;
  void *v59;
  uint64_t v60;
  uint64_t *v61;
  const re::IntrospectionBase *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  const re::IntrospectionBase *v66;
  void *v67;
  uint64_t v68;
  uint64_t *v69;
  const re::IntrospectionBase *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  const re::IntrospectionBase *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t *v77;
  const re::IntrospectionBase *v78;
  void *v79;
  uint64_t v80;
  uint64_t *v81;
  const re::IntrospectionBase *v82;
  void *v83;
  uint64_t v84;
  uint64_t *v85;
  const re::IntrospectionBase *v86;
  uint64_t *v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91[2];
  __int128 v92;
  const char *v93;
  __int128 v94;

  v0 = atomic_load((unsigned __int8 *)&qword_2541191D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541191D8))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2541194E8);
    qword_2541194E8 = (uint64_t)&off_24ED76388;
    __cxa_guard_release(&qword_2541191D8);
  }
  if ((byte_254118FF6 & 1) == 0)
  {
    v1 = (uint64_t *)qword_2541190D8;
    if (qword_2541190D8)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_2541190C8);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2541190C8))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254119EB0, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254119EC0 = 0;
      *(_QWORD *)&xmmword_254119ED0 = 0;
      *((_QWORD *)&xmmword_254119ED0 + 1) = 0xFFFFFFFFLL;
      qword_254119EB0 = (uint64_t)&off_24ED7DAA8;
      qword_254119EE0 = (uint64_t)"MaterialTechniqueData";
      dword_254119EE8 = 0;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + 80) = 0u;
      *(_OWORD *)(v12 + 96) = 0u;
      qword_254119F20 = 0;
      __cxa_guard_release(&qword_2541190C8);
    }
    qword_2541190D8 = (uint64_t)&qword_254119EB0;
    *(_QWORD *)&v94 = 0xCB28E91752B24826;
    *((_QWORD *)&v94 + 1) = "MaterialTechniqueData";
    re::StringID::destroyString((re::StringID *)&v94);
    xmmword_254119ED0 = v92;
    v4 = atomic_load((unsigned __int8 *)&qword_2541190D0);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_2541190D0);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::IntrospectionInfo<re::DynamicString>::get(1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "name";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_255835430 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v20 = re::introspect_AssetHandle((re *)1, v19);
        v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = "library";
        *(_QWORD *)(v21 + 16) = v20;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0x4000000002;
        *(_DWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        *(_QWORD *)(v21 + 56) = 0;
        *(_DWORD *)(v21 + 64) = 0;
        qword_255835438 = v21;
        v22 = re::introspectionAllocator((re *)v21);
        v23 = v22;
        v24 = (uint64_t *)qword_254119090;
        if (!qword_254119090)
        {
          v24 = re::allocInfo_MaterialShaderData((re *)v22);
          qword_254119090 = (uint64_t)v24;
          re::initInfo_MaterialShaderData((re *)v24, v25);
        }
        v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
        *(_DWORD *)v26 = 1;
        *(_QWORD *)(v26 + 8) = "vertexShader";
        *(_QWORD *)(v26 + 16) = v24;
        *(_QWORD *)(v26 + 24) = 0;
        *(_QWORD *)(v26 + 32) = 0x5800000003;
        *(_DWORD *)(v26 + 40) = 0;
        *(_QWORD *)(v26 + 48) = 0;
        *(_QWORD *)(v26 + 56) = 0;
        *(_DWORD *)(v26 + 64) = 0;
        qword_255835440 = v26;
        v27 = re::introspectionAllocator((re *)v26);
        v28 = v27;
        v29 = (uint64_t *)qword_254119090;
        if (!qword_254119090)
        {
          v29 = re::allocInfo_MaterialShaderData((re *)v27);
          qword_254119090 = (uint64_t)v29;
          re::initInfo_MaterialShaderData((re *)v29, v30);
        }
        v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
        *(_DWORD *)v31 = 1;
        *(_QWORD *)(v31 + 8) = "pixelShader";
        *(_QWORD *)(v31 + 16) = v29;
        *(_QWORD *)(v31 + 24) = 0;
        *(_QWORD *)(v31 + 32) = 0x9000000004;
        *(_DWORD *)(v31 + 40) = 0;
        *(_QWORD *)(v31 + 48) = 0;
        *(_QWORD *)(v31 + 56) = 0;
        *(_DWORD *)(v31 + 64) = 0;
        qword_255835448 = v31;
        v32 = re::introspectionAllocator((re *)v31);
        v33 = v32;
        v34 = (uint64_t *)qword_2541190C0;
        if (!qword_2541190C0)
        {
          v34 = re::allocInfo_TechniqueState((re *)v32);
          qword_2541190C0 = (uint64_t)v34;
          re::initInfo_TechniqueState((re *)v34, v35);
        }
        v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
        *(_DWORD *)v36 = 1;
        *(_QWORD *)(v36 + 8) = "state";
        *(_QWORD *)(v36 + 16) = v34;
        *(_QWORD *)(v36 + 24) = 0;
        *(_QWORD *)(v36 + 32) = 0xC800000005;
        *(_DWORD *)(v36 + 40) = 0;
        *(_QWORD *)(v36 + 48) = 0;
        *(_QWORD *)(v36 + 56) = 0;
        *(_DWORD *)(v36 + 64) = 0;
        qword_255835450 = v36;
        v37 = re::introspectionAllocator((re *)v36);
        v39 = re::IntrospectionInfo<re::DynamicString>::get(1, v38);
        v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
        *(_DWORD *)v40 = 1;
        *(_QWORD *)(v40 + 8) = "debugMapping";
        *(_QWORD *)(v40 + 16) = v39;
        *(_QWORD *)(v40 + 24) = 0;
        *(_QWORD *)(v40 + 32) = 0x12800000006;
        *(_DWORD *)(v40 + 40) = 0;
        *(_QWORD *)(v40 + 48) = 0;
        *(_QWORD *)(v40 + 56) = 0;
        *(_DWORD *)(v40 + 64) = 0;
        qword_255835458 = v40;
        v41 = re::introspectionAllocator((re *)v40);
        v43 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v42);
        v44 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v41 + 32))(v41, 72, 8);
        *(_DWORD *)v44 = 1;
        *(_QWORD *)(v44 + 8) = "functionConstants";
        *(_QWORD *)(v44 + 16) = v43;
        *(_QWORD *)(v44 + 24) = 0;
        *(_QWORD *)(v44 + 32) = 0x14800000007;
        *(_DWORD *)(v44 + 40) = 0;
        *(_QWORD *)(v44 + 48) = 0;
        *(_QWORD *)(v44 + 56) = 0;
        *(_DWORD *)(v44 + 64) = 0;
        qword_255835460 = v44;
        v45 = re::introspectionAllocator((re *)v44);
        v47 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v46);
        v48 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v45 + 32))(v45, 72, 8);
        *(_DWORD *)v48 = 1;
        *(_QWORD *)(v48 + 8) = "variations";
        *(_QWORD *)(v48 + 16) = v47;
        *(_QWORD *)(v48 + 24) = 0;
        *(_QWORD *)(v48 + 32) = 0x17800000008;
        *(_DWORD *)(v48 + 40) = 0;
        *(_QWORD *)(v48 + 48) = 0;
        *(_QWORD *)(v48 + 56) = 0;
        *(_DWORD *)(v48 + 64) = 0;
        qword_255835468 = v48;
        v49 = re::introspectionAllocator((re *)v48);
        v51 = re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(1, v50);
        v52 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v49 + 32))(v49, 72, 8);
        *(_DWORD *)v52 = 1;
        *(_QWORD *)(v52 + 8) = "defaultVariations";
        *(_QWORD *)(v52 + 16) = v51;
        *(_QWORD *)(v52 + 24) = 0;
        *(_QWORD *)(v52 + 32) = 0x1A800000009;
        *(_DWORD *)(v52 + 40) = 0;
        *(_QWORD *)(v52 + 48) = 0;
        *(_QWORD *)(v52 + 56) = 0;
        *(_DWORD *)(v52 + 64) = 0;
        qword_255835470 = v52;
        v53 = re::introspectionAllocator((re *)v52);
        v55 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v54);
        v56 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v53 + 32))(v53, 72, 8);
        *(_DWORD *)v56 = 1;
        *(_QWORD *)(v56 + 8) = "tags";
        *(_QWORD *)(v56 + 16) = v55;
        *(_QWORD *)(v56 + 24) = 0;
        *(_QWORD *)(v56 + 32) = 0x1D00000000ALL;
        *(_DWORD *)(v56 + 40) = 0;
        *(_QWORD *)(v56 + 48) = 0;
        *(_QWORD *)(v56 + 56) = 0;
        *(_DWORD *)(v56 + 64) = 0;
        qword_255835478 = v56;
        v57 = re::introspectionAllocator((re *)v56);
        v59 = re::introspect_BOOL((re *)1, v58);
        v60 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v57 + 32))(v57, 72, 8);
        *(_DWORD *)v60 = 1;
        *(_QWORD *)(v60 + 8) = "inheritState";
        *(_QWORD *)(v60 + 16) = v59;
        *(_QWORD *)(v60 + 24) = 0;
        *(_QWORD *)(v60 + 32) = 0x2280000000BLL;
        *(_DWORD *)(v60 + 40) = 0;
        *(_QWORD *)(v60 + 48) = 0;
        *(_QWORD *)(v60 + 56) = 0;
        *(_DWORD *)(v60 + 64) = 0;
        qword_255835480 = v60;
        v61 = re::introspectionAllocator((re *)v60);
        v63 = re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(1, v62);
        v64 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v61 + 32))(v61, 72, 8);
        *(_DWORD *)v64 = 1;
        *(_QWORD *)(v64 + 8) = "instancedArguments";
        *(_QWORD *)(v64 + 16) = v63;
        *(_QWORD *)(v64 + 24) = 0;
        *(_QWORD *)(v64 + 32) = 0x2000000000CLL;
        *(_DWORD *)(v64 + 40) = 0;
        *(_QWORD *)(v64 + 48) = 0;
        *(_QWORD *)(v64 + 56) = 0;
        *(_DWORD *)(v64 + 64) = 0;
        qword_255835488 = v64;
        v65 = re::introspectionAllocator((re *)v64);
        v67 = re::introspect_BOOL((re *)1, v66);
        v68 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v65 + 32))(v65, 72, 8);
        *(_DWORD *)v68 = 1;
        *(_QWORD *)(v68 + 8) = "supportsRuntimeFunctionConstants";
        *(_QWORD *)(v68 + 16) = v67;
        *(_QWORD *)(v68 + 24) = 0;
        *(_QWORD *)(v68 + 32) = 0x2290000000DLL;
        *(_DWORD *)(v68 + 40) = 0;
        *(_QWORD *)(v68 + 48) = 0;
        *(_QWORD *)(v68 + 56) = 0;
        *(_DWORD *)(v68 + 64) = 0;
        qword_255835490 = v68;
        v69 = re::introspectionAllocator((re *)v68);
        v71 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v70);
        v72 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v69 + 32))(v69, 72, 8);
        *(_DWORD *)v72 = 1;
        *(_QWORD *)(v72 + 8) = "runtimeFunctionConstantDefaults";
        *(_QWORD *)(v72 + 16) = v71;
        *(_QWORD *)(v72 + 24) = 0;
        *(_QWORD *)(v72 + 32) = 0x2300000000ELL;
        *(_DWORD *)(v72 + 40) = 0;
        *(_QWORD *)(v72 + 48) = 0;
        *(_QWORD *)(v72 + 56) = 0;
        *(_DWORD *)(v72 + 64) = 0;
        qword_255835498 = v72;
        v73 = re::introspectionAllocator((re *)v72);
        v75 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v74);
        v76 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v73 + 32))(v73, 72, 8);
        *(_DWORD *)v76 = 1;
        *(_QWORD *)(v76 + 8) = "preloadOptions";
        *(_QWORD *)(v76 + 16) = v75;
        *(_QWORD *)(v76 + 24) = 0;
        *(_QWORD *)(v76 + 32) = 0x2600000000FLL;
        *(_DWORD *)(v76 + 40) = 0;
        *(_QWORD *)(v76 + 48) = 0;
        *(_QWORD *)(v76 + 56) = 0;
        *(_DWORD *)(v76 + 64) = 0;
        qword_2558354A0 = v76;
        v77 = re::introspectionAllocator((re *)v76);
        v79 = re::IntrospectionInfo<re::DynamicString>::get(1, v78);
        v80 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v77 + 32))(v77, 72, 8);
        *(_DWORD *)v80 = 1;
        *(_QWORD *)(v80 + 8) = "inheritFromTechnique";
        *(_QWORD *)(v80 + 16) = v79;
        *(_QWORD *)(v80 + 24) = 0;
        *(_QWORD *)(v80 + 32) = 0x2000000010;
        *(_DWORD *)(v80 + 40) = 0;
        *(_QWORD *)(v80 + 48) = 0;
        *(_QWORD *)(v80 + 56) = 0;
        *(_DWORD *)(v80 + 64) = 0;
        qword_2558354A8 = v80;
        v81 = re::introspectionAllocator((re *)v80);
        v83 = re::introspect_BOOL((re *)1, v82);
        v84 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v81 + 32))(v81, 72, 8);
        *(_DWORD *)v84 = 1;
        *(_QWORD *)(v84 + 8) = "useDynamicAttributeStride";
        *(_QWORD *)(v84 + 16) = v83;
        *(_QWORD *)(v84 + 24) = 0;
        *(_QWORD *)(v84 + 32) = 0x29000000011;
        *(_DWORD *)(v84 + 40) = 0;
        *(_QWORD *)(v84 + 48) = 0;
        *(_QWORD *)(v84 + 56) = 0;
        *(_DWORD *)(v84 + 64) = 0;
        qword_2558354B0 = v84;
        v85 = re::introspectionAllocator((re *)v84);
        v87 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v86);
        v88 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v85 + 32))(v85, 72, 8);
        *(_DWORD *)v88 = 1;
        *(_QWORD *)(v88 + 8) = "allowRuntimeTechniqueStateOverride";
        *(_QWORD *)(v88 + 16) = v87;
        *(_QWORD *)(v88 + 24) = 0;
        *(_QWORD *)(v88 + 32) = 0x29100000012;
        *(_DWORD *)(v88 + 40) = 0;
        *(_QWORD *)(v88 + 48) = 0;
        *(_QWORD *)(v88 + 56) = 0;
        *(_DWORD *)(v88 + 64) = 0;
        qword_2558354B8 = v88;
        __cxa_guard_release(&qword_2541190D0);
      }
    }
    qword_254119EC0 = 0x29800000008;
    v1 = &qword_254119EB0;
    dword_254119EC8 = 8;
    word_254119ECC = 0;
    dword_254119EE8 = 18;
    qword_254119EF0 = (uint64_t)&qword_255835430;
    qword_254119EF8 = (uint64_t)re::internal::defaultConstruct<re::MaterialTechniqueData>;
    qword_254119F00 = (uint64_t)re::internal::defaultDestruct<re::MaterialTechniqueData>;
    qword_254119F10 = 0;
    qword_254119F08 = 0;
    qword_254119F18 = (uint64_t)re::internal::defaultConstructV2<re::MaterialTechniqueData>;
    qword_254119F20 = (uint64_t)re::internal::defaultDestructV2<re::MaterialTechniqueData>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254119EB0, v3);
    v94 = v92;
    if ((byte_254118FF6 & 1) == 0)
    {
LABEL_7:
      byte_254118FF6 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541194E8, 0);
      qword_2541194F8 = 0x2800000003;
      dword_254119500 = v5;
      word_254119504 = 0;
      *(_QWORD *)&xmmword_254119508 = 0;
      *((_QWORD *)&xmmword_254119508 + 1) = 0xFFFFFFFFLL;
      qword_254119518 = (uint64_t)v1;
      qword_254119520 = 0;
      qword_2541194E8 = (uint64_t)&off_24ED76388;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2541194E8, (const re::IntrospectionBase *)&v92);
      if ((BYTE8(v92) & 1) != 0)
        v8 = v93;
      else
        v8 = (char *)&v92 + 9;
      if ((_QWORD)v92 && (BYTE8(v92) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v92 + 40))();
      v90 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v91);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v89 + 1) = v10;
      }
      else
      {
        v94 = v90;
        re::TypeBuilder::beginListType((uint64_t)&v92, v91, 1, 0x28uLL, 8uLL, &v94);
        re::TypeBuilder::setConstructor((uint64_t)&v92, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v92, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v92, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v92, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v92, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v92, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v92, v11);
      }
      xmmword_254119508 = v89;
      re::StringID::destroyString((re::StringID *)v91);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MaterialTechniqueGroupData>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24[2];
  __int128 v25;
  const char *v26;
  __int128 v27;

  v0 = atomic_load((unsigned __int8 *)&qword_2541191E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541191E0))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254119528);
    qword_254119528 = (uint64_t)&off_24ED76420;
    __cxa_guard_release(&qword_2541191E0);
  }
  if ((byte_254118FF7 & 1) == 0)
  {
    v1 = (uint64_t *)qword_2541190F0;
    if (qword_2541190F0)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_2541190E0);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2541190E0))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254119F28, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254119F38 = 0;
      *(_QWORD *)&xmmword_254119F48 = 0;
      *((_QWORD *)&xmmword_254119F48 + 1) = 0xFFFFFFFFLL;
      qword_254119F28 = (uint64_t)&off_24ED7DAA8;
      qword_254119F58 = (uint64_t)"MaterialTechniqueGroupData";
      dword_254119F60 = 0;
      xmmword_254119F68 = 0u;
      xmmword_254119F78 = 0u;
      xmmword_254119F88 = 0u;
      qword_254119F98 = 0;
      __cxa_guard_release(&qword_2541190E0);
    }
    qword_2541190F0 = (uint64_t)&qword_254119F28;
    *(_QWORD *)&v27 = 0xAECD50652FAE5000;
    *((_QWORD *)&v27 + 1) = "MaterialTechniqueGroupData";
    re::StringID::destroyString((re::StringID *)&v27);
    xmmword_254119F48 = v25;
    v4 = atomic_load((unsigned __int8 *)&qword_2541190E8);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_2541190E8);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::IntrospectionInfo<re::DynamicString>::get(1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "name";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_254119250 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        v20 = re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(1, v19);
        v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v21 = 1;
        *(_QWORD *)(v21 + 8) = "techniques";
        *(_QWORD *)(v21 + 16) = v20;
        *(_QWORD *)(v21 + 24) = 0;
        *(_QWORD *)(v21 + 32) = 0x2000000002;
        *(_DWORD *)(v21 + 40) = 0;
        *(_QWORD *)(v21 + 48) = 0;
        *(_QWORD *)(v21 + 56) = 0;
        *(_DWORD *)(v21 + 64) = 0;
        qword_254119258 = v21;
        __cxa_guard_release(&qword_2541190E8);
      }
    }
    qword_254119F38 = 0x4800000008;
    v1 = &qword_254119F28;
    dword_254119F40 = 8;
    word_254119F44 = 0;
    dword_254119F60 = 2;
    *(_QWORD *)&xmmword_254119F68 = &qword_254119250;
    *((_QWORD *)&xmmword_254119F68 + 1) = re::internal::defaultConstruct<re::MaterialTechniqueGroupData>;
    *(_QWORD *)&xmmword_254119F78 = re::internal::defaultDestruct<re::MaterialTechniqueGroupData>;
    *(_QWORD *)&xmmword_254119F88 = 0;
    *((_QWORD *)&xmmword_254119F78 + 1) = 0;
    *((_QWORD *)&xmmword_254119F88 + 1) = re::internal::defaultConstructV2<re::MaterialTechniqueGroupData>;
    qword_254119F98 = (uint64_t)re::internal::defaultDestructV2<re::MaterialTechniqueGroupData>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254119F28, v3);
    v27 = v25;
    if ((byte_254118FF7 & 1) == 0)
    {
LABEL_7:
      byte_254118FF7 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254119528, 0);
      qword_254119538 = 0x2800000003;
      dword_254119540 = v5;
      word_254119544 = 0;
      *(_QWORD *)&xmmword_254119548 = 0;
      *((_QWORD *)&xmmword_254119548 + 1) = 0xFFFFFFFFLL;
      qword_254119558 = (uint64_t)v1;
      qword_254119560 = 0;
      qword_254119528 = (uint64_t)&off_24ED76420;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254119528, (const re::IntrospectionBase *)&v25);
      if ((BYTE8(v25) & 1) != 0)
        v8 = v26;
      else
        v8 = (char *)&v25 + 9;
      if ((_QWORD)v25 && (BYTE8(v25) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v25 + 40))();
      v23 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v24);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v22 + 1) = v10;
      }
      else
      {
        v27 = v23;
        re::TypeBuilder::beginListType((uint64_t)&v25, v24, 1, 0x28uLL, 8uLL, &v27);
        re::TypeBuilder::setConstructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v25, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v25, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v25, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v25, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v25, v11);
      }
      xmmword_254119548 = v22;
      re::StringID::destroyString((re::StringID *)v24);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::DebugMapping>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re *v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23[2];
  __int128 v24;
  const char *v25;
  __int128 v26;

  v0 = atomic_load((unsigned __int8 *)&qword_2541191E8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541191E8))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254119568);
    qword_254119568 = (uint64_t)&off_24ED764B8;
    __cxa_guard_release(&qword_2541191E8);
  }
  if ((byte_254118FF8 & 1) == 0)
  {
    v1 = (uint64_t *)qword_254119060;
    if (qword_254119060)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254119050);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254119050))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254119C58, 0);
      *(_QWORD *)(v12 + 22) = 0;
      qword_254119C68 = 0;
      *(_QWORD *)&xmmword_254119C78 = 0;
      *((_QWORD *)&xmmword_254119C78 + 1) = 0xFFFFFFFFLL;
      qword_254119C58 = (uint64_t)&off_24ED7DAA8;
      qword_254119C88 = (uint64_t)"DebugMapping";
      dword_254119C90 = 0;
      xmmword_254119C98 = 0u;
      xmmword_254119CA8 = 0u;
      xmmword_254119CB8 = 0u;
      qword_254119CC8 = 0;
      __cxa_guard_release(&qword_254119050);
    }
    qword_254119060 = (uint64_t)&qword_254119C58;
    *(_QWORD *)&v26 = 0x3253EF60E3187636;
    *((_QWORD *)&v26 + 1) = "DebugMapping";
    re::StringID::destroyString((re::StringID *)&v26);
    xmmword_254119C78 = v24;
    v4 = atomic_load((unsigned __int8 *)&qword_254119058);
    if ((v4 & 1) == 0)
    {
      v13 = (re *)__cxa_guard_acquire(&qword_254119058);
      if ((_DWORD)v13)
      {
        v14 = re::introspectionAllocator(v13);
        v16 = re::IntrospectionInfo<re::DynamicString>::get(1, v15);
        v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
        *(_DWORD *)v17 = 1;
        *(_QWORD *)(v17 + 8) = "name";
        *(_QWORD *)(v17 + 16) = v16;
        *(_QWORD *)(v17 + 24) = 0;
        *(_QWORD *)(v17 + 32) = 1;
        *(_DWORD *)(v17 + 40) = 0;
        *(_QWORD *)(v17 + 48) = 0;
        *(_QWORD *)(v17 + 56) = 0;
        *(_DWORD *)(v17 + 64) = 0;
        qword_254119220 = v17;
        v18 = re::introspectionAllocator((re *)v17);
        re::IntrospectionInfo<re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v18, v19);
        v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = "mappings";
        *(_QWORD *)(v20 + 16) = &qword_254119790;
        *(_QWORD *)(v20 + 24) = 0;
        *(_QWORD *)(v20 + 32) = 0x2000000002;
        *(_DWORD *)(v20 + 40) = 0;
        *(_QWORD *)(v20 + 48) = 0;
        *(_QWORD *)(v20 + 56) = 0;
        *(_DWORD *)(v20 + 64) = 0;
        qword_254119228 = v20;
        __cxa_guard_release(&qword_254119058);
      }
    }
    qword_254119C68 = 0x5000000008;
    v1 = &qword_254119C58;
    dword_254119C70 = 8;
    word_254119C74 = 0;
    dword_254119C90 = 2;
    *(_QWORD *)&xmmword_254119C98 = &qword_254119220;
    *((_QWORD *)&xmmword_254119C98 + 1) = re::internal::defaultConstruct<re::DebugMapping>;
    *(_QWORD *)&xmmword_254119CA8 = re::internal::defaultDestruct<re::DebugMapping>;
    *(_QWORD *)&xmmword_254119CB8 = 0;
    *((_QWORD *)&xmmword_254119CA8 + 1) = 0;
    *((_QWORD *)&xmmword_254119CB8 + 1) = re::internal::defaultConstructV2<re::DebugMapping>;
    qword_254119CC8 = (uint64_t)re::internal::defaultDestructV2<re::DebugMapping>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254119C58, v3);
    v26 = v24;
    if ((byte_254118FF8 & 1) == 0)
    {
LABEL_7:
      byte_254118FF8 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254119568, 0);
      qword_254119578 = 0x2800000003;
      dword_254119580 = v5;
      word_254119584 = 0;
      *(_QWORD *)&xmmword_254119588 = 0;
      *((_QWORD *)&xmmword_254119588 + 1) = 0xFFFFFFFFLL;
      qword_254119598 = (uint64_t)v1;
      qword_2541195A0 = 0;
      qword_254119568 = (uint64_t)&off_24ED764B8;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254119568, (const re::IntrospectionBase *)&v24);
      if ((BYTE8(v24) & 1) != 0)
        v8 = v25;
      else
        v8 = (char *)&v24 + 9;
      if ((_QWORD)v24 && (BYTE8(v24) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v24 + 40))();
      v22 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v23);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v21 + 1) = v10;
      }
      else
      {
        v26 = v22;
        re::TypeBuilder::beginListType((uint64_t)&v24, v23, 1, 0x28uLL, 8uLL, &v26);
        re::TypeBuilder::setConstructor((uint64_t)&v24, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v24, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v24, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v24, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v24, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v24, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v24, v11);
      }
      xmmword_254119588 = v21;
      re::StringID::destroyString((re::StringID *)v23);
    }
  }
}

void re::IntrospectionInfo<re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  uint64_t *v3;
  _OWORD *v4;
  uint64_t *v5;
  unsigned __int8 v6;
  const re::IntrospectionBase *v7;
  unsigned __int8 v8;
  int v9;
  re::IntrospectionRegistry *v10;
  const re::IntrospectionBase *v11;
  const char *v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _anonymous_namespace_ *v20;
  uint64_t v21;
  uint64_t v22;
  re *v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  const re::IntrospectionBase *v29;
  uint64_t *v30;
  uint64_t (*v31)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  const char *v41;
  _QWORD v42[2];
  __int128 v43;
  __int128 v44;
  uint64_t *v45;

  v2 = atomic_load((unsigned __int8 *)&qword_2541191F0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2541191F0))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_2541198D0);
    qword_2541198D0 = (uint64_t)&off_24ED76550;
    __cxa_guard_release(&qword_2541191F0);
  }
  v3 = &qword_254118000;
  if ((byte_254118FF9 & 1) == 0)
  {
    v4 = re::IntrospectionInfo<re::DynamicString>::get(1, a2);
    v5 = (uint64_t *)qword_254119078;
    if (!qword_254119078)
    {
      v6 = atomic_load((unsigned __int8 *)&qword_254119068);
      if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254119068))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254119CD0, 0);
        *(_QWORD *)(v22 + 22) = 0;
        qword_254119CE0 = 0;
        *(_QWORD *)&xmmword_254119CF0 = 0;
        *((_QWORD *)&xmmword_254119CF0 + 1) = 0xFFFFFFFFLL;
        qword_254119CD0 = (uint64_t)&off_24ED7DAA8;
        qword_254119D00 = (uint64_t)"OptionalMaterialParameterProperties";
        dword_254119D08 = 0;
        *(_OWORD *)(v22 + 64) = 0u;
        *(_OWORD *)(v22 + 80) = 0u;
        *(_OWORD *)(v22 + 96) = 0u;
        qword_254119D40 = 0;
        __cxa_guard_release(&qword_254119068);
      }
      qword_254119078 = (uint64_t)&qword_254119CD0;
      *(_QWORD *)&v44 = 0xEC26075C392FA2EALL;
      *((_QWORD *)&v44 + 1) = "OptionalMaterialParameterProperties";
      re::StringID::destroyString((re::StringID *)&v44);
      xmmword_254119CF0 = v40;
      v8 = atomic_load((unsigned __int8 *)&qword_254119070);
      if ((v8 & 1) == 0)
      {
        v23 = (re *)__cxa_guard_acquire(&qword_254119070);
        if ((_DWORD)v23)
        {
          v24 = re::introspectionAllocator(v23);
          v26 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(1, v25);
          v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
          *(_DWORD *)v27 = 1;
          *(_QWORD *)(v27 + 8) = "displayName";
          *(_QWORD *)(v27 + 16) = v26;
          *(_QWORD *)(v27 + 24) = 0;
          *(_QWORD *)(v27 + 32) = 1;
          *(_DWORD *)(v27 + 40) = 0;
          *(_QWORD *)(v27 + 48) = 0;
          *(_QWORD *)(v27 + 56) = 0;
          *(_DWORD *)(v27 + 64) = 0;
          qword_254119230 = v27;
          v28 = re::introspectionAllocator((re *)v27);
          v30 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, v29);
          v31 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32);
          v32 = v28;
          v3 = &qword_254118000;
          v33 = v31(v32, 72, 8);
          *(_DWORD *)v33 = 1;
          *(_QWORD *)(v33 + 8) = "isHidden";
          *(_QWORD *)(v33 + 16) = v30;
          *(_QWORD *)(v33 + 24) = 0;
          *(_QWORD *)(v33 + 32) = 0x2800000002;
          *(_DWORD *)(v33 + 40) = 0;
          *(_QWORD *)(v33 + 48) = 0;
          *(_QWORD *)(v33 + 56) = 0;
          *(_DWORD *)(v33 + 64) = 0;
          qword_254119238 = v33;
          __cxa_guard_release(&qword_254119070);
        }
      }
      qword_254119CE0 = 0x3000000008;
      v5 = &qword_254119CD0;
      dword_254119CE8 = 8;
      word_254119CEC = 0;
      dword_254119D08 = 2;
      qword_254119D10 = (uint64_t)&qword_254119230;
      qword_254119D18 = (uint64_t)re::internal::defaultConstruct<re::OptionalMaterialParameterProperties>;
      qword_254119D20 = (uint64_t)re::internal::defaultDestruct<re::OptionalMaterialParameterProperties>;
      qword_254119D30 = 0;
      qword_254119D28 = 0;
      qword_254119D38 = (uint64_t)re::internal::defaultConstructV2<re::OptionalMaterialParameterProperties>;
      qword_254119D40 = (uint64_t)re::internal::defaultDestructV2<re::OptionalMaterialParameterProperties>;
      re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254119CD0, v7);
      v44 = v40;
    }
    if ((*((_BYTE *)v3 + 4089) & 1) == 0)
    {
      byte_254118FF9 = 1;
      v9 = *((_DWORD *)v5 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541198D0, 0);
      qword_2541198E0 = 0x3000000007;
      dword_2541198E8 = v9;
      word_2541198EC = 0;
      *(_QWORD *)&xmmword_2541198F0 = 0;
      *((_QWORD *)&xmmword_2541198F0 + 1) = 0xFFFFFFFFLL;
      qword_254119900 = (uint64_t)v4;
      qword_254119908 = 0;
      qword_254119910 = (uint64_t)v5;
      qword_254119918 = 0;
      qword_2541198D0 = (uint64_t)&off_24ED76550;
      re::IntrospectionRegistry::add(v10, v11);
      re::getPrettyTypeName((re *)&qword_2541198D0, (const re::IntrospectionBase *)&v40);
      if ((BYTE8(v40) & 1) != 0)
        v12 = v41;
      else
        v12 = (char *)&v40 + 9;
      if ((_QWORD)v40 && (BYTE8(v40) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v40 + 40))();
      v13 = v4[2];
      v35 = *((_OWORD *)v5 + 2);
      v36 = v13;
      v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v37);
      if (v14)
      {
        v15 = *v14;
        *((_QWORD *)&v34 + 1) = v15;
      }
      else
      {
        *(_QWORD *)&v40 = 0x449AD97C4B77BED4;
        *((_QWORD *)&v40 + 1) = "_CompareFunc";
        v16 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v40);
        if (v16)
        {
          v17 = *v16;
          re::StringID::destroyString((re::StringID *)&v40);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v40);
          *(_QWORD *)&v44 = 0x449AD97C4B77BED4;
          *((_QWORD *)&v44 + 1) = "_CompareFunc";
          v17 = *((_QWORD *)&v40 + 1);
          v18 = (void *)v40;
          re::StringID::destroyString((re::StringID *)&v44);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v44, (uint64_t)&v40 + 8);
        if (!v18
          || (v19 = *v45,
              *(_QWORD *)&v40 = v17,
              *((_QWORD *)&v40 + 1) = v19,
              LODWORD(v41) = -1,
              (v20 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(v44 + 768, (uint64_t *)&v40)) == 0)|| !*(_QWORD *)v20)
        {
          v43 = v36;
          v42[0] = v18;
          v42[1] = v17;
        }
        v38 = v35;
        v39 = v36;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v40, v37, 1, 0x30uLL, 8uLL, &v39, &v38);
        re::TypeBuilder::setConstructor((uint64_t)&v40, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v40, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v40, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v40, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v40, v21);
      }
      xmmword_2541198F0 = v34;
      re::StringID::destroyString((re::StringID *)v37);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  re *v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27[2];
  __int128 v28;
  const char *v29;
  __int128 v30;

  v0 = atomic_load((unsigned __int8 *)&qword_2541191F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541191F8))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2541195A8);
    qword_2541195A8 = (uint64_t)&off_24ED765F0;
    __cxa_guard_release(&qword_2541191F8);
  }
  if ((byte_254118FFA & 1) == 0)
  {
    v1 = (uint64_t *)qword_254119108;
    if (qword_254119108)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_2541190F8);
    v1 = &_MergedGlobals_277;
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2541190F8))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&_MergedGlobals_277, 0);
      *(uint64_t *)((char *)&qword_255835170 + 6) = 0;
      qword_255835170 = 0;
      *(_QWORD *)&xmmword_255835180 = 0;
      *((_QWORD *)&xmmword_255835180 + 1) = 0xFFFFFFFFLL;
      _MergedGlobals_277 = (uint64_t)&off_24ED7DAA8;
      qword_255835190 = (uint64_t)"MaterialTechniqueQualityLevelSetData";
      dword_255835198 = 0;
      xmmword_2558351A0 = 0u;
      *(_OWORD *)&qword_2558351B0 = 0u;
      xmmword_2558351C0 = 0u;
      qword_2558351D0 = 0;
      __cxa_guard_release(&qword_2541190F8);
    }
    qword_254119108 = (uint64_t)&_MergedGlobals_277;
    *(_QWORD *)&v30 = 0xA79299F1B003743CLL;
    *((_QWORD *)&v30 + 1) = "MaterialTechniqueQualityLevelSetData";
    re::StringID::destroyString((re::StringID *)&v30);
    xmmword_255835180 = v28;
    v4 = atomic_load((unsigned __int8 *)&qword_254119100);
    if ((v4 & 1) == 0)
    {
      v12 = (re *)__cxa_guard_acquire(&qword_254119100);
      if ((_DWORD)v12)
      {
        v13 = re::introspectionAllocator(v12);
        v15 = re::IntrospectionInfo<re::DynamicString>::get(1, v14);
        v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
        *(_DWORD *)v16 = 1;
        *(_QWORD *)(v16 + 8) = "name";
        *(_QWORD *)(v16 + 16) = v15;
        *(_QWORD *)(v16 + 24) = 0;
        *(_QWORD *)(v16 + 32) = 1;
        *(_DWORD *)(v16 + 40) = 0;
        *(_QWORD *)(v16 + 48) = 0;
        *(_QWORD *)(v16 + 56) = 0;
        *(_DWORD *)(v16 + 64) = 0;
        qword_254119270 = v16;
        v17 = re::introspectionAllocator((re *)v16);
        v19 = re::IntrospectionInfo<re::DynamicString>::get(1, v18);
        v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
        *(_DWORD *)v20 = 1;
        *(_QWORD *)(v20 + 8) = "techniqueSetBaseline";
        *(_QWORD *)(v20 + 16) = v19;
        *(_QWORD *)(v20 + 24) = 0;
        *(_QWORD *)(v20 + 32) = 0x2000000002;
        *(_DWORD *)(v20 + 40) = 0;
        *(_QWORD *)(v20 + 48) = 0;
        *(_QWORD *)(v20 + 56) = 0;
        *(_DWORD *)(v20 + 64) = 0;
        qword_254119278 = v20;
        v21 = re::introspectionAllocator((re *)v20);
        v23 = re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(1, v22);
        v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
        *(_DWORD *)v24 = 1;
        *(_QWORD *)(v24 + 8) = "techniques";
        *(_QWORD *)(v24 + 16) = v23;
        *(_QWORD *)(v24 + 24) = 0;
        *(_QWORD *)(v24 + 32) = 0x4000000003;
        *(_DWORD *)(v24 + 40) = 0;
        *(_QWORD *)(v24 + 48) = 0;
        *(_QWORD *)(v24 + 56) = 0;
        *(_DWORD *)(v24 + 64) = 0;
        qword_254119280 = v24;
        __cxa_guard_release(&qword_254119100);
      }
    }
    qword_255835170 = 0x6800000008;
    dword_255835178 = 8;
    word_25583517C = 0;
    dword_255835198 = 3;
    *(_QWORD *)&xmmword_2558351A0 = &qword_254119270;
    *((_QWORD *)&xmmword_2558351A0 + 1) = re::internal::defaultConstruct<re::MaterialTechniqueQualityLevelSetData>;
    qword_2558351B0 = (uint64_t)re::internal::defaultDestruct<re::MaterialTechniqueQualityLevelSetData>;
    unk_2558351B8 = 0;
    *(_QWORD *)&xmmword_2558351C0 = 0;
    *((_QWORD *)&xmmword_2558351C0 + 1) = re::internal::defaultConstructV2<re::MaterialTechniqueQualityLevelSetData>;
    qword_2558351D0 = (uint64_t)re::internal::defaultDestructV2<re::MaterialTechniqueQualityLevelSetData>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&_MergedGlobals_277, v3);
    v30 = v28;
    if ((byte_254118FFA & 1) == 0)
    {
LABEL_7:
      byte_254118FFA = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541195A8, 0);
      qword_2541195B8 = 0x2800000003;
      dword_2541195C0 = v5;
      word_2541195C4 = 0;
      *(_QWORD *)&xmmword_2541195C8 = 0;
      *((_QWORD *)&xmmword_2541195C8 + 1) = 0xFFFFFFFFLL;
      qword_2541195D8 = (uint64_t)v1;
      qword_2541195E0 = 0;
      qword_2541195A8 = (uint64_t)&off_24ED765F0;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2541195A8, (const re::IntrospectionBase *)&v28);
      if ((BYTE8(v28) & 1) != 0)
        v8 = v29;
      else
        v8 = (char *)&v28 + 9;
      if ((_QWORD)v28 && (BYTE8(v28) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v28 + 40))();
      v26 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v27);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v25 + 1) = v10;
      }
      else
      {
        v30 = v26;
        re::TypeBuilder::beginListType((uint64_t)&v28, v27, 1, 0x28uLL, 8uLL, &v30);
        re::TypeBuilder::setConstructor((uint64_t)&v28, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v28, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v28, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v28, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v28, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v28, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v28, v11);
      }
      xmmword_2541195C8 = v25;
      re::StringID::destroyString((re::StringID *)v27);
    }
  }
}

void re::IntrospectionInfo<re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _OWORD *v3;
  const re::IntrospectionBase *v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  re::IntrospectionRegistry *v8;
  const re::IntrospectionBase *v9;
  const char *v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  _anonymous_namespace_ *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23[2];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  _QWORD v29[2];
  __int128 v30;
  StringID v31;
  const char **v32;

  v2 = atomic_load((unsigned __int8 *)&qword_254119200);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254119200))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_254119920);
    qword_254119920 = (uint64_t)&off_24ED76688;
    __cxa_guard_release(&qword_254119200);
  }
  if ((byte_254118FFB & 1) == 0)
  {
    v3 = re::IntrospectionInfo<re::DynamicString>::get(1, a2);
    v5 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v4);
    if ((byte_254118FFB & 1) == 0)
    {
      v6 = (uint64_t)v5;
      byte_254118FFB = 1;
      v7 = *((_DWORD *)v5 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254119920, 0);
      qword_254119930 = 0x3000000007;
      dword_254119938 = v7;
      word_25411993C = 0;
      *(_QWORD *)&xmmword_254119940 = 0;
      *((_QWORD *)&xmmword_254119940 + 1) = 0xFFFFFFFFLL;
      qword_254119950 = (uint64_t)v3;
      qword_254119958 = 0;
      qword_254119960 = v6;
      qword_254119968 = 0;
      qword_254119920 = (uint64_t)&off_24ED76688;
      re::IntrospectionRegistry::add(v8, v9);
      re::getPrettyTypeName((re *)&qword_254119920, (const re::IntrospectionBase *)&v26);
      if ((v27 & 1) != 0)
        v10 = v28;
      else
        v10 = (char *)&v27 + 1;
      if (v26 && (v27 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v26 + 40))();
      v11 = v3[2];
      v21 = *(_OWORD *)(v6 + 32);
      v22 = v11;
      v12 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v23);
      if (v12)
      {
        v13 = *v12;
        *((_QWORD *)&v20 + 1) = v13;
      }
      else
      {
        v26 = 0x449AD97C4B77BED4;
        v27 = "_CompareFunc";
        v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v26);
        if (v14)
        {
          v15 = *v14;
          re::StringID::destroyString((re::StringID *)&v26);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v26);
          *(_QWORD *)&v31.var0 = 0x449AD97C4B77BED4;
          v31.var1 = "_CompareFunc";
          v16 = (void *)v26;
          v15 = (uint64_t)v27;
          re::StringID::destroyString((re::StringID *)&v31);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v31, (uint64_t)&v27);
        if (!v16
          || (v17 = *v32,
              v26 = v15,
              v27 = v17,
              LODWORD(v28) = -1,
              (v18 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v31.var0 + 768, &v26)) == 0)|| !*(_QWORD *)v18)
        {
          v30 = v22;
          v29[0] = v16;
          v29[1] = v15;
        }
        v24 = v21;
        v25 = v22;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v26, v23, 1, 0x30uLL, 8uLL, &v25, &v24);
        re::TypeBuilder::setConstructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v26, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v26, v19);
      }
      xmmword_254119940 = v20;
      re::StringID::destroyString((re::StringID *)v23);
    }
  }
}

re::MaterialDefinitionFile *re::internal::defaultConstruct<re::MaterialDefinitionFile>(int a1, int a2, re::MaterialDefinitionFile *this)
{
  return re::MaterialDefinitionFile::MaterialDefinitionFile(this);
}

void re::internal::defaultDestruct<re::MaterialDefinitionFile>(int a1, int a2, re::MaterialDefinitionFile *this)
{
  re::MaterialDefinitionFile::~MaterialDefinitionFile(this);
}

uint64_t re::introspect_MaterialDefinitionFile(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialDefinitionFile", (uint64_t (*)(re::internal *))re::allocInfo_MaterialDefinitionFile, (re::IntrospectionBase *(*)(void))re::initInfo_MaterialDefinitionFile, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MaterialDefinitionFile>, this);
}

void re::introspect_ShaderStage(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  re *v32;
  uint64_t *v33;
  re *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  StringID v40;
  _QWORD v41[2];
  _QWORD v42[61];

  v2 = atomic_load((unsigned __int8 *)&qword_254119138);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_254119138);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Unknown";
      qword_2541192D0 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Vertex";
      qword_2541192D8 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *((_QWORD *)v32 + 1) = 2;
      *((_QWORD *)v32 + 2) = "Fragment";
      qword_2541192E0 = (uint64_t)v32;
      v33 = re::introspectionAllocator(v32);
      v34 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 24, 8);
      *(_DWORD *)v34 = 1;
      *((_QWORD *)v34 + 1) = 3;
      *((_QWORD *)v34 + 2) = "GeometryModifier";
      qword_2541192E8 = (uint64_t)v34;
      v35 = re::introspectionAllocator(v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 24, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = 4;
      *(_QWORD *)(v36 + 16) = "SurfaceShader";
      qword_2541192F0 = v36;
      __cxa_guard_release(&qword_254119138);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254119140);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254119140))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2541196F8, "ShaderStage", 1, 1, 1, 1);
    qword_2541196F8 = (uint64_t)&off_24ED7D9E8;
    qword_254119738 = (uint64_t)&re::introspect_ShaderStage(BOOL)::enumTable;
    dword_254119708 = 9;
    __cxa_guard_release(&qword_254119140);
  }
  if ((byte_254118FEB & 1) == 0)
  {
    byte_254118FEB = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541196F8, a2);
    v38 = 0x1F785ABD80A53F2;
    v39 = "ShaderStage";
    v42[0] = 0x31CD534126;
    v42[1] = "uint8_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v42);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v42);
      v6 = (unsigned int *)qword_254119738;
      v41[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v42, &v38, 1, 1, (uint64_t)v41);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v40.var0 = 2 * v12;
            v40.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v42, v16, &v40);
            re::StringID::destroyString((re::StringID *)&v40);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v40.var0 = 2 * v20;
              v40.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v42, v24, &v40);
              re::StringID::destroyString((re::StringID *)&v40);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v42, v25);
      xmmword_254119718 = (__int128)v40;
      re::StringID::destroyString((re::StringID *)&v38);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v42);
      re::internal::assertLog((re::internal *)5, v37, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "ShaderStage", v38, v39);
      _os_crash();
      __break(1u);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<re::ShaderAPIFlags::Values>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14[2];
  __int128 v15;
  uint64_t v16;
  char v17;
  _BYTE v18[479];

  v2 = atomic_load((unsigned __int8 *)&qword_254119208);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254119208))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2541195E8);
    qword_2541195E8 = (uint64_t)&off_24ED76728;
    __cxa_guard_release(&qword_254119208);
  }
  if ((byte_254118FFC & 1) == 0)
  {
    v3 = re::introspect_ShaderAPIFlagsValues((re *)1, a2);
    if ((byte_254118FFC & 1) == 0)
    {
      v4 = (uint64_t)v3;
      byte_254118FFC = 1;
      v5 = v3[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541195E8, 0);
      qword_2541195F8 = 0x2800000003;
      dword_254119600 = v5;
      word_254119604 = 0;
      *(_QWORD *)&xmmword_254119608 = 0;
      *((_QWORD *)&xmmword_254119608 + 1) = 0xFFFFFFFFLL;
      qword_254119618 = v4;
      qword_254119620 = 0;
      qword_2541195E8 = (uint64_t)&off_24ED76728;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2541195E8, (const re::IntrospectionBase *)&v16);
      if ((v17 & 1) != 0)
        v8 = *(const char **)&v18[7];
      else
        v8 = v18;
      if (v16 && (v17 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v16 + 40))();
      v13 = *(_OWORD *)(v4 + 32);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v14);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v12 + 1) = v10;
      }
      else
      {
        v15 = v13;
        re::TypeBuilder::beginListType((uint64_t)&v16, v14, 1, 0x28uLL, 8uLL, &v15);
        re::TypeBuilder::setConstructor((uint64_t)&v16, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v16, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v16, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v16, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v16, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v16, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v16, v11);
      }
      xmmword_254119608 = v12;
      re::StringID::destroyString((re::StringID *)v14);
    }
  }
}

void re::IntrospectionInfo<re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  uint64_t *v3;
  _OWORD *v4;
  uint64_t *v5;
  unsigned __int8 v6;
  const re::IntrospectionBase *v7;
  unsigned __int8 v8;
  int v9;
  re::IntrospectionRegistry *v10;
  const re::IntrospectionBase *v11;
  const char *v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _anonymous_namespace_ *v20;
  uint64_t v21;
  re *v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  const re::IntrospectionBase *v28;
  void *v29;
  uint64_t (*v30)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  const char *v40;
  _QWORD v41[2];
  __int128 v42;
  __int128 v43;
  uint64_t *v44;

  v2 = atomic_load((unsigned __int8 *)&qword_254119210);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254119210))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_254119970);
    qword_254119970 = (uint64_t)&off_24ED767C0;
    __cxa_guard_release(&qword_254119210);
  }
  v3 = &qword_254118000;
  if ((byte_254118FFD & 1) == 0)
  {
    v4 = re::IntrospectionInfo<re::DynamicString>::get(1, a2);
    v5 = (uint64_t *)qword_254119170;
    if (!qword_254119170)
    {
      v6 = atomic_load((unsigned __int8 *)&qword_254119160);
      v5 = &qword_255835340;
      if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254119160))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_255835340, 0);
        *(uint64_t *)((char *)&qword_255835350 + 6) = 0;
        qword_255835350 = 0;
        *(_QWORD *)&xmmword_255835360 = 0;
        *((_QWORD *)&xmmword_255835360 + 1) = 0xFFFFFFFFLL;
        qword_255835340 = (uint64_t)&off_24ED7DAA8;
        qword_255835370 = (uint64_t)"ConstantDataEntry";
        dword_255835378 = 0;
        xmmword_255835380 = 0u;
        *(_OWORD *)&qword_255835390 = 0u;
        xmmword_2558353A0 = 0u;
        qword_2558353B0 = 0;
        __cxa_guard_release(&qword_254119160);
      }
      qword_254119170 = (uint64_t)&qword_255835340;
      *(_QWORD *)&v43 = 0x2C54D4B20E616F08;
      *((_QWORD *)&v43 + 1) = "ConstantDataEntry";
      re::StringID::destroyString((re::StringID *)&v43);
      xmmword_255835360 = v39;
      v8 = atomic_load((unsigned __int8 *)&qword_254119168);
      if ((v8 & 1) == 0)
      {
        v22 = (re *)__cxa_guard_acquire(&qword_254119168);
        if ((_DWORD)v22)
        {
          v23 = re::introspectionAllocator(v22);
          v25 = re::introspect_size_t((re *)1, v24);
          v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
          *(_DWORD *)v26 = 1;
          *(_QWORD *)(v26 + 8) = "dataOffset";
          *(_QWORD *)(v26 + 16) = v25;
          *(_QWORD *)(v26 + 24) = 0;
          *(_QWORD *)(v26 + 32) = 1;
          *(_DWORD *)(v26 + 40) = 0;
          *(_QWORD *)(v26 + 48) = 0;
          *(_QWORD *)(v26 + 56) = 0;
          *(_DWORD *)(v26 + 64) = 0;
          qword_254119260 = v26;
          v27 = re::introspectionAllocator((re *)v26);
          v29 = re::introspect_uint16_t((re *)1, v28);
          v30 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32);
          v31 = v27;
          v3 = &qword_254118000;
          v32 = v30(v31, 72, 8);
          *(_DWORD *)v32 = 1;
          *(_QWORD *)(v32 + 8) = "dataType";
          *(_QWORD *)(v32 + 16) = v29;
          *(_QWORD *)(v32 + 24) = 0;
          *(_QWORD *)(v32 + 32) = 0x800000002;
          *(_DWORD *)(v32 + 40) = 0;
          *(_QWORD *)(v32 + 48) = 0;
          *(_QWORD *)(v32 + 56) = 0;
          *(_DWORD *)(v32 + 64) = 0;
          qword_254119268 = v32;
          __cxa_guard_release(&qword_254119168);
        }
      }
      qword_255835350 = 0x1000000008;
      dword_255835358 = 8;
      word_25583535C = 1;
      dword_255835378 = 2;
      *(_QWORD *)&xmmword_255835380 = &qword_254119260;
      *((_QWORD *)&xmmword_255835380 + 1) = re::internal::defaultConstruct<re::ConstantDataEntry>;
      qword_255835390 = (uint64_t)re::internal::defaultDestruct<re::ConstantDataEntry>;
      unk_255835398 = 0;
      *(_QWORD *)&xmmword_2558353A0 = 0;
      *((_QWORD *)&xmmword_2558353A0 + 1) = re::internal::defaultConstructV2<re::ConstantDataEntry>;
      qword_2558353B0 = (uint64_t)re::internal::defaultDestructV2<re::ConstantDataEntry>;
      re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_255835340, v7);
      v43 = v39;
    }
    if ((*((_BYTE *)v3 + 4093) & 1) == 0)
    {
      byte_254118FFD = 1;
      v9 = *((_DWORD *)v5 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254119970, 0);
      qword_254119980 = 0x3000000007;
      dword_254119988 = v9;
      word_25411998C = 0;
      *(_QWORD *)&xmmword_254119990 = 0;
      *((_QWORD *)&xmmword_254119990 + 1) = 0xFFFFFFFFLL;
      qword_2541199A0 = (uint64_t)v4;
      qword_2541199A8 = 0;
      qword_2541199B0 = (uint64_t)v5;
      qword_2541199B8 = 0;
      qword_254119970 = (uint64_t)&off_24ED767C0;
      re::IntrospectionRegistry::add(v10, v11);
      re::getPrettyTypeName((re *)&qword_254119970, (const re::IntrospectionBase *)&v39);
      if ((BYTE8(v39) & 1) != 0)
        v12 = v40;
      else
        v12 = (char *)&v39 + 9;
      if ((_QWORD)v39 && (BYTE8(v39) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v39 + 40))();
      v13 = v4[2];
      v34 = *((_OWORD *)v5 + 2);
      v35 = v13;
      v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v36);
      if (v14)
      {
        v15 = *v14;
        *((_QWORD *)&v33 + 1) = v15;
      }
      else
      {
        *(_QWORD *)&v39 = 0x449AD97C4B77BED4;
        *((_QWORD *)&v39 + 1) = "_CompareFunc";
        v16 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v39);
        if (v16)
        {
          v17 = *v16;
          re::StringID::destroyString((re::StringID *)&v39);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v39);
          *(_QWORD *)&v43 = 0x449AD97C4B77BED4;
          *((_QWORD *)&v43 + 1) = "_CompareFunc";
          v17 = *((_QWORD *)&v39 + 1);
          v18 = (void *)v39;
          re::StringID::destroyString((re::StringID *)&v43);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v43, (uint64_t)&v39 + 8);
        if (!v18
          || (v19 = *v44,
              *(_QWORD *)&v39 = v17,
              *((_QWORD *)&v39 + 1) = v19,
              LODWORD(v40) = -1,
              (v20 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(v43 + 768, (uint64_t *)&v39)) == 0)|| !*(_QWORD *)v20)
        {
          v42 = v35;
          v41[0] = v18;
          v41[1] = v17;
        }
        v37 = v34;
        v38 = v35;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v39, v36, 1, 0x30uLL, 8uLL, &v38, &v37);
        re::TypeBuilder::setConstructor((uint64_t)&v39, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v39, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v39, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v39, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v39, v21);
      }
      xmmword_254119990 = v33;
      re::StringID::destroyString((re::StringID *)v36);
    }
  }
}

double re::internal::defaultConstruct<re::FunctionLink>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _anonymous_namespace_ *v5;
  double result;

  v3 = a3;
  *(_BYTE *)a3 = 0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  v4 = (_QWORD *)(a3 + 8);
  v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v4, 0);
  *(_OWORD *)(v3 + 40) = 0u;
  v3 += 40;
  *(_OWORD *)(v3 + 16) = 0u;
  re::DynamicString::setCapacity((_QWORD *)v3, 0);
  *(_OWORD *)(v3 + 116) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_DWORD *)(v3 + 80) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v3 + 132) = 0x7FFFFFFFLL;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_DWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 180) = 0x7FFFFFFFLL;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_QWORD *)(v3 + 208) = 0;
  *(_QWORD *)(v3 + 192) = 0;
  *(_DWORD *)(v3 + 216) = 0;
  return result;
}

double re::internal::defaultDestruct<re::FunctionLink>(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  _QWORD *v6;
  double v7;
  uint64_t v8;
  double result;
  uint64_t v10;
  uint64_t v11;

  v6 = (_QWORD *)(a4 + 232);
  v5 = *(_QWORD *)(a4 + 232);
  if (v5)
  {
    if (*(_QWORD *)(a4 + 264))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a4 + 264) = 0;
    v6[1] = 0;
    v6[2] = 0;
    *v6 = 0;
    ++*(_DWORD *)(a4 + 256);
  }
  re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a4 + 184), a1);
  v7 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a4 + 136));
  v8 = *(_QWORD *)(a4 + 96);
  if (v8)
  {
    if (*(_QWORD *)(a4 + 128))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v8 + 40))(v8, v7);
    *(_QWORD *)(a4 + 128) = 0;
    *(_QWORD *)(a4 + 104) = 0;
    *(_QWORD *)(a4 + 112) = 0;
    *(_QWORD *)(a4 + 96) = 0;
    ++*(_DWORD *)(a4 + 120);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a4 + 72));
  v10 = *(_QWORD *)(a4 + 40);
  if (v10)
  {
    if ((*(_BYTE *)(a4 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 40))(v10, *(_QWORD *)(a4 + 56));
    result = 0.0;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
  }
  v11 = *(_QWORD *)(a4 + 8);
  if (v11)
  {
    if ((*(_BYTE *)(a4 + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 40))(v11, *(_QWORD *)(a4 + 24));
    result = 0.0;
    *(_OWORD *)(a4 + 8) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
  }
  return result;
}

double re::internal::defaultConstructV2<re::FunctionLink>(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _anonymous_namespace_ *v3;
  double result;

  v1 = a1;
  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v2 = (_QWORD *)(a1 + 8);
  v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v2, 0);
  *(_OWORD *)(v1 + 40) = 0u;
  v1 += 40;
  *(_OWORD *)(v1 + 16) = 0u;
  re::DynamicString::setCapacity((_QWORD *)v1, 0);
  *(_OWORD *)(v1 + 116) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_DWORD *)(v1 + 80) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v1 + 132) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_DWORD *)(v1 + 176) = 0;
  *(_QWORD *)(v1 + 180) = 0x7FFFFFFFLL;
  *(_QWORD *)(v1 + 224) = 0;
  *(_QWORD *)(v1 + 200) = 0;
  *(_QWORD *)(v1 + 208) = 0;
  *(_QWORD *)(v1 + 192) = 0;
  *(_DWORD *)(v1 + 216) = 0;
  return result;
}

double re::internal::defaultDestructV2<re::FunctionLink>(uint64_t a1, double a2)
{
  uint64_t v3;
  _QWORD *v4;
  double v5;
  uint64_t v6;
  double result;
  uint64_t v8;
  uint64_t v9;

  v4 = (_QWORD *)(a1 + 232);
  v3 = *(_QWORD *)(a1 + 232);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 264))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *(_QWORD *)(a1 + 264) = 0;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    ++*(_DWORD *)(a1 + 256);
  }
  re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 184), a2);
  v5 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 136));
  v6 = *(_QWORD *)(a1 + 96);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 128))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v6 + 40))(v6, v5);
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    ++*(_DWORD *)(a1 + 120);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 72));
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(a1 + 56));
    result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
  }
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    if ((*(_BYTE *)(a1 + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, *(_QWORD *)(a1 + 24));
    result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
  }
  return result;
}

void *re::allocInfo_MaterialFile(re *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254119178);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254119178))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&unk_2558353B8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 40) = 0xFFFFFFFFLL;
    *(_QWORD *)v3 = &off_24ED7DAA8;
    *(_QWORD *)(v3 + 48) = "MaterialFile";
    *(_DWORD *)(v3 + 56) = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    *(_QWORD *)(v3 + 112) = 0;
    __cxa_guard_release(&qword_254119178);
  }
  return &unk_2558353B8;
}

void re::initInfo_MaterialFile(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  re *v16;
  re::IntrospectionBase *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  __int128 v28;
  _QWORD v29[2];
  __int128 v30;

  v29[0] = 0x3898C50117566EC6;
  v29[1] = "MaterialFile";
  re::StringID::destroyString((re::StringID *)v29);
  *((_OWORD *)this + 2) = v30;
  v4 = atomic_load((unsigned __int8 *)&qword_254119180);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254119180);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::DynamicString>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "name";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_2541192F8 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::introspect_AssetHandle((re *)1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "materialDefinition";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x2000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254119300 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v15 = v14;
      v16 = (re *)qword_254119120;
      if (!qword_254119120)
      {
        v16 = (re *)re::allocInfo_MaterialParameterData((re *)v14);
        qword_254119120 = (uint64_t)v16;
        re::initInfo_MaterialParameterData(v16, v17);
      }
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "parameters";
      *(_QWORD *)(v18 + 16) = v16;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x3800000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_254119308 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "functionConstants";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x12800000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_254119310 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v24 = re::introspect_MaterialRenderFlags((re::IntrospectionBase **)1);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "renderFlags";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x15800000005;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_254119318 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      re::IntrospectionInfo<re::DynamicArray<re::FunctionLink>>::get();
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "functionLinks";
      *(_QWORD *)(v27 + 16) = &qword_254119628;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0x17000000006;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_254119320 = v27;
      __cxa_guard_release(&qword_254119180);
    }
  }
  *((_QWORD *)this + 2) = 0x19800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((_QWORD *)this + 8) = &qword_2541192F8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::MaterialFile>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::MaterialFile>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::MaterialFile>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::MaterialFile>;
  re::IntrospectionRegistry::add(this, v3);
  v28 = v30;
}

void re::IntrospectionInfo<re::DynamicArray<re::FunctionLink>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  re *v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  const re::IntrospectionBase *v21;
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  const re::IntrospectionBase *v29;
  uint64_t v30;
  uint64_t *v31;
  const re::IntrospectionBase *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  const re::IntrospectionBase *v36;
  uint64_t v37;
  uint64_t *v38;
  const re::IntrospectionBase *v39;
  uint64_t *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44[2];
  __int128 v45;
  const char *v46;
  __int128 v47;

  v0 = atomic_load((unsigned __int8 *)&qword_254119218);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254119218))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254119628);
    qword_254119628 = (uint64_t)&off_24ED76860;
    __cxa_guard_release(&qword_254119218);
  }
  if ((byte_254118FFE & 1) == 0)
  {
    v1 = (uint64_t *)qword_254119158;
    if (qword_254119158)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254119148);
    v1 = &qword_2558352C8;
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254119148))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2558352C8, 0);
      *(uint64_t *)((char *)&qword_2558352D8 + 6) = 0;
      qword_2558352D8 = 0;
      *(_QWORD *)&xmmword_2558352E8 = 0;
      *((_QWORD *)&xmmword_2558352E8 + 1) = 0xFFFFFFFFLL;
      qword_2558352C8 = (uint64_t)&off_24ED7DAA8;
      qword_2558352F8 = (uint64_t)"FunctionLink";
      dword_255835300 = 0;
      xmmword_255835308 = 0u;
      *(_OWORD *)&qword_255835318 = 0u;
      xmmword_255835328 = 0u;
      qword_255835338 = 0;
      __cxa_guard_release(&qword_254119148);
    }
    qword_254119158 = (uint64_t)&qword_2558352C8;
    *(_QWORD *)&v47 = 0x341C5717FA628024;
    *((_QWORD *)&v47 + 1) = "FunctionLink";
    re::StringID::destroyString((re::StringID *)&v47);
    xmmword_2558352E8 = v45;
    v4 = atomic_load((unsigned __int8 *)&qword_254119150);
    if ((v4 & 1) == 0)
    {
      v12 = (re *)__cxa_guard_acquire(&qword_254119150);
      if ((_DWORD)v12)
      {
        v13 = re::introspectionAllocator(v12);
        re::introspect_ShaderStage((re *)v13, v14);
        v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
        *(_DWORD *)v15 = 1;
        *(_QWORD *)(v15 + 8) = "stage";
        *(_QWORD *)(v15 + 16) = &qword_2541196F8;
        *(_QWORD *)(v15 + 24) = 0;
        *(_QWORD *)(v15 + 32) = 1;
        *(_DWORD *)(v15 + 40) = 0;
        *(_QWORD *)(v15 + 48) = 0;
        *(_QWORD *)(v15 + 56) = 0;
        *(_DWORD *)(v15 + 64) = 0;
        qword_254119328 = v15;
        v16 = re::introspectionAllocator((re *)v15);
        v18 = re::IntrospectionInfo<re::DynamicString>::get(1, v17);
        v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
        *(_DWORD *)v19 = 1;
        *(_QWORD *)(v19 + 8) = "shaderFunctionName";
        *(_QWORD *)(v19 + 16) = v18;
        *(_QWORD *)(v19 + 24) = 0;
        *(_QWORD *)(v19 + 32) = 0x800000002;
        *(_DWORD *)(v19 + 40) = 0;
        *(_QWORD *)(v19 + 48) = 0;
        *(_QWORD *)(v19 + 56) = 0;
        *(_DWORD *)(v19 + 64) = 0;
        qword_254119330 = v19;
        v20 = re::introspectionAllocator((re *)v19);
        v22 = re::IntrospectionInfo<re::DynamicString>::get(1, v21);
        v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
        *(_DWORD *)v23 = 1;
        *(_QWORD *)(v23 + 8) = "linkedFunctionName";
        *(_QWORD *)(v23 + 16) = v22;
        *(_QWORD *)(v23 + 24) = 0;
        *(_QWORD *)(v23 + 32) = 0x2800000003;
        *(_DWORD *)(v23 + 40) = 0;
        *(_QWORD *)(v23 + 48) = 0;
        *(_QWORD *)(v23 + 56) = 0;
        *(_DWORD *)(v23 + 64) = 0;
        qword_254119338 = v23;
        v24 = re::introspectionAllocator((re *)v23);
        v26 = re::introspect_AssetHandle((re *)1, v25);
        v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
        *(_DWORD *)v27 = 1;
        *(_QWORD *)(v27 + 8) = "linkedFunctionLibrary";
        *(_QWORD *)(v27 + 16) = v26;
        *(_QWORD *)(v27 + 24) = 0;
        *(_QWORD *)(v27 + 32) = 0x4800000004;
        *(_DWORD *)(v27 + 40) = 0;
        *(_QWORD *)(v27 + 48) = 0;
        *(_QWORD *)(v27 + 56) = 0;
        *(_DWORD *)(v27 + 64) = 0;
        qword_254119340 = v27;
        v28 = re::introspectionAllocator((re *)v27);
        re::IntrospectionInfo<re::DynamicArray<re::ShaderAPIFlags::Values>>::get((uint64_t)v28, v29);
        v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
        *(_DWORD *)v30 = 1;
        *(_QWORD *)(v30 + 8) = "linkedShaderAPIs";
        *(_QWORD *)(v30 + 16) = &qword_2541195E8;
        *(_QWORD *)(v30 + 24) = 0;
        *(_QWORD *)(v30 + 32) = 0x6000000005;
        *(_DWORD *)(v30 + 40) = 0;
        *(_QWORD *)(v30 + 48) = 0;
        *(_QWORD *)(v30 + 56) = 0;
        *(_DWORD *)(v30 + 64) = 0;
        qword_254119348 = v30;
        v31 = re::introspectionAllocator((re *)v30);
        v33 = re::IntrospectionInfo<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(1, v32);
        v34 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 72, 8);
        *(_DWORD *)v34 = 1;
        *(_QWORD *)(v34 + 8) = "functionConstants";
        *(_QWORD *)(v34 + 16) = v33;
        *(_QWORD *)(v34 + 24) = 0;
        *(_QWORD *)(v34 + 32) = 0x8800000006;
        *(_DWORD *)(v34 + 40) = 0;
        *(_QWORD *)(v34 + 48) = 0;
        *(_QWORD *)(v34 + 56) = 0;
        *(_DWORD *)(v34 + 64) = 0;
        qword_254119350 = v34;
        v35 = re::introspectionAllocator((re *)v34);
        re::IntrospectionInfo<re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v35, v36);
        v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 72, 8);
        *(_DWORD *)v37 = 1;
        *(_QWORD *)(v37 + 8) = "functionConstantDataMap";
        *(_QWORD *)(v37 + 16) = &qword_254119970;
        *(_QWORD *)(v37 + 24) = 0;
        *(_QWORD *)(v37 + 32) = 0xB800000007;
        *(_DWORD *)(v37 + 40) = 0;
        *(_QWORD *)(v37 + 48) = 0;
        *(_QWORD *)(v37 + 56) = 0;
        *(_DWORD *)(v37 + 64) = 0;
        qword_254119358 = v37;
        v38 = re::introspectionAllocator((re *)v37);
        v40 = re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(1, v39);
        v41 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 72, 8);
        *(_DWORD *)v41 = 1;
        *(_QWORD *)(v41 + 8) = "functionConstantData";
        *(_QWORD *)(v41 + 16) = v40;
        *(_QWORD *)(v41 + 24) = 0;
        *(_QWORD *)(v41 + 32) = 0xE800000008;
        *(_DWORD *)(v41 + 40) = 0;
        *(_QWORD *)(v41 + 48) = 0;
        *(_QWORD *)(v41 + 56) = 0;
        *(_DWORD *)(v41 + 64) = 0;
        qword_254119360 = v41;
        __cxa_guard_release(&qword_254119150);
      }
    }
    qword_2558352D8 = 0x11000000008;
    dword_2558352E0 = 8;
    word_2558352E4 = 0;
    dword_255835300 = 8;
    *(_QWORD *)&xmmword_255835308 = &qword_254119328;
    *((_QWORD *)&xmmword_255835308 + 1) = re::internal::defaultConstruct<re::FunctionLink>;
    qword_255835318 = (uint64_t)re::internal::defaultDestruct<re::FunctionLink>;
    unk_255835320 = 0;
    *(_QWORD *)&xmmword_255835328 = 0;
    *((_QWORD *)&xmmword_255835328 + 1) = re::internal::defaultConstructV2<re::FunctionLink>;
    qword_255835338 = (uint64_t)re::internal::defaultDestructV2<re::FunctionLink>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2558352C8, v3);
    v47 = v45;
    if ((byte_254118FFE & 1) == 0)
    {
LABEL_7:
      byte_254118FFE = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254119628, 0);
      qword_254119638 = 0x2800000003;
      dword_254119640 = v5;
      word_254119644 = 0;
      *(_QWORD *)&xmmword_254119648 = 0;
      *((_QWORD *)&xmmword_254119648 + 1) = 0xFFFFFFFFLL;
      qword_254119658 = (uint64_t)v1;
      qword_254119660 = 0;
      qword_254119628 = (uint64_t)&off_24ED76860;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_254119628, (const re::IntrospectionBase *)&v45);
      if ((BYTE8(v45) & 1) != 0)
        v8 = v46;
      else
        v8 = (char *)&v45 + 9;
      if ((_QWORD)v45 && (BYTE8(v45) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v45 + 40))();
      v43 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v44);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v42 + 1) = v10;
      }
      else
      {
        v47 = v43;
        re::TypeBuilder::beginListType((uint64_t)&v45, v44, 1, 0x28uLL, 8uLL, &v47);
        re::TypeBuilder::setConstructor((uint64_t)&v45, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v45, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v45, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v45, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v45, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v45, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v45, v11);
      }
      xmmword_254119648 = v42;
      re::StringID::destroyString((re::StringID *)v44);
    }
  }
}

double re::internal::defaultConstruct<re::MaterialFile>(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::DynamicString::setCapacity((_QWORD *)a3, 0);
  *(_OWORD *)(a3 + 76) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_QWORD *)(a3 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 104) = 0u;
  *(_OWORD *)(a3 + 120) = 0u;
  *(_DWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_DWORD *)(a3 + 184) = 0;
  *(_QWORD *)(a3 + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_DWORD *)(a3 + 232) = 0;
  *(_QWORD *)(a3 + 236) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 248) = 0u;
  *(_OWORD *)(a3 + 264) = 0u;
  result = 0.0;
  *(_DWORD *)(a3 + 280) = 0;
  *(_QWORD *)(a3 + 284) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 296) = 0u;
  *(_OWORD *)(a3 + 312) = 0u;
  *(_DWORD *)(a3 + 328) = 0;
  *(_QWORD *)(a3 + 332) = 0x7FFFFFFFLL;
  *(_BYTE *)(a3 + 344) = 0;
  *(_BYTE *)(a3 + 346) = 0;
  *(_BYTE *)(a3 + 348) = 0;
  *(_BYTE *)(a3 + 350) = 0;
  *(_BYTE *)(a3 + 352) = 0;
  *(_BYTE *)(a3 + 354) = 0;
  *(_BYTE *)(a3 + 356) = 0;
  *(_BYTE *)(a3 + 358) = 0;
  *(_BYTE *)(a3 + 360) = 0;
  *(_QWORD *)(a3 + 400) = 0;
  *(_QWORD *)(a3 + 376) = 0;
  *(_QWORD *)(a3 + 384) = 0;
  *(_DWORD *)(a3 + 392) = 0;
  *(_QWORD *)(a3 + 368) = 0;
  return result;
}

double re::internal::defaultDestruct<re::MaterialFile>(double a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  double v5;
  double result;

  re::DynamicArray<re::FunctionLink>::deinit((uint64_t)(a4 + 46), a1);
  v5 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a4 + 37);
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a4 + 31, v5);
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a4 + 25);
  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a4 + 19);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a4 + 13);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a4 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a4 + 4));
  if (*a4)
  {
    if ((a4[1] & 1) != 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*a4 + 40))(*a4, a4[2]);
    result = 0.0;
    *(_OWORD *)a4 = 0u;
    *((_OWORD *)a4 + 1) = 0u;
  }
  return result;
}

double re::internal::defaultConstructV2<re::MaterialFile>(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::DynamicString::setCapacity((_QWORD *)a1, 0);
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 236) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  result = 0.0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 284) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_DWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 332) = 0x7FFFFFFFLL;
  *(_BYTE *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 346) = 0;
  *(_BYTE *)(a1 + 348) = 0;
  *(_BYTE *)(a1 + 350) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 354) = 0;
  *(_BYTE *)(a1 + 356) = 0;
  *(_BYTE *)(a1 + 358) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  return result;
}

double re::internal::defaultDestructV2<re::MaterialFile>(uint64_t *a1, double a2)
{
  double v3;
  double result;

  re::DynamicArray<re::FunctionLink>::deinit((uint64_t)(a1 + 46), a2);
  v3 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 37);
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 31, v3);
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 25);
  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 19);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 13);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 4));
  if (*a1)
  {
    if ((a1[1] & 1) != 0)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a1[2]);
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

uint64_t re::introspect_MaterialFile(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialFile", (uint64_t (*)(re::internal *))re::allocInfo_MaterialFile, (re::IntrospectionBase *(*)(void))re::initInfo_MaterialFile, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::MaterialFile>, this);
}

_QWORD *re::IntrospectionOptional<re::mtl::SamplerAddressMode>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::mtl::SamplerAddressMode>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::mtl::SamplerAddressMode>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::mtl::SamplerAddressMode>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::mtl::SamplerAddressMode>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(_BYTE *)a2)
      *(_BYTE *)a2 = 1;
    *(_DWORD *)(a2 + 4) = 0;
  }
  else if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::mtl::SamplerAddressMode>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 4;
}

{
  return a2 + 4;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::mtl::SamplerAddressMode>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 4;
  if (!v2)
    return 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<re::mtl::SamplerAddressMode>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, int *a2)
{
  int v2;

  if (a2)
  {
    v2 = *a2;
    if (!*(_BYTE *)result)
      *(_BYTE *)result = 1;
    *(_DWORD *)(result + 4) = v2;
  }
  else if (*(_BYTE *)result)
  {
    *(_BYTE *)result = 0;
  }
  return result;
}

_QWORD *re::IntrospectionOptional<re::mtl::SamplerBorderColor>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::mtl::SamplerBorderColor>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::mtl::SamplerBorderColor>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::mtl::SamplerBorderColor>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::mtl::SamplerBorderColor>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(_BYTE *)a2)
      *(_BYTE *)a2 = 1;
    *(_DWORD *)(a2 + 4) = 0;
  }
  else if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::mtl::SamplerBorderColor>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 4;
}

{
  return a2 + 4;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::mtl::SamplerBorderColor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 4;
  if (!v2)
    return 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<re::mtl::SamplerBorderColor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, int *a2)
{
  int v2;

  if (a2)
  {
    v2 = *a2;
    if (!*(_BYTE *)result)
      *(_BYTE *)result = 1;
    *(_DWORD *)(result + 4) = v2;
  }
  else if (*(_BYTE *)result)
  {
    *(_BYTE *)result = 0;
  }
  return result;
}

_QWORD *re::IntrospectionOptional<re::mtl::SamplerMinMagFilter>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::mtl::SamplerMinMagFilter>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::mtl::SamplerMinMagFilter>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::mtl::SamplerMinMagFilter>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::mtl::SamplerMinMagFilter>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(_BYTE *)a2)
      *(_BYTE *)a2 = 1;
    *(_DWORD *)(a2 + 4) = 0;
  }
  else if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::mtl::SamplerMinMagFilter>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 4;
}

{
  return a2 + 4;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::mtl::SamplerMinMagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 4;
  if (!v2)
    return 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<re::mtl::SamplerMinMagFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, int *a2)
{
  int v2;

  if (a2)
  {
    v2 = *a2;
    if (!*(_BYTE *)result)
      *(_BYTE *)result = 1;
    *(_DWORD *)(result + 4) = v2;
  }
  else if (*(_BYTE *)result)
  {
    *(_BYTE *)result = 0;
  }
  return result;
}

_QWORD *re::IntrospectionOptional<re::mtl::SamplerMipFilter>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::mtl::SamplerMipFilter>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::mtl::SamplerMipFilter>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::mtl::SamplerMipFilter>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::mtl::SamplerMipFilter>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(_BYTE *)a2)
      *(_BYTE *)a2 = 1;
    *(_DWORD *)(a2 + 4) = 0;
  }
  else if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::mtl::SamplerMipFilter>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 4;
}

{
  return a2 + 4;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::mtl::SamplerMipFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 4;
  if (!v2)
    return 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<re::mtl::SamplerMipFilter>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, int *a2)
{
  int v2;

  if (a2)
  {
    v2 = *a2;
    if (!*(_BYTE *)result)
      *(_BYTE *)result = 1;
    *(_DWORD *)(result + 4) = v2;
  }
  else if (*(_BYTE *)result)
  {
    *(_BYTE *)result = 0;
  }
  return result;
}

_QWORD *re::IntrospectionOptional<re::mtl::SamplerCompareFunction>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::mtl::SamplerCompareFunction>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::mtl::SamplerCompareFunction>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::mtl::SamplerCompareFunction>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::mtl::SamplerCompareFunction>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
  {
    if (!*(_BYTE *)a2)
      *(_BYTE *)a2 = 1;
    *(_DWORD *)(a2 + 4) = 0;
  }
  else if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
  }
}

uint64_t re::IntrospectionOptional<re::mtl::SamplerCompareFunction>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 4;
}

{
  return a2 + 4;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::mtl::SamplerCompareFunction>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 4;
  if (!v2)
    return 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerOptional<re::mtl::SamplerCompareFunction>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t result, int *a2)
{
  int v2;

  if (a2)
  {
    v2 = *a2;
    if (!*(_BYTE *)result)
      *(_BYTE *)result = 1;
    *(_DWORD *)(result + 4) = v2;
  }
  else if (*(_BYTE *)result)
  {
    *(_BYTE *)result = 0;
  }
  return result;
}

_QWORD *re::IntrospectionHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(double a1, uint64_t a2, uint64_t *a3)
{
  return re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3, a1);
}

void re::IntrospectionHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(double a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned int a5)
{
  signed int v8;

  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3, a1);
  if (a5 <= 3)
    v8 = 3;
  else
    v8 = a5;
  re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a3, a4, v8);
}

void re::IntrospectionHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  re::IntrospectionBase *v8;
  int v10;

  v10 = 0;
  v8 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 14;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 56 * v10 + 16, *(_QWORD *)(a2 + 16) + 56 * v10 + 48);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 56 * v10 + 8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(uint64_t a1, _QWORD *a2)
{
  double result;

  if (*a2)
  {
    if ((a2[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 40))(*a2, a2[2]);
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, _DWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v14;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 56 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_DWORD *)(v10 + 56 * v9 + 48) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 56 * v9;
  return v12 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1, double a2)
{
  double v3;

  v3 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1, a2);
  return re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1, v3);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, double a2, uint64_t a3, uint64_t a4)
{
  if (*a1 == a4)
  {
    re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1, a2);
    re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a1, a4, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, re::DynamicString *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v8, a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v6 + 56 * v5 + 16, a2))
  {
    v5 = *(_DWORD *)(v6 + 56 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      return 0;
  }
  return v6 + 56 * v5 + 48;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 56 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = (int *)(*(_QWORD *)(v2 + 16) + 8);
        while (1)
        {
          v7 = *v6;
          v6 += 14;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 56 * *(unsigned int *)(a1 + 32) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 56 * *(unsigned int *)(a1 + 32) + 48;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::RenderAttachmentState>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::RenderAttachmentState>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::RenderAttachmentState>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::RenderAttachmentState>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::RenderAttachmentState>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<re::RenderAttachmentState>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::RenderAttachmentState>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::RenderAttachmentState>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::RenderAttachmentState>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::RenderAttachmentState>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::RenderAttachmentState>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  re::IntrospectionBase *v17;

  v8 = *(_QWORD *)(a4 + 8);
  v9 = *(_QWORD *)(a4 + 16);
  if (v9 >= v8)
  {
    v10 = v9 + 1;
    if (v8 < v9 + 1)
    {
      if (*(_QWORD *)a4)
      {
        v11 = 2 * v8;
        v12 = v8 == 0;
        v13 = 8;
        if (!v12)
          v13 = v11;
        if (v13 <= v10)
          v14 = v10;
        else
          v14 = v13;
        re::DynamicArray<re::RenderAttachmentState>::setCapacity((_QWORD *)a4, v14);
      }
      else
      {
        re::DynamicArray<re::RenderAttachmentState>::setCapacity((_QWORD *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    v9 = *(_QWORD *)(a4 + 16);
  }
  v15 = (_OWORD *)(*(_QWORD *)(a4 + 32) + 32 * v9);
  *v15 = xmmword_226145BF0;
  v15[1] = xmmword_226145C00;
  v16 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = v16 + 1;
  ++*(_DWORD *)(a4 + 24);
  v17 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 32 * v16);
  re::introspectionInitElement(a2, a3, a1[6], v17);
  return v17;
}

uint64_t re::IntrospectionDynamicArray<re::RenderAttachmentState>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::RenderAttachmentState>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 32 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 32 * a3;
}

_QWORD *re::DynamicArray<re::RenderAttachmentState>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::RenderAttachmentState>::setCapacity(result, a2);
      v4 = v3[2];
    }
    if (v4 < a2)
    {
      v5 = v3[4];
      v6 = v5 + 32 * v4;
      v7 = v5 + 32 * a2 - v6;
      if (v7 >= 1)
      {
        v8 = ((unint64_t)v7 >> 5) + 1;
        do
        {
          *(_WORD *)v6 = 0;
          *(_OWORD *)(v6 + 4) = xmmword_226133C50;
          *(_QWORD *)(v6 + 20) = 5;
          *(_DWORD *)(v6 + 28) = 15;
          --v8;
          v6 += 32;
        }
        while (v8 > 1);
      }
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::RenderAttachmentState>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::Allocator *v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *(re::Allocator **)a1;
  if (v8 == a3)
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    if (v8)
    {
      if (*(_QWORD *)(a1 + 32))
        (*(void (**)(re::Allocator *))(*(_QWORD *)v8 + 40))(v8);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::RenderAttachmentState>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  v9 = (_anonymous_namespace_ *)re::DynamicArray<re::RenderAttachmentState>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(char **)(a1 + 32);
      v12 = 32 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 32;
        v12 -= 32;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 32 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 32 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::RenderAttachmentState>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

re::MaterialTechniqueData *re::MaterialTechniqueData::MaterialTechniqueData(re::MaterialTechniqueData *this)
{
  _anonymous_namespace_ *v2;
  _anonymous_namespace_ *v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(this, 0);
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)this + 4, 0);
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 7) = 0u;
  v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)this + 14, 0);
  *((_QWORD *)this + 24) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 9) = 0u;
  v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)this + 21, 0);
  *((_QWORD *)this + 25) = 0xFFFF000100010000;
  *((_WORD *)this + 104) = 1792;
  *((_BYTE *)this + 210) = 4;
  *(_OWORD *)((char *)this + 212) = xmmword_226133C50;
  *(_QWORD *)((char *)this + 228) = 5;
  *((_DWORD *)this + 59) = 15;
  *((_QWORD *)this + 32) = 0;
  *((_DWORD *)this + 70) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_QWORD *)this + 30) = 0;
  *(_QWORD *)((char *)this + 245) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_QWORD *)this + 40) = 0;
  re::DynamicString::setCapacity((_QWORD *)this + 37, 0);
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((_QWORD *)this + 45) = 0x7FFFFFFF00000000;
  *((_DWORD *)this + 92) = 0;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((_DWORD *)this + 102) = 0;
  *(_QWORD *)((char *)this + 412) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 53) = 0;
  *((_OWORD *)this + 27) = 0u;
  *((_DWORD *)this + 112) = 0;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 484) = 0u;
  *(_QWORD *)((char *)this + 500) = 0x7FFFFFFFLL;
  *((_QWORD *)this + 68) = 0;
  *((_QWORD *)this + 66) = 0;
  *((_DWORD *)this + 134) = 0;
  *((_OWORD *)this + 32) = 0u;
  *((_WORD *)this + 276) = 0;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_DWORD *)this + 148) = 0;
  *(_QWORD *)((char *)this + 596) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_DWORD *)this + 160) = 0;
  *(_QWORD *)((char *)this + 644) = 0x7FFFFFFFLL;
  *((_WORD *)this + 328) = 256;
  *((_BYTE *)this + 658) = 0;
  return this;
}

_QWORD *re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  re::IntrospectionBase *v10;
  uint64_t *v12;
  __int128 v13;
  __int128 v14;
  char v15;

  v14 = 0u;
  v13 = 0u;
  re::DynamicString::setCapacity(&v12, 0);
  DWORD2(v14) = 0;
  v10 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a4, a5, (uint64_t)&v12);
  if (DWORD2(v14) != -1)
    ((void (*)(char *, uint64_t **))*(&off_24ED75DD0 + DWORD2(v14)))(&v15, &v12);
  re::introspectionInitElement(a2, a3, a1[8], v10);
  return v10;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 22;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 88 * v10 + 16, *(_QWORD *)(a2 + 16) + 88 * v10 + 48);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 88 * v10 + 8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(uint64_t a1, _QWORD *a2)
{
  double result;

  if (*a2)
  {
    if ((a2[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 40))(*a2, a2[2]);
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v14;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 88 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 88 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 88 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>,(std::__variant_detail::_Trait)1>>(v10 + 88 * v9 + 48, a3);
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 88 * v9;
  return v12 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
  return re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
    re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, re::DynamicString *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a1, a4, (uint64_t)Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v8, a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v6 + 88 * v5 + 16, a2))
  {
    v5 = *(_DWORD *)(v6 + 88 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      return 0;
  }
  return v6 + 88 * v5 + 48;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 88 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = (int *)(*(_QWORD *)(v2 + 16) + 8);
        while (1)
        {
          v7 = *v6;
          v6 += 22;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 88 * *(unsigned int *)(a1 + 32) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 88 * *(unsigned int *)(a1 + 32) + 48;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;
  re::IntrospectionBase *v12;
  uint64_t *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  char v22;

  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v10 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v14, 0);
  DWORD2(v16) = 0;
  v18 = 0uLL;
  *((_QWORD *)&v17 + 1) = 0;
  v11 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v17, 0);
  *((_QWORD *)&v19 + 1) = 0;
  v20 = 0uLL;
  re::DynamicString::setCapacity(&v19, 0);
  LOBYTE(v21) = 0;
  v12 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(a4, a5, (uint64_t)&v14);
  if ((_QWORD)v19)
  {
    if ((BYTE8(v19) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v19 + 40))();
    v19 = 0u;
    v20 = 0u;
  }
  if ((_QWORD)v17)
  {
    if ((BYTE8(v17) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v17 + 40))();
    v17 = 0u;
    v18 = 0u;
  }
  if (DWORD2(v16) != -1)
    ((void (*)(char *, uint64_t **))*(&off_24ED75DD0 + DWORD2(v16)))(&v22, &v14);
  re::introspectionInitElement(a2, a3, a1[8], v12);
  return v12;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 40;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 160 * v10 + 16, *(_QWORD *)(a2 + 16) + 160 * v10 + 48);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 160 * v10 + 8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(uint64_t a1, _QWORD *a2)
{
  double result;

  if (*a2)
  {
    if ((a2[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 40))(*a2, a2[2]);
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(uint64_t a1, re::DynamicString *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v14;
  int v15;
  _BYTE *v16;
  int v17;
  int v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  char v22;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v22, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 160 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 160 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 160 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v14 = (unsigned __int8 *)(v10 + 160 * v9);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__generic_assign[abi:nn180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>,(std::__variant_detail::_Trait)1>>((uint64_t)(v14 + 48), a3);
  re::DynamicString::operator=((re::DynamicString *)(v14 + 88), (re::DynamicString *)(a3 + 40));
  re::DynamicString::operator=((re::DynamicString *)(v14 + 120), (re::DynamicString *)(a3 + 72));
  v17 = v14[152];
  v16 = v14 + 152;
  v15 = v17;
  v18 = *(unsigned __int8 *)(a3 + 104);
  if (v17)
    v19 = 0;
  else
    v19 = v18 == 0;
  if (!v19)
  {
    if (v15)
      v20 = v18 == 0;
    else
      v20 = 0;
    if (v20)
    {
      *v16 = 0;
    }
    else
    {
      if (v15)
        v21 = 1;
      else
        v21 = v18 == 0;
      if (!v21)
        *v16 = 1;
      *(_DWORD *)(v10 + 160 * v9 + 156) = *(_DWORD *)(a3 + 108);
    }
  }
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 160 * v9;
  return v12 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
  return re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
    re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, re::DynamicString *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(a1, a4, (uint64_t)Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 160 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = (int *)(*(_QWORD *)(v2 + 16) + 8);
        while (1)
        {
          v7 = *v6;
          v6 += 40;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 160 * *(unsigned int *)(a1 + 32) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 160 * *(unsigned int *)(a1 + 32) + 48;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(double a1, uint64_t a2, uint64_t *a3)
{
  return re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3, a1);
}

void re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(double a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned int a5)
{
  signed int v8;

  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3, a1);
  if (a5 <= 3)
    v8 = 3;
  else
    v8 = a5;
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a3, a4, v8);
}

void re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  re::IntrospectionBase *v8;
  _OWORD v10[6];
  uint64_t v11;

  memset(v10, 0, sizeof(v10));
  v11 = 0;
  LOBYTE(v10[0]) = 10;
  v8 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a4, a5, (uint64_t)v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 38;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 152 * v10 + 16, *(_QWORD *)(a2 + 16) + 152 * v10 + 48);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 152 * v10 + 8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(uint64_t a1, _QWORD *a2)
{
  double result;

  if (*a2)
  {
    if ((a2[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 40))(*a2, a2[2]);
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1, double a2)
{
  double v3;

  v3 = re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1, a2);
  return re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1, v3);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, double a2, uint64_t a3, uint64_t a4)
{
  if (*a1 == a4)
  {
    re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1, a2);
    re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a1, a4, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, re::DynamicString *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a1, a4, (uint64_t)Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v8, a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v6 + 152 * v5 + 16, a2))
  {
    v5 = *(_DWORD *)(v6 + 152 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      return 0;
  }
  return v6 + 152 * v5 + 48;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 152 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = (int *)(*(_QWORD *)(v2 + 16) + 8);
        while (1)
        {
          v7 = *v6;
          v6 += 38;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 152 * *(unsigned int *)(a1 + 32) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 152 * *(unsigned int *)(a1 + 32) + 48;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MaterialTechniqueData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MaterialTechniqueData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::MaterialTechniqueData>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MaterialTechniqueData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MaterialTechniqueData>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::MaterialTechniqueData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::MaterialTechniqueData>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::MaterialTechniqueData>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MaterialTechniqueData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::MaterialTechniqueData>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::MaterialTechniqueData>::resize((_anonymous_namespace_ *)a4, a5);
  }
  else
  {
    re::DynamicArray<re::MaterialTechniqueData>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MaterialTechniqueData>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  re::IntrospectionBase *v8;
  _BYTE v10[664];

  bzero(v10, 0x298uLL);
  re::MaterialTechniqueData::MaterialTechniqueData((re::MaterialTechniqueData *)v10);
  re::DynamicArray<re::MaterialTechniqueData>::add(a4, (uint64_t)v10);
  re::MaterialTechniqueData::~MaterialTechniqueData((re::MaterialTechniqueData *)v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)a4 + 4) + 664 * *((_QWORD *)a4 + 2) - 664);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::MaterialTechniqueData>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MaterialTechniqueData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 664 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 664 * a3;
}

void re::DynamicArray<re::MaterialTechniqueData>::resize(_anonymous_namespace_ *a1, unint64_t a2)
{
  unint64_t v2;
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  unint64_t v13;

  v2 = a2;
  v3 = a1;
  v4 = *((_QWORD *)a1 + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v12 = 664 * a2;
    v13 = a2;
    do
    {
      re::MaterialTechniqueData::~MaterialTechniqueData((re::MaterialTechniqueData *)(*((_QWORD *)v3 + 4) + v12));
      ++v2;
      v12 += 664;
    }
    while (v2 < *((_QWORD *)v3 + 2));
  }
  else
  {
    if (*((_QWORD *)a1 + 1) < a2)
    {
      a1 = (_anonymous_namespace_ *)re::DynamicArray<re::MaterialTechniqueData>::setCapacity(a1, a2);
      v4 = *((_QWORD *)v3 + 2);
    }
    v13 = v2;
    v5 = v2 - v4;
    if (v2 > v4)
    {
      v6 = 664 * v4;
      do
      {
        v7 = *((_QWORD *)v3 + 4) + v6;
        *(_OWORD *)v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v7, 0);
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)(v7 + 32), 0);
        *(_OWORD *)(v7 + 128) = 0u;
        *(_OWORD *)(v7 + 80) = 0u;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 112) = 0u;
        v10 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)(v7 + 112), 0);
        *(_QWORD *)(v7 + 192) = 0;
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 144) = 0u;
        v7 += 168;
        v11 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v7, 0);
        *(_QWORD *)(v7 + 32) = 0xFFFF000100010000;
        *(_WORD *)(v7 + 40) = 1792;
        *(_BYTE *)(v7 + 42) = 4;
        *(_OWORD *)(v7 + 44) = xmmword_226133C50;
        *(_QWORD *)(v7 + 60) = 5;
        *(_DWORD *)(v7 + 68) = 15;
        *(_QWORD *)(v7 + 88) = 0;
        *(_OWORD *)(v7 + 96) = 0u;
        *(_DWORD *)(v7 + 112) = 0;
        *(_QWORD *)(v7 + 72) = 0;
        *(_QWORD *)(v7 + 77) = 0;
        *(_OWORD *)(v7 + 120) = 0u;
        *(_OWORD *)(v7 + 136) = 0u;
        *(_QWORD *)(v7 + 152) = 0;
        a1 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)(v7 + 128), 0);
        *(_OWORD *)(v7 + 160) = 0u;
        *(_OWORD *)(v7 + 176) = 0u;
        *(_OWORD *)(v7 + 192) = 0u;
        *(_OWORD *)(v7 + 208) = 0u;
        *(_DWORD *)(v7 + 196) = 0x7FFFFFFF;
        *(_OWORD *)(v7 + 224) = 0u;
        *(_OWORD *)(v7 + 240) = 0u;
        *(_DWORD *)(v7 + 244) = 0x7FFFFFFF;
        *(_QWORD *)(v7 + 256) = 0;
        *(_OWORD *)(v7 + 264) = 0u;
        *(_DWORD *)(v7 + 280) = 0;
        *(_OWORD *)(v7 + 304) = 0u;
        *(_OWORD *)(v7 + 320) = 0u;
        *(_OWORD *)(v7 + 288) = 0u;
        *(_QWORD *)(v7 + 336) = 0;
        *(_DWORD *)(v7 + 332) = 0x7FFFFFFF;
        *(_QWORD *)(v7 + 376) = 0;
        *(_QWORD *)(v7 + 360) = 0;
        *(_DWORD *)(v7 + 368) = 0;
        *(_OWORD *)(v7 + 344) = 0u;
        *(_WORD *)(v7 + 384) = 0;
        *(_OWORD *)(v7 + 424) = 0u;
        *(_OWORD *)(v7 + 408) = 0u;
        *(_OWORD *)(v7 + 392) = 0u;
        *(_DWORD *)(v7 + 428) = 0x7FFFFFFF;
        *(_OWORD *)(v7 + 472) = 0u;
        *(_OWORD *)(v7 + 456) = 0u;
        *(_OWORD *)(v7 + 440) = 0u;
        *(_DWORD *)(v7 + 476) = 0x7FFFFFFF;
        *(_WORD *)(v7 + 488) = 256;
        v6 += 664;
        *(_BYTE *)(v7 + 490) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *((_QWORD *)v3 + 2) = v13;
  ++*((_DWORD *)v3 + 6);
}

uint64_t re::DynamicArray<re::MaterialTechniqueData>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::MaterialTechniqueData>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  result = re::MaterialTechniqueData::MaterialTechniqueData(*((_QWORD *)this + 4) + 664 * v4, a2);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::MaterialTechniqueData>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MaterialTechniqueData>::clear((re::MaterialTechniqueData *)a1);
  }
  else
  {
    re::DynamicArray<re::MaterialTechniqueData>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::MaterialTechniqueData>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::MaterialTechniqueData>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 664 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 664;
        v11 -= 664;
      }
      while (v11);
    }
  }
}

re::MaterialTechniqueData *re::DynamicArray<re::MaterialTechniqueData>::clear(re::MaterialTechniqueData *result)
{
  re::MaterialTechniqueData *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = 0;
  if (v2)
  {
    result = (re::MaterialTechniqueData *)*((_QWORD *)result + 4);
    v3 = 664 * v2;
    do
    {
      re::MaterialTechniqueData::~MaterialTechniqueData(result);
      result = (re::MaterialTechniqueData *)(v4 + 664);
      v3 -= 664;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 664 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 664 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MaterialTechniqueGroupData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MaterialTechniqueGroupData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::MaterialTechniqueGroupData>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MaterialTechniqueGroupData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MaterialTechniqueGroupData>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::MaterialTechniqueGroupData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::MaterialTechniqueGroupData>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_anonymous_namespace_ *re::IntrospectionDynamicArray<re::MaterialTechniqueGroupData>::resize(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = (_anonymous_namespace_ *)re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::MaterialTechniqueGroupData>::resize((_anonymous_namespace_ *)a4, a5);
  }
  else
  {
    result = (_anonymous_namespace_ *)re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MaterialTechniqueGroupData>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  re::IntrospectionBase *v11;
  uint64_t *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  re::DynamicString::setCapacity(&v13, 0);
  v8 = *(_QWORD *)(a4 + 16);
  if (v8 >= *(_QWORD *)(a4 + 8))
  {
    re::DynamicArray<re::MaterialTechniqueGroupData>::growCapacity((_QWORD *)a4, v8 + 1);
    v8 = *(_QWORD *)(a4 + 16);
  }
  v9 = *(_QWORD *)(a4 + 32) + 72 * v8;
  *(_QWORD *)v9 = v13;
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *((_QWORD *)&v14 + 1);
  *((_QWORD *)&v14 + 1) = 0;
  *(_QWORD *)(v9 + 24) = v15;
  *(_QWORD *)&v15 = 0;
  *(_QWORD *)(v9 + 8) = v14;
  *(_QWORD *)&v14 = 0;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  *(_DWORD *)(v9 + 56) = 0;
  *(_QWORD *)(v9 + 48) = 0;
  *((_QWORD *)&v15 + 1) = 0;
  *(_QWORD *)&v16 = 0;
  v10 = *(_QWORD *)(v9 + 48);
  *(_QWORD *)(v9 + 48) = 0;
  *((_QWORD *)&v16 + 1) = v10;
  *(_QWORD *)(v9 + 64) = 0;
  *((_QWORD *)&v17 + 1) = 0;
  LODWORD(v17) = 1;
  ++*(_DWORD *)(v9 + 56);
  ++*(_QWORD *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::MaterialTechniqueGroupData::deinit((re::MaterialTechniqueGroupData *)&v13);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v15 + 8);
  if (v13 && (v14 & 1) != 0)
    (*(void (**)(void))(*v13 + 40))();
  v11 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 72 * *(_QWORD *)(a4 + 16) - 72);
  re::introspectionInitElement(a2, a3, a1[6], v11);
  return v11;
}

uint64_t re::IntrospectionDynamicArray<re::MaterialTechniqueGroupData>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MaterialTechniqueGroupData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 72 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 72 * a3;
}

_anonymous_namespace_ *re::DynamicArray<re::MaterialTechniqueGroupData>::resize(_anonymous_namespace_ *result, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v4 = *((_QWORD *)result + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 72 * a2;
    v9 = a2;
    do
    {
      v10 = *((_QWORD *)v3 + 4);
      v11 = v10 + v8;
      re::MaterialTechniqueGroupData::deinit((re::MaterialTechniqueGroupData *)(v10 + v8));
      re::DynamicArray<re::DynamicString>::deinit(v10 + v8 + 32);
      result = *(_anonymous_namespace_ **)(v10 + v8);
      if (result)
      {
        if ((*(_BYTE *)(v11 + 8) & 1) != 0)
          result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, _QWORD))(*(_QWORD *)result + 40))(result, *(_QWORD *)(v10 + v8 + 16));
        *(_OWORD *)v11 = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
      }
      ++v9;
      v8 += 72;
    }
    while (v9 < *((_QWORD *)v3 + 2));
  }
  else
  {
    if (*((_QWORD *)result + 1) < a2)
    {
      result = (_anonymous_namespace_ *)re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity(result, a2);
      v4 = *((_QWORD *)v3 + 2);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 72 * v4;
      do
      {
        v7 = *((_QWORD *)v3 + 4) + v6;
        *(_OWORD *)v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        result = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v7, 0);
        *(_QWORD *)(v7 + 64) = 0;
        *(_QWORD *)(v7 + 40) = 0;
        *(_QWORD *)(v7 + 48) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        v6 += 72;
        *(_DWORD *)(v7 + 56) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *((_QWORD *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MaterialTechniqueGroupData>::clear((_QWORD *)a1);
  }
  else
  {
    re::DynamicArray<re::MaterialTechniqueGroupData>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  v8 = re::DynamicArray<re::MaterialTechniqueGroupData>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 72 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 72;
        v11 -= 72;
      }
      while (v11);
    }
  }
}

_QWORD *re::DynamicArray<re::MaterialTechniqueGroupData>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    v3 = result[4];
    v4 = 72 * v2;
    do
    {
      re::MaterialTechniqueGroupData::deinit((re::MaterialTechniqueGroupData *)v3);
      re::DynamicArray<re::DynamicString>::deinit(v3 + 32);
      result = *(_QWORD **)v3;
      if (*(_QWORD *)v3)
      {
        if ((*(_BYTE *)(v3 + 8) & 1) != 0)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 40))(result, *(_QWORD *)(v3 + 16));
        *(_OWORD *)v3 = 0u;
        *(_OWORD *)(v3 + 16) = 0u;
      }
      v3 += 72;
      v4 -= 72;
    }
    while (v4);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 72 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 72 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueGroupData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::DebugMapping>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::DebugMapping>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::DebugMapping>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::DebugMapping>::destroy(double a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::DebugMapping>::deinit(a3, a1);
}

_QWORD *re::IntrospectionDynamicArray<re::DebugMapping>::init(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  re::DynamicArray<re::DebugMapping>::deinit(a3, a1);
  *(_QWORD *)a3 = a4;
  result = re::DynamicArray<re::DebugMapping>::setCapacity((_QWORD *)a3, 0);
  ++*(_DWORD *)(a3 + 24);
  return result;
}

_anonymous_namespace_ *re::IntrospectionDynamicArray<re::DebugMapping>::resize(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, double a6)
{
  _anonymous_namespace_ *v10;
  unint64_t v11;
  unint64_t i;

  v10 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = (_anonymous_namespace_ *)re::DynamicArray<re::DebugMapping>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v11 >= a5)
  {
    if (v11 > a5)
      return re::DynamicArray<re::DebugMapping>::resize((_anonymous_namespace_ *)a4, a5, a6);
  }
  else
  {
    result = (_anonymous_namespace_ *)re::DynamicArray<re::DebugMapping>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 80))(v10, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::DebugMapping>::addElement(re::Allocator **a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  double v8;
  double v9;
  re::IntrospectionBase *v10;
  uint64_t *v12;
  __int128 v13;
  _BYTE v14[56];

  memset(v14, 0, sizeof(v14));
  v13 = 0u;
  re::DynamicString::setCapacity(&v12, 0);
  memset(&v14[8], 0, 36);
  *(_QWORD *)&v14[44] = 0x7FFFFFFFLL;
  re::DynamicArray<re::DebugMapping>::add(a4, &v12);
  v9 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v14[8], v8);
  if (v12 && (v13 & 1) != 0)
    (*(void (**)(double))(*v12 + 40))(v9);
  v10 = (re::IntrospectionBase *)(*((_QWORD *)a4 + 4) + 80 * *((_QWORD *)a4 + 2) - 80);
  re::introspectionInitElement(a2, a3, a1[6], v10);
  return v10;
}

uint64_t re::IntrospectionDynamicArray<re::DebugMapping>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::DebugMapping>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 80 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 80 * a3;
}

_anonymous_namespace_ *re::DynamicArray<re::DebugMapping>::resize(_anonymous_namespace_ *result, unint64_t a2, double a3)
{
  _anonymous_namespace_ *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = result;
  v5 = *((_QWORD *)result + 2);
  if (v5 >= a2)
  {
    if (v5 <= a2)
      return result;
    v9 = 80 * a2;
    v10 = a2;
    do
    {
      v11 = *((_QWORD *)v4 + 4);
      v12 = v11 + v9;
      a3 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v11 + v9 + 32), a3);
      result = *(_anonymous_namespace_ **)(v11 + v9);
      if (result)
      {
        if ((*(_BYTE *)(v12 + 8) & 1) != 0)
          result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, _QWORD, double))(*(_QWORD *)result + 40))(result, *(_QWORD *)(v11 + v9 + 16), a3);
        a3 = 0.0;
        *(_OWORD *)v12 = 0u;
        *(_OWORD *)(v12 + 16) = 0u;
      }
      ++v10;
      v9 += 80;
    }
    while (v10 < *((_QWORD *)v4 + 2));
  }
  else
  {
    if (*((_QWORD *)result + 1) < a2)
    {
      result = (_anonymous_namespace_ *)re::DynamicArray<re::DebugMapping>::setCapacity(result, a2);
      v5 = *((_QWORD *)v4 + 2);
    }
    v6 = a2 - v5;
    if (a2 > v5)
    {
      v7 = 80 * v5;
      do
      {
        v8 = *((_QWORD *)v4 + 4) + v7;
        *(_OWORD *)v8 = 0u;
        *(_OWORD *)(v8 + 16) = 0u;
        result = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v8, 0);
        *(_OWORD *)(v8 + 48) = 0u;
        *(_OWORD *)(v8 + 64) = 0u;
        *(_OWORD *)(v8 + 32) = 0u;
        v7 += 80;
        *(_DWORD *)(v8 + 68) = 0x7FFFFFFF;
        --v6;
      }
      while (v6);
    }
  }
  *((_QWORD *)v4 + 2) = a2;
  ++*((_DWORD *)v4 + 6);
  return result;
}

uint64_t *re::DynamicArray<re::DebugMapping>::add(_anonymous_namespace_ *this, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::DebugMapping>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 80 * v4;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_QWORD *)(v5 + 24) = a2[3];
  v6 = a2[1];
  *(_QWORD *)v5 = *a2;
  *a2 = 0;
  v7 = a2[2];
  a2[3] = 0;
  v9 = *(_QWORD *)(v5 + 8);
  v8 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 8) = v6;
  *(_QWORD *)(v5 + 16) = v7;
  a2[1] = v9;
  a2[2] = v8;
  *(_OWORD *)(v5 + 32) = 0u;
  v5 += 32;
  *(_DWORD *)(v5 + 32) = 0;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_QWORD *)(v5 + 36) = 0x7FFFFFFFLL;
  result = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v5, a2 + 4);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::DebugMapping>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4, double a5)
{
  double v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE v14[32];
  _BYTE v15[8];
  uint64_t v16;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::DebugMapping>::clear((_QWORD *)a1, a5);
  }
  else
  {
    re::DynamicArray<re::DebugMapping>::deinit(a1, a5);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::DebugMapping>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  v10 = re::DynamicArray<re::DebugMapping>::resize((_anonymous_namespace_ *)a1, a4, v9);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v15);
    re::TypeInfo::TypeInfo((uint64_t)v14, (uint64_t)&v16);
    v11 = *(_QWORD *)(a1 + 16);
    if (v11)
    {
      v12 = *(char **)(a1 + 32);
      v13 = 80 * v11;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v14, v12, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v14, (void **)v12, a3, 0);
        v12 += 80;
        v13 -= 80;
      }
      while (v13);
    }
  }
}

_QWORD *re::DynamicArray<re::DebugMapping>::clear(_QWORD *result, double a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v2 = result;
  v3 = result[2];
  result[2] = 0;
  if (v3)
  {
    v4 = (uint64_t *)(result[4] + 32);
    v5 = 80 * v3;
    do
    {
      a2 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v4, a2);
      result = (_QWORD *)*(v4 - 4);
      if (result)
      {
        if ((*(_BYTE *)(v4 - 3) & 1) != 0)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD, double))(*result + 40))(result, *(v4 - 2), a2);
        a2 = 0.0;
        *((_OWORD *)v4 - 2) = 0u;
        *((_OWORD *)v4 - 1) = 0u;
      }
      v4 += 10;
      v5 -= 80;
    }
    while (v5);
  }
  ++*((_DWORD *)v2 + 6);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 80 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 80 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DebugMapping>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  re::IntrospectionBase *v8;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  v8 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(a4, a5, (unsigned __int8 *)&v10);
  if ((_BYTE)v10 && *((_QWORD *)&v10 + 1) && (v11 & 1) != 0)
    (*(void (**)(void))(**((_QWORD **)&v10 + 1) + 40))();
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 24;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 96 * v10 + 16, *(_QWORD *)(a2 + 16) + 96 * v10 + 48);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 96 * v10 + 8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(uint64_t a1, _QWORD *a2)
{
  double result;

  if (*a2)
  {
    if ((a2[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 40))(*a2, a2[2]);
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

void re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::Optional<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 16) + v3);
        ++v4;
        v3 += 96;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

uint64_t re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(uint64_t a1, re::DynamicString *a2, unsigned __int8 *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  int v17;
  int v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  char v22;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v22, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 96 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 96 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 96 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v14 = v10 + 96 * v9;
  re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(v14 + 48), a3);
  v17 = *(unsigned __int8 *)(v14 + 88);
  v16 = (_BYTE *)(v14 + 88);
  v15 = v17;
  v18 = a3[40];
  if (v17)
    v19 = 0;
  else
    v19 = v18 == 0;
  if (!v19)
  {
    if (v15)
      v20 = v18 == 0;
    else
      v20 = 0;
    if (v20)
    {
      *v16 = 0;
    }
    else
    {
      if (v15)
        v21 = 1;
      else
        v21 = v18 == 0;
      if (!v21)
        *v16 = 1;
      *(_BYTE *)(v10 + 96 * v9 + 89) = a3[41];
    }
  }
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 96 * v9;
  return v12 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
  return re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
    re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, re::DynamicString *a4)
{
  unsigned __int8 *Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = (unsigned __int8 *)re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v8, a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v6 + 96 * v5 + 16, a2))
  {
    v5 = *(_DWORD *)(v6 + 96 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      return 0;
  }
  return v6 + 96 * v5 + 48;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 96 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = (int *)(*(_QWORD *)(v2 + 16) + 8);
        while (1)
        {
          v7 = *v6;
          v6 += 24;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 96 * *(unsigned int *)(a1 + 32) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 96 * *(unsigned int *)(a1 + 32) + 48;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MaterialTechniqueQualityLevelSetData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MaterialTechniqueQualityLevelSetData>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::MaterialTechniqueQualityLevelSetData>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MaterialTechniqueQualityLevelSetData>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::MaterialTechniqueQualityLevelSetData>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::MaterialTechniqueQualityLevelSetData>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::resize((_anonymous_namespace_ *)a4, a5);
  }
  else
  {
    re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MaterialTechniqueQualityLevelSetData>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  _anonymous_namespace_ *v8;
  unint64_t v9;
  re::IntrospectionBase *v10;
  uint64_t *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v12, 0);
  v15 = 0uLL;
  *(_QWORD *)&v16 = 0;
  re::DynamicString::setCapacity((_QWORD *)&v14 + 1, 0);
  *((_QWORD *)&v18 + 1) = 0;
  v17 = 0uLL;
  *((_QWORD *)&v16 + 1) = 0;
  LODWORD(v18) = 0;
  v9 = *(_QWORD *)(a4 + 16);
  if (v9 >= *(_QWORD *)(a4 + 8))
  {
    re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::growCapacity((_QWORD *)a4, v9 + 1);
    v9 = *(_QWORD *)(a4 + 16);
  }
  re::MaterialTechniqueQualityLevelSetData::MaterialTechniqueQualityLevelSetData(*(_QWORD *)(a4 + 32) + 104 * v9, (uint64_t)&v12);
  ++*(_QWORD *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::MaterialTechniqueQualityLevelSetData::~MaterialTechniqueQualityLevelSetData((re::MaterialTechniqueQualityLevelSetData *)&v12);
  v10 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 104 * *(_QWORD *)(a4 + 16) - 104);
  re::introspectionInitElement(a2, a3, a1[6], v10);
  return v10;
}

uint64_t re::IntrospectionDynamicArray<re::MaterialTechniqueQualityLevelSetData>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MaterialTechniqueQualityLevelSetData>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 104 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 104 * a3;
}

void re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::resize(_anonymous_namespace_ *a1, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  unint64_t v10;

  v3 = a1;
  v4 = *((_QWORD *)a1 + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v9 = 104 * a2;
    v10 = a2;
    do
    {
      re::MaterialTechniqueQualityLevelSetData::~MaterialTechniqueQualityLevelSetData((re::MaterialTechniqueQualityLevelSetData *)(*((_QWORD *)v3 + 4) + v9));
      ++v10;
      v9 += 104;
    }
    while (v10 < *((_QWORD *)v3 + 2));
  }
  else
  {
    if (*((_QWORD *)a1 + 1) < a2)
    {
      a1 = (_anonymous_namespace_ *)re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity(a1, a2);
      v4 = *((_QWORD *)v3 + 2);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 104 * v4;
      do
      {
        v7 = *((_QWORD *)v3 + 4) + v6;
        *(_OWORD *)v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v7, 0);
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        v7 += 32;
        a1 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v7, 0);
        *(_QWORD *)(v7 + 64) = 0;
        *(_QWORD *)(v7 + 40) = 0;
        *(_QWORD *)(v7 + 48) = 0;
        *(_QWORD *)(v7 + 32) = 0;
        v6 += 104;
        *(_DWORD *)(v7 + 56) = 0;
        --v5;
      }
      while (v5);
    }
  }
  *((_QWORD *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::clear((re::MaterialTechniqueQualityLevelSetData *)a1);
  }
  else
  {
    re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 104 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 104;
        v11 -= 104;
      }
      while (v11);
    }
  }
}

re::MaterialTechniqueQualityLevelSetData *re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::clear(re::MaterialTechniqueQualityLevelSetData *result)
{
  re::MaterialTechniqueQualityLevelSetData *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result;
  v2 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = 0;
  if (v2)
  {
    result = (re::MaterialTechniqueQualityLevelSetData *)*((_QWORD *)result + 4);
    v3 = 104 * v2;
    do
    {
      re::MaterialTechniqueQualityLevelSetData::~MaterialTechniqueQualityLevelSetData(result);
      result = (re::MaterialTechniqueQualityLevelSetData *)(v4 + 104);
      v3 -= 104;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 104 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 104 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialTechniqueQualityLevelSetData>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  re::IntrospectionBase *v8;
  _OWORD v10[2];
  __int128 v11;

  v11 = 0u;
  memset(v10, 0, sizeof(v10));
  DWORD1(v11) = 0x7FFFFFFF;
  v8 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a4, a5, (uint64_t *)v10);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 24;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 96 * v10 + 16, *(_QWORD *)(a2 + 16) + 96 * v10 + 48);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 96 * v10 + 8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(uint64_t a1, _QWORD *a2)
{
  double result;

  if (*a2)
  {
    if ((a2[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 40))(*a2, a2[2]);
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v14;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 96 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 96 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 96 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(v10 + 96 * v9 + 48, a3);
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 96 * v9;
  return v12 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
  return re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
    re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, re::DynamicString *a4)
{
  uint64_t *Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = (uint64_t *)re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v8, a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v6 + 96 * v5 + 16, a2))
  {
    v5 = *(_DWORD *)(v6 + 96 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      return 0;
  }
  return v6 + 96 * v5 + 48;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 96 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = (int *)(*(_QWORD *)(v2 + 16) + 8);
        while (1)
        {
          v7 = *v6;
          v6 += 24;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 96 * *(unsigned int *)(a1 + 32) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 96 * *(unsigned int *)(a1 + 32) + 48;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ShaderAPIFlags::Values>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ShaderAPIFlags::Values>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ShaderAPIFlags::Values>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ShaderAPIFlags::Values>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ShaderAPIFlags::Values>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<re::EvaluationCommand>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

void re::IntrospectionDynamicArray<re::ShaderAPIFlags::Values>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::EvaluationCommand>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::ShaderAPIFlags::Values>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::EvaluationCommand>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ShaderAPIFlags::Values>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  int v10;

  v10 = 0;
  re::DynamicArray<re::ShaderAPIFlags::Values>::add(this, &v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 4 * *((_QWORD *)this + 2) - 4);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::ShaderAPIFlags::Values>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ShaderAPIFlags::Values>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 4 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 4 * a3;
}

void re::DynamicArray<re::ShaderAPIFlags::Values>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  void *v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::EvaluationCommand>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    if (v4 < a2)
    {
      v5 = (void *)(*(_QWORD *)(a1 + 32) + 4 * v4);
      v6 = 4 * a2 - 4 * v4;
      if (v6 >= 1)
        bzero(v5, 4 * (((unint64_t)v6 >> 2) - ((unint64_t)v6 > 3)) + 4);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

_QWORD *re::DynamicArray<re::ShaderAPIFlags::Values>::add(_QWORD *this, _DWORD *a2)
{
  _QWORD *v3;
  unint64_t v4;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::ShaderAPIFlags::Values>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  *(_DWORD *)(v3[4] + 4 * v4) = *a2;
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

_QWORD *re::DynamicArray<re::ShaderAPIFlags::Values>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::EvaluationCommand>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::EvaluationCommand>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::EvaluationCommand>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::Allocator *v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *(re::Allocator **)a1;
  if (v8 == a3)
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    if (v8)
    {
      if (*(_QWORD *)(a1 + 32))
        (*(void (**)(re::Allocator *))(*(_QWORD *)v8 + 40))(v8);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::EvaluationCommand>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::ShaderAPIFlags::Values>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(char **)(a1 + 32);
      v12 = 4 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 4;
        v12 -= 4;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 4 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 4 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ShaderAPIFlags::Values>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(double a1, uint64_t a2, uint64_t *a3)
{
  return re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3, a1);
}

void re::IntrospectionHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(double a1, uint64_t a2, uint64_t *a3, uint64_t a4, unsigned int a5)
{
  signed int v8;

  re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a3, a1);
  if (a5 <= 3)
    v8 = 3;
  else
    v8 = a5;
  re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a3, a4, v8);
}

void re::IntrospectionHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  re::IntrospectionBase *v8;
  __int128 v10;

  v10 = 0uLL;
  v8 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 16;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + (v10 << 6) + 16, *(_QWORD *)(a2 + 16) + (v10 << 6) + 48);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + (v10 << 6) + 8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(uint64_t a1, _QWORD *a2)
{
  double result;

  if (*a2)
  {
    if ((a2[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 40))(*a2, a2[2]);
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

unint64_t re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, _OWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  char v15;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v15, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 16) + ((unint64_t)v12 << 6);
    return v13 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + (v9 << 6);
    if (re::DynamicString::operator==(v11 + 16, (uint64_t)a2))
      break;
    v9 = *(_DWORD *)(v11 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_OWORD *)(v11 + 48) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 16) + (v9 << 6);
  return v13 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1, double a2)
{
  double v3;

  v3 = re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1, a2);
  return re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1, v3);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, double a2, uint64_t a3, uint64_t a4)
{
  if (*a1 == a4)
  {
    re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1, a2);
    re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a1, a4, 3);
  }
}

unint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, re::DynamicString *a4)
{
  void **Instance;
  unint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v9, a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v7 = v6 + (v5 << 6);
    if (re::DynamicString::operator==(v7 + 16, a2))
      break;
    v5 = *(_DWORD *)(v7 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      return 0;
  }
  return v7 + 48;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + ((unint64_t)v10++ << 6) + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = (int *)(*(_QWORD *)(v2 + 16) + 8);
        while (1)
        {
          v7 = *v6;
          v6 += 16;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + ((unint64_t)*(unsigned int *)(a1 + 32) << 6) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + ((unint64_t)*(unsigned int *)(a1 + 32) << 6) + 48;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::FunctionLink>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::FunctionLink>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::FunctionLink>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::FunctionLink>::destroy(double a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::FunctionLink>::deinit(a3, a1);
}

_QWORD *re::IntrospectionDynamicArray<re::FunctionLink>::init(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  re::DynamicArray<re::FunctionLink>::deinit(a3, a1);
  *(_QWORD *)a3 = a4;
  result = re::DynamicArray<re::FunctionLink>::setCapacity((_QWORD *)a3, 0);
  ++*(_DWORD *)(a3 + 24);
  return result;
}

_anonymous_namespace_ *re::IntrospectionDynamicArray<re::FunctionLink>::resize(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, double a6)
{
  _anonymous_namespace_ *v10;
  unint64_t v11;
  unint64_t i;

  v10 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = (_anonymous_namespace_ *)re::DynamicArray<re::FunctionLink>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v11 >= a5)
  {
    if (v11 > a5)
      return re::DynamicArray<re::FunctionLink>::resize((_anonymous_namespace_ *)a4, a5, a6);
  }
  else
  {
    result = (_anonymous_namespace_ *)re::DynamicArray<re::FunctionLink>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 80))(v10, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::FunctionLink>::addElement(re::Allocator **a1, re *a2, int a3, _anonymous_namespace_ *a4)
{
  _anonymous_namespace_ *v8;
  double v9;
  double v10;
  re::IntrospectionBase *v11;
  __int128 v13;
  __int128 v14;
  _OWORD v15[6];
  __int128 v16;
  _OWORD v17[6];
  __int128 v18;
  __int128 v19;

  v18 = 0u;
  v19 = 0u;
  memset(v17, 0, sizeof(v17));
  v16 = 0u;
  v14 = 0u;
  memset(v15, 0, sizeof(v15));
  v13 = 0u;
  v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)&v13 + 1, 0);
  memset(&v15[1], 0, 24);
  re::DynamicString::setCapacity((_QWORD *)v15 + 1, 0);
  v16 = 0u;
  memset(v17, 0, 28);
  memset((char *)&v15[2] + 8, 0, 52);
  *(_QWORD *)((char *)&v17[1] + 12) = 0x7FFFFFFFLL;
  memset((char *)&v17[2] + 8, 0, 36);
  *(_QWORD *)((char *)&v17[4] + 12) = 0x7FFFFFFFLL;
  *((_QWORD *)&v19 + 1) = 0;
  v18 = 0uLL;
  *((_QWORD *)&v17[5] + 1) = 0;
  LODWORD(v19) = 0;
  re::DynamicArray<re::FunctionLink>::add(a4, (uint64_t)&v13);
  if (*((_QWORD *)&v17[5] + 1))
  {
    if (*((_QWORD *)&v19 + 1))
      (*(void (**)(void))(**((_QWORD **)&v17[5] + 1) + 40))();
    *((_QWORD *)&v19 + 1) = 0;
    v18 = 0uLL;
    *((_QWORD *)&v17[5] + 1) = 0;
    LODWORD(v19) = v19 + 1;
  }
  re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v17[2] + 1, v9);
  v10 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v16 + 1);
  if (*(_QWORD *)&v15[4])
  {
    if ((_QWORD)v16)
      (*(void (**)(double))(**(_QWORD **)&v15[4] + 40))(v10);
    *(_QWORD *)&v16 = 0;
    memset(&v15[4], 0, 24);
    ++DWORD2(v15[5]);
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v15[2] + 8));
  if (*((_QWORD *)&v15[0] + 1))
  {
    if ((v15[1] & 1) != 0)
      (*(void (**)(void))(**((_QWORD **)&v15[0] + 1) + 40))();
    memset((char *)v15 + 8, 0, 32);
  }
  if (*((_QWORD *)&v13 + 1) && (v14 & 1) != 0)
    (*(void (**)(void))(**((_QWORD **)&v13 + 1) + 40))();
  v11 = (re::IntrospectionBase *)(*((_QWORD *)a4 + 4) + 272 * *((_QWORD *)a4 + 2) - 272);
  re::introspectionInitElement(a2, a3, a1[6], v11);
  return v11;
}

uint64_t re::IntrospectionDynamicArray<re::FunctionLink>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::FunctionLink>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 272 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 272 * a3;
}

_anonymous_namespace_ *re::DynamicArray<re::FunctionLink>::resize(_anonymous_namespace_ *result, unint64_t a2, double a3)
{
  _anonymous_namespace_ *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _anonymous_namespace_ *v23;

  v4 = result;
  v5 = *((_QWORD *)result + 2);
  if (v5 >= a2)
  {
    if (v5 <= a2)
      return result;
    v10 = 272 * a2 + 136;
    v11 = a2;
    do
    {
      v12 = *((_QWORD *)v4 + 4);
      v13 = v12 + v10;
      v14 = *(_QWORD *)(v12 + v10 + 96);
      if (v14)
      {
        if (*(_QWORD *)(v13 + 128))
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
        *(_QWORD *)(v13 + 128) = 0;
        *(_QWORD *)(v12 + v10 + 104) = 0;
        *(_QWORD *)(v12 + v10 + 112) = 0;
        *(_QWORD *)(v12 + v10 + 96) = 0;
        ++*(_DWORD *)(v12 + v10 + 120);
      }
      re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v13 + 48), a3);
      v15 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v12 + v10));
      v18 = *(_QWORD *)(v13 - 40);
      v17 = (_QWORD *)(v13 - 40);
      v16 = v18;
      if (v18)
      {
        v19 = v12 + v10;
        if (*(_QWORD *)(v12 + v10 - 8))
          (*(void (**)(uint64_t, double))(*(_QWORD *)v16 + 40))(v16, v15);
        *(_QWORD *)(v19 - 8) = 0;
        v17[1] = 0;
        v17[2] = 0;
        *v17 = 0;
        ++*(_DWORD *)(v19 - 16);
      }
      v20 = v12 + v10;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v12 + v10 - 64));
      v21 = *(_QWORD *)(v12 + v10 - 96);
      if (v21)
      {
        if ((*(_BYTE *)(v20 - 88) & 1) != 0)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v21 + 40))(v21, *(_QWORD *)(v12 + v10 - 80));
        a3 = 0.0;
        *(_OWORD *)(v20 - 96) = 0u;
        *(_OWORD *)(v20 - 80) = 0u;
      }
      v23 = *(_anonymous_namespace_ **)(v20 - 128);
      v22 = (_OWORD *)(v20 - 128);
      result = v23;
      if (v23)
      {
        if ((*(_BYTE *)(v12 + v10 - 120) & 1) != 0)
          result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, _QWORD))(*(_QWORD *)result + 40))(result, *(_QWORD *)(v12 + v10 - 112));
        a3 = 0.0;
        *v22 = 0u;
        v22[1] = 0u;
      }
      ++v11;
      v10 += 272;
    }
    while (v11 < *((_QWORD *)v4 + 2));
  }
  else
  {
    if (*((_QWORD *)result + 1) < a2)
    {
      result = (_anonymous_namespace_ *)re::DynamicArray<re::FunctionLink>::setCapacity(result, a2);
      v5 = *((_QWORD *)v4 + 2);
    }
    v6 = a2 - v5;
    if (a2 > v5)
    {
      v7 = 272 * v5;
      do
      {
        v8 = *((_QWORD *)v4 + 4) + v7;
        *(_BYTE *)v8 = 0;
        *(_OWORD *)(v8 + 24) = 0u;
        *(_OWORD *)(v8 + 8) = 0u;
        v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)(v8 + 8), 0);
        *(_OWORD *)(v8 + 40) = 0u;
        v8 += 40;
        *(_OWORD *)(v8 + 16) = 0u;
        result = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v8, 0);
        *(_OWORD *)(v8 + 120) = 0u;
        *(_QWORD *)(v8 + 136) = 0;
        *(_OWORD *)(v8 + 104) = 0u;
        *(_OWORD *)(v8 + 88) = 0u;
        *(_OWORD *)(v8 + 32) = 0u;
        *(_OWORD *)(v8 + 48) = 0u;
        *(_OWORD *)(v8 + 64) = 0u;
        *(_DWORD *)(v8 + 80) = 0;
        *(_DWORD *)(v8 + 132) = 0x7FFFFFFF;
        *(_OWORD *)(v8 + 160) = 0u;
        *(_OWORD *)(v8 + 176) = 0u;
        *(_OWORD *)(v8 + 144) = 0u;
        *(_DWORD *)(v8 + 180) = 0x7FFFFFFF;
        *(_QWORD *)(v8 + 224) = 0;
        *(_QWORD *)(v8 + 200) = 0;
        *(_QWORD *)(v8 + 208) = 0;
        *(_QWORD *)(v8 + 192) = 0;
        v7 += 272;
        *(_DWORD *)(v8 + 216) = 0;
        --v6;
      }
      while (v6);
    }
  }
  *((_QWORD *)v4 + 2) = a2;
  ++*((_DWORD *)v4 + 6);
  return result;
}

uint64_t *re::DynamicArray<re::FunctionLink>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::FunctionLink>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 272 * v4;
  *(_BYTE *)v5 = *(_BYTE *)a2;
  *(_OWORD *)(v5 + 8) = 0u;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(v5 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 32) = 0;
  v9 = *(_QWORD *)(v5 + 16);
  v8 = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 24) = v7;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = v8;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_QWORD *)(v5 + 64) = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v5 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  v11 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 64) = 0;
  v13 = *(_QWORD *)(v5 + 48);
  v12 = *(_QWORD *)(v5 + 56);
  *(_QWORD *)(v5 + 48) = v10;
  *(_QWORD *)(v5 + 56) = v11;
  *(_QWORD *)(a2 + 48) = v13;
  *(_QWORD *)(a2 + 56) = v12;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  v14 = *(_QWORD *)(v5 + 72);
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v14;
  v15 = *(_QWORD *)(v5 + 88);
  *(_QWORD *)(v5 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = v15;
  *(_QWORD *)(v5 + 128) = 0;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 96) = 0;
  *(_DWORD *)(v5 + 120) = 0;
  v16 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(v5 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(v5 + 104) = v16;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  v17 = *(_QWORD *)(v5 + 112);
  *(_QWORD *)(v5 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = v17;
  v18 = *(_QWORD *)(v5 + 128);
  *(_QWORD *)(v5 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = v18;
  ++*(_DWORD *)(a2 + 120);
  ++*(_DWORD *)(v5 + 120);
  *(_OWORD *)(v5 + 152) = 0u;
  *(_DWORD *)(v5 + 168) = 0;
  *(_OWORD *)(v5 + 136) = 0u;
  *(_QWORD *)(v5 + 172) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v5 + 136), (uint64_t *)(a2 + 136));
  *(_OWORD *)(v5 + 184) = 0u;
  v5 += 184;
  *(_DWORD *)(v5 + 32) = 0;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_QWORD *)(v5 + 36) = 0x7FFFFFFFLL;
  result = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v5, (uint64_t *)(a2 + 184));
  *(_QWORD *)(v5 + 80) = 0;
  *(_DWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  v20 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(v5 + 48) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(v5 + 56) = v20;
  *(_QWORD *)(a2 + 232) = 0;
  *(_QWORD *)(a2 + 240) = 0;
  v21 = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v5 + 64) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a2 + 248) = v21;
  v22 = *(_QWORD *)(v5 + 80);
  *(_QWORD *)(v5 + 80) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a2 + 264) = v22;
  ++*(_DWORD *)(a2 + 256);
  ++*(_DWORD *)(v5 + 72);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::FunctionLink>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::FunctionLink>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::FunctionLink>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::FunctionLink>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4, double a5)
{
  double v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _BYTE v14[32];
  _BYTE v15[8];
  uint64_t v16;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::FunctionLink>::clear((_QWORD *)a1, a5);
  }
  else
  {
    re::DynamicArray<re::FunctionLink>::deinit(a1, a5);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::FunctionLink>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  v10 = re::DynamicArray<re::FunctionLink>::resize((_anonymous_namespace_ *)a1, a4, v9);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v15);
    re::TypeInfo::TypeInfo((uint64_t)v14, (uint64_t)&v16);
    v11 = *(_QWORD *)(a1 + 16);
    if (v11)
    {
      v12 = *(char **)(a1 + 32);
      v13 = 272 * v11;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v14, v12, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v14, (void **)v12, a3, 0);
        v12 += 272;
        v13 -= 272;
      }
      while (v13);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 272 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 272 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::FunctionLink>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

void re::RenderGraphOptimizerProcessor::init(re::RenderGraphOptimizerProcessor *this, re::RenderGraphCompiled *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _anonymous_namespace_ *v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  _anonymous_namespace_ *v46;
  unsigned int *v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  BOOL v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  BOOL v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  int v101;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  int v110;
  _DWORD **v112;
  _anonymous_namespace_ *v113;
  _QWORD *v114;
  _QWORD *v115;
  _anonymous_namespace_ *v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  int v121;
  _BYTE v122[14];
  __int16 v123;
  unint64_t v124;
  __int16 v125;
  _DWORD *v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)a2 + 69) = 0;
  ++*((_DWORD *)a2 + 140);
  re::DynamicArray<re::RenderGraphOptimizerProcessor::Vertex>::resize((_QWORD *)this + 17, *(_QWORD *)(*((_QWORD *)a2 + 37) + 16));
  v119 = 0;
  v8 = *((_QWORD *)a2 + 37);
  v9 = *(_QWORD *)(v8 + 16);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = (_DWORD *)((char *)a2 + 536);
    v2 = 48;
    while (1)
    {
      v12 = v10;
      v3 = *((_QWORD *)this + 19);
      if (v3 <= v10)
      {
LABEL_234:
        v117 = 0;
        v130 = 0u;
        v131 = 0u;
        v128 = 0u;
        v129 = 0u;
        v127 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v121 = 136315906;
        *(_QWORD *)v122 = "operator[]";
        *(_WORD *)&v122[8] = 1024;
        *(_DWORD *)&v122[10] = 789;
        v123 = 2048;
        v124 = v12;
        v125 = 2048;
        v126 = (_DWORD *)v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_235:
        v117 = 0;
        v130 = 0u;
        v131 = 0u;
        v128 = 0u;
        v129 = 0u;
        v127 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v121 = 136315906;
        *(_QWORD *)v122 = "operator[]";
        *(_WORD *)&v122[8] = 1024;
        *(_DWORD *)&v122[10] = 789;
        v123 = 2048;
        v124 = v12;
        v125 = 2048;
        v126 = (_DWORD *)v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_236:
        v117 = 0;
        v130 = 0u;
        v131 = 0u;
        v128 = 0u;
        v129 = 0u;
        v127 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v121 = 136315906;
        *(_QWORD *)v122 = "operator[]";
        *(_WORD *)&v122[8] = 1024;
        *(_DWORD *)&v122[10] = 789;
        v123 = 2048;
        v124 = v3;
        v125 = 2048;
        v126 = (_DWORD *)v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_237;
      }
      v13 = *((_QWORD *)this + 21);
      v14 = v13 + 88 * v12;
      *(_QWORD *)(v14 + 64) = 0;
      ++*(_DWORD *)(v14 + 72);
      v12 = v119;
      if (v3 <= v119)
        goto LABEL_235;
      v15 = v13 + 88 * v119;
      *(_QWORD *)(v15 + 24) = 0;
      ++*(_DWORD *)(v15 + 32);
      v3 = v119;
      if (v9 <= v119)
        goto LABEL_236;
      v16 = *(_QWORD *)(v8 + 32);
      v17 = *(_DWORD *)(v16 + 48 * v119);
      if (v17 == 1)
        break;
      if (!v17)
      {
        v18 = v16 + 48 * v119;
        v117 = *(_QWORD *)(v18 + 8) >> 1;
        v118 = *(_QWORD *)(v18 + 24);
        v19 = (_DWORD *)re::RenderGraphCompiled::targetDescription((uint64_t)a2, (uint64_t)&v117);
        v9 = v119;
        v3 = *((_QWORD *)this + 19);
        if (v3 <= v119)
          goto LABEL_254;
LABEL_11:
        *(_BYTE *)(*((_QWORD *)this + 21) + 88 * v9) = *v19 < 2u;
        if (*v19 == 2)
          re::DynamicArray<int>::add((_QWORD *)a2 + 67, &v119);
      }
      v10 = v119 + 1;
      v119 = v10;
      v8 = *((_QWORD *)a2 + 37);
      v9 = *(_QWORD *)(v8 + 16);
      if (v10 >= v9)
        goto LABEL_14;
    }
    v20 = v16 + 48 * v119;
    v117 = *(_QWORD *)(v20 + 8) >> 1;
    v118 = *(_QWORD *)(v20 + 24);
    v19 = (_DWORD *)re::RenderGraphCompiled::bufferDescription((uint64_t)a2, (uint64_t)&v117);
    v9 = v119;
    v3 = *((_QWORD *)this + 19);
    if (v3 <= v119)
      goto LABEL_255;
    goto LABEL_11;
  }
LABEL_14:
  re::DynamicArray<re::RenderGraphOptimizerProcessor::Vertex>::resize((_QWORD *)this + 12, *((_QWORD *)a2 + 44));
  v11 = (_DWORD *)*((_QWORD *)a2 + 44);
  if (!(_DWORD)v11)
    return;
  v5 = 0;
  v4 = 88;
  do
  {
    if ((unint64_t)v11 <= v5)
      goto LABEL_245;
    v11 = (_DWORD *)*((_QWORD *)this + 14);
    if ((unint64_t)v11 <= v5)
    {
LABEL_246:
      v117 = 0;
      v130 = 0u;
      v131 = 0u;
      v128 = 0u;
      v129 = 0u;
      v127 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v121 = 136315906;
      *(_QWORD *)v122 = "operator[]";
      *(_WORD *)&v122[8] = 1024;
      *(_DWORD *)&v122[10] = 789;
      v123 = 2048;
      v124 = v5;
      v125 = 2048;
      v126 = v11;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_247;
    }
    v22 = *((_QWORD *)a2 + 46);
    v23 = *((_QWORD *)this + 16);
    v24 = v23 + 88 * v5;
    *(_QWORD *)(v24 + 64) = 0;
    v114 = (_QWORD *)(v24 + 64);
    ++*(_DWORD *)(v24 + 72);
    *(_QWORD *)(v24 + 24) = 0;
    v12 = v24 + 24;
    ++*(_DWORD *)(v24 + 32);
    v25 = v22 + 192 * v5;
    *(_BYTE *)v24 = *(_BYTE *)(v25 + 168);
    v26 = *(_QWORD *)(v25 + 56);
    if (!v26)
      goto LABEL_230;
    v116 = (_anonymous_namespace_ *)(v24 + 8);
    v11 = *(_DWORD **)(v25 + 72);
    v9 = (unint64_t)&v11[16 * v26];
    v27 = v23 + 88 * v5;
    v112 = (_DWORD **)(v27 + 80);
    v113 = (_anonymous_namespace_ *)(v24 + 48);
    v115 = (_QWORD *)(v27 + 40);
    do
    {
      v28 = v11[1];
      v2 = v11[13];
      switch((int)v28)
      {
        case 0:
        case 10:
          if (!*v114)
            goto LABEL_25;
          v29 = *v112;
          v30 = 12 * *v114;
          do
          {
            if (*v29 == (_DWORD)v2)
              goto LABEL_83;
            v29 += 3;
            v30 -= 12;
          }
          while (v30);
LABEL_25:
          DWORD2(v127) = 0;
          *(_QWORD *)&v127 = v2;
          re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v113, (uint64_t *)&v127);
          v3 = *((_QWORD *)this + 19);
          if (v3 > v2)
          {
            v31 = *((_QWORD *)this + 21);
            DWORD2(v127) = 0;
            v32 = (_anonymous_namespace_ *)(v31 + 88 * v2 + 8);
LABEL_33:
            *(_QWORD *)&v127 = v5;
            goto LABEL_82;
          }
          v117 = 0;
          v130 = 0u;
          v131 = 0u;
          v128 = 0u;
          v129 = 0u;
          v127 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v121 = 136315906;
          *(_QWORD *)v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          v123 = 2048;
          v124 = v2;
          v125 = 2048;
          v126 = (_DWORD *)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_233:
          v117 = 0;
          v130 = 0u;
          v131 = 0u;
          v128 = 0u;
          v129 = 0u;
          v127 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v121 = 136315906;
          *(_QWORD *)v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          v123 = 2048;
          v124 = v2;
          v125 = 2048;
          v126 = (_DWORD *)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_234;
        case 1:
          if (!*(_QWORD *)v12)
            goto LABEL_62;
          v44 = (int *)(*v115 + 8);
          v45 = 12 * *(_QWORD *)v12;
          while (*(v44 - 2) != (_DWORD)v2)
          {
            v44 += 3;
            v45 -= 12;
            if (!v45)
            {
LABEL_62:
              LODWORD(v127) = v11[13];
              DWORD1(v127) = *v11;
              DWORD2(v127) = 1;
              re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v116, (uint64_t *)&v127);
              v3 = *((_QWORD *)this + 19);
              if (v3 > v2)
              {
                v46 = (_anonymous_namespace_ *)(*((_QWORD *)this + 21) + 88 * v2 + 48);
                LODWORD(v127) = v5;
                DWORD1(v127) = *v11;
                DWORD2(v127) = 1;
                re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v46, (uint64_t *)&v127);
                goto LABEL_83;
              }
LABEL_241:
              v117 = 0;
              v130 = 0u;
              v131 = 0u;
              v128 = 0u;
              v129 = 0u;
              v127 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v121 = 136315906;
              *(_QWORD *)v122 = "operator[]";
              *(_WORD *)&v122[8] = 1024;
              *(_DWORD *)&v122[10] = 789;
              v123 = 2048;
              v124 = v2;
              v125 = 2048;
              v126 = (_DWORD *)v3;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_242:
              v117 = 0;
              v130 = 0u;
              v131 = 0u;
              v128 = 0u;
              v129 = 0u;
              v127 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v121 = 136315906;
              *(_QWORD *)v122 = "operator[]";
              *(_WORD *)&v122[8] = 1024;
              *(_DWORD *)&v122[10] = 789;
              v123 = 2048;
              v124 = v2;
              v125 = 2048;
              v126 = (_DWORD *)v3;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_243:
              v117 = 0;
              v130 = 0u;
              v131 = 0u;
              v128 = 0u;
              v129 = 0u;
              v127 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v121 = 136315906;
              *(_QWORD *)v122 = "operator[]";
              *(_WORD *)&v122[8] = 1024;
              *(_DWORD *)&v122[10] = 789;
              v123 = 2048;
              v124 = v2;
              v125 = 2048;
              v126 = (_DWORD *)v3;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_244:
              v117 = 0;
              v130 = 0u;
              v131 = 0u;
              v128 = 0u;
              v129 = 0u;
              v127 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v121 = 136315906;
              *(_QWORD *)v122 = "operator[]";
              *(_WORD *)&v122[8] = 1024;
              *(_DWORD *)&v122[10] = 789;
              v123 = 2048;
              v124 = v2;
              v125 = 2048;
              v126 = (_DWORD *)v3;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_245:
              v117 = 0;
              v130 = 0u;
              v131 = 0u;
              v128 = 0u;
              v129 = 0u;
              v127 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v121 = 136315906;
              *(_QWORD *)v122 = "operator[]";
              *(_WORD *)&v122[8] = 1024;
              *(_DWORD *)&v122[10] = 789;
              v123 = 2048;
              v124 = v5;
              v125 = 2048;
              v126 = v11;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_246;
            }
          }
          v87 = *v44;
          if (!(_DWORD)v87)
            goto LABEL_165;
          v88 = *((_QWORD *)a2 + 37);
          v4 = *(_QWORD *)(v88 + 16);
          if (v4 <= v2)
            goto LABEL_258;
          v89 = *((_QWORD *)this + v87 + 1);
          re::StringID::StringID((re::StringID *)&v121, (const StringID *)(*(_QWORD *)(v88 + 32) + 48 * v2 + 8));
          re::DynamicString::format((re::DynamicString *)"Action %u attempted to both \"Write\" and \"%s\" to resource %u (%s). Will use \"Write\".", (re::DynamicString *)&v127, v5, v89, v2, *(_QWORD *)&v122[4]);
          re::RenderGraphCompiled::addError((uint64_t)a2, (uint64_t)&v127);
          v4 = 88;
          if ((_QWORD)v127)
          {
            if ((BYTE8(v127) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v127 + 40))();
            v127 = 0u;
            v128 = 0u;
          }
          re::StringID::destroyString((re::StringID *)&v121);
LABEL_165:
          *v44 = 1;
          v90 = *v11;
          *(v44 - 1) = *v11;
          v3 = *((_QWORD *)this + 19);
          if (v3 <= v2)
            goto LABEL_253;
          v91 = *((_QWORD *)this + 21) + 88 * v2;
          v92 = *(_QWORD *)(v91 + 64);
          if (v92)
          {
            v2 = *(_QWORD *)(v91 + 80);
            v93 = 12 * v92;
            while (v5 != *(_DWORD *)v2)
            {
              v2 += 12;
              v93 -= 12;
              if (!v93)
                goto LABEL_170;
            }
          }
          else
          {
LABEL_170:
            v2 = 0;
          }
          if (*(_DWORD *)(v2 + 8))
          {
            re::DynamicString::format((re::DynamicString *)"Action %u shouldn't have in edge tag.", (re::DynamicString *)&v127, v5);
            re::RenderGraphCompiled::addError((uint64_t)a2, (uint64_t)&v127);
            if ((_QWORD)v127)
            {
              if ((BYTE8(v127) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v127 + 40))();
            }
            v90 = *v11;
          }
          *(_DWORD *)(v2 + 4) = v90;
          *(_DWORD *)(v2 + 8) = 1;
          goto LABEL_83;
        case 2:
          if (!*(_QWORD *)v12)
            goto LABEL_38;
          v36 = (unsigned int *)(*v115 + 8);
          v37 = 12 * *(_QWORD *)v12;
          break;
        case 3:
          if (!*(_QWORD *)v12)
            goto LABEL_68;
          v47 = (unsigned int *)(*v115 + 8);
          v48 = 12 * *(_QWORD *)v12;
          while (*(v47 - 2) != (_DWORD)v2)
          {
            v47 += 3;
            v48 -= 12;
            if (!v48)
            {
LABEL_68:
              LODWORD(v127) = v11[13];
              *(_QWORD *)((char *)&v127 + 4) = 0x400000000;
              re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v116, (uint64_t *)&v127);
              v3 = *((_QWORD *)this + 19);
              if (v3 <= v2)
                goto LABEL_242;
              goto LABEL_69;
            }
          }
          if (*v47 <= 4 && ((1 << *v47) & 0x15) != 0)
            goto LABEL_188;
          v95 = *((_QWORD *)a2 + 37);
          v4 = *(_QWORD *)(v95 + 16);
          if (v4 <= v2)
            goto LABEL_261;
          v96 = *((_QWORD *)this + (int)*v47 + 1);
          re::StringID::StringID((re::StringID *)&v121, (const StringID *)(*(_QWORD *)(v95 + 32) + 48 * v2 + 8));
          re::DynamicString::format((re::DynamicString *)"Action %u attempted to both \"WriteStencil\" and \"%s\" to resource %u (%s). Will use \"WriteDepthStencil\".", (re::DynamicString *)&v127, v5, v96, v2, *(_QWORD *)&v122[4]);
          re::RenderGraphCompiled::addError((uint64_t)a2, (uint64_t)&v127);
          v4 = 88;
          if ((_QWORD)v127)
          {
            if ((BYTE8(v127) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v127 + 40))();
            v127 = 0u;
            v128 = 0u;
          }
          re::StringID::destroyString((re::StringID *)&v121);
LABEL_188:
          *v47 = 4;
          v3 = *((_QWORD *)this + 19);
          if (v3 <= v2)
            goto LABEL_249;
          v97 = *((_QWORD *)this + 21) + 88 * v2;
          v98 = *(_QWORD *)(v97 + 64);
          if (!v98)
            goto LABEL_193;
          v2 = *(_QWORD *)(v97 + 80);
          v99 = 12 * v98;
          do
          {
            if (v5 == *(_DWORD *)v2)
              goto LABEL_194;
            v2 += 12;
            v99 -= 12;
          }
          while (v99);
LABEL_193:
          v2 = 0;
LABEL_194:
          v100 = *(_DWORD *)(v2 + 8);
          v60 = v100 > 4;
          v61 = 1 << v100;
          v62 = 21;
          goto LABEL_195;
        case 4:
        case 11:
          if (!*(_QWORD *)v12)
            goto LABEL_31;
          v33 = (_DWORD *)*v115;
          v34 = 12 * *(_QWORD *)v12;
          do
          {
            if (*v33 == (_DWORD)v2)
              goto LABEL_83;
            v33 += 3;
            v34 -= 12;
          }
          while (v34);
LABEL_31:
          DWORD2(v127) = 0;
          *(_QWORD *)&v127 = v2;
          re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v116, (uint64_t *)&v127);
          v3 = *((_QWORD *)this + 19);
          if (v3 <= v2)
            goto LABEL_233;
          v35 = *((_QWORD *)this + 21);
          DWORD2(v127) = 0;
          v32 = (_anonymous_namespace_ *)(v35 + 88 * v2 + 48);
          goto LABEL_33;
        case 5:
          if (!*(_QWORD *)v12)
            goto LABEL_74;
          v49 = (_DWORD *)*v115;
          v50 = 12 * *(_QWORD *)v12;
          while (*v49 != (_DWORD)v2)
          {
            v49 += 3;
            v50 -= 12;
            if (!v50)
            {
LABEL_74:
              LODWORD(v127) = v11[13];
              *(_QWORD *)((char *)&v127 + 4) = 0x900000000;
              re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v116, (uint64_t *)&v127);
              v3 = *((_QWORD *)this + 19);
              if (v3 <= v2)
                goto LABEL_243;
              v32 = (_anonymous_namespace_ *)(*((_QWORD *)this + 21) + 88 * v2 + 48);
              LODWORD(v127) = v5;
              *(_QWORD *)((char *)&v127 + 4) = 0x900000000;
              goto LABEL_82;
            }
          }
          goto LABEL_83;
        case 6:
          if (!*(_QWORD *)v12)
            goto LABEL_44;
          v38 = (int *)(*v115 + 8);
          v39 = 12 * *(_QWORD *)v12;
          while (*(v38 - 2) != (_DWORD)v2)
          {
            v38 += 3;
            v39 -= 12;
            if (!v39)
            {
LABEL_44:
              LODWORD(v127) = v11[13];
              DWORD1(v127) = *v11;
              DWORD2(v127) = 5;
              re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v116, (uint64_t *)&v127);
              v3 = *((_QWORD *)this + 19);
              if (v3 <= v2)
                goto LABEL_238;
              v32 = (_anonymous_namespace_ *)(*((_QWORD *)this + 21) + 88 * v2 + 48);
              LODWORD(v127) = v5;
              DWORD1(v127) = *v11;
              DWORD2(v127) = 5;
              goto LABEL_82;
            }
          }
          v63 = *v38;
          if (!(_DWORD)v63)
            goto LABEL_110;
          v64 = *((_QWORD *)a2 + 37);
          v4 = *(_QWORD *)(v64 + 16);
          if (v4 <= v2)
            goto LABEL_256;
          v65 = *((_QWORD *)this + v63 + 1);
          re::StringID::StringID((re::StringID *)&v121, (const StringID *)(*(_QWORD *)(v64 + 32) + 48 * v2 + 8));
          re::DynamicString::format((re::DynamicString *)"Action %u attempted to both \"WriteResolve\" and \"%s\" to resource %u (%s). Will use \"WriteResolve\".", (re::DynamicString *)&v127, v5, v65, v2, *(_QWORD *)&v122[4]);
          re::RenderGraphCompiled::addError((uint64_t)a2, (uint64_t)&v127);
          v4 = 88;
          if ((_QWORD)v127)
          {
            if ((BYTE8(v127) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v127 + 40))();
            v127 = 0u;
            v128 = 0u;
          }
          re::StringID::destroyString((re::StringID *)&v121);
LABEL_110:
          *v38 = 5;
          v66 = *v11;
          *(v38 - 1) = *v11;
          v3 = *((_QWORD *)this + 19);
          if (v3 <= v2)
            goto LABEL_251;
          v67 = *((_QWORD *)this + 21) + 88 * v2;
          v68 = *(_QWORD *)(v67 + 64);
          if (!v68)
            goto LABEL_115;
          v2 = *(_QWORD *)(v67 + 80);
          v69 = 12 * v68;
          do
          {
            if (v5 == *(_DWORD *)v2)
              goto LABEL_116;
            v2 += 12;
            v69 -= 12;
          }
          while (v69);
LABEL_115:
          v2 = 0;
LABEL_116:
          if (*(_DWORD *)(v2 + 8))
          {
            re::DynamicString::format((re::DynamicString *)"Action %u shouldn't have in edge tag.", (re::DynamicString *)&v127, v5);
            re::RenderGraphCompiled::addError((uint64_t)a2, (uint64_t)&v127);
            if ((_QWORD)v127 && (BYTE8(v127) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v127 + 40))();
            v66 = *v11;
          }
          *(_DWORD *)(v2 + 4) = v66;
          *(_DWORD *)(v2 + 8) = 5;
          goto LABEL_83;
        case 7:
          if (!*(_QWORD *)v12)
            goto LABEL_80;
          v51 = (unsigned int *)(*v115 + 8);
          v52 = 12 * *(_QWORD *)v12;
          while (*(v51 - 2) != (_DWORD)v2)
          {
            v51 += 3;
            v52 -= 12;
            if (!v52)
            {
LABEL_80:
              LODWORD(v127) = v11[13];
              *(_QWORD *)((char *)&v127 + 4) = 0x800000000;
              re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v116, (uint64_t *)&v127);
              v3 = *((_QWORD *)this + 19);
              if (v3 <= v2)
                goto LABEL_244;
LABEL_81:
              v32 = (_anonymous_namespace_ *)(*((_QWORD *)this + 21) + 88 * v2 + 48);
              LODWORD(v127) = v5;
              *(_QWORD *)((char *)&v127 + 4) = 0x800000000;
              goto LABEL_82;
            }
          }
          if (*v51 <= 8 && ((1 << *v51) & 0x181) != 0)
            goto LABEL_211;
          v104 = *((_QWORD *)a2 + 37);
          v4 = *(_QWORD *)(v104 + 16);
          if (v4 <= v2)
            goto LABEL_262;
          v105 = *((_QWORD *)this + (int)*v51 + 1);
          re::StringID::StringID((re::StringID *)&v121, (const StringID *)(*(_QWORD *)(v104 + 32) + 48 * v2 + 8));
          re::DynamicString::format((re::DynamicString *)"Action %u attempted to both \"WriteResolveDepth\" and \"%s\" to resource %u (%s). Will use \"WriteResolveDepthStencil\".", (re::DynamicString *)&v127, v5, v105, v2, *(_QWORD *)&v122[4]);
          re::RenderGraphCompiled::addError((uint64_t)a2, (uint64_t)&v127);
          v4 = 88;
          if ((_QWORD)v127)
          {
            if ((BYTE8(v127) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v127 + 40))();
            v127 = 0u;
            v128 = 0u;
          }
          re::StringID::destroyString((re::StringID *)&v121);
LABEL_211:
          *v51 = 8;
          v3 = *((_QWORD *)this + 19);
          if (v3 <= v2)
            goto LABEL_250;
          v106 = *((_QWORD *)this + 21) + 88 * v2;
          v107 = *(_QWORD *)(v106 + 64);
          if (v107)
          {
            v2 = *(_QWORD *)(v106 + 80);
            v108 = 12 * v107;
            while (v5 != *(_DWORD *)v2)
            {
              v2 += 12;
              v108 -= 12;
              if (!v108)
                goto LABEL_216;
            }
          }
          else
          {
LABEL_216:
            v2 = 0;
          }
          v109 = *(_DWORD *)(v2 + 8);
          v77 = v109 > 8;
          v78 = 1 << v109;
          v79 = 385;
          goto LABEL_218;
        case 8:
          if (!*(_QWORD *)v12)
            goto LABEL_50;
          v40 = (unsigned int *)(*v115 + 8);
          v41 = 12 * *(_QWORD *)v12;
          while (*(v40 - 2) != (_DWORD)v2)
          {
            v40 += 3;
            v41 -= 12;
            if (!v41)
            {
LABEL_50:
              LODWORD(v127) = v11[13];
              *(_QWORD *)((char *)&v127 + 4) = 0x800000000;
              re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v116, (uint64_t *)&v127);
              v3 = *((_QWORD *)this + 19);
              if (v3 <= v2)
                goto LABEL_239;
              goto LABEL_81;
            }
          }
          if (*v40 <= 8 && ((1 << *v40) & 0x141) != 0)
            goto LABEL_133;
          v71 = *((_QWORD *)a2 + 37);
          v4 = *(_QWORD *)(v71 + 16);
          if (v4 <= v2)
            goto LABEL_260;
          v72 = *((_QWORD *)this + (int)*v40 + 1);
          re::StringID::StringID((re::StringID *)&v121, (const StringID *)(*(_QWORD *)(v71 + 32) + 48 * v2 + 8));
          re::DynamicString::format((re::DynamicString *)"Action %u attempted to both \"WriteResolveStencil\" and \"%s\" to resource %u (%s). Will use \"WriteResolveDepthStencil\".", (re::DynamicString *)&v127, v5, v72, v2, *(_QWORD *)&v122[4]);
          re::RenderGraphCompiled::addError((uint64_t)a2, (uint64_t)&v127);
          v4 = 88;
          if ((_QWORD)v127)
          {
            if ((BYTE8(v127) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v127 + 40))();
            v127 = 0u;
            v128 = 0u;
          }
          re::StringID::destroyString((re::StringID *)&v121);
LABEL_133:
          *v40 = 8;
          v3 = *((_QWORD *)this + 19);
          if (v3 <= v2)
            goto LABEL_248;
          v73 = *((_QWORD *)this + 21) + 88 * v2;
          v74 = *(_QWORD *)(v73 + 64);
          if (!v74)
            goto LABEL_138;
          v2 = *(_QWORD *)(v73 + 80);
          v75 = 12 * v74;
          do
          {
            if (v5 == *(_DWORD *)v2)
              goto LABEL_139;
            v2 += 12;
            v75 -= 12;
          }
          while (v75);
LABEL_138:
          v2 = 0;
LABEL_139:
          v76 = *(_DWORD *)(v2 + 8);
          v77 = v76 > 8;
          v78 = 1 << v76;
          v79 = 321;
LABEL_218:
          v110 = v78 & v79;
          if (v77 || v110 == 0)
          {
            re::DynamicString::format((re::DynamicString *)"Action %u has incorrect edges.", (re::DynamicString *)&v127, v5);
            re::RenderGraphCompiled::addError((uint64_t)a2, (uint64_t)&v127);
            if ((_QWORD)v127)
            {
              if ((BYTE8(v127) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v127 + 40))();
            }
          }
          v86 = 8;
          goto LABEL_223;
        case 9:
          if (!*(_QWORD *)v12)
            goto LABEL_56;
          v42 = (int *)(*v115 + 8);
          v43 = 12 * *(_QWORD *)v12;
          while (*(v42 - 2) != (_DWORD)v2)
          {
            v42 += 3;
            v43 -= 12;
            if (!v43)
            {
LABEL_56:
              LODWORD(v127) = v11[13];
              *(_QWORD *)((char *)&v127 + 4) = 0xA00000000;
              re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v116, (uint64_t *)&v127);
              v3 = *((_QWORD *)this + 19);
              if (v3 <= v2)
                goto LABEL_240;
              v32 = (_anonymous_namespace_ *)(*((_QWORD *)this + 21) + 88 * v2 + 48);
              LODWORD(v127) = v5;
              *(_QWORD *)((char *)&v127 + 4) = 0xA00000000;
              goto LABEL_82;
            }
          }
          v80 = *v42;
          if (!(_DWORD)v80)
            goto LABEL_147;
          v81 = *((_QWORD *)a2 + 37);
          v4 = *(_QWORD *)(v81 + 16);
          if (v4 <= v2)
            goto LABEL_257;
          v82 = *((_QWORD *)this + v80 + 1);
          re::StringID::StringID((re::StringID *)&v121, (const StringID *)(*(_QWORD *)(v81 + 32) + 48 * v2 + 8));
          re::DynamicString::format((re::DynamicString *)"Action %u attempted to both \"QueryVisibility\" and \"%s\" to resource %u (%s). Will use \"QueryVisibility\".", (re::DynamicString *)&v127, v5, v82, v2, *(_QWORD *)&v122[4]);
          re::RenderGraphCompiled::addError((uint64_t)a2, (uint64_t)&v127);
          v4 = 88;
          if ((_QWORD)v127)
          {
            if ((BYTE8(v127) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v127 + 40))();
            v127 = 0u;
            v128 = 0u;
          }
          re::StringID::destroyString((re::StringID *)&v121);
LABEL_147:
          *v42 = 10;
          v3 = *((_QWORD *)this + 19);
          if (v3 <= v2)
            goto LABEL_252;
          v83 = *((_QWORD *)this + 21) + 88 * v2;
          v84 = *(_QWORD *)(v83 + 64);
          if (!v84)
            goto LABEL_152;
          v2 = *(_QWORD *)(v83 + 80);
          v85 = 12 * v84;
          do
          {
            if (v5 == *(_DWORD *)v2)
              goto LABEL_153;
            v2 += 12;
            v85 -= 12;
          }
          while (v85);
LABEL_152:
          v2 = 0;
LABEL_153:
          if (*(_DWORD *)(v2 + 8))
          {
            re::DynamicString::format((re::DynamicString *)"Action %u shouldn't have in edge tag.", (re::DynamicString *)&v127, v5);
            re::RenderGraphCompiled::addError((uint64_t)a2, (uint64_t)&v127);
            if ((_QWORD)v127)
            {
              if ((BYTE8(v127) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v127 + 40))();
            }
          }
          v86 = 10;
          goto LABEL_223;
        case 12:
          goto LABEL_83;
        default:
          goto LABEL_263;
      }
      do
      {
        if (*(v36 - 2) == (_DWORD)v2)
        {
          if (*v36 > 4 || ((1 << *v36) & 0x19) == 0)
          {
            v54 = *((_QWORD *)a2 + 37);
            v4 = *(_QWORD *)(v54 + 16);
            if (v4 <= v2)
              goto LABEL_259;
            v55 = *((_QWORD *)this + (int)*v36 + 1);
            re::StringID::StringID((re::StringID *)&v121, (const StringID *)(*(_QWORD *)(v54 + 32) + 48 * v2 + 8));
            re::DynamicString::format((re::DynamicString *)"Action %u attempted to both \"WriteDepth\" and \"%s\" to resource %u (%s). Will use \"WriteDepthStencil\".", (re::DynamicString *)&v127, v5, v55, v2, *(_QWORD *)&v122[4]);
            re::RenderGraphCompiled::addError((uint64_t)a2, (uint64_t)&v127);
            v4 = 88;
            if ((_QWORD)v127)
            {
              if ((BYTE8(v127) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v127 + 40))();
              v127 = 0u;
              v128 = 0u;
            }
            re::StringID::destroyString((re::StringID *)&v121);
          }
          *v36 = 4;
          v3 = *((_QWORD *)this + 19);
          if (v3 > v2)
          {
            v56 = *((_QWORD *)this + 21) + 88 * v2;
            v57 = *(_QWORD *)(v56 + 64);
            if (v57)
            {
              v2 = *(_QWORD *)(v56 + 80);
              v58 = 12 * v57;
              while (v5 != *(_DWORD *)v2)
              {
                v2 += 12;
                v58 -= 12;
                if (!v58)
                  goto LABEL_101;
              }
            }
            else
            {
LABEL_101:
              v2 = 0;
            }
            v59 = *(_DWORD *)(v2 + 8);
            v60 = v59 > 4;
            v61 = 1 << v59;
            v62 = 25;
LABEL_195:
            v101 = v61 & v62;
            if (v60 || v101 == 0)
            {
              re::DynamicString::format((re::DynamicString *)"Action %u has incorrect edges.", (re::DynamicString *)&v127, v5);
              re::RenderGraphCompiled::addError((uint64_t)a2, (uint64_t)&v127);
              if ((_QWORD)v127)
              {
                if ((BYTE8(v127) & 1) != 0)
                  (*(void (**)(void))(*(_QWORD *)v127 + 40))();
              }
            }
            v86 = 4;
LABEL_223:
            *(_DWORD *)(v2 + 8) = v86;
            goto LABEL_83;
          }
LABEL_247:
          v117 = 0;
          v130 = 0u;
          v131 = 0u;
          v128 = 0u;
          v129 = 0u;
          v127 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v121 = 136315906;
          *(_QWORD *)v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          v123 = 2048;
          v124 = v2;
          v125 = 2048;
          v126 = (_DWORD *)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_248:
          v117 = 0;
          v130 = 0u;
          v131 = 0u;
          v128 = 0u;
          v129 = 0u;
          v127 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v121 = 136315906;
          *(_QWORD *)v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          v123 = 2048;
          v124 = v2;
          v125 = 2048;
          v126 = (_DWORD *)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_249:
          v117 = 0;
          v130 = 0u;
          v131 = 0u;
          v128 = 0u;
          v129 = 0u;
          v127 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v121 = 136315906;
          *(_QWORD *)v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          v123 = 2048;
          v124 = v2;
          v125 = 2048;
          v126 = (_DWORD *)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_250:
          v117 = 0;
          v130 = 0u;
          v131 = 0u;
          v128 = 0u;
          v129 = 0u;
          v127 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v121 = 136315906;
          *(_QWORD *)v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          v123 = 2048;
          v124 = v2;
          v125 = 2048;
          v126 = (_DWORD *)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_251:
          v117 = 0;
          v130 = 0u;
          v131 = 0u;
          v128 = 0u;
          v129 = 0u;
          v127 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v121 = 136315906;
          *(_QWORD *)v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          v123 = 2048;
          v124 = v2;
          v125 = 2048;
          v126 = (_DWORD *)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_252:
          v117 = 0;
          v130 = 0u;
          v131 = 0u;
          v128 = 0u;
          v129 = 0u;
          v127 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v121 = 136315906;
          *(_QWORD *)v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          v123 = 2048;
          v124 = v2;
          v125 = 2048;
          v126 = (_DWORD *)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_253:
          v117 = 0;
          v130 = 0u;
          v131 = 0u;
          v128 = 0u;
          v129 = 0u;
          v127 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v121 = 136315906;
          *(_QWORD *)v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          v123 = 2048;
          v124 = v2;
          v125 = 2048;
          v126 = (_DWORD *)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_254:
          v120 = 0;
          v130 = 0u;
          v131 = 0u;
          v128 = 0u;
          v129 = 0u;
          v127 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v121 = 136315906;
          *(_QWORD *)v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          v123 = 2048;
          v124 = v9;
          v125 = 2048;
          v126 = (_DWORD *)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_255:
          v120 = 0;
          v130 = 0u;
          v131 = 0u;
          v128 = 0u;
          v129 = 0u;
          v127 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v121 = 136315906;
          *(_QWORD *)v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          v123 = 2048;
          v124 = v9;
          v125 = 2048;
          v126 = (_DWORD *)v3;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_256:
          v117 = 0;
          v130 = 0u;
          v131 = 0u;
          v128 = 0u;
          v129 = 0u;
          v127 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v121 = 136315906;
          *(_QWORD *)v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          v123 = 2048;
          v124 = v2;
          v125 = 2048;
          v126 = (_DWORD *)v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_257:
          v117 = 0;
          v130 = 0u;
          v131 = 0u;
          v128 = 0u;
          v129 = 0u;
          v127 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v121 = 136315906;
          *(_QWORD *)v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          v123 = 2048;
          v124 = v2;
          v125 = 2048;
          v126 = (_DWORD *)v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_258:
          v117 = 0;
          v130 = 0u;
          v131 = 0u;
          v128 = 0u;
          v129 = 0u;
          v127 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v121 = 136315906;
          *(_QWORD *)v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          v123 = 2048;
          v124 = v2;
          v125 = 2048;
          v126 = (_DWORD *)v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_259:
          v117 = 0;
          v130 = 0u;
          v131 = 0u;
          v128 = 0u;
          v129 = 0u;
          v127 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v121 = 136315906;
          *(_QWORD *)v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          v123 = 2048;
          v124 = v2;
          v125 = 2048;
          v126 = (_DWORD *)v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_260:
          v117 = 0;
          v130 = 0u;
          v131 = 0u;
          v128 = 0u;
          v129 = 0u;
          v127 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v121 = 136315906;
          *(_QWORD *)v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          v123 = 2048;
          v124 = v2;
          v125 = 2048;
          v126 = (_DWORD *)v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_261:
          v117 = 0;
          v130 = 0u;
          v131 = 0u;
          v128 = 0u;
          v129 = 0u;
          v127 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v121 = 136315906;
          *(_QWORD *)v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          v123 = 2048;
          v124 = v2;
          v125 = 2048;
          v126 = (_DWORD *)v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_262:
          v117 = 0;
          v130 = 0u;
          v131 = 0u;
          v128 = 0u;
          v129 = 0u;
          v127 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v121 = 136315906;
          *(_QWORD *)v122 = "operator[]";
          *(_WORD *)&v122[8] = 1024;
          *(_DWORD *)&v122[10] = 789;
          v123 = 2048;
          v124 = v2;
          v125 = 2048;
          v126 = (_DWORD *)v4;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_263:
          re::internal::assertLog((re::internal *)5, v21, "assertion failure: '%s' (%s:line %i) Invalid RenderGraphResourceOperationType (%d)", "!\"Unreachable code\"", "init", 279, v28);
          _os_crash();
          __break(1u);
        }
        v36 += 3;
        v37 -= 12;
      }
      while (v37);
LABEL_38:
      LODWORD(v127) = v11[13];
      *(_QWORD *)((char *)&v127 + 4) = 0x400000000;
      re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v116, (uint64_t *)&v127);
      v3 = *((_QWORD *)this + 19);
      if (v3 <= v2)
      {
LABEL_237:
        v117 = 0;
        v130 = 0u;
        v131 = 0u;
        v128 = 0u;
        v129 = 0u;
        v127 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v121 = 136315906;
        *(_QWORD *)v122 = "operator[]";
        *(_WORD *)&v122[8] = 1024;
        *(_DWORD *)&v122[10] = 789;
        v123 = 2048;
        v124 = v2;
        v125 = 2048;
        v126 = (_DWORD *)v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_238:
        v117 = 0;
        v130 = 0u;
        v131 = 0u;
        v128 = 0u;
        v129 = 0u;
        v127 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v121 = 136315906;
        *(_QWORD *)v122 = "operator[]";
        *(_WORD *)&v122[8] = 1024;
        *(_DWORD *)&v122[10] = 789;
        v123 = 2048;
        v124 = v2;
        v125 = 2048;
        v126 = (_DWORD *)v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_239:
        v117 = 0;
        v130 = 0u;
        v131 = 0u;
        v128 = 0u;
        v129 = 0u;
        v127 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v121 = 136315906;
        *(_QWORD *)v122 = "operator[]";
        *(_WORD *)&v122[8] = 1024;
        *(_DWORD *)&v122[10] = 789;
        v123 = 2048;
        v124 = v2;
        v125 = 2048;
        v126 = (_DWORD *)v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_240:
        v117 = 0;
        v130 = 0u;
        v131 = 0u;
        v128 = 0u;
        v129 = 0u;
        v127 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v121 = 136315906;
        *(_QWORD *)v122 = "operator[]";
        *(_WORD *)&v122[8] = 1024;
        *(_DWORD *)&v122[10] = 789;
        v123 = 2048;
        v124 = v2;
        v125 = 2048;
        v126 = (_DWORD *)v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_241;
      }
LABEL_69:
      v32 = (_anonymous_namespace_ *)(*((_QWORD *)this + 21) + 88 * v2 + 48);
      LODWORD(v127) = v5;
      *(_QWORD *)((char *)&v127 + 4) = 0x400000000;
LABEL_82:
      re::DynamicArray<re::RenderGraphResourceAllocationManager::FenceIndex>::add(v32, (uint64_t *)&v127);
LABEL_83:
      v11 += 16;
    }
    while (v11 != (_DWORD *)v9);
LABEL_230:
    ++v5;
    v11 = (_DWORD *)*((_QWORD *)a2 + 44);
  }
  while (v5 < v11);
}

_QWORD *re::DynamicArray<re::RenderGraphOptimizerProcessor::Vertex>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 88 * a2;
    v9 = a2;
    do
    {
      v10 = v3[4];
      v11 = v10 + v8;
      v12 = *(_QWORD *)(v10 + v8 + 48);
      if (v12)
      {
        if (*(_QWORD *)(v11 + 80))
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
        *(_QWORD *)(v11 + 80) = 0;
        *(_QWORD *)(v10 + v8 + 56) = 0;
        *(_QWORD *)(v10 + v8 + 64) = 0;
        *(_QWORD *)(v10 + v8 + 48) = 0;
        ++*(_DWORD *)(v10 + v8 + 72);
      }
      v14 = *(_QWORD **)(v11 + 8);
      v13 = (_QWORD *)(v11 + 8);
      result = v14;
      if (v14)
      {
        v15 = v10 + v8;
        if (*(_QWORD *)(v15 + 40))
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
        *(_QWORD *)(v15 + 40) = 0;
        v13[1] = 0;
        v13[2] = 0;
        *v13 = 0;
        ++*(_DWORD *)(v15 + 32);
      }
      ++v9;
      v8 += 88;
    }
    while (v9 < v3[2]);
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::RenderGraphOptimizerProcessor::Vertex>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 88 * v4;
      do
      {
        v7 = v3[4] + v6;
        *(_BYTE *)v7 = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 32) = 0;
        *(_QWORD *)(v7 + 80) = 0;
        *(_OWORD *)(v7 + 40) = 0uLL;
        *(_OWORD *)(v7 + 56) = 0uLL;
        *(_DWORD *)(v7 + 72) = 0;
        v6 += 88;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::RenderGraphOptimizerProcessor::process(re::RenderGraphOptimizerProcessor *this, re::RenderGraphCompiled *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  re::RenderGraphOptimizerProcessor *v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  unint64_t v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  _anonymous_namespace_ *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  unsigned int v51;
  re::RenderGraphCompiled *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  re::StringID *v77;
  _BOOL8 v78;
  re *v79;
  NSObject *v80;
  uint64_t v81;
  unsigned int v82;
  re::RenderGraphCompiled *v83;
  re::RenderGraphCompiled *v84;
  int *v85;
  int v86;
  unint64_t v87;
  _DWORD *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  __int128 *v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t result;
  _QWORD v109[2];
  _QWORD v110[2];
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE v121[44];
  _BYTE buf[12];
  __int16 v123;
  int v124;
  __int16 v125;
  unint64_t v126;
  __int16 v127;
  unint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;

  v7 = this;
  v134 = *MEMORY[0x24BDAC8D0];
  re::RenderGraphOptimizerProcessor::init(this, a2);
  v9 = *((_QWORD *)v7 + 19);
  LOBYTE(v129) = 0;
  v118 = 0;
  v119 = 0;
  v117 = 0;
  v12 = *((_QWORD *)v7 + 14);
  LOBYTE(v129) = 0;
  v115 = 0;
  v116 = 0;
  v114 = 0;
  v113 = 0;
  v110[1] = 0;
  v111 = 0;
  v110[0] = 0;
  v112 = 0;
  v14 = *((_QWORD *)v7 + 14) + *((_QWORD *)v7 + 19);
  if (v14)
    v13 = (_anonymous_namespace_ *)re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v110, v14);
  v15 = *((_QWORD *)a2 + 69);
  if (v15)
  {
    v16 = (unsigned int *)*((_QWORD *)a2 + 71);
    v17 = 4 * v15;
    v2 = 1;
    do
    {
      v10 = *v16;
      v18 = v118;
      if (v118 <= v10)
        goto LABEL_199;
      *(_BYTE *)(v119 + v10) = 1;
      LODWORD(v129) = v10;
      BYTE4(v129) = 1;
      v13 = re::DynamicArray<re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::TraversalNode>::add((_anonymous_namespace_ *)v110, &v129);
      ++v16;
      v17 -= 4;
    }
    while (v17);
  }
  v19 = v111;
  if (!v111)
  {
LABEL_46:
    LODWORD(v109[0]) = 0;
    v18 = *((_QWORD *)v7 + 14);
    if ((_DWORD)v18)
    {
      v17 = 0;
      v10 = (unint64_t)a2 + 376;
      v3 = 88;
      v4 = 1;
      do
      {
        v2 = v17;
        if (v18 <= v17)
          goto LABEL_204;
        v33 = *((_QWORD *)v7 + 16);
        v5 = v115;
        if (*(_BYTE *)(v33 + 88 * v17))
        {
          if (v115 <= v17)
            goto LABEL_206;
          *(_BYTE *)(v116 + v17) = 1;
          v34 = v33 + 88 * v17;
          v35 = *(_QWORD *)(v34 + 24);
          if (v35)
          {
            v36 = *(unsigned int **)(v34 + 40);
            v6 = v118;
            v37 = v119;
            v38 = 12 * v35;
            while (1)
            {
              v39 = *v36;
              if (v6 <= v39)
                break;
              *(_BYTE *)(v37 + v39) = 1;
              v36 += 3;
              v38 -= 12;
              if (!v38)
                goto LABEL_55;
            }
            *(_QWORD *)buf = 0;
            v132 = 0u;
            v133 = 0u;
            v130 = 0u;
            v131 = 0u;
            v129 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v121 = 136315906;
            *(_QWORD *)&v121[4] = "operator[]";
            *(_WORD *)&v121[12] = 1024;
            *(_DWORD *)&v121[14] = 468;
            *(_WORD *)&v121[18] = 2048;
            *(_QWORD *)&v121[20] = v39;
            *(_WORD *)&v121[28] = 2048;
            *(_QWORD *)&v121[30] = v6;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_188:
            *(_QWORD *)buf = 0;
            v132 = 0u;
            v133 = 0u;
            v130 = 0u;
            v131 = 0u;
            v129 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v121 = 136315906;
            *(_QWORD *)&v121[4] = "operator[]";
            *(_WORD *)&v121[12] = 1024;
            *(_DWORD *)&v121[14] = 468;
            *(_WORD *)&v121[18] = 2048;
            *(_QWORD *)&v121[20] = v39;
            *(_WORD *)&v121[28] = 2048;
            *(_QWORD *)&v121[30] = v6;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_189:
            v109[0] = 0;
            v132 = 0u;
            v133 = 0u;
            v130 = 0u;
            v131 = 0u;
            v129 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "operator[]";
            v123 = 1024;
            v124 = 789;
            v125 = 2048;
            v126 = v2;
            v127 = 2048;
            v128 = v39;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_190:
            v109[0] = 0;
            v132 = 0u;
            v133 = 0u;
            v130 = 0u;
            v131 = 0u;
            v129 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "operator[]";
            v123 = 1024;
            v124 = 468;
            v125 = 2048;
            v126 = v3;
            v127 = 2048;
            v128 = v2;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_191:
            v109[0] = 0;
            v132 = 0u;
            v133 = 0u;
            v130 = 0u;
            v131 = 0u;
            v129 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "operator[]";
            v123 = 1024;
            v124 = 789;
            v125 = 2048;
            v126 = v2;
            v127 = 2048;
            v128 = v6;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_192:
            *(_QWORD *)buf = 0;
            v132 = 0u;
            v133 = 0u;
            v130 = 0u;
            v131 = 0u;
            v129 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v121 = 136315906;
            *(_QWORD *)&v121[4] = "operator[]";
            *(_WORD *)&v121[12] = 1024;
            *(_DWORD *)&v121[14] = 468;
            *(_WORD *)&v121[18] = 2048;
            *(_QWORD *)&v121[20] = v17;
            *(_WORD *)&v121[28] = 2048;
            *(_QWORD *)&v121[30] = v4;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_193:
            *(_QWORD *)buf = 0;
            v132 = 0u;
            v133 = 0u;
            v130 = 0u;
            v131 = 0u;
            v129 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v121 = 136315906;
            *(_QWORD *)&v121[4] = "operator[]";
            *(_WORD *)&v121[12] = 1024;
            *(_DWORD *)&v121[14] = 468;
            *(_WORD *)&v121[18] = 2048;
            *(_QWORD *)&v121[20] = v5;
            *(_WORD *)&v121[28] = 2048;
            *(_QWORD *)&v121[30] = v17;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_194;
          }
LABEL_55:
          v40 = v33 + 88 * v17;
          v41 = *(_QWORD *)(v40 + 64);
          if (v41)
          {
            v42 = *(unsigned int **)(v40 + 80);
            v6 = v118;
            v43 = v119;
            v44 = 12 * v41;
            do
            {
              v39 = *v42;
              if (v6 <= v39)
                goto LABEL_188;
              *(_BYTE *)(v43 + v39) = 1;
              v42 += 3;
              v44 -= 12;
            }
            while (v44);
          }
        }
        if (v5 <= v17)
          goto LABEL_205;
        if (*(_BYTE *)(v116 + v17))
        {
          v13 = (_anonymous_namespace_ *)re::DynamicArray<int>::add((_QWORD *)v10, v109);
          v17 = LODWORD(v109[0]);
          v18 = *((_QWORD *)v7 + 14);
          if (v18 <= LODWORD(v109[0]))
            goto LABEL_207;
          v45 = *((_QWORD *)v7 + 16) + 88 * LODWORD(v109[0]);
          v46 = *(_QWORD *)(v45 + 24);
          if (v46)
          {
            v47 = *(_QWORD *)(v45 + 40);
            v2 = v118;
            v48 = v119;
            v49 = 12 * v46;
            v50 = (_DWORD *)(v47 + 8);
            do
            {
              if (*v50 == 9)
              {
                v5 = *(v50 - 2);
                if (v2 <= v5)
                  goto LABEL_197;
                *(_BYTE *)(v48 + v5) = 1;
              }
              v50 += 3;
              v49 -= 12;
            }
            while (v49);
          }
        }
        v17 = (v17 + 1);
        LODWORD(v109[0]) = v17;
      }
      while (v17 < v18);
    }
    LODWORD(v109[0]) = 0;
    v17 = *((_QWORD *)v7 + 19);
    if ((_DWORD)v17)
    {
      v51 = 0;
      v10 = (unint64_t)a2 + 416;
      v3 = 88;
      v4 = 1;
      while (1)
      {
        v18 = v51;
        if (v17 <= v51)
          break;
        v2 = v118;
        if (!*(_BYTE *)(*((_QWORD *)v7 + 21) + 88 * v51))
        {
          if (v118 <= v51)
            goto LABEL_215;
          *(_BYTE *)(v119 + v51) = 1;
        }
        if (v2 <= v51)
          goto LABEL_203;
        if (*(_BYTE *)(v119 + v51))
        {
          v13 = (_anonymous_namespace_ *)re::DynamicArray<int>::add((_QWORD *)v10, v109);
          v51 = v109[0];
          v17 = *((_QWORD *)v7 + 19);
        }
        LODWORD(v109[0]) = ++v51;
        if (v51 >= v17)
          goto LABEL_79;
      }
LABEL_202:
      *(_QWORD *)buf = 0;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v121 = 136315906;
      *(_QWORD *)&v121[4] = "operator[]";
      *(_WORD *)&v121[12] = 1024;
      *(_DWORD *)&v121[14] = 789;
      *(_WORD *)&v121[18] = 2048;
      *(_QWORD *)&v121[20] = v18;
      *(_WORD *)&v121[28] = 2048;
      *(_QWORD *)&v121[30] = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_203:
      *(_QWORD *)buf = 0;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v121 = 136315906;
      *(_QWORD *)&v121[4] = "operator[]";
      *(_WORD *)&v121[12] = 1024;
      *(_DWORD *)&v121[14] = 468;
      *(_WORD *)&v121[18] = 2048;
      *(_QWORD *)&v121[20] = v18;
      *(_WORD *)&v121[28] = 2048;
      *(_QWORD *)&v121[30] = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_204:
      *(_QWORD *)buf = 0;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v121 = 136315906;
      *(_QWORD *)&v121[4] = "operator[]";
      *(_WORD *)&v121[12] = 1024;
      *(_DWORD *)&v121[14] = 789;
      *(_WORD *)&v121[18] = 2048;
      *(_QWORD *)&v121[20] = v2;
      *(_WORD *)&v121[28] = 2048;
      *(_QWORD *)&v121[30] = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_205:
      *(_QWORD *)buf = 0;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v121 = 136315906;
      *(_QWORD *)&v121[4] = "operator[]";
      *(_WORD *)&v121[12] = 1024;
      *(_DWORD *)&v121[14] = 468;
      *(_WORD *)&v121[18] = 2048;
      *(_QWORD *)&v121[20] = v2;
      *(_WORD *)&v121[28] = 2048;
      *(_QWORD *)&v121[30] = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_206:
      *(_QWORD *)buf = 0;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v121 = 136315906;
      *(_QWORD *)&v121[4] = "operator[]";
      *(_WORD *)&v121[12] = 1024;
      *(_DWORD *)&v121[14] = 468;
      *(_WORD *)&v121[18] = 2048;
      *(_QWORD *)&v121[20] = v2;
      *(_WORD *)&v121[28] = 2048;
      *(_QWORD *)&v121[30] = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_207:
      *(_QWORD *)buf = 0;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v121 = 136315906;
      *(_QWORD *)&v121[4] = "operator[]";
      *(_WORD *)&v121[12] = 1024;
      *(_DWORD *)&v121[14] = 789;
      *(_WORD *)&v121[18] = 2048;
      *(_QWORD *)&v121[20] = v17;
      *(_WORD *)&v121[28] = 2048;
      *(_QWORD *)&v121[30] = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_208:
      v109[0] = 0;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "operator[]";
      v123 = 1024;
      v124 = 789;
      v125 = 2048;
      v126 = v5;
      v127 = 2048;
      v128 = (unint64_t)v7;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_209:
      v109[0] = 0;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "operator[]";
      v123 = 1024;
      v124 = 789;
      v125 = 2048;
      v126 = v3;
      v127 = 2048;
      v128 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_210:
      v109[0] = 0;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "operator[]";
      v123 = 1024;
      v124 = 789;
      v125 = 2048;
      v126 = v4;
      v127 = 2048;
      v128 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_211:
      v109[0] = 0;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "operator[]";
      v123 = 1024;
      v124 = 789;
      v125 = 2048;
      v126 = v10;
      v127 = 2048;
      v128 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_212:
      v109[0] = 0;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "operator[]";
      v123 = 1024;
      v124 = 789;
      v125 = 2048;
      v126 = v10;
      v127 = 2048;
      v128 = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_213:
      *(_QWORD *)buf = 0;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v121 = 136315906;
      *(_QWORD *)&v121[4] = "operator[]";
      *(_WORD *)&v121[12] = 1024;
      *(_DWORD *)&v121[14] = 789;
      *(_WORD *)&v121[18] = 2048;
      *(_QWORD *)&v121[20] = v3;
      *(_WORD *)&v121[28] = 2048;
      *(_QWORD *)&v121[30] = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_214:
      *(_QWORD *)buf = 0;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v121 = 136315906;
      *(_QWORD *)&v121[4] = "operator[]";
      *(_WORD *)&v121[12] = 1024;
      *(_DWORD *)&v121[14] = 789;
      *(_WORD *)&v121[18] = 2048;
      *(_QWORD *)&v121[20] = v3;
      *(_WORD *)&v121[28] = 2048;
      *(_QWORD *)&v121[30] = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_215:
      *(_QWORD *)buf = 0;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v121 = 136315906;
      *(_QWORD *)&v121[4] = "operator[]";
      *(_WORD *)&v121[12] = 1024;
      *(_DWORD *)&v121[14] = 468;
      *(_WORD *)&v121[18] = 2048;
      *(_QWORD *)&v121[20] = v18;
      *(_WORD *)&v121[28] = 2048;
      *(_QWORD *)&v121[30] = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
LABEL_79:
    memset(v121, 0, 36);
    *(_QWORD *)&v121[36] = 0x7FFFFFFFLL;
    v52 = a2;
    v2 = *((_QWORD *)a2 + 49);
    if (!(_DWORD)v2)
    {
LABEL_135:
      v83 = v52;
      re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize((_QWORD *)v52 + 57, v2);
      re::DynamicArray<re::DynamicArray<re::Matrix4x4<float>>>::resize((_QWORD *)v83 + 62, *((_QWORD *)v83 + 49));
      v10 = *(unsigned int *)&v121[32];
      if (!*(_DWORD *)&v121[32])
        goto LABEL_141;
      v18 = 0;
      v85 = (int *)(*(_QWORD *)&v121[16] + 8);
      while (1)
      {
        v86 = *v85;
        v85 += 6;
        if (v86 < 0)
          goto LABEL_142;
        if (*(unsigned int *)&v121[32] == ++v18)
        {
          v18 = *(unsigned int *)&v121[32];
          goto LABEL_142;
        }
      }
    }
    v4 = 0;
    v3 = 88;
    v17 = 0x7FFFFFFFLL;
    v18 = 24;
    v52 = a2;
    while (1)
    {
      if (v2 <= v4)
        goto LABEL_210;
      v10 = *(unsigned int *)(*((_QWORD *)v52 + 51) + 4 * v4);
      v2 = *((_QWORD *)v7 + 14);
      if (v2 <= v10)
        goto LABEL_211;
      v53 = *((_QWORD *)v7 + 16) + 88 * v10;
      v54 = *(_QWORD *)(v53 + 24);
      if (!v54)
        goto LABEL_109;
      v5 = *(_QWORD *)(v53 + 40);
      v6 = v5 + 12 * v54;
      do
      {
        LODWORD(v120) = *(_DWORD *)v5;
        v2 = v120;
        v39 = *((_QWORD *)v7 + 19);
        if (v39 <= v120)
          goto LABEL_189;
        if (*(_BYTE *)(*((_QWORD *)v7 + 21) + 88 * v120))
        {
          v55 = v118;
          if (v118 <= v120)
            goto LABEL_195;
          if (*(_BYTE *)(v119 + v120))
          {
            if (re::HashTable<unsigned int,re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::Lifespan,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::containsKey((uint64_t)v121, v120))
            {
              if (*(_QWORD *)v121)
              {
                v56 = 0x94D049BB133111EBLL
                    * ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) >> 27));
                v57 = (v56 ^ (v56 >> 31)) % *(unsigned int *)&v121[24];
                v58 = *(_QWORD *)&v121[16];
                v59 = *(unsigned int *)(*(_QWORD *)&v121[8] + 4 * v57);
                if ((_DWORD)v59 != 0x7FFFFFFF)
                {
                  while (*(_DWORD *)(*(_QWORD *)&v121[16] + 24 * v59 + 12) != (_DWORD)v2)
                  {
                    v59 = *(_DWORD *)(*(_QWORD *)&v121[16] + 24 * v59 + 8) & 0x7FFFFFFF;
                    if (v59 == 0x7FFFFFFF)
                      goto LABEL_101;
                  }
                  goto LABEL_102;
                }
              }
              else
              {
                v58 = *(_QWORD *)&v121[16];
              }
LABEL_101:
              LODWORD(v59) = 0x7FFFFFFF;
LABEL_102:
              v64 = v58 + 24 * v59;
              v65 = *(_DWORD *)(v64 + 20);
              if (v65 <= v4)
                v65 = v4;
              *(_DWORD *)(v64 + 20) = v65;
              goto LABEL_107;
            }
            LODWORD(v129) = v4;
            DWORD1(v129) = v4;
            v60 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) >> 27));
            v61 = v60 ^ (v60 >> 31);
            if (!*(_QWORD *)v121)
            {
              LODWORD(v62) = 0;
LABEL_106:
              re::HashTable<unsigned int,re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::Lifespan,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove((uint64_t)v121, v62, v61, &v120, &v129);
              ++*(_DWORD *)&v121[40];
              goto LABEL_107;
            }
            v62 = v61 % *(unsigned int *)&v121[24];
            v63 = *(unsigned int *)(*(_QWORD *)&v121[8] + 4 * v62);
            if ((_DWORD)v63 == 0x7FFFFFFF)
              goto LABEL_106;
            while (*(_DWORD *)(*(_QWORD *)&v121[16] + 24 * v63 + 12) != (_DWORD)v2)
            {
              LODWORD(v63) = *(_DWORD *)(*(_QWORD *)&v121[16] + 24 * v63 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v63 == 0x7FFFFFFF)
                goto LABEL_106;
            }
          }
        }
LABEL_107:
        v5 += 12;
      }
      while (v5 != v6);
      v2 = *((_QWORD *)v7 + 14);
LABEL_109:
      if (v2 <= v10)
        goto LABEL_212;
      v66 = *((_QWORD *)v7 + 16) + 88 * v10;
      v67 = *(_QWORD *)(v66 + 64);
      if (v67)
      {
        v10 = *(_QWORD *)(v66 + 80);
        v5 = v10 + 12 * v67;
        do
        {
          v2 = *(unsigned int *)v10;
          v6 = *((_QWORD *)v7 + 19);
          if (v6 <= v2)
            goto LABEL_191;
          v68 = (_BYTE *)(*((_QWORD *)v7 + 21) + 88 * v2);
          if (*v68)
          {
            v6 = v118;
            if (v118 <= v2)
              goto LABEL_196;
            if (*(_BYTE *)(v119 + v2))
            {
              if (re::HashTable<unsigned int,re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::Lifespan,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::containsKey((uint64_t)v121, *(_DWORD *)v10))
              {
                if (*(_QWORD *)v121)
                {
                  v69 = 0x94D049BB133111EBLL
                      * ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) >> 27));
                  v70 = (v69 ^ (v69 >> 31)) % *(unsigned int *)&v121[24];
                  v71 = *(_QWORD *)&v121[16];
                  v72 = *(unsigned int *)(*(_QWORD *)&v121[8] + 4 * v70);
                  if ((_DWORD)v72 != 0x7FFFFFFF)
                  {
                    while (*(_DWORD *)(*(_QWORD *)&v121[16] + 24 * v72 + 12) != (_DWORD)v2)
                    {
                      v72 = *(_DWORD *)(*(_QWORD *)&v121[16] + 24 * v72 + 8) & 0x7FFFFFFF;
                      if (v72 == 0x7FFFFFFF)
                        goto LABEL_129;
                    }
                    goto LABEL_130;
                  }
                }
                else
                {
                  v71 = *(_QWORD *)&v121[16];
                }
LABEL_129:
                LODWORD(v72) = 0x7FFFFFFF;
LABEL_130:
                v81 = v71 + 24 * v72;
                v82 = *(_DWORD *)(v81 + 20);
                if (v82 <= v4)
                  v82 = v4;
                *(_DWORD *)(v81 + 20) = v82;
                goto LABEL_133;
              }
              *v68 = 0;
              v73 = *((_QWORD *)a2 + 37);
              v6 = *(_QWORD *)(v73 + 16);
              if (v6 <= v2)
                goto LABEL_200;
              v17 = 48;
              v74 = *(_QWORD *)(v73 + 32) + 48 * v2;
              v109[0] = *(_QWORD *)(v74 + 8) >> 1;
              v109[1] = *(_QWORD *)(v74 + 24);
              v75 = re::RenderGraphCompiled::targetDescription((uint64_t)a2, (uint64_t)v109);
              *(_DWORD *)v75 = 2;
              *(_QWORD *)&v129 = 0x1DCE9D8E3A6B2E8;
              *((_QWORD *)&v129 + 1) = "NullTexture";
              *(_QWORD *)(v75 + 96) = 0x44A03688CB9957C5;
              re::StringID::destroyString((re::StringID *)&v129);
              v76 = *((_QWORD *)a2 + 37);
              v6 = *(_QWORD *)(v76 + 16);
              if (v6 <= v2)
                goto LABEL_201;
              v77 = re::StringID::StringID((re::StringID *)&v129, (const StringID *)(*(_QWORD *)(v76 + 32) + 48 * v2 + 8));
              *(_QWORD *)buf = (unint64_t)v129 >> 1;
              v78 = re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::contains((uint64_t)&xmmword_254119FC8, (uint64_t *)buf);
              if (!v78)
              {
                *(_QWORD *)buf = (unint64_t)v129 >> 1;
                v79 = (re *)re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add((uint64_t)&xmmword_254119FC8, (uint64_t *)buf);
                v80 = *re::graphicsLogObjects(v79);
                if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136315138;
                  *(_QWORD *)&buf[4] = *((_QWORD *)&v129 + 1);
                  _os_log_impl(&dword_224FE9000, v80, OS_LOG_TYPE_DEFAULT, "RenderGraph: Transient resource %s is read from before it is written to. Replacing it with NullTexture.", buf, 0xCu);
                }
              }
              re::StringID::destroyString((re::StringID *)&v129);
              v17 = 0x7FFFFFFFLL;
            }
          }
LABEL_133:
          v10 += 12;
        }
        while (v10 != v5);
      }
      ++v4;
      v52 = a2;
      v2 = *((_QWORD *)a2 + 49);
      if (v4 >= v2)
        goto LABEL_135;
    }
  }
  v10 = 88;
  v18 = 1;
  while (1)
  {
    v20 = v19 - 1;
    v21 = (unsigned int *)(v113 + 8 * v20);
    v3 = *v21;
    LOBYTE(v21) = *((_BYTE *)v21 + 4);
    v111 = v20;
    ++v112;
    if ((v21 & 1) != 0)
      break;
    v17 = *((_QWORD *)v7 + 14);
    if (v17 <= v3)
      goto LABEL_213;
    v22 = *((_QWORD *)v7 + 16) + 88 * v3;
    v23 = *(_QWORD *)(v22 + 64);
    if (v23)
    {
      v3 = *(_QWORD *)(v22 + 80);
      v24 = 12 * v23;
      do
      {
        v17 = *(unsigned int *)v3;
        v4 = v118;
        if (v118 <= v17)
          goto LABEL_192;
        if (!*(_BYTE *)(v119 + v17))
        {
          *(_BYTE *)(v119 + v17) = 1;
          LODWORD(v129) = v17;
          BYTE4(v129) = 1;
          v13 = re::DynamicArray<re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::TraversalNode>::add((_anonymous_namespace_ *)v110, &v129);
        }
        v3 += 12;
        v24 -= 12;
      }
      while (v24);
    }
LABEL_45:
    v19 = v111;
    if (!v111)
      goto LABEL_46;
  }
  v17 = *((_QWORD *)v7 + 19);
  if (v17 <= v3)
    goto LABEL_214;
  v25 = *((_QWORD *)v7 + 21) + 88 * v3;
  v26 = *(_QWORD *)(v25 + 64);
  if (!v26)
    goto LABEL_45;
  v3 = *(_QWORD *)(v25 + 80);
  v4 = v3 + 12 * v26;
  while (1)
  {
    v5 = *(unsigned int *)v3;
    v17 = v115;
    if (v115 <= v5)
      goto LABEL_193;
    if (!*(_BYTE *)(v116 + v5))
    {
      *(_BYTE *)(v116 + v5) = 1;
      LODWORD(v129) = v5;
      BYTE4(v129) = 0;
      v13 = re::DynamicArray<re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::TraversalNode>::add((_anonymous_namespace_ *)v110, &v129);
    }
    v17 = *((_QWORD *)v7 + 14);
    if (v17 <= v5)
    {
LABEL_194:
      *(_QWORD *)buf = 0;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      v55 = MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v121 = 136315906;
      *(_QWORD *)&v121[4] = "operator[]";
      *(_WORD *)&v121[12] = 1024;
      *(_DWORD *)&v121[14] = 789;
      *(_WORD *)&v121[18] = 2048;
      *(_QWORD *)&v121[20] = v5;
      *(_WORD *)&v121[28] = 2048;
      *(_QWORD *)&v121[30] = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_195:
      v109[0] = 0;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      v7 = (re::RenderGraphOptimizerProcessor *)MEMORY[0x24BDACB70];
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "operator[]";
      v123 = 1024;
      v124 = 468;
      v125 = 2048;
      v126 = v2;
      v127 = 2048;
      v128 = v55;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_196:
      v109[0] = 0;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "operator[]";
      v123 = 1024;
      v124 = 468;
      v125 = 2048;
      v126 = v2;
      v127 = 2048;
      v128 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_197:
      *(_QWORD *)buf = 0;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v121 = 136315906;
      *(_QWORD *)&v121[4] = "operator[]";
      *(_WORD *)&v121[12] = 1024;
      *(_DWORD *)&v121[14] = 468;
      *(_WORD *)&v121[18] = 2048;
      *(_QWORD *)&v121[20] = v5;
      *(_WORD *)&v121[28] = 2048;
      *(_QWORD *)&v121[30] = v2;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_198:
      v109[0] = 0;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "operator[]";
      v123 = 1024;
      v124 = 789;
      v125 = 2048;
      v126 = v3;
      v127 = 2048;
      v128 = v17;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_199:
      *(_QWORD *)buf = 0;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v121 = 136315906;
      *(_QWORD *)&v121[4] = "operator[]";
      *(_WORD *)&v121[12] = 1024;
      *(_DWORD *)&v121[14] = 468;
      *(_WORD *)&v121[18] = 2048;
      *(_QWORD *)&v121[20] = v10;
      *(_WORD *)&v121[28] = 2048;
      *(_QWORD *)&v121[30] = v18;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_200:
      v109[0] = 0;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "operator[]";
      v123 = 1024;
      v124 = 789;
      v125 = 2048;
      v126 = v2;
      v127 = 2048;
      v128 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_201:
      v120 = 0;
      v132 = 0u;
      v133 = 0u;
      v130 = 0u;
      v131 = 0u;
      v129 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "operator[]";
      v123 = 1024;
      v124 = 789;
      v125 = 2048;
      v126 = v2;
      v127 = 2048;
      v128 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_202;
    }
    v27 = *((_QWORD *)v7 + 16) + 88 * v5;
    v28 = *(_QWORD *)(v27 + 24);
    if (v28)
      break;
LABEL_44:
    v3 += 12;
    if (v3 == v4)
      goto LABEL_45;
  }
  v5 = *(_QWORD *)(v27 + 40) + 8;
  v6 = 12 * v28;
  while (2)
  {
    v29 = *(_DWORD *)v5;
    switch(*(_DWORD *)(v3 + 8))
    {
      case 1:
      case 5:
        if ((v29 - 2) >= 3 && (v29 != 1 || *(_DWORD *)(v3 + 4) != *(_DWORD *)(v5 - 4)))
          goto LABEL_43;
        goto LABEL_40;
      case 6:
        if (v29 == 2)
          goto LABEL_40;
        goto LABEL_43;
      case 7:
        if (v29 != 3)
          goto LABEL_43;
        goto LABEL_40;
      case 8:
      case 0xA:
        if ((v29 - 2) >= 3)
          goto LABEL_43;
LABEL_40:
        v31 = *(unsigned int *)(v5 - 8);
        v32 = v118;
        if (v118 > v31)
        {
          if (!*(_BYTE *)(v119 + v31))
          {
            *(_BYTE *)(v119 + v31) = 1;
            LODWORD(v129) = v31;
            BYTE4(v129) = 1;
            v13 = re::DynamicArray<re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::TraversalNode>::add((_anonymous_namespace_ *)v110, &v129);
          }
LABEL_43:
          v5 += 12;
          v6 -= 12;
          if (!v6)
            goto LABEL_44;
          continue;
        }
        *(_QWORD *)buf = 0;
        v132 = 0u;
        v133 = 0u;
        v130 = 0u;
        v131 = 0u;
        v129 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v121 = 136315906;
        *(_QWORD *)&v121[4] = "operator[]";
        *(_WORD *)&v121[12] = 1024;
        *(_DWORD *)&v121[14] = 468;
        *(_WORD *)&v121[18] = 2048;
        *(_QWORD *)&v121[20] = v31;
        *(_WORD *)&v121[28] = 2048;
        *(_QWORD *)&v121[30] = v32;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_141:
        v18 = 0;
LABEL_142:
        if ((_DWORD)v10 != (_DWORD)v18)
        {
          v4 = v18;
          v3 = *(_QWORD *)&v121[16];
          v17 = 24;
          v2 = 40;
          do
          {
            v87 = v3 + 24 * v4;
            v5 = *(unsigned int *)(v87 + 16);
            v7 = (re::RenderGraphOptimizerProcessor *)*((_QWORD *)a2 + 59);
            if ((unint64_t)v7 <= v5)
              goto LABEL_208;
            v88 = (_DWORD *)(v87 + 12);
            re::DynamicArray<int>::add((_QWORD *)(*((_QWORD *)a2 + 61) + 40 * v5), (_DWORD *)(v87 + 12));
            v3 = *(unsigned int *)(v3 + 24 * v4 + 20);
            v4 = *((_QWORD *)a2 + 64);
            if (v4 <= v3)
              goto LABEL_209;
            re::DynamicArray<int>::add((_QWORD *)(*((_QWORD *)a2 + 66) + 40 * v3), v88);
            v3 = *(_QWORD *)&v121[16];
            if (*(_DWORD *)&v121[32] <= (v18 + 1))
              v89 = (v18 + 1);
            else
              v89 = *(unsigned int *)&v121[32];
            while (1)
            {
              v4 = (v18 + 1);
              if ((_DWORD)v89 - 1 == (_DWORD)v18)
                break;
              LODWORD(v18) = v18 + 1;
              v90 = v4;
              if ((*(_DWORD *)(*(_QWORD *)&v121[16] + 24 * v4 + 8) & 0x80000000) != 0)
                goto LABEL_153;
            }
            v90 = v89;
LABEL_153:
            v18 = v90;
          }
          while ((_DWORD)v10 != (_DWORD)v90);
        }
        re::RenderGraphProcessor::updateTextureLifetimes((uint64_t *)a2, v84);
        v91 = *((_QWORD *)a2 + 44);
        if (v91)
        {
          v7 = (re::RenderGraphOptimizerProcessor *)*((_QWORD *)a2 + 46);
          v10 = (unint64_t)v7 + 192 * v91;
          v92 = xmmword_2260E5D70;
          v18 = 2;
          while (1)
          {
            v17 = *((_QWORD *)v7 + 7);
            if (!v17)
              goto LABEL_176;
            v93 = 0;
            v94 = 0;
            v95 = 0;
            v2 = v118;
            v96 = v119;
            do
            {
              v97 = *((_QWORD *)v7 + 9);
              v98 = (__int128 *)(v97 + v93);
              v3 = *(unsigned int *)(v97 + v93 + 52);
              if (v2 <= v3)
                goto LABEL_190;
              if (*(_BYTE *)(v96 + v3))
              {
                if ((uint64_t)v94 > v95)
                {
                  v3 = v95;
                  if (v17 <= v95)
                    goto LABEL_198;
                  v99 = v97 + ((uint64_t)v95 << 6);
                  v100 = *v98;
                  v101 = v98[1];
                  v102 = v98[2];
                  *(_QWORD *)(v99 + 48) = *((_QWORD *)v98 + 6);
                  *(_OWORD *)(v99 + 16) = v101;
                  *(_OWORD *)(v99 + 32) = v102;
                  *(_OWORD *)v99 = v100;
                  v17 = *((_QWORD *)v7 + 7);
                }
                ++v95;
              }
              ++v94;
              v93 += 64;
            }
            while (v17 > v94);
            if (v17 <= v95)
              goto LABEL_176;
            v103 = v95;
            if (v17 < v95)
              break;
            if (v17 > v95)
              goto LABEL_175;
LABEL_176:
            v7 = (re::RenderGraphOptimizerProcessor *)((char *)v7 + 192);
            if (v7 == (re::RenderGraphOptimizerProcessor *)v10)
              goto LABEL_177;
          }
          if (*((_QWORD *)v7 + 6) < (unint64_t)v95)
          {
            re::DynamicArray<re::RigTransform>::setCapacity((_QWORD *)v7 + 5, v95);
            v92 = xmmword_2260E5D70;
            v17 = *((_QWORD *)v7 + 7);
          }
          if (v17 < v103)
          {
            v104 = *((_QWORD *)v7 + 9) + (v17 << 6);
            v105 = (v103 << 6) - (v17 << 6);
            if (v105 >= 1)
            {
              v106 = ((unint64_t)v105 >> 6) + 1;
              do
              {
                *(_QWORD *)v104 = 0;
                *(_OWORD *)(v104 + 16) = v92;
                *(_WORD *)(v104 + 32) = 0;
                *(_QWORD *)(v104 + 36) = 0;
                *(_DWORD *)(v104 + 44) = 2;
                --v106;
                *(_BYTE *)(v104 + 48) = 0;
                *(_DWORD *)(v104 + 52) = 0;
                v104 += 64;
              }
              while (v106 > 1);
            }
          }
LABEL_175:
          *((_QWORD *)v7 + 7) = v103;
          ++*((_DWORD *)v7 + 16);
          goto LABEL_176;
        }
LABEL_177:
        re::HashTable<unsigned int,re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::Lifespan,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable((uint64_t *)v121);
        if (v110[0] && v113)
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v110[0] + 40))(v110[0], v113);
        if (v114 && v115)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v114 + 40))(v114, v116);
        result = v117;
        if (v117)
        {
          if (v118)
            return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v117 + 40))(v117, v119);
        }
        return result;
      default:
        goto LABEL_43;
    }
  }
}

_anonymous_namespace_ *re::DynamicArray<re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::TraversalNode>::add(_anonymous_namespace_ *result, _QWORD *a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)result + 2);
  v6 = v5 + 1;
  if (v5 >= v4 && v4 < v6)
  {
    if (*(_QWORD *)result)
    {
      v8 = 2 * v4;
      v9 = v4 == 0;
      v10 = 8;
      if (!v9)
        v10 = v8;
      if (v10 <= v6)
        v11 = v6;
      else
        v11 = v10;
      result = (_anonymous_namespace_ *)re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(result, v11);
    }
    else
    {
      result = (_anonymous_namespace_ *)re::DynamicArray<re::MeshResourceDefinition::Level>::setCapacity(v3, v6);
      ++*((_DWORD *)v3 + 6);
    }
  }
  *(_QWORD *)(*((_QWORD *)v3 + 4) + 8 * (*((_QWORD *)v3 + 2))++) = *a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

BOOL re::HashTable<unsigned int,re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::Lifespan,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::containsKey(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0xBF58476D1CE4E5B9 * (a2 ^ ((unint64_t)a2 >> 30));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) ^ ((0x94D049BB133111EBLL * (v2 ^ (v2 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_DWORD *)(v5 + 24 * v3 + 12) == a2)
    return 1;
  do
  {
    LODWORD(v3) = *(_DWORD *)(v5 + 24 * v3 + 8) & 0x7FFFFFFF;
    result = (_DWORD)v3 != 0x7FFFFFFF;
  }
  while ((_DWORD)v3 != 0x7FFFFFFF && *(_DWORD *)(v5 + 24 * v3 + 12) != a2);
  return result;
}

void re::`anonymous namespace'::transientResourcesWithInvalidLifespan(re::_anonymous_namespace_ *this)
{
  unsigned __int8 v1;
  unsigned __int8 v2;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_383);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_383))
  {
    byte_254119FC0 = 0;
    qword_254119FB0 = (uint64_t)&off_24ED42648;
    unk_254119FB8 = "RenderGraphOptimizerProcessor allocator";
    __cxa_guard_release(&_MergedGlobals_383);
  }
  v2 = atomic_load((unsigned __int8 *)&qword_254119FA8);
  if ((v2 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254119FA8))
    {
      dword_254119FE8 = 0;
      xmmword_254119FD8 = 0u;
      xmmword_254119FC8 = 0u;
      unk_254119FEC = 0x7FFFFFFFLL;
      re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)&xmmword_254119FC8, (uint64_t)&qword_254119FB0, 3);
      __cxa_guard_release(&qword_254119FA8);
    }
  }
}

uint64_t *re::HashTable<unsigned int,re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::Lifespan,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 24 * v3;
      do
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 24;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

void re::RenderGraphOptimizerProcessor::~RenderGraphOptimizerProcessor(re::RenderGraphOptimizerProcessor *this)
{
  re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 136);
  re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96);
}

{
  re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 136);
  re::DynamicArray<re::RigComponentConstraint>::deinit((uint64_t)this + 96);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::DynamicArray<re::RenderGraphOptimizerProcessor::Vertex>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::RenderGraphOptimizerProcessor::Vertex>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x58uLL))
        {
          v2 = 88 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 88 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_24;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 88, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_24:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 88 * v9;
        do
        {
          v12 = &v7[v10 / 8];
          v13 = v8 + v10;
          *(_BYTE *)v12 = *(_BYTE *)(v8 + v10);
          v12[5] = 0;
          *((_DWORD *)v12 + 8) = 0;
          v12[2] = 0;
          v12[3] = 0;
          v12[1] = 0;
          v14 = (_QWORD *)(v8 + v10 + 8);
          v15 = *(_QWORD *)(v8 + v10 + 16);
          v12[1] = *v14;
          *v14 = 0;
          v12[2] = v15;
          *(_QWORD *)(v13 + 16) = 0;
          v16 = v7[v10 / 8 + 3];
          v12[3] = *(_QWORD *)(v8 + v10 + 24);
          *(_QWORD *)(v13 + 24) = v16;
          v17 = v7[v10 / 8 + 5];
          v12[5] = *(_QWORD *)(v8 + v10 + 40);
          *(_QWORD *)(v13 + 40) = v17;
          *(_DWORD *)(v13 + 32) = *(_DWORD *)(v8 + v10 + 32) + 1;
          *((_DWORD *)v12 + 8) = LODWORD(v7[v10 / 8 + 4]) + 1;
          v12[10] = 0;
          v12[7] = 0;
          v12[8] = 0;
          v12[6] = 0;
          *((_DWORD *)v12 + 18) = 0;
          v18 = (_QWORD *)(v8 + v10 + 48);
          v19 = *(_QWORD *)(v8 + v10 + 56);
          v12[6] = *v18;
          *v18 = 0;
          v12[7] = v19;
          *(_QWORD *)(v13 + 56) = 0;
          v20 = v7[v10 / 8 + 8];
          v12[8] = *(_QWORD *)(v8 + v10 + 64);
          *(_QWORD *)(v13 + 64) = v20;
          v21 = v7[v10 / 8 + 10];
          v12[10] = *(_QWORD *)(v8 + v10 + 80);
          *(_QWORD *)(v13 + 80) = v21;
          *(_DWORD *)(v13 + 72) = *(_DWORD *)(v8 + v10 + 72) + 1;
          *((_DWORD *)v12 + 18) = LODWORD(v7[v10 / 8 + 9]) + 1;
          if (*v18)
          {
            if (v21)
              (*(void (**)(_QWORD))(*(_QWORD *)*v18 + 40))(*v18);
            *(_QWORD *)(v13 + 80) = 0;
            *(_QWORD *)(v8 + v10 + 56) = 0;
            *(_QWORD *)(v8 + v10 + 64) = 0;
            *v18 = 0;
            ++*(_DWORD *)(v13 + 72);
          }
          if (*v14)
          {
            if (*(_QWORD *)(v13 + 40))
              (*(void (**)(_QWORD))(*(_QWORD *)*v14 + 40))(*v14);
            *(_QWORD *)(v13 + 40) = 0;
            *(_QWORD *)(v8 + v10 + 16) = 0;
            *(_QWORD *)(v8 + v10 + 24) = 0;
            *v14 = 0;
            ++*(_DWORD *)(v13 + 32);
          }
          v10 += 88;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_24;
    }
  }
  return result;
}

void re::HashTable<unsigned int,re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::Lifespan,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _DWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  _BYTE v25[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v25, 0, 36);
          *(_QWORD *)&v25[36] = 0x7FFFFFFFLL;
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderBinary<re::SeekableInputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::init((uint64_t)v25, v13, v12);
          v15 = *(_OWORD *)v25;
          *(_OWORD *)v25 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v25[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v25[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v25[24];
          *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v25[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned int,re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::Lifespan,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21 - 4, v21);
              v21 += 24;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned int,re::RenderGraphOptimizerProcessor::process(re::RenderGraphCompiled &)::Lifespan,re::Hash<unsigned int>,re::EqualTo<unsigned int>,true,false>::~HashTable((uint64_t *)v25);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 24 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 24 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 24 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9) = a3;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9 + 12) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9 + 16) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

re::BlendShapeModelBuilder *re::BlendShapeModelBuilder::BlendShapeModelBuilder(re::BlendShapeModelBuilder *this, re::Allocator *a2, id *a3, unint64_t a4, unint64_t a5, DeformationModelData *a6)
{
  id v11;
  uint64_t v12;
  StringID v14;

  v11 = *a3;
  *(_QWORD *)this = v11;
  *((_QWORD *)this + 1) = a6;
  if (v11)
  {
  }
  else
  {
    v12 = re::DeformationModelData::create<re::BlendShapeDeformer,re::BlendShapeModelPayload>((uint64_t *)a6, (uint64_t)a2);
    re::FixedArray<re::BlendShapeModelPayload::BlendShapeBufferPayload>::init<>(v12 + 8, (uint64_t)a2, a5);
  }
  re::StringID::invalid((re::StringID *)&v14);
  re::FixedArray<re::StringID>::init<re::StringID>((re::StringID *)(v12 + 56), (uint64_t)a2, a5, &v14);
  re::StringID::destroyString((re::StringID *)&v14);
  return this;
}

uint64_t re::DeformationModelData::create<re::BlendShapeDeformer,re::BlendShapeModelPayload>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 80, 8);
  *(_BYTE *)v4 = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_QWORD *)(v4 + 72) = 0;
  v8[0] = &off_24ED769A8;
  v8[1] = a2;
  v9 = v8;
  v10 = 0;
  v11[3] = v11;
  v11[0] = &off_24ED769A8;
  v11[1] = a2;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100](a1, v4);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100](a1 + 1, (uint64_t)v11);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v10);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return *a1;
}

uint64_t re::FixedArray<re::BlendShapeModelPayload::BlendShapeBufferPayload>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
    return result;
  if (a3 >= 0x1642C8590B21643)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 184, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 184 * a3, 8);
  *(_QWORD *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_QWORD *)(result + 7) = 0;
      *(_QWORD *)result = 0;
      *(_OWORD *)(result + 16) = 0uLL;
      *(_OWORD *)(result + 32) = 0uLL;
      *(_OWORD *)(result + 48) = 0uLL;
      *(_OWORD *)(result + 64) = 0uLL;
      *(_OWORD *)(result + 80) = 0uLL;
      *(_OWORD *)(result + 96) = 0uLL;
      *(_OWORD *)(result + 112) = 0uLL;
      *(_OWORD *)(result + 128) = 0uLL;
      *(_OWORD *)(result + 144) = 0uLL;
      *(_OWORD *)(result + 160) = 0uLL;
      *(_QWORD *)(result + 176) = 0;
      result += 184;
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)(result + 7) = 0;
  *(_QWORD *)result = 0;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_QWORD *)(result + 176) = 0;
  return result;
}

uint64_t re::DeformationModelData::create<re::BlendShapeDeformer,re::`anonymous namespace'::BlendShapeModel>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x24BDAC8D0];
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 80, 8);
  *(_DWORD *)v4 = 0;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_QWORD *)(v4 + 72) = 0;
  v8[0] = &off_24ED76A28;
  v8[1] = a2;
  v9 = v8;
  v10 = 0;
  v11[3] = v11;
  v11[0] = &off_24ED76A28;
  v11[1] = a2;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::reset[abi:nn180100](a1, v4);
  std::__function::__value_func<void ()(re::RigHierarchy *)>::operator=[abi:nn180100](a1 + 1, (uint64_t)v11);
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](&v10);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return *a1;
}

uint64_t re::FixedArray<re::`anonymous namespace'::BlendShapeBuffer>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
    return result;
  if (a3 >= 0x186186186186187)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 168, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 168 * a3, 8);
  *(_QWORD *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_DWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_DWORD *)(result + 47) = 0;
      *(_OWORD *)(result + 56) = 0uLL;
      *(_OWORD *)(result + 72) = 0uLL;
      *(_OWORD *)(result + 88) = 0uLL;
      *(_OWORD *)(result + 104) = 0uLL;
      *(_OWORD *)(result + 120) = 0uLL;
      *(_OWORD *)(result + 136) = 0uLL;
      *(_OWORD *)(result + 152) = 0uLL;
      result += 168;
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 47) = 0;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_OWORD *)(result + 104) = 0u;
  *(_OWORD *)(result + 120) = 0u;
  *(_OWORD *)(result + 136) = 0u;
  *(_OWORD *)(result + 152) = 0u;
  return result;
}

_QWORD *re::BlendShapeModelBuilder::BlendShapeModelBuilder(_QWORD *a1, uint64_t a2, id *a3, unint64_t a4, int a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v13;
  StringID v15;

  *a1 = *a3;
  a1[1] = a7;
  re::FixedArray<unsigned int>::operator=((uint64_t *)(v13 + 32), a6);
  *(_DWORD *)v13 = a5 != 0;
  re::StringID::invalid((re::StringID *)&v15);
  re::FixedArray<re::StringID>::init<re::StringID>((re::StringID *)(v13 + 56), a2, a4, &v15);
  re::StringID::destroyString((re::StringID *)&v15);
  return a1;
}

_QWORD *re::BlendShapeModelBuilder::addBlendShapeGroup(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, char a5)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  StringID *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unsigned __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _DWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  id v61;
  unint64_t v62;
  unint64_t v63;
  void *v64;
  StringID *v65;
  _BYTE *v66;
  unint64_t v67;
  _anonymous_namespace_ *v68;
  uint64_t v69;
  _QWORD *v70;
  _BOOL4 v71;
  unint64_t *v72;
  uint64_t v73;
  _QWORD *v74;
  _BOOL4 v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _anonymous_namespace_ *v90;
  uint64_t v91;
  _anonymous_namespace_ *v92;
  unint64_t v93;
  unsigned __int128 *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  float v104;
  int v105;
  StringID *v106;
  uint64_t v107;
  unint64_t **v108;
  float v109;
  uint64_t v110;
  uint64_t v111;
  float v112;
  uint64_t v113;
  float v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  size_t v125;
  size_t v126;
  _WORD *v127;
  unint64_t v128;
  _WORD *v129;
  unint64_t v130;
  uint64_t v131;
  int v132;
  unint64_t v133;
  _DWORD *v134;
  uint64_t v135;
  _DWORD *v136;
  uint64_t v137;
  uint64_t v138;
  StringID *v139;
  unsigned __int128 *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  id v145;
  unint64_t v146;
  unint64_t v147;
  void *v148;
  unint64_t v149;
  unint64_t v150;
  _BYTE *v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  _BYTE *v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  _QWORD *result;
  _DWORD *v160;
  _anonymous_namespace_ *v161;
  uint64_t v162;
  _anonymous_namespace_ *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t *v170;
  float v171;
  uint64_t v172;
  unint64_t **v173;
  float v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  float v178;
  uint64_t v179;
  _QWORD *v180;
  float v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  _DWORD *v193;
  _DWORD *v194;
  unint64_t v195;
  uint64_t v196;
  int v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _DWORD *v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unsigned __int128 *v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  id v212;
  unint64_t v213;
  void *v214;
  unint64_t v215;
  _BYTE *v216;
  unint64_t v217;
  unint64_t v218;
  _BYTE *v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  _DWORD *v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  unint64_t v234;
  unsigned int v235;
  unsigned int v236;
  unint64_t v237;
  unint64_t v238;
  StringID *v239;
  unint64_t v240;
  int v241;
  unsigned int v242;
  uint64_t *v243;
  void *v244;
  BOOL v245;
  int v246;
  int v247;
  int v248;
  int v249;
  uint64_t *v250;
  _BOOL4 v251;
  _BOOL4 v252;
  unint64_t v253;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  uint64_t v263;
  unint64_t v264;
  _anonymous_namespace_ *v265;
  _anonymous_namespace_ *v266;
  uint64_t v267;
  unsigned __int128 *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  int8x16_t v273;
  __int128 v274;
  uint64_t v275;
  uint64_t v276;
  __int128 v277;
  __int128 v278;
  uint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unsigned __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  int v288;
  const char *v289;
  __int16 v290;
  int v291;
  __int16 v292;
  unint64_t v293;
  __int16 v294;
  unint64_t v295;
  _DWORD v296[12];
  __int128 v297;
  __int128 v298;
  uint64_t v299;

  v6 = a3;
  v7 = a2;
  v299 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a2 + 24);
  v9 = (StringID *)(v8 + 3);
  v10 = (3 * *(_DWORD *)(a2 + 44));
  v11 = (v10 + 3) & 0x1FFFFFFFCLL;
  v12 = (unint64_t)(v8 + 3) >> 2;
  v13 = **(_QWORD ***)(a1 + 8);
  v244 = *(void **)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_6;
  v14 = (unsigned __int128 *)v13[5];
  if ((unint64_t)v14 <= a3)
    goto LABEL_342;
  *(_DWORD *)(v13[6] + 4 * a3) = a4;
  v14 = (unsigned __int128 *)v13[2];
  if ((unint64_t)v14 <= a4)
  {
LABEL_343:
    v275 = 0;
    v285 = 0u;
    v286 = 0u;
    v283 = 0u;
    v284 = 0u;
    v282 = 0u;
    v6 = a4;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v296[0] = 136315906;
    *(_QWORD *)&v296[1] = "operator[]";
    LOWORD(v296[3]) = 1024;
    *(_DWORD *)((char *)&v296[3] + 2) = 468;
    HIWORD(v296[4]) = 2048;
    *(_QWORD *)&v296[5] = v6;
    LOWORD(v296[7]) = 2048;
    *(_QWORD *)((char *)&v296[7] + 2) = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_344:
    re::internal::assertLog((re::internal *)4, v19, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "first", 447);
    _os_crash();
    __break(1u);
    goto LABEL_345;
  }
  v15 = v13[3] + 168 * a4;
  *(_QWORD *)v15 = v8;
  *(_DWORD *)(v15 + 8) = v12;
  *(_DWORD *)(v15 + 12) = v10;
  *(_DWORD *)(v15 + 16) = v11;
  v16 = **(_QWORD **)(a1 + 8);
  v14 = *(unsigned __int128 **)(v16 + 64);
  if ((unint64_t)v14 <= a4)
  {
    v275 = 0;
    v9 = (StringID *)&v282;
    v285 = 0u;
    v286 = 0u;
    v283 = 0u;
    v284 = 0u;
    v282 = 0u;
    LODWORD(v10) = MEMORY[0x24BDACB70];
    v6 = a4;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v296[0] = 136315906;
    *(_QWORD *)&v296[1] = "operator[]";
    LOWORD(v296[3]) = 1024;
    *(_DWORD *)((char *)&v296[3] + 2) = 468;
    HIWORD(v296[4]) = 2048;
    *(_QWORD *)&v296[5] = v6;
    LOWORD(v296[7]) = 2048;
    *(_QWORD *)((char *)&v296[7] + 2) = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_6:
    v14 = (unsigned __int128 *)v13[5];
    if ((unint64_t)v14 <= v6)
    {
LABEL_345:
      v275 = 0;
      v285 = 0u;
      v286 = 0u;
      v283 = 0u;
      v284 = 0u;
      v282 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v296[0] = 136315906;
      *(_QWORD *)&v296[1] = "operator[]";
      LOWORD(v296[3]) = 1024;
      *(_DWORD *)((char *)&v296[3] + 2) = 468;
      HIWORD(v296[4]) = 2048;
      *(_QWORD *)&v296[5] = v6;
      LOWORD(v296[7]) = 2048;
      *(_QWORD *)((char *)&v296[7] + 2) = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_346;
    }
    *(_DWORD *)(v13[6] + 4 * v6) = a4;
    v14 = (unsigned __int128 *)v13[2];
    if ((unint64_t)v14 <= a4)
    {
LABEL_346:
      v275 = 0;
      v285 = 0u;
      v286 = 0u;
      v283 = 0u;
      v284 = 0u;
      v282 = 0u;
      v224 = a4;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v296[0] = 136315906;
      *(_QWORD *)&v296[1] = "operator[]";
      LOWORD(v296[3]) = 1024;
      *(_DWORD *)((char *)&v296[3] + 2) = 468;
      HIWORD(v296[4]) = 2048;
      *(_QWORD *)&v296[5] = v224;
      LOWORD(v296[7]) = 2048;
      *(_QWORD *)((char *)&v296[7] + 2) = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_347;
    }
    v17 = (_DWORD *)(v13[3] + 184 * a4);
    *v17 = v12;
    v17[1] = v10;
    v17[2] = v11;
    v16 = **(_QWORD **)(a1 + 8);
    v14 = *(unsigned __int128 **)(v16 + 64);
    if ((unint64_t)v14 <= a4)
    {
LABEL_347:
      v275 = 0;
      v285 = 0u;
      v286 = 0u;
      v283 = 0u;
      v284 = 0u;
      v282 = 0u;
      v225 = a4;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v296[0] = 136315906;
      *(_QWORD *)&v296[1] = "operator[]";
      LOWORD(v296[3]) = 1024;
      *(_DWORD *)((char *)&v296[3] + 2) = 468;
      HIWORD(v296[4]) = 2048;
      *(_QWORD *)&v296[5] = v225;
      LOWORD(v296[7]) = 2048;
      *(_QWORD *)((char *)&v296[7] + 2) = v14;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_348;
    }
  }
  v253 = a4;
  v18 = re::StringID::operator=((unint64_t *)(*(_QWORD *)(v16 + 72) + 16 * a4), (uint64_t *)v7);
  v20 = *(unsigned __int8 *)(v7 + 40);
  v261 = v7;
  if ((_DWORD)v20 != 2)
  {
    if ((_DWORD)v20 != 1)
      goto LABEL_365;
    v21 = (unint64_t)v9 & 0xFFFFFFFFFFFFFFFCLL;
    if (*(_QWORD *)(v7 + 24))
    {
      v22 = (_QWORD *)(*(_QWORD *)(v7 + 32) + 72);
      v23 = 1;
      v24 = *(_QWORD *)(v7 + 24);
      while (!*(v22 - 6))
      {
        v22 += 17;
        if (!--v24)
          goto LABEL_65;
      }
      v23 = 1;
      if (*v22)
        v23 = 2;
      if (v22[3])
        ++v23;
      if (v22[6])
        ++v23;
    }
    else
    {
      v23 = 1;
    }
LABEL_65:
    v67 = 4 * v11 * v23;
    if (v67 > v21)
      v21 = v67;
    v243 = *(uint64_t **)(a1 + 8);
    v258 = *(_QWORD *)(v7 + 24);
    if ((a5 & 1) == 0 && v21 < 0xFFFF)
    {
      re::StringID::invalid((re::StringID *)&v282);
      v279 = 0;
      v280 = 0;
      v281 = 0;
      re::StringID::destroyString((re::StringID *)&v282);
      v69 = *(_QWORD *)(v7 + 24);
      if (!v69)
      {
        v248 = 0;
        v251 = 0;
        v246 = 0;
        v80 = 0;
        LODWORD(v47) = *(_DWORD *)(v7 + 44);
        v81 = (3 * v47);
        LODWORD(v259) = 3 * v47;
        v76 = v81;
        goto LABEL_107;
      }
      v70 = (_QWORD *)(*(_QWORD *)(v7 + 32) + 72);
      while (!*(v70 - 6))
      {
        v70 += 17;
        if (!--v69)
        {
          v71 = 0;
          v251 = 0;
          v248 = 0;
          goto LABEL_86;
        }
      }
      goto LABEL_85;
    }
    re::StringID::invalid((re::StringID *)&v282);
    v279 = 0;
    v280 = 0;
    v281 = 0;
    re::StringID::destroyString((re::StringID *)&v282);
    v73 = *(_QWORD *)(v7 + 24);
    if (!v73)
    {
      v249 = 0;
      v252 = 0;
      v247 = 0;
      v82 = 0;
      v83 = *(_DWORD *)(v7 + 44);
      v84 = (3 * v83);
      v6 = v84;
      v76 = v84;
      goto LABEL_208;
    }
    v74 = (_QWORD *)(*(_QWORD *)(v7 + 32) + 72);
    do
    {
      if (*(v74 - 6))
      {
        v249 = *v74 != 0;
        v252 = v74[3] != 0;
        v75 = v74[6] != 0;
        goto LABEL_93;
      }
      v74 += 17;
      --v73;
    }
    while (v73);
    v75 = 0;
    v252 = 0;
    v249 = 0;
LABEL_93:
    v87 = 0;
    v88 = 0;
    v38 = 0;
    do
    {
      v6 = v280;
      if (v280 <= v38)
        goto LABEL_335;
      v72 = re::StringID::operator=((unint64_t *)(v281 + v87), (uint64_t *)(*(_QWORD *)(v7 + 32) + v88));
      ++v38;
      v88 += 136;
      v87 += 16;
    }
    while (v38 < *(_QWORD *)(v7 + 24));
    v83 = *(_DWORD *)(v7 + 44);
    v76 = (3 * v83);
    v6 = v76;
    v84 = v76 << v249;
    if (v252)
    {
      v84 += v76;
      if (!v75)
      {
        v247 = 0;
        v82 = 0;
        v252 = 1;
        goto LABEL_208;
      }
    }
    else if (!v75)
    {
      v252 = 0;
      v247 = 0;
      v82 = 0;
LABEL_208:
      v236 = v82;
      v238 = v84;
      v102 = v82 + v84;
      v240 = v76;
      if (v102)
      {
        if (!v161)
          goto LABEL_352;
        v163 = v161;
        v164 = (char *)(v102 - 1);
        if (v102 != 1)
        {
          v163 = v161;
          do
          {
            *((_QWORD *)v163 + 4) = 0;
            *((_QWORD *)v163 + 1) = 0;
            *((_QWORD *)v163 + 2) = 0;
            *(_QWORD *)v163 = 0;
            *((_DWORD *)v163 + 6) = 0;
            v163 = (_anonymous_namespace_ *)((char *)v163 + 40);
            --v164;
          }
          while (v164);
        }
        *((_QWORD *)v163 + 4) = 0;
        *((_QWORD *)v163 + 1) = 0;
        *((_QWORD *)v163 + 2) = 0;
        *(_QWORD *)v163 = 0;
        *((_DWORD *)v163 + 6) = 0;
      }
      else
      {
        v161 = 0;
      }
      v264 = v102;
      v266 = v161;
      if (v258)
      {
        v7 = 0;
        v242 = 6 * v83;
        v257 = v6;
        do
        {
          v94 = *(unsigned __int128 **)(v261 + 24);
          if ((unint64_t)v94 <= v7)
            goto LABEL_341;
          v165 = *(_QWORD *)(v261 + 32);
          v166 = v165 + 136 * v7;
          v168 = *(_QWORD *)(v166 + 24);
          v167 = (unint64_t *)(v166 + 24);
          v38 = v168;
          if (v168)
          {
            v12 = 0;
            v260 = *(_QWORD *)(v261 + 32);
            v169 = v165 + 136 * v7;
            v170 = (unint64_t *)(v169 + 48);
            v103 = v169 + 56;
            v6 = v169 + 32;
            v99 = (unint64_t)v266;
            do
            {
              v34 = *v170;
              if (*v170 <= v12)
                goto LABEL_309;
              v171 = *(float *)(*(_QWORD *)v103 + 4 * v12);
              if (fabsf(v171) >= 0.00001)
              {
                v34 = *v167;
                if (*v167 <= v12)
                  goto LABEL_311;
                v34 = *(unsigned int *)(*(_QWORD *)v6 + 4 * v12);
                if (v102 <= v34)
                  goto LABEL_313;
                *(_QWORD *)&v282 = __PAIR64__(LODWORD(v171), v7);
              }
              ++v12;
            }
            while (v38 != v12);
            v12 = v257;
            if (v249)
            {
              v106 = 0;
              v172 = v260 + 136 * v7;
              v173 = (unint64_t **)(v172 + 72);
              v34 = v172 + 80;
              v12 = v257;
              do
              {
                v103 = (unint64_t)*v173;
                if (*v173 <= (unint64_t *)v106)
                  goto LABEL_315;
                v174 = *(float *)(*(_QWORD *)v34 + 4 * (_QWORD)v106);
                if (fabsf(v174) >= 0.00001)
                {
                  v103 = *v167;
                  if (*v167 <= (unint64_t)v106)
                    goto LABEL_321;
                  v103 = *(_DWORD *)(*(_QWORD *)v6 + 4 * (_QWORD)v106) + v257;
                  if (v102 <= v103)
                  {
LABEL_323:
                    v275 = 0;
                    v106 = (StringID *)&v282;
                    v285 = 0u;
                    v286 = 0u;
                    v283 = 0u;
                    v284 = 0u;
                    v282 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    v296[0] = 136315906;
                    *(_QWORD *)&v296[1] = "operator[]";
                    LOWORD(v296[3]) = 1024;
                    *(_DWORD *)((char *)&v296[3] + 2) = 468;
                    HIWORD(v296[4]) = 2048;
                    *(_QWORD *)&v296[5] = v103;
                    LOWORD(v296[7]) = 2048;
                    *(_QWORD *)((char *)&v296[7] + 2) = v102;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_324:
                    v275 = 0;
                    v285 = 0u;
                    v286 = 0u;
                    v283 = 0u;
                    v284 = 0u;
                    v282 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    v296[0] = 136315906;
                    *(_QWORD *)&v296[1] = "operator[]";
                    LOWORD(v296[3]) = 1024;
                    *(_DWORD *)((char *)&v296[3] + 2) = 476;
                    HIWORD(v296[4]) = 2048;
                    *(_QWORD *)&v296[5] = v106;
                    LOWORD(v296[7]) = 2048;
                    *(_QWORD *)((char *)&v296[7] + 2) = v7;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_325:
                    v275 = 0;
                    v285 = 0u;
                    v286 = 0u;
                    v283 = 0u;
                    v284 = 0u;
                    v282 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    v296[0] = 136315906;
                    *(_QWORD *)&v296[1] = "operator[]";
                    LOWORD(v296[3]) = 1024;
                    *(_DWORD *)((char *)&v296[3] + 2) = 476;
                    HIWORD(v296[4]) = 2048;
                    *(_QWORD *)&v296[5] = v106;
                    LOWORD(v296[7]) = 2048;
                    *(_QWORD *)((char *)&v296[7] + 2) = v102;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_326:
                    v275 = 0;
                    v285 = 0u;
                    v286 = 0u;
                    v283 = 0u;
                    v284 = 0u;
                    v282 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    v296[0] = 136315906;
                    *(_QWORD *)&v296[1] = "operator[]";
                    LOWORD(v296[3]) = 1024;
                    *(_DWORD *)((char *)&v296[3] + 2) = 468;
                    HIWORD(v296[4]) = 2048;
                    *(_QWORD *)&v296[5] = v7;
                    LOWORD(v296[7]) = 2048;
                    *(_QWORD *)((char *)&v296[7] + 2) = v264;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_327:
                    v275 = 0;
                    v106 = (StringID *)&v282;
                    v285 = 0u;
                    v286 = 0u;
                    v283 = 0u;
                    v284 = 0u;
                    v282 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    v296[0] = 136315906;
                    *(_QWORD *)&v296[1] = "operator[]";
                    LOWORD(v296[3]) = 1024;
                    *(_DWORD *)((char *)&v296[3] + 2) = 468;
                    HIWORD(v296[4]) = 2048;
                    *(_QWORD *)&v296[5] = v102;
                    LOWORD(v296[7]) = 2048;
                    *(_QWORD *)((char *)&v296[7] + 2) = v264;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_328:
                    v275 = 0;
                    v285 = 0u;
                    v286 = 0u;
                    v283 = 0u;
                    v284 = 0u;
                    v282 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    v296[0] = 136315906;
                    *(_QWORD *)&v296[1] = "operator[]";
                    LOWORD(v296[3]) = 1024;
                    *(_DWORD *)((char *)&v296[3] + 2) = 476;
                    HIWORD(v296[4]) = 2048;
                    *(_QWORD *)&v296[5] = v106;
                    LOWORD(v296[7]) = 2048;
                    *(_QWORD *)((char *)&v296[7] + 2) = v34;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_329:
                    v275 = 0;
                    v38 = (unint64_t)&v282;
                    v285 = 0u;
                    v286 = 0u;
                    v283 = 0u;
                    v284 = 0u;
                    v282 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    v296[0] = 136315906;
                    *(_QWORD *)&v296[1] = "operator[]";
                    LOWORD(v296[3]) = 1024;
                    *(_DWORD *)((char *)&v296[3] + 2) = 476;
                    HIWORD(v296[4]) = 2048;
                    *(_QWORD *)&v296[5] = v106;
                    LOWORD(v296[7]) = 2048;
                    *(_QWORD *)((char *)&v296[7] + 2) = v34;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_330:
                    v275 = 0;
                    v285 = 0u;
                    v286 = 0u;
                    v283 = 0u;
                    v284 = 0u;
                    v282 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    v296[0] = 136315906;
                    *(_QWORD *)&v296[1] = "operator[]";
                    LOWORD(v296[3]) = 1024;
                    *(_DWORD *)((char *)&v296[3] + 2) = 468;
                    HIWORD(v296[4]) = 2048;
                    *(_QWORD *)&v296[5] = v34;
                    LOWORD(v296[7]) = 2048;
                    *(_QWORD *)((char *)&v296[7] + 2) = v264;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_331:
                    v275 = 0;
                    v285 = 0u;
                    v286 = 0u;
                    v283 = 0u;
                    v284 = 0u;
                    v282 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    v296[0] = 136315906;
                    *(_QWORD *)&v296[1] = "operator[]";
                    LOWORD(v296[3]) = 1024;
                    *(_DWORD *)((char *)&v296[3] + 2) = 468;
                    HIWORD(v296[4]) = 2048;
                    *(_QWORD *)&v296[5] = v34;
                    LOWORD(v296[7]) = 2048;
                    *(_QWORD *)((char *)&v296[7] + 2) = v102;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_332:
                    v267 = 0;
                    v297 = 0u;
                    v298 = 0u;
                    memset(v296, 0, sizeof(v296));
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    v288 = 136315906;
                    v289 = "operator[]";
                    v290 = 1024;
                    v291 = 476;
                    v292 = 2048;
                    v293 = v34;
                    v294 = 2048;
                    v295 = v6;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                    goto LABEL_333;
                  }
                  *(_QWORD *)&v282 = __PAIR64__(LODWORD(v174), v7);
                }
                v106 = (StringID *)((char *)v106 + 1);
              }
              while ((StringID *)v38 != v106);
              v12 = v242;
            }
            v175 = v260;
            if (v252)
            {
              v106 = 0;
              v176 = v260 + 136 * v7;
              v103 = v176 + 96;
              v177 = (_QWORD *)(v176 + 104);
              if (v38 <= 1)
                v34 = 1;
              else
                v34 = v38;
              do
              {
                v102 = *(_QWORD *)v103;
                if (*(_QWORD *)v103 <= (unint64_t)v106)
                  goto LABEL_317;
                v178 = *(float *)(*v177 + 4 * (_QWORD)v106);
                if (fabsf(v178) >= 0.00001)
                {
                  v102 = *v167;
                  if (*v167 <= (unint64_t)v106)
                    goto LABEL_325;
                  v102 = (*(_DWORD *)(*(_QWORD *)v6 + 4 * (_QWORD)v106) + v12);
                  if (v264 <= v102)
                    goto LABEL_327;
                  *(_QWORD *)&v282 = __PAIR64__(LODWORD(v178), v7);
                }
                v106 = (StringID *)((char *)v106 + 1);
              }
              while ((StringID *)v34 != v106);
              v12 = v12 + v257;
              v102 = v264;
              v175 = v260;
            }
            if (v247)
            {
              v106 = 0;
              v179 = v175 + 136 * v7;
              v103 = v179 + 120;
              v180 = (_QWORD *)(v179 + 128);
              if (v38 <= 1)
                v38 = 1;
              do
              {
                v34 = *(_QWORD *)v103;
                if (*(_QWORD *)v103 <= (unint64_t)v106)
                  goto LABEL_319;
                v181 = *(float *)(*v180 + 4 * (_QWORD)v106);
                if (fabsf(v181) >= 0.00001)
                {
                  v34 = *v167;
                  if (*v167 <= (unint64_t)v106)
                    goto LABEL_329;
                  v34 = (*(_DWORD *)(*(_QWORD *)v6 + 4 * (_QWORD)v106) + v12);
                  if (v102 <= v34)
                    goto LABEL_331;
                  *(_QWORD *)&v282 = __PAIR64__(LODWORD(v181), v7);
                }
                v106 = (StringID *)((char *)v106 + 1);
              }
              while ((StringID *)v38 != v106);
            }
          }
          ++v7;
          v161 = v266;
        }
        while (v7 != v258);
      }
      if (v102)
      {
        v182 = 0;
        v183 = 0;
        v184 = (uint64_t *)((char *)v161 + 16);
        v185 = v102;
        v186 = v240;
        do
        {
          v188 = *v184;
          v184 += 5;
          v187 = v188;
          if (v188)
            ++v182;
          v183 += (v187 + 3) & 0xFFFFFFFFFFFFFFFCLL;
          --v185;
        }
        while (v185);
      }
      else
      {
        v183 = 0;
        v182 = 0;
        v186 = v240;
      }
      v12 = (v102 - v186) / 3;
      v267 = 0;
      v268 = 0;
      v269 = 0;
      v189 = 0;
      v190 = v102 - v186;
      if (v102 > v186)
      {
        v191 = 0;
        v189 = 0;
        v6 = (unint64_t)v268;
        v192 = v269;
        do
        {
          v34 = v191 / 3;
          if (v6 <= v191 / 3)
            goto LABEL_337;
          if (!*(_BYTE *)(v192 + v34))
            ++v189;
          *(_BYTE *)(v192 + v34) = 1;
          ++v191;
        }
        while (v190 != v191);
      }
      v275 = 12;
      v276 = 4 * v183;
      *(_QWORD *)&v277 = 4 * v182;
      *((_QWORD *)&v277 + 1) = 4 * v182 + 4;
      *(_QWORD *)&v278 = 4 * v183;
      *((_QWORD *)&v278 + 1) = 4 * v189;
      v271 = 16;
      v272 = 4 * v183;
      v273 = vandq_s8((int8x16_t)vaddq_s64(vdupq_n_s64(4 * v182), (int64x2_t)xmmword_226146280), (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFF0));
      *(_QWORD *)&v274 = 4 * v183;
      *((_QWORD *)&v274 + 1) = (4 * v189 + 15) & 0xFFFFFFFFFFFFFFF0;
      v286 = 0u;
      v287 = 0u;
      v284 = 0u;
      v285 = 0u;
      v282 = 0u;
      v283 = 0u;
      v12 = v283;
      v193 = (_DWORD *)v284;
      v6 = v285;
      v7 = v286;
      v194 = (_DWORD *)v287;
      bzero((void *)v283, 4 * v183);
      bzero((void *)v7, 4 * v183);
      v195 = (3 * *(_DWORD *)(v261 + 44));
      v196 = v282;
      v197 = (v195 + 3) & 0xFFFFFFFC;
      *(_DWORD *)v282 = (v258 + 3) >> 2;
      *(_DWORD *)(v196 + 4) = v195;
      *(_DWORD *)(v196 + 8) = v197;
      if (v264)
      {
        v198 = 0;
        v199 = v12;
        do
        {
          v200 = *((_QWORD *)v266 + 5 * v198 + 2);
          if (v200)
          {
            v201 = 0;
            *v193 = v198 % v195 + v198 / v195 * v197;
            *(_DWORD *)v6 = (v199 - v12) >> 2;
            v202 = (_DWORD *)(*((_QWORD *)v266 + 5 * v198 + 4) + 4);
            v203 = v200;
            do
            {
              *(_DWORD *)(v199 + v201) = *v202;
              *(_DWORD *)(v7 + v201) = *(v202 - 1);
              v202 += 2;
              v201 += 4;
              --v203;
            }
            while (v203);
            ++v193;
            v6 += 4;
            v204 = 4 * (v200 & 3);
            v199 = v199 - v204 + v201 + 16;
            v7 = v7 - v204 + v201 + 16;
          }
          ++v198;
        }
        while (v198 != v264);
      }
      else
      {
        v199 = v12;
      }
      *(_DWORD *)v6 = (v199 - v12) >> 2;
      v205 = v240;
      if (v190 >= 3)
      {
        v206 = 0;
        v94 = v268;
        v207 = v269;
        v208 = (v102 - v186) / 3;
        if (v208 <= 1)
          v208 = 1;
        do
        {
          if (v94 == v206)
            goto LABEL_339;
          if (*((_BYTE *)v206 + v207))
            *v194++ = v205 % v195 + v205 / v195 * v197;
          v206 = (unsigned __int128 *)((char *)v206 + 1);
          v205 += 3;
        }
        while ((unsigned __int128 *)v208 != v206);
      }
      v209 = *v243;
      if (*(_QWORD *)a1)
      {
        v210 = *(_QWORD *)(v209 + 16);
        v211 = v253;
        if (v210 <= v253)
          goto LABEL_357;
        v212 = *(id *)(*(_QWORD *)(v209 + 24) + 168 * v253 + 56);
        v213 = v253;
        v150 = *(_QWORD *)(v209 + 16);
        if (v150 <= v253)
          goto LABEL_358;
        v214 = v212;
        re::FixedArray<float>::operator=((uint64_t *)(*(_QWORD *)(v209 + 24) + 168 * v253 + 24), &v279);
        v215 = v253;
        v150 = *(_QWORD *)(v209 + 16);
        if (v150 <= v253)
          goto LABEL_360;
        v216 = (_BYTE *)(*(_QWORD *)(v209 + 24) + 168 * v253);
        v216[48] = v249;
        v216[49] = v252;
        v216[50] = v247;
        if (v214)

      }
      else
      {
        v152 = *(_QWORD *)(v209 + 16);
        v217 = v253;
        if (v152 <= v253)
          goto LABEL_363;
        re::FixedArray<float>::operator=((uint64_t *)(*(_QWORD *)(v209 + 24) + 184 * v253 + 16), &v279);
        v218 = v253;
        v152 = *(_QWORD *)(v209 + 16);
        if (v152 <= v253)
          goto LABEL_364;
        v219 = (_BYTE *)(*(_QWORD *)(v209 + 24) + 184 * v253);
        v219[12] = v249;
        v219[13] = v252;
        v219[14] = v247;
      }
      if (v267 && v268)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v267 + 40))(v267, v269);
      if (v264)
      {
        v220 = 0;
        do
        {
          v221 = (_QWORD *)((char *)v266 + v220);
          v222 = *(_QWORD *)((char *)v266 + v220);
          if (v222)
          {
            if (v221[4])
              (*(void (**)(uint64_t))(*(_QWORD *)v222 + 40))(v222);
            v221[4] = 0;
            v221[1] = 0;
            v221[2] = 0;
            *v221 = 0;
            ++*(_DWORD *)((char *)v266 + v220 + 24);
          }
          v220 += 40;
        }
        while (40 * v238 + 40 * v236 != v220);
      }
      goto LABEL_305;
    }
    v247 = 1;
    v82 = (3 * v83);
    goto LABEL_208;
  }
  v6 = *(_QWORD *)(v7 + 24);
  if (!v6)
    goto LABEL_344;
  v25 = *(uint64_t **)(a1 + 8);
  v26 = *(_QWORD **)(v7 + 32);
  v263 = v26[9];
  v259 = v26[12];
  v245 = v259 != 0;
  v27 = v26[15];
  v28 = (3 * *(_DWORD *)(v7 + 44));
  if (v259)
    v29 = (3 * *(_DWORD *)(v7 + 44));
  else
    v29 = 0;
  v255 = v27;
  LODWORD(v243) = v27 != 0;
  v248 = v263 != 0;
  v30 = v28 << (v263 != 0);
  if (!v27)
    v28 = 0;
  v31 = v30 + v29 + v28;
  re::StringID::invalid((re::StringID *)&v282);
  v279 = 0;
  v280 = 0;
  v281 = 0;
  re::StringID::destroyString((re::StringID *)&v282);
  v32 = (4 * v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v277 = 0u;
  v278 = 0u;
  v273 = 0u;
  v274 = 0u;
  v275 = 16;
  v276 = v31 * v32;
  v271 = 16;
  v272 = v31 * v32;
  v286 = 0u;
  v287 = 0u;
  v284 = 0u;
  v285 = 0u;
  v282 = 0u;
  v283 = 0u;
  v250 = v25;
  v33 = 0;
  v34 = 0;
  v35 = v282;
  v36 = v283;
  *(_DWORD *)v282 = v12;
  *(_DWORD *)(v35 + 4) = v10;
  *(_DWORD *)(v35 + 8) = v11;
  v258 = v36;
  v37 = (_DWORD *)v36;
  while (1)
  {
    v38 = v6;
    v6 = *(_QWORD *)(v7 + 24);
    if (v6 <= v34)
      goto LABEL_332;
    v6 = v280;
    if (v280 <= v34)
    {
LABEL_333:
      v267 = 0;
      v297 = 0u;
      v298 = 0u;
      memset(v296, 0, sizeof(v296));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v288 = 136315906;
      v289 = "operator[]";
      v290 = 1024;
      v291 = 468;
      v292 = 2048;
      v293 = v34;
      v294 = 2048;
      v295 = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_334:
      v275 = 0;
      v285 = 0u;
      v286 = 0u;
      v283 = 0u;
      v284 = 0u;
      v282 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v296[0] = 136315906;
      *(_QWORD *)&v296[1] = "operator[]";
      LOWORD(v296[3]) = 1024;
      *(_DWORD *)((char *)&v296[3] + 2) = 468;
      HIWORD(v296[4]) = 2048;
      *(_QWORD *)&v296[5] = v38;
      LOWORD(v296[7]) = 2048;
      *(_QWORD *)((char *)&v296[7] + 2) = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_335:
      v275 = 0;
      v285 = 0u;
      v286 = 0u;
      v283 = 0u;
      v284 = 0u;
      v282 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v296[0] = 136315906;
      *(_QWORD *)&v296[1] = "operator[]";
      LOWORD(v296[3]) = 1024;
      *(_DWORD *)((char *)&v296[3] + 2) = 468;
      HIWORD(v296[4]) = 2048;
      *(_QWORD *)&v296[5] = v38;
      LOWORD(v296[7]) = 2048;
      *(_QWORD *)((char *)&v296[7] + 2) = v6;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_336;
    }
    v7 = *(_QWORD *)(v7 + 32);
    v39 = v7 + 136 * v34;
    v41 = *(_QWORD *)(v39 + 48);
    v40 = (unint64_t *)(v39 + 48);
    v12 = v41;
    v6 = v41 * (v32 >> 2);
    re::StringID::operator=((unint64_t *)(v281 + 16 * v34), (uint64_t *)(v7 + 136 * v34));
    if (v41)
      break;
    if (v263)
    {
LABEL_35:
      v50 = v258 + 4 * v6;
      goto LABEL_37;
    }
    if (v259)
    {
      v51 = v258 + 4 * v6;
      goto LABEL_45;
    }
LABEL_51:
    ++v34;
    ++v37;
    v33 += 4;
    v6 = v38;
    v7 = v261;
    if (v34 == v38)
    {
      v59 = *v250;
      if (*(_QWORD *)a1)
      {
        v14 = *(unsigned __int128 **)(v59 + 16);
        v60 = v253;
        if ((unint64_t)v14 > v253)
        {
          v61 = *(id *)(*(_QWORD *)(v59 + 24) + 168 * v253 + 56);
          v62 = v253;
          v63 = *(_QWORD *)(v59 + 16);
          if (v63 > v253)
          {
            v64 = v61;
            re::FixedArray<float>::operator=((uint64_t *)(*(_QWORD *)(v59 + 24) + 168 * v253 + 24), &v279);
            v65 = (StringID *)v253;
            v63 = *(_QWORD *)(v59 + 16);
            if (v63 > v253)
            {
              v66 = (_BYTE *)(*(_QWORD *)(v59 + 24) + 168 * v253);
              v66[48] = v248;
              v66[49] = v245;
              v66[50] = (_BYTE)v243;
              if (v64)

              goto LABEL_305;
            }
LABEL_350:
            v267 = 0;
            v297 = 0u;
            v298 = 0u;
            memset(v296, 0, sizeof(v296));
            v76 = (unint64_t)v65;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v288 = 136315906;
            v289 = "operator[]";
            v290 = 1024;
            v291 = 468;
            v292 = 2048;
            v293 = v76;
            v294 = 2048;
            v295 = v63;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_351:
            re::internal::assertLog((re::internal *)4, v91, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
            _os_crash();
            __break(1u);
LABEL_352:
            re::internal::assertLog((re::internal *)4, v162, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
            _os_crash();
            __break(1u);
LABEL_353:
            v267 = 0;
            v297 = 0u;
            v298 = 0u;
            memset(v296, 0, sizeof(v296));
            v227 = v77;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v288 = 136315906;
            v289 = "operator[]";
            v290 = 1024;
            v291 = 468;
            v292 = 2048;
            v293 = v227;
            v294 = 2048;
            v295 = v76;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_354;
          }
LABEL_349:
          v267 = 0;
          v297 = 0u;
          v298 = 0u;
          memset(v296, 0, sizeof(v296));
          v226 = v62;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v288 = 136315906;
          v289 = "operator[]";
          v290 = 1024;
          v291 = 468;
          v292 = 2048;
          v293 = v226;
          v294 = 2048;
          v295 = v63;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_350;
        }
LABEL_348:
        v267 = 0;
        v297 = 0u;
        v298 = 0u;
        memset(v296, 0, sizeof(v296));
        v63 = v60;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v288 = 136315906;
        v289 = "operator[]";
        v290 = 1024;
        v291 = 468;
        v292 = 2048;
        v293 = v63;
        v294 = 2048;
        v295 = (unint64_t)v14;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_349;
      }
      v76 = *(_QWORD *)(v59 + 16);
      v77 = v253;
      if (v76 <= v253)
        goto LABEL_353;
      re::FixedArray<float>::operator=((uint64_t *)(*(_QWORD *)(v59 + 24) + 184 * v253 + 16), &v279);
      v78 = v253;
      v76 = *(_QWORD *)(v59 + 16);
      if (v76 > v253)
      {
        v79 = (_BYTE *)(*(_QWORD *)(v59 + 24) + 184 * v253);
        v79[12] = v248;
        v79[13] = v245;
        v79[14] = (_BYTE)v243;
LABEL_305:
        result = re::FixedArray<re::StringID>::deinit(&v279);
        v223 = **(_DWORD ***)(a1 + 8);
        if (v244)
          *v223 = 1;
        else
          *(_BYTE *)v223 = 1;
        return result;
      }
LABEL_354:
      v267 = 0;
      v297 = 0u;
      v298 = 0u;
      memset(v296, 0, sizeof(v296));
      v228 = v78;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v288 = 136315906;
      v289 = "operator[]";
      v290 = 1024;
      v291 = 468;
      v292 = 2048;
      v293 = v228;
      v294 = 2048;
      v295 = v76;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_355:
      v270 = 0;
      v297 = 0u;
      v298 = 0u;
      memset(v296, 0, sizeof(v296));
      v147 = v144;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v288 = 136315906;
      v289 = "operator[]";
      v290 = 1024;
      v291 = 468;
      v292 = 2048;
      v293 = v147;
      v294 = 2048;
      v295 = v76;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_356:
      v270 = 0;
      v297 = 0u;
      v298 = 0u;
      memset(v296, 0, sizeof(v296));
      v210 = v146;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v288 = 136315906;
      v289 = "operator[]";
      v290 = 1024;
      v291 = 468;
      v292 = 2048;
      v293 = v210;
      v294 = 2048;
      v295 = v147;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_357:
      v270 = 0;
      v297 = 0u;
      v298 = 0u;
      memset(v296, 0, sizeof(v296));
      v150 = v211;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v288 = 136315906;
      v289 = "operator[]";
      v290 = 1024;
      v291 = 468;
      v292 = 2048;
      v293 = v150;
      v294 = 2048;
      v295 = v210;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_358:
      v270 = 0;
      v297 = 0u;
      v298 = 0u;
      memset(v296, 0, sizeof(v296));
      v229 = v213;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v288 = 136315906;
      v289 = "operator[]";
      v290 = 1024;
      v291 = 468;
      v292 = 2048;
      v293 = v229;
      v294 = 2048;
      v295 = v150;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_359:
      v270 = 0;
      v297 = 0u;
      v298 = 0u;
      memset(v296, 0, sizeof(v296));
      v230 = v149;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v288 = 136315906;
      v289 = "operator[]";
      v290 = 1024;
      v291 = 468;
      v292 = 2048;
      v293 = v230;
      v294 = 2048;
      v295 = v150;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_360:
      v270 = 0;
      v297 = 0u;
      v298 = 0u;
      memset(v296, 0, sizeof(v296));
      v152 = v215;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v288 = 136315906;
      v289 = "operator[]";
      v290 = 1024;
      v291 = 468;
      v292 = 2048;
      v293 = v152;
      v294 = 2048;
      v295 = v150;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_361:
      v270 = 0;
      v297 = 0u;
      v298 = 0u;
      memset(v296, 0, sizeof(v296));
      v231 = v153;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v288 = 136315906;
      v289 = "operator[]";
      v290 = 1024;
      v291 = 468;
      v292 = 2048;
      v293 = v231;
      v294 = 2048;
      v295 = v152;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_362:
      v270 = 0;
      v297 = 0u;
      v298 = 0u;
      memset(v296, 0, sizeof(v296));
      v232 = v154;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v288 = 136315906;
      v289 = "operator[]";
      v290 = 1024;
      v291 = 468;
      v292 = 2048;
      v293 = v232;
      v294 = 2048;
      v295 = v152;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_363:
      v270 = 0;
      v297 = 0u;
      v298 = 0u;
      memset(v296, 0, sizeof(v296));
      v233 = v217;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v288 = 136315906;
      v289 = "operator[]";
      v290 = 1024;
      v291 = 468;
      v292 = 2048;
      v293 = v233;
      v294 = 2048;
      v295 = v152;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_364:
      v270 = 0;
      v297 = 0u;
      v298 = 0u;
      memset(v296, 0, sizeof(v296));
      v234 = v218;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v288 = 136315906;
      v289 = "operator[]";
      v290 = 1024;
      v291 = 468;
      v292 = 2048;
      v293 = v234;
      v294 = 2048;
      v295 = v152;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_365:
      re::internal::assertLog((re::internal *)5, v19, "assertion failure: '%s' (%s:line %i) Invalid blend shape group storage mode: %u.", "!\"Unreachable code\"", "addBlendShapeGroup", 884, v20);
      _os_crash();
      __break(1u);
    }
  }
  v42 = 0;
  v43 = *v40;
  v44 = v37;
  while (v43 != v42)
  {
    *v44 = *(_DWORD *)(*(_QWORD *)(v7 + 136 * v34 + 56) + 4 * v42++);
    v44 = (_DWORD *)((char *)v44 + v32);
    if (v12 == v42)
    {
      if (v263)
      {
        v45 = 0;
        v46 = v7 + 136 * v34;
        v47 = *(_QWORD *)(v46 + 72);
        v48 = (_QWORD *)(v46 + 80);
        v49 = v32 * v12;
        while (v47 != v45)
        {
          *(_DWORD *)((char *)v37 + v49) = *(_DWORD *)(*v48 + 4 * v45++);
          v49 += v32;
          if (v12 == v45)
            goto LABEL_35;
        }
LABEL_104:
        v267 = 0;
        v297 = 0u;
        v298 = 0u;
        memset(v296, 0, sizeof(v296));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v288 = 136315906;
        v289 = "operator[]";
        v290 = 1024;
        v291 = 476;
        v292 = 2048;
        v293 = v47;
        v294 = 2048;
        v295 = v47;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_105:
        v267 = 0;
        v76 = (unint64_t)&v282;
        v297 = 0u;
        v298 = 0u;
        memset(v296, 0, sizeof(v296));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v288 = 136315906;
        v289 = "operator[]";
        v290 = 1024;
        v291 = 476;
        v292 = 2048;
        v293 = v47;
        v294 = 2048;
        v295 = v47;
        _os_log_send_and_compose_impl();
        v68 = (_anonymous_namespace_ *)_os_crash_msg();
        __break(1u);
LABEL_106:
        v251 = 0;
        v246 = 0;
        v80 = 0;
        goto LABEL_107;
      }
      v50 = v258;
LABEL_37:
      v51 = v50 + 4 * v6;
      if (v259)
      {
        if (v12)
        {
          v52 = 0;
          v53 = v7 + 136 * v34;
          v47 = *(_QWORD *)(v53 + 96);
          v54 = (_QWORD *)(v53 + 104);
          v55 = v33;
          while (v47 != v52)
          {
            *(_DWORD *)(v51 + v55) = *(_DWORD *)(*v54 + 4 * v52++);
            v55 += v32;
            if (v12 == v52)
              goto LABEL_45;
          }
          goto LABEL_105;
        }
LABEL_45:
        v51 += 4 * v6;
      }
      if (v255 && v12)
      {
        v56 = 0;
        v57 = v7 + 136 * v34;
        v6 = *(_QWORD *)(v57 + 120);
        v58 = (_QWORD *)(v57 + 128);
        while (v6 != v56)
        {
          *(_DWORD *)(v51 + v33) = *(_DWORD *)(*v58 + 4 * v56++);
          v51 += v32;
          if (v12 == v56)
            goto LABEL_51;
        }
        v267 = 0;
        v297 = 0u;
        v298 = 0u;
        memset(v296, 0, sizeof(v296));
        v47 = MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v288 = 136315906;
        v289 = "operator[]";
        v290 = 1024;
        v291 = 476;
        v292 = 2048;
        v293 = v6;
        v294 = 2048;
        v295 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_104;
      }
      goto LABEL_51;
    }
  }
  v267 = 0;
  v297 = 0u;
  v298 = 0u;
  memset(v296, 0, sizeof(v296));
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  v288 = 136315906;
  v289 = "operator[]";
  v290 = 1024;
  v291 = 476;
  v292 = 2048;
  v293 = v43;
  v294 = 2048;
  v295 = v43;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_85:
  v248 = *v70 != 0;
  v251 = v70[3] != 0;
  v71 = v70[6] != 0;
LABEL_86:
  v85 = 0;
  v86 = 0;
  v38 = 0;
  do
  {
    v6 = v280;
    if (v280 <= v38)
      goto LABEL_334;
    v68 = (_anonymous_namespace_ *)re::StringID::operator=((unint64_t *)(v281 + v85), (uint64_t *)(*(_QWORD *)(v7 + 32) + v86));
    ++v38;
    v86 += 136;
    v85 += 16;
  }
  while (v38 < *(_QWORD *)(v7 + 24));
  LODWORD(v47) = *(_DWORD *)(v7 + 44);
  v76 = (3 * v47);
  LODWORD(v259) = 3 * v47;
  v81 = v76 << v248;
  if (v251)
  {
    v81 += v76;
    if (!v71)
    {
      v246 = 0;
      v80 = 0;
      v251 = 1;
      goto LABEL_107;
    }
  }
  else if (!v71)
  {
    goto LABEL_106;
  }
  v246 = 1;
  v80 = (3 * v47);
LABEL_107:
  v235 = v80;
  v237 = v81;
  v89 = v80 + v81;
  v239 = (StringID *)v76;
  if (v89)
  {
    v90 = (_anonymous_namespace_ *)(*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(*(_QWORD *)v34 + 32))(v34, 40 * v89, 8);
    if (!v90)
      goto LABEL_351;
    v92 = v90;
    v93 = v89 - 1;
    if (v89 != 1)
    {
      v92 = v90;
      do
      {
        *((_QWORD *)v92 + 4) = 0;
        *((_QWORD *)v92 + 1) = 0;
        *((_QWORD *)v92 + 2) = 0;
        *(_QWORD *)v92 = 0;
        *((_DWORD *)v92 + 6) = 0;
        v92 = (_anonymous_namespace_ *)((char *)v92 + 40);
        --v93;
      }
      while (v93);
    }
    *((_QWORD *)v92 + 4) = 0;
    *((_QWORD *)v92 + 1) = 0;
    *((_QWORD *)v92 + 2) = 0;
    *(_QWORD *)v92 = 0;
    *((_DWORD *)v92 + 6) = 0;
  }
  else
  {
    v90 = 0;
  }
  v265 = v90;
  if (!v258)
    goto LABEL_155;
  v12 = 0;
  v241 = 6 * v47;
  v264 = v89;
  do
  {
    v94 = *(unsigned __int128 **)(v7 + 24);
    if ((unint64_t)v94 <= v12)
      goto LABEL_340;
    v95 = *(_QWORD *)(v7 + 32);
    v96 = v95 + 136 * v12;
    v98 = *(_QWORD *)(v96 + 24);
    v97 = (unint64_t *)(v96 + 24);
    v38 = v98;
    if (!v98)
      goto LABEL_154;
    v99 = 0;
    v256 = *(_QWORD *)(v7 + 32);
    v100 = v95 + 136 * v12;
    v101 = (unint64_t *)(v100 + 48);
    v102 = v100 + 56;
    v6 = v100 + 32;
    v103 = v264;
    do
    {
      v34 = *v101;
      if (*v101 <= v99)
      {
        v275 = 0;
        v285 = 0u;
        v286 = 0u;
        v283 = 0u;
        v284 = 0u;
        v282 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v296[0] = 136315906;
        *(_QWORD *)&v296[1] = "operator[]";
        LOWORD(v296[3]) = 1024;
        *(_DWORD *)((char *)&v296[3] + 2) = 476;
        HIWORD(v296[4]) = 2048;
        *(_QWORD *)&v296[5] = v99;
        LOWORD(v296[7]) = 2048;
        *(_QWORD *)((char *)&v296[7] + 2) = v34;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_309:
        v275 = 0;
        v285 = 0u;
        v286 = 0u;
        v283 = 0u;
        v284 = 0u;
        v282 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v296[0] = 136315906;
        *(_QWORD *)&v296[1] = "operator[]";
        LOWORD(v296[3]) = 1024;
        *(_DWORD *)((char *)&v296[3] + 2) = 476;
        HIWORD(v296[4]) = 2048;
        *(_QWORD *)&v296[5] = v12;
        LOWORD(v296[7]) = 2048;
        *(_QWORD *)((char *)&v296[7] + 2) = v34;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_310:
        v275 = 0;
        v285 = 0u;
        v286 = 0u;
        v283 = 0u;
        v284 = 0u;
        v282 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v296[0] = 136315906;
        *(_QWORD *)&v296[1] = "operator[]";
        LOWORD(v296[3]) = 1024;
        *(_DWORD *)((char *)&v296[3] + 2) = 476;
        HIWORD(v296[4]) = 2048;
        *(_QWORD *)&v296[5] = v99;
        LOWORD(v296[7]) = 2048;
        *(_QWORD *)((char *)&v296[7] + 2) = v34;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_311:
        v275 = 0;
        v285 = 0u;
        v286 = 0u;
        v283 = 0u;
        v284 = 0u;
        v282 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v296[0] = 136315906;
        *(_QWORD *)&v296[1] = "operator[]";
        LOWORD(v296[3]) = 1024;
        *(_DWORD *)((char *)&v296[3] + 2) = 476;
        HIWORD(v296[4]) = 2048;
        *(_QWORD *)&v296[5] = v12;
        LOWORD(v296[7]) = 2048;
        *(_QWORD *)((char *)&v296[7] + 2) = v34;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_312:
        v275 = 0;
        v285 = 0u;
        v286 = 0u;
        v283 = 0u;
        v284 = 0u;
        v282 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v296[0] = 136315906;
        *(_QWORD *)&v296[1] = "operator[]";
        LOWORD(v296[3]) = 1024;
        *(_DWORD *)((char *)&v296[3] + 2) = 468;
        HIWORD(v296[4]) = 2048;
        *(_QWORD *)&v296[5] = v34;
        LOWORD(v296[7]) = 2048;
        *(_QWORD *)((char *)&v296[7] + 2) = v103;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_313:
        v275 = 0;
        v106 = (StringID *)&v282;
        v285 = 0u;
        v286 = 0u;
        v283 = 0u;
        v284 = 0u;
        v282 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v296[0] = 136315906;
        *(_QWORD *)&v296[1] = "operator[]";
        LOWORD(v296[3]) = 1024;
        *(_DWORD *)((char *)&v296[3] + 2) = 468;
        HIWORD(v296[4]) = 2048;
        *(_QWORD *)&v296[5] = v34;
        LOWORD(v296[7]) = 2048;
        *(_QWORD *)((char *)&v296[7] + 2) = v102;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_314:
        v275 = 0;
        v285 = 0u;
        v286 = 0u;
        v283 = 0u;
        v284 = 0u;
        v282 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v296[0] = 136315906;
        *(_QWORD *)&v296[1] = "operator[]";
        LOWORD(v296[3]) = 1024;
        *(_DWORD *)((char *)&v296[3] + 2) = 476;
        HIWORD(v296[4]) = 2048;
        *(_QWORD *)&v296[5] = v106;
        LOWORD(v296[7]) = 2048;
        *(_QWORD *)((char *)&v296[7] + 2) = v103;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_315:
        v275 = 0;
        v285 = 0u;
        v286 = 0u;
        v283 = 0u;
        v284 = 0u;
        v282 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v296[0] = 136315906;
        *(_QWORD *)&v296[1] = "operator[]";
        LOWORD(v296[3]) = 1024;
        *(_DWORD *)((char *)&v296[3] + 2) = 476;
        HIWORD(v296[4]) = 2048;
        *(_QWORD *)&v296[5] = v106;
        LOWORD(v296[7]) = 2048;
        *(_QWORD *)((char *)&v296[7] + 2) = v103;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_316:
        v275 = 0;
        v285 = 0u;
        v286 = 0u;
        v283 = 0u;
        v284 = 0u;
        v282 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v296[0] = 136315906;
        *(_QWORD *)&v296[1] = "operator[]";
        LOWORD(v296[3]) = 1024;
        *(_DWORD *)((char *)&v296[3] + 2) = 476;
        HIWORD(v296[4]) = 2048;
        *(_QWORD *)&v296[5] = v106;
        LOWORD(v296[7]) = 2048;
        *(_QWORD *)((char *)&v296[7] + 2) = v7;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_317:
        v275 = 0;
        v285 = 0u;
        v286 = 0u;
        v283 = 0u;
        v284 = 0u;
        v282 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v296[0] = 136315906;
        *(_QWORD *)&v296[1] = "operator[]";
        LOWORD(v296[3]) = 1024;
        *(_DWORD *)((char *)&v296[3] + 2) = 476;
        HIWORD(v296[4]) = 2048;
        *(_QWORD *)&v296[5] = v106;
        LOWORD(v296[7]) = 2048;
        *(_QWORD *)((char *)&v296[7] + 2) = v102;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_318;
      }
      v104 = *(float *)(*(_QWORD *)v102 + 4 * v99);
      if (fabsf(v104) >= 0.00001)
      {
        v34 = *v97;
        if (*v97 <= v99)
          goto LABEL_310;
        v34 = *(unsigned int *)(*(_QWORD *)v6 + 4 * v99);
        if (v264 <= v34)
          goto LABEL_312;
        *(_QWORD *)&v282 = __PAIR64__(LODWORD(v104), v12);
      }
      ++v99;
    }
    while (v38 != v99);
    v105 = v259;
    if (v248)
    {
      v106 = 0;
      v107 = v256 + 136 * v12;
      v108 = (unint64_t **)(v107 + 72);
      v34 = v107 + 80;
      v102 = (unint64_t)v265;
      do
      {
        v103 = (unint64_t)*v108;
        if (*v108 <= (unint64_t *)v106)
          goto LABEL_314;
        v109 = *(float *)(*(_QWORD *)v34 + 4 * (_QWORD)v106);
        if (fabsf(v109) >= 0.00001)
        {
          v103 = *v97;
          if (*v97 <= (unint64_t)v106)
            goto LABEL_320;
          v103 = (*(_DWORD *)(*(_QWORD *)v6 + 4 * (_QWORD)v106) + v259);
          if (v264 <= v103)
            goto LABEL_322;
          *(_QWORD *)&v282 = __PAIR64__(LODWORD(v109), v12);
        }
        v106 = (StringID *)((char *)v106 + 1);
      }
      while ((StringID *)v38 != v106);
      v105 = v241;
    }
    v110 = v256;
    if (v251)
    {
      v106 = 0;
      v111 = v256 + 136 * v12;
      v102 = v111 + 96;
      v103 = v111 + 104;
      if (v38 <= 1)
        v34 = 1;
      else
        v34 = v38;
      do
      {
        v7 = *(_QWORD *)v102;
        if (*(_QWORD *)v102 <= (unint64_t)v106)
          goto LABEL_316;
        v112 = *(float *)(*(_QWORD *)v103 + 4 * (_QWORD)v106);
        if (fabsf(v112) >= 0.00001)
        {
          v7 = *v97;
          if (*v97 <= (unint64_t)v106)
            goto LABEL_324;
          v7 = (*(_DWORD *)(*(_QWORD *)v6 + 4 * (_QWORD)v106) + v105);
          if (v264 <= v7)
            goto LABEL_326;
          *(_QWORD *)&v282 = __PAIR64__(LODWORD(v112), v12);
        }
        v106 = (StringID *)((char *)v106 + 1);
      }
      while ((StringID *)v34 != v106);
      v105 += v259;
      v7 = v261;
      v110 = v256;
    }
    if (v246)
    {
      v106 = 0;
      v113 = v110 + 136 * v12;
      v102 = v113 + 120;
      v103 = v113 + 128;
      if (v38 <= 1)
        v38 = 1;
      while (1)
      {
        v34 = *(_QWORD *)v102;
        if (*(_QWORD *)v102 <= (unint64_t)v106)
          break;
        v114 = *(float *)(*(_QWORD *)v103 + 4 * (_QWORD)v106);
        if (fabsf(v114) >= 0.00001)
        {
          v34 = *v97;
          if (*v97 <= (unint64_t)v106)
            goto LABEL_328;
          v34 = (*(_DWORD *)(*(_QWORD *)v6 + 4 * (_QWORD)v106) + v105);
          if (v264 <= v34)
            goto LABEL_330;
          *(_QWORD *)&v282 = __PAIR64__(LODWORD(v114), v12);
        }
        v106 = (StringID *)((char *)v106 + 1);
        if ((StringID *)v38 == v106)
          goto LABEL_154;
      }
LABEL_318:
      v275 = 0;
      v285 = 0u;
      v286 = 0u;
      v283 = 0u;
      v284 = 0u;
      v282 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v296[0] = 136315906;
      *(_QWORD *)&v296[1] = "operator[]";
      LOWORD(v296[3]) = 1024;
      *(_DWORD *)((char *)&v296[3] + 2) = 476;
      HIWORD(v296[4]) = 2048;
      *(_QWORD *)&v296[5] = v106;
      LOWORD(v296[7]) = 2048;
      *(_QWORD *)((char *)&v296[7] + 2) = v34;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_319:
      v275 = 0;
      v285 = 0u;
      v286 = 0u;
      v283 = 0u;
      v284 = 0u;
      v282 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v296[0] = 136315906;
      *(_QWORD *)&v296[1] = "operator[]";
      LOWORD(v296[3]) = 1024;
      *(_DWORD *)((char *)&v296[3] + 2) = 476;
      HIWORD(v296[4]) = 2048;
      *(_QWORD *)&v296[5] = v106;
      LOWORD(v296[7]) = 2048;
      *(_QWORD *)((char *)&v296[7] + 2) = v34;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_320:
      v275 = 0;
      v285 = 0u;
      v286 = 0u;
      v283 = 0u;
      v284 = 0u;
      v282 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v296[0] = 136315906;
      *(_QWORD *)&v296[1] = "operator[]";
      LOWORD(v296[3]) = 1024;
      *(_DWORD *)((char *)&v296[3] + 2) = 476;
      HIWORD(v296[4]) = 2048;
      *(_QWORD *)&v296[5] = v106;
      LOWORD(v296[7]) = 2048;
      *(_QWORD *)((char *)&v296[7] + 2) = v103;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_321:
      v275 = 0;
      v285 = 0u;
      v286 = 0u;
      v283 = 0u;
      v284 = 0u;
      v282 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v296[0] = 136315906;
      *(_QWORD *)&v296[1] = "operator[]";
      LOWORD(v296[3]) = 1024;
      *(_DWORD *)((char *)&v296[3] + 2) = 476;
      HIWORD(v296[4]) = 2048;
      *(_QWORD *)&v296[5] = v106;
      LOWORD(v296[7]) = 2048;
      *(_QWORD *)((char *)&v296[7] + 2) = v103;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_322:
      v275 = 0;
      v285 = 0u;
      v286 = 0u;
      v283 = 0u;
      v284 = 0u;
      v282 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v296[0] = 136315906;
      *(_QWORD *)&v296[1] = "operator[]";
      LOWORD(v296[3]) = 1024;
      *(_DWORD *)((char *)&v296[3] + 2) = 468;
      HIWORD(v296[4]) = 2048;
      *(_QWORD *)&v296[5] = v103;
      LOWORD(v296[7]) = 2048;
      *(_QWORD *)((char *)&v296[7] + 2) = v264;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_323;
    }
LABEL_154:
    ++v12;
    v89 = v264;
    v90 = v265;
  }
  while (v12 != v258);
LABEL_155:
  if (v89)
  {
    v115 = 0;
    v116 = 0;
    v117 = (uint64_t *)((char *)v90 + 16);
    v118 = v89;
    v12 = (unint64_t)v239;
    do
    {
      v120 = *v117;
      v117 += 5;
      v119 = v120;
      if (v120)
        ++v115;
      v116 += (v119 + 3) & 0xFFFFFFFFFFFFFFFCLL;
      --v118;
    }
    while (v118);
  }
  else
  {
    v116 = 0;
    v115 = 0;
    v12 = (unint64_t)v239;
  }
  v267 = 0;
  v268 = 0;
  v269 = 0;
  v262 = (v89 - v12) / 3;
  v121 = 0;
  v122 = v89 - v12;
  if (v89 > v12)
  {
    v123 = 0;
    v121 = 0;
    v6 = (unint64_t)v268;
    v124 = v269;
    while (1)
    {
      v34 = v123 / 3;
      if (v6 <= v123 / 3)
        break;
      if (!*(_BYTE *)(v124 + v34))
        ++v121;
      *(_BYTE *)(v124 + v34) = 1;
      if (v122 == ++v123)
        goto LABEL_168;
    }
LABEL_336:
    v275 = 0;
    v285 = 0u;
    v286 = 0u;
    v283 = 0u;
    v284 = 0u;
    v282 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v296[0] = 136315906;
    *(_QWORD *)&v296[1] = "operator[]";
    LOWORD(v296[3]) = 1024;
    *(_DWORD *)((char *)&v296[3] + 2) = 468;
    HIWORD(v296[4]) = 2048;
    *(_QWORD *)&v296[5] = v34;
    LOWORD(v296[7]) = 2048;
    *(_QWORD *)((char *)&v296[7] + 2) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_337:
    v275 = 0;
    v94 = &v282;
    v285 = 0u;
    v286 = 0u;
    v283 = 0u;
    v284 = 0u;
    v282 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v296[0] = 136315906;
    *(_QWORD *)&v296[1] = "operator[]";
    LOWORD(v296[3]) = 1024;
    *(_DWORD *)((char *)&v296[3] + 2) = 468;
    HIWORD(v296[4]) = 2048;
    *(_QWORD *)&v296[5] = v34;
    LOWORD(v296[7]) = 2048;
    *(_QWORD *)((char *)&v296[7] + 2) = v6;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_338:
    v270 = 0;
    v297 = 0u;
    v298 = 0u;
    memset(v296, 0, sizeof(v296));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v288 = 136315906;
    v289 = "operator[]";
    v290 = 1024;
    v291 = 468;
    v292 = 2048;
    v293 = (unint64_t)v94;
    v294 = 2048;
    v295 = (unint64_t)v94;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_339:
    v270 = 0;
    v297 = 0u;
    v298 = 0u;
    memset(v296, 0, sizeof(v296));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v288 = 136315906;
    v289 = "operator[]";
    v290 = 1024;
    v291 = 468;
    v292 = 2048;
    v293 = (unint64_t)v94;
    v294 = 2048;
    v295 = (unint64_t)v94;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_340:
    v275 = 0;
    v285 = 0u;
    v286 = 0u;
    v283 = 0u;
    v284 = 0u;
    v282 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v296[0] = 136315906;
    *(_QWORD *)&v296[1] = "operator[]";
    LOWORD(v296[3]) = 1024;
    *(_DWORD *)((char *)&v296[3] + 2) = 476;
    HIWORD(v296[4]) = 2048;
    *(_QWORD *)&v296[5] = v12;
    LOWORD(v296[7]) = 2048;
    *(_QWORD *)((char *)&v296[7] + 2) = v94;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_341:
    v275 = 0;
    v14 = &v282;
    v285 = 0u;
    v286 = 0u;
    v283 = 0u;
    v284 = 0u;
    v282 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v296[0] = 136315906;
    *(_QWORD *)&v296[1] = "operator[]";
    LOWORD(v296[3]) = 1024;
    *(_DWORD *)((char *)&v296[3] + 2) = 476;
    HIWORD(v296[4]) = 2048;
    *(_QWORD *)&v296[5] = v7;
    LOWORD(v296[7]) = 2048;
    *(_QWORD *)((char *)&v296[7] + 2) = v94;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_342:
    v275 = 0;
    v285 = 0u;
    v286 = 0u;
    v283 = 0u;
    v284 = 0u;
    v282 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v296[0] = 136315906;
    *(_QWORD *)&v296[1] = "operator[]";
    LOWORD(v296[3]) = 1024;
    *(_DWORD *)((char *)&v296[3] + 2) = 468;
    HIWORD(v296[4]) = 2048;
    *(_QWORD *)&v296[5] = v6;
    LOWORD(v296[7]) = 2048;
    *(_QWORD *)((char *)&v296[7] + 2) = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_343;
  }
LABEL_168:
  v125 = 2 * v116;
  v126 = 4 * v116;
  v275 = 12;
  v276 = 4 * v116;
  *(_QWORD *)&v277 = 2 * v115;
  *((_QWORD *)&v277 + 1) = 2 * v115 + 2;
  *(_QWORD *)&v278 = 2 * v116;
  *((_QWORD *)&v278 + 1) = 2 * v121;
  v271 = 16;
  v272 = 4 * v116;
  v273 = vandq_s8((int8x16_t)vaddq_s64(vdupq_n_s64(2 * v115), (int64x2_t)xmmword_226146270), (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)&v274 = (2 * v116 + 15) & 0xFFFFFFFFFFFFFFF0;
  *((_QWORD *)&v274 + 1) = (2 * v121 + 15) & 0xFFFFFFFFFFFFFFF0;
  v286 = 0u;
  v287 = 0u;
  v284 = 0u;
  v285 = 0u;
  v282 = 0u;
  v283 = 0u;
  v12 = v283;
  v127 = (_WORD *)v284;
  v6 = v285;
  v128 = v7;
  v7 = v286;
  v129 = (_WORD *)v287;
  bzero((void *)v283, v126);
  bzero((void *)v7, v125);
  v130 = (3 * *(_DWORD *)(v128 + 44));
  v131 = v282;
  v132 = (v130 + 3) & 0xFFFFFFFC;
  *(_DWORD *)v282 = (v258 + 3) >> 2;
  *(_DWORD *)(v131 + 4) = v130;
  *(_DWORD *)(v131 + 8) = v132;
  if (v89)
  {
    v133 = 0;
    v134 = (_DWORD *)v12;
    do
    {
      v135 = *((_QWORD *)v265 + 5 * v133 + 2);
      if (v135)
      {
        *v127 = v133 % v130 + v133 / v130 * v132;
        *(_WORD *)v6 = ((_DWORD)v134 - v12) >> 2;
        v136 = (_DWORD *)(*((_QWORD *)v265 + 5 * v133 + 4) + 4);
        v137 = v135;
        do
        {
          *v134++ = *v136;
          *(_WORD *)v7 = *(v136 - 1);
          v7 += 2;
          v136 += 2;
          --v137;
        }
        while (v137);
        ++v127;
        v6 += 2;
        v138 = v135 & 3;
        v134 = &v134[-v138 + 4];
        v7 = v7 - 2 * v138 + 8;
      }
      ++v133;
    }
    while (v133 != v89);
  }
  else
  {
    LODWORD(v134) = v12;
  }
  *(_WORD *)v6 = ((_DWORD)v134 - v12) >> 2;
  v139 = v239;
  if (v122 >= 3)
  {
    v140 = 0;
    v94 = v268;
    v141 = v269;
    v142 = v262;
    if (v262 <= 1)
      v142 = 1;
    while (v94 != v140)
    {
      if (*((_BYTE *)v140 + v141))
        *v129++ = (unint64_t)v139 % v130 + (unint64_t)v139 / v130 * v132;
      v140 = (unsigned __int128 *)((char *)v140 + 1);
      v139 = (StringID *)((char *)v139 + 3);
      if ((unsigned __int128 *)v142 == v140)
        goto LABEL_184;
    }
    goto LABEL_338;
  }
LABEL_184:
  v143 = *v243;
  if (!*(_QWORD *)a1)
  {
    v152 = *(_QWORD *)(v143 + 16);
    v153 = v253;
    if (v152 <= v253)
      goto LABEL_361;
    re::FixedArray<float>::operator=((uint64_t *)(*(_QWORD *)(v143 + 24) + 184 * v253 + 16), &v279);
    v154 = v253;
    v152 = *(_QWORD *)(v143 + 16);
    if (v152 > v253)
    {
      v155 = (_BYTE *)(*(_QWORD *)(v143 + 24) + 184 * v253);
      v155[12] = v248;
      v155[13] = v251;
      v155[14] = v246;
      goto LABEL_193;
    }
    goto LABEL_362;
  }
  v76 = *(_QWORD *)(v143 + 16);
  v144 = v253;
  if (v76 <= v253)
    goto LABEL_355;
  v145 = *(id *)(*(_QWORD *)(v143 + 24) + 168 * v253 + 56);
  v146 = v253;
  v147 = *(_QWORD *)(v143 + 16);
  if (v147 <= v253)
    goto LABEL_356;
  v148 = v145;
  re::FixedArray<float>::operator=((uint64_t *)(*(_QWORD *)(v143 + 24) + 168 * v253 + 24), &v279);
  v149 = v253;
  v150 = *(_QWORD *)(v143 + 16);
  if (v150 <= v253)
    goto LABEL_359;
  v151 = (_BYTE *)(*(_QWORD *)(v143 + 24) + 168 * v253);
  v151[48] = v248;
  v151[49] = v251;
  v151[50] = v246;
  if (v148)

LABEL_193:
  if (v267 && v268)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v267 + 40))(v267, v269);
  if (v89)
  {
    v156 = 0;
    do
    {
      v157 = (_QWORD *)((char *)v265 + v156);
      v158 = *(_QWORD *)((char *)v265 + v156);
      if (v158)
      {
        if (v157[4])
          (*(void (**)(uint64_t))(*(_QWORD *)v158 + 40))(v158);
        v157[4] = 0;
        v157[1] = 0;
        v157[2] = 0;
        *v157 = 0;
        ++*(_DWORD *)((char *)v265 + v156 + 24);
      }
      v156 += 40;
    }
    while (40 * v237 + 40 * v235 != v156);
  }
  result = re::FixedArray<re::StringID>::deinit(&v279);
  v160 = **(_DWORD ***)(a1 + 8);
  if (v244)
    *v160 = 0;
  else
    *(_BYTE *)v160 = 0;
  return result;
}

