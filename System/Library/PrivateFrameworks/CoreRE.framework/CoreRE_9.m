void re::addPhysicsMaterialAsset(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  __CFString *v16;
  re *v17;
  uint64_t v18;
  NSObject *v19;
  int v20;
  int v21;
  NSObject *v22;
  uint64_t v23;
  _BYTE *v24;
  void *v25;
  id v26;
  const char *v27;
  uint64_t v28;
  re::PhysicsMaterialAsset *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _anonymous_namespace_ *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  uint64_t *v40;
  _anonymous_namespace_ *v41;
  re::PhysicsMaterialAsset *v42;
  uint64_t *v43;
  re::AssetPath *v44;
  uint64_t v45;
  __CFString *v46;
  uint64_t v49[3];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  _BYTE v55[23];
  uint8_t buf[4];
  uint64_t v57;
  __int16 v58;
  _BYTE *v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v5 = a1;
  memset(v49, 0, sizeof(v49));
  if (!re::hasPhysicsMaterialAPI(v5))
    goto LABEL_9;
  v6 = *(unsigned int *)(a4 + 32);
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = (int *)(*(_QWORD *)(a4 + 16) + 8);
    while (1)
    {
      v9 = *v8;
      v8 += 18;
      if (v9 < 0)
        break;
      if (v6 == ++v7)
      {
        LODWORD(v7) = *(_DWORD *)(a4 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v7) = 0;
  }
  if ((_DWORD)v6 == (_DWORD)v7)
    goto LABEL_9;
  v10 = v7;
  v11 = *(_QWORD *)(a4 + 16);
  while (1)
  {
    v12 = objc_retainAutorelease(*(id *)(v11 + 72 * v10 + 56));
    v13 = v12;
    if (v12)
    {
      v14 = v12;
      objc_msgSend(v14, "path");
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "stringValue");
      v16 = (__CFString *)objc_claimAutoreleasedReturnValue();

      if (!v16)
        v16 = &stru_24EDA2070;
      if (!re::hasPhysicsMaterialAPI(v14))
        goto LABEL_20;
      re::importPhysicsMaterial(v14, (uint64_t)&v50);
      if (!(_BYTE)v50)
      {
        v19 = *re::pipelineLogObjects(v17);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          v46 = objc_retainAutorelease(v16);
          v22 = v19;
          v23 = -[__CFString UTF8String](v46, "UTF8String");
          v24 = v55;
          if ((v54 & 1) != 0)
            v24 = *(_BYTE **)&v55[7];
          *(_DWORD *)buf = 136315394;
          v57 = v23;
          v58 = 2080;
          v59 = v24;
          _os_log_error_impl(&dword_224FE9000, v22, OS_LOG_TYPE_ERROR, "Physics material (%s) import error: %s.", buf, 0x16u);

        }
        if (!(_BYTE)v50 && v53 && (v54 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v53 + 40))();
LABEL_20:

        goto LABEL_21;
      }
      v18 = v51;

      if (v18)
        break;
    }
LABEL_21:

    v11 = *(_QWORD *)(a4 + 16);
    if (*(_DWORD *)(a4 + 32) <= (v7 + 1))
      v20 = v7 + 1;
    else
      v20 = *(_DWORD *)(a4 + 32);
    while (1)
    {
      v10 = (v7 + 1);
      if (v20 - 1 == (_DWORD)v7)
        break;
      LODWORD(v7) = v7 + 1;
      v21 = v10;
      if ((*(_DWORD *)(v11 + 72 * v10 + 8) & 0x80000000) != 0)
        goto LABEL_28;
    }
    v21 = v20;
LABEL_28:
    LODWORD(v7) = v21;
    if ((_DWORD)v6 == v21)
      goto LABEL_9;
  }
  objc_msgSend(v14, "path");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "stringValue");
  v26 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v27 = (const char *)objc_msgSend(v26, "UTF8String");

  v28 = *(_QWORD *)(a3 + 104);
  v29 = (re::PhysicsMaterialAsset *)strlen(v27);
  v30 = re::PhysicsMaterialAsset::assetType(v29);
  v31 = re::ImportAssetTable::importedAsset(v28, (uint64_t)v27, (uint64_t)v29, (re **)v30);
  if (v31)
  {
    v32 = v31;
    v33 = re::PhysicsFactory::m_defaultAllocator;
    (**(void (***)(uint64_t))v18)(v18);
    v34 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 40))(v33, v18);
  }
  else
  {
    v35 = re::globalAllocators(0);
    v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35[2] + 32))(v35[2], 24, 8);
    v37 = v36;
    if (v36)
    {
      v38 = *(_DWORD *)(v18 + 16);
      *(_QWORD *)v36 = &off_24ED7E200;
      *(_QWORD *)(v36 + 8) = *(_QWORD *)(v18 + 8);
      *(_DWORD *)(v36 + 16) = v38;
    }
    v39 = re::globalAllocators((re *)v36);
    v40 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v39[2] + 32))(v39[2], 16, 8);
    *v40 = v37;
    v40[1] = v18;
    v41 = *(_anonymous_namespace_ **)(a3 + 104);
    v42 = (re::PhysicsMaterialAsset *)strlen(v27);
    v43 = re::PhysicsMaterialAsset::assetType(v42);
    v34 = (_anonymous_namespace_ *)re::ImportAssetTable::addAsset(v41, (uint64_t)v27, (uint64_t)v42, v40, (re **)v43);
    v32 = (uint64_t)v34;
  }
  v51 = 0;
  v52 = 0;
  v50 = 0;
  if ((*(_BYTE *)(v32 + 8) & 1) != 0)
    v44 = *(re::AssetPath **)(v32 + 16);
  else
    v44 = (re::AssetPath *)(v32 + 9);
  re::AssetHandle::operator=(v49, &v50);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v50);

  v45 = re::BucketArray<re::USDImportContext::NodeStackItem,32ul>::operator[](a2 + 624, *(_QWORD *)(*(_QWORD *)(a2 + 848) + 8 * *(_QWORD *)(a2 + 832) - 8));
  re::AssetHandle::operator=((uint64_t *)(v45 + 848), v49);
LABEL_9:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v49);

}

void re::updateMeshOverrideCompileOptions(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  const char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  _BYTE *v15;
  id v16;
  void *v17;
  void *v18;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  __int128 v38;
  _QWORD *v39;
  __int128 v40;
  _BYTE v41[21];
  _OWORD v42[3];
  unint64_t v43;
  const char *v44;

  v3 = a2;
  v4 = *(_QWORD *)(a1[106] + 8 * a1[104] - 8);
  objc_msgSend(v3, "path");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringValue");
  v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v7 = (_anonymous_namespace_ *)objc_msgSend(v6, "UTF8String");
  v43 = 0;
  v44 = (const char *)&str_110;

  v8 = 0;
  v10 = v43;
  v9 = v44;
  v11 = v4 + 1;
  while (1)
  {
    v12 = re::BucketArray<re::USDImportContext::NodeStackItem,32ul>::operator[]((uint64_t)(a1 + 78), v8);
    if ((v10 ^ *(_QWORD *)(v12 + 24)) <= 1)
    {
      v13 = v12;
      v14 = *(const char **)(v12 + 32);
      if (v14 == v9 || !strcmp(v14, v9))
        break;
    }
    if (v11 == ++v8)
      goto LABEL_32;
  }
  v15 = (_BYTE *)a1[5];
  v16 = v3;
  v41[0] = 0;
  *(_WORD *)&v41[2] = 257;
  v41[4] = 1;
  *(_DWORD *)&v41[5] = 0;
  v41[9] = 0;
  *(_DWORD *)&v41[12] = 1036831949;
  *(_DWORD *)&v41[16] = 16843008;
  memset(v42, 0, sizeof(v42));
  DWORD1(v42[2]) = 0x7FFFFFFF;
  v41[10] = v15[161];
  v41[1] = v15[162];
  *(_WORD *)&v41[6] = v15[165];
  v41[20] = v15[165];
  objc_msgSend(v16, "customMetadataWithKey:", CFSTR("RE:mesh:v1:decimationFactor"));
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = v17;
  if (v17)
  {
    objc_msgSend(v17, "floatValue");
    *(_DWORD *)&v41[12] = v19;
  }
  objc_msgSend(v16, "customMetadataWithKey:", CFSTR("RE:mesh:v1:generateVertexFaceAdjacencyAttributes"));
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = v20;
  if (v20)
    v41[0] = objc_msgSend(v20, "BOOLValue");

  objc_msgSend(v16, "customMetadataWithKey:", CFSTR("RE:mesh:v1:reorderVertexCaching"));
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = v22;
  if (v22)
    v41[1] = objc_msgSend(v22, "BOOLValue");

  objc_msgSend(v16, "customMetadataWithKey:", CFSTR("RE:mesh:v1:repairTangents"));
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  v25 = v24;
  if (v24)
    v41[2] = objc_msgSend(v24, "BOOLValue");

  objc_msgSend(v16, "customMetadataWithKey:", CFSTR("RE:mesh:v1:mergeVerticesIfPolygonSoup"));
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  v27 = v26;
  if (v26)
    v41[3] = objc_msgSend(v26, "BOOLValue");

  objc_msgSend(v16, "customMetadataWithKey:", CFSTR("RE:mesh:v1:preserveSharpFeatures"));
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  v29 = v28;
  if (v28)
    v41[5] = objc_msgSend(v28, "BOOLValue");

  objc_msgSend(v16, "customMetadataWithKey:", CFSTR("RE:mesh:v1:forceRetainFaceNormals"));
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  v31 = v30;
  if (v30)
    v41[7] = objc_msgSend(v30, "BOOLValue");

  objc_msgSend(v16, "customMetadataWithKey:", CFSTR("RE:mesh:v1:generateLaplacianStencilDataAttributes"));
  v32 = (void *)objc_claimAutoreleasedReturnValue();
  v33 = v32;
  if (v32)
    v41[8] = objc_msgSend(v32, "BOOLValue");

  objc_msgSend(v16, "customMetadataWithKey:", CFSTR("RE:mesh:v1:computeAdjacentFaceArea"));
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = v34;
  if (v34)
    v41[9] = objc_msgSend(v34, "BOOLValue");

  objc_msgSend(v16, "customMetadataWithKey:", CFSTR("RE:mesh:v1:decimateMesh"));
  v36 = (void *)objc_claimAutoreleasedReturnValue();
  v37 = v36;
  if (v36)
    v41[10] = objc_msgSend(v36, "BOOLValue");

  *(_QWORD *)&v38 = *(_QWORD *)v41;
  *(_OWORD *)(v13 + 168) = *(_OWORD *)v41;
  *(_QWORD *)(v13 + 181) = *(_QWORD *)&v41[13];
  v39 = (_QWORD *)(v13 + 192);
  if ((_OWORD *)(v13 + 192) != v42)
  {
    if (*v39)
    {
      re::HashTable<re::DynamicString,re::MeshAttributeCompressionOption,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)v39);
    }
    else
    {
      *(_QWORD *)&v42[0] = 0;
      v38 = *(_OWORD *)(v13 + 200);
      *(_QWORD *)(v13 + 192) = 0;
      *(_QWORD *)(v13 + 200) = 0;
      *(_QWORD *)(v13 + 208) = 0;
      v40 = *(_OWORD *)(v13 + 216);
      *(_OWORD *)(v13 + 216) = xmmword_2260F5A80;
      *(_OWORD *)((char *)v42 + 8) = v38;
      *(_OWORD *)((char *)&v42[1] + 8) = v40;
    }
  }
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v42, *(double *)&v38);
LABEL_32:
  re::StringID::destroyString((re::StringID *)&v43);

}

void re::USDImportContext::GeomText3D::~GeomText3D(re::USDImportContext::GeomText3D *this)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (_OWORD *)((char *)this + 160);
  v2 = *((_QWORD *)this + 20);
  if (v2)
  {
    if ((*((_BYTE *)this + 168) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 22));
    *v3 = 0u;
    v3[1] = 0u;
  }
  v4 = *((_QWORD *)this + 16);
  if (v4)
  {
    if ((*((_BYTE *)this + 136) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 18));
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
  }
  v5 = *((_QWORD *)this + 12);
  if (v5)
  {
    if ((*((_BYTE *)this + 104) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 14));
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
  }
  v6 = *((_QWORD *)this + 4);
  if (v6)
  {
    if ((*((_BYTE *)this + 40) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 6));
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
  }
  if (*(_QWORD *)this)
  {
    if ((*((_BYTE *)this + 8) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this, *((_QWORD *)this + 2));
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
}

uint64_t re::HashTable<re::DynamicString,re::DynamicArray<re::AssetHandle>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add(uint64_t a1, const re::DynamicString *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v14;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,re::DynamicArray<re::AssetHandle>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 88 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 88 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 88 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v10 + 88 * v9;
  return v12 + 48;
}

double re::createAnimationAssets(re *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  re **TimelineAsset;
  uint64_t *v21;
  re *v23;
  _OWORD v24[2];
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  unint64_t v33;
  __int16 v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v23 = a1;
  v41 = *MEMORY[0x24BDAC8D0];
  v25 = 0;
  memset(v24, 0, sizeof(v24));
  v26 = 0x7FFFFFFFLL;
  if (*(_QWORD *)(a2 + 16))
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(a3 + 136);
      if (v9 <= v8)
      {
        v27 = 0;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v36 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v28 = 136315906;
        v29 = "operator[]";
        v30 = 1024;
        v31 = 789;
        v32 = 2048;
        v33 = v8;
        v34 = 2048;
        v35 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_14:
        v27 = 0;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v36 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v28 = 136315906;
        v29 = "operator[]";
        v30 = 1024;
        v31 = 789;
        v32 = 2048;
        v33 = v8;
        v34 = 2048;
        v35 = v3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v10 = (_anonymous_namespace_ *)*((_QWORD *)v23 + 13);
      v11 = *(_QWORD *)(a3 + 152) + v6;
      v12 = *(_QWORD *)(v11 + 8);
      v13 = *(_QWORD *)(v11 + 16);
      v14 = re::globalAllocators(a1);
      v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14[2] + 32))(v14[2], 120, 8);
      v3 = *(_QWORD *)(a2 + 16);
      if (v3 <= v8)
        goto LABEL_14;
      if ((v12 & 1) != 0)
        v3 = v12 >> 1;
      else
        v3 = v12 >> 1;
      if ((v12 & 1) != 0)
        v16 = v13;
      else
        v16 = v11 + 9;
      v17 = *(_QWORD *)(a2 + 32) + v7;
      re::SampledAnimation<re::SkeletalPose>::SampledAnimation(v15, v17);
      *(_QWORD *)v18 = off_24ED222D0;
      v19 = *(_WORD *)(v17 + 112);
      *(_BYTE *)(v18 + 114) = *(_BYTE *)(v17 + 114);
      *(_WORD *)(v18 + 112) = v19;
      TimelineAsset = re::AssetHelper::makeTimelineAsset((re *)v18, (uint64_t)v24);
      v21 = re::TimelineAsset::assetType((re::TimelineAsset *)TimelineAsset);
      a1 = (re *)re::ImportAssetTable::addAsset(v10, v16, v3, TimelineAsset, (re **)v21);
      ++v8;
      v7 += 120;
      v6 += 32;
    }
    while (v8 < *(_QWORD *)(a2 + 16));
  }
  return re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v24);
}

uint64_t re::importSceneWithMDLAsset(_QWORD *a1, id *a2, uint64_t a3, CFErrorRef *a4)
{
  const char *v6;
  _anonymous_namespace_ *v7;
  char v8;
  char v9;
  _anonymous_namespace_ *v10;
  void *v11;
  _anonymous_namespace_ *v12;
  size_t v13;
  void *v14;
  id v15;
  _QWORD *v16;
  re *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  id v22;
  id v23;
  _DWORD *v24;
  re::ecs2::TransformComponent *v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float v32;
  float v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int32x2_t v40;
  float v41;
  float32x4_t v42;
  void *v43;
  re *data;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  _anonymous_namespace_ *v49;
  int32x2_t v50;
  int32x4_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x4_t v54;
  float v55;
  id v56;
  re::TimelineAsset *v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  double v66;
  re *v67;
  uint64_t *v68;
  void *v69;
  re::MeshAsset *v70;
  _anonymous_namespace_ *v71;
  uint64_t *v72;
  const re::DynamicString *v73;
  id *v74;
  id *v75;
  re::DynamicString *v76;
  re::AssetPath *v77;
  re::AssetHandle *v78;
  _anonymous_namespace_ *v79;
  uint64_t *v80;
  uint64_t v81;
  _anonymous_namespace_ *v82;
  re::DynamicString *v83;
  re::AssetPath *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  std::string::size_type v89;
  unint64_t v90;
  re::ecs2::TransformComponent *v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float v98;
  float v99;
  float32x2_t v100;
  float32x2_t v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x4_t v104;
  float32x4_t v105;
  int32x2_t v106;
  float v107;
  float32x4_t v108;
  int32x4_t v109;
  float32x2_t v110;
  float32x2_t v111;
  float32x4_t v112;
  float v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  void *v122;
  uint64_t i;
  void *v124;
  __n128 v125;
  int8x16_t v126;
  int8x16_t v127;
  double v128;
  double v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  std::string *v137;
  int *v138;
  int32x2_t v139;
  int32x2_t v140;
  id v143;
  uint64_t *v144;
  id v145;
  id v146;
  __int16 v147;
  char v148;
  char v150;
  uint64_t v151;
  id v152;
  __int128 v153;
  __int128 v154;
  _WORD v155[4];
  id v156;
  __int16 v157;
  _anonymous_namespace_ *v158;
  _BYTE v159[44];
  char v160;
  char v161;
  char v162;
  int v163;
  uint64_t v164[4];
  int v165;
  uint64_t v166;
  uint64_t v167[4];
  int v168;
  uint64_t v169;
  uint64_t v170[4];
  int v171;
  uint64_t v172;
  uint64_t v173[4];
  int v174;
  uint64_t v175;
  char v176;
  re::TimelineAsset *v177;
  uint64_t v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  _BYTE v184[23];
  uint64_t v185;
  uint64_t v186;
  const char *v187;
  int v188;
  uint64_t v189;
  __int128 v190;
  _QWORD v191[8];
  __int128 v192;
  __int128 v193;
  int v194;
  _BYTE v195[12];
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  uint64_t v210;
  uint8_t buf[32];
  uint64_t v212;
  uint64_t v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  uint64_t v217;
  uint64_t v218;
  std::string v219[2];
  __int128 v220;
  _QWORD v221[5];
  uint64_t v222;
  _BYTE v223[44];
  uint64_t v224;
  __n128 v225;
  __int128 v226;
  __int128 v227;
  _BYTE v228[40];
  __int128 v229;
  int v230;
  __int128 v231;
  __int128 v232;
  int v233;
  __int128 v234;
  _BYTE v235[28];
  uint64_t v236;
  __int128 v237;
  __int128 v238;
  int v239;
  uint64_t v240;
  __int128 v241;
  __int128 v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  uint64_t v249;
  uint64_t v250;

  v250 = *MEMORY[0x24BDAC8D0];
  if ((*(_QWORD *)(a3 + 40) & 1) != 0)
    v6 = *(const char **)(a3 + 48);
  else
    v6 = (const char *)(a3 + 41);
  v7 = (_anonymous_namespace_ *)(a1 + 13);
  v8 = *(_BYTE *)(a3 + 72);
  v9 = *(_BYTE *)(a3 + 73);
  v10 = (_anonymous_namespace_ *)*a2;
  v145 = *(id *)a3;
  v146 = *(id *)(a3 + 8);
  v147 = *(_WORD *)(a3 + 16);
  v148 = *(_BYTE *)(a3 + 18);
  if (*(_BYTE *)(a3 + 19))
    v150 = *(_BYTE *)(a3 + 20);
  v151 = *(_QWORD *)(a3 + 24);
  -[_anonymous_namespace_ URL](v10, "URL");
  v11 = (void *)objc_claimAutoreleasedReturnValue();

  v152 = v11;
  *((_QWORD *)&v153 + 1) = 0;
  v154 = 0uLL;
  re::DynamicString::setCapacity(&v153, 0);
  memset(v155, 0, 3);
  v156 = 0;
  v157 = 257;
  v158 = v7;
  memset(v159, 0, 36);
  *(_QWORD *)&v159[36] = 0x7FFFFFFFLL;
  re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v159, (uint64_t)v144, 3);
  v160 = 0;
  v161 = v8;
  v162 = v9;
  v163 = 1;
  memset(v164, 0, sizeof(v164));
  v166 = 0x7FFFFFFFLL;
  memset(v167, 0, sizeof(v167));
  v165 = 0;
  v168 = 0;
  v169 = 0x7FFFFFFFLL;
  memset(v170, 0, sizeof(v170));
  v171 = 0;
  v172 = 0x7FFFFFFFLL;
  memset(v173, 0, sizeof(v173));
  v174 = 0;
  v175 = 0x7FFFFFFFLL;
  v176 = 0;
  if (v6)
  {
    v13 = strlen(v6);
    v225.n128_u64[0] = (unint64_t)v6;
    v225.n128_u64[1] = v13;
    re::DynamicString::operator=((re::DynamicString *)&v153, (uint64_t)&v225);
  }
  v219[0].__r_.__value_.__r.__words[0] = *MEMORY[0x24BDD97D0];
  v225.n128_u64[0] = MEMORY[0x24BDBD1C0];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v225, v219, 1);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v156;
  v156 = v14;

  LOBYTE(v155[0]) = *(_BYTE *)(a3 + 64);
  *(_WORD *)((char *)v155 + 1) = *(_WORD *)(a3 + 65);
  BYTE2(v163) = *(_BYTE *)(a3 + 75);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)v164, a3 + 88);
  v16 = a1;
  re::ImportedScene::ImportedScene((re::ImportedScene *)&v225);
  re::DynamicArray<re::ImportedScene>::add((uint64_t)(a1 + 36), &v225);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)&v231 + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)((char *)&v229 + 8));
  if (*(_QWORD *)&v228[8])
  {
    if ((v228[16] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v228[8] + 40))();
    memset(&v228[8], 0, 32);
  }
  v17 = (re *)v226;
  if ((_QWORD)v226 && (BYTE8(v226) & 1) != 0)
    v17 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v226 + 40))();
  v18 = re::globalAllocators(v17);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18[2] + 32))(v18[2], 40, 8);
  *(_OWORD *)v19 = 0u;
  *(_OWORD *)(v19 + 16) = 0u;
  *(_QWORD *)(v19 + 32) = 0;
  if (!a1[38])
  {
    *(_QWORD *)buf = 0;
    memset(v228, 0, 32);
    v226 = 0uLL;
    v227 = 0uLL;
    v225 = 0uLL;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    LODWORD(v219[0].__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)v219[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)"operator[]";
    WORD2(v219[0].__r_.__value_.__r.__words[1]) = 1024;
    *(_DWORD *)((char *)&v219[0].__r_.__value_.__r.__words[1] + 6) = 789;
    WORD1(v219[0].__r_.__value_.__r.__words[2]) = 2048;
    *(std::string::size_type *)((char *)&v219[0].__r_.__value_.__r.__words[2] + 4) = 0;
    WORD2(v219[1].__r_.__value_.__r.__words[0]) = 2048;
    *(std::string::size_type *)((char *)v219[1].__r_.__value_.__r.__words + 6) = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v20 = v19;
  *(_QWORD *)(a1[40] + 48) = v19;
  v21 = *(unsigned __int8 *)(a3 + 67);
  v22 = *a2;
  if (v21)
  {
    v143 = v22;
    v139 = *(int32x2_t *)(a3 + 68);
    v210 = 0;
    v208 = 0;
    v206 = 0;
    v207 = 0;
    v209 = 0;
    v205 = 0;
    v203 = 0;
    v201 = 0;
    v202 = 0;
    v204 = 0;
    v200 = 0;
    v198 = 0;
    v196 = 0;
    v197 = 0;
    v199 = 0;
    v225 = 0uLL;
    *(_QWORD *)&v226 = 0;
    v227 = 0u;
    memset(v228, 0, 20);
    DWORD2(v226) = 0;
    *(_OWORD *)&v228[24] = 0u;
    v229 = 0u;
    v231 = 0u;
    v232 = 0u;
    v230 = 0;
    v233 = 0;
    v234 = 0u;
    memset(v235, 0, sizeof(v235));
    v236 = 0x7FFFFFFFLL;
    v237 = 0u;
    v238 = 0u;
    v240 = 0x7FFFFFFFLL;
    v241 = 0u;
    v242 = 0u;
    v239 = 0;
    v243 = 0;
    v244 = 0x7FFFFFFFLL;
    v249 = 0;
    v247 = 0;
    v248 = 0;
    v245 = 0;
    v246 = 0;
    objc_msgSend(v22, "resolver");
    v23 = (id)objc_claimAutoreleasedReturnValue();

    v220 = 0u;
    v222 = 0;
    memset(v221, 0, sizeof(v221));
    memset(v219, 0, sizeof(v219));
    v219[0].__r_.__value_.__r.__words[2] = (std::string::size_type)&str_110;
    v219[1].__r_.__value_.__s.__data_[0] = 1;
    *(_QWORD *)&v220 = 0;
    DWORD2(v220) = 0;
    re::DynamicArray<re::ecs2::EntityAssetData>::add(v20, (uint64_t)v219);
    re::ecs2::EntityAssetData::~EntityAssetData((re::ecs2::EntityAssetData *)v219);
    v24 = (_DWORD *)(*(_QWORD *)(v20 + 32) + 112 * *(_QWORD *)(v20 + 16) - 112);
    v25 = re::ecs2::EntityAssetData::addComponent<re::ecs2::TransformComponent>(v24);
    *((_QWORD *)v25 + 4) = 0x3F8000003F800000;
    *((_QWORD *)v25 + 5) = 1065353216;
    *((_QWORD *)v25 + 6) = 0;
    *((_QWORD *)v25 + 7) = 0x3F80000000000000;
    *((_QWORD *)v25 + 8) = 0;
    *((_QWORD *)v25 + 9) = 0;
    objc_msgSend(v143, "upAxis");
    v27 = vmulq_f32(v26, v26);
    v28 = vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1));
    v29 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), v28);
    v29.f32[0] = fabsf(v29.f32[0]);
    v28.i32[0] = 786163454;
    v30 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v28, v29), 0), (int8x16_t)xmmword_2260E5F20, (int8x16_t)v26);
    v31 = vmulq_f32(v30, v30);
    LODWORD(v32) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).u32[0];
    if (fabsf(v32) >= 1.0e-10)
    {
      v33 = v32;
      v34 = vrsqrte_f32((float32x2_t)LODWORD(v32));
      v35 = vmul_f32(v34, vrsqrts_f32((float32x2_t)LODWORD(v33), vmul_f32(v34, v34)));
      v30 = vmulq_n_f32(v30, vmul_f32(v35, vrsqrts_f32((float32x2_t)LODWORD(v33), vmul_f32(v35, v35))).f32[0]);
    }
    v36 = vrsqrte_f32((float32x2_t)1065353216);
    v37 = vmul_f32(v36, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v36, v36)));
    v38 = vmulq_n_f32((float32x4_t)xmmword_2260E5F20, vmul_f32(v37, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v37, v37))).f32[0]);
    v39 = vmulq_f32(v30, v38);
    v40 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).u64[0];
    if (*(float *)v40.i32 == -1.0
      || (v41 = (float)((float)(fabsf(*(float *)v40.i32) + 1.0) + 1.0) * 0.00001,
          *(float *)v40.i32 = *(float *)v40.i32 + 1.0,
          fabsf(*(float *)v40.i32) < v41))
    {
      if (fabsf(v30.f32[2]) >= 0.00001)
      {
        v42.i32[0] = 0;
        v42.f32[1] = -v30.f32[2];
        v42.i64[1] = v30.u32[1];
      }
      else
      {
        v42 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v30.f32[1]), (int32x4_t)v30);
      }
      v50 = v139;
      v51 = (int32x4_t)vmulq_f32(v42, v42);
      v51.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v51, 2), vadd_f32(*(float32x2_t *)v51.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v51.i8, 1))).u32[0];
      v52 = vrsqrte_f32((float32x2_t)v51.u32[0]);
      v53 = vmul_f32(v52, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(v52, v52)));
      v54 = vmulq_n_f32(v42, vmul_f32(v53, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(v53, v53))).f32[0]);
      v55 = 0.0;
    }
    else
    {
      v126 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), (int8x16_t)v38, 0xCuLL), vnegq_f32(v30)), v38, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL));
      *(float *)v40.i32 = sqrtf(*(float *)v40.i32 + *(float *)v40.i32);
      v55 = *(float *)v40.i32 * 0.5;
      v54 = vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v126, (int32x4_t)v126), v126, 0xCuLL), (float32x4_t)vdupq_lane_s32(v40, 0));
      v50 = v139;
    }
    v54.f32[3] = v55;
    *((int32x4_t *)v25 + 2) = vdupq_lane_s32(v50, 0);
    *((float32x4_t *)v25 + 3) = v54;
    LOBYTE(v190) = 0;
    WORD1(v190) = 257;
    BYTE4(v190) = 1;
    *(_DWORD *)((char *)&v190 + 5) = 0;
    BYTE9(v190) = 0;
    HIDWORD(v190) = 1036831949;
    LODWORD(v191[0]) = 16843008;
    memset(&v191[1], 0, 48);
    HIDWORD(v191[5]) = 0x7FFFFFFF;
    BYTE10(v190) = v161;
    BYTE1(v190) = v162;
    BYTE6(v190) = BYTE2(v163);
    BYTE4(v191[0]) = BYTE2(v163);
    memset(v219, 0, 28);
    *(_OWORD *)&v219[1].__r_.__value_.__r.__words[1] = 0u;
    v220 = 0u;
    LODWORD(v221[0]) = 0;
    memset(&v221[1], 0, 32);
    LODWORD(v222) = 0;
    memset(v223, 0, sizeof(v223));
    v224 = 0x7FFFFFFFLL;
    v194 = 0;
    v192 = 0u;
    v193 = 0u;
    *(_QWORD *)v195 = 0x7FFFFFFFLL;
    if (re::convertMDLAssetToGeomSceneAndImportAnimation(&v143, "", (uint64_t)v219, (uint64_t)&v192, (uint64_t)&v206, (re::ModelIOSkinningData *)&v201, (char *)&v196, (re::AnimationMetaData *)&v225, v191, a4))
    {
      re::makeMeshAssetDataFromGeomScene((unint64_t)v219, (uint64_t)&v190, (uint64_t)buf);
      if (buf[0])
      {
        v56 = v23;
        re::createAnimationAssets((re *)&v144, (uint64_t)&v196, (uint64_t)&v225);
        v189 = 0;
        v187 = 0;
        v185 = 0;
        v186 = 0;
        v188 = 0;
        if (*((_QWORD *)&v232 + 1))
        {
          v58 = (uint64_t *)(v234 + 16);
          v59 = 32 * *((_QWORD *)&v232 + 1);
          do
          {
            v60 = *(v58 - 1);
            if ((v60 & 1) != 0)
              v61 = *v58;
            else
              v61 = (uint64_t)v58 - 7;
            v62 = v60 >> 1;
            v63 = v60 >> 1;
            if ((*(v58 - 1) & 1) != 0)
              v64 = v62;
            else
              v64 = v63;
            v65 = re::TimelineAsset::assetType(v57);
            re::ImportAssetTable::compiledAssetPath(v61, v64, (re **)v65, (re::DynamicString *)&v177);
            v66 = re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)&v185, &v177);
            v57 = v177;
            if (v177 && (v178 & 1) != 0)
              v57 = (re::TimelineAsset *)(*(uint64_t (**)(double))(*(_QWORD *)v177 + 40))(v66);
            v58 += 4;
            v59 -= 32;
          }
          while (v59);
        }
        v67 = (re *)re::AnimationLibraryAsset::buildAsset(&buf[8], (uint64_t)&v231 + 8, (uint64_t)&v228[32], (uint64_t)&v227 + 8, (uint64_t)&v185);
        v68 = re::globalAllocators(v67);
        v69 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v68[2] + 32))(v68[2], 960, 8);
        v70 = (re::MeshAsset *)re::MeshAsset::MeshAsset((uint64_t)v69, (uint64_t)&buf[8]);
        *((_DWORD *)v70 + 231) = 1;
        v71 = v158;
        v72 = re::MeshAsset::assetType(v70);
        v73 = (const re::DynamicString *)re::ImportAssetTable::addAsset(v71, (uint64_t)"singleMesh", 10, v69, (re **)v72);
        re::DynamicString::DynamicString((re::DynamicString *)&v182, v73);
        v181 = 0;
        v178 = 0;
        v179 = 0;
        v177 = 0;
        v180 = 0;
        re::createMaterialAssetsFromMaterialTable((uint64_t)&v144, (uint64_t)&v192, (_anonymous_namespace_ *)&v177);
        re::ecs2::EntityAssetData::addComponent<re::ecs2::MeshDeformationComponent>(v24);
        re::ecs2::EntityAssetData::addComponent<re::ecs2::RigComponent>(v24);
        re::ecs2::EntityAssetData::addComponent<re::ecs2::BlendShapeWeightsComponent>(v24);
        if (v208 && v203)
          re::ecs2::EntityAssetData::addComponent<re::ecs2::SkeletalPoseComponent>(v24);
        v74 = re::ecs2::EntityAssetData::addComponent<re::ecs2::MeshComponent>(v24);
        v75 = v74;
        v76 = (re::DynamicString *)(v74 + 4);
        if ((v183 & 1) != 0)
          v77 = *(re::AssetPath **)&v184[7];
        else
          v77 = (re::AssetPath *)v184;
        v78 = re::DynamicArray<re::AssetHandle>::operator=((re::AssetHandle *)(v75 + 7), (re::AssetHandle *)&v177);
        v16 = a1;
        if (v67)
        {
          v79 = v158;
          v80 = re::AnimationLibraryAsset::assetType(v78);
          v81 = re::ImportAssetTable::addAsset(v79, (uint64_t)"animationLibrary", 16, v67, (re **)v80);
          v82 = (_anonymous_namespace_ *)re::ecs2::EntityAssetData::addComponent<re::ecs2::AnimationLibraryComponent>(v24);
          v83 = (_anonymous_namespace_ *)((char *)v82 + 32);
          if ((*(_BYTE *)(v81 + 8) & 1) != 0)
            v84 = *(re::AssetPath **)(v81 + 16);
          else
            v84 = (re::AssetPath *)(v81 + 9);
        }
        re::DynamicArray<re::AssetHandle>::deinit((uint64_t)&v177);
        v23 = v56;
        if (v182 && (v183 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v182 + 40))();
        re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v185);
        re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)buf);
      }
      else
      {
        re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)buf);
      }
    }
    re::HashTable<re::ImportMaterialSignature,re::MaterialInfo,re::Hash<re::ImportMaterialSignature>,re::EqualTo<re::ImportMaterialSignature>,true,false>::deinit((uint64_t *)&v192);
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v223[8]);
    re::DynamicArray<re::GeomSkeleton>::deinit((uint64_t)&v221[2]);
    if (v219[1].__r_.__value_.__r.__words[2])
    {
      if (v221[1])
        (*(void (**)(void))(*(_QWORD *)v219[1].__r_.__value_.__r.__words[2] + 40))();
      v221[1] = 0;
      v220 = 0uLL;
      v219[1].__r_.__value_.__r.__words[2] = 0;
      ++LODWORD(v221[0]);
    }
    re::DynamicArray<re::GeomModelWithLods>::deinit((uint64_t)v219);
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(&v191[1], v128);

    re::AnimationMetaData::~AnimationMetaData((re::AnimationMetaData *)&v225, v129);
    re::DynamicArray<re::SkeletalPoseSampledAnimation>::deinit((uint64_t)&v196);
    re::DynamicArray<re::ModelIOSkinningData>::deinit((uint64_t)&v201);
    re::DynamicArray<re::ModelIOSkeleton>::deinit((uint64_t)&v206);
    v114 = v143;
  }
  else
  {
    v140 = *(int32x2_t *)(a3 + 68);
    v210 = 0;
    v208 = 0;
    v206 = 0;
    v207 = 0;
    v209 = 0;
    v205 = 0;
    v203 = 0;
    v201 = 0;
    v202 = 0;
    v204 = 0;
    v200 = 0;
    v198 = 0;
    v196 = 0;
    v197 = 0;
    v199 = 0;
    v225 = 0uLL;
    *(_QWORD *)&v226 = 0;
    v227 = 0u;
    memset(v228, 0, 20);
    DWORD2(v226) = 0;
    *(_OWORD *)&v228[24] = 0u;
    v229 = 0u;
    v231 = 0u;
    v232 = 0u;
    v230 = 0;
    v233 = 0;
    v234 = 0u;
    memset(v235, 0, sizeof(v235));
    v236 = 0x7FFFFFFFLL;
    v237 = 0u;
    v238 = 0u;
    v240 = 0x7FFFFFFFLL;
    v241 = 0u;
    v242 = 0u;
    v239 = 0;
    v243 = 0;
    v244 = 0x7FFFFFFFLL;
    v249 = 0;
    v247 = 0;
    v248 = 0;
    v245 = 0;
    v246 = 0;
    LOBYTE(v192) = 1;
    v43 = v22;
    re::importSkinningAndSkeletalAnimations(v22, (uint64_t)&v206, (re::ModelIOSkinningData *)&v201, (char *)&v196, (re::AnimationMetaData *)&v225, (unsigned __int8 *)v219);
    data = (re *)re::Result<re::Unit,re::DetailedError>::operator=((uint64_t)&v192, (uint64_t)v219);
    if (!v219[0].__r_.__value_.__s.__data_[0])
    {
      data = (re *)v219[1].__r_.__value_.__l.__data_;
      if (v219[1].__r_.__value_.__r.__words[0])
      {
        if ((v219[1].__r_.__value_.__s.__data_[8] & 1) != 0)
          data = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v219[1].__r_.__value_.__l.__data_ + 40))();
      }
    }
    if (!(_BYTE)v192)
    {
      v45 = (id)*re::pipelineLogObjects(data);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
      {
        std::error_code::message(v219, (const std::error_code *)((char *)&v192 + 8));
        v137 = (v219[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
             ? v219
             : (std::string *)v219[0].__r_.__value_.__r.__words[0];
        v138 = (v194 & 1) != 0 ? *(int **)&v195[4] : (int *)((char *)&v194 + 1);
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v137;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v138;
        _os_log_error_impl(&dword_224FE9000, v45, OS_LOG_TYPE_ERROR, "Error: %s\nDetails:\n%s", buf, 0x16u);
        if (SHIBYTE(v219[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v219[0].__r_.__value_.__l.__data_);
      }

      if (a4)
        *a4 = CFErrorCreate(0, CFSTR("REPipelineErrorDomain"), 3, 0);
    }
    v220 = 0u;
    v222 = 0;
    memset(v221, 0, sizeof(v221));
    memset(v219, 0, sizeof(v219));
    v219[0].__r_.__value_.__r.__words[2] = (std::string::size_type)&str_110;
    v219[1].__r_.__value_.__s.__data_[0] = 1;
    *(_QWORD *)&v220 = 0;
    DWORD2(v220) = 0;
    re::DynamicArray<re::ecs2::EntityAssetData>::add(v20, (uint64_t)v219);
    re::ecs2::EntityAssetData::~EntityAssetData((re::ecs2::EntityAssetData *)v219);
    v46 = *(_QWORD *)(v20 + 32);
    v47 = *(_QWORD *)(v20 + 16) - 1;
    if (v152)
    {
      objc_msgSend(v152, "lastPathComponent");
      v48 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      re::DynamicString::format((re::DynamicString *)"rootEntity-%s", (re::DynamicString *)&v185, objc_msgSend(v48, "UTF8String"));

    }
    else
    {
      v49 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"rootEntity-%s", (re::DynamicString *)&v185, "mdlAsset");
    }
    if ((v186 & 1) != 0)
      v85 = v187;
    else
      v85 = (char *)&v186 + 1;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = &str_110;
    v86 = v46 + 112 * v47;
    v87 = *(_QWORD *)buf;
    v88 = *(_QWORD *)&buf[8];
    *(_QWORD *)&buf[8] = &str_110;
    *(_QWORD *)buf = 0;
    v89 = *(_QWORD *)(v86 + 16);
    v90 = v87 & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(v86 + 8) & 1;
    *(_QWORD *)(v86 + 16) = v88;
    v219[0].__r_.__value_.__l.__size_ = v89;
    v219[0].__r_.__value_.__r.__words[0] = v90;
    *(_QWORD *)(v86 + 8) = v87;
    re::StringID::destroyString((re::StringID *)v219);
    re::StringID::destroyString((re::StringID *)buf);
    v91 = re::ecs2::EntityAssetData::addComponent<re::ecs2::TransformComponent>((_DWORD *)(v46 + 112 * v47));
    objc_msgSend(v43, "upAxis");
    v93 = vmulq_f32(v92, v92);
    v94 = vaddq_f32(v93, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v93.f32, 1));
    v95 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v93, 2), v94);
    v95.f32[0] = fabsf(v95.f32[0]);
    v94.i32[0] = 786163454;
    v96 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v94, v95), 0), (int8x16_t)xmmword_2260E5F20, (int8x16_t)v92);
    v97 = vmulq_f32(v96, v96);
    LODWORD(v98) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v97, 2), vaddq_f32(v97, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v97.f32, 1))).u32[0];
    if (fabsf(v98) >= 1.0e-10)
    {
      v99 = v98;
      v100 = vrsqrte_f32((float32x2_t)LODWORD(v98));
      v101 = vmul_f32(v100, vrsqrts_f32((float32x2_t)LODWORD(v99), vmul_f32(v100, v100)));
      v96 = vmulq_n_f32(v96, vmul_f32(v101, vrsqrts_f32((float32x2_t)LODWORD(v99), vmul_f32(v101, v101))).f32[0]);
    }
    v102 = vrsqrte_f32((float32x2_t)1065353216);
    v103 = vmul_f32(v102, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v102, v102)));
    v104 = vmulq_n_f32((float32x4_t)xmmword_2260E5F20, vmul_f32(v103, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v103, v103))).f32[0]);
    v105 = vmulq_f32(v96, v104);
    v106 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v105, 2), vaddq_f32(v105, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v105.f32, 1))).u64[0];
    if (*(float *)v106.i32 == -1.0
      || (v107 = (float)((float)(fabsf(*(float *)v106.i32) + 1.0) + 1.0) * 0.00001,
          *(float *)v106.i32 = *(float *)v106.i32 + 1.0,
          fabsf(*(float *)v106.i32) < v107))
    {
      if (fabsf(v96.f32[2]) >= 0.00001)
      {
        v108.i32[0] = 0;
        v108.f32[1] = -v96.f32[2];
        v108.i64[1] = v96.u32[1];
      }
      else
      {
        v108 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v96.f32[1]), (int32x4_t)v96);
      }
      v109 = (int32x4_t)vmulq_f32(v108, v108);
      v109.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v109, 2), vadd_f32(*(float32x2_t *)v109.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v109.i8, 1))).u32[0];
      v110 = vrsqrte_f32((float32x2_t)v109.u32[0]);
      v111 = vmul_f32(v110, vrsqrts_f32((float32x2_t)v109.u32[0], vmul_f32(v110, v110)));
      v112 = vmulq_n_f32(v108, vmul_f32(v111, vrsqrts_f32((float32x2_t)v109.u32[0], vmul_f32(v111, v111))).f32[0]);
      v113 = 0.0;
    }
    else
    {
      v127 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v104, (int32x4_t)v104), (int8x16_t)v104, 0xCuLL), vnegq_f32(v96)), v104, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v96, (int32x4_t)v96), (int8x16_t)v96, 0xCuLL));
      *(float *)v106.i32 = sqrtf(*(float *)v106.i32 + *(float *)v106.i32);
      v113 = *(float *)v106.i32 * 0.5;
      v112 = vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v127, (int32x4_t)v127), v127, 0xCuLL), (float32x4_t)vdupq_lane_s32(v106, 0));
    }
    v112.f32[3] = v113;
    *((int32x4_t *)v91 + 2) = vdupq_lane_s32(v140, 0);
    *((float32x4_t *)v91 + 3) = v112;
    v190 = 0u;
    memset(v191, 0, 48);
    v114 = v43;
    v115 = objc_msgSend(v114, "countByEnumeratingWithState:objects:count:", &v190, v219, 16);
    if (v115)
    {
      v116 = v115;
      v117 = v46 + 112 * v47;
      v118 = v117 + 72;
      v119 = *(_QWORD *)v191[0];
      v120 = (_QWORD *)(v117 + 104);
      v121 = (_QWORD *)(v117 + 88);
      do
      {
        v122 = v114;
        for (i = 0; i != v116; ++i)
        {
          if (*(_QWORD *)v191[0] != v119)
            objc_enumerationMutation(v122);
          v124 = *(void **)(*((_QWORD *)&v190 + 1) + 8 * i);
          v218 = 0;
          v217 = 0;
          v214 = 0u;
          memset(buf, 0, sizeof(buf));
          *(_QWORD *)&buf[16] = &str_110;
          buf[24] = 1;
          v212 = 0;
          v213 = 0;
          *(_QWORD *)&v214 = 0;
          DWORD2(v214) = 0;
          v215 = 0u;
          v216 = 0u;
          re::DynamicArray<re::ecs2::EntityAssetData>::add(v118, (uint64_t)buf);
          re::ecs2::EntityAssetData::~EntityAssetData((re::ecs2::EntityAssetData *)buf);
          re::loadMDLObject((uint64_t)&v144, v124, *v120 + 112 * *v121 - 112, (uint64_t)&v206, (uint64_t)&v201, (uint64_t)&v225);
        }
        v114 = v122;
        v116 = objc_msgSend(v122, "countByEnumeratingWithState:objects:count:", &v190, v219, 16);
      }
      while (v116);
    }

    v125.n128_f64[0] = re::createAnimationAssets((re *)&v144, (uint64_t)&v196, (uint64_t)&v225);
    if (v185 && (v186 & 1) != 0)
      (*(void (**)(double))(*(_QWORD *)v185 + 40))(v125.n128_f64[0]);
    v16 = a1;
    if (!(_BYTE)v192 && *((_QWORD *)&v193 + 1) && (v194 & 1) != 0)
      (*(void (**)(__n128))(**((_QWORD **)&v193 + 1) + 40))(v125);
    re::AnimationMetaData::~AnimationMetaData((re::AnimationMetaData *)&v225, v125.n128_f64[0]);
    re::DynamicArray<re::SkeletalPoseSampledAnimation>::deinit((uint64_t)&v196);
    re::DynamicArray<re::ModelIOSkinningData>::deinit((uint64_t)&v201);
    re::DynamicArray<re::ModelIOSkeleton>::deinit((uint64_t)&v206);
  }

  v130 = v16 + 1;
  if (v16 + 1 != (_QWORD *)v159)
  {
    v131 = *(_QWORD *)v159;
    if (!*v130 || *v130 == *(_QWORD *)v159)
    {
      *(_QWORD *)v159 = *v130;
      v132 = *(_QWORD *)&v159[8];
      v133 = *(_QWORD *)&v159[16];
      v134 = *((_OWORD *)v16 + 1);
      v135 = *((_OWORD *)v16 + 2);
      v16[1] = v131;
      v16[2] = v132;
      v16[3] = v133;
      *(_OWORD *)&v159[8] = v134;
      *((_OWORD *)v16 + 2) = *(_OWORD *)&v159[24];
      *(_OWORD *)&v159[24] = v135;
    }
    else if (*(_QWORD *)v159)
    {
      re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy((uint64_t)v130, (uint64_t)v159);
      ++*((_DWORD *)v16 + 12);
    }
    else
    {
      re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)v130);
    }
  }
  re::HashTable<re::DynamicString,re::DynamicArray<re::AssetHandle>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v173);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v170);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v167);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v164);
  re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v159);

  if ((_QWORD)v153)
  {
    if ((BYTE8(v153) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v153 + 40))();
    v153 = 0u;
    v154 = 0u;
  }

  return 1;
}

__n128 re::DynamicArray<re::ImportedScene>::add(uint64_t a1, __n128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __n128 result;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::ImportedScene>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::ImportedScene>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  v11 = *(_QWORD *)(a1 + 32) + 160 * v5;
  result = *a2;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(__n128 *)v11 = result;
  *(_QWORD *)(v11 + 40) = a2[2].n128_u64[1];
  v13 = a2[1].n128_u64[1];
  *(_QWORD *)(v11 + 16) = a2[1].n128_u64[0];
  a2[1].n128_u64[0] = 0;
  v14 = a2[2].n128_u64[0];
  a2[2].n128_u64[1] = 0;
  v16 = *(_QWORD *)(v11 + 24);
  v15 = *(_QWORD *)(v11 + 32);
  *(_QWORD *)(v11 + 24) = v13;
  *(_QWORD *)(v11 + 32) = v14;
  a2[1].n128_u64[1] = v16;
  a2[2].n128_u64[0] = v15;
  *(_QWORD *)(v11 + 48) = a2[3].n128_u64[0];
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_QWORD *)(v11 + 80) = a2[5].n128_u64[0];
  v17 = a2[4].n128_u64[0];
  *(_QWORD *)(v11 + 56) = a2[3].n128_u64[1];
  a2[3].n128_u64[1] = 0;
  v18 = a2[4].n128_u64[1];
  a2[5].n128_u64[0] = 0;
  v20 = *(_QWORD *)(v11 + 64);
  v19 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v11 + 64) = v17;
  *(_QWORD *)(v11 + 72) = v18;
  a2[4].n128_u64[0] = v20;
  a2[4].n128_u64[1] = v19;
  *(_BYTE *)(v11 + 88) = a2[5].n128_u8[8];
  *(_QWORD *)(v11 + 104) = 0;
  *(_QWORD *)(v11 + 112) = 0;
  *(_QWORD *)(v11 + 96) = 0;
  *(_QWORD *)(v11 + 104) = a2[6].n128_u64[1];
  a2[6].n128_u64[1] = 0;
  v21 = *(_QWORD *)(v11 + 96);
  *(_QWORD *)(v11 + 96) = 0;
  *(_QWORD *)(v11 + 96) = a2[6].n128_u64[0];
  a2[6].n128_u64[0] = v21;
  v22 = *(_QWORD *)(v11 + 112);
  *(_QWORD *)(v11 + 112) = a2[7].n128_u64[0];
  a2[7].n128_u64[0] = v22;
  *(_QWORD *)(v11 + 152) = 0;
  *(_QWORD *)(v11 + 128) = 0;
  *(_QWORD *)(v11 + 136) = 0;
  *(_QWORD *)(v11 + 120) = 0;
  *(_DWORD *)(v11 + 144) = 0;
  v23 = a2[8].n128_u64[0];
  *(_QWORD *)(v11 + 120) = a2[7].n128_u64[1];
  *(_QWORD *)(v11 + 128) = v23;
  a2[7].n128_u64[1] = 0;
  a2[8].n128_u64[0] = 0;
  v24 = *(_QWORD *)(v11 + 136);
  *(_QWORD *)(v11 + 136) = a2[8].n128_u64[1];
  a2[8].n128_u64[1] = v24;
  v25 = *(_QWORD *)(v11 + 152);
  *(_QWORD *)(v11 + 152) = a2[9].n128_u64[1];
  a2[9].n128_u64[1] = v25;
  ++a2[9].n128_u32[0];
  ++*(_DWORD *)(v11 + 144);
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::importSceneWithUSDScene(uint64_t a1, id *a2, uint64_t a3)
{
  float v3;
  _anonymous_namespace_ *v6;
  uint64_t *v7;
  const char *v8;
  uint64_t *v9;
  char v10;
  char v11;
  id v12;
  signed int v13;
  size_t v14;
  void *v15;
  id v16;
  id *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  double v27;
  double v28;
  double v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  float v34;
  float v35;
  id v36;
  void *v37;
  id v38;
  void *v39;
  float v40;
  id v41;
  void *v42;
  id v43;
  void *v44;
  void *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  id v50;
  void *v51;
  uint64_t v52;
  void *v53;
  int v54;
  id *v55;
  unint64_t v56;
  void *v57;
  void *v58;
  int v59;
  void *v60;
  void *v61;
  id v62;
  uint64_t v63;
  id *v64;
  void *v65;
  unint64_t v66;
  id v67;
  float32x4_t v68;
  float v69;
  float32x2_t v70;
  float32x2_t v71;
  float32x2_t v72;
  float32x2_t v73;
  id v74;
  id *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  id v81;
  const char *v82;
  size_t v83;
  char isRootNodeByPath;
  uint64_t *v85;
  uint64_t v86;
  _BYTE *v87;
  re *v88;
  uint64_t *v89;
  uint64_t v90;
  id v91;
  int v92;
  char v93;
  id v94;
  id v95;
  _anonymous_namespace_ *v96;
  unint64_t v97;
  _anonymous_namespace_ *v98;
  id v99;
  const char *v100;
  void *v101;
  id v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  int32x2_t v106;
  float v107;
  float32x4_t v108;
  int32x4_t v109;
  float32x2_t v110;
  float32x2_t v111;
  float32x4_t v112;
  float v113;
  uint64_t v114;
  id v115;
  id v116;
  _anonymous_namespace_ *v117;
  const char *v118;
  unint64_t v119;
  const StringID *v120;
  const char *v121;
  re *v122;
  uint64_t *v123;
  void *v124;
  re::SkeletonAsset *v125;
  uint64_t *v126;
  uint64_t v127;
  re::MeshDeformationAsset *v128;
  const char *v129;
  unint64_t v130;
  unint64_t *v131;
  const char *v132;
  const char *v133;
  const char *v134;
  _anonymous_namespace_ *v135;
  size_t v136;
  unint64_t v137;
  int v138;
  uint64_t *v139;
  int v140;
  uint64_t **v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t v144;
  int v145;
  const char *v146;
  unint64_t v147;
  uint64_t *v148;
  size_t v149;
  char *v150;
  unint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  int *v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  __n128 v161;
  BOOL v162;
  unint64_t i;
  _anonymous_namespace_ *v164;
  _anonymous_namespace_ *v165;
  const char *v166;
  __n128 v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  void *v173;
  id v174;
  const char *v175;
  size_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  _anonymous_namespace_ *v184;
  _BYTE *v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unsigned int v190;
  _anonymous_namespace_ *v191;
  _anonymous_namespace_ *v192;
  re::StringID *p_p_dst;
  unsigned int v194;
  unsigned int v195;
  _anonymous_namespace_ *v196;
  int8x16_t v197;
  void *v198;
  unsigned int v199;
  uint64_t v200;
  int *v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  void *v209;
  unsigned int v210;
  unsigned int v211;
  void *v212;
  uint64_t v213;
  id *v214;
  uint64_t v215;
  void **v216;
  void *v217;
  float32x4_t v219;
  float32x4_t v220;
  float v221;
  id *v222;
  uint64_t v223;
  unsigned __int8 v224;
  void *v225;
  unsigned __int8 v226;
  void *v227;
  float32x4_t v228;
  uint64_t v229;
  float32x4_t v230;
  uint64_t v232;
  void *v233;
  void *v234;
  uint64_t v235;
  void *v236;
  id *v237;
  uint64_t v238;
  char *v239;
  char *v240;
  unint64_t v241;
  uint64_t v242;
  unsigned int v243;
  _BYTE **v244;
  _anonymous_namespace_ *v245;
  float32x4_t v246;
  uint64_t v247;
  int32x2_t v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  int v252;
  id *v253;
  uint64_t *v254;
  id v255;
  id v256;
  __int16 v257;
  char v258;
  char v260;
  uint64_t v261;
  id v262;
  _QWORD v263[5];
  id v264;
  __int16 v265;
  uint64_t *v266;
  uint64_t v267[4];
  int v268;
  uint64_t v269;
  char v270;
  char v271;
  char v272;
  int v273;
  uint64_t v274[4];
  int v275;
  uint64_t v276;
  uint64_t v277[4];
  int v278;
  uint64_t v279;
  __int128 v280;
  __int128 v281;
  unsigned int v282;
  uint64_t v283;
  uint64_t v284[4];
  int v285;
  uint64_t v286;
  char v287;
  _BYTE v288[16];
  unsigned __int8 v289[4];
  float v290;
  unsigned __int8 v291[4];
  float v292;
  uint64_t *v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  char *v297;
  char *v298;
  int v299;
  uint64_t p_dst;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  int v305;
  uint64_t v306;
  char v307;
  _BYTE v308[24];
  __int128 v309;
  __int128 v310;
  unsigned int v311;
  uint64_t v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  _QWORD v316[2];
  __n128 v317;
  uint64_t v318;
  char v319;
  uint64_t v320;
  __int128 v321;
  __int128 v322;
  const char *v323;
  uint64_t v324;
  uint64_t v325;
  _QWORD v326[2];
  int v327;
  uint64_t v328[6];
  _QWORD v329[2];
  int v330;
  uint64_t v331[6];
  uint64_t v332;
  _QWORD v333[2];
  int v334;
  uint64_t v335[6];
  _QWORD v336[2];
  int v337;
  unint64_t v338;
  _QWORD v339[2];
  int v340;
  uint64_t v341;
  uint64_t v342[6];
  __int128 v343;
  __int128 v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  int v348;
  uint64_t v349;
  uint64_t v350[6];
  const char *v351[6];
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  char v357[128];
  char v358;
  __int128 __dst;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  char v375;
  uint64_t v376;

  v376 = *MEMORY[0x24BDAC8D0];
  v6 = re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v288, 2004, (uint64_t)a2);
  v7 = (uint64_t *)(a1 + 8);
  if ((*(_QWORD *)(a3 + 40) & 1) != 0)
    v8 = *(const char **)(a3 + 48);
  else
    v8 = (const char *)(a3 + 41);
  v232 = a1;
  v9 = (uint64_t *)(a1 + 104);
  v10 = *(_BYTE *)(a3 + 72);
  v11 = *(_BYTE *)(a3 + 73);
  v255 = *(id *)a3;
  v12 = *(id *)(a3 + 8);
  v256 = v12;
  v257 = *(_WORD *)(a3 + 16);
  v258 = *(_BYTE *)(a3 + 18);
  if (*(_BYTE *)(a3 + 19))
    v260 = *(_BYTE *)(a3 + 20);
  v229 = a3;
  v261 = *(_QWORD *)(a3 + 24);
  v262 = 0;
  memset(&v263[1], 0, 24);
  re::DynamicString::setCapacity(v263, 0);
  memset(&v263[4], 0, 3);
  v264 = 0;
  v265 = 257;
  v266 = v9;
  memset(v267, 0, sizeof(v267));
  v268 = 0;
  v269 = 0x7FFFFFFFLL;
  if (*v7)
  {
    if (*(_DWORD *)(v232 + 36) <= 3u)
      v13 = 3;
    else
      v13 = *(_DWORD *)(v232 + 36);
    re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v267, *v7, v13);
    re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy((uint64_t)v267, (uint64_t)v7);
  }
  v270 = 0;
  v271 = v10;
  v272 = v11;
  v273 = 1;
  memset(v274, 0, sizeof(v274));
  v276 = 0x7FFFFFFFLL;
  memset(v277, 0, sizeof(v277));
  v275 = 0;
  v278 = 0;
  v279 = 0x7FFFFFFFLL;
  v280 = 0u;
  v281 = 0u;
  v282 = 0;
  v283 = 0x7FFFFFFFLL;
  memset(v284, 0, sizeof(v284));
  v285 = 0;
  v286 = 0x7FFFFFFFLL;
  v287 = 0;
  if (v8)
  {
    v14 = strlen(v8);
    v317.n128_u64[0] = (unint64_t)v8;
    v317.n128_u64[1] = v14;
    re::DynamicString::operator=((re::DynamicString *)v263, (uint64_t)&v317);
  }
  *(_QWORD *)&__dst = *MEMORY[0x24BDD97D0];
  v317.n128_u64[0] = MEMORY[0x24BDBD1C0];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v317, &__dst, 1);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  v16 = v264;
  v264 = v15;

  LOBYTE(v263[4]) = *(_BYTE *)(a3 + 64);
  *(_WORD *)((char *)&v263[4] + 1) = *(_WORD *)(a3 + 65);
  BYTE1(v273) = *(_BYTE *)(a3 + 74);
  HIWORD(v273) = *(_WORD *)(a3 + 75);
  LOBYTE(v265) = *(_BYTE *)(a3 + 77);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)v274, a3 + 88);
  v270 = *(_BYTE *)(a3 + 79);
  v287 = *(_BYTE *)(a3 + 80);
  LOBYTE(v273) = *(_BYTE *)(a3 + 81);
  v17 = a2;
  v18 = *a2;
  objc_msgSend(v18, "metadata");
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v19, "allKeys");
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v20, "containsObject:", CFSTR("autoPlay")) & 1) != 0)
  {
    v21 = *a2;
    objc_msgSend(v21, "metadataWithKey:", CFSTR("autoPlay"));
    v22 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v22)
      goto LABEL_18;
    v18 = *a2;
    objc_msgSend(v18, "metadataWithKey:", CFSTR("autoPlay"));
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_BYTE *)(v232 + 329) = objc_msgSend(v19, "BOOLValue");
  }
  else
  {

  }
  v17 = a2;
LABEL_18:
  v23 = *v17;
  objc_msgSend(v23, "metadataWithKey:", CFSTR("timeCodesPerSecond"));
  v24 = (void *)objc_claimAutoreleasedReturnValue();

  if (v24)
  {
    v25 = *v17;
    objc_msgSend(v25, "metadataWithKey:", CFSTR("timeCodesPerSecond"));
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v26, "doubleValue");
    v28 = v27;

    if (v28 <= 0.0)
      v29 = 0.0416666667;
    else
      v29 = 1.0 / v28;
  }
  else
  {
    v29 = 0.0416666667;
  }
  v30 = *v17;
  objc_msgSend(v30, "metadataWithKey:", CFSTR("startTimeCode"));
  v31 = (void *)objc_claimAutoreleasedReturnValue();

  v227 = v31;
  if (v31)
  {
    v32 = *v17;
    objc_msgSend(v32, "metadataWithKey:", CFSTR("startTimeCode"));
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v33, "floatValue");
    v35 = v29 * v34;
    v221 = v35;

    v226 = 1;
  }
  else
  {
    v226 = 0;
  }
  v36 = *v17;
  objc_msgSend(v36, "metadataWithKey:", CFSTR("endTimeCode"));
  v37 = (void *)objc_claimAutoreleasedReturnValue();

  v225 = v37;
  if (v37)
  {
    v38 = *v17;
    objc_msgSend(v38, "metadataWithKey:", CFSTR("endTimeCode"));
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v39, "floatValue");
    v3 = v29 * v40;

    v224 = 1;
  }
  else
  {
    v224 = 0;
  }
  v41 = *v17;
  objc_msgSend(v41, "metadataWithKey:", CFSTR("upAxis"));
  v42 = (void *)objc_claimAutoreleasedReturnValue();

  if (v42)
  {
    v43 = *v17;
    objc_msgSend(v43, "metadataWithKey:", CFSTR("upAxis"));
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v44, "stringValue");
    v45 = (void *)objc_claimAutoreleasedReturnValue();

    v46 = objc_msgSend(v45, "isEqualToString:", CFSTR("Z"));
    if (v46)
      v47 = 1065353216;
    else
      v47 = 0;
    if (v46)
      v48 = 0;
    else
      v48 = 0x3F80000000000000;

    *(_QWORD *)&v49 = v48;
    *((_QWORD *)&v49 + 1) = v47;
  }
  else
  {
    v49 = xmmword_2260E5F20;
  }
  v228 = (float32x4_t)v49;
  v253 = 0;
  v251 = 0;
  v249 = 0;
  v250 = 0;
  v252 = 0;
  v50 = *v17;
  objc_msgSend(v50, "nodeIterator");
  v51 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v51, "nextObject");
  v52 = objc_claimAutoreleasedReturnValue();
  if (v52)
  {
    v53 = (void *)v52;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    do
    {
      objc_msgSend(v53, "metadataWithKey:", CFSTR("kind"));
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v57, "stringValue");
      v58 = (void *)objc_claimAutoreleasedReturnValue();
      v59 = objc_msgSend(v58, "isEqual:", CFSTR("sceneLibrary"));

      if (v59)
      {
        objc_msgSend(v53, "loadedChildIterator");
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v60, "nextObject");
        v61 = (void *)objc_claimAutoreleasedReturnValue();
        while (v61)
        {
          if (v56 >= v250)
          {
            re::DynamicArray<NSObject  {objcproto18OS_dispatch_source}* {__strong}>::growCapacity(&v249, v56 + 1);
            v56 = v251;
            v55 = v253;
          }
          v62 = v61;
          v55[v56] = v62;
          v56 = ++v251;
          v54 = ++v252;
          objc_msgSend(v60, "nextObject");
          v61 = (void *)objc_claimAutoreleasedReturnValue();

        }
      }
      objc_msgSend(v51, "nextObject");
      v63 = objc_claimAutoreleasedReturnValue();

      v53 = (void *)v63;
    }
    while (v63);
    v17 = a2;
    if (v56)
    {
      v64 = v253;
      goto LABEL_54;
    }
  }
  else
  {
    v54 = 0;
  }
  objc_msgSend(v50, "rootNode");
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  if (v250)
  {
    v66 = 0;
  }
  else
  {
    re::DynamicArray<NSObject  {objcproto18OS_dispatch_source}* {__strong}>::growCapacity(&v249, 1uLL);
    v66 = v251;
    v54 = v252;
  }
  v64 = v253;
  v67 = v65;
  v64[v66] = v67;
  v56 = v66 + 1;
  v251 = v66 + 1;
  v252 = v54 + 1;

LABEL_54:
  if (v56)
  {
    v222 = &v64[v56];
    v68 = vmulq_f32(v228, v228);
    v68.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 2), vaddq_f32(v68, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.f32, 1))).u32[0];
    v69 = fabsf(v68.f32[0]);
    v70 = vrsqrte_f32((float32x2_t)v68.u32[0]);
    v71 = vmul_f32(v70, vrsqrts_f32((float32x2_t)v68.u32[0], vmul_f32(v70, v70)));
    v220 = vmulq_n_f32(v228, vmul_f32(v71, vrsqrts_f32((float32x2_t)v68.u32[0], vmul_f32(v71, v71))).f32[0]);
    v72 = vrsqrte_f32((float32x2_t)1065353216);
    v73 = vmul_f32(v72, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v72, v72)));
    v230 = vmulq_n_f32((float32x4_t)xmmword_2260E5F20, vmul_f32(v73, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v73, v73))).f32[0]);
    v219 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v230, (int32x4_t)v230), (int8x16_t)v230, 0xCuLL);
    v223 = *MEMORY[0x24BEBEDC0];
    while (1)
    {
      v74 = *v64;
      re::ImportedScene::ImportedScene((re::ImportedScene *)&v317);
      re::DynamicArray<re::ImportedScene>::add(v232 + 288, &v317);
      re::DynamicArray<re::AssetHandle>::deinit((uint64_t)&v325);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v323);
      if ((_QWORD)v321)
      {
        if ((BYTE8(v321) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v321 + 40))();
        v321 = 0u;
        v322 = 0u;
      }
      if (v318 && (v319 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v318 + 40))();
      v75 = v17;
      v238 = *(_QWORD *)(v232 + 320);
      v76 = *(_QWORD *)(v232 + 304);
      objc_msgSend(v74, "metadataWithKey:", CFSTR("sceneName"));
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      if (!v77)
      {
        objc_msgSend(v74, "customMetadataWithKey:", CFSTR("sceneName"));
        v77 = (void *)objc_claimAutoreleasedReturnValue();
      }
      v78 = v76 - 1;
      objc_msgSend(v77, "stringValue");
      v79 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v80 = objc_msgSend(v79, "UTF8String");

      if (v80)
      {
        objc_msgSend(v77, "stringValue");
        v81 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v82 = (const char *)objc_msgSend(v81, "UTF8String");
        v83 = strlen(v82);
        v317.n128_u64[0] = (unint64_t)v82;
        v317.n128_u64[1] = v83;
        re::DynamicString::operator=((re::DynamicString *)(v238 + 160 * v78 + 16), (uint64_t)&v317);

      }
      isRootNodeByPath = re::isRootNodeByPath(v74);
      objc_msgSend(v74, "specifier");
      v85 = (uint64_t *)objc_claimAutoreleasedReturnValue();
      v86 = v238 + 160 * v78;
      *(_BYTE *)(v86 + 88) = objc_msgSend(v85, "isEqual:", v223);
      v87 = (_BYTE *)(v86 + 88);

      v237 = v64;
      if ((isRootNodeByPath & 1) != 0)
        *v87 = 1;
      else
        v88 = (re *)objc_msgSend(v74, "setSpecifier:", v223);
      v89 = re::globalAllocators(v88);
      v90 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v89[2] + 32))(v89[2], 40, 8);
      *(_OWORD *)v90 = 0u;
      *(_OWORD *)(v90 + 16) = 0u;
      *(_QWORD *)(v90 + 32) = 0;
      v242 = v90;
      *(_QWORD *)(v238 + 160 * v78 + 48) = v90;
      v91 = *v75;
      v92 = *(unsigned __int8 *)(v229 + 67);
      v248 = *(int32x2_t *)(v229 + 68);
      v93 = BYTE2(*(_DWORD *)(v229 + 76));
      v94 = v91;
      v95 = v74;
      v235 = v78;
      if (v92)
      {
        HIBYTE(v265) = 0;
        v96 = re::USDImportContext::USDImportContext((re::USDImportContext *)&v317);
        v291[0] = v226;
        if (v227)
          v292 = v221;
        v289[0] = v224;
        if (v225)
          v290 = v3;
        v97 = re::USDImportContext::pushNodeLevel((re::USDImportContext *)&v317, "", "", "", 0);
      }
      else
      {
        v98 = re::USDImportContext::USDImportContext((re::USDImportContext *)&v317);
        v291[0] = v226;
        if (v227)
          v292 = v221;
        v289[0] = v224;
        if (v225)
          v290 = v3;
        objc_msgSend(v95, "name");
        v85 = (uint64_t *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v85, "stringValue");
        v99 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v100 = (const char *)objc_msgSend(v99, "UTF8String");
        objc_msgSend(v95, "path");
        v101 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v101, "stringValue");
        v102 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v97 = re::USDImportContext::pushNodeLevel((re::USDImportContext *)&v317, v100, "(default)", (const char *)objc_msgSend(v102, "UTF8String"), 1);

      }
      v103 = v228;
      v104 = v228;
      if (v69 >= 1.0e-10)
      {
        v103 = v220;
        v104 = v220;
      }
      v105 = vmulq_f32(v103, v230);
      v106 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v105, 2), vaddq_f32(v105, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v105.f32, 1))).u64[0];
      if (*(float *)v106.i32 == -1.0
        || (v107 = (float)((float)(fabsf(*(float *)v106.i32) + 1.0) + 1.0) * 0.00001,
            *(float *)v106.i32 = *(float *)v106.i32 + 1.0,
            fabsf(*(float *)v106.i32) < v107))
      {
        if (fabsf(v103.f32[2]) >= 0.00001)
        {
          v108.i32[0] = 0;
          v108.f32[1] = -v103.f32[2];
          v108.i64[1] = v103.u32[1];
        }
        else
        {
          v108 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v103.f32[1]), (int32x4_t)v103);
        }
        v109 = (int32x4_t)vmulq_f32(v108, v108);
        v109.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v109, 2), vadd_f32(*(float32x2_t *)v109.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v109.i8, 1))).u32[0];
        v110 = vrsqrte_f32((float32x2_t)v109.u32[0]);
        v111 = vmul_f32(v110, vrsqrts_f32((float32x2_t)v109.u32[0], vmul_f32(v110, v110)));
        v112 = vmulq_n_f32(v108, vmul_f32(v111, vrsqrts_f32((float32x2_t)v109.u32[0], vmul_f32(v111, v111))).f32[0]);
        v113 = 0.0;
      }
      else
      {
        v197 = (int8x16_t)vmlaq_f32(vmulq_f32(v219, vnegq_f32(v104)), v230, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v103, (int32x4_t)v103), (int8x16_t)v103, 0xCuLL));
        *(float *)v106.i32 = sqrtf(*(float *)v106.i32 + *(float *)v106.i32);
        v113 = *(float *)v106.i32 * 0.5;
        v112 = vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v197, (int32x4_t)v197), v197, 0xCuLL), (float32x4_t)vdupq_lane_s32(v106, 0));
      }
      v236 = v77;
      v112.f32[3] = v113;
      v246 = v112;
      v114 = re::BucketArray<re::USDImportContext::NodeStackItem,32ul>::operator[]((uint64_t)v336, *(_QWORD *)(v349 + 8 * v347 - 8));
      *(int32x4_t *)(v114 + 432) = vdupq_lane_s32(v248, 0);
      *(float32x4_t *)(v114 + 448) = v246;
      *(_QWORD *)(v114 + 464) = 0;
      *(_QWORD *)(v114 + 472) = 0;
      v115 = v94;
      v116 = v95;
      re::loadUSKSkeletalAnimationNodes(v116, (uint64_t)&v317);
      re::loadUSKSkeletonNodes(v116, (uint64_t)&v317);
      re::loadUSKBlendShapeNodes(v116, (uint64_t)&v317);
      re::loadTransformAndMeshNodes(v115, v116, (re::USDImportContext *)&v317, 1);
      re::loadUSKDeformerStackNodes(v115, v116, (uint64_t)&v317);
      v233 = v115;

      re::loadUSKPhysicsNodes(v116, (uint64_t)&v317);
      v234 = v116;

      --v347;
      ++v348;
      if (!v92)
      {
        while (v97 < v338)
          v117 = (_anonymous_namespace_ *)re::USDImportContext::setNodeAsEntity((re::USDImportContext *)&v317, v97++);
      }
      v118 = v323;
      if (v323 && *(_BYTE *)(v320 + 96))
      {
        v119 = 0;
        do
        {
          v120 = (const StringID *)re::BucketArray<re::USDImportContextSkeletonData,4ul>::operator[]((uint64_t)&v321, v119);
          v85 = v266;
          v121 = *(const char **)(re::BucketArray<re::USDImportContextSkeletonData,4ul>::operator[]((uint64_t)&v321, v119)+ 8);
          v122 = (re *)strlen(v121);
          v123 = re::globalAllocators(v122);
          v124 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v123[2] + 32))(v123[2], 248, 8);
          re::StringID::StringID((re::StringID *)&__dst, v120 + 1);
          re::FixedArray<re::StringID>::FixedArray((unint64_t *)&v360, (uint64_t)&v120[2]);
          re::FixedArray<unsigned int>::FixedArray((uint64_t *)&v361 + 1, (uint64_t)&v120[3].var1);
          re::FixedArray<re::GenericSRT<float>>::FixedArray(&v363, (uint64_t)&v120[5]);
          re::SkeletonAsset::SkeletonAsset((uint64_t)v124, (uint64_t *)&__dst);
          v126 = re::SkeletonAsset::assetType(v125);
          re::ImportAssetTable::addAsset((_anonymous_namespace_ *)v85, (uint64_t)v121, (uint64_t)v122, v124, (re **)v126);
          if ((_QWORD)v363)
          {
            if (*((_QWORD *)&v363 + 1))
            {
              (*(void (**)(void))(*(_QWORD *)v363 + 40))();
              *((_QWORD *)&v363 + 1) = 0;
              *(_QWORD *)&v364 = 0;
            }
            *(_QWORD *)&v363 = 0;
          }
          if (*((_QWORD *)&v361 + 1))
          {
            if ((_QWORD)v362)
            {
              (*(void (**)(void))(**((_QWORD **)&v361 + 1) + 40))();
              v362 = 0uLL;
            }
            *((_QWORD *)&v361 + 1) = 0;
          }
          re::FixedArray<re::StringID>::deinit(&v360);
          re::StringID::destroyString((re::StringID *)&__dst);
          ++v119;
        }
        while (v118 != (const char *)v119);
      }
      v127 = v341;
      v314 = 0;
      v313 = 0;
      v315 = 0;
      v311 = 0;
      v309 = 0u;
      v310 = 0u;
      v312 = 0x7FFFFFFFLL;
      if (v127)
        break;
LABEL_166:
      v158 = *(_QWORD *)(v242 + 16);
      if (v158)
      {
        v159 = *(_QWORD *)(v242 + 32);
        v160 = 112 * v158;
        do
        {
          re::addPhysicsFromImportContext((uint64_t)&v317, (uint64_t)&v254, v159);
          v159 += 112;
          v160 -= 112;
        }
        while (v160);
      }
      v161.n128_f64[0] = re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v309);
      if (v313)
        v162 = v314 == 0;
      else
        v162 = 1;
      if (!v162)
        (*(void (**)(__n128))(*(_QWORD *)v313 + 40))(v161);
      if (v338)
      {
        for (i = 0; i < v338; ++i)
        {
          v164 = (_anonymous_namespace_ *)re::BucketArray<re::USDImportContext::NodeStackItem,32ul>::operator[]((uint64_t)v336, i);
          if (*((_QWORD *)v164 + 20) != -1)
          {
            v165 = v164;
            v166 = (const char *)*((_QWORD *)v164 + 6);
            v351[0] = *((const char **)v165 + 4);
            re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addNew<char const*>(v232 + 56, (re::DynamicString *)&__dst, v351);
            if ((_QWORD)__dst)
            {
              if ((BYTE8(__dst) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)__dst + 40))();
            }
          }
        }
      }
      re::USDImportContext::deinit((re::USDImportContext *)&v317);
      v167.n128_f64[0] = re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v350);
      if (v345)
      {
        if (v349)
          (*(void (**)(double))(*(_QWORD *)v345 + 40))(v167.n128_f64[0]);
        v349 = 0;
        v346 = 0;
        v347 = 0;
        v345 = 0;
        ++v348;
      }
      if ((_QWORD)v343)
      {
        if ((BYTE8(v343) & 1) != 0)
          (*(void (**)(__n128))(*(_QWORD *)v343 + 40))(v167);
        v343 = 0u;
        v344 = 0u;
      }
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v342);
      re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v339);
      if (v339[0])
      {
        v168 = v340;
        if ((v340 & 1) == 0)
        {
          (*(void (**)(void))(*(_QWORD *)v339[0] + 40))();
          v168 = v340;
        }
        v339[0] = 0;
        v339[1] = 0;
        v340 = (v168 | 1) + 2;
      }
      re::BucketArray<re::USDImportContext::NodeStackItem,32ul>::deinit((uint64_t)v336);
      if (v336[0])
      {
        v169 = v337;
        if ((v337 & 1) == 0)
        {
          (*(void (**)(void))(*(_QWORD *)v336[0] + 40))();
          v169 = v337;
        }
        v336[0] = 0;
        v336[1] = 0;
        v337 = (v169 | 1) + 2;
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v335);
      re::BucketArray<re::USDImportContextPhysicsColliderData,8ul>::deinit((uint64_t)v333);
      if (v333[0])
      {
        v170 = v334;
        if ((v334 & 1) == 0)
        {
          (*(void (**)(void))(*(_QWORD *)v333[0] + 40))();
          v170 = v334;
        }
        v333[0] = 0;
        v333[1] = 0;
        v334 = (v170 | 1) + 2;
      }
      re::USDImportContext::PhysicsColliderTable::~PhysicsColliderTable((re::USDImportContext::PhysicsColliderTable *)&v332);
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v331);
      re::BucketArray<re::USDImportContextBlendShapeData,8ul>::deinit((uint64_t)v329);
      if (v329[0])
      {
        v171 = v330;
        if ((v330 & 1) == 0)
        {
          (*(void (**)(void))(*(_QWORD *)v329[0] + 40))();
          v171 = v330;
        }
        v329[0] = 0;
        v329[1] = 0;
        v330 = (v171 | 1) + 2;
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v328);
      re::BucketArray<re::USDImportContextSkeletalAnimationData,8ul>::deinit((uint64_t)v326);
      if (v326[0])
      {
        v172 = v327;
        if ((v327 & 1) == 0)
        {
          (*(void (**)(void))(*(_QWORD *)v326[0] + 40))();
          v172 = v327;
        }
        v326[0] = 0;
        v326[1] = 0;
        v327 = (v172 | 1) + 2;
      }
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(&v324);
      re::BucketArray<re::USDImportContextSkeletonData,4ul>::deinit((uint64_t)&v321);
      if ((_QWORD)v321 && (v322 & 1) == 0)
        (*(void (**)(void))(*(_QWORD *)v321 + 40))();

      objc_msgSend(v234, "path");
      v173 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v173, "stringValue");
      v174 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v175 = (const char *)objc_msgSend(v174, "UTF8String");
      v176 = strlen(v175);
      v317.n128_u64[0] = (unint64_t)v175;
      v317.n128_u64[1] = v176;
      re::DynamicString::operator=((re::DynamicString *)(v238 + 160 * v235 + 56), (uint64_t)&v317);

      v64 = v237 + 1;
      v17 = a2;
      if (v237 + 1 == v222)
        goto LABEL_263;
    }
    v129 = 0;
    while (1)
    {
      v130 = (unint64_t)v314;
      if (v314 <= v129)
      {
        p_dst = 0;
        v362 = 0u;
        v363 = 0u;
        v360 = 0u;
        v361 = 0u;
        __dst = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v351[0]) = 136315906;
        *(const char **)((char *)v351 + 4) = "operator[]";
        WORD2(v351[1]) = 1024;
        *(_DWORD *)((char *)&v351[1] + 6) = 468;
        WORD1(v351[2]) = 2048;
        *(const char **)((char *)&v351[2] + 4) = v129;
        WORD2(v351[3]) = 2048;
        *(const char **)((char *)&v351[3] + 6) = (const char *)v130;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_297:
        p_dst = 0;
        v130 = (unint64_t)v351;
        v362 = 0u;
        v363 = 0u;
        v360 = 0u;
        v361 = 0u;
        __dst = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        LODWORD(v351[0]) = 136315906;
        *(const char **)((char *)v351 + 4) = "operator[]";
        WORD2(v351[1]) = 1024;
        *(_DWORD *)((char *)&v351[1] + 6) = 789;
        WORD1(v351[2]) = 2048;
        *(const char **)((char *)&v351[2] + 4) = v118;
        WORD2(v351[3]) = 2048;
        *(const char **)((char *)&v351[3] + 6) = v129;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_298;
      }
      if (v129[v315])
        goto LABEL_108;
      v131 = (unint64_t *)re::BucketArray<unsigned long,32ul>::operator[]((uint64_t)v339, (unint64_t)v129);
      v132 = (const char *)v266;
      v133 = (const char *)v317.n128_u64[1];
      v134 = *(const char **)(re::BucketArray<re::USDImportContext::NodeStackItem,32ul>::operator[]((uint64_t)v336, *v131)+ 32);
      v135 = (_anonymous_namespace_ *)strlen(v134);
      *(_QWORD *)&__dst = v134;
      *((_QWORD *)&__dst + 1) = v135;
      v351[0] = v132;
      memset(&v351[2], 0, 24);
      if (v135)
        v136 = (size_t)v135 + 1;
      else
        v136 = 0;
      re::DynamicString::setCapacity(&v351[1], v136);
      re::DynamicString::operator=((re::DynamicString *)&v351[1], (uint64_t)&__dst);
      v351[5] = v133;
      *((_QWORD *)&v352 + 1) = 0;
      *(_QWORD *)&v353 = 0;
      LODWORD(v352) = -8388609;
      DWORD2(v353) = 1;
      *(_QWORD *)&v355 = 0;
      v354 = 0uLL;
      DWORD2(v355) = 0;
      p_dst = 0;
      v301 = (uint64_t)&str_110;
      v306 = 0;
      v303 = 0;
      v304 = 0;
      v302 = 0;
      v305 = 0;
      v307 = 0;
      memset(v308, 0, sizeof(v308));
      v294 = 0;
      v293 = 0;
      LODWORD(v295) = 1;
      v297 = 0;
      v298 = 0;
      v296 = 0;
      v299 = 0;
      *(_QWORD *)re::BucketArray<re::TimelineGroupBuilder *,8ul>::addUninitialized((uint64_t)&v293) = v351;
      re::createEntityFromImportContext((_anonymous_namespace_ *)&__dst, (uint64_t)&v317, (uint64_t)&v254, (size_t)v129, (uint64_t)&v293, (unint64_t)&p_dst, (uint64_t)&v313, (unint64_t)&v309, 1);
      if ((_BYTE)__dst)
      {
        re::DynamicArray<re::ecs2::EntityAssetData>::add(v242, (uint64_t)&__dst + 8);
        if ((_BYTE)__dst)
          re::ecs2::EntityAssetData::~EntityAssetData((re::ecs2::EntityAssetData *)((char *)&__dst + 8));
      }
      v130 = (unint64_t)v298;
      if (v298)
      {
        v137 = 0;
        do
          re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[]((uint64_t)&v293, v137++);
        while (v130 != v137);
      }
      v85 = v293;
      if (v294)
        break;
      if (v293)
        goto LABEL_127;
LABEL_129:
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v308);
      re::DynamicArray<re::AnimationSceneEntityData>::deinit((uint64_t)&v302);
      re::StringID::destroyString((re::StringID *)&p_dst);
      re::BucketArray<re::TimelineGroupBuilder::TimelineData,8ul>::deinit((uint64_t)&v352 + 8);
      if (*((_QWORD *)&v352 + 1))
      {
        v140 = DWORD2(v353);
        if ((BYTE8(v353) & 1) == 0)
        {
          (*(void (**)(void))(**((_QWORD **)&v352 + 1) + 40))();
          v140 = DWORD2(v353);
        }
        *((_QWORD *)&v352 + 1) = 0;
        *(_QWORD *)&v353 = 0;
        DWORD2(v353) = (v140 | 1) + 2;
      }
      v128 = (re::MeshDeformationAsset *)v351[1];
      if (v351[1] && ((uint64_t)v351[2] & 1) != 0)
        v128 = (re::MeshDeformationAsset *)(*(uint64_t (**)(void))(*(_QWORD *)v351[1] + 40))();
LABEL_108:
      if (++v129 == (const char *)v127)
      {
        if (!HIDWORD(v310))
          goto LABEL_166;
        v141 = (uint64_t **)v266;
        v142 = re::MeshDeformationAsset::assetType(v128);
        v143 = *v141;
        v294 = 0;
        v295 = 0;
        LODWORD(v296) = 0;
        v297 = 0;
        v293 = v143;
        re::DynamicArray<float *>::setCapacity(&v293, 0);
        v145 = v296 + 1;
        LODWORD(v296) = v296 + 1;
        v146 = (const char *)v141[5];
        if (v146)
        {
          v118 = 0;
          while (1)
          {
            v147 = (unint64_t)v141[5];
            if (v147 <= (unint64_t)v118)
              break;
            v130 = (unint64_t)v118 >> 5;
            v85 = v141[1];
            if ((unint64_t)v85 <= (unint64_t)v118 >> 5)
              goto LABEL_299;
            v148 = (uint64_t *)(v141 + 3);
            if (((_BYTE)v141[2] & 1) == 0)
              v148 = v141[4];
            v85 = (uint64_t *)(v148[v130] + 48 * (v118 & 0x1F));
            v130 = v142[1];
            v149 = strlen((const char *)v130);
            v150 = re::DynamicString::find((re::DynamicString *)v85, (char *)v130, v149, 0, (uint64_t)&__dst);
            if ((_BYTE)__dst)
            {
              v151 = v295;
              if (v295 >= v294)
              {
                v152 = v295 + 1;
                if (v294 < v295 + 1)
                {
                  if (v293)
                  {
                    v153 = 2 * v294;
                    if (!v294)
                      v153 = 8;
                    if (v153 <= v152)
                      v154 = v295 + 1;
                    else
                      v154 = v153;
                    re::DynamicArray<float *>::setCapacity(&v293, v154);
                    v145 = v296;
                  }
                  else
                  {
                    re::DynamicArray<float *>::setCapacity(&v293, v152);
                    v145 = v296 + 1;
                  }
                }
                v151 = v295;
              }
              *(_QWORD *)&v297[8 * v151] = v85;
              v295 = v151 + 1;
              LODWORD(v296) = ++v145;
            }
            if (v146 == ++v118)
              goto LABEL_157;
          }
LABEL_298:
          re::internal::assertLog((re::internal *)6, v144, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, v118, v147);
          _os_crash();
          __break(1u);
LABEL_299:
          p_dst = 0;
          v362 = 0u;
          v363 = 0u;
          v360 = 0u;
          v361 = 0u;
          __dst = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v351[0]) = 136315906;
          *(const char **)((char *)v351 + 4) = "operator[]";
          WORD2(v351[1]) = 1024;
          *(_DWORD *)((char *)&v351[1] + 6) = 866;
          WORD1(v351[2]) = 2048;
          *(const char **)((char *)&v351[2] + 4) = (const char *)v130;
          WORD2(v351[3]) = 2048;
          *(const char **)((char *)&v351[3] + 6) = (const char *)v85;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
LABEL_157:
        v243 = v311;
        v155 = 0;
        if (v311)
        {
          v156 = (int *)v310;
          do
          {
            v157 = *v156;
            v156 += 14;
            if (v157 < 0)
              goto LABEL_162;
            ++v155;
          }
          while (v311 != v155);
          LODWORD(v155) = v311;
        }
LABEL_162:
        if (v311 == (_DWORD)v155)
          goto LABEL_163;
        v177 = v155;
        v178 = v310;
        v240 = v297;
        v241 = v295;
        v239 = &v297[8 * v295];
        while (2)
        {
          if (!v241)
            goto LABEL_248;
          v179 = v178 + 56 * v177;
          v85 = (uint64_t *)(v179 + 40);
          v244 = (_BYTE **)(v179 + 48);
          v180 = v240;
          while (1)
          {
            v181 = *(_QWORD **)(*(_QWORD *)v180 + 40);
            v182 = v181[7];
            if (v182)
              break;
LABEL_235:
            v180 += 8;
            if (v180 == v239)
              goto LABEL_248;
          }
          v183 = v181[9];
          v247 = v183 + 48 * v182;
LABEL_219:
          if (re::StringID::operator==((_QWORD *)(v183 + 8), (_QWORD *)(v178 + 56 * v177 + 8)))
          {
            v118 = *(const char **)(v183 + 40);
            v129 = (const char *)v181[2];
            if (v129 <= v118)
              goto LABEL_297;
            v184 = (_anonymous_namespace_ *)(v181[4] + 40 * (_QWORD)v118);
            if ((unint64_t)*v85 >= 0xFFFFFFFFFFFFFFFELL && (*v85 & 1) == 0)
            {
              v186 = *v244;
            }
            else if ((unint64_t)*v85 > 1 || (v186 = *v244) == 0)
            {
LABEL_230:
              v245 = v184;
              v187 = *((_QWORD *)v184 + 2);
              if (v187)
              {
                v188 = 0;
                v189 = *((_QWORD *)v184 + 4);
                v190 = 2;
                while (!re::StringID::operator==((_QWORD *)(v189 + 40 * v188), v85))
                {
                  v188 = v190++ - 1;
                  if (v187 <= v188)
                    goto LABEL_234;
                }
                v373 = 0u;
                v374 = 0u;
                v371 = 0u;
                v372 = 0u;
                v369 = 0u;
                v370 = 0u;
                v367 = 0u;
                v368 = 0u;
                v365 = 0u;
                v366 = 0u;
                v363 = 0u;
                v364 = 0u;
                v361 = 0u;
                v362 = 0u;
                __dst = 0u;
                v360 = 0u;
                v375 = -1;
                v191 = (_anonymous_namespace_ *)strlcpy((char *)&__dst, *(const char **)(v178 + 56 * v177 + 16), 0x80uLL);
                v351[0] = (const char *)0x4425D6C2BB3546C6;
                v351[1] = "FenceDeformer";
                p_dst = (uint64_t)&__dst;
                v301 = 257;
                memset(&v351[2], 0, 24);
                re::FixedArray<unsigned char>::copy(&v351[2], (uint64_t)&p_dst);
                re::DynamicArray<re::DeformationDefinition>::insert(v245, v190 - 1, (uint64_t *)v351);
                if (v351[2])
                {
                  if (v351[3])
                  {
                    (*(void (**)(void))(*(_QWORD *)v351[2] + 40))();
                    v351[3] = 0;
                    v351[4] = 0;
                  }
                  v351[2] = 0;
                }
                re::StringID::destroyString((re::StringID *)v351);
                if (*((_QWORD *)v245 + 2) > (unint64_t)v190)
                {
                  memset(v357, 0, sizeof(v357));
                  v355 = 0u;
                  v356 = 0u;
                  v353 = 0u;
                  v354 = 0u;
                  v352 = 0u;
                  memset(v351, 0, sizeof(v351));
                  v358 = -1;
                  v192 = (_anonymous_namespace_ *)strlcpy(v357, *(const char **)(v178 + 56 * v177 + 32), 0x80uLL);
                  v358 = 14;
                  p_dst = 0x4425D6C2BB3546C6;
                  v301 = (uint64_t)"FenceDeformer";
                  v316[0] = v351;
                  v316[1] = 257;
                  v303 = 0;
                  v304 = 0;
                  v302 = 0;
                  re::FixedArray<unsigned char>::copy(&v302, (uint64_t)v316);
                  re::DynamicArray<re::DeformationDefinition>::insert(v245, v190, &p_dst);
                  if (v302)
                  {
                    if (v303)
                    {
                      (*(void (**)(void))(*(_QWORD *)v302 + 40))();
                      v303 = 0;
                      v304 = 0;
                    }
                    v302 = 0;
                  }
                  p_p_dst = (re::StringID *)&p_dst;
LABEL_247:
                  re::StringID::destroyString(p_p_dst);
                }
LABEL_248:
                v178 = v310;
                if (v311 <= (int)v155 + 1)
                  v194 = v155 + 1;
                else
                  v194 = v311;
                while (1)
                {
                  v177 = (v155 + 1);
                  if (v194 - 1 == (_DWORD)v155)
                    break;
                  LODWORD(v155) = v155 + 1;
                  v195 = v177;
                  if ((*(_DWORD *)(v310 + 56 * v177) & 0x80000000) != 0)
                    goto LABEL_255;
                }
                v195 = v194;
LABEL_255:
                LODWORD(v155) = v195;
                if (v243 == v195)
                {
LABEL_163:
                  if (v293 && v297)
                    (*(void (**)(void))(*v293 + 40))();
                  goto LABEL_166;
                }
                continue;
              }
              break;
            }
            if (!*v186)
            {
              v373 = 0u;
              v374 = 0u;
              v371 = 0u;
              v372 = 0u;
              v369 = 0u;
              v370 = 0u;
              v367 = 0u;
              v368 = 0u;
              v365 = 0u;
              v366 = 0u;
              v363 = 0u;
              v364 = 0u;
              v361 = 0u;
              v362 = 0u;
              __dst = 0u;
              v360 = 0u;
              v375 = -1;
              v196 = (_anonymous_namespace_ *)strlcpy((char *)&__dst, *(const char **)(v178 + 56 * v177 + 16), 0x80uLL);
              v351[0] = (const char *)0x4425D6C2BB3546C6;
              v351[1] = "FenceDeformer";
              p_dst = (uint64_t)&__dst;
              v301 = 257;
              memset(&v351[2], 0, 24);
              re::FixedArray<unsigned char>::copy(&v351[2], (uint64_t)&p_dst);
              re::DynamicArray<re::DeformationDefinition>::add(v184, (uint64_t *)v351);
              if (v351[2])
              {
                if (v351[3])
                {
                  (*(void (**)(void))(*(_QWORD *)v351[2] + 40))();
                  v351[3] = 0;
                  v351[4] = 0;
                }
                v351[2] = 0;
              }
              p_p_dst = (re::StringID *)v351;
              goto LABEL_247;
            }
            goto LABEL_230;
          }
          break;
        }
LABEL_234:
        v183 += 48;
        if (v183 == v247)
          goto LABEL_235;
        goto LABEL_219;
      }
    }
    v130 = (unint64_t)v297;
    v138 = v295;
    v118 = (const char *)(v294 - 1);
    do
    {
      if ((v138 & 1) != 0)
        v139 = &v296;
      else
        v139 = (uint64_t *)v130;
      (*(void (**)(uint64_t *, uint64_t))(*v85 + 40))(v85, v139[(_QWORD)v118]);
      v138 += 2;
      LODWORD(v295) = v138;
      --v118;
    }
    while (v118 != (const char *)-1);
    v294 = 0;
LABEL_127:
    if ((v295 & 1) == 0)
      (*(void (**)(uint64_t *, char *))(*v85 + 40))(v85, v297);
    goto LABEL_129;
  }
LABEL_263:
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", HIDWORD(v281));
  v198 = (void *)objc_claimAutoreleasedReturnValue();
  v199 = v282;
  if (v282)
  {
    v200 = 0;
    v201 = (int *)(v281 + 8);
    while (1)
    {
      v202 = *v201;
      v201 += 20;
      if (v202 < 0)
        break;
      if (v282 == ++v200)
      {
        LODWORD(v200) = v282;
        break;
      }
    }
  }
  else
  {
    LODWORD(v200) = 0;
  }
  if (v282 != (_DWORD)v200)
  {
    v203 = v200;
    v204 = v281;
    do
    {
      v205 = v204 + 80 * v203;
      if ((*(_BYTE *)(v205 + 56) & 1) != 0)
        v206 = *(_QWORD *)(v204 + 80 * v203 + 64);
      else
        v206 = v204 + 80 * v203 + 57;
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v206);
      v207 = (void *)objc_claimAutoreleasedReturnValue();
      if ((*(_BYTE *)(v204 + 80 * v203 + 24) & 1) != 0)
        v208 = *(_QWORD *)(v204 + 80 * v203 + 32);
      else
        v208 = v205 + 25;
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v208);
      v209 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v198, "setObject:forKeyedSubscript:", v207, v209);

      v204 = v281;
      if (v282 <= (int)v200 + 1)
        v210 = v200 + 1;
      else
        v210 = v282;
      while (1)
      {
        v203 = (v200 + 1);
        if (v210 - 1 == (_DWORD)v200)
          break;
        LODWORD(v200) = v200 + 1;
        v211 = v203;
        if ((*(_DWORD *)(v281 + 80 * v203 + 8) & 0x80000000) != 0)
          goto LABEL_284;
      }
      v211 = v210;
LABEL_284:
      LODWORD(v200) = v211;
    }
    while (v199 != v211);
  }
  v212 = (void *)objc_msgSend(v198, "copy");
  re::ObjCObject::operator=((void **)(v232 + 336), v212);

  v213 = v249;
  if (v249)
  {
    v214 = v253;
    if (v253)
    {
      if (v251)
      {
        v215 = 8 * v251;
        v216 = v253;
        do
        {
          v217 = *v216++;

          v215 -= 8;
        }
        while (v215);
      }
      (*(void (**)(uint64_t, id *))(*(_QWORD *)v213 + 40))(v213, v214);
    }
  }
  re::HashTable<re::DynamicString,re::DynamicArray<re::AssetHandle>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v284);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v280);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v277);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v274);
  re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v267);

  if (v263[0])
  {
    if ((v263[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v263[0] + 40))();
    memset(v263, 0, 32);
  }

  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v288);
  return 1;
}

void re::buildTexturesTable(uint64_t a1, id *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  int v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id ResourcePathAndColorSpaceForTextureProperty;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  re::DynamicString *v22;
  re *v23;
  re *v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  NSString *v28;
  void *v29;
  re *v30;
  NSString *v31;
  unsigned int v32;
  int v33;
  NSObject *v34;
  void *v35;
  re *v36;
  void *v37;
  re *v38;
  void *v39;
  uint64_t v40;
  re *v41;
  re *v42;
  void *v43;
  re *v44;
  int v45;
  int v46;
  int v47;
  const char *v48;
  int v49;
  BOOL v50;
  int v51;
  re::DynamicString *v52;
  const char *v53;
  size_t v54;
  _anonymous_namespace_ *v55;
  re::TextureAsset *isPackageRelativePath;
  char *v57;
  size_t v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _anonymous_namespace_ *v65;
  _anonymous_namespace_ *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  __n128 *v106;
  __n128 v107;
  unint64_t *v108;
  uint64_t v109;
  void *v111;
  void *v112;
  int v113;
  int v114;
  int v115;
  re *v116;
  BOOL v117;
  const char *v119;
  unsigned int v120;
  int v121;
  unint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  re::DynamicString *v126;
  int v127;
  uint64_t v128;
  _QWORD *v129;
  re *v130;
  _OWORD v131[2];
  id v132;
  __int128 v133;
  int v134;
  uint64_t v135;
  _BYTE v136[20];
  __int128 v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD v142[3];
  uint64_t *v143;
  unint64_t v144;
  unint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  __int128 buf;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  int v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  _QWORD v158[6];

  v158[4] = *MEMORY[0x24BDAC8D0];
  v147 = 0;
  v144 = 0;
  v145 = 0;
  v146 = 0;
  v143 = a4;
  re::DynamicArray<re::ImportedTexturesTable::Entry>::setCapacity(&v143, 0);
  ++v146;
  objc_msgSend(*a2, "loadedNodeIterator");
  v112 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v112, "nextObject");
  v5 = objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v6 = (void *)v5;
    v7 = *MEMORY[0x24BEBEDF0];
    v109 = *MEMORY[0x24BEBEDF0];
    do
    {
      objc_msgSend(v6, "type");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = objc_msgSend(v8, "isEqualToString:", v7);

      if (v9)
      {
        v111 = v6;
        re::gatherMaterialTextureProperties((uint64_t)v6, (uint64_t)&v132);
        v10 = HIDWORD(v135);
        if (HIDWORD(v135))
        {
          v11 = 0;
          v12 = (int *)(*((_QWORD *)&v133 + 1) + 8);
          while (1)
          {
            v13 = *v12;
            v12 += 14;
            if (v13 < 0)
              break;
            if (HIDWORD(v135) == ++v11)
            {
              LODWORD(v11) = HIDWORD(v135);
              break;
            }
          }
        }
        else
        {
          LODWORD(v11) = 0;
        }
        if (HIDWORD(v135) != (_DWORD)v11)
        {
          v14 = v11;
          v15 = *((_QWORD *)&v133 + 1);
          v113 = HIDWORD(v135);
          while (1)
          {
            v16 = v15 + 56 * v14;
            v17 = *(id *)(v16 + 48);
            ResourcePathAndColorSpaceForTextureProperty = re::getResourcePathAndColorSpaceForTextureProperty(v17);
            v20 = ResourcePathAndColorSpaceForTextureProperty;
            if (ResourcePathAndColorSpaceForTextureProperty)
              break;
LABEL_124:

            v15 = *((_QWORD *)&v133 + 1);
            if (HIDWORD(v135) <= (v11 + 1))
              v81 = v11 + 1;
            else
              v81 = HIDWORD(v135);
            while (1)
            {
              v14 = (v11 + 1);
              if (v81 - 1 == (_DWORD)v11)
                break;
              LODWORD(v11) = v11 + 1;
              v82 = v14;
              if ((*(_DWORD *)(*((_QWORD *)&v133 + 1) + 56 * v14 + 8) & 0x80000000) != 0)
                goto LABEL_131;
            }
            v82 = v81;
LABEL_131:
            LODWORD(v11) = v82;
            if (v10 == v82)
              goto LABEL_132;
          }
          v21 = v19;
          objc_msgSend(ResourcePathAndColorSpaceForTextureProperty, "path");
          v22 = (re::DynamicString *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v20, "resolvedPath");
          v23 = (re *)objc_claimAutoreleasedReturnValue();
          v24 = v23;
          if (v23 && (v23 = (re *)-[re length](v23, "length")) != 0)
          {
            v128 = v21;
            v25 = v16 + 16;
            v26 = (const char *)(v16 + 25);
            if ((*(_QWORD *)(v16 + 24) & 1) != 0)
              v27 = *(const char **)(v16 + 32);
            else
              v27 = (const char *)(v16 + 25);
            v114 = strcmp(v27, "textureRMAS");
            v130 = v24;
            if (v114)
            {
              if (!strcmp(v27, "textureBaseColor") && v139 | BYTE1(v139))
              {
                v115 = 0;
                v121 = 5;
                v123 = 4;
                v125 = 3;
                v33 = 2;
              }
              else
              {
                objc_msgSend(v17, "name");
                v29 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v29, "stringValue");
                v30 = (re *)objc_claimAutoreleasedReturnValue();

                v32 = re::swizzleForTextureOutputProperty(v30, v31);
                v125 = BYTE1(v32);
                v33 = v32;
                v123 = BYTE2(v32);
                v121 = HIBYTE(v32);

                v115 = 1;
              }
              goto LABEL_49;
            }
            v119 = v26;
            if (*(_QWORD *)&v136[12])
            {
              objc_msgSend(*(id *)&v136[12], "name");
              v35 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v35, "stringValue");
              v36 = (re *)objc_claimAutoreleasedReturnValue();

            }
            else
            {
              v36 = 0;
            }
            if ((_QWORD)v137)
            {
              objc_msgSend((id)v137, "name");
              v37 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v37, "stringValue");
              v38 = (re *)objc_claimAutoreleasedReturnValue();

            }
            else
            {
              v38 = 0;
            }
            v126 = v22;
            if (*((_QWORD *)&v137 + 1))
            {
              objc_msgSend(*((id *)&v137 + 1), "name");
              v39 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v39, "stringValue");
              v40 = objc_claimAutoreleasedReturnValue();

            }
            else
            {
              v40 = 0;
            }
            v116 = (re *)v40;
            if (v138)
            {
              objc_msgSend(v138, "name");
              v41 = v38;
              v42 = v36;
              v43 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v43, "stringValue");
              v44 = (re *)objc_claimAutoreleasedReturnValue();

              v36 = v42;
              v38 = v41;
              if (v36)
                goto LABEL_35;
LABEL_37:
              v33 = 1;
            }
            else
            {
              v44 = 0;
              if (!v36)
                goto LABEL_37;
LABEL_35:
              v33 = re::swizzleForTextureOutputProperty(v36, v28);
            }
            if (v38)
              v45 = re::swizzleForTextureOutputProperty(v38, v28);
            else
              v45 = 1;
            v125 = v45;
            if (v116)
              v46 = re::swizzleForTextureOutputProperty(v116, v28);
            else
              v46 = 1;
            v123 = v46;
            if (v44)
              v47 = re::swizzleForTextureOutputProperty(v44, v28);
            else
              v47 = 1;
            v121 = v47;

            v115 = 2;
            v22 = v126;
            v26 = v119;
LABEL_49:
            if ((*(_QWORD *)(v25 + 8) & 1) != 0)
              v48 = *(const char **)(v25 + 16);
            else
              v48 = v26;
            v127 = v33;
            if (!strcmp(v48, "textureNormal"))
            {
              v50 = 0;
              v51 = 5;
            }
            else if (!strcmp(v48, "textureEmissive"))
            {
              v50 = 0;
              v51 = 4;
            }
            else if (!strcmp(v48, "textureBaseColor"))
            {
              v50 = 0;
              v51 = 3;
            }
            else if (v33 == 2
                   && ((v49 = strcmp(v48, "textureOpacity"), !strcmp(v48, "textureMetallic"))
                    || !strcmp(v48, "textureRoughness")
                    || !strcmp(v48, "textureSpecular")
                    || !strcmp(v48, "textureAmbientOcclusion")
                    || !strcmp(v48, "textureClearcoat")
                    || !strcmp(v48, "textureClearcoatRoughness")
                    || !v49))
            {
              v50 = v49 != 0;
              v51 = 2;
            }
            else
            {
              v50 = 0;
              v51 = 6;
            }
            v120 = v51;
            v52 = v22;
            v53 = (const char *)-[re::DynamicString UTF8String](objc_retainAutorelease(v22), "UTF8String");
            v54 = strlen(v53);
            v24 = v130;
            v55 = (_anonymous_namespace_ *)-[re UTF8String](objc_retainAutorelease(v130), "UTF8String");
            if (!*(_BYTE *)(a3 + 66)
              || ((v142[0] & 1) != 0 ? (v57 = (char *)v142[1]) : (v57 = (char *)v142 + 1),
                  (v142[0] & 1) != 0 ? (v58 = v142[0] >> 1) : (v58 = LOBYTE(v142[0]) >> 1),
                  isPackageRelativePath = (re::TextureAsset *)re::isPackageRelativePath(v57, v58),
                  (_DWORD)isPackageRelativePath))
            {
              v117 = v50;
              v59 = re::TextureAsset::assetType(isPackageRelativePath);
              re::ImportAssetTable::compiledAssetPath((uint64_t)v53, v54, (re **)v59, (re::DynamicString *)&v148);
              v60 = v147;
              v61 = v145;
              if (v145)
              {
                v62 = 96 * v145;
                v63 = v147;
                while (!re::DynamicString::operator==(v63, (uint64_t)&v148))
                {
                  v63 += 96;
                  v62 -= 96;
                  if (!v62)
                    goto LABEL_80;
                }
                v67 = v128;
              }
              else
              {
LABEL_80:
                v65 = re::DynamicString::DynamicString((re::DynamicString *)&buf, (const re::DynamicString *)&v148);
                *(_QWORD *)&v153 = 0x600000000;
                DWORD2(v153) = 67305984;
                BYTE12(v153) = 5;
                v154 = 0;
                v155 = 0u;
                v156 = 0u;
                v66 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v155, 0);
                v157 = 0;
                v67 = v128;
                if (v61 >= v144)
                {
                  if (v144 < v61 + 1)
                  {
                    if (v143)
                    {
                      v68 = 8;
                      if (v144)
                        v68 = 2 * v144;
                      if (v68 <= v61 + 1)
                        v69 = v61 + 1;
                      else
                        v69 = v68;
                      re::DynamicArray<re::ImportedTexturesTable::Entry>::setCapacity(&v143, v69);
                    }
                    else
                    {
                      re::DynamicArray<re::ImportedTexturesTable::Entry>::setCapacity(&v143, v61 + 1);
                      ++v146;
                    }
                  }
                  v61 = v145;
                  v60 = v147;
                }
                v63 = v60 + 96 * v61;
                *(_OWORD *)v63 = 0u;
                *(_OWORD *)(v63 + 16) = 0u;
                *(_QWORD *)v63 = buf;
                *(_QWORD *)&buf = 0;
                v70 = *(_QWORD *)(v63 + 16);
                *(_QWORD *)(v63 + 16) = v151;
                v151 = v70;
                *(_QWORD *)(v63 + 24) = v152;
                v152 = 0;
                v71 = *(_QWORD *)(v63 + 8);
                *(_QWORD *)(v63 + 8) = *((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = v71;
                v72 = v153;
                *(_DWORD *)(v63 + 48) = v154;
                *(_OWORD *)(v63 + 32) = v72;
                *(_OWORD *)(v63 + 72) = 0u;
                *(_OWORD *)(v63 + 56) = 0u;
                *(_QWORD *)(v63 + 56) = v155;
                *(_QWORD *)&v155 = 0;
                v73 = *(_QWORD *)(v63 + 72);
                *(_QWORD *)(v63 + 72) = v156;
                *(_QWORD *)&v156 = v73;
                *(_QWORD *)(v63 + 80) = *((_QWORD *)&v156 + 1);
                *((_QWORD *)&v156 + 1) = 0;
                v74 = *(_QWORD *)(v63 + 64);
                *(_QWORD *)(v63 + 64) = *((_QWORD *)&v155 + 1);
                *((_QWORD *)&v155 + 1) = v74;
                *(_QWORD *)(v63 + 88) = v157;
                v145 = v61 + 1;
                ++v146;
                if ((_QWORD)v155)
                {
                  if ((BYTE8(v155) & 1) != 0)
                    (*(void (**)(void))(*(_QWORD *)v155 + 40))();
                  v155 = 0u;
                  v156 = 0u;
                }
                if ((_QWORD)buf && (BYTE8(buf) & 1) != 0)
                  (*(void (**)(void))(*(_QWORD *)buf + 40))();
              }
              if (v148 && (v149 & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v148 + 40))();
              v75 = *(_DWORD *)(v63 + 32);
              if (v75 == 1)
              {
                v76 = v120 - 2;
                if (v76 > 3)
                  v77 = 0;
                else
                  v77 = qword_226106188[v76];
                v78 = *(int *)(v63 + 36);
                if (v78 > 5)
                  v79 = 0;
                else
                  v79 = qword_2261061A8[v78];
                if (v77 > v79)
                {
                  *(_DWORD *)(v63 + 36) = v120;
                  *(_BYTE *)(v63 + 40) = v117;
                }
                if (v114)
                {
                  if (*(_DWORD *)(v63 + 41) == ((v123 << 16) | (v121 << 24) | (v125 << 8) | v127)
                    || *(_DWORD *)(v63 + 48) == 2)
                  {
                    goto LABEL_119;
                  }
                  *(_DWORD *)(v63 + 41) = 84148994;
                  v80 = 3;
                }
                else
                {
                  *(_BYTE *)(v63 + 41) = v127;
                  *(_BYTE *)(v63 + 42) = v125;
                  *(_BYTE *)(v63 + 43) = v123;
                  *(_BYTE *)(v63 + 44) = v121;
                  v80 = 2;
                }
                *(_DWORD *)(v63 + 48) = v80;
                goto LABEL_119;
              }
              if (v75)
              {
                re::internal::assertLog((re::internal *)4, v64, "assertion failure: '%s' (%s:line %i) Unexpected imported texture source", "!\"Unreachable code\"", "buildTexturesTable", 6014);
                _os_crash();
                __break(1u);
              }
              *(_DWORD *)(v63 + 32) = 1;
              re::DynamicString::operator=((re::DynamicString *)(v63 + 56), (re::DynamicString *)&v141);
              *(_BYTE *)(v63 + 41) = v127;
              *(_BYTE *)(v63 + 42) = v125;
              *(_BYTE *)(v63 + 43) = v123;
              *(_BYTE *)(v63 + 44) = v121;
              *(_DWORD *)(v63 + 48) = v115;
              *(_DWORD *)(v63 + 36) = v120;
              *(_BYTE *)(v63 + 40) = v117;
              *(_QWORD *)(v63 + 88) = v67;
            }
LABEL_119:
            if (v141 && (v142[0] & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v141 + 40))();
            v10 = v113;
            v22 = v52;
          }
          else
          {
            v34 = *re::pipelineLogObjects(v23);
            if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf) = 138412290;
              *(_QWORD *)((char *)&buf + 4) = v22;
              _os_log_error_impl(&dword_224FE9000, v34, OS_LOG_TYPE_ERROR, "Failed to resolve reference to texture '%@'", (uint8_t *)&buf, 0xCu);
            }
          }

          goto LABEL_124;
        }
LABEL_132:

        re::HashTable<re::DynamicString,USKProperty * {__strong},re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v132);
        v6 = v111;
        v7 = v109;
      }

      objc_msgSend(v112, "nextObject");
      v6 = (void *)objc_claimAutoreleasedReturnValue();
    }
    while (v6);
  }
  v122 = v145;
  if (v145)
  {
    v83 = v147;
    v84 = v147 + 96 * v145;
    v129 = (_QWORD *)(a1 + 8);
    v124 = v84;
    while (*(_DWORD *)(v83 + 32) != 1)
    {
LABEL_180:
      v83 += 96;
      if (v83 == v84)
        goto LABEL_181;
    }
    v85 = *(void **)(v83 + 88);
    v86 = *(unsigned __int8 *)(a3 + 64);
    v87 = *(unsigned __int8 *)(a3 + 65);
    v132 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
    *(_OWORD *)&v136[4] = 0u;
    v137 = 0u;
    v133 = 0u;
    v135 = 0;
    *(_QWORD *)v136 = 0;
    v136[8] = 0;
    v134 = 1;
    DWORD2(v137) = 6;
    v139 = 0;
    v140 = 0;
    v138 = 0;
    objc_msgSend(v132, sel_setResourceOptions_, 32);
    DWORD2(v137) = *(_DWORD *)(v83 + 36);
    if (DWORD2(v137) == 6)
    {
      if ((_DWORD)v133 == 2)
        LODWORD(v133) = 0;
      if (DWORD1(v133) == 3)
        DWORD1(v133) = 0;
    }
    else
    {
      *(_QWORD *)&v133 = 0x300000002;
    }
    objc_storeStrong(&v138, v85);
    if (v87)
      BYTE4(v137) = 1;
    if (v86)
    {
      v88 = *(_DWORD *)(v83 + 36);
      if (v88 != 2)
      {
        LODWORD(v133) = 1;
        if ((v88 - 3) >= 2)
          v89 = 204;
        else
          v89 = 186;
        objc_msgSend(v132, sel_setPixelFormat_, v89);
        LODWORD(v135) = 3;
      }
    }
    if (*(_BYTE *)(v83 + 40))
    {
      LODWORD(v133) = 1;
      objc_msgSend(v132, sel_setPixelFormat_, 10);
    }
    if (*(_DWORD *)(v83 + 41) != 84148994)
      objc_msgSend(v132, sel_setSwizzle_);
    v90 = *(unsigned __int8 *)(a3 + 65);
    re::DynamicString::DynamicString((re::DynamicString *)v131, (const re::DynamicString *)(v83 + 56));
    re::USKTextureProvider::USKTextureProvider((re::TextureProvider *)&buf, (id *)a3, v90, (const re::DynamicString *)v131);
    if (*(_QWORD *)&v131[0])
    {
      if ((BYTE8(v131[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v131[0] + 40))();
      memset(v131, 0, sizeof(v131));
    }
    re::TextureProvider::setTemplateDescriptor((uint64_t)&buf, &v132);
    re::TextureProvider::setOptions((uint64_t)&buf, &v133);
    re::DynamicString::operator=((re::DynamicString *)((char *)&buf + 8), (re::DynamicString *)(v83 + 56));
    v91 = re::Hash<re::DynamicString>::operator()((uint64_t)&v148, v83);
    v92 = v91;
    if (*v129)
    {
      v93 = a1;
      v94 = v91 % *(unsigned int *)(a1 + 32);
      v95 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * v94);
      if ((_DWORD)v95 != 0x7FFFFFFF)
      {
        v96 = *(_QWORD *)(a1 + 24);
        while (!re::DynamicString::operator==(v96 + 288 * v95 + 16, v83))
        {
          v95 = *(_DWORD *)(v96 + 288 * v95 + 8) & 0x7FFFFFFF;
          if (v95 == 0x7FFFFFFF)
            goto LABEL_167;
        }
        goto LABEL_174;
      }
    }
    else
    {
      v94 = 0;
LABEL_167:
      v93 = a1;
    }
    v97 = *(unsigned int *)(v93 + 44);
    if ((_DWORD)v97 == 0x7FFFFFFF)
    {
      v97 = *(unsigned int *)(v93 + 40);
      v98 = v97;
      if ((_DWORD)v97 == *(_DWORD *)(v93 + 32))
      {
        re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity((uint64_t)v129, 2 * *(_DWORD *)(v93 + 36));
        v93 = a1;
        v94 = v92 % *(unsigned int *)(a1 + 32);
        v98 = *(_DWORD *)(a1 + 40);
      }
      *(_DWORD *)(v93 + 40) = v98 + 1;
      v99 = *(_QWORD *)(v93 + 24);
      v100 = *(_DWORD *)(v99 + 288 * v97 + 8);
    }
    else
    {
      v99 = *(_QWORD *)(v93 + 24);
      v100 = *(_DWORD *)(v99 + 288 * v97 + 8);
      *(_DWORD *)(v93 + 44) = v100 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v99 + 288 * v97 + 8) = v100 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(v93 + 24) + 288 * v97 + 8) = *(_DWORD *)(*(_QWORD *)(v93 + 24) + 288 * v97 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v93 + 16) + 4 * v94);
    *(_QWORD *)(*(_QWORD *)(v93 + 24) + 288 * v97) = v92;
    v101 = v93;
    re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(v93 + 24) + 288 * v97 + 16), (const re::DynamicString *)v83);
    v102 = *(_QWORD *)(v101 + 24) + 288 * v97;
    re::TextureProvider::TextureProvider((re::TextureProvider *)(v102 + 48), (const re::TextureProvider *)&buf);
    *(_QWORD *)(v102 + 48) = off_24ED44368;
    re::DynamicString::DynamicString((re::DynamicString *)(v102 + 256), (const re::DynamicString *)v158);
    *(_QWORD *)(v102 + 48) = off_24ED7CBA0;
    *(_DWORD *)(*(_QWORD *)(v101 + 16) + 4 * v94) = v97;
    ++*(_DWORD *)(v101 + 36);
    ++*(_DWORD *)(v101 + 48);
    v84 = v124;
LABEL_174:
    *(_QWORD *)&buf = off_24ED44368;
    if (v158[0])
    {
      if ((v158[1] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v158[0] + 40))();
      memset(v158, 0, 32);
    }
    re::TextureProvider::~TextureProvider((re::TextureProvider *)&buf);

    if (v132)
    goto LABEL_180;
  }
LABEL_181:

  v103 = v143;
  if (v143)
  {
    v104 = v147;
    if (v147)
    {
      if (v122)
      {
        v105 = 96 * v122;
        v106 = (__n128 *)(v147 + 56);
        v107 = 0uLL;
        do
        {
          v108 = &v106[-4].n128_u64[1];
          if (v106->n128_u64[0])
          {
            if ((v106->n128_u8[8] & 1) != 0)
            {
              (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v106->n128_u64[0] + 40))(v106->n128_u64[0], v106[1].n128_u64[0], v107);
              v107 = 0uLL;
            }
            *v106 = v107;
            v106[1] = v107;
          }
          if (*v108)
          {
            if ((v106[-3].n128_u8[0] & 1) != 0)
            {
              (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)*v108 + 40))(*v108, v106[-3].n128_u64[1], v107);
              v107 = 0uLL;
            }
            *(__n128 *)v108 = v107;
            *(__n128 *)((char *)v106 - 40) = v107;
          }
          v106 += 6;
          v105 -= 96;
        }
        while (v105);
      }
      (*(void (**)(uint64_t *, uint64_t))(*v103 + 40))(v103, v104);
    }
  }
}

id re::getResourcePathAndColorSpaceForTextureProperty(void *a1)
{
  void *v1;
  void *v2;
  int v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  re *v8;
  const __CFString *v9;
  NSObject *v10;
  id v11;
  void *v12;
  int v13;
  void *v14;
  void *v15;
  void *v16;
  int v18;
  re *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  objc_msgSend(a1, "parentNode");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BEBED10], "shaderNodeType:", v1);
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqualToString:", *MEMORY[0x24BEBEE60]);

  if (v3)
  {
    objc_msgSend(v1, "property:", CFSTR("inputs:file"));
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    v5 = v4;
    if (v4)
    {
      objc_msgSend(v4, "metadataWithKey:", CFSTR("colorSpace"));
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      v7 = v6;
      if (v6)
      {
        objc_msgSend(v6, "stringValue");
        v8 = (re *)objc_claimAutoreleasedReturnValue();
        if (!re::CGColorSpaceNameFromOCIOString(v8, v9))
        {
          v10 = *re::pipelineLogObjects(0);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            v18 = 138412290;
            v19 = v8;
            _os_log_impl(&dword_224FE9000, v10, OS_LOG_TYPE_DEFAULT, "Warning, no suitable convertion to CGColorSpace found for OpenColorIO tag: %@.", (uint8_t *)&v18, 0xCu);
          }
        }

      }
      objc_msgSend(v5, "type");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "isEqualToString:", *MEMORY[0x24BEBEDA0]);

      if (v13)
      {
        objc_msgSend(v5, "resourcePath");
        v14 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v14, "path");
        v15 = (void *)objc_claimAutoreleasedReturnValue();
        v16 = v15;
        if (v15 && objc_msgSend(v15, "length"))
          v11 = v14;
        else
          v11 = 0;

      }
      else
      {
        v11 = 0;
      }

    }
    else
    {
      v11 = 0;
    }

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

uint64_t re::swizzleForTextureOutputProperty(re *this, NSString *a2)
{
  re *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  re *v8;
  NSObject *v9;
  int v10;
  re *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = this;
  if ((-[re isEqualToString:](v2, "isEqualToString:", CFSTR("outputs:r")) & 1) == 0)
  {
    if ((-[re isEqualToString:](v2, "isEqualToString:", CFSTR("outputs:g")) & 1) != 0)
    {
      v3 = 0x1000000;
      v4 = 196608;
      v5 = 3;
    }
    else
    {
      if ((-[re isEqualToString:](v2, "isEqualToString:", CFSTR("outputs:b")) & 1) != 0)
      {
        v3 = 0x1000000;
        v4 = 0x40000;
        v5 = 4;
        v6 = 1024;
        goto LABEL_10;
      }
      if ((-[re isEqualToString:](v2, "isEqualToString:", CFSTR("outputs:a")) & 1) != 0)
      {
        v3 = 0x1000000;
        v4 = 327680;
        v5 = 5;
        v6 = 1280;
        goto LABEL_10;
      }
      if ((-[re isEqualToString:](v2, "isEqualToString:", CFSTR("outputs:rgb")) & 1) != 0)
      {
        v3 = 0x1000000;
      }
      else
      {
        v8 = (re *)-[re isEqualToString:](v2, "isEqualToString:", CFSTR("outputs:rgba"));
        if ((v8 & 1) == 0)
        {
          v9 = *re::pipelineLogObjects(v8);
          v5 = 2;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          {
            v10 = 138412290;
            v11 = v2;
            _os_log_debug_impl(&dword_224FE9000, v9, OS_LOG_TYPE_DEBUG, "Unexpected texture output property '%@' during scene import", (uint8_t *)&v10, 0xCu);
          }
          v3 = 83886080;
          v4 = 0x40000;
          goto LABEL_5;
        }
        v3 = 83886080;
      }
      v4 = 0x40000;
      v5 = 2;
    }
LABEL_5:
    v6 = 768;
    goto LABEL_10;
  }
  v3 = 0x1000000;
  v4 = 0x20000;
  v5 = 2;
  v6 = 512;
LABEL_10:

  return v5 | v3 | v6 | v4;
}

uint64_t re::isRootNodeByPath(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  objc_msgSend(a1, "path");
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v1, "stringValue");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v3 = objc_msgSend(v2, "isEqual:", CFSTR("/"));

  return v3;
}

void re::convertActionAssetsToAssetPaths(id *a1@<X0>, const re::AssetPath *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  _anonymous_namespace_ *v11;
  _anonymous_namespace_ *v12;
  _anonymous_namespace_ *v13;
  double v14;
  void *v15;
  char *v16;
  void *v17;
  id v18;
  uint64_t v20;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27[24];
  __int128 v28;
  __int128 v29;
  int v30;
  _QWORD v31[4];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[128];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  objc_msgSend(MEMORY[0x24BDBCED8], "dictionaryWithCapacity:", objc_msgSend(v5, "count"));
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v6 = v5;
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
  if (v7)
  {
    v8 = v7;
    v20 = *(_QWORD *)v36;
    do
    {
      for (i = 0; i != v8; ++i)
      {
        if (*(_QWORD *)v36 != v20)
          objc_enumerationMutation(v6);
        v10 = *(_QWORD *)(*((_QWORD *)&v35 + 1) + 8 * i);
        objc_msgSend(v6, "objectForKeyedSubscript:", v10);
        v11 = (_anonymous_namespace_ *)objc_claimAutoreleasedReturnValue();
        v30 = 0;
        memset(v31, 0, sizeof(v31));
        v12 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v31, 0);
        v32 = 0u;
        v33 = 0u;
        re::DynamicString::setCapacity(&v32, 0);
        v34 = 0;
        v13 = objc_retainAutorelease(v11);
        v14 = re::AssetPath::parse((re::AssetPath *)&v30, (char *)-[_anonymous_namespace_ UTF8String](v13, "UTF8String"), a2, *(const re::internal::AssetTypeRegistry **)(a3 + 1104), *(os_unfair_lock_s **)(a3 + 1192), v27);
        if (!v27[0] && (_QWORD)v28)
        {
          if ((BYTE8(v28) & 1) != 0)
            (*(void (**)(double))(*(_QWORD *)v28 + 40))(v14);
          v28 = 0u;
          v29 = 0u;
        }
        v15 = (void *)MEMORY[0x24BDD17C8];
        v25 = 0;
        v26 = 0;
        v24 = 0;
        v23 = v31[0];
        re::DynamicString::setCapacity(&v23, 0);
        re::AssetPath::fullAssetPath((re::DynamicString *)&v30, (re::DynamicString *)&v23);
        if ((v24 & 1) != 0)
          v16 = v25;
        else
          v16 = (char *)&v24 + 1;
        objc_msgSend(v15, "stringWithUTF8String:", v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v22, "setObject:forKeyedSubscript:", v17, v10);

        if (v23 && (v24 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v23 + 40))();
        if ((_QWORD)v32)
        {
          if ((BYTE8(v32) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v32 + 40))();
          v32 = 0u;
          v33 = 0u;
        }
        if (v31[0] && (v31[1] & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v31[0] + 40))();

      }
      v8 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v35, v39, 16);
    }
    while (v8);
  }

  v18 = (id)objc_msgSend(v22, "copy");
  *a4 = v18;

}

_anonymous_namespace_ *re::registerImportedScene(re *this, re::SceneImportResult *a2, const re::mtl::Device *a3, const re::AssetPath *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  _anonymous_namespace_ *v10;
  char *v11;
  __n128 v12;
  re *v13;
  unsigned int v14;
  NSObject *v15;
  uint64_t v16;
  re::AudioFileAsset *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  re::AudioFileAsset *v23;
  uint64_t v24;
  NSObject *v25;
  NSObject *v26;
  char *v27;
  NSObject *v28;
  char *v29;
  _anonymous_namespace_ *result;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _anonymous_namespace_ *v34;
  char *v35;
  __n128 v36;
  __int128 v37;
  char *v38;
  unsigned int v39;
  uint64_t v40;
  re::SceneAsset *v41;
  uint64_t *v42;
  __int128 v43;
  char *v44;
  re::DynamicString *v45;
  char v46[24];
  __int128 v47;
  __int128 v48;
  int v49;
  _QWORD v50[4];
  _QWORD v51[5];
  __int128 v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  int v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint8_t buf[4];
  char *v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)this;
  v49 = *(_DWORD *)a3;
  v45 = (const re::mtl::Device *)((char *)a3 + 8);
  re::DynamicString::DynamicString((re::DynamicString *)v50, (const re::mtl::Device *)((char *)a3 + 8));
  re::DynamicString::DynamicString((re::DynamicString *)v51, (const re::mtl::Device *)((char *)a3 + 40));
  v51[4] = *((_QWORD *)a3 + 9);
  if (*((_QWORD *)this + 18))
  {
    v7 = *((_QWORD *)this + 18);
    v8 = 0;
    do
    {
      v9 = (char *)re::BucketArray<re::ImportAssetTable::ImportedAsset,32ul>::operator[]((uint64_t)this + 104, v8);
      v61 = 0;
      v62 = 0u;
      v63 = 0u;
      v10 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v62, 0);
      v64 = 0u;
      v65 = 0u;
      re::DynamicString::setCapacity(&v64, 0);
      v66 = 0;
      if ((*((_QWORD *)v9 + 1) & 1) != 0)
        v11 = (char *)*((_QWORD *)v9 + 2);
      else
        v11 = v9 + 9;
      v12.n128_f64[0] = re::AssetPath::parse((re::AssetPath *)&v61, v11, (const re::AssetPath *)&v49, *(const re::internal::AssetTypeRegistry **)(v6 + 1104), *(os_unfair_lock_s **)(v6 + 1192), &v57);
      if (!(_BYTE)v57 && (_QWORD)v59)
      {
        if ((BYTE8(v59) & 1) != 0)
          (*(void (**)(double))(*(_QWORD *)v59 + 40))(v12.n128_f64[0]);
        v12 = 0uLL;
        v59 = 0u;
        v60 = 0u;
      }
      v13 = (re *)(**(_QWORD *(***)(uint64_t *__return_ptr, uint64_t, int *, __n128))v6)(&v55, v6, &v61, v12);
      if (v56 && (v14 = atomic_load((unsigned int *)(v56 + 704)), v14 == 2))
      {
        v15 = *re::pipelineLogObjects(v13);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          v28 = v15;
          v53 = 0;
          v54 = 0;
          v52 = (unint64_t)v62;
          re::DynamicString::setCapacity(&v52, 0);
          re::AssetPath::fullAssetPath((re::DynamicString *)&v61, (re::DynamicString *)&v52);
          v29 = (char *)&v52 + 9;
          if ((BYTE8(v52) & 1) != 0)
            v29 = v53;
          *(_DWORD *)buf = 136315138;
          v68 = v29;
          _os_log_debug_impl(&dword_224FE9000, v28, OS_LOG_TYPE_DEBUG, "Ignoring loaded asset '%s' since it is already loaded", buf, 0xCu);

          if ((_QWORD)v52 && (BYTE8(v52) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v52 + 40))();
        }
        v16 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(_QWORD *)(v6 + 1104), *((_QWORD *)v9 + 4));
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 16))(v16, *((_QWORD *)v9 + 5));
        *((_QWORD *)v9 + 5) = 0;
      }
      else
      {
        re::AssetHandle::internalForceUnloadAsync((re::AssetHandle *)&v55);
        v17 = (re::AudioFileAsset *)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v6 + 200))(v6, *((_QWORD *)v9 + 5), &v55, 0, 0);
        if (v56 && (v18 = atomic_load((unsigned int *)(v56 + 704)), v18 == 2))
        {
          v19 = (uint64_t *)*((_QWORD *)v9 + 4);
          v20 = re::AudioFileAsset::assetType(v17);
          if (v19 == v20)
          {
            v21 = re::AudioFileAsset::assetType((re::AudioFileAsset *)v20);
            v22 = re::AssetHandle::assetWithType((re::AssetHandle *)&v55, (const re::AssetType *)v21, 0);
            if (v22)
            {
              v23 = (re::AudioFileAsset *)v22;
              v24 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(_QWORD *)(v6 + 1104), *((_QWORD *)v9 + 4));
              re::AudioFileAsset::completeLoad(v23, *(AudioSceneService **)(v24 + 8));
            }
          }
        }
        else
        {
          v25 = *re::pipelineLogObjects(v17);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
          {
            v26 = v25;
            v53 = 0;
            v54 = 0;
            v52 = (unint64_t)v62;
            re::DynamicString::setCapacity(&v52, 0);
            re::AssetPath::fullAssetPath((re::DynamicString *)&v61, (re::DynamicString *)&v52);
            v27 = (char *)&v52 + 9;
            if ((BYTE8(v52) & 1) != 0)
              v27 = v53;
            *(_DWORD *)buf = 136315138;
            v68 = v27;
            _os_log_debug_impl(&dword_224FE9000, v26, OS_LOG_TYPE_DEBUG, "Asset failed to load: %s", buf, 0xCu);

            if ((_QWORD)v52 && (BYTE8(v52) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v52 + 40))();
          }
        }
      }
      re::DynamicArray<re::AssetHandle>::add((re *)((char *)this + 248), (re::AssetHandle *)&v55);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v55);
      if ((_QWORD)v64)
      {
        if ((BYTE8(v64) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v64 + 40))();
        v64 = 0u;
        v65 = 0u;
      }
      if ((_QWORD)v62 && (BYTE8(v62) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v62 + 40))();
      ++v8;
    }
    while (v7 != v8);
  }
  if (v51[0])
  {
    if ((v51[1] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v51[0] + 40))();
    memset(v51, 0, 32);
  }
  result = (_anonymous_namespace_ *)v50[0];
  if (v50[0])
  {
    if ((v50[1] & 1) != 0)
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v50[0] + 40))();
    memset(v50, 0, sizeof(v50));
  }
  if (*((_QWORD *)this + 38))
  {
    v31 = 0;
    v32 = 48;
    do
    {
      v33 = *((_QWORD *)this + 40);
      v61 = 0;
      v62 = 0u;
      v63 = 0u;
      v34 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v62, 0);
      v64 = 0u;
      v65 = 0u;
      re::DynamicString::setCapacity(&v64, 0);
      v66 = 0;
      v52 = 0uLL;
      v53 = 0;
      if (*((_QWORD *)this + 38) == 1)
      {
        v61 = *(_DWORD *)a3;
        re::DynamicString::operator=((re::DynamicString *)&v62, v45);
        re::DynamicString::operator=((re::DynamicString *)&v64, (const re::mtl::Device *)((char *)a3 + 40));
        v66 = *((_QWORD *)a3 + 9);
        (**(void (***)(__int128 *__return_ptr, uint64_t, const re::mtl::Device *))v6)(&v57, v6, a3);
      }
      else
      {
        re::DynamicString::format((re::DynamicString *)"scene%02zu.compiledscene", (re::DynamicString *)&v57, v31);
        if ((BYTE8(v57) & 1) != 0)
          v35 = v58;
        else
          v35 = (char *)&v57 + 9;
        v36.n128_f64[0] = re::AssetPath::parse((re::AssetPath *)&v61, v35, a3, *(const re::internal::AssetTypeRegistry **)(v6 + 1104), *(os_unfair_lock_s **)(v6 + 1192), v46);
        if (!v46[0] && (_QWORD)v47)
        {
          if ((BYTE8(v47) & 1) != 0)
            (*(void (**)(double))(*(_QWORD *)v47 + 40))(v36.n128_f64[0]);
          v36 = 0uLL;
          v47 = 0u;
          v48 = 0u;
        }
        if ((_QWORD)v57 && (BYTE8(v57) & 1) != 0)
          (*(void (**)(__n128))(*(_QWORD *)v57 + 40))(v36);
        (**(void (***)(__int128 *__return_ptr, uint64_t, int *))v6)(&v57, v6, &v61);
      }
      v37 = v52;
      v52 = v57;
      v57 = v37;
      v38 = v53;
      v53 = v58;
      v58 = v38;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v57);
      if (!*((_QWORD *)&v52 + 1) || (v39 = atomic_load((unsigned int *)(*((_QWORD *)&v52 + 1) + 704)), v39 != 2))
      {
        re::AssetHandle::internalForceUnloadAsync((re::AssetHandle *)&v52);
        v40 = *(_QWORD *)(v33 + v32);
        v42 = re::SceneAsset::assetType(v41);
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t *, int *))(*(_QWORD *)v6 + 192))(&v57, v6, v40, v42, &v61);
        v43 = v52;
        v52 = v57;
        v57 = v43;
        v44 = v53;
        v53 = v58;
        v58 = v44;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v57);
      }
      re::AssetHandle::operator=((uint64_t *)(v33 + v32 + 48), (uint64_t *)&v52);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v52);
      if ((_QWORD)v64)
      {
        if ((BYTE8(v64) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v64 + 40))();
        v64 = 0u;
        v65 = 0u;
      }
      result = (_anonymous_namespace_ *)v62;
      if ((_QWORD)v62 && (BYTE8(v62) & 1) != 0)
        result = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v62 + 40))();
      ++v31;
      v32 += 160;
    }
    while (v31 < *((_QWORD *)this + 38));
  }
  *((_BYTE *)this + 328) = 1;
  return result;
}

uint64_t re::estimateSceneMemoryCost(uint64_t a1, uint64_t a2, id *a3)
{
  void *v4;
  void *v5;
  void *v6;
  int v7;
  id v8;
  uint64_t v9;
  re *v10;
  const re::TextureProvider *v11;
  uint64_t v12;
  uint64_t v13;
  id **v14;
  uint8x8_t v15;
  uint64_t v16;
  id *v17;
  re *v18;
  const __CFDictionary *v19;
  void *v20;
  void *v21;
  int v22;
  void *v23;
  void *v24;
  int v25;
  id v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  float v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  void *v38;
  char *v40;
  uint64_t v41;
  id v42;
  void *v43;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *key;
  id v51;
  uint8_t buf[32];
  __int128 v53;
  uint64_t v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v4 = (void *)MEMORY[0x24BDBCF48];
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a1);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "URLWithString:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v51 = 0;
  v43 = v6;
  v7 = objc_msgSend(v6, "getResourceValue:forKey:error:", &v51, *MEMORY[0x24BDBCC48], 0);
  v8 = v51;
  v9 = 0;
  if (v7)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v9 = objc_msgSend(v8, "unsignedIntValue");
    else
      v9 = 0;
  }
  v41 = v9;
  v42 = v8;
  v10 = (re *)getpagesize();
  v12 = *(_QWORD *)(a2 + 8);
  if (!v12)
  {
    v13 = 0;
LABEL_31:
    v37 = *re::pipelineLogObjects(v10);
    v35 = v43;
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412802;
      *(_QWORD *)&buf[4] = v43;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v13;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = v41;
      _os_log_impl(&dword_224FE9000, v37, OS_LOG_TYPE_INFO, "Preflight for scene '%@' estimates '%zu' bytes will be used for textures and the file at the url takes '%zu' bytes.", buf, 0x20u);
    }
    v36 = v13 + v41;
    goto LABEL_34;
  }
  v13 = 0;
  v14 = *(id ***)a2;
  key = (void *)*MEMORY[0x24BDD96C8];
  v15 = (uint8x8_t)vcnt_s8((int8x8_t)(int)v10);
  v15.i16[0] = vaddlv_u8(v15);
  v48 = v15.u32[0];
  v49 = (void *)*MEMORY[0x24BDD96C0];
  v45 = (int)v10;
  v46 = -(uint64_t)(int)v10;
  v47 = (int)v10 - 1;
  v16 = 8 * v12;
  while (1)
  {
    v17 = *v14;
    re::TextureProvider::lazyFetchProperties(*v14, v11);
    v19 = (const __CFDictionary *)v17[22];
    if (!v19)
      break;
    CFDictionaryGetValue((CFDictionaryRef)v17[22], key);
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    v21 = v20;
    v22 = v20 ? objc_msgSend(v20, "intValue") : -1;
    CFDictionaryGetValue(v19, v49);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = v23;
    v25 = v23 ? objc_msgSend(v23, "intValue") : -1;

    if (v22 == -1 || v25 == -1)
      break;
    v10 = (re *)objc_msgSend(v17[5], sel_pixelFormat);
    if (v10)
    {
      v54 = 0;
      v53 = 0u;
      memset(buf, 0, sizeof(buf));
      v26 = v17[5];
      v27 = *a3;
      objc_msgSend(v26, sel_pixelFormat);
      MTLPixelFormatGetInfoForDevice();

      v28 = 4;
      if ((*(_WORD *)&buf[8] & 0x400) == 0)
        v28 = *(_QWORD *)&buf[24];
    }
    else
    {
      v28 = 4;
    }
    v29 = v28 * v25 * v22;
    if (*((_DWORD *)v17 + 17) == 2)
      v30 = 1.0;
    else
      v30 = 1.3333;
    v31 = v47 + (unint64_t)(float)(v30 * (float)v29);
    v32 = v31 / v45 * v45;
    v33 = v31 & v46;
    if (v48 != 1)
      v33 = v32;
    v13 += v33;
    ++v14;
    v16 -= 8;
    if (!v16)
      goto LABEL_31;
  }
  v34 = *re::pipelineLogObjects(v18);
  v35 = v43;
  if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
  {
    v36 = 0;
LABEL_34:
    v38 = v42;
    goto LABEL_35;
  }
  v38 = v42;
  if (((_BYTE)v17[2] & 1) != 0)
    v40 = (char *)v17[3];
  else
    v40 = (char *)v17 + 17;
  *(_DWORD *)buf = 136315138;
  *(_QWORD *)&buf[4] = v40;
  _os_log_error_impl(&dword_224FE9000, v34, OS_LOG_TYPE_ERROR, "Failed to retrieve image properties from CGImageSource for '%s' during scene memory estimation", buf, 0xCu);
  v36 = 0;
LABEL_35:

  return v36;
}

uint64_t re::ImportAssetTable::addAssetWithPath(re::ImportAssetTable *this, const re::DynamicString *a2, void *a3, const re::AssetType *a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  unint64_t v36;
  __int16 v37;
  unint64_t v38;
  _OWORD v39[5];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  re::DynamicString::DynamicString((re::DynamicString *)&v25, a2);
  *(_QWORD *)&v29 = a4;
  *((_QWORD *)&v29 + 1) = a3;
  v9 = *((_QWORD *)this + 5);
  v10 = *((_QWORD *)this + 1);
  if (v9 + 1 > 32 * v10)
  {
    re::BucketArray<re::ImportAssetTable::ImportedAsset,32ul>::setBucketsCapacity(this, (v9 + 32) >> 5);
    v10 = *((_QWORD *)this + 1);
  }
  if (v10 <= v9 >> 5)
  {
    v30 = 0;
    memset(v39, 0, sizeof(v39));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v31 = 136315906;
    v32 = "operator[]";
    v33 = 1024;
    v34 = 858;
    v35 = 2048;
    v36 = v9 >> 5;
    v37 = 2048;
    v38 = v10;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_22:
    re::internal::assertLog((re::internal *)4, v8, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
LABEL_23:
    re::internal::assertLog((re::internal *)4, v22, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  if ((*((_BYTE *)this + 16) & 1) != 0)
    v11 = (char *)this + 24;
  else
    v11 = (char *)*((_QWORD *)this + 4);
  v12 = *(_QWORD *)&v11[8 * (v9 >> 5)];
  ++*((_QWORD *)this + 5);
  ++*((_DWORD *)this + 12);
  v13 = v12 + 48 * (v9 & 0x1F);
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_QWORD *)v13 = v25;
  v25 = 0;
  v14 = *(_QWORD *)(v13 + 16);
  *(_QWORD *)(v13 + 16) = v27;
  v27 = v14;
  *(_QWORD *)(v13 + 24) = v28;
  v28 = 0;
  v15 = *(_QWORD *)(v13 + 8);
  *(_QWORD *)(v13 + 8) = v26;
  v26 = v15;
  *(_OWORD *)(v13 + 32) = v29;
  if (v25 && (v26 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v25 + 40))();
  v16 = *((_QWORD *)this + 5);
  if (!v16)
    goto LABEL_22;
  *(_QWORD *)&v39[0] = re::BucketArray<re::ImportAssetTable::ImportedAsset,32ul>::operator[]((uint64_t)this, v16 - 1);
  v17 = re::Hash<re::DynamicString>::operator()((uint64_t)&v25, (uint64_t)a2);
  v18 = v17;
  if (!*((_QWORD *)this + 7))
  {
    LODWORD(v19) = 0;
    goto LABEL_18;
  }
  v19 = v17 % *((unsigned int *)this + 20);
  v20 = *(unsigned int *)(*((_QWORD *)this + 8) + 4 * v19);
  if ((_DWORD)v20 == 0x7FFFFFFF)
  {
LABEL_18:
    re::HashTable<re::DynamicString,re::ImportAssetTable::ImportedAsset *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove((uint64_t)this + 56, v19, v18, a2, v39);
    ++*((_DWORD *)this + 24);
    goto LABEL_19;
  }
  v21 = *((_QWORD *)this + 9);
  while (!re::DynamicString::operator==(v21 + 56 * v20 + 16, (uint64_t)a2))
  {
    v20 = *(_DWORD *)(v21 + 56 * v20 + 8) & 0x7FFFFFFF;
    if (v20 == 0x7FFFFFFF)
      goto LABEL_18;
  }
LABEL_19:
  v23 = *((_QWORD *)this + 5);
  if (!v23)
    goto LABEL_23;
  return re::BucketArray<re::ImportAssetTable::ImportedAsset,32ul>::operator[]((uint64_t)this, v23 - 1);
}

re::ImportedScene *re::ImportedScene::ImportedScene(re::ImportedScene *this)
{
  _QWORD *v2;
  _anonymous_namespace_ *v3;
  void *v4;

  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 1) = 0u;
  v2 = (_QWORD *)((char *)this + 16);
  v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v2, 0);
  *((_QWORD *)this + 10) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  re::DynamicString::setCapacity((_QWORD *)this + 7, 0);
  *((_BYTE *)this + 88) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 36) = 0;
  objc_msgSend(MEMORY[0x24BDD1880], "UUID");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "getUUIDBytes:", this);

  return this;
}

void re::SceneImportResult::~SceneImportResult(re::SceneImportResult *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;

  if (!*((_BYTE *)this + 328))
  {
    v2 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v3 = re::SceneAsset::assetType(this);
      v4 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(_QWORD *)(v2 + 1104), (unint64_t)v3);
      v5 = *((_QWORD *)this + 38);
      if (v5)
      {
        v6 = v4;
        v7 = 160 * v5;
        v8 = (uint64_t *)(*((_QWORD *)this + 40) + 48);
        do
        {
          v9 = *v8;
          v8 += 20;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v9);
          v7 -= 160;
        }
        while (v7);
      }
      re::DynamicArray<re::ImportedScene>::clear((_QWORD *)this + 36);
      v10 = *((_QWORD *)this + 18);
      if (v10)
      {
        for (i = 0; i != v10; ++i)
        {
          v12 = re::BucketArray<re::ImportAssetTable::ImportedAsset,32ul>::operator[]((uint64_t)this + 104, i);
          v13 = re::internal::AssetTypeRegistry::assetLoaderWithAssetType(*(_QWORD *)(v2 + 1104), *(_QWORD *)(v12 + 32));
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 16))(v13, *(_QWORD *)(v12 + 40));
        }
      }
    }
  }

  re::DynamicArray<re::ImportedScene>::deinit((uint64_t)this + 288);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 248);
  re::ImportAssetTable::~ImportAssetTable((re::SceneImportResult *)((char *)this + 104));
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 7);
  re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 1);
}

_QWORD *re::DynamicArray<re::ImportedScene>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _QWORD *v9;

  v1 = result;
  v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    v3 = 0;
    v4 = result[4];
    v5 = 160 * v2;
    do
    {
      v6 = v4 + v3;
      re::DynamicArray<re::AssetHandle>::deinit(v4 + v3 + 120);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v4 + v3 + 96));
      v7 = *(_QWORD *)(v4 + v3 + 56);
      if (v7)
      {
        if ((*(_BYTE *)(v6 + 64) & 1) != 0)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(v4 + v3 + 72));
        *(_OWORD *)(v4 + v3 + 56) = 0u;
        *(_OWORD *)(v6 + 72) = 0u;
      }
      v9 = *(_QWORD **)(v6 + 16);
      v8 = (_OWORD *)(v6 + 16);
      result = v9;
      if (v9)
      {
        if ((*(_BYTE *)(v4 + v3 + 24) & 1) != 0)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 40))(result, *(_QWORD *)(v4 + v3 + 32));
        *v8 = 0u;
        v8[1] = 0u;
      }
      v3 += 160;
    }
    while (v5 != v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

uint64_t re::MaterialParameterData::operator=(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1, a2);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 48, a2 + 48);
  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 96, a2 + 96);
  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 144, a2 + 144);
  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a1 + 192, a2 + 192);
  return a1;
}

_BYTE *re::MaterialRenderFlags::operator=(_BYTE *result, unsigned __int8 *a2)
{
  int v2;
  BOOL v3;
  BOOL v4;
  BOOL v5;
  int v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;

  v2 = *a2;
  if (*result)
    v3 = 0;
  else
    v3 = v2 == 0;
  if (!v3)
  {
    if (*result)
      v4 = v2 == 0;
    else
      v4 = 0;
    if (v4)
    {
      *result = 0;
    }
    else
    {
      if (*result)
        v5 = 1;
      else
        v5 = v2 == 0;
      if (!v5)
        *result = 1;
      result[1] = a2[1];
    }
  }
  v6 = a2[2];
  if (result[2])
    v7 = 0;
  else
    v7 = v6 == 0;
  if (!v7)
  {
    if (result[2])
      v8 = v6 == 0;
    else
      v8 = 0;
    if (v8)
    {
      result[2] = 0;
    }
    else
    {
      if (!result[2] && a2[2])
        result[2] = 1;
      result[3] = a2[3];
    }
  }
  if (result[4])
    v9 = 0;
  else
    v9 = a2[4] == 0;
  if (!v9)
  {
    if (!result[4] || a2[4])
    {
      if (!result[4] && a2[4])
        result[4] = 1;
      result[5] = a2[5];
    }
    else
    {
      result[4] = 0;
    }
  }
  if (result[6] || a2[6])
  {
    if (!result[6] || a2[6])
    {
      if (!result[6] && a2[6])
        result[6] = 1;
      result[7] = a2[7];
    }
    else
    {
      result[6] = 0;
    }
  }
  if (result[8] || a2[8])
  {
    if (!result[8] || a2[8])
    {
      if (!result[8] && a2[8])
        result[8] = 1;
      result[9] = a2[9];
    }
    else
    {
      result[8] = 0;
    }
  }
  if (result[10] || a2[10])
  {
    if (!result[10] || a2[10])
    {
      if (!result[10] && a2[10])
        result[10] = 1;
      result[11] = a2[11];
    }
    else
    {
      result[10] = 0;
    }
  }
  if (result[12] || a2[12])
  {
    if (!result[12] || a2[12])
    {
      if (!result[12] && a2[12])
        result[12] = 1;
      result[13] = a2[13];
    }
    else
    {
      result[12] = 0;
    }
  }
  if (result[14] || a2[14])
  {
    if (!result[14] || a2[14])
    {
      if (!result[14] && a2[14])
        result[14] = 1;
      result[15] = a2[15];
    }
    else
    {
      result[14] = 0;
    }
  }
  if (result[16] || a2[16])
  {
    if (!result[16] || a2[16])
    {
      if (!result[16])
      {
        if (a2[16])
          result[16] = 1;
      }
      result[17] = a2[17];
    }
    else
    {
      result[16] = 0;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::FunctionLink>::operator=(uint64_t a1, uint64_t *a2, double a3)
{
  uint64_t v5;
  unint64_t v6;

  if ((uint64_t *)a1 != a2)
  {
    v5 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v5)
      {
        re::DynamicArray<re::FunctionLink>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::FunctionLink>::clear((_QWORD *)a1, a3);
      }
    }
    else if (v5)
    {
      v6 = a2[2];
      *(_QWORD *)a1 = v5;
      re::DynamicArray<re::FunctionLink>::setCapacity((_QWORD *)a1, v6);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::FunctionLink>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, v4, v5);
      re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, v4, v5);
      re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, v4, v5);
      re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

void re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, (re::DynamicString *)(v8 + 16), (unsigned int *)(v8 + 48));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 88;
    }
  }
}

void re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 16) + v3);
        ++v4;
        v3 += 88;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

void re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (re::DynamicString *)(*(_QWORD *)&v13[16] + v10 + 16));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 88;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, unsigned int *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 88 * v10 + 8) = v13 | 0x80000000;
  v14 = 88 * v10;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v14) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + v14 + 16), a4);
  v15 = *(_QWORD *)(a1 + 16) + 88 * v10;
  *(_BYTE *)(v15 + 48) = 0;
  v15 += 48;
  *(_DWORD *)(v15 + 32) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>,(std::__variant_detail::_Trait)1> const&>(v15, a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 88 * v10 + 8) = v13 | 0x80000000;
  v14 = 88 * v10;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v14) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + v14 + 16), a4);
  v15 = *(_QWORD *)(a1 + 16) + 88 * v10;
  *(_BYTE *)(v15 + 48) = 0;
  v15 += 48;
  *(_DWORD *)(v15 + 32) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>,(std::__variant_detail::_Trait)1>>(v15, a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 32);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24ED431A8 + v4))(&v7, result);
  *(_DWORD *)(v3 + 32) = -1;
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24ED431B8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 32) = v5;
  }
  return result;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re13DynamicStringENS8_11AssetHandleEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  double result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 24) = a3[3];
  v4 = a3[1];
  *(_QWORD *)a2 = *a3;
  *a3 = 0;
  v5 = a3[2];
  a3[3] = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v5;
  a3[1] = v7;
  a3[2] = v6;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re13DynamicStringENS8_11AssetHandleEEEEE19__generic_constructB8nn180100INS0_18__move_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSI_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEEOSQ_EEEDcSI_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  a2[1] = a3[1];
  a3[1] = 0;
  v3 = *a2;
  *a2 = 0;
  *a2 = *a3;
  *a3 = v3;
  v4 = a2[2];
  a2[2] = a3[2];
  a3[2] = v4;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, unsigned int *a2)
{
  re::DynamicString *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = (re::DynamicString *)result;
  v4 = *(unsigned int *)(result + 32);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24ED431A8 + v4))(&v7, result);
  *((_DWORD *)v3 + 8) = -1;
  v5 = a2[8];
  if ((_DWORD)v5 != -1)
  {
    result = off_24ED431C8[v5]((int)&v6, v3, (re::DynamicString *)a2);
    *((_DWORD *)v3 + 8) = v5;
  }
  return result;
}

re::DynamicString *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re13DynamicStringENS8_11AssetHandleEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSS_EEEDcSK_DpT0_(int a1, re::DynamicString *this, re::DynamicString *a3)
{
  return re::DynamicString::DynamicString(this, a3);
}

re::AssetHandle *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_6__ctorINS0_8__traitsIJN2re13DynamicStringENS8_11AssetHandleEEEEE19__generic_constructB8nn180100IRKNS0_18__copy_constructorISB_LNS0_6_TraitE1EEEEEvRSC_OT_EUlRSK_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSS_EEEDcSK_DpT0_(int a1, re::AssetHandle *this, re::AssetHandle *a3)
{
  return re::AssetHandle::AssetHandle(this, a3);
}

void re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 160 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, (re::DynamicString *)(v8 + 16), v8 + 48);
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 160;
    }
  }
}

void re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 16) + v3);
        ++v4;
        v3 += 160;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

void re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (re::DynamicString *)(*(_QWORD *)&v13[16] + v10 + 16));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 160;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 160 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 160 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 160 * v9 + 8) = v12 | 0x80000000;
  v13 = a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 160 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 160 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 160 * v9) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 160 * v9 + 16), a4);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = v14 + 160 * v9;
  *(_BYTE *)(v15 + 48) = 0;
  v15 += 48;
  *(_DWORD *)(v15 + 32) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>,(std::__variant_detail::_Trait)1> const&>(v15, (unsigned int *)a5);
  re::DynamicString::DynamicString((re::DynamicString *)(v15 + 40), (const re::DynamicString *)(a5 + 40));
  re::DynamicString::DynamicString((re::DynamicString *)(v15 + 72), (const re::DynamicString *)(a5 + 72));
  v16 = *(unsigned __int8 *)(a5 + 104);
  *(_BYTE *)(v15 + 104) = v16;
  if (v16)
    *(_DWORD *)(v14 + 160 * v9 + 156) = *(_DWORD *)(a5 + 108);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v13) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 160 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 160 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 160 * v9 + 8) = v12 | 0x80000000;
  v13 = a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 160 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 160 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 160 * v9) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 160 * v9 + 16), a4);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = v14 + 160 * v9;
  *(_BYTE *)(v15 + 48) = 0;
  v15 += 48;
  *(_DWORD *)(v15 + 32) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__generic_construct[abi:nn180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>,(std::__variant_detail::_Trait)1>>(v15, a5);
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  *(_QWORD *)(v15 + 64) = *(_QWORD *)(a5 + 64);
  v16 = *(_QWORD *)(a5 + 48);
  *(_QWORD *)(v15 + 40) = *(_QWORD *)(a5 + 40);
  *(_QWORD *)(a5 + 40) = 0;
  v17 = *(_QWORD *)(a5 + 56);
  *(_QWORD *)(a5 + 64) = 0;
  v19 = *(_QWORD *)(v15 + 48);
  v18 = *(_QWORD *)(v15 + 56);
  *(_QWORD *)(v15 + 48) = v16;
  *(_QWORD *)(v15 + 56) = v17;
  *(_QWORD *)(a5 + 48) = v19;
  *(_QWORD *)(a5 + 56) = v18;
  *(_OWORD *)(v15 + 88) = 0u;
  *(_OWORD *)(v15 + 72) = 0u;
  *(_QWORD *)(v15 + 96) = *(_QWORD *)(a5 + 96);
  v20 = *(_QWORD *)(a5 + 80);
  *(_QWORD *)(v15 + 72) = *(_QWORD *)(a5 + 72);
  *(_QWORD *)(a5 + 72) = 0;
  v21 = *(_QWORD *)(a5 + 88);
  *(_QWORD *)(a5 + 96) = 0;
  v23 = *(_QWORD *)(v15 + 80);
  v22 = *(_QWORD *)(v15 + 88);
  *(_QWORD *)(v15 + 80) = v20;
  *(_QWORD *)(v15 + 88) = v21;
  *(_QWORD *)(a5 + 80) = v23;
  *(_QWORD *)(a5 + 88) = v22;
  LODWORD(v21) = *(unsigned __int8 *)(a5 + 104);
  *(_BYTE *)(v15 + 104) = v21;
  if ((_DWORD)v21)
    *(_DWORD *)(v14 + 160 * v9 + 156) = *(_DWORD *)(a5 + 108);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v13) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 152 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, (re::DynamicString *)(v8 + 16), v8 + 48);
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 152;
    }
  }
}

void re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;
  uint64_t v7;
  __n128 *v8;
  int v9;
  uint64_t v10;
  __n128 *v11;
  uint64_t v12;
  int v13;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = 0uLL;
      do
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = (__n128 *)(v7 + v4);
        v9 = *(_DWORD *)(v7 + v4 + 8);
        if (v9 < 0)
        {
          v8->n128_u32[2] = v9 & 0x7FFFFFFF;
          v12 = v8[1].n128_i64[0];
          v11 = v8 + 1;
          v10 = v12;
          if (v12)
          {
            if ((*(_BYTE *)(v7 + v4 + 24) & 1) != 0)
            {
              (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v10 + 40))(v10, *(_QWORD *)(v7 + v4 + 32), v6);
              v6 = 0uLL;
            }
            *v11 = v6;
            v11[1] = v6;
            v3 = *(unsigned int *)(a1 + 32);
          }
        }
        ++v5;
        v4 += 152;
      }
      while (v5 < v3);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v13 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v13;
  }
}

void re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_OWORD *)&v13[24];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = DWORD2(v7);
      if (DWORD2(v7))
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (re::DynamicString *)(*(_QWORD *)&v13[16] + v10 + 16));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 152;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13, *(double *)&v7);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 152 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 152 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 152 * v10 + 8) = v13 | 0x80000000;
  v14 = 152 * v10;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v14) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + v14 + 16), a4);
  re::OptionalMaterialSamplerData::OptionalMaterialSamplerData(*(_QWORD *)(a1 + 16) + 152 * v10 + 48, a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::DynamicArray<re::FunctionLink>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t result;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::FunctionLink>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::FunctionLink *,re::FunctionLink *,re::FunctionLink *>((uint64_t)&v28, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 272 * a1[2], a1[4]);
    v22 = a1[2];
    if (v22 != v4)
    {
      v23 = *(_QWORD *)(a2 + 32);
      v24 = a1[4];
      v25 = 272 * v22;
      v26 = 272 * v4;
      do
      {
        *(_BYTE *)(v24 + v25) = *(_BYTE *)(v23 + v25);
        re::DynamicString::DynamicString((re::DynamicString *)(v24 + v25 + 8), (const re::DynamicString *)(v23 + v25 + 8));
        re::DynamicString::DynamicString((re::DynamicString *)(v24 + v25 + 40), (const re::DynamicString *)(v23 + v25 + 40));
        re::AssetHandle::AssetHandle((re::AssetHandle *)(v24 + v25 + 72), (const re::AssetHandle *)(v23 + v25 + 72));
        re::DynamicArray<re::ShaderAPIFlags::Values>::DynamicArray(v24 + v25 + 96, (uint64_t *)(v23 + v25 + 96));
        re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(v24 + v25 + 136, v23 + v25 + 136);
        re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(v24 + v25 + 184, v23 + v25 + 184);
        result = re::DynamicArray<BOOL>::DynamicArray(v24 + v25 + 232, (uint64_t *)(v23 + v25 + 232));
        v26 -= 272;
        v23 += 272;
        v24 += 272;
      }
      while (v25 != v26);
    }
  }
  else
  {
    result = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::FunctionLink *,re::FunctionLink *,re::FunctionLink *>((uint64_t)&v27, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 272 * v4, a1[4]);
    v7 = a1[2];
    if (v4 != v7)
    {
      v8 = a1[4];
      v9 = 272 * v4;
      v10 = 272 * v7;
      do
      {
        v11 = (_QWORD *)(v8 + v9);
        v12 = *(_QWORD *)(v8 + v9 + 232);
        if (v12)
        {
          if (v11[33])
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
          v11[33] = 0;
          *(_QWORD *)(v8 + v9 + 240) = 0;
          *(_QWORD *)(v8 + v9 + 248) = 0;
          *(_QWORD *)(v8 + v9 + 232) = 0;
          ++*(_DWORD *)(v8 + v9 + 256);
        }
        re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v11 + 23, v6);
        v13 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v11 + 17);
        v16 = v11[12];
        v15 = v11 + 12;
        v14 = v16;
        if (v16)
        {
          v17 = v8 + v9;
          if (*(_QWORD *)(v8 + v9 + 128))
            (*(void (**)(uint64_t, double))(*(_QWORD *)v14 + 40))(v14, v13);
          *(_QWORD *)(v17 + 128) = 0;
          v15[1] = 0;
          v15[2] = 0;
          *v15 = 0;
          ++*(_DWORD *)(v17 + 120);
        }
        v18 = v8 + v9;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)(v8 + v9 + 72));
        v19 = *(_QWORD *)(v8 + v9 + 40);
        if (v19)
        {
          if ((*(_BYTE *)(v18 + 48) & 1) != 0)
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 40))(v19, *(_QWORD *)(v8 + v9 + 56));
          v6 = 0.0;
          *(_OWORD *)(v18 + 40) = 0u;
          *(_OWORD *)(v18 + 56) = 0u;
        }
        v21 = *(_QWORD *)(v18 + 8);
        v20 = (_OWORD *)(v18 + 8);
        result = v21;
        if (v21)
        {
          if ((*(_BYTE *)(v8 + v9 + 16) & 1) != 0)
            result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *(_QWORD *)(v8 + v9 + 24));
          v6 = 0.0;
          *v20 = 0u;
          v20[1] = 0u;
        }
        v8 += 272;
        v10 -= 272;
      }
      while (v9 != v10);
    }
  }
  a1[2] = v4;
  return result;
}

_QWORD *re::DynamicArray<re::FunctionLink>::clear(_QWORD *result, double a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _QWORD *v17;

  v2 = result;
  v3 = result[2];
  result[2] = 0;
  if (v3)
  {
    v4 = 0;
    v5 = result[4];
    v6 = 272 * v3;
    do
    {
      v7 = (_QWORD *)(v5 + v4);
      v8 = *(_QWORD *)(v5 + v4 + 232);
      if (v8)
      {
        if (v7[33])
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
        v7[33] = 0;
        *(_QWORD *)(v5 + v4 + 240) = 0;
        *(_QWORD *)(v5 + v4 + 248) = 0;
        *(_QWORD *)(v5 + v4 + 232) = 0;
        ++*(_DWORD *)(v5 + v4 + 256);
      }
      re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v7 + 23, a2);
      v9 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v7 + 17);
      v12 = v7[12];
      v11 = v7 + 12;
      v10 = v12;
      if (v12)
      {
        v13 = v5 + v4;
        if (*(_QWORD *)(v5 + v4 + 128))
          (*(void (**)(uint64_t, double))(*(_QWORD *)v10 + 40))(v10, v9);
        *(_QWORD *)(v13 + 128) = 0;
        v11[1] = 0;
        v11[2] = 0;
        *v11 = 0;
        ++*(_DWORD *)(v13 + 120);
      }
      v14 = v5 + v4;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v5 + v4 + 72));
      v15 = *(_QWORD *)(v5 + v4 + 40);
      if (v15)
      {
        if ((*(_BYTE *)(v14 + 48) & 1) != 0)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v15 + 40))(v15, *(_QWORD *)(v5 + v4 + 56));
        a2 = 0.0;
        *(_OWORD *)(v14 + 40) = 0u;
        *(_OWORD *)(v14 + 56) = 0u;
      }
      v17 = *(_QWORD **)(v14 + 8);
      v16 = (_OWORD *)(v14 + 8);
      result = v17;
      if (v17)
      {
        if ((*(_BYTE *)(v5 + v4 + 16) & 1) != 0)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 40))(result, *(_QWORD *)(v5 + v4 + 24));
        a2 = 0.0;
        *v16 = 0u;
        v16[1] = 0u;
      }
      v4 += 272;
    }
    while (v6 != v4);
  }
  ++*((_DWORD *)v2 + 6);
  return result;
}

_QWORD *re::DynamicArray<re::FunctionLink>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::FunctionLink>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x110uLL))
        {
          v2 = 272 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 272 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 272, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 272 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::FunctionLink>(v8, v11);
          v8 += 272;
          v11 += 272;
          v10 -= 272;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::ObjectHelper::move<re::FunctionLink>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re::AssetHandle *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t result;

  v2 = a2;
  *(_BYTE *)a2 = *(_BYTE *)a1;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  v4 = a1 + 8;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  v8 = (_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  v10 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 56) = v11;
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = 0;
  v12 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v13 = (re::AssetHandle *)(a1 + 72);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  v14 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_DWORD *)(a2 + 120) = 0;
  v15 = (_QWORD *)(a1 + 96);
  v16 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a2 + 104) = v16;
  *(_QWORD *)(a1 + 104) = 0;
  v17 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v17;
  v18 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v18;
  ++*(_DWORD *)(a1 + 120);
  ++*(_DWORD *)(a2 + 120);
  v19 = (uint64_t *)(a1 + 136);
  *(_OWORD *)(a2 + 152) = 0u;
  *(_DWORD *)(a2 + 168) = 0;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_QWORD *)(a2 + 172) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a2 + 136), (uint64_t *)(a1 + 136));
  *(_OWORD *)(v2 + 184) = 0u;
  v2 += 184;
  *(_DWORD *)(v2 + 32) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 36) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v2, (uint64_t *)(a1 + 184));
  *(_QWORD *)(v2 + 80) = 0;
  *(_DWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 48) = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  v21 = *(_QWORD *)(v2 + 80);
  *(_QWORD *)(v2 + 80) = *(_QWORD *)(a1 + 264);
  v22 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(v2 + 56) = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  v23 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 64) = *(_QWORD *)(a1 + 248);
  ++*(_DWORD *)(a1 + 256);
  ++*(_DWORD *)(v2 + 72);
  *(_QWORD *)(a1 + 248) = v23;
  *(_QWORD *)(a1 + 264) = v21;
  if (v22)
  {
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
    *(_QWORD *)(a1 + 264) = 0;
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    ++*(_DWORD *)(a1 + 256);
  }
  re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 184), v20);
  v24 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v19);
  if (*v15)
  {
    if (*(_QWORD *)(a1 + 128))
      (*(void (**)(_QWORD, double))(*(_QWORD *)*v15 + 40))(*v15, v24);
    *(_QWORD *)(a1 + 128) = 0;
    v15[1] = 0;
    v15[2] = 0;
    *v15 = 0;
    ++*(_DWORD *)(a1 + 120);
  }
  re::AssetHandle::~AssetHandle(v13);
  if (*(_QWORD *)v8)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v8 + 40))(*(_QWORD *)v8, *(_QWORD *)(a1 + 56));
    *v8 = 0u;
    v8[1] = 0u;
  }
  result = *(_QWORD *)v4;
  if (*(_QWORD *)v4)
  {
    if ((*(_BYTE *)(a1 + 16) & 1) != 0)
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *(_QWORD *)(a1 + 24));
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
  }
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::FunctionLink *,re::FunctionLink *,re::FunctionLink *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v8 = a2 + v7;
    *(_BYTE *)(a4 + v7) = *(_BYTE *)(a2 + v7);
    re::DynamicString::operator=((re::DynamicString *)(a4 + v7 + 8), (re::DynamicString *)(a2 + v7 + 8));
    re::DynamicString::operator=((re::DynamicString *)(a4 + v7 + 40), (re::DynamicString *)(a2 + v7 + 40));
    re::AssetHandle::operator=((uint64_t *)(a4 + v7 + 72), (uint64_t *)(a2 + v7 + 72));
    re::DynamicArray<re::ShaderAPIFlags::Values>::operator=(a4 + v7 + 96, (uint64_t *)(a2 + v7 + 96));
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a4 + v7 + 136, a2 + v7 + 136);
    re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(a4 + v7 + 184, a2 + v7 + 184);
    re::DynamicArray<BOOL>::operator=(a4 + v7 + 232, (uint64_t *)(a2 + v7 + 232));
    v7 += 272;
  }
  while (v8 + 272 != v6);
  return v6;
}

uint64_t re::DynamicArray<re::ShaderAPIFlags::Values>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
        re::DynamicArray<re::ShaderAPIFlags::Values>::copy((void **)a1, (uint64_t)a2);
      else
        *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::EvaluationCommand>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::ShaderAPIFlags::Values>::copy((void **)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, v4, v5);
      re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

void **re::DynamicArray<re::ShaderAPIFlags::Values>::copy(void **result, uint64_t a2)
{
  void **v3;
  unint64_t v4;
  void *v5;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<re::EvaluationCommand>::setCapacity(result, *(_QWORD *)(a2 + 16));
    v5 = v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), 4 * (_QWORD)v5);
      v5 = v3[2];
    }
    result = (void **)memcpy((char *)v3[4] + 4 * (_QWORD)v5, (const void *)(*(_QWORD *)(a2 + 32) + 4 * (_QWORD)v5), 4 * v4 - 4 * (_QWORD)v5);
  }
  else if (v4)
  {
    result = (void **)memmove(result[4], *(const void **)(a2 + 32), 4 * v4);
  }
  v3[2] = (void *)v4;
  return result;
}

void re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, (re::DynamicString *)(v8 + 16), (_OWORD *)(v8 + 48));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 64;
    }
  }
}

void re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;
  uint64_t v7;
  __n128 *v8;
  int v9;
  uint64_t v10;
  __n128 *v11;
  uint64_t v12;
  int v13;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = 0uLL;
      do
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = (__n128 *)(v7 + v4);
        v9 = *(_DWORD *)(v7 + v4 + 8);
        if (v9 < 0)
        {
          v8->n128_u32[2] = v9 & 0x7FFFFFFF;
          v12 = v8[1].n128_i64[0];
          v11 = v8 + 1;
          v10 = v12;
          if (v12)
          {
            if ((*(_BYTE *)(v7 + v4 + 24) & 1) != 0)
            {
              (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v10 + 40))(v10, *(_QWORD *)(v7 + v4 + 32), v6);
              v6 = 0uLL;
            }
            *v11 = v6;
            v11[1] = v6;
            v3 = *(unsigned int *)(a1 + 32);
          }
        }
        ++v5;
        v4 += 64;
      }
      while (v5 < v3);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v13 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v13;
  }
}

void re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_OWORD *)&v13[24];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = DWORD2(v7);
      if (DWORD2(v7))
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (re::DynamicString *)(*(_QWORD *)&v13[16] + v10 + 16));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 64;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13, *(double *)&v7);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, _OWORD *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + (v10 << 6) + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + (v10 << 6) + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + (v10 << 6) + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 6) + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 6)) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + (v10 << 6) + 16), a4);
  *(_OWORD *)(*(_QWORD *)(a1 + 16) + (v10 << 6) + 48) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::DynamicArray<re::ShaderAPIFlags::Values>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::EvaluationCommand>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::ShaderAPIFlags::Values>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u)
      v5 = 3;
    else
      v5 = *(_DWORD *)(a2 + 28);
    re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, v4, v5);
    re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v8, a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v6 + 288 * v5 + 16, a2))
  {
    v5 = *(_DWORD *)(v6 + 288 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      return 0;
  }
  return v6 + 288 * v5 + 48;
}

void re::HashTable<re::DynamicString,re::TextureProvider const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  unint64_t *v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  signed int v20;
  _BYTE v21[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v21, 0, 36);
      *(_QWORD *)&v21[36] = 0x7FFFFFFFLL;
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v21, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v21;
      v6 = *(unint64_t **)(a1 + 16);
      v7 = *(_OWORD *)&v21[8];
      *(_OWORD *)v21 = v5;
      *(_QWORD *)&v21[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v21[24];
      *(_OWORD *)&v21[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v21[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        do
        {
          if ((v6[1] & 0x80000000) != 0)
          {
            v13 = *v6;
            v14 = *(unsigned int *)(a1 + 24);
            v15 = *v6 % v14;
            v16 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v16 == 0x7FFFFFFF)
            {
              v16 = *(unsigned int *)(a1 + 32);
              v17 = v16;
              if ((_DWORD)v16 == (_DWORD)v14)
              {
                re::HashTable<re::DynamicString,re::TextureProvider const*,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v11));
                v15 = v13 % *(unsigned int *)(a1 + 24);
                v17 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v17 + 1;
              v18 = *(_QWORD *)(a1 + 16);
              v19 = *(_DWORD *)(v18 + 56 * v16 + 8);
            }
            else
            {
              v18 = *(_QWORD *)(a1 + 16);
              v19 = *(_DWORD *)(v18 + 56 * v16 + 8);
              *(_DWORD *)(a1 + 36) = v19 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v18 + 56 * v16 + 8) = v19 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v16 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v16 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v15);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v16) = v13;
            re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 56 * v16 + 16), (const re::DynamicString *)(v6 + 2));
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v16 + 48) = v6[6];
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v15) = v16;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v6 += 7;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v21, *(double *)&v7);
    }
  }
  else
  {
    if (a2)
      v20 = a2;
    else
      v20 = 3;
  }
}

BOOL re::hasPhysicsMaterialAPI(void *a1)
{
  id v1;
  _BOOL8 v2;
  void *v3;

  v1 = a1;
  if ((re::isRootNodeByPath(v1) & 1) != 0)
  {
    v2 = 0;
  }
  else
  {
    objc_msgSend(v1, "property:", CFSTR("preliminary:physics:material:restitution"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = v3 != 0;

  }
  return v2;
}

void re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 288 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

re::ecs2::TransformComponent *re::ecs2::EntityAssetData::addComponent<re::ecs2::TransformComponent>(_DWORD *a1)
{
  _anonymous_namespace_ *v1;
  re::ecs2::TransformComponent *v3;
  re::ecs2::TransformComponent *v4;
  __n128 v6;
  char v7;

  v1 = (_anonymous_namespace_ *)(a1 + 8);
  if (!*((_QWORD *)a1 + 4))
  {
    re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v1, 0);
    ++a1[14];
  }
  v3 = (re::ecs2::TransformComponent *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                                             + 7)
                                                                                          + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 208, 0);
  v4 = re::ecs2::TransformComponent::TransformComponent(v3);
  v6.n128_u64[0] = *(_QWORD *)((*(uint64_t (**)(re::ecs2::TransformComponent *))(*(_QWORD *)v4 + 40))(v4)
                             + 24) >> 1;
  v6.n128_u64[1] = (unint64_t)v3;
  v7 = 1;
  re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add(v1, &v6);
  return v3;
}

unint64_t re::ecs2::EntityAssetData::addComponent<re::ecs2::MeshDeformationComponent>(_DWORD *a1)
{
  _anonymous_namespace_ *v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __n128 v8;
  char v9;
  unint64_t v10;

  v1 = (_anonymous_namespace_ *)(a1 + 8);
  if (!*((_QWORD *)a1 + 4))
  {
    re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v1, 0);
    ++a1[14];
  }
  v3 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                             + 7)
                                                          + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 440, 0);
  re::make::shared::inplace<re::ecs2::MeshDeformationComponent>(v3, &v10);
  v4 = v10;
  v5 = *(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v10 + 40))(v10) + 24) >> 1;
  v6 = v10;
  v10 = 0;
  v8.n128_u64[0] = v5;
  v8.n128_u64[1] = v6;
  v9 = 1;
  re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add(v1, &v8);
  if (v10)

  return v4;
}

void re::ecs2::EntityAssetData::addComponent<re::ecs2::RigComponent>(_DWORD *a1)
{
  _anonymous_namespace_ *v1;
  ArcSharedObject *v3;
  ArcSharedObject *v4;
  unint64_t v5;
  __n128 v6;
  char v7;
  ArcSharedObject *v8;

  v1 = (_anonymous_namespace_ *)(a1 + 8);
  if (!*((_QWORD *)a1 + 4))
  {
    re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v1, 0);
    ++a1[14];
  }
  v3 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 496, 0);
  re::make::shared::inplace<re::ecs2::RigComponent>(v3, &v8);
  v4 = v8;
  v5 = *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
       + 3) >> 1;
  v8 = 0;
  v6.n128_u64[0] = v5;
  v6.n128_u64[1] = (unint64_t)v4;
  v7 = 1;
  re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add(v1, &v6);
  if (v8)

}

void re::ecs2::EntityAssetData::addComponent<re::ecs2::BlendShapeWeightsComponent>(_DWORD *a1)
{
  _anonymous_namespace_ *v1;
  ArcSharedObject *v3;
  unint64_t v4;
  unint64_t v5;
  __n128 v6;
  char v7;
  unint64_t v8;

  v1 = (_anonymous_namespace_ *)(a1 + 8);
  if (!*((_QWORD *)a1 + 4))
  {
    re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v1, 0);
    ++a1[14];
  }
  v3 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                                + 7)
                                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 368, 0);
  re::make::shared::inplace<re::ecs2::BlendShapeWeightsComponent>(v3, &v8);
  v4 = v8;
  v5 = *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
       + 3) >> 1;
  v8 = 0;
  v6.n128_u64[0] = v5;
  v6.n128_u64[1] = v4;
  v7 = 1;
  re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add(v1, &v6);
  if (v8)

}

void re::ecs2::EntityAssetData::addComponent<re::ecs2::SkeletalPoseComponent>(_DWORD *a1)
{
  _anonymous_namespace_ *v1;
  _QWORD *v3;
  double v4;
  unint64_t v5;
  unint64_t v6;
  __n128 v7;
  char v8;
  unint64_t v9;

  v1 = (_anonymous_namespace_ *)(a1 + 8);
  if (!*((_QWORD *)a1 + 4))
  {
    re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v1, 0);
    ++a1[14];
  }
  v3 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                       + 7)
                                                                    + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 3952, 0);
  v4 = re::make::shared::inplace<re::ecs2::SkeletalPoseComponent>(v3, &v9);
  v5 = *(_QWORD *)((*(uint64_t (**)(unint64_t, double))(*(_QWORD *)v9 + 40))(v9, v4) + 24) >> 1;
  v6 = v9;
  v9 = 0;
  v7.n128_u64[0] = v5;
  v7.n128_u64[1] = v6;
  v8 = 1;
  re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add(v1, &v7);
  if (v9)

}

id *re::ecs2::EntityAssetData::addComponent<re::ecs2::MeshComponent>(_DWORD *a1)
{
  _anonymous_namespace_ *v1;
  id *v3;
  id *v4;
  __n128 v6;
  char v7;

  v1 = (_anonymous_namespace_ *)(a1 + 8);
  if (!*((_QWORD *)a1 + 4))
  {
    re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v1, 0);
    ++a1[14];
  }
  v3 = (id *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                   + 7)
                                                                + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 336, 0);
  v4 = re::ecs2::MeshComponent::MeshComponent(v3);
  v6.n128_u64[0] = *(_QWORD *)((*((uint64_t (**)(id *))*v4 + 5))(v4) + 24) >> 1;
  v6.n128_u64[1] = (unint64_t)v3;
  v7 = 1;
  re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add(v1, &v6);
  return v3;
}

uint64_t re::ecs2::EntityAssetData::addComponent<re::ecs2::AnimationLibraryComponent>(_DWORD *a1)
{
  _anonymous_namespace_ *v1;
  uint64_t v3;
  unint64_t v4;
  __n128 v6;
  char v7;

  v1 = (_anonymous_namespace_ *)(a1 + 8);
  if (!*((_QWORD *)a1 + 4))
  {
    re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v1, 0);
    ++a1[14];
  }
  v3 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                             + 7)
                                                          + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 120, 0);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_QWORD *)(v3 + 112) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(_QWORD *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 24) = 0;
  *(_QWORD *)v4 = &off_24ED43558;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 76) = 0u;
  *(_QWORD *)(v4 + 92) = 0x7FFFFFFFLL;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = -1;
  v6.n128_u64[0] = *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                   + 3) >> 1;
  v6.n128_u64[1] = v4;
  v7 = 1;
  re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add(v1, &v6);
  return v3;
}

uint64_t *re::make::shared::inplace<re::ecs2::MeshDeformationComponent>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id *v4;
  uint64_t v5;
  re *inited;
  uint64_t *result;

  *(_QWORD *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v4 = (id *)(a1 + 384);
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v5 + 16) = 0;
  *(_BYTE *)(v5 + 24) = 0;
  *(_QWORD *)v5 = &off_24ED43808;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_DWORD *)(v5 + 136) = 0;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + 200) = 0u;
  *(_DWORD *)(v5 + 216) = 0;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_DWORD *)(v5 + 176) = 0;
  *(_QWORD *)(v5 + 224) = 0;
  *(_QWORD *)(v5 + 232) = 0;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_DWORD *)(v5 + 96) = 0;
  *(_QWORD *)(v5 + 240) = 0;
  *(_QWORD *)(v5 + 248) = -1;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_OWORD *)(v5 + 272) = 0u;
  *(_OWORD *)(v5 + 288) = 0u;
  *(_OWORD *)(v5 + 304) = 0u;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(_OWORD *)(v5 + 352) = 0u;
  *(_OWORD *)(v5 + 368) = 0u;
  inited = (re *)objc_initWeak(v4, 0);
  *(_QWORD *)(a1 + 392) = 0;
  result = re::globalAllocators(inited);
  *(_QWORD *)(a1 + 424) = result[2];
  *(_QWORD *)(a1 + 432) = 0;
  *a2 = a1;
  return result;
}

void re::ecs2::MeshDeformationComponent::~MeshDeformationComponent(id *this)
{
  re::ecs2::MeshDeformationComponent::~MeshDeformationComponent(this);
  JUMPOUT(0x2276933B8);
}

{
  id v2;
  id v3;
  id v4;
  id v5;

  *this = &off_24ED43808;
  re::FramePersistentPtr<re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData,re::FrameManager>::~FramePersistentPtr(this + 48);
  re::FixedArray<re::MeshDeformationRuntimeData::DeformationMapping>::deinit(this + 45);
  v2 = this[42];
  if (v2)
  {
    if (this[43])
    {
      (*(void (**)(id, id))(*(_QWORD *)v2 + 40))(v2, this[44]);
      this[43] = 0;
      this[44] = 0;
    }
    this[42] = 0;
  }
  v3 = this[39];
  if (v3)
  {
    if (this[40])
    {
      (*(void (**)(id, id))(*(_QWORD *)v3 + 40))(v3, this[41]);
      this[40] = 0;
      this[41] = 0;
    }
    this[39] = 0;
  }
  v4 = this[36];
  if (v4)
  {
    if (this[37])
    {
      (*(void (**)(id, id))(*(_QWORD *)v4 + 40))(v4, this[38]);
      this[37] = 0;
      this[38] = 0;
    }
    this[36] = 0;
  }
  v5 = this[33];
  if (v5)
  {
    if (this[34])
    {
      (*(void (**)(id, id))(*(_QWORD *)v5 + 40))(v5, this[35]);
      this[34] = 0;
      this[35] = 0;
    }
    this[33] = 0;
  }
  re::DynamicArray<re::MeshDeformationIndex>::deinit((uint64_t)(this + 24));
  re::DynamicArray<re::DeformationStackDefinition>::deinit((uint64_t)(this + 19));
  re::DynamicArray<re::MeshDeformationIndex>::deinit((uint64_t)(this + 14));
  re::DynamicArray<re::DeformationStackDefinition>::deinit((uint64_t)(this + 9));
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(this + 4));
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return 7;
}

void *re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

id *re::FramePersistentPtr<re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData,re::FrameManager>::~FramePersistentPtr(id *a1)
{
  re *inited;
  id location;
  _QWORD v5[3];
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  inited = (re *)objc_initWeak(&location, 0);
  memset(v5, 0, sizeof(v5));
  v6 = re::globalAllocators(inited)[2];
  v7 = 0;
  re::FramePersistentPtr<re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData,re::FrameManager>::reset(a1, &location, 0, (uint64_t)v5);
  if (v7)
  {
    (*(void (**)(_QWORD *))*v7)(v7);
    if (v7 != v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  }
  objc_destroyWeak(&location);
  location = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 2));
  objc_destroyWeak(a1);
  *a1 = 0;
  return a1;
}

uint64_t re::FramePersistentPtr<re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData,re::FrameManager>::reset(id *location, id *a2, void *a3, uint64_t a4)
{
  _QWORD *WeakRetained;
  _QWORD *v9;
  re *v10;
  uint64_t *v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD v18[3];
  uint64_t v19;
  re *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (location[1])
  {
    WeakRetained = objc_loadWeakRetained(location);
    if (WeakRetained)
    {
      v9 = WeakRetained;

      if (!location[6])
      {
        v16 = re::globalAllocators(v10)[2];
        v18[0] = &off_24ED43888;
        v19 = v16;
        v20 = (re *)v18;
        re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)(location + 2), (uint64_t)v18);
        v10 = v20;
        if (v20)
        {
          v10 = (re *)(**(uint64_t (***)(re *))v20)(v20);
          if (v20 != (re *)v18)
            v10 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
        }
      }
      v11 = re::globalAllocators(v10);
      v12 = v9[2] & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)v9[1] << 60);
      v13 = location[1];
      v14 = re::PerFrameAllocatorManager::perFrameAllocator(v11[6], v12);
      (*(void (**)(uint64_t, id, id *))(*(_QWORD *)v14 + 16))(v14, v13, location + 2);
    }
    else
    {
      v15 = location[6];
      if (v15)
      {
        v18[0] = location[1];
        (*(void (**)(id, _QWORD *))(*(_QWORD *)v15 + 16))(v15, v18);
      }
      else
      {
        re::internal::destroyPersistent<re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData>((re *)"reset", 161, (re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData *)location[1]);
      }
    }
  }
  re::ArcWeakPtr<re::VideoHistogram>::operator=(location, a2);
  location[1] = a3;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(location + 2), a4);
}

re *re::internal::destroyPersistent<re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData>(re *result, uint64_t a2, re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData *a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData::~BuiltMeshDeformationData(a3);
    return (re *)(*(uint64_t (**)(uint64_t, re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

void re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

re *re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::operator()(uint64_t a1, re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData **a2)
{
  return re::internal::destroyPersistent<re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData>((re *)"operator()", 149, *a2);
}

_QWORD *re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED43888;
  return result;
}

_QWORD *re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED43888;
  return result;
}

uint64_t re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::size()
{
  return 16;
}

void re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData::~BuiltMeshDeformationData(re::ecs2::MeshDeformationComponent::BuiltMeshDeformationData *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  re::FixedArray<re::DeformationBufferAllocator>::deinit((_QWORD *)this + 13);
  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    if (*((_QWORD *)this + 11))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 12));
      *((_QWORD *)this + 11) = 0;
      *((_QWORD *)this + 12) = 0;
    }
    *((_QWORD *)this + 10) = 0;
  }
  v3 = *((_QWORD *)this + 7);
  if (v3)
  {
    if (*((_QWORD *)this + 8))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 9));
      *((_QWORD *)this + 8) = 0;
      *((_QWORD *)this + 9) = 0;
    }
    *((_QWORD *)this + 7) = 0;
  }
  v4 = *((_QWORD *)this + 4);
  if (v4)
  {
    if (*((_QWORD *)this + 5))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 6));
      *((_QWORD *)this + 5) = 0;
      *((_QWORD *)this + 6) = 0;
    }
    *((_QWORD *)this + 4) = 0;
  }
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    if (*((_QWORD *)this + 2))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 3));
      *((_QWORD *)this + 2) = 0;
      *((_QWORD *)this + 3) = 0;
    }
    *((_QWORD *)this + 1) = 0;
  }
}

_QWORD *re::FixedArray<re::DeformationBufferAllocator>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (_QWORD *)result[2];
      v5 = &v4[6 * v2];
      do
      {
        re::FixedArray<re::DeformationBufferAllocator::DeformationStackAllocation>::deinit(v4);
        re::FixedArray<re::BucketArray<re::DeformationBufferAllocator::DeformationStackAllocation,4ul>>::deinit(v4 + 3);
        re::FixedArray<re::BucketArray<re::DeformationBufferAllocator::DeformationStackAllocation,4ul>>::deinit(v4 + 3);
        re::FixedArray<re::DeformationBufferAllocator::DeformationStackAllocation>::deinit(v4);
        v4 += 6;
      }
      while (v4 != v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

_QWORD *re::FixedArray<re::BucketArray<re::DeformationBufferAllocator::DeformationStackAllocation,4ul>>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = result[2];
      v5 = 56 * v2;
      do
      {
        re::BucketArray<re::DeformationBufferAllocator::DeformationStackAllocation,4ul>::deinit(v4);
        re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
        v4 += 56;
        v5 -= 56;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

uint64_t re::BucketArray<re::DeformationBufferAllocator::DeformationStackAllocation,4ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = re::BucketArray<re::DeformationBufferAllocator::DeformationStackAllocation,4ul>::operator[](a1, i) + 16;
      re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::deinit(v4);
      re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::DeformationBufferAllocator::DeformationStackAllocation,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + 72 * (a2 & 3);
}

uint64_t re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t v4;
  void *v5;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](a1, i);
      v5 = *(void **)(v4 + 24);
      if (v5)
      {

        *(_QWORD *)(v4 + 24) = 0;
      }
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + 40 * (a2 & 3);
}

{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + 40 * (a2 & 3);
}

_QWORD *re::FixedArray<re::DeformationBufferAllocator::DeformationStackAllocation>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = 72 * v2;
      v5 = result[2] + 16;
      do
      {
        re::BucketArray<re::DeformationBufferAllocator::VertexBufferAllocation,4ul>::deinit(v5);
        re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v5);
        v5 += 72;
        v4 -= 72;
      }
      while (v4);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

void re::DeformationDefinition::~DeformationDefinition(re::DeformationDefinition *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    if (*((_QWORD *)this + 3))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 4));
      *((_QWORD *)this + 3) = 0;
      *((_QWORD *)this + 4) = 0;
    }
    *((_QWORD *)this + 2) = 0;
  }
  re::StringID::destroyString(this);
}

void *re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

id re::make::shared::inplace<re::ecs2::RigComponent>@<X0>(ArcSharedObject *a1@<X0>, ArcSharedObject **a2@<X8>)
{
  uint64_t v4;
  id result;

  *((_OWORD *)a1 + 29) = 0u;
  *((_OWORD *)a1 + 30) = 0u;
  *((_OWORD *)a1 + 27) = 0u;
  *((_OWORD *)a1 + 28) = 0u;
  *((_OWORD *)a1 + 25) = 0u;
  *((_OWORD *)a1 + 26) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 24) = 0;
  *(_QWORD *)v4 = &off_24ED44018;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_DWORD *)(v4 + 128) = 0;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_DWORD *)(v4 + 168) = 0;
  *(_QWORD *)(v4 + 176) = 0;
  *(_QWORD *)(v4 + 184) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 76) = 0u;
  *(_QWORD *)(v4 + 192) = -1;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 264) = 0u;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_DWORD *)(v4 + 296) = 1;
  *(_QWORD *)(v4 + 312) = 0;
  *(_QWORD *)(v4 + 320) = 0;
  *(_DWORD *)(v4 + 328) = 0;
  *(_QWORD *)(v4 + 304) = 0;
  *(_OWORD *)(v4 + 336) = 0u;
  *(_OWORD *)(v4 + 352) = 0u;
  *(_OWORD *)(v4 + 368) = 0u;
  *(_OWORD *)(v4 + 384) = 0u;
  *(_OWORD *)(v4 + 400) = 0u;
  *(_OWORD *)(v4 + 416) = 0u;
  *(_OWORD *)(v4 + 428) = 0u;
  *(_QWORD *)(v4 + 444) = 0x7FFFFFFFLL;
  *(_QWORD *)(v4 + 464) = 0;
  *(_QWORD *)(v4 + 472) = 0;
  *(_QWORD *)(v4 + 456) = 0;
  *((_BYTE *)a1 + 480) = 0;
  result = objc_initWeak((id *)(v4 + 488), 0);
  *a2 = a1;
  return result;
}

void re::ecs2::RigComponent::~RigComponent(re::ecs2::RigComponent *this)
{
  re::ecs2::RigComponent::~RigComponent(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;

  objc_destroyWeak((id *)this + 61);
  *((_QWORD *)this + 61) = 0;
  re::FixedArray<re::DynamicArray<re::RigRuntimeData::RigGraphRunTimeBoundParameter>>::deinit((_QWORD *)this + 57);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 51);
  re::FixedArray<re::DynamicArray<re::RigHierarchyJointDescription>>::deinit((_QWORD *)this + 48);
  re::BindNode::deinit((re::ecs2::RigComponent *)((char *)this + 344));
  re::BucketArray<re::RigEnvironment::RigEnvironmentScope,8ul>::deinit((uint64_t)this + 280);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 280);
  re::FixedArray<re::RigEvaluation>::deinit((_QWORD *)this + 31);
  v2 = *((_QWORD *)this + 28);
  if (v2)
  {
    if (*((_QWORD *)this + 29))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 30));
      *((_QWORD *)this + 29) = 0;
      *((_QWORD *)this + 30) = 0;
    }
    *((_QWORD *)this + 28) = 0;
  }
  re::FixedArray<re::FixedArray<float>>::deinit((_QWORD *)this + 25);
  re::DynamicArray<re::MeshRigGraphIndex>::deinit((uint64_t)this + 144);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 104);
  re::DynamicArray<re::RigDefinition>::deinit((uint64_t)this + 64);
  re::AssetHandle::~AssetHandle((re::ecs2::RigComponent *)((char *)this + 32));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

double re::make::shared::inplace<re::ecs2::BlendShapeWeightsComponent>@<D0>(ArcSharedObject *a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v3;
  uint64_t v4;
  double result;

  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  v3 = (_OWORD *)((char *)a1 + 144);
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 24) = 0;
  *(_QWORD *)v4 = &off_24ED435D8;
  result = 0.0;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_DWORD *)(v4 + 168) = 0;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_DWORD *)(v4 + 208) = 0;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 116) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_DWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 216) = 0;
  *(_QWORD *)(v4 + 224) = v4 + 104;
  *(_QWORD *)(v4 + 232) = v3;
  *(_QWORD *)(v4 + 240) = 0;
  *(_QWORD *)(v4 + 248) = -1;
  *(_QWORD *)(v4 + 360) = 0;
  *(_DWORD *)(v4 + 352) = 0;
  *(_OWORD *)(v4 + 320) = 0u;
  *(_OWORD *)(v4 + 336) = 0u;
  *(_OWORD *)(v4 + 288) = 0u;
  *(_OWORD *)(v4 + 304) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_OWORD *)(v4 + 272) = 0u;
  *a2 = v4;
  return result;
}

void re::ecs2::BlendShapeWeightsComponent::~BlendShapeWeightsComponent(re::ecs2::BlendShapeWeightsComponent *this)
{
  re::ecs2::BlendShapeWeightsComponent::~BlendShapeWeightsComponent(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)this + 328);
  v2 = *((_QWORD *)this + 38);
  if (v2)
  {
    if (*((_QWORD *)this + 39))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 40));
      *((_QWORD *)this + 39) = 0;
      *((_QWORD *)this + 40) = 0;
    }
    *((_QWORD *)this + 38) = 0;
  }
  v3 = *((_QWORD *)this + 35);
  if (v3)
  {
    if (*((_QWORD *)this + 36))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 37));
      *((_QWORD *)this + 36) = 0;
      *((_QWORD *)this + 37) = 0;
    }
    *((_QWORD *)this + 35) = 0;
  }
  v4 = *((_QWORD *)this + 32);
  if (v4)
  {
    if (*((_QWORD *)this + 33))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 34));
      *((_QWORD *)this + 33) = 0;
      *((_QWORD *)this + 34) = 0;
    }
    *((_QWORD *)this + 32) = 0;
  }
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 184);
  re::DynamicArray<re::MeshDeformationIndex>::deinit((uint64_t)this + 144);
  re::DynamicArray<re::FixedArray<re::StringID>>::deinit((uint64_t)this + 104);
  re::DynamicArray<re::BlendShapeWeights>::deinit((uint64_t)this + 56);
  re::AssetHandle::~AssetHandle((re::ecs2::BlendShapeWeightsComponent *)((char *)this + 32));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

uint64_t re::DynamicArray<re::BlendShapeWeights>::deinit(uint64_t a1)
{
  uint64_t result;
  re::BlendShapeWeights *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::BlendShapeWeights **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 32 * v4;
        do
        {
          re::BlendShapeWeights::~BlendShapeWeights(v3);
          v3 = (re::BlendShapeWeights *)((char *)v3 + 32);
          v5 -= 32;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::BlendShapeWeights **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::BlendShapeWeights *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::make::shared::inplace<re::ecs2::SkeletalPoseComponent>@<D0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  bzero(a1, 0xF70uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  a1[2] = 0;
  *((_BYTE *)a1 + 24) = 0;
  *a1 = &off_24ED44098;
  *(_OWORD *)(a1 + 23) = 0u;
  *(_OWORD *)(a1 + 25) = 0u;
  *((_DWORD *)a1 + 54) = 0;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_DWORD *)a1 + 64) = 0;
  *(_OWORD *)(a1 + 33) = 0u;
  *(_OWORD *)(a1 + 35) = 0u;
  *((_DWORD *)a1 + 74) = 0;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_DWORD *)a1 + 84) = 0;
  *(_OWORD *)(a1 + 43) = 0u;
  *(_OWORD *)(a1 + 45) = 0u;
  *((_DWORD *)a1 + 94) = 0;
  *((_DWORD *)a1 + 104) = 0;
  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + 25) = 0u;
  *((_DWORD *)a1 + 114) = 0;
  *(_OWORD *)(a1 + 53) = 0u;
  *(_OWORD *)(a1 + 55) = 0u;
  *((_DWORD *)a1 + 30) = 0;
  *(_OWORD *)(a1 + 13) = 0u;
  *(_OWORD *)(a1 + 11) = 0u;
  *((_DWORD *)a1 + 44) = 0;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 29) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_DWORD *)a1 + 20) = 0;
  a1[60] = -1;
  *((_DWORD *)a1 + 186) = 0;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 91) = 0u;
  *(_OWORD *)(a1 + 85) = 0u;
  *(_OWORD *)(a1 + 87) = 0u;
  *(_OWORD *)(a1 + 81) = 0u;
  *(_OWORD *)(a1 + 83) = 0u;
  *(_OWORD *)(a1 + 77) = 0u;
  *(_OWORD *)(a1 + 79) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(_OWORD *)(a1 + 75) = 0u;
  *(_OWORD *)(a1 + 69) = 0u;
  *(_OWORD *)(a1 + 71) = 0u;
  *(_OWORD *)(a1 + 65) = 0u;
  *(_OWORD *)(a1 + 67) = 0u;
  *(_OWORD *)(a1 + 61) = 0u;
  *(_OWORD *)(a1 + 63) = 0u;
  a1[94] = -1;
  a1[102] = 0;
  *(_OWORD *)(a1 + 95) = 0u;
  *(_OWORD *)(a1 + 97) = 0u;
  re::EvaluationContextManager::EvaluationContextManager((re::EvaluationContextManager *)(a1 + 103));
  result = 0.0;
  *((_OWORD *)a1 + 239) = 0u;
  a1[474] = 0;
  *(_OWORD *)(a1 + 475) = 0u;
  *((_BYTE *)a1 + 3816) = 0;
  *((_DWORD *)a1 + 960) = 1;
  a1[493] = 0;
  *(_OWORD *)(a1 + 481) = 0u;
  *(_OWORD *)(a1 + 483) = 0u;
  *(_OWORD *)(a1 + 485) = 0u;
  *((_DWORD *)a1 + 974) = 0;
  *((_OWORD *)a1 + 244) = 0u;
  *((_OWORD *)a1 + 245) = 0u;
  *((_DWORD *)a1 + 984) = 0;
  *a2 = a1;
  return result;
}

void re::ecs2::SkeletalPoseComponent::~SkeletalPoseComponent(re::ecs2::SkeletalPoseComponent *this)
{
  re::ecs2::SkeletalPoseComponent::~SkeletalPoseComponent(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED44098;
  re::DynamicArray<re::SkeletalPose>::deinit((uint64_t)this + 3912);
  v2 = *((_QWORD *)this + 484);
  if (v2)
  {
    if (*((_QWORD *)this + 488))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 488) = 0;
    *((_QWORD *)this + 485) = 0;
    *((_QWORD *)this + 486) = 0;
    *((_QWORD *)this + 484) = 0;
    ++*((_DWORD *)this + 974);
  }
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 3824);
  re::FixedArray<re::BindPoint>::deinit((_QWORD *)this + 474);
  re::EvaluationContextManager::~EvaluationContextManager((re::ecs2::SkeletalPoseComponent *)((char *)this + 824));
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)this + 98);
  re::FixedArray<re::EvaluationRigState>::deinit((_QWORD *)this + 95);
  re::SkeletalPoseRigMappingData::~SkeletalPoseRigMappingData((re::ecs2::SkeletalPoseComponent *)((char *)this + 472));
  re::DynamicArray<re::MeshRigGraphIndex>::deinit((uint64_t)this + 432);
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 392);
  re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)this + 352);
  re::DynamicArray<re::FixedArray<re::StringID>>::deinit((uint64_t)this + 312);
  re::DynamicArray<re::FixedArray<re::StringID>>::deinit((uint64_t)this + 272);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 232);
  re::DynamicArray<re::StringID>::deinit((uint64_t)this + 192);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)this + 152);
  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit((uint64_t)this + 96);
  re::DynamicArray<re::SkeletalPose>::deinit((uint64_t)this + 56);
  re::AssetHandle::~AssetHandle((re::ecs2::SkeletalPoseComponent *)((char *)this + 32));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return 13;
}

void *re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::SkeletalPoseRigMappingData::~SkeletalPoseRigMappingData(re::SkeletalPoseRigMappingData *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_QWORD *)this + 29);
  if (v2)
  {
    if (*((_QWORD *)this + 30))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 31));
      *((_QWORD *)this + 30) = 0;
      *((_QWORD *)this + 31) = 0;
    }
    *((_QWORD *)this + 29) = 0;
  }
  v3 = *((_QWORD *)this + 26);
  if (v3)
  {
    if (*((_QWORD *)this + 27))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 28));
      *((_QWORD *)this + 27) = 0;
      *((_QWORD *)this + 28) = 0;
    }
    *((_QWORD *)this + 26) = 0;
  }
  v4 = *((_QWORD *)this + 23);
  if (v4)
  {
    if (*((_QWORD *)this + 24))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 25));
      *((_QWORD *)this + 24) = 0;
      *((_QWORD *)this + 25) = 0;
    }
    *((_QWORD *)this + 23) = 0;
  }
  v5 = *((_QWORD *)this + 20);
  if (v5)
  {
    if (*((_QWORD *)this + 21))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 22));
      *((_QWORD *)this + 21) = 0;
      *((_QWORD *)this + 22) = 0;
    }
    *((_QWORD *)this + 20) = 0;
  }
  v6 = *((_QWORD *)this + 17);
  if (v6)
  {
    if (*((_QWORD *)this + 18))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 19));
      *((_QWORD *)this + 18) = 0;
      *((_QWORD *)this + 19) = 0;
    }
    *((_QWORD *)this + 17) = 0;
  }
  v7 = *((_QWORD *)this + 14);
  if (v7)
  {
    if (*((_QWORD *)this + 15))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)this + 16));
      *((_QWORD *)this + 15) = 0;
      *((_QWORD *)this + 16) = 0;
    }
    *((_QWORD *)this + 14) = 0;
  }
  v8 = *((_QWORD *)this + 11);
  if (v8)
  {
    if (*((_QWORD *)this + 12))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *((_QWORD *)this + 13));
      *((_QWORD *)this + 12) = 0;
      *((_QWORD *)this + 13) = 0;
    }
    *((_QWORD *)this + 11) = 0;
  }
  v9 = *((_QWORD *)this + 8);
  if (v9)
  {
    if (*((_QWORD *)this + 9))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, *((_QWORD *)this + 10));
      *((_QWORD *)this + 9) = 0;
      *((_QWORD *)this + 10) = 0;
    }
    *((_QWORD *)this + 8) = 0;
  }
  v10 = *((_QWORD *)this + 5);
  if (v10)
  {
    if (*((_QWORD *)this + 6))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 40))(v10, *((_QWORD *)this + 7));
      *((_QWORD *)this + 6) = 0;
      *((_QWORD *)this + 7) = 0;
    }
    *((_QWORD *)this + 5) = 0;
  }
  v11 = *((_QWORD *)this + 2);
  if (v11)
  {
    if (*((_QWORD *)this + 3))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 40))(v11, *((_QWORD *)this + 4));
      *((_QWORD *)this + 3) = 0;
      *((_QWORD *)this + 4) = 0;
    }
    *((_QWORD *)this + 2) = 0;
  }
}

id *re::ecs2::MeshComponent::MeshComponent(id *this)
{
  uint64_t v2;
  re *inited;
  re *v4;
  unsigned int v5;

  ArcSharedObject::ArcSharedObject((ArcSharedObject *)this, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_24ED436D8;
  *(_QWORD *)(v2 + 88) = 0;
  *(_DWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_DWORD *)(v2 + 128) = 0;
  *(_DWORD *)(v2 + 144) = 0;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_BYTE *)(v2 + 192) = 0;
  *(_OWORD *)(v2 + 208) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  inited = (re *)objc_initWeak((id *)(v2 + 224), 0);
  this[29] = 0;
  this[33] = (id)re::globalAllocators(inited)[2];
  this[34] = 0;
  v4 = (re *)objc_initWeak(this + 35, 0);
  this[36] = 0;
  this[40] = (id)re::globalAllocators(v4)[2];
  this[41] = 0;
  do
    v5 = __ldaxr((unsigned int *)&re::ecs2::MeshComponent::MeshComponent(void)::s_atomicCounter);
  while (__stlxr(v5 + 1, (unsigned int *)&re::ecs2::MeshComponent::MeshComponent(void)::s_atomicCounter));
  *((_DWORD *)this + 36) = v5;
  return this;
}

void re::ecs2::MeshComponent::~MeshComponent(id *this)
{
  re::AssetHandle *v2;

  *this = &off_24ED436D8;
  v2 = (re::AssetHandle *)(this + 4);
  re::FramePersistentPtr<re::ecs2::MeshComponent::StaticBoundingBoxData,re::FrameManager>::~FramePersistentPtr(this + 35);
  re::FramePersistentPtr<re::ecs2::MeshComponent::MaterialData,re::FrameManager>::~FramePersistentPtr(this + 28);
  re::DynamicArray<re::ecs2::EntityHandle>::deinit((uint64_t)(this + 13));
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(this + 7));
  re::AssetHandle::~AssetHandle(v2);
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
}

{
  re::AssetHandle *v2;

  *this = &off_24ED436D8;
  v2 = (re::AssetHandle *)(this + 4);
  re::FramePersistentPtr<re::ecs2::MeshComponent::StaticBoundingBoxData,re::FrameManager>::~FramePersistentPtr(this + 35);
  re::FramePersistentPtr<re::ecs2::MeshComponent::MaterialData,re::FrameManager>::~FramePersistentPtr(this + 28);
  re::DynamicArray<re::ecs2::EntityHandle>::deinit((uint64_t)(this + 13));
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(this + 7));
  re::AssetHandle::~AssetHandle(v2);
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return 6;
}

void *re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

id *re::FramePersistentPtr<re::ecs2::MeshComponent::StaticBoundingBoxData,re::FrameManager>::~FramePersistentPtr(id *a1)
{
  re *inited;
  id location;
  _QWORD v5[3];
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  inited = (re *)objc_initWeak(&location, 0);
  memset(v5, 0, sizeof(v5));
  v6 = re::globalAllocators(inited)[2];
  v7 = 0;
  re::FramePersistentPtr<re::ecs2::MeshComponent::StaticBoundingBoxData,re::FrameManager>::reset(a1, &location, 0, (uint64_t)v5);
  if (v7)
  {
    (*(void (**)(_QWORD *))*v7)(v7);
    if (v7 != v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  }
  objc_destroyWeak(&location);
  location = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 2));
  objc_destroyWeak(a1);
  *a1 = 0;
  return a1;
}

uint64_t re::FramePersistentPtr<re::ecs2::MeshComponent::StaticBoundingBoxData,re::FrameManager>::reset(id *location, id *a2, void *a3, uint64_t a4)
{
  _QWORD *WeakRetained;
  _QWORD *v9;
  re *v10;
  uint64_t *v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD v18[3];
  uint64_t v19;
  re *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (location[1])
  {
    WeakRetained = objc_loadWeakRetained(location);
    if (WeakRetained)
    {
      v9 = WeakRetained;

      if (!location[6])
      {
        v16 = re::globalAllocators(v10)[2];
        v18[0] = &off_24ED43758;
        v19 = v16;
        v20 = (re *)v18;
        re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)(location + 2), (uint64_t)v18);
        v10 = v20;
        if (v20)
        {
          v10 = (re *)(**(uint64_t (***)(re *))v20)(v20);
          if (v20 != (re *)v18)
            v10 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
        }
      }
      v11 = re::globalAllocators(v10);
      v12 = v9[2] & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)v9[1] << 60);
      v13 = location[1];
      v14 = re::PerFrameAllocatorManager::perFrameAllocator(v11[6], v12);
      (*(void (**)(uint64_t, id, id *))(*(_QWORD *)v14 + 16))(v14, v13, location + 2);
    }
    else
    {
      v15 = location[6];
      if (v15)
      {
        v18[0] = location[1];
        (*(void (**)(id, _QWORD *))(*(_QWORD *)v15 + 16))(v15, v18);
      }
      else
      {
        re::internal::destroyPersistent<re::ecs2::MeshComponent::StaticBoundingBoxData>((re *)"reset", 161, (re::AssetHandle *)location[1]);
      }
    }
  }
  re::ArcWeakPtr<re::VideoHistogram>::operator=(location, a2);
  location[1] = a3;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(location + 2), a4);
}

re *re::internal::destroyPersistent<re::ecs2::MeshComponent::StaticBoundingBoxData>(re *result, uint64_t a2, re::AssetHandle *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)a3 + 168);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)a3 + 96);
    v5 = *((_QWORD *)a3 + 3);
    if (v5)
    {
      if (*((_QWORD *)a3 + 4))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)a3 + 5));
        *((_QWORD *)a3 + 4) = 0;
        *((_QWORD *)a3 + 5) = 0;
      }
      *((_QWORD *)a3 + 3) = 0;
    }
    re::AssetHandle::~AssetHandle(a3);
    return (re *)(*(uint64_t (**)(uint64_t, re::AssetHandle *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

void re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshComponent::StaticBoundingBoxData,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshComponent::StaticBoundingBoxData*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

re *re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshComponent::StaticBoundingBoxData,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshComponent::StaticBoundingBoxData*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::operator()(uint64_t a1, re::AssetHandle **a2)
{
  return re::internal::destroyPersistent<re::ecs2::MeshComponent::StaticBoundingBoxData>((re *)"operator()", 149, *a2);
}

_QWORD *re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshComponent::StaticBoundingBoxData,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshComponent::StaticBoundingBoxData*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED43758;
  return result;
}

_QWORD *re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshComponent::StaticBoundingBoxData,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshComponent::StaticBoundingBoxData*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED43758;
  return result;
}

uint64_t re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshComponent::StaticBoundingBoxData,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshComponent::StaticBoundingBoxData*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::size()
{
  return 16;
}

id *re::FramePersistentPtr<re::ecs2::MeshComponent::MaterialData,re::FrameManager>::~FramePersistentPtr(id *a1)
{
  re *inited;
  id location;
  _QWORD v5[3];
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  inited = (re *)objc_initWeak(&location, 0);
  memset(v5, 0, sizeof(v5));
  v6 = re::globalAllocators(inited)[2];
  v7 = 0;
  re::FramePersistentPtr<re::ecs2::MeshComponent::MaterialData,re::FrameManager>::reset(a1, &location, 0, (uint64_t)v5);
  if (v7)
  {
    (*(void (**)(_QWORD *))*v7)(v7);
    if (v7 != v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  }
  objc_destroyWeak(&location);
  location = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 2));
  objc_destroyWeak(a1);
  *a1 = 0;
  return a1;
}

uint64_t re::FramePersistentPtr<re::ecs2::MeshComponent::MaterialData,re::FrameManager>::reset(id *location, id *a2, void *a3, uint64_t a4)
{
  _QWORD *WeakRetained;
  _QWORD *v9;
  re *v10;
  uint64_t *v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD v18[3];
  uint64_t v19;
  re *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (location[1])
  {
    WeakRetained = objc_loadWeakRetained(location);
    if (WeakRetained)
    {
      v9 = WeakRetained;

      if (!location[6])
      {
        v16 = re::globalAllocators(v10)[2];
        v18[0] = &off_24ED437B0;
        v19 = v16;
        v20 = (re *)v18;
        re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)(location + 2), (uint64_t)v18);
        v10 = v20;
        if (v20)
        {
          v10 = (re *)(**(uint64_t (***)(re *))v20)(v20);
          if (v20 != (re *)v18)
            v10 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
        }
      }
      v11 = re::globalAllocators(v10);
      v12 = v9[2] & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)v9[1] << 60);
      v13 = location[1];
      v14 = re::PerFrameAllocatorManager::perFrameAllocator(v11[6], v12);
      (*(void (**)(uint64_t, id, id *))(*(_QWORD *)v14 + 16))(v14, v13, location + 2);
    }
    else
    {
      v15 = location[6];
      if (v15)
      {
        v18[0] = location[1];
        (*(void (**)(id, _QWORD *))(*(_QWORD *)v15 + 16))(v15, v18);
      }
      else
      {
        re::internal::destroyPersistent<re::ecs2::MeshComponent::MaterialData>((re *)"reset", 161, (re::ecs2::MeshComponent::MaterialData *)location[1]);
      }
    }
  }
  re::ArcWeakPtr<re::VideoHistogram>::operator=(location, a2);
  location[1] = a3;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(location + 2), a4);
}

re *re::internal::destroyPersistent<re::ecs2::MeshComponent::MaterialData>(re *result, uint64_t a2, re::ecs2::MeshComponent::MaterialData *a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::ecs2::MeshComponent::MaterialData::~MaterialData(a3);
    return (re *)(*(uint64_t (**)(uint64_t, re::ecs2::MeshComponent::MaterialData *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

void re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshComponent::MaterialData,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshComponent::MaterialData*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

re *re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshComponent::MaterialData,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshComponent::MaterialData*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::operator()(uint64_t a1, re::ecs2::MeshComponent::MaterialData **a2)
{
  return re::internal::destroyPersistent<re::ecs2::MeshComponent::MaterialData>((re *)"operator()", 149, *a2);
}

_QWORD *re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshComponent::MaterialData,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshComponent::MaterialData*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED437B0;
  return result;
}

_QWORD *re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshComponent::MaterialData,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshComponent::MaterialData*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED437B0;
  return result;
}

uint64_t re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshComponent::MaterialData,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshComponent::MaterialData*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::size()
{
  return 16;
}

void re::ecs2::MeshComponent::MaterialData::~MaterialData(re::ecs2::MeshComponent::MaterialData *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (char *)this + 456;
  re::BucketArray<re::SharedPtr<re::UnlitParameterTable>,8ul>::deinit((uint64_t)this + 456);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)v2);
  re::BucketArray<re::SharedPtr<re::UnlitParameterTable>,8ul>::deinit((uint64_t)this + 400);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 400);
  re::BucketArray<re::SharedPtr<re::UnlitParameterTable>,8ul>::deinit((uint64_t)this + 344);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 344);
  re::FixedArray<re::FixedArray<float>>::deinit((_QWORD *)this + 40);
  re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::deinit((uint64_t)this + 264);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this + 264);
  v3 = *((_QWORD *)this + 27);
  if (v3)
  {
    if (*((_QWORD *)this + 28))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 29));
      *((_QWORD *)this + 28) = 0;
      *((_QWORD *)this + 29) = 0;
    }
    *((_QWORD *)this + 27) = 0;
  }
  v4 = *((_QWORD *)this + 24);
  if (v4)
  {
    if (*((_QWORD *)this + 25))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 26));
      *((_QWORD *)this + 25) = 0;
      *((_QWORD *)this + 26) = 0;
    }
    *((_QWORD *)this + 24) = 0;
  }
  v5 = *((_QWORD *)this + 21);
  if (v5)
  {
    if (*((_QWORD *)this + 22))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 23));
      *((_QWORD *)this + 22) = 0;
      *((_QWORD *)this + 23) = 0;
    }
    *((_QWORD *)this + 21) = 0;
  }
  v6 = *((_QWORD *)this + 18);
  if (v6)
  {
    if (*((_QWORD *)this + 19))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 20));
      *((_QWORD *)this + 19) = 0;
      *((_QWORD *)this + 20) = 0;
    }
    *((_QWORD *)this + 18) = 0;
  }
  v7 = *((_QWORD *)this + 15);
  if (v7)
  {
    if (*((_QWORD *)this + 16))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)this + 17));
      *((_QWORD *)this + 16) = 0;
      *((_QWORD *)this + 17) = 0;
    }
    *((_QWORD *)this + 15) = 0;
  }
  v8 = *((_QWORD *)this + 12);
  if (v8)
  {
    if (*((_QWORD *)this + 13))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *((_QWORD *)this + 14));
      *((_QWORD *)this + 13) = 0;
      *((_QWORD *)this + 14) = 0;
    }
    *((_QWORD *)this + 12) = 0;
  }
  re::DynamicArray<re::TextureHandle>::deinit((uint64_t)this + 48);
  re::FixedArray<re::FixedArray<float>>::deinit((_QWORD *)this + 3);
  re::FixedArray<re::FixedArray<float>>::deinit(this);
}

uint64_t re::BucketArray<re::SharedPtr<re::UnlitParameterTable>,8ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a1, i);
      if (*(_QWORD *)v4)
      {
        v5 = (_QWORD *)v4;

        *v5 = 0;
      }
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::DynamicArray<re::TextureHandle>::deinit(uint64_t a1)
{
  uint64_t result;
  re::TextureHandle *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::TextureHandle **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 16 * v4;
        do
        {
          re::TextureHandle::invalidate(v3);
          v3 = (re::TextureHandle *)((char *)v3 + 16);
          v5 -= 16;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::TextureHandle **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::TextureHandle *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::ecs2::EntityHandle>::deinit(uint64_t a1)
{
  uint64_t result;
  id *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(id **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 24 * v4;
        do
        {
          re::ecs2::EntityHandle::reset(v3);
          objc_destroyWeak(v3);
          *v3 = 0;
          v3 += 3;
          v5 -= 24;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(id **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, id *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void *re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::ecs2::AnimationLibraryComponent::~AnimationLibraryComponent(re::ecs2::AnimationLibraryComponent *this)
{
  re::HashTable<re::AssetHandle,re::DynamicArray<re::AnimationLibraryMeshMappingData>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)this + 7);
  re::AssetHandle::~AssetHandle((re::ecs2::AnimationLibraryComponent *)((char *)this + 32));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::HashTable<re::AssetHandle,re::DynamicArray<re::AnimationLibraryMeshMappingData>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)this + 7);
  re::AssetHandle::~AssetHandle((re::ecs2::AnimationLibraryComponent *)((char *)this + 32));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::AnimationLibraryComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void re::AnimationMetaData::~AnimationMetaData(re::AnimationMetaData *this, double a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;

  v3 = *((_QWORD *)this + 38);
  if (v3)
  {
    if (*((_QWORD *)this + 42))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 42) = 0;
    *((_QWORD *)this + 39) = 0;
    *((_QWORD *)this + 40) = 0;
    *((_QWORD *)this + 38) = 0;
    ++*((_DWORD *)this + 82);
  }
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 32, a2);
  v4 = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 26);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 20, v4);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 120);
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)this + 80);
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    if (*((_QWORD *)this + 9))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 5) = 0;
    ++*((_DWORD *)this + 16);
  }
  re::DynamicArray<re::DynamicString>::deinit((uint64_t)this);
}

uint64_t re::DynamicArray<re::SkeletalPoseSampledAnimation>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = (_QWORD *)(v3 + 88);
        v6 = 120 * v4;
        do
        {
          *(v5 - 11) = off_24ED22100;
          re::FixedArray<re::SkeletalPose>::deinit(v5);
          *(v5 - 11) = off_24ED1F350;
          v7 = *(v5 - 6);
          if (v7)
          {
            if ((*(_BYTE *)(v5 - 5) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(v5 - 4));
            *((_OWORD *)v5 - 3) = 0u;
            *((_OWORD *)v5 - 2) = 0u;
          }
          re::StringID::destroyString((re::StringID *)(v5 - 8));
          v5 += 15;
          v6 -= 120;
        }
        while (v6);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::ModelIOSkinningData>::deinit(uint64_t a1)
{
  uint64_t result;
  re::ModelIOSkinningData *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(re::ModelIOSkinningData **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 224 * v4;
        do
        {
          re::ModelIOSkinningData::~ModelIOSkinningData(v3);
          v3 = (re::ModelIOSkinningData *)((char *)v3 + 224);
          v5 -= 224;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(re::ModelIOSkinningData **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, re::ModelIOSkinningData *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::ModelIOSkinningData::~ModelIOSkinningData(re::ModelIOSkinningData *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 25);
  if (v2)
  {
    if (*((_QWORD *)this + 26))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 27));
      *((_QWORD *)this + 26) = 0;
      *((_QWORD *)this + 27) = 0;
    }
    *((_QWORD *)this + 25) = 0;
  }
  v3 = *((_QWORD *)this + 22);
  if (v3)
  {
    if (*((_QWORD *)this + 23))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 24));
      *((_QWORD *)this + 23) = 0;
      *((_QWORD *)this + 24) = 0;
    }
    *((_QWORD *)this + 22) = 0;
  }
  v4 = *((_QWORD *)this + 19);
  if (v4)
  {
    if (*((_QWORD *)this + 20))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 21));
      *((_QWORD *)this + 20) = 0;
      *((_QWORD *)this + 21) = 0;
    }
    *((_QWORD *)this + 19) = 0;
  }
  v5 = *((_QWORD *)this + 16);
  if (v5)
  {
    if (*((_QWORD *)this + 17))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 18));
      *((_QWORD *)this + 17) = 0;
      *((_QWORD *)this + 18) = 0;
    }
    *((_QWORD *)this + 16) = 0;
  }
  v6 = *((_QWORD *)this + 13);
  if (v6)
  {
    if (*((_QWORD *)this + 14))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 15));
      *((_QWORD *)this + 14) = 0;
      *((_QWORD *)this + 15) = 0;
    }
    *((_QWORD *)this + 13) = 0;
  }
  v7 = *((_QWORD *)this + 9);
  if (v7)
  {
    if ((*((_BYTE *)this + 80) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *((_QWORD *)this + 11));
    *(_OWORD *)((char *)this + 72) = 0u;
    *(_OWORD *)((char *)this + 88) = 0u;
  }
}

uint64_t re::DynamicArray<re::ModelIOSkeleton>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 0;
        v6 = 168 * v4;
        do
        {
          v7 = (_QWORD *)(v3 + v5);
          v8 = re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)(v3 + v5 + 120));
          v9 = *(_QWORD *)(v3 + v5 + 96);
          if (v9)
          {
            if (v7[13])
            {
              (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v9 + 40))(v9, *(_QWORD *)(v3 + v5 + 112), v8);
              v7[13] = 0;
              v7[14] = 0;
            }
            v7[12] = 0;
          }
          re::FixedArray<re::StringID>::deinit(v7 + 9);
          v10 = v7[6];
          if (v10)
          {
            if (*(_QWORD *)(v3 + v5 + 56))
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 40))(v10, *(_QWORD *)(v3 + v5 + 64));
              *(_QWORD *)(v3 + v5 + 56) = 0;
              *(_QWORD *)(v3 + v5 + 64) = 0;
            }
            v7[6] = 0;
          }
          v11 = (_QWORD *)(v3 + v5);
          v12 = *(_QWORD *)(v3 + v5 + 24);
          if (v12)
          {
            if (v11[4])
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 40))(v12, *(_QWORD *)(v3 + v5 + 40));
              v11[4] = 0;
              v11[5] = 0;
            }
            v11[3] = 0;
          }
          re::StringID::destroyString((re::StringID *)(v3 + v5));
          v5 += 168;
        }
        while (v6 != v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void re::loadMDLObject(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v7;
  __CFString *v8;
  _anonymous_namespace_ *v9;
  __int128 v10;
  uint64_t v11;
  objc_class *v12;
  re::ecs2::TransformComponent *v13;
  void *v14;
  void *v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  __int128 v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int32x4_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  float32x4_t v37;
  BOOL v38;
  float v39;
  float32x4_t v40;
  float32x4_t v41;
  id v42;
  const MDLObject *v43;
  _BOOL4 v44;
  id v45;
  _anonymous_namespace_ *v46;
  __CFString *v47;
  re::TimelineAsset *MeshAssetDataWithGeomModel;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  double v58;
  void *v59;
  re *v60;
  int v61;
  uint64_t *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  __CFString *v66;
  _anonymous_namespace_ *v67;
  re::DynamicString *v68;
  uint64_t i;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t *v73;
  _anonymous_namespace_ *v74;
  __CFString *v75;
  const char *v76;
  re::MeshAsset *v77;
  uint64_t *v78;
  re::DynamicString *v79;
  re::AnimationLibraryAsset *v80;
  _anonymous_namespace_ *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  _anonymous_namespace_ *v86;
  re::DynamicString *v87;
  re::AssetPath *v88;
  re::GeomAttribute *v89;
  id v90;
  id *v91;
  id *v92;
  re::DynamicString *v93;
  re::AssetPath *v94;
  MDLObject *v95;
  double v96;
  _BOOL8 hasTransformAnimation;
  re *v98;
  id v99;
  const char *v100;
  re *v101;
  uint64_t *v102;
  re::AssetHelper *v103;
  _QWORD *v104;
  re::TimelineAssetData *v105;
  re **TimelineAsset;
  _anonymous_namespace_ *v107;
  re::TimelineAsset *v108;
  uint64_t *v109;
  _anonymous_namespace_ *v110;
  double v111;
  uint64_t v112;
  void *v113;
  re::AnimationLibraryAsset *v114;
  _anonymous_namespace_ *v115;
  __int128 *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  _anonymous_namespace_ *v120;
  re::DynamicString *v121;
  re::AssetPath *v122;
  NSObject *v123;
  void *v124;
  unint64_t v125;
  void *v126;
  unint64_t v127;
  __CFString *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t j;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t k;
  uint64_t v139;
  _BYTE *v140;
  __int128 *v141;
  float32x4_t v142;
  void *v143;
  __CFString *v144;
  int32x2_t v145;
  void *v146;
  float32x4_t obj;
  void *obja;
  float32x4_t v149;
  id v150;
  void *v151;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  re::DynamicString *v160;
  _QWORD v161[3];
  _BYTE v162[32];
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  uint64_t *v171;
  uint64_t v172;
  re::AssetPath *v173;
  uint64_t v174;
  __int128 v175;
  void *v176;
  uint64_t v177;
  __int128 v178;
  _OWORD v179[2];
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183[6];
  MDLObject v184[2];
  __int128 v185;
  _BYTE v186[24];
  __int128 v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  int v191;
  uint64_t v192[5];
  char v193;
  uint64_t v194;
  uint64_t v195;
  _BYTE buf[72];
  uint64_t v197;
  simd_float3x3 v198;

  v197 = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  objc_msgSend(v7, "name");
  v8 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (!v8)
    v8 = &stru_24EDA2070;
  v144 = objc_retainAutorelease(v8);
  v9 = (_anonymous_namespace_ *)-[__CFString UTF8String](v144, "UTF8String");
  *(_QWORD *)&v175 = 0;
  *((_QWORD *)&v175 + 1) = &str_110;
  v10 = v175;
  *(_QWORD *)&v175 = 0;
  *((_QWORD *)&v175 + 1) = &str_110;
  v11 = *(_QWORD *)(a3 + 8);
  v12 = *(objc_class **)(a3 + 16);
  *(_OWORD *)(a3 + 8) = v10;
  v184[1].super.isa = v12;
  v184[0].super.isa = (Class)(v10 & 0xFFFFFFFFFFFFFFFELL | v11 & 1);
  re::StringID::destroyString((re::StringID *)v184);
  re::StringID::destroyString((re::StringID *)&v175);
  v13 = re::ecs2::EntityAssetData::addComponent<re::ecs2::TransformComponent>((_DWORD *)a3);
  objc_msgSend(v7, "transform");
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = v14;
  if (v14)
  {
    objc_msgSend(v14, "matrix");
    v17 = v16;
    v19 = v18;
    *((_OWORD *)v13 + 4) = v20;
    v21 = vmulq_f32(v16, v16);
    v145 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).u64[0];
    *(float32x2_t *)&v20 = vrsqrte_f32((float32x2_t)v145.u32[0]);
    *(float32x2_t *)&v20 = vmul_f32(*(float32x2_t *)&v20, vrsqrts_f32((float32x2_t)v145.u32[0], vmul_f32(*(float32x2_t *)&v20, *(float32x2_t *)&v20)));
    v142 = v17;
    v198.columns[0] = (simd_float3)vmulq_n_f32(v17, vmul_f32(*(float32x2_t *)&v20, vrsqrts_f32((float32x2_t)v145.u32[0], vmul_f32(*(float32x2_t *)&v20, *(float32x2_t *)&v20))).f32[0]);
    v23 = vmulq_f32(v22, (float32x4_t)v198.columns[0]);
    v24 = vmulq_f32((float32x4_t)v198.columns[0], (float32x4_t)v198.columns[0]);
    v24.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0];
    obj = v22;
    v25 = vsubq_f32(v22, vmulq_n_f32((float32x4_t)v198.columns[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]/ v24.f32[0]));
    v26 = (int32x4_t)vmulq_f32(v25, v25);
    v26.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v26, 2), vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1))).u32[0];
    *(float32x2_t *)v17.f32 = vrsqrte_f32((float32x2_t)v26.u32[0]);
    *(float32x2_t *)v17.f32 = vmul_f32(*(float32x2_t *)v17.f32, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32)));
    v26.i32[0] = vmul_f32(*(float32x2_t *)v17.f32, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)v17.f32))).u32[0];
    v27 = vmulq_f32(v19, (float32x4_t)v198.columns[0]);
    v198.columns[1] = (simd_float3)vmulq_n_f32(v25, *(float *)v26.i32);
    v28 = vsubq_f32(v19, vmulq_n_f32((float32x4_t)v198.columns[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]/ v24.f32[0]));
    v149 = v19;
    v29 = vmulq_f32(v19, (float32x4_t)v198.columns[1]);
    v30 = vmulq_f32((float32x4_t)v198.columns[1], (float32x4_t)v198.columns[1]);
    v31 = vsubq_f32(v28, vmulq_n_f32((float32x4_t)v198.columns[1], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).f32[0]));
    v32 = (int32x4_t)vmulq_f32(v31, v31);
    v32.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v32, 2), vadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v32.i8, 1))).u32[0];
    *(float32x2_t *)v30.f32 = vrsqrte_f32((float32x2_t)v32.u32[0]);
    *(float32x2_t *)v30.f32 = vmul_f32(*(float32x2_t *)v30.f32, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32)));
    v198.columns[2] = (simd_float3)vmulq_n_f32(v31, vmul_f32(*(float32x2_t *)v30.f32, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(*(float32x2_t *)v30.f32, *(float32x2_t *)v30.f32))).f32[0]);
    v33 = simd_quaternion(v198);
    v35 = v34;
    v36 = v33;
    v37 = vmulq_f32(v142, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v149, (int8x16_t)v149, 0xCuLL), (int8x16_t)v149, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)obj, (int32x4_t)obj), (int8x16_t)obj, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v149, (int32x4_t)v149), (int8x16_t)v149, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)obj, (int8x16_t)obj, 0xCuLL), (int8x16_t)obj, 8uLL)));
    *((double *)v13 + 6) = v36;
    *((_QWORD *)v13 + 7) = v35;
    v38 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).f32[0] <= 0.0;
    v39 = -1.0;
    if (!v38)
      v39 = 1.0;
    v40 = vmulq_f32(obj, obj);
    *(float32x2_t *)v40.f32 = vsqrt_f32((float32x2_t)vzip1_s32(v145, (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v40, 2), vadd_f32(*(float32x2_t *)v40.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.f32, 1)))));
    v41 = vmulq_f32(v149, v149);
    v40.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0]);
    *((float32x4_t *)v13 + 2) = vmulq_n_f32(v40, v39);
  }
  else
  {
    *((_QWORD *)v13 + 4) = 0x3F8000003F800000;
    *((_QWORD *)v13 + 5) = 1065353216;
    *((_QWORD *)v13 + 6) = 0;
    *((_QWORD *)v13 + 7) = 0x3F80000000000000;
    *((_QWORD *)v13 + 8) = 0;
    *((_QWORD *)v13 + 9) = 0;
  }
  v42 = v7;
  objc_opt_class();
  v44 = 1;
  v146 = v42;
  v143 = v15;
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v45 = v42;
    objc_msgSend(v45, "name");
    v46 = (_anonymous_namespace_ *)objc_claimAutoreleasedReturnValue();
    *(_WORD *)&buf[2] = 257;
    buf[4] = 1;
    if (v46)
      v47 = (__CFString *)v46;
    else
      v47 = &stru_24EDA2070;
    *(_DWORD *)&buf[5] = 0;
    buf[9] = 0;
    *(_DWORD *)&buf[12] = 1036831949;
    memset(&buf[24], 0, 48);
    *(_DWORD *)&buf[60] = 0x7FFFFFFF;
    buf[10] = *(_BYTE *)(a1 + 161);
    buf[1] = *(_BYTE *)(a1 + 162);
    buf[6] = *(_BYTE *)(a1 + 165);
    buf[20] = buf[6];
    *(_DWORD *)&buf[16] = 256;
    buf[0] = 0;
    v172 = 0;
    v173 = 0;
    v174 = 0;
    re::DynamicString::setCapacity(&v171, 0);
    re::GeomModel::GeomModel((re::GeomModel *)v184);
    v150 = v45;
    *(_QWORD *)&v175 = v150;
    re::convertMDLMeshToGeomModel((id *)&v175, (unsigned __int8 *)v184, a4, a5, &buf[16]);

    MeshAssetDataWithGeomModel = (re::TimelineAsset *)re::makeMeshAssetDataWithGeomModel((re::DynamicString *)v184, 0, 0, (uint64_t)&v175);
    *(_QWORD *)&v158 = 0;
    *(_QWORD *)&v157 = 0;
    v156 = 0uLL;
    DWORD2(v157) = 0;
    v49 = *(_QWORD *)(a6 + 136);
    if (v49)
    {
      v50 = (uint64_t *)(*(_QWORD *)(a6 + 152) + 16);
      v51 = 32 * v49;
      do
      {
        v52 = *(v50 - 1);
        if ((v52 & 1) != 0)
          v53 = *v50;
        else
          v53 = (uint64_t)v50 - 7;
        v54 = v52 >> 1;
        v55 = v52 >> 1;
        if ((*(v50 - 1) & 1) != 0)
          v56 = v54;
        else
          v56 = v55;
        v57 = re::TimelineAsset::assetType(MeshAssetDataWithGeomModel);
        re::ImportAssetTable::compiledAssetPath(v53, v56, (re **)v57, (re::DynamicString *)v162);
        v58 = re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)&v156, v162);
        MeshAssetDataWithGeomModel = *(re::TimelineAsset **)v162;
        if (*(_QWORD *)v162 && (v162[8] & 1) != 0)
          MeshAssetDataWithGeomModel = (re::TimelineAsset *)(*(uint64_t (**)(double))(**(_QWORD **)v162 + 40))(v58);
        v50 += 4;
        v51 -= 32;
      }
      while (v51);
    }
    if ((_BYTE)v175)
    {
      re::DynamicArray<re::MeshAssetModel>::DynamicArray((uint64_t)v162, (uint64_t *)&v175 + 1);
      re::DynamicArray<re::MeshAssetInstance>::DynamicArray((uint64_t)&v163 + 8, (uint64_t *)v179);
      re::DynamicArray<re::MeshAssetSkeleton>::DynamicArray((uint64_t)&v166, (uint64_t *)&v180 + 1);
      re::DynamicArray<float>::DynamicArray((uint64_t)&v168 + 8, v183);
    }
    else
    {
      v169 = 0u;
      v170 = 0u;
      v167 = 0u;
      v168 = 0u;
      v165 = 0u;
      v166 = 0u;
      v163 = 0u;
      v164 = 0u;
      memset(v162, 0, sizeof(v162));
    }
    v59 = (void *)re::AnimationLibraryAsset::buildAsset(v162, a6 + 120, a6 + 80, a6 + 40, (uint64_t)&v156);
    if (*((_QWORD *)&v168 + 1))
    {
      if (*((_QWORD *)&v170 + 1))
        (*(void (**)(void))(**((_QWORD **)&v168 + 1) + 40))();
      *((_QWORD *)&v170 + 1) = 0;
      v169 = 0uLL;
      *((_QWORD *)&v168 + 1) = 0;
      LODWORD(v170) = v170 + 1;
    }
    re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)&v166);
    re::DynamicArray<re::MeshAssetInstance>::deinit((uint64_t)&v163 + 8);
    v60 = (re *)re::DynamicArray<re::MeshAssetModel>::deinit((uint64_t)v162);
    v61 = v175;
    v62 = re::globalAllocators(v60);
    v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v62[2] + 32))(v62[2], 960, 8);
    if (v61)
    {
      v63 = re::MeshAsset::MeshAsset(v63, (uint64_t)&v175 + 8);
    }
    else
    {
      *(_QWORD *)v63 = &off_24ED30A60;
      *(_QWORD *)(v63 + 8) = 0;
      *(_OWORD *)(v63 + 16) = 0u;
      *(_DWORD *)(v63 + 32) = 0;
      *(_OWORD *)(v63 + 40) = 0u;
      *(_OWORD *)(v63 + 56) = 0u;
      *(_DWORD *)(v63 + 72) = 0;
      *(_OWORD *)(v63 + 80) = 0u;
      *(_OWORD *)(v63 + 96) = 0u;
      *(_DWORD *)(v63 + 112) = 0;
      *(_OWORD *)(v63 + 120) = 0u;
      *(_OWORD *)(v63 + 136) = 0u;
      *(_DWORD *)(v63 + 152) = 0;
      *(_DWORD *)(v63 + 424) = 0;
      *(_OWORD *)(v63 + 392) = 0u;
      *(_OWORD *)(v63 + 408) = 0u;
      *(_OWORD *)(v63 + 484) = 0u;
      *(_OWORD *)(v63 + 472) = 0u;
      *(_OWORD *)(v63 + 456) = 0u;
      *(_DWORD *)(v63 + 192) = 0;
      *(_OWORD *)(v63 + 160) = 0u;
      *(_OWORD *)(v63 + 176) = 0u;
      *(_OWORD *)(v63 + 200) = 0u;
      *(_OWORD *)(v63 + 216) = 0u;
      *(_DWORD *)(v63 + 232) = 0;
      *(_OWORD *)(v63 + 240) = 0u;
      *(_OWORD *)(v63 + 256) = 0u;
      *(_DWORD *)(v63 + 272) = 0;
      *(_OWORD *)(v63 + 280) = 0u;
      *(_OWORD *)(v63 + 296) = 0u;
      *(_OWORD *)(v63 + 312) = 0u;
      *(_OWORD *)(v63 + 328) = 0u;
      *(_OWORD *)(v63 + 344) = 0u;
      *(_OWORD *)(v63 + 360) = 0u;
      *(_OWORD *)(v63 + 372) = 0u;
      *(_DWORD *)(v63 + 448) = 0;
      *(_OWORD *)(v63 + 432) = 0u;
      *(_QWORD *)(v63 + 500) = 0x7FFFFFFFLL;
      *(_DWORD *)(v63 + 544) = 0;
      *(_OWORD *)(v63 + 512) = 0u;
      *(_OWORD *)(v63 + 528) = 0u;
      *(_QWORD *)(v63 + 548) = 0x7FFFFFFFLL;
      *(_OWORD *)(v63 + 905) = 0u;
      *(_OWORD *)(v63 + 880) = 0u;
      *(_OWORD *)(v63 + 896) = 0u;
      *(_OWORD *)(v63 + 848) = 0u;
      *(_OWORD *)(v63 + 864) = 0u;
      *(_OWORD *)(v63 + 816) = 0u;
      *(_OWORD *)(v63 + 832) = 0u;
      *(_OWORD *)(v63 + 784) = 0u;
      *(_OWORD *)(v63 + 800) = 0u;
      *(_OWORD *)(v63 + 752) = 0u;
      *(_OWORD *)(v63 + 768) = 0u;
      *(_OWORD *)(v63 + 720) = 0u;
      *(_OWORD *)(v63 + 736) = 0u;
      *(_OWORD *)(v63 + 688) = 0u;
      *(_OWORD *)(v63 + 704) = 0u;
      *(_OWORD *)(v63 + 656) = 0u;
      *(_OWORD *)(v63 + 672) = 0u;
      *(_OWORD *)(v63 + 624) = 0u;
      *(_OWORD *)(v63 + 640) = 0u;
      *(_OWORD *)(v63 + 592) = 0u;
      *(_OWORD *)(v63 + 608) = 0u;
      *(_OWORD *)(v63 + 560) = 0u;
      *(_OWORD *)(v63 + 576) = 0u;
      *(_BYTE *)(v63 + 952) = 0;
      *(_QWORD *)(v63 + 944) = 0;
      *(_OWORD *)(v63 + 928) = 0u;
    }
    *(_DWORD *)(v63 + 924) = 1;
    if (a4 && a5 && *(_QWORD *)(a4 + 16))
    {
      v64 = (void *)v63;
      v65 = *(_QWORD *)(a5 + 16);
      re::ecs2::EntityAssetData::addComponent<re::ecs2::MeshDeformationComponent>((_DWORD *)a3);
      re::ecs2::EntityAssetData::addComponent<re::ecs2::RigComponent>((_DWORD *)a3);
      if (v65)
        re::ecs2::EntityAssetData::addComponent<re::ecs2::SkeletalPoseComponent>((_DWORD *)a3);
    }
    else
    {
      v64 = (void *)v63;
      re::ecs2::EntityAssetData::addComponent<re::ecs2::MeshDeformationComponent>((_DWORD *)a3);
      re::ecs2::EntityAssetData::addComponent<re::ecs2::RigComponent>((_DWORD *)a3);
    }
    re::ecs2::EntityAssetData::addComponent<re::ecs2::BlendShapeWeightsComponent>((_DWORD *)a3);
    v66 = objc_retainAutorelease(v47);
    v67 = (_anonymous_namespace_ *)-[__CFString UTF8String](v66, "UTF8String");
    for (i = 1; ; i = (i + 1))
    {
      v70 = *(_QWORD *)(a1 + 104);
      v71 = (v162[8] & 1) != 0 ? *(_BYTE **)&v162[16] : &v162[9];
      v72 = (v162[8] & 1) != 0 ? *(_QWORD *)&v162[8] >> 1 : v162[8] >> 1;
      v73 = re::MeshAsset::assetType(v68);
      if (!re::ImportAssetTable::importedAsset(v70, (uint64_t)v71, v72, (re **)v73))
        break;
      re::DynamicString::format((re::DynamicString *)"%s-%d", (re::DynamicString *)&v160, -[__CFString UTF8String](objc_retainAutorelease(v66), "UTF8String"), i);
      re::DynamicString::operator=((re::DynamicString *)v162, (re::DynamicString *)&v160);
      v68 = v160;
      if (v160)
      {
        if ((v161[0] & 1) != 0)
          v68 = (re::DynamicString *)(*(uint64_t (**)(void))(*(_QWORD *)v160 + 40))();
      }
    }
    v74 = *(_anonymous_namespace_ **)(a1 + 104);
    v75 = objc_retainAutorelease(v66);
    v76 = (const char *)-[__CFString UTF8String](v75, "UTF8String");
    v77 = (re::MeshAsset *)strlen(v76);
    v78 = re::MeshAsset::assetType(v77);
    v79 = (re::DynamicString *)re::ImportAssetTable::addAsset(v74, (uint64_t)v76, (uint64_t)v77, v64, (re **)v78);
    re::DynamicString::operator=((re::DynamicString *)&v171, v79);
    v15 = v143;
    if (v59)
    {
      v80 = (re::AnimationLibraryAsset *)re::DynamicString::format((re::DynamicString *)"%s_animationlibrary", (re::DynamicString *)&v160, *(_QWORD *)(a3 + 16));
      v81 = *(_anonymous_namespace_ **)(a1 + 104);
      v82 = (v161[0] & 1) != 0 ? (_QWORD *)v161[1] : (_QWORD *)((char *)v161 + 1);
      v83 = (v161[0] & 1) != 0 ? v161[0] >> 1 : LOBYTE(v161[0]) >> 1;
      v84 = re::AnimationLibraryAsset::assetType(v80);
      v85 = re::ImportAssetTable::addAsset(v81, (uint64_t)v82, v83, v59, (re **)v84);
      v86 = (_anonymous_namespace_ *)re::ecs2::EntityAssetData::addComponent<re::ecs2::AnimationLibraryComponent>((_DWORD *)a3);
      v87 = (_anonymous_namespace_ *)((char *)v86 + 32);
      v88 = (*(_BYTE *)(v85 + 8) & 1) != 0 ? *(re::AssetPath **)(v85 + 16) : (re::AssetPath *)(v85 + 9);
      if (v160)
      {
        if ((v161[0] & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v160 + 40))();
      }
    }
    if (*(_QWORD *)v162 && (v162[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)v162 + 40))();
    re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v156);
    re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)&v175);
    re::DynamicArray<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::deinit((uint64_t)&v195);
    if (v193)
      re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)&v194);
    if ((_BYTE)v191)
      re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)v192);
    if (v188)
    {
      v89 = (re::GeomAttribute *)*((_QWORD *)&v190 + 1);
      if (*((_QWORD *)&v190 + 1))
        (*(void (**)(void))(*(_QWORD *)v188 + 40))();
      *((_QWORD *)&v190 + 1) = 0;
      v189 = 0uLL;
      v188 = 0;
      LODWORD(v190) = v190 + 1;
    }
    re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v186, v89);
    if (v184[0].super.isa && ((uint64_t)v184[1].super.isa & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v184[0].super.isa + 40))();
    *(_QWORD *)&v178 = 0;
    v176 = 0;
    v175 = 0uLL;
    LODWORD(v177) = 0;
    v90 = v150;
    *(_QWORD *)v162 = v90;
    *(_DWORD *)v186 = 0;
    *(_OWORD *)&v184[0].super.isa = 0u;
    v185 = 0u;
    *(_QWORD *)&v186[4] = 0x7FFFFFFFLL;
    re::collectMeshMaterialsFromMDLMesh((id *)v162, (uint64_t)v184, *(unsigned __int8 *)(a1 + 165));
    re::createMaterialAssetsFromMaterialTable(a1, (uint64_t)v184, (_anonymous_namespace_ *)&v175);
    re::HashTable<re::ImportMaterialSignature,re::MaterialInfo,re::Hash<re::ImportMaterialSignature>,re::EqualTo<re::ImportMaterialSignature>,true,false>::deinit((uint64_t *)v184);

    v91 = re::ecs2::EntityAssetData::addComponent<re::ecs2::MeshComponent>((_DWORD *)a3);
    v92 = v91;
    v93 = (re::DynamicString *)(v91 + 4);
    if ((v172 & 1) != 0)
      v94 = v173;
    else
      v94 = (re::AssetPath *)((char *)&v172 + 1);
    re::DynamicArray<re::AssetHandle>::operator=((re::AssetHandle *)(v92 + 7), (re::AssetHandle *)&v175);
    v44 = !re::objectIsBlendShapeRoot((re *)v90, v95);
    re::DynamicArray<re::AssetHandle>::deinit((uint64_t)&v175);
    if (v171 && (v172 & 1) != 0)
      v96 = (*(double (**)(void))(*v171 + 40))();
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&buf[24], v96);

    v42 = v146;
  }
  hasTransformAnimation = re::hasTransformAnimation((re *)v42, v43);
  if (hasTransformAnimation)
  {
    v184[0].super.isa = (Class)off_24ED36578;
    v184[1].super.isa = (Class)33;
    LOBYTE(v185) = 0;
    *(_QWORD *)v186 = &str_110;
    *((_QWORD *)&v185 + 1) = 0;
    LOWORD(v188) = 256;
    HIDWORD(v188) = 1023969417;
    v192[0] = 0;
    v189 = 0u;
    v190 = 0u;
    v191 = 0;
    v184[0].super.isa = (Class)off_24ED339F8;
    LOBYTE(v175) = 1;
    re::importSRTSampledAnimation((re *)v42, v184, 0.016667, (uint64_t)v162);
    v98 = (re *)re::Result<re::Unit,re::DetailedError>::operator=((uint64_t)&v175, (uint64_t)v162);
    if (!v162[0])
    {
      v98 = *(re **)&v162[24];
      if (*(_QWORD *)&v162[24])
      {
        if ((v163 & 1) != 0)
          v98 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)&v162[24] + 40))();
      }
    }
    if ((_BYTE)v175)
    {
      objc_msgSend(v146, "name");
      v99 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v100 = (const char *)objc_msgSend(v99, "UTF8String");

      v102 = re::globalAllocators(v101);
      v103 = (re::AssetHelper *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v102[2] + 32))(v102[2], 128, 8);
      re::SampledAnimationAssetData<re::GenericSRT<float>>::SampledAnimationAssetData((uint64_t)v103, (uint64_t)v184);
      *v104 = off_24ED339F8;
      *(_QWORD *)v162 = "Transform.transform";
      *(_QWORD *)&v162[8] = 19;
      re::DynamicString::operator=((re::DynamicString *)(v104 + 5), (uint64_t)v162);
      TimelineAsset = re::AssetHelper::makeTimelineAsset(v103, v105);
      v107 = *(_anonymous_namespace_ **)(a1 + 104);
      v108 = (re::TimelineAsset *)strlen(v100);
      v109 = re::TimelineAsset::assetType(v108);
      v110 = (_anonymous_namespace_ *)re::ImportAssetTable::addAsset(v107, (uint64_t)v100, (uint64_t)v108, TimelineAsset, (re **)v109);
      *(_QWORD *)&v163 = 0;
      memset(v162, 0, 28);
      v111 = re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)v162, buf);
      if (*(_QWORD *)buf && (buf[8] & 1) != 0)
        (*(void (**)(double))(**(_QWORD **)buf + 40))(v111);
      *(_QWORD *)&buf[32] = 0;
      memset(buf, 0, 28);
      re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)buf, v110);
      v112 = re::AnimationLibraryAsset::buildAsset((_anonymous_namespace_ *)v162, (uint64_t)buf);
      if (v112)
      {
        v113 = (void *)v112;
        v114 = (re::AnimationLibraryAsset *)re::DynamicString::format((re::DynamicString *)"%s_animationlibrary", (re::DynamicString *)&v156, *(_QWORD *)(a3 + 16));
        v115 = *(_anonymous_namespace_ **)(a1 + 104);
        v116 = (BYTE8(v156) & 1) != 0 ? (__int128 *)v157 : (__int128 *)((char *)&v156 + 9);
        v117 = (BYTE8(v156) & 1) != 0 ? *((_QWORD *)&v156 + 1) >> 1 : BYTE8(v156) >> 1;
        v118 = re::AnimationLibraryAsset::assetType(v114);
        v119 = re::ImportAssetTable::addAsset(v115, (uint64_t)v116, v117, v113, (re **)v118);
        v120 = (_anonymous_namespace_ *)re::ecs2::EntityAssetData::addComponent<re::ecs2::AnimationLibraryComponent>((_DWORD *)a3);
        v121 = (_anonymous_namespace_ *)((char *)v120 + 32);
        v122 = (*(_BYTE *)(v119 + 8) & 1) != 0 ? *(re::AssetPath **)(v119 + 16) : (re::AssetPath *)(v119 + 9);
        if ((_QWORD)v156)
        {
          if ((BYTE8(v156) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v156 + 40))();
        }
      }
      re::DynamicArray<re::DynamicString>::deinit((uint64_t)buf);
      re::DynamicArray<re::DynamicString>::deinit((uint64_t)v162);
    }
    else
    {
      v123 = (id)*re::pipelineLogObjects(v98);
      if (os_log_type_enabled(v123, OS_LOG_TYPE_ERROR))
      {
        std::error_code::message((std::string *)v162, (const std::error_code *)((char *)&v175 + 8));
        v140 = v162[23] >= 0 ? v162 : *(_BYTE **)v162;
        v141 = (v178 & 1) != 0 ? (__int128 *)*((_QWORD *)&v178 + 1) : (__int128 *)((char *)&v178 + 1);
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v140;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v141;
        _os_log_error_impl(&dword_224FE9000, v123, OS_LOG_TYPE_ERROR, "Error: %s\nDetails:\n%s", buf, 0x16u);
        if ((v162[23] & 0x80000000) != 0)
          operator delete(*(void **)v162);
      }

    }
    if (!(_BYTE)v175 && v177 && (v178 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v177 + 40))();
    v184[0].super.isa = (Class)off_24ED33A68;
    if (*((_QWORD *)&v189 + 1))
    {
      if (v192[0])
        (*(void (**)(void))(**((_QWORD **)&v189 + 1) + 40))();
      v192[0] = 0;
      v190 = 0uLL;
      *((_QWORD *)&v189 + 1) = 0;
      ++v191;
    }
    v184[0].super.isa = (Class)off_24ED36578;
    if (*(_QWORD *)&v186[8])
    {
      if ((v186[16] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v186[8] + 40))();
      *(_OWORD *)&v186[8] = 0u;
      v187 = 0u;
    }
    re::StringID::destroyString((re::StringID *)((char *)&v185 + 8));
    v42 = v146;
  }
  objc_msgSend(v42, "componentConformingToProtocol:", &unk_25584D670);
  v124 = (void *)objc_claimAutoreleasedReturnValue();
  if (v124)
  {
    v125 = -1;
    do
    {
      objc_msgSend(v124, "targetShapes");
      v126 = (void *)objc_claimAutoreleasedReturnValue();
      v127 = objc_msgSend(v126, "count");

      ++v125;
    }
    while (v127 > v125);
  }

  v128 = v144;
  if (v44)
  {
    objc_msgSend(v42, "componentConformingToProtocol:", &unk_25584D810);
    obja = (void *)objc_claimAutoreleasedReturnValue();
    if (obja)
    {
      memset(buf, 0, 64);
      v129 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", buf, v184, 16);
      if (v129)
      {
        v130 = v129;
        v131 = **(_QWORD **)&buf[16];
        do
        {
          for (j = 0; j != v130; ++j)
          {
            if (**(_QWORD **)&buf[16] != v131)
              objc_enumerationMutation(obja);
            v133 = *(_QWORD *)(*(_QWORD *)&buf[8] + 8 * j);
            v182 = 0;
            v181 = 0;
            memset(v179, 0, sizeof(v179));
            v175 = 0u;
            v176 = &str_110;
            v177 = 1;
            v178 = 0uLL;
            *(_QWORD *)&v179[0] = 0;
            DWORD2(v179[0]) = 0;
            v180 = 0u;
            re::DynamicArray<re::ecs2::EntityAssetData>::add(a3 + 72, (uint64_t)&v175);
            re::ecs2::EntityAssetData::~EntityAssetData((re::ecs2::EntityAssetData *)&v175);
            re::loadMDLObject(a1, v133, *(_QWORD *)(a3 + 104) + 112 * *(_QWORD *)(a3 + 88) - 112, a4, a5, a6);
          }
          v130 = objc_msgSend(obja, "countByEnumeratingWithState:objects:count:", buf, v184, 16);
        }
        while (v130);
      }
    }
    v134 = a3;
    v158 = 0u;
    v159 = 0u;
    v156 = 0u;
    v157 = 0u;
    objc_msgSend(v146, "children");
    v151 = (void *)objc_claimAutoreleasedReturnValue();
    v135 = objc_msgSend(v151, "countByEnumeratingWithState:objects:count:", &v156, &v175, 16);
    if (v135)
    {
      v136 = v135;
      v137 = *(_QWORD *)v157;
      do
      {
        for (k = 0; k != v136; ++k)
        {
          if (*(_QWORD *)v157 != v137)
            objc_enumerationMutation(v151);
          v139 = *(_QWORD *)(*((_QWORD *)&v156 + 1) + 8 * k);
          v167 = 0uLL;
          v164 = 0u;
          *(_OWORD *)v162 = 0u;
          *(_QWORD *)&v162[16] = &str_110;
          *(_QWORD *)&v162[24] = 1;
          v163 = 0uLL;
          *(_QWORD *)&v164 = 0;
          DWORD2(v164) = 0;
          v165 = 0u;
          v166 = 0u;
          LODWORD(v167) = 0;
          re::DynamicArray<re::ecs2::EntityAssetData>::add(v134 + 72, (uint64_t)v162);
          re::ecs2::EntityAssetData::~EntityAssetData((re::ecs2::EntityAssetData *)v162);
          re::loadMDLObject(a1, v139, *(_QWORD *)(v134 + 104) + 112 * *(_QWORD *)(v134 + 88) - 112, a4, a5, a6);
        }
        v136 = objc_msgSend(v151, "countByEnumeratingWithState:objects:count:", &v156, &v175, 16);
      }
      while (v136);
    }

    v15 = v143;
    v128 = v144;
    v42 = v146;
  }

}

double simd_quaternion(simd_float3x3 a1)
{
  float v1;
  float v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x2_t v14;
  unsigned __int32 v15;
  float32x2_t v20;
  float v21;
  unsigned int v22;
  float32x2_t v23;
  float32x2_t v24;
  float32x2_t v25;

  v1 = a1.columns[2].f32[2] + (float)(a1.columns[0].f32[0] + a1.columns[1].f32[1]);
  if (v1 >= 0.0)
  {
    v8 = sqrtf(v1 + 1.0);
    v9 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v8 + v8));
    v10 = vmul_f32(v9, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v8 + v8), v9));
    v20 = vmul_n_f32(vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[1], (int8x16_t)a1.columns[1], 8uLL), *(int32x2_t *)a1.columns[2].f32), (float32x2_t)vext_s8(*(int8x8_t *)a1.columns[2].f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[0], (int8x16_t)a1.columns[0], 8uLL), 4uLL)), vmul_f32(v10, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v8 + v8), v10)).f32[0]);
  }
  else if (a1.columns[0].f32[0] < a1.columns[1].f32[1] || a1.columns[0].f32[0] < a1.columns[2].f32[2])
  {
    v3 = 1.0 - a1.columns[0].f32[0];
    if (a1.columns[1].f32[1] >= a1.columns[2].f32[2])
    {
      v21 = sqrtf(a1.columns[1].f32[1] + (float)(v3 - a1.columns[2].f32[2]));
      *(float *)&v22 = v21 + v21;
      v23 = vrecpe_f32((float32x2_t)v22);
      v24 = vmul_f32(v23, vrecps_f32((float32x2_t)v22, v23));
      v25.i32[0] = vmul_f32(v24, vrecps_f32((float32x2_t)v22, v24)).u32[0];
      v24.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)a1.columns[0].f32, 1), *(float32x2_t *)a1.columns[1].f32).u32[0];
      v24.i32[1] = v22;
      v25.i32[1] = 0.25;
      v20 = vmul_f32(v24, v25);
    }
    else
    {
      v4 = (float32x2_t)__PAIR64__(a1.columns[0].u32[1], COERCE_UNSIGNED_INT(sqrtf(a1.columns[2].f32[2] + (float)(v3 - a1.columns[1].f32[1]))));
      *(float32x2_t *)a1.columns[2].f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[0], (int8x16_t)a1.columns[0], 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a1.columns[1], (int8x16_t)a1.columns[1], 8uLL)), *(float32x2_t *)a1.columns[2].f32);
      *(int32x2_t *)a1.columns[1].f32 = vdup_lane_s32(*(int32x2_t *)a1.columns[1].f32, 0);
      a1.columns[1].i32[0] = 2.0;
      a1.columns[1].i32[0] = vmul_f32(v4, *(float32x2_t *)a1.columns[1].f32).u32[0];
      v5 = vrecpe_f32((float32x2_t)a1.columns[1].u32[0]);
      v6 = vmul_f32(v5, vrecps_f32((float32x2_t)a1.columns[1].u32[0], v5));
      v20 = vmul_n_f32(*(float32x2_t *)a1.columns[2].f32, vmul_f32(v6, vrecps_f32((float32x2_t)a1.columns[1].u32[0], v6)).f32[0]);
      __asm { FMOV            V2.2S, #0.25 }
    }
  }
  else
  {
    v11 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)a1.columns[1].f32, 0);
    v12 = vadd_f32(*(float32x2_t *)a1.columns[0].f32, v11);
    v11.i32[0] = 2.0;
    v11.i32[0] = vmul_f32((float32x2_t)__PAIR64__(a1.columns[0].u32[1], COERCE_UNSIGNED_INT(sqrtf(a1.columns[0].f32[0]+ (float)((float)(1.0 - a1.columns[1].f32[1]) - a1.columns[2].f32[2])))), v11).u32[0];
    v11.i32[1] = v12.i32[1];
    v13 = vrecpe_f32((float32x2_t)v11.u32[0]);
    v14 = vmul_f32(v13, vrecps_f32((float32x2_t)v11.u32[0], v13));
    v15 = vmul_f32(v14, vrecps_f32((float32x2_t)v11.u32[0], v14)).u32[0];
    __asm { FMOV            V5.2S, #0.25 }
    _D5.i32[1] = v15;
    v20 = vmul_f32(v11, _D5);
  }
  return *(double *)&v20;
}

double re::HashTable<re::DynamicString,re::DynamicArray<re::AssetHandle>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2];
        v7 = v6 + v4;
        v8 = *(_DWORD *)(v6 + v4 + 8);
        if (v8 < 0)
        {
          *(_DWORD *)(v7 + 8) = v8 & 0x7FFFFFFF;
          v11 = *(_QWORD *)(v7 + 16);
          v10 = (_OWORD *)(v7 + 16);
          v9 = v11;
          if (v11)
          {
            if ((*(_BYTE *)(v6 + v4 + 24) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, *(_QWORD *)(v6 + v4 + 32));
            *v10 = 0u;
            v10[1] = 0u;
          }
          re::DynamicArray<re::AssetHandle>::deinit(v6 + v4 + 48);
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 88;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

_QWORD *re::DynamicArray<re::ImportedTexturesTable::Entry>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ImportedTexturesTable::Entry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x60uLL))
        {
          v2 = 96 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 96 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_24;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 96, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_24:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 96 * v9;
        v12 = 0uLL;
        do
        {
          v13 = &v7[v10 / 8];
          v14 = (_QWORD *)(v8 + v10);
          *(_OWORD *)v13 = v12;
          *((_OWORD *)v13 + 1) = v12;
          v13[3] = *(_QWORD *)(v8 + v10 + 24);
          v15 = *(_QWORD *)(v8 + v10 + 8);
          *v13 = *(_QWORD *)(v8 + v10);
          *v14 = 0;
          v16 = *(_QWORD *)(v8 + v10 + 16);
          v14[3] = 0;
          v18 = v7[v10 / 8 + 1];
          v17 = v7[v10 / 8 + 2];
          v13[1] = v15;
          v13[2] = v16;
          v14[1] = v18;
          v14[2] = v17;
          v19 = *(_OWORD *)(v8 + v10 + 32);
          *((_DWORD *)v13 + 12) = *(_DWORD *)(v8 + v10 + 48);
          *((_OWORD *)v13 + 2) = v19;
          *(_OWORD *)(v13 + 9) = v12;
          *(_OWORD *)(v13 + 7) = v12;
          v20 = (_QWORD *)(v8 + v10 + 56);
          v13[7] = *v20;
          *v20 = 0;
          v13[10] = *(_QWORD *)(v8 + v10 + 80);
          v14[10] = 0;
          v22 = v7[v10 / 8 + 8];
          v21 = v7[v10 / 8 + 9];
          v23 = *(_QWORD *)(v8 + v10 + 72);
          v13[8] = *(_QWORD *)(v8 + v10 + 64);
          v13[9] = v23;
          v14[8] = v22;
          v14[9] = v21;
          v13[11] = *(_QWORD *)(v8 + v10 + 88);
          if (*v20)
          {
            if ((v14[8] & 1) != 0)
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v20 + 40))(*v20, v14[9]);
              v12 = 0uLL;
            }
            *(_OWORD *)v20 = v12;
            *(_OWORD *)(v8 + v10 + 72) = v12;
          }
          if (*v14)
          {
            if ((v14[1] & 1) != 0)
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v14 + 40))(*v14, v14[2]);
              v12 = 0uLL;
            }
            *(_OWORD *)v14 = v12;
            *((_OWORD *)v14 + 1) = v12;
          }
          v10 += 96;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_24;
    }
  }
  return result;
}

double re::HashTable<re::DynamicString,USKProperty * {__strong},re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,USKProperty * {__strong},re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 56;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::DynamicString,USKProperty * {__strong},re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1;
  uint64_t v3;
  _OWORD *v4;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    v4 = (_OWORD *)(a1 + 16);
    v3 = *(_QWORD *)(a1 + 16);
    *((_DWORD *)v4 - 2) = v1 & 0x7FFFFFFF;
    if (v3)
    {
      if ((*(_BYTE *)(a1 + 24) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 32));
      *v4 = 0u;
      v4[1] = 0u;
    }

  }
}

void re::TextureProvider::~TextureProvider(re::TextureProvider *this)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24ED44300;
  re::internal::TextureProviderProperties::~TextureProviderProperties((re::TextureProvider *)((char *)this + 176));

  v2 = (void *)*((_QWORD *)this + 5);
  if (v2)
  {

    *((_QWORD *)this + 5) = 0;
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    if ((*((_BYTE *)this + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 3));
    *(_OWORD *)((char *)this + 8) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
  }
}

{
  re::TextureProvider::~TextureProvider(this);
  JUMPOUT(0x2276933B8);
}

void re::ResourceTextureProvider::~ResourceTextureProvider(re::ResourceTextureProvider *this)
{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED44368;
  v3 = (_OWORD *)((char *)this + 208);
  v2 = *((_QWORD *)this + 26);
  if (v2)
  {
    if ((*((_BYTE *)this + 216) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 28));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::TextureProvider::~TextureProvider(this);
}

{
  uint64_t v2;
  _OWORD *v3;

  *(_QWORD *)this = off_24ED44368;
  v3 = (_OWORD *)((char *)this + 208);
  v2 = *((_QWORD *)this + 26);
  if (v2)
  {
    if ((*((_BYTE *)this + 216) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 28));
    *v3 = 0u;
    v3[1] = 0u;
  }
  re::TextureProvider::~TextureProvider(this);
  JUMPOUT(0x2276933B8);
}

__n128 re::TextureProvider::tryReadHeaderBytes@<Q0>(re::TextureProvider *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;

  result = v7;
  v5 = v8;
  v6 = v9;
  *(_BYTE *)a2 = 0;
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  return result;
}

uint64_t re::TextureProvider::tryCreateImageSource(re::TextureProvider *this, const __CFDictionary *a2)
{
  return 0;
}

uint64_t re::TextureProvider::tryCreateOrDetachImageSource(re::TextureProvider *this, const __CFDictionary *a2)
{
  return (*(uint64_t (**)(re::TextureProvider *, const __CFDictionary *))(*(_QWORD *)this + 24))(this, a2);
}

uint64_t re::TextureProvider::tryCreateRawImageData(re::TextureProvider *this)
{
  return 0;
}

uint64_t re::TextureProvider::tryCreateOrDetachRawImageData(re::TextureProvider *this)
{
  return (*(uint64_t (**)(re::TextureProvider *))(*(_QWORD *)this + 40))(this);
}

uint64_t re::TextureProvider::tryGetImage(re::TextureProvider *this)
{
  return 0;
}

const void *re::TextureProvider::tryCreateOrDetachImage(re::TextureProvider *this)
{
  const void *v1;
  const void *v2;

  v1 = (const void *)(*(uint64_t (**)(re::TextureProvider *))(*(_QWORD *)this + 56))(this);
  v2 = v1;
  if (v1)
    CFRetain(v1);
  return v2;
}

void re::TextureProvider::tryGetImageArray(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void re::TextureProvider::tryGetTextureTypeForImageArray(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  const re::TextureProvider *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;

  re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      v9 = (unint64_t *)(v8 + v6);
      if ((*(_DWORD *)(v8 + v6 + 8) & 0x80000000) != 0)
      {
        v11 = (const re::TextureProvider *)(v9 + 6);
        v10 = *v9;
        v12 = *(unsigned int *)(a1 + 24);
        v13 = *v9 % v12;
        v14 = *(unsigned int *)(a1 + 36);
        if ((_DWORD)v14 == 0x7FFFFFFF)
        {
          v14 = *(unsigned int *)(a1 + 32);
          v15 = v14;
          if ((_DWORD)v14 == (_DWORD)v12)
          {
            re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
            v13 = v10 % *(unsigned int *)(a1 + 24);
            v15 = *(_DWORD *)(a1 + 32);
          }
          *(_DWORD *)(a1 + 32) = v15 + 1;
          v16 = *(_QWORD *)(a1 + 16);
          v17 = *(_DWORD *)(v16 + 288 * v14 + 8);
        }
        else
        {
          v16 = *(_QWORD *)(a1 + 16);
          v17 = *(_DWORD *)(v16 + 288 * v14 + 8);
          *(_DWORD *)(a1 + 36) = v17 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v16 + 288 * v14 + 8) = v17 | 0x80000000;
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 288 * v14 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 288 * v14 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v13);
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 288 * v14) = v10;
        re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 288 * v14 + 16), (const re::DynamicString *)(v9 + 2));
        v18 = *(_QWORD *)(a1 + 16) + 288 * v14;
        re::TextureProvider::TextureProvider((re::TextureProvider *)(v18 + 48), v11);
        *(_QWORD *)(v18 + 48) = off_24ED44368;
        re::DynamicString::DynamicString((re::DynamicString *)(v18 + 256), (const re::DynamicString *)(v8 + v6 + 256));
        *(_QWORD *)(v18 + 48) = off_24ED7CBA0;
        *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v13) = v14;
        ++*(_DWORD *)(a1 + 28);
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 288;
    }
  }
}

void re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  int v12;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = v6 + v4;
        v8 = *(_DWORD *)(v6 + v4 + 8);
        if (v8 < 0)
        {
          *(_DWORD *)(v7 + 8) = v8 & 0x7FFFFFFF;
          v11 = *(_QWORD *)(v7 + 16);
          v10 = (_OWORD *)(v7 + 16);
          v9 = v11;
          if (v11)
          {
            if ((*(_BYTE *)(v6 + v4 + 24) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, *(_QWORD *)(v6 + v4 + 32));
            *v10 = 0u;
            v10[1] = 0u;
          }
          (**(void (***)(uint64_t))(v6 + v4 + 48))(v6 + v4 + 48);
          v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 288;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v12 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v12;
  }
}

void re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  signed int v25;
  _BYTE v26[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v26, 0, 36);
      *(_QWORD *)&v26[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v26, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v26;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v26[8];
      *(_OWORD *)v26 = v5;
      *(_QWORD *)&v26[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v26[24];
      *(_OWORD *)&v26[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v26[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (_QWORD *)(v6 + 256);
        do
        {
          if ((*(_DWORD *)(v14 - 31) & 0x80000000) != 0)
          {
            v15 = *(v14 - 32);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 288 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 288 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 288 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 288 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 288 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 288 * v18) = v15;
            re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 288 * v18 + 16), (const re::DynamicString *)(v14 - 30));
            v22 = *(_QWORD *)(a1 + 16) + 288 * v18;
            re::TextureProvider::TextureProvider(v22 + 48, (uint64_t)(v14 - 26));
            *(_OWORD *)(v22 + 256) = 0u;
            *(_OWORD *)(v22 + 272) = 0u;
            *(_QWORD *)(v22 + 256) = *v14;
            *v14 = 0;
            v23 = *(_QWORD *)(v22 + 272);
            *(_QWORD *)(v22 + 272) = v14[2];
            v14[2] = v23;
            *(_QWORD *)(v22 + 280) = v14[3];
            v14[3] = 0;
            v24 = *(_QWORD *)(v22 + 264);
            *(_QWORD *)(v22 + 264) = v14[1];
            v14[1] = v24;
            *(_QWORD *)(v22 + 48) = off_24ED7CBA0;
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          v14 += 36;
          ++v11;
        }
        while (v11 < v10);
      }
      re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v26);
    }
  }
  else
  {
    if (a2)
      v25 = a2;
    else
      v25 = 3;
  }
}

re::USDImportContext *re::USDImportContext::USDImportContext(re::USDImportContext *this)
{
  _QWORD *v2;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0xFF7FFFFF7F7FFFFFLL;
  *((_BYTE *)this + 16) = 0;
  *((_BYTE *)this + 24) = 0;
  *((_BYTE *)this + 32) = 1;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1;
  *((_QWORD *)this + 10) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 26) = 0;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_DWORD *)this + 36) = 0;
  *(_QWORD *)((char *)this + 148) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 10) = 0u;
  *((_DWORD *)this + 44) = 1;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 52) = 0;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_DWORD *)this + 62) = 0;
  *(_QWORD *)((char *)this + 252) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_DWORD *)this + 70) = 1;
  *((_QWORD *)this + 38) = 0;
  *((_DWORD *)this + 78) = 0;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_DWORD *)this + 88) = 0;
  *(_QWORD *)((char *)this + 356) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 23) = 0u;
  *((_DWORD *)this + 96) = 1;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((_DWORD *)this + 104) = 0;
  *((_QWORD *)this + 51) = 0;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *((_DWORD *)this + 114) = 0;
  *(_QWORD *)((char *)this + 460) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 126) = 0;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_QWORD *)((char *)this + 508) = 0x7FFFFFFFLL;
  *(_OWORD *)((char *)this + 520) = 0u;
  *((_DWORD *)this + 134) = 1;
  *((_OWORD *)this + 34) = 0u;
  *((_DWORD *)this + 142) = 0;
  *((_QWORD *)this + 70) = 0;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 37) = 0u;
  *((_DWORD *)this + 152) = 0;
  *(_QWORD *)((char *)this + 612) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 39) = 0u;
  *((_DWORD *)this + 160) = 1;
  *((_DWORD *)this + 168) = 0;
  *((_QWORD *)this + 83) = 0;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *((_DWORD *)this + 174) = 1;
  *((_DWORD *)this + 182) = 0;
  *((_QWORD *)this + 90) = 0;
  *((_OWORD *)this + 44) = 0u;
  *((_DWORD *)this + 192) = 0;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *(_QWORD *)((char *)this + 772) = 0x7FFFFFFFLL;
  v2 = (_QWORD *)((char *)this + 784);
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 50) = 0u;
  re::DynamicString::setCapacity(v2, 0);
  *((_DWORD *)this + 210) = 0;
  *((_QWORD *)this + 104) = 0;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *(_OWORD *)((char *)this + 876) = 0u;
  *(_QWORD *)((char *)this + 892) = 0x7FFFFFFFLL;
  return this;
}

void re::loadUSKSkeletalAnimationNodes(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  re *v6;
  void *v7;
  id v8;
  const char *v9;
  void *v10;
  id v11;
  _anonymous_namespace_ *v12;
  _anonymous_namespace_ *v13;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  char v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  void *v26;
  _BYTE buf[22];
  _BYTE v28[8];
  void (**v29)();
  uint64_t v30;
  char v31;
  _BYTE v32[7];
  _BYTE *v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[7];

  v38[6] = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  objc_msgSend(v3, "type");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)*MEMORY[0x24BEBEE08];

  if (v4 != v5)
    goto LABEL_15;
  re::importSkeletalAnimation(v3, *(_BYTE *)(a2 + 32), (uint64_t)v28, *(double *)a2);
  if (v28[0])
  {
    objc_msgSend(v3, "name");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "stringValue");
    v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v9 = (const char *)objc_msgSend(v8, "UTF8String");

    if (!v9 || !*v9)
      v9 = "(UnnamedAnimation)";
    objc_msgSend(v3, "path");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "stringValue");
    v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v12 = (_anonymous_namespace_ *)objc_msgSend(v11, "UTF8String");
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = &str_110;
    v25 = 0;
    v26 = &str_110;
    re::USDImportContext::addSkeletalAnimation(a2, (StringID *)buf, &v25, (uint64_t)&v29);
    re::StringID::destroyString((re::StringID *)&v25);
    re::StringID::destroyString((re::StringID *)buf);
    goto LABEL_7;
  }
  v14 = *re::pipelineLogObjects(v6);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    v22 = v14;
    objc_msgSend(v3, "path");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "stringValue");
    v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v23 = objc_msgSend(v11, "UTF8String");
    if ((v31 & 1) != 0)
      v24 = v33;
    else
      v24 = v32;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v23;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v24;
    _os_log_error_impl(&dword_224FE9000, v22, OS_LOG_TYPE_ERROR, "Skeletal Animation (%s) import error: %s.", buf, 0x16u);

LABEL_7:
  }
  if (v28[0])
  {
    re::DynamicArray<re::StringID>::deinit((uint64_t)v38);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v37);
    v29 = off_24ED33B18;
    re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)&v36);
    v29 = (void (**)())off_24ED36578;
    if ((_QWORD)v34)
    {
      if ((BYTE8(v34) & 1) != 0)
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v34 + 40))(v34, v35);
      v34 = 0u;
      v35 = 0u;
    }
    re::StringID::destroyString((re::StringID *)&v31);
  }
  else if (v30 && (v31 & 1) != 0)
  {
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v30 + 40))(v30, v33);
  }
LABEL_15:
  objc_msgSend(v3, "childIterator", v25, v26, *(_QWORD *)buf, *(_QWORD *)&buf[8]);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "nextObject");
  v16 = objc_claimAutoreleasedReturnValue();
  if (v16)
  {
    v17 = (void *)v16;
    do
    {
      objc_msgSend(v3, "metadataWithKey:", CFSTR("kind"));
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "stringValue");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend(v19, "isEqual:", CFSTR("sceneLibrary"));

      if ((v20 & 1) == 0)
        re::loadUSKSkeletalAnimationNodes(v17, a2);
      objc_msgSend(v15, "nextObject");
      v21 = objc_claimAutoreleasedReturnValue();

      v17 = (void *)v21;
    }
    while (v21);
  }

}

void re::loadUSKSkeletonNodes(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  re *v6;
  void *v7;
  id v8;
  _anonymous_namespace_ *v9;
  NSObject *v10;
  __n128 v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  uint64_t v18;
  NSObject *v19;
  id v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE v23[8];
  uint64_t v24[2];
  uint64_t v25;
  char v26;
  _BYTE v27[15];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[6];
  _BYTE buf[22];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  objc_msgSend(v3, "type");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = (void *)*MEMORY[0x24BEBEE10];

  if (v4 != v5)
    goto LABEL_20;
  re::importSkeleton(v3, (uint64_t)v23);
  if (v23[0])
  {
    objc_msgSend(v3, "path");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "stringValue");
    v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v9 = (_anonymous_namespace_ *)objc_msgSend(v8, "UTF8String");
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = &str_110;
    re::USDImportContext::addSkeleton(a2, (StringID *)buf, v24);
    re::StringID::destroyString((re::StringID *)buf);

LABEL_4:
    goto LABEL_6;
  }
  v10 = *re::pipelineLogObjects(v6);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    v19 = v10;
    objc_msgSend(v3, "path");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "stringValue");
    v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v21 = objc_msgSend(v20, "UTF8String");
    if ((v26 & 1) != 0)
      v22 = *(_BYTE **)&v27[7];
    else
      v22 = v27;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v21;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v22;
    _os_log_error_impl(&dword_224FE9000, v19, OS_LOG_TYPE_ERROR, "Skeleton (%s) import error: %s.", buf, 0x16u);

    goto LABEL_4;
  }
LABEL_6:
  if (v23[0])
  {
    v11.n128_f64[0] = re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(v37);
    if (v34)
    {
      if (v35)
      {
        (*(void (**)(double))(*(_QWORD *)v34 + 40))(v11.n128_f64[0]);
        v35 = 0;
        v36 = 0;
      }
      v34 = 0;
    }
    if (v31)
    {
      if (v32)
      {
        (*(void (**)(__n128))(*(_QWORD *)v31 + 40))(v11);
        v32 = 0;
        v33 = 0;
      }
      v31 = 0;
    }
    if (v28)
    {
      if (v29)
      {
        (*(void (**)(__n128))(*(_QWORD *)v28 + 40))(v11);
        v29 = 0;
        v30 = 0;
      }
      v28 = 0;
    }
    re::FixedArray<re::StringID>::deinit(&v25);
    re::StringID::destroyString((re::StringID *)v24);
  }
  else if (v25 && (v26 & 1) != 0)
  {
    (*(void (**)(void))(*(_QWORD *)v25 + 40))();
  }
LABEL_20:
  objc_msgSend(v3, "childIterator");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "nextObject");
  v13 = objc_claimAutoreleasedReturnValue();
  if (v13)
  {
    v14 = (void *)v13;
    do
    {
      objc_msgSend(v3, "metadataWithKey:", CFSTR("kind"));
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v15, "stringValue");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      v17 = objc_msgSend(v16, "isEqual:", CFSTR("sceneLibrary"));

      if ((v17 & 1) == 0)
        re::loadUSKSkeletonNodes(v14, a2);
      objc_msgSend(v12, "nextObject");
      v18 = objc_claimAutoreleasedReturnValue();

      v14 = (void *)v18;
    }
    while (v18);
  }

}

void re::loadUSKBlendShapeNodes(void *a1, uint64_t a2)
{
  unint64_t v2;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  char v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  re *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  _anonymous_namespace_ *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  int *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  NSObject *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  re *v45;
  id v46;
  uint64_t v47;
  _anonymous_namespace_ *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _DWORD *v52;
  int *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  NSObject *v59;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  re *v66;
  id v67;
  _anonymous_namespace_ *v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  void *v72;
  id v73;
  _anonymous_namespace_ *v74;
  void *v75;
  uint64_t v76;
  void *v77;
  void *v78;
  void *v79;
  char v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  NSObject *v84;
  uint64_t v85;
  NSObject *v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  _BYTE v90[23];
  uint64_t v91;
  void *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE v99[18];
  __int16 v100;
  unint64_t v101;
  __int16 v102;
  unint64_t v103;
  uint8_t buf[16];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  v4 = a1;
  objc_msgSend(v4, "type");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = (void *)*MEMORY[0x24BEBEDC8];

  if (v5 == v6)
  {
    v91 = 0;
    v92 = &str_110;
    v93 = 0u;
    v94 = 0u;
    v95 = 0u;
    v96 = 0u;
    v97 = 0;
    objc_msgSend(v4, "name");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "stringValue");
    v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v9 = (_anonymous_namespace_ *)objc_msgSend(v8, "UTF8String");

    if ((v89 & 1) != 0)
      v11 = *(const char **)&v90[7];
    else
      v11 = v90;
    *(_QWORD *)v99 = 0;
    *(_QWORD *)&v99[8] = &str_110;
    v12 = *(_QWORD *)v99;
    v13 = *(void **)&v99[8];
    *(_QWORD *)v99 = 0;
    *(_QWORD *)&v99[8] = &str_110;
    v14 = v91;
    v15 = v92;
    v91 = v12;
    v92 = v13;
    *(_QWORD *)buf = v12 & 0xFFFFFFFFFFFFFFFELL | v14 & 1;
    *(_QWORD *)&buf[8] = v15;
    re::StringID::destroyString((re::StringID *)buf);
    re::StringID::destroyString((re::StringID *)v99);
    objc_msgSend(v4, "property:", CFSTR("normalOffsets"));
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = v16;
    if (v16)
    {
      objc_msgSend(v16, "data");
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v18, "dataNoCopy");
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = objc_msgSend(v19, "length");
      v21 = 3 * objc_msgSend(v18, "arraySize");

      if (v20 == 4 * v21)
      {
        objc_msgSend(v18, "dataNoCopy");
        v23 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v24 = objc_msgSend(v23, "bytes");
        v25 = 3 * objc_msgSend(v18, "arraySize");

        if (v25 >= 3)
        {
          v28 = 0;
          v29 = v95;
          if (v25 / 3 <= 1)
            v30 = 1;
          else
            v30 = v25 / 3;
          v31 = (_DWORD *)(*((_QWORD *)&v95 + 1) + 4);
          v32 = (int *)(v24 + 4);
          v33 = 2;
          do
          {
            v34 = v33 - 2;
            if (v25 <= v33 - 2)
              goto LABEL_70;
            v35 = v33 - 1;
            if (v25 <= v33 - 1)
              goto LABEL_71;
            if (v25 <= v33)
              goto LABEL_72;
            if (v29 == v28)
              goto LABEL_73;
            v36 = *v32;
            v37 = v32[1];
            *(v31 - 1) = *(v32 - 1);
            *v31 = v36;
            ++v28;
            v31[1] = v37;
            v33 += 3;
            v31 += 3;
            v32 += 3;
          }
          while (v30 != v28);
        }
      }
      else
      {
        v38 = *re::pipelineLogObjects(v22);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          v82 = v38;
          v83 = objc_msgSend(v18, "arraySize");
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v83;
          _os_log_error_impl(&dword_224FE9000, v82, OS_LOG_TYPE_ERROR, "Invalid array size (%lu)", buf, 0xCu);

        }
      }

    }
    objc_msgSend(v4, "property:", CFSTR("offsets"));
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = v39;
    if (v39)
    {
      objc_msgSend(v39, "data");
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v41, "dataNoCopy");
      v42 = (void *)objc_claimAutoreleasedReturnValue();
      v43 = objc_msgSend(v42, "length");
      v44 = 3 * objc_msgSend(v41, "arraySize");

      if (v43 == 4 * v44)
      {
        objc_msgSend(v41, "dataNoCopy");
        v46 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v47 = objc_msgSend(v46, "bytes");
        v2 = 3 * objc_msgSend(v41, "arraySize");

        if (v2 >= 3)
        {
          v50 = 0;
          v25 = *((_QWORD *)&v93 + 1);
          if (v2 / 3 <= 1)
            v51 = 1;
          else
            v51 = v2 / 3;
          v52 = (_DWORD *)(v94 + 4);
          v53 = (int *)(v47 + 4);
          v54 = 2;
          do
          {
            v55 = v54 - 2;
            if (v2 <= v54 - 2)
              goto LABEL_74;
            v56 = v54 - 1;
            if (v2 <= v54 - 1)
              goto LABEL_75;
            if (v2 <= v54)
              goto LABEL_76;
            if (v25 == v50)
              goto LABEL_77;
            v57 = *v53;
            v58 = v53[1];
            *(v52 - 1) = *(v53 - 1);
            *v52 = v57;
            ++v50;
            v52[1] = v58;
            v54 += 3;
            v52 += 3;
            v53 += 3;
          }
          while (v51 != v50);
        }
      }
      else
      {
        v59 = *re::pipelineLogObjects(v45);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
        {
          v84 = v59;
          v85 = objc_msgSend(v41, "arraySize");
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v85;
          _os_log_error_impl(&dword_224FE9000, v84, OS_LOG_TYPE_ERROR, "Invalid array size (%lu)", buf, 0xCu);

        }
      }

    }
    objc_msgSend(v4, "property:", CFSTR("pointIndices"));
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    v61 = v60;
    if (v60)
    {
      objc_msgSend(v60, "data");
      v62 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v62, "dataNoCopy");
      v63 = (void *)objc_claimAutoreleasedReturnValue();
      v64 = objc_msgSend(v63, "length");
      v65 = objc_msgSend(v62, "arraySize");

      if (v64 == 4 * v65)
      {
        objc_msgSend(v62, "dataNoCopy");
        v67 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v29 = objc_msgSend(v67, "bytes");
        v25 = objc_msgSend(v62, "arraySize");

        if (v25)
        {
          v69 = 0;
          v2 = *((_QWORD *)&v96 + 1);
          v70 = v97;
          while (v2 != v69)
          {
            *(_DWORD *)(v70 + 4 * v69) = *(_DWORD *)(v29 + 4 * v69);
            if (v25 == ++v69)
              goto LABEL_46;
          }
          v98 = 0;
          v107 = 0u;
          v108 = 0u;
          v105 = 0u;
          v106 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v99 = 136315906;
          *(_QWORD *)&v99[4] = "operator[]";
          *(_WORD *)&v99[12] = 1024;
          *(_DWORD *)&v99[14] = 468;
          v100 = 2048;
          v101 = v2;
          v102 = 2048;
          v103 = v2;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_70:
          re::internal::assertLog((re::internal *)6, v27, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v34, v25);
          _os_crash();
          __break(1u);
LABEL_71:
          re::internal::assertLog((re::internal *)6, v27, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v35, v25);
          _os_crash();
          __break(1u);
LABEL_72:
          re::internal::assertLog((re::internal *)6, v27, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v33, v25);
          _os_crash();
          __break(1u);
LABEL_73:
          v98 = 0;
          v107 = 0u;
          v108 = 0u;
          v105 = 0u;
          v106 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v99 = 136315906;
          *(_QWORD *)&v99[4] = "operator[]";
          *(_WORD *)&v99[12] = 1024;
          *(_DWORD *)&v99[14] = 468;
          v100 = 2048;
          v101 = v29;
          v102 = 2048;
          v103 = v29;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_74:
          re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v55, v2);
          _os_crash();
          __break(1u);
LABEL_75:
          re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v56, v2);
          _os_crash();
          __break(1u);
LABEL_76:
          re::internal::assertLog((re::internal *)6, v49, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v54, v2);
          _os_crash();
          __break(1u);
LABEL_77:
          v98 = 0;
          v107 = 0u;
          v108 = 0u;
          v105 = 0u;
          v106 = 0u;
          *(_OWORD *)buf = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v99 = 136315906;
          *(_QWORD *)&v99[4] = "operator[]";
          *(_WORD *)&v99[12] = 1024;
          *(_DWORD *)&v99[14] = 468;
          v100 = 2048;
          v101 = v25;
          v102 = 2048;
          v103 = v25;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
      }
      else
      {
        v71 = *re::pipelineLogObjects(v66);
        if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
        {
          v86 = v71;
          v87 = objc_msgSend(v62, "arraySize");
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v87;
          _os_log_error_impl(&dword_224FE9000, v86, OS_LOG_TYPE_ERROR, "Invalid array size (%lu)", buf, 0xCu);

        }
      }
LABEL_46:

    }
    objc_msgSend(v4, "path");
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v72, "stringValue");
    v73 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v74 = (_anonymous_namespace_ *)objc_msgSend(v73, "UTF8String");
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = &str_110;
    re::USDImportContext::addBlendShape(a2, (StringID *)buf, (uint64_t)&v91);
    re::StringID::destroyString((re::StringID *)buf);

    if (v88 && (v89 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v88 + 40))();
    if ((_QWORD)v96)
    {
      if (*((_QWORD *)&v96 + 1))
      {
        (*(void (**)(void))(*(_QWORD *)v96 + 40))();
        *((_QWORD *)&v96 + 1) = 0;
        v97 = 0;
      }
      *(_QWORD *)&v96 = 0;
    }
    if (*((_QWORD *)&v94 + 1))
    {
      if ((_QWORD)v95)
      {
        (*(void (**)(void))(**((_QWORD **)&v94 + 1) + 40))();
        v95 = 0uLL;
      }
      *((_QWORD *)&v94 + 1) = 0;
    }
    if ((_QWORD)v93)
    {
      if (*((_QWORD *)&v93 + 1))
      {
        (*(void (**)(void))(*(_QWORD *)v93 + 40))();
        *((_QWORD *)&v93 + 1) = 0;
        *(_QWORD *)&v94 = 0;
      }
      *(_QWORD *)&v93 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v91);
  }
  objc_msgSend(v4, "childIterator");
  v75 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v75, "nextObject");
  v76 = objc_claimAutoreleasedReturnValue();
  if (v76)
  {
    v77 = (void *)v76;
    do
    {
      objc_msgSend(v4, "metadataWithKey:", CFSTR("kind"));
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v78, "stringValue");
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      v80 = objc_msgSend(v79, "isEqual:", CFSTR("sceneLibrary"));

      if ((v80 & 1) == 0)
        re::loadUSKBlendShapeNodes(v77, a2);
      objc_msgSend(v75, "nextObject");
      v81 = objc_claimAutoreleasedReturnValue();

      v77 = (void *)v81;
    }
    while (v81);
  }

}

void re::loadUSKDeformerStackNodes(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  _anonymous_namespace_ *v18;
  unint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const __CFString *v26;
  id v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  int v33;
  void *v34;
  id v35;
  _anonymous_namespace_ *v36;
  uint64_t v37;
  void *v38;
  char v39;
  void *v40;
  void *v41;
  id v42;
  _anonymous_namespace_ *v43;
  uint64_t v44;
  void *v45;
  char v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  const __CFString *v53;
  void *v54;
  int v55;
  _anonymous_namespace_ *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71;
  void *v72;
  void *v73;
  int v74;
  id v75;
  uint64_t v76;
  id v77;
  void *v78;
  id v79;
  unint64_t v80;
  void *v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  void *v92;
  _BYTE v93[24];
  int v94;
  __int128 v95;
  __int128 v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;

  v5 = a1;
  v6 = a2;
  objc_msgSend(v6, "typeName");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "stringValue");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend(v8, "isEqualToString:", CFSTR("Preliminary_DeformerStack")))
  {

  }
  else
  {
    objc_msgSend(v6, "typeName");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "stringValue");
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v10, "isEqualToString:", CFSTR("DeformerStack"));

    if (!v11)
      goto LABEL_34;
  }
  v80 = 0;
  v81 = &str_110;
  objc_msgSend(v6, "properties");
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("mesh"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    objc_msgSend(v6, "property:", CFSTR("mesh"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "objectPath");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(v6, "parent");
    v69 = objc_claimAutoreleasedReturnValue();
    if (!v69)
      goto LABEL_7;
    v70 = (void *)v69;
    objc_msgSend(v6, "parent");
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v71, "typeName");
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v72, "stringValue");
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    v74 = objc_msgSend(v73, "isEqualToString:", CFSTR("Mesh"));

    if (!v74)
      goto LABEL_7;
    objc_msgSend(v6, "parent");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "path");
    v15 = (void *)objc_claimAutoreleasedReturnValue();
  }
  v16 = v15;
  objc_msgSend(v15, "stringValue");
  v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v18 = (_anonymous_namespace_ *)objc_msgSend(v17, "UTF8String");
  v82 = 0;
  v83 = &str_110;
  v19 = v82;
  v20 = v83;
  v21 = v82 & 0xFFFFFFFFFFFFFFFELL;
  v82 = 0;
  v83 = &str_110;
  v89 = v21;
  v90 = &str_110;
  v80 = v19;
  v81 = v20;
  re::StringID::destroyString((re::StringID *)&v89);
  re::StringID::destroyString((re::StringID *)&v82);

LABEL_7:
  v22 = (unint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet(a3 + 856, &v80);
  if (v22)
  {
    v76 = a3;
    v23 = re::BucketArray<re::USDImportContext::NodeStackItem,32ul>::operator[](a3 + 624, *v22);
    v75 = v6;
    objc_msgSend(v6, "childIterator");
    v78 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v78, "nextObject");
    v24 = objc_claimAutoreleasedReturnValue();
    if (v24)
    {
      v25 = (void *)v24;
      v26 = CFSTR("Preliminary_DeformerAffector");
      v77 = v5;
      while (1)
      {
        v27 = v5;
        v28 = v25;
        objc_msgSend(v28, "typeName");
        v29 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v29, "stringValue");
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v30, "isEqualToString:", CFSTR("Preliminary_Deformer")))
          break;
        objc_msgSend(v28, "typeName");
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v31, "stringValue");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        v33 = objc_msgSend(v32, "isEqualToString:", CFSTR("Deformer"));

        if (v33)
          goto LABEL_13;
LABEL_31:

        objc_msgSend(v78, "nextObject");
        v25 = (void *)objc_claimAutoreleasedReturnValue();

        v5 = v77;
        if (!v25)
          goto LABEL_32;
      }

LABEL_13:
      v89 = 0;
      v90 = &str_110;
      v91 = 0;
      v92 = &str_110;
      memset(v93, 0, sizeof(v93));
      v94 = 0;
      v95 = 0u;
      v96 = 0u;
      v97 = 0;
      v99 = 0;
      v100 = 0;
      v98 = 0;
      v103 = 0;
      v104 = 0;
      v102 = 0;
      v105 = 0;
      v106 = 0;
      v107 = 0;
      v101 = 1;
      v108 = 1;
      v109 = 0;
      v110 = 0;
      v112 = 0;
      v111 = 0;
      v113 = 0;
      v114 = 0;
      v116 = 0;
      v117 = 0;
      v119 = 0;
      v118 = 0;
      v120 = 0;
      v121 = 0;
      v115 = 1;
      v122 = 1;
      v123 = 0;
      v124 = 0;
      v126 = 0;
      v125 = 0;
      v127 = 0;
      v128 = 0;
      v129 = 1;
      v130 = 0;
      v131 = 0;
      v133 = 0;
      v132 = 0;
      v134 = 0;
      v135 = 0;
      v136 = 1;
      v137 = 0;
      v138 = 0;
      v140 = 0;
      v139 = 0;
      objc_msgSend(v28, "name");
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v34, "stringValue");
      v35 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v36 = (_anonymous_namespace_ *)objc_msgSend(v35, "UTF8String");
      v87 = 0;
      v88 = &str_110;
      v37 = v87;
      v38 = v88;
      v87 = 0;
      v88 = &str_110;
      v39 = v89;
      v40 = v90;
      v89 = v37;
      v90 = v38;
      v82 = v37 & 0xFFFFFFFFFFFFFFFELL | v39 & 1;
      v83 = v40;
      re::StringID::destroyString((re::StringID *)&v82);
      re::StringID::destroyString((re::StringID *)&v87);

      objc_msgSend(v28, "property:", CFSTR("info:id"));
      v41 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v41, "stringValue");
      v42 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v43 = (_anonymous_namespace_ *)objc_msgSend(v42, "UTF8String");
      v87 = 0;
      v88 = &str_110;
      v44 = v87;
      v45 = v88;
      v87 = 0;
      v88 = &str_110;
      v46 = v91;
      v47 = v92;
      v91 = v44;
      v92 = v45;
      v82 = v44 & 0xFFFFFFFFFFFFFFFELL | v46 & 1;
      v83 = v47;
      re::StringID::destroyString((re::StringID *)&v82);
      re::StringID::destroyString((re::StringID *)&v87);

      re::loadUSKDeformerAttributes(v27, v28, (uint64_t *)&v89, (uint64_t)v93, v23);
      v79 = v28;
      objc_msgSend(v28, "childIterator");
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v48, "nextObject");
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      if (v49)
      {
        while (1)
        {
          objc_msgSend(v49, "typeName");
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v50, "stringValue");
          v51 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v51, "isEqualToString:", v26))
            break;
          objc_msgSend(v49, "typeName");
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "stringValue");
          v53 = v26;
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          v55 = objc_msgSend(v54, "isEqualToString:", CFSTR("DeformerAffector"));

          v26 = v53;
          if (v55)
            goto LABEL_17;
LABEL_29:
          objc_msgSend(v48, "nextObject");
          v64 = objc_claimAutoreleasedReturnValue();

          v49 = (void *)v64;
          if (!v64)
            goto LABEL_30;
        }

LABEL_17:
        v86 = 0;
        v83 = 0;
        v84 = 0;
        v82 = 0;
        v85 = 0;
        re::loadUSKDeformerAttributes(v27, v49, (uint64_t *)&v89, (uint64_t)&v82, v23);
        v57 = *((_QWORD *)&v96 + 1);
        if (*((_QWORD *)&v96 + 1) >= (unint64_t)v96)
        {
          v58 = *((_QWORD *)&v96 + 1) + 1;
          if ((unint64_t)v96 < *((_QWORD *)&v96 + 1) + 1)
          {
            if (*((_QWORD *)&v95 + 1))
            {
              v59 = 8;
              if ((_QWORD)v96)
                v59 = 2 * v96;
              if (v59 <= v58)
                v60 = *((_QWORD *)&v96 + 1) + 1;
              else
                v60 = v59;
              re::DynamicArray<re::GeomDeformer::Affector>::setCapacity((_QWORD *)&v95 + 1, v60);
            }
            else
            {
              re::DynamicArray<re::GeomDeformer::Affector>::setCapacity((_QWORD *)&v95 + 1, v58);
              ++v97;
            }
          }
          v57 = *((_QWORD *)&v96 + 1);
        }
        v61 = v98 + 40 * v57;
        *(_QWORD *)(v61 + 32) = 0;
        *(_QWORD *)(v61 + 8) = 0;
        *(_QWORD *)(v61 + 16) = 0;
        *(_QWORD *)v61 = 0;
        *(_DWORD *)(v61 + 24) = 0;
        *(_QWORD *)v61 = v82;
        v82 = 0;
        *(_QWORD *)(v61 + 8) = v83;
        v83 = 0;
        v62 = *(_QWORD *)(v61 + 16);
        *(_QWORD *)(v61 + 16) = v84;
        v84 = v62;
        v63 = *(_QWORD *)(v61 + 32);
        *(_QWORD *)(v61 + 32) = v86;
        v86 = v63;
        ++v85;
        ++*(_DWORD *)(v61 + 24);
        ++*((_QWORD *)&v96 + 1);
        ++v97;
        re::DynamicArray<re::GeomDeformer::Attribute>::deinit((uint64_t)&v82);
        goto LABEL_29;
      }
LABEL_30:
      re::DynamicArray<re::GeomDeformer>::add((_anonymous_namespace_ *)(v23 + 1024), (uint64_t *)&v89);

      re::GeomDeformer::~GeomDeformer((re::GeomDeformer *)&v89);
      v28 = v79;
      goto LABEL_31;
    }
LABEL_32:

    v6 = v75;
    a3 = v76;
  }
  re::StringID::destroyString((re::StringID *)&v80);
LABEL_34:
  objc_msgSend(v6, "childIterator");
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v65, "nextObject");
  v66 = objc_claimAutoreleasedReturnValue();
  if (v66)
  {
    v67 = (void *)v66;
    do
    {
      re::loadUSKDeformerStackNodes(v5, v67, a3);
      objc_msgSend(v65, "nextObject");
      v68 = objc_claimAutoreleasedReturnValue();

      v67 = (void *)v68;
    }
    while (v68);
  }

}

void re::loadUSKPhysicsNodes(void *a1, uint64_t a2)
{
  id v3;
  re *v4;
  void *v5;
  id v6;
  _anonymous_namespace_ *v7;
  uint64_t v8;
  int IsSceneGroundPlane;
  char v10;
  NSObject *v11;
  id v12;
  void *v13;
  re *v14;
  _BOOL8 hasColliderAPI;
  void *v16;
  id v17;
  _anonymous_namespace_ *v18;
  NSObject *v19;
  NSObject *v20;
  id v21;
  uint64_t v22;
  char *v23;
  NSObject *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  char v30;
  uint64_t v31;
  NSObject *v32;
  id v33;
  uint64_t v34;
  char *v35;
  NSObject *v36;
  void *v37;
  id v38;
  uint64_t v39;
  int32x4_t v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  _BYTE buf[22];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v3 = a1;
  if (!re::hasColliderAPI(v3))
    goto LABEL_7;
  re::importPhysicsCollider(v3, (uint64_t)&v40);
  if (v40.i8[0])
  {
    objc_msgSend(v3, "path");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringValue");
    v6 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v7 = (_anonymous_namespace_ *)objc_msgSend(v6, "UTF8String");
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = &str_110;
    v8 = v41;
    IsSceneGroundPlane = re::importPhysicsIsSceneGroundPlane(v3);
    v10 = re::importPhysicsCollidesWithEnvironment(v3);
    re::USDImportContext::addPhysicsCollider(a2, (StringID *)buf, v8, &v42, IsSceneGroundPlane, v10);
    re::StringID::destroyString((re::StringID *)buf);

  }
  else
  {
    v11 = *re::pipelineLogObjects(v4);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      goto LABEL_6;
    v32 = v11;
    objc_msgSend(v3, "path");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v5, "stringValue");
    v33 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v34 = objc_msgSend(v33, "UTF8String");
    if ((BYTE8(v42) & 1) != 0)
      v35 = v43;
    else
      v35 = (char *)&v42 + 9;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v34;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v35;
    _os_log_error_impl(&dword_224FE9000, v32, OS_LOG_TYPE_ERROR, "Physics collider (%s) import error: %s.", buf, 0x16u);

  }
LABEL_6:
  if (!v40.i8[0] && (_QWORD)v42 && (BYTE8(v42) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v42 + 40))();
LABEL_7:
  v12 = v3;
  if (re::isRootNodeByPath(v12))
  {

    goto LABEL_25;
  }
  objc_msgSend(v12, "property:", CFSTR("preliminary:physics:rigidBody:mass"));
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v13)
  {
    re::importPhysicsRigidBody(v12, &v40);
    if (v40.i8[0])
    {
      hasColliderAPI = re::hasColliderAPI(v12);
      if (!hasColliderAPI)
      {
        v24 = *re::pipelineLogObjects((re *)hasColliderAPI);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          v36 = v24;
          objc_msgSend(v12, "path");
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v37, "stringValue");
          v38 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          v39 = objc_msgSend(v38, "UTF8String");
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v39;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = "Rigid body is required to have a collider associated to it.";
          _os_log_error_impl(&dword_224FE9000, v36, OS_LOG_TYPE_ERROR, "Physics rigid body (%s) import error: %s.", buf, 0x16u);

        }
        goto LABEL_24;
      }
      objc_msgSend(v12, "path");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "stringValue");
      v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v18 = (_anonymous_namespace_ *)objc_msgSend(v17, "UTF8String");
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = &str_110;
      re::USDImportContext::addPhysicsRigidBody(a2, (StringID *)buf, &v41);
      re::StringID::destroyString((re::StringID *)buf);

    }
    else
    {
      v19 = *re::pipelineLogObjects(v14);
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        goto LABEL_24;
      v20 = v19;
      objc_msgSend(v12, "path");
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v16, "stringValue");
      v21 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v22 = objc_msgSend(v21, "UTF8String");
      if ((BYTE8(v42) & 1) != 0)
        v23 = v43;
      else
        v23 = (char *)&v42 + 9;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v22;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v23;
      _os_log_error_impl(&dword_224FE9000, v20, OS_LOG_TYPE_ERROR, "Physics rigid body (%s) import error: %s.", buf, 0x16u);

    }
LABEL_24:
    if (!v40.i8[0] && (_QWORD)v42 && (BYTE8(v42) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v42 + 40))();
  }
LABEL_25:
  objc_msgSend(v12, "childIterator");
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v25, "nextObject");
  v26 = objc_claimAutoreleasedReturnValue();
  if (v26)
  {
    v27 = (void *)v26;
    do
    {
      objc_msgSend(v12, "metadataWithKey:", CFSTR("kind"));
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v28, "stringValue");
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      v30 = objc_msgSend(v29, "isEqual:", CFSTR("sceneLibrary"));

      if ((v30 & 1) == 0)
        re::loadUSKPhysicsNodes(v27, a2);
      objc_msgSend(v25, "nextObject");
      v31 = objc_claimAutoreleasedReturnValue();

      v27 = (void *)v31;
    }
    while (v31);
  }

}

void re::loadUSKDeformerAttributes(void *a1, void *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  char v13;
  void *v14;
  id v15;
  _anonymous_namespace_ *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  _anonymous_namespace_ *v20;
  void *v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  void *v31;
  int v32;
  int v33;
  void *v34;
  int v35;
  void *v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  _anonymous_namespace_ *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  void *v52;
  size_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  int v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  _anonymous_namespace_ *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  NSObject *v71;
  void *v72;
  int v73;
  void *v74;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  _QWORD *v81;
  id v82;
  void *v83;
  int v84;
  void *v85;
  void *v86;
  re *v87;
  void *v88;
  void *v89;
  id v90;
  void *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  re *v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  void *v104;
  void *v105;
  int v106;
  id v107;
  _anonymous_namespace_ *v108;
  float64x2_t *v109;
  NSObject *v110;
  void *v111;
  int v112;
  void *v113;
  id v114;
  uint64_t v115;
  char v116;
  NSObject *v117;
  NSObject *v118;
  void *v119;
  id v120;
  uint64_t v121;
  NSObject *v122;
  const char *v123;
  void *v124;
  void *v125;
  int v126;
  re *v127;
  re *v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  void *v133;
  id v134;
  uint64_t v135;
  char *v136;
  void *v137;
  id v138;
  id v139;
  uint64_t v140;
  char *v141;
  NSObject *v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  re::StringID *v150;
  void *v151;
  int v152;
  re *v153;
  NSObject *v154;
  uint64_t v155;
  NSObject *v156;
  NSObject *v157;
  void *v158;
  id v159;
  uint64_t v160;
  uint64_t *v161;
  id v162;
  uint64_t v163;
  NSObject *v164;
  uint64_t v165;
  float32x4_t v166;
  float32x4_t v167;
  const void *v168;
  void *v169[2];
  const void *__src;
  uint64_t *__srca;
  void *__srcb;
  void *__srcc[2];
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t *v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  id v194;
  id v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  StringID v199;
  StringID v200;
  char v201[24];
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  __int128 v207;
  uint64_t v208;
  float64x2_t buf[2];
  float64x2_t v210;
  float64x2_t v211;
  float64x2_t v212;
  float64x2_t v213;
  float64x2_t v214;
  float64x2_t v215;
  _BYTE v216[18];
  __int16 v217;
  unint64_t v218;
  __int16 v219;
  unint64_t v220;
  uint64_t v221;

  v221 = *MEMORY[0x24BDAC8D0];
  v195 = a1;
  v194 = a2;
  objc_msgSend(v194, "propertyList");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "nextObject");
  v9 = objc_claimAutoreleasedReturnValue();
  if (v9)
  {
    v10 = (void *)v9;
    v176 = (uint64_t)(a3 + 49);
    v190 = a3 + 14;
    v182 = (uint64_t)(a3 + 42);
    v175 = a3 + 35;
    v181 = a3 + 21;
    v198 = *MEMORY[0x24BEBED78];
    v186 = a3 + 28;
    v178 = a3 + 38;
    v197 = *MEMORY[0x24BEBED18];
    v179 = a3 + 24;
    v196 = *MEMORY[0x24BEBED40];
    v191 = *MEMORY[0x24BEBED58];
    v192 = *MEMORY[0x24BEBED80];
    v188 = *MEMORY[0x24BEBED70];
    v185 = *MEMORY[0x24BEBED88];
    v183 = *MEMORY[0x24BEBEDA8];
    v180 = *MEMORY[0x24BEBEDA0];
    v177 = *MEMORY[0x24BEBED30];
    v174 = *MEMORY[0x24BEBED68];
    v184 = a3 + 31;
    v187 = a3 + 17;
    v193 = v8;
    while (1)
    {
      objc_msgSend(v10, "name");
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v11, "stringValue");
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend(v12, "containsString:", CFSTR("info:"));

      if ((v13 & 1) == 0)
        break;
LABEL_34:
      objc_msgSend(v8, "nextObject");
      v55 = objc_claimAutoreleasedReturnValue();

      v10 = (void *)v55;
      if (!v55)
        goto LABEL_107;
    }
    objc_msgSend(v10, "name");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "stringValue");
    v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v16 = (_anonymous_namespace_ *)objc_msgSend(v15, "UTF8String");
    *(_QWORD *)v216 = 0;
    *(_QWORD *)&v216[8] = &str_110;
    v17 = *(_QWORD *)v216;
    v18 = *(void **)&v216[8];
    *(_QWORD *)v216 = 0;
    *(_QWORD *)&v216[8] = &str_110;
    *(_QWORD *)&buf[0].f64[1] = &str_110;
    *(_QWORD *)&buf[0].f64[0] = v17 & 0xFFFFFFFFFFFFFFFELL;
    v205 = v17;
    v206 = v18;
    re::StringID::destroyString((re::StringID *)buf);
    re::StringID::destroyString((re::StringID *)v216);

    objc_msgSend(v10, "type");
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(v15) = objc_msgSend(v19, "isEqualToString:", v198);

    if ((_DWORD)v15)
    {
      LODWORD(v207) = 1;
      v20 = (_anonymous_namespace_ *)objc_msgSend(v10, "intValue");
LABEL_8:
      DWORD2(v207) = (_DWORD)v20;
      v204 = 1;
LABEL_9:
      v23 = 1;
LABEL_10:
      v24 = *(_QWORD *)(a4 + 8);
      v25 = *(_QWORD *)(a4 + 16);
      if (v25 >= v24)
      {
        v26 = v25 + 1;
        if (v24 < v25 + 1)
        {
          if (*(_QWORD *)a4)
          {
            v27 = 2 * v24;
            v28 = v24 == 0;
            v29 = 8;
            if (!v28)
              v29 = v27;
            if (v29 <= v26)
              v30 = v26;
            else
              v30 = v29;
            re::DynamicArray<re::GeomDeformer::Attribute>::setCapacity((_QWORD *)a4, v30);
          }
          else
          {
            re::DynamicArray<re::GeomDeformer::Attribute>::setCapacity((_QWORD *)a4, v26);
            ++*(_DWORD *)(a4 + 24);
          }
        }
        v25 = *(_QWORD *)(a4 + 16);
      }
      v54 = *(_QWORD *)(a4 + 32) + 40 * v25;
      *(_QWORD *)v54 = v23;
      *(_QWORD *)(v54 + 8) = v17;
      *(_QWORD *)(v54 + 16) = v18;
      v205 = 0;
      v206 = &str_110;
      *(_OWORD *)(v54 + 24) = v207;
      ++*(_QWORD *)(a4 + 16);
      ++*(_DWORD *)(a4 + 24);
      goto LABEL_33;
    }
    objc_msgSend(v10, "type");
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = objc_msgSend(v21, "isEqualToString:", v197);

    if (v22)
    {
      LODWORD(v207) = 1;
      v20 = (_anonymous_namespace_ *)objc_msgSend(v10, "BOOLValue");
      goto LABEL_8;
    }
    objc_msgSend(v10, "type");
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    v32 = objc_msgSend(v31, "isEqualToString:", v196);

    if (v32)
    {
      LODWORD(v207) = 0;
      v20 = (_anonymous_namespace_ *)objc_msgSend(v10, "floatValue");
      DWORD2(v207) = v33;
      v204 = 1;
      goto LABEL_9;
    }
    objc_msgSend(v10, "type");
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    v35 = objc_msgSend(v34, "isEqualToString:", v192);

    if (v35)
    {
      LODWORD(v207) = 2;
      *((_QWORD *)&v207 + 1) = a3[19];
      objc_msgSend(v10, "data");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "dataNoCopy");
      v37 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v23 = objc_msgSend(v37, "bytes");

      objc_msgSend(v36, "dataNoCopy");
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      v39 = objc_msgSend(v38, "length");
      v40 = a3;
      v41 = objc_msgSend(v36, "arraySize");

      if (v39 == 4 * v41)
      {
        __src = (const void *)v23;
        v43 = objc_msgSend(v36, "arraySize");
        v199.var1 = 0;
        *(_QWORD *)&v200.var0 = 0;
        *(_QWORD *)&v199.var0 = 0;
        v45 = v40[19];
        v46 = v40[15];
        if (v45 + 1 > 8 * v46)
        {
          re::BucketArray<re::FixedArray<int>,8ul>::setBucketsCapacity(v190, (v45 + 8) >> 3);
          v46 = v40[15];
        }
        v47 = v45 >> 3;
        if (v46 <= v45 >> 3)
        {
          v208 = 0;
          v211 = 0u;
          v212 = 0u;
          v210 = 0u;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v216 = 136315906;
          *(_QWORD *)&v216[4] = "operator[]";
          *(_WORD *)&v216[12] = 1024;
          *(_DWORD *)&v216[14] = 858;
          v217 = 2048;
          v218 = v45 >> 3;
          v219 = 2048;
          v220 = v46;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_109:
          re::internal::assertLog((re::internal *)4, v44, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
          _os_crash();
          __break(1u);
LABEL_110:
          v208 = 0;
          v211 = 0u;
          v212 = 0u;
          v210 = 0u;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v216 = 136315906;
          *(_QWORD *)&v216[4] = "operator[]";
          *(_WORD *)&v216[12] = 1024;
          *(_DWORD *)&v216[14] = 858;
          v217 = 2048;
          v218 = v47;
          v219 = 2048;
          v220 = v46;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_111:
          re::internal::assertLog((re::internal *)4, v65, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
          _os_crash();
          __break(1u);
LABEL_112:
          *(_QWORD *)&v199.var0 = 0;
          v211 = 0u;
          v212 = 0u;
          v210 = 0u;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v216 = 136315906;
          *(_QWORD *)&v216[4] = "operator[]";
          *(_WORD *)&v216[12] = 1024;
          *(_DWORD *)&v216[14] = 789;
          v217 = 2048;
          v218 = 0;
          v219 = 2048;
          v220 = 0;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_113:
          v208 = 0;
          v211 = 0u;
          v212 = 0u;
          v210 = 0u;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v216 = 136315906;
          *(_QWORD *)&v216[4] = "operator[]";
          *(_WORD *)&v216[12] = 1024;
          *(_DWORD *)&v216[14] = 858;
          v217 = 2048;
          v218 = v47;
          v219 = 2048;
          v220 = v46;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_114:
          re::internal::assertLog((re::internal *)4, v97, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
          _os_crash();
          __break(1u);
LABEL_115:
          v208 = 0;
          v211 = 0u;
          v212 = 0u;
          v210 = 0u;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v216 = 136315906;
          *(_QWORD *)&v216[4] = "operator[]";
          *(_WORD *)&v216[12] = 1024;
          *(_DWORD *)&v216[14] = 858;
          v217 = 2048;
          v218 = v47;
          v219 = 2048;
          v220 = v46;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v48 = (_QWORD *)v40[18];
        if ((v40[16] & 1) != 0)
          v48 = v187;
        v49 = v48[v47];
        ++v40[19];
        ++*((_DWORD *)v40 + 40);
        v50 = (_QWORD *)(v49 + 24 * (v45 & 7));
        *v50 = 0;
        v50[1] = 0;
        v50[2] = 0;
        *v50 = *(_QWORD *)&v199.var0;
        *(_QWORD *)&v199.var0 = 0;
        v50[1] = v199.var1;
        v50[2] = *(_QWORD *)&v200.var0;
        v51 = v40[19];
        if (!v51)
          goto LABEL_109;
        a3 = v40;
        v52 = *(void **)(re::BucketArray<re::FixedArray<re::PackedFloat3>,8ul>::operator[]((uint64_t)v190, v51 - 1) + 16);
        v53 = 4 * objc_msgSend(v36, "arraySize");
        goto LABEL_45;
      }
      v71 = *re::pipelineLogObjects(v42);
      a3 = v40;
      if (!os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
        goto LABEL_54;
      goto LABEL_104;
    }
    objc_msgSend(v10, "type");
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    v57 = objc_msgSend(v56, "isEqualToString:", v191);

    if (v57)
    {
      LODWORD(v207) = 4;
      *((_QWORD *)&v207 + 1) = a3[33];
      objc_msgSend(v10, "data");
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v36, "dataNoCopy");
      v58 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v23 = objc_msgSend(v58, "bytes");

      objc_msgSend(v36, "dataNoCopy");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      v60 = objc_msgSend(v59, "length");
      v61 = a3;
      v62 = 3 * objc_msgSend(v36, "arraySize");

      if (v60 == 4 * v62)
      {
        __src = (const void *)v23;
        v64 = objc_msgSend(v36, "arraySize");
        v199.var1 = 0;
        *(_QWORD *)&v200.var0 = 0;
        *(_QWORD *)&v199.var0 = 0;
        v66 = v61[33];
        v46 = v61[29];
        if (v66 + 1 > 8 * v46)
        {
          re::BucketArray<re::FixedArray<re::PackedFloat3>,8ul>::setBucketsCapacity(v186, (v66 + 8) >> 3);
          v46 = v61[29];
        }
        v47 = v66 >> 3;
        if (v46 <= v66 >> 3)
          goto LABEL_110;
        v67 = (_QWORD *)v61[32];
        if ((v61[30] & 1) != 0)
          v67 = v184;
        v68 = v67[v47];
        ++v61[33];
        ++*((_DWORD *)v61 + 68);
        v69 = (_QWORD *)(v68 + 24 * (v66 & 7));
        *v69 = 0;
        v69[1] = 0;
        v69[2] = 0;
        *v69 = *(_QWORD *)&v199.var0;
        *(_QWORD *)&v199.var0 = 0;
        v69[1] = v199.var1;
        v69[2] = *(_QWORD *)&v200.var0;
        v70 = v61[33];
        if (!v70)
          goto LABEL_111;
        a3 = v61;
        v52 = *(void **)(re::BucketArray<re::FixedArray<re::PackedFloat3>,8ul>::operator[]((uint64_t)v186, v70 - 1) + 16);
        v53 = 12 * objc_msgSend(v36, "arraySize");
LABEL_45:
        memcpy(v52, __src, v53);
        v23 = objc_msgSend(v36, "arraySize");
        v204 = v23;
LABEL_54:

LABEL_55:
        v8 = v193;
        goto LABEL_10;
      }
      v71 = *re::pipelineLogObjects(v63);
      a3 = v61;
      if (!os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
        goto LABEL_54;
LABEL_104:
      v154 = v71;
      v155 = objc_msgSend(v36, "arraySize");
      LODWORD(buf[0].f64[0]) = 134217984;
      *(_QWORD *)((char *)buf[0].f64 + 4) = v155;
      _os_log_error_impl(&dword_224FE9000, v154, OS_LOG_TYPE_ERROR, "Invalid array size (%lu)", (uint8_t *)buf, 0xCu);

      goto LABEL_54;
    }
    objc_msgSend(v10, "type");
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    v73 = objc_msgSend(v72, "isEqualToString:", v188);

    if (v73)
    {
      objc_msgSend(v10, "name");
      v74 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v74, "stringValue");
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v75, "componentsSeparatedByString:", CFSTR(":"));
      v76 = (void *)objc_claimAutoreleasedReturnValue();

      objc_msgSend(v76, "objectAtIndexedSubscript:", 0);
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(v75) = objc_msgSend(v77, "isEqualToString:", CFSTR("primvars"));

      if ((_DWORD)v75)
      {
        v78 = (void *)MEMORY[0x24BDD17C8];
        v23 = (uint64_t)a3;
        objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", a3[3]);
        v46 = objc_claimAutoreleasedReturnValue();
        objc_msgSend(v10, "name");
        v47 = objc_claimAutoreleasedReturnValue();
        objc_msgSend((id)v47, "stringValue");
        v79 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v78, "stringWithFormat:", CFSTR("%@:%@"), v46, v79);
        v80 = (void *)objc_claimAutoreleasedReturnValue();

        if (!*(_QWORD *)(a5 + 304))
          goto LABEL_112;
        v81 = (_QWORD *)(**(_QWORD **)(a5 + 320) + 24);
        v82 = objc_retainAutorelease(v80);
        re::addPropertyToGeomModelDescriptor(v10, 0, CFSTR("vertex"), v81, (const char *)objc_msgSend(v82, "UTF8String"), 0, (uint64_t)v201);
        a3 = (uint64_t *)v23;
        if (!v201[0])
        {
          v8 = v193;
          if ((_QWORD)v202)
          {
            if ((BYTE8(v202) & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v202 + 40))();
            v202 = 0u;
            v203 = 0u;
          }
          goto LABEL_83;
        }
      }
      else
      {
        __srcb = v76;
        LODWORD(v207) = 3;
        *((_QWORD *)&v207 + 1) = a3[26];
        objc_msgSend(v10, "data");
        v82 = (id)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v82, "dataNoCopy");
        v90 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v23 = objc_msgSend(v90, "bytes");

        objc_msgSend(v82, "dataNoCopy");
        v91 = (void *)objc_claimAutoreleasedReturnValue();
        v92 = objc_msgSend(v91, "length");
        v93 = a3;
        v94 = objc_msgSend(v82, "arraySize");

        if (v92 != 4 * v94)
        {
          a3 = v93;
          v110 = *re::pipelineLogObjects(v95);
          if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
          {
            v164 = v110;
            v165 = objc_msgSend(v82, "arraySize");
            LODWORD(buf[0].f64[0]) = 134217984;
            *(_QWORD *)((char *)buf[0].f64 + 4) = v165;
            _os_log_error_impl(&dword_224FE9000, v164, OS_LOG_TYPE_ERROR, "Invalid array size (%lu)", (uint8_t *)buf, 0xCu);

          }
          v8 = v193;
          v76 = __srcb;
          goto LABEL_83;
        }
        v168 = (const void *)v23;
        v96 = objc_msgSend(v82, "arraySize");
        v199.var1 = 0;
        *(_QWORD *)&v200.var0 = 0;
        *(_QWORD *)&v199.var0 = 0;
        v98 = v93[26];
        v99 = v93;
        v46 = v93[22];
        if (v98 + 1 > 8 * v46)
        {
          re::BucketArray<re::FixedArray<float>,8ul>::setBucketsCapacity(v181, (v98 + 8) >> 3);
          v46 = v93[22];
        }
        v47 = v98 >> 3;
        v76 = __srcb;
        if (v46 <= v98 >> 3)
          goto LABEL_113;
        v100 = (_QWORD *)v99[25];
        if ((v99[23] & 1) != 0)
          v100 = v179;
        v101 = v100[v47];
        ++v99[26];
        ++*((_DWORD *)v99 + 54);
        v102 = (_QWORD *)(v101 + 24 * (v98 & 7));
        *v102 = 0;
        v102[1] = 0;
        v102[2] = 0;
        *v102 = *(_QWORD *)&v199.var0;
        *(_QWORD *)&v199.var0 = 0;
        v102[1] = v199.var1;
        v102[2] = *(_QWORD *)&v200.var0;
        v103 = v99[26];
        if (!v103)
          goto LABEL_114;
        a3 = v99;
        v104 = *(void **)(re::BucketArray<re::FixedArray<re::PackedFloat3>,8ul>::operator[]((uint64_t)v181, v103 - 1) + 16);
        memcpy(v104, v168, 4 * objc_msgSend(v82, "arraySize"));
        v23 = objc_msgSend(v82, "arraySize");
        v204 = v23;
      }
      v8 = v193;
LABEL_83:

      goto LABEL_10;
    }
    objc_msgSend(v10, "type");
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    v84 = objc_msgSend(v83, "isEqualToString:", v185);

    if (!v84)
    {
      objc_msgSend(v10, "type");
      v105 = (void *)objc_claimAutoreleasedReturnValue();
      v106 = objc_msgSend(v105, "isEqualToString:", v183);

      if (v106)
      {
        LODWORD(v207) = 6;
        *((_QWORD *)&v207 + 1) = a3[47];
        objc_msgSend(v10, "stringValue");
        v107 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v108 = (_anonymous_namespace_ *)objc_msgSend(v107, "UTF8String");
        buf[0].f64[0] = 0.0;
        *(_QWORD *)&buf[0].f64[1] = &str_110;
        v109 = (float64x2_t *)re::BucketArray<re::StringID,8ul>::addUninitialized(v182);
        *v109 = buf[0];
        *(_QWORD *)&buf[0].f64[1] = &str_110;
        buf[0].f64[0] = 0.0;
        re::StringID::destroyString((re::StringID *)buf);

      }
      else
      {
        objc_msgSend(v10, "type");
        v111 = (void *)objc_claimAutoreleasedReturnValue();
        v112 = objc_msgSend(v111, "isEqualToString:", v180);

        if (!v112)
        {
          objc_msgSend(v10, "type");
          v144 = (void *)objc_claimAutoreleasedReturnValue();
          if (objc_msgSend(v144, "isEqualToString:", v177))
          {

            v8 = v193;
          }
          else
          {
            objc_msgSend(v10, "type");
            v151 = (void *)objc_claimAutoreleasedReturnValue();
            v152 = objc_msgSend(v151, "isEqualToString:", v174);

            v8 = v193;
            if (!v152)
            {
              v156 = *re::pipelineLogObjects(v153);
              if (os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT))
              {
                v157 = v156;
                objc_msgSend(v10, "name");
                v158 = (void *)objc_claimAutoreleasedReturnValue();
                objc_msgSend(v158, "stringValue");
                v159 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                v160 = objc_msgSend(v159, "UTF8String");
                objc_msgSend(v10, "type");
                v161 = a3;
                v162 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
                v163 = objc_msgSend(v162, "UTF8String");
                LODWORD(buf[0].f64[0]) = 136315394;
                *(_QWORD *)((char *)buf[0].f64 + 4) = v160;
                WORD2(buf[0].f64[1]) = 2080;
                *(_QWORD *)((char *)&buf[0].f64[1] + 6) = v163;
                _os_log_impl(&dword_224FE9000, v157, OS_LOG_TYPE_DEFAULT, "Deformer attribute [%s] has an invalid type [%s], skipping.", (uint8_t *)buf, 0x16u);

                a3 = v161;
                v8 = v193;

              }
              goto LABEL_33;
            }
          }
          v214 = 0u;
          v215 = 0u;
          v212 = 0u;
          v213 = 0u;
          v210 = 0u;
          v211 = 0u;
          memset(buf, 0, sizeof(buf));
          objc_msgSend(v10, "double4x4Value");
          LODWORD(v207) = 7;
          *((_QWORD *)&v207 + 1) = a3[54];
          *(float32x4_t *)__srcc = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(buf[0]), buf[1]);
          *(float32x4_t *)v169 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v210), v211);
          v167 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v212), v213);
          v166 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v214), v215);
          v20 = (_anonymous_namespace_ *)re::BucketArray<re::Matrix4x4<float>,8ul>::addUninitialized(v176);
          *(_OWORD *)v20 = *(_OWORD *)__srcc;
          *((_OWORD *)v20 + 1) = *(_OWORD *)v169;
          *((float32x4_t *)v20 + 2) = v167;
          *((float32x4_t *)v20 + 3) = v166;
          v23 = 1;
          v204 = 1;
          goto LABEL_10;
        }
        LODWORD(v207) = 6;
        objc_msgSend(v10, "resourcePath");
        v113 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v113, "resolvedPath");
        v114 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        re::StringID::StringID((re::StringID *)buf, (const char *)objc_msgSend(v114, "UTF8String"));
        v115 = re::BucketArray<re::StringID,8ul>::addUninitialized(v182);
        v116 = LOBYTE(buf[0].f64[0]);
        *(_QWORD *)v115 = *(_QWORD *)v115 & 0xFFFFFFFFFFFFFFFELL | LOBYTE(buf[0].f64[0]) & 1;
        *(_QWORD *)v115 = *(_QWORD *)&buf[0].f64[0] & 0xFFFFFFFFFFFFFFFELL | v116 & 1;
        *(float64_t *)(v115 + 8) = buf[0].f64[1];
        *(_QWORD *)&buf[0].f64[1] = &str_110;
        buf[0].f64[0] = 0.0;
        re::StringID::destroyString((re::StringID *)buf);

        *((_QWORD *)&v207 + 1) = a3[47];
      }
      v204 = 1;
      goto LABEL_101;
    }
    LODWORD(v207) = 5;
    *((_QWORD *)&v207 + 1) = a3[40];
    *(_QWORD *)&v199.var0 = 0;
    v199.var1 = (char *)&str_110;
    *(_QWORD *)&v200.var0 = 0;
    v200.var1 = (char *)&str_110;
    objc_msgSend(v10, "objectPath");
    v85 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v195, "nodeAtPath:", v85);
    v86 = (void *)objc_claimAutoreleasedReturnValue();

    if (v86)
    {
      __srca = a3;
      objc_msgSend(v86, "typeName");
      v88 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v88, "stringValue");
      v89 = (void *)objc_claimAutoreleasedReturnValue();
      if (objc_msgSend(v89, "isEqualToString:", CFSTR("Preliminary_Deformer")))
      {

      }
      else
      {
        objc_msgSend(v86, "typeName");
        v124 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v124, "stringValue");
        v125 = (void *)objc_claimAutoreleasedReturnValue();
        v126 = objc_msgSend(v125, "isEqualToString:", CFSTR("Deformer"));

        if (!v126)
        {
          objc_msgSend(v86, "path");
          v137 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v137, "stringValue");
          v138 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          re::StringID::StringID((re::StringID *)v216, (const char *)objc_msgSend(v138, "UTF8String"));
          v145 = *(_QWORD *)v216;
          v146 = *(char **)&v216[8];
          *(_QWORD *)v216 = 0;
          *(_QWORD *)&v216[8] = &str_110;
          *(_QWORD *)&buf[0].f64[1] = &str_110;
          *(_QWORD *)&buf[0].f64[0] = v145 & 0xFFFFFFFFFFFFFFFELL;
          *(_QWORD *)&v199.var0 = v145;
          v199.var1 = v146;
          re::StringID::destroyString((re::StringID *)buf);
          re::StringID::destroyString((re::StringID *)v216);
          goto LABEL_95;
        }
      }
      objc_msgSend(v86, "parent");
      v127 = (re *)objc_claimAutoreleasedReturnValue();
      if (v127)
      {
        v128 = v127;
        objc_msgSend(v86, "parent");
        v129 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v129, "parent");
        v130 = (void *)objc_claimAutoreleasedReturnValue();

        if (v130)
        {
          objc_msgSend(v86, "parent");
          v131 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v131, "parent");
          v132 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v132, "path");
          v133 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v133, "stringValue");
          v134 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          re::StringID::StringID((re::StringID *)v216, (const char *)objc_msgSend(v134, "UTF8String"));
          v135 = *(_QWORD *)v216;
          v136 = *(char **)&v216[8];
          *(_QWORD *)v216 = 0;
          *(_QWORD *)&v216[8] = &str_110;
          *(_QWORD *)&buf[0].f64[1] = &str_110;
          *(_QWORD *)&buf[0].f64[0] = v135 & 0xFFFFFFFFFFFFFFFELL;
          *(_QWORD *)&v199.var0 = v135;
          v199.var1 = v136;
          re::StringID::destroyString((re::StringID *)buf);
          re::StringID::destroyString((re::StringID *)v216);

          objc_msgSend(v86, "properties");
          v137 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v137, "objectForKeyedSubscript:", CFSTR("info:id"));
          v138 = (id)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v138, "stringValue");
          v139 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          re::StringID::StringID((re::StringID *)v216, (const char *)objc_msgSend(v139, "UTF8String"));
          v140 = *(_QWORD *)v216;
          v141 = *(char **)&v216[8];
          *(_QWORD *)v216 = 0;
          *(_QWORD *)&v216[8] = &str_110;
          *(_QWORD *)&buf[0].f64[1] = &str_110;
          *(_QWORD *)&buf[0].f64[0] = v140 & 0xFFFFFFFFFFFFFFFELL;
          *(_QWORD *)&v200.var0 = v140;
          v200.var1 = v141;
          re::StringID::destroyString((re::StringID *)buf);
          re::StringID::destroyString((re::StringID *)v216);

LABEL_95:
          a3 = __srca;
          v147 = __srca[40];
          v46 = __srca[36];
          if (v147 + 1 > 8 * v46)
          {
            re::BucketArray<re::GeomDeformer::MeshTarget,8ul>::setBucketsCapacity(v175, (v147 + 8) >> 3);
            v46 = __srca[36];
          }
          v47 = v147 >> 3;
          if (v46 <= v147 >> 3)
            goto LABEL_115;
          v148 = (_QWORD *)__srca[39];
          if ((__srca[37] & 1) != 0)
            v148 = v178;
          v149 = v148[v47];
          ++__srca[40];
          ++*((_DWORD *)__srca + 82);
          v150 = re::StringID::StringID((re::StringID *)(v149 + 32 * (v147 & 7)), &v199);
          re::StringID::StringID((re::StringID *)((char *)v150 + 16), &v200);
          v204 = 1;

          re::StringID::destroyString((re::StringID *)&v200);
          re::StringID::destroyString((re::StringID *)&v199);
LABEL_101:
          v23 = 1;
          goto LABEL_55;
        }
      }
      v142 = *re::pipelineLogObjects(v127);
      a3 = __srca;
      if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
      {
        v118 = v142;
        objc_msgSend(v10, "objectPath");
        v119 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v119, "stringValue");
        v120 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v143 = objc_msgSend(v120, "UTF8String");
        LODWORD(buf[0].f64[0]) = 136315138;
        *(_QWORD *)((char *)buf[0].f64 + 4) = v143;
        v122 = v118;
        v123 = "Invalid path: %s";
        goto LABEL_90;
      }
    }
    else
    {
      v117 = *re::pipelineLogObjects(v87);
      if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
      {
        v118 = v117;
        objc_msgSend(v10, "objectPath");
        v119 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v119, "stringValue");
        v120 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v121 = objc_msgSend(v120, "UTF8String");
        LODWORD(buf[0].f64[0]) = 136315138;
        *(_QWORD *)((char *)buf[0].f64 + 4) = v121;
        v122 = v118;
        v123 = "Failed to find target at path: %s";
LABEL_90:
        _os_log_impl(&dword_224FE9000, v122, OS_LOG_TYPE_DEFAULT, v123, (uint8_t *)buf, 0xCu);

      }
    }

    re::StringID::destroyString((re::StringID *)&v200);
    re::StringID::destroyString((re::StringID *)&v199);
    v8 = v193;
LABEL_33:
    re::StringID::destroyString((re::StringID *)&v205);
    goto LABEL_34;
  }
LABEL_107:

}

uint64_t re::BucketArray<re::StringID,8ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 8 * v3)
  {
    re::BucketArray<re::StringID,8ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 8) >> 3);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 3));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 16 * (v2 & 7);
}

uint64_t re::BucketArray<re::Matrix4x4<float>,8ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 8 * v3)
  {
    re::BucketArray<re::Matrix4x4<float>,8ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 8) >> 3);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 3));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + ((v2 & 7) << 6);
}

BOOL re::hasColliderAPI(void *a1)
{
  id v1;
  _BOOL8 v2;
  void *v3;

  v1 = a1;
  if ((re::isRootNodeByPath(v1) & 1) != 0)
  {
    v2 = 0;
  }
  else
  {
    objc_msgSend(v1, "property:", CFSTR("preliminary:physics:collider:convexShape"));
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    v2 = v3 != 0;

  }
  return v2;
}

uint64_t re::createEntityFromImportContext(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, size_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, char a9)
{
  unint64_t j;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  __n128 *v13;
  _anonymous_namespace_ *v16;
  _anonymous_namespace_ *v17;
  _anonymous_namespace_ *v18;
  _anonymous_namespace_ *v19;
  uint64_t v20;
  _anonymous_namespace_ *v21;
  unint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  re::ecs2::TransformComponent *v25;
  __int128 v26;
  __int128 v27;
  const char *v28;
  size_t v29;
  unint64_t *v30;
  unint64_t i;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float32x4_t v37;
  unint64_t v38;
  unint64_t v39;
  float32x4_t *v40;
  uint64_t v41;
  unint64_t v43;
  unint64_t v45;
  _anonymous_namespace_ *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  float v53;
  __int128 v54;
  float v55;
  __int128 v56;
  float32x2_t v57;
  uint32x2_t v58;
  __int128 v59;
  const char *v60;
  re *v61;
  NSObject *v62;
  unint64_t v63;
  int v64;
  float v65;
  unsigned int v66;
  __int128 v67;
  const char *v68;
  re *v69;
  NSObject *v70;
  int v71;
  unint64_t v72;
  __int128 v73;
  const char *v74;
  re *v75;
  re *v76;
  int v77;
  NSObject *v78;
  _BOOL4 v79;
  unint64_t v80;
  __int128 v81;
  const char *v82;
  re *v83;
  NSObject *v84;
  unint64_t v85;
  int v86;
  float64x2_t v91;
  float v92;
  float64x2_t v93;
  float v94;
  float64x2_t v95;
  float64x2_t v96;
  NSObject *v97;
  float v98;
  float64x2_t v99;
  float v100;
  float64x2_t v101;
  __int128 v102;
  _anonymous_namespace_ *v103;
  _anonymous_namespace_ *v104;
  unsigned int v106;
  unsigned int v107;
  _DWORD *Asset;
  re::MeshAsset *v109;
  uint64_t *v110;
  uint64_t v111;
  re::AssetPath *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _BOOL4 v118;
  int v120;
  _anonymous_namespace_ *v121;
  const char *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t *v125;
  BOOL v126;
  float v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  float v133;
  float v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  const char *v139;
  re::SkeletonAsset *v140;
  uint64_t *v141;
  uint64_t v142;
  re::AssetPath *v143;
  NSObject *v144;
  NSObject *v145;
  unint64_t v146;
  unsigned __int32 *v147;
  unsigned __int32 v148;
  uint64_t v149;
  uint64_t *v150;
  _QWORD *v151;
  uint64_t v152;
  void *v153;
  _anonymous_namespace_ *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  __n128 *v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  __n128 *v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t *v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  const char *v174;
  re::TimelineAsset *v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t *v179;
  _anonymous_namespace_ *v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  __int16 v184;
  re::TimelineAssetData *v185;
  unint64_t v186;
  unsigned int *v187;
  __int128 *v188;
  _OWORD *v189;
  __int128 v190;
  __int128 v191;
  NSObject *v192;
  uint64_t v193;
  char *v194;
  NSObject *v195;
  unint64_t v196;
  _QWORD *v197;
  uint64_t *v198;
  _anonymous_namespace_ *v199;
  char *v200;
  uint64_t v201;
  re **TimelineAsset;
  uint64_t *v203;
  unint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  double v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  _anonymous_namespace_ *v218;
  uint64_t *v219;
  uint64_t v220;
  _QWORD *v221;
  unsigned __int16 *v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  unint64_t v237;
  uint64_t *v238;
  float *v239;
  _QWORD *v240;
  re::TimelineAssetData *v241;
  re **v242;
  re *v243;
  __n128 v244;
  uint64_t v245;
  unint64_t v246;
  _anonymous_namespace_ *v247;
  const char *v248;
  re::TimelineAsset *v249;
  uint64_t *v250;
  uint64_t v251;
  _anonymous_namespace_ *v252;
  re::AssetPath *v253;
  re::DynamicString *v254;
  uint64_t v255;
  unint64_t *v256;
  double v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  re *v264;
  uint64_t *v265;
  uint64_t *v266;
  _anonymous_namespace_ *v267;
  re::TimelineAsset *v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  float v275;
  float v276;
  float v277;
  float v278;
  float32x4_t v279;
  __n128 v280;
  float v281;
  float v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float32x4_t v288;
  float v289;
  float v290;
  float v291;
  float v292;
  float32x4_t v293;
  float32x4_t v294;
  uint64_t v295;
  unint64_t *v296;
  uint64_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  uint64_t v301;
  re *MeshAssetDataFromDescriptor;
  _anonymous_namespace_ *v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  uint64_t v308;
  __int16 v309;
  int *v310;
  uint64_t v311;
  int v312;
  NSObject *v313;
  size_t v314;
  uint64_t v315;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  const StringID *v320;
  const StringID *v321;
  unint64_t v322;
  _anonymous_namespace_ *v323;
  const char *v324;
  unint64_t v325;
  uint64_t v326;
  re::AssetHandle *v327;
  float v328;
  uint64_t *v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  _QWORD *v334;
  unint64_t v335;
  unint64_t v336;
  uint64_t v337;
  uint64_t v338;
  unint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  _anonymous_namespace_ *v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  _OWORD *v349;
  _OWORD *v350;
  __int128 v351;
  uint64_t v352;
  unint64_t *v353;
  uint64_t v354;
  const char *v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  _DWORD *v364;
  uint64_t v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  _QWORD *v369;
  unint64_t v370;
  re::VertexCacheAsset *v371;
  uint64_t v372;
  _anonymous_namespace_ *v373;
  uint64_t v374;
  uint64_t v375;
  void *v376;
  uint64_t *v377;
  uint64_t v378;
  re::AssetPath *v379;
  re *v380;
  uint64_t *v381;
  uint64_t v382;
  _anonymous_namespace_ *v383;
  const char *v384;
  uint64_t v385;
  void *v386;
  uint64_t v387;
  unint64_t v388;
  float v389;
  int v390;
  re::TimelineAssetData *v391;
  _anonymous_namespace_ *v392;
  re **v393;
  uint64_t *v394;
  uint64_t v395;
  unint64_t v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unsigned int *v406;
  uint64_t v407;
  unsigned int v408;
  uint64_t v409;
  int v410;
  uint64_t v411;
  uint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  __n128 *v416;
  uint64_t v417;
  unint64_t v418;
  unint64_t v419;
  unint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  const char *v424;
  uint64_t *v425;
  uint64_t v426;
  re::AssetPath *v427;
  NSObject *v428;
  re::DynamicString *v429;
  unint64_t v430;
  unint64_t v431;
  unint64_t v432;
  uint64_t v433;
  uint64_t *v434;
  void *v435;
  uint64_t v436;
  id *v437;
  uint64_t v438;
  uint64_t *v439;
  uint64_t v440;
  re::AssetPath *v441;
  _anonymous_namespace_ *v442;
  unint64_t v443;
  re::AssetPath *v444;
  double v445;
  double v446;
  double v447;
  uint64_t *v448;
  uint64_t v449;
  const char *v450;
  uint64_t *v451;
  unint64_t v452;
  double *v453;
  float32_t v454;
  float v455;
  size_t v456;
  float32_t v457;
  float v458;
  size_t v459;
  unint64_t v460;
  float32_t v461;
  float v462;
  size_t v463;
  _anonymous_namespace_ *v464;
  const char *v465;
  re *v466;
  uint64_t *v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t *v470;
  unint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  _QWORD *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  _QWORD *v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  _QWORD *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t *v492;
  unint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  re::StringID *v497;
  uint64_t v498;
  unint64_t *v499;
  unint64_t *v500;
  uint64_t v501;
  uint64_t v502;
  char *v503;
  uint64_t *v504;
  uint64_t v505;
  re::AssetPath *v506;
  uint64_t *v507;
  uint64_t *v508;
  uint64_t v509;
  unint64_t v510;
  unint64_t v511;
  unint64_t v512;
  _anonymous_namespace_ *v513;
  const char *v514;
  size_t v515;
  uint64_t *v516;
  uint64_t v517;
  uint64_t v518;
  _anonymous_namespace_ *v519;
  re::DynamicString *v520;
  re::AssetPath *v521;
  _anonymous_namespace_ *v522;
  re::DynamicString *v523;
  re::AssetPath *v524;
  re *v525;
  uint64_t *v526;
  uint64_t v527;
  unint64_t v528;
  unint64_t v529;
  unint64_t v530;
  _anonymous_namespace_ *v531;
  const char *v532;
  uint64_t *v533;
  uint64_t v534;
  _anonymous_namespace_ *v535;
  re::DynamicString *v536;
  re::AssetPath *v537;
  uint64_t v538;
  _anonymous_namespace_ *v539;
  re::DynamicString *v540;
  re::AssetPath *v541;
  __int32 v542;
  uint64_t v543;
  re *v544;
  const char *v545;
  uint64_t *v546;
  uint64_t *v547;
  uint64_t v548;
  unint64_t v549;
  uint64_t v550;
  unint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  unint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  _anonymous_namespace_ *v559;
  const char *v560;
  size_t v561;
  uint64_t *v562;
  uint64_t v563;
  _anonymous_namespace_ *v564;
  re::DynamicString *v565;
  re::AssetPath *v566;
  unint64_t v567;
  size_t v568;
  _QWORD *v569;
  unint64_t *v570;
  _QWORD *v571;
  __int128 v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  unint64_t v580;
  unint64_t v581;
  __int128 v582;
  uint64_t v583;
  __n128 v584;
  unint64_t v585;
  unint64_t v586;
  unint64_t v587;
  unsigned __int8 v588;
  unint64_t v589;
  unint64_t v590;
  _QWORD *v591;
  _anonymous_namespace_ *v592;
  re::AssetPath *v593;
  re::AnimationLibraryAsset *v594;
  re::DynamicString *v595;
  _anonymous_namespace_ *v596;
  __int8 *v597;
  uint64_t *v598;
  uint64_t v599;
  re::AssetPath *v600;
  unint64_t *v601;
  _anonymous_namespace_ *v602;
  _anonymous_namespace_ *v603;
  _anonymous_namespace_ *v604;
  uint64_t v605;
  uint64_t v606;
  double v607;
  uint64_t v608;
  int32x2_t *v609;
  const char *v610;
  uint64_t v611;
  uint64_t v612;
  re::ecs2::AudioPlayerComponent **v613;
  uint64_t v614;
  re::ecs2::AudioPlayerComponent *v615;
  uint64_t v616;
  const re::AssetHandle *v617;
  uint64_t v618;
  int v619;
  unint64_t v620;
  uint64_t v621;
  uint64_t *v622;
  unint64_t v623;
  int v624;
  uint64_t *v625;
  unint64_t v626;
  uint64_t v627;
  uint64_t *v628;
  int v629;
  char *v630;
  uint64_t *v631;
  unint64_t v632;
  uint64_t v633;
  char *v634;
  uint64_t *v635;
  __n128 *v636;
  uint64_t v637;
  char *v638;
  uint64_t *v639;
  double v640;
  unint64_t v641;
  unint64_t v642;
  _QWORD *v643;
  unint64_t v644;
  unint64_t v645;
  uint64_t v646;
  uint64_t *v647;
  uint64_t v648;
  int v649;
  uint64_t *v650;
  uint64_t result;
  char *v652;
  uint64_t v653;
  int v654;
  uint64_t v655;
  unint64_t v656;
  uint64_t v657;
  unint64_t v659;
  uint64_t v662;
  uint64_t v663;
  unint64_t *v664;
  unint64_t v665;
  unint64_t v666;
  uint64_t v667;
  uint64_t v668;
  _anonymous_namespace_ *v669;
  __n128 *v670;
  unint64_t *v671;
  re::AssetHandle *v672;
  re::AssetHandle *v673;
  uint64_t v674;
  unint64_t v676;
  _QWORD *v677;
  size_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  char v682;
  BOOL v683;
  uint64_t v684;
  _anonymous_namespace_ *v685;
  unint64_t v686;
  re::DynamicString *v687[2];
  int v688;
  re::AssetHandle *v689[2];
  _QWORD *v690;
  float64x2_t v691;
  float64x2_t v692;
  float64x2_t v693;
  float32x4_t v694;
  _QWORD *v695;
  int32x4_t v696;
  unint64_t v697;
  float32x4_t v698;
  unsigned int *v699;
  re::AssetHandle *v700;
  re::AssetHandle *v701;
  char v702;
  float32x4_t v704;
  unint64_t v705;
  float32x4_t v706;
  uint64_t *v707;
  float32x4_t v708;
  __n128 *v709;
  float32x4_t v710;
  _BYTE v711[24];
  _BYTE v712[24];
  StringID v713;
  char *v714;
  int v715;
  uint64_t v716;
  uint64_t v717[3];
  char v718[8];
  uint64_t v719;
  char v720;
  _QWORD v721[2];
  int v722;
  uint64_t v723;
  unint64_t v724;
  int v725;
  uint64_t v726;
  uint64_t *v727;
  unint64_t v728;
  int v729;
  uint64_t v730;
  int64_t v731;
  int v732;
  uint64_t v733;
  uint64_t *v734;
  unint64_t v735;
  int v736;
  uint64_t v737;
  int64_t v738;
  unsigned int v739;
  uint64_t v740;
  uint64_t *v741;
  unint64_t v742;
  int v743;
  uint64_t v744;
  __n128 *v745;
  uint64_t v746;
  uint64_t v747;
  __n128 *v748;
  unsigned int v749;
  uint64_t v750;
  uint64_t *v751;
  __n128 *v752;
  int v753;
  const char *v754;
  size_t v755;
  uint64_t v756;
  uint64_t v757;
  void *v758;
  char v759;
  _QWORD v760[2];
  uint64_t v761;
  int v762;
  _QWORD v763[4];
  int v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  unint64_t v773;
  int v774;
  uint64_t v775;
  uint64_t *v776;
  unint64_t v777;
  int v778;
  _QWORD v779[2];
  unint64_t v780;
  int v781;
  _BYTE v782[44];
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  int v786;
  uint64_t v787;
  uint64_t *v788;
  unint64_t v789;
  int v790;
  uint64_t v791;
  void *v792;
  char *v793;
  StringID v794;
  StringID v795;
  uint64_t v796;
  __n128 v797;
  float32x4_t v798;
  float32x4_t v799;
  float32x4_t v800;
  float32x4_t v801;
  __int128 v802;
  int v803;
  __int128 v804;
  __int128 v805;
  int v806;
  uint64_t v807;
  _BYTE v808[28];
  __int16 v809;
  _BYTE v810[10];
  uint64_t v811[7];
  _BYTE v812[12];
  _BYTE v813[28];
  __int128 v814;
  __int128 v815;
  _BYTE v816[28];
  __int16 v817;
  _BYTE v818[18];
  __int128 v819;
  int v820;
  __int128 v821;
  __int128 v822;
  int v823;
  _BYTE v824[44];
  uint64_t v825;
  __int128 v826;
  __int128 v827;
  __int128 v828;
  __int128 v829;
  _BYTE v830[40];
  int v831;
  __int128 v832;
  __int128 v833;
  int v834;
  __int128 v835;
  __int128 v836;
  int v837;
  __int128 v838;
  __int128 v839;
  int v840;
  __int128 v841;
  __int128 v842;
  int v843;
  __int128 v844;
  __int128 v845;
  int v846;
  unint64_t *v847;
  __n128 buf[5];
  uint64_t v849;
  float32x2_t v850;
  _QWORD v851[4];
  _BYTE v852[40];
  _BYTE v853[28];
  __int16 v854;
  unint64_t v855;
  uint64_t v856;

  v12 = a4;
  v856 = *MEMORY[0x24BDAC8D0];
  v13 = *(__n128 **)(a7 + 8);
  if ((unint64_t)v13 <= a4)
    goto LABEL_861;
  *(_BYTE *)(*(_QWORD *)(a7 + 16) + a4) = 1;
  v785 = 0;
  v784 = 0;
  v786 = 1;
  v789 = 0;
  v787 = 0;
  v788 = 0;
  v790 = 0;
  v773 = 0;
  v772 = 0;
  v774 = 1;
  v777 = 0;
  v775 = 0;
  v776 = 0;
  v778 = 0;
  v780 = 0;
  v779[0] = 0;
  v779[1] = 0;
  v781 = 0;
  memset(v782, 0, sizeof(v782));
  v783 = 0x7FFFFFFFLL;
  v18 = (_anonymous_namespace_ *)re::DynamicArray<re::DynamicString>::setCapacity(v779, 0x40uLL);
  ++v781;
  v20 = *(_QWORD *)(a2 + 720);
  v771 = 0;
  v769 = 0;
  v770 = 0;
  v22 = *(_QWORD *)(a2 + 720);
  *(_QWORD *)&v826 = -1;
  v768 = 0;
  v766 = 0;
  v767 = 0;
  LOBYTE(v826) = 0;
  *((_QWORD *)&v826 + 1) = *(_QWORD *)re::BucketArray<unsigned long,32ul>::operator[](a2 + 680, v12);
  v827 = xmmword_2260E5F10;
  v828 = xmmword_2260E5F20;
  v829 = xmmword_2260E5F40;
  *(_OWORD *)v830 = xmmword_2260E5D70;
  re::BucketArray<re::createEntityFromImportContext(re::USDImportContext &,re::SceneImportOperation &,unsigned long,re::BucketArray<re::TimelineGroupBuilder *,8ul> &,re::AnimationSceneEntityData &,re::FixedArray<BOOL> &,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> *,BOOL)::TransformedMeshItem,8ul>::add((uint64_t)&v784, (uint64_t)&v826);
  v757 = 0;
  v756 = 0;
  v758 = &str_110;
  v759 = 1;
  v761 = 0;
  v760[0] = 0;
  v760[1] = 0;
  v765 = 0;
  memset(v763, 0, sizeof(v763));
  v762 = 0;
  v764 = 0;
  v657 = a2 + 680;
  v665 = v12;
  v23 = (unint64_t *)re::BucketArray<unsigned long,32ul>::operator[](a2 + 680, v12);
  v680 = a2;
  v679 = a2 + 624;
  v24 = re::BucketArray<re::USDImportContext::NodeStackItem,32ul>::operator[](a2 + 624, *v23);
  re::StringID::operator=((unint64_t *)&v757, (uint64_t *)(v24 + 8));
  v25 = re::ecs2::EntityAssetData::addComponent<re::ecs2::TransformComponent>(&v756);
  v26 = *(_OWORD *)(v24 + 464);
  v27 = *(_OWORD *)(v24 + 432);
  *((_OWORD *)v25 + 3) = *(_OWORD *)(v24 + 448);
  *((_OWORD *)v25 + 4) = v26;
  *((_OWORD *)v25 + 2) = v27;
  v28 = *(const char **)(v24 + 32);
  v29 = strlen(v28);
  v754 = v28;
  v755 = v29;
  v30 = (unint64_t *)a6;
  if ((a9 & 1) == 0)
  {
    *(_QWORD *)&v826 = 0;
    v828 = 0u;
    v829 = 0u;
    *((_QWORD *)&v826 + 1) = &str_110;
    v827 = 0uLL;
    *(_QWORD *)&v828 = 0;
    DWORD2(v828) = 0;
    memset(v830, 0, 24);
    re::DynamicArray<re::AnimationSceneEntityData>::add((_QWORD *)(a6 + 16), (uint64_t *)&v826);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v830);
    re::DynamicArray<re::AnimationSceneEntityData>::deinit((uint64_t)&v827);
    re::StringID::destroyString((re::StringID *)&v826);
    v30 = (unint64_t *)(*(_QWORD *)(a6 + 48) + 88 * *(_QWORD *)(a6 + 32) - 88);
  }
  v656 = a6;
  i = (unint64_t)v812;
  v10 = (unint64_t)buf;
  v11 = (unint64_t)&v797;
  v664 = v30;
  v32 = re::StringID::operator=(v30, &v757);
  v748 = 0;
  v747 = 0;
  v33 = 1;
  v749 = 1;
  v752 = 0;
  v750 = 0;
  v751 = 0;
  v753 = 0;
  v826 = 0uLL;
  *(_QWORD *)&v827 = 0;
  v847 = 0;
  v828 = 0u;
  v829 = 0u;
  DWORD2(v827) = 0;
  *(_DWORD *)v830 = 0;
  memset(&v830[8], 0, 32);
  v832 = 0u;
  v833 = 0u;
  v831 = 0;
  v834 = 0;
  v835 = 0u;
  v836 = 0u;
  v838 = 0u;
  v839 = 0u;
  v837 = 0;
  v840 = 0;
  v843 = 0;
  v842 = 0u;
  v841 = 0u;
  v846 = 0;
  v844 = 0u;
  v845 = 0u;
  v12 = v680;
  v34 = *(_QWORD *)(v680 + 200);
  *(_DWORD *)v816 = -1;
  v746 = 0;
  v744 = 0;
  v745 = 0;
  j = (unint64_t)v816;
  memset(v816, 0, sizeof(v816));
  *(_OWORD *)&v818[2] = 0u;
  v819 = 0u;
  v820 = 0;
  v821 = 0u;
  v822 = 0u;
  v823 = 0;
  memset(v824, 0, sizeof(v824));
  v825 = 0x7FFFFFFFLL;
  v738 = 0;
  v737 = 0;
  v739 = 1;
  v742 = 0;
  v740 = 0;
  v741 = 0;
  v743 = 0;
  v731 = 0;
  v730 = 0;
  v732 = 1;
  v735 = 0;
  v733 = 0;
  v734 = 0;
  v736 = 0;
  v724 = 0;
  v723 = 0;
  v725 = 1;
  v728 = 0;
  v726 = 0;
  v727 = 0;
  v729 = 0;
  v35 = re::TimelineGroupBuilder::TimelineGroupBuilder((uint64_t)v718, *(_QWORD *)(a3 + 104), (uint64_t)v28, v29);
  v38 = v789;
  if (v789)
  {
    v685 = 0;
    v663 = v680 + 160;
    v12 = v680 + 56;
    j = 1;
    v684 = v680 + 56;
    while (1)
    {
      v39 = v38 - 1;
      v40 = (float32x4_t *)re::BucketArray<re::USDImportContextPhysicsColliderData,8ul>::operator[]((uint64_t)&v784, v38 - 1);
      v33 = v40->u8[0];
      i = v40->u64[1];
      v708 = v40[2];
      v710 = v40[1];
      v704 = v40[4];
      v706 = v40[3];
      re::BucketArray<re::USDImportContextPhysicsColliderData,8ul>::operator[]((uint64_t)&v784, v39);
      v789 = v39;
      ++v790;
      v35 = re::BucketArray<re::USDImportContext::NodeStackItem,32ul>::operator[](v679, i);
      a6 = v35;
      v688 = v33;
      if (!(_DWORD)v33)
      {
        v41 = *(_QWORD *)(v35 + 160);
        _ZF = v41 == -1 || v41 == v665;
        if (!_ZF)
        {
          *(_QWORD *)re::BucketArray<re::TimelineGroupBuilder *,8ul>::addUninitialized(a5) = v718;
          LOBYTE(v654) = 0;
          re::createEntityFromImportContext(&v797, v680, a3, *(_QWORD *)(a6 + 160), a5, v664, a7, a8, v654);
          v35 = re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a5, *(_QWORD *)(a5 + 40) - 1);
          --*(_QWORD *)(a5 + 40);
          ++*(_DWORD *)(a5 + 48);
          if (v797.n128_u8[0])
          {
            v35 = re::DynamicArray<re::ecs2::EntityAssetData>::add((uint64_t)&v763[1], (uint64_t)&v797.n128_i64[1]);
            if (v797.n128_u8[0])
              re::ecs2::EntityAssetData::~EntityAssetData((re::ecs2::EntityAssetData *)&v797.n128_i8[8]);
          }
          goto LABEL_357;
        }
      }
      v43 = *(_QWORD *)(v35 + 624);
      if ((v43 & 1) != 0 ? v43 >> 1 : v43 >> 1)
        break;
      v45 = *(_QWORD *)(v35 + 656);
      if ((v45 & 1) != 0 ? v45 >> 1 : v45 >> 1)
        break;
LABEL_128:
      if (*(unsigned __int8 *)(a6 + 240) != 255)
      v113 = *(_QWORD *)(a6 + 344);
      v114 = *(_QWORD *)(a6 + 304);
      if (v113)
      {
        if (!v114)
          goto LABEL_323;
        v115 = 0;
        v116 = v114 - 1;
        do
        {
          if (v113 == v115)
          {
            *(_QWORD *)v808 = 0;
            v800 = 0u;
            v801 = 0u;
            v798 = 0u;
            v799 = 0u;
            v797 = 0u;
            v325 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            buf[0].n128_u32[0] = 136315906;
            *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"operator[]";
            buf[0].n128_u16[6] = 1024;
            *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 789;
            buf[1].n128_u16[1] = 2048;
            *(unint64_t *)((char *)buf[1].n128_u64 + 4) = v113;
            buf[1].n128_u16[6] = 2048;
            *(unint64_t *)((char *)&buf[1].n128_u64[1] + 6) = v113;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_538;
          }
          v117 = *(_QWORD *)(*(_QWORD *)(a6 + 360) + 8 * v115);
          _ZF = v117 == -1;
          v118 = v117 == -1;
        }
        while (_ZF && v116 != v115++);
        v114 = 1;
      }
      else
      {
        v118 = 1;
      }
      if (v688)
        v120 = 1;
      else
        v120 = v118;
      if (!v114 || !v120)
      {
LABEL_323:
        goto LABEL_324;
      }
      v11 = *(_QWORD *)(a6 + 416);
      *(_QWORD *)&v810[2] = 0;
      memset(v808, 0, sizeof(v808));
      v797 = 0u;
      v798 = 0u;
      v121 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v797, 0);
      v799 = 0uLL;
      v800.i32[2] = 0;
      v800.i64[0] = 0;
      v807 = 0;
      v801 = 0u;
      v802 = 0u;
      v803 = 0;
      v804 = 0u;
      v805 = 0u;
      v806 = 0;
      v122 = *(const char **)(a6 + 32);
      re::DynamicString::operator=((re::DynamicString *)&v797, (re::DynamicString *)buf);
      if (buf[0].n128_u64[0] && (buf[0].n128_u8[8] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)buf[0].n128_u64[0] + 40))();
      v123 = *(_QWORD *)(a6 + 304);
      v124 = v123;
      j = (unint64_t)&v799;
      v697 = v123;
      if (v799.i64[1] < (unint64_t)v123)
      {
        re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(&v799, v123);
        v124 = v123;
      }
      if (*(_QWORD *)&v808[8] < v124)
      {
        v124 = v123;
      }
      v125 = (unint64_t *)(a6 + 416);
      if ((_DWORD)v123)
      {
        v33 = 0;
        v681 = (v123 - 1);
        v126 = (_DWORD)v123 == 1;
        if ((_DWORD)v123 == 1)
          v127 = INFINITY;
        else
          v127 = (float)(100 * (unint64_t)(v123 + 1) - 500);
        if (v123 > 5)
          v126 = 1;
        v683 = v126;
        v686 = v11;
        do
        {
          v128 = *(_QWORD *)(a6 + 304);
          if (v128 <= v33)
            goto LABEL_539;
          v129 = *(_QWORD *)(a6 + 320);
          v130 = *(_QWORD *)(v129 + 8 * v33);
          if (*(_QWORD *)(v130 + 48))
          {
            v131 = v800.i64[0];
            if (v800.i64[0] >= (unint64_t)v799.i64[1])
            {
              re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::growCapacity((_QWORD *)j, v800.i64[0] + 1);
              v131 = v800.i64[0];
              v130 = *(_QWORD *)(v129 + 8 * v33);
            }
            *(_QWORD *)(v801.i64[0] + 8 * v131) = v130;
            *(_QWORD *)(v129 + 8 * v33) = 0;
            v800.i64[0] = v131 + 1;
            ++v800.i32[2];
            if (v11 && v33)
            {
              v132 = v33 - 1;
              i = *v125;
              if (*v125 <= v33 - 1)
                goto LABEL_543;
              v133 = 1.0 - *(float *)(*(_QWORD *)(a6 + 424) + 4 * v132);
              if (v133 < 0.0)
                v133 = 0.0;
              buf[0].n128_f32[0] = v133 * v133;
              re::DynamicArray<float>::add((_anonymous_namespace_ *)((char *)&v804 + 8), (float *)buf);
              i = *(_QWORD *)(a6 + 416);
              if (i <= v132)
              {
LABEL_544:
                *(_QWORD *)v852 = 0;
                *(_OWORD *)(v10 + 48) = 0u;
                *(_OWORD *)(v10 + 64) = 0u;
                *(_OWORD *)(v10 + 16) = 0u;
                *(_OWORD *)(v10 + 32) = 0u;
                *(_OWORD *)v10 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v812 = 136315906;
                *(_QWORD *)&v812[4] = "operator[]";
                *(_WORD *)v813 = 1024;
                *(_DWORD *)&v813[2] = 468;
                *(_WORD *)&v813[6] = 2048;
                *(_QWORD *)&v813[8] = v132;
                *(_WORD *)&v813[16] = 2048;
                *(_QWORD *)&v813[18] = i;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_545:
                v791 = 0;
                v416 = buf;
                memset(buf, 0, sizeof(buf));
                v415 = MEMORY[0x24BDACB70];
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v853 = 136315906;
                *(_QWORD *)&v853[4] = "operator[]";
                *(_WORD *)&v853[12] = 1024;
                *(_DWORD *)&v853[14] = 476;
                *(_WORD *)&v853[18] = 2048;
                *(_QWORD *)&v853[20] = v10;
                v854 = 2048;
                v855 = j;
                LODWORD(v655) = 38;
                _os_log_send_and_compose_impl();
                v303 = (_anonymous_namespace_ *)_os_crash_msg();
                __break(1u);
LABEL_546:
                *(_QWORD *)(i + 104) = v33;
                re::DynamicArray<re::MeshAssetData>::setCapacity(v416, v415);
                ++*(_DWORD *)(i + 128);
                goto LABEL_547;
              }
              v134 = v127;
              if (!v683)
                v134 = __const__ZN2re29computeDefaultLodMaxViewDepthEjj_kViewDepthTable[v681];
              buf[0].n128_f32[0] = v134 * *(float *)(*(_QWORD *)(a6 + 424) + 4 * v132);
              re::DynamicArray<float>::add((_anonymous_namespace_ *)&v801.u32[2], (float *)buf);
            }
            if (*(_QWORD *)(a6 + 344) > v33)
            {
              v135 = *(_QWORD *)(a6 + 360);
              v136 = *(_QWORD *)(v135 + 8 * v33);
              if (v136 != -1)
              {
                v137 = j;
                i = re::BucketArray<re::USDImportContextSkeletonData,4ul>::operator[](v12, *(_QWORD *)(v135 + 8 * v33));
                v138 = *(_QWORD *)(a3 + 104);
                v139 = *(const char **)(i + 8);
                v140 = (re::SkeletonAsset *)strlen(v139);
                v141 = re::SkeletonAsset::assetType(v140);
                v142 = re::ImportAssetTable::importedAsset(v138, (uint64_t)v139, (uint64_t)v140, (re **)v141);
                if (v142)
                {
                  buf[0].n128_u32[0] = 0;
                  buf[1] = 0uLL;
                  buf[0].n128_u64[1] = 0;
                  if ((*(_BYTE *)(v142 + 8) & 1) != 0)
                    v143 = *(re::AssetPath **)(v142 + 16);
                  else
                    v143 = (re::AssetPath *)(v142 + 9);
                  v12 = v680 + 56;
                  v10 = (unint64_t)buf;
                  v11 = v686;
                  v147 = (unsigned __int32 *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&v824[8], (_QWORD *)i);
                  if (v147)
                  {
                    v148 = *v147;
                    buf[0].n128_u32[0] = *v147;
                    j = (unint64_t)&v799;
                    i = (unint64_t)&buf[0].n128_u64[1];
                  }
                  else
                  {
                    v149 = re::BucketArray<re::USDImportContextSkeletonData,4ul>::operator[](v684, v136);
                    buf[0].n128_u32[0] = DWORD2(v822);
                    v150 = re::globalAllocators((re *)v149);
                    v151 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v150[2] + 32))(v150[2], 184, 8);
                    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v151, 0);
                    *v151 = &off_24ED43238;
                    re::StringID::StringID((re::StringID *)(v151 + 3), (const StringID *)(v149 + 16));
                    re::FixedArray<re::StringID>::FixedArray(v151 + 5, v149 + 32);
                    re::FixedArray<unsigned int>::FixedArray(v151 + 8, v149 + 56);
                    re::FixedArray<re::GenericSRT<float>>::FixedArray(v151 + 11, v149 + 80);
                    re::FixedArray<re::Matrix4x4<float>>::FixedArray(v151 + 14, v149 + 104);
                    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::HashTable((uint64_t)(v151 + 17), v149 + 128);
                    *(_QWORD *)v853 = v151;
                    re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add((_QWORD *)&v821 + 1, v853);
                    if (*(_QWORD *)v853)

                    re::HashTable<re::StringID,unsigned int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add<unsigned int &>((uint64_t)&v824[8], (StringID *)i, buf);
                    re::StringID::StringID((re::StringID *)&v713, (const StringID *)(v149 + 16));
                    v152 = *(_QWORD *)(v149 + 40);
                    *(_QWORD *)v853 = *(_QWORD *)(v149 + 48);
                    *(_QWORD *)&v853[8] = v152;
                    v153 = *(void **)(v149 + 88);
                    v791 = *(_QWORD *)(v149 + 96);
                    v792 = v153;
                    i = (unint64_t)&buf[0].n128_u64[1];
                    re::AssetHandle::AssetHandle((re::AssetHandle *)v852, (const re::AssetHandle *)&buf[0].n128_i8[8]);
                    re::AssetHandle::~AssetHandle((re::AssetHandle *)v852);
                    re::StringID::destroyString((re::StringID *)&v713);
                    v148 = buf[0].n128_u32[0];
                    v12 = v680 + 56;
                    j = (unint64_t)&v799;
                    v11 = v686;
                  }
                  v812[0] = 1;
                  *(_DWORD *)&v812[8] = v148;
                  *(__n128 *)&v813[4] = *(__n128 *)((char *)buf + 8);
                  buf[1].n128_u64[0] = 0;
                  buf[0].n128_u64[1] = 0;
                  *(_QWORD *)&v813[20] = buf[1].n128_u64[1];
                  buf[1].n128_u64[1] = 0;
                  re::AssetHandle::~AssetHandle((re::AssetHandle *)&buf[0].n128_i8[8]);
                  v125 = (unint64_t *)(a6 + 416);
                  if (v812[0])
                  {
                    buf[0].n128_u64[0] = 0xFFFFFFFFLL;
                    buf[0].n128_u64[1] = -1;
                    buf[1].n128_u64[0] = -1;
                    *(__n128 *)((char *)&buf[1] + 8) = 0u;
                    *(__n128 *)((char *)&buf[2] + 8) = 0u;
                    *(__n128 *)((char *)&buf[3] + 8) = 0u;
                    if (*(_QWORD *)&v808[16] >= *(_QWORD *)&v808[8])
                    {
                      v155 = *(_QWORD *)&v808[16] + 1;
                      if (*(_QWORD *)&v808[8] < (unint64_t)(*(_QWORD *)&v808[16] + 1))
                      {
                        if (*(_QWORD *)v808)
                        {
                          v156 = 8;
                          if (*(_QWORD *)&v808[8])
                            v156 = 2 * *(_QWORD *)&v808[8];
                          if (v156 <= v155)
                            v157 = *(_QWORD *)&v808[16] + 1;
                          else
                            v157 = v156;
                        }
                        else
                        {
                          ++*(_DWORD *)&v808[24];
                        }
                      }
                    }
                    v11 = 72;
                    v158 = (__n128 *)(*(_QWORD *)&v810[2] + 72 * *(_QWORD *)&v808[16]);
                    v159 = buf[1].n128_u64[0];
                    *v158 = buf[0];
                    v158[1].n128_u64[0] = v159;
                    v158[1].n128_u64[1] = 0;
                    v158[2].n128_u64[0] = 0;
                    v158[2].n128_u64[1] = 0;
                    v158[2].n128_u64[0] = buf[2].n128_u64[0];
                    buf[2].n128_u64[0] = 0;
                    v160 = v158[1].n128_u64[1];
                    v158[1].n128_u64[1] = 0;
                    v158[1].n128_u64[1] = buf[1].n128_u64[1];
                    buf[1].n128_u64[1] = v160;
                    v161 = v158[2].n128_u64[1];
                    v158[2].n128_u64[1] = buf[2].n128_u64[1];
                    buf[2].n128_u64[1] = v161;
                    v158[3].n128_u64[0] = 0;
                    v158[3].n128_u64[1] = 0;
                    v158[4].n128_u64[0] = 0;
                    v158[3].n128_u64[1] = buf[3].n128_u64[1];
                    buf[3].n128_u64[1] = 0;
                    v162 = v158[3].n128_u64[0];
                    v158[3].n128_u64[0] = 0;
                    v158[3].n128_u64[0] = buf[3].n128_u64[0];
                    buf[3].n128_u64[0] = v162;
                    v163 = v158[4].n128_u64[0];
                    v158[4].n128_u64[0] = buf[4].n128_u64[0];
                    buf[4].n128_u64[0] = v163;
                    ++*(_QWORD *)&v808[16];
                    ++*(_DWORD *)&v808[24];
                    re::AssetHandle::~AssetHandle((re::AssetHandle *)&buf[3]);
                    re::AssetHandle::~AssetHandle((re::AssetHandle *)&buf[1].n128_i8[8]);
                    v164 = *(_QWORD *)&v810[2];
                    v10 = *(_QWORD *)&v808[16] - 1;
                    j = *(_QWORD *)&v810[2] + 72 * (*(_QWORD *)&v808[16] - 1);
                    *(_QWORD *)(j + 8) = v136;
                    i = j + 8;
                    v165 = re::AssetHandle::operator=((uint64_t *)(j + 24), (uint64_t *)&v813[4]);
                    v166 = *(__n128 **)(a6 + 384);
                    if (v166)
                    {
                      v666 = v10;
                      v667 = v164;
                      if ((unint64_t)v166 <= v33)
                        goto LABEL_849;
                      v167 = *(_QWORD *)(*(_QWORD *)(a6 + 400) + 8 * v33);
                      v168 = v667 + 72 * v10;
                      *(_QWORD *)(v168 + 16) = v167;
                      v169 = (unint64_t *)(v168 + 16);
                      v170 = *(unsigned int *)&v812[8];
                      *(_DWORD *)j = *(_DWORD *)&v812[8];
                      v10 = (unint64_t)buf;
                      if (v167 == -1)
                      {
                        v125 = (unint64_t *)(a6 + 416);
                        j = (unint64_t)&v799;
                        v11 = v686;
                      }
                      else
                      {
                        if (!v685)
                        {
                          v171 = re::globalAllocators((re *)v165);
                          v172 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v171[2] + 32))(v171[2], 224, 8);
                          *(_OWORD *)(v172 + 176) = 0u;
                          *(_OWORD *)(v172 + 192) = 0u;
                          *(_OWORD *)v172 = 0u;
                          *(_OWORD *)(v172 + 16) = 0u;
                          *(_OWORD *)(v172 + 32) = 0u;
                          *(_OWORD *)(v172 + 48) = 0u;
                          *(_OWORD *)(v172 + 64) = 0u;
                          *(_OWORD *)(v172 + 80) = 0u;
                          *(_OWORD *)(v172 + 96) = 0u;
                          *(_OWORD *)(v172 + 112) = 0u;
                          *(_OWORD *)(v172 + 128) = 0u;
                          *(_OWORD *)(v172 + 144) = 0u;
                          *(_OWORD *)(v172 + 160) = 0u;
                          *(_DWORD *)(v172 + 196) = 0x7FFFFFFF;
                          *(_QWORD *)(v172 + 208) = 0;
                          *(_QWORD *)(v172 + 216) = &str_110;
                          v685 = (_anonymous_namespace_ *)v172;
                          v167 = *v169;
                          v170 = *(unsigned int *)&v812[8];
                        }
                        j = *(_QWORD *)i;
                        re::AssetHandle::AssetHandle((re::AssetHandle *)v717, (const re::AssetHandle *)&v813[4]);
                        v173 = *(_QWORD *)(re::BucketArray<re::USDImportContextSkeletalAnimationData,8ul>::operator[](v663, v167)+ 8);
                        v174 = "_additive";
                        if (!*(_BYTE *)(*(_QWORD *)(v680 + 40) + 160))
                          v174 = "";
                        v662 = v170;
                        v175 = (re::TimelineAsset *)re::DynamicString::format((re::DynamicString *)"%s_skeleton[%u]%s", (re::DynamicString *)&v713, v173, v170, v174);
                        v176 = *(_QWORD *)(a3 + 104);
                        if (((uint64_t)v713.var1 & 1) != 0)
                          v177 = v714;
                        else
                          v177 = (char *)&v713.var1 + 1;
                        if (((uint64_t)v713.var1 & 1) != 0)
                          v178 = (unint64_t)v713.var1 >> 1;
                        else
                          v178 = LOBYTE(v713.var1) >> 1;
                        v179 = re::TimelineAsset::assetType(v175);
                        v180 = (_anonymous_namespace_ *)re::ImportAssetTable::importedAsset(v176, (uint64_t)v177, v178, (re **)v179);
                        i = (unint64_t)v180;
                        if (!v180)
                        {
                          v181 = re::globalAllocators(0);
                          v182 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v181[2] + 32))(v181[2], 200, 8);
                          v183 = re::BucketArray<re::USDImportContextSkeletalAnimationData,8ul>::operator[](v663, v167);
                          re::SampledAnimationAssetData<re::SkeletalPoseAssetData>::SampledAnimationAssetData(v182, v183 + 32);
                          *(_QWORD *)v182 = off_24ED33AA8;
                          re::AssetHandle::AssetHandle((re::AssetHandle *)(v182 + 128), (const re::AssetHandle *)(v183 + 160));
                          re::DynamicArray<re::StringID>::DynamicArray(v182 + 152, (uint64_t *)(v183 + 184));
                          v184 = *(_WORD *)(v183 + 224);
                          *(_BYTE *)(v182 + 194) = *(_BYTE *)(v183 + 226);
                          *(_WORD *)(v182 + 192) = v184;
                          re::DynamicString::format((re::DynamicString *)"SkeletalPose.SkeletalPoses[%u]", (re::DynamicString *)buf, v662);
                          re::DynamicString::operator=((re::DynamicString *)(v182 + 40), (re::DynamicString *)buf);
                          if (buf[0].n128_u64[0] && (buf[0].n128_u8[8] & 1) != 0)
                            (*(void (**)(void))(*(_QWORD *)buf[0].n128_u64[0] + 40))();
                          re::AssetHandle::operator=((uint64_t *)(v182 + 128), v717);
                          if (*(_BYTE *)(*(_QWORD *)(v680 + 40) + 160))
                          {
                            v677 = (_QWORD *)re::BucketArray<re::USDImportContextSkeletonData,4ul>::operator[](v684, j);
                            memset(v853, 0, 24);
                            v186 = *(_QWORD *)(v182 + 168);
                            v670 = *(__n128 **)(v182 + 168);
                            if (v670)
                            {
                              v10 = 0;
                              v166 = 0;
                              v669 = (_anonymous_namespace_ *)(v677 + 16);
                              v12 = 8;
                              v659 = v167;
                              while (1)
                              {
                                v11 = *(_QWORD *)(v182 + 168);
                                if (v11 <= (unint64_t)v166)
                                  break;
                                j = *(_QWORD *)(v182 + 184);
                                v187 = (unsigned int *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v669, (_QWORD *)(j + v12 - 8));
                                if (v187)
                                {
                                  v11 = *v187;
                                  j = v677[11];
                                  if (j <= v11)
                                    goto LABEL_844;
                                  j = *(_QWORD *)&v853[8];
                                  if (*(_QWORD *)&v853[8] <= (unint64_t)v166)
                                    goto LABEL_845;
                                  v188 = (__int128 *)(v677[12] + 48 * v11);
                                  v189 = (_OWORD *)(*(_QWORD *)&v853[16] + v10);
                                  v190 = v188[2];
                                  v191 = *v188;
                                  v189[1] = v188[1];
                                  v189[2] = v190;
                                  *v189 = v191;
                                }
                                else
                                {
                                  v192 = *re::pipelineLogObjects(0);
                                  if (os_log_type_enabled(v192, OS_LOG_TYPE_DEFAULT))
                                  {
                                    v193 = v182;
                                    if (((uint64_t)v713.var1 & 1) != 0)
                                      v194 = v714;
                                    else
                                      v194 = (char *)&v713.var1 + 1;
                                    v195 = v192;
                                    v196 = *(_QWORD *)(j + v12);
                                    buf[0].n128_u32[0] = 136315394;
                                    *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)v194;
                                    v182 = v193;
                                    v167 = v659;
                                    buf[0].n128_u16[6] = 2080;
                                    *(unint64_t *)((char *)&buf[0].n128_u64[1] + 6) = v196;
                                    _os_log_impl(&dword_224FE9000, v195, OS_LOG_TYPE_DEFAULT, "[%s] Unknown animated joint: %s\n", (uint8_t *)buf, 0x16u);

                                  }
                                  v11 = *(_QWORD *)&v853[8];
                                  if (*(_QWORD *)&v853[8] <= (unint64_t)v166)
                                    goto LABEL_848;
                                  v197 = (_QWORD *)(*(_QWORD *)&v853[16] + v10);
                                  v197[1] = 1065353216;
                                  v197[2] = 0;
                                  *v197 = 0x3F8000003F800000;
                                  v197[3] = 0x3F80000000000000;
                                  v197[4] = 0;
                                  v197[5] = 0;
                                }
                                v166 = (__n128 *)((char *)v166 + 1);
                                v12 += 16;
                                v10 += 48;
                                if (v670 == v166)
                                  goto LABEL_230;
                              }
LABEL_843:
                              v791 = 0;
                              memset(buf, 0, sizeof(buf));
                              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                              *(_DWORD *)v852 = 136315906;
                              *(_QWORD *)&v852[4] = "operator[]";
                              *(_WORD *)&v852[12] = 1024;
                              *(_DWORD *)&v852[14] = 789;
                              *(_WORD *)&v852[18] = 2048;
                              *(_QWORD *)&v852[20] = v166;
                              *(_WORD *)&v852[28] = 2048;
                              *(_QWORD *)&v852[30] = v11;
                              _os_log_send_and_compose_impl();
                              _os_crash_msg();
                              __break(1u);
LABEL_844:
                              v791 = 0;
                              v166 = buf;
                              memset(buf, 0, sizeof(buf));
                              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                              *(_DWORD *)v852 = 136315906;
                              *(_QWORD *)&v852[4] = "operator[]";
                              *(_WORD *)&v852[12] = 1024;
                              *(_DWORD *)&v852[14] = 476;
                              *(_WORD *)&v852[18] = 2048;
                              *(_QWORD *)&v852[20] = v11;
                              *(_WORD *)&v852[28] = 2048;
                              *(_QWORD *)&v852[30] = j;
                              _os_log_send_and_compose_impl();
                              _os_crash_msg();
                              __break(1u);
LABEL_845:
                              v791 = 0;
                              i = (unint64_t)buf;
                              memset(buf, 0, sizeof(buf));
                              v306 = MEMORY[0x24BDACB70];
                              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                              *(_DWORD *)v852 = 136315906;
                              *(_QWORD *)&v852[4] = "operator[]";
                              *(_WORD *)&v852[12] = 1024;
                              *(_DWORD *)&v852[14] = 468;
                              *(_WORD *)&v852[18] = 2048;
                              *(_QWORD *)&v852[20] = v166;
                              *(_WORD *)&v852[28] = 2048;
                              *(_QWORD *)&v852[30] = j;
                              _os_log_send_and_compose_impl();
                              _os_crash_msg();
                              __break(1u);
LABEL_846:
                              *(_QWORD *)v853 = 0;
                              *(_OWORD *)(v10 + 48) = 0u;
                              *(_OWORD *)(v10 + 64) = 0u;
                              *(_OWORD *)(v10 + 16) = 0u;
                              *(_OWORD *)(v10 + 32) = 0u;
                              *(_OWORD *)v10 = 0u;
                              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                              *(_DWORD *)v852 = 136315906;
                              *(_QWORD *)(v10 + 132) = "operator[]";
                              *(_WORD *)&v852[12] = 1024;
                              *(_DWORD *)(v10 + 142) = 789;
                              *(_WORD *)&v852[18] = 2048;
                              *(_QWORD *)(v10 + 148) = v306;
                              *(_WORD *)&v852[28] = 2048;
                              *(_QWORD *)(v10 + 158) = j;
                              _os_log_send_and_compose_impl();
                              _os_crash_msg();
                              __break(1u);
LABEL_847:
                              *(_QWORD *)v853 = 0;
                              v166 = buf;
                              memset(buf, 0, sizeof(buf));
                              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                              *(_DWORD *)v852 = 136315906;
                              *(_QWORD *)&v852[4] = "operator[]";
                              *(_WORD *)&v852[12] = 1024;
                              *(_DWORD *)&v852[14] = 797;
                              *(_WORD *)&v852[18] = 2048;
                              *(_QWORD *)&v852[20] = v12;
                              *(_WORD *)&v852[28] = 2048;
                              *(_QWORD *)&v852[30] = i;
                              _os_log_send_and_compose_impl();
                              _os_crash_msg();
                              __break(1u);
LABEL_848:
                              v791 = 0;
                              memset(buf, 0, sizeof(buf));
                              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                              *(_DWORD *)v852 = 136315906;
                              *(_QWORD *)&v852[4] = "operator[]";
                              *(_WORD *)&v852[12] = 1024;
                              *(_DWORD *)&v852[14] = 468;
                              *(_WORD *)&v852[18] = 2048;
                              *(_QWORD *)&v852[20] = v166;
                              *(_WORD *)&v852[28] = 2048;
                              *(_QWORD *)&v852[30] = v11;
                              _os_log_send_and_compose_impl();
                              _os_crash_msg();
                              __break(1u);
LABEL_849:
                              *(_QWORD *)&v713.var0 = 0;
                              i = (unint64_t)buf;
                              memset(buf, 0, sizeof(buf));
                              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                              *(_DWORD *)v852 = 136315906;
                              *(_QWORD *)&v852[4] = "operator[]";
                              *(_WORD *)&v852[12] = 1024;
                              *(_DWORD *)&v852[14] = 789;
                              *(_WORD *)&v852[18] = 2048;
                              *(_QWORD *)&v852[20] = v33;
                              *(_WORD *)&v852[28] = 2048;
                              *(_QWORD *)&v852[30] = v166;
                              _os_log_send_and_compose_impl();
                              _os_crash_msg();
                              __break(1u);
LABEL_850:
                              *(_QWORD *)v853 = 0;
                              v132 = (unint64_t)buf;
                              memset(buf, 0, sizeof(buf));
                              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                              *(_DWORD *)v852 = 136315906;
                              *(_QWORD *)&v852[4] = "operator[]";
                              *(_WORD *)&v852[12] = 1024;
                              *(_DWORD *)&v852[14] = 797;
                              *(_WORD *)&v852[18] = 2048;
                              *(_QWORD *)&v852[20] = v12;
                              *(_WORD *)&v852[28] = 2048;
                              *(_QWORD *)&v852[30] = i;
                              _os_log_send_and_compose_impl();
                              _os_crash_msg();
                              __break(1u);
LABEL_851:
                              *(_QWORD *)v853 = 0;
                              *(_OWORD *)(v10 + 48) = 0u;
                              *(_OWORD *)(v10 + 64) = 0u;
                              *(_OWORD *)(v10 + 16) = 0u;
                              *(_OWORD *)(v10 + 32) = 0u;
                              *(_OWORD *)v10 = 0u;
                              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                              *(_DWORD *)v852 = 136315906;
                              *(_QWORD *)(v10 + 132) = "operator[]";
                              *(_WORD *)&v852[12] = 1024;
                              *(_DWORD *)(v10 + 142) = 789;
                              *(_WORD *)&v852[18] = 2048;
                              *(_QWORD *)(v10 + 148) = v33;
                              *(_WORD *)&v852[28] = 2048;
                              *(_QWORD *)(v10 + 158) = j;
                              _os_log_send_and_compose_impl();
                              _os_crash_msg();
                              __break(1u);
LABEL_852:
                              *(_QWORD *)v852 = 0;
                              *(_OWORD *)(v10 + 48) = 0u;
                              *(_OWORD *)(v10 + 64) = 0u;
                              *(_OWORD *)(v10 + 16) = 0u;
                              *(_OWORD *)(v10 + 32) = 0u;
                              *(_OWORD *)v10 = 0u;
                              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                              *(_DWORD *)v812 = 136315906;
                              *(_QWORD *)&v812[4] = "operator[]";
                              *(_WORD *)v813 = 1024;
                              *(_DWORD *)&v813[2] = 858;
                              *(_WORD *)&v813[6] = 2048;
                              *(_QWORD *)&v813[8] = i;
                              *(_WORD *)&v813[16] = 2048;
                              *(_QWORD *)&v813[18] = v132;
                              _os_log_send_and_compose_impl();
                              _os_crash_msg();
                              __break(1u);
                              goto LABEL_853;
                            }
LABEL_230:
                            v198 = *(uint64_t **)(v182 + 104);
                            *(_QWORD *)v852 = *(_QWORD *)(v182 + 120);
                            *(_QWORD *)&v852[8] = v198;
                            buf[0].n128_u64[0] = (unint64_t)v853;
                            buf[0].n128_u64[1] = 1;
                            *(_BYTE *)(v182 + 72) = re::AnimationHelper::makeAdditiveForValues<re::SkeletalPoseAssetData>((re *)v852, (uint64_t *)buf, *(uint64_t *)v852, v198);
                            if (*(_QWORD *)v853 && *(_QWORD *)&v853[8])
                              (*(void (**)(void))(**(_QWORD **)v853 + 40))();
                            v10 = (unint64_t)buf;
                          }
                          v199 = *(_anonymous_namespace_ **)(a3 + 104);
                          if (((uint64_t)v713.var1 & 1) != 0)
                            v200 = v714;
                          else
                            v200 = (char *)&v713.var1 + 1;
                          if (((uint64_t)v713.var1 & 1) != 0)
                            v201 = (unint64_t)v713.var1 >> 1;
                          else
                            v201 = LOBYTE(v713.var1) >> 1;
                          TimelineAsset = re::AssetHelper::makeTimelineAsset((re::AssetHelper *)v182, v185);
                          v203 = re::TimelineAsset::assetType((re::TimelineAsset *)TimelineAsset);
                          v180 = (_anonymous_namespace_ *)re::ImportAssetTable::addAsset(v199, (uint64_t)v200, v201, TimelineAsset, (re **)v203);
                          i = (unint64_t)v180;
                        }
                        memset(v853, 0, 24);
                        if ((*(_BYTE *)(i + 8) & 1) != 0)
                          j = *(_QWORD *)(i + 16);
                        else
                          j = i + 9;
                        v12 = v680 + 56;
                        v11 = v686;
                        v132 = (unint64_t)v745;
                        if ((unint64_t)v745 <= v167)
                          goto LABEL_856;
                        v204 = v167;
                        v205 = *(_DWORD *)(v746 + 4 * v167);
                        v125 = (unint64_t *)(a6 + 416);
                        j = (unint64_t)&v799;
                        if (v205 == -1)
                        {
                          v206 = *(_QWORD *)(*(_QWORD *)(i + 40) + 8);
                          if (*(_QWORD *)(v206 + 104))
                          {
                            i = v204;
                            v207 = re::BucketArray<re::USDImportContextSkeletalAnimationData,8ul>::operator[](v663, v204);
                            v208 = (float)(*(float *)(v206 + 84) - *(float *)(v206 + 80));
                            buf[0].n128_u64[0] = *(_QWORD *)(v207 + 232);
                            buf[0].n128_f64[1] = v208;
                            re::AssetHandle::AssetHandle((re::AssetHandle *)&buf[1], (const re::AssetHandle *)v853);
                            re::AssetHandle::~AssetHandle((re::AssetHandle *)&buf[1]);
                            v13 = v745;
                            if ((unint64_t)v745 <= i)
                              goto LABEL_862;
                            *(_DWORD *)(v746 + 4 * i) = v662;
                          }
                        }
                        if (*(_QWORD *)&v713.var0 && ((uint64_t)v713.var1 & 1) != 0)
                          (*(void (**)(void))(**(_QWORD **)&v713.var0 + 40))();
                        v209 = (_QWORD *)(v667 + 72 * v666);
                        v210 = v209[7];
                        v209[7] = *(_QWORD *)&v853[8];
                        *(_QWORD *)&v853[8] = v210;
                        v211 = v209[6];
                        v209[6] = 0;
                        v209[6] = *(_QWORD *)v853;
                        *(_QWORD *)v853 = v211;
                        v212 = v209[8];
                        v209[8] = *(_QWORD *)&v853[16];
                        *(_QWORD *)&v853[16] = v212;
                        re::AssetHandle::~AssetHandle((re::AssetHandle *)v853);
                        re::AssetHandle::~AssetHandle((re::AssetHandle *)v717);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v164 + 72 * v10 + 16) = -1;
                      *(_DWORD *)j = *(_DWORD *)&v812[8];
                      v125 = (unint64_t *)(a6 + 416);
                      j = (unint64_t)&v799;
                      v11 = v686;
                      v10 = (unint64_t)buf;
                    }
                    if (v812[0])
                      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v813[4]);
                  }
                }
                else
                {
                  v144 = *re::pipelineLogObjects(0);
                  v12 = v680 + 56;
                  v125 = (unint64_t *)(a6 + 416);
                  j = v137;
                  v10 = (unint64_t)buf;
                  v11 = v686;
                  if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
                  {
                    v145 = v144;
                    v146 = *(_QWORD *)(i + 8);
                    buf[0].n128_u32[0] = 136315138;
                    *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v146;
                    _os_log_error_impl(&dword_224FE9000, v145, OS_LOG_TYPE_ERROR, "Could not locate skeleton asset: %s", (uint8_t *)buf, 0xCu);

                  }
                }
              }
            }
            v124 = v697;
          }
          ++v33;
        }
        while (v33 != v124);
      }
      if (v800.i64[0])
      {
        j = v742;
        v132 = v738;
        if (v742 + 1 > 8 * v738)
        {
          v132 = v738;
        }
        i = j >> 3;
        if (v132 <= j >> 3)
          goto LABEL_852;
        v213 = v741;
        if ((v739 & 1) != 0)
          v213 = &v740;
        v214 = v213[i];
        ++v742;
        ++v743;
        v215 = v214 + 40 * (j & 7);
        *(_QWORD *)(v215 + 32) = 0;
        *(_QWORD *)(v215 + 8) = 0;
        *(_QWORD *)(v215 + 16) = 0;
        *(_QWORD *)v215 = 0;
        *(_DWORD *)(v215 + 24) = 0;
        *(_QWORD *)v215 = *(_QWORD *)v808;
        *(_QWORD *)v808 = 0;
        *(_QWORD *)(v215 + 8) = *(_QWORD *)&v808[8];
        *(_QWORD *)&v808[8] = 0;
        v216 = *(_QWORD *)(v215 + 16);
        *(_QWORD *)(v215 + 16) = *(_QWORD *)&v808[16];
        *(_QWORD *)&v808[16] = v216;
        v217 = *(_QWORD *)(v215 + 32);
        *(_QWORD *)(v215 + 32) = *(_QWORD *)&v810[2];
        *(_QWORD *)&v810[2] = v217;
        ++*(_DWORD *)&v808[24];
        ++*(_DWORD *)(v215 + 24);
        re::DynamicArray<re::ModelWithLodsDescriptor>::add((_anonymous_namespace_ *)v816, (uint64_t)&v797);
        buf[0] = (__n128)v710;
        buf[1] = (__n128)v708;
        buf[2] = (__n128)v706;
        buf[3] = (__n128)v704;
        buf[4].n128_u32[0] = *(_DWORD *)&v816[16] - 1;
        re::make::shared::object<re::ShareableInternal<re::GeomInstance>,re::GeomInstance>((uint64_t)buf, (uint64_t *)v812);
        v218 = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add(&v818[10], v812);
        if (*(_QWORD *)v812)

        v132 = *(unsigned __int16 *)(a6 + 824);
        memset(v852, 0, 24);
        v33 = v777;
        i = v773;
        if (v777 + 1 > 16 * v773)
        {
          re::BucketArray<re::FixedArray<unsigned short>,16ul>::setBucketsCapacity(&v772, (v777 + 16) >> 4);
          i = v773;
        }
        j = v33 >> 4;
        if (i <= v33 >> 4)
        {
LABEL_853:
          *(_QWORD *)&v713.var0 = 0;
          *(_OWORD *)(v10 + 48) = 0u;
          *(_OWORD *)(v10 + 64) = 0u;
          *(_OWORD *)(v10 + 16) = 0u;
          *(_OWORD *)(v10 + 32) = 0u;
          *(_OWORD *)v10 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v812 = 136315906;
          *(_QWORD *)&v812[4] = "operator[]";
          *(_WORD *)v813 = 1024;
          *(_DWORD *)&v813[2] = 858;
          *(_WORD *)&v813[6] = 2048;
          *(_QWORD *)&v813[8] = j;
          *(_WORD *)&v813[16] = 2048;
          *(_QWORD *)&v813[18] = i;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_854:
          *(_QWORD *)v852 = 0;
          *(_OWORD *)(v10 + 48) = 0u;
          *(_OWORD *)(v10 + 64) = 0u;
          *(_OWORD *)(v10 + 16) = 0u;
          *(_OWORD *)(v10 + 32) = 0u;
          *(_OWORD *)v10 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v812 = 136315906;
          *(_QWORD *)&v812[4] = "operator[]";
          *(_WORD *)v813 = 1024;
          *(_DWORD *)&v813[2] = 858;
          *(_WORD *)&v813[6] = 2048;
          *(_QWORD *)&v813[8] = i;
          *(_WORD *)&v813[16] = 2048;
          *(_QWORD *)&v813[18] = v132;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_855:
          *(_QWORD *)v852 = 0;
          *(_OWORD *)(v10 + 48) = 0u;
          *(_OWORD *)(v10 + 64) = 0u;
          *(_OWORD *)(v10 + 16) = 0u;
          *(_OWORD *)(v10 + 32) = 0u;
          *(_OWORD *)v10 = 0u;
          v167 = MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v812 = 136315906;
          *(_QWORD *)&v812[4] = "operator[]";
          *(_WORD *)v813 = 1024;
          *(_DWORD *)&v813[2] = 858;
          *(_WORD *)&v813[6] = 2048;
          *(_QWORD *)&v813[8] = i;
          *(_WORD *)&v813[16] = 2048;
          *(_QWORD *)&v813[18] = v132;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_856:
          v791 = 0;
          *(_OWORD *)(v10 + 48) = 0u;
          *(_OWORD *)(v10 + 64) = 0u;
          *(_OWORD *)(v10 + 16) = 0u;
          *(_OWORD *)(v10 + 32) = 0u;
          *(_OWORD *)v10 = 0u;
          i = v167;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v852 = 136315906;
          *(_QWORD *)(v10 + 132) = "operator[]";
          *(_WORD *)&v852[12] = 1024;
          *(_DWORD *)(v10 + 142) = 468;
          *(_WORD *)&v852[18] = 2048;
          *(_QWORD *)(v10 + 148) = v167;
          *(_WORD *)&v852[28] = 2048;
          *(_QWORD *)(v10 + 158) = v132;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_857:
          re::internal::assertLog((re::internal *)6, v304, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, j, a6);
          _os_crash();
          __break(1u);
LABEL_858:
          *(_QWORD *)v853 = 0;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v852 = 136315906;
          *(_QWORD *)&v852[4] = "operator[]";
          *(_WORD *)&v852[12] = 1024;
          *(_DWORD *)&v852[14] = 866;
          *(_WORD *)&v852[18] = 2048;
          *(_QWORD *)&v852[20] = i;
          *(_WORD *)&v852[28] = 2048;
          *(_QWORD *)&v852[30] = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_859:
          *(_QWORD *)v853 = 0;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v852 = 136315906;
          *(_QWORD *)&v852[4] = "operator[]";
          *(_WORD *)&v852[12] = 1024;
          *(_DWORD *)&v852[14] = 789;
          *(_WORD *)&v852[18] = 2048;
          *(_QWORD *)&v852[20] = j;
          *(_WORD *)&v852[28] = 2048;
          *(_QWORD *)&v852[30] = v10;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_860:
          *(_QWORD *)v853 = 0;
          v13 = buf;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v852 = 136315906;
          *(_QWORD *)&v852[4] = "operator[]";
          *(_WORD *)&v852[12] = 1024;
          *(_DWORD *)&v852[14] = 797;
          *(_WORD *)&v852[18] = 2048;
          *(_QWORD *)&v852[20] = v12;
          *(_WORD *)&v852[28] = 2048;
          *(_QWORD *)&v852[30] = i;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_861:
          v797.n128_u64[0] = 0;
          i = (unint64_t)v812;
          v829 = 0u;
          *(_OWORD *)v830 = 0u;
          v827 = 0u;
          v828 = 0u;
          v826 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v816 = 136315906;
          *(_QWORD *)&v816[4] = "operator[]";
          *(_WORD *)&v816[12] = 1024;
          *(_DWORD *)&v816[14] = 468;
          *(_WORD *)&v816[18] = 2048;
          *(_QWORD *)&v816[20] = v12;
          v817 = 2048;
          *(_QWORD *)v818 = v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_862:
          v791 = 0;
          *(_OWORD *)(v10 + 48) = 0u;
          *(_OWORD *)(v10 + 64) = 0u;
          *(_OWORD *)(v10 + 16) = 0u;
          *(_OWORD *)(v10 + 32) = 0u;
          *(_OWORD *)v10 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v852 = 136315906;
          *(_QWORD *)(v10 + 132) = "operator[]";
          *(_WORD *)&v852[12] = 1024;
          *(_DWORD *)(v10 + 142) = 468;
          *(_WORD *)&v852[18] = 2048;
          *(_QWORD *)(v10 + 148) = i;
          *(_WORD *)&v852[28] = 2048;
          *(_QWORD *)(v10 + 158) = v13;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_863:
          v791 = 0;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v853 = 136315906;
          *(_QWORD *)&v853[4] = "operator[]";
          *(_WORD *)&v853[12] = 1024;
          *(_DWORD *)&v853[14] = 789;
          *(_WORD *)&v853[18] = 2048;
          *(_QWORD *)&v853[20] = v10;
          v854 = 2048;
          v855 = j;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_864;
        }
        v219 = v776;
        if ((v774 & 1) != 0)
          v219 = &v775;
        v220 = v219[j];
        ++v777;
        ++v778;
        v221 = (_QWORD *)(v220 + 24 * (v33 & 0xF));
        *v221 = 0;
        v221[1] = 0;
        v221[2] = 0;
        *v221 = *(_QWORD *)v852;
        v221[1] = *(_QWORD *)&v852[8];
        v221[2] = *(_QWORD *)&v852[16];
        if (v132)
        {
          v12 = 0;
          i = v777 - 1;
          while (1)
          {
            j = *(_QWORD *)(a6 + 824);
            if (j <= v12)
              goto LABEL_541;
            re::AssetHandle::serializationString((re::AssetHandle *)(*(_QWORD *)(a6 + 840) + 24 * v12), (re::DynamicString *)v852);
            v222 = (unsigned __int16 *)re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)&v782[8], (uint64_t)v852);
            if (!v222)
              break;
            v33 = *v222;
LABEL_286:
            v227 = re::BucketArray<re::FixedArray<unsigned short>,16ul>::operator[]((uint64_t)&v772, i);
            j = *(_QWORD *)(v227 + 8);
            if (j <= v12)
              goto LABEL_542;
            *(_WORD *)(*(_QWORD *)(v227 + 16) + 2 * v12) = v33;
            if (*(_QWORD *)v852 && (v852[8] & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)v852 + 40))();
            if (++v12 == v132)
              goto LABEL_291;
          }
          re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)v779, (re::DynamicString *)v852);
          buf[0].n128_u16[0] = v780 - 1;
          v223 = re::Hash<re::DynamicString>::operator()((uint64_t)v812, (uint64_t)v852);
          v224 = v223;
          if (*(_QWORD *)&v782[8])
          {
            v225 = v223 % *(unsigned int *)&v782[32];
            v226 = *(unsigned int *)(*(_QWORD *)&v782[16] + 4 * v225);
            if ((_DWORD)v226 != 0x7FFFFFFF)
            {
              v11 = *(_QWORD *)&v782[24];
              while (!re::DynamicString::operator==(v11 + 56 * v226 + 16, (uint64_t)v852))
              {
                v226 = *(_DWORD *)(v11 + 56 * v226 + 8) & 0x7FFFFFFF;
                if (v226 == 0x7FFFFFFF)
                  goto LABEL_284;
              }
              goto LABEL_285;
            }
          }
          else
          {
            LODWORD(v225) = 0;
          }
LABEL_284:
          re::HashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove((uint64_t)&v782[8], v225, v224, (re::DynamicString *)v852, buf);
          ++HIDWORD(v783);
LABEL_285:
          v33 = (unsigned __int16)v780 - 1;
          v10 = (unint64_t)buf;
          goto LABEL_286;
        }
LABEL_291:
        j = v735;
        v132 = v731;
        if (v735 + 1 > 8 * v731)
        {
          re::BucketArray<re::GeomDeformerStack,8ul>::setBucketsCapacity(&v730, (v735 + 8) >> 3);
          v132 = v731;
        }
        i = j >> 3;
        if (v132 <= j >> 3)
          goto LABEL_854;
        v228 = v734;
        if ((v732 & 1) != 0)
          v228 = &v733;
        v229 = v228[i];
        ++v735;
        ++v736;
        re::DynamicArray<re::GeomDeformer>::DynamicArray(v229 + 40 * (j & 7), (uint64_t *)(a6 + 1024));
        j = v728;
        v132 = v724;
        if (v728 + 1 > 8 * v724)
        {
          re::BucketArray<re::TimelineGroupBuilder *,8ul>::setBucketsCapacity(&v723, (v728 + 8) >> 3);
          v132 = v724;
        }
        i = j >> 3;
        if (v132 <= j >> 3)
          goto LABEL_855;
        v230 = v727;
        if ((v725 & 1) != 0)
          v230 = &v726;
        v231 = v230[i];
        ++v728;
        ++v729;
        *(_QWORD *)(v231 + 8 * (j & 7)) = a6 + 992;
        v125 = (unint64_t *)(a6 + 416);
        j = (unint64_t)&v799;
      }
      v232 = *(_QWORD *)(a6 + 304);
      *(_QWORD *)(a6 + 304) = 0;
      if (v232)
      {
        v233 = *(_QWORD *)(a6 + 320);
        i = 8 * v232;
        do
        {
          if (*(_QWORD *)v233)
          {

            *(_QWORD *)v233 = 0;
          }
          v233 += 8;
          i -= 8;
        }
        while (i);
      }
      ++*(_DWORD *)(a6 + 312);
      *(_QWORD *)(a6 + 344) = 0;
      ++*(_DWORD *)(a6 + 352);
      *(_QWORD *)(a6 + 384) = 0;
      ++*(_DWORD *)(a6 + 392);
      v234 = *(_QWORD *)(a6 + 408);
      if (v234)
      {
        if (*v125)
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v234 + 40))(v234, *(_QWORD *)(a6 + 424));
          *v125 = 0;
          v125[1] = 0;
        }
        *(_QWORD *)(a6 + 408) = 0;
      }
      if (*((_QWORD *)&v804 + 1))
      {
        if (v807)
          (*(void (**)(void))(**((_QWORD **)&v804 + 1) + 40))();
        v807 = 0;
        v805 = 0uLL;
        *((_QWORD *)&v804 + 1) = 0;
        ++v806;
      }
      if (v801.i64[1])
      {
        if ((_QWORD)v804)
          (*(void (**)(void))(*(_QWORD *)v801.i64[1] + 40))();
        *(_QWORD *)&v804 = 0;
        v802 = 0uLL;
        v801.i64[1] = 0;
        ++v803;
      }
      re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(j);
      if (v797.n128_u64[0] && (v797.n128_u8[8] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v797.n128_u64[0] + 40))();
LABEL_324:
      v37.i32[0] = *(_DWORD *)(a6 + 564);
      if (v37.f32[0] != 0.0 && *(_BYTE *)(*(_QWORD *)(v680 + 40) + 96))
      {
        v235 = (uint64_t)v685;
        if (!v685)
        {
          v236 = re::globalAllocators((re *)v35);
          v235 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v236[2] + 32))(v236[2], 224, 8);
          *(_OWORD *)(v235 + 176) = 0u;
          *(_OWORD *)(v235 + 192) = 0u;
          *(_OWORD *)v235 = 0u;
          *(_OWORD *)(v235 + 16) = 0u;
          *(_OWORD *)(v235 + 32) = 0u;
          *(_OWORD *)(v235 + 48) = 0u;
          *(_OWORD *)(v235 + 64) = 0u;
          *(_OWORD *)(v235 + 80) = 0u;
          *(_OWORD *)(v235 + 96) = 0u;
          *(_OWORD *)(v235 + 112) = 0u;
          *(_OWORD *)(v235 + 128) = 0u;
          *(_OWORD *)(v235 + 144) = 0u;
          *(_OWORD *)(v235 + 160) = 0u;
          *(_DWORD *)(v235 + 196) = 0x7FFFFFFF;
          *(_QWORD *)(v235 + 208) = 0;
          *(_QWORD *)(v235 + 216) = &str_110;
        }
        v237 = *(_QWORD *)(a6 + 608);
        v238 = re::globalAllocators((re *)v35);
        v239 = (float *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v238[2] + 32))(v238[2], 128, 8);
        re::SampledAnimationAssetData<re::GenericSRT<float>>::SampledAnimationAssetData((uint64_t)v239, a6 + 480);
        *v240 = off_24ED339F8;
        v797.n128_u64[0] = (unint64_t)"Transform.transform";
        v797.n128_u64[1] = 19;
        re::DynamicString::operator=((re::DynamicString *)(v240 + 5), (uint64_t)&v797);
        v242 = re::AssetHelper::makeTimelineAsset((re::AssetHelper *)v239, v241);
        re::StringID::StringID((re::StringID *)buf, (const StringID *)(a6 + 24));
        v243 = v242[2];
        v244 = buf[0];
        buf[0].n128_u64[1] = (unint64_t)&str_110;
        buf[0].n128_u64[0] = 0;
        v245 = *((_QWORD *)v243 + 3);
        v246 = *((_QWORD *)v243 + 4);
        *(__n128 *)((char *)v243 + 24) = v244;
        v797.n128_u64[1] = v246;
        v797.n128_u64[0] = v244.n128_u64[0] & 0xFFFFFFFFFFFFFFFELL | v245 & 1;
        re::StringID::destroyString((re::StringID *)&v797);
        re::StringID::destroyString((re::StringID *)buf);
        v247 = *(_anonymous_namespace_ **)(a3 + 104);
        v248 = *(const char **)(a6 + 32);
        v249 = (re::TimelineAsset *)strlen(v248);
        v250 = re::TimelineAsset::assetType(v249);
        v251 = re::ImportAssetTable::addAsset(v247, (uint64_t)v248, (uint64_t)v249, v242, (re **)v250);
        v797 = 0uLL;
        v798.i64[0] = 0;
        re::DynamicArray<re::AssetHandle>::add((_QWORD *)(v235 + 120), (uint64_t *)&v797);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v797);
        v685 = (_anonymous_namespace_ *)v235;
        if ((*(_BYTE *)(v251 + 8) & 1) != 0)
          v253 = *(re::AssetPath **)(v251 + 16);
        else
          v253 = (re::AssetPath *)(v251 + 9);
        v254 = (re::DynamicString *)(*(_QWORD *)(v235 + 152) + 24 * *(_QWORD *)(v235 + 136) - 24);
        v797.n128_u64[0] = 0;
        v797.n128_u64[1] = (unint64_t)&str_110;
        v799.i64[0] = 0;
        v798 = 0uLL;
        re::DynamicArray<re::NamedAnimationLibraryEntry>::add((_QWORD *)(v235 + 40), (uint64_t *)&v797);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v798);
        re::StringID::destroyString((re::StringID *)&v797);
        v33 = *(_QWORD *)(v235 + 72);
        v255 = *(_QWORD *)(v235 + 56) - 1;
        v256 = re::StringID::operator=((unint64_t *)(v33 + 40 * v255), (uint64_t *)(a6 + 24));
        if ((*(_BYTE *)(v251 + 8) & 1) != 0)
          i = *(_QWORD *)(v251 + 16);
        else
          i = v251 + 9;
        v257 = (float)(v239[21] - v239[20]);
        v797.n128_u64[0] = v237;
        v797.n128_f64[1] = v257;
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v798, (const re::AssetHandle *)(*((_QWORD *)v685 + 19) + 24 * *((_QWORD *)v685 + 17) - 24));
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v798);
        *(_BYTE *)(v680 + 48) = 1;
      }
      v258 = *(_QWORD *)(a6 + 968);
      if (v258)
      {
        v259 = *(_QWORD *)(a6 + 608);
        v260 = *(uint64_t **)(a6 + 984);
        v261 = 8 * v258;
        do
        {
          v262 = *v260;
          v263 = re::globalAllocators((re *)v35)[2];
          v799.i32[0] = 0;
          v797 = 0u;
          v798 = 0u;
          *(uint64_t *)((char *)v799.i64 + 4) = 0x7FFFFFFFLL;
          v264 = (re *)re::internal::convertToAssetData(v262, (uint64_t)&v797, v263);
          v265 = re::globalAllocators(v264);
          v266 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v265[2] + 32))(v265[2], 24, 8);
          *v266 = v262;
          v266[1] = (uint64_t)v264;
          v266[2] = v262;
          v267 = *(_anonymous_namespace_ **)(a3 + 104);
          v33 = *(_QWORD *)(a6 + 32);
          v268 = (re::TimelineAsset *)strlen((const char *)v33);
          v269 = re::TimelineAsset::assetType(v268);
          v270 = re::ImportAssetTable::addAsset(v267, v33, (uint64_t)v268, v266, (re **)v269);
          memset(v808, 0, 24);
          if ((*(_BYTE *)(v270 + 8) & 1) != 0)
            i = *(_QWORD *)(v270 + 16);
          else
            i = v270 + 9;
          buf[0].n128_u64[0] = v259;
          buf[0].n128_u64[1] = (*(double (**)(uint64_t))(*(_QWORD *)v262 + 40))(v262);
          re::AssetHandle::AssetHandle((re::AssetHandle *)&buf[1], (const re::AssetHandle *)v808);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&buf[1]);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v808);
          *(double *)v37.i64 = re::HashTable<unsigned long long,re::internal::PushLoadManager::PushLoadedAsset,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v797);
          ++v260;
          v261 -= 8;
        }
        while (v261);
      }
      if (v688)
      {
        v10 = (unint64_t)buf;
        v11 = (unint64_t)&v797;
        v12 = v680 + 56;
      }
      else
      {
        v271 = *(_QWORD *)(a6 + 920);
        v10 = (unint64_t)buf;
        v11 = (unint64_t)&v797;
        v33 = (unint64_t)&v797;
        v12 = v680 + 56;
        if (v271)
        {
          for (i = 0; i != v271; ++i)
          {
            v272 = (unint64_t *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a6 + 880, v271 + ~i);
            v273 = re::BucketArray<re::USDImportContext::NodeStackItem,32ul>::operator[](v679, *v272);
            v274 = 0;
            v275 = *(float *)(v273 + 448);
            v276 = *(float *)(v273 + 452);
            v277 = *(float *)(v273 + 456);
            v278 = *(float *)(v273 + 460);
            v279 = *(float32x4_t *)(v273 + 432);
            v280 = *(__n128 *)(v273 + 464);
            v281 = v275 + v275;
            v282 = v276 + v276;
            v283 = v275 * (float)(v275 + v275);
            v284 = v276 * (float)(v276 + v276);
            v285 = v277 * (float)(v277 + v277);
            v286 = v281 * v276;
            v287 = (float)(v277 + v277) * v278;
            v288.i32[3] = 0;
            v288.f32[0] = 1.0 - (float)(v284 + v285);
            v288.f32[1] = v286 + v287;
            v289 = v281 * v277;
            v290 = v282 * v277;
            v291 = v281 * v278;
            v292 = v282 * v278;
            v288.f32[2] = v289 - v292;
            v293.i32[3] = 0;
            v293.f32[0] = v286 - v287;
            v293.f32[1] = 1.0 - (float)(v283 + v285);
            v293.f32[2] = v290 + v291;
            v294.i32[3] = 0;
            v294.f32[0] = v289 + v292;
            v294.f32[1] = v290 - v291;
            v294.f32[2] = 1.0 - (float)(v283 + v284);
            v280.n128_u32[3] = 1.0;
            buf[0] = (__n128)vmulq_n_f32(v288, v279.f32[0]);
            buf[1] = (__n128)vmulq_n_f32(v293, *(float *)vshrq_n_u64((uint64x2_t)v279, 0x20uLL).i32);
            buf[2] = (__n128)vmulq_laneq_f32(v294, v279, 2);
            buf[3] = v280;
            do
            {
              *(float32x4_t *)((char *)&v797 + v274 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v710, COERCE_FLOAT(*(_OWORD *)&buf[v274])), v708, (float32x2_t)buf[v274].n128_u64[0], 1), v706, (float32x4_t)buf[v274], 2), v704, (float32x4_t)buf[v274], 3);
              ++v274;
            }
            while (v274 != 4);
            *(__n128 *)v687 = v797;
            *(float32x4_t *)v689 = v798;
            v694 = v799;
            v698 = v800;
            v797.n128_u8[0] = 0;
            v797.n128_u64[1] = *(_QWORD *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a6 + 880, *(_QWORD *)(a6 + 920) + ~i);
            v798 = *(float32x4_t *)v687;
            v799 = *(float32x4_t *)v689;
            v800 = v694;
            v801 = v698;
            v37.i64[0] = re::BucketArray<re::createEntityFromImportContext(re::USDImportContext &,re::SceneImportOperation &,unsigned long,re::BucketArray<re::TimelineGroupBuilder *,8ul> &,re::AnimationSceneEntityData &,re::FixedArray<BOOL> &,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> *,BOOL)::TransformedMeshItem,8ul>::add((uint64_t)&v784, (uint64_t)&v797).n128_u64[0];
            v271 = *(_QWORD *)(a6 + 920);
          }
        }
        v295 = *(_QWORD *)(a6 + 144);
        if (v295)
        {
          for (i = 0; i != v295; ++i)
          {
            v296 = (unint64_t *)re::BucketArray<unsigned long,4ul>::operator[](a6 + 104, v295 + ~i);
            v35 = re::BucketArray<re::USDImportContextSkeletonData,4ul>::operator[](v684, *v296);
            v297 = *(_QWORD *)(v35 + 392);
            v298 = v708;
            v37 = v710;
            v300 = v704;
            v299 = v706;
            if (v297)
            {
              v301 = 8 * v297;
              v33 = *(_QWORD *)(v35 + 408) - 8;
              do
              {
                v797.n128_u8[0] = 1;
                v797.n128_u64[1] = *(_QWORD *)(v33 + v301);
                v798 = v37;
                v799 = v298;
                v800 = v299;
                v801 = v300;
                re::BucketArray<re::createEntityFromImportContext(re::USDImportContext &,re::SceneImportOperation &,unsigned long,re::BucketArray<re::TimelineGroupBuilder *,8ul> &,re::AnimationSceneEntityData &,re::FixedArray<BOOL> &,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> *,BOOL)::TransformedMeshItem,8ul>::add((uint64_t)&v784, (uint64_t)&v797);
                v300 = v704;
                v299 = v706;
                v298 = v708;
                v37 = v710;
                v301 -= 8;
              }
              while (v301);
            }
            v295 = *(_QWORD *)(a6 + 144);
          }
          j = 1;
          v10 = (unint64_t)buf;
          goto LABEL_357;
        }
      }
      j = 1;
LABEL_357:
      v38 = v789;
      if (!v789)
        goto LABEL_361;
    }
    v691 = *(float64x2_t *)(v35 + 688);
    v797 = 0uLL;
    v798.i64[0] = (uint64_t)&str_110;
    v798.i8[8] = 1;
    v800.i64[0] = 0;
    v799 = 0uLL;
    v800.i32[2] = 0;
    *(_QWORD *)&v804 = 0;
    v801 = 0u;
    v802 = 0u;
    v803 = 0;
    re::StringID::destroyString((re::StringID *)&v797.n128_i8[8]);
    v798.i64[0] = (uint64_t)"Text";
    v797.n128_u64[1] = 5206682;
    if (!v799.i64[0])
    {
      re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(&v799, 0);
      ++v800.i32[2];
    }
    v48 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                + 7)
                                                             + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 288, 0);
    re::make::shared::inplace<re::ecs2::Static3DTextComponent>(v48, v808);
    v49 = *(_QWORD *)v808;
    v50 = *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
          + 3) >> 1;
    *(_QWORD *)v808 = 0;
    buf[0].n128_u64[0] = v50;
    buf[0].n128_u64[1] = v49;
    buf[1].n128_u8[0] = 1;
    re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add((_anonymous_namespace_ *)&v799, buf);
    if (*(_QWORD *)v808)

    v696 = vdupq_n_s32(0x7F800000u);
    if (!re::DynamicString::operator==(v49 + 96, a6 + 648))
    {
      re::DynamicString::operator=((re::DynamicString *)(v49 + 96), (re::DynamicString *)(a6 + 648));
      *(_QWORD *)&v51 = 0x7F0000007FLL;
      *((_QWORD *)&v51 + 1) = 0x7F0000007FLL;
      *(int32x4_t *)(v49 + 48) = v696;
      *(_OWORD *)(v49 + 64) = v51;
      *(_BYTE *)(v49 + 44) = 1;
    }
    if (!re::DynamicString::operator==(v49 + 128, a6 + 616))
    {
      re::DynamicString::operator=((re::DynamicString *)(v49 + 128), (re::DynamicString *)(a6 + 616));
      *(_QWORD *)&v52 = 0x7F0000007FLL;
      *((_QWORD *)&v52 + 1) = 0x7F0000007FLL;
      *(int32x4_t *)(v49 + 48) = v696;
      *(_OWORD *)(v49 + 64) = v52;
      *(_BYTE *)(v49 + 44) = 1;
    }
    v53 = *(double *)(a6 + 680);
    if (*(float *)(v49 + 32) != v53)
    {
      *(float *)(v49 + 32) = v53;
      *(_QWORD *)&v54 = 0x7F0000007FLL;
      *((_QWORD *)&v54 + 1) = 0x7F0000007FLL;
      *(int32x4_t *)(v49 + 48) = v696;
      *(_OWORD *)(v49 + 64) = v54;
      *(_BYTE *)(v49 + 44) = 1;
    }
    v55 = *(double *)(a6 + 704);
    if (*(float *)(v49 + 28) != v55)
    {
      *(float *)(v49 + 28) = v55;
      *(_QWORD *)&v56 = 0x7F0000007FLL;
      *((_QWORD *)&v56 + 1) = 0x7F0000007FLL;
      *(int32x4_t *)(v49 + 48) = v696;
      *(_OWORD *)(v49 + 64) = v56;
      *(_BYTE *)(v49 + 44) = 1;
    }
    v57 = vcvt_f32_f64(v691);
    v58 = (uint32x2_t)vceq_f32(*(float32x2_t *)(v49 + 88), v57);
    if ((vpmin_u32(v58, v58).u32[0] & 0x80000000) == 0)
    {
      *(float32x2_t *)(v49 + 88) = v57;
      *(_QWORD *)&v59 = 0x7F0000007FLL;
      *((_QWORD *)&v59 + 1) = 0x7F0000007FLL;
      *(int32x4_t *)(v49 + 48) = v696;
      *(_OWORD *)(v49 + 64) = v59;
      *(_BYTE *)(v49 + 44) = 1;
    }
    if ((*(_QWORD *)(a6 + 752) & 1) != 0)
      v60 = *(const char **)(a6 + 760);
    else
      v60 = (const char *)(a6 + 753);
    v692 = 0u;
    if (!strcmp(v60, "left"))
      goto LABEL_46;
    if (!strcmp(v60, "right"))
    {
      v65 = *(double *)(a6 + 688);
      v692 = (float64x2_t)COERCE_UNSIGNED_INT(-v65);
      v64 = 1;
    }
    else if (!strcmp(v60, "center"))
    {
      *(float *)&v66 = *(double *)(a6 + 688) * -0.5;
      v692 = (float64x2_t)v66;
      v64 = 2;
    }
    else
    {
      v61 = (re *)strcmp(v60, "justified");
      if ((_DWORD)v61)
      {
        v62 = *re::pipelineLogObjects(v61);
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
        {
          if ((*(_QWORD *)(a6 + 752) & 1) != 0)
            v63 = *(_QWORD *)(a6 + 760);
          else
            v63 = a6 + 753;
          buf[0].n128_u32[0] = 136315138;
          *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v63;
          _os_log_impl(&dword_224FE9000, v62, OS_LOG_TYPE_DEFAULT, "Invalid text horizontal alignment value %s", (uint8_t *)buf, 0xCu);
        }
LABEL_46:
        v64 = 0;
        goto LABEL_54;
      }
      v64 = 3;
    }
LABEL_54:
    if (*(unsigned __int8 *)(v49 + 37) != v64)
    {
      *(_BYTE *)(v49 + 37) = v64;
      *(_QWORD *)&v67 = 0x7F0000007FLL;
      *((_QWORD *)&v67 + 1) = 0x7F0000007FLL;
      *(int32x4_t *)(v49 + 48) = v696;
      *(_OWORD *)(v49 + 64) = v67;
      *(_BYTE *)(v49 + 44) = 1;
    }
    if ((*(_QWORD *)(a6 + 720) & 1) != 0)
      v68 = *(const char **)(a6 + 728);
    else
      v68 = (const char *)(a6 + 721);
    v682 = v64;
    if (strcmp(v68, "singleLine"))
    {
      v693 = *(float64x2_t *)(a6 + 688);
      v11 = a6 + 648;
      if (!strcmp(v68, "hardBreaks"))
      {
        v71 = 2;
      }
      else
      {
        v69 = (re *)strcmp(v68, "flowing");
        if ((_DWORD)v69)
        {
          v70 = *re::pipelineLogObjects(v69);
          v71 = 0;
          if (!os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
            goto LABEL_84;
          if ((*(_QWORD *)(a6 + 720) & 1) != 0)
            v72 = *(_QWORD *)(a6 + 728);
          else
            v72 = a6 + 721;
          buf[0].n128_u32[0] = 136315138;
          *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v72;
          _os_log_impl(&dword_224FE9000, v70, OS_LOG_TYPE_DEFAULT, "Invalid text word wrap value %s", (uint8_t *)buf, 0xCu);
        }
        v71 = 0;
      }
LABEL_84:
      if (*(unsigned __int8 *)(v49 + 38) != v71)
      {
        *(_BYTE *)(v49 + 38) = v71;
        *(_QWORD *)&v81 = 0x7F0000007FLL;
        *((_QWORD *)&v81 + 1) = 0x7F0000007FLL;
        *(int32x4_t *)(v49 + 48) = v696;
        *(_OWORD *)(v49 + 64) = v81;
        *(_BYTE *)(v49 + 44) = 1;
      }
      if ((*(_QWORD *)(a6 + 784) & 1) != 0)
        v82 = *(const char **)(a6 + 792);
      else
        v82 = (const char *)(a6 + 785);
      if (!strcmp(v82, "top"))
      {
        v86 = 0;
      }
      else if (!strcmp(v82, "middle"))
      {
        v86 = 2;
      }
      else
      {
        v83 = (re *)strcmp(v82, "bottom");
        if ((_DWORD)v83)
        {
          v84 = *re::pipelineLogObjects(v83);
          if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
          {
            if ((*(_QWORD *)(a6 + 784) & 1) != 0)
              v85 = *(_QWORD *)(a6 + 792);
            else
              v85 = a6 + 785;
            buf[0].n128_u32[0] = 136315138;
            *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v85;
            _os_log_impl(&dword_224FE9000, v84, OS_LOG_TYPE_DEFAULT, "Invalid text vertical alignment value %s", (uint8_t *)buf, 0xCu);
          }
        }
        v86 = 1;
      }
      __asm { FMOV            V0.2D, #-0.5 }
      v91 = vmulq_f64(v693, _Q0);
      *(float32x2_t *)&v91.f64[0] = vcvt_f32_f64(v91);
      LODWORD(v91.f64[1]) = 0;
      v692 = v91;
      if (*(unsigned __int8 *)(v49 + 39) == v86)
        goto LABEL_117;
      goto LABEL_116;
    }
    if (*(_BYTE *)(v49 + 38) != 2)
    {
      *(_BYTE *)(v49 + 38) = 2;
      *(_QWORD *)&v73 = 0x7F0000007FLL;
      *((_QWORD *)&v73 + 1) = 0x7F0000007FLL;
      *(int32x4_t *)(v49 + 48) = v696;
      *(_OWORD *)(v49 + 64) = v73;
      *(_BYTE *)(v49 + 44) = 1;
    }
    if ((*(_QWORD *)(a6 + 784) & 1) != 0)
      v74 = *(const char **)(a6 + 792);
    else
      v74 = (const char *)(a6 + 785);
    if (!strcmp(v74, "top"))
    {
      v86 = 0;
      v92 = *(double *)(a6 + 696);
      v93 = v692;
      *((float *)v93.f64 + 1) = -v92;
      v692 = v93;
    }
    else if (!strcmp(v74, "middle"))
    {
      v94 = *(double *)(a6 + 696) * -0.5;
      v95 = v692;
      *((float *)v95.f64 + 1) = v94;
      v692 = v95;
      v86 = 2;
    }
    else
    {
      if (!strcmp(v74, "bottom"))
      {
        v96 = v692;
        HIDWORD(v96.f64[0]) = 0;
        v692 = v96;
      }
      else
      {
        v75 = (re *)strcmp(v74, "lowerMiddle");
        if ((_DWORD)v75)
        {
          v76 = (re *)strcmp(v74, "baseline");
          v77 = (int)v76;
          v78 = *re::pipelineLogObjects(v76);
          v79 = os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT);
          if (v77)
          {
            if (v79)
            {
              if ((*(_QWORD *)(a6 + 784) & 1) != 0)
                v80 = *(_QWORD *)(a6 + 792);
              else
                v80 = a6 + 785;
              buf[0].n128_u32[0] = 136315138;
              *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v80;
              _os_log_impl(&dword_224FE9000, v78, OS_LOG_TYPE_DEFAULT, "Invalid text vertical alignment value %s", (uint8_t *)buf, 0xCu);
            }
          }
          else
          {
            if (v79)
            {
              buf[0].n128_u16[0] = 0;
              _os_log_impl(&dword_224FE9000, v78, OS_LOG_TYPE_DEFAULT, "Single line vertical alignment value baseline not supported, falling back to bottom", (uint8_t *)buf, 2u);
            }
            v100 = *(double *)(a6 + 696) * -0.5;
            v101 = v692;
            *((float *)v101.f64 + 1) = v100;
            v692 = v101;
          }
          v86 = 1;
          goto LABEL_113;
        }
        v97 = *re::pipelineLogObjects(v75);
        if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
        {
          buf[0].n128_u16[0] = 0;
          _os_log_impl(&dword_224FE9000, v97, OS_LOG_TYPE_DEFAULT, "Single line vertical alignment value lowerMiddle not supported, falling back to bottom", (uint8_t *)buf, 2u);
        }
        v98 = *(double *)(a6 + 696) * -0.5;
        v99 = v692;
        *((float *)v99.f64 + 1) = v98;
        v692 = v99;
      }
      v86 = 1;
    }
LABEL_113:
    v11 = a6 + 648;
    if (*(unsigned __int8 *)(v49 + 39) == v86)
    {
      LOBYTE(v71) = 0;
LABEL_117:
      *((float64x2_t *)re::ecs2::EntityAssetData::addComponent<re::ecs2::TransformComponent>(&v797) + 4) = v692;
      i = (unint64_t)re::ecs2::EntityAssetData::addComponent<re::ecs2::MeshComponent>(&v797);
      v103 = re::DynamicArray<re::AssetHandle>::operator=((re::AssetHandle *)(i + 56), (re::AssetHandle *)(a6 + 808));
      memset(buf, 0, 32);
      v104 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(buf, 0);
      memset(&buf[2], 0, 32);
      re::DynamicString::setCapacity((__n128 *)buf[2].n128_u64, 0);
      __asm { FMOV            V0.2S, #1.0 }
      buf[4].n128_u64[0] = _D0;
      buf[4].n128_u8[8] = 5;
      v849 = 0;
      v850 = 0;
      v851[0] = 0x1010101000400;
      re::DynamicString::operator=((re::DynamicString *)&buf[2], (re::DynamicString *)v11);
      re::DynamicString::operator=((re::DynamicString *)buf, (re::DynamicString *)(a6 + 616));
      *(float *)&v106 = *(double *)(a6 + 680);
      *(float *)&v107 = *(double *)(a6 + 704);
      buf[4].n128_u64[0] = __PAIR64__(v107, v106);
      buf[4].n128_u8[8] = 5;
      v849 = 0;
      v850 = v57;
      LOBYTE(v851[0]) = v71;
      BYTE1(v851[0]) = v682;
      BYTE2(v851[0]) = v86;
      *(_WORD *)((char *)v851 + 3) = 257;
      HIBYTE(v851[0]) = 1;
      Asset = (_DWORD *)re::MeshPrimitiveProvider::makeAsset((re::MeshPrimitiveProvider *)buf, 0, 1);
      Asset[231] = 1;
      j = *(_QWORD *)(a6 + 32);
      v33 = *(_QWORD *)(a3 + 104);
      v109 = (re::MeshAsset *)strlen((const char *)j);
      v110 = re::MeshAsset::assetType(v109);
      v111 = re::ImportAssetTable::addAsset((_anonymous_namespace_ *)v33, j, (uint64_t)v109, Asset, (re **)v110);
      memset(v808, 0, 24);
      if ((*(_BYTE *)(v111 + 8) & 1) != 0)
        v112 = *(re::AssetPath **)(v111 + 16);
      else
        v112 = (re::AssetPath *)(v111 + 9);
      v12 = v680 + 56;
      re::AssetHandle::setSerializationString((re::DynamicString *)v808, v112, *(re::Allocator **)a3);
      re::AssetHandle::operator=((uint64_t *)(i + 32), (uint64_t *)v808);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v808);
      if (buf[2].n128_u64[0])
      {
        if ((buf[2].n128_u8[8] & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)buf[2].n128_u64[0] + 40))();
        memset(&buf[2], 0, 32);
      }
      if (buf[0].n128_u64[0] && (buf[0].n128_u8[8] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)buf[0].n128_u64[0] + 40))();
      re::DynamicArray<re::ecs2::EntityAssetData>::add((uint64_t)&v763[1], (uint64_t)&v797);
      re::ecs2::EntityAssetData::~EntityAssetData((re::ecs2::EntityAssetData *)&v797);
      goto LABEL_128;
    }
    LOBYTE(v71) = 0;
LABEL_116:
    *(_BYTE *)(v49 + 39) = v86;
    *(_QWORD *)&v102 = 0x7F0000007FLL;
    *((_QWORD *)&v102 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)(v49 + 48) = v696;
    *(_OWORD *)(v49 + 64) = v102;
    *(_BYTE *)(v49 + 44) = 1;
    goto LABEL_117;
  }
  v685 = 0;
LABEL_361:
  v669 = (_anonymous_namespace_ *)v760;
  if (!*((_QWORD *)&v819 + 1))
  {
LABEL_562:
    v166 = v752;
    if (!v685)
    {
      if (!v752)
      {
        v685 = 0;
        v476 = v679;
        v477 = a5;
        goto LABEL_655;
      }
      v448 = re::globalAllocators((re *)v35);
      v449 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v448[2] + 32))(v448[2], 224, 8);
      *(_OWORD *)(v449 + 176) = 0u;
      *(_OWORD *)(v449 + 192) = 0u;
      *(_OWORD *)v449 = 0u;
      *(_OWORD *)(v449 + 16) = 0u;
      *(_OWORD *)(v449 + 32) = 0u;
      *(_OWORD *)(v449 + 48) = 0u;
      *(_OWORD *)(v449 + 64) = 0u;
      *(_OWORD *)(v449 + 80) = 0u;
      *(_OWORD *)(v449 + 96) = 0u;
      *(_OWORD *)(v449 + 112) = 0u;
      *(_OWORD *)(v449 + 128) = 0u;
      *(_OWORD *)(v449 + 144) = 0u;
      *(_OWORD *)(v449 + 160) = 0u;
      *(_DWORD *)(v449 + 196) = 0x7FFFFFFF;
      *(_QWORD *)(v449 + 208) = 0;
      *(_QWORD *)(v449 + 216) = &str_110;
      v685 = (_anonymous_namespace_ *)v449;
    }
    v702 = *(_BYTE *)(v680 + 48);
    v450 = v754;
    re::TimelineGroupBuilder::TimelineGroupBuilder((uint64_t)&v797, *(_QWORD *)(a3 + 104), (uint64_t)v754, v755);
    if (v166)
    {
      v11 = 0;
      v710.i64[0] = (uint64_t)v748;
      v451 = v751;
      if ((v749 & 1) != 0)
        v451 = &v750;
      v707 = v451;
      j = (unint64_t)"childSceneClip";
      v709 = v166;
      do
      {
        v452 = v11 >> 3;
        if (v710.i64[0] <= v11 >> 3)
          goto LABEL_842;
        v453 = (double *)(v707[v452] + 40 * (v11 & 7));
        v454 = *v453;
        v455 = *v453 + v453[1];
        v33 = (unint64_t)(v453 + 2);
        re::AssetHandle::AssetHandle((re::AssetHandle *)v852, (const re::AssetHandle *)(v453 + 2));
        v456 = strlen(v450);
        re::TimelineGroupBuilder::addTimeline((uint64_t)&v797, (const re::AssetHandle *)v852, (uint64_t)v450, v456, "entitySceneClip", v454, v455);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v852);
        v457 = *v453;
        v458 = *v453 + v453[1];
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v713, (const re::AssetHandle *)(v453 + 2));
        v459 = strlen(v450);
        re::TimelineGroupBuilder::addTimeline((uint64_t)v718, (const re::AssetHandle *)&v713, (uint64_t)v450, v459, "defaultSceneClip", v457, v458);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v713);
        a6 = *(_QWORD *)(a5 + 40);
        if (a6)
        {
          v460 = 0;
          do
          {
            v12 = *(_QWORD *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](a5, v460);
            v461 = *v453;
            v462 = *v453 + v453[1];
            re::AssetHandle::AssetHandle((re::AssetHandle *)v853, (const re::AssetHandle *)(v453 + 2));
            v463 = strlen(v450);
            re::TimelineGroupBuilder::addTimeline(v12, (const re::AssetHandle *)v853, (uint64_t)v450, v463, "childSceneClip", v461, v462);
            re::AssetHandle::~AssetHandle((re::AssetHandle *)v853);
            ++v460;
          }
          while (a6 != v460);
        }
        ++v11;
        v166 = v709;
        v10 = (unint64_t)buf;
      }
      while ((__n128 *)v11 != v709);
    }
    v792 = 0;
    v791 = 0;
    v793 = 0;
    v11 = (unint64_t)&v797;
    if (*((_QWORD *)&v833 + 1) | *((_QWORD *)&v836 + 1))
    {
      re::DynamicString::format((re::DynamicString *)"%s_defaultTimelineGroupPoses", (re::DynamicString *)buf, v450);
      v464 = *(_anonymous_namespace_ **)(a3 + 104);
      if ((buf[0].n128_u8[8] & 1) != 0)
        v465 = (const char *)buf[1].n128_u64[0];
      else
        v465 = &buf[0].n128_i8[9];
      v466 = (re *)strlen(v465);
      v467 = re::globalAllocators(v466);
      v468 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v467[2] + 32))(v467[2], 320, 8);
      v469 = re::DynamicArray<re::AssetHandle>::DynamicArray(v468, (uint64_t *)&v826);
      re::DynamicArray<re::StringID>::DynamicArray(v469 + 40, (uint64_t *)&v828 + 1);
      re::DynamicArray<re::StringID>::DynamicArray(v468 + 80, (uint64_t *)&v830[16]);
      re::DynamicArray<re::FixedArray<re::StringID>>::DynamicArray(v468 + 120, (uint64_t *)&v832 + 1);
      v470 = (uint64_t *)re::DynamicArray<re::FixedArray<re::StringID>>::DynamicArray(v468 + 160, (uint64_t *)&v835 + 1);
      *(_QWORD *)(v468 + 200) = 0;
      *(_QWORD *)(v468 + 232) = 0;
      *(_QWORD *)(v468 + 208) = 0;
      *(_QWORD *)(v468 + 216) = 0;
      *(_DWORD *)(v468 + 224) = 0;
      if (*((_QWORD *)&v838 + 1))
      {
        v471 = *((_QWORD *)&v839 + 1);
        *(_QWORD *)(v468 + 200) = *((_QWORD *)&v838 + 1);
        re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)(v468 + 200), v471);
        ++*(_DWORD *)(v468 + 224);
        v472 = *((_QWORD *)&v839 + 1);
        if (*((_QWORD *)&v839 + 1) >= *(_QWORD *)(v468 + 216))
        {
          re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)(v468 + 200), *((unint64_t *)&v839 + 1));
          v470 = (uint64_t *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SkeletalPoseAssetData *,re::SkeletalPoseAssetData *,re::SkeletalPoseAssetData *,0>(v841, v841 + 24 * *(_QWORD *)(v468 + 216), *(_QWORD **)(v468 + 232));
          v478 = *(_QWORD *)(v468 + 216);
          if (v478 != v472)
          {
            v479 = 3 * v478;
            v480 = v841 + 8 * v479;
            v470 = (uint64_t *)(*(_QWORD *)(v468 + 232) + 8 * v479);
            v481 = 24 * v472 - 8 * v479;
            do
            {
              v482 = re::FixedArray<re::GenericSRT<float>>::FixedArray(v470, v480);
              v480 += 24;
              v470 = v482 + 3;
              v481 -= 24;
            }
            while (v481);
          }
        }
        else
        {
          v470 = (uint64_t *)std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SkeletalPoseAssetData *,re::SkeletalPoseAssetData *,re::SkeletalPoseAssetData *,0>(v841, v841 + 24 * *((_QWORD *)&v839 + 1), *(_QWORD **)(v468 + 232));
          v473 = *(_QWORD *)(v468 + 216);
          if (v472 != v473)
          {
            v474 = 24 * v473 - 24 * v472;
            v475 = (_QWORD *)(*(_QWORD *)(v468 + 232) + 24 * v472 + 8);
            do
            {
              v470 = (uint64_t *)*(v475 - 1);
              if (v470)
              {
                if (*v475)
                {
                  v470 = (uint64_t *)(*(uint64_t (**)(uint64_t *, _QWORD))(*v470 + 40))(v470, v475[1]);
                  *v475 = 0;
                  v475[1] = 0;
                }
                *(v475 - 1) = 0;
              }
              v475 += 3;
              v474 -= 24;
            }
            while (v474);
          }
        }
        *(_QWORD *)(v468 + 216) = v472;
      }
      *(_QWORD *)(v468 + 240) = 0;
      *(_QWORD *)(v468 + 272) = 0;
      *(_QWORD *)(v468 + 248) = 0;
      *(_QWORD *)(v468 + 256) = 0;
      *(_DWORD *)(v468 + 264) = 0;
      if (*((_QWORD *)&v841 + 1))
      {
        v483 = *((_QWORD *)&v842 + 1);
        *(_QWORD *)(v468 + 240) = *((_QWORD *)&v841 + 1);
        re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)(v468 + 240), v483);
        ++*(_DWORD *)(v468 + 264);
        v484 = *((_QWORD *)&v842 + 1);
        if (*((_QWORD *)&v842 + 1) >= *(_QWORD *)(v468 + 256))
        {
          re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::setCapacity((_QWORD *)(v468 + 240), *((unint64_t *)&v842 + 1));
          v470 = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::FixedArray<re::Matrix4x4<float>> *,re::FixedArray<re::Matrix4x4<float>> *,re::FixedArray<re::Matrix4x4<float>> *,0>((uint64_t *)v844, (uint64_t *)(v844 + 24 * *(_QWORD *)(v468 + 256)), *(uint64_t **)(v468 + 272));
          v488 = *(_QWORD *)(v468 + 256);
          if (v488 != v484)
          {
            v489 = 3 * v488;
            v490 = v844 + 8 * v489;
            v470 = (uint64_t *)(*(_QWORD *)(v468 + 272) + 8 * v489);
            v491 = 24 * v484 - 8 * v489;
            do
            {
              v492 = re::FixedArray<re::Matrix4x4<float>>::FixedArray(v470, v490);
              v490 += 24;
              v470 = v492 + 3;
              v491 -= 24;
            }
            while (v491);
          }
        }
        else
        {
          v470 = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::FixedArray<re::Matrix4x4<float>> *,re::FixedArray<re::Matrix4x4<float>> *,re::FixedArray<re::Matrix4x4<float>> *,0>((uint64_t *)v844, (uint64_t *)(v844 + 24 * *((_QWORD *)&v842 + 1)), *(uint64_t **)(v468 + 272));
          v485 = *(_QWORD *)(v468 + 256);
          if (v484 != v485)
          {
            v486 = 24 * v485 - 24 * v484;
            v487 = (_QWORD *)(*(_QWORD *)(v468 + 272) + 24 * v484 + 8);
            do
            {
              v470 = (uint64_t *)*(v487 - 1);
              if (v470)
              {
                if (*v487)
                {
                  v470 = (uint64_t *)(*(uint64_t (**)(uint64_t *, _QWORD))(*v470 + 40))(v470, v487[1]);
                  *v487 = 0;
                  v487[1] = 0;
                }
                *(v487 - 1) = 0;
              }
              v487 += 3;
              v486 -= 24;
            }
            while (v486);
          }
        }
        *(_QWORD *)(v468 + 256) = v484;
      }
      *(_QWORD *)(v468 + 312) = 0;
      *(_QWORD *)(v468 + 288) = 0;
      *(_QWORD *)(v468 + 296) = 0;
      *(_QWORD *)(v468 + 280) = 0;
      *(_DWORD *)(v468 + 304) = 0;
      if (*((_QWORD *)&v844 + 1))
      {
        v710.i64[0] = (uint64_t)v465;
        v493 = *((_QWORD *)&v845 + 1);
        *(_QWORD *)(v468 + 280) = *((_QWORD *)&v844 + 1);
        re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity((_QWORD *)(v468 + 280), v493);
        ++*(_DWORD *)(v468 + 304);
        v494 = *((_QWORD *)&v845 + 1);
        if (*((_QWORD *)&v845 + 1) >= *(_QWORD *)(v468 + 296))
        {
          re::DynamicArray<re::SkeletalPoseMeshMap>::setCapacity((_QWORD *)(v468 + 280), *((unint64_t *)&v845 + 1));
          v470 = (uint64_t *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SkeletalPoseMeshMap *,re::SkeletalPoseMeshMap *,re::SkeletalPoseMeshMap *>(v847, &v847[8 * *(_QWORD *)(v468 + 296)], *(_QWORD *)(v468 + 312));
          v498 = *(_QWORD *)(v468 + 296);
          if (v498 != v494)
          {
            v499 = v847;
            v500 = &v847[8 * v494];
            v501 = *(_QWORD *)(v468 + 312);
            v502 = v498 << 6;
            do
            {
              v503 = (char *)v499 + v502;
              *(_BYTE *)(v501 + v502) = *((_BYTE *)v499 + v502);
              re::StringID::StringID((re::StringID *)(v501 + v502 + 8), (const StringID *)((char *)v499 + v502 + 8));
              re::StringID::StringID((re::StringID *)(v501 + v502 + 24), (const StringID *)((char *)v499 + v502 + 24));
              v470 = (uint64_t *)re::StringID::StringID((re::StringID *)(v501 + v502 + 40), (const StringID *)((char *)v499 + v502 + 40));
              *(_QWORD *)(v501 + v502 + 56) = *(unint64_t *)((char *)v499 + v502 + 56);
              v499 += 8;
              v501 += 64;
            }
            while (v503 + 64 != (char *)v500);
          }
        }
        else
        {
          v470 = (uint64_t *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SkeletalPoseMeshMap *,re::SkeletalPoseMeshMap *,re::SkeletalPoseMeshMap *>(v847, &v847[8 * *((_QWORD *)&v845 + 1)], *(_QWORD *)(v468 + 312));
          v495 = *(_QWORD *)(v468 + 296);
          if (v494 != v495)
          {
            v496 = (v495 << 6) - (v494 << 6);
            v497 = (re::StringID *)(*(_QWORD *)(v468 + 312) + (v494 << 6) + 40);
            do
            {
              re::StringID::destroyString(v497);
              re::StringID::destroyString((re::StringID *)((char *)v497 - 16));
              re::StringID::destroyString((re::StringID *)((char *)v497 - 32));
              v497 = (re::StringID *)((char *)v497 + 64);
              v496 -= 64;
            }
            while (v496);
          }
        }
        *(_QWORD *)(v468 + 296) = v494;
        v11 = (unint64_t)&v797;
      }
      v504 = re::SkeletalPoseDefinitionAsset::assetType((re::SkeletalPoseDefinitionAsset *)v470);
      v505 = re::ImportAssetTable::addAsset(v464, (uint64_t)v465, (uint64_t)v466, (void *)v468, (re **)v504);
      if ((*(_BYTE *)(v505 + 8) & 1) != 0)
        v506 = *(re::AssetPath **)(v505 + 16);
      else
        v506 = (re::AssetPath *)(v505 + 9);
      if (buf[0].n128_u64[0] && (buf[0].n128_u8[8] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)buf[0].n128_u64[0] + 40))();
    }
    *((_BYTE *)v664 + 56) = v702;
    v507 = re::AssetHandle::operator=((uint64_t *)v664 + 8, &v791);
    v508 = re::globalAllocators((re *)v507);
    v509 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v508[2] + 32))(v508[2], 112, 8);
    *(_OWORD *)(v509 + 32) = 0u;
    *(_OWORD *)(v509 + 48) = 0u;
    *(_OWORD *)(v509 + 64) = 0u;
    *(_OWORD *)v509 = 0u;
    *(_OWORD *)(v509 + 16) = 0u;
    *(_QWORD *)(v509 + 80) = 0;
    *(_QWORD *)(v509 + 88) = 0;
    *(_QWORD *)(v509 + 32) = &str_110;
    *(_QWORD *)(v509 + 40) = 0;
    *(_QWORD *)(v509 + 48) = 0;
    *(_QWORD *)(v509 + 56) = 0;
    *(_DWORD *)(v509 + 64) = 0;
    *(_QWORD *)(v509 + 96) = 0;
    *(_QWORD *)(v509 + 104) = 0;
    re::TimelineGroupBuilder::createTimelineAsset((re::TimelineGroupBuilder *)buf, (const char *)&v797, "default scene animation");
    v510 = *(_QWORD *)(v509 + 8);
    v511 = *(_QWORD *)(v509 + 16);
    *(_QWORD *)(v509 + 8) = buf[0].n128_u64[1];
    buf[0].n128_u64[1] = v510;
    v512 = *(_QWORD *)v509;
    *(_QWORD *)v509 = 0;
    *(_QWORD *)v509 = buf[0].n128_u64[0];
    *(_QWORD *)(v509 + 16) = buf[1].n128_u64[0];
    buf[0].n128_u64[0] = v512;
    buf[1].n128_u64[0] = v511;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
    re::StringID::operator=((unint64_t *)(v509 + 24), &v757);
    *(_BYTE *)(v509 + 80) = v702;
    re::AssetHandle::operator=((uint64_t *)(v509 + 88), &v791);
    re::DynamicString::format((re::DynamicString *)"%s_defaultEntityScene", (re::DynamicString *)v808, v754);
    v513 = *(_anonymous_namespace_ **)(a3 + 104);
    if ((v808[8] & 1) != 0)
      v514 = *(const char **)&v808[16];
    else
      v514 = &v808[9];
    v515 = strlen(v514);
    v516 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
    v517 = re::ImportAssetTable::addAsset(v513, (uint64_t)v514, v515, (void *)v509, (re **)v516);
    buf[0].n128_u64[0] = 0;
    buf[0].n128_u64[1] = (unint64_t)&str_110;
    memset(&buf[1], 0, 24);
    re::DynamicArray<re::NamedAnimationLibraryEntry>::add((_QWORD *)v685 + 10, (uint64_t *)buf);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&buf[1]);
    re::StringID::destroyString((re::StringID *)buf);
    v518 = *((_QWORD *)v685 + 14) + 40 * *((_QWORD *)v685 + 12);
    re::StringID::destroyString((re::StringID *)(v518 - 40));
    *(_QWORD *)(v518 - 40) = 0x7AAA0A2456EA1222;
    *(_QWORD *)(v518 - 32) = "default scene animation";
    v520 = (re::DynamicString *)(v518 - 24);
    if ((*(_BYTE *)(v517 + 8) & 1) != 0)
      v521 = *(re::AssetPath **)(v517 + 16);
    else
      v521 = (re::AssetPath *)(v517 + 9);
    memset(buf, 0, 24);
    re::DynamicArray<re::AssetHandle>::add((_QWORD *)v685 + 15, (uint64_t *)buf);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
    v523 = (re::DynamicString *)(*((_QWORD *)v685 + 19) + 24 * *((_QWORD *)v685 + 17) - 24);
    if ((*(_BYTE *)(v517 + 8) & 1) != 0)
      v524 = *(re::AssetPath **)(v517 + 16);
    else
      v524 = (re::AssetPath *)(v517 + 9);
    v526 = re::globalAllocators(v525);
    v527 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v526[2] + 32))(v526[2], 112, 8);
    *(_OWORD *)(v527 + 32) = 0u;
    *(_OWORD *)(v527 + 48) = 0u;
    *(_OWORD *)(v527 + 64) = 0u;
    *(_OWORD *)v527 = 0u;
    *(_OWORD *)(v527 + 16) = 0u;
    *(_QWORD *)(v527 + 80) = 0;
    *(_QWORD *)(v527 + 88) = 0;
    *(_QWORD *)(v527 + 32) = &str_110;
    *(_QWORD *)(v527 + 48) = 0;
    *(_QWORD *)(v527 + 56) = 0;
    *(_DWORD *)(v527 + 64) = 0;
    *(_QWORD *)(v527 + 40) = 0;
    a6 = v527 + 40;
    *(_QWORD *)(v527 + 96) = 0;
    *(_QWORD *)(v527 + 104) = 0;
    j = (unint64_t)"default subtree animation";
    re::TimelineGroupBuilder::createTimelineAsset((re::TimelineGroupBuilder *)buf, v718, "default subtree animation");
    v528 = *(_QWORD *)(v527 + 8);
    v529 = *(_QWORD *)(v527 + 16);
    *(_QWORD *)(v527 + 8) = buf[0].n128_u64[1];
    buf[0].n128_u64[1] = v528;
    v530 = *(_QWORD *)v527;
    *(_QWORD *)v527 = 0;
    *(_QWORD *)v527 = buf[0].n128_u64[0];
    *(_QWORD *)(v527 + 16) = buf[1].n128_u64[0];
    buf[0].n128_u64[0] = v530;
    buf[1].n128_u64[0] = v529;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
    re::StringID::operator=((unint64_t *)(v527 + 24), (uint64_t *)v664);
    re::DynamicArray<re::AnimationSceneEntityData>::operator=(v527 + 40, (uint64_t *)v664 + 2);
    *(_BYTE *)(v527 + 80) = *((_BYTE *)v664 + 56);
    re::AssetHandle::operator=((uint64_t *)(v527 + 88), (uint64_t *)v664 + 8);
    re::DynamicString::format((re::DynamicString *)"%s_defaultAnimationScene", (re::DynamicString *)v812, v754);
    v531 = *(_anonymous_namespace_ **)(a3 + 104);
    if ((v812[8] & 1) != 0)
      v532 = *(const char **)&v813[4];
    else
      v532 = &v812[9];
    v12 = strlen(v532);
    v533 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
    v534 = re::ImportAssetTable::addAsset(v531, (uint64_t)v532, v12, (void *)v527, (re **)v533);
    memset(buf, 0, 24);
    re::DynamicArray<re::AssetHandle>::add((_QWORD *)v685 + 15, (uint64_t *)buf);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
    v536 = (re::DynamicString *)(*((_QWORD *)v685 + 19) + 24 * *((_QWORD *)v685 + 17) - 24);
    if ((*(_BYTE *)(v534 + 8) & 1) != 0)
      v537 = *(re::AssetPath **)(v534 + 16);
    else
      v537 = (re::AssetPath *)(v534 + 9);
    v10 = (unint64_t)buf;
    buf[0].n128_u64[0] = 0;
    buf[0].n128_u64[1] = (unint64_t)&str_110;
    memset(&buf[1], 0, 24);
    re::DynamicArray<re::NamedAnimationLibraryEntry>::add((_QWORD *)v685 + 10, (uint64_t *)buf);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&buf[1]);
    re::StringID::destroyString((re::StringID *)buf);
    v538 = *((_QWORD *)v685 + 14) + 40 * *((_QWORD *)v685 + 12);
    re::StringID::destroyString((re::StringID *)(v538 - 40));
    *(_QWORD *)(v538 - 40) = 0x68ABFF436306FF46;
    *(_QWORD *)(v538 - 32) = "default subtree animation";
    v540 = (re::DynamicString *)(v538 - 24);
    if ((*(_BYTE *)(v534 + 8) & 1) != 0)
      v541 = *(re::AssetPath **)(v534 + 16);
    else
      v541 = (re::AssetPath *)(v534 + 9);
    if (*(_QWORD *)v812 && (v812[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)v812 + 40))();
    v477 = a5;
    if (*(_QWORD *)v808 && (v808[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)v808 + 40))();
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v791);
    re::BucketArray<re::TimelineGroupBuilder::TimelineData,8ul>::deinit((uint64_t)&v800.i64[1]);
    if (v800.i64[1])
    {
      v542 = v801.i32[2];
      if ((v801.i8[8] & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v800.i64[1] + 40))();
        v542 = v801.i32[2];
      }
      v800.i64[1] = 0;
      v801.i64[0] = 0;
      v801.i32[2] = (v542 | 1) + 2;
    }
    if (v797.n128_u64[1] && (v798.i8[0] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v797.n128_u64[1] + 40))();
    v476 = v679;
    if (!a9)
      goto LABEL_666;
LABEL_655:
    if (!*(_QWORD *)(v477 + 40))
      goto LABEL_865;
    if (*(_QWORD *)(*(_QWORD *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](v477, 0) + 96))
    {
      if (!*(_QWORD *)(v477 + 40))
        goto LABEL_866;
      v544 = (re *)re::BucketArray<NS::SharedPtr<MTL::Buffer>,8ul>::operator[](v477, 0);
      v545 = *(const char **)v544;
      v12 = (size_t)v685;
      if (!v685)
      {
        v546 = re::globalAllocators(v544);
        v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v546[2] + 32))(v546[2], 224, 8);
        *(_OWORD *)(v12 + 176) = 0u;
        *(_OWORD *)(v12 + 192) = 0u;
        *(_OWORD *)v12 = 0u;
        *(_OWORD *)(v12 + 16) = 0u;
        *(_OWORD *)(v12 + 32) = 0u;
        *(_OWORD *)(v12 + 48) = 0u;
        *(_OWORD *)(v12 + 64) = 0u;
        *(_OWORD *)(v12 + 80) = 0u;
        *(_OWORD *)(v12 + 96) = 0u;
        *(_OWORD *)(v12 + 112) = 0u;
        *(_OWORD *)(v12 + 128) = 0u;
        *(_OWORD *)(v12 + 144) = 0u;
        *(_OWORD *)(v12 + 160) = 0u;
        *(_DWORD *)(v12 + 196) = 0x7FFFFFFF;
        *(_QWORD *)(v12 + 208) = 0;
        *(_QWORD *)(v12 + 216) = &str_110;
      }
      v547 = re::globalAllocators(v544);
      v548 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v547[2] + 32))(v547[2], 112, 8);
      *(_OWORD *)(v548 + 32) = 0u;
      *(_OWORD *)(v548 + 48) = 0u;
      *(_OWORD *)(v548 + 64) = 0u;
      *(_OWORD *)v548 = 0u;
      *(_OWORD *)(v548 + 16) = 0u;
      *(_QWORD *)(v548 + 80) = 0;
      *(_QWORD *)(v548 + 88) = 0;
      *(_QWORD *)(v548 + 32) = &str_110;
      *(_QWORD *)(v548 + 48) = 0;
      *(_QWORD *)(v548 + 56) = 0;
      *(_DWORD *)(v548 + 64) = 0;
      *(_QWORD *)(v548 + 40) = 0;
      *(_QWORD *)(v548 + 96) = 0;
      *(_QWORD *)(v548 + 104) = 0;
      re::TimelineGroupBuilder::createTimelineAsset((re::TimelineGroupBuilder *)&v797, v545, "global scene animation");
      v549 = *(_QWORD *)(v548 + 8);
      v550 = *(_QWORD *)(v548 + 16);
      *(_QWORD *)(v548 + 8) = v797.n128_u64[1];
      v797.n128_u64[1] = v549;
      v551 = *(_QWORD *)v548;
      *(_QWORD *)v548 = 0;
      *(_QWORD *)v548 = v797.n128_u64[0];
      *(_QWORD *)(v548 + 16) = v798.i64[0];
      v797.n128_u64[0] = v551;
      v798.i64[0] = v550;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v797);
      v552 = *(_QWORD *)v656;
      v553 = *(_QWORD *)(v656 + 8);
      *(_QWORD *)v656 = 0;
      *(_QWORD *)(v656 + 8) = &str_110;
      v554 = *(_QWORD *)(v548 + 24);
      v555 = *(_QWORD *)(v548 + 32);
      *(_QWORD *)(v548 + 24) = v552;
      *(_QWORD *)(v548 + 32) = v553;
      v797.n128_u64[1] = v555;
      v797.n128_u64[0] = v552 & 0xFFFFFFFFFFFFFFFELL | v554 & 1;
      re::StringID::destroyString((re::StringID *)&v797);
      re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v548 + 40, v656 + 16);
      *(_BYTE *)(v548 + 80) = *(_BYTE *)(v656 + 56);
      v556 = *(_QWORD *)(v548 + 96);
      *(_QWORD *)(v548 + 96) = *(_QWORD *)(v656 + 72);
      *(_QWORD *)(v656 + 72) = v556;
      v557 = *(_QWORD *)(v548 + 88);
      *(_QWORD *)(v548 + 88) = 0;
      *(_QWORD *)(v548 + 88) = *(_QWORD *)(v656 + 64);
      *(_QWORD *)(v656 + 64) = v557;
      v558 = *(_QWORD *)(v548 + 104);
      *(_QWORD *)(v548 + 104) = *(_QWORD *)(v656 + 80);
      *(_QWORD *)(v656 + 80) = v558;
      re::DynamicString::format((re::DynamicString *)"%s_globalAnimationScene", (re::DynamicString *)v812, v754);
      v559 = *(_anonymous_namespace_ **)(a3 + 104);
      if ((v812[8] & 1) != 0)
        v560 = *(const char **)&v813[4];
      else
        v560 = &v812[9];
      v561 = strlen(v560);
      v562 = re::BasicAsset<re::AnimationScene,&re::kAnimationSceneAssetName,&re::kAnimationSceneAssetExtension>::assetType();
      v563 = re::ImportAssetTable::addAsset(v559, (uint64_t)v560, v561, (void *)v548, (re **)v562);
      v797 = 0uLL;
      v798.i64[0] = 0;
      re::DynamicArray<re::AssetHandle>::insert((_QWORD *)(v12 + 120), 0, (uint64_t *)&v797);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v797);
      a6 = v12;
      v565 = *(re::DynamicString **)(v12 + 152);
      if ((*(_BYTE *)(v563 + 8) & 1) != 0)
        v566 = *(re::AssetPath **)(v563 + 16);
      else
        v566 = (re::AssetPath *)(v563 + 9);
      buf[0].n128_u64[0] = 0;
      buf[0].n128_u64[1] = (unint64_t)&str_110;
      memset(&buf[1], 0, 24);
      v567 = *(_QWORD *)(v12 + 96);
      if (v567 == -1)
      {
LABEL_867:
        *(_QWORD *)v852 = 0;
        *(_OWORD *)(v11 + 48) = 0u;
        *(_OWORD *)(v11 + 64) = 0u;
        *(_OWORD *)(v11 + 16) = 0u;
        *(_OWORD *)(v11 + 32) = 0u;
        *(_OWORD *)v11 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v808 = 136315906;
        *(_QWORD *)(v11 + 180) = "insert";
        *(_WORD *)&v808[12] = 1024;
        *(_DWORD *)(v11 + 190) = 887;
        *(_WORD *)&v808[18] = 2048;
        *(_QWORD *)(v11 + 196) = 0;
        v809 = 2048;
        *(_QWORD *)(v11 + 206) = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v568 = v12;
      if (v567 >= *(_QWORD *)(v12 + 88))
      {
        re::DynamicArray<re::NamedAnimationLibraryEntry>::growCapacity((_QWORD *)(v12 + 80), v567 + 1);
        v568 = v12;
        v567 = *(_QWORD *)(v12 + 96);
      }
      v569 = *(_QWORD **)(v568 + 112);
      v570 = &v569[5 * v567];
      if (v567)
      {
        v571 = &v569[5 * v567];
        *v570 = *(v571 - 5);
        v571[3] = 0;
        v571[4] = 0;
        v572 = *((_OWORD *)v571 - 2);
        *(v571 - 5) = 0;
        *(v571 - 4) = &str_110;
        *(_OWORD *)(v570 + 1) = v572;
        v573 = *(v571 - 2);
        v574 = *(v571 - 1);
        *(v571 - 3) = 0;
        *(v571 - 2) = 0;
        v571[3] = v573;
        v571[4] = v574;
        *(v571 - 1) = 0;
        v569 = *(_QWORD **)(v568 + 112);
        v575 = *(_QWORD *)(v568 + 96);
        if (&v569[5 * v575 - 5] != v569)
        {
          v576 = 40 * v575;
          v577 = 40;
          do
          {
            v12 = (size_t)&v569[(unint64_t)v576 / 8];
            v578 = v569[(unint64_t)v576 / 8 - 10];
            v579 = v569[(unint64_t)v576 / 8 - 9];
            *(_QWORD *)(v12 - 80) = 0;
            *(_QWORD *)(v12 - 72) = &str_110;
            v580 = v569[(unint64_t)v576 / 8 - 4];
            v581 = v578 & 0xFFFFFFFFFFFFFFFELL | v569[(unint64_t)v576 / 8 - 5] & 1;
            *(_QWORD *)(v12 - 32) = v579;
            v797.n128_u64[1] = v580;
            v797.n128_u64[0] = v581;
            *(_QWORD *)(v12 - 40) = v578;
            re::StringID::destroyString((re::StringID *)&v797);
            v582 = *(_OWORD *)&v569[(unint64_t)v576 / 8 - 3];
            *(_OWORD *)(v12 - 24) = *(_OWORD *)(v12 - 64);
            *(_OWORD *)(v12 - 64) = v582;
            v583 = v569[(unint64_t)v576 / 8 - 1];
            *(_QWORD *)(v12 - 8) = *(_QWORD *)(v12 - 48);
            *(_QWORD *)(v12 - 48) = v583;
            v569 -= 5;
            v577 += 40;
          }
          while (v576 != v577);
          v569 = *(_QWORD **)(a6 + 112);
          v10 = (unint64_t)buf;
        }
        v584 = buf[0];
        buf[0].n128_u64[1] = (unint64_t)&str_110;
        buf[0].n128_u64[0] = 0;
        v585 = v569[1];
        v586 = v584.n128_u64[0] & 0xFFFFFFFFFFFFFFFELL | *v569 & 1;
        v569[1] = v584.n128_u64[1];
        v797.n128_u64[1] = v585;
        v797.n128_u64[0] = v586;
        *v569 = v584.n128_u64[0];
        re::StringID::destroyString((re::StringID *)&v797);
        v587 = v569[3];
        v569[3] = buf[1].n128_u64[1];
        buf[1].n128_u64[1] = v587;
      }
      else
      {
        v588 = buf[0].n128_u8[0];
        *v570 = *v570 & 0xFFFFFFFFFFFFFFFELL | buf[0].n128_u8[0] & 1;
        *v570 = buf[0].n128_u64[0] & 0xFFFFFFFFFFFFFFFELL | v588 & 1;
        v570[1] = buf[0].n128_u64[1];
        buf[0].n128_u64[1] = (unint64_t)&str_110;
        buf[0].n128_u64[0] = 0;
        v569[3] = 0;
        v569[4] = 0;
        v569[2] = 0;
        v569[3] = buf[1].n128_u64[1];
        buf[1].n128_u64[1] = 0;
      }
      v589 = v569[2];
      v569[2] = 0;
      v569[2] = buf[1].n128_u64[0];
      v590 = v569[4];
      v569[4] = buf[2].n128_u64[0];
      buf[1].n128_u64[0] = v589;
      buf[2].n128_u64[0] = v590;
      ++*(_QWORD *)(a6 + 96);
      ++*(_DWORD *)(a6 + 104);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&buf[1]);
      re::StringID::destroyString((re::StringID *)buf);
      v591 = *(_QWORD **)(a6 + 112);
      re::StringID::destroyString((re::StringID *)v591);
      *v591 = 0x7802B65BF0AE64E6;
      v591[1] = "global scene animation";
      if ((*(_BYTE *)(v563 + 8) & 1) != 0)
        v593 = *(re::AssetPath **)(v563 + 16);
      else
        v593 = (re::AssetPath *)(v563 + 9);
      if (*(_QWORD *)v812 && (v812[8] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)v812 + 40))();
      v33 = a6;
    }
    else
    {
LABEL_666:
      v33 = (unint64_t)v685;
      if (!v685)
        goto LABEL_699;
    }
    re::DynamicString::format((re::DynamicString *)"%s_animationlibrary", (re::DynamicString *)&v797, v754, v655);
    v594 = (re::AnimationLibraryAsset *)re::ecs2::EntityAssetData::addComponent<re::ecs2::AnimationLibraryComponent>(&v756);
    v595 = (re::AnimationLibraryAsset *)((char *)v594 + 32);
    v596 = *(_anonymous_namespace_ **)(a3 + 104);
    if ((v797.n128_u8[8] & 1) != 0)
      v597 = (__int8 *)v798.i64[0];
    else
      v597 = &v797.n128_i8[9];
    if ((v797.n128_u8[8] & 1) != 0)
      j = v797.n128_u64[1] >> 1;
    else
      j = v797.n128_u8[8] >> 1;
    v598 = re::AnimationLibraryAsset::assetType(v594);
    v599 = re::ImportAssetTable::addAsset(v596, (uint64_t)v597, j, (void *)v33, (re **)v598);
    if ((*(_BYTE *)(v599 + 8) & 1) != 0)
      v600 = *(re::AssetPath **)(v599 + 16);
    else
      v600 = (re::AssetPath *)(v599 + 9);
    re::ecs2::EntityAssetData::addComponent<re::ecs2::AnimationComponent>(&v756);
    if (v797.n128_u64[0] && (v797.n128_u8[8] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v797.n128_u64[0] + 40))();
    v476 = v679;
LABEL_699:
    v601 = (unint64_t *)re::BucketArray<unsigned long,32ul>::operator[](v657, v665);
    v602 = (_anonymous_namespace_ *)re::BucketArray<re::USDImportContext::NodeStackItem,32ul>::operator[](v476, *v601);
    v603 = v602;
    if (*((_QWORD *)v602 + 117))
    {
      v604 = re::ecs2::EntityAssetData::addComponent<re::ecs2::AudioPlayerComponent>(&v756);
      v605 = (uint64_t)v604;
      if (!v760[0])
      {
        re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v669, 0);
        ++v762;
      }
      v606 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                   + 7)
                                                                + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AudioAnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 248, 0);
      v607 = re::ecs2::AudioAnimationComponent::AudioAnimationComponent((re::ecs2::AudioAnimationComponent *)v606);
      v797.n128_u64[0] = *(_QWORD *)((*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v608 + 40))(v608, v607)
                                   + 24) >> 1;
      v797.n128_u64[1] = v606;
      v798.i8[0] = 1;
      re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add(v669, &v797);
      v609 = (int32x2_t *)*((_QWORD *)v603 + 117);
      *(int32x2_t *)(v606 + 56) = vrev64_s32(v609[2]);
      if (*(_BYTE *)(*(_QWORD *)(v680 + 40) + 96))
      {
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v797, (const re::AssetHandle *)&v609[6]);
        re::AssetHandle::AssetHandle((re::AssetHandle *)v712, (const re::AssetHandle *)&v797);
        re::ecs2::AudioPlayerComponent::registerAudioAsset(v605, (re::AssetHandle *)v712);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v712);
        re::AssetHandle::operator=((uint64_t *)(v606 + 72), (uint64_t *)&v797);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v797);
      }
    }
    v610 = (const char *)*((_QWORD *)v603 + 6);
    v611 = re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a3 + 312, (uint64_t)&v797);
    if (v611)
    {
      v612 = v611;
      if (!v760[0] || !v761)
        goto LABEL_712;
      v613 = (re::ecs2::AudioPlayerComponent **)(v763[0] + 8);
      v614 = 24 * v761;
      while (*(v613 - 1) != (re::ecs2::AudioPlayerComponent *)(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                + 3) >> 1))
      {
        v613 += 3;
        v614 -= 24;
        if (!v614)
          goto LABEL_712;
      }
      v615 = *v613;
      if (!*v613)
LABEL_712:
        v615 = re::ecs2::EntityAssetData::addComponent<re::ecs2::AudioPlayerComponent>(&v756);
      v616 = *(_QWORD *)(v612 + 16);
      if (v616)
      {
        v617 = *(const re::AssetHandle **)(v612 + 32);
        v618 = 24 * v616;
        do
        {
          re::AssetHandle::AssetHandle((re::AssetHandle *)v711, v617);
          re::ecs2::AudioPlayerComponent::registerAudioAsset((uint64_t)v615, (re::AssetHandle *)v711);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v711);
          v617 = (const re::AssetHandle *)((char *)v617 + 24);
          v618 -= 24;
        }
        while (v618);
      }
    }
    if (v797.n128_u64[0] && (v797.n128_u8[8] & 1) != 0)
      (*(void (**)(unint64_t))(*(_QWORD *)v797.n128_u64[0] + 40))(v797.n128_u64[0]);
    *(_BYTE *)a1 = 1;
    re::ecs2::EntityAssetData::EntityAssetData((uint64_t)a1 + 8, (uint64_t)&v756);
    re::BucketArray<re::TimelineGroupBuilder::TimelineData,8ul>::deinit((uint64_t)v721);
    if (v721[0])
    {
      v619 = v722;
      if ((v722 & 1) == 0)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v721[0] + 40))(v721[0]);
        v619 = v722;
      }
      v721[0] = 0;
      v721[1] = 0;
      v722 = (v619 | 1) + 2;
    }
    if (v719 && (v720 & 1) != 0)
      (*(void (**)(uint64_t))(*(_QWORD *)v719 + 40))(v719);
    v166 = (__n128 *)v724;
    if (v728)
    {
      v620 = 0;
      while (v724 > v620 >> 3)
      {
        if (v728 == ++v620)
          goto LABEL_732;
      }
LABEL_838:
      v452 = v620 >> 3;
      *(_QWORD *)v808 = 0;
      *(_OWORD *)(v11 + 48) = 0u;
      *(_OWORD *)(v11 + 64) = 0u;
      *(_OWORD *)(v11 + 16) = 0u;
      *(_OWORD *)(v11 + 32) = 0u;
      *(_OWORD *)v11 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      buf[0].n128_u32[0] = 136315906;
      *(_QWORD *)(v10 + 4) = "operator[]";
      buf[0].n128_u16[6] = 1024;
      *(_DWORD *)(v10 + 14) = 858;
      buf[1].n128_u16[1] = 2048;
      *(_QWORD *)(v10 + 20) = v452;
      buf[1].n128_u16[6] = 2048;
      *(_QWORD *)(v10 + 30) = v166;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_839:
      *(_QWORD *)v808 = 0;
      *(_OWORD *)(v11 + 48) = 0u;
      *(_OWORD *)(v11 + 64) = 0u;
      *(_OWORD *)(v11 + 16) = 0u;
      *(_OWORD *)(v11 + 32) = 0u;
      *(_OWORD *)v11 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      buf[0].n128_u32[0] = 136315906;
      *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"operator[]";
      buf[0].n128_u16[6] = 1024;
      *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 858;
      buf[1].n128_u16[1] = 2048;
      *(unint64_t *)((char *)buf[1].n128_u64 + 4) = v452;
      buf[1].n128_u16[6] = 2048;
      *(unint64_t *)((char *)&buf[1].n128_u64[1] + 6) = (unint64_t)v166;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_840:
      *(_QWORD *)v808 = 0;
      *(_OWORD *)(v11 + 48) = 0u;
      *(_OWORD *)(v11 + 64) = 0u;
      *(_OWORD *)(v11 + 16) = 0u;
      *(_OWORD *)(v11 + 32) = 0u;
      *(_OWORD *)v11 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      buf[0].n128_u32[0] = 136315906;
      *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)"operator[]";
      buf[0].n128_u16[6] = 1024;
      *(unsigned __int32 *)((char *)&buf[0].n128_u32[3] + 2) = 858;
      buf[1].n128_u16[1] = 2048;
      *(unint64_t *)((char *)buf[1].n128_u64 + 4) = v33;
      buf[1].n128_u16[6] = 2048;
      *(unint64_t *)((char *)&buf[1].n128_u64[1] + 6) = (unint64_t)v166;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_841:
      v797.n128_u64[0] = 0;
      v829 = 0u;
      *(_OWORD *)v830 = 0u;
      v827 = 0u;
      v828 = 0u;
      v826 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v816 = 136315906;
      *(_QWORD *)&v816[4] = "operator[]";
      *(_WORD *)&v816[12] = 1024;
      *(_DWORD *)&v816[14] = 858;
      *(_WORD *)&v816[18] = 2048;
      *(_QWORD *)&v816[20] = v10;
      v817 = 2048;
      *(_QWORD *)v818 = v166;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_842:
      *(_QWORD *)v812 = 0;
      *(_OWORD *)(v10 + 48) = 0u;
      *(_OWORD *)(v10 + 64) = 0u;
      *(_OWORD *)(v10 + 16) = 0u;
      *(_OWORD *)(v10 + 32) = 0u;
      *(_OWORD *)v10 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v808 = 136315906;
      *(_QWORD *)&v808[4] = "operator[]";
      *(_WORD *)&v808[12] = 1024;
      *(_DWORD *)&v808[14] = 866;
      *(_WORD *)&v808[18] = 2048;
      *(_QWORD *)&v808[20] = v452;
      v809 = 2048;
      *(_QWORD *)v810 = v710.i64[0];
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_843;
    }
    if (v724)
    {
LABEL_732:
      v621 = v723;
      v622 = v727;
      v623 = v724 - 1;
      v624 = v725;
      do
      {
        v625 = &v726;
        if ((v624 & 1) == 0)
          v625 = v622;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v621 + 40))(v621, v625[v623]);
        v624 += 2;
        v725 = v624;
        --v623;
      }
      while (v623 != -1);
    }
    if (v723 && (v725 & 1) == 0)
      (*(void (**)(uint64_t))(*(_QWORD *)v723 + 40))(v723);
    v626 = v735;
    v33 = (unint64_t)&v733;
    if (v735)
    {
      j = 0;
      v166 = (__n128 *)v731;
      if ((v732 & 1) == 0)
        v33 = (unint64_t)v734;
      v10 = 40;
      do
      {
        v452 = j >> 3;
        if ((unint64_t)v166 <= j >> 3)
          goto LABEL_839;
        re::DynamicArray<re::GeomDeformer>::deinit(*(_QWORD *)(v33 + 8 * v452) + 40 * (j++ & 7));
      }
      while (v626 != j);
      v627 = v730;
    }
    else
    {
      v166 = (__n128 *)v731;
      v627 = v730;
      if (!v731)
      {
        if (!v730)
          goto LABEL_755;
        goto LABEL_753;
      }
    }
    v628 = v734;
    v629 = v732;
    v630 = &v166[-1].n128_i8[15];
    do
    {
      if ((v629 & 1) != 0)
        v631 = &v733;
      else
        v631 = v628;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v627 + 40))(v627, v631[(_QWORD)v630]);
      v629 += 2;
      v732 = v629;
      --v630;
    }
    while (v630 != (char *)-1);
    v731 = 0;
LABEL_753:
    if ((v732 & 1) == 0)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v627 + 40))(v627, v734);
LABEL_755:
    v632 = v742;
    if (v742)
    {
      v10 = 0;
      v166 = (__n128 *)v738;
      v452 = v739;
      j = (unint64_t)v741;
      if ((v739 & 1) != 0)
        v12 = (size_t)&v740;
      else
        v12 = (size_t)v741;
      a6 = 40;
      do
      {
        v33 = v10 >> 3;
        if ((unint64_t)v166 <= v10 >> 3)
          goto LABEL_840;
      }
      while (v632 != v10);
      v633 = v737;
    }
    else
    {
      v166 = (__n128 *)v738;
      v633 = v737;
      if (!v738)
      {
        v11 = (unint64_t)&v750;
        if (v737 && (v739 & 1) == 0)
LABEL_771:
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v633 + 40))(v633, v741);
LABEL_772:
        re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v824[8]);
        re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)&v821 + 8);
        re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)&v818[10]);
        re::DynamicArray<re::ModelWithLodsDescriptor>::deinit((uint64_t)v816);
        if (v744 && v745)
          (*(void (**)(uint64_t))(*(_QWORD *)v744 + 40))(v744);
        re::DynamicArray<re::MeshRigGraphIndex>::deinit((uint64_t)&v844 + 8);
        re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)&v841 + 8);
        re::DynamicArray<re::EvaluationSkeletalPoseInputHandle>::deinit((uint64_t)&v838 + 8);
        re::DynamicArray<re::FixedArray<re::StringID>>::deinit((uint64_t)&v835 + 8);
        re::DynamicArray<re::FixedArray<re::StringID>>::deinit((uint64_t)&v832 + 8);
        re::DynamicArray<re::StringID>::deinit((uint64_t)&v830[16]);
        re::DynamicArray<re::StringID>::deinit((uint64_t)&v828 + 8);
        re::DynamicArray<re::AssetHandle>::deinit((uint64_t)&v826);
        v636 = v752;
        if (v752)
        {
          v33 = 0;
          v166 = v748;
          v452 = v749;
          j = (unint64_t)v751;
          if ((v749 & 1) != 0)
            v12 = (size_t)&v750;
          else
            v12 = (size_t)v751;
          a6 = 40;
          do
          {
            v10 = v33 >> 3;
            if ((unint64_t)v166 <= v33 >> 3)
              goto LABEL_841;
            re::AssetHandle::~AssetHandle((re::AssetHandle *)(*(_QWORD *)(v12 + 8 * v10) + 40 * (v33++ & 7) + 16));
          }
          while (v636 != (__n128 *)v33);
          v637 = v747;
        }
        else
        {
          v166 = v748;
          v637 = v747;
          if (!v748)
          {
            if (!v747 || (v749 & 1) != 0)
              goto LABEL_792;
            goto LABEL_791;
          }
          j = (unint64_t)v751;
          LODWORD(v452) = v749;
        }
        v638 = &v166[-1].n128_i8[15];
        do
        {
          if ((v452 & 1) != 0)
            v639 = &v750;
          else
            v639 = (uint64_t *)j;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v637 + 40))(v637, v639[(_QWORD)v638]);
          LODWORD(v452) = v452 + 2;
          v749 = v452;
          --v638;
        }
        while (v638 != (char *)-1);
        v748 = 0;
        if ((v452 & 1) != 0)
          goto LABEL_792;
LABEL_791:
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v637 + 40))(v637, v751);
LABEL_792:
        re::ecs2::EntityAssetData::~EntityAssetData((re::ecs2::EntityAssetData *)&v756);
        if (v766 && v767)
          (*(void (**)(uint64_t))(*(_QWORD *)v766 + 40))(v766);
        if (v769 && v770)
          v640 = (*(double (**)(uint64_t))(*(_QWORD *)v769 + 40))(v769);
        re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v782[8], v640);
        re::DynamicArray<re::DynamicString>::deinit((uint64_t)v779);
        v641 = v777;
        if (v777)
        {
          v642 = 0;
          do
          {
            v643 = (_QWORD *)re::BucketArray<re::FixedArray<unsigned short>,16ul>::operator[]((uint64_t)&v772, v642);
            if (*v643)
            {
              if (v643[1])
              {
                (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v643 + 40))(*v643, v643[2]);
                v643[1] = 0;
                v643[2] = 0;
              }
              *v643 = 0;
            }
            ++v642;
          }
          while (v641 != v642);
        }
        for (; v773; --v773)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v772 + 40))(v772);
          v774 += 2;
        }
        if (v772 && (v774 & 1) == 0)
          (*(void (**)(uint64_t))(*(_QWORD *)v772 + 40))(v772);
        v644 = v789;
        if (v789)
        {
          v645 = 0;
          do
            re::BucketArray<re::USDImportContextPhysicsColliderData,8ul>::operator[]((uint64_t)&v784, v645++);
          while (v644 != v645);
        }
        if (v785)
        {
          v646 = v784;
          v647 = v788;
          v648 = v785 - 1;
          v649 = v786;
          do
          {
            if ((v649 & 1) != 0)
              v650 = &v787;
            else
              v650 = v647;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v646 + 40))(v646, v650[v648]);
            v649 += 2;
            v786 = v649;
            --v648;
          }
          while (v648 != -1);
        }
        result = v784;
        if (v784)
        {
          if ((v786 & 1) == 0)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v784 + 40))(v784);
        }
        return result;
      }
      j = (unint64_t)v741;
      LODWORD(v452) = v739;
    }
    v11 = (unint64_t)&v750;
    v634 = &v166[-1].n128_i8[15];
    do
    {
      if ((v452 & 1) != 0)
        v635 = &v740;
      else
        v635 = (uint64_t *)j;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v633 + 40))(v633, v635[(_QWORD)v634]);
      LODWORD(v452) = v452 + 2;
      v739 = v452;
      --v634;
    }
    while (v634 != (char *)-1);
    v738 = 0;
    if ((v452 & 1) == 0)
      goto LABEL_771;
    goto LABEL_772;
  }
  v812[0] = 0;
  *(_WORD *)&v812[2] = 257;
  v812[4] = 1;
  *(_DWORD *)&v812[5] = 0;
  v812[9] = 0;
  *(_DWORD *)v813 = 1036831949;
  *(_DWORD *)&v813[4] = 16843008;
  v815 = 0u;
  *(_OWORD *)&v813[12] = 0u;
  v814 = 0u;
  DWORD1(v815) = 0x7FFFFFFF;
  v812[10] = *(_BYTE *)(a3 + 161);
  v812[1] = *(_BYTE *)(a3 + 162);
  v812[6] = *(_BYTE *)(a3 + 165);
  v813[8] = v812[6];
  re::USDImportContext::generatePerMeshCompileOptions(v680, (uint64_t)v812, (uint64_t)v808);
  MeshAssetDataFromDescriptor = (re *)re::makeMeshAssetDataFromDescriptor(v816, (uint64_t)v808, (uint64_t)&v797);
  if (!v797.n128_u8[0])
  {
    v313 = (id)*re::pipelineLogObjects(MeshAssetDataFromDescriptor);
    if (os_log_type_enabled(v313, OS_LOG_TYPE_ERROR))
    {
      if ((v799.i8[0] & 1) != 0)
        v652 = (char *)v799.i64[1];
      else
        v652 = &v799.i8[1];
      buf[0].n128_u32[0] = 136315394;
      *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)v758;
      buf[0].n128_u16[6] = 2080;
      *(unint64_t *)((char *)&buf[0].n128_u64[1] + 6) = (unint64_t)v652;
      _os_log_error_impl(&dword_224FE9000, v313, OS_LOG_TYPE_ERROR, "Skipping mesh for entity '%s' due to error: %s", (uint8_t *)buf, 0x16u);
    }

LABEL_561:
    re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)&v797);
    v446 = re::HashTable<re::DynamicString,re::MeshCompileOptions,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v811, v445);
    v447 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v808[24], v446);
    *(double *)v37.i64 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v813[12], v447);
    goto LABEL_562;
  }
  v716 = 0;
  v714 = 0;
  *(_QWORD *)&v713.var0 = 0;
  v713.var1 = 0;
  v715 = 0;
  re::DynamicArray<re::AssetHandle>::resize((uint64_t)&v713, v804);
  v305 = v798.i64[1];
  if (v798.i64[1])
  {
    v306 = 0;
    i = (unsigned __int16)v780;
    do
    {
      j = v798.u64[1];
      if (v798.i64[1] <= v306)
        goto LABEL_846;
      v307 = v799.i64[1] + (v306 << 9);
      v308 = *(_QWORD *)(v307 + 208);
      if (v308)
      {
        v33 = v308 << 8;
        v10 = *(_QWORD *)(v307 + 224) + 56;
        do
        {
          j = *(unsigned __int16 *)v10;
          v303 = (_anonymous_namespace_ *)re::BucketArray<re::FixedArray<unsigned short>,16ul>::operator[]((uint64_t)&v772, v306);
          v309 = i;
          if (*((_QWORD *)v303 + 1) > j)
          {
            v303 = (_anonymous_namespace_ *)re::BucketArray<re::FixedArray<unsigned short>,16ul>::operator[]((uint64_t)&v772, v306);
            v12 = *((_QWORD *)v303 + 1);
            if (v12 <= j)
              goto LABEL_540;
            v309 = *(_WORD *)(*((_QWORD *)v303 + 2) + 2 * j);
          }
          *(_WORD *)v10 = v309;
          v10 += 256;
          v33 -= 256;
        }
        while (v33);
      }
      ++v306;
      v10 = (unint64_t)buf;
    }
    while (v306 != v305);
  }
  v12 = *(unsigned int *)&v824[40];
  if (*(_DWORD *)&v824[40])
  {
    a6 = 0;
    v310 = *(int **)&v824[24];
    v311 = a3;
    while (1)
    {
      v312 = *v310;
      v310 += 8;
      if (v312 < 0)
        break;
      if (*(unsigned int *)&v824[40] == ++a6)
      {
        a6 = *(unsigned int *)&v824[40];
        break;
      }
    }
  }
  else
  {
    a6 = 0;
    v311 = a3;
  }
  if (*(_DWORD *)&v824[40] != (_DWORD)a6)
  {
    v420 = a6;
    v421 = *(_QWORD *)&v824[24];
    v710.i64[0] = 136315138;
    v132 = (unint64_t)"Could not locate skeleton asset: %s";
    v11 = 24;
    do
    {
      v422 = *(_QWORD *)(v311 + 104);
      v423 = v421 + 32 * v420;
      v424 = *(const char **)(v423 + 16);
      v10 = strlen(v424);
      v425 = re::SkeletonAsset::assetType((re::SkeletonAsset *)v10);
      v426 = re::ImportAssetTable::importedAsset(v422, (uint64_t)v424, v10, (re **)v425);
      if (v426)
      {
        v33 = *(unsigned int *)(v423 + 24);
        j = (unint64_t)v714;
        v10 = (unint64_t)buf;
        if ((unint64_t)v714 <= v33)
          goto LABEL_851;
        if ((*(_BYTE *)(v426 + 8) & 1) != 0)
          v427 = *(re::AssetPath **)(v426 + 16);
        else
          v427 = (re::AssetPath *)(v426 + 9);
        v311 = a3;
        v429 = (re::DynamicString *)(v716 + 24 * v33);
      }
      else
      {
        v428 = (id)*re::pipelineLogObjects(0);
        if (os_log_type_enabled(v428, OS_LOG_TYPE_ERROR))
        {
          v432 = *(_QWORD *)(v423 + 16);
          buf[0].n128_u32[0] = 136315138;
          *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v432;
          _os_log_error_impl(&dword_224FE9000, v428, OS_LOG_TYPE_ERROR, "Could not locate skeleton asset: %s", (uint8_t *)buf, 0xCu);
        }

        v311 = a3;
      }
      v421 = *(_QWORD *)&v824[24];
      if (*(_DWORD *)&v824[40] <= (a6 + 1))
        v430 = (a6 + 1);
      else
        v430 = *(unsigned int *)&v824[40];
      while (1)
      {
        v420 = (a6 + 1);
        if ((_DWORD)v430 - 1 == (_DWORD)a6)
          break;
        LODWORD(a6) = a6 + 1;
        v431 = v420;
        if ((*(_DWORD *)(*(_QWORD *)&v824[24] + 32 * v420) & 0x80000000) != 0)
          goto LABEL_535;
      }
      v431 = v430;
LABEL_535:
      a6 = v431;
    }
    while ((_DWORD)v12 != (_DWORD)v431);
  }
  if (v685)
  {
    if (v742)
    {
      v668 = v798.i64[1];
      if (v798.i64[1])
      {
        v12 = 0;
        v710.i64[0] = (uint64_t)&v852[8];
        a6 = (unint64_t)&buf[0].n128_u64[1];
        v33 = (unint64_t)&buf[4].n128_u64[1];
        v10 = (unint64_t)v851;
        j = (unint64_t)&buf[2].n128_u64[1];
        while (1)
        {
          i = v798.u64[1];
          if (v798.i64[1] <= v12)
            goto LABEL_860;
          v314 = v799.i64[1] + (v12 << 9);
          v315 = *(_QWORD *)(v314 + 288);
          v674 = v315;
          i = v315 ? v315 : 1;
          v676 = i;
          if ((_DWORD)i && *((_QWORD *)v303 + 2) == i)
            break;
LABEL_394:
          ++v12;
          v311 = a3;
          if (v12 == v668)
            goto LABEL_425;
        }
        v11 = 0;
        v671 = (unint64_t *)(v314 + 288);
        v672 = (re::AssetHandle *)v12;
        v673 = (re::AssetHandle *)(v314 + 304);
        v699 = (unsigned int *)(v314 + 208);
        v690 = (_QWORD *)(v314 + 224);
        v695 = (_QWORD *)(v314 + 8);
        while (1)
        {
          i = *((_QWORD *)v303 + 2);
          if (i <= v11)
            goto LABEL_837;
          v317 = *((_QWORD *)v303 + 4);
          v706.i64[0] = v317 + 72 * v11;
          v304 = *(_QWORD *)(v706.i64[0] + 8);
          if (v304 == -1)
            goto LABEL_422;
          v318 = v317 + 72 * v11;
          v319 = *(_QWORD *)(v318 + 16);
          i = v318 + 16;
          if (v319 == -1)
            goto LABEL_422;
          v320 = (const StringID *)re::BucketArray<re::USDImportContextSkeletonData,4ul>::operator[](v680 + 56, v304);
          re::StringID::StringID((re::StringID *)&v795, v320 + 1);
          v321 = (const StringID *)re::BucketArray<re::USDImportContextSkeletalAnimationData,8ul>::operator[](v680 + 160, *(_QWORD *)i);
          re::StringID::StringID((re::StringID *)&v794, v321 + 1);
          v678 = v11;
          if (v674)
          {
            if (v11)
              break;
          }
          if (v674)
          {
            v11 = 0;
            i = *v671;
LABEL_406:
            v12 = v678;
            if (i <= v678)
              goto LABEL_847;
            v322 = *(unsigned int *)(*(_QWORD *)v673 + 12 * v678 + 8);
            goto LABEL_408;
          }
          v11 = 0;
          v322 = *v699;
LABEL_408:
          if (v11 < v322)
          {
            v700 = (re::AssetHandle *)(v317 + 72 * v678 + 48);
            i = (v11 << 8) | 0x50;
            while (1)
            {
              v852[0] = 1;
              v323 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"%s-0", (re::DynamicString *)&v791, *v695);
              v324 = (v792 & 1) != 0 ? v793 : (char *)&v792 + 1;
              *(_QWORD *)&v852[8] = 0;
              *(_QWORD *)&v852[16] = &str_110;
              v325 = *(_QWORD *)v699;
              if (*(_QWORD *)v699 <= v11)
                break;
              if (*(_QWORD *)(*v690 + i))
              {
                re::StringID::StringID((re::StringID *)&v852[24], (const StringID *)(*v690 + i - 8));
              }
              else
              {
                *(_QWORD *)&v852[24] = 0;
                *(_QWORD *)&v852[32] = &str_110;
              }
              if (v791 && (v792 & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v791 + 40))();
              buf[0].n128_u8[0] = v852[0];
              re::StringID::StringID((re::StringID *)&buf[0].n128_i8[8], (const StringID *)&v852[8]);
              v12 = (size_t)&buf[1].n128_u64[1];
              re::StringID::StringID((re::StringID *)&buf[1].n128_i8[8], (const StringID *)&v852[24]);
              re::StringID::StringID((re::StringID *)&buf[2].n128_i8[8], &v795);
              re::StringID::StringID((re::StringID *)&buf[3].n128_i8[8], &v794);
              re::AssetHandle::AssetHandle((re::AssetHandle *)&buf[4].n128_i8[8], v700);
              memset(v851, 0, 24);
              re::DynamicArray<re::SkeletalAnimationLibraryEntry>::add(v685, (uint64_t)buf);
              re::AssetHandle::~AssetHandle((re::AssetHandle *)v851);
              re::AssetHandle::~AssetHandle((re::AssetHandle *)&buf[4].n128_i8[8]);
              re::StringID::destroyString((re::StringID *)&buf[3].n128_i8[8]);
              re::StringID::destroyString((re::StringID *)&buf[2].n128_i8[8]);
              re::StringID::destroyString((re::StringID *)&buf[1].n128_i8[8]);
              re::StringID::destroyString((re::StringID *)&buf[0].n128_i8[8]);
              re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)((char *)v685 + 120), v700);
              buf[0].n128_u8[0] = v852[0];
              re::StringID::StringID((re::StringID *)&buf[0].n128_i8[8], (const StringID *)&v852[8]);
              re::StringID::StringID((re::StringID *)&buf[1].n128_i8[8], (const StringID *)&v852[24]);
              re::StringID::StringID((re::StringID *)&buf[2].n128_i8[8], &v795);
              buf[3].n128_u8[8] = 0;
              buf[3].n128_u32[3] = *(_DWORD *)v706.i64[0];
              re::DynamicArray<re::SkeletalPoseMeshMap>::add((_QWORD *)&v844 + 1, (uint64_t)buf);
              re::StringID::destroyString((re::StringID *)&buf[2].n128_i8[8]);
              re::StringID::destroyString((re::StringID *)&buf[1].n128_i8[8]);
              re::StringID::destroyString((re::StringID *)&buf[0].n128_i8[8]);
              re::StringID::destroyString((re::StringID *)&v852[24]);
              re::StringID::destroyString((re::StringID *)&v852[8]);
              ++v11;
              i += 256;
              if (v322 == v11)
                goto LABEL_421;
            }
LABEL_538:
            v796 = 0;
            i = (unint64_t)buf;
            memset(buf, 0, sizeof(buf));
            v128 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v853 = 136315906;
            *(_QWORD *)&v853[4] = "operator[]";
            *(_WORD *)&v853[12] = 1024;
            *(_DWORD *)&v853[14] = 797;
            *(_WORD *)&v853[18] = 2048;
            *(_QWORD *)&v853[20] = v11;
            v854 = 2048;
            v855 = v325;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_539:
            *(_QWORD *)v852 = 0;
            *(_OWORD *)(v10 + 48) = 0u;
            *(_OWORD *)(v10 + 64) = 0u;
            *(_OWORD *)(v10 + 16) = 0u;
            *(_OWORD *)(v10 + 32) = 0u;
            *(_OWORD *)v10 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v812 = 136315906;
            *(_QWORD *)&v812[4] = "operator[]";
            *(_WORD *)v813 = 1024;
            *(_DWORD *)&v813[2] = 789;
            *(_WORD *)&v813[6] = 2048;
            *(_QWORD *)&v813[8] = v33;
            *(_WORD *)&v813[16] = 2048;
            *(_QWORD *)&v813[18] = v128;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_540:
            *(_QWORD *)v853 = 0;
            v132 = (unint64_t)buf;
            memset(buf, 0, sizeof(buf));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v852 = 136315906;
            *(_QWORD *)&v852[4] = "operator[]";
            *(_WORD *)&v852[12] = 1024;
            *(_DWORD *)&v852[14] = 468;
            *(_WORD *)&v852[18] = 2048;
            *(_QWORD *)&v852[20] = j;
            *(_WORD *)&v852[28] = 2048;
            *(_QWORD *)&v852[30] = v12;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_541:
            *(_QWORD *)v852 = 0;
            *(_OWORD *)(v10 + 48) = 0u;
            *(_OWORD *)(v10 + 64) = 0u;
            *(_OWORD *)(v10 + 16) = 0u;
            *(_OWORD *)(v10 + 32) = 0u;
            *(_OWORD *)v10 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v812 = 136315906;
            *(_QWORD *)&v812[4] = "operator[]";
            *(_WORD *)v813 = 1024;
            *(_DWORD *)&v813[2] = 789;
            *(_WORD *)&v813[6] = 2048;
            *(_QWORD *)&v813[8] = v12;
            *(_WORD *)&v813[16] = 2048;
            *(_QWORD *)&v813[18] = j;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_542:
            *(_QWORD *)&v713.var0 = 0;
            *(_OWORD *)(v10 + 48) = 0u;
            *(_OWORD *)(v10 + 64) = 0u;
            *(_OWORD *)(v10 + 16) = 0u;
            *(_OWORD *)(v10 + 32) = 0u;
            *(_OWORD *)v10 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v812 = 136315906;
            *(_QWORD *)&v812[4] = "operator[]";
            *(_WORD *)v813 = 1024;
            *(_DWORD *)&v813[2] = 468;
            *(_WORD *)&v813[6] = 2048;
            *(_QWORD *)&v813[8] = v12;
            *(_WORD *)&v813[16] = 2048;
            *(_QWORD *)&v813[18] = j;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_543:
            *(_QWORD *)v852 = 0;
            *(_OWORD *)(v10 + 48) = 0u;
            *(_OWORD *)(v10 + 64) = 0u;
            *(_OWORD *)(v10 + 16) = 0u;
            *(_OWORD *)(v10 + 32) = 0u;
            *(_OWORD *)v10 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v812 = 136315906;
            *(_QWORD *)&v812[4] = "operator[]";
            *(_WORD *)v813 = 1024;
            *(_DWORD *)&v813[2] = 468;
            *(_WORD *)&v813[6] = 2048;
            *(_QWORD *)&v813[8] = v132;
            *(_WORD *)&v813[16] = 2048;
            *(_QWORD *)&v813[18] = i;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_544;
          }
LABEL_421:
          re::StringID::destroyString((re::StringID *)&v794);
          re::StringID::destroyString((re::StringID *)&v795);
          v12 = (size_t)v672;
          v11 = v678;
LABEL_422:
          if (++v11 == v676)
            goto LABEL_394;
        }
        v12 = v11 - 1;
        i = *v671;
        if (*v671 <= v11 - 1)
          goto LABEL_850;
        v11 = *(unsigned int *)(*(_QWORD *)v673 + 12 * v12 + 8);
        goto LABEL_406;
      }
    }
  }
LABEL_425:
  v706.i64[0] = (uint64_t)&v797.n128_i64[1];
  if (a8 && v735)
  a6 = v728;
  v11 = (unint64_t)&v797;
  if (!v728 || !v801.i64[0])
  {
LABEL_508:
    v412 = v311;
    if (*(_BYTE *)(v311 + 360))
    {
      i = *(_QWORD *)(v311 + 104);
      v413 = *(_QWORD *)(i + 112);
      v414 = *(_QWORD *)(i + 120);
      if (v414 >= v413)
      {
        v415 = v414 + 1;
        if (v413 < v414 + 1)
        {
          v416 = (__n128 *)(i + 104);
          if (!*(_QWORD *)(i + 104))
            goto LABEL_546;
          v417 = 2 * v413;
          _ZF = v413 == 0;
          v418 = 8;
          if (!_ZF)
            v418 = v417;
          if (v418 <= v415)
            v419 = v415;
          else
            v419 = v418;
          re::DynamicArray<re::MeshAssetData>::setCapacity((_QWORD *)(i + 104), v419);
        }
LABEL_547:
        v414 = *(_QWORD *)(i + 120);
      }
      v433 = *(_QWORD *)(i + 136) + 160 * v414;
      re::DynamicArray<re::MeshAssetModel>::DynamicArray(v433, (uint64_t *)v706.i64[0]);
      re::DynamicArray<re::MeshAssetInstance>::DynamicArray(v433 + 40, (uint64_t *)&v800);
      re::DynamicArray<re::MeshAssetSkeleton>::DynamicArray(v433 + 80, (uint64_t *)&v802 + 1);
      v303 = (_anonymous_namespace_ *)re::DynamicArray<float>::DynamicArray(v433 + 120, (uint64_t *)&v805 + 1);
      ++*(_QWORD *)(i + 120);
      ++*(_DWORD *)(i + 128);
      v412 = a3;
    }
    v434 = re::globalAllocators(v303);
    v435 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v434[2] + 32))(v434[2], 960, 8);
    v436 = re::MeshAsset::MeshAsset((uint64_t)v435, v706.i64[0]);
    *(_DWORD *)(v436 + 924) = 1;
    re::DynamicArray<re::AssetHandle>::operator=(v436 + 208, (uint64_t)&v713);
    v437 = re::ecs2::EntityAssetData::addComponent<re::ecs2::MeshComponent>(&v756);
    j = *(_QWORD *)(v412 + 104);
    v33 = (unint64_t)v754;
    v438 = v755;
    v439 = re::MeshAsset::assetType((re::MeshAsset *)v437);
    v440 = re::ImportAssetTable::addAsset((_anonymous_namespace_ *)j, v33, v438, v435, (re **)v439);
    if ((*(_BYTE *)(v440 + 8) & 1) != 0)
      v441 = *(re::AssetPath **)(v440 + 16);
    else
      v441 = (re::AssetPath *)(v440 + 9);
    v10 = (unint64_t)buf;
    v443 = v780;
    if ((unint64_t)v437[8] < v780)
    {
      v442 = (_anonymous_namespace_ *)re::DynamicArray<re::AssetHandle>::setCapacity(v437 + 7, v780);
      v443 = v780;
    }
    if (v443)
    {
      j = 32 * v443;
      v33 = *(_QWORD *)v782 + 16;
      do
      {
        memset(buf, 0, 24);
        if ((*(_BYTE *)(v33 - 8) & 1) != 0)
          v444 = *(re::AssetPath **)v33;
        else
          v444 = (re::AssetPath *)(v33 - 7);
        re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)(v437 + 7), (re::AssetHandle *)buf);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
        v33 += 32;
        j -= 32;
      }
      while (j);
    }
    re::DynamicArray<re::AssetHandle>::deinit((uint64_t)&v713);
    goto LABEL_561;
  }
  v326 = v802;
  v327 = (re::AssetHandle *)(v802 + 96 * v801.i64[0]);
  v12 = (size_t)&v852[8];
  v710.i64[0] = (uint64_t)&buf[0].n128_i64[1];
  v328 = *(double *)v680;
  v701 = v327;
  v705 = v728;
  while (1)
  {
    j = *(unsigned int *)(v326 + 80);
    if (a6 <= j)
      goto LABEL_857;
    i = j >> 3;
    v10 = v724;
    if (v724 <= j >> 3)
      goto LABEL_858;
    v329 = v727;
    if ((v725 & 1) != 0)
      v329 = &v726;
    v330 = *(_QWORD *)(v329[i] + 8 * (j & 7));
    i = *(_QWORD *)(v330 + 16);
    if (!i)
      goto LABEL_494;
    v10 = v798.u64[1];
    if (v798.i64[1] <= j)
      goto LABEL_859;
    v331 = v799.i64[1] + (j << 9);
    if (*(_QWORD *)(v331 + 208) != 1)
      goto LABEL_494;
    v10 = *(_QWORD *)(v331 + 224);
    v332 = re::globalAllocators(v303);
    v333 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v332[2] + 32))(v332[2], 120, 8);
    *(_OWORD *)(v333 + 24) = 0u;
    *(_OWORD *)(v333 + 40) = 0u;
    *(_OWORD *)(v333 + 8) = 0u;
    *(_QWORD *)(v333 + 56) = 0;
    *(_QWORD *)v333 = &off_24ED3BBE8;
    v33 = (unint64_t)&str_110;
    *(_QWORD *)(v333 + 24) = &str_110;
    *(_QWORD *)(v333 + 40) = &str_110;
    *(_BYTE *)(v333 + 49) = 0;
    *(_DWORD *)(v333 + 52) = 1023969417;
    *(_OWORD *)(v333 + 64) = 0u;
    *(_OWORD *)(v333 + 80) = 0u;
    *(_OWORD *)(v333 + 96) = 0u;
    *(_QWORD *)(v333 + 112) = 0;
    *(_QWORD *)&v852[32] = &v852[8];
    *(_QWORD *)v852 = v333;
    *(_QWORD *)&v852[8] = &off_24ED43468;
    buf[0].n128_u8[0] = 1;
    re::StringID::StringID((re::StringID *)&buf[0].n128_i8[8], (const StringID *)v326);
    v11 = (unint64_t)&buf[1].n128_u64[1];
    re::StringID::StringID((re::StringID *)&buf[1].n128_i8[8], (const StringID *)(v10 + 72));
    v334 = *(_QWORD **)v852;
    *(_BYTE *)(*(_QWORD *)v852 + 8) = buf[0].n128_u8[0];
    v335 = buf[0].n128_u64[1];
    v336 = buf[1].n128_u64[0];
    buf[1].n128_u64[0] = (unint64_t)&str_110;
    buf[0].n128_u64[1] = 0;
    v337 = v334[2];
    v338 = v334[3];
    v334[2] = v335;
    v334[3] = v336;
    *(_QWORD *)v853 = v335 & 0xFFFFFFFFFFFFFFFELL | v337 & 1;
    *(_QWORD *)&v853[8] = v338;
    re::StringID::destroyString((re::StringID *)v853);
    v339 = buf[1].n128_u64[1];
    v340 = buf[2].n128_u64[0];
    buf[2].n128_u64[0] = (unint64_t)&str_110;
    buf[1].n128_u64[1] = 0;
    v341 = v334[4];
    v342 = v334[5];
    v334[4] = v339;
    v334[5] = v340;
    *(_QWORD *)v853 = v339 & 0xFFFFFFFFFFFFFFFELL | v341 & 1;
    *(_QWORD *)&v853[8] = v342;
    re::StringID::destroyString((re::StringID *)v853);
    re::StringID::destroyString((re::StringID *)&buf[1].n128_i8[8]);
    re::StringID::destroyString((re::StringID *)&buf[0].n128_i8[8]);
    v343 = *(_QWORD *)v852;
    *(_BYTE *)(*(_QWORD *)v852 + 48) = 1;
    *(float *)(v343 + 52) = v328;
    *(_DWORD *)(v343 + 56) = *(_DWORD *)v330;
    *(_QWORD *)(v343 + 64) = i;
    *(_QWORD *)(v343 + 80) = 12;
    v344 = v343 + 88;
    v347 = 0;
    v348 = 0;
    for (j = 0; j != i; ++j)
    {
      v12 = *(_QWORD *)(v330 + 16);
      if (v12 <= j)
      {
        v791 = 0;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v853 = 136315906;
        *(_QWORD *)&v853[4] = "operator[]";
        *(_WORD *)&v853[12] = 1024;
        *(_DWORD *)&v853[14] = 476;
        *(_WORD *)&v853[18] = 2048;
        *(_QWORD *)&v853[20] = j;
        v854 = 2048;
        v855 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_836:
        v791 = 0;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v853 = 136315906;
        *(_QWORD *)&v853[4] = "operator[]";
        *(_WORD *)&v853[12] = 1024;
        *(_DWORD *)&v853[14] = 468;
        *(_WORD *)&v853[18] = 2048;
        *(_QWORD *)&v853[20] = j;
        v854 = 2048;
        v855 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_837:
        *(_QWORD *)v853 = 0;
        v166 = buf;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v852 = 136315906;
        *(_QWORD *)&v852[4] = "operator[]";
        *(_WORD *)&v852[12] = 1024;
        *(_DWORD *)&v852[14] = 797;
        *(_WORD *)&v852[18] = 2048;
        *(_QWORD *)&v852[20] = v11;
        *(_WORD *)&v852[28] = 2048;
        *(_QWORD *)&v852[30] = i;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
        goto LABEL_838;
      }
      v12 = *(_QWORD *)(*(_QWORD *)v852 + 96);
      if (v12 <= j)
        goto LABEL_836;
      v349 = (_OWORD *)(*(_QWORD *)(v330 + 24) + v348);
      v350 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)v852 + 104) + v347);
      v351 = v349[1];
      *v350 = *v349;
      v350[1] = v351;
      v348 += 64;
      v347 += 32;
    }
    v352 = *(_QWORD *)(v10 + 16);
    v33 = (unint64_t)"originalModelVertexIndex";
    if (!v352)
      goto LABEL_451;
    v353 = (unint64_t *)(*(_QWORD *)(v10 + 32) + 48);
    v354 = 80 * v352;
    while (1)
    {
      v355 = (*(v353 - 5) & 1) != 0 ? (const char *)*(v353 - 4) : (char *)v353 - 39;
      v346 = strcmp(v355, "originalModelVertexIndex");
      if (!(_DWORD)v346)
        break;
      v353 += 10;
      v354 -= 80;
      if (!v354)
        goto LABEL_451;
    }
    v356 = *v353;
    if (*v353 <= 3)
    {
LABEL_451:
      if (*(_QWORD *)(v330 + 16))
      {
        v357 = *(_QWORD *)(*(_QWORD *)(v330 + 24) + 40);
        v358 = 12 * i * v357;
        if (v358)
        {
          v359 = *(_QWORD *)v852;
          *(_QWORD *)(*(_QWORD *)v852 + 72) = v357;
          *(_BYTE *)(v359 + 49) = 30;
          buf[0].n128_u64[0] = (unint64_t)objc_msgSend(*(id *)(a3 + 8), sel_newBufferWithLength_options_, v358, 0);
          NS::SharedPtr<MTL::Texture>::operator=((void **)(*(_QWORD *)v852 + 112), (void **)buf);
          if (buf[0].n128_u64[0])

          v346 = (uint64_t)objc_msgSend(*(id *)(*(_QWORD *)v852 + 112), sel_contents);
          v360 = *(_QWORD *)(v330 + 16);
          if (v360)
          {
            v361 = *(_QWORD *)(v330 + 24);
            v362 = v361 + (v360 << 6);
            do
            {
              v363 = *(_QWORD *)(v361 + 40);
              if (v363)
              {
                v364 = (_DWORD *)(*(_QWORD *)(v361 + 48) + 8);
                v365 = 16 * v363;
                do
                {
                  v366 = *v364;
                  v367 = v346 + 12;
                  *(_QWORD *)v346 = *((_QWORD *)v364 - 1);
                  *(_DWORD *)(v346 + 8) = v366;
                  v364 += 4;
                  v346 += 12;
                  v365 -= 16;
                }
                while (v365);
                v346 = v367;
              }
              v361 += 64;
            }
            while (v361 != v362);
          }
        }
        goto LABEL_462;
      }
LABEL_864:
      v791 = 0;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v853 = 136315906;
      *(_QWORD *)&v853[4] = "operator[]";
      *(_WORD *)&v853[12] = 1024;
      *(_DWORD *)&v853[14] = 476;
      *(_WORD *)&v853[18] = 2048;
      *(_QWORD *)&v853[20] = 0;
      v854 = 2048;
      v855 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_865:
      re::internal::assertLog((re::internal *)4, v36, *(double *)v37.i64, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "first", 754);
      _os_crash();
      __break(1u);
LABEL_866:
      re::internal::assertLog((re::internal *)4, v543, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "first", 754);
      _os_crash();
      __break(1u);
      goto LABEL_867;
    }
    v399 = v356 >> 2;
    v400 = 12 * i * (v356 >> 2);
    if (v400)
    {
      i = v353[2];
      v401 = *(_QWORD *)v852;
      *(_QWORD *)(*(_QWORD *)v852 + 72) = v399;
      *(_BYTE *)(v401 + 49) = 30;
      buf[0].n128_u64[0] = (unint64_t)objc_msgSend(*(id *)(a3 + 8), sel_newBufferWithLength_options_, v400, 0);
      NS::SharedPtr<MTL::Texture>::operator=((void **)(*(_QWORD *)v852 + 112), (void **)buf);
      if (buf[0].n128_u64[0])

      v346 = (uint64_t)objc_msgSend(*(id *)(*(_QWORD *)v852 + 112), sel_contents);
      v402 = *(_QWORD *)(v330 + 16);
      if (v402)
      {
        v403 = *(_QWORD *)(v330 + 24);
        v404 = v403 + (v402 << 6);
        if (v399 <= 1)
          v405 = 1;
        else
          v405 = v399;
        do
        {
          j = *(_QWORD *)(v403 + 40);
          v406 = (unsigned int *)i;
          v407 = v405;
          do
          {
            v408 = *v406++;
            v10 = v408;
            if (j <= v408)
              goto LABEL_545;
            v409 = *(_QWORD *)(v403 + 48) + 16 * v10;
            v410 = *(_DWORD *)(v409 + 8);
            v411 = v346 + 12;
            *(_QWORD *)v346 = *(_QWORD *)v409;
            *(_DWORD *)(v346 + 8) = v410;
            v346 += 12;
            --v407;
          }
          while (v407);
          v403 += 64;
          v346 = v411;
        }
        while (v403 != v404);
      }
    }
LABEL_462:
    if (!v760[0])
    {
      re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v760, 0);
      ++v762;
    }
    v368 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                 + 7)
                                                              + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 248, 0);
    re::make::shared::inplace<re::ecs2::VertexCacheComponent>(v368, v853);
    v369 = *(_QWORD **)v853;
    v370 = *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
           + 3) >> 1;
    *(_QWORD *)v853 = 0;
    buf[0].n128_u64[0] = v370;
    buf[0].n128_u64[1] = (unint64_t)v369;
    buf[1].n128_u8[0] = 1;
    re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add((_anonymous_namespace_ *)v760, buf);
    if (*(_QWORD *)v853)

    v10 = v369[6];
    memset(buf, 0, 24);
    re::DynamicArray<re::AssetHandle>::add(v369 + 4, (uint64_t *)buf);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
    re::DynamicArray<float>::add((_anonymous_namespace_ *)(v369 + 9), (float *)v330);
    j = v369[6];
    if (j <= v10)
      goto LABEL_863;
    v372 = v369[8];
    v373 = *(_anonymous_namespace_ **)(a3 + 104);
    v374 = (uint64_t)v754;
    v375 = v755;
    v376 = *(void **)v852;
    *(_QWORD *)v852 = 0;
    v377 = re::VertexCacheAsset::assetType(v371);
    v378 = re::ImportAssetTable::addAsset(v373, v374, v375, v376, (re **)v377);
    if ((*(_BYTE *)(v378 + 8) & 1) != 0)
      v379 = *(re::AssetPath **)(v378 + 16);
    else
      v379 = (re::AssetPath *)(v378 + 9);
    v380 = (re *)re::DynamicString::format((re::DynamicString *)"VertexCacheTimeAnim[%zu]", (re::DynamicString *)v853, v10);
    v381 = re::globalAllocators(v380);
    v382 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v381[2] + 32))(v381[2], 120, 8);
    *(_QWORD *)v382 = off_24ED36578;
    *(_QWORD *)(v382 + 8) = 11;
    *(_BYTE *)(v382 + 16) = 0;
    *(_QWORD *)(v382 + 24) = 0;
    *(_QWORD *)(v382 + 32) = &str_110;
    *(_BYTE *)(v382 + 72) = 0;
    *(_QWORD *)(v382 + 80) = 0x3FF0000000000000;
    *(_BYTE *)(v382 + 88) = 0;
    *(_BYTE *)(v382 + 96) = 0;
    *(_BYTE *)(v382 + 104) = 0;
    *(_QWORD *)(v382 + 112) = 0;
    *(_QWORD *)v382 = &off_24ED364A0;
    if ((v853[8] & 1) != 0)
      v384 = *(const char **)&v853[16];
    else
      v384 = &v853[9];
    v791 = 0;
    v792 = &str_110;
    v385 = v791;
    v386 = v792;
    v792 = &str_110;
    v791 = 0;
    v387 = *(_QWORD *)(v382 + 24);
    v388 = *(_QWORD *)(v382 + 32);
    *(_QWORD *)(v382 + 24) = v385;
    *(_QWORD *)(v382 + 32) = v386;
    buf[0].n128_u64[1] = v388;
    buf[0].n128_u64[0] = v385 & 0xFFFFFFFFFFFFFFFELL | v387 & 1;
    re::StringID::destroyString((re::StringID *)buf);
    re::StringID::destroyString((re::StringID *)&v791);
    v389 = *(float *)v330;
    *(double *)(v382 + 80) = (float)(*(float *)(v330 + 4) - *(float *)v330);
    if (!*(_BYTE *)(v382 + 88))
      *(_BYTE *)(v382 + 88) = 1;
    *(float *)(v382 + 92) = v389;
    v390 = *(_DWORD *)(v330 + 4);
    v327 = v701;
    if (!*(_BYTE *)(v382 + 96))
      *(_BYTE *)(v382 + 96) = 1;
    *(_DWORD *)(v382 + 100) = v390;
    re::DynamicString::format((re::DynamicString *)"VertexCache.vertexCacheTimes[%zu]", (re::DynamicString *)buf, v10);
    re::DynamicString::operator=((re::DynamicString *)(v382 + 40), (re::DynamicString *)buf);
    if (buf[0].n128_u64[0] && (buf[0].n128_u8[8] & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)buf[0].n128_u64[0] + 40))();
    v792 = 0;
    v791 = 0;
    v793 = 0;
    v392 = *(_anonymous_namespace_ **)(a3 + 104);
    v393 = re::AssetHelper::makeTimelineAsset((re::AssetHelper *)v382, v391);
    v394 = re::TimelineAsset::assetType((re::TimelineAsset *)v393);
    v395 = re::ImportAssetTable::addAsset(v392, v374, v375, v393, (re **)v394);
    if ((*(_BYTE *)(v395 + 8) & 1) != 0)
      i = *(_QWORD *)(v395 + 16);
    else
      i = v395 + 9;
    v11 = (unint64_t)&v797;
    a6 = v705;
    v396 = *(_QWORD *)(v382 + 80);
    buf[0].n128_f64[0] = *(float *)v330;
    buf[0].n128_u64[1] = v396;
    re::AssetHandle::AssetHandle((re::AssetHandle *)&buf[1], (const re::AssetHandle *)&v791);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&buf[1]);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v791);
    if (*(_QWORD *)v853 && (v853[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)v853 + 40))();
    v397 = *(_QWORD *)v852;
    *(_QWORD *)v852 = 0;
    v12 = (size_t)&v852[8];
    if (v397)
      break;
LABEL_489:
    v303 = *(_anonymous_namespace_ **)&v852[32];
    if (*(_BYTE **)&v852[32] == &v852[8])
    {
      v303 = (_anonymous_namespace_ *)&v852[8];
      v398 = 4;
      goto LABEL_493;
    }
    if (*(_QWORD *)&v852[32])
    {
      v398 = 5;
LABEL_493:
      v303 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v303 + 8 * v398))();
    }
LABEL_494:
    v326 += 96;
    v311 = a3;
    if ((re::AssetHandle *)v326 == v327)
      goto LABEL_508;
  }
  buf[0].n128_u64[0] = v397;
  if (*(_QWORD *)&v852[32])
  {
    (*(void (**)(_QWORD, __n128 *))(**(_QWORD **)&v852[32] + 48))(*(_QWORD *)&v852[32], buf);
    goto LABEL_489;
  }
  v653 = std::__throw_bad_function_call[abi:nn180100]();
  return re::addPhysicsFromImportContext(v653);
}

uint64_t re::addPhysicsFromImportContext(uint64_t result, uint64_t a2, uint64_t a3)
{
  re::USDImportContext *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *PhysicsColliderData;
  re::CollisionShapeData *v11;
  uint64_t v12;
  unint64_t *CollidesWithEnvironment;
  char v14;
  uint64_t *v15;
  __n128 v16;
  __n128 v17;
  int v18;
  re::CollisionShape **v19;
  re *v20;
  re::MassFrame *v21;
  re *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  _anonymous_namespace_ *v28;
  _anonymous_namespace_ *v29;
  const char *v30;
  uint64_t v31;
  re::CollisionShapeAsset *v32;
  uint64_t *v33;
  uint64_t v34;
  _anonymous_namespace_ *v35;
  re::AssetPath *v36;
  re *v37;
  uint64_t *v38;
  _QWORD *v39;
  unint64_t *PhysicsColliderPose;
  uint64_t v41;
  __int128 v42;
  uint64_t *v43;
  uint64_t *v44;
  re::MassFrame *v45;
  _anonymous_namespace_ *v46;
  const char *v47;
  re::CollisionShapeAsset *v48;
  uint64_t *v49;
  uint64_t v50;
  re::AssetPath *v51;
  uint64_t v52;
  _anonymous_namespace_ *v53;
  _QWORD *v54;
  uint64_t v55;
  re *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _anonymous_namespace_ *v61;
  uint64_t v62;
  unint64_t v63;
  _anonymous_namespace_ *v64;
  __n128 v65;
  ArcSharedObject *v66;
  unint64_t v67;
  const re::CollisionShape *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  int v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88[3];
  re *v89;
  char v90;
  _BYTE v91[23];
  uint64_t v92;
  re::MassFrame *v93[2];
  _BYTE v94[28];
  __int16 v95;
  uint64_t v96;
  __n128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;

  v5 = (re::USDImportContext *)result;
  v102 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(result + 664))
    goto LABEL_59;
  v6 = 0;
  v7 = -1;
  do
  {
    v8 = re::BucketArray<re::USDImportContext::NodeStackItem,32ul>::operator[]((uint64_t)v5 + 624, v6);
    result = re::StringID::operator==((_QWORD *)(v8 + 8), (_QWORD *)(a3 + 8));
    if ((_DWORD)result)
      v7 = v6;
    ++v6;
  }
  while (v6 < *((_QWORD *)v5 + 83));
  if (v7 == -1)
    goto LABEL_59;
  v9 = re::BucketArray<re::USDImportContext::NodeStackItem,32ul>::operator[]((uint64_t)v5 + 624, v7);
  v93[0] = 0;
  PhysicsColliderData = re::USDImportContext::getPhysicsColliderData(v5, v7);
  v12 = re::cloneCollisionShapeData((uint64_t)PhysicsColliderData, v11);
  CollidesWithEnvironment = re::USDImportContext::getCollidesWithEnvironment(v5, v7);
  if (v12)
  {
    v14 = (char)CollidesWithEnvironment;
    v15 = re::globalAllocators((re *)CollidesWithEnvironment);
    v18 = *(_DWORD *)(v12 + 8);
    v84 = v14;
    if (v18 == 7)
    {
      v20 = re::convertCompoundToCollisionShape(v12, (uint64_t)v5, a2, v7);
      v12 = (uint64_t)v20;
      v93[0] = v21;
      goto LABEL_30;
    }
    v19 = (re::CollisionShape **)v15[2];
    if (v18 == 6)
    {
      v20 = (re *)re::convertFromSerializable((re *)v12, (const re::CollisionShapeData *)v93, v19, (re::Allocator *)v19, (re::Allocator *)1, v16, v17);
LABEL_30:
      v43 = re::globalAllocators(v20);
      v44 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v43[2] + 32))(v43[2], 16, 8);
      v45 = v93[0];
      *v44 = v12;
      v44[1] = (uint64_t)v45;
      v46 = *(_anonymous_namespace_ **)(a2 + 104);
      v47 = *(const char **)(v9 + 16);
      v48 = (re::CollisionShapeAsset *)strlen(v47);
      v49 = re::CollisionShapeAsset::assetType(v48);
      v50 = re::ImportAssetTable::addAsset(v46, (uint64_t)v47, (uint64_t)v48, v44, (re **)v49);
      memset(v94, 0, 24);
      if ((*(_BYTE *)(v50 + 8) & 1) != 0)
        v51 = *(re::AssetPath **)(v50 + 16);
      else
        v51 = (re::AssetPath *)(v50 + 9);
      v52 = v9;
      v54 = (_QWORD *)(a3 + 32);
      if (!*(_QWORD *)(a3 + 32))
      {
        re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((_QWORD *)(a3 + 32), 0);
        ++*(_DWORD *)(a3 + 56);
      }
      v55 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                  + 7)
                                                               + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 168, 0);
      re::make::shared::inplace<re::ecs2::ColliderComponent>(v55, &v89);
      v56 = v89;
      v57 = *(_QWORD *)((*(uint64_t (**)(re *))(*(_QWORD *)v89 + 40))(v89) + 24) >> 1;
      v58 = (unint64_t)v89;
      v89 = 0;
      v97.n128_u64[0] = v57;
      v97.n128_u64[1] = v58;
      LOBYTE(v98) = 1;
      re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add((_anonymous_namespace_ *)(a3 + 32), &v97);
      if (v89)

      re::AssetHandle::operator=((uint64_t *)v56 + 4, (uint64_t *)v94);
      if ((v84 & 1) == 0)
        *((_QWORD *)v56 + 8) = 0x100000001;
      v59 = re::ecs2::EntityAssetData::addComponent<re::ecs2::RigidBodyComponent>((_DWORD *)a3);
      *(_DWORD *)(v59 + 120) = 0;
      re::AssetHandle::operator=((uint64_t *)(v59 + 96), (uint64_t *)(v52 + 848));
      if ((*(unsigned int (**)(re::MassFrame *))(*(_QWORD *)v93[0] + 24))(v93[0]) == 6)
      {
        v60 = re::BucketArray<re::USDImportContext::NodeStackItem,32ul>::operator[]((uint64_t)v5 + 624, v7);
        v61 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)v5 + 472, (_QWORD *)(v60 + 40));
        if (v61)
        {
          if (!*v54)
          {
            re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((_QWORD *)(a3 + 32), 0);
            ++*(_DWORD *)(a3 + 56);
          }
          v62 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::GroundPlaneComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                      + 7)
                                                                   + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::GroundPlaneComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 32, 0);
          *(_OWORD *)v62 = 0u;
          *(_OWORD *)(v62 + 16) = 0u;
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)v62, 0);
          *(_QWORD *)(v63 + 16) = 0;
          *(_WORD *)(v63 + 24) = 0;
          *(_QWORD *)v63 = &off_24ED44198;
          v97.n128_u64[0] = *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::GroundPlaneComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                            + 3) >> 1;
          v97.n128_u64[1] = v63;
          LOBYTE(v98) = 1;
          v65 = re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add((_anonymous_namespace_ *)(a3 + 32), &v97);
          *(_BYTE *)(v62 + 25) = v84;
          if (!*v54)
          {
            re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity((_QWORD *)(a3 + 32), 0);
            ++*(_DWORD *)(a3 + 56);
          }
          v66 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD, __n128))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::PhysicsOriginComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                                 + 7)
                                                                                              + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PhysicsOriginComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 32, 0, v65);
          *(_OWORD *)v66 = 0u;
          *((_OWORD *)v66 + 1) = 0u;
          ArcSharedObject::ArcSharedObject(v66, 0);
          *(_QWORD *)(v67 + 16) = 0;
          *(_BYTE *)(v67 + 24) = 0;
          *(_QWORD *)v67 = &off_24ED43A90;
          v97.n128_u64[0] = *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PhysicsOriginComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                            + 3) >> 1;
          v97.n128_u64[1] = v67;
          LOBYTE(v98) = 1;
          re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add((_anonymous_namespace_ *)(a3 + 32), &v97);
        }
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v94);
      goto LABEL_47;
    }
    v92 = 0;
    v22 = (re *)re::convertFromSerializable((re *)v12, (const re::CollisionShapeData *)&v92, v19, (re::Allocator *)v19, (re::Allocator *)1, v16, v17);
    v23 = re::globalAllocators(v22);
    v24 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23[2] + 32))(v23[2], 16, 8);
    v25 = v9;
    v26 = v24;
    v27 = v92;
    *v24 = v12;
    v24[1] = v27;
    v83 = v25;
    v28 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"%s_primitive", (re::DynamicString *)&v89, *(_QWORD *)(v25 + 16));
    v29 = *(_anonymous_namespace_ **)(a2 + 104);
    if ((v90 & 1) != 0)
      v30 = *(const char **)&v91[7];
    else
      v30 = v91;
    v97.n128_u64[0] = 0;
    v97.n128_u64[1] = (unint64_t)&str_110;
    v31 = v97.n128_i64[1];
    v32 = (re::CollisionShapeAsset *)strlen((const char *)v97.n128_u64[1]);
    v33 = re::CollisionShapeAsset::assetType(v32);
    v34 = re::ImportAssetTable::addAsset(v29, v31, (uint64_t)v32, v26, (re **)v33);
    re::StringID::destroyString((re::StringID *)&v97);
    memset(v88, 0, sizeof(v88));
    if ((*(_BYTE *)(v34 + 8) & 1) != 0)
      v36 = *(re::AssetPath **)(v34 + 16);
    else
      v36 = (re::AssetPath *)(v34 + 9);
    v38 = re::globalAllocators(v37);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38[2] + 32))(v38[2], 72, 8);
    *(_DWORD *)(v12 + 8) = 7;
    *(_QWORD *)v12 = &off_24ED3BDB8;
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 16) = 0;
    *(_QWORD *)(v12 + 56) = 0;
    *(_QWORD *)(v12 + 64) = 0;
    *(_QWORD *)(v12 + 48) = 0;
    v9 = v83;
    if (*(_QWORD *)(v12 + 24))
    {
      re::AssetHandle::operator=((uint64_t *)(*(_QWORD *)(v12 + 32) + 48), v88);
      if (*(_QWORD *)(v12 + 24))
      {
        v39 = *(_QWORD **)(v12 + 32);
        v39[2] = 0;
        v39[3] = 0;
        v39[4] = 0;
        v39[5] = 0x3F80000000000000;
        PhysicsColliderPose = re::USDImportContext::getPhysicsColliderPose(v5, v7);
        if (PhysicsColliderPose)
        {
          if (!*(_QWORD *)(v12 + 24))
            goto LABEL_66;
          v41 = *(_QWORD *)(v12 + 32);
          v42 = *((_OWORD *)PhysicsColliderPose + 1);
          *(_OWORD *)(v41 + 16) = *(_OWORD *)PhysicsColliderPose;
          *(_OWORD *)(v41 + 32) = v42;
        }
        *(_BYTE *)(v12 + 40) = 1;
        v85 = 0;
        v86 = 0;
        v87 = 0;
        re::FixedArray<unsigned long>::init<>(&v85, (uint64_t)v19, 1uLL);
        if (v86)
        {
          *v87 = v92;
          v93[0] = (re::MassFrame *)re::convertToCompoundPrimitiveCollisionShape(v12, (uint64_t)&v85, (uint64_t)v19, (uint64_t)v19);
          if (v85 && v86)
            (*(void (**)(void))(*(_QWORD *)v85 + 40))();
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v88);
          v20 = v89;
          if (v89 && (v90 & 1) != 0)
            v20 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v89 + 40))();
          goto LABEL_30;
        }
LABEL_65:
        v93[1] = 0;
        v100 = 0u;
        v101 = 0u;
        v98 = 0u;
        v99 = 0u;
        v97 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v94 = 136315906;
        *(_QWORD *)&v94[4] = "operator[]";
        *(_WORD *)&v94[12] = 1024;
        *(_DWORD *)&v94[14] = 468;
        *(_WORD *)&v94[18] = 2048;
        *(_QWORD *)&v94[20] = 0;
        v95 = 2048;
        v96 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_66:
        v85 = 0;
        v100 = 0u;
        v101 = 0u;
        v98 = 0u;
        v99 = 0u;
        v97 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v94 = 136315906;
        *(_QWORD *)&v94[4] = "operator[]";
        *(_WORD *)&v94[12] = 1024;
        *(_DWORD *)&v94[14] = 468;
        *(_WORD *)&v94[18] = 2048;
        *(_QWORD *)&v94[20] = 0;
        v95 = 2048;
        v96 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
    }
    else
    {
      v85 = 0;
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      v97 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v94 = 136315906;
      *(_QWORD *)&v94[4] = "operator[]";
      *(_WORD *)&v94[12] = 1024;
      *(_DWORD *)&v94[14] = 468;
      *(_WORD *)&v94[18] = 2048;
      *(_QWORD *)&v94[20] = 0;
      v95 = 2048;
      v96 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v85 = 0;
    v100 = 0u;
    v101 = 0u;
    v98 = 0u;
    v99 = 0u;
    v97 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v94 = 136315906;
    *(_QWORD *)&v94[4] = "operator[]";
    *(_WORD *)&v94[12] = 1024;
    *(_DWORD *)&v94[14] = 468;
    *(_WORD *)&v94[18] = 2048;
    *(_QWORD *)&v94[20] = 0;
    v95 = 2048;
    v96 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_65;
  }
LABEL_47:
  result = (uint64_t)re::USDImportContext::getPhysicsRigidBodyProperties(v5, v7);
  if (result)
  {
    v69 = result;
    if (!*(_QWORD *)(a3 + 32))
      goto LABEL_55;
    v70 = *(_QWORD *)(a3 + 48);
    if (!v70)
      goto LABEL_55;
    v71 = (unint64_t *)(*(_QWORD *)(a3 + 64) + 8);
    v72 = 24 * v70;
    while (*(v71 - 1) != *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                          + 3) >> 1)
    {
      v71 += 3;
      v72 -= 24;
      if (!v72)
        goto LABEL_55;
    }
    v73 = *v71;
    if (!*v71)
LABEL_55:
      v73 = re::ecs2::EntityAssetData::addComponent<re::ecs2::RigidBodyComponent>((_DWORD *)a3);
    v74 = *(_OWORD *)v69;
    v75 = *(_OWORD *)(v69 + 16);
    v76 = *(_OWORD *)(v69 + 32);
    *(_DWORD *)(v73 + 80) = *(_DWORD *)(v69 + 48);
    *(_OWORD *)(v73 + 48) = v75;
    *(_OWORD *)(v73 + 64) = v76;
    *(_OWORD *)(v73 + 32) = v74;
    result = (uint64_t)v93[0];
    if (v93[0])
    {
      result = re::MassFrame::makeFromShapeAndMass(v93[0], v68, *(float *)(v69 + 48), (float32x4_t *)&v97);
      v77 = v100;
      v79 = v98;
      v78 = v99;
      *(__n128 *)(v73 + 32) = v97;
      *(_OWORD *)(v73 + 48) = v79;
      *(_OWORD *)(v73 + 64) = v78;
      *(_DWORD *)(v73 + 80) = v77;
    }
    *(_DWORD *)(v73 + 120) = 2;
  }
LABEL_59:
  v80 = *(_QWORD *)(a3 + 88);
  if (v80)
  {
    v81 = *(_QWORD *)(a3 + 104);
    v82 = 112 * v80;
    do
    {
      result = re::addPhysicsFromImportContext(v5);
      v81 += 112;
      v82 -= 112;
    }
    while (v82);
  }
  return result;
}

uint64_t re::BucketArray<unsigned long,32ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 5)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 5)) + 8 * (a2 & 0x1F);
}

uint64_t re::BucketArray<re::TimelineGroupBuilder *,8ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 8 * v3)
  {
    re::BucketArray<re::TimelineGroupBuilder *,8ul>::setBucketsCapacity((_QWORD *)a1, (v2 + 8) >> 3);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 3));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 8 * (v2 & 7);
}

_QWORD *re::BucketArray<re::TimelineGroupBuilder *,8ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 64, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::TimelineGroupBuilder *,8ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

__n128 re::BucketArray<re::createEntityFromImportContext(re::USDImportContext &,re::SceneImportOperation &,unsigned long,re::BucketArray<re::TimelineGroupBuilder *,8ul> &,re::AnimationSceneEntityData &,re::FixedArray<BOOL> &,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> *,BOOL)::TransformedMeshItem,8ul>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 8);
  if (v4 + 1 > 8 * v5)
  {
    re::BucketArray<re::createEntityFromImportContext(re::USDImportContext &,re::SceneImportOperation &,unsigned long,re::BucketArray<re::TimelineGroupBuilder *,8ul> &,re::AnimationSceneEntityData &,re::FixedArray<BOOL> &,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> *,BOOL)::TransformedMeshItem,8ul>::setBucketsCapacity((_QWORD *)a1, (v4 + 8) >> 3);
    v5 = *(_QWORD *)(a1 + 8);
  }
  if (v5 <= v4 >> 3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v6 = a1 + 24;
  else
    v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(v6 + 8 * (v4 >> 3));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  v8 = (_OWORD *)(v7 + 80 * (v4 & 7));
  v9 = *(_OWORD *)(a2 + 64);
  v11 = *(_OWORD *)(a2 + 16);
  v10 = *(_OWORD *)(a2 + 32);
  v8[3] = *(_OWORD *)(a2 + 48);
  v8[4] = v9;
  v8[1] = v11;
  v8[2] = v10;
  result = *(__n128 *)a2;
  *v8 = *(_OWORD *)a2;
  return result;
}

void re::`anonymous namespace'::wireupPrimitiveShapeHelper(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5)
{
  _anonymous_namespace_ *v7;
  float32x4_t *v8;
  __int8 *v9;
  ArcSharedObject *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  re::ecs2::TransformComponent *v14;
  re *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  __int128 v19;
  __int128 v20;
  _anonymous_namespace_ *v21;
  float32x4_t *v22;
  unsigned __int16 *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  re::ecs2::TransformComponent *v27;
  _anonymous_namespace_ *v28;
  float32x4_t *v29;
  __int8 *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  __int128 v34;
  re::ecs2::TransformComponent *v35;
  _anonymous_namespace_ *v36;
  float32x4_t *v37;
  __int8 *v38;
  ArcSharedObject *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  re::ecs2::TransformComponent *v43;
  _anonymous_namespace_ *v44;
  float32x4_t *v45;
  __int8 *v46;
  ArcSharedObject *v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v50;
  re::ecs2::TransformComponent *v51;
  re *v52;
  uint64_t *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  const char *v57;
  _anonymous_namespace_ *v58;
  re::MeshAsset *v59;
  uint64_t *v60;
  _anonymous_namespace_ *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  re::AssetPath *v65;
  id *v66;
  _anonymous_namespace_ *v67;
  re::AssetPath *v68;
  double v69;
  re::GeomAttribute *v70;
  re::GeomAttribute *v71;
  const char *v72;
  _anonymous_namespace_ *v73;
  re::MeshAsset *v74;
  __int128 v75;
  _QWORD v79[3];
  uint64_t v80[3];
  _OWORD v81[2];
  __int128 v82;
  __int128 v83;
  _OWORD v84[3];
  __int128 v85;
  __int128 v86;
  __int128 v87;
  int v88;
  char v89;
  int v90;
  char v91;
  char v92;
  int v93;
  int v94;
  char v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __n128 v99;
  char v100;
  unint64_t v101;
  char v102;
  _BYTE v103[40];
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  re::GeomAttribute *v108;
  char v109;
  _BYTE v110[48];
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  _BYTE v115[40];
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  __int128 v130;
  __int128 v131;
  int v132;
  __int128 v133;
  __int128 v134;
  int v135;
  __int128 v136;
  _BYTE v137[28];
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  const char *v141;
  char v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  __int128 v147;
  __int128 v148;
  int v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  _BYTE v153[40];
  int v154;
  __int128 v155;
  __int128 v156;
  int v157;
  __int128 v158;
  __int128 v159;
  int v160;
  uint64_t v161;
  uint64_t v162;

  v162 = *MEMORY[0x24BDAC8D0];
  switch(a3->i8[0])
  {
    case 0:
      v140 = 0;
      v139 = 0;
      v141 = (const char *)&str_110;
      v142 = 1;
      v145 = 0;
      v143 = 0;
      v144 = 0;
      v146 = 0;
      v150 = 0;
      v147 = 0u;
      v148 = 0u;
      v149 = 0;
      re::StringID::destroyString((re::StringID *)&v140);
      v141 = "PrimitiveShape";
      v140 = 0xD2B975F2D13A2E34;
      if (!v143)
      {
        re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(&v143, 0);
        ++v146;
      }
      v8 = a3 + 2;
      v9 = &a3->i8[4];
      v10 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                     + 7)
                                                                                  + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 144, 0);
      re::make::shared::inplace<re::ecs2::PrimitiveBoxComponent>(v10, &v101);
      v11 = v101;
      v12 = *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
            + 3) >> 1;
      v101 = 0;
      v99.n128_u64[0] = v12;
      v99.n128_u64[1] = v11;
      v100 = 1;
      re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add((_anonymous_namespace_ *)&v143, &v99);
      if (v101)

      v13 = *(_OWORD *)v9;
      *(_OWORD *)(v11 + 39) = *(_OWORD *)(v9 + 11);
      *(_OWORD *)(v11 + 28) = v13;
      *(_BYTE *)(v11 + 57) = *(_BYTE *)(a2 + 161);
      v14 = re::ecs2::EntityAssetData::addComponent<re::ecs2::TransformComponent>(&v139);
      if ((vmaxvq_u32((uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*v8, (float32x4_t)xmmword_2260E5D70))) & 0x80000000) != 0)
        *((float32x4_t *)v14 + 3) = *v8;
      v127 = 0;
      v126 = 0;
      v128 = 0;
      v130 = 0u;
      v131 = 0u;
      v129 = 0;
      v132 = 0;
      v133 = 0u;
      v134 = 0u;
      v135 = 0;
      v136 = 0u;
      memset(v137, 0, sizeof(v137));
      v138 = 0x7FFFFFFFLL;
      re::GeomModelWithLods::GeomModelWithLods((re::GeomModelWithLods *)&v113);
      re::GeomModel::GeomModel((re::GeomModel *)&v101);
      re::GeomMesh::GeomMesh((re::GeomMesh *)&v99, 0);
      re::internal::buildBoxHelper((re::internal *)&v99, &v151, (unsigned __int16 *)v9);
      re::DynamicArray<re::GeomMesh>::add((uint64_t)v103, (uint64_t)&v99);
      re::DynamicArray<re::GeomModel>::add((_anonymous_namespace_ *)v115, (uint64_t)&v101);
      re::DynamicArray<re::GeomModelWithLods>::add((_anonymous_namespace_ *)&v126, (uint64_t)&v113);
      v151 = xmmword_2260E5F10;
      v152 = xmmword_2260E5F20;
      *(_OWORD *)v153 = xmmword_2260E5F40;
      *(_OWORD *)&v153[16] = xmmword_2260E5D70;
      *(_DWORD *)&v153[32] = 0;
      re::DynamicArray<re::GeomInstance>::add((_anonymous_namespace_ *)((char *)&v130 + 8), (uint64_t)&v151);
      v88 = 16842752;
      v89 = 1;
      v90 = 0;
      v91 = 0;
      v93 = 1036831949;
      v94 = 16843008;
      v95 = 0;
      v98 = 0u;
      v96 = 0u;
      v97 = 0u;
      DWORD1(v98) = 0x7FFFFFFF;
      v92 = *(_BYTE *)(a2 + 161);
      re::makeMeshAssetDataFromGeomScene((unint64_t)&v126, (uint64_t)&v88, (uint64_t)&v151);
      v16 = re::globalAllocators(v15);
      v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16[2] + 32))(v16[2], 960, 8);
      v18 = (_DWORD *)v17;
      if ((_BYTE)v151)
      {
        *(_QWORD *)&v81[0] = *((_QWORD *)&v151 + 1);
        *((_QWORD *)&v151 + 1) = 0;
        *(_OWORD *)((char *)v81 + 8) = v152;
        v152 = 0u;
        DWORD2(v81[1]) = 1;
        v19 = *(_OWORD *)&v153[8];
        memset(&v153[8], 0, 32);
        v82 = v19;
        v83 = *(_OWORD *)&v153[24];
        ++*(_DWORD *)v153;
        ++v154;
        LODWORD(v84[0]) = 1;
        *(_OWORD *)((char *)v84 + 8) = v155;
        *(_OWORD *)((char *)&v84[1] + 8) = v156;
        v155 = 0u;
        v156 = 0u;
        DWORD2(v84[2]) = 1;
        v20 = v158;
        v158 = 0u;
        v85 = v20;
        v86 = v159;
        v159 = 0u;
        *((_QWORD *)&v87 + 1) = v161;
        v161 = 0;
        ++v157;
        ++v160;
        LODWORD(v87) = 1;
      }
      else
      {
        v86 = 0u;
        v87 = 0u;
        v85 = 0u;
        memset(v84, 0, sizeof(v84));
        v82 = 0u;
        v83 = 0u;
        memset(v81, 0, sizeof(v81));
      }
      re::MeshAsset::MeshAsset(v17, (uint64_t)v81);
      if (*((_QWORD *)&v85 + 1))
      {
        if (*((_QWORD *)&v87 + 1))
          (*(void (**)(void))(**((_QWORD **)&v85 + 1) + 40))();
        *((_QWORD *)&v87 + 1) = 0;
        v86 = 0uLL;
        *((_QWORD *)&v85 + 1) = 0;
        LODWORD(v87) = v87 + 1;
      }
      re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)&v84[1]);
      re::DynamicArray<re::MeshAssetInstance>::deinit((uint64_t)&v82 + 8);
      re::DynamicArray<re::MeshAssetModel>::deinit((uint64_t)v81);
      v18[231] = 1;
      v72 = *(const char **)(a4 + 8);
      v73 = *(_anonymous_namespace_ **)(a2 + 104);
      v74 = (re::MeshAsset *)strlen(v72);
      v60 = re::MeshAsset::assetType(v74);
      v61 = v73;
      v62 = (uint64_t)v72;
      v63 = (uint64_t)v74;
      goto LABEL_46;
    case 1:
      v140 = 0;
      v139 = 0;
      v141 = (const char *)&str_110;
      v142 = 1;
      v145 = 0;
      v143 = 0;
      v144 = 0;
      v146 = 0;
      v150 = 0;
      v147 = 0u;
      v148 = 0u;
      v149 = 0;
      re::StringID::destroyString((re::StringID *)&v140);
      v141 = "PrimitiveShape";
      v140 = 0xD2B975F2D13A2E34;
      if (!v143)
      {
        re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(&v143, 0);
        ++v146;
      }
      v22 = a3 + 2;
      v23 = &a3->u16[2];
      v24 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                  + 7)
                                                               + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 120, 0);
      re::make::shared::inplace<re::ecs2::PrimitiveConeComponent>(v24, &v101);
      v25 = v101;
      v26 = *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
            + 3) >> 1;
      v101 = 0;
      v99.n128_u64[0] = v26;
      v99.n128_u64[1] = v25;
      v100 = 1;
      re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add((_anonymous_namespace_ *)&v143, &v99);
      if (v101)

      *(_OWORD *)(v25 + 28) = *(_OWORD *)v23;
      *(_BYTE *)(v25 + 45) = *(_BYTE *)(a2 + 161);
      v27 = re::ecs2::EntityAssetData::addComponent<re::ecs2::TransformComponent>(&v139);
      v75 = xmmword_2260E5D70;
      if ((vmaxvq_u32((uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*v22, (float32x4_t)xmmword_2260E5D70))) & 0x80000000) != 0)
        *((float32x4_t *)v27 + 3) = *v22;
      v127 = 0;
      v126 = 0;
      v128 = 0;
      v130 = 0u;
      v131 = 0u;
      v129 = 0;
      v132 = 0;
      v133 = 0u;
      v134 = 0u;
      v135 = 0;
      v136 = 0u;
      memset(v137, 0, sizeof(v137));
      v138 = 0x7FFFFFFFLL;
      re::GeomModelWithLods::GeomModelWithLods((re::GeomModelWithLods *)&v113);
      re::GeomModel::GeomModel((re::GeomModel *)&v101);
      re::GeomMesh::GeomMesh((re::GeomMesh *)&v99, 0);
      re::buildCone((uint64_t)&v99, v23);
      goto LABEL_38;
    case 2:
      v140 = 0;
      v139 = 0;
      v141 = (const char *)&str_110;
      v142 = 1;
      v145 = 0;
      v143 = 0;
      v144 = 0;
      v146 = 0;
      v150 = 0;
      v147 = 0u;
      v148 = 0u;
      v149 = 0;
      re::StringID::destroyString((re::StringID *)&v140);
      v141 = "PrimitiveShape";
      v140 = 0xD2B975F2D13A2E34;
      if (!v143)
      {
        re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(&v143, 0);
        ++v146;
      }
      v29 = a3 + 2;
      v30 = &a3->i8[4];
      v31 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                  + 7)
                                                               + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 136, 0);
      re::make::shared::inplace<re::ecs2::PrimitiveCylinderComponent>(v31, &v101);
      v32 = v101;
      v33 = *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
            + 3) >> 1;
      v101 = 0;
      v99.n128_u64[0] = v33;
      v99.n128_u64[1] = v32;
      v100 = 1;
      re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add((_anonymous_namespace_ *)&v143, &v99);
      if (v101)

      v34 = *(_OWORD *)v30;
      *(_QWORD *)(v32 + 41) = *(_QWORD *)(v30 + 13);
      *(_OWORD *)(v32 + 28) = v34;
      *(_BYTE *)(v32 + 53) = *(_BYTE *)(a2 + 161);
      v35 = re::ecs2::EntityAssetData::addComponent<re::ecs2::TransformComponent>(&v139);
      v75 = xmmword_2260E5D70;
      if ((vmaxvq_u32((uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*v29, (float32x4_t)xmmword_2260E5D70))) & 0x80000000) != 0)
        *((float32x4_t *)v35 + 3) = *v29;
      v127 = 0;
      v126 = 0;
      v128 = 0;
      v130 = 0u;
      v131 = 0u;
      v129 = 0;
      v132 = 0;
      v133 = 0u;
      v134 = 0u;
      v135 = 0;
      v136 = 0u;
      memset(v137, 0, sizeof(v137));
      v138 = 0x7FFFFFFFLL;
      re::GeomModelWithLods::GeomModelWithLods((re::GeomModelWithLods *)&v113);
      re::GeomModel::GeomModel((re::GeomModel *)&v101);
      re::GeomMesh::GeomMesh((re::GeomMesh *)&v99, 0);
      re::buildCylinder((uint64_t)&v99, (unsigned __int16 *)v30);
      goto LABEL_38;
    case 3:
      v140 = 0;
      v139 = 0;
      v141 = (const char *)&str_110;
      v142 = 1;
      v145 = 0;
      v143 = 0;
      v144 = 0;
      v146 = 0;
      v150 = 0;
      v147 = 0u;
      v148 = 0u;
      v149 = 0;
      re::StringID::destroyString((re::StringID *)&v140);
      v141 = "PrimitiveShape";
      v140 = 0xD2B975F2D13A2E34;
      if (!v143)
      {
        re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(&v143, 0);
        ++v146;
      }
      v37 = a3 + 2;
      v38 = &a3->i8[4];
      v39 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                     + 7)
                                                                                  + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 112, 0);
      re::make::shared::inplace<re::ecs2::PrimitiveSphereComponent>(v39, &v101);
      v40 = v101;
      v41 = *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
            + 3) >> 1;
      v101 = 0;
      v99.n128_u64[0] = v41;
      v99.n128_u64[1] = v40;
      v100 = 1;
      re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add((_anonymous_namespace_ *)&v143, &v99);
      if (v101)

      v42 = *(_QWORD *)v38;
      *(_DWORD *)(v40 + 35) = *(_DWORD *)(v38 + 7);
      *(_QWORD *)(v40 + 28) = v42;
      *(_BYTE *)(v40 + 41) = *(_BYTE *)(a2 + 161);
      v43 = re::ecs2::EntityAssetData::addComponent<re::ecs2::TransformComponent>(&v139);
      v75 = xmmword_2260E5D70;
      if ((vmaxvq_u32((uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*v37, (float32x4_t)xmmword_2260E5D70))) & 0x80000000) != 0)
        *((float32x4_t *)v43 + 3) = *v37;
      v127 = 0;
      v126 = 0;
      v128 = 0;
      v130 = 0u;
      v131 = 0u;
      v129 = 0;
      v132 = 0;
      v133 = 0u;
      v134 = 0u;
      v135 = 0;
      v136 = 0u;
      memset(v137, 0, sizeof(v137));
      v138 = 0x7FFFFFFFLL;
      re::GeomModelWithLods::GeomModelWithLods((re::GeomModelWithLods *)&v113);
      re::GeomModel::GeomModel((re::GeomModel *)&v101);
      re::GeomMesh::GeomMesh((re::GeomMesh *)&v99, 0);
      re::buildSphere((uint64_t)&v99, (unsigned __int16 *)v38);
      goto LABEL_38;
    case 4:
      v140 = 0;
      v139 = 0;
      v141 = (const char *)&str_110;
      v142 = 1;
      v145 = 0;
      v143 = 0;
      v144 = 0;
      v146 = 0;
      v150 = 0;
      v147 = 0u;
      v148 = 0u;
      v149 = 0;
      re::StringID::destroyString((re::StringID *)&v140);
      v141 = "PrimitiveShape";
      v140 = 0xD2B975F2D13A2E34;
      if (!v143)
      {
        re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(&v143, 0);
        ++v146;
      }
      v45 = a3 + 2;
      v46 = &a3->i8[4];
      v47 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                     + 7)
                                                                                  + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 128, 0);
      re::make::shared::inplace<re::ecs2::PrimitiveCapsuleComponent>(v47, &v101);
      v48 = v101;
      v49 = *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
            + 3) >> 1;
      v101 = 0;
      v99.n128_u64[0] = v49;
      v99.n128_u64[1] = v48;
      v100 = 1;
      re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add((_anonymous_namespace_ *)&v143, &v99);
      if (v101)

      v50 = *(_OWORD *)v46;
      *(_DWORD *)(v48 + 43) = *(_DWORD *)(v46 + 15);
      *(_OWORD *)(v48 + 28) = v50;
      *(_BYTE *)(v48 + 49) = *(_BYTE *)(a2 + 161);
      v51 = re::ecs2::EntityAssetData::addComponent<re::ecs2::TransformComponent>(&v139);
      v75 = xmmword_2260E5D70;
      if ((vmaxvq_u32((uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*v45, (float32x4_t)xmmword_2260E5D70))) & 0x80000000) != 0)
        *((float32x4_t *)v51 + 3) = *v45;
      v127 = 0;
      v126 = 0;
      v128 = 0;
      v130 = 0u;
      v131 = 0u;
      v129 = 0;
      v132 = 0;
      v133 = 0u;
      v134 = 0u;
      v135 = 0;
      v136 = 0u;
      memset(v137, 0, sizeof(v137));
      v138 = 0x7FFFFFFFLL;
      re::GeomModelWithLods::GeomModelWithLods((re::GeomModelWithLods *)&v113);
      re::GeomModel::GeomModel((re::GeomModel *)&v101);
      re::GeomMesh::GeomMesh((re::GeomMesh *)&v99, 0);
      re::buildCapsule((uint64_t)&v99, (unsigned __int16 *)v46);
LABEL_38:
      re::DynamicArray<re::GeomMesh>::add((uint64_t)v103, (uint64_t)&v99);
      re::DynamicArray<re::GeomModel>::add((_anonymous_namespace_ *)v115, (uint64_t)&v101);
      re::DynamicArray<re::GeomModelWithLods>::add((_anonymous_namespace_ *)&v126, (uint64_t)&v113);
      v151 = xmmword_2260E5F10;
      v152 = xmmword_2260E5F20;
      *(_OWORD *)v153 = xmmword_2260E5F40;
      *(_OWORD *)&v153[16] = v75;
      *(_DWORD *)&v153[32] = 0;
      re::DynamicArray<re::GeomInstance>::add((_anonymous_namespace_ *)((char *)&v130 + 8), (uint64_t)&v151);
      v88 = 16842752;
      v89 = 1;
      v90 = 0;
      v91 = 0;
      v93 = 1036831949;
      v94 = 16843008;
      v95 = 0;
      v98 = 0u;
      v96 = 0u;
      v97 = 0u;
      DWORD1(v98) = 0x7FFFFFFF;
      v92 = *(_BYTE *)(a2 + 161);
      re::makeMeshAssetDataFromGeomScene((unint64_t)&v126, (uint64_t)&v88, (uint64_t)&v151);
      v53 = re::globalAllocators(v52);
      v54 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v53[2] + 32))(v53[2], 960, 8);
      v18 = (_DWORD *)v54;
      if ((_BYTE)v151)
      {
        *(_QWORD *)&v81[0] = *((_QWORD *)&v151 + 1);
        *((_QWORD *)&v151 + 1) = 0;
        *(_OWORD *)((char *)v81 + 8) = v152;
        v152 = 0u;
        DWORD2(v81[1]) = 1;
        v55 = *(_OWORD *)&v153[8];
        memset(&v153[8], 0, 32);
        v82 = v55;
        v83 = *(_OWORD *)&v153[24];
        ++*(_DWORD *)v153;
        ++v154;
        LODWORD(v84[0]) = 1;
        *(_OWORD *)((char *)v84 + 8) = v155;
        *(_OWORD *)((char *)&v84[1] + 8) = v156;
        v155 = 0u;
        v156 = 0u;
        DWORD2(v84[2]) = 1;
        v56 = v158;
        v158 = 0u;
        v85 = v56;
        v86 = v159;
        v159 = 0u;
        *((_QWORD *)&v87 + 1) = v161;
        v161 = 0;
        ++v157;
        ++v160;
        LODWORD(v87) = 1;
      }
      else
      {
        v86 = 0u;
        v87 = 0u;
        v85 = 0u;
        memset(v84, 0, sizeof(v84));
        v82 = 0u;
        v83 = 0u;
        memset(v81, 0, sizeof(v81));
      }
      re::MeshAsset::MeshAsset(v54, (uint64_t)v81);
      if (*((_QWORD *)&v85 + 1))
      {
        if (*((_QWORD *)&v87 + 1))
          (*(void (**)(void))(**((_QWORD **)&v85 + 1) + 40))();
        *((_QWORD *)&v87 + 1) = 0;
        v86 = 0uLL;
        *((_QWORD *)&v85 + 1) = 0;
        LODWORD(v87) = v87 + 1;
      }
      re::DynamicArray<re::MeshAssetSkeleton>::deinit((uint64_t)&v84[1]);
      re::DynamicArray<re::MeshAssetInstance>::deinit((uint64_t)&v82 + 8);
      re::DynamicArray<re::MeshAssetModel>::deinit((uint64_t)v81);
      v18[231] = 1;
      v57 = *(const char **)(a4 + 8);
      v58 = *(_anonymous_namespace_ **)(a2 + 104);
      v59 = (re::MeshAsset *)strlen(v57);
      v60 = re::MeshAsset::assetType(v59);
      v61 = v58;
      v62 = (uint64_t)v57;
      v63 = (uint64_t)v59;
LABEL_46:
      v64 = re::ImportAssetTable::addAsset(v61, v62, v63, v18, (re **)v60);
      memset(v80, 0, sizeof(v80));
      if ((*(_BYTE *)(v64 + 8) & 1) != 0)
        v65 = *(re::AssetPath **)(v64 + 16);
      else
        v65 = (re::AssetPath *)(v64 + 9);
      re::AssetHandle::setSerializationString((re::DynamicString *)v80, v65, *(re::Allocator **)a2);
      v66 = re::ecs2::EntityAssetData::addComponent<re::ecs2::MeshComponent>(&v139);
      re::AssetHandle::operator=((uint64_t *)v66 + 4, v80);
      if (*(_QWORD *)(a5 + 16))
      {
        memset(v79, 0, sizeof(v79));
        v67 = re::AssetHandle::serializationString(*(re::AssetHandle **)(a5 + 32), (re::DynamicString *)v81);
        if ((BYTE8(v81[0]) & 1) != 0)
          v68 = *(re::AssetPath **)&v81[1];
        else
          v68 = (re::AssetPath *)((char *)v81 + 9);
        if (*(_QWORD *)&v81[0] && (BYTE8(v81[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v81[0] + 40))();
        re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)(v66 + 7), (re::AssetHandle *)v79);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v79);
      }
      re::DynamicArray<re::ecs2::EntityAssetData>::add(a1 + 72, (uint64_t)&v139);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v80);
      re::Result<re::MeshAssetData,re::DetailedError>::~Result((uint64_t)&v151);
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v96, v69);
      re::GeomMesh::~GeomMesh((re::GeomMesh *)&v99, v70);
      re::DynamicArray<re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::deinit((uint64_t)&v112);
      if (v110[40])
        re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)&v111);
      if (v109)
        re::DynamicArray<re::GeomIndexMap>::deinit((uint64_t)v110);
      if (v104)
      {
        v71 = v108;
        if (v108)
          (*(void (**)(void))(*(_QWORD *)v104 + 40))();
        v108 = 0;
        v105 = 0;
        v106 = 0;
        v104 = 0;
        ++v107;
      }
      re::DynamicArray<re::GeomMesh>::deinit((uint64_t)v103, v71);
      if (v101 && (v102 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v101 + 40))();
      if (v121)
      {
        if (v125)
          (*(void (**)(void))(*(_QWORD *)v121 + 40))();
        v125 = 0;
        v122 = 0;
        v123 = 0;
        v121 = 0;
        ++v124;
      }
      if (v116)
      {
        if (v120)
          (*(void (**)(void))(*(_QWORD *)v116 + 40))();
        v120 = 0;
        v117 = 0;
        v118 = 0;
        v116 = 0;
        ++v119;
      }
      re::DynamicArray<re::GeomModel>::deinit((uint64_t)v115);
      if (v113 && (v114 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v113 + 40))();
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)&v136 + 1);
      re::DynamicArray<re::GeomSkeleton>::deinit((uint64_t)&v133 + 8);
      if (*((_QWORD *)&v130 + 1))
      {
        if ((_QWORD)v133)
          (*(void (**)(void))(**((_QWORD **)&v130 + 1) + 40))();
        *(_QWORD *)&v133 = 0;
        v131 = 0uLL;
        *((_QWORD *)&v130 + 1) = 0;
        ++v132;
      }
      re::DynamicArray<re::GeomModelWithLods>::deinit((uint64_t)&v126);
      re::ecs2::EntityAssetData::~EntityAssetData((re::ecs2::EntityAssetData *)&v139);
      break;
    default:
      return;
  }
}

double re::DynamicArray<re::ModelWithLodsDescriptor>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::ModelWithLodsDescriptor>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 152 * v4;
  result = 0.0;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_QWORD *)(v5 + 24) = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 24) = 0;
  v10 = *(_QWORD *)(v5 + 8);
  v9 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 8) = v7;
  *(_QWORD *)(v5 + 16) = v8;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v9;
  *(_QWORD *)(v5 + 64) = 0;
  *(_DWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  v11 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(v5 + 40) = v11;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v12 = *(_QWORD *)(v5 + 48);
  *(_QWORD *)(v5 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v12;
  v13 = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v5 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v13;
  ++*(_DWORD *)(a2 + 56);
  ++*(_DWORD *)(v5 + 56);
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_DWORD *)(v5 + 96) = 0;
  v14 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v5 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(v5 + 80) = v14;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v15 = *(_QWORD *)(v5 + 88);
  *(_QWORD *)(v5 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = v15;
  v16 = *(_QWORD *)(v5 + 104);
  *(_QWORD *)(v5 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = v16;
  ++*(_DWORD *)(a2 + 96);
  ++*(_DWORD *)(v5 + 96);
  *(_QWORD *)(v5 + 144) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  *(_QWORD *)(v5 + 128) = 0;
  *(_QWORD *)(v5 + 112) = 0;
  *(_DWORD *)(v5 + 136) = 0;
  v17 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(v5 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(v5 + 120) = v17;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  v18 = *(_QWORD *)(v5 + 128);
  *(_QWORD *)(v5 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = v18;
  v19 = *(_QWORD *)(v5 + 144);
  *(_QWORD *)(v5 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = v19;
  ++*(_DWORD *)(a2 + 136);
  ++*(_DWORD *)(v5 + 136);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add(_QWORD *this, _QWORD *a2)
{
  _QWORD *v3;
  unint64_t v4;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  *(_QWORD *)(v3[4] + 8 * v4) = *a2;
  *a2 = 0;
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

uint64_t *re::DynamicArray<re::`anonymous namespace'::SkeletonAndAnimationInfoPerLodLevel>::~DynamicArray(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if (v2)
  {
    v3 = a1[4];
    if (v3)
    {
      v4 = a1[2];
      if (v4)
      {
        v5 = 72 * v4;
        v6 = v3 + 24;
        do
        {
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v6 + 24));
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
          v6 += 72;
          v5 -= 72;
        }
        while (v5);
        v2 = *a1;
        v3 = a1[4];
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, v3);
    }
    a1[4] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    ++*((_DWORD *)a1 + 6);
  }
  return a1;
}

uint64_t re::DynamicArray<re::MeshAssetModel>::operator[](unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1 <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return a2 + (a3 << 9);
}

uint64_t re::BucketArray<re::FixedArray<unsigned short>,16ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 4)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 4)) + 24 * (a2 & 0xF);
}

uint64_t *re::`anonymous namespace'::wireupDeformers(re *a1, uint64_t *a2, uint64_t a3, _QWORD *a4, uint64_t a5, unint64_t a6)
{
  const char *v6;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  _BYTE *v15;
  re *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  const char *v24;
  _anonymous_namespace_ *v25;
  uint64_t v26;
  _anonymous_namespace_ *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _anonymous_namespace_ *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _anonymous_namespace_ *v35;
  _anonymous_namespace_ *v36;
  uint64_t v37;
  double v38;
  unint64_t v39;
  unint64_t v40;
  re *v41;
  uint64_t *v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  const StringID *v52;
  _anonymous_namespace_ *v53;
  const char *v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  re *v60;
  NSObject *v61;
  uint8_t *v62;
  unint64_t v63;
  const char *v64;
  _anonymous_namespace_ *v65;
  const char *v66;
  uint8_t *v67;
  re *v68;
  NSObject *v69;
  NSObject *v70;
  const char *v71;
  size_t v72;
  uint8_t *v73;
  const char *v74;
  _anonymous_namespace_ *v75;
  _anonymous_namespace_ *v76;
  char *var1;
  _anonymous_namespace_ *v78;
  const void *v79;
  unint64_t v80;
  size_t v81;
  _anonymous_namespace_ *v82;
  uint64_t v83;
  unint64_t v84;
  int *v85;
  _DWORD *v86;
  unsigned int v87;
  int v88;
  BOOL v89;
  uint64_t v90;
  int v91;
  _anonymous_namespace_ *v92;
  uint64_t v93;
  unint64_t v94;
  int *v95;
  _DWORD *v96;
  unsigned int v97;
  int v98;
  const char *v99;
  _anonymous_namespace_ *v100;
  const char *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  const StringID *v113;
  unint64_t v114;
  re::StringID *v115;
  _anonymous_namespace_ *v116;
  _anonymous_namespace_ *v117;
  unint64_t v118;
  _anonymous_namespace_ *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  const StringID *v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  re::StringID *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  _anonymous_namespace_ *v140;
  uint64_t i;
  const char *v142;
  const StringID *v143;
  uint64_t v144;
  int v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  _QWORD *v150;
  unint64_t v151;
  unint64_t v152;
  const char *v153;
  const char *v154;
  const char *v155;
  const char *v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  re *v160;
  uint64_t *v161;
  uint64_t v162;
  uint8_t *v163;
  uint64_t v164;
  const char *v165;
  uint64_t v166;
  _QWORD *v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  const char *v174;
  const void **v175;
  NSObject *v176;
  __int128 *v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 *v182;
  __int128 *v183;
  uint64_t v184;
  int v185;
  const StringID *v186;
  unint64_t v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  _BOOL8 v198;
  uint64_t v199;
  uint64_t v200;
  const char *v201;
  const StringID *v202;
  __n128 *v203;
  const StringID *v204;
  uint64_t v205;
  NSObject *v206;
  NSObject *v207;
  unint64_t v208;
  _QWORD *v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  int *v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void **v219;
  int v220;
  uint64_t v221;
  _anonymous_namespace_ *v222;
  uint64_t v223;
  uint64_t v224;
  void *v225;
  uint64_t *v226;
  uint64_t v227;
  re::AssetPath *v228;
  uint64_t v229;
  _anonymous_namespace_ *v230;
  uint64_t v231;
  uint64_t v232;
  void *v233;
  uint64_t *v234;
  re::DynamicString *v235;
  int v236;
  int v237;
  _QWORD *v238;
  re::MeshDeformationAsset *v239;
  re::DynamicString *v240;
  _anonymous_namespace_ *v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t *v245;
  uint64_t v246;
  re::AssetPath *v247;
  _anonymous_namespace_ *v248;
  _QWORD *v249;
  re::MeshDeformationAsset *v250;
  re::DynamicString *v251;
  _anonymous_namespace_ *v252;
  uint64_t v253;
  uint64_t v254;
  _QWORD *v255;
  uint64_t *v256;
  uint64_t v257;
  re::AssetPath *v258;
  uint64_t v260;
  _QWORD *v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unsigned int v279;
  _QWORD *v280;
  unsigned int *v281;
  _anonymous_namespace_ *v282;
  unint64_t v283;
  _QWORD v284[2];
  __n128 *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  const char *v290;
  uint64_t v291;
  unint64_t v292;
  const char *v293;
  char v294[8];
  uint64_t v295;
  StringID v296;
  uint64_t v297;
  StringID v298;
  StringID v299;
  StringID v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  int v308;
  uint64_t v309;
  __int128 v310;
  __int128 v311;
  int v312;
  uint64_t v313;
  uint8_t v314[48];
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  char v328;
  __n128 buf[2];
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  char v344;
  _BYTE v345[48];
  __int128 v346;
  __int128 v347;
  __int128 v348;
  uint64_t v349;
  __int16 v350;
  _QWORD *v351;
  _QWORD v352[7];

  v352[4] = *MEMORY[0x24BDAC8D0];
  v10 = re::globalAllocators(a1);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10[2] + 32))(v10[2], 80, 8);
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  v352[3] = v352;
  v351 = (_QWORD *)v11;
  v352[0] = &off_24ED432C8;
  v312 = 0;
  v310 = 0u;
  v311 = 0u;
  v313 = 0x7FFFFFFFLL;
  v280 = a4;
  if (!a4[7])
    goto LABEL_472;
  v13 = 0;
  v14 = 0;
  v15 = v345;
  v271 = a6;
  v268 = a5;
  v269 = a5 + 24;
  v16 = a1;
  v282 = (re *)((char *)a1 + 32);
  while (1)
  {
    v17 = a4[9] + 96 * v13;
    v18 = *(unsigned int *)(v17 + 80);
    v281 = (unsigned int *)(v17 + 80);
    v19 = *(_QWORD *)(a5 + 40);
    if (v19 <= v18)
      goto LABEL_500;
    a6 = v18 >> 3;
    v6 = *(const char **)(a5 + 8);
    if ((unint64_t)v6 <= v18 >> 3)
      goto LABEL_501;
    v270 = v14;
    v274 = v13;
    v20 = *(_QWORD *)(a5 + 32);
    if ((*(_BYTE *)(a5 + 16) & 1) != 0)
      v20 = v269;
    v273 = *(_QWORD *)(v20 + 8 * a6) + 40 * (v18 & 7);
    if (*(_QWORD *)(v273 + 16))
    {
      a6 = a4[2];
      if (a6 <= v18)
        goto LABEL_506;
      v21 = a4[4] + (v18 << 9);
      if (*(_QWORD *)(v21 + 208))
        break;
    }
LABEL_440:
    v13 = (v270 + 1);
    v14 = v270 + 1;
    a5 = v268;
    if (a4[7] <= v13)
    {
      if (HIDWORD(v311))
      {
        LODWORD(v126) = v312;
        if (!v312)
          goto LABEL_450;
        v213 = 0;
        v214 = (int *)(v311 + 8);
        while (1)
        {
          v215 = *v214;
          v214 += 14;
          if (v215 < 0)
            goto LABEL_451;
          if (v312 == ++v213)
          {
            LODWORD(v213) = v312;
            goto LABEL_451;
          }
        }
      }
      goto LABEL_472;
    }
  }
  v22 = 0;
  v279 = 0;
  while (1)
  {
    v277 = v22;
    v309 = 0;
    v307 = 0;
    v305 = 0;
    v306 = 0;
    v308 = 0;
    v23 = *(_QWORD *)(v273 + 16);
    if (v23)
      break;
LABEL_436:
    re::DynamicArray<re::DeformationStackDefinition>::add(v351, (uint64_t)&v305);
    v209 = v351;
    v314[0] = 1;
    v18 = a4[7];
    v210 = v274;
    if (v18 <= v274)
      goto LABEL_495;
    re::StringID::StringID((re::StringID *)&v314[8], (const StringID *)(a4[9] + 96 * v274));
    v18 = *v281;
    a6 = a4[2];
    if (a6 <= v18)
      goto LABEL_496;
    v211 = a4[4] + (v18 << 9);
    v18 = *(_QWORD *)(v211 + 208);
    v212 = v277;
    if (v18 <= v277)
      goto LABEL_497;
    re::StringID::StringID((re::StringID *)&v314[24], (const StringID *)(*(_QWORD *)(v211 + 224) + (v277 << 8) + 72));
    *(_QWORD *)&v314[40] = v351[2] - 1;
    re::DynamicArray<re::MeshDeformationIndex>::add(v209 + 5, (uint64_t)v314);
    re::StringID::destroyString((re::StringID *)&v314[24]);
    re::StringID::destroyString((re::StringID *)&v314[8]);
    re::DynamicArray<re::DeformationDefinition>::deinit((uint64_t)&v305);
    v22 = ++v279;
    if (*(_QWORD *)(v21 + 208) <= (unint64_t)v279)
      goto LABEL_440;
  }
  v18 = *(_QWORD *)(v273 + 32);
  v283 = v18 + 448 * v23;
  while (1)
  {
    v24 = *(const char **)(v18 + 24);
    v25 = (_anonymous_namespace_ *)strcmp(v24, "BlendShape");
    if (!(_DWORD)v25)
    {
LABEL_19:
      *(_DWORD *)v345 = 0;
      buf[0].n128_u64[0] = 0x1954B86F1FEF5A4;
      buf[0].n128_u64[1] = (unint64_t)"Blend Shape";
      *(_QWORD *)v314 = v345;
      *(_QWORD *)&v314[8] = 4;
      *(_QWORD *)&v330 = 0;
      buf[1] = 0uLL;
      re::FixedArray<unsigned char>::copy(&buf[1], (uint64_t)v314);
      re::DynamicArray<re::DeformationDefinition>::add(&v305, (uint64_t *)buf);
      if (buf[1].n128_u64[0])
      {
        if (buf[1].n128_u64[1])
        {
          (*(void (**)(void))(*(_QWORD *)buf[1].n128_u64[0] + 40))();
          buf[1].n128_u64[1] = 0;
          *(_QWORD *)&v330 = 0;
        }
        buf[1].n128_u64[0] = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      if (!*(_QWORD *)v282)
        goto LABEL_50;
      v28 = *((_QWORD *)v16 + 6);
      if (!v28)
        goto LABEL_50;
      v29 = (_QWORD *)(*((_QWORD *)v16 + 8) + 8);
      v30 = 24 * v28;
      while (*(v29 - 1) != *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                            + 3) >> 1)
      {
        v29 += 3;
        v30 -= 24;
        if (!v30)
          goto LABEL_50;
      }
      if (!*v29)
LABEL_50:
        re::ecs2::EntityAssetData::addComponent<re::ecs2::BlendShapeWeightsComponent>(v16);
      goto LABEL_309;
    }
    v6 = (const char *)(v18 + 16);
    v26 = *(_QWORD *)(v18 + 16) >> 1;
    if (v26 == 0xCAA5C378FF7AD2)
    {
      if (v24 == "Blend Shape")
        goto LABEL_19;
      v25 = (_anonymous_namespace_ *)strcmp(v24, "Blend Shape");
      if (!(_DWORD)v25)
        goto LABEL_19;
      v27 = (_anonymous_namespace_ *)strcmp(v24, "Skinning");
      if (!(_DWORD)v27)
      {
LABEL_34:
        *(_WORD *)v345 = 0;
        v32 = *(_QWORD *)(v18 + 48);
        v6 = "deformUserTangentsAndNormals";
        if (v32)
        {
          v33 = *(_QWORD *)(v18 + 64);
          v34 = 40 * v32;
          do
          {
            v27 = (_anonymous_namespace_ *)strcmp(*(const char **)(v33 + 16), "deformUserTangentsAndNormals");
            if (!(_DWORD)v27)
            {
              if (*(_DWORD *)(v33 + 24) == 1)
                v345[1] = *(_DWORD *)(v33 + 32) != 0;
              else
            }
            v33 += 40;
            v34 -= 40;
          }
          while (v34);
        }
        buf[0].n128_u64[0] = 0x4550755B7A2;
        buf[0].n128_u64[1] = (unint64_t)"Skinning";
        *(_QWORD *)v314 = v345;
        *(_QWORD *)&v314[8] = 2;
        *(_QWORD *)&v330 = 0;
        buf[1] = 0uLL;
        re::FixedArray<unsigned char>::copy(&buf[1], (uint64_t)v314);
        re::DynamicArray<re::DeformationDefinition>::add(&v305, (uint64_t *)buf);
        if (buf[1].n128_u64[0])
        {
          if (buf[1].n128_u64[1])
          {
            (*(void (**)(void))(*(_QWORD *)buf[1].n128_u64[0] + 40))();
            buf[1].n128_u64[1] = 0;
            *(_QWORD *)&v330 = 0;
          }
          buf[1].n128_u64[0] = 0;
        }
        re::StringID::destroyString((re::StringID *)buf);
        if (!re::ecs2::EntityAssetData::tryGetComponent<re::ecs2::SkeletalPoseComponent>(v16))
          re::ecs2::EntityAssetData::addComponent<re::ecs2::SkeletalPoseComponent>(v16);
        if (!re::ecs2::EntityAssetData::tryGetComponent<re::ecs2::RigComponent>(v16))
          re::ecs2::EntityAssetData::addComponent<re::ecs2::RigComponent>(v16);
        goto LABEL_309;
      }
LABEL_32:
      v31 = (_anonymous_namespace_ *)strcmp(v24, "SmoothDeformer");
      if (!(_DWORD)v31)
        goto LABEL_61;
      goto LABEL_56;
    }
    v27 = (_anonymous_namespace_ *)strcmp(v24, "Skinning");
    if (!(_DWORD)v27)
      goto LABEL_34;
    if (v26 == 0x22A83AADBD1)
    {
      if (v24 == "Skinning")
        goto LABEL_34;
      goto LABEL_32;
    }
    v31 = (_anonymous_namespace_ *)strcmp(v24, "SmoothDeformer");
    if (!(_DWORD)v31)
      goto LABEL_61;
    if (v26 == 0x2D6F1CB4C5FBF820)
    {
      if (v24 != "SmoothDeformer")
      {
        v35 = (_anonymous_namespace_ *)strcmp(v24, "WrapDeformer");
        if (!(_DWORD)v35)
          goto LABEL_73;
        goto LABEL_59;
      }
LABEL_61:
      v294[0] = 0;
      buf[0].n128_u64[0] = 0x5ADE39698BF7F040;
      buf[0].n128_u64[1] = (unint64_t)"SmoothDeformer";
      *(_QWORD *)v314 = v294;
      *(_QWORD *)&v314[8] = 1;
      *(_QWORD *)&v330 = 0;
      buf[1] = 0uLL;
      re::FixedArray<unsigned char>::copy(&buf[1], (uint64_t)v314);
      re::DynamicArray<re::DeformationDefinition>::add(&v305, (uint64_t *)buf);
      if (buf[1].n128_u64[0])
      {
        if (buf[1].n128_u64[1])
        {
          (*(void (**)(void))(*(_QWORD *)buf[1].n128_u64[0] + 40))();
          buf[1].n128_u64[1] = 0;
          *(_QWORD *)&v330 = 0;
        }
        buf[1].n128_u64[0] = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      if (!re::ecs2::EntityAssetData::tryGetComponent<re::ecs2::MeshSmoothComponent>(v16))
      {
        if (!*(_QWORD *)v282)
        {
          re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v282, 0);
          ++*((_DWORD *)v16 + 14);
        }
        v37 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                    + 7)
                                                                 + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 336, 0);
        v38 = re::make::shared::inplace<re::ecs2::MeshSmoothComponent>(v37, v314);
        v39 = *(_QWORD *)((*(uint64_t (**)(_QWORD, double))(**(_QWORD **)v314 + 40))(*(_QWORD *)v314, v38)
                        + 24) >> 1;
        v40 = *(_QWORD *)v314;
        *(_QWORD *)v314 = 0;
        buf[0].n128_u64[0] = v39;
        buf[0].n128_u64[1] = v40;
        buf[1].n128_u8[0] = 1;
        re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add(v282, buf);
        if (*(_QWORD *)v314)

        v345[0] = 11;
        v42 = re::globalAllocators(v41);
        v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v42[2] + 32))(v42[2], 40, 8);
        *(_OWORD *)v43 = 0u;
        *(_OWORD *)(v43 + 16) = 0u;
        *(_QWORD *)(v43 + 32) = 0;
        *(_QWORD *)v314 = &off_24ED43358;
        *(_QWORD *)&v314[24] = v314;
        *(_QWORD *)&v330 = &buf[0].n128_u64[1];
        buf[0].n128_u64[0] = v43;
        buf[0].n128_u64[1] = (unint64_t)&off_24ED43358;
        re::HashTable<unsigned char,std::unique_ptr<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>,std::function<void ()(re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>*)>>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,true,false>::add((uint64_t)&v310, v345, (uint64_t *)buf);
        std::unique_ptr<re::TypeRegistry,std::function<void ()(re::TypeRegistry*)>>::~unique_ptr[abi:nn180100]((uint64_t *)buf);
        v44 = *(uint8_t **)&v314[24];
        if (*(uint8_t **)&v314[24] == v314)
        {
          v44 = v314;
          v45 = 4;
LABEL_275:
          (*(void (**)(void))(*(_QWORD *)v44 + 8 * v45))();
        }
        else if (*(_QWORD *)&v314[24])
        {
          v45 = 5;
          goto LABEL_275;
        }
      }
      *(_QWORD *)&v300.var0 = 0;
      v300.var1 = (char *)&str_110;
      LOWORD(v301) = v279;
      v136 = *(_QWORD *)(v18 + 48);
      if (v136)
      {
        v137 = *(_QWORD *)(v18 + 64);
        v138 = re::ecs2::EntityAssetData::tryGetComponent<re::ecs2::MeshSmoothComponent>(a1);
        v139 = (_QWORD *)(v138 + 32);
        v140 = (_anonymous_namespace_ *)(v138 + 72);
        for (i = 40 * v136; i; i -= 40)
        {
          v142 = *(const char **)(v137 + 16);
          if (!strcmp(v142, "lambda"))
          {
            if (*(_DWORD *)(v137 + 24))
            {
              buf[0].n128_u8[0] = 0;
              v144 = v137;
              v145 = 0;
LABEL_290:
              goto LABEL_295;
            }
            buf[0].n128_u32[1] = *(_DWORD *)(v137 + 32);
            buf[0].n128_u8[0] = 1;
            re::DynamicArray<float>::add(v140, &buf[0].n128_f32[1]);
          }
          else if (!strcmp(v142, "iterations"))
          {
            if (*(_DWORD *)(v137 + 24) != 1)
            {
              v144 = v137;
              v145 = 1;
              goto LABEL_290;
            }
            buf[0].n128_u32[0] = *(_DWORD *)(v137 + 32);
            re::DynamicArray<int>::add(v139, buf);
          }
          else if (!strcmp(v142, "envelopeVarName"))
          {
            if (*(_DWORD *)(v137 + 24) == 6)
            {
              v143 = (const StringID *)re::BucketArray<re::StringID,8ul>::operator[](v18 + 336, *(_QWORD *)(v137 + 32));
              buf[0].n128_u8[0] = 1;
              re::StringID::StringID((re::StringID *)&buf[0].n128_i8[8], v143);
              if (buf[0].n128_u8[0])
              {
                re::StringID::operator=((unint64_t *)&v300, &buf[0].n128_i64[1]);
                goto LABEL_293;
              }
            }
            else
            {
              buf[0].n128_u8[0] = 0;
            }
LABEL_293:
            if (buf[0].n128_u8[0])
              re::StringID::destroyString((re::StringID *)&buf[0].n128_i8[8]);
          }
LABEL_295:
          v137 += 40;
        }
      }
      v146 = *v281;
      a4 = v280;
      v6 = (const char *)v280[2];
      if ((unint64_t)v6 <= v146)
      {
        *(_QWORD *)v345 = 0;
        v331 = 0u;
        v332 = 0u;
        v330 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v314 = 136315906;
        *(_QWORD *)&v314[4] = "operator[]";
        *(_WORD *)&v314[12] = 1024;
        *(_DWORD *)&v314[14] = 789;
        *(_WORD *)&v314[18] = 2048;
        *(_QWORD *)&v314[20] = v146;
        *(_WORD *)&v314[28] = 2048;
        *(_QWORD *)&v314[30] = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_492:
        v297 = 0;
        v331 = 0u;
        v332 = 0u;
        v330 = 0u;
        memset(buf, 0, sizeof(buf));
        v263 = v149;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v345 = 136315906;
        *(_QWORD *)&v345[4] = "operator[]";
        *(_WORD *)&v345[12] = 1024;
        *(_DWORD *)&v345[14] = 789;
        *(_WORD *)&v345[18] = 2048;
        *(_QWORD *)&v345[20] = v263;
        *(_WORD *)&v345[28] = 2048;
        *(_QWORD *)&v345[30] = v146;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_493:
        v297 = 0;
        v331 = 0u;
        v332 = 0u;
        v330 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v345 = 136315906;
        *(_QWORD *)&v345[4] = "operator[]";
        *(_WORD *)&v345[12] = 1024;
        *(_DWORD *)&v345[14] = 789;
        *(_WORD *)&v345[18] = 2048;
        *(_QWORD *)&v345[20] = v146;
        *(_WORD *)&v345[28] = 2048;
        *(_QWORD *)&v345[30] = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_494:
        v297 = 0;
        v331 = 0u;
        v332 = 0u;
        v330 = 0u;
        memset(buf, 0, sizeof(buf));
        v18 = v152;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v345 = 136315906;
        *(_QWORD *)&v345[4] = "operator[]";
        *(_WORD *)&v345[12] = 1024;
        *(_DWORD *)&v345[14] = 789;
        *(_WORD *)&v345[18] = 2048;
        *(_QWORD *)&v345[20] = v18;
        *(_WORD *)&v345[28] = 2048;
        *(_QWORD *)&v345[30] = v146;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_495:
        *(_QWORD *)&v300.var0 = 0;
        v331 = 0u;
        v332 = 0u;
        v330 = 0u;
        memset(buf, 0, sizeof(buf));
        a6 = v210;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v345 = 136315906;
        *(_QWORD *)&v345[4] = "operator[]";
        *(_WORD *)&v345[12] = 1024;
        *(_DWORD *)&v345[14] = 789;
        *(_WORD *)&v345[18] = 2048;
        *(_QWORD *)&v345[20] = a6;
        *(_WORD *)&v345[28] = 2048;
        *(_QWORD *)&v345[30] = v18;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_496:
        *(_QWORD *)&v300.var0 = 0;
        v331 = 0u;
        v332 = 0u;
        v330 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v345 = 136315906;
        *(_QWORD *)&v345[4] = "operator[]";
        *(_WORD *)&v345[12] = 1024;
        *(_DWORD *)&v345[14] = 789;
        *(_WORD *)&v345[18] = 2048;
        *(_QWORD *)&v345[20] = v18;
        *(_WORD *)&v345[28] = 2048;
        *(_QWORD *)&v345[30] = a6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_497:
        *(_QWORD *)&v300.var0 = 0;
        v331 = 0u;
        v332 = 0u;
        v330 = 0u;
        memset(buf, 0, sizeof(buf));
        a6 = v212;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v345 = 136315906;
        *(_QWORD *)&v345[4] = "operator[]";
        *(_WORD *)&v345[12] = 1024;
        *(_DWORD *)&v345[14] = 789;
        *(_WORD *)&v345[18] = 2048;
        *(_QWORD *)&v345[20] = a6;
        *(_WORD *)&v345[28] = 2048;
        *(_QWORD *)&v345[30] = v18;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_498:
        v297 = 0;
        v331 = 0u;
        v332 = 0u;
        v330 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v314 = 136315906;
        *(_QWORD *)&v314[4] = "operator[]";
        *(_WORD *)&v314[12] = 1024;
        *(_DWORD *)&v314[14] = 789;
        *(_WORD *)&v314[18] = 2048;
        *(_QWORD *)&v314[20] = a6;
        *(_WORD *)&v314[28] = 2048;
        *(_QWORD *)&v314[30] = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_499:
        *(_QWORD *)&v300.var0 = 0;
        v331 = 0u;
        v332 = 0u;
        v330 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v345 = 136315906;
        *(_QWORD *)&v345[4] = "operator[]";
        *(_WORD *)&v345[12] = 1024;
        *(_DWORD *)&v345[14] = 789;
        *(_WORD *)&v345[18] = 2048;
        *(_QWORD *)&v345[20] = a6;
        *(_WORD *)&v345[28] = 2048;
        *(_QWORD *)&v345[30] = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_500:
        re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, v18, v19);
        _os_crash();
        __break(1u);
LABEL_501:
        *(_QWORD *)v345 = 0;
        v331 = 0u;
        v332 = 0u;
        v330 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v314 = 136315906;
        *(_QWORD *)&v314[4] = "operator[]";
        *(_WORD *)&v314[12] = 1024;
        *(_DWORD *)&v314[14] = 866;
        *(_WORD *)&v314[18] = 2048;
        *(_QWORD *)&v314[20] = a6;
        *(_WORD *)&v314[28] = 2048;
        *(_QWORD *)&v314[30] = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_502:
        *(_QWORD *)v345 = 0;
        v331 = 0u;
        v332 = 0u;
        v330 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v314 = 136315906;
        *(_QWORD *)&v314[4] = "operator[]";
        *(_WORD *)&v314[12] = 1024;
        *(_DWORD *)&v314[14] = 789;
        *(_WORD *)&v314[18] = 2048;
        *(_QWORD *)&v314[20] = a6;
        *(_WORD *)&v314[28] = 2048;
        *(_QWORD *)&v314[30] = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_503:
        v297 = 0;
        v331 = 0u;
        v332 = 0u;
        v330 = 0u;
        memset(buf, 0, sizeof(buf));
        v264 = v197;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v345 = 136315906;
        *(_QWORD *)(v15 + 4) = "operator[]";
        *(_WORD *)&v345[12] = 1024;
        *(_DWORD *)(v15 + 14) = 789;
        *(_WORD *)&v345[18] = 2048;
        *(_QWORD *)(v15 + 20) = v264;
        *(_WORD *)&v345[28] = 2048;
        *(_QWORD *)(v15 + 30) = a6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_504:
        v297 = 0;
        v331 = 0u;
        v332 = 0u;
        v330 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v345 = 136315906;
        *(_QWORD *)(v15 + 4) = "operator[]";
        *(_WORD *)&v345[12] = 1024;
        *(_DWORD *)(v15 + 14) = 789;
        *(_WORD *)&v345[18] = 2048;
        *(_QWORD *)(v15 + 20) = a6;
        *(_WORD *)&v345[28] = 2048;
        *(_QWORD *)(v15 + 30) = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_505:
        v297 = 0;
        v331 = 0u;
        v332 = 0u;
        v330 = 0u;
        memset(buf, 0, sizeof(buf));
        v18 = v152;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v345 = 136315906;
        *(_QWORD *)(v15 + 4) = "operator[]";
        *(_WORD *)&v345[12] = 1024;
        *(_DWORD *)(v15 + 14) = 789;
        *(_WORD *)&v345[18] = 2048;
        *(_QWORD *)(v15 + 20) = v18;
        *(_WORD *)&v345[28] = 2048;
        *(_QWORD *)(v15 + 30) = a6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_506:
        *(_QWORD *)v345 = 0;
        v331 = 0u;
        v332 = 0u;
        v330 = 0u;
        memset(buf, 0, sizeof(buf));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v314 = 136315906;
        *(_QWORD *)&v314[4] = "operator[]";
        *(_WORD *)&v314[12] = 1024;
        *(_DWORD *)&v314[14] = 789;
        *(_WORD *)&v314[18] = 2048;
        *(_QWORD *)&v314[20] = v18;
        *(_WORD *)&v314[28] = 2048;
        *(_QWORD *)&v314[30] = a6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_507:
        v297 = 0;
        v315 = 0u;
        v316 = 0u;
        memset(v314, 0, sizeof(v314));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v345 = 136315906;
        *(_QWORD *)(v15 + 4) = "operator[]";
        *(_WORD *)&v345[12] = 1024;
        *(_DWORD *)(v15 + 14) = 789;
        *(_WORD *)&v345[18] = 2048;
        *(_QWORD *)(v15 + 20) = a6;
        *(_WORD *)&v345[28] = 2048;
        *(_QWORD *)(v15 + 30) = a4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_508:
        v297 = 0;
        v315 = 0u;
        v316 = 0u;
        memset(v314, 0, sizeof(v314));
        v265 = v168;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v345 = 136315906;
        *(_QWORD *)(v15 + 4) = "operator[]";
        *(_WORD *)&v345[12] = 1024;
        *(_DWORD *)(v15 + 14) = 789;
        *(_WORD *)&v345[18] = 2048;
        *(_QWORD *)(v15 + 20) = v265;
        *(_WORD *)&v345[28] = 2048;
        *(_QWORD *)(v15 + 30) = a6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::DynamicArray<re::MeshAssetSmoothDeformerData>::add((_QWORD *)(v280[4] + (v146 << 9) + 352), (uint64_t *)&v300);
      if ((_QWORD)v310)
      {
        v147 = v311;
        v148 = *(unsigned int *)(*((_QWORD *)&v310 + 1) + 4 * (0x3462D848F53ABB6DuLL % DWORD2(v311)));
        v16 = a1;
        v149 = v274;
        if ((_DWORD)v148 == 0x7FFFFFFF)
        {
LABEL_301:
          LODWORD(v148) = 0x7FFFFFFF;
        }
        else
        {
          while (*(_BYTE *)(v311 + 56 * v148 + 12) != 11)
          {
            v148 = *(_DWORD *)(v311 + 56 * v148 + 8) & 0x7FFFFFFF;
            if (v148 == 0x7FFFFFFF)
              goto LABEL_301;
          }
        }
      }
      else
      {
        v147 = v311;
        LODWORD(v148) = 0x7FFFFFFF;
        v16 = a1;
        v149 = v274;
      }
      v150 = *(_QWORD **)(v147 + 56 * v148 + 16);
      v314[0] = 1;
      v146 = v280[7];
      if (v146 <= v149)
        goto LABEL_492;
      re::StringID::StringID((re::StringID *)&v314[8], (const StringID *)(v280[9] + 96 * v149));
      v146 = *v281;
      v6 = (const char *)v280[2];
      if ((unint64_t)v6 <= v146)
        goto LABEL_493;
      v151 = v280[4] + (v146 << 9);
      v146 = *(_QWORD *)(v151 + 208);
      v152 = v277;
      if (v146 <= v277)
        goto LABEL_494;
      goto LABEL_306;
    }
LABEL_56:
    v35 = (_anonymous_namespace_ *)strcmp(v24, "WrapDeformer");
    if (!(_DWORD)v35)
      goto LABEL_73;
    if (v26 == 0x2002D25A84007EBCLL)
    {
      if (v24 != "WrapDeformer")
      {
LABEL_59:
        v36 = (_anonymous_namespace_ *)strcmp(v24, "ContactDeformer");
        if (!(_DWORD)v36)
          goto LABEL_230;
        goto LABEL_225;
      }
LABEL_73:
      v304 = 0;
      *(_QWORD *)&v300.var0 = 0;
      v300.var1 = (char *)&str_110;
      v302 = 0;
      v303 = 0;
      v301 = 0;
      if (*(_QWORD *)(v18 + 88))
      {
        v46 = *(_QWORD *)(v18 + 104);
        *(_QWORD *)v345 = 0;
        *(_QWORD *)&v345[8] = &str_110;
        *(_QWORD *)&v345[16] = 0;
        *(_QWORD *)&v345[24] = &str_110;
        *(_OWORD *)&v345[32] = 0u;
        v346 = 0u;
        v347 = 0u;
        v348 = 0u;
        v349 = 0;
        v350 = v279;
        v47 = *(_QWORD *)(v46 + 16);
        if (v47)
        {
          v48 = *(_QWORD *)(v46 + 32);
          v49 = v48 + 40 * v47;
          v50 = v18 + 280;
          v275 = v18 + 224;
          do
          {
            v51 = *(const char **)(v48 + 16);
            if (!strcmp(v51, "faceIndices"))
            {
              if (*(_DWORD *)(v48 + 24) != 2)
              {
                v90 = v48;
                v91 = 2;
LABEL_145:
                goto LABEL_146;
              }
              v78 = (_anonymous_namespace_ *)re::BucketArray<re::FixedArray<int>,8ul>::operator[](v18 + 112, *(_QWORD *)(v48 + 32));
              v79 = (const void *)*((_QWORD *)v78 + 2);
              v80 = *(_QWORD *)v48;
              v81 = 4 * v80;
              a4 = v280;
              memcpy((void *)v346, v79, v81);
            }
            else
            {
              if (!strcmp(v51, "faceCoordinates"))
              {
                if (*(_DWORD *)(v48 + 24) == 4)
                {
                  v82 = (_anonymous_namespace_ *)re::BucketArray<re::FixedArray<int>,8ul>::operator[](v275, *(_QWORD *)(v48 + 32));
                  v83 = *((_QWORD *)v82 + 2);
                  v84 = *(_QWORD *)v48;
                  if (v84)
                  {
                    v85 = (int *)(v83 + 8);
                    v86 = (_DWORD *)(*((_QWORD *)&v347 + 1) + 8);
                    v87 = 1;
                    do
                    {
                      *(v86 - 2) = *(v85 - 2);
                      *(v86 - 1) = *(v85 - 1);
                      v88 = *v85;
                      v85 += 3;
                      *v86 = v88;
                      v86 += 4;
                      v89 = v84 > v87++;
                    }
                    while (v89);
                  }
                  goto LABEL_146;
                }
LABEL_144:
                v90 = v48;
                v91 = 4;
                goto LABEL_145;
              }
              if (!strcmp(v51, "offsets"))
              {
                if (*(_DWORD *)(v48 + 24) == 4)
                {
                  v92 = (_anonymous_namespace_ *)re::BucketArray<re::FixedArray<int>,8ul>::operator[](v275, *(_QWORD *)(v48 + 32));
                  v93 = *((_QWORD *)v92 + 2);
                  v94 = *(_QWORD *)v48;
                  if (v94)
                  {
                    v95 = (int *)(v93 + 8);
                    v96 = (_DWORD *)(v349 + 8);
                    v97 = 1;
                    do
                    {
                      *(v96 - 2) = *(v95 - 2);
                      *(v96 - 1) = *(v95 - 1);
                      v98 = *v95;
                      v95 += 3;
                      *v96 = v98;
                      v96 += 4;
                      v89 = v94 > v97++;
                    }
                    while (v89);
                  }
                  goto LABEL_146;
                }
                goto LABEL_144;
              }
              if (!strcmp(v51, "target"))
              {
                if (*(_DWORD *)(v48 + 24) == 5)
                {
                  v52 = (const StringID *)re::BucketArray<re::GeomDeformer::MeshTarget,8ul>::operator[](v50, *(_QWORD *)(v48 + 32));
                  LOBYTE(v297) = 1;
                  re::StringID::StringID((re::StringID *)&v298, v52);
                  re::StringID::StringID((re::StringID *)&v299, v52 + 1);
                  if ((_BYTE)v297)
                  {
                    re::StringID::StringID((re::StringID *)v294, &v298);
                    re::StringID::StringID((re::StringID *)&v296, &v299);
                    v53 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"%s-0", (re::DynamicString *)buf, v295);
                    if ((buf[0].n128_u8[8] & 1) != 0)
                      v54 = (const char *)buf[1].n128_u64[0];
                    else
                      v54 = &buf[0].n128_i8[9];
                    v291 = 0;
                    v292 = (unint64_t)&str_110;
                    v55 = v291;
                    v56 = v292;
                    v292 = (unint64_t)&str_110;
                    v291 = 0;
                    v57 = v345[0];
                    v58 = *(_QWORD *)&v345[8];
                    *(_QWORD *)v345 = v55;
                    *(_QWORD *)&v345[8] = v56;
                    *(_QWORD *)&v314[8] = v58;
                    *(_QWORD *)v314 = v55 & 0xFFFFFFFFFFFFFFFELL | v57 & 1;
                    re::StringID::destroyString((re::StringID *)v314);
                    re::StringID::destroyString((re::StringID *)&v291);
                    if (buf[0].n128_u64[0] && (buf[0].n128_u8[8] & 1) != 0)
                      (*(void (**)(void))(*(_QWORD *)buf[0].n128_u64[0] + 40))();
                    re::DynamicString::format((re::DynamicString *)"%s", (re::DynamicString *)&v291, *(_QWORD *)&v345[8]);
                    v59 = v271;
                    if (v292 >= 0x100 && (v292 & 1) != 0)
                    {
                      re::DynamicString::DynamicString((re::DynamicString *)v314, (const re::DynamicString *)&v291);
                      re::DynamicString::substr((re::DynamicString *)&v291, 0, 0x7FuLL, (re::DynamicString *)buf);
                      re::DynamicString::operator=((re::DynamicString *)&v291, (re::DynamicString *)buf);
                      v60 = (re *)buf[0].n128_u64[0];
                      if (buf[0].n128_u64[0] && (buf[0].n128_u8[8] & 1) != 0)
                        v60 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)buf[0].n128_u64[0] + 40))();
                      v61 = *re::pipelineLogObjects(v60);
                      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
                      {
                        v62 = *(uint8_t **)&v314[16];
                        if ((v314[8] & 1) == 0)
                          v62 = &v314[9];
                        v63 = v314[8] >> 1;
                        if ((v314[8] & 1) != 0)
                          v63 = *(_QWORD *)&v314[8] >> 1;
                        v64 = (char *)&v292 + 1;
                        if ((v292 & 1) != 0)
                          v64 = v293;
                        buf[0].n128_u32[0] = 136315906;
                        *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)v62;
                        buf[0].n128_u16[6] = 2048;
                        *(unint64_t *)((char *)&buf[0].n128_u64[1] + 6) = v63;
                        buf[1].n128_u16[3] = 2048;
                        buf[1].n128_u64[1] = 127;
                        LOWORD(v330) = 2080;
                        *(_QWORD *)((char *)&v330 + 2) = v64;
                        _os_log_impl(&dword_224FE9000, v61, OS_LOG_TYPE_DEFAULT, "Name '%s' was too long (%zu characters, max %zu), shortened into '%s' for wait fence ID name. This may cause conflicts.", (uint8_t *)buf, 0x2Au);
                      }
                      if (*(_QWORD *)v314 && (v314[8] & 1) != 0)
                        (*(void (**)(void))(**(_QWORD **)v314 + 40))();
                    }
                    v65 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"%s-0", (re::DynamicString *)&v288, *(_QWORD *)(v21 + 8));
                    if (v289 >= 0x100 && (v289 & 1) != 0)
                    {
                      v66 = *(const char **)(v21 + 8);
                      re::DynamicString::substr((re::DynamicString *)buf, 0, 0x7DuLL, (re::DynamicString *)v314);
                      if (buf[0].n128_u64[0] && (buf[0].n128_u8[8] & 1) != 0)
                        (*(void (**)(void))(*(_QWORD *)buf[0].n128_u64[0] + 40))();
                      v67 = &v314[9];
                      if ((v314[8] & 1) != 0)
                        v67 = *(uint8_t **)&v314[16];
                      re::DynamicString::format((re::DynamicString *)"%s-0", (re::DynamicString *)buf, v67);
                      re::DynamicString::operator=((re::DynamicString *)&v288, (re::DynamicString *)buf);
                      v68 = (re *)buf[0].n128_u64[0];
                      if (buf[0].n128_u64[0] && (buf[0].n128_u8[8] & 1) != 0)
                        v68 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)buf[0].n128_u64[0] + 40))();
                      v69 = *re::pipelineLogObjects(v68);
                      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
                      {
                        v70 = v69;
                        v71 = *(const char **)(v21 + 8);
                        v72 = strlen(v71);
                        v73 = &v314[9];
                        if ((v314[8] & 1) != 0)
                          v73 = *(uint8_t **)&v314[16];
                        buf[0].n128_u32[0] = 136315906;
                        *(unint64_t *)((char *)buf[0].n128_u64 + 4) = (unint64_t)v71;
                        buf[0].n128_u16[6] = 2048;
                        *(unint64_t *)((char *)&buf[0].n128_u64[1] + 6) = v72;
                        buf[1].n128_u16[3] = 2048;
                        buf[1].n128_u64[1] = 125;
                        LOWORD(v330) = 2080;
                        *(_QWORD *)((char *)&v330 + 2) = v73;
                        _os_log_impl(&dword_224FE9000, v70, OS_LOG_TYPE_DEFAULT, "Name '%s' was too long (%zu characters, max %zu), shortened into '%s' for fence ID name. This may cause conflicts.", (uint8_t *)buf, 0x2Au);

                      }
                      if (*(_QWORD *)v314 && (v314[8] & 1) != 0)
                        (*(void (**)(void))(**(_QWORD **)v314 + 40))();
                    }
                    v342 = 0u;
                    v343 = 0u;
                    v340 = 0u;
                    v341 = 0u;
                    v338 = 0u;
                    v339 = 0u;
                    v336 = 0u;
                    v337 = 0u;
                    v334 = 0u;
                    v335 = 0u;
                    v332 = 0u;
                    v333 = 0u;
                    v330 = 0u;
                    v331 = 0u;
                    memset(buf, 0, sizeof(buf));
                    if ((v292 & 1) != 0)
                      v74 = v293;
                    else
                      v74 = (char *)&v292 + 1;
                    v344 = -1;
                    v75 = (_anonymous_namespace_ *)strlcpy((char *)&v336, v74, 0x80uLL);
                    v344 = 14;
                    *(_QWORD *)v314 = 0x4425D6C2BB3546C6;
                    *(_QWORD *)&v314[8] = "FenceDeformer";
                    v285 = buf;
                    v286 = 257;
                    memset(&v314[16], 0, 24);
                    re::FixedArray<unsigned char>::copy(&v314[16], (uint64_t)&v285);
                    re::DynamicArray<re::DeformationDefinition>::add(&v305, (uint64_t *)v314);
                    if (*(_QWORD *)&v314[16])
                    {
                      if (*(_QWORD *)&v314[24])
                      {
                        (*(void (**)(void))(**(_QWORD **)&v314[16] + 40))();
                        *(_QWORD *)&v314[24] = 0;
                        *(_QWORD *)&v314[32] = 0;
                      }
                      *(_QWORD *)&v314[16] = 0;
                    }
                    re::StringID::destroyString((re::StringID *)v314);
                    if (*(_QWORD *)&v296.var0 >= 0xFFFFFFFFFFFFFFFELL && (*(_BYTE *)&v296.var0 & 1) == 0)
                    {
                      var1 = v296.var1;
                      goto LABEL_152;
                    }
                    if (*(_QWORD *)&v296.var0 <= 1uLL && (var1 = v296.var1) != 0)
                    {
LABEL_152:
                      if (*var1)
                        goto LABEL_153;
                    }
                    else
                    {
LABEL_153:
                      v326 = 0u;
                      v327 = 0u;
                      v324 = 0u;
                      v325 = 0u;
                      v322 = 0u;
                      v323 = 0u;
                      v320 = 0u;
                      v321 = 0u;
                      v318 = 0u;
                      v319 = 0u;
                      v316 = 0u;
                      v317 = 0u;
                      v315 = 0u;
                      memset(v314, 0, sizeof(v314));
                      if ((v289 & 1) != 0)
                        v99 = v290;
                      else
                        v99 = (char *)&v289 + 1;
                      v328 = -1;
                      strlcpy((char *)v314, v99, 0x80uLL);
                      re::StringID::destroyString((re::StringID *)&v300);
                      v300.var1 = "FenceDeformer";
                      *(_QWORD *)&v300.var0 = 0x4425D6C2BB3546C6;
                      v284[0] = v314;
                      v284[1] = 257;
                      v287 = 0;
                      v285 = 0;
                      v286 = 0;
                      re::FixedArray<unsigned char>::copy(&v285, (uint64_t)v284);
                      re::FixedArray<float>::operator=(&v301, (uint64_t *)&v285);
                      v76 = (_anonymous_namespace_ *)v285;
                      if (v285 && v286)
                        v76 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(v285->n128_u64[0] + 40))();
                    }
                    if ((v289 & 1) != 0)
                      v101 = v290;
                    else
                      v101 = (char *)&v289 + 1;
                    v285 = 0;
                    v286 = (uint64_t)&str_110;
                    *(_QWORD *)v314 = v285;
                    *(_QWORD *)&v314[8] = v286;
                    v286 = (uint64_t)&str_110;
                    v285 = 0;
                    re::StringID::StringID((re::StringID *)&v314[16], &v296);
                    v102 = *(_QWORD *)v345;
                    v103 = 0x94D049BB133111EBLL
                         * ((0xBF58476D1CE4E5B9 * ((v102 >> 31) ^ (v102 >> 1))) ^ ((0xBF58476D1CE4E5B9
                                                                                    * ((v102 >> 31) ^ (v102 >> 1))) >> 27));
                    v104 = v103 ^ (v103 >> 31);
                    v272 = v50;
                    if (*(_QWORD *)v271)
                    {
                      v105 = v104 % *(unsigned int *)(v271 + 24);
                      v106 = *(unsigned int *)(*(_QWORD *)(v271 + 8) + 4 * v105);
                      if ((_DWORD)v106 != 0x7FFFFFFF)
                      {
                        v107 = *(_QWORD *)(v271 + 16);
                        v108 = *(const char **)&v345[8];
                        while (1)
                        {
                          if ((*(_QWORD *)(v107 + 56 * v106 + 8) ^ v102) <= 1)
                          {
                            v109 = *(const char **)(v107 + 56 * v106 + 16);
                            if (v109 == v108 || !strcmp(v109, v108))
                              break;
                          }
                          v106 = *(_DWORD *)(v107 + 56 * v106) & 0x7FFFFFFF;
                          if (v106 == 0x7FFFFFFF)
                          {
                            v59 = v271;
                            goto LABEL_171;
                          }
                        }
LABEL_172:
                        re::StringID::destroyString((re::StringID *)&v314[16]);
                        re::StringID::destroyString((re::StringID *)v314);
                        re::StringID::destroyString((re::StringID *)&v285);
                        if (v288 && (v289 & 1) != 0)
                          (*(void (**)(void))(*(_QWORD *)v288 + 40))();
                        v15 = v345;
                        v16 = a1;
                        a4 = v280;
                        v50 = v272;
                        if (v291 && (v292 & 1) != 0)
                          (*(void (**)(void))(*(_QWORD *)v291 + 40))();
                        re::StringID::destroyString((re::StringID *)&v296);
                        re::StringID::destroyString((re::StringID *)v294);
LABEL_179:
                        if ((_BYTE)v297)
                        {
                          re::StringID::destroyString((re::StringID *)&v299);
                          re::StringID::destroyString((re::StringID *)&v298);
                        }
                        goto LABEL_146;
                      }
                    }
                    else
                    {
                      LODWORD(v105) = 0;
                    }
LABEL_171:
                    re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(v59, v105, v104, (const StringID *)v345, (uint64_t *)v314);
                    ++*(_DWORD *)(v59 + 40);
                    goto LABEL_172;
                  }
                }
                else
                {
                  LOBYTE(v297) = 0;
                }
                goto LABEL_179;
              }
            }
LABEL_146:
            v48 += 40;
          }
          while (v48 != v49);
        }
        v110 = *(_QWORD *)(v18 + 48);
        if (v110)
        {
          v111 = *(_QWORD *)(v18 + 64);
          v112 = 40 * v110;
          while (strcmp(*(const char **)(v111 + 16), "envelopeVarName"))
          {
LABEL_191:
            v111 += 40;
            v112 -= 40;
            if (!v112)
              goto LABEL_192;
          }
          if (*(_DWORD *)(v111 + 24) == 6)
          {
            v113 = (const StringID *)re::BucketArray<re::StringID,8ul>::operator[](v18 + 336, *(_QWORD *)(v111 + 32));
            buf[0].n128_u8[0] = 1;
            re::StringID::StringID((re::StringID *)&buf[0].n128_i8[8], v113);
            if (buf[0].n128_u8[0])
            {
              re::StringID::operator=((unint64_t *)&v345[16], &buf[0].n128_i64[1]);
              goto LABEL_189;
            }
          }
          else
          {
            buf[0].n128_u8[0] = 0;
          }
LABEL_189:
          if (buf[0].n128_u8[0])
            re::StringID::destroyString((re::StringID *)&buf[0].n128_i8[8]);
          goto LABEL_191;
        }
LABEL_192:
        a6 = *v281;
        v6 = (const char *)a4[2];
        if ((unint64_t)v6 <= a6)
          goto LABEL_498;
        re::DynamicArray<re::MeshAssetWrapDeformerData>::add((_QWORD *)(a4[4] + (a6 << 9) + 392), (uint64_t *)v345);
        if ((_QWORD)v348)
        {
          if (*((_QWORD *)&v348 + 1))
          {
            (*(void (**)(void))(*(_QWORD *)v348 + 40))();
            *((_QWORD *)&v348 + 1) = 0;
            v349 = 0;
          }
          *(_QWORD *)&v348 = 0;
        }
        if (*((_QWORD *)&v346 + 1))
        {
          if ((_QWORD)v347)
          {
            (*(void (**)(void))(**((_QWORD **)&v346 + 1) + 40))();
            v347 = 0uLL;
          }
          *((_QWORD *)&v346 + 1) = 0;
        }
        if (*(_QWORD *)&v345[32])
        {
          if (*(_QWORD *)&v345[40])
          {
            (*(void (**)(void))(**(_QWORD **)&v345[32] + 40))();
            *(_QWORD *)&v345[40] = 0;
            *(_QWORD *)&v346 = 0;
          }
          *(_QWORD *)&v345[32] = 0;
        }
        re::StringID::destroyString((re::StringID *)&v345[16]);
        re::StringID::destroyString((re::StringID *)v345);
      }
      buf[0].n128_u64[0] = 0x4005A4B50800FD78;
      buf[0].n128_u64[1] = (unint64_t)"WrapDeformer";
      *(_QWORD *)v314 = &v304;
      *(_QWORD *)&v314[8] = 1;
      *(_QWORD *)&v330 = 0;
      buf[1] = 0uLL;
      re::FixedArray<unsigned char>::copy(&buf[1], (uint64_t)v314);
      re::DynamicArray<re::DeformationDefinition>::add(&v305, (uint64_t *)buf);
      if (buf[1].n128_u64[0])
      {
        if (buf[1].n128_u64[1])
        {
          (*(void (**)(void))(*(_QWORD *)buf[1].n128_u64[0] + 40))();
          buf[1].n128_u64[1] = 0;
          *(_QWORD *)&v330 = 0;
        }
        buf[1].n128_u64[0] = 0;
      }
      re::StringID::destroyString((re::StringID *)buf);
      if (*(_QWORD *)&v300.var0 > 1uLL || !v300.var1 || *v300.var1)
      {
        v114 = v307;
        if (v307 >= v306)
        {
          re::DynamicArray<re::DeformationDefinition>::growCapacity(&v305, v307 + 1);
          v114 = v307;
        }
        v115 = re::StringID::StringID((re::StringID *)(v309 + 40 * v114), &v300);
        re::FixedArray<unsigned char>::FixedArray((_QWORD *)v115 + 2, &v301);
        ++v307;
        ++v308;
      }
      if (v301)
      {
        if (v302)
        {
          (*(void (**)(void))(*(_QWORD *)v301 + 40))();
          v302 = 0;
          v303 = 0;
        }
        v301 = 0;
      }
      goto LABEL_307;
    }
    v36 = (_anonymous_namespace_ *)strcmp(v24, "ContactDeformer");
    if (!(_DWORD)v36)
      goto LABEL_230;
    if (v26 == 0x1179C3D2A9790052)
      break;
LABEL_225:
    v116 = (_anonymous_namespace_ *)strcmp(v24, "Renormalization");
    if (!(_DWORD)v116)
      goto LABEL_273;
    if (v26 == 0x55E7643F91509A2ALL)
    {
      if (v24 == "Renormalization")
      {
LABEL_273:
        v345[0] = 0;
        buf[0].n128_u64[0] = 0xABCEC87F22A13454;
        buf[0].n128_u64[1] = (unint64_t)"Renormalization";
        goto LABEL_343;
      }
      goto LABEL_228;
    }
    v117 = (_anonymous_namespace_ *)strcmp(v24, "OffsetsDeformer");
    if ((_DWORD)v117)
    {
      if (v26 != 0x3875EE4E6B5AEA72)
      {
LABEL_315:
        v116 = (_anonymous_namespace_ *)strcmp(v24, "TensionDeformer");
        if (!(_DWORD)v116)
          goto LABEL_335;
        if (v26 == 0x120E28E032)
        {
          if (v24 != "Tension")
          {
            v153 = v24;
            v154 = "Tension";
LABEL_319:
            v116 = (_anonymous_namespace_ *)strcmp(v153, v154);
            if ((_DWORD)v116)
            {
              v155 = v24;
              v156 = "BoundingBoxCalculation";
              goto LABEL_321;
            }
          }
LABEL_335:
          v345[0] = 0;
          buf[0].n128_u64[0] = 0x241C51C064;
          v165 = "Tension";
LABEL_342:
          buf[0].n128_u64[1] = (unint64_t)v165;
LABEL_343:
          *(_QWORD *)v314 = v345;
          *(_QWORD *)&v314[8] = 1;
          *(_QWORD *)&v330 = 0;
          buf[1] = 0uLL;
          re::FixedArray<unsigned char>::copy(&buf[1], (uint64_t)v314);
LABEL_344:
          re::DynamicArray<re::DeformationDefinition>::add(&v305, (uint64_t *)buf);
          if (buf[1].n128_u64[0])
          {
            if (buf[1].n128_u64[1])
            {
              (*(void (**)(void))(*(_QWORD *)buf[1].n128_u64[0] + 40))();
              buf[1].n128_u64[1] = 0;
              *(_QWORD *)&v330 = 0;
            }
            buf[1].n128_u64[0] = 0;
          }
LABEL_348:
          v135 = (re::StringID *)buf;
          goto LABEL_308;
        }
        v116 = (_anonymous_namespace_ *)strcmp(v24, "BoundingBoxCalculation");
        if (!(_DWORD)v116)
        {
LABEL_341:
          v345[0] = 0;
          buf[0].n128_u64[0] = 0x32458CCC0A585AB0;
          v165 = "Bounding Box Calculation";
          goto LABEL_342;
        }
        if (v26 == 0x535C1C60DF8DDA89)
        {
          if (v24 != "OpenSubdivViewIndependentComputeStep" && strcmp(v24, "OpenSubdivViewIndependentComputeStep"))
            goto LABEL_404;
          goto LABEL_407;
        }
        if (v26 == 0x1922C666052C2D58)
        {
          if (v24 == "Bounding Box Calculation")
            goto LABEL_341;
          v155 = v24;
          v156 = "Bounding Box Calculation";
LABEL_321:
          v116 = (_anonymous_namespace_ *)strcmp(v155, v156);
          if (!(_DWORD)v116)
            goto LABEL_341;
        }
LABEL_404:
        buf[0].n128_u64[0] = 0x637BDBD40E8681E4;
        buf[0].n128_u64[1] = (unint64_t)"OpenSubdivViewDependentComputeStep";
        if (re::StringID::operator==((_QWORD *)(v18 + 16), buf)
          || (*(_QWORD *)v314 = 0x48358EA73269F98CLL,
              *(_QWORD *)&v314[8] = "PrepareSimplifiedMeshBuffer",
              re::StringID::operator==((_QWORD *)(v18 + 16), v314))
          || (*(_QWORD *)v345 = 0x10444A02DC81C1ELL,
              *(_QWORD *)&v345[8] = "VertexCache",
              re::StringID::operator==((_QWORD *)(v18 + 16), v345)))
        {
LABEL_407:
          re::StringID::StringID((re::StringID *)buf, (const StringID *)(v18 + 16));
          buf[1] = 0uLL;
          *(_QWORD *)&v330 = 0;
          goto LABEL_344;
        }
        if (strcmp(v24, "JiggleDeformer"))
        {
          buf[0].n128_u64[0] = 0x150A9604D758308ALL;
          buf[0].n128_u64[1] = (unint64_t)"JiggleDeformer";
          v198 = re::StringID::operator==((_QWORD *)(v18 + 16), buf);
          if (!v198)
          {
            v206 = *re::pipelineLogObjects((re *)v198);
            a4 = v280;
            if (os_log_type_enabled(v206, OS_LOG_TYPE_DEFAULT))
            {
              v207 = v206;
              v208 = *(_QWORD *)(v18 + 24);
              buf[0].n128_u32[0] = 136315138;
              *(unint64_t *)((char *)buf[0].n128_u64 + 4) = v208;
              _os_log_impl(&dword_224FE9000, v207, OS_LOG_TYPE_DEFAULT, "Unsupported deformer type: %s", (uint8_t *)buf, 0xCu);

            }
            goto LABEL_309;
          }
        }
        buf[0].n128_u64[0] = 0x2A152C09AEB06114;
        buf[0].n128_u64[1] = (unint64_t)"JiggleDeformer";
        *(_QWORD *)&v330 = 0;
        buf[1] = 0uLL;
        re::DynamicArray<re::DeformationDefinition>::add(&v305, (uint64_t *)buf);
        re::DeformationDefinition::~DeformationDefinition((re::DeformationDefinition *)buf);
        buf[0].n128_u64[0] = 0;
        buf[0].n128_u64[1] = (unint64_t)&str_110;
        buf[1].n128_u64[0] = 0;
        buf[1].n128_u64[1] = (unint64_t)&str_110;
        WORD4(v330) = v279;
        v199 = *(_QWORD *)(v18 + 48);
        if (!v199)
        {
LABEL_433:
          a4 = v280;
          v205 = re::DynamicArray<re::MeshAssetModel>::operator[](v280[2], v280[4], *v281);
          re::DynamicArray<re::MeshAssetJiggleDeformerData>::add((_anonymous_namespace_ *)(v205 + 472), (uint64_t *)buf);
          re::StringID::destroyString((re::StringID *)&buf[1]);
          goto LABEL_348;
        }
        v6 = *(const char **)(v18 + 64);
        v200 = 40 * v199;
        while (2)
        {
          v201 = (const char *)*((_QWORD *)v6 + 2);
          if (!strcmp(v201, "envelopeVarName"))
          {
            if (*((_DWORD *)v6 + 6) == 6)
            {
              v202 = (const StringID *)re::BucketArray<re::StringID,8ul>::operator[](v18 + 336, *((_QWORD *)v6 + 4));
              v314[0] = 1;
              re::StringID::StringID((re::StringID *)&v314[8], v202);
              if (v314[0])
              {
                v203 = &buf[1];
                goto LABEL_424;
              }
              goto LABEL_426;
            }
          }
          else
          {
            if (strcmp(v201, "massVarName"))
            {
              if (!strcmp(v201, "stiffness"))
              {
                if (*((_DWORD *)v6 + 6))
                  goto LABEL_430;
                LODWORD(v330) = *((_DWORD *)v6 + 8);
              }
              else
              {
                if (strcmp(v201, "damping"))
                  goto LABEL_432;
                if (!*((_DWORD *)v6 + 6))
                {
                  DWORD1(v330) = *((_DWORD *)v6 + 8);
                  goto LABEL_432;
                }
LABEL_430:
              }
LABEL_432:
              v6 += 40;
              v200 -= 40;
              if (!v200)
                goto LABEL_433;
              continue;
            }
            if (*((_DWORD *)v6 + 6) == 6)
            {
              v204 = (const StringID *)re::BucketArray<re::StringID,8ul>::operator[](v18 + 336, *((_QWORD *)v6 + 4));
              v314[0] = 1;
              re::StringID::StringID((re::StringID *)&v314[8], v204);
              if (v314[0])
              {
                v203 = buf;
LABEL_424:
                re::StringID::operator=(v203->n128_u64, (uint64_t *)&v314[8]);
LABEL_427:
                if (v314[0])
                  re::StringID::destroyString((re::StringID *)&v314[8]);
                goto LABEL_432;
              }
LABEL_426:
              goto LABEL_427;
            }
          }
          break;
        }
        v314[0] = 0;
        goto LABEL_426;
      }
      if (v24 != "OffsetsDeformer")
      {
        v153 = v24;
        v154 = "TensionDeformer";
        goto LABEL_319;
      }
    }
LABEL_323:
    v294[0] = 0;
    buf[0].n128_u64[0] = 0x70EBDC9CD6B5D4E4;
    buf[0].n128_u64[1] = (unint64_t)"OffsetsDeformer";
    *(_QWORD *)v314 = v294;
    *(_QWORD *)&v314[8] = 1;
    *(_QWORD *)&v330 = 0;
    buf[1] = 0uLL;
    re::FixedArray<unsigned char>::copy(&buf[1], (uint64_t)v314);
    re::DynamicArray<re::DeformationDefinition>::add(&v305, (uint64_t *)buf);
    if (buf[1].n128_u64[0])
    {
      if (buf[1].n128_u64[1])
      {
        (*(void (**)(void))(*(_QWORD *)buf[1].n128_u64[0] + 40))();
        buf[1].n128_u64[1] = 0;
        *(_QWORD *)&v330 = 0;
      }
      buf[1].n128_u64[0] = 0;
    }
    re::StringID::destroyString((re::StringID *)buf);
    if (!re::ecs2::EntityAssetData::tryGetComponent<re::ecs2::MeshOffsetsComponent>(v16))
    {
      if (!*(_QWORD *)v282)
      {
        re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v282, 0);
        ++*((_DWORD *)v16 + 14);
      }
      v157 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                   + 7)
                                                                + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 216, 0);
      re::make::shared::inplace<re::ecs2::MeshOffsetsComponent>(v157, v314);
      v158 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)v314 + 40))(*(_QWORD *)v314) + 24) >> 1;
      v159 = *(_QWORD *)v314;
      *(_QWORD *)v314 = 0;
      buf[0].n128_u64[0] = v158;
      buf[0].n128_u64[1] = v159;
      buf[1].n128_u8[0] = 1;
      re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add(v282, buf);
      if (*(_QWORD *)v314)

      v345[0] = 10;
      v161 = re::globalAllocators(v160);
      v162 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v161[2] + 32))(v161[2], 40, 8);
      *(_OWORD *)v162 = 0u;
      *(_OWORD *)(v162 + 16) = 0u;
      *(_QWORD *)(v162 + 32) = 0;
      *(_QWORD *)v314 = &off_24ED433E8;
      *(_QWORD *)&v314[24] = v314;
      *(_QWORD *)&v330 = &buf[0].n128_u64[1];
      buf[0].n128_u64[0] = v162;
      buf[0].n128_u64[1] = (unint64_t)&off_24ED433E8;
      re::HashTable<unsigned char,std::unique_ptr<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>,std::function<void ()(re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>*)>>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,true,false>::add((uint64_t)&v310, v345, (uint64_t *)buf);
      std::unique_ptr<re::TypeRegistry,std::function<void ()(re::TypeRegistry*)>>::~unique_ptr[abi:nn180100]((uint64_t *)buf);
      v163 = *(uint8_t **)&v314[24];
      if (*(uint8_t **)&v314[24] == v314)
      {
        v163 = v314;
        v164 = 4;
      }
      else
      {
        if (!*(_QWORD *)&v314[24])
          goto LABEL_351;
        v164 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v163 + 8 * v164))();
    }
LABEL_351:
    *(_QWORD *)&v300.var0 = 0;
    v300.var1 = (char *)&str_110;
    LOWORD(v301) = v279;
    v166 = re::ecs2::EntityAssetData::tryGetComponent<re::ecs2::MeshOffsetsComponent>(v16);
    if (*(_QWORD *)(v18 + 48))
    {
      *(_QWORD *)&v330 = 0;
      memset(buf, 0, 28);
      v331 = xmmword_2260E5F10;
      v332 = xmmword_2260E5F20;
      v333 = xmmword_2260E5F40;
      v334 = xmmword_2260E5D70;
      v335 = xmmword_2260E5F10;
      v336 = xmmword_2260E5F20;
      v337 = xmmword_2260E5F40;
      v338 = xmmword_2260E5D70;
      LODWORD(v339) = 0;
      a6 = *v281;
      v167 = a4;
      a4 = (_QWORD *)a4[2];
      v168 = v277;
      if ((unint64_t)a4 <= a6)
        goto LABEL_507;
      v169 = v167[4] + (a6 << 9);
      a6 = *(_QWORD *)(v169 + 208);
      if (a6 <= v277)
        goto LABEL_508;
      v170 = v166;
      re::DynamicArray<float>::resize((uint64_t)buf, (3 * *(_DWORD *)(*(_QWORD *)(v169 + 224) + (v277 << 8) + 48)));
      v171 = *(_QWORD *)(v18 + 48);
      if (v171)
      {
        v172 = *(_QWORD *)(v18 + 64);
        v276 = v18 + 392;
        v173 = 40 * v171;
        while (1)
        {
          v174 = *(const char **)(v172 + 16);
          if (!strcmp(v174, "preTransform"))
            break;
          if (!strcmp(v174, "postTransform"))
          {
            if (*(_DWORD *)(v172 + 24) != 7)
            {
LABEL_370:
              v184 = v172;
              v185 = 7;
LABEL_371:
              goto LABEL_372;
            }
            v183 = (__int128 *)re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v276, *(_QWORD *)(v172 + 32));
            v178 = v183[2];
            v179 = v183[3];
            v181 = *v183;
            v180 = v183[1];
            v182 = &v335;
            goto LABEL_369;
          }
          if (!strcmp(v174, "blendingMode"))
          {
            if (*(_DWORD *)(v172 + 24) == 1)
            {
              LODWORD(v339) = *(_DWORD *)(v172 + 32);
              goto LABEL_372;
            }
            v184 = v172;
            v185 = 1;
            goto LABEL_371;
          }
          if (!strcmp(v174, "envelopeVarName"))
          {
            if (*(_DWORD *)(v172 + 24) == 6)
            {
              v186 = (const StringID *)re::BucketArray<re::StringID,8ul>::operator[](v18 + 336, *(_QWORD *)(v172 + 32));
              v314[0] = 1;
              re::StringID::StringID((re::StringID *)&v314[8], v186);
              if (v314[0])
              {
                re::StringID::operator=((unint64_t *)&v300, (uint64_t *)&v314[8]);
                goto LABEL_382;
              }
            }
            else
            {
              v314[0] = 0;
            }
LABEL_382:
            if (v314[0])
              re::StringID::destroyString((re::StringID *)&v314[8]);
            goto LABEL_372;
          }
          if (!strcmp(v174, "offsets"))
          {
            if (*(_DWORD *)(v172 + 24) == 4)
            {
              v175 = (const void **)re::BucketArray<re::FixedArray<int>,8ul>::operator[](v18 + 224, *(_QWORD *)(v172 + 32));
              if (3 * *(_QWORD *)v172 <= buf[1].n128_u64[0])
              {
                memcpy((void *)v330, v175[2], 12 * *(_QWORD *)v172);
              }
              else
              {
                v176 = *re::pipelineLogObjects((re *)v175);
                if (os_log_type_enabled(v176, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)v314 = 0;
                  _os_log_impl(&dword_224FE9000, v176, OS_LOG_TYPE_DEFAULT, "Invalid number of offsets specified.", v314, 2u);
                }
              }
              goto LABEL_372;
            }
            v184 = v172;
            v185 = 4;
            goto LABEL_371;
          }
LABEL_372:
          v172 += 40;
          v173 -= 40;
          if (!v173)
            goto LABEL_386;
        }
        if (*(_DWORD *)(v172 + 24) != 7)
          goto LABEL_370;
        v177 = (__int128 *)re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v276, *(_QWORD *)(v172 + 32));
        v178 = v177[2];
        v179 = v177[3];
        v181 = *v177;
        v180 = v177[1];
        v182 = &v331;
LABEL_369:
        v182[2] = v178;
        v182[3] = v179;
        *v182 = v181;
        v182[1] = v180;
        goto LABEL_372;
      }
LABEL_386:
      v187 = *(_QWORD *)(v170 + 48);
      if (v187 >= *(_QWORD *)(v170 + 40))
      {
        re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::growCapacity((_QWORD *)(v170 + 32), v187 + 1);
        v187 = *(_QWORD *)(v170 + 48);
      }
      v188 = re::DynamicArray<float>::DynamicArray(*(_QWORD *)(v170 + 64) + 192 * v187, (uint64_t *)buf);
      *(_OWORD *)(v188 + 48) = v331;
      v189 = v332;
      v190 = v333;
      v191 = v335;
      *(_OWORD *)(v188 + 96) = v334;
      *(_OWORD *)(v188 + 112) = v191;
      *(_OWORD *)(v188 + 64) = v189;
      *(_OWORD *)(v188 + 80) = v190;
      v192 = v336;
      v193 = v337;
      v194 = v338;
      *(_DWORD *)(v188 + 176) = v339;
      *(_OWORD *)(v188 + 144) = v193;
      *(_OWORD *)(v188 + 160) = v194;
      *(_OWORD *)(v188 + 128) = v192;
      ++*(_QWORD *)(v170 + 48);
      ++*(_DWORD *)(v170 + 56);
      a4 = v280;
      if (buf[0].n128_u64[0] && (_QWORD)v330)
        (*(void (**)(void))(*(_QWORD *)buf[0].n128_u64[0] + 40))();
    }
    a6 = *v281;
    v6 = (const char *)a4[2];
    if ((unint64_t)v6 <= a6)
      goto LABEL_502;
    re::DynamicArray<re::MeshAssetSmoothDeformerData>::add((_QWORD *)(a4[4] + (a6 << 9) + 432), (uint64_t *)&v300);
    if ((_QWORD)v310)
    {
      v195 = v311;
      v196 = *(unsigned int *)(*((_QWORD *)&v310 + 1) + 4 * (0x75C8519A9320579uLL % DWORD2(v311)));
      v197 = v274;
      if ((_DWORD)v196 == 0x7FFFFFFF)
      {
LABEL_396:
        LODWORD(v196) = 0x7FFFFFFF;
      }
      else
      {
        while (*(_BYTE *)(v311 + 56 * v196 + 12) != 10)
        {
          v196 = *(_DWORD *)(v311 + 56 * v196 + 8) & 0x7FFFFFFF;
          if (v196 == 0x7FFFFFFF)
            goto LABEL_396;
        }
      }
    }
    else
    {
      v195 = v311;
      LODWORD(v196) = 0x7FFFFFFF;
      v197 = v274;
    }
    v150 = *(_QWORD **)(v195 + 56 * v196 + 16);
    v314[0] = 1;
    a6 = a4[7];
    if (a6 <= v197)
      goto LABEL_503;
    re::StringID::StringID((re::StringID *)&v314[8], (const StringID *)(a4[9] + 96 * v197));
    a6 = *v281;
    v6 = (const char *)a4[2];
    if ((unint64_t)v6 <= a6)
      goto LABEL_504;
    v151 = a4[4] + (a6 << 9);
    a6 = *(_QWORD *)(v151 + 208);
    v152 = v277;
    if (a6 <= v277)
      goto LABEL_505;
LABEL_306:
    re::StringID::StringID((re::StringID *)&v314[24], (const StringID *)(*(_QWORD *)(v151 + 224) + (v152 << 8) + 72));
    re::DynamicArray<re::MeshIdentifierAsset>::add(v150, (uint64_t)v314);
    re::StringID::destroyString((re::StringID *)&v314[24]);
    re::StringID::destroyString((re::StringID *)&v314[8]);
LABEL_307:
    v135 = (re::StringID *)&v300;
LABEL_308:
    re::StringID::destroyString(v135);
LABEL_309:
    v18 += 448;
    if (v18 == v283)
      goto LABEL_436;
  }
  if (v24 != "ContactDeformer")
  {
    v116 = (_anonymous_namespace_ *)strcmp(v24, "Renormalization");
    if (!(_DWORD)v116)
      goto LABEL_273;
LABEL_228:
    v117 = (_anonymous_namespace_ *)strcmp(v24, "OffsetsDeformer");
    if ((_DWORD)v117)
      goto LABEL_315;
    goto LABEL_323;
  }
LABEL_230:
  v294[0] = 0;
  buf[0].n128_u64[0] = 0x22F387A552F200A4;
  buf[0].n128_u64[1] = (unint64_t)"ContactDeformer";
  *(_QWORD *)v314 = v294;
  *(_QWORD *)&v314[8] = 1;
  *(_QWORD *)&v330 = 0;
  buf[1] = 0uLL;
  re::FixedArray<unsigned char>::copy(&buf[1], (uint64_t)v314);
  re::DynamicArray<re::DeformationDefinition>::add(&v305, (uint64_t *)buf);
  if (buf[1].n128_u64[0])
  {
    if (buf[1].n128_u64[1])
    {
      (*(void (**)(void))(*(_QWORD *)buf[1].n128_u64[0] + 40))();
      buf[1].n128_u64[1] = 0;
      *(_QWORD *)&v330 = 0;
    }
    buf[1].n128_u64[0] = 0;
  }
  re::StringID::destroyString((re::StringID *)buf);
  *(_QWORD *)v314 = 0;
  *(_QWORD *)&v314[8] = &str_110;
  memset(&v314[16], 0, 24);
  *(_WORD *)&v314[40] = v279;
  v118 = *(_QWORD *)(v18 + 88);
  v120 = *(_QWORD *)(v18 + 48);
  if (v120)
  {
    v121 = *(_QWORD *)(v18 + 64);
    v122 = 40 * v120;
    while (strcmp(*(const char **)(v121 + 16), "offsetsVarName"))
    {
LABEL_244:
      v121 += 40;
      v122 -= 40;
      if (!v122)
        goto LABEL_245;
    }
    if (*(_DWORD *)(v121 + 24) == 6)
    {
      v123 = (const StringID *)re::BucketArray<re::StringID,8ul>::operator[](v18 + 336, *(_QWORD *)(v121 + 32));
      buf[0].n128_u8[0] = 1;
      re::StringID::StringID((re::StringID *)&buf[0].n128_i8[8], v123);
      if (buf[0].n128_u8[0])
      {
        re::StringID::operator=((unint64_t *)v314, &buf[0].n128_i64[1]);
        goto LABEL_242;
      }
    }
    else
    {
      buf[0].n128_u8[0] = 0;
    }
LABEL_242:
    if (buf[0].n128_u8[0])
      re::StringID::destroyString((re::StringID *)&buf[0].n128_i8[8]);
    goto LABEL_244;
  }
LABEL_245:
  v124 = *(_QWORD *)(v18 + 88);
  if (!v124)
  {
LABEL_267:
    a6 = *v281;
    a4 = v280;
    v6 = (const char *)v280[2];
    if ((unint64_t)v6 <= a6)
      goto LABEL_499;
    re::DynamicArray<re::MeshAssetContactDeformerData>::add((_QWORD *)(v280[4] + (a6 << 9) + 312), (uint64_t *)v314);
    v16 = a1;
    v15 = v345;
    if (!re::ecs2::EntityAssetData::tryGetComponent<re::ecs2::SkeletalPoseComponent>(a1))
      re::ecs2::EntityAssetData::addComponent<re::ecs2::SkeletalPoseComponent>(a1);
    if (!re::ecs2::EntityAssetData::tryGetComponent<re::ecs2::RigComponent>(a1))
      re::ecs2::EntityAssetData::addComponent<re::ecs2::RigComponent>(a1);
    re::FixedArray<re::MeshAssetContactDeformerTarget>::deinit(&v314[16]);
    v135 = (re::StringID *)v314;
    goto LABEL_308;
  }
  v125 = 0;
  v126 = *(_QWORD *)(v18 + 104);
  v15 = (_BYTE *)(v126 + 40 * v124);
  while (1)
  {
    v127 = *(_QWORD *)(v126 + 16);
    if (v127)
      break;
LABEL_266:
    ++v125;
    v126 += 40;
    if ((_BYTE *)v126 == v15)
      goto LABEL_267;
  }
  v128 = *(_QWORD *)(v126 + 32);
  v129 = 40 * v127;
  while (2)
  {
    v130 = *(const char **)(v128 + 16);
    if (strcmp(v130, "jointIndex"))
    {
      if (!strcmp(v130, "radius"))
      {
        if (!*(_DWORD *)(v128 + 24))
        {
          a4 = *(_QWORD **)&v314[24];
          if (*(_QWORD *)&v314[24] <= (unint64_t)v125)
            goto LABEL_448;
          *(_DWORD *)(*(_QWORD *)&v314[32] + 32 * v125 + 4) = *(_DWORD *)(v128 + 32);
LABEL_265:
          v128 += 40;
          v129 -= 40;
          if (!v129)
            goto LABEL_266;
          continue;
        }
        v133 = v128;
        v134 = 0;
      }
      else
      {
        if (strcmp(v130, "heightMap"))
          goto LABEL_265;
        if (*(_DWORD *)(v128 + 24) == 3)
        {
          v131 = re::BucketArray<re::FixedArray<int>,8ul>::operator[](v18 + 168, *(_QWORD *)(v128 + 32));
          v132 = *(_QWORD *)v128;
          v300.var1 = *(char **)(v131 + 16);
          v301 = v132;
          *(_BYTE *)&v300.var0 = 1;
          a4 = *(_QWORD **)&v314[24];
          if (*(_QWORD *)&v314[24] <= (unint64_t)v125)
            goto LABEL_449;
          re::FixedArray<int>::operator=((_anonymous_namespace_ *)(*(_QWORD *)&v314[32] + 32 * v125 + 8), (uint64_t)&v300.var1);
          goto LABEL_265;
        }
        *(_BYTE *)&v300.var0 = 0;
        v133 = v128;
        v134 = 3;
      }
LABEL_264:
      goto LABEL_265;
    }
    break;
  }
  if (*(_DWORD *)(v128 + 24) != 1)
  {
    v133 = v128;
    v134 = 1;
    goto LABEL_264;
  }
  a4 = *(_QWORD **)&v314[24];
  if (*(_QWORD *)&v314[24] > (unint64_t)v125)
  {
    *(_DWORD *)(*(_QWORD *)&v314[32] + 32 * v125) = *(_DWORD *)(v128 + 32);
    goto LABEL_265;
  }
  *(_QWORD *)&v300.var0 = 0;
  v331 = 0u;
  v332 = 0u;
  v330 = 0u;
  memset(buf, 0, sizeof(buf));
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  *(_DWORD *)v345 = 136315906;
  *(_QWORD *)&v345[4] = "operator[]";
  *(_WORD *)&v345[12] = 1024;
  *(_DWORD *)&v345[14] = 468;
  *(_WORD *)&v345[18] = 2048;
  *(_QWORD *)&v345[20] = v125;
  *(_WORD *)&v345[28] = 2048;
  *(_QWORD *)&v345[30] = a4;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_448:
  *(_QWORD *)&v300.var0 = 0;
  v331 = 0u;
  v332 = 0u;
  v330 = 0u;
  memset(buf, 0, sizeof(buf));
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  *(_DWORD *)v345 = 136315906;
  *(_QWORD *)&v345[4] = "operator[]";
  *(_WORD *)&v345[12] = 1024;
  *(_DWORD *)&v345[14] = 468;
  *(_WORD *)&v345[18] = 2048;
  *(_QWORD *)&v345[20] = v125;
  *(_WORD *)&v345[28] = 2048;
  *(_QWORD *)&v345[30] = a4;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_449:
  v297 = 0;
  v331 = 0u;
  v332 = 0u;
  v330 = 0u;
  memset(buf, 0, sizeof(buf));
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  *(_DWORD *)v345 = 136315906;
  *(_QWORD *)&v345[4] = "operator[]";
  *(_WORD *)&v345[12] = 1024;
  *(_DWORD *)&v345[14] = 468;
  *(_WORD *)&v345[18] = 2048;
  *(_QWORD *)&v345[20] = v125;
  *(_WORD *)&v345[28] = 2048;
  *(_QWORD *)&v345[30] = a4;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_450:
  LODWORD(v213) = 0;
LABEL_451:
  if ((_DWORD)v126 != (_DWORD)v213)
  {
    v216 = v213;
    v217 = v311;
    while (1)
    {
      v218 = v217 + 56 * v216;
      v219 = (void **)(v218 + 16);
      v220 = *(unsigned __int8 *)(v218 + 12);
      if (v220 == 10)
        break;
      if (v220 == 11)
      {
        v221 = re::ecs2::EntityAssetData::tryGetComponent<re::ecs2::MeshSmoothComponent>(a1);
        v222 = *(_anonymous_namespace_ **)(a3 + 104);
        v223 = *a2;
        v224 = a2[1];
        v225 = *v219;
        *v219 = 0;
        v226 = re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>::assetType();
        v227 = re::ImportAssetTable::addAsset(v222, v223, v224, v225, (re **)v226);
        if ((*(_BYTE *)(v227 + 8) & 1) != 0)
          v228 = *(re::AssetPath **)(v227 + 16);
        else
          v228 = (re::AssetPath *)(v227 + 9);
        v235 = (re::DynamicString *)(v221 + 112);
LABEL_463:
        a4 = v280;
      }
      if (v126 <= (int)v213 + 1)
        v236 = v213 + 1;
      else
        v236 = v126;
      while (1)
      {
        v216 = (v213 + 1);
        if (v236 - 1 == (_DWORD)v213)
          break;
        LODWORD(v213) = v213 + 1;
        v237 = v216;
        if ((*(_DWORD *)(v217 + 56 * v216 + 8) & 0x80000000) != 0)
          goto LABEL_471;
      }
      v237 = v236;
LABEL_471:
      LODWORD(v213) = v237;
      if ((_DWORD)v126 == v237)
        goto LABEL_472;
    }
    v229 = re::ecs2::EntityAssetData::tryGetComponent<re::ecs2::MeshOffsetsComponent>(a1);
    v230 = *(_anonymous_namespace_ **)(a3 + 104);
    v231 = *a2;
    v232 = a2[1];
    v233 = *v219;
    *v219 = 0;
    v234 = re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>::assetType();
    v227 = re::ImportAssetTable::addAsset(v230, v231, v232, v233, (re **)v234);
    if ((*(_BYTE *)(v227 + 8) & 1) != 0)
      v228 = *(re::AssetPath **)(v227 + 16);
    else
      v228 = (re::AssetPath *)(v227 + 9);
    v235 = (re::DynamicString *)(v229 + 72);
    goto LABEL_463;
  }
LABEL_472:
  v238 = v351;
  if (v351[7])
  {
    v239 = (re::MeshDeformationAsset *)re::ecs2::EntityAssetData::addComponent<re::ecs2::MeshDeformationComponent>(a1);
    v240 = (re::MeshDeformationAsset *)((char *)v239 + 32);
    v241 = *(_anonymous_namespace_ **)(a3 + 104);
    v242 = *a2;
    v243 = a2[1];
    v244 = v351;
    v351 = 0;
    v245 = re::MeshDeformationAsset::assetType(v239);
    v246 = re::ImportAssetTable::addAsset(v241, v242, v243, v244, (re **)v245);
    if ((*(_BYTE *)(v246 + 8) & 1) != 0)
      v247 = *(re::AssetPath **)(v246 + 16);
    else
      v247 = (re::AssetPath *)(v246 + 9);
  }
  else
  {
    re::DynamicArray<re::DeformationStackDefinition>::deinit((uint64_t)v351);
    v248 = (_anonymous_namespace_ *)re::DynamicArray<re::MeshDeformationIndex>::deinit((uint64_t)(v238 + 5));
    v249 = v351;
    if (v351[7])
    {
      v250 = (re::MeshDeformationAsset *)re::ecs2::EntityAssetData::addComponent<re::ecs2::MeshDeformationComponent>(a1);
      v251 = (re::MeshDeformationAsset *)((char *)v250 + 32);
      v252 = *(_anonymous_namespace_ **)(a3 + 104);
      v253 = *a2;
      v254 = a2[1];
      v255 = v351;
      v351 = 0;
      v256 = re::MeshDeformationAsset::assetType(v250);
      v257 = re::ImportAssetTable::addAsset(v252, v253, v254, v255, (re **)v256);
      if ((*(_BYTE *)(v257 + 8) & 1) != 0)
        v258 = *(re::AssetPath **)(v257 + 16);
      else
        v258 = (re::AssetPath *)(v257 + 9);
      a4 = v280;
    }
    if (a4[12])
    {
      re::ecs2::EntityAssetData::addComponent<re::ecs2::SkeletalPoseComponent>(a1);
      re::ecs2::EntityAssetData::addComponent<re::ecs2::RigComponent>(a1);
    }
    v260 = a4[2];
    if (v260)
    {
      v261 = (_QWORD *)(a4[4] + 128);
      v262 = v260 << 9;
      while (!*v261)
      {
        v261 += 64;
        v262 -= 512;
        if (!v262)
          goto LABEL_480;
      }
      re::ecs2::EntityAssetData::addComponent<re::ecs2::BlendShapeWeightsComponent>(a1);
    }
  }
LABEL_480:
  re::HashTable<unsigned char,std::unique_ptr<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>,std::function<void ()(re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>*)>>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,true,false>::deinit((uint64_t *)&v310);
  return std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)&v351);
}

uint64_t re::TimelineGroupBuilder::createTimelineAsset(re::TimelineGroupBuilder *this, const char *a2, const char *a3)
{
  unint64_t v5;
  char *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  const char *v11;
  char *v12;
  _anonymous_namespace_ *v13;
  unint64_t i;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int128 v18;
  _anonymous_namespace_ *v19;
  _anonymous_namespace_ *v20;
  unint64_t v21;
  const char *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  _BOOL4 v27;
  re *v28;
  unint64_t v29;
  unint64_t v30;
  _anonymous_namespace_ *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  size_t v40;
  _anonymous_namespace_ *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  re::TimelineClipAssetData *v52;
  _BYTE *v53;
  uint64_t v54;
  _anonymous_namespace_ *v55;
  const char *v56;
  size_t v57;
  re::TimelineAssetData *v58;
  re **TimelineAsset;
  uint64_t *v60;
  uint64_t v61;
  re::AssetPath *v62;
  float v63;
  float v64;
  float v65;
  float v66;
  _anonymous_namespace_ *v67;
  const char *v68;
  re *v69;
  uint64_t *v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  re::TimelineAssetData *v76;
  re **v77;
  uint64_t *v78;
  uint64_t v79;
  re::AssetPath *v80;
  re *v81;
  float v82;
  float v83;
  uint64_t result;
  uint64_t *v85;
  uint64_t v86;
  _anonymous_namespace_ *v87;
  re *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  _BYTE *v93;
  _anonymous_namespace_ *v94;
  const char *v95;
  size_t v96;
  re::TimelineAssetData *v97;
  re **v98;
  uint64_t *v99;
  uint64_t v100;
  re::AssetPath *v101;
  re::TimelineGroupBuilder *v102;
  uint64_t v103;
  uint64_t v105;
  re *v106;
  unint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  void (**v111)(re::TimelineAssetData *__hidden);
  uint64_t v112;
  char v113;
  unsigned __int128 v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  __int128 v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  _BYTE v123[7];
  _BYTE *v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  size_t v129;
  __int128 v130;
  __int128 v131;
  _QWORD v132[2];
  uint64_t v133;
  unint64_t v134;

  re::DynamicString::format((re::DynamicString *)"%s", (re::DynamicString *)&v125, a3);
  v5 = v126;
  v6 = v127;
  if ((v126 & 1) != 0)
    v7 = v127;
  else
    v7 = (char *)&v126 + 1;
  if (v7)
  {
    v8 = v126 >> 1;
    if ((v126 & 1) == 0)
      v8 = v126 >> 1;
    if (v8)
    {
      do
      {
        if (*v7 == 32)
        {
          *v7 = 95;
          v5 = v126;
          v6 = v127;
        }
        ++v7;
        if ((v5 & 1) != 0)
          v9 = v6;
        else
          v9 = (char *)&v126 + 1;
        v10 = v5 >> 1;
        if ((v5 & 1) == 0)
          v10 = v5 >> 1;
      }
      while (v7 != &v9[v10]);
    }
  }
  if ((a2[16] & 1) != 0)
    v11 = (const char *)*((_QWORD *)a2 + 3);
  else
    v11 = a2 + 17;
  v102 = this;
  if ((v5 & 1) != 0)
    v12 = v6;
  else
    v12 = (char *)&v126 + 1;
  v13 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"%s_%s", (re::DynamicString *)&v121, v11, v12);
  v112 = 2;
  v113 = 0;
  *(_QWORD *)&v114 = 0;
  *((_QWORD *)&v114 + 1) = &str_110;
  v120 = 0;
  v111 = (void (**)(re::TimelineAssetData *__hidden))off_24ED31B68;
  v117 = 0;
  v118 = 0uLL;
  v119 = 0;
  v103 = *((_QWORD *)a2 + 12);
  if (v103)
  {
    v105 = 0;
    for (i = 0; i != v103; ++i)
    {
      v15 = re::BucketArray<re::TimelineGroupBuilder::TimelineData,8ul>::operator[]((uint64_t)(a2 + 56), i);
      *(_QWORD *)&v109 = 0;
      *((_QWORD *)&v109 + 1) = &str_110;
      v17 = *((_QWORD *)&v109 + 1);
      v16 = v109;
      *(_QWORD *)&v109 = 0;
      *((_QWORD *)&v109 + 1) = &str_110;
      v18 = v114;
      v114 = __PAIR128__(v17, v16);
      *(_QWORD *)&v130 = v16 & 0xFFFFFFFFFFFFFFFELL | v18 & 1;
      *((_QWORD *)&v130 + 1) = *((_QWORD *)&v18 + 1);
      re::StringID::destroyString((re::StringID *)&v130);
      re::StringID::destroyString((re::StringID *)&v109);
      v21 = *((_QWORD *)a2 + 2);
      v22 = (const char *)*((_QWORD *)a2 + 3);
      if ((v21 & 1) == 0)
        v22 = a2 + 17;
      v23 = v21 >> 1;
      v24 = v21 >> 1;
      if ((*((_QWORD *)a2 + 2) & 1) != 0)
        v25 = v23;
      else
        v25 = v24;
      v106 = (re *)v22;
      v107 = v25;
      *((_QWORD *)&v130 + 1) = 0;
      v131 = 0uLL;
      if (v25)
        v26 = v25 + 1;
      else
        v26 = 0;
      re::DynamicString::setCapacity(&v130, v26);
      re::DynamicString::operator=((re::DynamicString *)&v130, (uint64_t)&v106);
      v27 = re::DynamicString::operator!=(v15 + 32, (uint64_t)&v130);
      v28 = (re *)v130;
      if ((_QWORD)v130 && (BYTE8(v130) & 1) != 0)
        v28 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v130 + 40))();
      if (v27)
      {
        v29 = *((_QWORD *)a2 + 2);
        if ((v29 & 1) != 0)
          v30 = v29 >> 1;
        else
          v30 = v29 >> 1;
        v31 = (_anonymous_namespace_ *)re::DynamicString::operator[](v15 + 32, v30);
        v32 = *((_QWORD *)a2 + 2);
        if ((v32 & 1) != 0)
          v33 = v32 >> 1;
        else
          v33 = v32 >> 1;
        if (*(_BYTE *)v31 == 47)
          v34 = v33 + 1;
        else
          v34 = v33;
        v35 = *(_QWORD *)(v15 + 40);
        v36 = *(_QWORD *)(v15 + 48);
        if ((v35 & 1) == 0)
          v36 = v15 + 41;
        v37 = v36 + v34;
        v38 = v35 >> 1;
        v39 = v35 >> 1;
        if ((*(_QWORD *)(v15 + 40) & 1) == 0)
          v38 = v39;
        v40 = v36 + v38 - v37;
        v130 = 0u;
        v131 = 0u;
        v41 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v130, 0);
        v128 = v37;
        v129 = v40;
        re::DynamicString::setCapacity(&v106, v40);
        while (v129)
        {
          v132[0] = "/";
          v132[1] = 1;
          re::StringSlice::findFirstOf(&v128, (uint64_t)v132, 0, (uint64_t)&v133);
          if ((_BYTE)v133)
          {
            v42 = v134;
            v43 = re::Slice<char>::range(&v128, 0, v134);
            v45 = v44;
            v128 = re::Slice<char>::range(&v128, v42 + 1, v129);
            v129 = v46;
          }
          else
          {
            v43 = v128;
            v45 = v129;
            v128 = 0;
            v129 = 0;
          }
          v133 = v43;
          v134 = v45;
          re::internal::escapeBindingKey(&v133, (re::DynamicString *)&v130);
          if ((v107 & 1) != 0)
            v47 = v107 >> 1;
          else
            v47 = v107 >> 1;
          if (v47)
            re::DynamicString::append((re::DynamicString *)&v106, ".", 1uLL);
          if ((BYTE8(v130) & 1) != 0)
            v48 = (const char *)v131;
          else
            v48 = (char *)&v130 + 9;
          re::DynamicString::appendf((re::DynamicString *)&v106, "entities[%s]", v48);
        }
        if ((_QWORD)v130 && (BYTE8(v130) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v130 + 40))();
        re::DynamicString::operator=((re::DynamicString *)&v109, (re::DynamicString *)&v106);
        v28 = v106;
        if (v106 && (v107 & 1) != 0)
          v28 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v106 + 40))();
      }
      if ((BYTE8(v109) & 1) != 0)
        v49 = *((_QWORD *)&v109 + 1) >> 1;
      else
        v49 = BYTE8(v109) >> 1;
      if (!v49
        && ((v63 = *(float *)(v15 + 64), v64 = *((float *)a2 + 10), v63 == v64)
         || vabds_f32(v63, v64) < (float)((float)((float)(fabsf(v63) + fabsf(v64)) + 1.0) * 0.00001))
        && ((v65 = *(float *)(v15 + 68), v66 = *((float *)a2 + 11), v65 == v66)
         || vabds_f32(v65, v66) < (float)((float)((float)(fabsf(v65) + fabsf(v66)) + 1.0) * 0.00001)))
      {
        re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)&v117, (re::AssetHandle *)(v15 + 72));
      }
      else
      {
        v50 = re::globalAllocators(v28);
        v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v50[2] + 32))(v50[2], 176, 8);
        v52 = re::TimelineClipAssetData::TimelineClipAssetData((re::TimelineClipAssetData *)v51);
        re::AssetHandle::operator=((uint64_t *)v52 + 9, (uint64_t *)(v15 + 72));
        *(double *)(v51 + 144) = (float)(*(float *)(v15 + 64) - *((float *)a2 + 10));
        *(_BYTE *)(v51 + 16) = 3;
        re::DynamicString::operator=((re::DynamicString *)(v51 + 40), (re::DynamicString *)&v109);
        v53 = v124;
        if ((v122 & 1) == 0)
          v53 = v123;
        v54 = *(_QWORD *)(v15 + 16);
        if ((*(_QWORD *)(v15 + 8) & 1) == 0)
          v54 = v15 + 9;
        re::DynamicString::format((re::DynamicString *)"%s_%s[%zu]", (re::DynamicString *)&v130, v53, v54, v105);
        v55 = *(_anonymous_namespace_ **)a2;
        if ((BYTE8(v130) & 1) != 0)
          v56 = (const char *)v131;
        else
          v56 = (char *)&v130 + 9;
        v57 = strlen(v56);
        TimelineAsset = re::AssetHelper::makeTimelineAsset((re::AssetHelper *)v51, v58);
        v60 = re::TimelineAsset::assetType((re::TimelineAsset *)TimelineAsset);
        v61 = re::ImportAssetTable::addAsset(v55, (uint64_t)v56, v57, TimelineAsset, (re **)v60);
        v107 = 0;
        v108 = 0;
        v106 = 0;
        if ((*(_BYTE *)(v61 + 8) & 1) != 0)
          v62 = *(re::AssetPath **)(v61 + 16);
        else
          v62 = (re::AssetPath *)(v61 + 9);
        re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)&v117, (re::AssetHandle *)&v106);
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v106);
        if ((_QWORD)v130 && (BYTE8(v130) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v130 + 40))();
        ++v105;
      }
      if ((_QWORD)v109 && (BYTE8(v109) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v109 + 40))();
    }
  }
  v67 = *(_anonymous_namespace_ **)a2;
  if ((v122 & 1) != 0)
    v68 = v124;
  else
    v68 = v123;
  v69 = (re *)strlen(v68);
  v70 = re::globalAllocators(v69);
  v71 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70[2] + 32))(v70[2], 112, 8);
  *(_QWORD *)v71 = off_24ED36578;
  v72 = v113;
  *(_QWORD *)(v71 + 8) = v112;
  *(_BYTE *)(v71 + 16) = v72;
  v73 = v114;
  *(_QWORD *)(v71 + 24) = *(_QWORD *)(v71 + 24) & 0xFFFFFFFFFFFFFFFELL | v114 & 1;
  *(_QWORD *)(v71 + 24) = v114 & 0xFFFFFFFFFFFFFFFELL | v73 & 1;
  *(_QWORD *)(v71 + 32) = *((_QWORD *)&v114 + 1);
  *(_QWORD *)&v114 = 0;
  *((_QWORD *)&v114 + 1) = &str_110;
  *(_OWORD *)(v71 + 40) = 0u;
  *(_OWORD *)(v71 + 56) = 0u;
  *(_QWORD *)(v71 + 40) = v115;
  v74 = *((_QWORD *)&v115 + 1);
  *(_OWORD *)(v71 + 56) = v116;
  v116 = 0uLL;
  v75 = *(_QWORD *)(v71 + 48);
  *(_QWORD *)(v71 + 48) = v74;
  *(_QWORD *)&v115 = 0;
  *((_QWORD *)&v115 + 1) = v75;
  *(_QWORD *)v71 = off_24ED31B68;
  *(_QWORD *)(v71 + 104) = 0;
  *(_DWORD *)(v71 + 96) = 0;
  *(_QWORD *)(v71 + 88) = 0;
  *(_OWORD *)(v71 + 72) = 0u;
  *(_QWORD *)(v71 + 72) = v117;
  v117 = 0;
  *(_OWORD *)(v71 + 80) = v118;
  v118 = 0u;
  *(_QWORD *)(v71 + 104) = v120;
  v120 = 0;
  ++v119;
  ++*(_DWORD *)(v71 + 96);
  v77 = re::AssetHelper::makeTimelineAsset((re::AssetHelper *)v71, v76);
  v78 = re::TimelineAsset::assetType((re::TimelineAsset *)v77);
  v79 = re::ImportAssetTable::addAsset(v67, (uint64_t)v68, (uint64_t)v69, v77, (re **)v78);
  v110 = 0;
  v109 = 0u;
  if ((*(_BYTE *)(v79 + 8) & 1) != 0)
    v80 = *(re::AssetPath **)(v79 + 16);
  else
    v80 = (re::AssetPath *)(v79 + 9);
  v82 = *((float *)a2 + 11);
  v83 = *((float *)a2 + 12);
  if (v82 == v83 || vabds_f32(v82, v83) < (float)((float)((float)(fabsf(v82) + fabsf(v83)) + 1.0) * 0.00001))
  {
    *(_OWORD *)v102 = v109;
    v109 = 0uLL;
    *((_QWORD *)v102 + 2) = v110;
    v110 = 0;
  }
  else
  {
    v85 = re::globalAllocators(v81);
    v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v85[2] + 32))(v85[2], 176, 8);
    v87 = re::TimelineClipAssetData::TimelineClipAssetData((re::TimelineClipAssetData *)v86);
    v106 = 0;
    v107 = (unint64_t)&str_110;
    v88 = v106;
    v89 = v107;
    v106 = 0;
    v107 = (unint64_t)&str_110;
    v90 = *(_QWORD *)(v86 + 24);
    v91 = *(_QWORD *)(v86 + 32);
    *(_QWORD *)(v86 + 24) = v88;
    *(_QWORD *)(v86 + 32) = v89;
    *(_QWORD *)&v130 = (unint64_t)v88 & 0xFFFFFFFFFFFFFFFELL | v90 & 1;
    *((_QWORD *)&v130 + 1) = v91;
    re::StringID::destroyString((re::StringID *)&v130);
    re::StringID::destroyString((re::StringID *)&v106);
    re::AssetHandle::operator=((uint64_t *)(v86 + 72), (uint64_t *)&v109);
    v92 = (float)(*((float *)a2 + 11) - *((float *)a2 + 10));
    if (!*(_BYTE *)(v86 + 152))
      *(_BYTE *)(v86 + 152) = 1;
    *(double *)(v86 + 160) = v92;
    *(_BYTE *)(v86 + 16) = 3;
    if ((v122 & 1) != 0)
      v93 = v124;
    else
      v93 = v123;
    re::DynamicString::format((re::DynamicString *)"%s_Fill", (re::DynamicString *)&v130, v93);
    v94 = *(_anonymous_namespace_ **)a2;
    if ((BYTE8(v130) & 1) != 0)
      v95 = (const char *)v131;
    else
      v95 = (char *)&v130 + 9;
    v96 = strlen(v95);
    v98 = re::AssetHelper::makeTimelineAsset((re::AssetHelper *)v86, v97);
    v99 = re::TimelineAsset::assetType((re::TimelineAsset *)v98);
    v100 = re::ImportAssetTable::addAsset(v94, (uint64_t)v95, v96, v98, (re **)v99);
    *((_QWORD *)v102 + 1) = 0;
    *((_QWORD *)v102 + 2) = 0;
    *(_QWORD *)v102 = 0;
    if ((*(_BYTE *)(v100 + 8) & 1) != 0)
      v101 = *(re::AssetPath **)(v100 + 16);
    else
      v101 = (re::AssetPath *)(v100 + 9);
    if ((_QWORD)v130 && (BYTE8(v130) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v130 + 40))();
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v109);
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)&v117);
  v111 = off_24ED36578;
  if ((_QWORD)v115)
  {
    if ((BYTE8(v115) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v115 + 40))();
    v115 = 0u;
    v116 = 0u;
  }
  re::StringID::destroyString((re::StringID *)&v114);
  if (v121 && (v122 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v121 + 40))();
  result = v125;
  if (v125 && (v126 & 1) != 0)
    return (*(uint64_t (**)(void))(*(_QWORD *)v125 + 40))();
  return result;
}

_QWORD *re::DynamicArray<re::AssetHandle>::insert(_QWORD *this, unint64_t a2, uint64_t *a3)
{
  unint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = this[2];
  if (v4 + 1 <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v6 = this;
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::AssetHandle>::growCapacity(this, v4 + 1);
    v4 = v6[2];
  }
  v7 = v6[4];
  v8 = (uint64_t *)(v7 + 24 * v4);
  if (v4 <= a2)
  {
    v18 = v7 + 24 * v4;
    v17 = (uint64_t *)(v18 + 16);
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *(_QWORD *)(v18 + 8) = a3[1];
    a3[1] = 0;
    v19 = *v8;
    *v8 = 0;
    *v8 = *a3;
    *a3 = v19;
  }
  else
  {
    v9 = v7 + 24 * v4;
    v8[1] = 0;
    v8[2] = 0;
    v10 = *(_QWORD *)(v9 - 16);
    *v8 = *(_QWORD *)(v9 - 24);
    *(_QWORD *)(v9 - 24) = 0;
    *(_QWORD *)(v9 - 16) = 0;
    v11 = *(_QWORD *)(v9 + 16);
    v12 = *(_QWORD *)(v9 - 8);
    *(_QWORD *)(v9 + 8) = v10;
    *(_QWORD *)(v9 + 16) = v12;
    *(_QWORD *)(v9 - 8) = v11;
    v13 = 3 * a2;
    this = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,re::AssetHandle *,re::AssetHandle *,re::AssetHandle *,0>((_QWORD *)(v6[4] + 8 * v13), (_QWORD *)(v6[4] + 24 * v6[2] - 24), (_QWORD *)(v6[4] + 24 * v6[2]));
    v14 = (uint64_t *)(v6[4] + 8 * v13);
    v15 = v14[1];
    v14[1] = a3[1];
    a3[1] = v15;
    v16 = *v14;
    *v14 = 0;
    *v14 = *a3;
    v17 = v14 + 2;
    *a3 = v16;
  }
  v20 = *v17;
  *v17 = a3[2];
  a3[2] = v20;
  ++v6[2];
  ++*((_DWORD *)v6 + 6);
  return this;
}

re::ecs2::AnimationComponent *re::ecs2::EntityAssetData::addComponent<re::ecs2::AnimationComponent>(_DWORD *a1)
{
  _anonymous_namespace_ *v1;
  re::ecs2::AnimationComponent *v3;
  re::ecs2::AnimationComponent *v4;
  __n128 v6;
  char v7;

  v1 = (_anonymous_namespace_ *)(a1 + 8);
  if (!*((_QWORD *)a1 + 4))
  {
    re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v1, 0);
    ++a1[14];
  }
  v3 = (re::ecs2::AnimationComponent *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                                             + 7)
                                                                                          + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 248, 0);
  v4 = re::ecs2::AnimationComponent::AnimationComponent(v3);
  v6.n128_u64[0] = *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AnimationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                   + 3) >> 1;
  v6.n128_u64[1] = (unint64_t)v4;
  v7 = 1;
  re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add(v1, &v6);
  return v3;
}

re::ecs2::AudioPlayerComponent *re::ecs2::EntityAssetData::addComponent<re::ecs2::AudioPlayerComponent>(_DWORD *a1)
{
  _anonymous_namespace_ *v1;
  re::ecs2::AudioPlayerComponent *v3;
  re::ecs2::AudioPlayerComponent *v4;
  __n128 v6;
  char v7;

  v1 = (_anonymous_namespace_ *)(a1 + 8);
  if (!*((_QWORD *)a1 + 4))
  {
    re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v1, 0);
    ++a1[14];
  }
  v3 = (re::ecs2::AudioPlayerComponent *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                               + 7)
                                                                                            + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 496, 0);
  v4 = re::ecs2::AudioPlayerComponent::AudioPlayerComponent(v3);
  v6.n128_u64[0] = *(_QWORD *)((*(uint64_t (**)(re::ecs2::AudioPlayerComponent *))(*(_QWORD *)v4 + 40))(v4)
                             + 24) >> 1;
  v6.n128_u64[1] = (unint64_t)v3;
  v7 = 1;
  re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add(v1, &v6);
  return v3;
}

uint64_t re::BucketArray<re::createEntityFromImportContext(re::USDImportContext &,re::SceneImportOperation &,unsigned long,re::BucketArray<re::TimelineGroupBuilder *,8ul> &,re::AnimationSceneEntityData &,re::FixedArray<BOOL> &,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> *,BOOL)::TransformedMeshItem,8ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::createEntityFromImportContext(re::USDImportContext &,re::SceneImportOperation &,unsigned long,re::BucketArray<re::TimelineGroupBuilder *,8ul> &,re::AnimationSceneEntityData &,re::FixedArray<BOOL> &,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> *,BOOL)::TransformedMeshItem,8ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::createEntityFromImportContext(re::USDImportContext &,re::SceneImportOperation &,unsigned long,re::BucketArray<re::TimelineGroupBuilder *,8ul> &,re::AnimationSceneEntityData &,re::FixedArray<BOOL> &,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> *,BOOL)::TransformedMeshItem,8ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  int v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;

  v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      v4 = result[1];
      if (v4 > a2)
      {
        v5 = *((_DWORD *)result + 4);
        do
        {
          v6 = v3 + 3;
          if ((v5 & 1) == 0)
            v6 = (_QWORD *)v3[4];
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 40))(*v3, v6[v4 - 1]);
          v7 = *((_DWORD *)v3 + 4);
          v4 = v3[1] - 1;
          v3[1] = v4;
          v5 = v7 + 2;
          *((_DWORD *)v3 + 4) = v5;
        }
        while (v4 > a2);
      }
      if (v4 < a2)
      {
        v8 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 640, 0);
          v9 = result;
          if (*v3)
          {
            v10 = v3[1];
            v11 = *((_DWORD *)v3 + 4);
            if ((v11 & 1) == 0)
            {
              v12 = *v8;
              v14 = v10 >= *v8;
              v13 = v10 + 1;
              v14 = !v14 || v12 >= v13;
              if (v14)
                goto LABEL_24;
              v15 = 2 * v12;
              goto LABEL_20;
            }
            v13 = v10 + 1;
            if (v13 >= 3)
            {
              v15 = 4;
LABEL_20:
              if (v15 <= v13)
                v17 = v13;
              else
                v17 = v15;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v17);
              v11 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v16 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v16);
            v11 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v11;
          }
LABEL_24:
          v18 = v3 + 3;
          if ((v11 & 1) == 0)
            v18 = (_QWORD *)v3[4];
          v19 = v3[1];
          v18[v19++] = v9;
          v3[1] = v19;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v19 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

_QWORD *re::BucketArray<re::FixedArray<unsigned short>,16ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::FixedArray<unsigned short>,16ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::FixedArray<unsigned short>,16ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 16 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 384, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::TimelineGroupBuilder::TimelineGroupBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v6;
  _QWORD v8[2];

  v8[0] = a3;
  v8[1] = a4;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  if (a4)
    v6 = a4 + 1;
  else
    v6 = 0;
  re::DynamicString::setCapacity((_QWORD *)(a1 + 8), v6);
  re::DynamicString::operator=((re::DynamicString *)(a1 + 8), (uint64_t)v8);
  *(_QWORD *)(a1 + 40) = 0xFF7FFFFF7F7FFFFFLL;
  *(_DWORD *)(a1 + 48) = -8388609;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  return a1;
}

void *re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

_QWORD *re::make::shared::inplace<re::ecs2::Static3DTextComponent>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  _QWORD *result;

  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  v4 = (_QWORD *)(a1 + 128);
  *(_OWORD *)(a1 + 96) = 0u;
  v5 = (_QWORD *)(a1 + 96);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 24) = 0;
  *(_QWORD *)v6 = off_24ED44118;
  *(_QWORD *)(v6 + 28) = 0x3F8000003E800000;
  *(_DWORD *)(v6 + 36) = 1029;
  *(_BYTE *)(v6 + 40) = 0;
  *(_DWORD *)(v6 + 41) = 16843009;
  *(_QWORD *)&v7 = 0x7F0000007FLL;
  *((_QWORD *)&v7 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v6 + 48) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(v6 + 64) = v7;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v5, 0);
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)v4 = 0u;
  v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v4, 0);
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0x3F8000003E800000;
  *(_QWORD *)(a1 + 192) = 0x101010000000405;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  v10 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)(a1 + 216), 0);
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  result = re::DynamicString::setCapacity((_QWORD *)(a1 + 248), 0);
  *a2 = a1;
  return result;
}

void re::ecs2::Static3DTextComponent::~Static3DTextComponent(re::ecs2::Static3DTextComponent *this)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (_OWORD *)((char *)this + 248);
  v2 = *((_QWORD *)this + 31);
  if (v2)
  {
    if ((*((_BYTE *)this + 256) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 33));
    *v3 = 0u;
    v3[1] = 0u;
  }
  v4 = *((_QWORD *)this + 27);
  if (v4)
  {
    if ((*((_BYTE *)this + 224) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 29));
    *(_OWORD *)((char *)this + 216) = 0u;
    *(_OWORD *)((char *)this + 232) = 0u;
  }
  re::AssetHandle::~AssetHandle((re::ecs2::Static3DTextComponent *)((char *)this + 160));
  v5 = *((_QWORD *)this + 16);
  if (v5)
  {
    if ((*((_BYTE *)this + 136) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 18));
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
  }
  v6 = *((_QWORD *)this + 12);
  if (v6)
  {
    if ((*((_BYTE *)this + 104) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 14));
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (_OWORD *)((char *)this + 248);
  v2 = *((_QWORD *)this + 31);
  if (v2)
  {
    if ((*((_BYTE *)this + 256) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 33));
    *v3 = 0u;
    v3[1] = 0u;
  }
  v4 = *((_QWORD *)this + 27);
  if (v4)
  {
    if ((*((_BYTE *)this + 224) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 29));
    *(_OWORD *)((char *)this + 216) = 0u;
    *(_OWORD *)((char *)this + 232) = 0u;
  }
  re::AssetHandle::~AssetHandle((re::ecs2::Static3DTextComponent *)((char *)this + 160));
  v5 = *((_QWORD *)this + 16);
  if (v5)
  {
    if ((*((_BYTE *)this + 136) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 18));
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
  }
  v6 = *((_QWORD *)this + 12);
  if (v6)
  {
    if ((*((_BYTE *)this + 104) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *((_QWORD *)this + 14));
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::Static3DTextComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

double re::make::shared::inplace<re::ecs2::PrimitiveBoxComponent>@<D0>(ArcSharedObject *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  double result;

  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)&result = 0x1000100010001;
  *(_QWORD *)(v3 + 28) = 0x1000100010001;
  *(_OWORD *)(v3 + 36) = xmmword_2260F8390;
  *(_WORD *)(v3 + 52) = 257;
  *(_BYTE *)(v3 + 54) = 0;
  *(_WORD *)(v3 + 56) = 0;
  *(_BYTE *)(v3 + 58) = 1;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_QWORD *)(v3 + 112) = 0x1000100010001;
  *(_OWORD *)(v3 + 120) = xmmword_2260F8390;
  *(_WORD *)(v3 + 136) = 257;
  *(_BYTE *)(v3 + 138) = 0;
  *(_WORD *)(v3 + 140) = 1;
  *(_QWORD *)v3 = &off_24ED43B10;
  *a2 = v3;
  return result;
}

void re::ecs2::PrimitiveBoxComponent::~PrimitiveBoxComponent(re::ecs2::PrimitiveBoxComponent *this)
{
  re::AssetHandle *v2;

  *(_QWORD *)this = &off_24ED43BA8;
  v2 = (re::ecs2::PrimitiveBoxComponent *)((char *)this + 64);
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveBoxComponent *)((char *)this + 88));
  re::AssetHandle::~AssetHandle(v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::AssetHandle *v2;

  *(_QWORD *)this = &off_24ED43BA8;
  v2 = (re::ecs2::PrimitiveBoxComponent *)((char *)this + 64);
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveBoxComponent *)((char *)this + 88));
  re::AssetHandle::~AssetHandle(v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PrimitiveBoxComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

_QWORD *re::ecs2::PrimitiveComponentBase<re::ecs2::PrimitiveBoxComponent,re::GeomBuildBoxOptions,(re::ecs2::ComponentTypeBase::Flags)2>::~PrimitiveComponentBase(_QWORD *a1)
{
  re::AssetHandle *v2;

  *a1 = &off_24ED43BA8;
  v2 = (re::AssetHandle *)(a1 + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 11));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::ecs2::PrimitiveComponentBase<re::ecs2::PrimitiveBoxComponent,re::GeomBuildBoxOptions,(re::ecs2::ComponentTypeBase::Flags)2>::~PrimitiveComponentBase(_QWORD *a1)
{
  re::AssetHandle *v2;

  *a1 = &off_24ED43BA8;
  v2 = (re::AssetHandle *)(a1 + 8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 11));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void *re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

double re::make::shared::inplace<re::ecs2::PrimitiveCylinderComponent>@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  double result;

  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 28) = 65544;
  result = 0.0000305175853;
  *(_QWORD *)(v3 + 32) = 0x3F0000003F800000;
  *(_QWORD *)(v3 + 40) = 0x10101013F000000;
  *(_BYTE *)(v3 + 48) = 0;
  *(_WORD *)(v3 + 52) = 0;
  *(_BYTE *)(v3 + 54) = 1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_DWORD *)(v3 + 104) = 65544;
  *(_QWORD *)(v3 + 108) = 0x3F0000003F800000;
  *(_QWORD *)(v3 + 116) = 0x10101013F000000;
  *(_BYTE *)(v3 + 124) = 0;
  *(_WORD *)(v3 + 128) = 1;
  *(_QWORD *)v3 = &off_24ED43DC8;
  *a2 = v3;
  return result;
}

void re::ecs2::PrimitiveCylinderComponent::~PrimitiveCylinderComponent(re::ecs2::PrimitiveCylinderComponent *this)
{
  re::AssetHandle *v2;

  *(_QWORD *)this = &off_24ED43E60;
  v2 = (re::ecs2::PrimitiveCylinderComponent *)((char *)this + 56);
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveCylinderComponent *)((char *)this + 80));
  re::AssetHandle::~AssetHandle(v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::AssetHandle *v2;

  *(_QWORD *)this = &off_24ED43E60;
  v2 = (re::ecs2::PrimitiveCylinderComponent *)((char *)this + 56);
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveCylinderComponent *)((char *)this + 80));
  re::AssetHandle::~AssetHandle(v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PrimitiveCylinderComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

_QWORD *re::ecs2::PrimitiveComponentBase<re::ecs2::PrimitiveCylinderComponent,re::GeomBuildCylinderOptions,(re::ecs2::ComponentTypeBase::Flags)2>::~PrimitiveComponentBase(_QWORD *a1)
{
  re::AssetHandle *v2;

  *a1 = &off_24ED43E60;
  v2 = (re::AssetHandle *)(a1 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 10));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::ecs2::PrimitiveComponentBase<re::ecs2::PrimitiveCylinderComponent,re::GeomBuildCylinderOptions,(re::ecs2::ComponentTypeBase::Flags)2>::~PrimitiveComponentBase(_QWORD *a1)
{
  re::AssetHandle *v2;

  *a1 = &off_24ED43E60;
  v2 = (re::AssetHandle *)(a1 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 10));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void *re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

double re::make::shared::inplace<re::ecs2::PrimitiveConeComponent>@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  double result;

  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 28) = 65544;
  result = 0.0000305175853;
  *(_QWORD *)(v3 + 32) = 0x3F0000003F800000;
  *(_DWORD *)(v3 + 40) = 65793;
  *(_WORD *)(v3 + 44) = 0;
  *(_BYTE *)(v3 + 46) = 1;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_DWORD *)(v3 + 96) = 65544;
  *(_QWORD *)(v3 + 100) = 0x3F0000003F800000;
  *(_DWORD *)(v3 + 108) = 65793;
  *(_WORD *)(v3 + 112) = 1;
  *(_QWORD *)v3 = &off_24ED43CE0;
  *a2 = v3;
  return result;
}

void re::ecs2::PrimitiveConeComponent::~PrimitiveConeComponent(re::ecs2::PrimitiveConeComponent *this)
{
  re::AssetHandle *v2;

  *(_QWORD *)this = &off_24ED43D78;
  v2 = (re::ecs2::PrimitiveConeComponent *)((char *)this + 48);
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveConeComponent *)((char *)this + 72));
  re::AssetHandle::~AssetHandle(v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::AssetHandle *v2;

  *(_QWORD *)this = &off_24ED43D78;
  v2 = (re::ecs2::PrimitiveConeComponent *)((char *)this + 48);
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveConeComponent *)((char *)this + 72));
  re::AssetHandle::~AssetHandle(v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PrimitiveConeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

_QWORD *re::ecs2::PrimitiveComponentBase<re::ecs2::PrimitiveConeComponent,re::GeomBuildConeOptions,(re::ecs2::ComponentTypeBase::Flags)2>::~PrimitiveComponentBase(_QWORD *a1)
{
  re::AssetHandle *v2;

  *a1 = &off_24ED43D78;
  v2 = (re::AssetHandle *)(a1 + 6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 9));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::ecs2::PrimitiveComponentBase<re::ecs2::PrimitiveConeComponent,re::GeomBuildConeOptions,(re::ecs2::ComponentTypeBase::Flags)2>::~PrimitiveComponentBase(_QWORD *a1)
{
  re::AssetHandle *v2;

  *a1 = &off_24ED43D78;
  v2 = (re::AssetHandle *)(a1 + 6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 9));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void *re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

double re::make::shared::inplace<re::ecs2::PrimitiveSphereComponent>@<D0>(ArcSharedObject *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  double result;

  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_WORD *)(v3 + 28) = 8;
  *(_DWORD *)(v3 + 32) = 1056964608;
  *(_WORD *)(v3 + 36) = 257;
  *(_BYTE *)(v3 + 38) = 0;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 1;
  result = 0.0;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_WORD *)(v3 + 96) = 8;
  *(_DWORD *)(v3 + 100) = 1056964608;
  *(_WORD *)(v3 + 104) = 257;
  *(_BYTE *)(v3 + 106) = 0;
  *(_WORD *)(v3 + 108) = 1;
  *(_QWORD *)v3 = &off_24ED43EB0;
  *a2 = v3;
  return result;
}

void re::ecs2::PrimitiveSphereComponent::~PrimitiveSphereComponent(re::ecs2::PrimitiveSphereComponent *this)
{
  re::AssetHandle *v2;

  *(_QWORD *)this = &off_24ED43F48;
  v2 = (re::ecs2::PrimitiveSphereComponent *)((char *)this + 48);
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveSphereComponent *)((char *)this + 72));
  re::AssetHandle::~AssetHandle(v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::AssetHandle *v2;

  *(_QWORD *)this = &off_24ED43F48;
  v2 = (re::ecs2::PrimitiveSphereComponent *)((char *)this + 48);
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveSphereComponent *)((char *)this + 72));
  re::AssetHandle::~AssetHandle(v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PrimitiveSphereComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

_QWORD *re::ecs2::PrimitiveComponentBase<re::ecs2::PrimitiveSphereComponent,re::GeomBuildSphereOptions,(re::ecs2::ComponentTypeBase::Flags)2>::~PrimitiveComponentBase(_QWORD *a1)
{
  re::AssetHandle *v2;

  *a1 = &off_24ED43F48;
  v2 = (re::AssetHandle *)(a1 + 6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 9));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::ecs2::PrimitiveComponentBase<re::ecs2::PrimitiveSphereComponent,re::GeomBuildSphereOptions,(re::ecs2::ComponentTypeBase::Flags)2>::~PrimitiveComponentBase(_QWORD *a1)
{
  re::AssetHandle *v2;

  *a1 = &off_24ED43F48;
  v2 = (re::AssetHandle *)(a1 + 6);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 9));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void *re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

double re::make::shared::inplace<re::ecs2::PrimitiveCapsuleComponent>@<D0>(ArcSharedObject *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  double result;

  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 28) = 65544;
  *(_WORD *)(v3 + 32) = 4;
  result = 2.00000047;
  *(_QWORD *)(v3 + 36) = 0x400000003F000000;
  *(_WORD *)(v3 + 44) = 257;
  *(_BYTE *)(v3 + 46) = 0;
  *(_WORD *)(v3 + 48) = 0;
  *(_BYTE *)(v3 + 50) = 1;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_DWORD *)(v3 + 104) = 65544;
  *(_WORD *)(v3 + 108) = 4;
  *(_QWORD *)(v3 + 112) = 0x400000003F000000;
  *(_WORD *)(v3 + 120) = 257;
  *(_BYTE *)(v3 + 122) = 0;
  *(_WORD *)(v3 + 124) = 1;
  *(_QWORD *)v3 = &off_24ED43BF8;
  *a2 = v3;
  return result;
}

void re::ecs2::PrimitiveCapsuleComponent::~PrimitiveCapsuleComponent(re::ecs2::PrimitiveCapsuleComponent *this)
{
  re::AssetHandle *v2;

  *(_QWORD *)this = &off_24ED43C90;
  v2 = (re::ecs2::PrimitiveCapsuleComponent *)((char *)this + 56);
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveCapsuleComponent *)((char *)this + 80));
  re::AssetHandle::~AssetHandle(v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::AssetHandle *v2;

  *(_QWORD *)this = &off_24ED43C90;
  v2 = (re::ecs2::PrimitiveCapsuleComponent *)((char *)this + 56);
  re::AssetHandle::~AssetHandle((re::ecs2::PrimitiveCapsuleComponent *)((char *)this + 80));
  re::AssetHandle::~AssetHandle(v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PrimitiveCapsuleComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

_QWORD *re::ecs2::PrimitiveComponentBase<re::ecs2::PrimitiveCapsuleComponent,re::GeomBuildCapsuleOptions,(re::ecs2::ComponentTypeBase::Flags)2>::~PrimitiveComponentBase(_QWORD *a1)
{
  re::AssetHandle *v2;

  *a1 = &off_24ED43C90;
  v2 = (re::AssetHandle *)(a1 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 10));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::ecs2::PrimitiveComponentBase<re::ecs2::PrimitiveCapsuleComponent,re::GeomBuildCapsuleOptions,(re::ecs2::ComponentTypeBase::Flags)2>::~PrimitiveComponentBase(_QWORD *a1)
{
  re::AssetHandle *v2;

  *a1 = &off_24ED43C90;
  v2 = (re::AssetHandle *)(a1 + 7);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 10));
  re::AssetHandle::~AssetHandle(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::DynamicArray<re::`anonymous namespace'::SkeletonAndAnimationInfoPerLodLevel>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x48uLL))
        {
          v2 = 72 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 72 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 72, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (_QWORD *)(v8 + 72 * v9);
        v11 = (_QWORD *)(v8 + 24);
        v12 = v7;
        do
        {
          v13 = *(v11 - 1);
          *(_OWORD *)v12 = *(_OWORD *)(v11 - 3);
          v12[2] = v13;
          v12[3] = 0;
          v12[4] = 0;
          v12[5] = 0;
          v12[4] = v11[1];
          v11[1] = 0;
          v14 = v12[3];
          v12[3] = 0;
          v12[3] = *v11;
          *v11 = v14;
          v15 = v12[5];
          v12[5] = v11[2];
          v11[2] = v15;
          v12[6] = 0;
          v12[7] = 0;
          v12[8] = 0;
          v12[7] = v11[4];
          v11[4] = 0;
          v16 = v12[6];
          v12[6] = 0;
          v12[6] = v11[3];
          v11[3] = v16;
          v17 = v12[8];
          v12[8] = v11[5];
          v11[5] = v17;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v11 + 3));
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
          v18 = v11 + 6;
          v11 += 9;
          v12 += 9;
        }
        while (v18 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t *re::ShareableInternal<re::GeomSkeleton>::~ShareableInternal(uint64_t *a1)
{
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = (uint64_t)&off_24ED43238;
  v2.n128_f64[0] = re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 17);
  v3 = a1[14];
  if (v3)
  {
    if (a1[15])
    {
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v3 + 40))(v3, a1[16], v2.n128_f64[0]);
      a1[15] = 0;
      a1[16] = 0;
    }
    a1[14] = 0;
  }
  v4 = a1[11];
  if (v4)
  {
    if (a1[12])
    {
      (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v4 + 40))(v4, a1[13], v2);
      a1[12] = 0;
      a1[13] = 0;
    }
    a1[11] = 0;
  }
  v5 = a1[8];
  if (v5)
  {
    if (a1[9])
    {
      (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v5 + 40))(v5, a1[10], v2);
      a1[9] = 0;
      a1[10] = 0;
    }
    a1[8] = 0;
  }
  re::FixedArray<re::StringID>::deinit(a1 + 5);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  *a1 = (uint64_t)&off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::ShareableInternal<re::GeomSkeleton>::~ShareableInternal(uint64_t *a1)
{
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = (uint64_t)&off_24ED43238;
  v2.n128_f64[0] = re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1 + 17);
  v3 = a1[14];
  if (v3)
  {
    if (a1[15])
    {
      (*(void (**)(uint64_t, uint64_t, double))(*(_QWORD *)v3 + 40))(v3, a1[16], v2.n128_f64[0]);
      a1[15] = 0;
      a1[16] = 0;
    }
    a1[14] = 0;
  }
  v4 = a1[11];
  if (v4)
  {
    if (a1[12])
    {
      (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v4 + 40))(v4, a1[13], v2);
      a1[12] = 0;
      a1[13] = 0;
    }
    a1[11] = 0;
  }
  v5 = a1[8];
  if (v5)
  {
    if (a1[9])
    {
      (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v5 + 40))(v5, a1[10], v2);
      a1[9] = 0;
      a1[10] = 0;
    }
    a1[8] = 0;
  }
  re::FixedArray<re::StringID>::deinit(a1 + 5);
  re::StringID::destroyString((re::StringID *)(a1 + 3));
  *a1 = (uint64_t)&off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

__n128 re::BucketArray<re::`anonymous namespace'::EntityAnimationEntry,8ul>::add(uint64_t a1, __n128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 *v8;
  __n128 result;
  unint64_t v10;
  unint64_t v11;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 8);
  if (v4 + 1 > 8 * v5)
  {
    v5 = *(_QWORD *)(a1 + 8);
  }
  if (v5 <= v4 >> 3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v6 = a1 + 24;
  else
    v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(v6 + 8 * (v4 >> 3));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  v8 = (__n128 *)(v7 + 40 * (v4 & 7));
  result = *a2;
  *v8 = *a2;
  v8[1].n128_u64[1] = 0;
  v8[2].n128_u64[0] = 0;
  v8[1].n128_u64[0] = 0;
  v8[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = 0;
  v10 = v8[1].n128_u64[0];
  v8[1].n128_u64[0] = 0;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  a2[1].n128_u64[0] = v10;
  v11 = v8[2].n128_u64[0];
  v8[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v11;
  return result;
}

uint64_t re::AnimationHelper::makeAdditiveForValues<re::SkeletalPoseAssetData>(re *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  NSObject *v16;
  const char *v17;
  uint8_t buf[8];
  uint64_t v19;
  uint64_t v20;

  if (*((uint64_t **)a1 + 1) != a4)
  {
    v16 = *re::animationLogObjects(a1);
    result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    *(_WORD *)buf = 0;
    v17 = "Cannot make additive values, output values expected to match input values size.";
    goto LABEL_27;
  }
  v4 = a2;
  if (!a2[1])
  {
    v16 = *re::animationLogObjects(a1);
    result = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (!(_DWORD)result)
      return result;
    *(_WORD *)buf = 0;
    v17 = "Cannot make additive values, base values array size must not be zero.";
LABEL_27:
    _os_log_error_impl(&dword_224FE9000, v16, OS_LOG_TYPE_ERROR, v17, buf, 2u);
    return 0;
  }
  *(_QWORD *)buf = 0;
  v19 = 0;
  v20 = 0;
  re::AnimationValueTraits<re::SkeletalPoseAssetData>::init(buf, *a2);
  v9 = 0;
  v10 = *((_QWORD *)a1 + 1);
  if (v10 && v4[1])
  {
    v11 = 0;
    v9 = 0;
    while (1)
    {
      re::AnimationValueTraits<re::SkeletalPoseAssetData>::invert(*v4 + v11, (uint64_t)buf);
      v13 = *((_QWORD *)a1 + 1);
      if (v13 <= (unint64_t)v9)
        break;
      if (a4 == v9)
        goto LABEL_30;
      re::AnimationValueTraits<re::SkeletalPoseAssetData>::combine(*(_QWORD *)a1 + v11, (uint64_t)buf, a3 + v11);
      v9 = (uint64_t *)((char *)v9 + 1);
      v10 = *((_QWORD *)a1 + 1);
      if (v10 > (unint64_t)v9)
      {
        v11 += 24;
        if (v4[1] > (unint64_t)v9)
          continue;
      }
      v9 = (uint64_t *)v9;
      goto LABEL_11;
    }
    re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v9, v13);
    _os_crash();
    __break(1u);
  }
  else
  {
LABEL_11:
    if (v10 <= (unint64_t)v9)
    {
LABEL_18:
      if (*(_QWORD *)buf)
      {
        if (v19)
          (*(void (**)(void))(**(_QWORD **)buf + 40))();
      }
      return 1;
    }
    if (a4 <= v9)
      v4 = v9;
    else
      v4 = a4;
    v14 = 24 * (_QWORD)v9;
    while (v4 != v9)
    {
      re::AnimationValueTraits<re::SkeletalPoseAssetData>::combine(*(_QWORD *)a1 + v14, (uint64_t)buf, a3 + v14);
      v9 = (uint64_t *)((char *)v9 + 1);
      v14 += 24;
      if (*((_QWORD *)a1 + 1) <= (unint64_t)v9)
        goto LABEL_18;
    }
  }
  re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v4, a4);
  _os_crash();
  __break(1u);
LABEL_30:
  re::internal::assertLog((re::internal *)6, v12, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, a4, a4);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::AnimationValueTraits<re::SkeletalPoseAssetData>::init(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _anonymous_namespace_ *v6;

  v2 = *(_QWORD *)(a2 + 8);
  v4 = result + 1;
  v3 = result[1];
  if (v2 != v3)
  {
    v5 = result;
    v6 = (_anonymous_namespace_ *)*result;
    if (v6)
    {
      if (v3)
      {
        v6 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, _QWORD))(*(_QWORD *)v6 + 40))(v6, v5[2]);
        *v4 = 0;
        v4[1] = 0;
        v2 = *(_QWORD *)(a2 + 8);
      }
      *v5 = 0;
    }
  }
  return result;
}

uint64_t re::AnimationValueTraits<re::SkeletalPoseAssetData>::invert(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  float32x4_t *v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;

  if (*(_QWORD *)(result + 8))
  {
    v2 = 0;
    v3 = 0;
    __asm { FMOV            V0.4S, #1.0 }
    do
    {
      if (*(_QWORD *)(a2 + 8) <= v3)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v9 = (float32x4_t *)(*(_QWORD *)(result + 16) + v2);
      v10 = *(_QWORD *)(a2 + 16) + v2;
      v11 = v9[1];
      v12 = v9[2];
      v13 = vdivq_f32(_Q0, *v9);
      v14 = (int8x16_t)vnegq_f32(v11);
      v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), v14, 0xCuLL);
      v14.i32[3] = v11.i32[3];
      v16 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL), v11), v12, v15);
      v17 = (int8x16_t)vaddq_f32(v16, v16);
      v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), v17, 0xCuLL);
      v19 = vaddq_f32(v12, vmulq_laneq_f32(v18, v11, 3));
      v20 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL), v11), v18, v15);
      *(float32x4_t *)v10 = v13;
      *(int8x16_t *)(v10 + 16) = v14;
      *(float32x4_t *)(v10 + 32) = vmulq_f32(vaddq_f32(v19, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), v20, 0xCuLL)), vnegq_f32(v13));
      ++v3;
      v2 += 48;
    }
    while (v3 < *(_QWORD *)(result + 8));
  }
  return result;
}

void re::AnimationValueTraits<re::SkeletalPoseAssetData>::combine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;

  if (*(_QWORD *)(a1 + 8))
  {
    v6 = 0;
    v7 = 0;
    do
    {
      if (*(_QWORD *)(a2 + 8) <= v7)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_8:
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (*(_QWORD *)(a3 + 8) <= v7)
        goto LABEL_8;
      re::AnimationValueTraits<re::GenericSRT<float>>::combine((float32x4_t *)(*(_QWORD *)(a1 + 16) + v6), (float32x4_t *)(*(_QWORD *)(a2 + 16) + v6), (float32x4_t *)(*(_QWORD *)(a3 + 16) + v6));
      ++v7;
      v6 += 48;
    }
    while (v7 < *(_QWORD *)(a1 + 8));
  }
}

_QWORD *re::BucketArray<re::`anonymous namespace'::EntityAnimationEntry,8ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  int v7;
  unint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;

  v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      v4 = result[1];
      if (v4 > a2)
      {
        v5 = *((_DWORD *)result + 4);
        do
        {
          v6 = v3 + 3;
          if ((v5 & 1) == 0)
            v6 = (_QWORD *)v3[4];
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v3 + 40))(*v3, v6[v4 - 1]);
          v7 = *((_DWORD *)v3 + 4);
          v4 = v3[1] - 1;
          v3[1] = v4;
          v5 = v7 + 2;
          *((_DWORD *)v3 + 4) = v5;
        }
        while (v4 > a2);
      }
      if (v4 < a2)
      {
        v8 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 320, 0);
          v9 = result;
          if (*v3)
          {
            v10 = v3[1];
            v11 = *((_DWORD *)v3 + 4);
            if ((v11 & 1) == 0)
            {
              v12 = *v8;
              v14 = v10 >= *v8;
              v13 = v10 + 1;
              v14 = !v14 || v12 >= v13;
              if (v14)
                goto LABEL_24;
              v15 = 2 * v12;
              goto LABEL_20;
            }
            v13 = v10 + 1;
            if (v13 >= 3)
            {
              v15 = 4;
LABEL_20:
              if (v15 <= v13)
                v17 = v13;
              else
                v17 = v15;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v17);
              v11 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v16 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v16);
            v11 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v11;
          }
LABEL_24:
          v18 = v3 + 3;
          if ((v11 & 1) == 0)
            v18 = (_QWORD *)v3[4];
          v19 = v3[1];
          v18[v19++] = v9;
          v3[1] = v19;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v19 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

_QWORD *re::DynamicArray<re::ModelWithLodsDescriptor>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::ModelWithLodsDescriptor>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ModelWithLodsDescriptor>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::ModelWithLodsDescriptor>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ModelWithLodsDescriptor>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x98uLL))
        {
          v2 = 152 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 152 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 152, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (_QWORD *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 152 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::ModelWithLodsDescriptor>(v8, v11);
          v8 += 19;
          v11 += 152;
          v10 -= 152;
        }
        while (v10);
        v8 = (_QWORD *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

double re::ObjectHelper::move<re::ModelWithLodsDescriptor>(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_QWORD *)(a2 + 24) = a1[3];
  v3 = a1[1];
  *(_QWORD *)a2 = *a1;
  *a1 = 0;
  v4 = a1[2];
  a1[3] = 0;
  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  a1[1] = v6;
  a1[2] = v5;
  *(_QWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v7 = (uint64_t)(a1 + 4);
  v8 = a1[5];
  *(_QWORD *)(a2 + 32) = a1[4];
  a1[4] = 0;
  *(_QWORD *)(a2 + 40) = v8;
  a1[5] = 0;
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = a1[6];
  a1[6] = v9;
  v10 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = a1[8];
  a1[8] = v10;
  ++*((_DWORD *)a1 + 14);
  LODWORD(v10) = *(_DWORD *)(a2 + 56) + 1;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a2 + 96) = 0;
  v12 = a1 + 9;
  v11 = a1[9];
  *(_DWORD *)(a2 + 56) = v10;
  v13 = a1[10];
  *(_QWORD *)(a2 + 72) = v11;
  a1[9] = 0;
  *(_QWORD *)(a2 + 80) = v13;
  a1[10] = 0;
  v14 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = a1[11];
  a1[11] = v14;
  v15 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = a1[13];
  a1[13] = v15;
  ++*((_DWORD *)a1 + 24);
  ++*(_DWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a2 + 136) = 0;
  v16 = a1 + 14;
  *(_QWORD *)(a2 + 112) = a1[14];
  a1[14] = 0;
  v17 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = a1[18];
  v18 = a1[14];
  *(_QWORD *)(a2 + 120) = v16[1];
  v16[1] = 0;
  v19 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = v16[2];
  ++*((_DWORD *)v16 + 6);
  ++*(_DWORD *)(a2 + 136);
  v16[2] = v19;
  v16[4] = v17;
  if (v18)
  {
    if (v17)
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 40))(v18, v17);
    a1[18] = 0;
    v16[1] = 0;
    v16[2] = 0;
    *v16 = 0;
    ++*((_DWORD *)a1 + 34);
  }
  if (*v12)
  {
    if (a1[13])
      (*(void (**)(_QWORD))(*(_QWORD *)*v12 + 40))(*v12);
    a1[13] = 0;
    v12[1] = 0;
    v12[2] = 0;
    *v12 = 0;
    ++*((_DWORD *)a1 + 24);
  }
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v7);
  if (*a1)
  {
    if ((a1[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, a1[2]);
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

__n128 re::make::shared::object<re::ShareableInternal<re::GeomInstance>,re::GeomInstance>@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v4 = re::globalAllocators((re *)a1);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 112, 16);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v5, 0);
  *(_QWORD *)v5 = &off_24ED43280;
  *(_OWORD *)(v5 + 32) = *(_OWORD *)a1;
  result = *(__n128 *)(a1 + 16);
  v7 = *(_OWORD *)(a1 + 32);
  v8 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v5 + 80) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v5 + 96) = v8;
  *(__n128 *)(v5 + 48) = result;
  *(_OWORD *)(v5 + 64) = v7;
  *a2 = v5;
  return result;
}

_QWORD *re::ShareableInternal<re::GeomInstance>::~ShareableInternal(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::ShareableInternal<re::GeomInstance>::~ShareableInternal(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::HashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, _WORD *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 56 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 56 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 56 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 16), a4);
  v14 = *(_QWORD *)(a1 + 8);
  *(_WORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 48) = *a5;
  *(_DWORD *)(v14 + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_OWORD *)&v13[24];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = DWORD2(v7);
      if (DWORD2(v7))
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,unsigned short,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (re::DynamicString *)(*(_QWORD *)&v13[16] + v10 + 16));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 56;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13, *(double *)&v7);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

_QWORD *re::BucketArray<re::GeomDeformerStack,8ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 320, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::GeomDeformerStack,8ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

uint64_t re::BucketArray<re::DynamicArray<re::`anonymous namespace'::SkeletonAndAnimationInfoPerLodLevel>,8ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 3)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 3)) + 40 * (a2 & 7);
}

void re::`anonymous namespace'::warnIgnoredAttribute(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  const char *v9;
  int v10;
  NSObject *v11;
  _BOOL4 v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  unsigned int v24;
  const char *v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  const char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if (a5)
    v9 = " affector";
  else
    v9 = "";
  v10 = *(_DWORD *)(a1 + 24);
  v11 = *re::pipelineLogObjects((re *)a1);
  v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (v10 == a2)
  {
    if (!v12)
      return;
    v13 = v11;
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(const char **)(a3 + 24);
    v16 = *(_QWORD *)(a4 + 8);
    v26 = 136315906;
    v27 = v14;
    v28 = 2080;
    v29 = v9;
    v30 = 2080;
    v31 = v15;
    v32 = 2080;
    v33 = v16;
    v17 = "Invalid attribute '%s' in %s%s for model %s, attribute ignored.";
    v18 = v13;
    v19 = 42;
  }
  else
  {
    if (!v12)
      return;
    v13 = v11;
    if ((a2 - 1) > 6)
      v20 = "float";
    else
      v20 = off_24ED443E8[a2 - 1];
    v21 = *(_QWORD *)(a1 + 16);
    v22 = *(const char **)(a3 + 24);
    v23 = *(_QWORD *)(a4 + 8);
    v24 = *(_DWORD *)(a1 + 24) - 1;
    if (v24 > 6)
      v25 = "float";
    else
      v25 = off_24ED443E8[v24];
    v26 = 136316418;
    v27 = v21;
    v28 = 2080;
    v29 = v22;
    v30 = 2080;
    v31 = v9;
    v32 = 2080;
    v33 = v23;
    v34 = 2080;
    v35 = v20;
    v36 = 2080;
    v37 = v25;
    v17 = "Incorrect type for attribute '%s' in %s%s for model %s, attribute ignored (expected '%s', got '%s').";
    v18 = v13;
    v19 = 62;
  }
  _os_log_impl(&dword_224FE9000, v18, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v26, v19);

}

uint64_t re::HashTable<unsigned char,std::unique_ptr<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>,std::function<void ()(re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>*)>>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,true,false>::add(uint64_t result, _BYTE *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  v6 = *a2;
  v7 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v6) ^ ((0xBF58476D1CE4E5B9 * v6) >> 27));
  v8 = v7 ^ (v7 >> 31);
  if (*(_QWORD *)result)
  {
    v9 = v8 % *(unsigned int *)(result + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *(_QWORD *)(result + 16);
      if (*(unsigned __int8 *)(v11 + 56 * v10 + 12) == (_DWORD)v6)
        return result;
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v11 + 56 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(unsigned __int8 *)(v11 + 56 * v10 + 12) == (_DWORD)v6)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  result = re::HashTable<unsigned char,std::unique_ptr<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>,std::function<void ()(re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>*)>>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,true,false>::addAsMove(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

uint64_t re::ecs2::EntityAssetData::tryGetComponent<re::ecs2::MeshSmoothComponent>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!a1[4])
    return 0;
  v1 = a1[6];
  if (!v1)
    return 0;
  v2 = a1[8] + 8;
  v3 = 24 * v1;
  while (*(_QWORD *)(v2 - 8) != *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                 + 3) >> 1)
  {
    v2 += 24;
    v3 -= 24;
    if (!v3)
      return 0;
  }
  return *(_QWORD *)v2;
}

uint64_t re::ecs2::EntityAssetData::tryGetComponent<re::ecs2::MeshOffsetsComponent>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!a1[4])
    return 0;
  v1 = a1[6];
  if (!v1)
    return 0;
  v2 = a1[8] + 8;
  v3 = 24 * v1;
  while (*(_QWORD *)(v2 - 8) != *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                 + 3) >> 1)
  {
    v2 += 24;
    v3 -= 24;
    if (!v3)
      return 0;
  }
  return *(_QWORD *)v2;
}

_anonymous_namespace_ *re::DynamicArray<re::MeshAssetJiggleDeformerData>::add(_anonymous_namespace_ *result, uint64_t *a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)result + 2);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::MeshAssetJiggleDeformerData>::setCapacity(result, v10);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::MeshAssetJiggleDeformerData>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v5 = *((_QWORD *)v3 + 2);
  }
  v11 = *((_QWORD *)v3 + 4) + 48 * v5;
  v12 = *a2;
  *(_QWORD *)v11 = *(_QWORD *)v11 & 0xFFFFFFFFFFFFFFFELL | *a2 & 1;
  *(_QWORD *)v11 = *a2 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  *(_QWORD *)(v11 + 8) = a2[1];
  *a2 = 0;
  a2[1] = (uint64_t)&str_110;
  v13 = a2[2];
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v11 + 16) & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  *(_QWORD *)(v11 + 16) = a2[2] & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  *(_QWORD *)(v11 + 24) = a2[3];
  a2[2] = 0;
  a2[3] = (uint64_t)&str_110;
  v14 = a2[4];
  *(_WORD *)(v11 + 40) = *((_WORD *)a2 + 20);
  *(_QWORD *)(v11 + 32) = v14;
  ++*((_QWORD *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

void std::__function::__func<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_0,std::allocator<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_0>,void ()(re::MeshDeformationAsset *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_0,std::allocator<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_0>,void ()(re::MeshDeformationAsset *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED432C8;
  return result;
}

void std::__function::__func<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_0,std::allocator<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_0>,void ()(re::MeshDeformationAsset *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED432C8;
}

re *std::__function::__func<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_0,std::allocator<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_0>,void ()(re::MeshDeformationAsset *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return re::internal::destroyPersistent<re::MeshDeformationAsset>((re *)"operator()", 3778, *a2);
}

uint64_t std::__function::__func<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_0,std::allocator<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_0>,void ()(re::MeshDeformationAsset *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_0,std::allocator<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_0>,void ()(re::MeshDeformationAsset *)>::target_type()
{
}

uint64_t re::ecs2::EntityAssetData::tryGetComponent<re::ecs2::SkeletalPoseComponent>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!a1[4])
    return 0;
  v1 = a1[6];
  if (!v1)
    return 0;
  v2 = a1[8] + 8;
  v3 = 24 * v1;
  while (*(_QWORD *)(v2 - 8) != *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                 + 3) >> 1)
  {
    v2 += 24;
    v3 -= 24;
    if (!v3)
      return 0;
  }
  return *(_QWORD *)v2;
}

uint64_t re::ecs2::EntityAssetData::tryGetComponent<re::ecs2::RigComponent>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (!a1[4])
    return 0;
  v1 = a1[6];
  if (!v1)
    return 0;
  v2 = a1[8] + 8;
  v3 = 24 * v1;
  while (*(_QWORD *)(v2 - 8) != *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::RigComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                 + 3) >> 1)
  {
    v2 += 24;
    v3 -= 24;
    if (!v3)
      return 0;
  }
  return *(_QWORD *)v2;
}

double re::make::shared::inplace<re::ecs2::MeshSmoothComponent>@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  re *inited;
  double result;

  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 24) = 0;
  *(_QWORD *)v4 = &off_24ED438E0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_DWORD *)(v4 + 56) = 0;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_DWORD *)(v4 + 96) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  inited = (re *)objc_initWeak((id *)(v4 + 136), 0);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 176) = re::globalAllocators(inited)[2];
  *(_DWORD *)(a1 + 256) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_DWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = -1;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *a2 = a1;
  return result;
}

void re::ecs2::MeshSmoothComponent::~MeshSmoothComponent(re::ecs2::MeshSmoothComponent *this)
{
  re::ecs2::MeshSmoothComponent::~MeshSmoothComponent(this);
  JUMPOUT(0x2276933B8);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  *(_QWORD *)this = &off_24ED438E0;
  v2 = *((_QWORD *)this + 39);
  if (v2)
  {
    if (*((_QWORD *)this + 40))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 41));
      *((_QWORD *)this + 40) = 0;
      *((_QWORD *)this + 41) = 0;
    }
    *((_QWORD *)this + 39) = 0;
  }
  v3 = *((_QWORD *)this + 36);
  if (v3)
  {
    if (*((_QWORD *)this + 37))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 38));
      *((_QWORD *)this + 37) = 0;
      *((_QWORD *)this + 38) = 0;
    }
    *((_QWORD *)this + 36) = 0;
  }
  v4 = *((_QWORD *)this + 29);
  v5 = (_QWORD *)((char *)this + 192);
  if (v4)
  {
    if (*((_QWORD *)this + 33))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 33) = 0;
    *((_QWORD *)this + 30) = 0;
    *((_QWORD *)this + 31) = 0;
    *((_QWORD *)this + 29) = 0;
    ++*((_DWORD *)this + 64);
  }
  if (*v5)
  {
    if (*((_QWORD *)this + 28))
      (*(void (**)(_QWORD))(*(_QWORD *)*v5 + 40))(*v5);
    *((_QWORD *)this + 28) = 0;
    *((_QWORD *)this + 25) = 0;
    *((_QWORD *)this + 26) = 0;
    *v5 = 0;
    ++*((_DWORD *)this + 54);
  }
  re::FramePersistentPtr<re::ecs2::MeshSmoothComponent::SmoothDeformerInputs,re::FrameManager>::~FramePersistentPtr((id *)this + 17);
  re::AssetHandle::~AssetHandle((re::ecs2::MeshSmoothComponent *)((char *)this + 112));
  v6 = *((_QWORD *)this + 9);
  v7 = (_QWORD *)((char *)this + 32);
  if (v6)
  {
    if (*((_QWORD *)this + 13))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 9) = 0;
    ++*((_DWORD *)this + 24);
  }
  if (*v7)
  {
    if (*((_QWORD *)this + 8))
      (*(void (**)(_QWORD))(*(_QWORD *)*v7 + 40))(*v7);
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 6) = 0;
    *v7 = 0;
    ++*((_DWORD *)this + 14);
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::MeshSmoothComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

id *re::FramePersistentPtr<re::ecs2::MeshSmoothComponent::SmoothDeformerInputs,re::FrameManager>::~FramePersistentPtr(id *a1)
{
  re *inited;
  id location;
  _QWORD v5[3];
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  inited = (re *)objc_initWeak(&location, 0);
  memset(v5, 0, sizeof(v5));
  v6 = re::globalAllocators(inited)[2];
  v7 = 0;
  re::FramePersistentPtr<re::ecs2::MeshSmoothComponent::SmoothDeformerInputs,re::FrameManager>::reset(a1, &location, 0, (uint64_t)v5);
  if (v7)
  {
    (*(void (**)(_QWORD *))*v7)(v7);
    if (v7 != v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  }
  objc_destroyWeak(&location);
  location = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 2));
  objc_destroyWeak(a1);
  *a1 = 0;
  return a1;
}

uint64_t re::FramePersistentPtr<re::ecs2::MeshSmoothComponent::SmoothDeformerInputs,re::FrameManager>::reset(id *location, id *a2, void *a3, uint64_t a4)
{
  _QWORD *WeakRetained;
  _QWORD *v9;
  re *v10;
  uint64_t *v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD v18[3];
  uint64_t v19;
  re *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (location[1])
  {
    WeakRetained = objc_loadWeakRetained(location);
    if (WeakRetained)
    {
      v9 = WeakRetained;

      if (!location[6])
      {
        v16 = re::globalAllocators(v10)[2];
        v18[0] = &off_24ED43960;
        v19 = v16;
        v20 = (re *)v18;
        re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)(location + 2), (uint64_t)v18);
        v10 = v20;
        if (v20)
        {
          v10 = (re *)(**(uint64_t (***)(re *))v20)(v20);
          if (v20 != (re *)v18)
            v10 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
        }
      }
      v11 = re::globalAllocators(v10);
      v12 = v9[2] & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)v9[1] << 60);
      v13 = location[1];
      v14 = re::PerFrameAllocatorManager::perFrameAllocator(v11[6], v12);
      (*(void (**)(uint64_t, id, id *))(*(_QWORD *)v14 + 16))(v14, v13, location + 2);
    }
    else
    {
      v15 = location[6];
      if (v15)
      {
        v18[0] = location[1];
        (*(void (**)(id, _QWORD *))(*(_QWORD *)v15 + 16))(v15, v18);
      }
      else
      {
        re::internal::destroyPersistent<re::ecs2::MeshSmoothComponent::SmoothDeformerInputs>((re *)"reset", 161, location[1]);
      }
    }
  }
  re::ArcWeakPtr<re::VideoHistogram>::operator=(location, a2);
  location[1] = a3;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(location + 2), a4);
}

re *re::internal::destroyPersistent<re::ecs2::MeshSmoothComponent::SmoothDeformerInputs>(re *result, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    v5 = a3[2];
    if (v5)
    {
      if (a3[3])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, a3[4]);
        a3[3] = 0;
        a3[4] = 0;
      }
      a3[2] = 0;
    }
    return (re *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

void re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshSmoothComponent::SmoothDeformerInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshSmoothComponent::SmoothDeformerInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

re *re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshSmoothComponent::SmoothDeformerInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshSmoothComponent::SmoothDeformerInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::operator()(uint64_t a1, _QWORD **a2)
{
  return re::internal::destroyPersistent<re::ecs2::MeshSmoothComponent::SmoothDeformerInputs>((re *)"operator()", 149, *a2);
}

_QWORD *re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshSmoothComponent::SmoothDeformerInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshSmoothComponent::SmoothDeformerInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED43960;
  return result;
}

_QWORD *re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshSmoothComponent::SmoothDeformerInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshSmoothComponent::SmoothDeformerInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED43960;
  return result;
}

uint64_t re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshSmoothComponent::SmoothDeformerInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshSmoothComponent::SmoothDeformerInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::size()
{
  return 16;
}

uint64_t re::HashTable<unsigned char,std::unique_ptr<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>,std::function<void ()(re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>*)>>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _BYTE *a4, uint64_t *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _BYTE v31[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v31, 0, 36);
          *(_QWORD *)&v31[36] = 0x7FFFFFFFLL;
          re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v31, v13, v12);
          v15 = *(_OWORD *)v31;
          *(_OWORD *)v31 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v31[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v31[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v31[24];
          *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v31[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned char,std::unique_ptr<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>,std::function<void ()(re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>*)>>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21 - 4, v21);
              v21 += 56;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned char,std::unique_ptr<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>,std::function<void ()(re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>*)>>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,true,false>::deinit((uint64_t *)v31);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 56 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 56 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 56 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9) = a3;
  v25 = a2;
  *(_BYTE *)(*(_QWORD *)(a1 + 16) + 56 * v9 + 12) = *a4;
  v26 = *(_QWORD *)(a1 + 16) + 56 * v9;
  v27 = *a5;
  *a5 = 0;
  *(_QWORD *)(v26 + 16) = v27;
  v28 = v26 + 16;
  v29 = (uint64_t *)a5[4];
  if (v29)
  {
    if (v29 == a5 + 1)
    {
      *(_QWORD *)(v28 + 32) = v28 + 8;
      (*(void (**)(uint64_t))(*(_QWORD *)a5[4] + 24))(a5[4]);
    }
    else
    {
      *(_QWORD *)(v28 + 32) = v29;
      a5[4] = 0;
    }
  }
  else
  {
    *(_QWORD *)(v28 + 32) = 0;
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v25) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void std::__function::__func<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_1,std::allocator<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_1>,void ()(re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension> *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_1,std::allocator<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_1>,void ()(re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension> *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED43358;
  return result;
}

void std::__function::__func<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_1,std::allocator<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_1>,void ()(re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension> *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED43358;
}

re *std::__function::__func<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_1,std::allocator<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_1>,void ()(re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension> *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return re::internal::destroyPersistent<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>((re *)"operator()", 3837, *a2);
}

uint64_t std::__function::__func<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_1,std::allocator<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_1>,void ()(re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension> *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_1,std::allocator<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_1>,void ()(re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension> *)>::target_type()
{
}

re::StringID *re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const StringID *a4, uint64_t *a5)
{
  uint64_t v9;
  int v10;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  signed int v27;
  uint64_t v28;
  re::StringID *result;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v9 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v33, 0, 36);
          *(_QWORD *)&v33[36] = 0x7FFFFFFFLL;
          re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v33, v14, v13);
          v16 = *(_OWORD *)v33;
          *(_OWORD *)v33 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v33[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v33[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v33[24];
          *(_OWORD *)&v33[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v33[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = v18 + 24;
            do
            {
              if ((*(_DWORD *)(v22 - 24) & 0x80000000) != 0)
              {
                v23 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)(v22 - 16) >> 31) ^ (*(_QWORD *)(v22 - 16) >> 1));
                v24 = (0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) ^ ((0x94D049BB133111EBLL * (v23 ^ (v23 >> 27))) >> 31);
                re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v24 % *(unsigned int *)(a1 + 24), v24, v22 - 16, v22);
              }
              v22 += 56;
              --v21;
            }
            while (v21);
          }
          re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit((uint64_t *)v33);
        }
      }
      else
      {
        if (v13)
          v27 = 2 * v12;
        else
          v27 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v25 = *(_QWORD *)(a1 + 16);
    v26 = *(_DWORD *)(v25 + 56 * v9);
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 16);
    v26 = *(_DWORD *)(v25 + 56 * v9);
    *(_DWORD *)(a1 + 36) = v26 & 0x7FFFFFFF;
  }
  v28 = 56 * v9;
  *(_DWORD *)(v25 + v28) = v26 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v28) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  result = re::StringID::StringID((re::StringID *)(*(_QWORD *)(a1 + 16) + 56 * v9 + 8), a4);
  v30 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v9);
  v31 = *a5;
  v30[3] = v30[3] & 0xFFFFFFFFFFFFFFFELL | *a5 & 1;
  v30[3] = *a5 & 0xFFFFFFFFFFFFFFFELL | v31 & 1;
  v30[4] = a5[1];
  *a5 = 0;
  a5[1] = (uint64_t)&str_110;
  v32 = a5[2];
  v30[5] = v30[5] & 0xFFFFFFFFFFFFFFFELL | v32 & 1;
  v30[5] = a5[2] & 0xFFFFFFFFFFFFFFFELL | v32 & 1;
  v30[6] = a5[3];
  a5[2] = 0;
  a5[3] = (uint64_t)&str_110;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64_t *re::make::shared::inplace<re::ecs2::MeshOffsetsComponent>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id *v4;
  uint64_t v5;
  re *inited;
  uint64_t *result;

  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  v4 = (id *)(a1 + 160);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v5 + 16) = 0;
  *(_BYTE *)(v5 + 24) = 0;
  *(_QWORD *)v5 = &off_24ED439B8;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_DWORD *)(v5 + 56) = 0;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_QWORD *)(v5 + 96) = 0;
  *(_QWORD *)(v5 + 104) = -1;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  inited = (re *)objc_initWeak(v4, 0);
  *(_QWORD *)(a1 + 168) = 0;
  result = re::globalAllocators(inited);
  *(_QWORD *)(a1 + 200) = result[2];
  *(_QWORD *)(a1 + 208) = 0;
  *a2 = a1;
  return result;
}

void re::ecs2::MeshOffsetsComponent::~MeshOffsetsComponent(id *this)
{
  id v2;
  id v3;

  *this = &off_24ED439B8;
  re::FramePersistentPtr<re::ecs2::MeshOffsetsComponent::OffsetsDeformerInputs,re::FrameManager>::~FramePersistentPtr(this + 20);
  v2 = this[17];
  if (v2)
  {
    if (this[18])
    {
      (*(void (**)(id, id))(*(_QWORD *)v2 + 40))(v2, this[19]);
      this[18] = 0;
      this[19] = 0;
    }
    this[17] = 0;
  }
  v3 = this[14];
  if (v3)
  {
    if (this[15])
    {
      (*(void (**)(id, id))(*(_QWORD *)v3 + 40))(v3, this[16]);
      this[15] = 0;
      this[16] = 0;
    }
    this[14] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(this + 9));
  re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::deinit((uint64_t)(this + 4));
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
}

{
  id v2;
  id v3;

  *this = &off_24ED439B8;
  re::FramePersistentPtr<re::ecs2::MeshOffsetsComponent::OffsetsDeformerInputs,re::FrameManager>::~FramePersistentPtr(this + 20);
  v2 = this[17];
  if (v2)
  {
    if (this[18])
    {
      (*(void (**)(id, id))(*(_QWORD *)v2 + 40))(v2, this[19]);
      this[18] = 0;
      this[19] = 0;
    }
    this[17] = 0;
  }
  v3 = this[14];
  if (v3)
  {
    if (this[15])
    {
      (*(void (**)(id, id))(*(_QWORD *)v3 + 40))(v3, this[16]);
      this[15] = 0;
      this[16] = 0;
    }
    this[14] = 0;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(this + 9));
  re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::deinit((uint64_t)(this + 4));
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

id *re::FramePersistentPtr<re::ecs2::MeshOffsetsComponent::OffsetsDeformerInputs,re::FrameManager>::~FramePersistentPtr(id *a1)
{
  re *inited;
  id location;
  _QWORD v5[3];
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  inited = (re *)objc_initWeak(&location, 0);
  memset(v5, 0, sizeof(v5));
  v6 = re::globalAllocators(inited)[2];
  v7 = 0;
  re::FramePersistentPtr<re::ecs2::MeshOffsetsComponent::OffsetsDeformerInputs,re::FrameManager>::reset(a1, &location, 0, (uint64_t)v5);
  if (v7)
  {
    (*(void (**)(_QWORD *))*v7)(v7);
    if (v7 != v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  }
  objc_destroyWeak(&location);
  location = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 2));
  objc_destroyWeak(a1);
  *a1 = 0;
  return a1;
}

uint64_t re::FramePersistentPtr<re::ecs2::MeshOffsetsComponent::OffsetsDeformerInputs,re::FrameManager>::reset(id *location, id *a2, void *a3, uint64_t a4)
{
  _QWORD *WeakRetained;
  _QWORD *v9;
  re *v10;
  uint64_t *v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD v18[3];
  uint64_t v19;
  re *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (location[1])
  {
    WeakRetained = objc_loadWeakRetained(location);
    if (WeakRetained)
    {
      v9 = WeakRetained;

      if (!location[6])
      {
        v16 = re::globalAllocators(v10)[2];
        v18[0] = &off_24ED43A38;
        v19 = v16;
        v20 = (re *)v18;
        re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)(location + 2), (uint64_t)v18);
        v10 = v20;
        if (v20)
        {
          v10 = (re *)(**(uint64_t (***)(re *))v20)(v20);
          if (v20 != (re *)v18)
            v10 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
        }
      }
      v11 = re::globalAllocators(v10);
      v12 = v9[2] & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)v9[1] << 60);
      v13 = location[1];
      v14 = re::PerFrameAllocatorManager::perFrameAllocator(v11[6], v12);
      (*(void (**)(uint64_t, id, id *))(*(_QWORD *)v14 + 16))(v14, v13, location + 2);
    }
    else
    {
      v15 = location[6];
      if (v15)
      {
        v18[0] = location[1];
        (*(void (**)(id, _QWORD *))(*(_QWORD *)v15 + 16))(v15, v18);
      }
      else
      {
        re::internal::destroyPersistent<re::ecs2::MeshOffsetsComponent::OffsetsDeformerInputs>((re *)"reset", 161, (uint64_t)location[1]);
      }
    }
  }
  re::ArcWeakPtr<re::VideoHistogram>::operator=(location, a2);
  location[1] = a3;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(location + 2), a4);
}

re *re::internal::destroyPersistent<re::ecs2::MeshOffsetsComponent::OffsetsDeformerInputs>(re *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::FixedArray<re::OffsetDeformerInput>::deinit((_QWORD *)(a3 + 16));
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

void re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshOffsetsComponent::OffsetsDeformerInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshOffsetsComponent::OffsetsDeformerInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

re *re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshOffsetsComponent::OffsetsDeformerInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshOffsetsComponent::OffsetsDeformerInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return re::internal::destroyPersistent<re::ecs2::MeshOffsetsComponent::OffsetsDeformerInputs>((re *)"operator()", 149, *a2);
}

_QWORD *re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshOffsetsComponent::OffsetsDeformerInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshOffsetsComponent::OffsetsDeformerInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED43A38;
  return result;
}

_QWORD *re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshOffsetsComponent::OffsetsDeformerInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshOffsetsComponent::OffsetsDeformerInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED43A38;
  return result;
}

uint64_t re::internal::Callable<re::FramePersistentPtr<re::ecs2::MeshOffsetsComponent::OffsetsDeformerInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::MeshOffsetsComponent::OffsetsDeformerInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::size()
{
  return 16;
}

_QWORD *re::FixedArray<re::OffsetDeformerInput>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  id *v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = 160 * v2;
      v5 = (id *)(result[2] + 136);
      do
      {
        if (*v5)
        {

          *v5 = 0;
        }
        v5 += 20;
        v4 -= 160;
      }
      while (v4);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

uint64_t re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 192 * v4;
        v6 = (_QWORD *)(v3 + 32);
        do
        {
          v7 = *(v6 - 4);
          if (v7)
          {
            if (*v6)
              (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
            *v6 = 0;
            *(v6 - 3) = 0;
            *(v6 - 2) = 0;
            *(v6 - 4) = 0;
            ++*((_DWORD *)v6 - 2);
          }
          v6 += 24;
          v5 -= 192;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

void std::__function::__func<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_2,std::allocator<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_2>,void ()(re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension> *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_2,std::allocator<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_2>,void ()(re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension> *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED433E8;
  return result;
}

void std::__function::__func<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_2,std::allocator<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_2>,void ()(re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension> *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED433E8;
}

re *std::__function::__func<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_2,std::allocator<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_2>,void ()(re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension> *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return re::internal::destroyPersistent<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>((re *)"operator()", 4061, *a2);
}

uint64_t std::__function::__func<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_2,std::allocator<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_2>,void ()(re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension> *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_2,std::allocator<re::`anonymous namespace'::wireupDeformers(re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::GeomDeformerStack,8ul> const&,re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false> &)::$_2>,void ()(re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension> *)>::target_type()
{
}

_QWORD *re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xC0uLL))
        {
          v2 = 192 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 192 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 192, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 192 * v9;
        do
        {
          v12 = &v7[v10 / 8];
          v13 = v8 + v10;
          v12[4] = 0;
          v12[1] = 0;
          v12[2] = 0;
          *v12 = 0;
          *((_DWORD *)v12 + 6) = 0;
          v14 = *(_QWORD *)(v8 + v10 + 8);
          *v12 = *(_QWORD *)(v8 + v10);
          v12[1] = v14;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)(v13 + 8) = 0;
          v15 = v7[v10 / 8 + 2];
          v12[2] = *(_QWORD *)(v8 + v10 + 16);
          *(_QWORD *)(v13 + 16) = v15;
          v16 = v7[v10 / 8 + 4];
          v12[4] = *(_QWORD *)(v8 + v10 + 32);
          *(_QWORD *)(v13 + 32) = v16;
          *(_DWORD *)(v13 + 24) = *(_DWORD *)(v8 + v10 + 24) + 1;
          *((_DWORD *)v12 + 6) = LODWORD(v7[v10 / 8 + 3]) + 1;
          *((_OWORD *)v12 + 3) = *(_OWORD *)(v8 + v10 + 48);
          v17 = *(_OWORD *)(v8 + v10 + 64);
          v18 = *(_OWORD *)(v8 + v10 + 80);
          v19 = *(_OWORD *)(v8 + v10 + 112);
          *((_OWORD *)v12 + 6) = *(_OWORD *)(v8 + v10 + 96);
          *((_OWORD *)v12 + 7) = v19;
          *((_OWORD *)v12 + 4) = v17;
          *((_OWORD *)v12 + 5) = v18;
          v20 = *(_OWORD *)(v8 + v10 + 128);
          v21 = *(_OWORD *)(v8 + v10 + 144);
          v22 = *(_OWORD *)(v8 + v10 + 160);
          *((_DWORD *)v12 + 44) = *(_DWORD *)(v8 + v10 + 176);
          *((_OWORD *)v12 + 9) = v21;
          *((_OWORD *)v12 + 10) = v22;
          *((_OWORD *)v12 + 8) = v20;
          v23 = *(_QWORD *)(v8 + v10);
          if (v23)
          {
            if (*(_QWORD *)(v13 + 32))
              (*(void (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
            *(_QWORD *)(v13 + 32) = 0;
            *(_QWORD *)(v13 + 8) = 0;
            *(_QWORD *)(v13 + 16) = 0;
            *(_QWORD *)v13 = 0;
            ++*(_DWORD *)(v13 + 24);
          }
          v10 += 192;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

double re::HashTable<unsigned char,std::unique_ptr<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>,std::function<void ()(re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>*)>>,re::Hash<unsigned char>,re::EqualTo<unsigned char>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 8;
      do
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v5);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v5) = v7 & 0x7FFFFFFF;
          std::unique_ptr<re::TypeRegistry,std::function<void ()(re::TypeRegistry*)>>::~unique_ptr[abi:nn180100]((uint64_t *)(v6 + v5 + 8));
          v3 = *((unsigned int *)a1 + 8);
        }
        ++v4;
        v5 += 56;
      }
      while (v4 < v3);
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void std::__function::__func<re::`anonymous namespace'::wireupVertexCacheAnimations(float,re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::VertexCacheAnimationData *,8ul> const&,re::BucketArray<re::`anonymous namespace'::EntityAnimationEntry,8ul> &)::$_0,std::allocator<re::`anonymous namespace'::wireupVertexCacheAnimations(float,re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::VertexCacheAnimationData *,8ul> const&,re::BucketArray<re::`anonymous namespace'::EntityAnimationEntry,8ul> &)::$_0>,void ()(re::VertexCacheAsset *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::`anonymous namespace'::wireupVertexCacheAnimations(float,re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::VertexCacheAnimationData *,8ul> const&,re::BucketArray<re::`anonymous namespace'::EntityAnimationEntry,8ul> &)::$_0,std::allocator<re::`anonymous namespace'::wireupVertexCacheAnimations(float,re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::VertexCacheAnimationData *,8ul> const&,re::BucketArray<re::`anonymous namespace'::EntityAnimationEntry,8ul> &)::$_0>,void ()(re::VertexCacheAsset *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED43468;
  return result;
}

void std::__function::__func<re::`anonymous namespace'::wireupVertexCacheAnimations(float,re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::VertexCacheAnimationData *,8ul> const&,re::BucketArray<re::`anonymous namespace'::EntityAnimationEntry,8ul> &)::$_0,std::allocator<re::`anonymous namespace'::wireupVertexCacheAnimations(float,re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::VertexCacheAnimationData *,8ul> const&,re::BucketArray<re::`anonymous namespace'::EntityAnimationEntry,8ul> &)::$_0>,void ()(re::VertexCacheAsset *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED43468;
}

re *std::__function::__func<re::`anonymous namespace'::wireupVertexCacheAnimations(float,re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::VertexCacheAnimationData *,8ul> const&,re::BucketArray<re::`anonymous namespace'::EntityAnimationEntry,8ul> &)::$_0,std::allocator<re::`anonymous namespace'::wireupVertexCacheAnimations(float,re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::VertexCacheAnimationData *,8ul> const&,re::BucketArray<re::`anonymous namespace'::EntityAnimationEntry,8ul> &)::$_0>,void ()(re::VertexCacheAsset *)>::operator()(re *result, void (****a2)(_QWORD))
{
  void (***v2)(_QWORD);
  uint64_t v3;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    (**v2)(v2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, v2);
  }
  return result;
}

uint64_t std::__function::__func<re::`anonymous namespace'::wireupVertexCacheAnimations(float,re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::VertexCacheAnimationData *,8ul> const&,re::BucketArray<re::`anonymous namespace'::EntityAnimationEntry,8ul> &)::$_0,std::allocator<re::`anonymous namespace'::wireupVertexCacheAnimations(float,re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::VertexCacheAnimationData *,8ul> const&,re::BucketArray<re::`anonymous namespace'::EntityAnimationEntry,8ul> &)::$_0>,void ()(re::VertexCacheAsset *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::`anonymous namespace'::wireupVertexCacheAnimations(float,re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::VertexCacheAnimationData *,8ul> const&,re::BucketArray<re::`anonymous namespace'::EntityAnimationEntry,8ul> &)::$_0,std::allocator<re::`anonymous namespace'::wireupVertexCacheAnimations(float,re::ecs2::EntityAssetData &,re::StringSlice const&,re::SceneImportOperation &,re::MeshAssetData &,re::BucketArray<re::VertexCacheAnimationData *,8ul> const&,re::BucketArray<re::`anonymous namespace'::EntityAnimationEntry,8ul> &)::$_0>,void ()(re::VertexCacheAsset *)>::target_type()
{
}

void *re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t *re::make::shared::inplace<re::ecs2::VertexCacheComponent>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id *v4;
  uint64_t v5;
  re *inited;
  uint64_t *result;

  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  v4 = (id *)(a1 + 192);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v5 + 16) = 0;
  *(_BYTE *)(v5 + 24) = 0;
  *(_QWORD *)v5 = &off_24ED44218;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_DWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 184) = 0;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_DWORD *)(v5 + 96) = 0;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *(_DWORD *)(v5 + 136) = 0;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_DWORD *)(v5 + 176) = 0;
  inited = (re *)objc_initWeak(v4, 0);
  *(_QWORD *)(a1 + 200) = 0;
  result = re::globalAllocators(inited);
  *(_QWORD *)(a1 + 232) = result[2];
  *(_QWORD *)(a1 + 240) = 0;
  *a2 = a1;
  return result;
}

void re::ecs2::VertexCacheComponent::~VertexCacheComponent(id *this)
{
  id v2;
  id v3;

  re::FramePersistentPtr<re::ecs2::VertexCacheComponent::VertexCacheInputs,re::FrameManager>::~FramePersistentPtr(this + 24);
  re::DynamicArray<re::BindPoint>::deinit((uint64_t)(this + 19));
  v2 = this[14];
  if (v2)
  {
    if (this[18])
      (*(void (**)(id))(*(_QWORD *)v2 + 40))(v2);
    this[18] = 0;
    this[15] = 0;
    this[16] = 0;
    this[14] = 0;
    ++*((_DWORD *)this + 34);
  }
  v3 = this[9];
  if (v3)
  {
    if (this[13])
      (*(void (**)(id))(*(_QWORD *)v3 + 40))(v3);
    this[13] = 0;
    this[10] = 0;
    this[11] = 0;
    this[9] = 0;
    ++*((_DWORD *)this + 24);
  }
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(this + 4));
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
}

{
  id v2;
  id v3;

  re::FramePersistentPtr<re::ecs2::VertexCacheComponent::VertexCacheInputs,re::FrameManager>::~FramePersistentPtr(this + 24);
  re::DynamicArray<re::BindPoint>::deinit((uint64_t)(this + 19));
  v2 = this[14];
  if (v2)
  {
    if (this[18])
      (*(void (**)(id))(*(_QWORD *)v2 + 40))(v2);
    this[18] = 0;
    this[15] = 0;
    this[16] = 0;
    this[14] = 0;
    ++*((_DWORD *)this + 34);
  }
  v3 = this[9];
  if (v3)
  {
    if (this[13])
      (*(void (**)(id))(*(_QWORD *)v3 + 40))(v3);
    this[13] = 0;
    this[10] = 0;
    this[11] = 0;
    this[9] = 0;
    ++*((_DWORD *)this + 24);
  }
  re::DynamicArray<re::AssetHandle>::deinit((uint64_t)(this + 4));
  *this = &off_24ED426B8;
  objc_destructInstance(this + 1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

id *re::FramePersistentPtr<re::ecs2::VertexCacheComponent::VertexCacheInputs,re::FrameManager>::~FramePersistentPtr(id *a1)
{
  re *inited;
  id location;
  _QWORD v5[3];
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  inited = (re *)objc_initWeak(&location, 0);
  memset(v5, 0, sizeof(v5));
  v6 = re::globalAllocators(inited)[2];
  v7 = 0;
  re::FramePersistentPtr<re::ecs2::VertexCacheComponent::VertexCacheInputs,re::FrameManager>::reset(a1, &location, 0, (uint64_t)v5);
  if (v7)
  {
    (*(void (**)(_QWORD *))*v7)(v7);
    if (v7 != v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  }
  objc_destroyWeak(&location);
  location = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 2));
  objc_destroyWeak(a1);
  *a1 = 0;
  return a1;
}

uint64_t re::FramePersistentPtr<re::ecs2::VertexCacheComponent::VertexCacheInputs,re::FrameManager>::reset(id *location, id *a2, void *a3, uint64_t a4)
{
  _QWORD *WeakRetained;
  _QWORD *v9;
  re *v10;
  uint64_t *v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD v18[3];
  uint64_t v19;
  re *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (location[1])
  {
    WeakRetained = objc_loadWeakRetained(location);
    if (WeakRetained)
    {
      v9 = WeakRetained;

      if (!location[6])
      {
        v16 = re::globalAllocators(v10)[2];
        v18[0] = &off_24ED44298;
        v19 = v16;
        v20 = (re *)v18;
        re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)(location + 2), (uint64_t)v18);
        v10 = v20;
        if (v20)
        {
          v10 = (re *)(**(uint64_t (***)(re *))v20)(v20);
          if (v20 != (re *)v18)
            v10 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
        }
      }
      v11 = re::globalAllocators(v10);
      v12 = v9[2] & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)v9[1] << 60);
      v13 = location[1];
      v14 = re::PerFrameAllocatorManager::perFrameAllocator(v11[6], v12);
      (*(void (**)(uint64_t, id, id *))(*(_QWORD *)v14 + 16))(v14, v13, location + 2);
    }
    else
    {
      v15 = location[6];
      if (v15)
      {
        v18[0] = location[1];
        (*(void (**)(id, _QWORD *))(*(_QWORD *)v15 + 16))(v15, v18);
      }
      else
      {
        re::internal::destroyPersistent<re::ecs2::VertexCacheComponent::VertexCacheInputs>((re *)"reset", 161, (uint64_t)location[1]);
      }
    }
  }
  re::ArcWeakPtr<re::VideoHistogram>::operator=(location, a2);
  location[1] = a3;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(location + 2), a4);
}

re *re::internal::destroyPersistent<re::ecs2::VertexCacheComponent::VertexCacheInputs>(re *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    re::FixedArray<re::VertexCacheDeformerInput>::deinit((_QWORD *)(a3 + 16));
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

void re::internal::Callable<re::FramePersistentPtr<re::ecs2::VertexCacheComponent::VertexCacheInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::VertexCacheComponent::VertexCacheInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

re *re::internal::Callable<re::FramePersistentPtr<re::ecs2::VertexCacheComponent::VertexCacheInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::VertexCacheComponent::VertexCacheInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return re::internal::destroyPersistent<re::ecs2::VertexCacheComponent::VertexCacheInputs>((re *)"operator()", 149, *a2);
}

_QWORD *re::internal::Callable<re::FramePersistentPtr<re::ecs2::VertexCacheComponent::VertexCacheInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::VertexCacheComponent::VertexCacheInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED44298;
  return result;
}

_QWORD *re::internal::Callable<re::FramePersistentPtr<re::ecs2::VertexCacheComponent::VertexCacheInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::VertexCacheComponent::VertexCacheInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED44298;
  return result;
}

uint64_t re::internal::Callable<re::FramePersistentPtr<re::ecs2::VertexCacheComponent::VertexCacheInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::VertexCacheComponent::VertexCacheInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::size()
{
  return 16;
}

_QWORD *re::FixedArray<re::VertexCacheDeformerInput>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  id *v5;
  void *v6;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = 40 * v2;
      v5 = (id *)(result[2] + 16);
      do
      {
        if (*v5)
        {

          *v5 = 0;
        }
        v6 = *(v5 - 2);
        if (v6)
        {

          *(v5 - 2) = 0;
        }
        v5 += 5;
        v4 -= 40;
      }
      while (v4);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

uint64_t re::DynamicArray<re::BindPoint>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = v3 + 8;
        v6 = 48 * v4;
        do
        {
          re::DynamicArray<re::BindPoint::BindPointData>::deinit(v5);
          re::DynamicArray<re::BindPoint::BindPointData>::deinit(v5);
          v5 += 48;
          v6 -= 48;
        }
        while (v6);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::DynamicArray<re::MeshAssetData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MeshAssetData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xA0uLL))
        {
          v2 = 160 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 160 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 160, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 160 * v9;
        do
        {
          v12 = &v7[v10 / 8];
          v12[4] = 0;
          v13 = v8 + v10;
          v12[1] = 0;
          v12[2] = 0;
          *v12 = 0;
          *((_DWORD *)v12 + 6) = 0;
          v14 = *(_QWORD *)(v8 + v10 + 8);
          *v12 = *(_QWORD *)(v8 + v10);
          v12[1] = v14;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)(v13 + 8) = 0;
          v15 = v7[v10 / 8 + 2];
          v12[2] = *(_QWORD *)(v8 + v10 + 16);
          *(_QWORD *)(v13 + 16) = v15;
          v16 = v7[v10 / 8 + 4];
          v12[4] = *(_QWORD *)(v8 + v10 + 32);
          *(_QWORD *)(v13 + 32) = v16;
          *(_DWORD *)(v13 + 24) = *(_DWORD *)(v8 + v10 + 24) + 1;
          *((_DWORD *)v12 + 6) = LODWORD(v7[v10 / 8 + 3]) + 1;
          v12[9] = 0;
          v12[6] = 0;
          v12[7] = 0;
          v12[5] = 0;
          *((_DWORD *)v12 + 16) = 0;
          v17 = *(_QWORD *)(v8 + v10 + 48);
          v12[5] = *(_QWORD *)(v8 + v10 + 40);
          *(_QWORD *)(v8 + v10 + 40) = 0;
          v12[6] = v17;
          *(_QWORD *)(v13 + 48) = 0;
          v18 = v7[v10 / 8 + 7];
          v12[7] = *(_QWORD *)(v8 + v10 + 56);
          *(_QWORD *)(v13 + 56) = v18;
          v19 = v7[v10 / 8 + 9];
          v12[9] = *(_QWORD *)(v8 + v10 + 72);
          *(_QWORD *)(v13 + 72) = v19;
          *(_DWORD *)(v13 + 64) = *(_DWORD *)(v8 + v10 + 64) + 1;
          LODWORD(v19) = LODWORD(v7[v10 / 8 + 8]) + 1;
          v12[14] = 0;
          v12[11] = 0;
          v12[12] = 0;
          v12[10] = 0;
          *((_DWORD *)v12 + 26) = 0;
          v20 = *(_QWORD *)(v8 + v10 + 80);
          *((_DWORD *)v12 + 16) = v19;
          v21 = *(_QWORD *)(v8 + v10 + 88);
          v12[10] = v20;
          *(_QWORD *)(v8 + v10 + 80) = 0;
          v12[11] = v21;
          *(_QWORD *)(v13 + 88) = 0;
          v22 = v7[v10 / 8 + 12];
          v12[12] = *(_QWORD *)(v8 + v10 + 96);
          *(_QWORD *)(v13 + 96) = v22;
          v23 = v7[v10 / 8 + 14];
          v12[14] = *(_QWORD *)(v8 + v10 + 112);
          *(_QWORD *)(v13 + 112) = v23;
          *(_DWORD *)(v13 + 104) = *(_DWORD *)(v8 + v10 + 104) + 1;
          *((_DWORD *)v12 + 26) = LODWORD(v7[v10 / 8 + 13]) + 1;
          v12[19] = 0;
          v12[16] = 0;
          v12[17] = 0;
          v12[15] = 0;
          *((_DWORD *)v12 + 36) = 0;
          v24 = (_QWORD *)(v8 + v10 + 120);
          v25 = *(_QWORD *)(v8 + v10 + 128);
          v12[15] = *v24;
          *v24 = 0;
          v12[16] = v25;
          *(_QWORD *)(v13 + 128) = 0;
          v26 = v7[v10 / 8 + 17];
          v12[17] = *(_QWORD *)(v8 + v10 + 136);
          *(_QWORD *)(v13 + 136) = v26;
          v27 = v7[v10 / 8 + 19];
          v12[19] = *(_QWORD *)(v8 + v10 + 152);
          *(_QWORD *)(v13 + 152) = v27;
          *(_DWORD *)(v13 + 144) = *(_DWORD *)(v8 + v10 + 144) + 1;
          *((_DWORD *)v12 + 36) = LODWORD(v7[v10 / 8 + 18]) + 1;
          if (*v24)
          {
            if (v27)
              (*(void (**)(_QWORD))(*(_QWORD *)*v24 + 40))(*v24);
            *(_QWORD *)(v13 + 152) = 0;
            *(_QWORD *)(v8 + v10 + 128) = 0;
            *(_QWORD *)(v8 + v10 + 136) = 0;
            *v24 = 0;
            ++*(_DWORD *)(v13 + 144);
          }
          re::DynamicArray<re::MeshAssetSkeleton>::deinit(v8 + v10 + 80);
          re::DynamicArray<re::MeshAssetInstance>::deinit(v8 + v10 + 40);
          re::DynamicArray<re::MeshAssetModel>::deinit(v8 + v10);
          v10 += 160;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

void re::TimelineGroupBuilder::addTimeline(uint64_t a1, const re::AssetHandle *a2, uint64_t a3, uint64_t a4, const char *a5, float32_t a6, float a7)
{
  _anonymous_namespace_ *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x2_t v24;
  float32x2_t v25;
  int8x8_t v26;
  float v27;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  int v41;
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  unint64_t v46;
  __int16 v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v40[0] = a3;
  v40[1] = a4;
  v35 = 0uLL;
  if (a4)
    v12 = a4 + 1;
  else
    v12 = 0;
  *((_QWORD *)&v34 + 1) = 0;
  re::DynamicString::setCapacity(&v34, v12);
  re::DynamicString::operator=((re::DynamicString *)&v34, (uint64_t)v40);
  v36 = __PAIR64__(LODWORD(a7), LODWORD(a6));
  re::AssetHandle::AssetHandle((re::AssetHandle *)&v37, a2);
  v13 = *(_QWORD *)(a1 + 96);
  v14 = *(_QWORD *)(a1 + 64);
  if (v13 + 1 > 8 * v14)
  {
    re::BucketArray<re::TimelineGroupBuilder::TimelineData,8ul>::setBucketsCapacity((_QWORD *)(a1 + 56), (v13 + 8) >> 3);
    v14 = *(_QWORD *)(a1 + 64);
  }
  if (v14 <= v13 >> 3)
  {
    v40[2] = 0;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v49 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v41 = 136315906;
    v42 = "operator[]";
    v43 = 1024;
    v44 = 858;
    v45 = 2048;
    v46 = v13 >> 3;
    v47 = 2048;
    v48 = v14;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
    v15 = a1 + 80;
  else
    v15 = *(_QWORD *)(a1 + 88);
  v16 = *(_QWORD *)(v15 + 8 * (v13 >> 3));
  ++*(_QWORD *)(a1 + 96);
  ++*(_DWORD *)(a1 + 104);
  v17 = v16 + 96 * (v13 & 7);
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  *(_QWORD *)v17 = v30;
  v30 = 0;
  v18 = *(_QWORD *)(v17 + 16);
  *(_QWORD *)(v17 + 16) = v32;
  v32 = v18;
  *(_QWORD *)(v17 + 24) = v33;
  v33 = 0;
  v19 = *(_QWORD *)(v17 + 8);
  *(_QWORD *)(v17 + 8) = v31;
  v31 = v19;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_QWORD *)(v17 + 32) = v34;
  *(_QWORD *)&v34 = 0;
  v20 = *(_QWORD *)(v17 + 48);
  *(_QWORD *)(v17 + 48) = v35;
  *(_QWORD *)&v35 = v20;
  *(_QWORD *)(v17 + 56) = *((_QWORD *)&v35 + 1);
  *((_QWORD *)&v35 + 1) = 0;
  v21 = *(_QWORD *)(v17 + 40);
  *(_QWORD *)(v17 + 40) = *((_QWORD *)&v34 + 1);
  *((_QWORD *)&v34 + 1) = v21;
  *(_QWORD *)(v17 + 64) = v36;
  *(_QWORD *)(v17 + 72) = 0;
  *(_QWORD *)(v17 + 80) = 0;
  *(_QWORD *)(v17 + 88) = 0;
  *(_QWORD *)(v17 + 80) = v38;
  v38 = 0;
  v22 = *(_QWORD *)(v17 + 72);
  *(_QWORD *)(v17 + 72) = 0;
  *(_QWORD *)(v17 + 72) = v37;
  v37 = v22;
  v23 = *(_QWORD *)(v17 + 88);
  *(_QWORD *)(v17 + 88) = v39;
  v39 = v23;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v37);
  if ((_QWORD)v34)
  {
    if ((BYTE8(v34) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v34 + 40))();
    v34 = 0u;
    v35 = 0u;
  }
  if (v30 && (v31 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v30 + 40))();
  v24.i32[0] = *(_QWORD *)(a1 + 40);
  v24.f32[1] = a7;
  v25.i32[1] = HIDWORD(*(_QWORD *)(a1 + 40));
  v25.f32[0] = a6;
  v26 = (int8x8_t)vcgt_f32(v24, v25);
  v24.f32[0] = a6;
  *(int8x8_t *)(a1 + 40) = vbsl_s8(v26, (int8x8_t)v24, *(int8x8_t *)(a1 + 40));
  v27 = *(float *)(a1 + 48);
  if (v27 < a7)
    v27 = a7;
  *(float *)(a1 + 48) = v27;
}

_QWORD *re::BucketArray<re::TimelineGroupBuilder::TimelineData,8ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 8 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 768, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::TimelineGroupBuilder::TimelineData,8ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

uint64_t re::DynamicArray<re::FixedArray<re::StringID>>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t *v15;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    v6 = a2[2];
    if (v6 >= *(_QWORD *)(a1 + 16))
    {
      re::DynamicArray<re::FixedArray<re::StringID>>::setCapacity((_QWORD *)a1, a2[2]);
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::FixedArray<re::StringID> *,re::FixedArray<re::StringID> *,re::FixedArray<re::StringID> *,0>((unint64_t *)a2[4], (unint64_t *)(a2[4] + 24 * *(_QWORD *)(a1 + 16)), *(unint64_t **)(a1 + 32));
      v10 = *(_QWORD *)(a1 + 16);
      if (v10 != v6)
      {
        v11 = 3 * v10;
        v12 = a2[4] + 8 * v11;
        v13 = (unint64_t *)(*(_QWORD *)(a1 + 32) + 8 * v11);
        v14 = 24 * v6 - 8 * v11;
        do
        {
          v15 = re::FixedArray<re::StringID>::FixedArray(v13, v12);
          v12 += 24;
          v13 = v15 + 3;
          v14 -= 24;
        }
        while (v14);
      }
    }
    else
    {
      std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::FixedArray<re::StringID> *,re::FixedArray<re::StringID> *,re::FixedArray<re::StringID> *,0>((unint64_t *)a2[4], (unint64_t *)(a2[4] + 24 * v6), *(unint64_t **)(a1 + 32));
      v7 = *(_QWORD *)(a1 + 16);
      if (v6 != v7)
      {
        v8 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 24 * v6);
        v9 = 24 * v7 - 24 * v6;
        do
        {
          re::FixedArray<re::StringID>::deinit(v8);
          v8 += 3;
          v9 -= 24;
        }
        while (v9);
      }
    }
    *(_QWORD *)(a1 + 16) = v6;
  }
  return a1;
}

unint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::FixedArray<re::StringID> *,re::FixedArray<re::StringID> *,re::FixedArray<re::StringID> *,0>(unint64_t *result, unint64_t *a2, unint64_t *a3)
{
  uint64_t v5;

  if (result != a2)
  {
    v5 = (uint64_t)result;
    do
    {
      result = re::FixedArray<re::StringID>::operator=(a3, v5);
      v5 += 24;
      a3 += 3;
    }
    while ((unint64_t *)v5 != a2);
  }
  return result;
}

uint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::FixedArray<re::Matrix4x4<float>> *,re::FixedArray<re::Matrix4x4<float>> *,re::FixedArray<re::Matrix4x4<float>> *,0>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;

  if (result != a2)
  {
    v5 = (uint64_t)result;
    do
    {
      result = re::FixedArray<re::Matrix4x4<float>>::operator=(a3, v5);
      v5 += 24;
      a3 += 3;
    }
    while ((uint64_t *)v5 != a2);
  }
  return result;
}

unint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::SkeletalPoseMeshMap *,re::SkeletalPoseMeshMap *,re::SkeletalPoseMeshMap *>(unint64_t *result, unint64_t *a2, uint64_t a3)
{
  unint64_t *v5;
  uint64_t v6;
  unint64_t *v7;

  if (result != a2)
  {
    v5 = result;
    v6 = 0;
    do
    {
      v7 = &v5[v6];
      *(_BYTE *)(a3 + v6 * 8) = v5[v6];
      re::StringID::operator=((unint64_t *)(a3 + v6 * 8 + 8), (uint64_t *)&v5[v6 + 1]);
      re::StringID::operator=((unint64_t *)(a3 + v6 * 8 + 24), (uint64_t *)&v5[v6 + 3]);
      result = re::StringID::operator=((unint64_t *)(a3 + v6 * 8 + 40), (uint64_t *)&v5[v6 + 5]);
      *(_QWORD *)(a3 + v6 * 8 + 56) = v5[v6 + 7];
      v6 += 8;
    }
    while (v7 + 8 != a2);
  }
  return result;
}

uint64_t re::DynamicArray<re::AnimationSceneEntityData>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::AnimationSceneEntityData>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::AnimationSceneEntityData>::clear(a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::AnimationSceneEntityData>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::AnimationSceneEntityData>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

void re::DynamicArray<re::AnimationSceneEntityData>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::AnimationSceneEntityData>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AnimationSceneEntityData *,re::AnimationSceneEntityData *,re::AnimationSceneEntityData *>((uint64_t)&v14, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 88 * a1[2], a1[4]);
    v8 = a1[2];
    if (v8 != v4)
    {
      v9 = *(_QWORD *)(a2 + 32);
      v10 = a1[4];
      v11 = 88 * v8;
      v12 = 88 * v4;
      do
      {
        re::StringID::StringID((re::StringID *)(v10 + v11), (const StringID *)(v9 + v11));
        re::DynamicArray<re::AnimationSceneEntityData>::DynamicArray(v10 + v11 + 16, (uint64_t *)(v9 + v11 + 16));
        *(_BYTE *)(v10 + v11 + 56) = *(_BYTE *)(v9 + v11 + 56);
        re::AssetHandle::AssetHandle((re::AssetHandle *)(v10 + v11 + 64), (const re::AssetHandle *)(v9 + v11 + 64));
        v9 += 88;
        v12 -= 88;
        v10 += 88;
      }
      while (v11 != v12);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AnimationSceneEntityData *,re::AnimationSceneEntityData *,re::AnimationSceneEntityData *>((uint64_t)&v13, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 88 * v4, a1[4]);
    v5 = a1[2];
    if (v4 != v5)
    {
      v6 = a1[4] + 88 * v4;
      v7 = -88 * v4 + 88 * v5;
      do
      {
        re::AssetHandle::~AssetHandle((re::AssetHandle *)(v6 + 64));
        re::DynamicArray<re::AnimationSceneEntityData>::deinit(v6 + 16);
        re::StringID::destroyString((re::StringID *)v6);
        v6 += 88;
        v7 -= 88;
      }
      while (v7);
    }
  }
  a1[2] = v4;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::AnimationSceneEntityData *,re::AnimationSceneEntityData *,re::AnimationSceneEntityData *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    re::StringID::operator=((unint64_t *)(a4 + v7), (uint64_t *)(a2 + v7));
    re::DynamicArray<re::AnimationSceneEntityData>::operator=(a4 + v7 + 16, a2 + v7 + 16);
    *(_BYTE *)(a4 + v7 + 56) = *(_BYTE *)(a2 + v7 + 56);
    re::AssetHandle::operator=((uint64_t *)(a4 + v7 + 64), (uint64_t *)(a2 + v7 + 64));
    v7 += 88;
  }
  while (a2 + v7 != v6);
  return v6;
}

uint64_t re::DynamicArray<re::AnimationSceneEntityData>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::AnimationSceneEntityData>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::AnimationSceneEntityData>::copy(a1, a2);
  }
  return a1;
}

uint64_t re::BucketArray<re::TimelineGroupBuilder::TimelineData,8ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 3)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 3)) + 96 * (a2 & 7);
}

uint64_t re::DynamicArray<re::ModelWithLodsDescriptor>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = (_QWORD *)(v3 + 144);
        v6 = 152 * v4;
        do
        {
          v7 = *(v5 - 4);
          if (v7)
          {
            if (*v5)
              (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
            *v5 = 0;
            *(v5 - 3) = 0;
            *(v5 - 2) = 0;
            *(v5 - 4) = 0;
            ++*((_DWORD *)v5 - 2);
          }
          v8 = *(v5 - 9);
          if (v8)
          {
            if (*(v5 - 5))
              (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
            *(v5 - 5) = 0;
            *(v5 - 8) = 0;
            *(v5 - 7) = 0;
            *(v5 - 9) = 0;
            ++*((_DWORD *)v5 - 12);
          }
          re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)(v5 - 14));
          v9 = *(v5 - 18);
          if (v9)
          {
            if ((*(_BYTE *)(v5 - 17) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, *(v5 - 16));
            v10 = v5 - 18;
            *v10 = 0u;
            v10[1] = 0u;
          }
          v5 += 19;
          v6 -= 152;
        }
        while (v6);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::BucketArray<re::TimelineGroupBuilder::TimelineData,8ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  int v7;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (_QWORD *)re::BucketArray<re::TimelineGroupBuilder::TimelineData,8ul>::operator[](a1, i);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)(v4 + 9));
      v5 = v4[4];
      if (v5)
      {
        if ((v4[5] & 1) != 0)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, v4[6]);
        *((_OWORD *)v4 + 2) = 0u;
        *((_OWORD *)v4 + 3) = 0u;
      }
      if (*v4)
      {
        if ((v4[1] & 1) != 0)
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[2]);
        *(_OWORD *)v4 = 0u;
        *((_OWORD *)v4 + 1) = 0u;
      }
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v7 = *(_DWORD *)(a1 + 16);
    if ((v7 & 1) == 0)
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 40))(result, *(_QWORD *)(a1 + 32));
      v7 = *(_DWORD *)(a1 + 16);
    }
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = (v7 | 1) + 2;
  }
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::DynamicArray<re::DeformationDefinition>::insert(_QWORD *this, unint64_t a2, uint64_t *a3)
{
  unint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _OWORD v22[5];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = this[2];
  if (v4 + 1 <= a2)
  {
    memset(v22, 0, sizeof(v22));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v6 = this;
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::DeformationDefinition>::growCapacity(this, v4 + 1);
    v4 = v6[2];
  }
  v7 = v6[4];
  v8 = (unint64_t *)(v7 + 40 * v4);
  if (v4 <= a2)
  {
    v19 = *a3;
    *v8 = *v8 & 0xFFFFFFFFFFFFFFFELL | *a3 & 1;
    *v8 = *a3 & 0xFFFFFFFFFFFFFFFELL | v19 & 1;
    v8[1] = a3[1];
    *a3 = 0;
    a3[1] = (uint64_t)&str_110;
    v20 = (_QWORD *)(v7 + 40 * v4);
    v20[2] = 0;
    v20[3] = 0;
    v20[4] = 0;
    v20[2] = a3[2];
    a3[2] = 0;
    v20[3] = a3[3];
    a3[3] = 0;
    v21 = v20[4];
    v20[4] = a3[4];
    a3[4] = v21;
  }
  else
  {
    v9 = v7 + 40 * v4;
    *v8 = *(_QWORD *)(v9 - 40);
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    v10 = *(_OWORD *)(v9 - 32);
    *(_QWORD *)(v9 - 40) = 0;
    *(_QWORD *)(v9 - 32) = &str_110;
    *(_OWORD *)(v8 + 1) = v10;
    v11 = *(_QWORD *)(v9 - 16);
    v12 = *(_QWORD *)(v9 - 8);
    *(_QWORD *)(v9 - 16) = 0;
    *(_QWORD *)(v9 - 8) = 0;
    *(_QWORD *)(v9 - 24) = 0;
    *(_QWORD *)(v9 + 24) = v11;
    *(_QWORD *)(v9 + 32) = v12;
    v13 = 5 * a2;
    std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DeformationDefinition *,re::DeformationDefinition *,re::DeformationDefinition *>((uint64_t)v22, v6[4] + 8 * v13, v6[4] + 40 * v6[2] - 40, v6[4] + 40 * v6[2]);
    v14 = (_QWORD *)(v6[4] + 8 * v13);
    v15 = *a3;
    v16 = a3[1];
    *a3 = 0;
    a3[1] = (uint64_t)&str_110;
    v17 = v14[1];
    v18 = v15 & 0xFFFFFFFFFFFFFFFELL | *v14 & 1;
    v14[1] = v16;
    *(_QWORD *)&v22[0] = v18;
    *((_QWORD *)&v22[0] + 1) = v17;
    *v14 = v15;
    re::StringID::destroyString((re::StringID *)v22);
    this = re::FixedArray<float>::operator=(v14 + 2, a3 + 2);
  }
  ++v6[2];
  ++*((_DWORD *)v6 + 6);
  return this;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::DeformationDefinition *,re::DeformationDefinition *,re::DeformationDefinition *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      v9 = a4 + v7;
      v10 = *(_QWORD *)(a3 + v7 - 40);
      v11 = *(_QWORD *)(a3 + v7 - 32);
      *(_QWORD *)(v8 - 40) = 0;
      *(_QWORD *)(v8 - 32) = &str_110;
      v12 = *(_QWORD *)(a4 + v7 - 40);
      v13 = *(_QWORD *)(a4 + v7 - 32);
      *(_QWORD *)(v9 - 40) = v10;
      *(_QWORD *)(v9 - 32) = v11;
      v15[0] = v10 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
      v15[1] = v13;
      re::StringID::destroyString((re::StringID *)v15);
      re::FixedArray<float>::operator=((uint64_t *)(a4 + v7 - 24), (uint64_t *)(a3 + v7 - 24));
      v7 -= 40;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t re::cloneCollisionShapeData(uint64_t this, re::CollisionShapeData *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;

  if (this)
  {
    v2 = this;
    this = 0;
    switch(*(_DWORD *)(v2 + 8))
    {
      case 1:
        v3 = re::globalAllocators(0);
        this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 16, 8);
        *(_DWORD *)(this + 8) = 1;
        *(_QWORD *)this = &off_24ED3BE98;
        break;
      case 2:
        v4 = re::globalAllocators(0);
        this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 16, 8);
        *(_DWORD *)(this + 8) = 2;
        *(_QWORD *)this = &off_24ED3BF40;
        *(_DWORD *)(this + 12) = *(_DWORD *)(v2 + 12);
        break;
      case 3:
        v5 = re::globalAllocators(0);
        this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 32))(v5[2], 32, 16);
        *(_DWORD *)(this + 8) = 3;
        *(_QWORD *)this = &off_24ED3BD18;
        *(_OWORD *)(this + 16) = 0u;
        *(_OWORD *)(this + 16) = *(_OWORD *)(v2 + 16);
        break;
      case 4:
        v6 = re::globalAllocators(0);
        this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6[2] + 32))(v6[2], 24, 8);
        *(_DWORD *)(this + 8) = 4;
        *(_QWORD *)this = &off_24ED3BD80;
        *(_QWORD *)(this + 12) = *(_QWORD *)(v2 + 12);
        break;
      case 6:
        v7 = re::globalAllocators(0);
        this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 48, 16);
        *(_DWORD *)(this + 8) = 6;
        *(_QWORD *)this = &off_24ED3BED0;
        *(_OWORD *)(this + 16) = 0u;
        *(_OWORD *)(this + 16) = *(_OWORD *)(v2 + 16);
        *(_DWORD *)(this + 32) = *(_DWORD *)(v2 + 32);
        break;
      case 7:
        this = v2;
        break;
      default:
        return this;
    }
  }
  return this;
}

re *re::convertCompoundToCollisionShape(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v7;
  re::CollisionShapeData *v8;
  re::CollisionShape **v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  _anonymous_namespace_ *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  re *v23;
  re *v24;
  unint64_t v25;
  re *v26;
  re *v27;
  uint64_t *v28;
  re **v29;
  _anonymous_namespace_ *v30;
  _anonymous_namespace_ *v31;
  const char *v32;
  uint64_t v33;
  re::CollisionShapeAsset *v34;
  uint64_t *v35;
  uint64_t v36;
  _anonymous_namespace_ *v37;
  re::AssetPath *v38;
  uint64_t v39;
  __int128 v40;
  __n128 v41;
  __n128 v42;
  uint64_t v44;
  uint64_t *v45;
  re *v46;
  uint64_t v48[3];
  uint64_t v49;
  char v50;
  _BYTE v51[23];
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  re *v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[40];
  int v59;
  const char *v60;
  __int16 v61;
  int v62;
  __int16 v63;
  unint64_t v64;
  __int16 v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v55 = 0;
  v56 = 0;
  if (!a1)
    return 0;
  v4 = a4;
  v5 = a2;
  v46 = (re *)re::BucketArray<re::USDImportContext::NodeStackItem,32ul>::operator[](a2 + 624, a4);
  v7 = re::globalAllocators(v46);
  v9 = (re::CollisionShape **)v7[2];
  if (*(_DWORD *)(a1 + 8) == 7)
  {
    v10 = re::globalAllocators((re *)v7);
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10[2] + 32))(v10[2], 72, 8);
    *(_DWORD *)(v11 + 8) = 7;
    *(_QWORD *)v11 = &off_24ED3BDB8;
    *(_QWORD *)(v11 + 24) = 0;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 56) = 0;
    *(_QWORD *)(v11 + 64) = 0;
    *(_QWORD *)(v11 + 48) = 0;
    v12 = *(_QWORD *)(a1 + 24);
    v53 = 0;
    v54 = 0;
    v52 = 0;
    v44 = (uint64_t)v9;
    re::FixedArray<unsigned long>::init<>(&v52, (uint64_t)v9, v12);
    v14 = *(_QWORD *)(a1 + 24);
    if (v14)
    {
      v15 = 0;
      v16 = 0;
      v17 = *(uint64_t **)(a1 + 32);
      v45 = &v17[6 * v14];
      do
      {
        v18 = *v17;
        v19 = *(_OWORD *)(v17 + 3);
        *(_OWORD *)v58 = *(_OWORD *)(v17 + 1);
        *(_OWORD *)&v58[16] = v19;
        *(_QWORD *)&v58[32] = v17[5];
        v20 = v5;
        v21 = v5;
        v22 = v4;
        v23 = (re *)re::convertCompoundToCollisionShape(v18, v21, a3, v4);
        v25 = v53;
        if (v53 <= v16)
        {
          v49 = 0;
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          v67 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v59 = 136315906;
          v60 = "operator[]";
          v61 = 1024;
          v62 = 468;
          v63 = 2048;
          v64 = v16;
          v65 = 2048;
          v66 = v25;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_25:
          v57 = 0;
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          v67 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v59 = 136315906;
          v60 = "operator[]";
          v61 = 1024;
          v62 = 468;
          v63 = 2048;
          v64 = v16;
          v65 = 2048;
          v66 = v25;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_26:
          v57 = 0;
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          v67 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v59 = 136315906;
          v60 = "operator[]";
          v61 = 1024;
          v62 = 468;
          v63 = 2048;
          v64 = v16;
          v65 = 2048;
          v66 = v25;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v26 = v23;
        v27 = v24;
        *(_QWORD *)(v54 + 8 * v16) = v24;
        v28 = re::globalAllocators(v23);
        v29 = (re **)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28[2] + 32))(v28[2], 16, 8);
        *v29 = v26;
        v29[1] = v27;
        v30 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"%s_primitive", (re::DynamicString *)&v49, *((_QWORD *)v46 + 2));
        v31 = *(_anonymous_namespace_ **)(a3 + 104);
        if ((v50 & 1) != 0)
          v32 = *(const char **)&v51[7];
        else
          v32 = v51;
        *(_QWORD *)&v67 = 0;
        *((_QWORD *)&v67 + 1) = &str_110;
        v33 = *((_QWORD *)&v67 + 1);
        v34 = (re::CollisionShapeAsset *)strlen(*((const char **)&v67 + 1));
        v35 = re::CollisionShapeAsset::assetType(v34);
        v36 = re::ImportAssetTable::addAsset(v31, v33, (uint64_t)v34, v29, (re **)v35);
        re::StringID::destroyString((re::StringID *)&v67);
        memset(v48, 0, sizeof(v48));
        if ((*(_BYTE *)(v36 + 8) & 1) != 0)
          v38 = *(re::AssetPath **)(v36 + 16);
        else
          v38 = (re::AssetPath *)(v36 + 9);
        v25 = *(_QWORD *)(v11 + 24);
        if (v25 <= v16)
          goto LABEL_25;
        re::AssetHandle::operator=((uint64_t *)(*(_QWORD *)(v11 + 32) + v15 + 48), v48);
        v25 = *(_QWORD *)(v11 + 24);
        if (v25 <= v16)
          goto LABEL_26;
        v39 = *(_QWORD *)(v11 + 32) + v15;
        v40 = *(_OWORD *)&v58[24];
        *(_OWORD *)(v39 + 16) = *(_OWORD *)&v58[8];
        *(_OWORD *)(v39 + 32) = v40;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)v48);
        if (v49 && (v50 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v49 + 40))();
        v15 += 80;
        v17 += 6;
        ++v16;
        v4 = v22;
        v5 = v20;
      }
      while (v17 != v45);
    }
    *(_BYTE *)(v11 + 40) = 1;
    re::convertToCompoundPrimitiveCollisionShape(v11, (uint64_t)&v52, v44, v44);
    if (v52 && v53)
      (*(void (**)(void))(*(_QWORD *)v52 + 40))();
  }
  else
  {
    v55 = (re *)re::cloneCollisionShapeData(a1, v8);
    re::convertFromSerializable(v55, (const re::CollisionShapeData *)&v56, v9, (re::Allocator *)v9, (re::Allocator *)1, v41, v42);
    return v55;
  }
  return (re *)v11;
}

uint64_t re::convertToCompoundPrimitiveCollisionShape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  unint64_t v33;
  __int16 v34;
  unint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 24);
  v24 = 0;
  v25 = 0;
  v26 = 0;
  re::FixedArray<unsigned long>::init<>(&v24, a4, v8);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  re::FixedArray<re::Pose<float>>::init<>(&v21, a4, v8);
  if (v8)
  {
    v9 = 0;
    v10 = 0;
    v11 = &v36;
    v12 = v25;
    v13 = v22;
    v14 = 16;
    do
    {
      v15 = *(_QWORD *)(a2 + 8);
      if (v15 <= v10)
      {
        v27 = 0;
        v39 = 0u;
        v40 = 0u;
        v38 = 0u;
        v36 = 0u;
        v37 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v28 = 136315906;
        v29 = "operator[]";
        v30 = 1024;
        v31 = 476;
        v32 = 2048;
        v33 = v10;
        v34 = 2048;
        v35 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_16:
        v27 = 0;
        v11[3] = 0u;
        v11[4] = 0u;
        v11[2] = 0u;
        v36 = 0u;
        v37 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v28 = 136315906;
        v29 = "operator[]";
        v30 = 1024;
        v31 = 468;
        v32 = 2048;
        v33 = v12;
        v34 = 2048;
        v35 = v12;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_17:
        v27 = 0;
        v11[3] = 0u;
        v11[4] = 0u;
        v11[2] = 0u;
        v36 = 0u;
        v37 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v28 = 136315906;
        v29 = "operator[]";
        v30 = 1024;
        v31 = 476;
        v32 = 2048;
        v33 = v10;
        v34 = 2048;
        v35 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_18:
        v27 = 0;
        v11[3] = 0u;
        v11[4] = 0u;
        v11[2] = 0u;
        v36 = 0u;
        v37 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v28 = 136315906;
        v29 = "operator[]";
        v30 = 1024;
        v31 = 468;
        v32 = 2048;
        v33 = v13;
        v34 = 2048;
        v35 = v13;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (v12 == v10)
        goto LABEL_16;
      *(_QWORD *)(v26 + 8 * v10) = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v10);
      v15 = *(_QWORD *)(a1 + 24);
      if (v15 <= v10)
        goto LABEL_17;
      if (v13 == v10)
        goto LABEL_18;
      v16 = (_OWORD *)(*(_QWORD *)(a1 + 32) + v14);
      v17 = (_OWORD *)(v23 + v9);
      v18 = v16[1];
      *v17 = *v16;
      v17[1] = v18;
      ++v10;
      v14 += 80;
      v9 += 32;
    }
    while (v8 != v10);
  }
  if (v21 && v22)
    (*(void (**)(void))(*(_QWORD *)v21 + 40))();
  if (v24 && v25)
    (*(void (**)(void))(*(_QWORD *)v24 + 40))();
  return v19;
}

unint64_t re::ecs2::EntityAssetData::addComponent<re::ecs2::RigidBodyComponent>(_DWORD *a1)
{
  _anonymous_namespace_ *v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __n128 v8;
  char v9;
  unint64_t v10;

  v1 = (_anonymous_namespace_ *)(a1 + 8);
  if (!*((_QWORD *)a1 + 4))
  {
    re::DynamicArray<re::internal::AnimationCompositionChainEntry>::setCapacity(v1, 0);
    ++a1[14];
  }
  v3 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                             + 7)
                                                          + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 400, 0);
  re::make::shared::inplace<re::ecs2::RigidBodyComponent>(v3, &v10);
  v4 = v10;
  v5 = *(_QWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v10 + 40))(v10) + 24) >> 1;
  v6 = v10;
  v10 = 0;
  v8.n128_u64[0] = v5;
  v8.n128_u64[1] = v6;
  v9 = 1;
  re::DynamicArray<re::ecs2::ComponentHandleAssetData>::add(v1, &v8);
  if (v10)

  return v4;
}

id re::make::shared::inplace<re::ecs2::ColliderComponent>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  id *v4;
  uint64_t v5;
  id result;

  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  v4 = (id *)(a1 + 160);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v5 + 16) = 0;
  *(_BYTE *)(v5 + 24) = 0;
  *(_QWORD *)v5 = &off_24ED43658;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_BYTE *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 60) = 0x100000000;
  *(_DWORD *)(v5 + 68) = -1;
  *(_QWORD *)(v5 + 152) = 0;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_QWORD *)(v5 + 120) = 0;
  result = objc_initWeak(v4, 0);
  *a2 = a1;
  return result;
}

void re::ecs2::ColliderComponent::~ColliderComponent(re::ecs2::ColliderComponent *this)
{
  *(_QWORD *)this = &off_24ED43658;
  objc_destroyWeak((id *)this + 20);
  *((_QWORD *)this + 20) = 0;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)this + 15);
  re::AssetHandle::~AssetHandle((re::ecs2::ColliderComponent *)((char *)this + 72));
  re::AssetHandle::~AssetHandle((re::ecs2::ColliderComponent *)((char *)this + 32));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED43658;
  objc_destroyWeak((id *)this + 20);
  *((_QWORD *)this + 20) = 0;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)this + 15);
  re::AssetHandle::~AssetHandle((re::ecs2::ColliderComponent *)((char *)this + 72));
  re::AssetHandle::~AssetHandle((re::ecs2::ColliderComponent *)((char *)this + 32));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::ColliderComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

id re::make::shared::inplace<re::ecs2::RigidBodyComponent>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  id result;

  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v4 + 16) = 0;
  *(_WORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = &off_24ED43F98;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0x3F80000000000000;
  *(int32x4_t *)(v4 + 64) = vdupq_n_s32(0x3DCCCCCDu);
  *(_DWORD *)(v4 + 80) = 1065353216;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 96) = 0;
  *(_DWORD *)(v4 + 120) = 2;
  *(_QWORD *)(v4 + 124) = 0;
  *(_BYTE *)(v4 + 132) = 0;
  *(_QWORD *)(v4 + 136) = 0;
  *(_DWORD *)(v4 + 144) = 16842752;
  *(_QWORD *)(v4 + 148) = 0xBD4CCCCDBCA3D70ALL;
  *(_BYTE *)(v4 + 156) = 1;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 0;
  result = objc_initWeak((id *)(v4 + 280), 0);
  *(_DWORD *)(a1 + 288) = 2;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0x3F80000000000000;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *a2 = a1;
  return result;
}

void re::ecs2::RigidBodyComponent::~RigidBodyComponent(re::ecs2::RigidBodyComponent *this)
{
  *(_QWORD *)this = &off_24ED43F98;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)this + 44);
  objc_destroyWeak((id *)this + 35);
  *((_QWORD *)this + 35) = 0;
  re::AssetHandle::~AssetHandle((re::ecs2::RigidBodyComponent *)((char *)this + 248));
  re::AssetHandle::~AssetHandle((re::ecs2::RigidBodyComponent *)((char *)this + 224));
  re::AssetHandle::~AssetHandle((re::ecs2::RigidBodyComponent *)((char *)this + 96));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED43F98;
  std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100]((uint64_t *)this + 44);
  objc_destroyWeak((id *)this + 35);
  *((_QWORD *)this + 35) = 0;
  re::AssetHandle::~AssetHandle((re::ecs2::RigidBodyComponent *)((char *)this + 248));
  re::AssetHandle::~AssetHandle((re::ecs2::RigidBodyComponent *)((char *)this + 224));
  re::AssetHandle::~AssetHandle((re::ecs2::RigidBodyComponent *)((char *)this + 96));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::RigidBodyComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::ecs2::GroundPlaneComponent::~GroundPlaneComponent(re::ecs2::GroundPlaneComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::GroundPlaneComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::GroundPlaneComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::GroundPlaneComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::GroundPlaneComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::GroundPlaneComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::ecs2::PhysicsOriginComponent::~PhysicsOriginComponent(re::ecs2::PhysicsOriginComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PhysicsOriginComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PhysicsOriginComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PhysicsOriginComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::PhysicsOriginComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::PhysicsOriginComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

double re::HashTable<re::StringID,re::Pair<re::StringID,re::StringID,true>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  uint64_t v8;
  re::StringID *v9;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          v8 = v6 + v4;
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          v9 = (re::StringID *)(v6 + v4 + 40);
          re::StringID::destroyString((re::StringID *)(v6 + v4 + 8));
          re::StringID::destroyString(v9);
          re::StringID::destroyString((re::StringID *)(v8 + 24));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 56;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

_QWORD *re::BucketArray<re::ImportAssetTable::ImportedAsset,32ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 1536, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::ImportAssetTable::ImportedAsset,32ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

re::DynamicString *re::HashTable<re::DynamicString,re::ImportAssetTable::ImportedAsset *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const re::DynamicString *a4, _QWORD *a5)
{
  uint64_t v10;
  int v11;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  signed int v26;
  re::DynamicString *result;
  _BYTE v28[44];

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v10 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v28, v14, v13);
          v16 = *(_OWORD *)v28;
          *(_OWORD *)v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v28[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v28[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_OWORD *)&v28[24];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = DWORD2(v19);
          if (DWORD2(v19))
          {
            v22 = 0;
            v23 = v18 + 48;
            do
            {
              if ((*(_DWORD *)(v23 - 40) & 0x80000000) != 0)
                re::HashTable<re::DynamicString,re::ImportAssetTable::ImportedAsset *,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(_QWORD *)(v23 - 48) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v23 - 48), v23 - 32, v23);
              ++v22;
              v23 += 56;
            }
            while (v22 < v21);
          }
          re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v28, *(double *)&v19);
        }
      }
      else
      {
        if (v13)
          v26 = 2 * v12;
        else
          v26 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(_DWORD *)(v24 + 56 * v10 + 8);
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(_DWORD *)(v24 + 56 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v25 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v24 + 56 * v10 + 8) = v25 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10) = a3;
  result = re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 16), a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 48) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64_t re::BucketArray<re::ImportAssetTable::ImportedAsset,32ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 5)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 5)) + 48 * (a2 & 0x1F);
}

void re::ImportAssetTable::~ImportAssetTable(re::ImportAssetTable *this)
{
  double v2;

  re::DynamicArray<re::MeshAssetData>::deinit((uint64_t)this + 104);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)this + 7, v2);
  re::BucketArray<re::ImportAssetTable::ImportedAsset,32ul>::deinit((uint64_t)this);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)this);
}

uint64_t re::DynamicArray<re::MeshAssetData>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 160 * v4;
        v6 = v3 + 80;
        do
        {
          v7 = *(_QWORD *)(v6 + 40);
          if (v7)
          {
            if (*(_QWORD *)(v6 + 72))
              (*(void (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
            *(_QWORD *)(v6 + 72) = 0;
            *(_QWORD *)(v6 + 48) = 0;
            *(_QWORD *)(v6 + 56) = 0;
            *(_QWORD *)(v6 + 40) = 0;
            ++*(_DWORD *)(v6 + 64);
          }
          re::DynamicArray<re::MeshAssetSkeleton>::deinit(v6);
          re::DynamicArray<re::MeshAssetInstance>::deinit(v6 - 40);
          re::DynamicArray<re::MeshAssetModel>::deinit(v6 - 80);
          v6 += 160;
          v5 -= 160;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::BucketArray<re::ImportAssetTable::ImportedAsset,32ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  _QWORD *v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (_QWORD *)re::BucketArray<re::ImportAssetTable::ImportedAsset,32ul>::operator[](a1, i);
      if (*v4)
      {
        if ((v4[1] & 1) != 0)
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[2]);
        *(_OWORD *)v4 = 0u;
        *((_OWORD *)v4 + 1) = 0u;
      }
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

double re::HashTable<re::DynamicString,re::USKTextureProvider,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2];
        v7 = v6 + v4;
        v8 = *(_DWORD *)(v6 + v4 + 8);
        if (v8 < 0)
        {
          *(_DWORD *)(v7 + 8) = v8 & 0x7FFFFFFF;
          v11 = *(_QWORD *)(v7 + 16);
          v10 = (_OWORD *)(v7 + 16);
          v9 = v11;
          if (v11)
          {
            if ((*(_BYTE *)(v6 + v4 + 24) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, *(_QWORD *)(v6 + v4 + 32));
            *v10 = 0u;
            v10[1] = 0u;
          }
          (**(void (***)(uint64_t))(v6 + v4 + 48))(v6 + v4 + 48);
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 288;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::DynamicString&>(uint64_t a1, re::DynamicString *a2, int a3, const re::DynamicString *a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v8 = re::Hash<re::DynamicString>::operator()((uint64_t)&v20, (uint64_t)a2);
  v9 = v8;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v10) = 0;
    goto LABEL_8;
  }
  v10 = v8 % *(unsigned int *)(a1 + 24);
  v11 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v10);
  if ((_DWORD)v11 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<re::DynamicString&>(a1, v10, v9, a2, a4);
    ++*(_DWORD *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 16) + 80 * v13;
    return v14 + 48;
  }
  v12 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v12 + 80 * v11 + 16, (uint64_t)a2))
  {
    v11 = *(_DWORD *)(v12 + 80 * v11 + 8) & 0x7FFFFFFF;
    if (v11 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  switch(a3)
  {
    case 0:
    case 1:
      v14 = v12 + 80 * v11;
      break;
    case 2:
    case 3:
      v16 = v12 + 80 * v11;
      v19 = *(_QWORD *)(v16 + 48);
      v18 = v16 + 48;
      v17 = v19;
      if (v19)
      {
        if ((*(_BYTE *)(v18 + 8) & 1) != 0)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 40))(v17, *(_QWORD *)(v18 + 16));
        *(_OWORD *)v18 = 0u;
        *(_OWORD *)(v18 + 16) = 0u;
        v12 = *(_QWORD *)(a1 + 16);
      }
      re::DynamicString::DynamicString((re::DynamicString *)(v12 + 80 * v11 + 48), a4);
      ++*(_DWORD *)(a1 + 40);
      v14 = *(_QWORD *)(a1 + 16) + 80 * v11;
      break;
    default:
      goto LABEL_8;
  }
  return v14 + 48;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[5]>(uint64_t a1, re::DynamicString *a2, int a3, const char *a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;
  _anonymous_namespace_ *v17;
  uint64_t v18;
  _anonymous_namespace_ *v19;
  char v20;

  v8 = re::Hash<re::DynamicString>::operator()((uint64_t)&v20, (uint64_t)a2);
  v9 = v8;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v10) = 0;
    goto LABEL_8;
  }
  v10 = v8 % *(unsigned int *)(a1 + 24);
  v11 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v10);
  if ((_DWORD)v11 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<char const(&)[5]>(a1, v10, v9, a2, a4);
    ++*(_DWORD *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 16) + 80 * v13;
    return v14 + 48;
  }
  v12 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v12 + 80 * v11 + 16, (uint64_t)a2))
  {
    v11 = *(_DWORD *)(v12 + 80 * v11 + 8) & 0x7FFFFFFF;
    if (v11 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  switch(a3)
  {
    case 0:
    case 1:
      v14 = v12 + 80 * v11;
      break;
    case 2:
    case 3:
      v16 = v12 + 80 * v11;
      v19 = *(_anonymous_namespace_ **)(v16 + 48);
      v18 = v16 + 48;
      v17 = v19;
      if (v19)
      {
        if ((*(_BYTE *)(v18 + 8) & 1) != 0)
          v17 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, _QWORD))(*(_QWORD *)v17 + 40))(v17, *(_QWORD *)(v18 + 16));
        *(_OWORD *)v18 = 0u;
        *(_OWORD *)(v18 + 16) = 0u;
        v12 = *(_QWORD *)(a1 + 16);
      }
      ++*(_DWORD *)(a1 + 40);
      v14 = *(_QWORD *)(a1 + 16) + 80 * v11;
      break;
    default:
      goto LABEL_8;
  }
  return v14 + 48;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<char const(&)[5]>(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, const char *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  _anonymous_namespace_ *v14;
  re::DynamicString *v15;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 80 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 80 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 80 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v10) = a3;
  v14 = re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 80 * v10 + 16), a4);
  v15 = (re::DynamicString *)(*(_QWORD *)(a1 + 16) + 80 * v10 + 48);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<char const(&)[6]>(uint64_t a1, re::DynamicString *a2, int a3, const char *a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;
  _anonymous_namespace_ *v17;
  uint64_t v18;
  _anonymous_namespace_ *v19;
  char v20;

  v8 = re::Hash<re::DynamicString>::operator()((uint64_t)&v20, (uint64_t)a2);
  v9 = v8;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v10) = 0;
    goto LABEL_8;
  }
  v10 = v8 % *(unsigned int *)(a1 + 24);
  v11 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v10);
  if ((_DWORD)v11 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<char const(&)[5]>(a1, v10, v9, a2, a4);
    ++*(_DWORD *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 16) + 80 * v13;
    return v14 + 48;
  }
  v12 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v12 + 80 * v11 + 16, (uint64_t)a2))
  {
    v11 = *(_DWORD *)(v12 + 80 * v11 + 8) & 0x7FFFFFFF;
    if (v11 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  switch(a3)
  {
    case 0:
    case 1:
      v14 = v12 + 80 * v11;
      break;
    case 2:
    case 3:
      v16 = v12 + 80 * v11;
      v19 = *(_anonymous_namespace_ **)(v16 + 48);
      v18 = v16 + 48;
      v17 = v19;
      if (v19)
      {
        if ((*(_BYTE *)(v18 + 8) & 1) != 0)
          v17 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, _QWORD))(*(_QWORD *)v17 + 40))(v17, *(_QWORD *)(v18 + 16));
        *(_OWORD *)v18 = 0u;
        *(_OWORD *)(v18 + 16) = 0u;
        v12 = *(_QWORD *)(a1 + 16);
      }
      ++*(_DWORD *)(a1 + 40);
      v14 = *(_QWORD *)(a1 + 16) + 80 * v11;
      break;
    default:
      goto LABEL_8;
  }
  return v14 + 48;
}

double re::HashTable<re::ImportMaterialSignature,re::MaterialInfo,re::Hash<re::ImportMaterialSignature>,re::EqualTo<re::ImportMaterialSignature>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::ImportMaterialSignature,re::MaterialInfo,re::Hash<re::ImportMaterialSignature>,re::EqualTo<re::ImportMaterialSignature>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 72;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::ImportMaterialSignature,re::MaterialInfo,re::Hash<re::ImportMaterialSignature>,re::EqualTo<re::ImportMaterialSignature>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1;
  uint64_t v3;
  _OWORD *v4;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    v4 = (_OWORD *)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 24);
    *((_DWORD *)v4 - 4) = v1 & 0x7FFFFFFF;
    if (v3)
    {
      if ((*(_BYTE *)(a1 + 32) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 40));
      *v4 = 0u;
      v4[1] = 0u;
    }

  }
}

uint64_t re::HashTable<re::ImportMaterialSignature,re::MaterialInfoUSK,re::Hash<re::ImportMaterialSignature>,re::EqualTo<re::ImportMaterialSignature>,true,false>::addEmplace<re::MaterialInfoUSK&>(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ImportMaterialSignature,re::MaterialInfoUSK,re::Hash<re::ImportMaterialSignature>,re::EqualTo<re::ImportMaterialSignature>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 72 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10) = a3;
  v14 = *(_QWORD *)(a1 + 16) + 72 * v10;
  *(_BYTE *)(v14 + 16) = *(_BYTE *)a4;
  re::DynamicString::DynamicString((re::DynamicString *)(v14 + 24), (re::DynamicString *)((char *)a4 + 8));
  v15 = *(_QWORD *)(a1 + 16) + 72 * v10;
  *(_QWORD *)(v15 + 56) = *(id *)a5;
  v16 = *(_DWORD *)(a5 + 8);
  *(_BYTE *)(v15 + 68) = *(_BYTE *)(a5 + 12);
  *(_DWORD *)(v15 + 64) = v16;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

unint64_t re::Hash<re::ImportMaterialSignature>::operator()(uint64_t a1, char *a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v10 = *a2;
  v3 = *((_QWORD *)a2 + 2);
  if ((v3 & 1) != 0)
    v4 = v3 >> 1;
  else
    v4 = v3 >> 1;
  if (v4)
  {
    v5 = (uint64_t)(a2 + 17);
    v6 = *((_QWORD *)a2 + 3);
    if ((v3 & 1) != 0)
      v7 = v6;
    else
      v7 = v5;
    MurmurHash3_x64_128(v7, v4, 0, &v11);
    v8 = (v12 - 0x61C8864680B583E9 + (v11 << 6) + (v11 >> 2)) ^ v11;
  }
  else
  {
    v8 = 0;
  }
  MurmurHash3_x64_128((uint64_t)&v10, 1, 0, &v11);
  return ((v8 << 6) - 0x61C8864680B583E9 + (v8 >> 2) + ((v12 - 0x61C8864680B583E9 + (v11 << 6) + (v11 >> 2)) ^ v11)) ^ v8;
}

void re::HashTable<re::ImportMaterialSignature,re::MaterialInfoUSK,re::Hash<re::ImportMaterialSignature>,re::EqualTo<re::ImportMaterialSignature>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::ImportMaterialSignature,re::MaterialInfoUSK,re::Hash<re::ImportMaterialSignature>,re::EqualTo<re::ImportMaterialSignature>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (re::DynamicString *)(*(_QWORD *)&v13[16] + v10 + 16), (uint64_t *)(*(_QWORD *)&v13[16] + v10 + 56));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 72;
        }
        while (v11 < v9);
      }
      re::HashTable<re::ImportMaterialSignature,re::MaterialInfo,re::Hash<re::ImportMaterialSignature>,re::EqualTo<re::ImportMaterialSignature>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<re::ImportMaterialSignature,re::MaterialInfoUSK,re::Hash<re::ImportMaterialSignature>,re::EqualTo<re::ImportMaterialSignature>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ImportMaterialSignature,re::MaterialInfoUSK,re::Hash<re::ImportMaterialSignature>,re::EqualTo<re::ImportMaterialSignature>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 72 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10) = a3;
  v14 = *(_QWORD *)(a1 + 16) + 72 * v10;
  *(_BYTE *)(v14 + 16) = *(_BYTE *)a4;
  re::DynamicString::DynamicString((re::DynamicString *)(v14 + 24), (re::DynamicString *)((char *)a4 + 8));
  v15 = *(_QWORD *)(a1 + 16) + 72 * v10;
  v16 = *a5;
  *a5 = 0;
  *(_QWORD *)(v15 + 56) = v16;
  LODWORD(v16) = *((_DWORD *)a5 + 2);
  *(_BYTE *)(v15 + 68) = *((_BYTE *)a5 + 12);
  *(_DWORD *)(v15 + 64) = v16;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::Result<re::GeomModelDescriptor,re::DetailedError>::~Result(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;

  if (*(_BYTE *)a1)
  {
    v3 = (_OWORD *)(a1 + 192);
    v2 = *(_QWORD *)(a1 + 192);
    if (v2)
    {
      if ((*(_BYTE *)(a1 + 200) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 208));
      *v3 = 0u;
      *(_OWORD *)(a1 + 208) = 0u;
    }
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 144));
    re::DynamicArray<re::GeomModelDescriptor::AttributeData>::deinit(a1 + 104);
    re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 56), v4);
    v5 = *(_QWORD *)(a1 + 48);
    if (v5)
    {

      *(_QWORD *)(a1 + 48) = 0;
    }
    v6 = *(_QWORD *)(a1 + 40);
    if (v6)
    {

      *(_QWORD *)(a1 + 40) = 0;
    }
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
    {

      *(_QWORD *)(a1 + 16) = 0;
    }
  }
  else
  {
    v9 = (_OWORD *)(a1 + 24);
    v8 = *(_QWORD *)(a1 + 24);
    if (v8)
    {
      if ((*(_BYTE *)(a1 + 32) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(a1 + 40));
      *v9 = 0u;
      *(_OWORD *)(a1 + 40) = 0u;
    }
  }
  return a1;
}

uint64_t re::DynamicArray<re::GeomModelDescriptor>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = v3 + 136;
        v6 = 216 * v4;
        do
        {
          v7 = *(_QWORD *)(v5 + 48);
          if (v7)
          {
            if ((*(_BYTE *)(v5 + 56) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(_QWORD *)(v5 + 64));
            *(_OWORD *)(v5 + 48) = 0u;
            *(_OWORD *)(v5 + 64) = 0u;
          }
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v5);
          re::DynamicArray<re::GeomModelDescriptor::AttributeData>::deinit(v5 - 40);
          re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v5 - 88), v8);
          v9 = *(_QWORD *)(v5 - 96);
          if (v9)
          {

            *(_QWORD *)(v5 - 96) = 0;
          }
          v10 = *(_QWORD *)(v5 - 104);
          if (v10)
          {

            *(_QWORD *)(v5 - 104) = 0;
          }
          v11 = *(_QWORD *)(v5 - 128);
          if (v11)
          {

            *(_QWORD *)(v5 - 128) = 0;
          }
          v5 += 216;
          v6 -= 216;
        }
        while (v6);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::DynamicArray<re::GeomModelDescriptor>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::GeomModelDescriptor>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xD8uLL))
        {
          v2 = 216 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 216 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_26;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 216, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_26:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 216 * v9;
        do
        {
          v12 = v8 + v10;
          re::GeomModelDescriptor::GeomModelDescriptor((uint64_t)&v7[v10 / 8], v8 + v10);
          v13 = *(_QWORD *)(v8 + v10 + 184);
          if (v13)
          {
            if ((*(_BYTE *)(v12 + 192) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 40))(v13, *(_QWORD *)(v8 + v10 + 200));
            *(_OWORD *)(v8 + v10 + 184) = 0u;
            *(_OWORD *)(v12 + 200) = 0u;
          }
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v12 + 136));
          re::DynamicArray<re::GeomModelDescriptor::AttributeData>::deinit(v12 + 96);
          re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v12 + 48), v14);
          v15 = *(_QWORD *)(v12 + 40);
          if (v15)
          {

            *(_QWORD *)(v12 + 40) = 0;
          }
          v16 = v8 + v10;
          v17 = *(_QWORD *)(v8 + v10 + 32);
          if (v17)
          {

            *(_QWORD *)(v16 + 32) = 0;
          }
          v18 = *(_QWORD *)(v16 + 8);
          if (v18)
          {

            *(_QWORD *)(v16 + 8) = 0;
          }
          v10 += 216;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_26;
    }
  }
  return result;
}

void std::__shared_ptr_pointer<re::usdimport::SpatialAudioNodeData *,re::loadTransformAndMeshNodes(USKScene *,USKNode *,re::USDImportContext &,BOOL)::$_0,std::allocator<re::usdimport::SpatialAudioNodeData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2276933B8);
}

re *std::__shared_ptr_pointer<re::usdimport::SpatialAudioNodeData *,re::loadTransformAndMeshNodes(USKScene *,USKNode *,re::USDImportContext &,BOOL)::$_0,std::allocator<re::usdimport::SpatialAudioNodeData>>::__on_zero_shared(re *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)result + 3);
  if (v1)
  {
    v2 = re::globalAllocators(result)[2];
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(v1 + 48));
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<re::usdimport::SpatialAudioNodeData *,re::loadTransformAndMeshNodes(USKScene *,USKNode *,re::USDImportContext &,BOOL)::$_0,std::allocator<re::usdimport::SpatialAudioNodeData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t re::HashTable<re::DynamicString,re::DynamicArray<re::AssetHandle>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const re::DynamicString *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v31[44];

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v10 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v31, 0, 36);
          *(_QWORD *)&v31[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v31, v14, v13);
          v16 = *(_OWORD *)v31;
          *(_OWORD *)v31 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v31[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v31[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v31[24];
          *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v31[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = v18 + 48;
            do
            {
              if ((*(_DWORD *)(v22 - 40) & 0x80000000) != 0)
                re::HashTable<re::DynamicString,re::DynamicArray<re::AssetHandle>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 48) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 48), v22 - 32, v22);
              v22 += 88;
              --v21;
            }
            while (v21);
          }
          re::HashTable<re::DynamicString,re::DynamicArray<re::AssetHandle>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v31);
        }
      }
      else
      {
        if (v13)
          v25 = 2 * v12;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 88 * v10 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 88 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 88 * v10 + 8) = v24 | 0x80000000;
  v26 = 88 * v10;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v26) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + v26 + 16), a4);
  v27 = *(_QWORD *)(a1 + 16) + 88 * v10;
  *(_QWORD *)(v27 + 80) = 0;
  *(_DWORD *)(v27 + 72) = 0;
  *(_QWORD *)(v27 + 56) = 0;
  *(_QWORD *)(v27 + 64) = 0;
  *(_QWORD *)(v27 + 48) = 0;
  *(_QWORD *)(v27 + 48) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(v27 + 56) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  v28 = *(_QWORD *)(v27 + 64);
  *(_QWORD *)(v27 + 64) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v28;
  v29 = *(_QWORD *)(v27 + 80);
  *(_QWORD *)(v27 + 80) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v29;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v27 + 72);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

_QWORD *re::DynamicArray<re::ImportedScene>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ImportedScene>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xA0uLL))
        {
          v2 = 160 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 160 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_24;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 160, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_24:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 160 * v9;
        do
        {
          v12 = &v7[v10 / 8];
          v13 = v8 + v10;
          v14 = *(_OWORD *)(v8 + v10);
          *((_OWORD *)v12 + 1) = 0u;
          *((_OWORD *)v12 + 2) = 0u;
          *(_OWORD *)v12 = v14;
          v15 = (_QWORD *)(v8 + v10 + 16);
          v12[2] = *v15;
          *v15 = 0;
          v12[5] = *(_QWORD *)(v8 + v10 + 40);
          *(_QWORD *)(v13 + 40) = 0;
          v17 = v7[v10 / 8 + 3];
          v16 = v7[v10 / 8 + 4];
          v18 = *(_QWORD *)(v8 + v10 + 32);
          v12[3] = *(_QWORD *)(v8 + v10 + 24);
          v12[4] = v18;
          *(_QWORD *)(v13 + 24) = v17;
          *(_QWORD *)(v13 + 32) = v16;
          v12[6] = *(_QWORD *)(v8 + v10 + 48);
          *(_OWORD *)(v12 + 9) = 0u;
          *(_OWORD *)(v12 + 7) = 0u;
          v19 = (_QWORD *)(v8 + v10 + 56);
          v12[7] = *v19;
          *v19 = 0;
          v12[10] = *(_QWORD *)(v8 + v10 + 80);
          *(_QWORD *)(v13 + 80) = 0;
          v21 = v7[v10 / 8 + 8];
          v20 = v7[v10 / 8 + 9];
          v22 = *(_QWORD *)(v8 + v10 + 72);
          v12[8] = *(_QWORD *)(v8 + v10 + 64);
          v12[9] = v22;
          *(_QWORD *)(v13 + 64) = v21;
          *(_QWORD *)(v13 + 72) = v20;
          *((_BYTE *)v12 + 88) = *(_BYTE *)(v8 + v10 + 88);
          v12[13] = 0;
          v12[14] = 0;
          v12[12] = 0;
          v12[13] = *(_QWORD *)(v8 + v10 + 104);
          *(_QWORD *)(v13 + 104) = 0;
          v23 = v7[v10 / 8 + 12];
          v12[12] = 0;
          v12[12] = *(_QWORD *)(v8 + v10 + 96);
          *(_QWORD *)(v8 + v10 + 96) = v23;
          v24 = v7[v10 / 8 + 14];
          v12[14] = *(_QWORD *)(v8 + v10 + 112);
          *(_QWORD *)(v13 + 112) = v24;
          v12[19] = 0;
          v12[16] = 0;
          v12[17] = 0;
          v12[15] = 0;
          *((_DWORD *)v12 + 36) = 0;
          v25 = (_QWORD *)(v8 + v10 + 120);
          v26 = *(_QWORD *)(v8 + v10 + 128);
          v12[15] = *v25;
          *v25 = 0;
          v12[16] = v26;
          *(_QWORD *)(v13 + 128) = 0;
          v27 = v7[v10 / 8 + 17];
          v12[17] = *(_QWORD *)(v8 + v10 + 136);
          *(_QWORD *)(v13 + 136) = v27;
          v28 = v7[v10 / 8 + 19];
          v12[19] = *(_QWORD *)(v8 + v10 + 152);
          *(_QWORD *)(v13 + 152) = v28;
          *(_DWORD *)(v13 + 144) = *(_DWORD *)(v8 + v10 + 144) + 1;
          *((_DWORD *)v12 + 36) = LODWORD(v7[v10 / 8 + 18]) + 1;
          re::DynamicArray<re::AssetHandle>::deinit((uint64_t)v25);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v8 + v10 + 96));
          if (*v19)
          {
            if ((*(_BYTE *)(v13 + 64) & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v19 + 40))(*v19, *(_QWORD *)(v13 + 72));
            *(_OWORD *)v19 = 0u;
            *(_OWORD *)(v8 + v10 + 72) = 0u;
          }
          if (*v15)
          {
            if ((*(_BYTE *)(v13 + 24) & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v15 + 40))(*v15, *(_QWORD *)(v13 + 32));
            *(_OWORD *)v15 = 0u;
            *(_OWORD *)(v8 + v10 + 32) = 0u;
          }
          v10 += 160;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::ImportedScene>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 0;
        v6 = 160 * v4;
        do
        {
          v7 = v3 + v5;
          re::DynamicArray<re::AssetHandle>::deinit(v3 + v5 + 120);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)(v3 + v5 + 96));
          v8 = *(_QWORD *)(v3 + v5 + 56);
          if (v8)
          {
            if ((*(_BYTE *)(v7 + 64) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(v3 + v5 + 72));
            *(_OWORD *)(v3 + v5 + 56) = 0u;
            *(_OWORD *)(v7 + 72) = 0u;
          }
          v11 = *(_QWORD *)(v7 + 16);
          v10 = (_OWORD *)(v7 + 16);
          v9 = v11;
          if (v11)
          {
            if ((*(_BYTE *)(v3 + v5 + 24) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, *(_QWORD *)(v3 + v5 + 32));
            *v10 = 0u;
            v10[1] = 0u;
          }
          v5 += 160;
        }
        while (v6 != v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

re::DynamicString *re::TimelineCompiler::getCurrentCompiledAssetInfo@<X0>(re::TimelineCompiler *this@<X0>, uint64_t a2@<X8>)
{
  re::TimelineAsset *v3;
  const char *v5[2];

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v3 = (re::TimelineAsset *)re::DynamicString::setCapacity((_QWORD *)(a2 + 8), 0);
  *(_QWORD *)a2 = 0x100000001;
  v5[0] = (const char *)*re::TimelineAsset::assetType(v3);
  v5[1] = (const char *)strlen(v5[0]);
  return re::DynamicString::operator=((re::DynamicString *)(a2 + 8), (uint64_t)v5);
}

__guard re::TimelineCompiler::assetIntrospectionType(re::TimelineCompiler *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::TimelineAsset>(void)::info = re::introspect_TimelineAsset(0);
    }
  }
  return v2[65];
}

uint64_t re::TimelineCompiler::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  _QWORD v3[2];

  v3[0] = re::TimelineCompiler::getSupportedExtensions(void)const::supportedExtensions;
  v3[1] = 2;
  return re::DynamicArray<char const*>::DynamicArray(a1, (uint64_t)v3);
}

re *re::TimelineCompiler::compile@<X0>(re::TimelineCompiler *this@<X0>, re::AssetUtilities *a2@<X1>, re::AssetSerializationScheme *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  re *result;
  uint64_t *v13;
  _anonymous_namespace_ *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[8];
  re *v22;
  char v23;

  v9 = re::globalAllocators(this);
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9[2] + 32))(v9[2], 24, 8);
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)v10 = 0;
  v11 = (*(uint64_t (**)(re::TimelineCompiler *))(*(_QWORD *)this + 24))(this);
  result = (re *)re::AssetUtilities::readSourceJson(a2, (const char *)v10, v11, a3, (uint64_t)v21);
  if (v21[0])
  {
    *(_BYTE *)a4 = 1;
    *(_QWORD *)(a4 + 8) = v10;
  }
  else
  {
    v13 = re::globalAllocators(result);
    v14 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13[2] + 40))(v13[2], v10);
    v15 = v18;
    v16 = v19;
    v17 = v20;
    *(_BYTE *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 100;
    *(_QWORD *)(a4 + 16) = &re::AssetErrorCategory(void)::instance;
    *(_OWORD *)(a4 + 24) = v15;
    *(_QWORD *)(a4 + 40) = v16;
    *(_QWORD *)(a4 + 48) = v17;
    if (!v21[0])
    {
      result = v22;
      if (v22)
      {
        if ((v23 & 1) != 0)
          return (re *)(*(uint64_t (**)(void))(*(_QWORD *)v22 + 40))();
      }
    }
  }
  return result;
}

re *re::TimelineCompiler::deleteAsset(re *this, void *a2)
{
  uint64_t *v3;

  if (a2)
  {
    v3 = re::globalAllocators(this);
    return (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v3[2] + 40))(v3[2], a2);
  }
  return this;
}

void re::TimelineCompiler::~TimelineCompiler(re::TimelineCompiler *this)
{
  JUMPOUT(0x2276933B8);
}

re::DynamicString *re::HMTextureCompiler::getCurrentCompiledAssetInfo@<X0>(re::HMTextureCompiler *this@<X0>, uint64_t a2@<X8>)
{
  re::TextureAsset *v3;
  const char *v5[2];

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v3 = (re::TextureAsset *)re::DynamicString::setCapacity((_QWORD *)(a2 + 8), 0);
  *(_QWORD *)a2 = 0x100000001;
  v5[0] = (const char *)*re::TextureAsset::assetType(v3);
  v5[1] = (const char *)strlen(v5[0]);
  return re::DynamicString::operator=((re::DynamicString *)(a2 + 8), (uint64_t)v5);
}

__guard re::HMTextureCompiler::assetIntrospectionType(re::HMTextureCompiler *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::TextureAsset>(void)::info = re::introspect_TextureAsset(0);
    }
  }
  return v2[449];
}

_QWORD *re::HMTextureCompiler::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, re::HMTextureCompiler::getSupportedExtensions(void)const::supportedExtensions);
}

re::DynamicString *re::HMTextureCompiler::compile@<X0>(re::HMTextureCompiler *this@<X0>, char *a2@<X1>, void *a3@<X2>, re::AssetSerializationScheme *a4@<X3>, uint64_t a5@<X8>)
{
  char *v10;
  _anonymous_namespace_ *v11;
  __int128 v12;
  uint64_t v13;
  re::DynamicString *v14;
  NSObject *v15;
  _BOOL8 v16;
  re::DynamicString *result;
  __int128 v18;
  __int128 v19;
  _anonymous_namespace_ *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t (***v27)(_QWORD, char *);
  uint64_t v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __objc2_class_ro *v33;
  __objc2_class_ro *v34;
  uint64_t v35;
  uint8_t *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint8_t buf[16];
  __int128 v44;
  uint64_t v45;
  re::DynamicString *v46;
  uint64_t *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD v51[3];
  _anonymous_namespace_ *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v48 = 0;
    v49 = 0;
    v50 = 0;
    re::DynamicString::setCapacity(&v47, 0);
    v10 = strrchr(a2, 46);
    v11 = (_anonymous_namespace_ *)strcmp(v10, ".hmtexture");
    if ((_DWORD)v11)
    {
      *((_QWORD *)&v37 + 1) = 0;
      v38 = 0uLL;
      re::DynamicString::setCapacity(&v37, 0);
      re::DynamicString::assignf((re::DynamicString *)&v37, "Unexpected file extension HMTextureCompiler cannot compile %s");
      goto LABEL_4;
    }
    v51[0] = &off_24ED44500;
    v51[1] = this;
    v52 = (_anonymous_namespace_ *)v51;
    re::pathsToFilesInDirectory((uint64_t)a2, (uint64_t)v51, (uint64_t)buf);
    v20 = v52;
    if (v52 == (_anonymous_namespace_ *)v51)
    {
      v21 = 4;
      v20 = (_anonymous_namespace_ *)v51;
    }
    else
    {
      if (!v52)
        goto LABEL_15;
      v21 = 5;
    }
    v20 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_15:
    if (buf[0])
    {
      if (*((_QWORD *)&v44 + 1))
      {
        re::DynamicString::operator=((re::DynamicString *)&v47, v46);
        re::Result<re::DynamicArray<re::DynamicString>,re::DynamicString>::~Result((uint64_t)buf);
        if ((v48 & 1) != 0)
          v22 = v49;
        else
          v22 = (char *)&v48 + 1;
        v23 = strrchr(v22, 46);
        v24 = *((_QWORD *)this + 1);
        if ((v25 & 1) == 0
        {
          re::introspect<re::AssetCompilerService>(void)::info = re::introspect_AssetCompilerService(0);
        }
        v26 = re::introspect<re::AssetCompilerService>(void)::info;
        re::StringID::invalid((re::StringID *)buf);
        v27 = (uint64_t (***)(_QWORD, char *))(*(uint64_t (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)v24 + 16))(v24, v26, buf);
        re::StringID::destroyString((re::StringID *)buf);
        if (!v27)
        {
          v33 = re::introspect<re::AssetCompilerService>();
          re::StringID::invalid((re::StringID *)&v37);
          re::internal::missingServiceErrorMessage((re::internal *)v33, (const re::IntrospectionBase *)&v37, (re::DynamicString *)buf);
          re::DynamicString::~DynamicString((re::DynamicString *)buf);
          re::StringID::~StringID((re::StringID *)&v37);
          v34 = re::introspect<re::AssetCompilerService>();
          re::StringID::invalid((re::StringID *)&v37);
          re::internal::missingServiceErrorMessage((re::internal *)v34, (const re::IntrospectionBase *)&v37, (re::DynamicString *)buf);
          if ((buf[8] & 1) != 0)
            v36 = (uint8_t *)v44;
          else
            v36 = &buf[9];
          re::internal::assertLog((re::internal *)5, v35, "assertion failure: '%s' (%s:line %i) %s", "service", "service", 69, v36);
          re::DynamicString::~DynamicString((re::DynamicString *)buf);
          re::StringID::~StringID((re::StringID *)&v37);
          _os_crash();
          __break(1u);
        }
        v28 = (**v27)(v27, v23 + 1);
        if (v28)
        {
          if ((v48 & 1) != 0)
            v29 = v49;
          else
            v29 = (char *)&v48 + 1;
          (*(void (**)(uint64_t, char *, void *, re::AssetSerializationScheme *))(*(_QWORD *)v28 + 40))(v28, v29, a3, a4);
LABEL_33:
          result = (re::DynamicString *)v47;
          if (v47)
          {
            if ((v48 & 1) != 0)
              return (re::DynamicString *)(*(uint64_t (**)(void))(*v47 + 40))();
          }
          return result;
        }
        *((_QWORD *)&v37 + 1) = 0;
        v38 = 0uLL;
        re::DynamicString::setCapacity(&v37, 0);
        re::DynamicString::assignf((re::DynamicString *)&v37, "Failed to load texture %s\nCould not find a compiler for file %s");
LABEL_4:
        *(_QWORD *)buf = 100;
        *(_QWORD *)&buf[8] = &re::AssetErrorCategory(void)::instance;
        re::DynamicString::DynamicString((re::DynamicString *)&v44, (const re::DynamicString *)&v37);
        v12 = v44;
        *(_OWORD *)(a5 + 8) = *(_OWORD *)buf;
        v13 = v45;
        v14 = v46;
        *(_BYTE *)a5 = 0;
        *(_OWORD *)(a5 + 24) = v12;
        *(_QWORD *)(a5 + 40) = v13;
        *(_QWORD *)(a5 + 48) = v14;
        if ((_QWORD)v37 && (BYTE8(v37) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v37 + 40))();
        goto LABEL_33;
      }
    }
    else
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v41, (const re::DynamicString *)&buf[8]);
    }
    *(_QWORD *)&v37 = 100;
    *((_QWORD *)&v37 + 1) = &re::AssetErrorCategory(void)::instance;
    re::DynamicString::DynamicString((re::DynamicString *)&v38, (const re::DynamicString *)&v41);
    v30 = v38;
    *(_OWORD *)(a5 + 8) = v37;
    v31 = v39;
    v32 = v40;
    *(_BYTE *)a5 = 0;
    *(_OWORD *)(a5 + 24) = v30;
    *(_QWORD *)(a5 + 40) = v31;
    *(_QWORD *)(a5 + 48) = v32;
    if (v41 && (v42 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v41 + 40))();
    re::Result<re::DynamicArray<re::DynamicString>,re::DynamicString>::~Result((uint64_t)buf);
    goto LABEL_33;
  }
  v15 = *re::pipelineLogObjects(this);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if (v16)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "TextureAssetCompiler: sourceFilePath is null.", buf, 2u);
  }
  v18 = *(_OWORD *)buf;
  v19 = v44;
  *(_BYTE *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 100;
  *(_QWORD *)(a5 + 16) = &re::AssetErrorCategory(void)::instance;
  *(_OWORD *)(a5 + 24) = v18;
  *(_OWORD *)(a5 + 40) = v19;
  return result;
}

re *re::HMTextureCompiler::deleteAsset(re *this, void (***a2)(_QWORD))
{
  uint64_t v3;

  if (a2)
  {
    v3 = re::globalAllocators(this)[2];
    (**a2)(a2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, a2);
  }
  return this;
}

re *re::HMTextureCompiler::deleteAssetCompileOptions(re *this, void *a2)
{
  uint64_t *v3;

  if (a2)
  {
    v3 = re::globalAllocators(this);
    return (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v3[2] + 40))(v3[2], a2);
  }
  return this;
}

void re::HMTextureCompiler::~HMTextureCompiler(re::HMTextureCompiler *this)
{
  JUMPOUT(0x2276933B8);
}

void std::__function::__func<re::HMTextureCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0,std::allocator<re::HMTextureCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0>,BOOL ()(char const*)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::HMTextureCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0,std::allocator<re::HMTextureCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0>,BOOL ()(char const*)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED44500;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::HMTextureCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0,std::allocator<re::HMTextureCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0>,BOOL ()(char const*)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED44500;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<re::HMTextureCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0,std::allocator<re::HMTextureCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0>,BOOL ()(char const*)>::operator()(uint64_t a1, re **a2)
{
  return re::canLoadTextureFileWithExtension(*a2, (const char *)a2);
}

uint64_t std::__function::__func<re::HMTextureCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0,std::allocator<re::HMTextureCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0>,BOOL ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::HMTextureCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0,std::allocator<re::HMTextureCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0>,BOOL ()(char const*)>::target_type()
{
}

uint64_t re::Result<re::DynamicArray<re::DynamicString>,re::DynamicString>::~Result(uint64_t a1)
{
  _OWORD *v2;

  v2 = (_OWORD *)(a1 + 8);
  if (*(_BYTE *)a1)
  {
    re::DynamicArray<re::DynamicString>::deinit(a1 + 8);
  }
  else if (*(_QWORD *)v2)
  {
    if ((*(_BYTE *)(a1 + 16) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v2 + 40))(*(_QWORD *)v2, *(_QWORD *)(a1 + 24));
    *v2 = 0u;
    v2[1] = 0u;
  }
  return a1;
}

__objc2_class_ro *re::introspect<re::AssetCompilerService>()
{
  unsigned __int8 v0;
  __objc2_class_ro **p_info;
  int v3;

  p_info = VideoSpillMapMetalSession.info;
  if ((v0 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v3)
    {
      re::introspect<re::AssetCompilerService>(void)::info = re::introspect_AssetCompilerService(0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  return p_info[430];
}

re::DynamicString *re::StateMachineCompiler::getCurrentCompiledAssetInfo@<X0>(re::StateMachineCompiler *this@<X0>, _QWORD *a2@<X8>)
{
  re::DynamicString *v2;
  _anonymous_namespace_ *v3;
  const char *v4;

  *a2 = 0x100000001;
  v2 = (re::DynamicString *)(a2 + 1);
  v3 = (_anonymous_namespace_ *)re::StateMachineAsset::assetType(this);
  v4 = *(const char **)v3;
}

__guard re::StateMachineCompiler::assetIntrospectionType(re::StateMachineCompiler *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::StateMachineAsset>(void)::info = re::introspect_StateMachineAsset(0);
    }
  }
  return v2[38];
}

uint64_t re::StateMachineCompiler::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  _QWORD v3[2];
  const char *v4;

  v4 = "restatemachine";
  v3[0] = &v4;
  v3[1] = 1;
  return re::DynamicArray<char const*>::DynamicArray(a1, (uint64_t)v3);
}

_QWORD *re::StateMachineCompiler::compile@<X0>(re::StateMachineCompiler *this@<X0>, char *a2@<X1>, re::AssetSerializationScheme *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __guard *v15;
  uint64_t v16;
  _QWORD *result;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char v27[8];
  uint64_t v28;
  char v29;
  uint64_t v30;
  _QWORD v31[3];
  _QWORD *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v8 = re::globalAllocators(this);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 104, 8);
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_QWORD *)(v9 + 96) = 0;
  v32 = v31;
  v30 = v9;
  v31[0] = &off_24ED445F8;
  v10 = strrchr(a2, 46);
  if (!strcasecmp(v10 + 1, "restatemachine"))
  {
    if ((v14 & 1) == 0)
      goto LABEL_20;
    goto LABEL_7;
  }
  re::DynamicString::format((re::DynamicString *)"Invalid Asset Path: %s.", (re::DynamicString *)&v23, a2);
  v11 = v23;
  v12 = v24;
  *(_BYTE *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 200;
  *(_QWORD *)(a4 + 16) = &re::AssetErrorCategory(void)::instance;
  *(_OWORD *)(a4 + 24) = v11;
  *(_OWORD *)(a4 + 40) = v12;
  while (1)
  {
    v13 = v30;
    v30 = 0;
    if (!v13)
      break;
    *(_QWORD *)&v23 = v13;
    if (v32)
    {
      (*(void (**)(_QWORD *, __int128 *))(*v32 + 48))(v32, &v23);
      break;
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_20:
    if (v22)
    {
      re::introspect<re::StateMachineAsset>(void)::info = re::introspect_StateMachineAsset(0);
    }
LABEL_7:
    re::AssetUtilities::readSourceJson((re::AssetUtilities *)a2, (const char *)v9, v15[38], a3, (uint64_t)v27);
    if (v27[0])
    {
      v16 = v30;
      *(_BYTE *)a4 = 1;
      *(_QWORD *)(a4 + 8) = v16;
      v30 = 0;
      break;
    }
    *(_QWORD *)&v23 = 100;
    *((_QWORD *)&v23 + 1) = &re::AssetErrorCategory(void)::instance;
    re::DynamicString::DynamicString((re::DynamicString *)&v24, (const re::DynamicString *)&v28);
    v19 = v24;
    *(_OWORD *)(a4 + 8) = v23;
    v20 = v25;
    v21 = v26;
    *(_BYTE *)a4 = 0;
    *(_OWORD *)(a4 + 24) = v19;
    *(_QWORD *)(a4 + 40) = v20;
    *(_QWORD *)(a4 + 48) = v21;
    if (!v27[0] && v28 && (v29 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v28 + 40))();
  }
  result = v32;
  if (v32 == v31)
  {
    v18 = 4;
    result = v31;
  }
  else
  {
    if (!v32)
      return result;
    v18 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v18))();
}

re *re::StateMachineCompiler::deleteAsset(re::StateMachineCompiler *this, re::StateMachineAsset *a2)
{
  return re::internal::destroyPersistent<re::StateMachineAsset>((re *)"deleteAsset", 56, a2);
}

void re::StateMachineCompiler::~StateMachineCompiler(re::StateMachineCompiler *this)
{
  JUMPOUT(0x2276933B8);
}

void std::__function::__func<re::StateMachineCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0,std::allocator<re::StateMachineCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0>,void ()(re::StateMachineAsset *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::StateMachineCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0,std::allocator<re::StateMachineCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0>,void ()(re::StateMachineAsset *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED445F8;
  return result;
}

void std::__function::__func<re::StateMachineCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0,std::allocator<re::StateMachineCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0>,void ()(re::StateMachineAsset *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED445F8;
}

re *std::__function::__func<re::StateMachineCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0,std::allocator<re::StateMachineCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0>,void ()(re::StateMachineAsset *)>::operator()(uint64_t a1, re::StateMachineAsset **a2)
{
  return re::internal::destroyPersistent<re::StateMachineAsset>((re *)"operator()", 34, *a2);
}

uint64_t std::__function::__func<re::StateMachineCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0,std::allocator<re::StateMachineCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0>,void ()(re::StateMachineAsset *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::StateMachineCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0,std::allocator<re::StateMachineCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0>,void ()(re::StateMachineAsset *)>::target_type()
{
}

re::DynamicString *re::IBLAssetCompiler::getCurrentCompiledAssetInfo@<X0>(re::IBLAssetCompiler *this@<X0>, uint64_t a2@<X8>)
{
  re::ImageBasedLightAsset *v3;
  const char *v5[2];

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v3 = (re::ImageBasedLightAsset *)re::DynamicString::setCapacity((_QWORD *)(a2 + 8), 0);
  *(_QWORD *)a2 = 0x100000001;
  v5[0] = (const char *)*re::ImageBasedLightAsset::assetType(v3);
  v5[1] = (const char *)strlen(v5[0]);
  return re::DynamicString::operator=((re::DynamicString *)(a2 + 8), (uint64_t)v5);
}

__guard re::IBLAssetCompiler::assetIntrospectionType(re::IBLAssetCompiler *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::ImageBasedLightAsset>(void)::info = re::introspect_ImageBasedLightAsset(0);
    }
  }
  return v2[50];
}

_QWORD *re::IBLAssetCompiler::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &re::IBLAssetCompiler::getSupportedExtensions(void)const::supportedExtensions);
}

re *re::IBLAssetCompiler::compile@<X0>(re::IBLAssetCompiler *this@<X0>, re::IBLAssetCompiler *a2@<X1>, re::AssetSerializationScheme *a3@<X3>, uint64_t a4@<X8>)
{
  NSObject *v8;
  uint8_t v10[16];

  v8 = *re::pipelineLogObjects(this);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v10 = 0;
    _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "Compiling source .reibl is not handling colorspace/gamut conversion: use REAssetManagerImageBasedLightMemoryAssetCreateFromReiblFileAsync.", v10, 2u);
  }
  return re::IBLAssetCompiler::createFromJson(a2, a3, a4);
}

re *re::IBLAssetCompiler::createFromJson@<X0>(re::IBLAssetCompiler *this@<X0>, const re::IntrospectionBase *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  re *result;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[8];
  re *v21;
  char v22;

  v8 = re::globalAllocators(this);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 104, 8);
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_OWORD *)(v9 + 64) = 0u;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_QWORD *)(v9 + 96) = 0;
  re::DynamicString::setCapacity((_QWORD *)(v9 + 72), 0);
  if ((v10 & 1) == 0
  {
    re::introspect<re::ImageBasedLightFile>(void)::info = re::introspect_ImageBasedLightFile(0);
  }
  result = (re *)re::AssetUtilities::readSourceJson(this, (const char *)v9, re::introspect<re::ImageBasedLightFile>(void)::info, a2, (uint64_t)v20);
  if (v20[0])
  {
    *(_BYTE *)a3 = 1;
    *(_QWORD *)(a3 + 8) = v9;
  }
  else
  {
    v12 = re::globalAllocators(result)[2];
    re::ImageBasedLightAsset::~ImageBasedLightAsset((re::ImageBasedLightAsset *)v9);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, v9);
    *(_QWORD *)&v16 = 100;
    *((_QWORD *)&v16 + 1) = &re::AssetErrorCategory(void)::instance;
    result = re::DynamicString::DynamicString((re::DynamicString *)&v17, (const re::DynamicString *)&v21);
    v13 = v17;
    *(_OWORD *)(a3 + 8) = v16;
    v14 = v18;
    v15 = v19;
    *(_BYTE *)a3 = 0;
    *(_OWORD *)(a3 + 24) = v13;
    *(_QWORD *)(a3 + 40) = v14;
    *(_QWORD *)(a3 + 48) = v15;
    if (!v20[0])
    {
      result = v21;
      if (v21)
      {
        if ((v22 & 1) != 0)
          return (re *)(*(uint64_t (**)(void))(*(_QWORD *)v21 + 40))();
      }
    }
  }
  return result;
}

re *re::IBLAssetCompiler::deleteAsset(re::IBLAssetCompiler *this, re::ImageBasedLightAsset *a2)
{
  return re::internal::destroyPersistent<re::ImageBasedLightAsset>((re *)"deleteAsset", 76, a2);
}

void re::IBLAssetCompiler::~IBLAssetCompiler(re::IBLAssetCompiler *this)
{
  JUMPOUT(0x2276933B8);
}

id *re::copyShaderGraphParamNames@<X0>(id *result@<X0>, uint64_t a2@<X8>)
{
  id *v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;

  v2 = result;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
  v4 = result[1];
  if (v4)
  {
    v5 = (uint64_t)result[2];
    v6 = 144 * (_QWORD)v4;
    do
    {
      result = re::extractShaderGraphUniforms(v5, (_anonymous_namespace_ *)a2);
      v5 += 144;
      v6 -= 144;
    }
    while (v6);
  }
  v7 = v2[4];
  if (v7)
  {
    v8 = (uint64_t)v2[5];
    v9 = 144 * (_QWORD)v7;
    do
    {
      result = re::extractShaderGraphUniforms(v8, (_anonymous_namespace_ *)a2);
      v8 += 144;
      v9 -= 144;
    }
    while (v9);
  }
  return result;
}

id *re::extractShaderGraphUniforms(uint64_t a1, _anonymous_namespace_ *a2)
{
  id *result;
  id *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id *v8;

  result = *(id **)(a1 + 48);
  if (result)
  {
    re::sg::CachedCompilationMaterial::getPublicUniforms(result, &v6);
    if (v7)
    {
      v4 = v8;
      v5 = 8 * v7;
      do
      {
        re::DynamicArray<NS::SharedPtr<NS::String>>::add(a2, v4++);
        v5 -= 8;
      }
      while (v5);
    }
    return (id *)re::FixedArray<NS::SharedPtr<NS::String>>::deinit(&v6);
  }
  return result;
}

void re::copyCustomParamFlattenedNames(_QWORD *a1, void **a2, void **a3, void **a4, void **a5)
{
  id v9[3];
  char *v10[3];
  id *v11;

  memset(v10, 0, sizeof(v10));
  if (a1[1] == 1)
  {
    re::extractFlattenedReflection((_anonymous_namespace_ *)(a1[2] + 96), v10, a4);
    v9[0] = objc_msgSend(objc_msgSend(MEMORY[0x24BDBCE30], sel_alloc), sel_initWithObjects_count_);
    NS::SharedPtr<MTL::Texture>::operator=(a2, v9);
    if (v9[0])

  }
  memset(v9, 0, sizeof(v9));
  if (a1[4] == 1)
  {
    re::extractFlattenedReflection((_anonymous_namespace_ *)(a1[5] + 96), (char **)v9, a5);
    v11 = (id *)objc_msgSend(objc_msgSend(MEMORY[0x24BDBCE30], sel_alloc), sel_initWithObjects_count_);
    NS::SharedPtr<MTL::Texture>::operator=(a3, (void **)&v11);
    if (v11)

  }
  v11 = v9;
  std::vector<NS::SharedPtr<NS::String>>::__destroy_vector::operator()[abi:nn180100](&v11);
  v9[0] = v10;
  std::vector<NS::SharedPtr<NS::String>>::__destroy_vector::operator()[abi:nn180100]((void ***)v9);
}

void re::extractFlattenedReflection(_anonymous_namespace_ *a1, char **a2, void **a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  re::DynamicString *v8;
  id v9;
  _BYTE *v10;
  id v11;
  id v12;
  unint64_t v13;
  char *v14;
  char *v15;
  re::DynamicString *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void *v28;
  void *v29;
  void **v30;
  uint64_t v31;
  id v32;
  char v33;
  _BYTE v34[23];

  if (*((_QWORD *)a1 + 1) >= 2uLL)
  {
    v30 = a3;
    v3 = (_QWORD *)*((_QWORD *)a1 + 2);
    v4 = v3[23];
    if (v4)
    {
      v6 = v3[24];
      v7 = v6 + 80 * v4;
      v31 = v7;
      do
      {
        if (*(_BYTE *)(v6 + 77))
        {
          re::DynamicString::format(v8, (re::Allocator *)"%s.%s", (re::DynamicString *)&v32, v3[15], *(_QWORD *)(v6 + 24), v30);
          v9 = objc_msgSend(MEMORY[0x24BDD17C8], sel_alloc);
          if ((v33 & 1) != 0)
            v10 = *(_BYTE **)&v34[7];
          else
            v10 = v34;
          v11 = objc_msgSend(v9, sel_initWithCString_encoding_, v10, 4);
          v12 = v11;
          v14 = a2[1];
          v13 = (unint64_t)a2[2];
          if ((unint64_t)v14 >= v13)
          {
            v16 = v8;
            v17 = *a2;
            v18 = (v14 - *a2) >> 3;
            v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 61)
              abort();
            v20 = v13 - (_QWORD)v17;
            if (v20 >> 2 > v19)
              v19 = v20 >> 2;
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
              v21 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v21 = v19;
            if (v21)
            {
              if (v21 >> 61)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v22 = (char *)operator new(8 * v21);
            }
            else
            {
              v22 = 0;
            }
            v23 = &v22[8 * v18];
            v24 = &v22[8 * v21];
            *(_QWORD *)v23 = v12;
            v15 = v23 + 8;
            if (v14 == v17)
            {
              *a2 = v23;
              a2[1] = v15;
              a2[2] = v24;
            }
            else
            {
              do
              {
                v25 = *((_QWORD *)v14 - 1);
                v14 -= 8;
                *((_QWORD *)v23 - 1) = v25;
                v23 -= 8;
                *(_QWORD *)v14 = 0;
              }
              while (v14 != v17);
              v14 = *a2;
              v26 = a2[1];
              *a2 = v23;
              a2[1] = v15;
              a2[2] = v24;
              if (v26 != v14)
              {
                v27 = v26;
                do
                {
                  v29 = (void *)*((_QWORD *)v27 - 1);
                  v27 -= 8;
                  v28 = v29;
                  if (v29)
                  {

                    *((_QWORD *)v26 - 1) = 0;
                  }
                  v26 = v27;
                }
                while (v27 != v14);
              }
            }
            v8 = v16;
            if (v14)
              operator delete(v14);
            v7 = v31;
          }
          else
          {
            *(_QWORD *)v14 = v11;
            v15 = v14 + 8;
          }
          a2[1] = v15;
          a1 = (_anonymous_namespace_ *)v32;
          if (v32 && (v33 & 1) != 0)
            a1 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v32 + 40))();
        }
        v6 += 80;
      }
      while (v6 != v7);
    }
    v32 = objc_msgSend(MEMORY[0x24BDD17C8], sel_stringWithCString_encoding_, v3[15], 4);
    NS::SharedPtr<MTL::Texture>::operator=(v30, &v32);
    if (v32)

  }
}

uint64_t re::parseMaterialAssetMetadata(_anonymous_namespace_ *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  _anonymous_namespace_ *v6;
  re::DynamicString *v7;
  int v8;
  _anonymous_namespace_ *v9;
  int v10;
  _anonymous_namespace_ *v11;
  int v12;
  _anonymous_namespace_ *v13;
  int v14;
  _anonymous_namespace_ *v15;
  int v16;
  uint64_t MappedTechniqueForPass;
  uint64_t v18;
  _anonymous_namespace_ *v19;
  int v20;
  _anonymous_namespace_ *v21;
  int v22;
  _anonymous_namespace_ *v23;
  int v24;
  uint64_t *v25;
  int v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  _anonymous_namespace_ *v29;
  BOOL v30;
  _anonymous_namespace_ *v31;
  BOOL v32;
  _anonymous_namespace_ *v33;
  BOOL v34;
  BOOL v35;
  unsigned __int16 v36;
  BOOL v37;
  int v38;
  _anonymous_namespace_ *v39;
  BOOL v40;
  int v41;
  _anonymous_namespace_ *v42;
  BOOL v43;
  int v44;
  _anonymous_namespace_ *v45;
  BOOL v46;
  int v47;
  _anonymous_namespace_ *v48;
  BOOL v49;
  int v50;
  _anonymous_namespace_ *v51;
  BOOL v52;
  int v53;
  _anonymous_namespace_ *v54;
  BOOL v55;
  int v56;
  _anonymous_namespace_ *v57;
  BOOL v58;
  int v59;
  _anonymous_namespace_ *v60;
  BOOL v61;
  int v62;
  _anonymous_namespace_ *v63;
  BOOL v64;
  int v65;
  _anonymous_namespace_ *v66;
  BOOL v67;
  int v68;
  _anonymous_namespace_ *v69;
  BOOL v70;
  int v71;
  _anonymous_namespace_ *v72;
  BOOL v73;
  int v74;
  _anonymous_namespace_ *v75;
  BOOL v76;
  int v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  __int16 v82;
  BOOL v83;
  int v84;
  _anonymous_namespace_ *v85;
  BOOL v86;
  int v87;
  __int16 v88;
  unsigned __int16 v89;
  BOOL v90;
  int v91;
  _anonymous_namespace_ *v92;
  BOOL v93;
  int v94;
  _anonymous_namespace_ *v95;
  BOOL v96;
  int v97;
  _anonymous_namespace_ *v98;
  BOOL v99;
  int v100;
  _anonymous_namespace_ *v101;
  _anonymous_namespace_ *FunctionConstant;
  _anonymous_namespace_ *v103;
  BOOL v104;
  int v105;
  BOOL v106;
  int v107;
  _anonymous_namespace_ *v108;
  unsigned __int16 v109;
  unsigned __int16 v110;
  BOOL v111;
  int v112;
  _anonymous_namespace_ *v113;
  BOOL v114;
  int v115;
  uint64_t v117;
  char v118;
  _OWORD v119[2];
  _OWORD v120[2];
  _OWORD v121[2];
  __int128 v122;
  __int128 v123;
  _OWORD v124[2];
  _OWORD v125[2];
  _OWORD v126[2];
  _OWORD v127[2];
  _OWORD v128[2];
  _OWORD v129[2];
  uint64_t v130;
  char v131;
  _OWORD v132[2];
  _OWORD v133[2];
  _OWORD v134[2];
  uint64_t v135;
  uint64_t v136;
  char v137[8];
  uint64_t v138;
  _OWORD v139[2];
  _OWORD v140[2];
  _OWORD v141[2];
  _OWORD v142[2];
  _OWORD v143[2];
  _OWORD v144[2];
  _OWORD v145[2];
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;

  v6 = a1;
  if (!*a4)
    goto LABEL_22;
  v7 = (re::DynamicString *)(a4 + 8);
  v8 = re::DynamicString::compare(v7, (const re::DynamicString *)&v156);
  v9 = (_anonymous_namespace_ *)v156;
  if ((_QWORD)v156 && (BYTE8(v156) & 1) != 0)
    v9 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v156 + 40))(v156, v157);
  if (!v8)
  {
    v27 = 0;
LABEL_45:
    v26 = 196608;
    return v26 & 0xF0000 | v27;
  }
  v10 = re::DynamicString::compare(v7, (const re::DynamicString *)&v156);
  v11 = (_anonymous_namespace_ *)v156;
  if ((_QWORD)v156 && (BYTE8(v156) & 1) != 0)
    v11 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v156 + 40))(v156, v157);
  if (!v10)
  {
    v27 = 1;
    goto LABEL_45;
  }
  v12 = re::DynamicString::compare(v7, (const re::DynamicString *)&v156);
  v13 = (_anonymous_namespace_ *)v156;
  if ((_QWORD)v156 && (BYTE8(v156) & 1) != 0)
    v13 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v156 + 40))(v156, v157);
  if (!v12)
  {
    v27 = 0;
LABEL_252:
    v26 = 0x40000;
    return v26 & 0xF0000 | v27;
  }
  v14 = re::DynamicString::compare(v7, (const re::DynamicString *)&v156);
  v15 = (_anonymous_namespace_ *)v156;
  if ((_QWORD)v156 && (BYTE8(v156) & 1) != 0)
    v15 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v156 + 40))(v156, v157);
  if (!v14)
  {
    v27 = 1;
    goto LABEL_252;
  }
  v16 = re::DynamicString::compare(v7, (const re::DynamicString *)&v156);
  a1 = (_anonymous_namespace_ *)v156;
  if ((_QWORD)v156 && (BYTE8(v156) & 1) != 0)
    a1 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v156 + 40))(v156, v157);
  if (!v16)
  {
    v27 = 0;
    v26 = 0x80000;
    return v26 & 0xF0000 | v27;
  }
LABEL_22:
  MappedTechniqueForPass = re::getMappedTechniqueForPass(a2, (uint64_t)&v156);
  v18 = MappedTechniqueForPass;
  v19 = (_anonymous_namespace_ *)v156;
  if ((_QWORD)v156 && (BYTE8(v156) & 1) != 0)
    v19 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v156 + 40))(v156, v157);
  if (!MappedTechniqueForPass)
  {
    v18 = re::getMappedTechniqueForPass(a2, (uint64_t)&v156);
    v19 = (_anonymous_namespace_ *)v156;
    if ((_QWORD)v156 && (BYTE8(v156) & 1) != 0)
      v19 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v156 + 40))(v156, v157);
    if (!v18)
      goto LABEL_42;
  }
  v20 = re::DynamicString::compare((re::DynamicString *)(v18 + 2472), (const re::DynamicString *)&v156);
  v21 = (_anonymous_namespace_ *)v156;
  if ((_QWORD)v156 && (BYTE8(v156) & 1) != 0)
    v21 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v156 + 40))(v156, v157);
  if (v20)
  {
    v22 = re::DynamicString::compare((re::DynamicString *)(v18 + 2472), (const re::DynamicString *)&v156);
    v23 = (_anonymous_namespace_ *)v156;
    if ((_QWORD)v156 && (BYTE8(v156) & 1) != 0)
      v23 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v156 + 40))(v156, v157);
    if (v22)
    {
      v24 = re::DynamicString::compare((re::DynamicString *)(v18 + 2472), (const re::DynamicString *)&v156);
      v25 = (uint64_t *)v156;
      if ((_QWORD)v156 && (BYTE8(v156) & 1) != 0)
        v25 = (uint64_t *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v156 + 40))(v156, v157);
      if (v24)
      {
LABEL_42:
        v26 = 0;
        v27 = 0;
        return v26 & 0xF0000 | v27;
      }
      if (*((_QWORD *)v6 + 48))
      {
        v78 = 0;
        v79 = 80;
        do
        {
          v80 = *(_QWORD *)(*((_QWORD *)v6 + 50) + v79);
          if (v80)
          {
            v81 = *(uint64_t **)(v80 + 264);
            v25 = re::ShaderGraphAsset::assetType((re::ShaderGraphAsset *)v25);
            if (v81 == v25)
            {
              v26 = 458752;
              goto LABEL_262;
            }
          }
          else
          {
            v25 = re::ShaderGraphAsset::assetType((re::ShaderGraphAsset *)v25);
          }
          ++v78;
          v79 += 272;
        }
        while (v78 < *((_QWORD *)v6 + 48));
      }
      v26 = 393216;
LABEL_262:
      v82 = MappedTechniqueForPass == 0;
      re::getFunctionConstant((uint64_t)&v156, a3, v18, (const re::DynamicString *)v129);
      if ((_BYTE)v156)
        v83 = *((_QWORD *)&v156 + 1) == 0;
      else
        v83 = 1;
      v84 = v83;
      v85 = *(_anonymous_namespace_ **)&v129[0];
      if (*(_QWORD *)&v129[0])
      {
        if ((BYTE8(v129[0]) & 1) != 0)
          v85 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v129[0] + 40))();
        memset(v129, 0, sizeof(v129));
      }
      if (v84)
      {
        re::getFunctionConstant((uint64_t)&v156, a3, v18, (const re::DynamicString *)v128);
        if ((_BYTE)v156)
          v86 = *((_QWORD *)&v156 + 1) == 0;
        else
          v86 = 0;
        v87 = v86;
        v85 = *(_anonymous_namespace_ **)&v128[0];
        if (*(_QWORD *)&v128[0])
        {
          if ((BYTE8(v128[0]) & 1) != 0)
            v85 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v128[0] + 40))();
          memset(v128, 0, sizeof(v128));
        }
        if (v87)
          v88 = 2;
        else
          v88 = 4;
      }
      else
      {
        v88 = 8;
      }
      v89 = v88 | v82;
      re::getFunctionConstant((uint64_t)&v156, a3, v18, (const re::DynamicString *)v127);
      if ((_BYTE)v156)
        v90 = *((_QWORD *)&v156 + 1) == 0;
      else
        v90 = 1;
      v91 = v90;
      v92 = *(_anonymous_namespace_ **)&v127[0];
      if (*(_QWORD *)&v127[0])
      {
        if ((BYTE8(v127[0]) & 1) != 0)
          v92 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v127[0] + 40))();
        memset(v127, 0, sizeof(v127));
      }
      if (!v91)
        v89 |= 0x10u;
      re::getFunctionConstant((uint64_t)&v156, a3, v18, (const re::DynamicString *)v126);
      if ((_BYTE)v156)
        v93 = *((_QWORD *)&v156 + 1) == 0;
      else
        v93 = 1;
      v94 = v93;
      v95 = *(_anonymous_namespace_ **)&v126[0];
      if (*(_QWORD *)&v126[0])
      {
        if ((BYTE8(v126[0]) & 1) != 0)
          v95 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v126[0] + 40))();
        memset(v126, 0, sizeof(v126));
      }
      if (!v94)
        v89 |= 0x20u;
      re::getFunctionConstant((uint64_t)&v156, a3, v18, (const re::DynamicString *)v125);
      if ((_BYTE)v156)
        v96 = *((_QWORD *)&v156 + 1) == 0;
      else
        v96 = 1;
      v97 = v96;
      v98 = *(_anonymous_namespace_ **)&v125[0];
      if (*(_QWORD *)&v125[0])
      {
        if ((BYTE8(v125[0]) & 1) != 0)
          v98 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v125[0] + 40))();
        memset(v125, 0, sizeof(v125));
      }
      if (!v97)
        v89 |= 0x40u;
      re::getFunctionConstant((uint64_t)&v156, a3, v18, (const re::DynamicString *)v124);
      if ((_BYTE)v156)
        v99 = *((_QWORD *)&v156 + 1) == 0;
      else
        v99 = 1;
      v100 = v99;
      v101 = *(_anonymous_namespace_ **)&v124[0];
      if (*(_QWORD *)&v124[0])
      {
        if ((BYTE8(v124[0]) & 1) != 0)
          v101 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v124[0] + 40))();
        memset(v124, 0, sizeof(v124));
      }
      if (!v100)
        v89 |= 0x80u;
      FunctionConstant = re::getFunctionConstant((uint64_t)&v156, a3, v18, (const re::DynamicString *)&v122);
      if ((_BYTE)v156 && *((_QWORD *)&v156 + 1))
      {
        v103 = (_anonymous_namespace_ *)v122;
        if ((_QWORD)v122)
        {
          if ((BYTE8(v122) & 1) != 0)
            v103 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v122 + 40))();
          v122 = 0u;
          v123 = 0u;
        }
      }
      else
      {
        re::getFunctionConstant((uint64_t)&v154, a3, v18, (const re::DynamicString *)v121);
        if ((_BYTE)v154)
          v104 = *((_QWORD *)&v154 + 1) == 0;
        else
          v104 = 1;
        v105 = !v104;
        if (*(_QWORD *)&v121[0])
        {
          if ((BYTE8(v121[0]) & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)&v121[0] + 40))();
          memset(v121, 0, sizeof(v121));
        }
        v103 = (_anonymous_namespace_ *)v122;
        if ((_QWORD)v122)
        {
          if ((BYTE8(v122) & 1) != 0)
            v103 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v122 + 40))();
          v122 = 0u;
          v123 = 0u;
        }
        if (!v105)
          goto LABEL_357;
      }
      v89 |= 0x100u;
LABEL_357:
      re::getFunctionConstant((uint64_t)&v156, a3, v18, (const re::DynamicString *)v120);
      if ((_BYTE)v156)
        v106 = *((_QWORD *)&v156 + 1) == 0;
      else
        v106 = 1;
      v107 = v106;
      v108 = *(_anonymous_namespace_ **)&v120[0];
      if (*(_QWORD *)&v120[0])
      {
        if ((BYTE8(v120[0]) & 1) != 0)
          v108 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v120[0] + 40))();
        memset(v120, 0, sizeof(v120));
      }
      v109 = v89 | 0x200;
      if (v107)
        v109 = v89;
      if (*((_BYTE *)v6 + 358))
        v109 |= 0x400u;
      if (*((_BYTE *)v6 + 360))
        v110 = v109 | 0x800;
      else
        v110 = v109;
      re::getFunctionConstant((uint64_t)&v156, a3, v18, (const re::DynamicString *)v119);
      if ((_BYTE)v156)
        v111 = *((_QWORD *)&v156 + 1) == 0;
      else
        v111 = 1;
      v112 = v111;
      v113 = *(_anonymous_namespace_ **)&v119[0];
      if (*(_QWORD *)&v119[0])
      {
        if ((BYTE8(v119[0]) & 1) != 0)
          v113 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v119[0] + 40))();
        memset(v119, 0, sizeof(v119));
      }
      if (!v112)
        v110 |= 0x1000u;
      re::getFunctionConstant((uint64_t)&v156, a3, v18, (const re::DynamicString *)&v117);
      if ((_BYTE)v156)
        v114 = *((_QWORD *)&v156 + 1) == 0;
      else
        v114 = 1;
      v115 = v114;
      if (v117 && (v118 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v117 + 40))();
      v27 = v110 | 0x2000;
      if (v115)
        v27 = v110;
      return v26 & 0xF0000 | v27;
    }
    v36 = MappedTechniqueForPass == 0;
    re::getFunctionConstant((uint64_t)&v154, a3, v18, (const re::DynamicString *)&v156);
    if ((_BYTE)v154)
      v37 = *((_QWORD *)&v154 + 1) == 0;
    else
      v37 = 1;
    v38 = v37;
    v39 = (_anonymous_namespace_ *)v156;
    if ((_QWORD)v156)
    {
      if ((BYTE8(v156) & 1) != 0)
        v39 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v156 + 40))(v156, v157);
      v156 = 0u;
      v157 = 0u;
    }
    if (!v38)
      v36 |= 4u;
    re::getFunctionConstant((uint64_t)&v152, a3, v18, (const re::DynamicString *)&v154);
    if ((_BYTE)v152)
      v40 = *((_QWORD *)&v152 + 1) == 0;
    else
      v40 = 1;
    v41 = v40;
    v42 = (_anonymous_namespace_ *)v154;
    if ((_QWORD)v154)
    {
      if ((BYTE8(v154) & 1) != 0)
        v42 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v154 + 40))(v154, v155);
      v154 = 0u;
      v155 = 0u;
    }
    if (!v41)
      v36 |= 8u;
    re::getFunctionConstant((uint64_t)&v150, a3, v18, (const re::DynamicString *)&v152);
    if ((_BYTE)v150)
      v43 = *((_QWORD *)&v150 + 1) == 0;
    else
      v43 = 1;
    v44 = v43;
    v45 = (_anonymous_namespace_ *)v152;
    if ((_QWORD)v152)
    {
      if ((BYTE8(v152) & 1) != 0)
        v45 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v152 + 40))(v152, v153);
      v152 = 0u;
      v153 = 0u;
    }
    if (!v44)
      v36 |= 0x10u;
    re::getFunctionConstant((uint64_t)&v148, a3, v18, (const re::DynamicString *)&v150);
    if ((_BYTE)v148)
      v46 = *((_QWORD *)&v148 + 1) == 0;
    else
      v46 = 1;
    v47 = v46;
    v48 = (_anonymous_namespace_ *)v150;
    if ((_QWORD)v150)
    {
      if ((BYTE8(v150) & 1) != 0)
        v48 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v150 + 40))(v150, v151);
      v150 = 0u;
      v151 = 0u;
    }
    if (!v47)
      v36 |= 0x20u;
    re::getFunctionConstant((uint64_t)&v146, a3, v18, (const re::DynamicString *)&v148);
    if ((_BYTE)v146)
      v49 = *((_QWORD *)&v146 + 1) == 0;
    else
      v49 = 1;
    v50 = v49;
    v51 = (_anonymous_namespace_ *)v148;
    if ((_QWORD)v148)
    {
      if ((BYTE8(v148) & 1) != 0)
        v51 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v148 + 40))(v148, v149);
      v148 = 0u;
      v149 = 0u;
    }
    if (!v50)
      v36 |= 0x40u;
    re::getFunctionConstant((uint64_t)v145, a3, v18, (const re::DynamicString *)&v146);
    if (LOBYTE(v145[0]))
      v52 = *((_QWORD *)&v145[0] + 1) == 0;
    else
      v52 = 1;
    v53 = v52;
    v54 = (_anonymous_namespace_ *)v146;
    if ((_QWORD)v146)
    {
      if ((BYTE8(v146) & 1) != 0)
        v54 = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v146 + 40))(v146, v147);
      v146 = 0u;
      v147 = 0u;
    }
    if (!v53)
      v36 |= 0x80u;
    re::getFunctionConstant((uint64_t)v144, a3, v18, (const re::DynamicString *)v145);
    if (LOBYTE(v144[0]))
      v55 = *((_QWORD *)&v144[0] + 1) == 0;
    else
      v55 = 1;
    v56 = v55;
    v57 = *(_anonymous_namespace_ **)&v145[0];
    if (*(_QWORD *)&v145[0])
    {
      if ((BYTE8(v145[0]) & 1) != 0)
        v57 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v145[0] + 40))();
      memset(v145, 0, sizeof(v145));
    }
    if (!v56)
      v36 |= 0x100u;
    re::getFunctionConstant((uint64_t)v143, a3, v18, (const re::DynamicString *)v144);
    if (LOBYTE(v143[0]))
      v58 = *((_QWORD *)&v143[0] + 1) == 0;
    else
      v58 = 1;
    v59 = v58;
    v60 = *(_anonymous_namespace_ **)&v144[0];
    if (*(_QWORD *)&v144[0])
    {
      if ((BYTE8(v144[0]) & 1) != 0)
        v60 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v144[0] + 40))();
      memset(v144, 0, sizeof(v144));
    }
    if (!v59)
      v36 |= 0x200u;
    re::getFunctionConstant((uint64_t)v142, a3, v18, (const re::DynamicString *)v143);
    if (LOBYTE(v142[0]))
      v61 = *((_QWORD *)&v142[0] + 1) == 0;
    else
      v61 = 1;
    v62 = v61;
    v63 = *(_anonymous_namespace_ **)&v143[0];
    if (*(_QWORD *)&v143[0])
    {
      if ((BYTE8(v143[0]) & 1) != 0)
        v63 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v143[0] + 40))();
      memset(v143, 0, sizeof(v143));
    }
    if (!v62)
      v36 |= 0x400u;
    re::getFunctionConstant((uint64_t)v141, a3, v18, (const re::DynamicString *)v142);
    if (LOBYTE(v141[0]))
      v64 = *((_QWORD *)&v141[0] + 1) == 0;
    else
      v64 = 1;
    v65 = v64;
    v66 = *(_anonymous_namespace_ **)&v142[0];
    if (*(_QWORD *)&v142[0])
    {
      if ((BYTE8(v142[0]) & 1) != 0)
        v66 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v142[0] + 40))();
      memset(v142, 0, sizeof(v142));
    }
    if (!v65)
      v36 |= 0x800u;
    re::getFunctionConstant((uint64_t)v140, a3, v18, (const re::DynamicString *)v141);
    if (LOBYTE(v140[0]))
      v67 = *((_QWORD *)&v140[0] + 1) == 0;
    else
      v67 = 1;
    v68 = v67;
    v69 = *(_anonymous_namespace_ **)&v141[0];
    if (*(_QWORD *)&v141[0])
    {
      if ((BYTE8(v141[0]) & 1) != 0)
        v69 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v141[0] + 40))();
      memset(v141, 0, sizeof(v141));
    }
    if (!v68)
      v36 |= 2u;
    re::getFunctionConstant((uint64_t)v139, a3, v18, (const re::DynamicString *)v140);
    if (LOBYTE(v139[0]))
      v70 = *((_QWORD *)&v139[0] + 1) == 0;
    else
      v70 = 1;
    v71 = v70;
    v72 = *(_anonymous_namespace_ **)&v140[0];
    if (*(_QWORD *)&v140[0])
    {
      if ((BYTE8(v140[0]) & 1) != 0)
        v72 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v140[0] + 40))();
      memset(v140, 0, sizeof(v140));
    }
    if (!v71)
      v36 |= 0x1000u;
    re::getFunctionConstant((uint64_t)&v135, a3, v18, (const re::DynamicString *)v139);
    if ((_BYTE)v135)
      v73 = v136 == 0;
    else
      v73 = 1;
    v74 = v73;
    v75 = *(_anonymous_namespace_ **)&v139[0];
    if (*(_QWORD *)&v139[0])
    {
      if ((BYTE8(v139[0]) & 1) != 0)
        v75 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v139[0] + 40))();
      memset(v139, 0, sizeof(v139));
    }
    if (!v74)
      v36 |= 0x2000u;
    re::getFunctionConstant((uint64_t)v137, a3, v18, (const re::DynamicString *)&v135);
    if (v137[0])
      v76 = v138 == 0;
    else
      v76 = 1;
    v77 = v76;
    if (v135 && (v136 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v135 + 40))();
    v27 = v36 | 0x4000;
    if (v77)
      v27 = v36;
    v26 = 0x10000;
  }
  else
  {
    v28 = MappedTechniqueForPass == 0;
    re::getFunctionConstant((uint64_t)&v156, a3, v18, (const re::DynamicString *)v134);
    v29 = *(_anonymous_namespace_ **)&v134[0];
    if (*(_QWORD *)&v134[0])
    {
      if ((BYTE8(v134[0]) & 1) != 0)
        v29 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v134[0] + 40))();
      memset(v134, 0, sizeof(v134));
    }
    if (*((_QWORD *)&v156 + 1))
      v30 = v156 == 0;
    else
      v30 = 1;
    if (!v30)
      v28 |= 2u;
    re::getFunctionConstant((uint64_t)&v154, a3, v18, (const re::DynamicString *)v133);
    v31 = *(_anonymous_namespace_ **)&v133[0];
    if (*(_QWORD *)&v133[0])
    {
      if ((BYTE8(v133[0]) & 1) != 0)
        v31 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v133[0] + 40))();
      memset(v133, 0, sizeof(v133));
    }
    if (*((_QWORD *)&v154 + 1))
      v32 = v154 == 0;
    else
      v32 = 1;
    if (!v32)
      v28 |= 4u;
    re::getFunctionConstant((uint64_t)&v152, a3, v18, (const re::DynamicString *)v132);
    v33 = *(_anonymous_namespace_ **)&v132[0];
    if (*(_QWORD *)&v132[0])
    {
      if ((BYTE8(v132[0]) & 1) != 0)
        v33 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)&v132[0] + 40))();
      memset(v132, 0, sizeof(v132));
    }
    if (*((_QWORD *)&v152 + 1))
      v34 = v152 == 0;
    else
      v34 = 1;
    if (!v34)
      v28 |= 8u;
    re::getFunctionConstant((uint64_t)&v150, a3, v18, (const re::DynamicString *)&v130);
    if (v130 && (v131 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v130 + 40))();
    if (*((_QWORD *)&v150 + 1))
      v35 = v150 == 0;
    else
      v35 = 1;
    v27 = v28 | 0x10;
    if (v35)
      v27 = v28;
    v26 = 0x20000;
  }
  return v26 & 0xF0000 | v27;
}

uint64_t re::getMappedTechniqueForPass(uint64_t a1, uint64_t a2)
{
  const char *v3;
  size_t v4;
  unint64_t v5;
  uint64_t result;
  int v7;
  unint64_t v8;
  uint64_t v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  if ((*(_QWORD *)(a2 + 8) & 1) != 0)
    v3 = *(const char **)(a2 + 16);
  else
    v3 = (const char *)(a2 + 9);
  v4 = strlen(v3);
  if (v4)
  {
    MurmurHash3_x64_128((uint64_t)v3, v4, 0, (unint64_t *)v9);
    v5 = (v9[1] + (v9[0] << 6) + ((unint64_t)v9[0] >> 2) - 0x61C8864680B583E9) ^ v9[0];
  }
  else
  {
    v5 = 0;
  }
  v9[0] = v5;
  result = re::HashTable<unsigned long,re::IntrospectionStructure const*,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 16, v9);
  if (result)
  {
    result = re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(a1 + 136, (uint64_t *)result);
    if (result)
    {
      if (!*(_QWORD *)(result + 8))
        return 0;
      v7 = *(unsigned __int8 *)(result + 24);
      if (v7 == 255)
        LOBYTE(v7) = 0;
      v8 = (**(_DWORD **)(result + 16) + (char)v7);
      if (*(_QWORD *)(a1 + 120) > v8)
        return *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v8);
      else
        return 0;
    }
  }
  return result;
}

re::TechniqueFunctionConstant *re::getFunctionConstant(uint64_t a1, uint64_t a2, uint64_t a3, const re::DynamicString *a4)
{
  re::TechniqueFunctionConstant *result;
  uint64_t v8;
  re::DynamicString *v9;
  uint64_t v10;

  result = (re::TechniqueFunctionConstant *)re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a2, (uint64_t)a4);
  if (result)
  {
LABEL_2:
    result = (re::TechniqueFunctionConstant *)re::TechniqueFunctionConstant::getAs64Bits(result);
    *(_BYTE *)a1 = 1;
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  v8 = *(_QWORD *)(a3 + 56);
  if (v8)
  {
    v9 = *(re::DynamicString **)(a3 + 64);
    v10 = v8 << 6;
    while (1)
    {
      result = (re::TechniqueFunctionConstant *)re::DynamicString::compare(v9, a4);
      if (!(_DWORD)result)
        break;
      v9 = (re::DynamicString *)((char *)v9 + 64);
      v10 -= 64;
      if (!v10)
        goto LABEL_7;
    }
    result = v9;
    goto LABEL_2;
  }
LABEL_7:
  *(_BYTE *)a1 = 0;
  return result;
}

id re::DynamicArray<NS::SharedPtr<NS::String>>::add(_anonymous_namespace_ *this, id *a2)
{
  unint64_t v4;
  uint64_t v5;
  id result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4);
  result = *a2;
  *(_QWORD *)(v5 + 8 * v4) = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

_QWORD *re::FixedArray<NS::SharedPtr<NS::String>>::deinit(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  id *v4;
  uint64_t v5;

  if (*result)
  {
    v1 = result;
    v3 = result + 1;
    v2 = result[1];
    if (v2)
    {
      v4 = (id *)result[2];
      v5 = 8 * v2;
      do
      {
        if (*v4)
        {

          *v4 = 0;
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v1[2]);
      *v3 = 0;
      v3[1] = 0;
    }
    *v1 = 0;
  }
  return result;
}

uint64_t re::HashTable<unsigned long,re::Pair<re::FixedArray<unsigned int>,signed char,true>,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (*a2 % (unint64_t)*(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 48 * v3 + 8) != v2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 48 * v3) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v5 + 48 * v3 + 8) == v2)
        return v5 + 48 * v3 + 16;
    }
    return 0;
  }
  return v5 + 48 * v3 + 16;
}

uint64_t re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v8, a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v6 + 112 * v5 + 16, a2))
  {
    v5 = *(_DWORD *)(v6 + 112 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      return 0;
  }
  return v6 + 112 * v5 + 48;
}

uint64_t re::TechniqueFunctionConstant::getAs64Bits(re::TechniqueFunctionConstant *this)
{
  unint64_t v1;
  size_t v2;
  _QWORD __dst[2];
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  __dst[0] = 0;
  v1 = *((_QWORD *)this + 6);
  if (!v1)
  {
    __dst[1] = 0;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v13 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v5 = 136315906;
    v6 = "operator[]";
    v7 = 1024;
    v8 = 476;
    v9 = 2048;
    v10 = 0;
    v11 = 2048;
    v12 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v1 >= 8)
    v2 = 8;
  else
    v2 = *((_QWORD *)this + 6);
  memcpy(__dst, *((const void **)this + 7), v2);
  return __dst[0];
}

void std::vector<NS::SharedPtr<NS::String>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<NS::SharedPtr<NS::String>>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<NS::SharedPtr<NS::String>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v2 = *a1;
  v3 = a1[1];
  if (v3 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 8);
      v4 -= 8;
      v5 = v6;
      if (v6)
      {

        *(_QWORD *)(v3 - 8) = 0;
      }
      v3 = v4;
    }
    while (v4 != v2);
  }
  a1[1] = v2;
}

void re::usdimport::createAudioFileAssetForResourcePath(_anonymous_namespace_ *a1@<X0>, void *a2@<X1>, char a3@<W2>, int a4@<W3>, double *a5@<X4>, re::DynamicString *a6@<X8>)
{
  id v11;
  void *v12;
  id v13;
  const char *v14;
  void *v15;
  void *v16;
  re *v17;
  void *v18;
  id v19;
  re *v20;
  re::AudioFileAsset *v21;
  uint64_t *v22;
  _anonymous_namespace_ *v23;
  uint64_t v24;
  uint64_t *v25;
  re::AudioFileAsset *v26;
  re::AudioFileAsset *v27;
  void *v28;
  void *v29;
  void *v30;
  double v31;
  double v32;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  re::AudioFileAsset *v36;
  uint64_t *v37;
  re::AssetPath *v38;
  uint8_t v39[8];
  id v40;
  uint8_t buf[32];
  uint64_t v42;
  id v43[9];

  v43[7] = *(id *)MEMORY[0x24BDAC8D0];
  v11 = a2;
  objc_msgSend(MEMORY[0x24BEBECF8], "resourceWithResourcePath:", v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "path");
  v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v14 = (const char *)objc_msgSend(v13, "UTF8String");

  if (v12)
    goto LABEL_3;
  objc_msgSend(v11, "path");
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "stringByRemovingPercentEncoding");
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(MEMORY[0x24BEBECF8], "resourceWithPath:", v16);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
LABEL_3:
    objc_msgSend(v12, "dataNoCopy");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = (id)objc_msgSend(v18, "copy");

    if (v19)
    {
      v21 = (re::AudioFileAsset *)strlen(v14);
      v22 = re::AudioFileAsset::assetType(v21);
      v23 = (_anonymous_namespace_ *)re::ImportAssetTable::importedAsset((uint64_t)a1, (uint64_t)v14, (uint64_t)v21, (re **)v22);
      v24 = (uint64_t)v23;
      if (!v23)
      {
        v25 = re::globalAllocators(0);
        v26 = (re::AudioFileAsset *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25[2] + 32))(v25[2], 168, 8);
        v27 = re::AudioFileAsset::AudioFileAsset(v26);
        *((_BYTE *)v27 + 52) = a3;
        *((_BYTE *)v27 + 100) = 1;
        *((_DWORD *)v27 + 24) = a4 << 31 >> 31;
        v40 = v19;
        re::DataSeekableInputStream::DataSeekableInputStream((uint64_t)buf, &v40, 1, 0);

        if (a5)
        {
          +[_REAudioFile audioFileWithStream:ownsStream:](_REAudioFile, "audioFileWithStream:ownsStream:", buf, 0);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          v29 = v28;
          if (v28)
          {
            objc_msgSend(v28, "fileFormat");
            v30 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v30, "sampleRate");
            v32 = 0.0;
            if (v31 > 0.0)
              v32 = (double)objc_msgSend(v29, "length") / v31;

          }
          else
          {
            v35 = *re::pipelineLogObjects(0);
            v32 = 0.0;
            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v39 = 0;
              _os_log_impl(&dword_224FE9000, v35, OS_LOG_TYPE_DEFAULT, "Failed to retrieve audio file duration.", v39, 2u);
            }
          }
          *a5 = v32;
          google::protobuf::io::ArrayInputStream::Seek((google::protobuf::io::ArrayInputStream *)v43, 0);

        }
        re::AudioFileAsset::setMappedData((uint64_t)v26, (uint64_t)buf);
        v36 = (re::AudioFileAsset *)strlen(v14);
        v37 = re::AudioFileAsset::assetType(v36);
        v24 = re::ImportAssetTable::addAsset(a1, (uint64_t)v14, (uint64_t)v36, v26, (re **)v37);
        *(_QWORD *)buf = &off_24ED7BE48;

        *(_QWORD *)buf = &off_24ED7BDD0;
        v23 = (_anonymous_namespace_ *)re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)&v42);
      }
      *(_QWORD *)a6 = 0;
      *((_QWORD *)a6 + 1) = 0;
      *((_QWORD *)a6 + 2) = 0;
      if ((*(_BYTE *)(v24 + 8) & 1) != 0)
        v38 = *(re::AssetPath **)(v24 + 16);
      else
        v38 = (re::AssetPath *)(v24 + 9);
    }
    else
    {
      v33 = *re::pipelineLogObjects(v20);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v14;
        _os_log_error_impl(&dword_224FE9000, v33, OS_LOG_TYPE_ERROR, "Failed to load data for USD resource: %s", buf, 0xCu);
      }
      *(_QWORD *)a6 = 0;
      *((_QWORD *)a6 + 1) = 0;
      *((_QWORD *)a6 + 2) = 0;
    }

  }
  else
  {
    v34 = *re::pipelineLogObjects(v17);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v14;
      _os_log_error_impl(&dword_224FE9000, v34, OS_LOG_TYPE_ERROR, "Failed to load USD resource: %s", buf, 0xCu);
    }
    *(_QWORD *)a6 = 0;
    *((_QWORD *)a6 + 1) = 0;
    *((_QWORD *)a6 + 2) = 0;
  }

}

void re::usdimport::SpatialAudioNodeData::configureFromUSDNode(unsigned __int8 *a1, void *a2, _anonymous_namespace_ *a3, double *a4, int a5)
{
  float v5;
  id v10;
  double v11;
  void *v12;
  id v13;
  int v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  float v22;
  void *v23;
  int v24;
  void *v25;
  int v26;
  void *v27;
  void *v28;
  void *v29;
  int v30;
  double v31;
  int v32;
  void *v33;
  re *v34;
  void *v35;
  double v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  re *v40;
  NSObject *v41;
  NSObject *v42;
  void *v43;
  NSObject *v44;
  NSObject *v45;
  void *v46;
  double v47;
  int v48;
  char v49;
  NSObject *v50;
  NSObject *v51;
  void *v52;
  NSObject *v53;
  NSObject *v54;
  void *v55;
  double *v56;
  NSObject *v57;
  NSObject *v58;
  void *v59;
  const char *v60;
  NSObject *v61;
  NSObject *v62;
  void *v63;
  NSObject *v64;
  NSObject *v65;
  void *v66;
  double *v67;
  BOOL v68;
  int v69;
  NSObject *v70;
  re *v71;
  NSObject *v72;
  _BOOL4 v73;
  NSObject *v74;
  void *v75;
  const char *v76;
  NSObject *v77;
  uint32_t v78;
  float v79;
  int v80;
  double v81;
  double v82;
  int v83;
  double *v84;
  void *v85;
  id v86;
  double v87;
  _BYTE buf[24];
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v84 = a4;
  v11 = *a4;
  objc_msgSend(v10, "property:", CFSTR("playbackMode"));
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v12, "stringValue");
  v13 = (id)objc_claimAutoreleasedReturnValue();
  if ((objc_msgSend(v13, "isEqualToString:", CFSTR("onceFromStart")) & 1) != 0)
  {
    v14 = 1;
LABEL_11:

    goto LABEL_12;
  }
  if ((objc_msgSend(v13, "isEqualToString:", CFSTR("onceFromStartToEnd")) & 1) != 0)
  {
    v14 = 2;
    goto LABEL_11;
  }
  if ((objc_msgSend(v13, "isEqualToString:", CFSTR("loopFromStart")) & 1) != 0)
  {
    v14 = 3;
    goto LABEL_11;
  }
  if ((objc_msgSend(v13, "isEqualToString:", CFSTR("loopFromStartToEnd")) & 1) != 0)
  {
    v14 = 4;
    goto LABEL_11;
  }
  if (objc_msgSend(v13, "isEqualToString:", CFSTR("loopFromStage")))
  {
    v14 = 5;
    goto LABEL_11;
  }

  v72 = *re::pipelineLogObjects(v71);
  v73 = os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT);
  if (v13)
  {
    if (v73)
    {
      v74 = v72;
      objc_msgSend(v10, "name");
      v75 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412546;
      *(_QWORD *)&buf[4] = v75;
      *(_WORD *)&buf[12] = 2112;
      *(_QWORD *)&buf[14] = v13;
      v76 = "USDz SpatialAudio node '%@' unrecognized playbackMode '%@'. Defaulting to 'onceFromStart'.";
      v77 = v74;
      v78 = 22;
LABEL_114:
      _os_log_impl(&dword_224FE9000, v77, OS_LOG_TYPE_DEFAULT, v76, buf, v78);

    }
  }
  else if (v73)
  {
    v74 = v72;
    objc_msgSend(v10, "name");
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = v75;
    v76 = "USDz SpatialAudio node '%@' missing playbackMode. Defaulting to 'onceFromStart'.";
    v77 = v74;
    v78 = 12;
    goto LABEL_114;
  }
  v14 = 1;
LABEL_12:
  *((_DWORD *)a1 + 6) = v14;
  v87 = 0.0;
  if (a5)
  {
    objc_msgSend(v10, "property:", CFSTR("filePath"));
    v15 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v15, "resourcePath");
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v10, "property:", CFSTR("auralMode"));
    v12 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v12, "stringValue");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v17, "lowercaseString");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v19 = objc_msgSend(v18, "isEqualToString:", CFSTR("nonspatial"));

    re::usdimport::createAudioFileAssetForResourcePath(a3, v16, v19, (*((_DWORD *)a1 + 6) - 3) < 3, &v87, (re::DynamicString *)buf);
    v20 = *((_OWORD *)a1 + 3);
    *((_OWORD *)a1 + 3) = *(_OWORD *)buf;
    *(_OWORD *)buf = v20;
    v21 = *((_QWORD *)a1 + 8);
    *((_QWORD *)a1 + 8) = *(_QWORD *)&buf[16];
    *(_QWORD *)&buf[16] = v21;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);

  }
  v22 = v11;
  objc_msgSend(v10, "property:", CFSTR("gain"));
  v23 = (void *)objc_claimAutoreleasedReturnValue();

  if (v23)
  {
    objc_msgSend(v23, "floatValue");
    *((_DWORD *)a1 + 5) = v24;
    v86 = v23;
    *((_QWORD *)a1 + 4) = re::usdimport::createFloatKeyframeAnimationFromProperty(&v86, v22);

  }
  objc_msgSend(v10, "property:", CFSTR("mediaOffset"));
  v25 = (void *)objc_claimAutoreleasedReturnValue();

  if (v25)
  {
    objc_msgSend(v25, "floatValue");
    *((_DWORD *)a1 + 4) = v26;
  }
  objc_msgSend(v10, "property:", CFSTR("startTime"));
  v27 = (void *)objc_claimAutoreleasedReturnValue();

  v85 = v13;
  if (v27)
  {
    objc_msgSend(v27, "timeCodeValue");
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = v28;
    if (v28)
    {
      objc_msgSend(v28, "doubleValue");
      v30 = 0;
      v5 = v31 * v22;
      v32 = 1;
      goto LABEL_24;
    }
    v32 = 0;
  }
  else
  {
    v32 = 0;
    v29 = 0;
  }
  v30 = 1;
LABEL_24:
  objc_msgSend(v10, "property:", CFSTR("endTime"));
  v33 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v33)
  {
    v37 = 0;
LABEL_29:
    v83 = 1;
    goto LABEL_30;
  }
  objc_msgSend(v33, "timeCodeValue");
  v35 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v35)
  {
    v37 = 0;
    v29 = 0;
    goto LABEL_29;
  }
  v34 = (re *)objc_msgSend(v35, "doubleValue");
  v83 = 0;
  v22 = v36 * v22;
  v37 = 1;
  v29 = v35;
LABEL_30:
  v38 = re::globalAllocators(v34);
  v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38[2] + 32))(v38[2], 96, 8);
  *(_QWORD *)v39 = off_24ED1F350;
  *(_QWORD *)(v39 + 8) = 38;
  *(_BYTE *)(v39 + 16) = 0;
  *(_QWORD *)(v39 + 24) = 0;
  *(_QWORD *)(v39 + 32) = &str_110;
  *(_BYTE *)(v39 + 72) = 0;
  *(_QWORD *)v39 = off_24ED263B0;
  *(_QWORD *)(v39 + 80) = 0;
  *(_QWORD *)(v39 + 88) = 0;
  switch(*((_DWORD *)a1 + 6))
  {
    case 1:
      if (v30)
      {
        v41 = *re::pipelineLogObjects(v40);
        v40 = (re *)os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
        v5 = 0.0;
        if ((_DWORD)v40)
        {
          v42 = v41;
          objc_msgSend(v10, "name");
          v43 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v43;
          _os_log_impl(&dword_224FE9000, v42, OS_LOG_TYPE_DEFAULT, "USDz SpatialAudio node '%@' missing startTime.", buf, 0xCu);

        }
      }
      if ((v83 & 1) == 0)
      {
        v44 = *re::pipelineLogObjects(v40);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          v45 = v44;
          objc_msgSend(v10, "name");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v46;
          _os_log_impl(&dword_224FE9000, v45, OS_LOG_TYPE_DEFAULT, "USDz SpatialAudio node '%@' ignoring endTime for playbackMode = onceFromStart.", buf, 0xCu);

        }
      }
      v47 = v87 + v5;
      goto LABEL_38;
    case 2:
      if (v30)
      {
        v50 = *re::pipelineLogObjects(v40);
        v40 = (re *)os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT);
        v5 = 0.0;
        if ((_DWORD)v40)
        {
          v51 = v50;
          objc_msgSend(v10, "name");
          v52 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v52;
          _os_log_impl(&dword_224FE9000, v51, OS_LOG_TYPE_DEFAULT, "USDz SpatialAudio node '%@' missing startTime.", buf, 0xCu);

        }
      }
      if (v83)
      {
        v53 = *re::pipelineLogObjects(v40);
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        {
          v54 = v53;
          objc_msgSend(v10, "name");
          v55 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v55;
          _os_log_impl(&dword_224FE9000, v54, OS_LOG_TYPE_DEFAULT, "USDz SpatialAudio node '%@' missing endTime.", buf, 0xCu);

        }
        v56 = v84;
        if (*((_BYTE *)v84 + 24))
        {
          v22 = *((float *)v84 + 7);
          v37 = 1;
        }
        else
        {
          v37 = 0;
        }
      }
      else
      {
        v37 = 1;
        v56 = v84;
      }
      if (v22 > v5)
        goto LABEL_93;
      if (*((_BYTE *)v56 + 24))
      {
        v79 = v87;
        if (*((float *)v56 + 7) >= v79)
          v22 = v87;
        else
          v22 = *((float *)v56 + 7);
      }
      else
      {
        v47 = v87;
LABEL_38:
        v22 = v47;
      }
      goto LABEL_92;
    case 3:
      if (!v30)
        goto LABEL_77;
      v57 = *re::pipelineLogObjects(v40);
      v5 = 0.0;
      if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
        goto LABEL_77;
      v58 = v57;
      objc_msgSend(v10, "name");
      v59 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      *(_QWORD *)&buf[4] = v59;
      v60 = "USDz SpatialAudio node '%@' missing startTime.";
      goto LABEL_76;
    case 4:
      if (v30)
      {
        v61 = *re::pipelineLogObjects(v40);
        v40 = (re *)os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT);
        v5 = 0.0;
        if ((_DWORD)v40)
        {
          v62 = v61;
          objc_msgSend(v10, "name");
          v63 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 138412290;
          *(_QWORD *)&buf[4] = v63;
          _os_log_impl(&dword_224FE9000, v62, OS_LOG_TYPE_DEFAULT, "USDz SpatialAudio node '%@' missing startTime.", buf, 0xCu);

        }
      }
      if (!v83)
        goto LABEL_92;
      v64 = *re::pipelineLogObjects(v40);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      {
        v65 = v64;
        objc_msgSend(v10, "name");
        v66 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v66;
        _os_log_impl(&dword_224FE9000, v65, OS_LOG_TYPE_DEFAULT, "USDz SpatialAudio node '%@' missing endTime.", buf, 0xCu);

      }
      if (!*((_BYTE *)v84 + 24))
        goto LABEL_82;
      v22 = *((float *)v84 + 7);
      goto LABEL_92;
    case 5:
      v67 = v84;
      if (*((_BYTE *)v84 + 16))
      {
        v5 = *((float *)v84 + 5);
        if (!v32)
          goto LABEL_78;
      }
      else if (((v32 | v30) & 1) != 0)
      {
        goto LABEL_74;
      }
      if (!v30)
        goto LABEL_78;
LABEL_74:
      v70 = *re::pipelineLogObjects(v40);
      v5 = 0.0;
      if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
      {
        v58 = v70;
        objc_msgSend(v10, "name");
        v59 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = v59;
        v60 = "USDz SpatialAudio node '%@' missing stage startTime.";
LABEL_76:
        _os_log_impl(&dword_224FE9000, v58, OS_LOG_TYPE_DEFAULT, v60, buf, 0xCu);

      }
LABEL_77:
      v67 = v84;
LABEL_78:
      if (*((_BYTE *)v67 + 24))
      {
        v22 = *((float *)v67 + 7);
        if (!v37)
LABEL_92:
          v37 = 1;
      }
      else if (((v37 | v83) & 1) != 0)
      {
LABEL_82:
        v37 = 0;
      }
LABEL_93:
      LOBYTE(v30) = 0;
      v48 = *a1;
      v68 = *a1 != 0;
      goto LABEL_94;
    default:
      v48 = *a1;
      if (*a1)
        v49 = 0;
      else
        v49 = v30;
      if ((v49 & 1) != 0)
      {
        v48 = 0;
      }
      else
      {
        v68 = v48 != 0;
        if (*a1)
          v69 = v30;
        else
          v69 = 0;
        if (v69 == 1)
        {
          v48 = 0;
          *a1 = 0;
        }
        else
        {
LABEL_94:
          if (!v68 && (v30 & 1) == 0)
          {
            v48 = 1;
            *a1 = 1;
          }
          *((float *)a1 + 1) = v5;
        }
      }
      v80 = a1[8];
      if (v80 | v37)
      {
        if (v37 || !a1[8])
        {
          if (v37 && !a1[8])
          {
            v80 = 1;
            a1[8] = 1;
          }
          *((float *)a1 + 3) = v22;
        }
        else
        {
          v80 = 0;
          a1[8] = 0;
        }
      }
      v81 = 0.0;
      v82 = 0.0;
      if (v48)
        v82 = *((float *)a1 + 1);
      *(double *)(v39 + 80) = v82;
      if (v80)
        v81 = *((float *)a1 + 3);
      *(double *)(v39 + 88) = v81;
      *(_BYTE *)(v39 + 16) = 3;
      *((_QWORD *)a1 + 5) = v39;

      return;
  }
}

re::DynamicString *re::VFXAssetCompiler::getCurrentCompiledAssetInfo@<X0>(re::VFXAssetCompiler *this@<X0>, uint64_t a2@<X8>)
{
  re::VFXAsset *v3;
  const char *v5[2];

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v3 = (re::VFXAsset *)re::DynamicString::setCapacity((_QWORD *)(a2 + 8), 0);
  *(_QWORD *)a2 = 0x100000001;
  v5[0] = (const char *)*re::VFXAsset::assetType(v3);
  v5[1] = (const char *)strlen(v5[0]);
  return re::DynamicString::operator=((re::DynamicString *)(a2 + 8), (uint64_t)v5);
}

__guard re::VFXAssetCompiler::assetIntrospectionType(re::VFXAssetCompiler *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::VFXAsset>(void)::info = re::introspect_VFXAsset(0);
    }
  }
  return v2[287];
}

_QWORD *re::VFXAssetCompiler::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, re::VFXAssetCompiler::getSupportedExtensions(void)const::supportedExtensions);
  return re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, off_255801978);
}

re::DynamicString *re::VFXAssetCompiler::compile@<X0>(re::VFXAssetCompiler *this@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v7;
  uint64_t v8;
  _anonymous_namespace_ *v9;
  re::DynamicString *result;
  _QWORD v11[2];

  v7 = re::globalAllocators(this);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 80, 8);
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  v9 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v8, 0);
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  re::DynamicString::setCapacity((_QWORD *)(v8 + 32), 0);
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = -1;
  v11[0] = a2;
  v11[1] = strlen(a2);
  result = re::DynamicString::operator=((re::DynamicString *)v8, (uint64_t)v11);
  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = v8;
  return result;
}

re *re::VFXAssetCompiler::deleteAsset(re::VFXAssetCompiler *this, re::VFXAsset *a2)
{
  return re::internal::destroyPersistent<re::VFXAsset>((re *)"deleteAsset", 106, a2);
}

void re::VFXAssetCompiler::~VFXAssetCompiler(id *this)
{

}

{

  JUMPOUT(0x2276933B8);
}

uint64_t re::HMMaterialCompiler::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  _QWORD v3[2];

  v3[0] = re::HMMaterialCompiler::getSupportedExtensions(void)const::supportedExtensions;
  v3[1] = 1;
  return re::DynamicArray<char const*>::DynamicArray(a1, (uint64_t)v3);
}

uint64_t re::HMMaterialDefinitionCompiler::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  _QWORD v3[2];

  v3[0] = re::HMMaterialDefinitionCompiler::getSupportedExtensions(void)const::supportedExtensions;
  v3[1] = 1;
  return re::DynamicArray<char const*>::DynamicArray(a1, (uint64_t)v3);
}

uint64_t re::HMSceneCompiler::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  _QWORD v3[2];

  v3[0] = re::HMSceneCompiler::getSupportedExtensions(void)const::supportedExtensions;
  v3[1] = 1;
  return re::DynamicArray<char const*>::DynamicArray(a1, (uint64_t)v3);
}

uint64_t re::HMRenderGraphCompiler::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  _QWORD v3[2];

  v3[0] = re::HMRenderGraphCompiler::getSupportedExtensions(void)const::supportedExtensions;
  v3[1] = 1;
  return re::DynamicArray<char const*>::DynamicArray(a1, (uint64_t)v3);
}

uint64_t re::HMRenderGraphEmitterCompiler::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  _QWORD v3[2];

  v3[0] = re::HMRenderGraphEmitterCompiler::getSupportedExtensions(void)const::supportedExtensions;
  v3[1] = 1;
  return re::DynamicArray<char const*>::DynamicArray(a1, (uint64_t)v3);
}

void re::HMMaterialCompiler::~HMMaterialCompiler(re::HMMaterialCompiler *this)
{
  JUMPOUT(0x2276933B8);
}

re::DynamicString *re::HMAssetCompiler<re::MaterialCompiler>::getCurrentCompiledAssetInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return re::MaterialCompiler::getCurrentCompiledAssetInfo((re::MaterialCompiler *)(a1 + 8), a2);
}

__guard re::HMAssetCompiler<re::MaterialCompiler>::assetIntrospectionType(uint64_t a1)
{
  return re::MaterialCompiler::assetIntrospectionType((re::MaterialCompiler *)(a1 + 8));
}

uint64_t re::HMAssetCompiler<re::MaterialCompiler>::compile@<X0>(uint64_t a1@<X0>, re *a2@<X1>, re::AssetSerializationScheme *a3@<X3>, uint64_t a4@<X8>)
{
  const char **v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _anonymous_namespace_ *v14;
  unint64_t v15;
  re *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  re::DynamicString *v28;
  _QWORD v29[2];
  uint64_t v30;
  int v31;
  const char **v32;
  uint64_t *v33;
  unint64_t v34;
  re *v35;
  uint64_t v36;

  v34 = 0;
  v35 = 0;
  v36 = 0;
  re::DynamicString::setCapacity(&v33, 0);
  v32 = 0;
  v29[1] = 0;
  v30 = 0;
  v29[0] = 0;
  v31 = 0;
  re::DynamicArray<re::TransitionCondition *>::add(v29, re::MaterialCompiler::getSupportedExtensions(void)const::supportedExtensions);
  if (v30)
  {
    v8 = v32;
    v9 = 8 * v30;
    while (1)
    {
      re::pathsToFilesWithPathExtensionInDirectory(a2, *v8, (uint64_t)&v25);
      if (!(_BYTE)v25)
      {
        *(_QWORD *)&v21 = 100;
        *((_QWORD *)&v21 + 1) = &re::AssetErrorCategory(void)::instance;
        re::DynamicString::DynamicString((re::DynamicString *)&v22, (const re::DynamicString *)((char *)&v25 + 8));
        v11 = v22;
        *(_OWORD *)(a4 + 8) = v21;
        v12 = v23;
        v13 = v24;
        *(_BYTE *)a4 = 0;
        *(_OWORD *)(a4 + 24) = v11;
        *(_QWORD *)(a4 + 40) = v12;
        *(_QWORD *)(a4 + 48) = v13;
        v10 = 1;
        goto LABEL_9;
      }
      if (v27)
        break;
      re::Result<re::DynamicArray<re::DynamicString>,re::DynamicString>::~Result((uint64_t)&v25);
      ++v8;
      v9 -= 8;
      if (!v9)
        goto LABEL_6;
    }
    re::DynamicString::operator=((re::DynamicString *)&v33, v28);
    v10 = 2;
LABEL_9:
    re::Result<re::DynamicArray<re::DynamicString>,re::DynamicString>::~Result((uint64_t)&v25);
  }
  else
  {
LABEL_6:
    v10 = 2;
  }
  v14 = (_anonymous_namespace_ *)v29[0];
  if (v29[0] && v32)
    v14 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v29[0] + 40))();
  if (v10 == 2)
  {
    v15 = v34 >> 1;
    if ((v34 & 1) == 0)
      v15 = v34 >> 1;
    if (v15)
    {
      if ((v34 & 1) != 0)
        v16 = v35;
      else
        v16 = (re *)((char *)&v34 + 1);
      re::MaterialCompiler::compile((re::MaterialCompiler *)(a1 + 8), v16, a3, a4);
    }
    else
    {
      v17 = v25;
      v18 = v26;
      v19 = v27;
      *(_BYTE *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 100;
      *(_QWORD *)(a4 + 16) = &re::AssetErrorCategory(void)::instance;
      *(_OWORD *)(a4 + 24) = v17;
      *(_QWORD *)(a4 + 40) = v18;
      *(_QWORD *)(a4 + 48) = v19;
    }
  }
  result = (uint64_t)v33;
  if (v33)
  {
    if ((v34 & 1) != 0)
      return (*(uint64_t (**)(void))(*v33 + 40))();
  }
  return result;
}

re *re::HMAssetCompiler<re::MaterialCompiler>::deleteAsset(uint64_t a1, void (***a2)(_QWORD))
{
  return re::MaterialCompiler::deleteAsset((re *)(a1 + 8), a2);
}

void re::HMMaterialDefinitionCompiler::~HMMaterialDefinitionCompiler(re::HMMaterialDefinitionCompiler *this)
{
  JUMPOUT(0x2276933B8);
}

re::DynamicString *re::HMAssetCompiler<re::MaterialDefinitionCompiler>::getCurrentCompiledAssetInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return re::MaterialDefinitionCompiler::getCurrentCompiledAssetInfo((re::MaterialDefinitionCompiler *)(a1 + 8), a2);
}

__guard re::HMAssetCompiler<re::MaterialDefinitionCompiler>::assetIntrospectionType(uint64_t a1)
{
  return re::MaterialDefinitionCompiler::assetIntrospectionType((re::MaterialDefinitionCompiler *)(a1 + 8));
}

uint64_t re::HMAssetCompiler<re::MaterialDefinitionCompiler>::compile@<X0>(uint64_t a1@<X0>, re *a2@<X1>, re::AssetSerializationScheme *a3@<X3>, uint64_t a4@<X8>)
{
  const char **v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _anonymous_namespace_ *v14;
  unint64_t v15;
  re::MaterialDefinitionFile *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  re::DynamicString *v28;
  _QWORD v29[2];
  uint64_t v30;
  int v31;
  const char **v32;
  uint64_t *v33;
  unint64_t v34;
  re::MaterialDefinitionFile *v35;
  uint64_t v36;

  v34 = 0;
  v35 = 0;
  v36 = 0;
  re::DynamicString::setCapacity(&v33, 0);
  v32 = 0;
  v29[1] = 0;
  v30 = 0;
  v29[0] = 0;
  v31 = 0;
  re::DynamicArray<re::TransitionCondition *>::add(v29, &re::MaterialDefinitionCompiler::getSupportedExtensions(void)const::supportedExtensions);
  if (v30)
  {
    v8 = v32;
    v9 = 8 * v30;
    while (1)
    {
      re::pathsToFilesWithPathExtensionInDirectory(a2, *v8, (uint64_t)&v25);
      if (!(_BYTE)v25)
      {
        *(_QWORD *)&v21 = 100;
        *((_QWORD *)&v21 + 1) = &re::AssetErrorCategory(void)::instance;
        re::DynamicString::DynamicString((re::DynamicString *)&v22, (const re::DynamicString *)((char *)&v25 + 8));
        v11 = v22;
        *(_OWORD *)(a4 + 8) = v21;
        v12 = v23;
        v13 = v24;
        *(_BYTE *)a4 = 0;
        *(_OWORD *)(a4 + 24) = v11;
        *(_QWORD *)(a4 + 40) = v12;
        *(_QWORD *)(a4 + 48) = v13;
        v10 = 1;
        goto LABEL_9;
      }
      if (v27)
        break;
      re::Result<re::DynamicArray<re::DynamicString>,re::DynamicString>::~Result((uint64_t)&v25);
      ++v8;
      v9 -= 8;
      if (!v9)
        goto LABEL_6;
    }
    re::DynamicString::operator=((re::DynamicString *)&v33, v28);
    v10 = 2;
LABEL_9:
    re::Result<re::DynamicArray<re::DynamicString>,re::DynamicString>::~Result((uint64_t)&v25);
  }
  else
  {
LABEL_6:
    v10 = 2;
  }
  v14 = (_anonymous_namespace_ *)v29[0];
  if (v29[0] && v32)
    v14 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v29[0] + 40))();
  if (v10 == 2)
  {
    v15 = v34 >> 1;
    if ((v34 & 1) == 0)
      v15 = v34 >> 1;
    if (v15)
    {
      if ((v34 & 1) != 0)
        v16 = v35;
      else
        v16 = (re::MaterialDefinitionFile *)((char *)&v34 + 1);
      re::MaterialDefinitionCompiler::compile((re::MaterialDefinitionCompiler *)(a1 + 8), v16, a3, a4);
    }
    else
    {
      v17 = v25;
      v18 = v26;
      v19 = v27;
      *(_BYTE *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 100;
      *(_QWORD *)(a4 + 16) = &re::AssetErrorCategory(void)::instance;
      *(_OWORD *)(a4 + 24) = v17;
      *(_QWORD *)(a4 + 40) = v18;
      *(_QWORD *)(a4 + 48) = v19;
    }
  }
  result = (uint64_t)v33;
  if (v33)
  {
    if ((v34 & 1) != 0)
      return (*(uint64_t (**)(void))(*v33 + 40))();
  }
  return result;
}

re *re::HMAssetCompiler<re::MaterialDefinitionCompiler>::deleteAsset(uint64_t a1, void (***a2)(_QWORD))
{
  return re::MaterialDefinitionCompiler::deleteAsset((re *)(a1 + 8), a2);
}

void re::HMSceneCompiler::~HMSceneCompiler(re::HMSceneCompiler *this)
{
  JUMPOUT(0x2276933B8);
}

re::DynamicString *re::HMAssetCompiler<re::SceneCompiler>::getCurrentCompiledAssetInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return re::SceneCompiler::getCurrentCompiledAssetInfo((re::SceneCompiler *)(a1 + 8), a2);
}

__guard re::HMAssetCompiler<re::SceneCompiler>::assetIntrospectionType(uint64_t a1)
{
  return re::SceneCompiler::assetIntrospectionType((re::SceneCompiler *)(a1 + 8));
}

uint64_t re::HMAssetCompiler<re::SceneCompiler>::compile@<X0>(uint64_t a1@<X0>, re *a2@<X1>, re::AssetSerializationScheme *a3@<X3>, uint64_t a4@<X8>)
{
  const char **v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _anonymous_namespace_ *v14;
  unint64_t v15;
  re::AssetUtilities *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  re::DynamicString *v28;
  _QWORD v29[2];
  uint64_t v30;
  int v31;
  const char **v32;
  uint64_t *v33;
  unint64_t v34;
  re::AssetUtilities *v35;
  uint64_t v36;

  v34 = 0;
  v35 = 0;
  v36 = 0;
  re::DynamicString::setCapacity(&v33, 0);
  v32 = 0;
  v29[1] = 0;
  v30 = 0;
  v29[0] = 0;
  v31 = 0;
  re::DynamicArray<re::TransitionCondition *>::add(v29, re::SceneCompiler::getSupportedExtensions(void)const::supportedExtensions);
  if (v30)
  {
    v8 = v32;
    v9 = 8 * v30;
    while (1)
    {
      re::pathsToFilesWithPathExtensionInDirectory(a2, *v8, (uint64_t)&v25);
      if (!(_BYTE)v25)
      {
        *(_QWORD *)&v21 = 100;
        *((_QWORD *)&v21 + 1) = &re::AssetErrorCategory(void)::instance;
        re::DynamicString::DynamicString((re::DynamicString *)&v22, (const re::DynamicString *)((char *)&v25 + 8));
        v11 = v22;
        *(_OWORD *)(a4 + 8) = v21;
        v12 = v23;
        v13 = v24;
        *(_BYTE *)a4 = 0;
        *(_OWORD *)(a4 + 24) = v11;
        *(_QWORD *)(a4 + 40) = v12;
        *(_QWORD *)(a4 + 48) = v13;
        v10 = 1;
        goto LABEL_9;
      }
      if (v27)
        break;
      re::Result<re::DynamicArray<re::DynamicString>,re::DynamicString>::~Result((uint64_t)&v25);
      ++v8;
      v9 -= 8;
      if (!v9)
        goto LABEL_6;
    }
    re::DynamicString::operator=((re::DynamicString *)&v33, v28);
    v10 = 2;
LABEL_9:
    re::Result<re::DynamicArray<re::DynamicString>,re::DynamicString>::~Result((uint64_t)&v25);
  }
  else
  {
LABEL_6:
    v10 = 2;
  }
  v14 = (_anonymous_namespace_ *)v29[0];
  if (v29[0] && v32)
    v14 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v29[0] + 40))();
  if (v10 == 2)
  {
    v15 = v34 >> 1;
    if ((v34 & 1) == 0)
      v15 = v34 >> 1;
    if (v15)
    {
      if ((v34 & 1) != 0)
        v16 = v35;
      else
        v16 = (re::AssetUtilities *)((char *)&v34 + 1);
      re::SceneCompiler::compile((re::SceneCompiler *)(a1 + 8), v16, a3, a4);
    }
    else
    {
      v17 = v25;
      v18 = v26;
      v19 = v27;
      *(_BYTE *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 100;
      *(_QWORD *)(a4 + 16) = &re::AssetErrorCategory(void)::instance;
      *(_OWORD *)(a4 + 24) = v17;
      *(_QWORD *)(a4 + 40) = v18;
      *(_QWORD *)(a4 + 48) = v19;
    }
  }
  result = (uint64_t)v33;
  if (v33)
  {
    if ((v34 & 1) != 0)
      return (*(uint64_t (**)(void))(*v33 + 40))();
  }
  return result;
}

re *re::HMAssetCompiler<re::SceneCompiler>::deleteAsset(uint64_t a1, uint64_t a2)
{
  return re::internal::destroyPersistent<re::SceneAsset>((re *)"deleteAsset", 65, a2);
}

void re::HMRenderGraphCompiler::~HMRenderGraphCompiler(re::HMRenderGraphCompiler *this)
{
  JUMPOUT(0x2276933B8);
}

re::DynamicString *re::HMAssetCompiler<re::RenderGraphCompiler>::getCurrentCompiledAssetInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return re::RenderGraphCompiler::getCurrentCompiledAssetInfo((re::RenderGraphCompiler *)(a1 + 8), a2);
}

__guard re::HMAssetCompiler<re::RenderGraphCompiler>::assetIntrospectionType(uint64_t a1)
{
  return re::RenderGraphCompiler::assetIntrospectionType((re::RenderGraphCompiler *)(a1 + 8));
}

uint64_t re::HMAssetCompiler<re::RenderGraphCompiler>::compile@<X0>(uint64_t a1@<X0>, re *a2@<X1>, re::AssetSerializationScheme *a3@<X3>, uint64_t a4@<X8>)
{
  const char **v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _anonymous_namespace_ *v14;
  unint64_t v15;
  re::FileStreamReader *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  re::DynamicString *v28;
  _QWORD v29[2];
  uint64_t v30;
  int v31;
  const char **v32;
  uint64_t *v33;
  unint64_t v34;
  re::FileStreamReader *v35;
  uint64_t v36;

  v34 = 0;
  v35 = 0;
  v36 = 0;
  re::DynamicString::setCapacity(&v33, 0);
  v32 = 0;
  v29[1] = 0;
  v30 = 0;
  v29[0] = 0;
  v31 = 0;
  re::DynamicArray<re::TransitionCondition *>::add(v29, re::RenderGraphCompiler::getSupportedExtensions(void)const::supportedExtensions);
  re::DynamicArray<re::TransitionCondition *>::add(v29, off_255801748);
  if (v30)
  {
    v8 = v32;
    v9 = 8 * v30;
    while (1)
    {
      re::pathsToFilesWithPathExtensionInDirectory(a2, *v8, (uint64_t)&v25);
      if (!(_BYTE)v25)
      {
        *(_QWORD *)&v21 = 100;
        *((_QWORD *)&v21 + 1) = &re::AssetErrorCategory(void)::instance;
        re::DynamicString::DynamicString((re::DynamicString *)&v22, (const re::DynamicString *)((char *)&v25 + 8));
        v11 = v22;
        *(_OWORD *)(a4 + 8) = v21;
        v12 = v23;
        v13 = v24;
        *(_BYTE *)a4 = 0;
        *(_OWORD *)(a4 + 24) = v11;
        *(_QWORD *)(a4 + 40) = v12;
        *(_QWORD *)(a4 + 48) = v13;
        v10 = 1;
        goto LABEL_9;
      }
      if (v27)
        break;
      re::Result<re::DynamicArray<re::DynamicString>,re::DynamicString>::~Result((uint64_t)&v25);
      ++v8;
      v9 -= 8;
      if (!v9)
        goto LABEL_6;
    }
    re::DynamicString::operator=((re::DynamicString *)&v33, v28);
    v10 = 2;
LABEL_9:
    re::Result<re::DynamicArray<re::DynamicString>,re::DynamicString>::~Result((uint64_t)&v25);
  }
  else
  {
LABEL_6:
    v10 = 2;
  }
  v14 = (_anonymous_namespace_ *)v29[0];
  if (v29[0] && v32)
    v14 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v29[0] + 40))();
  if (v10 == 2)
  {
    v15 = v34 >> 1;
    if ((v34 & 1) == 0)
      v15 = v34 >> 1;
    if (v15)
    {
      if ((v34 & 1) != 0)
        v16 = v35;
      else
        v16 = (re::FileStreamReader *)((char *)&v34 + 1);
      re::RenderGraphCompiler::compile((re::RenderGraphCompiler *)(a1 + 8), v16, a3, a4);
    }
    else
    {
      v17 = v25;
      v18 = v26;
      v19 = v27;
      *(_BYTE *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 100;
      *(_QWORD *)(a4 + 16) = &re::AssetErrorCategory(void)::instance;
      *(_OWORD *)(a4 + 24) = v17;
      *(_QWORD *)(a4 + 40) = v18;
      *(_QWORD *)(a4 + 48) = v19;
    }
  }
  result = (uint64_t)v33;
  if (v33)
  {
    if ((v34 & 1) != 0)
      return (*(uint64_t (**)(void))(*v33 + 40))();
  }
  return result;
}

re *re::HMAssetCompiler<re::RenderGraphCompiler>::deleteAsset(uint64_t a1, void (***a2)(_QWORD))
{
  return re::RenderGraphCompiler::deleteAsset((re *)(a1 + 8), a2);
}

void re::HMRenderGraphEmitterCompiler::~HMRenderGraphEmitterCompiler(re::HMRenderGraphEmitterCompiler *this)
{
  JUMPOUT(0x2276933B8);
}

re::DynamicString *re::HMAssetCompiler<re::RenderGraphEmitterCompiler>::getCurrentCompiledAssetInfo@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return re::RenderGraphEmitterCompiler::getCurrentCompiledAssetInfo((re::RenderGraphEmitterCompiler *)(a1 + 8), a2);
}

__guard re::HMAssetCompiler<re::RenderGraphEmitterCompiler>::assetIntrospectionType(uint64_t a1)
{
  return re::RenderGraphEmitterCompiler::assetIntrospectionType((re::RenderGraphEmitterCompiler *)(a1 + 8));
}

uint64_t re::HMAssetCompiler<re::RenderGraphEmitterCompiler>::compile@<X0>(uint64_t a1@<X0>, re *a2@<X1>, re::AssetSerializationScheme *a3@<X3>, uint64_t a4@<X8>)
{
  const char **v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _anonymous_namespace_ *v14;
  unint64_t v15;
  re::AssetUtilities *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  re::DynamicString *v28;
  _QWORD v29[2];
  uint64_t v30;
  int v31;
  const char **v32;
  uint64_t *v33;
  unint64_t v34;
  re::AssetUtilities *v35;
  uint64_t v36;

  v34 = 0;
  v35 = 0;
  v36 = 0;
  re::DynamicString::setCapacity(&v33, 0);
  v32 = 0;
  v29[1] = 0;
  v30 = 0;
  v29[0] = 0;
  v31 = 0;
  re::DynamicArray<re::TransitionCondition *>::add(v29, &re::RenderGraphEmitterCompiler::getSupportedExtensions(void)const::supportedExtensions);
  if (v30)
  {
    v8 = v32;
    v9 = 8 * v30;
    while (1)
    {
      re::pathsToFilesWithPathExtensionInDirectory(a2, *v8, (uint64_t)&v25);
      if (!(_BYTE)v25)
      {
        *(_QWORD *)&v21 = 100;
        *((_QWORD *)&v21 + 1) = &re::AssetErrorCategory(void)::instance;
        re::DynamicString::DynamicString((re::DynamicString *)&v22, (const re::DynamicString *)((char *)&v25 + 8));
        v11 = v22;
        *(_OWORD *)(a4 + 8) = v21;
        v12 = v23;
        v13 = v24;
        *(_BYTE *)a4 = 0;
        *(_OWORD *)(a4 + 24) = v11;
        *(_QWORD *)(a4 + 40) = v12;
        *(_QWORD *)(a4 + 48) = v13;
        v10 = 1;
        goto LABEL_9;
      }
      if (v27)
        break;
      re::Result<re::DynamicArray<re::DynamicString>,re::DynamicString>::~Result((uint64_t)&v25);
      ++v8;
      v9 -= 8;
      if (!v9)
        goto LABEL_6;
    }
    re::DynamicString::operator=((re::DynamicString *)&v33, v28);
    v10 = 2;
LABEL_9:
    re::Result<re::DynamicArray<re::DynamicString>,re::DynamicString>::~Result((uint64_t)&v25);
  }
  else
  {
LABEL_6:
    v10 = 2;
  }
  v14 = (_anonymous_namespace_ *)v29[0];
  if (v29[0] && v32)
    v14 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v29[0] + 40))();
  if (v10 == 2)
  {
    v15 = v34 >> 1;
    if ((v34 & 1) == 0)
      v15 = v34 >> 1;
    if (v15)
    {
      if ((v34 & 1) != 0)
        v16 = v35;
      else
        v16 = (re::AssetUtilities *)((char *)&v34 + 1);
      re::RenderGraphEmitterCompiler::compile((re::RenderGraphEmitterCompiler *)(a1 + 8), v16, a3, a4);
    }
    else
    {
      v17 = v25;
      v18 = v26;
      v19 = v27;
      *(_BYTE *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 100;
      *(_QWORD *)(a4 + 16) = &re::AssetErrorCategory(void)::instance;
      *(_OWORD *)(a4 + 24) = v17;
      *(_QWORD *)(a4 + 40) = v18;
      *(_QWORD *)(a4 + 48) = v19;
    }
  }
  result = (uint64_t)v33;
  if (v33)
  {
    if ((v34 & 1) != 0)
      return (*(uint64_t (**)(void))(*v33 + 40))();
  }
  return result;
}

re *re::HMAssetCompiler<re::RenderGraphEmitterCompiler>::deleteAsset(uint64_t a1, void (***a2)(_QWORD))
{
  return re::RenderGraphEmitterCompiler::deleteAsset((re *)(a1 + 8), a2);
}

re::DynamicString *re::SceneCompiler::getCurrentCompiledAssetInfo@<X0>(re::SceneCompiler *this@<X0>, uint64_t a2@<X8>)
{
  re::SceneAsset *v3;
  const char *v5[2];

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v3 = (re::SceneAsset *)re::DynamicString::setCapacity((_QWORD *)(a2 + 8), 0);
  *(_QWORD *)a2 = 0x100000001;
  v5[0] = (const char *)*re::SceneAsset::assetType(v3);
  v5[1] = (const char *)strlen(v5[0]);
  return re::DynamicString::operator=((re::DynamicString *)(a2 + 8), (uint64_t)v5);
}

__guard re::SceneCompiler::assetIntrospectionType(re::SceneCompiler *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::SceneAsset>(void)::info = re::introspect_SceneAsset(0);
    }
  }
  return v2[17];
}

_QWORD *re::SceneCompiler::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, re::SceneCompiler::getSupportedExtensions(void)const::supportedExtensions);
}

re *re::SceneCompiler::compile@<X0>(re::SceneCompiler *this@<X0>, re::AssetUtilities *a2@<X1>, re::AssetSerializationScheme *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  re *result;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[8];
  re *v21;
  char v22;

  v8 = re::globalAllocators(this);
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 40, 8);
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_QWORD *)(v9 + 32) = 0;
  if ((v10 & 1) == 0
  {
    re::introspect<re::ecs2::SceneAssetData>(void)::info = re::ecs2::introspect_SceneAssetData(0);
  }
  result = (re *)re::AssetUtilities::readSourceJson(a2, (const char *)v9, re::introspect<re::ecs2::SceneAssetData>(void)::info, a3, (uint64_t)v20);
  if (v20[0])
  {
    *(_BYTE *)a4 = 1;
    *(_QWORD *)(a4 + 8) = v9;
  }
  else
  {
    v12 = re::globalAllocators(result)[2];
    re::DynamicArray<re::ecs2::EntityAssetData>::deinit(v9);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, v9);
    *(_QWORD *)&v16 = 100;
    *((_QWORD *)&v16 + 1) = &re::AssetErrorCategory(void)::instance;
    result = re::DynamicString::DynamicString((re::DynamicString *)&v17, (const re::DynamicString *)&v21);
    v13 = v17;
    *(_OWORD *)(a4 + 8) = v16;
    v14 = v18;
    v15 = v19;
    *(_BYTE *)a4 = 0;
    *(_OWORD *)(a4 + 24) = v13;
    *(_QWORD *)(a4 + 40) = v14;
    *(_QWORD *)(a4 + 48) = v15;
    if (!v20[0])
    {
      result = v21;
      if (v21)
      {
        if ((v22 & 1) != 0)
          return (re *)(*(uint64_t (**)(void))(*(_QWORD *)v21 + 40))();
      }
    }
  }
  return result;
}

re *re::SceneCompiler::deleteAsset(re::SceneCompiler *this, uint64_t a2)
{
  return re::internal::destroyPersistent<re::SceneAsset>((re *)"deleteAsset", 65, a2);
}

void re::SceneCompiler::~SceneCompiler(re::SceneCompiler *this)
{
  JUMPOUT(0x2276933B8);
}

re::DynamicString *re::RigCompiler::getCurrentCompiledAssetInfo@<X0>(re::RigCompiler *this@<X0>, _QWORD *a2@<X8>)
{
  re::DynamicString *v2;
  _anonymous_namespace_ *v3;
  const char *v4;

  *a2 = 0x100000001;
  v2 = (re::DynamicString *)(a2 + 1);
  v3 = (_anonymous_namespace_ *)re::RigAsset::assetType(this);
  v4 = *(const char **)v3;
}

__guard re::RigCompiler::assetIntrospectionType(re::RigCompiler *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::RigAsset>(void)::info = re::introspect_RigAsset(0);
    }
  }
  return v2[77];
}

uint64_t re::RigCompiler::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  _QWORD v3[2];
  const char *v4;

  v4 = "rerig";
  v3[0] = &v4;
  v3[1] = 1;
  return re::DynamicArray<char const*>::DynamicArray(a1, (uint64_t)v3);
}

_QWORD *re::RigCompiler::compile@<X0>(re::RigCompiler *this@<X0>, char *a2@<X1>, uint64_t *a3@<X2>, re::AssetSerializationScheme *a4@<X3>, uint64_t a5@<X8>)
{
  int *v5;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  _anonymous_namespace_ *SourceJson;
  uint64_t v21;
  const re::RigDefinition *v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  __int128 v31;
  __int128 v32;
  _QWORD *result;
  uint64_t v34;
  int v35;
  _BYTE v36[14];
  __int16 v37;
  _BYTE v38[18];
  _BYTE *v39;
  uint64_t v40;
  _QWORD v41[3];
  _QWORD *v42;
  _BYTE v43[12];
  __int16 v44;
  int v45;
  __int16 v46;
  re::AssetSerializationScheme *v47;
  __int16 v48;
  int *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v10 = re::globalAllocators(this);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10[2] + 32))(v10[2], 120, 8);
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_QWORD *)(v11 + 112) = 0;
  v42 = v41;
  v40 = v11;
  v41[0] = &off_24ED44AA8;
  v12 = strrchr(a2, 46);
  if (strcasecmp(v12 + 1, "rerig"))
  {
    re::DynamicString::format((re::DynamicString *)"Invalid Asset Path: %s.", (re::DynamicString *)&v50, a2);
    v13 = v50;
    v15 = *((_QWORD *)&v51 + 1);
    v14 = v51;
    *(_BYTE *)a5 = 0;
    v16 = 200;
    goto LABEL_3;
  }
  if ((v18 & 1) == 0)
    goto LABEL_47;
  while (1)
  {
    v19 = *((_QWORD *)v5 + 77);
    v5 = &v35;
    SourceJson = (_anonymous_namespace_ *)re::AssetUtilities::readSourceJson((re::AssetUtilities *)a2, (const char *)v11, v19, a4, (uint64_t)&v35);
    if (!(_BYTE)v35)
    {
      *(_QWORD *)&v50 = 100;
      *((_QWORD *)&v50 + 1) = &re::AssetErrorCategory(void)::instance;
      re::DynamicString::DynamicString((re::DynamicString *)&v51, (const re::DynamicString *)&v36[4]);
      v26 = v51;
      *(_OWORD *)(a5 + 8) = v50;
      v27 = v52;
      *(_BYTE *)a5 = 0;
      *(_OWORD *)(a5 + 24) = v26;
      *(_OWORD *)(a5 + 40) = v27;
      if ((_BYTE)v35)
        goto LABEL_4;
      v28 = *(_QWORD *)&v36[4];
      if (!*(_QWORD *)&v36[4] || (v36[12] & 1) == 0)
        goto LABEL_4;
      v29 = *(_BYTE **)&v38[4];
      goto LABEL_33;
    }
    if (a3 && !*(_BYTE *)a3)
      break;
    v21 = v40;
    a2 = *(char **)(v40 + 16);
    if (!a2)
      goto LABEL_17;
    v11 = 0;
    a4 = 0;
    do
    {
      v5 = *(int **)(v40 + 16);
      if (v5 <= (int *)a4)
      {
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v50 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v43 = 136315906;
        *(_QWORD *)&v43[4] = "operator[]";
        v44 = 1024;
        v45 = 789;
        v46 = 2048;
        v47 = a4;
        v48 = 2048;
        v49 = v5;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_45:
        *(_QWORD *)v43 = 0;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v50 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v35 = 136315906;
        *(_QWORD *)v36 = "operator[]";
        *(_WORD *)&v36[8] = 1024;
        *(_DWORD *)&v36[10] = 789;
        v37 = 2048;
        *(_QWORD *)v38 = a3;
        *(_WORD *)&v38[8] = 2048;
        *(_QWORD *)&v38[10] = a4;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      if (!(_BYTE)v35)
      {
        if ((v38[12] & 1) != 0)
          v30 = v39;
        else
          v30 = &v38[13];
        re::DynamicString::format((re::DynamicString *)"Rig %zu Validation Failed: %s.", (re::DynamicString *)&v50, a4, v30);
        v31 = v50;
        v32 = v51;
        *(_BYTE *)a5 = 0;
        *(_QWORD *)(a5 + 8) = 100;
        *(_QWORD *)(a5 + 16) = &re::AssetErrorCategory(void)::instance;
        *(_OWORD *)(a5 + 24) = v31;
        *(_OWORD *)(a5 + 40) = v32;
        if ((_BYTE)v35)
          goto LABEL_4;
        v28 = *(_QWORD *)&v38[4];
        if (!*(_QWORD *)&v38[4] || (v38[12] & 1) == 0)
          goto LABEL_4;
        v29 = v39;
LABEL_33:
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v28 + 40))(v28, v29);
        goto LABEL_4;
      }
      a4 = (re::AssetSerializationScheme *)((char *)a4 + 1);
      v11 += 1144;
    }
    while (a2 != (char *)a4);
    v21 = v40;
LABEL_17:
    a4 = *(re::AssetSerializationScheme **)(v21 + 96);
    if (!a4)
      goto LABEL_35;
    a3 = 0;
    v23 = (unsigned int *)(*(_QWORD *)(v21 + 112) + 56);
    while (1)
    {
      v25 = *v23;
      v23 += 16;
      v24 = v25;
      if ((unint64_t)a2 <= v25)
        break;
      a3 = (uint64_t *)((char *)a3 + 1);
      if (a4 == (re::AssetSerializationScheme *)a3)
        goto LABEL_35;
    }
    if (a4 <= (re::AssetSerializationScheme *)a3)
      goto LABEL_45;
    re::DynamicString::format((re::DynamicString *)"Mesh Rig %zu uses an invalid rig: %u.", (re::DynamicString *)&v50, a3, v24);
    v13 = v50;
    v15 = *((_QWORD *)&v51 + 1);
    v14 = v51;
    *(_BYTE *)a5 = 0;
    v16 = 100;
LABEL_3:
    *(_QWORD *)(a5 + 8) = v16;
    *(_QWORD *)(a5 + 16) = &re::AssetErrorCategory(void)::instance;
    *(_OWORD *)(a5 + 24) = v13;
    *(_QWORD *)(a5 + 40) = v14;
    *(_QWORD *)(a5 + 48) = v15;
LABEL_4:
    v17 = v40;
    v40 = 0;
    if (!v17)
      goto LABEL_36;
    *(_QWORD *)&v50 = v17;
    if (v42)
    {
      (*(void (**)(_QWORD *, __int128 *))(*v42 + 48))(v42, &v50);
      goto LABEL_36;
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_47:
    {
      *((_QWORD *)v5 + 77) = re::introspect_RigAsset(0);
    }
  }
  v21 = v40;
LABEL_35:
  *(_BYTE *)a5 = 1;
  *(_QWORD *)(a5 + 8) = v21;
  v40 = 0;
LABEL_36:
  result = v42;
  if (v42 == v41)
  {
    v34 = 4;
    result = v41;
  }
  else
  {
    if (!v42)
      return result;
    v34 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v34))();
}

re *re::RigCompiler::deleteAsset(re::RigCompiler *this, uint64_t a2)
{
  return re::internal::destroyPersistent<re::RigAsset>((re *)"deleteAsset", 79, a2);
}

void re::RigCompiler::~RigCompiler(re::RigCompiler *this)
{
  JUMPOUT(0x2276933B8);
}

void std::__function::__func<re::RigCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0,std::allocator<re::RigCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0>,void ()(re::RigAsset *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::RigCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0,std::allocator<re::RigCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0>,void ()(re::RigAsset *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED44AA8;
  return result;
}

void std::__function::__func<re::RigCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0,std::allocator<re::RigCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0>,void ()(re::RigAsset *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED44AA8;
}

re *std::__function::__func<re::RigCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0,std::allocator<re::RigCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0>,void ()(re::RigAsset *)>::operator()(uint64_t a1, uint64_t *a2)
{
  return re::internal::destroyPersistent<re::RigAsset>((re *)"operator()", 34, *a2);
}

uint64_t std::__function::__func<re::RigCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0,std::allocator<re::RigCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0>,void ()(re::RigAsset *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::RigCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0,std::allocator<re::RigCompiler::compile(char const*,void *,re::AssetSerializationScheme &)::$_0>,void ()(re::RigAsset *)>::target_type()
{
}

re::DynamicString *re::LUTTextureCompiler::getCurrentCompiledAssetInfo@<X0>(re::LUTTextureCompiler *this@<X0>, uint64_t a2@<X8>)
{
  re::TextureAsset *v3;
  const char *v5[2];

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v3 = (re::TextureAsset *)re::DynamicString::setCapacity((_QWORD *)(a2 + 8), 0);
  *(_QWORD *)a2 = 0x100000001;
  v5[0] = (const char *)*re::TextureAsset::assetType(v3);
  v5[1] = (const char *)strlen(v5[0]);
  return re::DynamicString::operator=((re::DynamicString *)(a2 + 8), (uint64_t)v5);
}

__guard re::LUTTextureCompiler::assetIntrospectionType(re::LUTTextureCompiler *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::TextureAsset>(void)::info = re::introspect_TextureAsset(0);
    }
  }
  return v2[449];
}

_QWORD *re::LUTTextureCompiler::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, re::LUTTextureCompiler::getSupportedExtensions(void)const::supportedExtensions);
}

void re::LUTTextureCompiler::compile(id *this@<X0>, re::mtl::Device *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, int16x8_t a5@<Q0>)
{
  char v8;
  int v9;
  int v10;
  NSObject *v11;
  _BOOL8 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  _anonymous_namespace_ *v17;
  uint64_t TextureAsset;
  uint64_t v19;
  uint64_t v20;
  char v21;
  re::LUTTextureCompiler *v22;
  void *v23;
  int16x8_t v24;
  __int16 v25;
  char v26;
  __int16 v27;
  char v28;
  unsigned __int32 v29;
  char v30;
  __int16 v31;
  char v32;
  int v33;
  _BYTE v34[13];
  __int16 v35;
  char v36;
  int v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE buf[24];
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  unsigned int v50;
  id v51;
  _QWORD v52[3];

  v52[2] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v52[0] = 0;
    *(_QWORD *)((char *)v52 + 5) = 0;
    if (a3)
    {
      a5.i32[0] = *(_DWORD *)a3;
      v24 = (int16x8_t)vmovl_u8(*(uint8x8_t *)a5.i8);
      v8 = a3[4];
      v27 = *(_WORD *)(a3 + 5);
      v28 = a3[7];
      v9 = *((_DWORD *)a3 + 2);
      v52[0] = *(_QWORD *)(a3 + 12);
      *(_QWORD *)((char *)v52 + 5) = *(_QWORD *)(a3 + 17);
      v25 = *(_WORD *)(a3 + 25);
      v26 = a3[27];
      v10 = *((_DWORD *)a3 + 7);
    }
    else
    {
      a5.i64[0] = 0x1000000010001;
      v24 = a5;
      v10 = 0;
      v8 = 1;
      v9 = 1;
    }
    re::load3DTextureFromLutDataFile(this + 1, a2, a3, (uint64_t)buf);
    if (v50)
    {
      v22 = (re::LUTTextureCompiler *)std::__throw_bad_variant_access[abi:nn180100]();
      re::LUTTextureCompiler::deleteAsset(v22, v23);
    }
    else
    {
      v16 = *(id *)&buf[8];

      if (v50 != -1)
        v17 = (_anonymous_namespace_ *)((uint64_t (*)(__int128 *, _BYTE *))*(&off_24ED44B90 + v50))(&v38, &buf[8]);
      if (v16)
      {
        buf[0] = 0;
        *(_QWORD *)&buf[8] = v16;
        v50 = 0;
        v51 = 0;
        v29 = vmovn_s16(v24).u32[0];
        v30 = v8;
        v31 = v27;
        v32 = v28;
        v33 = v9;
        *(_QWORD *)v34 = v52[0];
        *(_QWORD *)&v34[5] = *(_QWORD *)((char *)v52 + 5);
        v35 = v25;
        v36 = v26;
        v37 = v10;
        TextureAsset = re::TextureAsset::makeTextureAsset((uint64_t)buf, 6, (__int128 *)&v29);

        if (v50 != -1)
          ((void (*)(__int128 *, _BYTE *))*(&off_24ED44B90 + v50))(&v38, &buf[8]);

        *(_BYTE *)a4 = 1;
        *(_QWORD *)(a4 + 8) = TextureAsset;
      }
      else
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        re::DynamicString::setCapacity(&v42, 0);
        re::DynamicString::assignf((re::DynamicString *)&v42, "failed to load texture %s", (const char *)a2);
        *(_QWORD *)&v38 = 100;
        *((_QWORD *)&v38 + 1) = &re::AssetErrorCategory(void)::instance;
        re::DynamicString::DynamicString((re::DynamicString *)&v39, (const re::DynamicString *)&v42);
        v19 = *((_QWORD *)&v40 + 1);
        v20 = v39;
        v21 = v40;
        buf[0] = 0;
        *(_OWORD *)&buf[8] = v38;
        v49 = v41;
        v47 = v39;
        v48 = v40;
        if (v42 && (v43 & 1) != 0)
          (*(void (**)(void))(*v42 + 40))();
        v38 = *(_OWORD *)&buf[8];
        re::DynamicString::DynamicString((re::DynamicString *)&v39, (const re::DynamicString *)&v47);
        *(_BYTE *)a4 = 0;
        *(_OWORD *)(a4 + 8) = v38;
        *(_QWORD *)(a4 + 24) = v39;
        *(_QWORD *)(a4 + 48) = v41;
        *(_OWORD *)(a4 + 32) = v40;
        if (v20 && (v21 & 1) != 0)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 40))(v20, v19);
      }
    }
  }
  else
  {
    v11 = *re::pipelineLogObjects((re *)this);
    v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEFAULT, "TextureAssetCompiler: sourceFilePath is null.", buf, 2u);
    }
    v13 = *(_OWORD *)buf;
    v14 = *(_QWORD *)&buf[16];
    v15 = v47;
    *(_BYTE *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 100;
    *(_QWORD *)(a4 + 16) = &re::AssetErrorCategory(void)::instance;
    *(_OWORD *)(a4 + 24) = v13;
    *(_QWORD *)(a4 + 40) = v14;
    *(_QWORD *)(a4 + 48) = v15;
  }
}

re *re::LUTTextureCompiler::deleteAsset(re *this, void (***a2)(_QWORD))
{
  uint64_t v3;

  if (a2)
  {
    v3 = re::globalAllocators(this)[2];
    (**a2)(a2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, a2);
  }
  return this;
}

re *re::LUTTextureCompiler::deleteAssetCompileOptions(re *this, void *a2)
{
  uint64_t *v3;

  if (a2)
  {
    v3 = re::globalAllocators(this);
    return (re *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v3[2] + 40))(v3[2], a2);
  }
  return this;
}

void re::LUTTextureCompiler::~LUTTextureCompiler(id *this)
{

}

{

  JUMPOUT(0x2276933B8);
}

void re::getLibraryHash(re *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;
  _BYTE v8[24];
  uint64_t v9[3];

  memset(v9, 0, sizeof(v9));
  if (!a5[1])
  {
    if (*(_QWORD *)(a4 + 72))
    {
      a5 = (uint64_t *)(a4 + 64);
    }
    else
    {
      if (!*(_QWORD *)(a3 + 104))
      {
        v7 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 256);
        *(_BYTE *)a1 = 1;
        *((_QWORD *)a1 + 1) = v7;
        goto LABEL_7;
      }
      a5 = (uint64_t *)(a3 + 96);
    }
  }
  re::AssetHandle::operator=(v9, a5);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v8, (const re::AssetHandle *)v9);
  re::getLibraryHash(a1, a2, (const re::AssetHandle *)v8);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v8);
LABEL_7:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v9);
}

void re::getLibraryHash(re *a1, uint64_t a2, const re::AssetHandle *a3)
{
  uint64_t v5;
  unsigned int v6;
  re::ShaderLibraryAsset *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  unint64_t v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  _BYTE v24[24];
  unint64_t LibraryHash;
  __int128 buf;
  const char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)a3 + 1);
  if (!v5 || (v6 = atomic_load((unsigned int *)(v5 + 704)), v6 != 2))
  {
    v17 = *re::assetsLogObjects(a1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v18 = **(_QWORD **)(*((_QWORD *)a3 + 1) + 264);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v18;
      v19 = "Can't get hash for not loaded %s";
LABEL_28:
      _os_log_error_impl(&dword_224FE9000, v17, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&buf, 0xCu);
    }
LABEL_29:
    *(_BYTE *)a1 = 0;
    return;
  }
  re::AssetHandle::AssetHandle((re::AssetHandle *)v24, a3);
  re::validateAssetType((const re::AssetHandle *)v24, (uint64_t)"Attempting to get library hash");
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v24);
  v9 = *((_QWORD *)a3 + 1);
  if (!v9)
  {
    v11 = re::ShaderLibraryAsset::assetType(v8);
LABEL_22:
    v20 = *((_QWORD *)a3 + 1);
    if (v20)
    {
      v21 = *(uint64_t **)(v20 + 264);
      v22 = re::ShaderGraphAsset::assetType((re::ShaderGraphAsset *)v11);
      if (v21 == v22)
        goto LABEL_29;
    }
    else
    {
      v22 = re::ShaderGraphAsset::assetType((re::ShaderGraphAsset *)v11);
    }
    v17 = *re::assetsLogObjects((re *)v22);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      v23 = **(_QWORD **)(*((_QWORD *)a3 + 1) + 264);
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = v23;
      v19 = "Encountered asset with unexpected type %s in MaterialCompiler.cpp";
      goto LABEL_28;
    }
    goto LABEL_29;
  }
  v10 = *(uint64_t **)(v9 + 264);
  v11 = re::ShaderLibraryAsset::assetType(v8);
  if (v10 != v11)
    goto LABEL_22;
  v12 = re::AssetHandle::loadedAsset<re::ShaderLibraryAsset>(a3);
  re::DynamicString::DynamicString((re::DynamicString *)&buf, (const re::DynamicString *)(v12 + 40));
  v13 = *((_QWORD *)&buf + 1) >> 1;
  if ((BYTE8(buf) & 1) == 0)
    v13 = BYTE8(buf) >> 1;
  v14 = *(_QWORD *)(a2 + 56);
  if (!v13)
    goto LABEL_14;
  if ((BYTE8(buf) & 1) != 0)
    v15 = v27;
  else
    v15 = (char *)&buf + 9;
  LibraryHash = re::ShaderManager::getLibraryHash(*(re::ShaderManager **)(a2 + 56), v15);
  if (!re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v14 + 264, (uint64_t *)&LibraryHash)|| (v16 = LibraryHash) == 0)
  {
    v14 = *(_QWORD *)(a2 + 56);
LABEL_14:
    v16 = *(_QWORD *)(v14 + 256);
  }
  if ((_QWORD)buf)
  {
    if ((BYTE8(buf) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)buf + 40))();
  }
  *(_BYTE *)a1 = 1;
  *((_QWORD *)a1 + 1) = v16;
}

BOOL re::materialTextureParamIsAsset(re *this, const char *a2)
{
  char *v2;
  const char *v3;
  const char *v4;
  _BOOL8 result;

  v2 = strrchr((char *)this, 46);
  result = 0;
  if (v2)
  {
    v4 = v2;
    if (re::canLoadTextureFileWithExtension((re *)(v2 + 1), v3) || !strcmp(v4, ".compiledtexture"))
      return 1;
  }
  return result;
}

void re::tryLoadTexture(re *this, os_unfair_lock_s **a2, AssetService *a3, re::MaterialTextureParam *a4)
{
  int v5;
  re::TextureAsset *v7;
  re::TextureAsset *v8;
  _QWORD *v9;
  re *isValid;
  NSObject *v11;
  uint8_t v12[16];

  if (LODWORD(a3[4].var0) != 1)
    goto LABEL_17;
  v5 = (int)a4;
  v7 = (re::TextureAsset *)re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)a3);
  if (!v7)
    goto LABEL_17;
  v8 = v7;
  if (v5 && re::TextureAsset::isLegacyLinearFormatWithSRGBData(v7))
  {
    if ((v9 = (_QWORD *)((char *)v8 + 136), *((_QWORD *)v8 + 18)) && *v9
      || (re::TextureAsset::addLegacyLinearFormatWithSRGBDataTexture((os_unfair_lock_s **)v8, a2), *((_QWORD *)v8 + 18))
      && *v9)
    {
      *(_BYTE *)this = 1;
      re::TextureHandle::TextureHandle((re *)((char *)this + 8), (re::TextureAsset *)((char *)v8 + 136));
      return;
    }
  }
  isValid = (re *)re::TextureData::isValid((re::TextureAsset *)((char *)v8 + 152));
  if ((_DWORD)isValid)
  {
    if (*((_DWORD *)v8 + 60))
    {
      v11 = *re::pipelineLogObjects(isValid);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v12 = 0;
        _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Cannot render a texture asset that is not backed by a MTLAsset.", v12, 2u);
      }
    }
  }
  if (*((_QWORD *)v8 + 7) && *((_QWORD *)v8 + 6))
  {
    *(_BYTE *)this = 1;
    re::TextureHandle::TextureHandle((re *)((char *)this + 8), (re::TextureAsset *)((char *)v8 + 48));
  }
  else
  {
LABEL_17:
    *(_BYTE *)this = 0;
  }
}

re::MaterialDefinitionFile *re::makeFlattenedMaterialFile(re *this, AssetService *a2, const re::MaterialDefinitionFile *a3)
{
  uint64_t v4;
  uint64_t v5;
  re::DynamicString *v6;
  _BOOL8 v7;
  re::MaterialDefinitionFile *v8;
  re *v9;
  unsigned int v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  unsigned int v17;
  unsigned int v18;
  NSObject *v19;
  void **var0;
  char *v21;
  double v22;
  double v23;
  uint64_t *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29[3];
  __int128 v30;
  __int128 v31;
  unsigned int v32;
  uint64_t v33;
  _QWORD v34[3];
  int v35;
  uint64_t v36;
  _BYTE buf[12];
  __int16 v38;
  _BYTE v39[10];
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v36 = 0;
  memset(v34, 0, sizeof(v34));
  v35 = 0;
  v32 = 0;
  v30 = 0u;
  v31 = 0u;
  v33 = 0x7FFFFFFFLL;
  re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)&v30, (re::DynamicString *)a2);
  v25 = (uint64_t *)a2;
  re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v34, &v25);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v29, (const re::AssetHandle *)&a2[15]);
  if (*((_DWORD *)re::AssetHandle::assetInfo((re::AssetHandle *)v29) + 22))
  {
    while (1)
    {
      v4 = re::AssetHandle::loadedAsset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)v29);
      if (!v4)
      {
        v8 = 0;
        goto LABEL_41;
      }
      v5 = v4;
      v6 = (re::DynamicString *)(v4 + 8);
      v7 = re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::contains((uint64_t)&v30, v4 + 8);
      if (v7)
        break;
      re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)&v30, v6);
      v25 = (uint64_t *)v6;
      re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v34, &v25);
      re::AssetHandle::operator=(v29, (uint64_t *)(v5 + 128));
      if (!*((_DWORD *)re::AssetHandle::assetInfo((re::AssetHandle *)v29) + 22))
        goto LABEL_40;
    }
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v9 = (re *)re::DynamicString::setCapacity(&v25, 0);
    v10 = v32;
    if (v32)
    {
      v11 = 0;
      v12 = (int *)(v31 + 8);
      while (1)
      {
        v13 = *v12;
        v12 += 12;
        if (v13 < 0)
          break;
        if (v32 == ++v11)
        {
          LODWORD(v11) = v32;
          break;
        }
      }
    }
    else
    {
      LODWORD(v11) = 0;
    }
    if (v32 != (_DWORD)v11)
    {
      v14 = v11;
      v15 = v31;
      do
      {
        re::DynamicString::DynamicString((re::DynamicString *)buf, (const re::DynamicString *)(v15 + 48 * v14 + 16));
        if ((buf[8] & 1) != 0)
          v16 = *(const char **)&v39[2];
        else
          v16 = &buf[9];
        re::DynamicString::appendf((re::DynamicString *)&v25, "-> %s", v16);
        v9 = *(re **)buf;
        if (*(_QWORD *)buf && (buf[8] & 1) != 0)
          v9 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)buf + 40))();
        v15 = v31;
        if (v32 <= (int)v11 + 1)
          v17 = v11 + 1;
        else
          v17 = v32;
        while (1)
        {
          v14 = (v11 + 1);
          if (v17 - 1 == (_DWORD)v11)
            break;
          LODWORD(v11) = v11 + 1;
          v18 = v14;
          if ((*(_DWORD *)(v31 + 48 * v14 + 8) & 0x80000000) != 0)
            goto LABEL_28;
        }
        v18 = v17;
LABEL_28:
        LODWORD(v11) = v18;
      }
      while (v10 != v18);
    }
    v19 = *re::pipelineLogObjects(v9);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if (((uint64_t)a2[1].var0 & 1) != 0)
        var0 = a2[2].var0;
      else
        var0 = (void **)((char *)&a2[1].var0 + 1);
      if ((v26 & 1) != 0)
        v21 = v27;
      else
        v21 = (char *)&v26 + 1;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = var0;
      v38 = 2080;
      *(_QWORD *)v39 = v21;
      _os_log_impl(&dword_224FE9000, v19, OS_LOG_TYPE_DEFAULT, "Found circular dependency in material %s: {%s}", buf, 0x16u);
    }
    if (v25 && (v26 & 1) != 0)
      (*(void (**)(void))(*v25 + 40))();
  }
LABEL_40:
  v8 = re::resolveOverrideMaterials((re *)a2, (uint64_t)v34);
LABEL_41:
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v29);
  v23 = re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v30, v22);
  if (v34[0] && v36)
    (*(void (**)(double))(*(_QWORD *)v34[0] + 40))(v23);
  return v8;
}

uint64_t re::AssetHandle::loadedAsset<re::MaterialDefinitionAsset>(re::MaterialDefinitionAsset *a1)
{
  uint64_t *v2;

  if (!*((_QWORD *)a1 + 1))
    return 0;
  v2 = re::MaterialDefinitionAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

re::MaterialDefinitionFile *re::resolveOverrideMaterials(re *a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  re::MaterialDefinitionFile *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::DynamicString *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  NSObject *v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  re::DynamicString *v33;
  unsigned int *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  re::DynamicString *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  int *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  re::DynamicString *v70;
  re::MaterialTextureParam *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  _BYTE *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  const char *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  unsigned int v93;
  unsigned int v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  _QWORD *v104;
  unint64_t v105;
  unsigned int v106;
  uint64_t v107;
  int *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  re::DynamicString *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  int *v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  _DWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  int *v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  NSObject *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t *v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  const re::DynamicString *v176;
  const re::DynamicString *v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  double v189;
  uint64_t v190;
  unsigned int v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  double v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  BOOL v200;
  int v201;
  uint64_t v202;
  int *v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  int v209;
  uint64_t v210;
  const re::MaterialTechniqueQualityLevelSetData *v211;
  const re::MaterialTechniqueQualityLevelSetData *v212;
  unint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unsigned int v218;
  unsigned int v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  uint64_t v223;
  re::MaterialTechniqueQualityLevelSetData *v224;
  uint64_t v225;
  uint64_t v226;
  int *v227;
  int v228;
  uint64_t v229;
  int v230;
  int v231;
  uint64_t v232;
  int *v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  const re::DynamicString *v238;
  re::MaterialDefinitionFile *v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  re::MaterialDefinitionFile *v250;
  uint64_t v251;
  int v252;
  unint64_t v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  int v260;
  re::MaterialDefinitionFile *v261;
  unsigned int v262;
  unsigned int v263;
  unint64_t v264;
  uint64_t v265;
  uint64_t v266;
  NSObject *v267;
  uint64_t v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  uint64_t v278;
  _OWORD *v279;
  unsigned __int8 *v280;
  uint64_t v281;
  _BYTE *v282;
  int v283;
  char *v284;
  uint64_t v285;
  int v286;
  uint64_t v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  int *v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  re::DynamicString *v298;
  unint64_t v299;
  unint64_t v300;
  unint64_t v301;
  uint64_t v302;
  unsigned int v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  const char *v307;
  uint64_t v308;
  const char *v309;
  unsigned int v310;
  unsigned int v311;
  unsigned int v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  unint64_t v316;
  unsigned int v317;
  unsigned int v318;
  _QWORD *v319;
  unsigned int v320;
  uint64_t v321;
  int *v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  _BOOL8 v326;
  NSObject *v327;
  uint64_t v328;
  unint64_t v329;
  re::DynamicString *v330;
  unsigned int v331;
  unsigned int v332;
  double v333;
  unsigned int v334;
  uint64_t v335;
  int *v336;
  re::MaterialDefinitionFile *v337;
  int v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  re::DynamicString *v343;
  unsigned int v344;
  unsigned int v345;
  _QWORD *v346;
  unsigned int v347;
  uint64_t v348;
  int *v349;
  int v350;
  uint64_t v351;
  uint64_t v352;
  _BOOL8 v353;
  NSObject *v354;
  uint64_t v355;
  unint64_t v356;
  unsigned int v357;
  unsigned int v358;
  double v359;
  double v360;
  _DWORD *v362;
  uint64_t v363;
  uint64_t *v364;
  uint64_t v365;
  char *v366;
  re *v367;
  re::DynamicString *v368;
  unint64_t v369;
  uint64_t v370;
  unint64_t v371;
  int v372;
  uint64_t v373;
  uint64_t v374;
  _QWORD *v375;
  uint64_t v376;
  uint64_t *v377;
  unsigned __int8 *v378;
  unint64_t v379;
  uint64_t v380;
  int v381;
  uint64_t v382;
  uint64_t v383;
  _QWORD *v384;
  _QWORD *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  unint64_t v389;
  _BYTE *v390;
  uint64_t v391;
  _QWORD *v392;
  _QWORD *v393;
  re::MaterialDefinitionFile *v394;
  uint64_t v395;
  uint64_t v396;
  char v397;
  unint64_t v398;
  __int128 *v399;
  __int128 v400;
  __int128 v401;
  unsigned int v402;
  uint64_t v403;
  void *__b[2];
  __int128 v405;
  unsigned int v406;
  unint64_t v407;
  __int128 v408;
  __int128 v409;
  unsigned int v410;
  uint64_t v411;
  __int128 v412;
  __int128 v413;
  unsigned int v414;
  uint64_t v415;
  __int128 v416;
  __int128 v417;
  unsigned int v418;
  uint64_t v419;
  __int128 v420;
  __int128 v421;
  unsigned int v422;
  uint64_t v423;
  uint8_t buf[32];
  __int128 v425;
  __int128 v426;
  __int128 v427;
  _BYTE v428[12];
  __int16 v429;
  int v430;
  __int16 v431;
  unint64_t v432;
  __int16 v433;
  unint64_t v434;
  _OWORD v435[5];
  uint64_t v436;

  v436 = *MEMORY[0x24BDAC8D0];
  v4 = re::globalAllocators(a1);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4[2] + 32))(v4[2], 736, 8);
  v6 = re::MaterialDefinitionFile::MaterialDefinitionFile((re::MaterialDefinitionFile *)v5);
  v422 = 0;
  v420 = 0u;
  v421 = 0u;
  v423 = 0x7FFFFFFFLL;
  v418 = 0;
  v416 = 0u;
  v417 = 0u;
  v419 = 0x7FFFFFFFLL;
  v414 = 0;
  v412 = 0u;
  v413 = 0u;
  v415 = 0x7FFFFFFFLL;
  v410 = 0;
  v408 = 0u;
  v409 = 0u;
  v411 = 0x7FFFFFFFLL;
  v406 = 0;
  *(_OWORD *)__b = 0u;
  v405 = 0u;
  v407 = 0x7FFFFFFFLL;
  v402 = 0;
  v400 = 0u;
  v401 = 0u;
  v403 = 0x7FFFFFFFLL;
  v7 = *(_QWORD *)(a2 + 16);
  v394 = v6;
  if (!v7)
  {
LABEL_474:
    v312 = 0;
LABEL_475:
    LODWORD(v313) = 0;
    goto LABEL_476;
  }
  v8 = *(_QWORD *)(a2 + 32) + 8 * v7;
  v367 = a1;
  v368 = (re::DynamicString *)(v5 + 32);
  v9 = (uint64_t *)(v5 + 96);
  v393 = (_QWORD *)(v5 + 240);
  v392 = (_QWORD *)(v5 + 336);
  v385 = (_QWORD *)(v5 + 288);
  v373 = v5 + 144;
  v374 = v5 + 688;
  v366 = (char *)a1 + 9;
  v384 = (_QWORD *)(v5 + 600);
  v363 = v5 + 464;
  v375 = (_QWORD *)(v5 + 512);
  v376 = v5 + 192;
  v364 = (uint64_t *)(v5 + 96);
  v365 = a2;
  do
  {
    v10 = v8;
    if (HIDWORD(v405))
    {
      if (DWORD2(v405))
        memset_pattern16(__b[1], &memset_pattern_154_0, 4 * DWORD2(v405));
      v11 = v406;
      if (v406)
      {
        v12 = v405;
        do
        {
          re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(v12);
          v12 += 88;
          --v11;
        }
        while (v11);
      }
      v406 = 0;
      HIDWORD(v405) = 0;
      LODWORD(v407) = 0x7FFFFFFF;
      ++HIDWORD(v407);
    }
    re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)&v400);
    v14 = *(re::DynamicString **)(v10 - 8);
    v13 = v10 - 8;
    re::DynamicString::operator=((re::DynamicString *)v5, v14);
    v15 = *(_QWORD *)(v5 + 40);
    if ((v15 & 1) != 0)
      v16 = v15 >> 1;
    else
      v16 = v15 >> 1;
    if (!v16)
      re::DynamicString::operator=(v368, (re::DynamicString *)(*(_QWORD *)v13 + 32));
    v17 = re::AssetHandle::operator=(v9, (uint64_t *)(*(_QWORD *)v13 + 96));
    v18 = *(_QWORD *)v13;
    v19 = *(_QWORD *)(*(_QWORD *)v13 + 72);
    if ((v19 & 1) != 0)
      v20 = v19 >> 1;
    else
      v20 = v19 >> 1;
    v395 = v13;
    if (v20)
    {
      v21 = *re::pipelineLogObjects((re *)v17);
      v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
      v18 = *(_QWORD *)v13;
      if (v22)
      {
        if ((*(_BYTE *)(v18 + 72) & 1) != 0)
          v23 = *(_QWORD *)(v18 + 80);
        else
          v23 = v18 + 73;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v23;
        _os_log_impl(&dword_224FE9000, v21, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
        v18 = *(_QWORD *)v13;
      }
    }
    re::append<re::DynamicString,re::DynamicString>(v376, v18 + 192);
    v24 = v13;
    v25 = *(_QWORD *)v13;
    v386 = *(unsigned int *)(*(_QWORD *)v13 + 272);
    v26 = 0;
    if ((_DWORD)v386)
    {
      v27 = (int *)(*(_QWORD *)(v25 + 256) + 8);
      while (1)
      {
        v28 = *v27;
        v27 += 22;
        if (v28 < 0)
          break;
        if (v386 == ++v26)
        {
          LODWORD(v26) = *(_DWORD *)(*(_QWORD *)v13 + 272);
          break;
        }
      }
      v24 = v13;
    }
    if ((_DWORD)v386 == (_DWORD)v26)
    {
      v29 = v24;
      goto LABEL_54;
    }
    v30 = v26;
    v31 = *(_QWORD *)(v25 + 256);
    v380 = *(_QWORD *)v13;
    do
    {
      v32 = v31 + 88 * v30;
      v33 = (re::DynamicString *)(v32 + 16);
      v34 = (unsigned int *)(v32 + 48);
      v35 = re::Hash<re::DynamicString>::operator()((uint64_t)buf, v32 + 16);
      v36 = v35;
      if (!*v393)
      {
        LODWORD(v37) = 0;
LABEL_41:
        re::HashTable<re::DynamicString,re::MaterialTextureParam,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy((uint64_t)v393, v37, v36, v33, v34);
        goto LABEL_42;
      }
      v37 = v35 % *(unsigned int *)(v5 + 264);
      v38 = *(unsigned int *)(*(_QWORD *)(v5 + 248) + 4 * v37);
      if ((_DWORD)v38 == 0x7FFFFFFF)
        goto LABEL_41;
      v39 = *(_QWORD *)(v5 + 256);
      while (!re::DynamicString::operator==(v39 + 88 * v38 + 16, (uint64_t)v33))
      {
        v38 = *(_DWORD *)(v39 + 88 * v38 + 8) & 0x7FFFFFFF;
        if (v38 == 0x7FFFFFFF)
        {
          v5 = (uint64_t)v394;
          v25 = v380;
          goto LABEL_41;
        }
      }
      v42 = v39 + 88 * v38;
      v43 = v42 + 48;
      v44 = *(unsigned int *)(v42 + 80);
      if ((_DWORD)v44 != -1)
        ((void (*)(uint8_t *, uint64_t))*(&off_24ED44C70 + v44))(buf, v43);
      *(_DWORD *)(v43 + 32) = -1;
      v5 = (uint64_t)v394;
      v45 = *((_QWORD *)v394 + 32) + 88 * v38;
      *(_BYTE *)(v45 + 48) = 0;
      v45 += 48;
      *(_DWORD *)(v45 + 32) = -1;
      std::__variant_detail::__ctor<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__generic_construct[abi:nn180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>,(std::__variant_detail::_Trait)1> const&>(v45, v34);
      v25 = v380;
LABEL_42:
      ++*(_DWORD *)(v5 + 280);
      v31 = *(_QWORD *)(v25 + 256);
      if (*(_DWORD *)(v25 + 272) <= (v26 + 1))
        v40 = v26 + 1;
      else
        v40 = *(_DWORD *)(v25 + 272);
      while (1)
      {
        v30 = (v26 + 1);
        if (v40 - 1 == (_DWORD)v26)
          break;
        LODWORD(v26) = v26 + 1;
        v41 = v30;
        if ((*(_DWORD *)(v31 + 88 * v30 + 8) & 0x80000000) != 0)
          goto LABEL_49;
      }
      v41 = v40;
LABEL_49:
      LODWORD(v26) = v41;
    }
    while ((_DWORD)v386 != v41);
    v29 = v395;
    v25 = *(_QWORD *)v395;
LABEL_54:
    v46 = re::append<re::DynamicString,re::DynamicString>(v373, v25 + 144);
    v47 = *(_QWORD *)v29;
    v48 = *(unsigned int *)(*(_QWORD *)v29 + 368);
    if ((_DWORD)v48)
    {
      v49 = 0;
      v50 = (int *)(*(_QWORD *)(v47 + 352) + 8);
      while (1)
      {
        v51 = *v50;
        v50 += 38;
        if (v51 < 0)
          break;
        if (v48 == ++v49)
        {
          LODWORD(v49) = v48;
          break;
        }
      }
    }
    else
    {
      LODWORD(v49) = 0;
    }
    if ((_DWORD)v48 == (_DWORD)v49)
      goto LABEL_80;
    v52 = v49;
    v53 = *(_QWORD *)(v47 + 352);
    v381 = v48;
    while (2)
    {
      v54 = v53 + 152 * v52;
      v55 = (re::DynamicString *)(v54 + 16);
      v56 = v54 + 48;
      v57 = re::Hash<re::DynamicString>::operator()((uint64_t)buf, v54 + 16);
      v58 = v57;
      if (!*v392)
      {
        LODWORD(v59) = 0;
LABEL_69:
        v46 = re::HashTable<re::DynamicString,re::OptionalMaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy((uint64_t)v392, v59, v58, v55, v56);
        goto LABEL_70;
      }
      v59 = v57 % *((unsigned int *)v394 + 90);
      v60 = *(unsigned int *)(*((_QWORD *)v394 + 43) + 4 * v59);
      if ((_DWORD)v60 == 0x7FFFFFFF)
        goto LABEL_69;
      v387 = v56;
      v61 = *((_QWORD *)v394 + 44);
      while (!re::DynamicString::operator==(v61 + 152 * v60 + 16, (uint64_t)v55))
      {
        v60 = *(_DWORD *)(v61 + 152 * v60 + 8) & 0x7FFFFFFF;
        if (v60 == 0x7FFFFFFF)
        {
          LODWORD(v48) = v381;
          v56 = v387;
          goto LABEL_69;
        }
      }
      v46 = re::OptionalMaterialSamplerData::OptionalMaterialSamplerData(v61 + 152 * v60 + 48, v387);
      LODWORD(v48) = v381;
LABEL_70:
      ++*((_DWORD *)v394 + 94);
      v53 = *(_QWORD *)(v47 + 352);
      if (*(_DWORD *)(v47 + 368) <= (v49 + 1))
        v62 = v49 + 1;
      else
        v62 = *(_DWORD *)(v47 + 368);
      while (1)
      {
        v52 = (v49 + 1);
        if (v62 - 1 == (_DWORD)v49)
          break;
        LODWORD(v49) = v49 + 1;
        v63 = v52;
        if ((*(_DWORD *)(v53 + 152 * v52 + 8) & 0x80000000) != 0)
          goto LABEL_77;
      }
      v63 = v62;
LABEL_77:
      LODWORD(v49) = v63;
      if ((_DWORD)v48 != v63)
        continue;
      break;
    }
    v47 = *(_QWORD *)v395;
LABEL_80:
    v388 = *(unsigned int *)(v47 + 320);
    v64 = 0;
    if ((_DWORD)v388)
    {
      v65 = (int *)(*(_QWORD *)(v47 + 304) + 8);
      while (1)
      {
        v66 = *v65;
        v65 += 40;
        if (v66 < 0)
          break;
        if (v388 == ++v64)
        {
          LODWORD(v64) = *(_DWORD *)(v47 + 320);
          break;
        }
      }
    }
    if ((_DWORD)v388 == (_DWORD)v64)
      goto LABEL_125;
    v67 = v64;
    while (2)
    {
      v68 = *(_QWORD *)(v47 + 304);
      v69 = v68 + 160 * v67;
      v70 = (re::DynamicString *)(v69 + 16);
      v71 = (re::MaterialTextureParam *)(v69 + 48);
      v72 = (uint64_t)v385;
      v73 = re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)v385, v69 + 16);
      if (v73)
      {
        v75 = v73;
        if (*re::MaterialTextureParam::serializationString(v71, v74))
          std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>,(std::__variant_detail::_Trait)1> const&>(v75, (uint64_t)v71);
        v76 = v68 + 160 * v67;
        v46 = (unint64_t)re::replaceIfValid<re::DynamicString>((re::DynamicString *)(v75 + 40), (re::DynamicString *)(v76 + 88));
        if (*(_BYTE *)(v76 + 152))
        {
          if (!*(_BYTE *)(v75 + 104))
            *(_BYTE *)(v75 + 104) = 1;
          *(_DWORD *)(v75 + 108) = *(_DWORD *)(v68 + 160 * v67 + 156);
        }
        v77 = v68 + 160 * v67;
        v80 = *(_QWORD *)(v77 + 128);
        v79 = (_BYTE *)(v77 + 128);
        v78 = v80;
        v81 = v80 >> 1;
        v82 = v80 >> 1;
        if ((v80 & 1) == 0)
          v81 = v82;
        if (v81)
        {
          v83 = (v78 & 1) != 0 ? *(const char **)(v68 + 160 * v67 + 136) : v79 + 1;
          v46 = strcmp("dynamicSamplers", v83);
          if ((_DWORD)v46)
          {
            v89 = *re::pipelineLogObjects((re *)v46);
            v46 = os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v46)
            {
              v90 = *(_QWORD *)v395;
              if ((*(_BYTE *)(*(_QWORD *)v395 + 8) & 1) != 0)
                v91 = *(_QWORD *)(v90 + 16);
              else
                v91 = v90 + 9;
              if ((*v79 & 1) != 0)
                v92 = *(_BYTE **)(v68 + 160 * v67 + 136);
              else
                v92 = v79 + 1;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = v91;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v92;
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)&buf[24] = "dynamicSamplers";
              _os_log_impl(&dword_224FE9000, v89, OS_LOG_TYPE_DEFAULT, "Material '%s' uses custom dynamic sampler array \"%s\", but custom array names are no longer supported. Please ensure the array name in the shader is \"%s\" and remove \"SamplerArray\" from your material file.", buf, 0x20u);
            }
          }
        }
        goto LABEL_117;
      }
      v84 = re::Hash<re::DynamicString>::operator()((uint64_t)buf, (uint64_t)v70);
      v85 = v84;
      if (!*v385)
      {
        LODWORD(v86) = 0;
        goto LABEL_111;
      }
      v86 = v84 % *((unsigned int *)v394 + 78);
      v87 = *(unsigned int *)(*((_QWORD *)v394 + 37) + 4 * v86);
      if ((_DWORD)v87 == 0x7FFFFFFF)
      {
LABEL_104:
        v72 = (uint64_t)v385;
LABEL_111:
        v46 = re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(v72, v86, v85, v70, (uint64_t)v71);
        ++*((_DWORD *)v394 + 82);
        goto LABEL_117;
      }
      v88 = *((_QWORD *)v394 + 38);
      while (1)
      {
        v46 = re::DynamicString::operator==(v88 + 160 * v87 + 16, (uint64_t)v70);
        if ((v46 & 1) != 0)
          break;
        v87 = *(_DWORD *)(v88 + 160 * v87 + 8) & 0x7FFFFFFF;
        if (v87 == 0x7FFFFFFF)
          goto LABEL_104;
      }
LABEL_117:
      v93 = *(_DWORD *)(v47 + 320);
      if (v93 <= (int)v64 + 1)
        v93 = v64 + 1;
      while (1)
      {
        v67 = (v64 + 1);
        if (v93 - 1 == (_DWORD)v64)
          break;
        LODWORD(v64) = v64 + 1;
        v94 = v67;
        if ((*(_DWORD *)(*(_QWORD *)(v47 + 304) + 160 * v67 + 8) & 0x80000000) != 0)
          goto LABEL_123;
      }
      v94 = v93;
LABEL_123:
      LODWORD(v64) = v94;
      if ((_DWORD)v388 != v94)
        continue;
      break;
    }
    v47 = *(_QWORD *)v395;
LABEL_125:
    v398 = 0;
    v399 = &v420;
    v95 = *(_QWORD *)(v47 + 400);
    v5 = 88;
    if (v95)
    {
      v96 = 0;
      while (1)
      {
        if (v95 <= v96)
          goto LABEL_562;
        re::MaterialTechniqueData::MaterialTechniqueData((re::MaterialTechniqueData *)buf, (const re::MaterialTechniqueData *)(*(_QWORD *)(v47 + 416) + 664 * v96));
        if ((BYTE8(v425) & 1) != 0 ? *((_QWORD *)&v425 + 1) >> 1 : BYTE8(v425) >> 1)
          break;
        re::resolveOverrideMaterials(re::MaterialDefinitionFile const&,re::DynamicArray<re::MaterialDefinitionFile const*> const&)::$_0::operator()((uint64_t *)&v399, (re::DynamicString *)buf, (uint64_t)buf);
LABEL_145:
        re::MaterialTechniqueData::~MaterialTechniqueData((re::MaterialTechniqueData *)buf);
        v96 = v398 + 1;
        v398 = v96;
        v47 = *(_QWORD *)v395;
        v95 = *(_QWORD *)(*(_QWORD *)v395 + 400);
        if (v96 >= v95)
          goto LABEL_146;
      }
      *(_QWORD *)&v435[2] = 0;
      memset(v435, 0, 28);
      v98 = re::Hash<re::DynamicString>::operator()((uint64_t)v428, (uint64_t)&v425);
      v99 = v98;
      if (__b[0])
      {
        v100 = v98 % DWORD2(v405);
        v101 = *((unsigned int *)__b[1] + v100);
        if ((_DWORD)v101 != 0x7FFFFFFF)
        {
          v102 = v405;
          while (!re::DynamicString::operator==(v102 + 88 * v101 + 16, (uint64_t)&v425))
          {
            v101 = *(_DWORD *)(v102 + 88 * v101 + 8) & 0x7FFFFFFF;
            if (v101 == 0x7FFFFFFF)
              goto LABEL_140;
          }
          v104 = (_QWORD *)(v102 + 88 * v101 + 48);
          goto LABEL_144;
        }
      }
      else
      {
        LODWORD(v100) = 0;
      }
LABEL_140:
      v103 = re::HashTable<re::DynamicString,re::DynamicArray<unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove((uint64_t)__b, v100, v99, (const re::DynamicString *)&v425, (uint64_t)v435);
      ++HIDWORD(v407);
      v104 = (_QWORD *)(v405 + 88 * v103 + 48);
      if (*(_QWORD *)&v435[0] && *(_QWORD *)&v435[2])
        (*(void (**)(void))(**(_QWORD **)&v435[0] + 40))();
LABEL_144:
      re::DynamicArray<unsigned long>::add(v104, &v398);
      goto LABEL_145;
    }
LABEL_146:
    v105 = HIDWORD(v405);
    while (2)
    {
      v106 = v406;
      v389 = v105;
      v107 = 0;
      if (v406)
      {
        v108 = (int *)(v405 + 8);
        while (1)
        {
          v109 = *v108;
          v108 += 22;
          if (v109 < 0)
            break;
          if (v406 == ++v107)
          {
            LODWORD(v107) = v406;
            break;
          }
        }
      }
      if (v406 != (_DWORD)v107)
      {
        v110 = v107;
        v111 = v405;
        while (1)
        {
          v46 = re::HashTable<re::DynamicString,re::MaterialTechniqueData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)&v420, v111 + 88 * v110 + 16);
          if ((_DWORD)v46)
          {
            v46 = re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)&v400, (re::DynamicString *)(v111 + 88 * v110 + 16));
            v112 = v111 + 88 * v110;
            v113 = *(_QWORD *)(v112 + 64);
            if (v113)
              break;
          }
LABEL_166:
          v111 = v405;
          if (v406 <= (int)v107 + 1)
            v121 = v107 + 1;
          else
            v121 = v406;
          while (1)
          {
            v110 = (v107 + 1);
            if (v121 - 1 == (_DWORD)v107)
              break;
            LODWORD(v107) = v107 + 1;
            v122 = v110;
            if ((*(_DWORD *)(v405 + 88 * v110 + 8) & 0x80000000) != 0)
              goto LABEL_173;
          }
          v122 = v121;
LABEL_173:
          LODWORD(v107) = v122;
          if (v106 == v122)
            goto LABEL_174;
        }
        v5 = *(_QWORD *)(v112 + 80);
        v114 = v5 + 8 * v113;
        while (2)
        {
          v115 = *(_QWORD *)v5;
          v116 = *(_QWORD *)(*(_QWORD *)v395 + 400);
          if (v116 <= *(_QWORD *)v5)
          {
            *(_QWORD *)v428 = 0;
            v426 = 0u;
            v427 = 0u;
            v425 = 0u;
            memset(buf, 0, sizeof(buf));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v435[0]) = 136315906;
            *(_QWORD *)((char *)v435 + 4) = "operator[]";
            WORD6(v435[0]) = 1024;
            *(_DWORD *)((char *)v435 + 14) = 797;
            WORD1(v435[1]) = 2048;
            *(_QWORD *)((char *)&v435[1] + 4) = v115;
            WORD6(v435[1]) = 2048;
            *(_QWORD *)((char *)&v435[1] + 14) = v116;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_474;
          }
          v117 = (re::DynamicString *)(*(_QWORD *)(*(_QWORD *)v395 + 416) + 664 * v115);
          v118 = re::Hash<re::DynamicString>::operator()((uint64_t)buf, (uint64_t)v117 + 32);
          if ((_QWORD)v420)
          {
            v119 = v421;
            v120 = *(unsigned int *)(*((_QWORD *)&v420 + 1) + 4 * (v118 % DWORD2(v421)));
            if ((_DWORD)v120 != 0x7FFFFFFF)
            {
              while (!re::DynamicString::operator==(v119 + 712 * v120 + 16, (uint64_t)v117 + 32))
              {
                v120 = *(_DWORD *)(v119 + 712 * v120 + 8) & 0x7FFFFFFF;
                if (v120 == 0x7FFFFFFF)
                  goto LABEL_164;
              }
LABEL_165:
              re::resolveOverrideMaterials(re::MaterialDefinitionFile const&,re::DynamicArray<re::MaterialDefinitionFile const*> const&)::$_0::operator()((uint64_t *)&v399, v117, v119 + 712 * v120 + 48);
              re::resolveOverrideMaterials(re::MaterialDefinitionFile const&,re::DynamicArray<re::MaterialDefinitionFile const*> const&)::$_0::operator()((uint64_t *)&v399, v117, (uint64_t)v117);
              v5 += 8;
              if (v5 == v114)
                goto LABEL_166;
              continue;
            }
          }
          else
          {
            v119 = v421;
          }
          break;
        }
LABEL_164:
        v120 = 0x7FFFFFFFLL;
        goto LABEL_165;
      }
LABEL_174:
      v123 = v402;
      if (v402)
      {
        v124 = 0;
        v125 = (int *)(v401 + 8);
        while (1)
        {
          v126 = *v125;
          v125 += 12;
          if (v126 < 0)
            break;
          if (v402 == ++v124)
          {
            LODWORD(v124) = v402;
            break;
          }
        }
      }
      else
      {
        LODWORD(v124) = 0;
      }
      if (v402 != (_DWORD)v124)
      {
        v127 = v124;
        v128 = v401;
        do
        {
          v129 = v128 + 48 * v127 + 16;
          v46 = re::Hash<re::DynamicString>::operator()((uint64_t)buf, v129);
          if (__b[0])
          {
            v130 = v46 % DWORD2(v405);
            v131 = __b[1];
            v132 = *((unsigned int *)__b[1] + v130);
            if ((_DWORD)v132 != 0x7FFFFFFF)
            {
              v133 = v405;
              v46 = re::DynamicString::operator==(v405 + 88 * v132 + 16, v129);
              if ((v46 & 1) != 0)
              {
                v131[v130] = *(_DWORD *)(v133 + 88 * v132 + 8) & 0x7FFFFFFF;
LABEL_189:
                v46 = re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(v133 + 88 * v132);
                v135 = HIDWORD(v405);
                *(_DWORD *)(v133 + 88 * v132 + 8) = *(_DWORD *)(v133 + 88 * v132 + 8) & 0x80000000 | v407;
                HIDWORD(v405) = v135 - 1;
                v407 = __PAIR64__(HIDWORD(v407), v132) + 0x100000000;
              }
              else
              {
                while (1)
                {
                  v134 = v132;
                  v132 = *(_DWORD *)(v133 + 88 * v132 + 8) & 0x7FFFFFFF;
                  if (v132 == 0x7FFFFFFF)
                    break;
                  v46 = re::DynamicString::operator==(v133 + 88 * v132 + 16, v129);
                  if ((v46 & 1) != 0)
                  {
                    *(_DWORD *)(v133 + 88 * v134 + 8) = *(_DWORD *)(v133 + 88 * v134 + 8) & 0x80000000 | *(_DWORD *)(v133 + 88 * v132 + 8) & 0x7FFFFFFF;
                    goto LABEL_189;
                  }
                }
              }
            }
          }
          v128 = v401;
          if (v402 <= (int)v124 + 1)
            v136 = v124 + 1;
          else
            v136 = v402;
          while (1)
          {
            v127 = (v124 + 1);
            if (v136 - 1 == (_DWORD)v124)
              break;
            LODWORD(v124) = v124 + 1;
            v137 = v127;
            if ((*(_DWORD *)(v401 + 48 * v127 + 8) & 0x80000000) != 0)
              goto LABEL_197;
          }
          v137 = v136;
LABEL_197:
          LODWORD(v124) = v137;
        }
        while (v123 != v137);
      }
      v105 = HIDWORD(v405);
      if (v389 > HIDWORD(v405))
        continue;
      break;
    }
    v138 = v406;
    if (v406)
    {
      v139 = 0;
      v140 = (int *)(v405 + 8);
      while (1)
      {
        v141 = *v140;
        v140 += 22;
        if (v141 < 0)
          break;
        if (v406 == ++v139)
        {
          LODWORD(v139) = v406;
          break;
        }
      }
    }
    else
    {
      LODWORD(v139) = 0;
    }
    if (v406 != (_DWORD)v139)
    {
      v142 = v139;
      v143 = v405;
      v370 = v405 + 9;
      while (1)
      {
        v144 = v143 + 88 * v142;
        v145 = *(_QWORD *)(v144 + 64);
        if (v145)
          break;
LABEL_222:
        if (v138 <= (int)v139 + 1)
          v155 = v139 + 1;
        else
          v155 = v138;
        while (1)
        {
          v142 = (v139 + 1);
          if (v155 - 1 == (_DWORD)v139)
            break;
          LODWORD(v139) = v139 + 1;
          v156 = v142;
          if ((*(_DWORD *)(v143 + 88 * v142 + 8) & 0x80000000) != 0)
            goto LABEL_229;
        }
        v156 = v155;
LABEL_229:
        LODWORD(v139) = v156;
        if (v138 == v156)
          goto LABEL_230;
      }
      v5 = *(_QWORD *)(v144 + 80);
      v146 = 88 * v142;
      v390 = (_BYTE *)(v143 + v146 + 24);
      v377 = (uint64_t *)(v143 + v146 + 32);
      v382 = v370 + v146 + 16;
      v147 = 8 * v145;
      while (1)
      {
        v96 = *(_QWORD *)v5;
        v95 = *(_QWORD *)(*(_QWORD *)v395 + 400);
        if (v95 <= *(_QWORD *)v5)
          break;
        v148 = *(_QWORD *)(*(_QWORD *)v395 + 416);
        v149 = *re::assetsLogObjects((re *)v46);
        v46 = os_log_type_enabled(v149, OS_LOG_TYPE_ERROR);
        if ((_DWORD)v46)
        {
          v150 = *(_QWORD *)v395;
          if ((*(_BYTE *)(*(_QWORD *)v395 + 8) & 1) != 0)
            v151 = *(_QWORD *)(v150 + 16);
          else
            v151 = v150 + 9;
          v152 = v148 + 664 * v96;
          if ((*(_BYTE *)(v152 + 8) & 1) != 0)
            v153 = *(_QWORD *)(v152 + 16);
          else
            v153 = v152 + 9;
          v154 = v382;
          if ((*v390 & 1) != 0)
            v154 = *v377;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v151;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v153;
          *(_WORD *)&buf[22] = 2080;
          *(_QWORD *)&buf[24] = v154;
          _os_log_error_impl(&dword_224FE9000, v149, OS_LOG_TYPE_ERROR, "Material definition '%s' contains technique '%s' which inherits from non-existent technique '%s', or forms a dependency cycle, so it will be skipped.", buf, 0x20u);
        }
        v5 += 8;
        v147 -= 8;
        if (!v147)
          goto LABEL_222;
      }
      *(_QWORD *)v428 = 0;
      v426 = 0u;
      v427 = 0u;
      v425 = 0u;
      memset(buf, 0, sizeof(buf));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      LODWORD(v435[0]) = 136315906;
      *(_QWORD *)((char *)v435 + 4) = "operator[]";
      WORD6(v435[0]) = 1024;
      *(_DWORD *)((char *)v435 + 14) = 797;
      WORD1(v435[1]) = 2048;
      *(_QWORD *)((char *)&v435[1] + 4) = v96;
      WORD6(v435[1]) = 2048;
      *(_QWORD *)((char *)&v435[1] + 14) = v95;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_562:
      v396 = 0;
      memset(v435, 0, sizeof(v435));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v428 = 136315906;
      *(_QWORD *)&v428[4] = "operator[]";
      v429 = 1024;
      v430 = 797;
      v431 = 2048;
      v432 = v96;
      v433 = 2048;
      v434 = v95;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      break;
    }
LABEL_230:
    v157 = v395;
    v158 = *(_QWORD *)v395;
    v159 = *(_QWORD *)(*(_QWORD *)v395 + 440);
    if (!v159)
      goto LABEL_255;
    v160 = *(uint64_t **)(v158 + 456);
    v161 = &v160[9 * v159];
    while (2)
    {
      re::DynamicString::DynamicString((re::DynamicString *)buf, (const re::DynamicString *)v160);
      re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)&v425, v160 + 4);
      v162 = re::Hash<re::DynamicString>::operator()((uint64_t)v435, (uint64_t)buf);
      v163 = v162;
      if (!(_QWORD)v416)
      {
        v164 = 0;
LABEL_239:
        v167 = v419;
        if ((_DWORD)v419 == 0x7FFFFFFF)
        {
          v167 = v418;
          v168 = v418;
          if (v418 == DWORD2(v417))
          {
            re::HashTable<re::DynamicString,re::MaterialTechniqueGroupData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity((uint64_t)&v416, 2 * HIDWORD(v417));
            v168 = v418;
            v164 = v163 % DWORD2(v417);
          }
          v418 = v168 + 1;
          v169 = v417;
          v170 = *(_DWORD *)(v417 + 120 * v167 + 8);
        }
        else
        {
          v169 = v417;
          v170 = *(_DWORD *)(v417 + 120 * v419 + 8);
          LODWORD(v419) = v170 & 0x7FFFFFFF;
        }
        v171 = v169 + 120 * v167;
        *(_DWORD *)(v171 + 8) = v170 | 0x80000000;
        v172 = *((_QWORD *)&v416 + 1);
        *(_DWORD *)(v171 + 8) = *(_DWORD *)(*((_QWORD *)&v416 + 1) + 4 * v164) | 0x80000000;
        *(_QWORD *)v171 = v163;
        re::DynamicString::DynamicString((re::DynamicString *)(v171 + 16), (const re::DynamicString *)buf);
        re::DynamicString::DynamicString((re::DynamicString *)(v171 + 48), (const re::DynamicString *)buf);
        re::DynamicArray<re::DynamicString>::DynamicArray(v171 + 80, (uint64_t *)&v425);
        *(_DWORD *)(v172 + 4 * v164) = v167;
        ++HIDWORD(v417);
        goto LABEL_245;
      }
      v164 = v162 % DWORD2(v417);
      v165 = *(unsigned int *)(*((_QWORD *)&v416 + 1) + 4 * v164);
      if ((_DWORD)v165 == 0x7FFFFFFF)
        goto LABEL_239;
      v166 = v417;
      while (!re::DynamicString::operator==(v166 + 120 * v165 + 16, (uint64_t)buf))
      {
        v165 = *(_DWORD *)(v166 + 120 * v165 + 8) & 0x7FFFFFFF;
        if (v165 == 0x7FFFFFFF)
          goto LABEL_239;
      }
      v173 = v166 + 120 * v165;
      re::MaterialTechniqueGroupData::deinit((re::MaterialTechniqueGroupData *)(v173 + 48));
      re::DynamicArray<re::DynamicString>::deinit(v173 + 80);
      v174 = *(_QWORD *)(v173 + 48);
      if (v174)
      {
        if ((*(_BYTE *)(v173 + 56) & 1) != 0)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v174 + 40))(v174, *(_QWORD *)(v173 + 64));
        *(_OWORD *)(v173 + 48) = 0u;
        *(_OWORD *)(v173 + 64) = 0u;
      }
      re::DynamicString::DynamicString((re::DynamicString *)(v173 + 48), (const re::DynamicString *)buf);
      re::DynamicArray<re::DynamicString>::DynamicArray(v173 + 80, (uint64_t *)&v425);
LABEL_245:
      ++HIDWORD(v419);
      re::MaterialTechniqueGroupData::deinit((re::MaterialTechniqueGroupData *)buf);
      re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v425);
      if (*(_QWORD *)buf && (buf[8] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)buf + 40))();
      v160 += 9;
      if (v160 != v161)
        continue;
      break;
    }
    v157 = v395;
    v158 = *(_QWORD *)v395;
LABEL_255:
    v175 = *(_QWORD *)(v158 + 576);
    if (!v175)
      goto LABEL_301;
    v176 = *(const re::DynamicString **)(v158 + 592);
    v177 = (const re::DynamicString *)((char *)v176 + 80 * v175);
    while (2)
    {
      re::DynamicString::DynamicString((re::DynamicString *)buf, v176);
      re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)&v425, (uint64_t)v176 + 32);
      v178 = re::Hash<re::DynamicString>::operator()((uint64_t)v435, (uint64_t)buf);
      if (!(_QWORD)v412)
      {
        v184 = re::Hash<re::DynamicString>::operator()((uint64_t)v435, (uint64_t)buf);
        v185 = 0;
        goto LABEL_268;
      }
      v179 = DWORD2(v413);
      v180 = *((_QWORD *)&v412 + 1);
      v181 = *(unsigned int *)(*((_QWORD *)&v412 + 1) + 4 * (v178 % DWORD2(v413)));
      if ((_DWORD)v181 == 0x7FFFFFFF)
      {
LABEL_262:
        v184 = re::Hash<re::DynamicString>::operator()((uint64_t)v435, (uint64_t)buf);
        v185 = v184 % v179;
        v186 = *(unsigned int *)(v180 + 4 * v185);
        if ((_DWORD)v186 != 0x7FFFFFFF)
        {
          v187 = v413;
          do
          {
            v188 = v187 + (v186 << 7);
            if (re::DynamicString::operator==(v188 + 16, (uint64_t)buf))
              goto LABEL_274;
            v186 = *(_DWORD *)(v188 + 8) & 0x7FFFFFFF;
          }
          while (v186 != 0x7FFFFFFF);
        }
LABEL_268:
        v190 = v415;
        if ((_DWORD)v415 == 0x7FFFFFFF)
        {
          v190 = v414;
          v191 = v414;
          if (v414 == DWORD2(v413))
          {
            re::HashTable<re::DynamicString,re::DebugMapping,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity((uint64_t)&v412, 2 * HIDWORD(v413));
            v191 = v414;
            v185 = v184 % DWORD2(v413);
          }
          v414 = v191 + 1;
          v192 = v413;
          v193 = *(_DWORD *)(v413 + (v190 << 7) + 8);
        }
        else
        {
          v192 = v413;
          v193 = *(_DWORD *)(v413 + ((unint64_t)v415 << 7) + 8);
          LODWORD(v415) = v193 & 0x7FFFFFFF;
        }
        v194 = v192 + (v190 << 7);
        *(_DWORD *)(v194 + 8) = v193 | 0x80000000;
        v195 = *((_QWORD *)&v412 + 1);
        *(_DWORD *)(v194 + 8) = *(_DWORD *)(*((_QWORD *)&v412 + 1) + 4 * v185) | 0x80000000;
        *(_QWORD *)v194 = v184;
        re::DynamicString::DynamicString((re::DynamicString *)(v194 + 16), (const re::DynamicString *)buf);
        re::DynamicString::DynamicString((re::DynamicString *)(v194 + 48), (const re::DynamicString *)buf);
        re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(v194 + 80, (uint64_t)&v425);
        *(_DWORD *)(v195 + 4 * v185) = v190;
        ++HIDWORD(v413);
        ++HIDWORD(v415);
        goto LABEL_274;
      }
      v182 = v413;
      while (1)
      {
        v183 = v182 + (v181 << 7);
        if (re::DynamicString::operator==(v183 + 16, (uint64_t)buf))
          break;
        v181 = *(_DWORD *)(v183 + 8) & 0x7FFFFFFF;
        if (v181 == 0x7FFFFFFF)
          goto LABEL_262;
      }
      v197 = *(unsigned int *)(v180 + 4 * (re::Hash<re::DynamicString>::operator()((uint64_t)v435, (uint64_t)buf) % v179));
      if ((_DWORD)v197 == 0x7FFFFFFF)
      {
        v198 = 0x7FFFFFFFLL;
      }
      else
      {
        do
        {
          v199 = v182 + (v197 << 7);
          v200 = re::DynamicString::operator==(v199 + 16, (uint64_t)buf);
          v198 = v197;
          if (v200)
            break;
          v197 = *(_DWORD *)(v199 + 8) & 0x7FFFFFFF;
          v198 = 0x7FFFFFFFLL;
        }
        while (v197 != 0x7FFFFFFF);
      }
      v201 = v427;
      if ((_DWORD)v427)
      {
        v202 = 0;
        v203 = (int *)(v426 + 8);
        while (1)
        {
          v204 = *v203;
          v203 += 14;
          if (v204 < 0)
            break;
          if (v427 == ++v202)
          {
            LODWORD(v202) = v427;
            break;
          }
        }
      }
      else
      {
        LODWORD(v202) = 0;
      }
      if ((_DWORD)v427 != (_DWORD)v202)
      {
        v205 = v182 + (v198 << 7) + 80;
        v206 = v202;
        v207 = v426;
        do
        {
          re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace<int &>(v205, (re::DynamicString *)(v207 + 56 * v206 + 16), (_DWORD *)(v207 + 56 * v206 + 48));
          v207 = v426;
          if (v427 <= (int)v202 + 1)
            v208 = v202 + 1;
          else
            v208 = v427;
          v209 = v202;
          while (1)
          {
            v206 = (v209 + 1);
            if (v208 - 1 == v209)
              break;
            ++v209;
            LODWORD(v202) = v206;
            if ((*(_DWORD *)(v426 + 56 * v206 + 8) & 0x80000000) != 0)
              goto LABEL_299;
          }
          LODWORD(v202) = v208;
LABEL_299:
          ;
        }
        while (v201 != (_DWORD)v202);
      }
LABEL_274:
      v196 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v425, v189);
      if (*(_QWORD *)buf && (buf[8] & 1) != 0)
        (*(void (**)(double))(**(_QWORD **)buf + 40))(v196);
      v176 = (const re::DynamicString *)((char *)v176 + 80);
      if (v176 != v177)
        continue;
      break;
    }
    v157 = v395;
    v158 = *(_QWORD *)v395;
LABEL_301:
    v210 = *(_QWORD *)(v158 + 664);
    if (!v210)
      goto LABEL_319;
    v211 = *(const re::MaterialTechniqueQualityLevelSetData **)(v158 + 680);
    v212 = (const re::MaterialTechniqueQualityLevelSetData *)((char *)v211 + 104 * v210);
    while (2)
    {
      re::MaterialTechniqueQualityLevelSetData::MaterialTechniqueQualityLevelSetData((re::MaterialTechniqueQualityLevelSetData *)buf, v211);
      v213 = re::Hash<re::DynamicString>::operator()((uint64_t)v435, (uint64_t)buf);
      v214 = v213;
      if (!(_QWORD)v408)
      {
        v215 = 0;
LABEL_310:
        v218 = v411;
        if ((_DWORD)v411 == 0x7FFFFFFF)
        {
          v218 = v410;
          v219 = v410;
          if (v410 == DWORD2(v409))
          {
            re::HashTable<re::DynamicString,re::MaterialTechniqueQualityLevelSetData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity((uint64_t)&v408, 2 * HIDWORD(v409));
            v219 = v410;
            v215 = v214 % DWORD2(v409);
          }
          v410 = v219 + 1;
          v220 = v409;
          v221 = *(_DWORD *)(v409 + 152 * v218 + 8);
        }
        else
        {
          v220 = v409;
          v221 = *(_DWORD *)(v409 + 152 * v411 + 8);
          LODWORD(v411) = v221 & 0x7FFFFFFF;
        }
        v222 = v220 + 152 * v218;
        *(_DWORD *)(v222 + 8) = v221 | 0x80000000;
        v223 = *((_QWORD *)&v408 + 1);
        *(_DWORD *)(v222 + 8) = *(_DWORD *)(*((_QWORD *)&v408 + 1) + 4 * v215) | 0x80000000;
        *(_QWORD *)v222 = v214;
        re::DynamicString::DynamicString((re::DynamicString *)(v222 + 16), (const re::DynamicString *)buf);
        re::MaterialTechniqueQualityLevelSetData::MaterialTechniqueQualityLevelSetData((re::MaterialTechniqueQualityLevelSetData *)(v222 + 48), (const re::MaterialTechniqueQualityLevelSetData *)buf);
        *(_DWORD *)(v223 + 4 * v215) = v218;
        ++HIDWORD(v409);
        goto LABEL_316;
      }
      v215 = v213 % DWORD2(v409);
      v216 = *(unsigned int *)(*((_QWORD *)&v408 + 1) + 4 * v215);
      if ((_DWORD)v216 == 0x7FFFFFFF)
        goto LABEL_310;
      v217 = v409;
      while (!re::DynamicString::operator==(v217 + 152 * v216 + 16, (uint64_t)buf))
      {
        v216 = *(_DWORD *)(v217 + 152 * v216 + 8) & 0x7FFFFFFF;
        if (v216 == 0x7FFFFFFF)
          goto LABEL_310;
      }
      re::MaterialTechniqueQualityLevelSetData::~MaterialTechniqueQualityLevelSetData((re::MaterialTechniqueQualityLevelSetData *)(v217 + 152 * v216 + 48));
      re::MaterialTechniqueQualityLevelSetData::MaterialTechniqueQualityLevelSetData(v224, (const re::MaterialTechniqueQualityLevelSetData *)buf);
LABEL_316:
      ++HIDWORD(v411);
      re::MaterialTechniqueQualityLevelSetData::~MaterialTechniqueQualityLevelSetData((re::MaterialTechniqueQualityLevelSetData *)buf);
      v211 = (const re::MaterialTechniqueQualityLevelSetData *)((char *)v211 + 104);
      if (v211 != v212)
        continue;
      break;
    }
    v157 = v395;
    v158 = *(_QWORD *)v395;
LABEL_319:
    v225 = *(unsigned int *)(v158 + 720);
    if ((_DWORD)v225)
    {
      v226 = 0;
      v227 = (int *)(*(_QWORD *)(v158 + 704) + 8);
      while (1)
      {
        v228 = *v227;
        v227 += 14;
        if (v228 < 0)
          break;
        if (v225 == ++v226)
        {
          LODWORD(v226) = *(_DWORD *)(v158 + 720);
          break;
        }
      }
      v157 = v395;
    }
    else
    {
      LODWORD(v226) = 0;
    }
    if ((_DWORD)v225 != (_DWORD)v226)
    {
      v229 = v226;
      do
      {
        re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace<int &>(v374, (re::DynamicString *)(*(_QWORD *)(v158 + 704) + 56 * v229 + 16), (_DWORD *)(*(_QWORD *)(v158 + 704) + 56 * v229 + 48));
        if (*(_DWORD *)(v158 + 720) <= (v226 + 1))
          v230 = v226 + 1;
        else
          v230 = *(_DWORD *)(v158 + 720);
        v231 = v226;
        while (1)
        {
          v229 = (v231 + 1);
          if (v230 - 1 == v231)
            break;
          ++v231;
          LODWORD(v226) = v229;
          if ((*(_DWORD *)(*(_QWORD *)(v158 + 704) + 56 * v229 + 8) & 0x80000000) != 0)
            goto LABEL_336;
        }
        LODWORD(v226) = v230;
LABEL_336:
        ;
      }
      while ((_DWORD)v225 != (_DWORD)v226);
      v157 = v395;
      v158 = *(_QWORD *)v395;
    }
    v383 = *(unsigned int *)(v158 + 632);
    v232 = 0;
    if ((_DWORD)v383)
    {
      v233 = (int *)(*(_QWORD *)(v158 + 616) + 8);
      while (1)
      {
        v234 = *v233;
        v233 += 24;
        if (v234 < 0)
          break;
        if (v383 == ++v232)
        {
          LODWORD(v232) = *(_DWORD *)(v158 + 632);
          break;
        }
      }
      v157 = v395;
    }
    if ((_DWORD)v383 != (_DWORD)v232)
    {
      v236 = v232;
      while (1)
      {
        v391 = *(_QWORD *)(v158 + 616);
        v237 = v391 + 96 * v236;
        v238 = (const re::DynamicString *)(v237 + 16);
        v239 = v394;
        if (re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v376, v237 + 16))
        {
          goto LABEL_354;
        }
        v240 = re::Hash<re::DynamicString>::operator()((uint64_t)buf, v237 + 16);
        if (*v393)
        {
          v241 = *(unsigned int *)(*((_QWORD *)v394 + 31) + 4 * (v240 % *((unsigned int *)v394 + 66)));
          if ((_DWORD)v241 != 0x7FFFFFFF)
            break;
        }
LABEL_353:
        if (re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v373, v237 + 16))
        {
          goto LABEL_354;
        }
        v264 = re::Hash<re::DynamicString>::operator()((uint64_t)buf, v237 + 16);
        if (*v385)
        {
          v265 = *(unsigned int *)(*((_QWORD *)v394 + 37) + 4 * (v264 % *((unsigned int *)v394 + 78)));
          if ((_DWORD)v265 != 0x7FFFFFFF)
          {
            v266 = *((_QWORD *)v394 + 38);
            do
            {
              v264 = re::DynamicString::operator==(v266 + 160 * v265 + 16, v237 + 16);
              if ((v264 & 1) != 0)
                goto LABEL_354;
              v265 = *(_DWORD *)(v266 + 160 * v265 + 8) & 0x7FFFFFFF;
            }
            while (v265 != 0x7FFFFFFF);
          }
        }
        v267 = *re::pipelineLogObjects((re *)v264);
        if (os_log_type_enabled(v267, OS_LOG_TYPE_DEFAULT))
        {
          if ((*(_BYTE *)(v391 + 96 * v236 + 24) & 1) != 0)
            v268 = *(_QWORD *)(v391 + 96 * v236 + 32);
          else
            v268 = v237 + 25;
          v284 = v366;
          if ((*((_QWORD *)v367 + 1) & 1) != 0)
            v284 = (char *)*((_QWORD *)v367 + 2);
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v268;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v284;
          _os_log_impl(&dword_224FE9000, v267, OS_LOG_TYPE_DEFAULT, "Ignoring property for unknown parameter (%s) in material (%s)", buf, 0x16u);
        }
LABEL_378:
        v262 = *(_DWORD *)(v158 + 632);
        if (v262 <= (int)v232 + 1)
          v262 = v232 + 1;
        while (1)
        {
          v236 = (v232 + 1);
          if (v262 - 1 == (_DWORD)v232)
            break;
          LODWORD(v232) = v232 + 1;
          v263 = v236;
          if ((*(_DWORD *)(*(_QWORD *)(v158 + 616) + 96 * v236 + 8) & 0x80000000) != 0)
            goto LABEL_384;
        }
        v263 = v262;
LABEL_384:
        LODWORD(v232) = v263;
        if ((_DWORD)v383 == v263)
        {
          v235 = v395;
          v158 = *(_QWORD *)v395;
          goto LABEL_431;
        }
      }
      v242 = *((_QWORD *)v394 + 32);
      while (!re::DynamicString::operator==(v242 + 88 * v241 + 16, v237 + 16))
      {
        v241 = *(_DWORD *)(v242 + 88 * v241 + 8) & 0x7FFFFFFF;
        if (v241 == 0x7FFFFFFF)
          goto LABEL_353;
      }
LABEL_354:
      v378 = (unsigned __int8 *)(v237 + 48);
      v243 = re::Hash<re::DynamicString>::operator()((uint64_t)buf, v237 + 16);
      if (!*v384
        || (v244 = *(unsigned int *)(*((_QWORD *)v394 + 76) + 4 * (v243 % *((unsigned int *)v394 + 156))),
            (_DWORD)v244 == 0x7FFFFFFF))
      {
LABEL_359:
        v246 = re::Hash<re::DynamicString>::operator()((uint64_t)buf, (uint64_t)v238);
        if (*v384)
        {
          v247 = v246 % *((unsigned int *)v394 + 156);
          v248 = *(unsigned int *)(*((_QWORD *)v394 + 76) + 4 * v247);
          if ((_DWORD)v248 == 0x7FFFFFFF)
          {
            v239 = v394;
            goto LABEL_367;
          }
          v369 = v246;
          v371 = v246 % *((unsigned int *)v394 + 156);
          v249 = *((_QWORD *)v394 + 77);
          while (!re::DynamicString::operator==(v249 + 96 * v248 + 16, (uint64_t)v238))
          {
            v248 = *(_DWORD *)(v249 + 96 * v248 + 8) & 0x7FFFFFFF;
            if (v248 == 0x7FFFFFFF)
            {
              v239 = v394;
              v246 = v369;
              v247 = v371;
              goto LABEL_367;
            }
          }
          v275 = v249 + 96 * v248;
          v277 = *(unsigned __int8 *)(v275 + 48);
          v276 = v275 + 48;
          if (v277)
          {
            v279 = (_OWORD *)(v276 + 8);
            v278 = *(_QWORD *)(v276 + 8);
            v280 = v378;
            if (v278)
            {
              if ((*(_BYTE *)(v276 + 16) & 1) != 0)
              {
                (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v278 + 40))(v278, *(_QWORD *)(v276 + 24));
                v280 = v378;
              }
              *v279 = 0u;
              v279[1] = 0u;
              v249 = *((_QWORD *)v394 + 77);
            }
          }
          else
          {
            v280 = v378;
          }
          v285 = v249 + 96 * v248;
          v286 = *v280;
          *(_BYTE *)(v285 + 48) = v286;
          v287 = v285 + 48;
          if (v286)
            re::DynamicString::DynamicString((re::DynamicString *)(v287 + 8), (const re::DynamicString *)(v280 + 8));
          v288 = *(unsigned __int8 *)(v391 + 96 * v236 + 88);
          *(_BYTE *)(v249 + 96 * v248 + 88) = v288;
          if (v288)
            *(_BYTE *)(v249 + 96 * v248 + 89) = *(_BYTE *)(v391 + 96 * v236 + 89);
          v261 = v394;
        }
        else
        {
          v247 = 0;
LABEL_367:
          v250 = v239;
          v251 = *((unsigned int *)v239 + 159);
          if ((_DWORD)v251 == 0x7FFFFFFF)
          {
            v251 = *((unsigned int *)v250 + 158);
            v252 = v251;
            if ((_DWORD)v251 == *((_DWORD *)v250 + 156))
            {
              v253 = v246;
              re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity((uint64_t)v384, 2 * *((_DWORD *)v250 + 157));
              v246 = v253;
              v247 = v253 % *((unsigned int *)v250 + 156);
              v252 = *((_DWORD *)v250 + 158);
            }
            *((_DWORD *)v250 + 158) = v252 + 1;
            v254 = *((_QWORD *)v250 + 77);
            v255 = *(_DWORD *)(v254 + 96 * v251 + 8);
          }
          else
          {
            v254 = *((_QWORD *)v250 + 77);
            v255 = *(_DWORD *)(v254 + 96 * v251 + 8);
            *((_DWORD *)v250 + 159) = v255 & 0x7FFFFFFF;
          }
          *(_DWORD *)(v254 + 96 * v251 + 8) = v255 | 0x80000000;
          *(_DWORD *)(*((_QWORD *)v250 + 77) + 96 * v251 + 8) = *(_DWORD *)(*((_QWORD *)v250 + 77) + 96 * v251 + 8) & 0x80000000 | *(_DWORD *)(*((_QWORD *)v250 + 76) + 4 * v247);
          *(_QWORD *)(*((_QWORD *)v250 + 77) + 96 * v251) = v246;
          re::DynamicString::DynamicString((re::DynamicString *)(*((_QWORD *)v250 + 77) + 96 * v251 + 16), v238);
          v256 = *((_QWORD *)v250 + 77);
          v257 = v256 + 96 * v251;
          v258 = *v378;
          *(_BYTE *)(v257 + 48) = v258;
          v259 = v257 + 48;
          if (v258)
            re::DynamicString::DynamicString((re::DynamicString *)(v259 + 8), (const re::DynamicString *)(v378 + 8));
          v260 = *(unsigned __int8 *)(v391 + 96 * v236 + 88);
          *(_BYTE *)(v256 + 96 * v251 + 88) = v260;
          if (v260)
            *(_BYTE *)(v256 + 96 * v251 + 89) = *(_BYTE *)(v391 + 96 * v236 + 89);
          v261 = v394;
          *(_DWORD *)(*((_QWORD *)v394 + 76) + 4 * v247) = v251;
          ++*((_DWORD *)v394 + 157);
        }
        ++*((_DWORD *)v261 + 160);
        goto LABEL_378;
      }
      v245 = *((_QWORD *)v394 + 77);
      while (!re::DynamicString::operator==(v245 + 96 * v244 + 16, (uint64_t)v238))
      {
        v244 = *(_DWORD *)(v245 + 96 * v244 + 8) & 0x7FFFFFFF;
        if (v244 == 0x7FFFFFFF)
          goto LABEL_359;
      }
      v269 = re::Hash<re::DynamicString>::operator()((uint64_t)buf, (uint64_t)v238);
      if (*v384
        && (v270 = *(unsigned int *)(*((_QWORD *)v394 + 76) + 4 * (v269 % *((unsigned int *)v394 + 156))),
            (_DWORD)v270 != 0x7FFFFFFF))
      {
        v289 = *((_QWORD *)v394 + 77);
        while (!re::DynamicString::operator==(v289 + 96 * v270 + 16, (uint64_t)v238))
        {
          v270 = *(_DWORD *)(v289 + 96 * v270 + 8) & 0x7FFFFFFF;
          v271 = 0x7FFFFFFFLL;
          if (v270 == 0x7FFFFFFF)
            goto LABEL_397;
        }
        v271 = v270;
      }
      else
      {
        v271 = 0x7FFFFFFFLL;
      }
LABEL_397:
      if (*v378)
        re::Optional<re::DynamicString>::operator=((unsigned __int8 *)(*((_QWORD *)v394 + 77) + 96 * v271 + 48), v378);
      v272 = re::Hash<re::DynamicString>::operator()((uint64_t)buf, (uint64_t)v238);
      if (*v384)
      {
        v273 = *(unsigned int *)(*((_QWORD *)v394 + 76) + 4 * (v272 % *((unsigned int *)v394 + 156)));
        v274 = *((_QWORD *)v394 + 77);
        if ((_DWORD)v273 != 0x7FFFFFFF)
        {
          while (!re::DynamicString::operator==(v274 + 96 * v273 + 16, (uint64_t)v238))
          {
            v273 = *(_DWORD *)(v274 + 96 * v273 + 8) & 0x7FFFFFFF;
            if (v273 == 0x7FFFFFFF)
              goto LABEL_410;
          }
          goto LABEL_411;
        }
      }
      else
      {
        v274 = *((_QWORD *)v394 + 77);
      }
LABEL_410:
      v273 = 0x7FFFFFFFLL;
LABEL_411:
      if (*(_BYTE *)(v391 + 96 * v236 + 88))
      {
        v281 = v274 + 96 * v273;
        v283 = *(unsigned __int8 *)(v281 + 88);
        v282 = (_BYTE *)(v281 + 88);
        if (!v283)
          *v282 = 1;
        *(_BYTE *)(v274 + 96 * v273 + 89) = *(_BYTE *)(v391 + 96 * v236 + 89);
      }
      goto LABEL_378;
    }
    v235 = v157;
LABEL_431:
    re::appendOrDelete<re::DynamicString,re::DynamicString>(v363, v158 + 464);
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)buf);
    re::DynamicString::DynamicString((re::DynamicString *)v428, "Transparent", (re::Allocator *)buf);
    re::DynamicString::DynamicString((re::DynamicString *)&v396, "FadeOpaque", (re::Allocator *)buf);
    v290 = *(_QWORD *)v235;
    if (*(_DWORD *)(*(_QWORD *)v235 + 540))
    {
      v291 = *(unsigned int *)(v290 + 544);
      if ((_DWORD)v291)
      {
        v292 = 0;
        v293 = (int *)(*(_QWORD *)(v290 + 528) + 8);
        while (1)
        {
          v294 = *v293;
          v293 += 24;
          if (v294 < 0)
            break;
          if (v291 == ++v292)
          {
            LODWORD(v292) = *(_DWORD *)(v290 + 544);
            break;
          }
        }
      }
      else
      {
        LODWORD(v292) = 0;
      }
      if ((_DWORD)v291 != (_DWORD)v292)
      {
        v295 = v292;
        v372 = *(_DWORD *)(v290 + 544);
        do
        {
          v296 = *(_QWORD *)(v290 + 528);
          v297 = v296 + 96 * v295;
          v298 = (re::DynamicString *)(v297 + 16);
          memset(v435, 0, 48);
          DWORD1(v435[2]) = 0x7FFFFFFF;
          v299 = re::Hash<re::DynamicString>::operator()((uint64_t)&v398, v297 + 16);
          v300 = v299;
          if (*v375)
          {
            v301 = v299 % *((unsigned int *)v394 + 134);
            v302 = *(unsigned int *)(*((_QWORD *)v394 + 65) + 4 * v301);
            if ((_DWORD)v302 != 0x7FFFFFFF)
            {
              v379 = v299 % *((unsigned int *)v394 + 134);
              v291 = *((_QWORD *)v394 + 66);
              while (!re::DynamicString::operator==(v291 + 96 * v302 + 16, (uint64_t)v298))
              {
                v302 = *(_DWORD *)(v291 + 96 * v302 + 8) & 0x7FFFFFFF;
                if (v302 == 0x7FFFFFFF)
                {
                  LODWORD(v291) = v372;
                  LODWORD(v301) = v379;
                  v297 = v296 + 96 * v295;
                  goto LABEL_456;
                }
              }
              v304 = v291 + 96 * v302 + 48;
              LODWORD(v291) = v372;
              v297 = v296 + 96 * v295;
              goto LABEL_457;
            }
            v297 = v296 + 96 * v295;
          }
          else
          {
            LODWORD(v301) = 0;
          }
LABEL_456:
          v303 = re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove((uint64_t)v375, v301, v300, v298, (uint64_t *)v435);
          ++*((_DWORD *)v394 + 138);
          v304 = *((_QWORD *)v394 + 66) + 96 * v303 + 48;
LABEL_457:
          v305 = v297 + 48;
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v435);
          v306 = v296 + 96 * v295;
          v308 = *(_QWORD *)(v306 + 24);
          v307 = *(const char **)(v306 + 32);
          if ((v308 & 1) != 0)
            v309 = v307;
          else
            v309 = (char *)v298 + 9;
          if (!strcmp(v309, "Fade")
            && re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v305, (uint64_t)v428)&& re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v304, (uint64_t)&v396))
          {
            re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove(v304, (uint64_t)&v396);
          }
          re::append<re::DynamicString,re::DynamicString>(v304, v305);
          v310 = *(_DWORD *)(v290 + 544);
          if (v310 <= (int)v292 + 1)
            v310 = v292 + 1;
          while (1)
          {
            v295 = (v292 + 1);
            if (v310 - 1 == (_DWORD)v292)
              break;
            LODWORD(v292) = v292 + 1;
            v311 = v295;
            if ((*(_DWORD *)(*(_QWORD *)(v290 + 528) + 96 * v295 + 8) & 0x80000000) != 0)
              goto LABEL_470;
          }
          v311 = v310;
LABEL_470:
          LODWORD(v292) = v311;
        }
        while ((_DWORD)v291 != v311);
      }
    }
    if (v396 && (v397 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v396 + 40))();
    v5 = (uint64_t)v394;
    v9 = v364;
    if (*(_QWORD *)v428 && (v428[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)v428 + 40))();
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)buf);
    v8 = v395;
  }
  while (v395 != *(_QWORD *)(v365 + 32));
  v312 = v422;
  if (!v422)
    goto LABEL_475;
  v313 = 0;
  v362 = (_DWORD *)(v421 + 8);
  while ((*v362 & 0x80000000) == 0)
  {
    v362 += 178;
    if (v422 == ++v313)
    {
      LODWORD(v313) = v422;
      break;
    }
  }
LABEL_476:
  if (v312 != (_DWORD)v313)
  {
    v314 = v313;
    v315 = v421;
    v316 = *(_QWORD *)(v5 + 400);
    do
    {
      if (v316 >= *(_QWORD *)(v5 + 392))
      {
        re::DynamicArray<re::MaterialTechniqueData>::growCapacity((_QWORD *)(v5 + 384), v316 + 1);
        v316 = *(_QWORD *)(v5 + 400);
      }
      re::MaterialTechniqueData::MaterialTechniqueData((re::MaterialTechniqueData *)(*(_QWORD *)(v5 + 416) + 664 * v316), (const re::MaterialTechniqueData *)(v315 + 712 * v314 + 48));
      v316 = *(_QWORD *)(v5 + 400) + 1;
      *(_QWORD *)(v5 + 400) = v316;
      ++*(_DWORD *)(v5 + 408);
      v315 = v421;
      if (v422 <= (int)v313 + 1)
        v317 = v313 + 1;
      else
        v317 = v422;
      while (1)
      {
        v314 = (v313 + 1);
        if (v317 - 1 == (_DWORD)v313)
          break;
        LODWORD(v313) = v313 + 1;
        v318 = v314;
        if ((*(_DWORD *)(v421 + 712 * v314 + 8) & 0x80000000) != 0)
          goto LABEL_487;
      }
      v318 = v317;
LABEL_487:
      LODWORD(v313) = v318;
    }
    while (v312 != v318);
  }
  re::HashTable<re::DynamicString,re::MaterialTechniqueData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v420);
  v319 = (_QWORD *)(v5 + 424);
  if (*(_QWORD *)(v5 + 432) < (unint64_t)HIDWORD(v417))
    re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity((_QWORD *)(v5 + 424), HIDWORD(v417));
  v320 = v418;
  if (v418)
  {
    v321 = 0;
    v322 = (int *)(v417 + 8);
    while (1)
    {
      v323 = *v322;
      v322 += 30;
      if (v323 < 0)
        break;
      if (v418 == ++v321)
      {
        LODWORD(v321) = v418;
        break;
      }
    }
  }
  else
  {
    LODWORD(v321) = 0;
  }
  if (v418 != (_DWORD)v321)
  {
    v324 = v321;
    v325 = v417;
    do
    {
      v326 = re::HashTable<re::DynamicString,re::MaterialTechniqueData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)&v420, v325 + 120 * v324 + 16);
      if (v326)
      {
        v327 = *re::pipelineLogObjects((re *)v326);
        if (os_log_type_enabled(v327, OS_LOG_TYPE_DEFAULT))
        {
          if ((*(_BYTE *)(v325 + 120 * v324 + 24) & 1) != 0)
            v328 = *(_QWORD *)(v325 + 120 * v324 + 32);
          else
            v328 = v325 + 120 * v324 + 25;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v328;
          _os_log_impl(&dword_224FE9000, v327, OS_LOG_TYPE_DEFAULT, "Technique group \"%s\" has the same name as a technique. Skipping the group.", buf, 0xCu);
        }
      }
      else
      {
        v329 = *((_QWORD *)v394 + 55);
        if (v329 >= *((_QWORD *)v394 + 54))
        {
          re::DynamicArray<re::MaterialTechniqueGroupData>::growCapacity(v319, v329 + 1);
          v329 = *((_QWORD *)v394 + 55);
        }
        v330 = re::DynamicString::DynamicString((re::DynamicString *)(*((_QWORD *)v394 + 57) + 72 * v329), (const re::DynamicString *)(v325 + 120 * v324 + 48));
        re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)v330 + 32, (uint64_t *)(v325 + 120 * v324 + 80));
        ++*((_QWORD *)v394 + 55);
        ++*((_DWORD *)v394 + 112);
      }
      v325 = v417;
      if (v418 <= (int)v321 + 1)
        v331 = v321 + 1;
      else
        v331 = v418;
      while (1)
      {
        v324 = (v321 + 1);
        if (v331 - 1 == (_DWORD)v321)
          break;
        LODWORD(v321) = v321 + 1;
        v332 = v324;
        if ((*(_DWORD *)(v417 + 120 * v324 + 8) & 0x80000000) != 0)
          goto LABEL_514;
      }
      v332 = v331;
LABEL_514:
      LODWORD(v321) = v332;
    }
    while (v320 != v332);
  }
  v333 = re::HashTable<re::DynamicString,re::MaterialTechniqueGroupData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v416);
  v334 = v414;
  if (v414)
  {
    v335 = 0;
    v336 = (int *)(v413 + 8);
    v337 = v394;
    while (1)
    {
      v338 = *v336;
      v336 += 32;
      if (v338 < 0)
        break;
      if (v414 == ++v335)
      {
        LODWORD(v335) = v414;
        break;
      }
    }
  }
  else
  {
    LODWORD(v335) = 0;
    v337 = v394;
  }
  if (v414 != (_DWORD)v335)
  {
    v339 = v335;
    v340 = v413;
    v341 = *((_QWORD *)v337 + 72);
    do
    {
      if (v341 >= *((_QWORD *)v337 + 71))
      {
        re::DynamicArray<re::DebugMapping>::growCapacity((_QWORD *)v337 + 70, v341 + 1);
        v341 = *((_QWORD *)v337 + 72);
      }
      v342 = v340 + (v339 << 7);
      v343 = re::DynamicString::DynamicString((re::DynamicString *)(*((_QWORD *)v337 + 74) + 80 * v341), (const re::DynamicString *)(v342 + 48));
      re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v343 + 32, v342 + 80);
      v341 = *((_QWORD *)v337 + 72) + 1;
      *((_QWORD *)v337 + 72) = v341;
      ++*((_DWORD *)v337 + 146);
      v340 = v413;
      if (v414 <= (int)v335 + 1)
        v344 = v335 + 1;
      else
        v344 = v414;
      while (1)
      {
        v339 = (v335 + 1);
        if (v344 - 1 == (_DWORD)v335)
          break;
        LODWORD(v335) = v335 + 1;
        v345 = v339;
        if ((*(_DWORD *)(v413 + (v339 << 7) + 8) & 0x80000000) != 0)
          goto LABEL_532;
      }
      v345 = v344;
LABEL_532:
      LODWORD(v335) = v345;
    }
    while (v334 != v345);
  }
  re::HashTable<re::DynamicString,re::DebugMapping,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v412, v333);
  v346 = (_QWORD *)((char *)v337 + 648);
  if (*((_QWORD *)v337 + 82) < (unint64_t)HIDWORD(v409))
    re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity((_QWORD *)v337 + 81, HIDWORD(v409));
  v347 = v410;
  if (v410)
  {
    v348 = 0;
    v349 = (int *)(v409 + 8);
    while (1)
    {
      v350 = *v349;
      v349 += 38;
      if (v350 < 0)
        break;
      if (v410 == ++v348)
      {
        LODWORD(v348) = v410;
        break;
      }
    }
  }
  else
  {
    LODWORD(v348) = 0;
  }
  if (v410 != (_DWORD)v348)
  {
    v351 = v348;
    v352 = v409;
    do
    {
      v353 = re::HashTable<re::DynamicString,re::MaterialTechniqueData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)&v420, v352 + 152 * v351 + 16);
      if (v353)
      {
        v354 = *re::pipelineLogObjects((re *)v353);
        if (os_log_type_enabled(v354, OS_LOG_TYPE_DEFAULT))
        {
          if ((*(_BYTE *)(v352 + 152 * v351 + 24) & 1) != 0)
            v355 = *(_QWORD *)(v352 + 152 * v351 + 32);
          else
            v355 = v352 + 152 * v351 + 25;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v355;
          _os_log_impl(&dword_224FE9000, v354, OS_LOG_TYPE_DEFAULT, "Technique group \"%s\" has the same name as a technique. Skipping the group.", buf, 0xCu);
        }
      }
      else
      {
        v356 = *((_QWORD *)v394 + 83);
        if (v356 >= *((_QWORD *)v394 + 82))
        {
          re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::growCapacity(v346, v356 + 1);
          v356 = *((_QWORD *)v394 + 83);
        }
        re::MaterialTechniqueQualityLevelSetData::MaterialTechniqueQualityLevelSetData((re::MaterialTechniqueQualityLevelSetData *)(*((_QWORD *)v394 + 85) + 104 * v356), (const re::MaterialTechniqueQualityLevelSetData *)(v352 + 152 * v351 + 48));
        ++*((_QWORD *)v394 + 83);
        ++*((_DWORD *)v394 + 168);
      }
      v352 = v409;
      if (v410 <= (int)v348 + 1)
        v357 = v348 + 1;
      else
        v357 = v410;
      while (1)
      {
        v351 = (v348 + 1);
        if (v357 - 1 == (_DWORD)v348)
          break;
        LODWORD(v348) = v348 + 1;
        v358 = v351;
        if ((*(_DWORD *)(v409 + 152 * v351 + 8) & 0x80000000) != 0)
          goto LABEL_559;
      }
      v358 = v357;
LABEL_559:
      LODWORD(v348) = v358;
    }
    while (v347 != v358);
  }
  v359 = re::HashTable<re::DynamicString,re::MaterialTechniqueQualityLevelSetData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v408);
  re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v400, v359);
  re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)__b);
  v360 = re::HashTable<re::DynamicString,re::MaterialTechniqueQualityLevelSetData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v408);
  re::HashTable<re::DynamicString,re::DebugMapping,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v412, v360);
  re::HashTable<re::DynamicString,re::MaterialTechniqueGroupData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v416);
  re::HashTable<re::DynamicString,re::MaterialTechniqueData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v420);
  return v394;
}

re::MaterialDefinitionFile *re::makeFlattenedMaterialFile(uint64_t a1, char *a2)
{
  uint64_t v4;
  BOOL v5;
  _BOOL8 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  NSObject *v11;
  char *v12;
  re *v13;
  unsigned int v14;
  uint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  unsigned int v21;
  unsigned int v22;
  NSObject *v23;
  char *v24;
  char *v25;
  re::MaterialDefinitionFile *v26;
  double v27;
  double v28;
  _OWORD v30[2];
  char *v31;
  _QWORD v32[3];
  uint64_t v33[3];
  __int128 v34;
  __int128 v35;
  unsigned int v36;
  uint64_t v37;
  _QWORD v38[3];
  int v39;
  uint64_t v40;
  _BYTE v41[12];
  __int16 v42;
  _BYTE v43[10];
  __int128 buf;
  char *v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  v40 = 0;
  memset(v38, 0, sizeof(v38));
  v39 = 0;
  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  v37 = 0x7FFFFFFFLL;
  re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)&v34, (re::DynamicString *)a2);
  v31 = a2;
  re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v38, &v31);
  re::AssetHandle::AssetHandle((re::AssetHandle *)v33, (const re::AssetHandle *)(a2 + 120));
  while (1)
  {
    re::AssetHandle::serializationString((re::AssetHandle *)v33, (re::DynamicString *)&v31);
    if ((v32[0] & 1) != 0)
      v4 = v32[0] >> 1;
    else
      v4 = LOBYTE(v32[0]) >> 1;
    if (v31)
      v5 = (v32[0] & 1) == 0;
    else
      v5 = 1;
    if (!v5)
      (*(void (**)(void))(*(_QWORD *)v31 + 40))();
    if (!v4)
      break;
    re::AssetHandle::serializationString((re::AssetHandle *)v33, (re::DynamicString *)v30);
    re::makeTruncatedAssetPath((char *)v30, (re::DynamicString *)&v31);
    if (*(_QWORD *)&v30[0])
    {
      if ((BYTE8(v30[0]) & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)&v30[0] + 40))();
      memset(v30, 0, sizeof(v30));
    }
    v6 = re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(a1, (uint64_t)&v31);
    if (!v6)
    {
      v11 = *re::pipelineLogObjects((re *)v6);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        if ((v32[0] & 1) != 0)
          v12 = (char *)v32[1];
        else
          v12 = (char *)v32 + 1;
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v12;
        _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "Cannot find asset path %s in overrideMaterials.", (uint8_t *)&buf, 0xCu);
      }
LABEL_65:
      if (v31 && (v32[0] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v31 + 40))();
      break;
    }
    v7 = re::Hash<re::DynamicString>::operator()((uint64_t)&buf, (uint64_t)&v31);
    if (!*(_QWORD *)a1)
    {
      v8 = *(_QWORD *)(a1 + 16);
LABEL_22:
      v9 = 0x7FFFFFFFLL;
      goto LABEL_23;
    }
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v7 % *(unsigned int *)(a1 + 24)));
    if ((_DWORD)v9 == 0x7FFFFFFF)
      goto LABEL_22;
    while (!re::DynamicString::operator==(v8 + 784 * v9 + 16, (uint64_t)&v31))
    {
      v9 = *(_DWORD *)(v8 + 784 * v9 + 8) & 0x7FFFFFFF;
      if (v9 == 0x7FFFFFFF)
        goto LABEL_22;
    }
LABEL_23:
    v10 = re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::contains((uint64_t)&v34, v8 + 784 * v9 + 48);
    if (v10)
    {
      *((_QWORD *)&buf + 1) = 0;
      v45 = 0;
      v46 = 0;
      v13 = (re *)re::DynamicString::setCapacity(&buf, 0);
      v14 = v36;
      if (v36)
      {
        v15 = 0;
        v16 = (int *)(v35 + 8);
        while (1)
        {
          v17 = *v16;
          v16 += 12;
          if (v17 < 0)
            break;
          if (v36 == ++v15)
          {
            LODWORD(v15) = v36;
            break;
          }
        }
      }
      else
      {
        LODWORD(v15) = 0;
      }
      if (v36 != (_DWORD)v15)
      {
        v18 = v15;
        v19 = v35;
        do
        {
          re::DynamicString::DynamicString((re::DynamicString *)v41, (const re::DynamicString *)(v19 + 48 * v18 + 16));
          if ((v41[8] & 1) != 0)
            v20 = *(const char **)&v43[2];
          else
            v20 = &v41[9];
          re::DynamicString::appendf((re::DynamicString *)&buf, "-> %s", v20);
          v13 = *(re **)v41;
          if (*(_QWORD *)v41 && (v41[8] & 1) != 0)
            v13 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)v41 + 40))();
          v19 = v35;
          if (v36 <= (int)v15 + 1)
            v21 = v15 + 1;
          else
            v21 = v36;
          while (1)
          {
            v18 = (v15 + 1);
            if (v21 - 1 == (_DWORD)v15)
              break;
            LODWORD(v15) = v15 + 1;
            v22 = v18;
            if ((*(_DWORD *)(v35 + 48 * v18 + 8) & 0x80000000) != 0)
              goto LABEL_53;
          }
          v22 = v21;
LABEL_53:
          LODWORD(v15) = v22;
        }
        while (v14 != v22);
      }
      v23 = *re::pipelineLogObjects(v13);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        if ((*((_QWORD *)a2 + 1) & 1) != 0)
          v24 = (char *)*((_QWORD *)a2 + 2);
        else
          v24 = a2 + 9;
        if ((BYTE8(buf) & 1) != 0)
          v25 = v45;
        else
          v25 = (char *)&buf + 9;
        *(_DWORD *)v41 = 136315394;
        *(_QWORD *)&v41[4] = v24;
        v42 = 2080;
        *(_QWORD *)v43 = v25;
        _os_log_impl(&dword_224FE9000, v23, OS_LOG_TYPE_DEFAULT, "Found circular dependency in material %s: {%s}", v41, 0x16u);
      }
      if ((_QWORD)buf && (BYTE8(buf) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)buf + 40))();
      goto LABEL_65;
    }
    re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add((uint64_t)&v34, (re::DynamicString *)(v8 + 784 * v9 + 48));
    *(_QWORD *)&buf = v8 + 784 * v9 + 48;
    re::DynamicArray<re::RigDataValue *>::add((_anonymous_namespace_ *)v38, &buf);
    re::AssetHandle::operator=(v33, (uint64_t *)(v8 + 784 * v9 + 168));
    if (v31)
    {
      if ((v32[0] & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v31 + 40))();
    }
  }
  v26 = re::resolveOverrideMaterials((re *)a2, (uint64_t)v38);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v33);
  v28 = re::HashSetBase<re::DynamicString,re::DynamicString,re::internal::ValueAsKey<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v34, v27);
  if (v38[0] && v40)
    (*(void (**)(double))(*(_QWORD *)v38[0] + 40))(v28);
  return v26;
}

void re::makeTruncatedAssetPath(char *a1@<X0>, re::DynamicString *a2@<X8>)
{
  unint64_t v4;
  size_t v5;
  char *v6;
  char *v7;
  std::string *p_p;
  _anonymous_namespace_ *v10;
  char *v11;
  char *v12;
  const char *v14;
  _anonymous_namespace_ *v15;
  std::string v16;
  std::string __p;
  void *v18;
  char v19;
  _BYTE v20[7];
  char *v21;
  _BYTE v22[8];
  uint64_t v23;

  LOBYTE(v18) = 58;
  re::DynamicString::find((re::DynamicString *)a1, (char *)&v18, 1, 0, (uint64_t)v22);
  if (v22[0])
  {
    v4 = *((_QWORD *)a1 + 1);
    if ((v4 & 1) != 0)
      v5 = v4 >> 1;
    else
      v5 = v4 >> 1;
    re::DynamicString::substr((re::DynamicString *)a1, v23 + 1, v5, (re::DynamicString *)&v18);
    if ((v19 & 1) != 0)
      v6 = v21;
    else
      v6 = v20;
    memset(&v16, 0, sizeof(v16));
    v7 = v6 - 1;
    while (*++v7)
      ;
    std::string::append[abi:nn180100]<char const*,0>(&v16, v6, v7);
    p_p = &__p;
    std::__fs::filesystem::path::filename[abi:nn180100]((const std::__fs::filesystem::path *)&v16, (uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    if (v18)
    {
      if ((v19 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v18 + 40))();
    }
  }
  else
  {
    if ((a1[8] & 1) != 0)
      v11 = (char *)*((_QWORD *)a1 + 2);
    else
      v11 = a1 + 9;
    memset(&__p, 0, sizeof(__p));
    v12 = v11 - 1;
    while (*++v12)
      ;
    std::string::append[abi:nn180100]<char const*,0>(&__p, v11, v12);
    v14 = (const char *)&v18;
    std::__fs::filesystem::path::filename[abi:nn180100]((const std::__fs::filesystem::path *)&__p, (uint64_t)&v18);
    if (SHIBYTE(v21) < 0)
      v14 = (const char *)v18;
    if (SHIBYTE(v21) < 0)
      operator delete(v18);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

BOOL re::HashTable<re::DynamicString,re::MaterialDefinitionFile,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v9, a2);
  v5 = 0x7FFFFFFFLL;
  if (*(_QWORD *)a1)
  {
    v6 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
    if ((_DWORD)v6 != 0x7FFFFFFF)
    {
      v7 = *(_QWORD *)(a1 + 16);
      v5 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v7 + 784 * v6 + 16, a2))
      {
        v6 = *(_DWORD *)(v7 + 784 * v6 + 8) & 0x7FFFFFFF;
        if (v6 == 0x7FFFFFFF)
          return v5 != 0x7FFFFFFF;
      }
      v5 = v6;
    }
  }
  return v5 != 0x7FFFFFFF;
}

double std::__fs::filesystem::path::filename[abi:nn180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__filename(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

uint64_t re::append<re::DynamicString,re::DynamicString>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;

  v3 = result;
  v4 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 20;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v8 = v5;
    v9 = *(_QWORD *)(a2 + 16);
    do
    {
      result = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::DynamicString&>(v3, (re::DynamicString *)(v9 + 80 * v8 + 16), 2, (const re::DynamicString *)(v9 + 80 * v8 + 48));
      v9 = *(_QWORD *)(a2 + 16);
      if (*(_DWORD *)(a2 + 32) <= (v5 + 1))
        v10 = v5 + 1;
      else
        v10 = *(_DWORD *)(a2 + 32);
      v11 = v5;
      while (1)
      {
        v8 = (v11 + 1);
        if (v10 - 1 == v11)
          break;
        ++v11;
        LODWORD(v5) = v8;
        if ((*(_DWORD *)(v9 + 80 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      LODWORD(v5) = v10;
LABEL_17:
      ;
    }
    while ((_DWORD)v4 != (_DWORD)v5);
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v8, a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v6 + 160 * v5 + 16, a2))
  {
    v5 = *(_DWORD *)(v6 + 160 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      return 0;
  }
  return v6 + 160 * v5 + 48;
}

re::DynamicString *re::replaceIfValid<re::DynamicString>(re::DynamicString *this, re::DynamicString *a2)
{
  unint64_t v2;
  unint64_t v3;

  if (*(_QWORD *)a2)
  {
    v2 = *((_QWORD *)a2 + 1);
    if ((v2 & 1) != 0)
      v3 = v2 >> 1;
    else
      v3 = v2 >> 1;
    if (v3)
      return re::DynamicString::operator=(this, a2);
  }
  return this;
}

void re::resolveOverrideMaterials(re::MaterialDefinitionFile const&,re::DynamicArray<re::MaterialDefinitionFile const*> const&)::$_0::operator()(uint64_t *a1, re::DynamicString *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  int v22;
  int v23;
  BOOL v24;
  _BYTE *v25;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _anonymous_namespace_ *v34;
  re::DynamicString *v35;
  re::DynamicString *v36;
  uint64_t v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[671];
  _BYTE v43[9];

  if (!re::HashTable<re::DynamicString,re::MaterialTechniqueData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(*a1, (uint64_t)a2))
  {
    re::MaterialTechniqueData::MaterialTechniqueData((re::MaterialTechniqueData *)v42, (const re::MaterialTechniqueData *)a3);
    re::DynamicString::operator=((re::DynamicString *)v42, a2);
    v11 = *a1;
    v12 = re::Hash<re::DynamicString>::operator()((uint64_t)v43, (uint64_t)a2);
    v13 = v12;
    if (*(_QWORD *)v11)
    {
      v14 = v12 % *(unsigned int *)(v11 + 24);
      v15 = *(unsigned int *)(*(_QWORD *)(v11 + 8) + 4 * v14);
      if ((_DWORD)v15 != 0x7FFFFFFF)
      {
        v16 = *(_QWORD *)(v11 + 16);
        while (!re::DynamicString::operator==(v16 + 712 * v15 + 16, (uint64_t)a2))
        {
          v15 = *(_DWORD *)(v16 + 712 * v15 + 8) & 0x7FFFFFFF;
          if (v15 == 0x7FFFFFFF)
            goto LABEL_15;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LODWORD(v14) = 0;
    }
LABEL_15:
    re::HashTable<re::DynamicString,re::MaterialTechniqueData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(v11, v14, v13, a2, (uint64_t)v42);
    ++*(_DWORD *)(v11 + 40);
LABEL_16:
    re::MaterialTechniqueData::~MaterialTechniqueData((re::MaterialTechniqueData *)v42);
    return;
  }
  v6 = *a1;
  v7 = re::Hash<re::DynamicString>::operator()((uint64_t)v42, (uint64_t)a2);
  v8 = 0x7FFFFFFFLL;
  if (*(_QWORD *)v6)
  {
    v9 = *(unsigned int *)(*(_QWORD *)(v6 + 8) + 4 * (v7 % *(unsigned int *)(v6 + 24)));
    if ((_DWORD)v9 != 0x7FFFFFFF)
    {
      v10 = *(_QWORD *)(v6 + 16);
      v8 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v10 + 712 * v9 + 16, (uint64_t)a2))
      {
        v9 = *(_DWORD *)(v10 + 712 * v9 + 8) & 0x7FFFFFFF;
        if (v9 == 0x7FFFFFFF)
          goto LABEL_18;
      }
      v8 = v9;
    }
  }
LABEL_18:
  v17 = *(_QWORD *)(v6 + 16);
  if (*(_QWORD *)(a3 + 72) && !*(_QWORD *)(v17 + 712 * v8 + 120))
    re::AssetHandle::operator=((uint64_t *)(v17 + 712 * v8 + 112), (uint64_t *)(a3 + 64));
  if (!*(_BYTE *)(a3 + 552))
  {
    v18 = v17 + 712 * v8;
    v19 = *(_OWORD *)(a3 + 216);
    v20 = *(_OWORD *)(a3 + 232);
    v21 = *(_OWORD *)(a3 + 200);
    *(_DWORD *)(v18 + 296) = *(_DWORD *)(a3 + 248);
    *(_OWORD *)(v18 + 248) = v21;
    *(_OWORD *)(v18 + 280) = v20;
    *(_OWORD *)(v18 + 264) = v19;
    v22 = *(unsigned __int8 *)(v18 + 300);
    v23 = *(unsigned __int8 *)(a3 + 252);
    if (*(_BYTE *)(v18 + 300))
      v24 = 0;
    else
      v24 = v23 == 0;
    if (!v24)
    {
      v25 = (_BYTE *)(v18 + 300);
      if (v22)
        v26 = v23 == 0;
      else
        v26 = 0;
      if (v26)
      {
        *v25 = 0;
      }
      else
      {
        if (v22)
          v27 = 1;
        else
          v27 = v23 == 0;
        if (!v27)
          *v25 = 1;
        *(_BYTE *)(v17 + 712 * v8 + 301) = *(_BYTE *)(a3 + 253);
      }
    }
    re::DynamicArray<re::RenderAttachmentState>::operator=(v17 + 712 * v8 + 304, (uint64_t *)(a3 + 256));
  }
  if (*(_QWORD *)(a3 + 96))
  {
    v28 = v17 + 712 * v8;
    if (!*(_QWORD *)(v28 + 144))
      re::AssetHandle::operator=((uint64_t *)(v28 + 136), (uint64_t *)(a3 + 88));
  }
  v29 = (uint64_t *)(v17 + 712 * v8);
  re::replaceIfValid<re::DynamicString>((re::DynamicString *)(v29 + 20), (re::DynamicString *)(a3 + 112));
  if (*(_QWORD *)(a3 + 152) && !v29[25])
    re::AssetHandle::operator=(v29 + 24, (uint64_t *)(a3 + 144));
  v30 = v17 + 712 * v8;
  re::replaceIfValid<re::DynamicString>((re::DynamicString *)(v30 + 216), (re::DynamicString *)(a3 + 168));
  re::append<re::DynamicString,re::DynamicString>(v30 + 376, a3 + 328);
  re::append<re::DynamicString,re::DynamicString>(v30 + 608, a3 + 560);
  re::append<re::DynamicString,re::DynamicArray<re::DynamicString>>(v30 + 656, a3 + 608);
  if (*(_BYTE *)(a3 + 553))
    *(_BYTE *)(v17 + 712 * v8 + 601) = 1;
  if (*(_BYTE *)(a3 + 656))
    *(_BYTE *)(v17 + 712 * v8 + 704) = 1;
  if (*(_BYTE *)(a3 + 657))
  {
    v31 = v17 + 712 * v8;
    if (!*(_BYTE *)(v31 + 705))
      *(_BYTE *)(v31 + 705) = 1;
    *(_BYTE *)(v17 + 712 * v8 + 706) = *(_BYTE *)(a3 + 658);
  }
  v32 = v17 + 712 * v8;
  re::replaceIfValid<re::DynamicString>((re::DynamicString *)(v32 + 344), (re::DynamicString *)(a3 + 296));
  re::appendOrDelete<re::DynamicString,re::DynamicString>(v32 + 512, a3 + 464);
  v33 = *(_QWORD *)(a3 + 440);
  if (v33)
  {
    v34 = (_anonymous_namespace_ *)(v32 + 472);
    v35 = *(re::DynamicString **)(a3 + 456);
    v36 = (re::DynamicString *)((char *)v35 + 32 * v33);
    v37 = v17 + 712 * v8;
    v38 = (uint64_t *)(v37 + 504);
    v39 = (_QWORD *)(v37 + 488);
    do
    {
      if (*v39)
      {
        v40 = *v38;
        v41 = 32 * *v39;
        while (!re::DynamicString::operator==((uint64_t)v35, v40))
        {
          v40 += 32;
          v41 -= 32;
          if (!v41)
            goto LABEL_59;
        }
      }
      else
      {
LABEL_59:
        re::DynamicArray<re::DynamicString>::add(v34, v35);
      }
      v35 = (re::DynamicString *)((char *)v35 + 32);
    }
    while (v35 != v36);
  }
  re::append<re::DynamicString,re::DynamicArray<re::DynamicString>>(v17 + 712 * v8 + 424, a3 + 376);
  if (*(_QWORD *)(a3 + 512))
  {
    if (*(_QWORD *)(a3 + 528))
      re::DynamicArray<re::DynamicString>::operator=(v17 + 712 * v8 + 560, (uint64_t *)(a3 + 512));
  }
}

BOOL re::HashTable<re::DynamicString,re::MaterialTechniqueData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v9, a2);
  v5 = 0x7FFFFFFFLL;
  if (*(_QWORD *)a1)
  {
    v6 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
    if ((_DWORD)v6 != 0x7FFFFFFF)
    {
      v7 = *(_QWORD *)(a1 + 16);
      v5 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v7 + 712 * v6 + 16, a2))
      {
        v6 = *(_DWORD *)(v7 + 712 * v6 + 8) & 0x7FFFFFFF;
        if (v6 == 0x7FFFFFFF)
          return v5 != 0x7FFFFFFF;
      }
      v5 = v6;
    }
  }
  return v5 != 0x7FFFFFFF;
}

uint64_t re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace<int &>(uint64_t a1, re::DynamicString *a2, _DWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v14;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 56 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 56 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 56 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  *(_DWORD *)(v10 + 56 * v9 + 48) = *a3;
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 56 * v9;
  return v12 + 48;
}

uint64_t re::appendOrDelete<re::DynamicString,re::DynamicString>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  re::DynamicString *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;

  v3 = result;
  v4 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 20;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v8 = v5;
    v9 = *(_QWORD *)(a2 + 16);
    do
    {
      v10 = v9 + 80 * v8;
      v11 = (re::DynamicString *)(v10 + 16);
      v12 = *(_QWORD *)(v10 + 56);
      if ((v12 & 1) != 0)
        v13 = v12 >> 1;
      else
        v13 = v12 >> 1;
      if (v13)
      {
        result = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::DynamicString&>(v3, v11, 2, (const re::DynamicString *)(v9 + 80 * v8 + 48));
      }
      else
      {
        result = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(v3, (uint64_t)v11);
        if ((_DWORD)result)
          result = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::remove(v3, (uint64_t)v11);
      }
      v9 = *(_QWORD *)(a2 + 16);
      if (*(_DWORD *)(a2 + 32) <= (v5 + 1))
        v14 = v5 + 1;
      else
        v14 = *(_DWORD *)(a2 + 32);
      while (1)
      {
        v8 = (v5 + 1);
        if (v14 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v15 = v8;
        if ((*(_DWORD *)(v9 + 80 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_23;
      }
      v15 = v14;
LABEL_23:
      LODWORD(v5) = v15;
    }
    while ((_DWORD)v4 != v15);
  }
  return result;
}

double re::HashTable<re::DynamicString,re::MaterialTechniqueData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2];
        v7 = v6 + v4;
        v8 = *(_DWORD *)(v6 + v4 + 8);
        if (v8 < 0)
        {
          *(_DWORD *)(v7 + 8) = v8 & 0x7FFFFFFF;
          v11 = *(_QWORD *)(v7 + 16);
          v10 = (_OWORD *)(v7 + 16);
          v9 = v11;
          if (v11)
          {
            if ((*(_BYTE *)(v6 + v4 + 24) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, *(_QWORD *)(v6 + v4 + 32));
            *v10 = 0u;
            v10[1] = 0u;
          }
          re::MaterialTechniqueData::~MaterialTechniqueData((re::MaterialTechniqueData *)(v6 + v4 + 48));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 712;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::DynamicString,re::MaterialTechniqueGroupData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 80;
      do
      {
        v5 = a1[2];
        v6 = v5 + v4;
        v7 = *(_DWORD *)(v5 + v4 - 72);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 - 72) = v7 & 0x7FFFFFFF;
          v10 = *(_QWORD *)(v6 - 64);
          v9 = (_OWORD *)(v6 - 64);
          v8 = v10;
          if (v10)
          {
            if ((*(_BYTE *)(v5 + v4 - 56) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(v5 + v4 - 48));
            *v9 = 0u;
            v9[1] = 0u;
          }
          re::MaterialTechniqueGroupData::deinit((re::MaterialTechniqueGroupData *)(v5 + v4 - 32));
          re::DynamicArray<re::DynamicString>::deinit(v5 + v4);
          v11 = *(_QWORD *)(v5 + v4 - 32);
          if (v11)
          {
            if ((*(_BYTE *)(v5 + v4 - 24) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 40))(v11, *(_QWORD *)(v5 + v4 - 16));
            *(_OWORD *)(v5 + v4 - 32) = 0u;
            *(_OWORD *)(v5 + v4 - 16) = 0u;
          }
        }
        ++v3;
        v4 += 120;
      }
      while (v3 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::DynamicString,re::DebugMapping,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1, double result)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  if (v3)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v4 = 0;
      v5 = 0;
      do
      {
        v6 = a1[2];
        v7 = v6 + v4;
        v8 = *(_DWORD *)(v6 + v4 + 8);
        if (v8 < 0)
        {
          *(_DWORD *)(v7 + 8) = v8 & 0x7FFFFFFF;
          v11 = *(_QWORD *)(v7 + 16);
          v10 = (_OWORD *)(v7 + 16);
          v9 = v11;
          if (v11)
          {
            if ((*(_BYTE *)(v6 + v4 + 24) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, *(_QWORD *)(v6 + v4 + 32));
            result = 0.0;
            *v10 = 0u;
            v10[1] = 0u;
          }
          v12 = v6 + v4;
          result = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(v6 + v4 + 80), result);
          v13 = *(_QWORD *)(v6 + v4 + 48);
          if (v13)
          {
            if ((*(_BYTE *)(v12 + 56) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v13 + 40))(v13, *(_QWORD *)(v6 + v4 + 64), result);
            result = 0.0;
            *(_OWORD *)(v6 + v4 + 48) = 0u;
            *(_OWORD *)(v12 + 64) = 0u;
          }
        }
        ++v5;
        v4 += 128;
      }
      while (v5 < *((unsigned int *)a1 + 8));
      v3 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::DynamicString,re::MaterialTechniqueQualityLevelSetData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2];
        v7 = v6 + v4;
        v8 = *(_DWORD *)(v6 + v4 + 8);
        if (v8 < 0)
        {
          *(_DWORD *)(v7 + 8) = v8 & 0x7FFFFFFF;
          v11 = *(_QWORD *)(v7 + 16);
          v10 = (_OWORD *)(v7 + 16);
          v9 = v11;
          if (v11)
          {
            if ((*(_BYTE *)(v6 + v4 + 24) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 40))(v9, *(_QWORD *)(v6 + v4 + 32));
            *v10 = 0u;
            v10[1] = 0u;
          }
          re::MaterialTechniqueQualityLevelSetData::~MaterialTechniqueQualityLevelSetData((re::MaterialTechniqueQualityLevelSetData *)(v6 + v4 + 48));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 152;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::readJsonInCompatibilityMode@<X0>(re *this@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, const re::IntrospectionBase *a4@<X3>, uint64_t a5@<X8>)
{
  _anonymous_namespace_ *v11;
  _anonymous_namespace_ *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _BYTE v28[23];
  _QWORD v29[3];
  _BYTE v30[8];
  _BYTE v31[48];

  re::FileStreamReader::open(this, (uint64_t)v30);
  if (v30[0])
  {
    v29[1] = 0;
    v29[2] = 0;
    v29[0] = a4;
    if ((_BYTE)v24)
    {
      *(_BYTE *)a5 = 1;
    }
    else
    {
      if ((v27 & 1) != 0)
        v16 = *(_BYTE **)&v28[7];
      else
        v16 = v28;
      re::DynamicString::format((re::DynamicString *)"Failed to read JSON source asset \"%s\": %s", (re::DynamicString *)&v21, this, v16);
      v17 = v21;
      v18 = v22;
      v19 = v23;
      *(_BYTE *)a5 = 0;
      *(_OWORD *)(a5 + 8) = v17;
      *(_QWORD *)(a5 + 24) = v18;
      *(_QWORD *)(a5 + 32) = v19;
      if (!(_BYTE)v24 && v26 && (v27 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v26 + 40))();
    }
  }
  else
  {
    re::formattedErrorMessage<re::DetailedError>((uint64_t)v31, (re::DynamicString *)&v24);
    v13 = v24;
    v14 = v25;
    v15 = v26;
    *(_BYTE *)a5 = 0;
    *(_OWORD *)(a5 + 8) = v13;
    *(_QWORD *)(a5 + 24) = v14;
    *(_QWORD *)(a5 + 32) = v15;
  }
  return re::Result<re::FileStreamReader,re::DetailedError>::~Result((uint64_t)v30);
}

uint64_t re::compileMaterialFile@<X0>(char *a1@<X0>, re *this@<X1>, re::IntrospectionBase *a3@<X2>, uint64_t a4@<X8>)
{
  const re::IntrospectionBase *v4;
  const char *v6;
  unsigned __int8 v7;
  __guard *v8;
  int v10;
  uint64_t v11;
  re *v12;

  v4 = a3;
  v6 = a1;
  if ((v7 & 1) == 0)
  {
    v12 = this;
    v11 = a4;
    a4 = v11;
    this = v12;
    v6 = a1;
    v4 = a3;
    if (v10)
    {
      re::introspect<re::MaterialFile>(void)::info = re::introspect_MaterialFile(0);
      a4 = v11;
      this = v12;
      v6 = a1;
      v4 = a3;
    }
  }
  return re::readJsonInCompatibilityMode(this, v6, v8[313], v4, a4);
}

uint64_t re::compileMaterialDefinitionFile@<X0>(re *this@<X0>, re::MaterialDefinitionFile *a2@<X1>, re::IntrospectionBase *a3@<X2>, uint64_t a4@<X8>)
{
  const re::IntrospectionBase *v5;
  const char *v7;
  unsigned __int8 v8;
  __guard *v9;
  int v11;
  uint64_t v12;
  re::MaterialDefinitionFile *v13;

  v5 = a3;
  v7 = (const char *)this;
  if ((v8 & 1) == 0)
  {
    v13 = a2;
    v12 = a4;
    a4 = v12;
    a2 = v13;
    v7 = (const char *)this;
    v5 = a3;
    if (v11)
    {
      re::introspect<re::MaterialDefinitionFile>(void)::info = re::introspect_MaterialDefinitionFile(0);
      a4 = v12;
      a2 = v13;
      v7 = (const char *)this;
      v5 = a3;
    }
  }
  return re::readJsonInCompatibilityMode(a2, v7, v9[315], v5, a4);
}

void re::generateShaderParameterTableBuilder(_BOOL8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  NSObject *v23;
  char *v24;
  char v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  const char *v29;
  re::MaterialManager *v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  _anonymous_namespace_ *v34;
  uint64_t v35;
  char *v36;
  char var0;
  char *var1;
  _anonymous_namespace_ *v39;
  int v40;
  int v41;
  _BYTE *v42;
  __n128 v43;
  int v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  const char *v55;
  unsigned __int8 *v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  char *v60;
  size_t v61;
  uint64_t v62;
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  const char *v67;
  int v68;
  float *v69;
  uint64_t v70;
  char *v71;
  int v72;
  re *v73;
  NSObject *v74;
  char v75;
  _OWORD *v76;
  int v77;
  re *v78;
  NSObject *v79;
  char *v80;
  uint64_t v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _BYTE *v90;
  unint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  char v94;
  unsigned __int8 *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  char v100;
  const char *v101;
  unsigned __int8 *isEngineDefinedBufferTable;
  re::MaterialManager *v103;
  const char *v104;
  const char *v105;
  uint64_t v106;
  _anonymous_namespace_ *v107;
  uint64_t v108;
  char *v109;
  char v110;
  char *v111;
  NSObject *v112;
  _BYTE *v113;
  unsigned int v114;
  unsigned int v115;
  _BYTE *v116;
  unsigned int v118;
  int v119;
  _BOOL8 v120;
  _BYTE *v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  int v126;
  const re::DynamicString *v127;
  uint64_t v128;
  int v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  char v136;
  _BYTE v137[16];
  int v138;
  uint64_t v139;
  char v140;
  _BYTE v141[16];
  char __src[8];
  char *v143;
  unint64_t v144;
  int v145;
  _OWORD *v146;
  char v147;
  int v148;
  uint64_t v149;
  char v150;
  StringID v151;
  float v152;
  uint64_t v153;
  char *__endptr;
  uint8_t v155[24];
  int v156;
  uint64_t v157;
  _BYTE buf[38];
  uint8_t v159[32];
  __int128 v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;

  v4 = a4;
  v5 = a1;
  v163 = *MEMORY[0x24BDAC8D0];
  if (a2 && (v6 = *(unsigned __int8 **)(a2 + 152)) != 0)
    v118 = *v6;
  else
    v118 = 0;
  v7 = *(unsigned int *)(a4 + 32);
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = (int *)(*(_QWORD *)(a4 + 16) + 8);
    while (1)
    {
      v10 = *v9;
      v9 += 20;
      if (v10 < 0)
        break;
      if (v7 == ++v8)
      {
        LODWORD(v8) = *(_DWORD *)(a4 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v8) = 0;
  }
  if ((_DWORD)v7 == (_DWORD)v8)
    goto LABEL_12;
  v15 = v8;
  v16 = *(_QWORD *)(a4 + 16);
  v119 = *(_DWORD *)(a4 + 32);
  v120 = a1;
  do
  {
    v17 = v16 + 80 * v15;
    v123 = v16;
    v124 = v17 + 48;
    v126 = v8;
    v127 = (const re::DynamicString *)(v17 + 16);
    if (!*(_QWORD *)(v17 + 48))
    {
      v23 = *re::pipelineLogObjects((re *)a1);
      a1 = os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
      if (a1)
      {
        if ((*(_BYTE *)(v123 + 80 * v15 + 24) & 1) != 0)
          v24 = *(char **)(v123 + 80 * v15 + 32);
        else
          v24 = (char *)v127 + 9;
        *(_DWORD *)v159 = 136315394;
        *(_QWORD *)&v159[4] = a3;
        *(_WORD *)&v159[12] = 2080;
        *(_QWORD *)&v159[14] = v24;
        _os_log_error_impl(&dword_224FE9000, v23, OS_LOG_TYPE_ERROR, "%s: skipping constant: %s, Parsed parameters contained invalid types. All floats/arrays must be string data.", v159, 0x16u);
      }
      goto LABEL_182;
    }
    v18 = v16;
    v148 = 3;
    re::StringID::invalid((re::StringID *)v159);
    v149 = *(_QWORD *)v159 >> 1;
    re::StringID::destroyString((re::StringID *)v159);
    v150 = 0;
    re::StringID::invalid((re::StringID *)&v151);
    v19 = v18 + 80 * v15;
    v20 = *(_QWORD *)(v19 + 24);
    v121 = (_BYTE *)(v19 + 24);
    if ((v20 & 1) == 0)
    {
      v21 = v20 >> 8;
      v22 = (char *)v127 + 9;
      goto LABEL_26;
    }
    v22 = *(_BYTE **)(v18 + 80 * v15 + 32);
    if (v22)
    {
      LOBYTE(v21) = *v22;
LABEL_26:
      if ((_BYTE)v21)
      {
        v21 = (char)v21;
        v25 = v22[1];
        if (v25)
        {
          v26 = v22 + 2;
          do
          {
            v21 = 31 * v21 + v25;
            v27 = *v26++;
            v25 = v27;
          }
          while (v27);
        }
        v28 = v21 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v28 = 0;
      }
      goto LABEL_33;
    }
    v28 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_33:
    v149 = v28;
    v159[0] = 46;
    *((_QWORD *)&v160 + 1) = 0;
    memset(&v159[8], 0, 24);
    LODWORD(v160) = 0;
    v122 = (_BYTE *)(v18 + 80 * v15 + 56);
    if ((*v122 & 1) != 0)
      v29 = *(const char **)(v18 + 80 * v15 + 64);
    else
      v29 = (const char *)(v124 + 9);
    re::TokenizedMember::tokenize(v159, v29);
    if (*(_QWORD *)&v159[24] == 2)
    {
      v30 = (re::MaterialManager *)re::TokenizedMember::operator[](2uLL, *((uint64_t *)&v160 + 1), 0);
      if (re::MaterialManager::isEngineDefinedConstantBufferTable(v30, v31))
      {
        v148 = 1;
        v32 = (const char *)re::TokenizedMember::operator[](*(unint64_t *)&v159[24], *((uint64_t *)&v160 + 1), 0);
        v33 = 0;
        while (strcmp(re::s_materialTableIDMappings[v33], v32))
        {
          if (++v33 == 168)
          {
            LOBYTE(v33) = 0;
            break;
          }
        }
        v150 = v33;
        v34 = (_anonymous_namespace_ *)re::TokenizedMember::operator[](*(unint64_t *)&v159[24], *((uint64_t *)&v160 + 1), 1u);
        *(_QWORD *)__src = 0;
        v143 = (char *)&str_110;
        v35 = *(_QWORD *)__src;
        v36 = v143;
        *(_QWORD *)__src = 0;
        v143 = (char *)&str_110;
        var0 = (char)v151.var0;
        var1 = v151.var1;
        *(_QWORD *)&v151.var0 = v35;
        v151.var1 = v36;
        *(_QWORD *)v155 = v35 & 0xFFFFFFFFFFFFFFFELL | var0 & 1;
        *(_QWORD *)&v155[8] = var1;
        re::StringID::destroyString((re::StringID *)v155);
        re::StringID::destroyString((re::StringID *)__src);
      }
    }
    re::TokenizedMember::~TokenizedMember((uint64_t **)v159);
    v40 = v148;
    if (v148 != 3)
      goto LABEL_180;
    if ((*(_QWORD *)v122 & 1) != 0)
    {
      v42 = *(_BYTE **)(v123 + 80 * v15 + 64);
      v41 = *v42;
    }
    else
    {
      v41 = BYTE1(*(_QWORD *)v122);
      v42 = (_BYTE *)(v124 + 9);
    }
    v157 = 0;
    memset(v155, 0, sizeof(v155));
    v156 = 0;
    if (!v41)
      goto LABEL_71;
    do
    {
      memset(v159, 0, sizeof(v159));
      re::DynamicString::setCapacity(v159, 0);
      --v42;
      do
      {
        v45 = *++v42;
        v44 = v45;
      }
      while (v45 == 32);
      while ((v44 - 32) <= 0x3B && ((1 << (v44 - 32)) & 0x800000000001001) != 0)
      {
        v46 = *++v42;
        v44 = v46;
      }
      while (v44 == 32)
      {
LABEL_56:
        v47 = *++v42;
        v44 = v47;
      }
      if (v44 && v44 != 93)
      {
        __src[0] = v44;
        re::DynamicString::append((re::DynamicString *)v159, __src, 1uLL);
        goto LABEL_56;
      }
      if (v44 == 93)
        ++v42;
      if ((v159[8] & 1) != 0)
        v48 = *(_QWORD *)&v159[8] >> 1;
      else
        v48 = v159[8] >> 1;
      if (v48)
        v43.n128_f64[0] = re::DynamicArray<re::DynamicString>::add((_anonymous_namespace_ *)v155, v159);
      v39 = *(_anonymous_namespace_ **)v159;
      if (*(_QWORD *)v159 && (v159[8] & 1) != 0)
        v39 = (_anonymous_namespace_ *)(*(uint64_t (**)(__n128))(**(_QWORD **)v159 + 40))(v43);
    }
    while (*v42);
LABEL_71:
    v147 = 0;
    if ((*v121 & 1) != 0)
    {
      v50 = v123;
      v49 = *(_QWORD *)(v123 + 80 * v15 + 32);
    }
    else
    {
      v49 = (uint64_t)v127 + 9;
      v50 = v123;
    }
    if ((*v122 & 1) != 0)
      v51 = *(_QWORD *)(v50 + 80 * v15 + 64);
    else
      v51 = v124 + 9;
    v132 = v51;
    v52 = *(_QWORD *)&v155[16];
    v146 = 0;
    v143 = 0;
    v144 = 0;
    *(_QWORD *)__src = 0;
    v145 = 0;
    if (!*(_QWORD *)&v155[16])
    {
      LODWORD(v7) = v119;
      v5 = v120;
      goto LABEL_173;
    }
    v133 = 0;
    v53 = 0;
    v54 = v157;
    v128 = v157 + 32 * *(_QWORD *)&v155[16];
    v130 = *(_QWORD *)&v155[16];
    while (2)
    {
      *((_QWORD *)&v160 + 1) = 0;
      memset(&v159[8], 0, 24);
      LODWORD(v160) = 0;
      v159[0] = 44;
      if ((*(_BYTE *)(v54 + 8) & 1) != 0)
        v55 = *(const char **)(v54 + 16);
      else
        v55 = (const char *)(v54 + 9);
      v56 = re::TokenizedMember::tokenize(v159, v55);
      if (v52 < 2)
      {
LABEL_87:
        v57 = v133;
      }
      else
      {
        v57 = v133;
        if (v133)
        {
          if (*(_QWORD *)&v159[24] != v133)
          {
            v58 = *re::graphicsLogObjects((re *)v56);
            if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = v49;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v132;
              _os_log_impl(&dword_224FE9000, v58, OS_LOG_TYPE_DEFAULT, "Inconsistent parameter constant vector size for key '%s' with value '%s'", buf, 0x16u);
            }
            goto LABEL_87;
          }
        }
        else
        {
          v57 = *(_QWORD *)&v159[24];
        }
      }
      v153 = 0;
      v152 = 0.0;
      v133 = v57;
      if (*(_QWORD *)&v159[24])
      {
        v59 = 0;
        while (1)
        {
          v60 = *(char **)(*((_QWORD *)&v160 + 1) + 8 * v59);
          if (strcasecmp(v60, "true"))
            break;
          re::validateParsedType((re *)&v147, v49, (uint64_t)v60, 2, (uint64_t)"BOOL");
          buf[0] = 1;
LABEL_140:
          re::DynamicArray<unsigned char>::add(__src, buf);
LABEL_141:
          if (*(_QWORD *)&v159[24] <= (unint64_t)++v59)
            goto LABEL_144;
        }
        if (!strcasecmp(v60, "false"))
        {
          re::validateParsedType((re *)&v147, v49, (uint64_t)v60, 2, (uint64_t)"BOOL");
        }
        else
        {
          v61 = strlen(v60);
          if (!v61)
          {
            re::internal::assertLog((re::internal *)4, v62, "assertion failure: '%s' (%s:line %i) ", "tokenLen > 0", "makeConstantBytes", 812);
            _os_crash();
            __break(1u);
LABEL_238:
            __endptr = 0;
            v161 = 0u;
            v162 = 0u;
            v160 = 0u;
            memset(v159, 0, sizeof(v159));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "operator[]";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 789;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = v60;
            *(_WORD *)&buf[28] = 2048;
            *(_QWORD *)&buf[30] = v53;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v63 = v61;
          while ((v144 & 3) != 0)
          {
            buf[0] = 0;
            re::DynamicArray<unsigned char>::add(__src, buf);
          }
          if ((v59 - 3) <= 1)
          {
            v64 = *(_QWORD *)&v159[24];
            if (*(_QWORD *)&v159[24] - 1 == v59)
            {
              if (*v60 < 0
                || (v65 = *v60, (_DWORD)v65 != 45)
                && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v65 + 60) & 0x400) == 0)
              {
                re::ColorHelpers::getColorGamutFromSerializationLiteral((re::ColorHelpers *)v60, buf);
                if (buf[0])
                {
                  v66 = v147;
                  if (v147 == 1)
                    v66 = 0;
                  v147 = v66;
                  if (v59 == 3)
                    v67 = "color3";
                  else
                    v67 = "color4";
                  if (v59 == 3)
                    v68 = 20;
                  else
                    v68 = 21;
                  re::validateParsedType((re *)&v147, v49, (uint64_t)v60, v68, (uint64_t)v67);
                  if (v59 == 3)
                  {
                    LOBYTE(__endptr) = 0;
                    re::DynamicArray<unsigned char>::add(__src, &__endptr);
                    LOBYTE(__endptr) = 0;
                    re::DynamicArray<unsigned char>::add(__src, &__endptr);
                    LOBYTE(__endptr) = 0;
                    re::DynamicArray<unsigned char>::add(__src, &__endptr);
                    LOBYTE(__endptr) = 0;
                    re::DynamicArray<unsigned char>::add(__src, &__endptr);
                  }
                  LODWORD(v153) = buf[1];
                  v69 = (float *)&v153;
                  goto LABEL_133;
                }
              }
            }
            if (v59 == 4 && v64 == 5)
            {
              if (*v60 < 0
                || (v70 = *v60, (_DWORD)v70 != 45)
                && (*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v70 + 60) & 0x400) == 0)
              {
                if (!strcmp(v60, "matrix"))
                {
                  v147 = 48;
                  goto LABEL_141;
                }
              }
            }
          }
          v71 = &v60[v63];
          v72 = v60[v63 - 1];
          __endptr = 0;
          switch(v72)
          {
            case 'f':
              --v71;
              goto LABEL_128;
            case 'u':
              --v71;
              re::validateParsedType((re *)&v147, v49, (uint64_t)v60, 7, (uint64_t)"uint");
              v73 = (re *)strtoul(v60, &__endptr, 10);
              LODWORD(v153) = (_DWORD)v73;
              v69 = (float *)&v153;
              break;
            case 'i':
              --v71;
              re::validateParsedType((re *)&v147, v49, (uint64_t)v60, 3, (uint64_t)"int");
              v73 = (re *)strtol(v60, &__endptr, 10);
              HIDWORD(v153) = (_DWORD)v73;
              v69 = (float *)&v153 + 1;
              break;
            default:
LABEL_128:
              re::validateParsedType((re *)&v147, v49, (uint64_t)v60, 1, (uint64_t)"float");
              v152 = strtof(v60, &__endptr);
              v69 = &v152;
              break;
          }
          if (__endptr != v71 || __endptr == v60)
          {
            v74 = *re::graphicsLogObjects(v73);
            if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = v49;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v132;
              *(_WORD *)&buf[22] = 2080;
              *(_QWORD *)&buf[24] = v60;
              _os_log_impl(&dword_224FE9000, v74, OS_LOG_TYPE_DEFAULT, "Invalid token found while parsing key '%s' with value '%s': %s", buf, 0x20u);
            }
          }
LABEL_133:
          re::DynamicArray<unsigned char>::add(__src, v69);
          re::DynamicArray<unsigned char>::add(__src, (_BYTE *)v69 + 1);
          re::DynamicArray<unsigned char>::add(__src, (_BYTE *)v69 + 2);
          re::DynamicArray<unsigned char>::add(__src, (_BYTE *)v69 + 3);
          v53 = (v53 + 1);
          if (*(_QWORD *)&v159[24] == 3)
          {
            if ((-1431655765 * v59 - 1431655766) > 0x55555554)
              goto LABEL_141;
          }
          else if ((-1431655765 * v59 - 1431655766) > 0x55555554 || *(_QWORD *)&v159[24] != 9)
          {
            goto LABEL_141;
          }
          buf[0] = 0;
          re::DynamicArray<unsigned char>::add(__src, buf);
          buf[0] = 0;
          re::DynamicArray<unsigned char>::add(__src, buf);
          buf[0] = 0;
          re::DynamicArray<unsigned char>::add(__src, buf);
        }
        buf[0] = 0;
        goto LABEL_140;
      }
LABEL_144:
      re::TokenizedMember::~TokenizedMember((uint64_t **)v159);
      v54 += 32;
      v52 = v130;
      if (v54 != v128)
        continue;
      break;
    }
    LOBYTE(v52) = v147;
    if (v147 == 1)
    {
      LODWORD(v7) = v119;
      v5 = v120;
      v75 = 32;
      switch((char)v53)
      {
        case 2:
          goto LABEL_161;
        case 3:
          v75 = 33;
          goto LABEL_161;
        case 4:
          v75 = 34;
          goto LABEL_161;
        case 9:
          v75 = 49;
          goto LABEL_161;
        default:
          goto LABEL_173;
      }
    }
    LODWORD(v7) = v119;
    v5 = v120;
    if (v147 == 3)
    {
      if ((v53 - 2) >= 3u)
      {
        LOBYTE(v52) = 3;
        goto LABEL_173;
      }
      v75 = v53 + 2;
LABEL_161:
      v147 = v75;
      LOBYTE(v52) = v75;
LABEL_162:
      if ((v52 & 0xFE) != 0x14)
        goto LABEL_173;
      v53 = v144;
      v60 = (char *)(v144 - 4);
      if (v144 <= 3)
        goto LABEL_238;
      v76 = v146;
      v77 = v60[(_QWORD)v146];
      *(_OWORD *)v159 = *v146;
      v159[16] = v77;
      re::ShaderParameterTableBuilder::addOriginalColorConstant(v5, (uint64_t)v127, (uint64_t)v159, v52);
      if (v77 != v118)
      {
        re::ColorGamut4F::as((uint64_t)v159, v118, 1, (uint64_t)buf);
        *(_OWORD *)v159 = *(_OWORD *)buf;
        v159[16] = buf[16];
      }
      if (v52 == 20)
      {
        LOBYTE(v52) = 33;
LABEL_170:
        v147 = v52;
      }
      else
      {
        if (v52 == 21)
        {
          LOBYTE(v52) = 34;
          goto LABEL_170;
        }
        LOBYTE(v52) = v147;
      }
      *v76 = *(_OWORD *)v159;
      re::DynamicArray<BOOL>::resize((uint64_t)__src, (unint64_t)v60);
      goto LABEL_173;
    }
    if (v147 != 7)
      goto LABEL_162;
    if ((v53 - 2) < 3u)
    {
      v75 = v53 + 6;
      goto LABEL_161;
    }
    LOBYTE(v52) = 7;
LABEL_173:
    v148 = 0;
    *(_QWORD *)v159 = v146;
    *(_QWORD *)&v159[8] = v144;
    re::ShaderParameterTableBuilder::addConstant(v5, v127, (uint64_t)v159, v52);
    if (*(_QWORD *)__src && v146)
      (*(void (**)(void))(**(_QWORD **)__src + 40))();
    v78 = (re *)re::DynamicArray<re::DynamicString>::deinit((uint64_t)v155);
    v40 = v148;
    v4 = a4;
    if (v148 != 3)
    {
LABEL_180:
      v138 = v40;
      v139 = v149;
      v140 = v150;
      re::StringID::StringID((re::StringID *)v141, &v151);
      re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::ParameterBinding&>(v5, v127, (uint64_t)&v138);
      re::StringID::destroyString((re::StringID *)v141);
      v139 = 0;
      goto LABEL_181;
    }
    v79 = *re::pipelineLogObjects(v78);
    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
    {
      if ((*v121 & 1) != 0)
      {
        v81 = v123;
        v80 = *(char **)(v123 + 80 * v15 + 32);
      }
      else
      {
        v80 = (char *)v127 + 9;
        v81 = v123;
      }
      if ((*v122 & 1) != 0)
        v85 = *(_QWORD *)(v81 + 80 * v15 + 64);
      else
        v85 = v124 + 9;
      *(_DWORD *)v159 = 136315394;
      *(_QWORD *)&v159[4] = v80;
      *(_WORD *)&v159[12] = 2080;
      *(_QWORD *)&v159[14] = v85;
      _os_log_error_impl(&dword_224FE9000, v79, OS_LOG_TYPE_ERROR, "Invalid constant \"%s\": \"%s\"", v159, 0x16u);
    }
LABEL_181:
    re::StringID::destroyString((re::StringID *)&v151);
LABEL_182:
    v82 = *(_DWORD *)(v4 + 32);
    v16 = *(_QWORD *)(v4 + 16);
    v83 = v126;
    if (v82 <= v126 + 1)
      v82 = v126 + 1;
    while (1)
    {
      v15 = (v83 + 1);
      if (v82 - 1 == v83)
        break;
      ++v83;
      v84 = v15;
      if ((*(_DWORD *)(v16 + 80 * v15 + 8) & 0x80000000) != 0)
        goto LABEL_188;
    }
    v84 = v82;
LABEL_188:
    LODWORD(v8) = v84;
  }
  while ((_DWORD)v7 != v84);
LABEL_12:
  v11 = *(unsigned int *)(v4 + 80);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = (int *)(*(_QWORD *)(v4 + 64) + 8);
    while (1)
    {
      v14 = *v13;
      v13 += 20;
      if (v14 < 0)
        break;
      if (v11 == ++v12)
      {
        LODWORD(v12) = *(_DWORD *)(v4 + 80);
        break;
      }
    }
  }
  else
  {
    LODWORD(v12) = 0;
  }
  if ((_DWORD)v11 != (_DWORD)v12)
  {
    v86 = v12;
    v87 = *(_QWORD *)(v4 + 64);
    v131 = v5 + 48;
    v129 = *(_DWORD *)(v4 + 80);
    while (1)
    {
      v88 = v87 + 80 * v86;
      v148 = 3;
      re::StringID::invalid((re::StringID *)v159);
      v149 = *(_QWORD *)v159 >> 1;
      re::StringID::destroyString((re::StringID *)v159);
      v150 = 0;
      re::StringID::invalid((re::StringID *)&v151);
      v91 = *(_QWORD *)(v88 + 24);
      v90 = (_BYTE *)(v88 + 24);
      v89 = v91;
      if ((v91 & 1) == 0)
        break;
      v93 = *(_BYTE **)(v87 + 80 * v86 + 32);
      if (v93)
      {
        LOBYTE(v92) = *v93;
LABEL_202:
        if ((_BYTE)v92)
        {
          v92 = (char)v92;
          v94 = v93[1];
          if (v94)
          {
            v95 = v93 + 2;
            do
            {
              v92 = 31 * v92 + v94;
              v96 = *v95++;
              v94 = v96;
            }
            while (v96);
          }
          v97 = v92 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v97 = 0;
        }
        goto LABEL_209;
      }
      v97 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_209:
      v149 = v97;
      v159[0] = 46;
      *((_QWORD *)&v160 + 1) = 0;
      memset(&v159[8], 0, 24);
      LODWORD(v160) = 0;
      v98 = v87 + 80 * v86;
      v100 = *(_BYTE *)(v98 + 56);
      v99 = (_BYTE *)(v98 + 56);
      if ((v100 & 1) != 0)
        v101 = *(const char **)(v87 + 80 * v86 + 64);
      else
        v101 = v90 + 33;
      isEngineDefinedBufferTable = re::TokenizedMember::tokenize(v159, v101);
      if (*(_QWORD *)&v159[24] == 2)
      {
        v103 = (re::MaterialManager *)re::TokenizedMember::operator[](2uLL, *((uint64_t *)&v160 + 1), 0);
        isEngineDefinedBufferTable = (unsigned __int8 *)re::MaterialManager::isEngineDefinedBufferTable(v103, v104);
        if ((_DWORD)isEngineDefinedBufferTable)
        {
          v148 = 1;
          v105 = (const char *)re::TokenizedMember::operator[](*(unint64_t *)&v159[24], *((uint64_t *)&v160 + 1), 0);
          v106 = 0;
          while (strcmp(re::s_materialTableIDMappings[v106], v105))
          {
            if (++v106 == 168)
            {
              LOBYTE(v106) = 0;
              break;
            }
          }
          v150 = v106;
          v107 = (_anonymous_namespace_ *)re::TokenizedMember::operator[](*(unint64_t *)&v159[24], *((uint64_t *)&v160 + 1), 1u);
          *(_QWORD *)__src = 0;
          v143 = (char *)&str_110;
          v108 = *(_QWORD *)__src;
          v109 = v143;
          *(_QWORD *)__src = 0;
          v143 = (char *)&str_110;
          v110 = (char)v151.var0;
          v111 = v151.var1;
          *(_QWORD *)&v151.var0 = v108;
          v151.var1 = v109;
          *(_QWORD *)v155 = v108 & 0xFFFFFFFFFFFFFFFELL | v110 & 1;
          *(_QWORD *)&v155[8] = v111;
          re::StringID::destroyString((re::StringID *)v155);
          re::StringID::destroyString((re::StringID *)__src);
          LODWORD(v11) = v129;
        }
      }
      if (v148 == 3)
      {
        v112 = *re::pipelineLogObjects((re *)isEngineDefinedBufferTable);
        if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
        {
          if ((*v90 & 1) != 0)
            v113 = *(_BYTE **)(v87 + 80 * v86 + 32);
          else
            v113 = v90 + 1;
          if ((*v99 & 1) != 0)
            v116 = *(_BYTE **)(v87 + 80 * v86 + 64);
          else
            v116 = v90 + 33;
          *(_DWORD *)v155 = 136315394;
          *(_QWORD *)&v155[4] = v113;
          *(_WORD *)&v155[12] = 2080;
          *(_QWORD *)&v155[14] = v116;
          _os_log_error_impl(&dword_224FE9000, v112, OS_LOG_TYPE_ERROR, "Invalid buffer binding \"%s\": \"%s\"", v155, 0x16u);
        }
      }
      else
      {
        v134 = v148;
        v135 = v149;
        v136 = v150;
        re::StringID::StringID((re::StringID *)v137, &v151);
        re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::ParameterBinding&>(v131, (re::DynamicString *)(v90 - 8), (uint64_t)&v134);
        re::StringID::destroyString((re::StringID *)v137);
        v135 = 0;
      }
      re::TokenizedMember::~TokenizedMember((uint64_t **)v159);
      re::StringID::destroyString((re::StringID *)&v151);
      v114 = *(_DWORD *)(a4 + 80);
      v87 = *(_QWORD *)(a4 + 64);
      if (v114 <= (int)v12 + 1)
        v114 = v12 + 1;
      while (1)
      {
        v86 = (v12 + 1);
        if (v114 - 1 == (_DWORD)v12)
          break;
        LODWORD(v12) = v12 + 1;
        v115 = v86;
        if ((*(_DWORD *)(v87 + 80 * v86 + 8) & 0x80000000) != 0)
          goto LABEL_230;
      }
      v115 = v114;
LABEL_230:
      LODWORD(v12) = v115;
      if ((_DWORD)v11 == v115)
        return;
    }
    v92 = v89 >> 8;
    v93 = v90 + 1;
    goto LABEL_202;
  }
}

unsigned __int8 *re::TokenizedMember::tokenize(unsigned __int8 *this, const char *a2)
{
  const char *v2;
  unsigned __int8 *v3;
  _QWORD *v4;
  re *v5;
  const char *v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  char *v10;

  if (*a2)
  {
    v2 = a2;
    v3 = this;
    v4 = this + 8;
    v5 = (re *)(a2 + 2);
    v6 = a2 + 1;
    do
    {
      v7 = *((unsigned __int8 *)v5 - 1);
      if (*((_BYTE *)v5 - 1))
        v8 = v7 == *v3;
      else
        v8 = 1;
      if (v8)
      {
        this = (unsigned __int8 *)v5;
        if (v6 != v2)
        {
          v10 = 0;
          v9 = re::globalAllocators(v5);
          v10 = (char *)(*(uint64_t (**)(uint64_t, int64_t, _QWORD))(*(_QWORD *)v9[2] + 32))(v9[2], v6 - v2 + 1, 0);
          memcpy(v10, v2, v6 - v2);
          v6[v10 - v2] = 0;
          re::DynamicArray<re::TransitionCondition *>::add(v4, &v10);
          v7 = *((unsigned __int8 *)v5 - 1);
          this = (unsigned __int8 *)v5;
        }
      }
      else
      {
        this = (unsigned __int8 *)v2;
      }
      v5 = (re *)((char *)v5 + 1);
      ++v6;
      v2 = (const char *)this;
    }
    while (v7);
  }
  return this;
}

uint64_t re::TokenizedMember::operator[](unint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 >= a1)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 8 * a3);
}

__n128 re::HashTable<re::DynamicString,re::MaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addNew<re::MaterialSamplerData&>(uint64_t a1, const re::DynamicString *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 result;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  char v20;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v20, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = *(_DWORD *)(a1 + 36);
    if (v12 == 0x7FFFFFFF)
    {
      v12 = *(_DWORD *)(a1 + 32);
      v13 = v12;
      if (v12 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::DynamicString,re::MaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v8) = v7 % *(unsigned int *)(a1 + 24);
        v13 = *(_DWORD *)(a1 + 32);
      }
      *(_DWORD *)(a1 + 32) = v13 + 1;
      v14 = *(_QWORD *)(a1 + 16);
      v15 = *(_DWORD *)(v14 + 104 * v12 + 8);
    }
    else
    {
      v14 = *(_QWORD *)(a1 + 16);
      v15 = *(_DWORD *)(v14 + 104 * v12 + 8);
      *(_DWORD *)(a1 + 36) = v15 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v14 + 104 * v12 + 8) = v15 | 0x80000000;
    v16 = 104 * v12;
    *(_DWORD *)(*(_QWORD *)(a1 + 16) + v16 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v16 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v8);
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + v16) = v7;
    re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + v16 + 16), a2);
    v17 = *(_QWORD *)(a1 + 16) + 104 * v12;
    result = *(__n128 *)a3;
    v18 = *(_OWORD *)(a3 + 16);
    v19 = *(_OWORD *)(a3 + 32);
    *(_QWORD *)(v17 + 96) = *(_QWORD *)(a3 + 48);
    *(_OWORD *)(v17 + 64) = v18;
    *(_OWORD *)(v17 + 80) = v19;
    *(__n128 *)(v17 + 48) = result;
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v8) = v12;
    ++*(_DWORD *)(a1 + 28);
    ++*(_DWORD *)(a1 + 40);
    return result;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 104 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 104 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  return result;
}

uint64_t re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v4 = *a2;
  v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  v7 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v7)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % v7;
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v6 % v7));
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(a1, v8, v6, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 16) + 16 * v12;
    return v11 + 8;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v10 + 16 * v9 + 8) != v4)
  {
    v9 = *(_DWORD *)(v10 + 16 * v9) & 0x7FFFFFFF;
    if ((_DWORD)v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v11 = v10 + 16 * v9;
  return v11 + 8;
}

BOOL re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::contains(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;

  v2 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v2)
    return 0;
  v3 = *a2;
  v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
                        % v2));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v7 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v7 + 16 * v5 + 8) == v3)
    return 1;
  do
  {
    v5 = *(_DWORD *)(v7 + 16 * v5) & 0x7FFFFFFF;
    result = (_DWORD)v5 != 0x7FFFFFFF;
  }
  while ((_DWORD)v5 != 0x7FFFFFFF && *(_QWORD *)(v7 + 16 * v5 + 8) != v3);
  return result;
}

double re::parseShaderParameterData@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unsigned int v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  signed int v13;
  double v14;
  double v15;
  uint64_t v17[6];
  _OWORD v18[2];
  int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _OWORD v29[2];
  int v30;
  _BYTE v31[44];
  uint64_t v32;
  _OWORD v33[2];
  int v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  int v38;
  uint64_t v39;

  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v20 = 0x7FFFFFFFLL;
  v21 = 0u;
  v22 = 0u;
  v23 = 0;
  v24 = 0x7FFFFFFFLL;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v28 = 0;
  memset(v29, 0, sizeof(v29));
  v30 = 0;
  memset(v31, 0, sizeof(v31));
  v32 = 0x7FFFFFFFLL;
  v34 = 0;
  memset(v33, 0, sizeof(v33));
  v35 = 0x7FFFFFFFLL;
  v38 = 0;
  v36 = 0u;
  v37 = 0u;
  v39 = 0x7FFFFFFFLL;
  re::generateShaderParameterTableBuilder((_BOOL8)v18, a1, a2, a3);
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v17, (uint64_t)v18);
  v5 = v23;
  if (v23)
  {
    v6 = 0;
    v7 = (int *)(v22 + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 22;
      if (v8 < 0)
        break;
      if (v23 == ++v6)
      {
        LODWORD(v6) = v23;
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if (v23 != (_DWORD)v6)
  {
    v9 = v6;
    v10 = v22;
    do
    {
      re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::ParameterBinding&>((uint64_t)v17, (re::DynamicString *)(v10 + 88 * v9 + 16), v10 + 88 * v9 + 48);
      v10 = v22;
      if (v23 <= (int)v6 + 1)
        v11 = v6 + 1;
      else
        v11 = v23;
      v12 = v6;
      while (1)
      {
        v9 = (v12 + 1);
        if (v11 - 1 == v12)
          break;
        ++v12;
        LODWORD(v6) = v9;
        if ((*(_DWORD *)(v22 + 88 * v9 + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      LODWORD(v6) = v11;
LABEL_17:
      ;
    }
    while (v5 != (_DWORD)v6);
  }
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 80) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_QWORD *)(a4 + 128) = &off_24ED36808;
  *(_QWORD *)(a4 + 144) = 0;
  *(_QWORD *)(a4 + 152) = 0;
  *(_QWORD *)(a4 + 136) = 0;
  *(_DWORD *)(a4 + 160) = 0;
  *(_OWORD *)(a4 + 336) = 0u;
  *(_OWORD *)(a4 + 352) = 0u;
  *(_DWORD *)(a4 + 368) = 0;
  *(_QWORD *)(a4 + 384) = 0;
  *(_QWORD *)(a4 + 392) = 0;
  *(_QWORD *)(a4 + 376) = 0;
  *(_DWORD *)(a4 + 328) = 0;
  *(_OWORD *)(a4 + 312) = 0u;
  *(_OWORD *)(a4 + 296) = 0u;
  *(_OWORD *)(a4 + 280) = 0u;
  *(_OWORD *)(a4 + 264) = 0u;
  *(_OWORD *)(a4 + 248) = 0u;
  *(_OWORD *)(a4 + 232) = 0u;
  *(_OWORD *)(a4 + 216) = 0u;
  *(_OWORD *)(a4 + 200) = 0u;
  *(_OWORD *)(a4 + 184) = 0u;
  *(_OWORD *)(a4 + 168) = 0u;
  *(_DWORD *)(a4 + 400) = 1;
  *(_QWORD *)(a4 + 408) = 0;
  *(_QWORD *)(a4 + 416) = 0;
  *(_DWORD *)(a4 + 432) = 0;
  *(_QWORD *)(a4 + 424) = 0;
  *(_QWORD *)(a4 + 440) = 0;
  *(_QWORD *)(a4 + 448) = 0;
  *(_DWORD *)(a4 + 464) = 0;
  *(_QWORD *)(a4 + 456) = 0;
  *(_QWORD *)(a4 + 512) = 0;
  *(_DWORD *)(a4 + 520) = 0;
  *(_DWORD *)(a4 + 504) = 0;
  *(_OWORD *)(a4 + 488) = 0u;
  *(_OWORD *)(a4 + 472) = 0u;
  re::ShaderParameterTableBuilder::build((re::ShaderParameterTableBuilder *)v18, (void **)a4);
  *(_OWORD *)(a4 + 528) = 0u;
  *(_OWORD *)(a4 + 544) = 0u;
  *(_QWORD *)(a4 + 560) = 0x7FFFFFFF00000000;
  *(_DWORD *)(a4 + 568) = 0;
  if ((_QWORD)v36)
  {
    if (HIDWORD(v37) <= 3)
      v13 = 3;
    else
      v13 = HIDWORD(v37);
    re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a4 + 528, v36, v13);
    re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::copy(a4 + 528, (uint64_t)&v36);
  }
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(a4 + 576, (uint64_t)v17);
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v17);
  v14 = re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)&v36);
  v15 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v33, v14);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v31[8], v15);
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)v29 + 8);
  if (v25)
  {
    if (*(_QWORD *)&v29[0])
      (*(void (**)(void))(*(_QWORD *)v25 + 40))();
    *(_QWORD *)&v29[0] = 0;
    v26 = 0;
    v27 = 0;
    v25 = 0;
    ++v28;
  }
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v21);
  return re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v18);
}

double re::downgradeShaderParameterDataFromSpring2023@<D0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  double v22;
  double v23;
  uint64_t v25;
  uint64_t v26;
  char v27;
  float v28;
  float v29;
  float v30;
  float v31;
  _OWORD v32[2];
  int v33;
  uint64_t v34;
  _OWORD v35[2];
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _QWORD v42[4];
  int v43;
  _BYTE v44[44];
  uint64_t v45;
  uint64_t v46[4];
  int v47;
  uint64_t v48;
  uint64_t v49[4];
  int v50;
  uint64_t v51;

  v33 = 0;
  memset(v32, 0, sizeof(v32));
  v34 = 0x7FFFFFFFLL;
  memset(v35, 0, sizeof(v35));
  v36 = 0;
  v37 = 0x7FFFFFFFLL;
  v39 = 0;
  v40 = 0;
  v38 = 0;
  memset(v42, 0, sizeof(v42));
  v41 = 0;
  v43 = 0;
  memset(v44, 0, sizeof(v44));
  v45 = 0x7FFFFFFFLL;
  v47 = 0;
  memset(v46, 0, sizeof(v46));
  v48 = 0x7FFFFFFFLL;
  v50 = 0;
  memset(v49, 0, sizeof(v49));
  v51 = 0x7FFFFFFFLL;
  re::generateShaderParameterTableBuilder((_BOOL8)v32, 0, (uint64_t)"<downgrade version>", a1);
  v4 = *(unsigned int *)(a1 + 32);
  v5 = 0;
  if ((_DWORD)v4)
  {
    v6 = (int *)(*(_QWORD *)(a1 + 16) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 20;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a1 + 32);
        break;
      }
    }
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v8 = v5;
    v9 = *(_QWORD *)(a1 + 16);
    do
    {
      v10 = *(_QWORD *)(v9 + 80 * v8 + 24);
      if ((v10 & 1) != 0)
      {
        v12 = *(_BYTE **)(v9 + 80 * v8 + 32);
        if (!v12)
        {
          v16 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_19;
        }
        LOBYTE(v9) = *v12;
      }
      else
      {
        v11 = v10 >> 8;
        v12 = (_BYTE *)(v9 + 80 * v8 + 25);
        LOBYTE(v9) = v11;
      }
      if ((_BYTE)v9)
      {
        v9 = (char)v9;
        v13 = v12[1];
        if (v13)
        {
          v14 = v12 + 2;
          do
          {
            v9 = 31 * v9 + v13;
            v15 = *v14++;
            v13 = v15;
          }
          while (v15);
        }
        v16 = v9 & 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v16 = 0;
      }
LABEL_19:
      v26 = v16;
      v17 = re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet((uint64_t)v49, &v26);
      if (v17)
      {
        v18 = v17;
        re::ColorGamut4F::as(v17, 0, 3, (uint64_t)&v28);
        if (*(_BYTE *)(v18 + 20) == 20)
          re::DynamicString::format((re::DynamicString *)"[%f, %f, %f]", (re::DynamicString *)&v26, v28, v29, v30, v25);
        else
          re::DynamicString::format((re::DynamicString *)"[%f, %f, %f, %f]", (re::DynamicString *)&v26, v28, v29, v30, v31);
        re::DynamicString::operator=((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 80 * v8 + 48), (re::DynamicString *)&v26);
        if (v26)
        {
          if ((v27 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v26 + 40))();
        }
      }
      v19 = *(_DWORD *)(a1 + 32);
      v9 = *(_QWORD *)(a1 + 16);
      if (v19 <= (int)v5 + 1)
        v20 = v5 + 1;
      else
        v20 = *(_DWORD *)(a1 + 32);
      while (1)
      {
        v8 = (v5 + 1);
        if (v20 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v21 = v8;
        if ((*(_DWORD *)(v9 + 80 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_33;
      }
      v21 = v20;
LABEL_33:
      LODWORD(v5) = v21;
    }
    while (v19 != v21);
  }
  *a2 = 1;
  v22 = re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(v49);
  v23 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v46, v22);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v44[8], v23);
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)&v42[1]);
  if (v38)
  {
    if (v42[0])
      (*(void (**)(void))(*(_QWORD *)v38 + 40))();
    v42[0] = 0;
    v39 = 0;
    v40 = 0;
    v38 = 0;
    ++v41;
  }
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v35);
  return re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v32);
}

void re::parseTextureParameterData(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  re::DynamicString *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id *v17;
  id v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int *v33;
  int v34;
  re *v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _BYTE *v44;
  unint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  char v48;
  unsigned __int8 *v49;
  int v50;
  uint64_t v51;
  _anonymous_namespace_ *v52;
  const char *v53;
  uint64_t v54;
  char *v55;
  const re::StringID *v56;
  _BOOL8 isColorTextureParameter;
  _anonymous_namespace_ *v58;
  uint64_t *v59;
  char *v60;
  char var0;
  char *var1;
  const char *v63;
  re::MaterialManager **v64;
  const char *v65;
  uint64_t v66;
  _anonymous_namespace_ *v67;
  unint64_t v68;
  char *v69;
  char v70;
  char *v71;
  const re::DynamicString *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  const re::DynamicString *v82;
  NSObject *v83;
  uint64_t v84;
  _DWORD *v85;
  unsigned int v86;
  NSObject *v87;
  char *v88;
  unint64_t v89;
  NSObject *v90;
  char *v91;
  unsigned int v92;
  unsigned int v93;
  _BYTE *v94;
  uint64_t v95;
  char v96;
  unint64_t v97;
  NSObject *v98;
  double v99;
  unsigned int v100;
  uint64_t v101;
  int *v102;
  int v103;
  uint64_t v104;
  re::StringID *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  _BYTE *v109;
  unint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  char v113;
  unsigned __int8 *v114;
  int v115;
  uint64_t v116;
  const char *v117;
  _anonymous_namespace_ *v118;
  const char *v119;
  uint64_t v120;
  char *v121;
  const re::StringID *v122;
  _BOOL8 v123;
  _anonymous_namespace_ *v124;
  unint64_t v125;
  char *v126;
  char v127;
  char *v128;
  re *v129;
  const char *v130;
  re::MaterialManager **v131;
  const char *v132;
  uint64_t v133;
  _anonymous_namespace_ *v134;
  uint64_t v135;
  char *v136;
  char v137;
  char *v138;
  NSObject *v139;
  _BYTE *v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  int v146;
  double v147;
  double v148;
  double v149;
  double v150;
  char *v151;
  re::StringID *v153;
  char *v154;
  int v155;
  re::TextureHandle *v156;
  re::RenderManager *v157;
  _anonymous_namespace_ *v159;
  int v160;
  _OWORD v161[2];
  int v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  unsigned int v166;
  uint64_t v167;
  _QWORD v168[2];
  uint64_t v169;
  int v170;
  __int128 v171;
  __int128 v172;
  int v173;
  _BYTE v174[44];
  uint64_t v175;
  _OWORD v176[2];
  int v177;
  uint64_t v178;
  _OWORD v179[2];
  int v180;
  uint64_t v181;
  _OWORD v182[2];
  int v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  char v187;
  _BYTE v188[16];
  uint64_t v189;
  char *v190;
  _BYTE v191[16];
  unint64_t v192;
  _QWORD v193[2];
  _QWORD v194[2];
  uint64_t *v195;
  char *v196;
  char *v197;
  uint64_t v198;
  int v199;
  uint64_t v200;
  char v201;
  _BYTE v202[16];
  _OWORD v203[2];
  _OWORD v204[2];
  _OWORD v205[2];
  _BYTE v206[16];
  int v207;
  uint64_t v208;
  char v209;
  StringID v210;
  id v211;
  id v212;
  id v213;
  _OWORD v214[2];
  int v215;
  uint64_t v216;
  __int128 v217;
  __int128 v218;
  unsigned int v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  int v223;
  uint64_t v224;
  unint64_t v225;
  char *v226;
  _BYTE buf[24];
  unint64_t v228;
  int v229;
  re::MaterialManager **v230;
  uint64_t v231;

  v3 = a2;
  v157 = a1;
  v231 = *MEMORY[0x24BDAC8D0];
  v162 = 0;
  memset(v161, 0, sizeof(v161));
  v163 = 0x7FFFFFFFLL;
  v164 = 0u;
  v165 = 0u;
  v166 = 0;
  v167 = 0x7FFFFFFFLL;
  v168[1] = 0;
  v169 = 0;
  v168[0] = 0;
  v170 = 0;
  v171 = 0u;
  v172 = 0u;
  v173 = 0;
  memset(v174, 0, sizeof(v174));
  v175 = 0x7FFFFFFFLL;
  v177 = 0;
  memset(v176, 0, sizeof(v176));
  v178 = 0x7FFFFFFFLL;
  v180 = 0;
  memset(v179, 0, sizeof(v179));
  v181 = 0x7FFFFFFFLL;
  v183 = 0;
  memset(v182, 0, sizeof(v182));
  v184 = 0x7FFFFFFFLL;
  v223 = 0;
  v221 = 0u;
  v222 = 0u;
  v224 = 0x7FFFFFFFLL;
  v219 = 0;
  v217 = 0u;
  v218 = 0u;
  v220 = 0x7FFFFFFFLL;
  v4 = *(unsigned int *)(a2 + 224);
  v5 = 0;
  if ((_DWORD)v4)
  {
    v6 = (int *)(*(_QWORD *)(a2 + 208) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 38;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a2 + 224);
        break;
      }
    }
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v8 = v5;
    v9 = *(_QWORD *)(a2 + 208);
    v155 = *(_DWORD *)(a2 + 224);
    while (1)
    {
      v10 = v9 + 152 * v8;
      v11 = (re::DynamicString *)(v10 + 16);
      re::OptionalMaterialSamplerData::makeSamplerData((re::OptionalMaterialSamplerData *)(v10 + 48), (uint64_t)v214);
      v12 = re::MaterialSamplerData::hash((re::MaterialSamplerData *)v214);
      v13 = v12;
      v14 = v12 ^ (v12 >> 30);
      if (!(_QWORD)v217)
        goto LABEL_10;
      v15 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v14) ^ ((0xBF58476D1CE4E5B9 * v14) >> 27));
      v16 = *(unsigned int *)(*((_QWORD *)&v217 + 1) + 4 * ((v15 ^ (v15 >> 31)) % DWORD2(v218)));
      if ((_DWORD)v16 == 0x7FFFFFFF)
        goto LABEL_10;
      v23 = *(unsigned int *)(*((_QWORD *)&v217 + 1) + 4 * ((v15 ^ (v15 >> 31)) % DWORD2(v218)));
      if (*(_QWORD *)(v218 + 32 * v16 + 16) != v12)
        break;
LABEL_18:
      v213 = *(id *)(v218 + 32 * v16 + 24);
      buf[0] = BYTE8(v172);
      re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned char>((uint64_t)v176, v11, buf);
      re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)((char *)&v171 + 8), &v213);
      if (v213)
      {

        v213 = 0;
      }
      re::HashTable<re::DynamicString,re::MaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addNew<re::MaterialSamplerData&>((uint64_t)&v221, v11, (uint64_t)v214);
LABEL_38:
      v9 = *(_QWORD *)(v3 + 208);
      if (*(_DWORD *)(v3 + 224) <= (v5 + 1))
        v30 = v5 + 1;
      else
        v30 = *(_DWORD *)(v3 + 224);
      while (1)
      {
        v8 = (v5 + 1);
        if (v30 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v31 = v8;
        if ((*(_DWORD *)(v9 + 152 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_45;
      }
      v31 = v30;
LABEL_45:
      LODWORD(v5) = v31;
      if ((_DWORD)v4 == v31)
        goto LABEL_46;
    }
    while (1)
    {
      v23 = *(_DWORD *)(v218 + 32 * v23 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v23 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v218 + 32 * v23 + 16) == v12)
      {
        v24 = *(unsigned int *)(*((_QWORD *)&v217 + 1) + 4 * ((v15 ^ (v15 >> 31)) % DWORD2(v218)));
        do
        {
          v24 = *(_DWORD *)(v218 + 32 * v24 + 8) & 0x7FFFFFFF;
          v16 = 0x7FFFFFFFLL;
          if (v24 == 0x7FFFFFFF)
            break;
          v16 = v24;
        }
        while (*(_QWORD *)(v218 + 32 * v24 + 16) != v12);
        goto LABEL_18;
      }
    }
LABEL_10:
    v17 = (id *)*((_QWORD *)v157 + 6);
    re::MaterialSamplerData::makeDescriptor((re::MaterialSamplerData *)v214, &v212);
    v18 = objc_msgSend(*v17, sel_newSamplerStateWithDescriptor_, v212);
    if (v212)
    {

      v212 = 0;
    }
    re::HashTable<re::DynamicString,re::MaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addNew<re::MaterialSamplerData&>((uint64_t)&v221, v11, (uint64_t)v214);
    v19 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v14) ^ ((0xBF58476D1CE4E5B9 * v14) >> 27));
    v20 = v19 ^ (v19 >> 31);
    if ((_QWORD)v217)
    {
      v21 = v20 % DWORD2(v218);
      v22 = *(unsigned int *)(*((_QWORD *)&v217 + 1) + 4 * v21);
      if ((_DWORD)v22 != 0x7FFFFFFF)
      {
        while (*(_QWORD *)(v218 + 32 * v22 + 16) != v13)
        {
          v22 = *(_DWORD *)(v218 + 32 * v22 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v22 == 0x7FFFFFFF)
            goto LABEL_28;
        }
        goto LABEL_34;
      }
    }
    else
    {
      v21 = 0;
    }
LABEL_28:
    v25 = v220;
    if ((_DWORD)v220 == 0x7FFFFFFF)
    {
      v25 = v219;
      v26 = v219;
      if (v219 == DWORD2(v218))
      {
        re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)&v217, 2 * HIDWORD(v218));
        v26 = v219;
        v21 = v20 % DWORD2(v218);
      }
      v219 = v26 + 1;
      v27 = v218;
      v28 = *(_DWORD *)(v218 + 32 * v25 + 8);
    }
    else
    {
      v27 = v218;
      v28 = *(_DWORD *)(v218 + 32 * v220 + 8);
      LODWORD(v220) = v28 & 0x7FFFFFFF;
    }
    v29 = v27 + 32 * v25;
    *(_DWORD *)(v29 + 8) = v28 | 0x80000000;
    v4 = *((_QWORD *)&v217 + 1);
    *(_DWORD *)(v29 + 8) = *(_DWORD *)(*((_QWORD *)&v217 + 1) + 4 * v21) | 0x80000000;
    *(_QWORD *)v29 = v20;
    *(_QWORD *)(v29 + 16) = v13;
    *(_QWORD *)(v29 + 24) = v18;
    *(_DWORD *)(v4 + 4 * v21) = v25;
    ++HIDWORD(v218);
    ++HIDWORD(v220);
    v3 = a2;
    LODWORD(v4) = v155;
LABEL_34:
    v211 = v18;
    buf[0] = BYTE8(v172);
    re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned char>((uint64_t)v176, v11, buf);
    re::DynamicArray<NS::SharedPtr<NS::String>>::add((_anonymous_namespace_ *)((char *)&v171 + 8), &v211);
    a1 = (_anonymous_namespace_ *)v211;
    if (v211)
    {

      v211 = 0;
    }
    if (v18)

    goto LABEL_38;
  }
LABEL_46:
  v215 = 0;
  memset(v214, 0, sizeof(v214));
  v216 = 0x7FFFFFFFLL;
  v156 = (re::TextureHandle *)*(unsigned int *)(v3 + 176);
  v32 = 0;
  if ((_DWORD)v156)
  {
    v33 = (int *)(*(_QWORD *)(v3 + 160) + 8);
    while (1)
    {
      v34 = *v33;
      v33 += 40;
      if (v34 < 0)
        break;
      if (v156 == (re::TextureHandle *)++v32)
      {
        LODWORD(v32) = *(_DWORD *)(v3 + 176);
        break;
      }
    }
  }
  if ((_DWORD)v156 != (_DWORD)v32)
  {
    v40 = v32;
    v41 = *(_QWORD *)(v3 + 160);
    while (1)
    {
      v42 = v41 + 160 * v40;
      v45 = *(_QWORD *)(v42 + 24);
      v44 = (_BYTE *)(v42 + 24);
      v43 = v45;
      if ((v45 & 1) == 0)
        break;
      v47 = *(_BYTE **)(v41 + 160 * v40 + 32);
      if (v47)
      {
        LOBYTE(v46) = *v47;
LABEL_62:
        if ((_BYTE)v46)
        {
          v46 = (char)v46;
          v48 = v47[1];
          if (v48)
          {
            v49 = v47 + 2;
            do
            {
              v46 = 31 * v46 + v48;
              v50 = *v49++;
              v48 = v50;
            }
            while (v50);
          }
          v51 = v46 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v51 = 0;
        }
        goto LABEL_69;
      }
      v51 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_69:
      *(_QWORD *)buf = v51;
      re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::add((uint64_t)v214, (uint64_t *)buf);
      v207 = 3;
      re::StringID::invalid((re::StringID *)buf);
      v208 = *(_QWORD *)buf >> 1;
      re::StringID::destroyString((re::StringID *)buf);
      v209 = 0;
      v52 = re::StringID::invalid((re::StringID *)&v210);
      v159 = (_anonymous_namespace_ *)(v44 - 8);
      if ((*v44 & 1) != 0)
        v53 = *(const char **)(v41 + 160 * v40 + 32);
      else
        v53 = v44 + 1;
      v192 = 0;
      v193[0] = &str_110;
      v208 = v192 >> 1;
      v55 = re::MaterialTextureParam::serializationString((re::MaterialTextureParam *)(v44 + 24), v54);
      isColorTextureParameter = re::MaterialAsset::isColorTextureParameter((re::MaterialAsset *)&v192, v56);
      re::tryLoadTexture((re *)&v185, (os_unfair_lock_s **)v157, (AssetService *)v44 + 3, (re::MaterialTextureParam *)isColorTextureParameter);
      v154 = v55;
      if ((_BYTE)v185)
      {
        re::TextureHandle::TextureHandle((re::TextureHandle *)v206, (const re::TextureHandle *)&v186);
        buf[0] = v169;
        re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned char>((uint64_t)&v174[8], v159, buf);
        re::DynamicArray<re::TextureHandle>::add((_anonymous_namespace_ *)v168, (re::TextureHandle *)v206);
        re::TextureHandle::invalidate((re::TextureHandle *)v206);
        v207 = 2;
        v195 = 0;
        v196 = (char *)&str_110;
        v59 = v195;
        v60 = v196;
        v196 = (char *)&str_110;
        v195 = 0;
        var0 = (char)v210.var0;
        var1 = v210.var1;
        v210.var1 = v60;
        *(_QWORD *)&v210.var0 = v59;
        *(_QWORD *)buf = (unint64_t)v59 & 0xFFFFFFFFFFFFFFFELL | var0 & 1;
        *(_QWORD *)&buf[8] = var1;
        re::StringID::destroyString((re::StringID *)buf);
        re::StringID::destroyString((re::StringID *)&v195);
        v209 = 0;
      }
      else
      {
        buf[0] = 46;
        v230 = 0;
        *(_QWORD *)&buf[16] = 0;
        v228 = 0;
        *(_QWORD *)&buf[8] = 0;
        v229 = 0;
        re::TokenizedMember::tokenize(buf, v55);
        if (v228 == 2)
        {
          v64 = v230;
          if (re::MaterialManager::isEngineDefinedTextureTable(*v230, v63))
          {
            v207 = 1;
            v65 = (const char *)re::TokenizedMember::operator[](2uLL, (uint64_t)v64, 0);
            v66 = 0;
            while (strcmp(re::s_materialTableIDMappings[v66], v65))
            {
              if (++v66 == 168)
              {
                LOBYTE(v66) = 0;
                break;
              }
            }
            v209 = v66;
            v67 = (_anonymous_namespace_ *)re::TokenizedMember::operator[](v228, (uint64_t)v230, 1u);
            v225 = 0;
            v226 = (char *)&str_110;
            v68 = v225;
            v69 = v226;
            v225 = 0;
            v226 = (char *)&str_110;
            v70 = (char)v210.var0;
            v71 = v210.var1;
            v210.var1 = v69;
            *(_QWORD *)&v210.var0 = v68;
            v196 = v71;
            v195 = (uint64_t *)(v68 & 0xFFFFFFFFFFFFFFFELL | v70 & 1);
            re::StringID::destroyString((re::StringID *)&v195);
            re::StringID::destroyString((re::StringID *)&v225);
          }
        }
        re::TokenizedMember::~TokenizedMember((uint64_t **)buf);
      }
      v72 = (const re::DynamicString *)(v41 + 160 * v40 + 88);
      v73 = re::Hash<re::DynamicString>::operator()((uint64_t)buf, (uint64_t)v72);
      if (!(_QWORD)v221
        || (v74 = *(unsigned int *)(*((_QWORD *)&v221 + 1) + 4 * (v73 % DWORD2(v222))), (_DWORD)v74 == 0x7FFFFFFF))
      {
LABEL_87:
        v76 = v41 + 160 * v40;
        v78 = *(_QWORD *)(v76 + 96);
        v77 = (_BYTE *)(v76 + 96);
        v79 = v78 >> 1;
        v80 = v78 >> 1;
        if ((v78 & 1) != 0)
          v81 = v79;
        else
          v81 = v80;
        v82 = (const re::DynamicString *)(v44 - 8);
        if (v81)
        {
          v83 = *re::pipelineLogObjects((re *)v73);
          v73 = os_log_type_enabled(v83, OS_LOG_TYPE_ERROR);
          if ((_DWORD)v73)
          {
            if ((*v44 & 1) != 0)
              v94 = *(_BYTE **)(v41 + 160 * v40 + 32);
            else
              v94 = v44 + 1;
            if ((*v77 & 1) != 0)
              v95 = *(_QWORD *)(v41 + 160 * v40 + 104);
            else
              v95 = v41 + 160 * v40 + 97;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v94;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v95;
            _os_log_error_impl(&dword_224FE9000, v83, OS_LOG_TYPE_ERROR, "Invalid sampler binding on texture block \"%s\": \"%s\"", buf, 0x16u);
          }
        }
      }
      else
      {
        v75 = v222;
        while (1)
        {
          v73 = re::DynamicString::operator==(v75 + 104 * v74 + 16, (uint64_t)v72);
          if ((v73 & 1) != 0)
            break;
          v74 = *(_DWORD *)(v75 + 104 * v74 + 8) & 0x7FFFFFFF;
          if (v74 == 0x7FFFFFFF)
            goto LABEL_87;
        }
        v82 = (const re::DynamicString *)(v44 - 8);
        re::DynamicString::DynamicString((re::DynamicString *)v205, v159);
        re::DynamicString::DynamicString((re::DynamicString *)v204, v72);
        v89 = re::MaterialSamplerData::hash((re::MaterialSamplerData *)(v75 + 104 * v74 + 48));
        re::TextureParameterTableBuilder::bindTextureToSampler((uint64_t)v161, (uint64_t)v205, (uint64_t)v204, v89);
        if (*(_QWORD *)&v204[0])
        {
          if ((BYTE8(v204[0]) & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)&v204[0] + 40))();
          memset(v204, 0, sizeof(v204));
        }
        v73 = *(_QWORD *)&v205[0];
        if (*(_QWORD *)&v205[0])
        {
          if ((BYTE8(v205[0]) & 1) != 0)
            v73 = (*(uint64_t (**)(void))(**(_QWORD **)&v205[0] + 40))();
          memset(v205, 0, sizeof(v205));
        }
      }
      if (*(_BYTE *)(v41 + 160 * v40 + 152))
      {
        v84 = v41 + 160 * v40;
        v86 = *(_DWORD *)(v84 + 156);
        v85 = (_DWORD *)(v84 + 156);
        if (v86 >= 2)
        {
          v87 = *re::pipelineLogObjects((re *)v73);
          if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
          {
            if ((*v44 & 1) != 0)
              v88 = *(char **)(v41 + 160 * v40 + 32);
            else
              v88 = (char *)v82 + 9;
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v88;
            _os_log_impl(&dword_224FE9000, v87, OS_LOG_TYPE_DEFAULT, "Texture block \"%s\" has uv index > 1; this will be clamped to 1 in RE Pbr materials",
              buf,
              0xCu);
          }
        }
        re::DynamicString::DynamicString((re::DynamicString *)v203, v82);
        *(_DWORD *)buf = *v85;
        re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace<unsigned int &>((uint64_t)v182, (re::DynamicString *)v203, buf);
        v73 = *(_QWORD *)&v203[0];
        if (*(_QWORD *)&v203[0])
        {
          if ((BYTE8(v203[0]) & 1) != 0)
            v73 = (*(uint64_t (**)(void))(**(_QWORD **)&v203[0] + 40))();
          memset(v203, 0, sizeof(v203));
        }
      }
      if (v207 == 3)
      {
        v90 = *re::pipelineLogObjects((re *)v73);
        if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
        {
          if ((*v44 & 1) != 0)
            v91 = *(char **)(v41 + 160 * v40 + 32);
          else
            v91 = (char *)v82 + 9;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v91;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v154;
          _os_log_error_impl(&dword_224FE9000, v90, OS_LOG_TYPE_ERROR, "Invalid texture binding \"%s\": \"%s\"", buf, 0x16u);
        }
      }
      else
      {
        v199 = v207;
        v200 = v208;
        v201 = v209;
        re::StringID::StringID((re::StringID *)v202, &v210);
        re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::ParameterBinding&>((uint64_t)v161, v82, (uint64_t)&v199);
        re::StringID::destroyString((re::StringID *)v202);
        v200 = 0;
      }
      if ((_BYTE)v185)
        re::TextureHandle::invalidate((re::TextureHandle *)&v186);
      re::StringID::destroyString((re::StringID *)&v192);
      re::StringID::destroyString((re::StringID *)&v210);
      v3 = a2;
      v92 = *(_DWORD *)(a2 + 176);
      v41 = *(_QWORD *)(a2 + 160);
      if (v92 <= (int)v32 + 1)
        v92 = v32 + 1;
      while (1)
      {
        v40 = (v32 + 1);
        if (v92 - 1 == (_DWORD)v32)
          break;
        LODWORD(v32) = v32 + 1;
        v93 = v40;
        if ((*(_DWORD *)(v41 + 160 * v40 + 8) & 0x80000000) != 0)
          goto LABEL_124;
      }
      v93 = v92;
LABEL_124:
      LODWORD(v32) = v93;
      if ((_DWORD)v156 == v93)
        goto LABEL_52;
    }
    v46 = v43 >> 8;
    v47 = v44 + 1;
    goto LABEL_62;
  }
LABEL_52:
  v197 = 0;
  v196 = 0;
  v198 = 0;
  v35 = (re *)re::DynamicString::setCapacity(&v195, 0);
  v36 = *(unsigned int *)(v3 + 128);
  if ((_DWORD)v36)
  {
    v37 = 0;
    v38 = (int *)(*(_QWORD *)(v3 + 112) + 8);
    while (1)
    {
      v39 = *v38;
      v38 += 22;
      if (v39 < 0)
        break;
      if (v36 == ++v37)
      {
        LODWORD(v37) = *(_DWORD *)(v3 + 128);
        break;
      }
    }
  }
  else
  {
    LODWORD(v37) = 0;
  }
  if ((_DWORD)v36 != (_DWORD)v37)
  {
    v104 = v37;
    v105 = (re::StringID *)&v210;
    v106 = *(_QWORD *)(v3 + 112);
    v160 = *(_DWORD *)(v3 + 128);
    while (1)
    {
      v107 = v106 + 88 * v104;
      v110 = *(_QWORD *)(v107 + 24);
      v109 = (_BYTE *)(v107 + 24);
      v108 = v110;
      if ((v110 & 1) == 0)
        break;
      v112 = *(_BYTE **)(v106 + 88 * v104 + 32);
      if (v112)
      {
        LOBYTE(v111) = *v112;
LABEL_154:
        if ((_BYTE)v111)
        {
          v111 = (char)v111;
          v113 = v112[1];
          if (v113)
          {
            v114 = v112 + 2;
            do
            {
              v111 = 31 * v111 + v113;
              v115 = *v114++;
              v113 = v115;
            }
            while (v115);
          }
          v116 = v111 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v116 = 0;
        }
        goto LABEL_161;
      }
      v116 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_161:
      *(_QWORD *)buf = v116;
      if (re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::contains((uint64_t)v214, (uint64_t *)buf))
      {
        if ((*v109 & 1) != 0)
          v117 = *(const char **)(v106 + 88 * v104 + 32);
        else
          v117 = v109 + 1;
        v35 = (re *)re::DynamicString::appendf((re::DynamicString *)&v195, "%s, ", v117);
      }
      else
      {
        v207 = 3;
        re::StringID::invalid((re::StringID *)buf);
        v208 = *(_QWORD *)buf >> 1;
        re::StringID::destroyString((re::StringID *)buf);
        v209 = 0;
        v118 = re::StringID::invalid(v105);
        if ((*v109 & 1) != 0)
          v119 = *(const char **)(v106 + 88 * v104 + 32);
        else
          v119 = v109 + 1;
        v194[0] = 0;
        v194[1] = &str_110;
        v208 = v194[0] >> 1;
        v121 = re::MaterialTextureParam::serializationString((re::MaterialTextureParam *)(v109 + 24), v120);
        if (!strcmp(v121, "null"))
        {
          v207 = 1;
          v209 = 0;
          re::StringID::destroyString(v105);
          v210.var1 = "null";
          *(_QWORD *)&v210.var0 = 6785806;
          LODWORD(v36) = v160;
        }
        else
        {
          v123 = re::MaterialAsset::isColorTextureParameter((re::MaterialAsset *)v194, v122);
          re::tryLoadTexture((re *)&v192, (os_unfair_lock_s **)v157, (AssetService *)v109 + 3, (re::MaterialTextureParam *)v123);
          if ((_BYTE)v192)
          {
            re::TextureHandle::TextureHandle((re::TextureHandle *)v191, (const re::TextureHandle *)v193);
            buf[0] = v169;
            re::HashTable<re::DynamicString,unsigned int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<unsigned char>((uint64_t)&v174[8], (re::DynamicString *)(v109 - 8), buf);
            re::DynamicArray<re::TextureHandle>::add((_anonymous_namespace_ *)v168, (re::TextureHandle *)v191);
            re::TextureHandle::invalidate((re::TextureHandle *)v191);
            v207 = 2;
            v225 = 0;
            v226 = (char *)&str_110;
            v125 = v225;
            v126 = v226;
            v225 = 0;
            v226 = (char *)&str_110;
            v127 = (char)v210.var0;
            v128 = v210.var1;
            v210.var1 = v126;
            *(_QWORD *)&v210.var0 = v125;
            *(_QWORD *)buf = v125 & 0xFFFFFFFFFFFFFFFELL | v127 & 1;
            *(_QWORD *)&buf[8] = v128;
            re::StringID::destroyString((re::StringID *)buf);
            re::StringID::destroyString((re::StringID *)&v225);
            v209 = 0;
            LODWORD(v36) = v160;
          }
          else
          {
            buf[0] = 46;
            v230 = 0;
            *(_QWORD *)&buf[16] = 0;
            v228 = 0;
            *(_QWORD *)&buf[8] = 0;
            v229 = 0;
            re::TokenizedMember::tokenize(buf, v121);
            LODWORD(v36) = v160;
            if (v228 == 2)
            {
              v131 = v230;
              if (re::MaterialManager::isEngineDefinedTextureTable(*v230, v130))
              {
                v153 = v105;
                v207 = 1;
                v132 = (const char *)re::TokenizedMember::operator[](2uLL, (uint64_t)v131, 0);
                v133 = 0;
                while (strcmp(re::s_materialTableIDMappings[v133], v132))
                {
                  if (++v133 == 168)
                  {
                    LOBYTE(v133) = 0;
                    break;
                  }
                }
                v209 = v133;
                v134 = (_anonymous_namespace_ *)re::TokenizedMember::operator[](v228, (uint64_t)v230, 1u);
                v189 = 0;
                v190 = (char *)&str_110;
                v135 = v189;
                v136 = v190;
                v190 = (char *)&str_110;
                v189 = 0;
                v137 = (char)v210.var0;
                v138 = v210.var1;
                v210.var1 = v136;
                *(_QWORD *)&v210.var0 = v135;
                v225 = v135 & 0xFFFFFFFFFFFFFFFELL | v137 & 1;
                v226 = v138;
                re::StringID::destroyString((re::StringID *)&v225);
                re::StringID::destroyString((re::StringID *)&v189);
                v105 = v153;
              }
            }
            re::TokenizedMember::~TokenizedMember((uint64_t **)buf);
          }
          if ((_BYTE)v192)
            re::TextureHandle::invalidate((re::TextureHandle *)v193);
        }
        if (v207 == 3)
        {
          v139 = *re::pipelineLogObjects(v129);
          if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
          {
            if ((*v109 & 1) != 0)
              v140 = *(_BYTE **)(v106 + 88 * v104 + 32);
            else
              v140 = v109 + 1;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = v140;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v121;
            _os_log_error_impl(&dword_224FE9000, v139, OS_LOG_TYPE_ERROR, "Invalid texture binding \"%s\": \"%s\"", buf, 0x16u);
          }
        }
        else
        {
          v185 = v207;
          v186 = v208;
          v187 = v209;
          re::StringID::StringID((re::StringID *)v188, (const StringID *)v105);
          re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::ParameterBinding&>((uint64_t)v161, (re::DynamicString *)(v109 - 8), (uint64_t)&v185);
          re::StringID::destroyString((re::StringID *)v188);
          v186 = 0;
        }
        re::StringID::destroyString((re::StringID *)v194);
        re::StringID::destroyString(v105);
        v3 = a2;
      }
      v141 = *(_DWORD *)(v3 + 128);
      v106 = *(_QWORD *)(v3 + 112);
      if (v141 <= (int)v37 + 1)
        v141 = v37 + 1;
      while (1)
      {
        v104 = (v37 + 1);
        if (v141 - 1 == (_DWORD)v37)
          break;
        LODWORD(v37) = v37 + 1;
        v142 = v104;
        if ((*(_DWORD *)(v106 + 88 * v104 + 8) & 0x80000000) != 0)
          goto LABEL_195;
      }
      v142 = v141;
LABEL_195:
      LODWORD(v37) = v142;
      if ((_DWORD)v36 == v142)
        goto LABEL_137;
    }
    v111 = v108 >> 8;
    v112 = v109 + 1;
    goto LABEL_154;
  }
LABEL_137:
  v96 = (char)v196;
  v97 = (unint64_t)v196 >> 1;
  if ((v196 & 1) == 0)
    v97 = v196 >> 1;
  if (v97)
  {
    v98 = *re::pipelineLogObjects(v35);
    if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
    {
      v151 = v197;
      if ((v96 & 1) == 0)
        v151 = (char *)&v196 + 1;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v151;
      _os_log_debug_impl(&dword_224FE9000, v98, OS_LOG_TYPE_DEBUG, "Duplicate texture keys found: %s using TextureBlock entries", buf, 0xCu);
    }
  }
  if (v195 && (v196 & 1) != 0)
    (*(void (**)(void))(*v195 + 40))();
  re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v214);
  v99 = re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v217);
  re::HashTable<re::DynamicString,re::MaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v221, v99);
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v214, (uint64_t)v161);
  v100 = v166;
  if (v166)
  {
    v101 = 0;
    v102 = (int *)(v165 + 8);
    while (1)
    {
      v103 = *v102;
      v102 += 22;
      if (v103 < 0)
        break;
      if (v166 == ++v101)
      {
        LODWORD(v101) = v166;
        break;
      }
    }
  }
  else
  {
    LODWORD(v101) = 0;
  }
  if (v166 != (_DWORD)v101)
  {
    v143 = v101;
    v144 = v165;
    do
    {
      re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::ParameterBinding&>((uint64_t)v214, (re::DynamicString *)(v144 + 88 * v143 + 16), v144 + 88 * v143 + 48);
      v144 = v165;
      if (v166 <= (int)v101 + 1)
        v145 = v101 + 1;
      else
        v145 = v166;
      v146 = v101;
      while (1)
      {
        v143 = (v146 + 1);
        if (v145 - 1 == v146)
          break;
        ++v146;
        LODWORD(v101) = v143;
        if ((*(_DWORD *)(v165 + 88 * v143 + 8) & 0x80000000) != 0)
          goto LABEL_210;
      }
      LODWORD(v101) = v145;
LABEL_210:
      ;
    }
    while (v100 != (_DWORD)v101);
  }
  *(_QWORD *)(a3 + 232) = 0;
  *(_OWORD *)(a3 + 216) = 0u;
  *(_OWORD *)(a3 + 200) = 0u;
  *(_OWORD *)(a3 + 184) = 0u;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_OWORD *)(a3 + 136) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_QWORD *)(a3 + 128) = off_24ED3A908;
  *(_OWORD *)(a3 + 256) = 0u;
  *(_OWORD *)(a3 + 272) = 0u;
  *(_OWORD *)(a3 + 288) = 0u;
  *(_OWORD *)(a3 + 304) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 316) = 0u;
  *(_OWORD *)(a3 + 448) = 0u;
  *(_OWORD *)(a3 + 464) = 0u;
  *(_OWORD *)(a3 + 416) = 0u;
  *(_OWORD *)(a3 + 432) = 0u;
  *(_OWORD *)(a3 + 384) = 0u;
  *(_OWORD *)(a3 + 400) = 0u;
  *(_OWORD *)(a3 + 352) = 0u;
  *(_OWORD *)(a3 + 368) = 0u;
  *(_OWORD *)(a3 + 336) = 0u;
  re::TextureParameterTableBuilder::build((re::TextureParameterTableBuilder *)v161, (re::TextureParameterTable *)a3);
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(a3 + 480, (uint64_t)v214);
  v147 = re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v214);
  v148 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v182, v147);
  v149 = re::HashTable<re::DynamicString,re::WeakStringID,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v179, v148);
  v150 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v176, v149);
  re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v174[8], v150);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)&v171 + 8);
  re::DynamicArray<re::TextureHandle>::deinit((uint64_t)v168);
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v164);
  re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v161);
}

uint64_t re::parseConstant(_anonymous_namespace_ *a1, uint64_t a2, const char *a3, int a4, __int16 a5, uint64_t a6)
{
  _anonymous_namespace_ *v11;
  size_t v12;
  _anonymous_namespace_ *v13;
  re *v14;
  unsigned __int8 *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  const char *v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  const char *v25;
  _anonymous_namespace_ *v26;
  uint64_t v27;
  const char *v28;
  __int128 *v29;
  const char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t result;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  __int128 v57;
  __int128 v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  void *__dst;
  char v67[28];
  __int16 v68;
  _BYTE v69[10];
  _OWORD v70[2];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;

  v11 = a1;
  v74 = *MEMORY[0x24BDAC8D0];
  v60 = 0;
  v61 = 0;
  v62 = 0;
  re::DynamicString::setCapacity(&v59, 0);
  v64 = 0;
  v65 = 0;
  __dst = 0;
  v12 = strlen(a3);
  *(_QWORD *)&v70[0] = a3;
  *((_QWORD *)&v70[0] + 1) = v12;
  v13 = re::DynamicString::operator=((re::DynamicString *)&v59, (uint64_t)v70);
  LOWORD(v63) = a4;
  HIWORD(v63) = a5;
  if (a4 == 53)
  {
    if ((*(_BYTE *)(a6 + 8) & 1) != 0)
      v14 = *(re **)(a6 + 16);
    else
      v14 = (re *)(a6 + 9);
    re::stringToLowerCase(v14, (re::DynamicString *)&v57);
    v16 = re::DynamicString::find((re::DynamicString *)&v57, "true", 4, 0, (uint64_t)v70);
    if ((BYTE8(v57) & 1) != 0)
      v17 = *((_QWORD *)&v57 + 1) >> 1;
    else
      v17 = BYTE8(v57) >> 1;
    if ((!LOBYTE(v70[0]) || *((_QWORD *)&v70[0] + 1) == v17)
      && ((v16 = re::DynamicString::find((re::DynamicString *)&v57, "1", 1, 0, (uint64_t)v67), (BYTE8(v57) & 1) != 0)
        ? (v18 = *((_QWORD *)&v57 + 1) >> 1)
        : (v18 = BYTE8(v57) >> 1),
          !v67[0] || *(_QWORD *)&v67[8] == v18))
    {
      v33 = re::DynamicString::find((re::DynamicString *)&v57, "false", 5, 0, (uint64_t)v70);
      if ((BYTE8(v57) & 1) != 0)
        v34 = *((_QWORD *)&v57 + 1) >> 1;
      else
        v34 = BYTE8(v57) >> 1;
      if (!LOBYTE(v70[0]) || *((_QWORD *)&v70[0] + 1) == v34)
      {
        v33 = re::DynamicString::find((re::DynamicString *)&v57, "0", 1, 0, (uint64_t)v67);
        v35 = (BYTE8(v57) & 1) != 0 ? *((_QWORD *)&v57 + 1) >> 1 : BYTE8(v57) >> 1;
        if (!v67[0] || *(_QWORD *)&v67[8] == v35)
        {
          re::DynamicString::format((re::DynamicString *)"Type mismatch between function constant and material: %s[%s], %s", (re::DynamicString *)v70, a3, "BOOL", a2);
          v47 = v70[0];
          v48 = v70[1];
          *(_BYTE *)v11 = 0;
          *(_OWORD *)((char *)v11 + 8) = v47;
          *(_OWORD *)((char *)v11 + 24) = v48;
          if ((_QWORD)v57 && (BYTE8(v57) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v57 + 40))();
          goto LABEL_105;
        }
      }
      if (!v65)
      {
        *(_QWORD *)&v53 = 0;
        v72 = 0u;
        v73 = 0u;
        v71 = 0u;
        memset(v70, 0, sizeof(v70));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v67 = 136315906;
        *(_QWORD *)&v67[4] = "operator[]";
        *(_WORD *)&v67[12] = 1024;
        *(_DWORD *)&v67[14] = 468;
        *(_WORD *)&v67[18] = 2048;
        *(_QWORD *)&v67[20] = 0;
        v68 = 2048;
        *(_QWORD *)v69 = 0;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v19 = 0;
    }
    else
    {
      v19 = 1;
      if (!v65)
      {
        *(_QWORD *)&v53 = 0;
        v72 = 0u;
        v73 = 0u;
        v71 = 0u;
        memset(v70, 0, sizeof(v70));
        v11 = (_anonymous_namespace_ *)MEMORY[0x24BDACB70];
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v67 = 136315906;
        *(_QWORD *)&v67[4] = "operator[]";
        *(_WORD *)&v67[12] = 1024;
        *(_DWORD *)&v67[14] = 468;
        *(_WORD *)&v67[18] = 2048;
        *(_QWORD *)&v67[20] = 0;
        v68 = 2048;
        *(_QWORD *)v69 = 0;
        _os_log_send_and_compose_impl();
        v13 = (_anonymous_namespace_ *)_os_crash_msg();
        __break(1u);
        goto LABEL_20;
      }
    }
    *(_BYTE *)__dst = v19;
    if ((_QWORD)v57 && (BYTE8(v57) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v57 + 40))();
    goto LABEL_104;
  }
  if ((a4 - 3) > 3)
  {
LABEL_20:
    if (a4 == 33)
    {
      if ((*(_BYTE *)(a6 + 8) & 1) != 0)
        v36 = *(const char **)(a6 + 16);
      else
        v36 = (const char *)(a6 + 9);
      v42 = strtoul(v36, 0, 0);
      *(_DWORD *)__dst = v42;
      goto LABEL_104;
    }
    if (a4 == 29)
    {
      if ((*(_BYTE *)(a6 + 8) & 1) != 0)
        v20 = *(const char **)(a6 + 16);
      else
        v20 = (const char *)(a6 + 9);
      v41 = atoi(v20);
      *(_DWORD *)__dst = v41;
      goto LABEL_104;
    }
    re::DynamicString::format((re::DynamicString *)"Unsupported type provided data for function constant in material: %s, %s", (re::DynamicString *)v70, a3, a2);
    v37 = v70[0];
    v38 = v70[1];
    *(_BYTE *)v11 = 0;
    *(_OWORD *)((char *)v11 + 8) = v37;
    *(_OWORD *)((char *)v11 + 24) = v38;
    goto LABEL_105;
  }
  *((_QWORD *)&v71 + 1) = 0;
  memset((char *)v70 + 8, 0, 24);
  LODWORD(v71) = 0;
  LOBYTE(v70[0]) = 44;
  v57 = 0u;
  v58 = 0u;
  re::DynamicString::setCapacity(&v57, 0);
  if ((*(_BYTE *)(a6 + 8) & 1) != 0)
    v15 = *(unsigned __int8 **)(a6 + 16);
  else
    v15 = (unsigned __int8 *)(a6 + 9);
  do
  {
    v22 = *v15++;
    v21 = v22;
  }
  while (v22 == 32);
  if (v21 == 91)
    v23 = 0;
  else
    v23 = -1;
  while (1)
  {
    v24 = v15[v23];
    if (v24 == 32)
      goto LABEL_33;
    if (!v15[v23] || v24 == 93)
      break;
    v67[0] = v15[v23];
    re::DynamicString::append((re::DynamicString *)&v57, v67, 1uLL);
LABEL_33:
    ++v23;
  }
  if ((BYTE8(v57) & 1) != 0)
    v25 = (const char *)v58;
  else
    v25 = (const char *)((unint64_t)&v57 | 9);
  v26 = (_anonymous_namespace_ *)re::TokenizedMember::tokenize((unsigned __int8 *)v70, v25);
  *(_QWORD *)&v69[2] = 0;
  memset(v67, 0, sizeof(v67));
  if (!*((_QWORD *)&v70[1] + 1))
    goto LABEL_90;
  v27 = 0;
  while (2)
  {
    v28 = *(const char **)(*((_QWORD *)&v71 + 1) + 8 * v27);
    if (!strcasecmp(v28, "true"))
    {
      LOBYTE(v53) = 1;
LABEL_49:
      v29 = &v53;
      goto LABEL_56;
    }
    if (!strcasecmp(v28, "false"))
    {
      LOBYTE(v53) = 0;
      goto LABEL_49;
    }
    LODWORD(v53) = 0;
    LODWORD(v53) = strtof(v28, 0);
    while ((v67[16] & 3) != 0)
    {
      v56 = 0;
      re::DynamicArray<unsigned char>::add(v67, &v56);
    }
    re::DynamicArray<unsigned char>::add(v67, &v53);
    re::DynamicArray<unsigned char>::add(v67, (_BYTE *)&v53 + 1);
    re::DynamicArray<unsigned char>::add(v67, (_BYTE *)&v53 + 2);
    v26 = (_anonymous_namespace_ *)re::DynamicArray<unsigned char>::add(v67, (_BYTE *)&v53 + 3);
    if (*((_QWORD *)&v70[1] + 1) == 3)
    {
      if ((-1431655765 * v27 - 1431655766) > 0x55555554)
        goto LABEL_57;
LABEL_55:
      v56 = 0;
      re::DynamicArray<unsigned char>::add(v67, &v56);
      v56 = 0;
      re::DynamicArray<unsigned char>::add(v67, &v56);
      v56 = 0;
      re::DynamicArray<unsigned char>::add(v67, &v56);
      v56 = 0;
      v29 = (__int128 *)&v56;
LABEL_56:
      v26 = (_anonymous_namespace_ *)re::DynamicArray<unsigned char>::add(v67, v29);
      goto LABEL_57;
    }
    if ((-1431655765 * v27 - 1431655766) <= 0x55555554 && *((_QWORD *)&v70[1] + 1) == 9)
      goto LABEL_55;
LABEL_57:
    if (*((_QWORD *)&v70[1] + 1) > (unint64_t)++v27)
      continue;
    break;
  }
  if (*((_QWORD *)&v70[1] + 1) != 1)
  {
    v31 = a3;
    v32 = a2;
    if ((*((_QWORD *)&v70[1] + 1) != 2 || (unsigned __int16)v63 == 4)
      && (*((_QWORD *)&v70[1] + 1) != 3 || (unsigned __int16)v63 == 5)
      && (*((_QWORD *)&v70[1] + 1) != 4 || (unsigned __int16)v63 == 6))
    {
      goto LABEL_90;
    }
    if ((unsigned __int16)v63 == 3)
    {
      v39 = 1;
      goto LABEL_117;
    }
    if ((unsigned __int16)v63 != 4)
    {
LABEL_97:
      if ((unsigned __int16)v63 == 5)
        v39 = 3;
      else
        v39 = 4;
LABEL_117:
      if ((*(_BYTE *)(a6 + 8) & 1) != 0)
        v49 = *(_QWORD *)(a6 + 16);
      else
        v49 = a6 + 9;
      re::DynamicString::format((re::DynamicString *)"Incorrect data for float type function constant: %s[%s%u], %s[%s]", (re::DynamicString *)&v53, v31, "float", v39, v32, v49);
      v50 = v53;
      v51 = v54;
      v52 = v55;
      *(_BYTE *)v11 = 0;
      *(_OWORD *)((char *)v11 + 8) = v50;
      *((_QWORD *)v11 + 3) = v51;
      *((_QWORD *)v11 + 4) = v52;
      if (*(_QWORD *)v67 && *(_QWORD *)&v69[2])
        (*(void (**)(void))(**(_QWORD **)v67 + 40))();
      if ((_QWORD)v57 && (BYTE8(v57) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v57 + 40))();
      re::TokenizedMember::~TokenizedMember((uint64_t **)v70);
      goto LABEL_105;
    }
LABEL_89:
    v39 = 2;
    goto LABEL_117;
  }
  v31 = a3;
  v32 = a2;
  if ((unsigned __int16)v63 == 3)
    goto LABEL_90;
  if ((unsigned __int16)v63 == 4)
    goto LABEL_89;
  if ((unsigned __int16)v63 != 53)
    goto LABEL_97;
LABEL_90:
  v40 = *(_QWORD *)&v67[16];
  memcpy(__dst, *(const void **)&v69[2], *(size_t *)&v67[16]);
  if (*(_QWORD *)v67 && *(_QWORD *)&v69[2])
    (*(void (**)(void))(**(_QWORD **)v67 + 40))();
  if ((_QWORD)v57 && (BYTE8(v57) & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v57 + 40))();
  re::TokenizedMember::~TokenizedMember((uint64_t **)v70);
LABEL_104:
  re::DynamicString::DynamicString((re::DynamicString *)v70, (const re::DynamicString *)&v59);
  LODWORD(v71) = v63;
  re::FixedArray<unsigned char>::FixedArray((_QWORD *)&v71 + 1, &v64);
  *(_BYTE *)v11 = 1;
  v43 = *((_QWORD *)&v70[1] + 1);
  *((_QWORD *)v11 + 1) = *(_QWORD *)&v70[0];
  *((_QWORD *)v11 + 4) = v43;
  *((_OWORD *)v11 + 1) = *(_OWORD *)((char *)v70 + 8);
  memset(v70, 0, sizeof(v70));
  *((_DWORD *)v11 + 10) = v71;
  v44 = *((_QWORD *)&v71 + 1);
  v45 = v72;
  *((_QWORD *)&v71 + 1) = 0;
  *(_QWORD *)&v72 = 0;
  *((_QWORD *)v11 + 6) = v44;
  *(_OWORD *)((char *)v11 + 56) = __PAIR128__(*((unint64_t *)&v72 + 1), v45);
LABEL_105:
  if (v64)
  {
    if (v65)
    {
      (*(void (**)(uint64_t, void *))(*(_QWORD *)v64 + 40))(v64, __dst);
      v65 = 0;
      __dst = 0;
    }
    v64 = 0;
  }
  result = (uint64_t)v59;
  if (v59)
  {
    if ((v60 & 1) != 0)
      return (*(uint64_t (**)(uint64_t *, uint64_t))(*v59 + 40))(v59, v61);
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v9, a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v7 = v6 + (v5 << 6);
    if (re::DynamicString::operator==(v7 + 16, a2))
      break;
    v5 = *(_DWORD *)(v7 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      return 0;
  }
  return v7 + 48;
}

double re::parseFunctionConstants@<D0>(_anonymous_namespace_ *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _BYTE *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, char a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char **v20;
  const char *v21;
  id *v22;
  _anonymous_namespace_ *v23;
  uint64_t v24;
  BOOL v25;
  char **v26;
  _anonymous_namespace_ *v27;
  _anonymous_namespace_ *v28;
  const char *v29;
  int v30;
  int v31;
  uint64_t v32;
  const char *v33;
  _anonymous_namespace_ *v34;
  unint64_t v35;
  uint64_t v36;
  _anonymous_namespace_ *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _anonymous_namespace_ *TypeSize;
  int v42;
  size_t v43;
  uint64_t v44;
  _anonymous_namespace_ *v45;
  __int16 v46;
  const char *v47;
  _anonymous_namespace_ *v48;
  uint64_t v49;
  const char *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  const char **v59;
  const char *v60;
  int v61;
  _BOOL4 v62;
  BOOL v63;
  re *v64;
  unint64_t v65;
  NSObject *v66;
  _BOOL8 v67;
  const char *v68;
  size_t v69;
  unsigned __int16 v70;
  unsigned __int16 v71;
  _anonymous_namespace_ *v72;
  uint64_t v73;
  uint64_t v74;
  _anonymous_namespace_ *v75;
  uint64_t v76;
  const char *v77;
  re *v78;
  NSObject *v79;
  const char *v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v85;
  char v86;
  char v88;
  uint64_t v89;
  uint64_t v91;
  int v95;
  char __str[32];
  unsigned __int16 v97;
  unsigned __int16 v98;
  uint64_t v99;
  uint64_t v100;
  void *__dst;
  uint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE v111[28];
  __int16 v112;
  uint64_t v113;
  uint8_t buf[64];
  __int128 v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  v108 = 0;
  v106 = 0u;
  v107 = 0u;
  v109 = 0x7FFFFFFFLL;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  re::DynamicString::setCapacity(&v102, 0);
  v13 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v16 = *v15;
      v15 += 8;
      if (v16 < 0)
        break;
      if (v13 == ++v14)
      {
        LODWORD(v14) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v14) = 0;
  }
  if ((_DWORD)v13 == (_DWORD)v14)
  {
LABEL_136:
    v83 = (uint64_t *)re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)buf, (uint64_t)&v106);
    *(_BYTE *)a9 = 1;
    *(_DWORD *)(a9 + 48) = 0;
    *(_OWORD *)(a9 + 8) = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)(a9 + 24) = *(_QWORD *)&buf[16];
    *(_QWORD *)&buf[16] = 0;
    *(_OWORD *)(a9 + 32) = *(_OWORD *)&buf[24];
    *(_OWORD *)&buf[24] = xmmword_2260F5A80;
    re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v83);
    goto LABEL_138;
  }
  v86 = 0;
  v17 = v14;
  v85 = a9;
  v18 = *(_QWORD *)(a2 + 16);
  v89 = (uint64_t)(a4 + 8);
  v88 = a8;
  v95 = *(_DWORD *)(a2 + 32);
  v91 = a2;
  do
  {
    v19 = v18 + 32 * v17;
    v21 = *(const char **)(v19 + 16);
    v20 = (const char **)(v19 + 16);
    v22 = (id *)(v20 + 1);
    v23 = (_anonymous_namespace_ *)objc_msgSend((id)v20[1], sel_index);
    v24 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a3, (uint64_t)buf);
    if (*(_QWORD *)buf && (buf[8] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)buf + 40))(*(_QWORD *)buf, *(_QWORD *)&buf[16]);
    v25 = (unint64_t)v23 < 0x10001 && v24 == 0;
    v26 = &selRef_newBufferWithBytes_length_options_;
    if (v25)
    {
      v27 = (_anonymous_namespace_ *)snprintf(__str, 6uLL, "%lu", v23);
      v24 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a3, (uint64_t)buf);
      if (*(_QWORD *)buf && (buf[8] & 1) != 0)
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)buf + 40))(*(_QWORD *)buf, *(_QWORD *)&buf[16]);
      v26 = &selRef_newBufferWithBytes_length_options_;
    }
    if (!v24)
    {
      v32 = a3;
      v33 = *v20;
      v34 = (_anonymous_namespace_ *)objc_msgSend(*v22, sel_index);
      if (*a4 && *(_BYTE *)a5)
      {
        v35 = (unint64_t)v34;
        v36 = re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v89, (uint64_t)buf);
        if (*(_QWORD *)buf && (buf[8] & 1) != 0)
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)buf + 40))(*(_QWORD *)buf, *(_QWORD *)&buf[16]);
        if (v35 < 0x10001 && !v36)
        {
          v37 = (_anonymous_namespace_ *)snprintf(__str, 6uLL, "%lu", v35);
          v36 = re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v89, (uint64_t)buf);
          if (*(_QWORD *)buf)
          {
            if ((buf[8] & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)buf + 40))(*(_QWORD *)buf, *(_QWORD *)&buf[16]);
          }
        }
        if (v36)
        {
          v38 = *(_QWORD *)(a5 + 40);
          if (v38)
          {
            v39 = *(_QWORD *)v36;
            v40 = *(unsigned __int16 *)(v36 + 8);
            TypeSize = (_anonymous_namespace_ *)re::mtl::getTypeSize(v40);
            v42 = (int)TypeSize;
            v43 = (int)TypeSize;
            memset(v111, 0, 24);
            if (*(_QWORD *)&v111[8] < (unint64_t)v42)
            {
              re::internal::assertLog((re::internal *)4, v44, "assertion failure: '%s' (%s:line %i) Too much data to copy.", "requiredSize <= m_size", "copy", 363);
              _os_crash();
              __break(1u);
LABEL_143:
              v110 = 0;
              v115 = 0u;
              memset(buf, 0, sizeof(buf));
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v111 = 136315906;
              *(_QWORD *)&v111[4] = "operator[]";
              *(_WORD *)&v111[12] = 1024;
              *(_DWORD *)&v111[14] = 468;
              *(_WORD *)&v111[18] = 2048;
              *(_QWORD *)&v111[20] = 0;
              v112 = 2048;
              v113 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            if ((_DWORD)v43)
              memmove(*(void **)&v111[16], (const void *)(v38 + v39), v43);
            v45 = (_anonymous_namespace_ *)objc_msgSend(*v22, sel_index);
            v46 = (__int16)v45;
            v47 = *v20;
            *(_WORD *)&buf[32] = v40;
            *(_WORD *)&buf[34] = v46;
            *(_OWORD *)&buf[40] = *(_OWORD *)v111;
            v49 = *(_QWORD *)&v111[16];
            memset(v111, 0, 24);
            *(_QWORD *)&buf[56] = v49;
            v50 = *v20;
            v51 = re::Hash<re::DynamicString>::operator()((uint64_t)&v110, (uint64_t)__str);
            v52 = v51;
            if ((_QWORD)v106)
            {
              v53 = v51 % DWORD2(v107);
              v54 = *(unsigned int *)(*((_QWORD *)&v106 + 1) + 4 * v53);
              a8 = v88;
              a3 = v32;
              if ((_DWORD)v54 != 0x7FFFFFFF)
              {
                v55 = v107;
                a2 = v91;
                while (!re::DynamicString::operator==(v55 + 112 * v54 + 16, (uint64_t)__str))
                {
                  v54 = *(_DWORD *)(v55 + 112 * v54 + 8) & 0x7FFFFFFF;
                  if (v54 == 0x7FFFFFFF)
                    goto LABEL_89;
                }
LABEL_90:
                if (*(_QWORD *)__str && (__str[8] & 1) != 0)
                  (*(void (**)(void))(**(_QWORD **)__str + 40))();
                LODWORD(v13) = v95;
                if (*(_QWORD *)&buf[40])
                {
                  if (*(_QWORD *)&buf[48])
                  {
                    (*(void (**)(void))(**(_QWORD **)&buf[40] + 40))();
                    *(_OWORD *)&buf[48] = 0uLL;
                  }
                  *(_QWORD *)&buf[40] = 0;
                }
                if (*(_QWORD *)buf && (buf[8] & 1) != 0)
                  (*(void (**)(void))(**(_QWORD **)buf + 40))();
                v73 = *(_QWORD *)v111;
                if (!*(_QWORD *)v111 || !*(_QWORD *)&v111[8])
                  goto LABEL_27;
                v74 = *(_QWORD *)&v111[16];
                goto LABEL_128;
              }
            }
            else
            {
              LODWORD(v53) = 0;
              a8 = v88;
              a3 = v32;
            }
            a2 = v91;
LABEL_89:
            re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove((uint64_t)&v106, v53, v52, (re::DynamicString *)__str, (uint64_t)buf);
            ++HIDWORD(v109);
            goto LABEL_90;
          }
        }
      }
      if (a6 && (v56 = *(_QWORD *)(a6 + 8)) != 0)
      {
        v57 = *v20;
        v58 = (v56 << 6) - 64;
        v59 = (const char **)(*(_QWORD *)(a6 + 16) + 16);
        do
        {
          if (((unint64_t)*(v59 - 1) & 1) != 0)
            v60 = *v59;
          else
            v60 = (char *)v59 - 7;
          v61 = strcmp(v60, v57);
          v62 = v61 == 0;
          if (v61)
            v63 = v58 == 0;
          else
            v63 = 1;
          v58 -= 64;
          v59 += 8;
        }
        while (!v63);
        a8 = v88;
        a3 = v32;
        LODWORD(v13) = v95;
      }
      else
      {
        v62 = 0;
        a3 = v32;
      }
      a2 = v91;
      if ((a8 & 1) != 0)
        goto LABEL_27;
      v64 = (re *)objc_msgSend(*v22, sel_required);
      if (((v62 | v64 ^ 1) & 1) != 0)
        goto LABEL_27;
      if (a7)
      {
        if ((v103 & 1) != 0)
          v65 = v103 >> 1;
        else
          v65 = v103 >> 1;
        if (!v65)
          re::DynamicString::append((re::DynamicString *)&v102, "Missing required function constants: ", 0x25uLL);
        if ((v86 & 1) != 0)
          re::DynamicString::append((re::DynamicString *)&v102, ", ", 2uLL);
        re::DynamicString::appendf((re::DynamicString *)&v102, "%s", *v20);
        v86 = 1;
        goto LABEL_27;
      }
      v66 = *re::pipelineLogObjects(v64);
      v67 = os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT);
      if (v67)
      {
        v68 = *v20;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v68;
        _os_log_impl(&dword_224FE9000, v66, OS_LOG_TYPE_DEFAULT, "Material requires function constant %s but it was not provided by the material. Providing 0s as a fallback.", buf, 0xCu);
      }
      memset(__str, 0, sizeof(__str));
      re::DynamicString::setCapacity(__str, 0);
      v99 = 0;
      v100 = 0;
      __dst = 0;
      v69 = strlen(*v20);
      *(_QWORD *)buf = *v20;
      *(_QWORD *)&buf[8] = v69;
      re::DynamicString::operator=((re::DynamicString *)__str, (uint64_t)buf);
      v70 = (unsigned __int16)objc_msgSend(*v22, sel_type);
      v71 = (unsigned __int16)objc_msgSend(*v22, sel_index);
      v97 = v70;
      v98 = v71;
      if (objc_msgSend(*v22, sel_type) == (id)53)
      {
        if (!v100)
          goto LABEL_143;
        *(_BYTE *)__dst = 0;
LABEL_86:
        a8 = v88;
LABEL_118:
        v77 = *v20;
        re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::TechniqueFunctionConstant&>((uint64_t)&v106, (re::DynamicString *)buf, (uint64_t)__str);
        if (*(_QWORD *)buf && (buf[8] & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)buf + 40))();
        if (v99)
        {
          if (v100)
          {
            (*(void (**)(void))(*(_QWORD *)v99 + 40))();
            v100 = 0;
            __dst = 0;
          }
          v99 = 0;
        }
        v73 = *(_QWORD *)__str;
        if (!*(_QWORD *)__str || (__str[8] & 1) == 0)
          goto LABEL_27;
        v74 = *(_QWORD *)&__str[16];
LABEL_128:
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v73 + 40))(v73, v74);
        goto LABEL_27;
      }
      if (objc_msgSend(*v22, sel_type) != (id)3
        && objc_msgSend(*v22, sel_type) != (id)4
        && objc_msgSend(*v22, sel_type) != (id)5
        && objc_msgSend(*v22, sel_type) != (id)6)
      {
        v78 = (re *)objc_msgSend(*v22, sel_type);
        if (v78 != (re *)29)
        {
          v78 = (re *)objc_msgSend(*v22, sel_type);
          if (v78 != (re *)33)
          {
            v79 = *re::pipelineLogObjects(v78);
            v72 = (_anonymous_namespace_ *)os_log_type_enabled(v79, OS_LOG_TYPE_ERROR);
            a8 = v88;
            if ((_DWORD)v72)
            {
              v80 = *v20;
              v81 = objc_msgSend(*v22, sel_type);
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = v80;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v81;
              _os_log_error_impl(&dword_224FE9000, v79, OS_LOG_TYPE_ERROR, "Required function constant %s is required but not provided and of an unsupported type %i.", buf, 0x12u);
            }
            goto LABEL_118;
          }
        }
        *(_DWORD *)__dst = 0;
        goto LABEL_86;
      }
      *(_QWORD *)&buf[32] = 0;
      memset(buf, 0, 28);
      if (objc_msgSend(*v22, sel_type) != (id)3)
      {
        if (objc_msgSend(*v22, sel_type) != (id)4)
        {
          if (objc_msgSend(*v22, sel_type) != (id)5)
          {
            v75 = (_anonymous_namespace_ *)objc_msgSend(*v22, sel_type);
            if (v75 != (_anonymous_namespace_ *)6)
            {
LABEL_115:
              v76 = 4 * *(_QWORD *)&buf[16];
              memcpy(__dst, *(const void **)&buf[32], 4 * *(_QWORD *)&buf[16]);
              v72 = *(_anonymous_namespace_ **)buf;
              a8 = v88;
              if (*(_QWORD *)buf && *(_QWORD *)&buf[32])
                v72 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)buf + 40))();
              goto LABEL_118;
            }
            *(_DWORD *)v111 = 0;
            re::DynamicArray<float>::add((_anonymous_namespace_ *)buf, (float *)v111);
          }
          *(_DWORD *)v111 = 0;
          re::DynamicArray<float>::add((_anonymous_namespace_ *)buf, (float *)v111);
        }
        *(_DWORD *)v111 = 0;
        re::DynamicArray<float>::add((_anonymous_namespace_ *)buf, (float *)v111);
      }
      *(_DWORD *)v111 = 0;
      re::DynamicArray<float>::add((_anonymous_namespace_ *)buf, (float *)v111);
      goto LABEL_115;
    }
    v28 = (_anonymous_namespace_ *)re::parseConstant((_anonymous_namespace_ *)buf, (uint64_t)a1, *v20, (unsigned __int16)objc_msgSend(*v22, v26[229]), (__int16)objc_msgSend(*v22, sel_index), v24);
    if (!buf[0])
    {
      re::DynamicString::DynamicString((re::DynamicString *)__str, (const re::DynamicString *)&buf[8]);
      *(_BYTE *)v85 = 0;
      *(_QWORD *)(v85 + 8) = *(_QWORD *)__str;
      *(_QWORD *)(v85 + 32) = *(_QWORD *)&__str[24];
      *(_OWORD *)(v85 + 16) = *(_OWORD *)&__str[8];
      re::Result<re::TechniqueFunctionConstant,re::DynamicString>::~Result((uint64_t)buf);
      goto LABEL_138;
    }
    v29 = *v20;
    re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::TechniqueFunctionConstant&>((uint64_t)&v106, (re::DynamicString *)__str, (uint64_t)&buf[8]);
    if (*(_QWORD *)__str && (__str[8] & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)__str + 40))();
    re::Result<re::TechniqueFunctionConstant,re::DynamicString>::~Result((uint64_t)buf);
    LODWORD(v13) = v95;
LABEL_27:
    v18 = *(_QWORD *)(a2 + 16);
    if (*(_DWORD *)(a2 + 32) <= (v14 + 1))
      v30 = v14 + 1;
    else
      v30 = *(_DWORD *)(a2 + 32);
    while (1)
    {
      v17 = (v14 + 1);
      if (v30 - 1 == (_DWORD)v14)
        break;
      LODWORD(v14) = v14 + 1;
      v31 = v17;
      if ((*(_DWORD *)(v18 + 32 * v17 + 8) & 0x80000000) != 0)
        goto LABEL_34;
    }
    v31 = v30;
LABEL_34:
    LODWORD(v14) = v31;
  }
  while ((_DWORD)v13 != v31);
  a9 = v85;
  if ((v86 & 1) == 0)
    goto LABEL_136;
  re::DynamicString::DynamicString((re::DynamicString *)buf, (const re::DynamicString *)&v102);
  *(_BYTE *)v85 = 0;
  v82 = *(_QWORD *)&buf[24];
  *(_QWORD *)(v85 + 8) = *(_QWORD *)buf;
  *(_QWORD *)(v85 + 32) = v82;
  *(_OWORD *)(v85 + 16) = *(_OWORD *)&buf[8];
LABEL_138:
  if (v102 && (v103 & 1) != 0)
    (*(void (**)(void))(*v102 + 40))();
  return re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v106);
}

uint64_t re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::TechniqueFunctionConstant&>(uint64_t a1, re::DynamicString *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v14;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<re::TechniqueFunctionConstant&>(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 112 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 112 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 112 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v10 + 112 * v9;
  return v12 + 48;
}

BOOL re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v9, a2);
  v5 = 0x7FFFFFFFLL;
  if (*(_QWORD *)a1)
  {
    v6 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
    if ((_DWORD)v6 != 0x7FFFFFFF)
    {
      v7 = *(_QWORD *)(a1 + 16);
      v5 = 0x7FFFFFFFLL;
      while (!re::DynamicString::operator==(v7 + 112 * v6 + 16, a2))
      {
        v6 = *(_DWORD *)(v7 + 112 * v6 + 8) & 0x7FFFFFFF;
        if (v6 == 0x7FFFFFFF)
          return v5 != 0x7FFFFFFF;
      }
      v5 = v6;
    }
  }
  return v5 != 0x7FFFFFFF;
}

double re::parseVariationTable@<D0>(uint64_t a1@<X0>, id *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v6;
  id v7;
  id v8;
  id v9;
  unsigned int v10;
  uint64_t v11;
  int *v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id *v20;
  void *v21;
  id v22;
  _anonymous_namespace_ *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _anonymous_namespace_ *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  const re::DynamicString *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  __int128 v37;
  __int128 v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t As64Bits;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  id v51[2];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  unsigned int v57;
  uint64_t v58;

  v6 = objc_msgSend(*a2, sel_functionConstantsDictionary);
  v55 = 0u;
  v56 = 0u;
  v57 = 0;
  v58 = 0x7FFFFFFFLL;
  v7 = objc_msgSend(v6, sel_keyEnumerator);
  v8 = objc_msgSend(v7, sel_nextObject);
  if (v8)
  {
    v9 = v8;
    do
    {
      *(_QWORD *)&v45 = objc_msgSend(v9, sel_UTF8String);
      v51[0] = objc_msgSend(v6, sel_objectForKey_, v9);
      re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::add((uint64_t)&v55, (char **)&v45, v51);
      if (v51[0])

      v9 = objc_msgSend(v7, sel_nextObject);
    }
    while (v9);
    v10 = v57;
    v53 = 0u;
    v54 = 0u;
    *(_OWORD *)v51 = 0u;
    v52 = 0u;
    v11 = 0;
    if (v57)
    {
      v12 = (int *)(v56 + 8);
      while (1)
      {
        v13 = *v12;
        v12 += 8;
        if (v13 < 0)
          break;
        if (v57 == ++v11)
        {
          LODWORD(v11) = v57;
          break;
        }
      }
    }
  }
  else
  {
    v10 = 0;
    LODWORD(v11) = 0;
    v53 = 0u;
    v54 = 0u;
    *(_OWORD *)v51 = 0u;
    v52 = 0u;
  }
  if (v10 == (_DWORD)v11)
  {
LABEL_13:
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::HashBrown((uint64_t)&v45, (uint64_t *)v51);
    *(_BYTE *)a4 = 1;
    v14 = v46;
    *(_OWORD *)(a4 + 8) = v45;
    v15 = *((_QWORD *)&v48 + 1);
    *(_QWORD *)(a4 + 56) = v48;
    *(_QWORD *)(a4 + 64) = v15;
    *(_OWORD *)(a4 + 24) = v14;
    v45 = 0u;
    v46 = 0u;
    *(_OWORD *)(a4 + 40) = v47;
    v47 = 0u;
    v48 = 0u;
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)&v45);
  }
  else
  {
    v17 = v11;
    v39 = v10;
    v18 = v56;
    v40 = a3;
    while (1)
    {
      v19 = v18 + 32 * v17;
      v21 = *(void **)(v19 + 24);
      v20 = (id *)(v19 + 24);
      v22 = objc_msgSend(v21, sel_name);
      v23 = (_anonymous_namespace_ *)objc_msgSend(v22, sel_UTF8String);
      v24 = re::Hash<re::DynamicString>::operator()((uint64_t)&v49, (uint64_t)&v45);
      if (!*(_QWORD *)a3
        || (v25 = *(unsigned int *)(*(_QWORD *)(a3 + 8) + 4 * (v24 % *(unsigned int *)(a3 + 24))),
            (_DWORD)v25 == 0x7FFFFFFF))
      {
LABEL_21:
        v27 = 0;
      }
      else
      {
        v26 = *(_QWORD *)(a3 + 16);
        while (!re::DynamicString::operator==(v26 + 88 * v25 + 16, (uint64_t)&v45))
        {
          v25 = *(_DWORD *)(v26 + 88 * v25 + 8) & 0x7FFFFFFF;
          if (v25 == 0x7FFFFFFF)
            goto LABEL_21;
        }
        v27 = v26 + 88 * v25 + 48;
      }
      if ((_QWORD)v45 && (BYTE8(v45) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v45 + 40))();
      if (v27)
      {
        if (re::mtl::getTypeSize((unsigned __int16)objc_msgSend(*v20, sel_type)) > 8)
        {
          re::DynamicString::format((re::DynamicString *)"Function constant variation %s has underlying type larger than 64 bits, which is not supported.", (re::DynamicString *)&v45, objc_msgSend(objc_msgSend(*v20, sel_name), sel_UTF8String));
          v37 = v45;
          v38 = v46;
          *(_BYTE *)a4 = 0;
          *(_OWORD *)(a4 + 8) = v37;
          *(_OWORD *)(a4 + 24) = v38;
          goto LABEL_14;
        }
        v28 = (_anonymous_namespace_ *)objc_msgSend(v22, sel_UTF8String);
        LOWORD(v45) = (unsigned __int16)objc_msgSend(*v20, sel_type);
        WORD1(v45) = (unsigned __int16)objc_msgSend(*v20, sel_index);
        v46 = 0uLL;
        *((_QWORD *)&v45 + 1) = 0;
        LODWORD(v47) = 0;
        *((_QWORD *)&v47 + 1) = 0;
        *(_QWORD *)&v48 = 0;
        WORD4(v48) = 0;
        v29 = re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)v51, (const re::DynamicString *)&v49, (uint64_t)&v45);
        if (*((_QWORD *)&v45 + 1) && *((_QWORD *)&v47 + 1))
          (*(void (**)(void))(**((_QWORD **)&v45 + 1) + 40))();
        if (v49 && (v50 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v49 + 40))();
        v30 = *(_QWORD *)(v27 + 16);
        if (v30)
          break;
      }
LABEL_43:
      v18 = v56;
      if (v57 <= (int)v11 + 1)
        v35 = v11 + 1;
      else
        v35 = v57;
      a3 = v40;
      while (1)
      {
        v17 = (v11 + 1);
        if (v35 - 1 == (_DWORD)v11)
          break;
        LODWORD(v11) = v11 + 1;
        v36 = v17;
        if ((*(_DWORD *)(v56 + 32 * v17 + 8) & 0x80000000) != 0)
          goto LABEL_51;
      }
      v36 = v35;
LABEL_51:
      LODWORD(v11) = v36;
      if (v39 == v36)
        goto LABEL_13;
    }
    v31 = (_QWORD *)(v29 + 8);
    v32 = *(const re::DynamicString **)(v27 + 32);
    v33 = 32 * v30;
    while (1)
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v49, v32);
      re::parseConstant((_anonymous_namespace_ *)&v45, a1, (const char *)objc_msgSend(objc_msgSend(*v20, sel_name), sel_UTF8String), (unsigned __int16)objc_msgSend(*v20, sel_type), (__int16)objc_msgSend(*v20, sel_index), (uint64_t)&v49);
      v34 = v45;
      if ((_BYTE)v45)
      {
        As64Bits = re::TechniqueFunctionConstant::getAs64Bits((re::TechniqueFunctionConstant *)((char *)&v45 + 8));
        re::DynamicArray<re::TransitionCondition *>::add(v31, &As64Bits);
      }
      else
      {
        re::DynamicString::DynamicString((re::DynamicString *)&As64Bits, (const re::DynamicString *)((char *)&v45 + 8));
        *(_BYTE *)a4 = 0;
        *(_QWORD *)(a4 + 8) = As64Bits;
        *(_QWORD *)(a4 + 32) = v44;
        *(_OWORD *)(a4 + 16) = v43;
      }
      re::Result<re::TechniqueFunctionConstant,re::DynamicString>::~Result((uint64_t)&v45);
      if (v49 && (v50 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v49 + 40))();
      if (!v34)
        break;
      v32 = (const re::DynamicString *)((char *)v32 + 32);
      v33 -= 32;
      if (!v33)
        goto LABEL_43;
    }
  }
LABEL_14:
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)v51);
  return re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v55);
}

uint64_t re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew(uint64_t *a1, const re::DynamicString *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::find(a1, (uint64_t)a2);
  if (v6 == -1)
    return re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::internalAdd((_anonymous_namespace_ *)a1, a2, a3);
  else
    return a1[1] + 96 * v6 + 32;
}

uint64_t re::parseUsedConstantsMask(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  __int16 v19;

  v3 = result;
  *(_DWORD *)(result + 48) = 0;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)result = 0u;
  *(_QWORD *)(result + 52) = 0x7FFFFFFFLL;
  v4 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 8;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v8 = v5;
    v9 = *(_QWORD *)(a2 + 16);
    do
    {
      result = (uint64_t)objc_msgSend(*(id *)(v9 + 32 * v8 + 24), sel_index);
      v19 = result;
      if ((unsigned __int16)result > 0x7Fu)
      {
        v11 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (unsigned __int16)result) ^ ((0xBF58476D1CE4E5B9 * (unsigned __int16)result) >> 27));
        v12 = v11 ^ (v11 >> 31);
        v13 = *(unsigned int *)(v3 + 40);
        if ((_DWORD)v13)
        {
          v14 = v12 % v13;
          v15 = *(unsigned int *)(*(_QWORD *)(v3 + 24) + 4 * (v12 % v13));
          if ((_DWORD)v15 != 0x7FFFFFFF)
          {
            v16 = *(_QWORD *)(v3 + 32);
            while (*(unsigned __int16 *)(v16 + 16 * v15 + 12) != (unsigned __int16)result)
            {
              v15 = *(_DWORD *)(v16 + 16 * v15 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v15 == 0x7FFFFFFF)
                goto LABEL_18;
            }
            goto LABEL_19;
          }
        }
        else
        {
          LODWORD(v14) = 0;
        }
LABEL_18:
        result = re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addAsCopy(v3 + 16, v14, v12, (uint64_t)&v19, &v19);
        ++*(_DWORD *)(v3 + 56);
      }
      else
      {
        v10 = 1 << result;
        result = re::Bitset<128>::toWordIndex(v3, (unsigned __int16)result);
        *(_QWORD *)(v3 + 8 * result) |= v10;
      }
LABEL_19:
      v9 = *(_QWORD *)(a2 + 16);
      if (*(_DWORD *)(a2 + 32) <= (v5 + 1))
        v17 = v5 + 1;
      else
        v17 = *(_DWORD *)(a2 + 32);
      while (1)
      {
        v8 = (v5 + 1);
        if (v17 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v18 = v8;
        if ((*(_DWORD *)(v9 + 32 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_26;
      }
      v18 = v17;
LABEL_26:
      LODWORD(v5) = v18;
    }
    while ((_DWORD)v4 != v18);
  }
  return result;
}

void re::makeMaterialDefinitionBuilder(uint64_t a1)
{
  _anonymous_namespace_ *v1;
  _QWORD *v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _anonymous_namespace_ *v26;
  _BOOL8 v27;
  _anonymous_namespace_ *v28;
  _BOOL8 v29;
  uint64_t v30;
  _anonymous_namespace_ *v31;
  _BOOL8 v32;
  _anonymous_namespace_ *v33;
  _BOOL8 v34;
  uint64_t v35;
  char v36;
  int v37;
  const char **v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  const re::MaterialTechniqueQualityLevelSetData *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  signed int v52;
  _anonymous_namespace_ *v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  re::ns *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _anonymous_namespace_ *v77;
  uint64_t v78;
  id v79;
  id v80;
  id v81;
  id v82;
  _anonymous_namespace_ *v83;
  int v84;
  int v85;
  _BOOL4 v86;
  _BOOL4 v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 *v90;
  int v91;
  BOOL v92;
  _anonymous_namespace_ *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  _anonymous_namespace_ *v105;
  double v106;
  unsigned int v107;
  uint64_t v108;
  int *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _anonymous_namespace_ *v123;
  uint64_t v124;
  _anonymous_namespace_ *v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  _anonymous_namespace_ *v129;
  double v130;
  int v131;
  int v132;
  uint64_t v133;
  int *v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  int v140;
  int v141;
  id v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  re::ns *v148;
  _anonymous_namespace_ *v149;
  _BYTE *v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _anonymous_namespace_ *v156;
  char *v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  id v161;
  id v162;
  id v163;
  id v164;
  _anonymous_namespace_ *v165;
  double v166;
  unsigned int v167;
  uint64_t v168;
  int *v169;
  int v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  _anonymous_namespace_ *v174;
  uint64_t v175;
  uint64_t v176;
  _BOOL4 v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  unsigned int v184;
  _anonymous_namespace_ *v185;
  _anonymous_namespace_ *v186;
  double v187;
  int v188;
  int v189;
  uint64_t v190;
  int *v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  int v196;
  id v197;
  uint64_t i;
  uint64_t v199;
  _anonymous_namespace_ *v200;
  _BYTE *v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  _BYTE *v208;
  char v209;
  unsigned __int8 *v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int *v215;
  int v216;
  uint64_t v217;
  unint64_t *v218;
  unsigned int v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  _BYTE *v224;
  char v225;
  unsigned __int8 *v226;
  int v227;
  unint64_t v228;
  unint64_t v229;
  _BYTE *v230;
  uint64_t v231;
  char v232;
  unsigned __int8 *v233;
  int v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  uint64_t v247;
  unsigned int v248;
  unsigned int v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  _BYTE *v255;
  char v256;
  unsigned __int8 *v257;
  int v258;
  uint64_t v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  _BOOL4 v263;
  int v264;
  char v265;
  _BOOL4 v266;
  const char *v267;
  double v268;
  uint64_t v269;
  unsigned int v270;
  uint64_t v271;
  _BYTE *v272;
  uint64_t v273;
  const re::DynamicString *v274;
  unint64_t v275;
  uint64_t v276;
  _BYTE *v277;
  char v278;
  unsigned __int8 *v279;
  int v280;
  unint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t *v284;
  unint64_t v285;
  size_t v286;
  size_t v287;
  size_t v288;
  char *v289;
  unint64_t v290;
  unint64_t v291;
  unsigned int v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t v297;
  unsigned int v298;
  unsigned int v299;
  uint64_t v300;
  int v301;
  BOOL v302;
  _BOOL4 v303;
  BOOL v304;
  _BOOL4 v305;
  char v306;
  uint64_t v307;
  uint64_t v308;
  int v309;
  char v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t *v315;
  char v316;
  int v317;
  int v318;
  uint64_t v319;
  const re::MaterialTechniqueQualityLevelSetData *v320;
  _anonymous_namespace_ *v321;
  id v322;
  uint64_t v323;
  __int128 v324;
  uint64_t v325;
  char v326[48];
  char v327[8];
  uint64_t v328[6];
  __int128 v329;
  uint64_t v330;
  uint64_t v331;
  char v332[48];
  char v333[8];
  uint64_t v334[6];
  uint64_t v335[4];
  int v336;
  uint64_t v337;
  id v338;
  char v339[8];
  uint64_t v340;
  id v341;
  char v342[48];
  char v343[8];
  uint64_t v344[6];
  _QWORD v345[2];
  __int128 v346;
  uint64_t v347;
  __int128 v348;
  __int128 v349;
  char v350[48];
  char v351[8];
  uint64_t v352[6];
  uint64_t v353[6];
  uint64_t v354[4];
  int v355;
  uint64_t v356;
  id v357;
  char v358[8];
  uint64_t v359;
  _QWORD v360[5];
  char v361[8];
  uint64_t v362;
  char v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  uint64_t v368[172];
  __int128 v369;
  __int128 v370;
  int v371;
  uint64_t v372;
  __int128 v373;
  __int128 v374;
  int v375;
  uint64_t v376;
  uint64_t v377[4];
  int v378;
  uint64_t v379;
  uint64_t v380[8];
  _BYTE __src[24];
  uint64_t v382;
  _QWORD v383[176];
  __int128 v384;
  uint64_t v385;
  uint64_t v386;
  unsigned int v387;
  id v388;
  _BYTE v389[16];
  uint64_t v390;
  unsigned int v391;
  uint64_t v392;

  v1 = (_anonymous_namespace_ *)MEMORY[0x24BDAC7A8](a1);
  v314 = (uint64_t)v1;
  v315 = v3;
  v4 = v2;
  v313 = v5;
  v392 = *MEMORY[0x24BDAC8D0];
  memset(v380, 0, sizeof(v380));
  v6 = v2[72];
  if (v6)
  {
    v7 = v2[74];
    v8 = v7 + 80 * v6;
    while (1)
    {
      v366 = 0u;
      v367 = 0u;
      v364 = 0u;
      v365 = 0u;
      v9 = *(unsigned int *)(v7 + 64);
      if ((_DWORD)v9)
      {
        v10 = 0;
        v11 = (int *)(*(_QWORD *)(v7 + 48) + 8);
        while (1)
        {
          v12 = *v11;
          v11 += 14;
          if (v12 < 0)
            break;
          if (v9 == ++v10)
          {
            LODWORD(v10) = *(_DWORD *)(v7 + 64);
            break;
          }
        }
      }
      else
      {
        LODWORD(v10) = 0;
      }
      if ((_DWORD)v9 != (_DWORD)v10)
      {
        v13 = v10;
        do
        {
          v14 = *(_QWORD *)(v7 + 48) + 56 * v13;
          *(_QWORD *)__src = re::Hash<re::DynamicString>::operator()((uint64_t)__src, v14 + 16);
          LOWORD(v388) = *(_DWORD *)(v14 + 48);
          v15 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(&v364, __src);
          if (v15 == -1)
            re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd((_anonymous_namespace_ *)&v364, __src, &v388);
          else
            *(_WORD *)(*((_QWORD *)&v364 + 1) + 16 * v15 + 8) = (_WORD)v388;
          if (*(_DWORD *)(v7 + 64) <= (v10 + 1))
            v16 = v10 + 1;
          else
            v16 = *(_DWORD *)(v7 + 64);
          while (1)
          {
            v13 = (v10 + 1);
            if (v16 - 1 == (_DWORD)v10)
              break;
            LODWORD(v10) = v10 + 1;
            v17 = v13;
            if ((*(_DWORD *)(*(_QWORD *)(v7 + 48) + 56 * v13 + 8) & 0x80000000) != 0)
              goto LABEL_21;
          }
          v17 = v16;
LABEL_21:
          LODWORD(v10) = v17;
        }
        while ((_DWORD)v9 != v17);
      }
      v18 = *(_QWORD *)(v7 + 8);
      if ((v18 & 1) == 0)
        break;
      v20 = *(_BYTE **)(v7 + 16);
      if (v20)
      {
        LOBYTE(v19) = *v20;
LABEL_26:
        if ((_BYTE)v19)
        {
          v19 = (char)v19;
          v21 = v20[1];
          if (v21)
          {
            v22 = v20 + 2;
            do
            {
              v19 = 31 * v19 + v21;
              v23 = *v22++;
              v21 = v23;
            }
            while (v23);
          }
          v24 = v19 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v24 = 0;
        }
        goto LABEL_33;
      }
      v24 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_33:
      *(_QWORD *)__src = v24;
      if (re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::find(v380, (uint64_t *)__src) == -1)re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd((_anonymous_namespace_ *)v380, (uint64_t *)__src, (uint64_t *)&v364);
      v1 = (_anonymous_namespace_ *)*((_QWORD *)&v367 + 1);
      if (*((_QWORD *)&v367 + 1))
      {
        if (*((_QWORD *)&v364 + 1))
          *((_QWORD *)&v364 + 1) = 0;
        if ((_QWORD)v364)
          v1 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**((_QWORD **)&v367 + 1) + 40))();
      }
      v7 += 80;
      if (v7 == v8)
        goto LABEL_41;
    }
    v19 = v18 >> 8;
    v20 = (_BYTE *)(v7 + 9);
    goto LABEL_26;
  }
LABEL_41:
  v25 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)(v4 + 58), (uint64_t)&v364);
  v26 = (_anonymous_namespace_ *)v364;
  if ((_QWORD)v364 && (BYTE8(v364) & 1) != 0)
    v26 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v364 + 40))();
  if (v25)
  {
    v27 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)(v4 + 58), (uint64_t)&v364);
    if (v27)
    {
      v305 = 1;
    }
    else
    {
      v305 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)(v4 + 58), (uint64_t)__src);
      if (*(_QWORD *)__src && (__src[8] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)__src + 40))();
    }
    v28 = (_anonymous_namespace_ *)v364;
    if ((_QWORD)v364 && (BYTE8(v364) & 1) != 0)
      v28 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v364 + 40))();
    v29 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)(v4 + 58), (uint64_t)&v364);
    if (v29)
    {
      v304 = 1;
    }
    else
    {
      v304 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)(v4 + 58), (uint64_t)__src);
      if (*(_QWORD *)__src && (__src[8] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)__src + 40))();
    }
    v26 = (_anonymous_namespace_ *)v364;
    if ((_QWORD)v364 && (BYTE8(v364) & 1) != 0)
      v26 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v364 + 40))();
  }
  else
  {
    v304 = 0;
    v305 = 0;
  }
  v30 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet((uint64_t)(v4 + 58), (uint64_t)&v364);
  v31 = (_anonymous_namespace_ *)v364;
  if ((_QWORD)v364 && (BYTE8(v364) & 1) != 0)
    v31 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v364 + 40))();
  if (v30)
  {
    v32 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)(v4 + 58), (uint64_t)&v364);
    if (v32)
    {
      v303 = 1;
    }
    else
    {
      v303 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)(v4 + 58), (uint64_t)__src);
      if (*(_QWORD *)__src && (__src[8] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)__src + 40))();
    }
    v33 = (_anonymous_namespace_ *)v364;
    if ((_QWORD)v364 && (BYTE8(v364) & 1) != 0)
      v33 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v364 + 40))();
    v34 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)(v4 + 58), (uint64_t)&v364);
    if (v34)
    {
      v302 = 1;
    }
    else
    {
      v302 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)(v4 + 58), (uint64_t)__src);
      if (*(_QWORD *)__src && (__src[8] & 1) != 0)
        (*(void (**)(void))(**(_QWORD **)__src + 40))();
    }
    v31 = (_anonymous_namespace_ *)v364;
    if ((_QWORD)v364 && (BYTE8(v364) & 1) != 0)
      v31 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v364 + 40))();
  }
  else
  {
    v302 = 0;
    v303 = 0;
  }
  v311 = (uint64_t)(v4 + 58);
  v307 = v30;
  v308 = v25;
  v35 = v4[50];
  v319 = (uint64_t)v4;
  if (v35)
  {
    v36 = 0;
    v316 = 0;
    v318 = 0;
    v37 = 0;
    v38 = (const char **)(v4[52] + 16);
    v39 = 664 * v35;
    do
    {
      if (((unint64_t)*(v38 - 1) & 1) != 0)
        v40 = *v38;
      else
        v40 = (char *)v38 - 7;
      v31 = (_anonymous_namespace_ *)strcmp(v40, "Transparent");
      if ((_DWORD)v31)
      {
        v31 = (_anonymous_namespace_ *)strcmp(v40, "TransparentAR");
        if ((_DWORD)v31)
        {
          v31 = (_anonymous_namespace_ *)strcmp(v40, "TransparentDynamicLighting");
          if ((_DWORD)v31)
          {
            v31 = (_anonymous_namespace_ *)strcmp(v40, "TransparentARDynamicLighting");
            v37 |= (_DWORD)v31 == 0;
          }
          else
          {
            v316 = 1;
          }
        }
        else
        {
          v318 = 1;
        }
      }
      else
      {
        v36 = 1;
      }
      v38 += 83;
      v39 -= 664;
    }
    while (v39);
  }
  else
  {
    v37 = 0;
    v316 = 0;
    v318 = 0;
    v36 = 0;
  }
  v309 = v37;
  v378 = 0;
  memset(v377, 0, sizeof(v377));
  v379 = 0x7FFFFFFFLL;
  v41 = v4[55];
  if (v41)
  {
    v42 = (uint64_t *)v4[57];
    v43 = 72 * v41;
    do
    {
      re::DynamicString::DynamicString((re::DynamicString *)&v364, (const re::DynamicString *)v42);
      re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)&v366, v42 + 4);
      re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicArray<re::DynamicString>&>((uint64_t)v377, (re::DynamicString *)&v364, (uint64_t *)&v366);
      re::MaterialTechniqueGroupData::deinit((re::MaterialTechniqueGroupData *)&v364);
      re::DynamicArray<re::DynamicString>::deinit((uint64_t)&v366);
      v31 = (_anonymous_namespace_ *)v364;
      if ((_QWORD)v364 && (BYTE8(v364) & 1) != 0)
        v31 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v364 + 40))();
      v42 += 9;
      v43 -= 72;
    }
    while (v43);
  }
  v306 = v36;
  v375 = 0;
  v373 = 0u;
  v374 = 0u;
  v376 = 0x7FFFFFFFLL;
  v44 = v4[83];
  if (v44)
  {
    v45 = (const re::MaterialTechniqueQualityLevelSetData *)v4[85];
    v320 = (const re::MaterialTechniqueQualityLevelSetData *)((char *)v45 + 104 * v44);
    do
    {
      re::MaterialTechniqueQualityLevelSetData::MaterialTechniqueQualityLevelSetData((re::MaterialTechniqueQualityLevelSetData *)&v364, v45);
      re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)__src, v368);
      re::DynamicString::DynamicString((re::DynamicString *)v383, (const re::DynamicString *)&v366);
      v46 = re::Hash<re::DynamicString>::operator()((uint64_t)&v388, (uint64_t)&v364);
      v47 = v46;
      if ((_QWORD)v373)
      {
        v48 = v46 % DWORD2(v374);
        v49 = *(unsigned int *)(*((_QWORD *)&v373 + 1) + 4 * v48);
        if ((_DWORD)v49 != 0x7FFFFFFF)
        {
          v50 = v374;
          while (!re::DynamicString::operator==(v50 + 120 * v49 + 16, (uint64_t)&v364))
          {
            v49 = *(_DWORD *)(v50 + 120 * v49 + 8) & 0x7FFFFFFF;
            if (v49 == 0x7FFFFFFF)
              goto LABEL_113;
          }
          goto LABEL_114;
        }
      }
      else
      {
        LODWORD(v48) = 0;
      }
LABEL_113:
      re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove((uint64_t)&v373, v48, v47, (re::DynamicString *)&v364, (uint64_t)__src);
      ++HIDWORD(v376);
LABEL_114:
      if (v383[0])
      {
        if ((v383[1] & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v383[0] + 40))();
        memset(v383, 0, 32);
      }
      re::DynamicArray<re::DynamicString>::deinit((uint64_t)__src);
      re::MaterialTechniqueQualityLevelSetData::~MaterialTechniqueQualityLevelSetData((re::MaterialTechniqueQualityLevelSetData *)&v364);
      v45 = (const re::MaterialTechniqueQualityLevelSetData *)((char *)v45 + 104);
    }
    while (v45 != v320);
  }
  v371 = 0;
  v370 = 0u;
  v369 = 0u;
  v372 = 0x7FFFFFFFLL;
  v51 = v319;
  v52 = *(_DWORD *)(v319 + 628);
  if (v52)
  {
    v54 = *(unsigned int *)(v319 + 632);
    if ((_DWORD)v54)
    {
      v55 = 0;
      v56 = (int *)(*(_QWORD *)(v319 + 616) + 8);
      while (1)
      {
        v57 = *v56;
        v56 += 24;
        if (v57 < 0)
          break;
        if (v54 == ++v55)
        {
          LODWORD(v55) = *(_DWORD *)(v319 + 632);
          break;
        }
      }
    }
    else
    {
      LODWORD(v55) = 0;
    }
    if ((_DWORD)v54 != (_DWORD)v55)
    {
      v269 = v55;
      v270 = *(_DWORD *)(v319 + 632);
      while (1)
      {
        v271 = *(_QWORD *)(v51 + 616);
        v272 = (_BYTE *)(v271 + 96 * v269);
        if (v272[88] && *(_BYTE *)(v271 + 96 * v269 + 89))
          goto LABEL_570;
        v273 = (uint64_t)(v272 + 16);
        if (v272[48])
        {
          v274 = (const re::DynamicString *)(v272 + 56);
LABEL_530:
          re::DynamicString::DynamicString((re::DynamicString *)&v364, v274);
          v275 = *(_QWORD *)(v271 + 96 * v269 + 24);
          goto LABEL_531;
        }
        v282 = v54;
        v283 = v271 + 96 * v269;
        v285 = *(_QWORD *)(v283 + 24);
        v284 = (unint64_t *)(v283 + 24);
        v286 = v285 >> 1;
        v287 = v285 >> 1;
        if ((v285 & 1) != 0)
          v288 = v286;
        else
          v288 = v287;
        if (!v288)
        {
          v274 = (const re::DynamicString *)v273;
          v54 = v282;
          goto LABEL_530;
        }
        *((_QWORD *)&v364 + 1) = 0;
        v365 = 0uLL;
        re::DynamicString::setCapacity(&v364, v288);
        v289 = (char *)re::DynamicString::operator[](v273, 0);
        __src[0] = __toupper(*v289);
        re::DynamicString::append((re::DynamicString *)&v364, __src, 1uLL);
        v275 = *v284;
        v290 = *v284 >> 1;
        if ((*v284 & 1) == 0)
          v290 = (*v284 >> 1) & 0x7E;
        v54 = v282;
        if (v290 >= 2)
          break;
LABEL_531:
        if ((v275 & 1) != 0)
        {
          v277 = *(_BYTE **)(v271 + 96 * v269 + 32);
          if (!v277)
          {
            v281 = 0x7FFFFFFFFFFFFFFFLL;
            v51 = v319;
            goto LABEL_559;
          }
          LOBYTE(v276) = *v277;
        }
        else
        {
          v276 = v275 >> 8;
          v277 = (_BYTE *)(v273 + 9);
        }
        v51 = v319;
        if ((_BYTE)v276)
        {
          v276 = (char)v276;
          v278 = v277[1];
          if (v278)
          {
            v279 = v277 + 2;
            do
            {
              v276 = 31 * v276 + v278;
              v280 = *v279++;
              v278 = v280;
            }
            while (v280);
          }
          v281 = v276 & 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v281 = 0;
        }
LABEL_559:
        *(_QWORD *)__src = v281;
        v294 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (v281 ^ (v281 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v281 ^ (v281 >> 30))) >> 27));
        v295 = v294 ^ (v294 >> 31);
        if ((_QWORD)v369)
        {
          v296 = v295 % DWORD2(v370);
          v297 = *(unsigned int *)(*((_QWORD *)&v369 + 1) + 4 * v296);
          if ((_DWORD)v297 != 0x7FFFFFFF)
          {
            while (*(_QWORD *)(v370 + 48 * v297 + 8) != v281)
            {
              LODWORD(v297) = *(_DWORD *)(v370 + 48 * v297) & 0x7FFFFFFF;
              if ((_DWORD)v297 == 0x7FFFFFFF)
                goto LABEL_565;
            }
            goto LABEL_566;
          }
        }
        else
        {
          LODWORD(v296) = 0;
        }
LABEL_565:
        re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove((uint64_t)&v369, v296, v295, __src, &v364);
        ++HIDWORD(v372);
LABEL_566:
        v53 = (_anonymous_namespace_ *)v364;
        if ((_QWORD)v364 && (BYTE8(v364) & 1) != 0)
          v53 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v364 + 40))();
        v270 = *(_DWORD *)(v51 + 632);
LABEL_570:
        if (v270 <= (int)v55 + 1)
          v298 = v55 + 1;
        else
          v298 = v270;
        while (1)
        {
          v269 = (v55 + 1);
          if (v298 - 1 == (_DWORD)v55)
            break;
          LODWORD(v55) = v55 + 1;
          v299 = v269;
          if ((*(_DWORD *)(*(_QWORD *)(v51 + 616) + 96 * v269 + 8) & 0x80000000) != 0)
            goto LABEL_577;
        }
        v299 = v298;
LABEL_577:
        LODWORD(v55) = v299;
        if ((_DWORD)v54 == v299)
          goto LABEL_127;
      }
      v291 = 1;
      while (1)
      {
        v292 = *(char *)re::DynamicString::operator[](v273, v291);
        if ((v292 & 0x80000000) != 0)
          break;
        if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v292 + 60) & 0x8000) != 0)
          goto LABEL_550;
LABEL_551:
        __src[0] = *(_BYTE *)re::DynamicString::operator[](v273, v291);
        re::DynamicString::append((re::DynamicString *)&v364, __src, 1uLL);
        ++v291;
        v275 = *v284;
        v293 = *v284 >> 1;
        if ((*v284 & 1) == 0)
          v293 = *v284 >> 1;
        if (v293 <= v291)
          goto LABEL_531;
      }
      if (!__maskrune(v292, 0x8000uLL))
        goto LABEL_551;
LABEL_550:
      __src[0] = 32;
      re::DynamicString::append((re::DynamicString *)&v364, __src, 1uLL);
      goto LABEL_551;
    }
  }
LABEL_127:
  re::MaterialDefinitionBuilder::MaterialDefinitionBuilder((uint64_t)&v364, (const re::DynamicString *)v51, (const re::DynamicString *)(v51 + 32), v315, (uint64_t *)&v369, v311, v51 + 512, v377, v380, (uint64_t *)&v373);
  v58 = *(_QWORD *)(v51 + 400);
  v59 = v313;
  v60 = v314;
  if (v58)
  {
    v61 = *(_QWORD *)(v51 + 416);
    v62 = v61 + 664 * v58;
    v63 = v51 + 9;
    v301 = v318 | v309;
    v310 = v316 | v309;
    v312 = v62;
    v321 = (_anonymous_namespace_ *)(v51 + 9);
    while (1)
    {
      re::DynamicString::DynamicString((re::DynamicString *)v360, (const re::DynamicString *)v61);
      re::MaterialDefinitionBuilder::addTechnique((uint64_t)&v364, (uint64_t)v360, (uint64_t)v361);
      if (v360[0])
      {
        if ((v360[1] & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v360[0] + 40))();
        memset(v360, 0, 32);
      }
      if (!v361[0])
        break;
      v64 = *(_QWORD *)(v61 + 120);
      if ((v64 & 1) != 0)
        v65 = v64 >> 1;
      else
        v65 = v64 >> 1;
      if (!v65)
      {
        v73 = v63;
        if ((*(_BYTE *)(v51 + 8) & 1) != 0)
          v73 = *(_QWORD *)(v51 + 16);
        if ((*(_BYTE *)(v61 + 8) & 1) != 0)
          v74 = *(_QWORD *)(v61 + 16);
        else
          v74 = v61 + 9;
        re::DynamicString::format((re::DynamicString *)"[%s] - Failed to create builder because vertex shader for technique '%s' is empty.", (re::DynamicString *)__src, v73, v74, v300);
LABEL_185:
        v96 = *(_OWORD *)__src;
        v97 = *(_QWORD *)&__src[16];
        v98 = v382;
        *(_BYTE *)v59 = 0;
        *(_OWORD *)(v59 + 8) = v96;
        *(_QWORD *)(v59 + 24) = v97;
        *(_QWORD *)(v59 + 32) = v98;
LABEL_186:
        v99 = 1;
        goto LABEL_187;
      }
      v66 = v362;
      re::getLibraryHash((re *)v358, v60, v51, v61, (uint64_t *)(v61 + 88));
      if (!v358[0])
      {
        v75 = v63;
        if ((*(_BYTE *)(v51 + 8) & 1) != 0)
          v75 = *(_QWORD *)(v51 + 16);
        if ((*(_BYTE *)(v61 + 8) & 1) != 0)
          v76 = *(_QWORD *)(v61 + 16);
        else
          v76 = v61 + 9;
        re::DynamicString::format((re::DynamicString *)"[%s] - unable to get vertex library hash for technique '%s'", (re::DynamicString *)__src, v75, v76, v300);
        goto LABEL_185;
      }
      v67 = v359;
      *(_QWORD *)(v66 + 32) = v359;
      v68 = *(_QWORD *)(v60 + 56) + 264;
      *(_QWORD *)__src = v67;
      v69 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v68, (uint64_t *)__src);
      if (!v69)
      {
        v63 = (uint64_t)v321;
        v77 = v321;
        if ((*(_BYTE *)(v51 + 8) & 1) != 0)
          v77 = *(_anonymous_namespace_ **)(v51 + 16);
        if ((*(_BYTE *)(v61 + 120) & 1) != 0)
          v78 = *(_QWORD *)(v61 + 128);
        else
          v78 = v61 + 121;
        if ((*(_BYTE *)(v61 + 8) & 1) != 0)
          v95 = *(_QWORD *)(v61 + 16);
        else
          v95 = v61 + 9;
        re::DynamicString::format((re::DynamicString *)"[%s] - makeLibrary failed for vertex shader function '%s' in technique '%s'.", (re::DynamicString *)__src, v77, v78, v95);
        goto LABEL_185;
      }
      v70 = v69;
      re::DynamicString::operator=((re::DynamicString *)(v66 + 40), (re::DynamicString *)(v61 + 112));
      if ((*(_BYTE *)(v66 + 48) & 1) != 0)
        v71 = *(re::ns **)(v66 + 56);
      else
        v71 = (re::ns *)(v66 + 49);
      re::mtl::Library::makeFunction((void **)(v70 + 8), v71, &v357);
      if (!v357)
      {
        v51 = v319;
        v63 = (uint64_t)v321;
        v93 = v321;
        if ((*(_BYTE *)(v319 + 8) & 1) != 0)
          v93 = *(_anonymous_namespace_ **)(v319 + 16);
        v62 = v312;
        if ((*(_BYTE *)(v66 + 48) & 1) != 0)
          v94 = *(_QWORD *)(v66 + 56);
        else
          v94 = v66 + 49;
        if ((*(_BYTE *)(v61 + 8) & 1) != 0)
          v100 = *(_QWORD *)(v61 + 16);
        else
          v100 = v61 + 9;
        v300 = v100;
        re::DynamicString::format((re::DynamicString *)"[%s] - makeFunction failed for vertex shader function '%s' in technique '%s'.", (re::DynamicString *)__src, v93, v94);
        v101 = *(_OWORD *)__src;
        v102 = *(_QWORD *)&__src[16];
        v103 = v382;
        *(_BYTE *)v59 = 0;
        *(_OWORD *)(v59 + 8) = v101;
        *(_QWORD *)(v59 + 24) = v102;
        *(_QWORD *)(v59 + 32) = v103;
        v99 = 1;
        goto LABEL_521;
      }
      v79 = objc_msgSend(v357, sel_functionConstantsDictionary);
      memset(v354, 0, sizeof(v354));
      v355 = 0;
      v356 = 0x7FFFFFFFLL;
      v80 = objc_msgSend(v79, sel_keyEnumerator);
      v81 = objc_msgSend(v80, sel_nextObject);
      if (v81)
      {
        v82 = v81;
        do
        {
          *(_QWORD *)__src = objc_msgSend(v82, sel_UTF8String);
          v388 = objc_msgSend(v79, sel_objectForKey_, v82);
          re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::add((uint64_t)v354, (char **)__src, &v388);
          if (v388)

          v82 = objc_msgSend(v80, sel_nextObject);
        }
        while (v82);
      }
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v353, v61 + 328);
      v83 = (_anonymous_namespace_ *)objc_msgSend(*(id *)(v60 + 184), "supportsFamily:", 1003);
      v84 = *(unsigned __int8 *)(v60 + 305);
      v85 = objc_msgSend(*(id *)(v60 + 184), "supportsFamily:", 1007);
      v86 = re::mtl::Device::needsArgumentBufferTextureEmulation((re::mtl::Device *)(v314 + 184));
      v87 = 0;
      if (*(_BYTE *)(v60 + 307))
      {
        v63 = (uint64_t)v321;
        if (*(_BYTE *)v60)
        {
          v88 = *(_QWORD *)(v61 + 272);
          if (v88)
          {
            v89 = 32 * v88 - 32;
            v90 = (unsigned __int8 *)(*(_QWORD *)(v61 + 288) + 1);
            do
            {
              v91 = *v90;
              v90 += 32;
              v87 = v91 != 0;
              if (v91)
                v92 = 1;
              else
                v92 = v89 == 0;
              v89 -= 32;
            }
            while (!v92);
          }
          else
          {
            v87 = *(_BYTE *)(v61 + 201) != 0;
          }
        }
      }
      else
      {
        v63 = (uint64_t)v321;
      }
      re::MaterialManager::addSupportConstantsToArray(v83, v84 != 0, v85, v87, v86, (uint64_t)v353);
      v104 = *(unsigned __int8 *)(v60 + 251);
      v105 = (_anonymous_namespace_ *)v63;
      if ((*(_BYTE *)(v319 + 8) & 1) != 0)
        v105 = *(_anonymous_namespace_ **)(v319 + 16);
      v351[0] = 0;
      v350[0] = 0;
      v106 = re::parseFunctionConstants(v105, (uint64_t)v354, (uint64_t)v353, v351, (uint64_t)v350, 0, v104 != 0, 0, (uint64_t)&v388);
      if (v351[0])
        re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v352, v106);
      if ((_BYTE)v388)
      {
        v107 = v391;
        v317 = v104;
        v108 = 0;
        if (v391)
        {
          v109 = (int *)(v390 + 8);
          while (1)
          {
            v110 = *v109;
            v109 += 28;
            if (v110 < 0)
              break;
            if (v391 == ++v108)
            {
              LODWORD(v108) = v391;
              break;
            }
          }
        }
        if (v391 != (_DWORD)v108)
        {
          v112 = v108;
          v113 = v390;
          do
          {
            re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)(v66 + 336), (re::DynamicString *)(v113 + 112 * v112 + 48));
            v113 = v390;
            if (v391 <= (int)v108 + 1)
              v114 = v108 + 1;
            else
              v114 = v391;
            v115 = v108;
            while (1)
            {
              v112 = (v115 + 1);
              if (v114 - 1 == v115)
                break;
              ++v115;
              LODWORD(v108) = v112;
              if ((*(_DWORD *)(v390 + 112 * v112 + 8) & 0x80000000) != 0)
                goto LABEL_222;
            }
            LODWORD(v108) = v114;
LABEL_222:
            ;
          }
          while (v107 != (_DWORD)v108);
        }
        v116 = *(_QWORD *)(v61 + 440);
        if (v116)
        {
          v117 = *(_QWORD *)(v61 + 456);
          v118 = 32 * v116;
          do
          {
            *(_QWORD *)__src = re::Hash<re::DynamicString>::operator()((uint64_t)__src, v117);
            re::DynamicArray<unsigned long>::add((_QWORD *)(v66 + 440), __src);
            v117 += 32;
            v118 -= 32;
          }
          while (v118);
        }
        v119 = *(unsigned __int8 *)(v61 + 553);
        *(_BYTE *)(v66 + 685) = v119;
        if (v119)
          re::MaterialManager::addDefaultVariationFallbackValues(*(re::MaterialManager **)(v314 + 24), (re::TechniqueDefinitionBuilder *)v66);
        *(_BYTE *)(v66 + 684) = *(_BYTE *)(v61 + 656);
        re::parseUsedConstantsMask((uint64_t)__src, (uint64_t)v354);
        *(_OWORD *)(v66 + 72) = *(_OWORD *)__src;
        re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::operator=(v66 + 88, (uint64_t *)&__src[16]);
        re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit((uint64_t *)&__src[16]);
        if (*(_BYTE *)(v66 + 686) || *(_BYTE *)(v61 + 657))
        {
          if (!*(_BYTE *)(v66 + 686) || *(_BYTE *)(v61 + 657))
          {
            if (!*(_BYTE *)(v66 + 686) && *(_BYTE *)(v61 + 657))
              *(_BYTE *)(v66 + 686) = 1;
            *(_BYTE *)(v66 + 687) = *(_BYTE *)(v61 + 658);
          }
          else
          {
            *(_BYTE *)(v66 + 686) = 0;
          }
        }
        *(_DWORD *)(v66 + 680) = 0;
        v120 = re::Hash<re::DynamicString>::operator()((uint64_t)__src, v61);
        if (*(_QWORD *)(v319 + 688))
        {
          v121 = *(unsigned int *)(*(_QWORD *)(v319 + 696) + 4 * (v120 % *(unsigned int *)(v319 + 712)));
          if ((_DWORD)v121 != 0x7FFFFFFF)
          {
            v122 = *(_QWORD *)(v319 + 704);
            while (!re::DynamicString::operator==(v122 + 56 * v121 + 16, v61))
            {
              v121 = *(_DWORD *)(v122 + 56 * v121 + 8) & 0x7FFFFFFF;
              if (v121 == 0x7FFFFFFF)
                goto LABEL_244;
            }
            *(_DWORD *)(v66 + 680) = *(_DWORD *)(v122 + 56 * v121 + 48);
          }
        }
LABEL_244:
        re::AssetHandle::AssetHandle((re::AssetHandle *)&v346, (const re::AssetHandle *)(v61 + 144));
        re::DynamicString::DynamicString((re::DynamicString *)&v348, (const re::DynamicString *)(v61 + 168));
        if (*(_BYTE *)(v66 + 685))
        {
          v123 = (_anonymous_namespace_ *)re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)&v384, v61 + 560);
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<char const(&)[5]>((uint64_t)&v384, (re::DynamicString *)__src, "true");
          if (*(_QWORD *)__src && (__src[8] & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)__src + 40))();
          v124 = *(_QWORD *)(v314 + 24);
          re::StringID::StringID((re::StringID *)v345, (const re::DynamicString *)(v66 + 40));
          re::MaterialManager::getEngineShaderMetadata(v124, v345, (char *)&v329);
          re::StringID::destroyString((re::StringID *)v345);
          if ((_BYTE)v329 && BYTE1(v329))
          {
            re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<char const(&)[5]>((uint64_t)&v384, (re::DynamicString *)__src, "true");
            if (*(_QWORD *)__src && (__src[8] & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)__src + 40))();
            if ((BYTE8(v348) & 1) != 0)
              v126 = *((_QWORD *)&v348 + 1) >> 1;
            else
              v126 = BYTE8(v348) >> 1;
            if (!v126)
            {
              *(_QWORD *)__src = "blankFragmentShader";
              *(_QWORD *)&__src[8] = 19;
              re::DynamicString::operator=((re::DynamicString *)&v348, (uint64_t)__src);
              v127 = v346;
              v346 = 0uLL;
              *(_OWORD *)__src = v127;
              v128 = v347;
              v347 = 0;
              *(_QWORD *)&__src[16] = v128;
              re::AssetHandle::~AssetHandle((re::AssetHandle *)__src);
            }
          }
          v129 = v321;
          if ((*(_BYTE *)(v319 + 8) & 1) != 0)
            v129 = *(_anonymous_namespace_ **)(v319 + 16);
          v343[0] = 0;
          v342[0] = 0;
          v130 = re::parseFunctionConstants(v129, (uint64_t)v354, (uint64_t)&v384, v343, (uint64_t)v342, 0, v317 != 0, 1, (uint64_t)__src);
          if (v343[0])
            re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v344, v130);
          v131 = __src[0];
          if (__src[0])
          {
            v132 = v383[0];
            if (LODWORD(v383[0]))
            {
              v133 = 0;
              v134 = (int *)(v382 + 8);
              while (1)
              {
                v135 = *v134;
                v134 += 28;
                if (v135 < 0)
                  break;
                if (LODWORD(v383[0]) == ++v133)
                {
                  LODWORD(v133) = v383[0];
                  break;
                }
              }
            }
            else
            {
              LODWORD(v133) = 0;
            }
            if (LODWORD(v383[0]) != (_DWORD)v133)
            {
              v137 = v133;
              v138 = v382;
              do
              {
                re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::TechniqueFunctionConstant&>(v66 + 584, (re::DynamicString *)(v138 + 112 * v137 + 16), 2, v138 + 112 * v137 + 48);
                v138 = v382;
                if (LODWORD(v383[0]) <= (v133 + 1))
                  v139 = v133 + 1;
                else
                  v139 = v383[0];
                v140 = v133;
                while (1)
                {
                  v137 = (v140 + 1);
                  if (v139 - 1 == v140)
                    break;
                  ++v140;
                  LODWORD(v133) = v137;
                  if ((*(_DWORD *)(v382 + 112 * v137 + 8) & 0x80000000) != 0)
                    goto LABEL_280;
                }
                LODWORD(v133) = v139;
LABEL_280:
                ;
              }
              while (v132 != (_DWORD)v133);
            }
          }
          else
          {
            re::DynamicString::DynamicString((re::DynamicString *)v335, (const re::DynamicString *)&__src[8]);
            *(_BYTE *)v313 = 0;
            v136 = v335[3];
            *(_QWORD *)(v313 + 8) = v335[0];
            *(_QWORD *)(v313 + 32) = v136;
            *(_OWORD *)(v313 + 16) = *(_OWORD *)&v335[1];
          }
          re::Result<re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::DynamicString>::~Result((uint64_t)__src);
          re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v384);
          v63 = (uint64_t)v321;
          if (!v131)
            goto LABEL_404;
        }
        re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(v66 + 632, v61 + 608);
        v141 = *(_DWORD *)(v61 + 404);
        if (!v141)
          goto LABEL_291;
        if ((*(_BYTE *)(v319 + 8) & 1) != 0)
          v63 = *(_QWORD *)(v319 + 16);
        v142 = v357;
        v341 = v142;
        re::parseVariationTable(v63, &v341, v61 + 376, (uint64_t)__src);
        if (v142)
        {

          v341 = 0;
        }
        v63 = (uint64_t)v321;
        if (__src[0])
        {
          if ((_BYTE *)(v66 + 376) != &__src[8])
            re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::copy((_anonymous_namespace_ *)(v66 + 376), (uint64_t *)&__src[8]);
          re::Result<re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::DynamicString>::~Result((uint64_t)__src);
LABEL_291:
          if ((BYTE8(v348) & 1) != 0)
            v143 = *((_QWORD *)&v348 + 1) >> 1;
          else
            v143 = BYTE8(v348) >> 1;
          if (!v143)
            goto LABEL_406;
          v51 = v319;
          re::getLibraryHash((re *)v339, v314, v319, v61, (uint64_t *)&v346);
          if (v339[0])
          {
            v144 = v340;
            *(_QWORD *)(v66 + 136) = v340;
            v145 = *(_QWORD *)(v314 + 56) + 264;
            *(_QWORD *)__src = v144;
            v146 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v145, (uint64_t *)__src);
            if (v146)
            {
              v147 = v146;
              re::DynamicString::operator=((re::DynamicString *)(v66 + 144), (re::DynamicString *)&v348);
              if ((*(_BYTE *)(v66 + 152) & 1) != 0)
                v148 = *(re::ns **)(v66 + 160);
              else
                v148 = (re::ns *)(v66 + 153);
              re::mtl::Library::makeFunction((void **)(v147 + 8), v148, &v338);
              if (v338)
              {
                v161 = objc_msgSend(v338, sel_functionConstantsDictionary);
                memset(v335, 0, sizeof(v335));
                v336 = 0;
                v337 = 0x7FFFFFFFLL;
                v162 = objc_msgSend(v161, sel_keyEnumerator);
                v163 = objc_msgSend(v162, sel_nextObject);
                if (v163)
                {
                  v164 = v163;
                  do
                  {
                    *(_QWORD *)__src = objc_msgSend(v164, sel_UTF8String);
                    *(_QWORD *)&v384 = objc_msgSend(v161, sel_objectForKey_, v164);
                    re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::add((uint64_t)v335, (char **)__src, &v384);
                    if ((_QWORD)v384)

                    v164 = objc_msgSend(v162, sel_nextObject);
                  }
                  while (v164);
                }
                v63 = (uint64_t)v321;
                v165 = v321;
                if ((*(_BYTE *)(v319 + 8) & 1) != 0)
                  v165 = *(_anonymous_namespace_ **)(v319 + 16);
                v333[0] = 0;
                v332[0] = 0;
                v166 = re::parseFunctionConstants(v165, (uint64_t)v335, (uint64_t)v353, v333, (uint64_t)v332, 0, v317 != 0, 0, (uint64_t)&v384);
                if (v333[0])
                  re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v334, v166);
                if ((_BYTE)v384)
                {
                  v167 = v387;
                  if (v387)
                  {
                    v168 = 0;
                    v169 = (int *)(v386 + 8);
                    while (1)
                    {
                      v170 = *v169;
                      v169 += 28;
                      if (v170 < 0)
                        break;
                      if (v387 == ++v168)
                      {
                        LODWORD(v168) = v387;
                        break;
                      }
                    }
                  }
                  else
                  {
                    LODWORD(v168) = 0;
                  }
                  if (v387 != (_DWORD)v168)
                  {
                    v181 = v168;
                    v182 = v386;
                    do
                    {
                      if (!re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v389, v182 + 112 * v181 + 16))re::DynamicArray<re::TechniqueFunctionConstant>::add((_anonymous_namespace_ *)(v66 + 336), (re::DynamicString *)(v182 + 112 * v181 + 48));
                      v182 = v386;
                      if (v387 <= (int)v168 + 1)
                        v183 = v168 + 1;
                      else
                        v183 = v387;
                      while (1)
                      {
                        v181 = (v168 + 1);
                        if (v183 - 1 == (_DWORD)v168)
                          break;
                        LODWORD(v168) = v168 + 1;
                        v184 = v181;
                        if ((*(_DWORD *)(v386 + 112 * v181 + 8) & 0x80000000) != 0)
                          goto LABEL_352;
                      }
                      v184 = v183;
LABEL_352:
                      LODWORD(v168) = v184;
                    }
                    while (v167 != v184);
                  }
                  re::parseUsedConstantsMask((uint64_t)__src, (uint64_t)v335);
                  *(_OWORD *)(v66 + 176) = *(_OWORD *)__src;
                  re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::operator=(v66 + 192, (uint64_t *)&__src[16]);
                  re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::deinit((uint64_t *)&__src[16]);
                  if (*(_BYTE *)(v66 + 685))
                  {
                    v185 = (_anonymous_namespace_ *)re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)&v329, v61 + 560);
                    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<char const(&)[5]>((uint64_t)&v329, (re::DynamicString *)__src, "true");
                    if (*(_QWORD *)__src && (__src[8] & 1) != 0)
                      (*(void (**)(void))(**(_QWORD **)__src + 40))();
                    v186 = v321;
                    if ((*(_BYTE *)(v319 + 8) & 1) != 0)
                      v186 = *(_anonymous_namespace_ **)(v319 + 16);
                    v327[0] = 0;
                    v326[0] = 0;
                    v187 = re::parseFunctionConstants(v186, (uint64_t)v335, (uint64_t)&v329, v327, (uint64_t)v326, 0, v317 != 0, 1, (uint64_t)__src);
                    if (v327[0])
                      re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v328, v187);
                    v188 = __src[0];
                    if (__src[0])
                    {
                      v189 = v383[0];
                      if (LODWORD(v383[0]))
                      {
                        v190 = 0;
                        v191 = (int *)(v382 + 8);
                        while (1)
                        {
                          v192 = *v191;
                          v191 += 28;
                          if (v192 < 0)
                            break;
                          if (LODWORD(v383[0]) == ++v190)
                          {
                            LODWORD(v190) = v383[0];
                            break;
                          }
                        }
                      }
                      else
                      {
                        LODWORD(v190) = 0;
                      }
                      if (LODWORD(v383[0]) != (_DWORD)v190)
                      {
                        v193 = v190;
                        v194 = v382;
                        do
                        {
                          re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::TechniqueFunctionConstant&>(v66 + 584, (re::DynamicString *)(v194 + 112 * v193 + 16), 2, v194 + 112 * v193 + 48);
                          v194 = v382;
                          if (LODWORD(v383[0]) <= (v190 + 1))
                            v195 = v190 + 1;
                          else
                            v195 = v383[0];
                          v196 = v190;
                          while (1)
                          {
                            v193 = (v196 + 1);
                            if (v195 - 1 == v196)
                              break;
                            ++v196;
                            LODWORD(v190) = v193;
                            if ((*(_DWORD *)(v382 + 112 * v193 + 8) & 0x80000000) != 0)
                              goto LABEL_381;
                          }
                          LODWORD(v190) = v195;
LABEL_381:
                          ;
                        }
                        while (v189 != (_DWORD)v190);
                      }
                    }
                    else
                    {
                      re::DynamicString::DynamicString((re::DynamicString *)&v323, (const re::DynamicString *)&__src[8]);
                      *(_BYTE *)v313 = 0;
                      *(_QWORD *)(v313 + 8) = v323;
                      *(_QWORD *)(v313 + 32) = v325;
                      *(_OWORD *)(v313 + 16) = v324;
                    }
                    v177 = v188 == 0;
                    re::Result<re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::DynamicString>::~Result((uint64_t)__src);
                    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v329);
                    if (v141)
                    {
                      v63 = (uint64_t)v321;
                      if (v188)
                      {
LABEL_384:
                        if ((*(_BYTE *)(v319 + 8) & 1) != 0)
                          v63 = *(_QWORD *)(v319 + 16);
                        v197 = v338;
                        v322 = v197;
                        re::parseVariationTable(v63, &v322, v61 + 376, (uint64_t)__src);
                        if (v197)
                        {

                          v322 = 0;
                        }
                        if (__src[0])
                        {
                          re::HashBrown<unsigned int,unsigned int,re::Hash<unsigned int>,re::EqualTo<unsigned int>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned int,unsigned int> const&>::HashBrownIterator((uint64_t **)&v329, (uint64_t *)&__src[8]);
                          for (i = v330; v330 != -1; i = v330)
                          {
                            v199 = *(_QWORD *)(v329 + 8);
                            if (re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::find((uint64_t *)(v66 + 376), v199 + 96 * i) == -1)re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew((uint64_t *)(v66 + 376), (const re::DynamicString *)(v199 + 96 * i), (uint64_t *)(v199 + 96 * i + 32));
                            re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(&v329);
                          }
                          re::Result<re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::DynamicString>::~Result((uint64_t)__src);
                          v177 = 0;
                          v63 = (uint64_t)v321;
                        }
                        else
                        {
                          v63 = (uint64_t)v321;
                          v200 = v321;
                          if ((*(_BYTE *)(v319 + 8) & 1) != 0)
                            v200 = *(_anonymous_namespace_ **)(v319 + 16);
                          v201 = &__src[17];
                          if ((__src[16] & 1) != 0)
                            v201 = (_BYTE *)v382;
                          re::DynamicString::format((re::DynamicString *)"[%s] - Failed to parse fragment shader permuted function constants: %s.", (re::DynamicString *)&v329, v200, v201);
                          v202 = v329;
                          v203 = v330;
                          v204 = v331;
                          *(_BYTE *)v313 = 0;
                          *(_OWORD *)(v313 + 8) = v202;
                          *(_QWORD *)(v313 + 24) = v203;
                          *(_QWORD *)(v313 + 32) = v204;
                          re::Result<re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::DynamicString>::~Result((uint64_t)__src);
                          v177 = 1;
                        }
                      }
                    }
                    else
                    {
                      v63 = (uint64_t)v321;
                    }
                  }
                  else
                  {
                    v63 = (uint64_t)v321;
                    if (v141)
                      goto LABEL_384;
                    v177 = 0;
                  }
                }
                else
                {
                  re::DynamicString::DynamicString((re::DynamicString *)__src, (const re::DynamicString *)((char *)&v384 + 8));
                  *(_BYTE *)v313 = 0;
                  v176 = v382;
                  *(_QWORD *)(v313 + 8) = *(_QWORD *)__src;
                  *(_QWORD *)(v313 + 32) = v176;
                  *(_OWORD *)(v313 + 16) = *(_OWORD *)&__src[8];
                  v177 = 1;
                }
                re::Result<re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::DynamicString>::~Result((uint64_t)&v384);
                re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(v335);
              }
              else
              {
                v63 = (uint64_t)v321;
                v174 = v321;
                if ((*(_BYTE *)(v319 + 8) & 1) != 0)
                  v174 = *(_anonymous_namespace_ **)(v319 + 16);
                if ((*(_BYTE *)(v66 + 152) & 1) != 0)
                  v175 = *(_QWORD *)(v66 + 160);
                else
                  v175 = v66 + 153;
                re::DynamicString::format((re::DynamicString *)"[%s] - makeFunction failed for pixel shader function %s.", (re::DynamicString *)__src, v174, v175);
                v178 = *(_OWORD *)__src;
                v179 = *(_QWORD *)&__src[16];
                v180 = v382;
                *(_BYTE *)v313 = 0;
                *(_OWORD *)(v313 + 8) = v178;
                *(_QWORD *)(v313 + 24) = v179;
                *(_QWORD *)(v313 + 32) = v180;
                v177 = 1;
              }
              if (v338)

              if (v177)
              {
LABEL_404:
                v99 = 1;
                v51 = v319;
                goto LABEL_405;
              }
LABEL_406:
              v205 = *(_QWORD *)(v61 + 304);
              v206 = v205 >> 1;
              if ((v205 & 1) == 0)
                v206 = v205 >> 1;
              if (v206)
              {
                if ((v205 & 1) != 0)
                {
                  v208 = *(_BYTE **)(v61 + 312);
                  if (v208)
                  {
                    LOBYTE(v207) = *v208;
                    goto LABEL_413;
                  }
                  v212 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else
                {
                  v207 = v205 >> 8;
                  v208 = (_BYTE *)(v61 + 305);
LABEL_413:
                  if ((_BYTE)v207)
                  {
                    v207 = (char)v207;
                    v209 = v208[1];
                    if (v209)
                    {
                      v210 = v208 + 2;
                      do
                      {
                        v207 = 31 * v207 + v209;
                        v211 = *v210++;
                        v209 = v211;
                      }
                      while (v211);
                    }
                    v212 = v207 & 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else
                  {
                    v212 = 0;
                  }
                }
                if (!*(_BYTE *)(v66 + 520))
                  *(_BYTE *)(v66 + 520) = 1;
                *(_QWORD *)(v66 + 528) = v212;
              }
              v213 = *(unsigned int *)(v61 + 496);
              if ((_DWORD)v213)
              {
                v214 = 0;
                v215 = (int *)(*(_QWORD *)(v61 + 480) + 8);
                while (1)
                {
                  v216 = *v215;
                  v215 += 20;
                  if (v216 < 0)
                    break;
                  if (v213 == ++v214)
                  {
                    LODWORD(v214) = *(_DWORD *)(v61 + 496);
                    break;
                  }
                }
              }
              else
              {
                LODWORD(v214) = 0;
              }
              if ((_DWORD)v213 != (_DWORD)v214)
              {
                v217 = v214;
                v218 = (unint64_t *)(v66 + 536);
                v219 = *(_DWORD *)(v61 + 496);
                do
                {
                  v220 = *(_QWORD *)(v61 + 480);
                  v221 = v220 + 80 * v217;
                  v222 = *(_QWORD *)(v221 + 24);
                  if ((v222 & 1) != 0)
                  {
                    v224 = *(_BYTE **)(v220 + 80 * v217 + 32);
                    if (!v224)
                    {
                      v228 = 0x7FFFFFFFFFFFFFFFLL;
                      goto LABEL_442;
                    }
                    LOBYTE(v223) = *v224;
                  }
                  else
                  {
                    v223 = v222 >> 8;
                    v224 = (_BYTE *)(v220 + 80 * v217 + 25);
                  }
                  if ((_BYTE)v223)
                  {
                    v223 = (char)v223;
                    v225 = v224[1];
                    if (v225)
                    {
                      v226 = v224 + 2;
                      do
                      {
                        v223 = 31 * v223 + v225;
                        v227 = *v226++;
                        v225 = v227;
                      }
                      while (v227);
                    }
                    v228 = v223 & 0x7FFFFFFFFFFFFFFFLL;
                  }
                  else
                  {
                    v228 = 0;
                  }
LABEL_442:
                  v229 = *(_QWORD *)(v220 + 80 * v217 + 56);
                  if ((v229 & 1) == 0)
                  {
                    v230 = (_BYTE *)(v221 + 57);
                    v231 = v229 >> 8;
                    goto LABEL_446;
                  }
                  v230 = *(_BYTE **)(v220 + 80 * v217 + 64);
                  if (v230)
                  {
                    LOBYTE(v231) = *v230;
LABEL_446:
                    if ((_BYTE)v231)
                    {
                      v231 = (char)v231;
                      v232 = v230[1];
                      if (v232)
                      {
                        v233 = v230 + 2;
                        do
                        {
                          v231 = 31 * v231 + v232;
                          v234 = *v233++;
                          v232 = v234;
                        }
                        while (v234);
                      }
                      v235 = v231 & 0x7FFFFFFFFFFFFFFFLL;
                    }
                    else
                    {
                      v235 = 0;
                    }
                    goto LABEL_453;
                  }
                  v235 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_453:
                  v236 = 0x94D049BB133111EBLL
                       * ((0xBF58476D1CE4E5B9 * (v228 ^ (v228 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v228 ^ (v228 >> 30))) >> 27));
                  v237 = v236 ^ (v236 >> 31);
                  v238 = *v218;
                  if (!*v218
                    || (v238 = v237 % *(unsigned int *)(v66 + 560),
                        v239 = *(unsigned int *)(*(_QWORD *)(v66 + 544) + 4 * v238),
                        (_DWORD)v239 == 0x7FFFFFFF))
                  {
LABEL_458:
                    v241 = *(unsigned int *)(v66 + 572);
                    if ((_DWORD)v241 == 0x7FFFFFFF)
                    {
                      v241 = *(unsigned int *)(v66 + 568);
                      v242 = v241;
                      if ((_DWORD)v241 == *(_DWORD *)(v66 + 560))
                      {
                        v243 = v213;
                        re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(v66 + 536, 2 * *(_DWORD *)(v66 + 564));
                        v213 = v243;
                        v238 = v237 % *(unsigned int *)(v66 + 560);
                        v242 = *(_DWORD *)(v66 + 568);
                      }
                      *(_DWORD *)(v66 + 568) = v242 + 1;
                      v244 = *(_QWORD *)(v66 + 552);
                      v245 = *(_DWORD *)(v244 + 24 * v241);
                    }
                    else
                    {
                      v244 = *(_QWORD *)(v66 + 552);
                      v245 = *(_DWORD *)(v244 + 24 * v241);
                      *(_DWORD *)(v66 + 572) = v245 & 0x7FFFFFFF;
                    }
                    v246 = 24 * v241;
                    *(_DWORD *)(v244 + v246) = v245 | 0x80000000;
                    v247 = *(_QWORD *)(v66 + 544);
                    *(_DWORD *)(*(_QWORD *)(v66 + 552) + v246) = *(_DWORD *)(*(_QWORD *)(v66 + 552) + 24 * v241) & 0x80000000 | *(_DWORD *)(v247 + 4 * v238);
                    *(_QWORD *)(*(_QWORD *)(v66 + 552) + 24 * v241 + 8) = v228;
                    *(_QWORD *)(*(_QWORD *)(v66 + 552) + 24 * v241 + 16) = v235;
                    *(_DWORD *)(v247 + 4 * v238) = v241;
                    ++*(_DWORD *)(v66 + 564);
                    v219 = *(_DWORD *)(v61 + 496);
                  }
                  else
                  {
                    v240 = *(_QWORD *)(v66 + 552);
                    while (*(_QWORD *)(v240 + 24 * v239 + 8) != v228)
                    {
                      v239 = *(_DWORD *)(v240 + 24 * v239) & 0x7FFFFFFF;
                      if ((_DWORD)v239 == 0x7FFFFFFF)
                        goto LABEL_458;
                    }
                    *(_QWORD *)(v240 + 24 * v239 + 16) = 0;
                    *(_QWORD *)(*(_QWORD *)(v66 + 552) + 24 * v239 + 16) = v235;
                  }
                  ++*(_DWORD *)(v66 + 576);
                  if (v219 <= (int)v214 + 1)
                    v248 = v214 + 1;
                  else
                    v248 = v219;
                  while (1)
                  {
                    v217 = (v214 + 1);
                    if (v248 - 1 == (_DWORD)v214)
                      break;
                    LODWORD(v214) = v214 + 1;
                    v249 = v217;
                    if ((*(_DWORD *)(*(_QWORD *)(v61 + 480) + 80 * v217 + 8) & 0x80000000) != 0)
                      goto LABEL_472;
                  }
                  v249 = v248;
LABEL_472:
                  LODWORD(v214) = v249;
                }
                while ((_DWORD)v213 != v249);
              }
              v250 = *(_QWORD *)(v61 + 528);
              if (v250)
              {
                v251 = *(_QWORD *)(v61 + 544);
                v252 = v251 + 32 * v250;
                while (1)
                {
                  v253 = *(_QWORD *)(v251 + 8);
                  if ((v253 & 1) == 0)
                    break;
                  v255 = *(_BYTE **)(v251 + 16);
                  if (v255)
                  {
                    LOBYTE(v254) = *v255;
LABEL_479:
                    if ((_BYTE)v254)
                    {
                      v254 = (char)v254;
                      v256 = v255[1];
                      if (v256)
                      {
                        v257 = v255 + 2;
                        do
                        {
                          v254 = 31 * v254 + v256;
                          v258 = *v257++;
                          v256 = v258;
                        }
                        while (v258);
                      }
                      v259 = v254 & 0x7FFFFFFFFFFFFFFFLL;
                    }
                    else
                    {
                      v259 = 0;
                    }
                    goto LABEL_486;
                  }
                  v259 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_486:
                  *(_QWORD *)__src = v259;
                  re::DynamicArray<re::WeakStringID>::add((_QWORD *)(v66 + 480), __src);
                  v251 += 32;
                  if (v251 == v252)
                    goto LABEL_487;
                }
                v254 = v253 >> 8;
                v255 = (_BYTE *)(v251 + 9);
                goto LABEL_479;
              }
LABEL_487:
              v260 = *(_OWORD *)(v61 + 200);
              v261 = *(_OWORD *)(v61 + 216);
              v262 = *(_OWORD *)(v61 + 232);
              *(_DWORD *)(v66 + 288) = *(_DWORD *)(v61 + 248);
              *(_OWORD *)(v66 + 256) = v261;
              *(_OWORD *)(v66 + 272) = v262;
              *(_OWORD *)(v66 + 240) = v260;
              v51 = v319;
              v62 = v312;
              if (*(_BYTE *)(v66 + 292) || *(_BYTE *)(v61 + 252))
              {
                if (!*(_BYTE *)(v66 + 292) || *(_BYTE *)(v61 + 252))
                {
                  if (!*(_BYTE *)(v66 + 292) && *(_BYTE *)(v61 + 252))
                    *(_BYTE *)(v66 + 292) = 1;
                  *(_BYTE *)(v66 + 293) = *(_BYTE *)(v61 + 253);
                }
                else
                {
                  *(_BYTE *)(v66 + 292) = 0;
                }
              }
              re::DynamicArray<re::RenderAttachmentState>::operator=(v66 + 296, (uint64_t *)(v61 + 256));
              if (v308)
              {
                v263 = re::DynamicString::operator==(v308, v66);
                v264 = v263 && v305;
                v265 = v263 && v304;
                if (!v307 || v263)
                  goto LABEL_503;
LABEL_501:
                v266 = re::DynamicString::operator==(v307, v66);
                v264 = v266 && v303;
                v265 = v266 && v302;
              }
              else
              {
                if (v307)
                  goto LABEL_501;
                v264 = 0;
                v265 = 0;
              }
LABEL_503:
              if ((v306 & 1) != 0
                && ((*(_QWORD *)(v66 + 8) & 1) != 0
                  ? (v267 = *(const char **)(v66 + 16))
                  : (v267 = (const char *)(v66 + 9)),
                    !strcmp(v267, "Transparent")))
              {
                v265 |= v310;
                if (((v301 | v264) & 1) == 0)
                  goto LABEL_512;
LABEL_509:
                MurmurHash3_x64_128((uint64_t)"ARBackwardsCompatibility", 24, 0, (unint64_t *)__src);
                *(_QWORD *)__src ^= *(_QWORD *)&__src[8]
                                  + (*(_QWORD *)__src << 6)
                                  + (*(_QWORD *)__src >> 2)
                                  - 0x61C8864680B583E9;
                re::DynamicArray<unsigned long>::add((_QWORD *)(v66 + 440), __src);
                v99 = 0;
                v63 = (uint64_t)v321;
                if ((v265 & 1) != 0)
                {
LABEL_513:
                  MurmurHash3_x64_128((uint64_t)"DynamicLightingBackwardsCompatibility", 37, 0, (unint64_t *)__src);
                  *(_QWORD *)__src ^= *(_QWORD *)&__src[8]
                                    + (*(_QWORD *)__src << 6)
                                    + (*(_QWORD *)__src >> 2)
                                    - 0x61C8864680B583E9;
                  re::DynamicArray<unsigned long>::add((_QWORD *)(v66 + 440), __src);
                  goto LABEL_514;
                }
              }
              else
              {
                if (v264)
                  goto LABEL_509;
LABEL_512:
                v63 = (uint64_t)v321;
                if ((v265 & 1) != 0)
                  goto LABEL_513;
LABEL_514:
                v99 = 0;
              }
LABEL_515:
              if ((_QWORD)v348)
              {
                if ((BYTE8(v348) & 1) != 0)
                  (*(void (**)(void))(*(_QWORD *)v348 + 40))();
                v348 = 0u;
                v349 = 0u;
              }
              re::AssetHandle::~AssetHandle((re::AssetHandle *)&v346);
              v59 = v313;
              v60 = v314;
              goto LABEL_520;
            }
            v51 = v319;
            v63 = (uint64_t)v321;
            v156 = v321;
            if ((*(_BYTE *)(v319 + 8) & 1) != 0)
              v156 = *(_anonymous_namespace_ **)(v319 + 16);
            v157 = (char *)&v348 + 9;
            if ((BYTE8(v348) & 1) != 0)
              v157 = (char *)v349;
            re::DynamicString::format((re::DynamicString *)"[%s] - makeLibrary failed for pixel shader function %s.", (re::DynamicString *)__src, v156, v157);
            v158 = *(_OWORD *)__src;
            v159 = *(_QWORD *)&__src[16];
            v160 = v382;
            *(_BYTE *)v313 = 0;
            *(_OWORD *)(v313 + 8) = v158;
            *(_QWORD *)(v313 + 24) = v159;
            *(_QWORD *)(v313 + 32) = v160;
            v62 = v312;
          }
          else
          {
            v154 = v63;
            if ((*(_BYTE *)(v319 + 8) & 1) != 0)
              v154 = *(_QWORD *)(v319 + 16);
            v62 = v312;
            if ((*(_BYTE *)(v61 + 8) & 1) != 0)
              v155 = *(_QWORD *)(v61 + 16);
            else
              v155 = v61 + 9;
            re::DynamicString::format((re::DynamicString *)"[%s] - unable to get fragment library hash for technique '%s'", (re::DynamicString *)__src, v154, v155);
            v171 = *(_OWORD *)__src;
            v172 = *(_QWORD *)&__src[16];
            v173 = v382;
            *(_BYTE *)v313 = 0;
            *(_OWORD *)(v313 + 8) = v171;
            *(_QWORD *)(v313 + 24) = v172;
            *(_QWORD *)(v313 + 32) = v173;
          }
          v99 = 1;
          goto LABEL_515;
        }
        v51 = v319;
        v149 = v321;
        if ((*(_BYTE *)(v319 + 8) & 1) != 0)
          v149 = *(_anonymous_namespace_ **)(v319 + 16);
        v150 = &__src[17];
        if ((__src[16] & 1) != 0)
          v150 = (_BYTE *)v382;
        re::DynamicString::format((re::DynamicString *)"[%s] - Failed to parse vertex shader permuted function constants: %s.", (re::DynamicString *)&v384, v149, v150);
        v151 = v384;
        v152 = v385;
        v153 = v386;
        *(_BYTE *)v313 = 0;
        *(_OWORD *)(v313 + 8) = v151;
        *(_QWORD *)(v313 + 24) = v152;
        *(_QWORD *)(v313 + 32) = v153;
        re::Result<re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::DynamicString>::~Result((uint64_t)__src);
        v99 = 1;
LABEL_405:
        v62 = v312;
        goto LABEL_515;
      }
      re::DynamicString::DynamicString((re::DynamicString *)__src, (const re::DynamicString *)v389);
      *(_BYTE *)v59 = 0;
      v111 = v382;
      *(_QWORD *)(v59 + 8) = *(_QWORD *)__src;
      *(_QWORD *)(v59 + 32) = v111;
      *(_OWORD *)(v59 + 16) = *(_OWORD *)&__src[8];
      v99 = 1;
      v51 = v319;
      v62 = v312;
LABEL_520:
      re::Result<re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::DynamicString>::~Result((uint64_t)&v388);
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v353);
      re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(v354);
LABEL_521:
      if (v357)

LABEL_187:
      if (!v361[0] && v362 && (v363 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v362 + 40))();
      if (v99)
        goto LABEL_524;
      v61 += 664;
      if (v61 == v62)
        goto LABEL_523;
    }
    re::DynamicString::DynamicString((re::DynamicString *)__src, (const re::DynamicString *)&v362);
    *(_BYTE *)v59 = 0;
    v72 = v382;
    *(_QWORD *)(v59 + 8) = *(_QWORD *)__src;
    *(_QWORD *)(v59 + 32) = v72;
    *(_OWORD *)(v59 + 16) = *(_OWORD *)&__src[8];
    goto LABEL_186;
  }
LABEL_523:
  re::MaterialDefinitionBuilder::MaterialDefinitionBuilder((uint64_t)__src, (uint64_t *)&v364);
  *(_BYTE *)v59 = 1;
  re::MaterialDefinitionBuilder::MaterialDefinitionBuilder(v59 + 8, (uint64_t *)__src);
  re::MaterialDefinitionBuilder::~MaterialDefinitionBuilder((re::MaterialDefinitionBuilder *)__src);
LABEL_524:
  re::MaterialDefinitionBuilder::~MaterialDefinitionBuilder((re::MaterialDefinitionBuilder *)&v364);
  re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)&v369, v268);
  re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v373);
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v377);
  re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit((uint64_t)v380);
}

uint64_t re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicArray<re::DynamicString>&>(uint64_t a1, re::DynamicString *a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v14;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 88 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 88 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 88 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v10 + 88 * v9;
  return v12 + 48;
}

_QWORD *re::DynamicArray<re::TechniqueFunctionConstant>::add(_anonymous_namespace_ *this, re::DynamicString *a2)
{
  unint64_t v4;
  re::DynamicString *v5;
  _QWORD *result;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::TechniqueFunctionConstant>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = re::DynamicString::DynamicString((re::DynamicString *)(*((_QWORD *)this + 4) + (v4 << 6)), a2);
  *((_DWORD *)v5 + 8) = *((_DWORD *)a2 + 8);
  result = re::FixedArray<unsigned char>::FixedArray((_QWORD *)v5 + 5, (uint64_t *)a2 + 5);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<char const(&)[5]>(uint64_t a1, re::DynamicString *a2, const char *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v14;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v14, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<char const(&)[5]>(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 80 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 80 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 80 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v10 + 80 * v9;
  return v12 + 48;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, v4, v5);
      re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

uint64_t re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::addNew(uint64_t *a1, const re::DynamicString *a2, uint64_t *a3)
{
  uint64_t v6;

  v6 = re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::find(a1, (uint64_t)a2);
  if (v6 == -1)
    return re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::internalAdd((_anonymous_namespace_ *)a1, a2, a3);
  else
    return a1[1] + 96 * v6 + 32;
}

_QWORD *re::DynamicArray<re::WeakStringID>::add(_QWORD *this, _QWORD *a2)
{
  _QWORD *v3;
  unint64_t v4;

  v3 = this;
  v4 = this[2];
  if (v4 >= this[1])
  {
    this = re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::growCapacity(this, v4 + 1);
    v4 = v3[2];
  }
  *(_QWORD *)(v3[4] + 8 * v4) = *a2;
  v3[2] = v4 + 1;
  ++*((_DWORD *)v3 + 6);
  return this;
}

size_t re::hashString(re *this, const char *a2)
{
  size_t result;
  unint64_t v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  result = strlen((const char *)this);
  if (result)
  {
    MurmurHash3_x64_128((uint64_t)this, result, 0, v4);
    return (v4[1] + (v4[0] << 6) + (v4[0] >> 2) - 0x61C8864680B583E9) ^ v4[0];
  }
  return result;
}

re::DynamicString *re::makeMaterialBuilder@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X3>, _BYTE *a3@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X6>, _DWORD *a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v8;
  _anonymous_namespace_ *v9;
  re::StringID *v10;
  uint64_t v11;
  re::StringID *v12;
  re::StringID *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  const char *v17;
  BOOL v18;
  const char *v19;
  _anonymous_namespace_ *v20;
  const char *v21;
  _anonymous_namespace_ *v22;
  re::DynamicString *result;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  re::StringID *v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  re::ns *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  _anonymous_namespace_ *v46;
  double v47;
  int v48;
  int v49;
  uint64_t v50;
  int *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  re::StringID *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void **v63;
  uint64_t v64;
  re::ns *v65;
  _anonymous_namespace_ *v66;
  id v67;
  id v68;
  id v69;
  id v70;
  double v71;
  int v72;
  int v73;
  uint64_t v74;
  int *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  unsigned __int8 v81;
  uint64_t v82;
  unsigned __int8 v83;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 v86;
  uint64_t v87;
  _BOOL8 v88;
  unsigned __int8 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unsigned int v97;
  _QWORD *v98;
  char *v99;
  _QWORD *v100;
  char *v101;
  char *v102;
  re::ShaderGraphAsset *v103;
  uint64_t v104;
  uint64_t *v105;
  _anonymous_namespace_ *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  __int128 v111;
  char v112;
  uint64_t v113;
  _anonymous_namespace_ *v114;
  unint64_t v115;
  unint64_t v116;
  __int128 v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int *v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  __n128 v126;
  __int128 v127;
  _QWORD *v128;
  char *v129;
  __int128 v130;
  int v131;
  const char *v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t *v135;
  uint64_t v136;
  id v137;
  id v138;
  id v139;
  id v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  int v147;
  void *v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  unint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _anonymous_namespace_ *v162;
  _anonymous_namespace_ *v163;
  double v164;
  unint64_t v165;
  int v166;
  uint64_t v167;
  int *v168;
  int v169;
  _anonymous_namespace_ *v170;
  char *v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  re::DynamicString *v179;
  int v180;
  int v181;
  _anonymous_namespace_ *v182;
  _anonymous_namespace_ *v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  _anonymous_namespace_ *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  id v200;
  const char *v201;
  const char *v202;
  const char *v203;
  const char *v204;
  uint64_t *v205;
  _anonymous_namespace_ *v208;
  uint64_t v209;
  re::StringID *v210;
  uint64_t v211;
  uint64_t v215;
  unsigned __int8 *v216;
  _anonymous_namespace_ *v217;
  uint64_t v218;
  re::StringID *v219;
  re::StringID *v220;
  re::StringID *v221;
  uint64_t v222;
  unsigned __int8 v223[2];
  char v225;
  char v227;
  char v229;
  char v231;
  char v233;
  char v235;
  char v237;
  char v239;
  uint64_t v240;
  char v241[8];
  _QWORD v242[3];
  int v243;
  uint64_t v244;
  char v245[8];
  uint64_t v246[6];
  char *v247;
  char v248;
  _BYTE v249[7];
  _anonymous_namespace_ *v250;
  _BYTE v251[24];
  _BYTE v252[24];
  id v253[3];
  int v254;
  uint64_t v255;
  uint64_t v256[4];
  _QWORD v257[3];
  id v258;
  __int128 v259;
  __int128 v260;
  _QWORD v261[2];
  _BYTE v262[44];
  id v263;
  _OWORD v264[78];
  _BYTE v265[24];
  __int128 v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  char v275[8];
  _BYTE v276[24];
  __int128 v277;
  int v278;
  _BYTE v279[12];
  __int16 v280;
  int v281;
  __int16 v282;
  unint64_t v283;
  __int16 v284;
  uint64_t v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  uint64_t v289;

  v289 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a2 + 40))
  {
    v24 = *(_OWORD *)v265;
    v25 = *(_QWORD *)&v265[16];
    v26 = v266;
    *(_BYTE *)a7 = 0;
    *(_OWORD *)(a7 + 8) = v24;
    *(_QWORD *)(a7 + 24) = v25;
    *(_QWORD *)(a7 + 32) = v26;
    return result;
  }
  v8 = a2;
  v9 = (_anonymous_namespace_ *)re::AssetHandle::loadedAsset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)(a2 + 32));
  v10 = (re::StringID *)*((_QWORD *)v9 + 93);
  memset(v262, 0, 36);
  *(_QWORD *)&v262[36] = 0x7FFFFFFFLL;
  v11 = *((_QWORD *)v10 + 15);
  v222 = v8;
  v208 = v9;
  v209 = a7;
  if (v11)
  {
    v12 = v10;
    v13 = (re::StringID *)*((_QWORD *)v10 + 16);
    v220 = (re::StringID *)((char *)v13 + 8 * v11);
    do
    {
      v14 = *(_QWORD *)(*(_QWORD *)v13 + 56);
      if (v14)
      {
        v15 = *(_QWORD *)(*(_QWORD *)v13 + 64);
        for (i = v14 << 6; i; i -= 64)
        {
          if ((*(_BYTE *)(v15 + 8) & 1) != 0)
            v17 = *(const char **)(v15 + 16);
          else
            v17 = (const char *)(v15 + 9);
          v18 = re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v262, (uint64_t)v265);
          v9 = *(_anonymous_namespace_ **)v265;
          if (*(_QWORD *)v265 && (v265[8] & 1) != 0)
            v9 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(**(_QWORD **)v265 + 40))();
          if (!v18)
          {
            v9 = (_anonymous_namespace_ *)re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(v8 + 296, v15);
            if (v9)
            {
              if ((*(_BYTE *)(v15 + 8) & 1) != 0)
                v19 = *(const char **)(v15 + 16);
              else
                v19 = (const char *)(v15 + 9);
              v20 = (_anonymous_namespace_ *)re::parseConstant((_anonymous_namespace_ *)v265, *((_QWORD *)v12 + 178), v19, *(unsigned __int16 *)(v15 + 32), *(_WORD *)(v15 + 34), (uint64_t)v9);
              if (!v265[0])
              {
                re::DynamicString::DynamicString((re::DynamicString *)v264, (const re::DynamicString *)&v265[8]);
                v275[0] = 0;
                *(_QWORD *)v276 = *(_QWORD *)&v264[0];
                *(_QWORD *)&v277 = *((_QWORD *)&v264[1] + 1);
                *(_OWORD *)&v276[8] = *(_OWORD *)((char *)v264 + 8);
                re::Result<re::TechniqueFunctionConstant,re::DynamicString>::~Result((uint64_t)v265);
                v22 = v208;
                a7 = v209;
                goto LABEL_130;
              }
              if ((*(_BYTE *)(v15 + 8) & 1) != 0)
                v21 = *(const char **)(v15 + 16);
              else
                v21 = (const char *)(v15 + 9);
              re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::TechniqueFunctionConstant&>((uint64_t)v262, (re::DynamicString *)v264, (uint64_t)&v265[8]);
              if (*(_QWORD *)&v264[0] && (BYTE8(v264[0]) & 1) != 0)
                (*(void (**)(void))(**(_QWORD **)&v264[0] + 40))();
              v9 = (_anonymous_namespace_ *)re::Result<re::TechniqueFunctionConstant,re::DynamicString>::~Result((uint64_t)v265);
            }
          }
          v15 += 64;
        }
      }
      v13 = (re::StringID *)((char *)v13 + 8);
    }
    while (v13 != v220);
    LODWORD(v11) = *(_DWORD *)&v262[28];
    v22 = v208;
    v10 = v12;
    a7 = v209;
  }
  else
  {
    v22 = v9;
  }
  if (v11 < *(_DWORD *)(v8 + 324))
  {
    LODWORD(v261[0]) = 0;
    v259 = 0u;
    v260 = 0u;
    *(_QWORD *)((char *)v261 + 4) = 0x7FFFFFFFLL;
    v27 = *(unsigned int *)(v8 + 328);
    v219 = v10;
    v28 = 0;
    if ((_DWORD)v27)
    {
      v29 = (int *)(*(_QWORD *)(v8 + 312) + 8);
      while (1)
      {
        v30 = *v29;
        v29 += 20;
        if (v30 < 0)
          break;
        if (v27 == ++v28)
        {
          LODWORD(v28) = *(_DWORD *)(v8 + 328);
          break;
        }
      }
    }
    if ((_DWORD)v27 != (_DWORD)v28)
    {
      v31 = v28;
      v32 = *(_QWORD *)(v8 + 312);
      do
      {
        if (!re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::containsKey((uint64_t)v262, v32 + 80 * v31 + 16))re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::DynamicString&>((uint64_t)&v259, (re::DynamicString *)(v32 + 80 * v31 + 16), (const re::DynamicString *)(v32 + 80 * v31 + 48));
        v33 = *(_DWORD *)(v8 + 328);
        v32 = *(_QWORD *)(v8 + 312);
        if (v33 <= (int)v28 + 1)
          v33 = v28 + 1;
        while (1)
        {
          v31 = (v28 + 1);
          if (v33 - 1 == (_DWORD)v28)
            break;
          LODWORD(v28) = v28 + 1;
          v34 = v31;
          if ((*(_DWORD *)(v32 + 80 * v31 + 8) & 0x80000000) != 0)
            goto LABEL_47;
        }
        v34 = v33;
LABEL_47:
        LODWORD(v28) = v34;
      }
      while ((_DWORD)v27 != v34);
    }
    v35 = *((_QWORD *)v219 + 15);
    if (v35)
    {
      v36 = (re::StringID *)*((_QWORD *)v219 + 16);
      v210 = (re::StringID *)((char *)v36 + 8 * v35);
      v215 = (uint64_t)(a1[7] + 33);
      while (1)
      {
        v221 = v36;
        v37 = *(_QWORD *)v36;
        *(_QWORD *)v265 = *(_QWORD *)(*(_QWORD *)v36 + 2424);
        v38 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v215, (uint64_t *)v265);
        if (v38)
          v39 = (void **)(v38 + 8);
        else
          v39 = 0;
        v40 = *(_QWORD *)v36;
        if ((*(_BYTE *)(*(_QWORD *)v36 + 2448) & 1) != 0)
          v41 = *(re::ns **)(v40 + 2456);
        else
          v41 = (re::ns *)(v40 + 2449);
        re::mtl::Library::makeFunction(v39, v41, &v258);
        v217 = (_anonymous_namespace_ *)*((_QWORD *)v219 + 178);
        v42 = objc_msgSend(v258, sel_functionConstantsDictionary);
        memset(v256, 0, sizeof(v256));
        LODWORD(v257[0]) = 0;
        *(_QWORD *)((char *)v257 + 4) = 0x7FFFFFFFLL;
        v43 = objc_msgSend(v42, sel_keyEnumerator);
        v44 = objc_msgSend(v43, sel_nextObject);
        if (v44)
        {
          v45 = v44;
          do
          {
            v247 = (char *)objc_msgSend(v45, sel_UTF8String);
            v263 = objc_msgSend(v42, sel_objectForKey_, v45);
            re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::add((uint64_t)v256, &v247, &v263);
            if (v263)

            v45 = objc_msgSend(v43, sel_nextObject);
          }
          while (v45);
        }
        LOBYTE(v264[0]) = 0;
        LOBYTE(v253[0]) = 0;
        v46 = v217;
        v218 = v37 + 48;
        v47 = re::parseFunctionConstants(v46, (uint64_t)v256, (uint64_t)&v259, v264, (uint64_t)v253, v37 + 48, 0, 0, (uint64_t)v265);
        if (LOBYTE(v264[0]))
          re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v264 + 1, v47);
        re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(v256);
        v48 = v265[0];
        v8 = v222;
        if (v265[0])
        {
          v49 = v267;
          if ((_DWORD)v267)
          {
            v50 = 0;
            v51 = (int *)(v266 + 8);
            while (1)
            {
              v52 = *v51;
              v51 += 28;
              if (v52 < 0)
                break;
              if (v267 == ++v50)
              {
                LODWORD(v50) = v267;
                break;
              }
            }
          }
          else
          {
            LODWORD(v50) = 0;
          }
          if ((_DWORD)v267 != (_DWORD)v50)
          {
            v53 = v50;
            v54 = v266;
            do
            {
              re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::TechniqueFunctionConstant&>((uint64_t)v262, (re::DynamicString *)(v54 + 112 * v53 + 16), v54 + 112 * v53 + 48);
              v54 = v266;
              if (v267 <= (int)v50 + 1)
                v55 = v50 + 1;
              else
                v55 = v267;
              v56 = v50;
              while (1)
              {
                v53 = (v56 + 1);
                if (v55 - 1 == v56)
                  break;
                ++v56;
                LODWORD(v50) = v53;
                if ((*(_DWORD *)(v266 + 112 * v53 + 8) & 0x80000000) != 0)
                  goto LABEL_81;
              }
              LODWORD(v50) = v55;
LABEL_81:
              ;
            }
            while (v49 != (_DWORD)v50);
          }
        }
        else
        {
          re::DynamicString::DynamicString((re::DynamicString *)v256, (const re::DynamicString *)&v265[8]);
          v275[0] = 0;
          *(_QWORD *)v276 = v256[0];
          *(_QWORD *)&v277 = v256[3];
          *(_OWORD *)&v276[8] = *(_OWORD *)&v256[1];
        }
        re::Result<re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::DynamicString>::~Result((uint64_t)v265);
        if (v258)

        if (!v48)
          break;
        v57 = *(_DWORD *)&v262[28];
        v58 = *(_DWORD *)(v222 + 324);
        if (*(_DWORD *)&v262[28] >= v58)
          goto LABEL_128;
        v59 = v221;
        v60 = *(_QWORD *)(*(_QWORD *)v221 + 2480);
        if ((v60 & 1) != 0)
          v61 = v60 >> 1;
        else
          v61 = v60 >> 1;
        if (v61)
        {
          *(_QWORD *)v265 = *(_QWORD *)(*(_QWORD *)v221 + 2432);
          v62 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v215, (uint64_t *)v265);
          if (v62)
            v63 = (void **)(v62 + 8);
          else
            v63 = 0;
          v64 = *(_QWORD *)v221;
          if ((*(_BYTE *)(*(_QWORD *)v221 + 2480) & 1) != 0)
            v65 = *(re::ns **)(v64 + 2488);
          else
            v65 = (re::ns *)(v64 + 2481);
          re::mtl::Library::makeFunction(v63, v65, &v258);
          v66 = (_anonymous_namespace_ *)*((_QWORD *)v219 + 178);
          v67 = objc_msgSend(v258, sel_functionConstantsDictionary);
          memset(v256, 0, sizeof(v256));
          LODWORD(v257[0]) = 0;
          *(_QWORD *)((char *)v257 + 4) = 0x7FFFFFFFLL;
          v68 = objc_msgSend(v67, sel_keyEnumerator);
          v69 = objc_msgSend(v68, sel_nextObject);
          if (v69)
          {
            v70 = v69;
            do
            {
              v247 = (char *)objc_msgSend(v70, sel_UTF8String);
              v263 = objc_msgSend(v67, sel_objectForKey_, v70);
              re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::add((uint64_t)v256, &v247, &v263);
              if (v263)

              v70 = objc_msgSend(v68, sel_nextObject);
            }
            while (v70);
          }
          LOBYTE(v286) = 0;
          v279[0] = 0;
          v71 = re::parseFunctionConstants(v66, (uint64_t)v256, (uint64_t)&v259, &v286, (uint64_t)v279, v218, 0, 0, (uint64_t)v265);
          if ((_BYTE)v286)
            re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v286 + 1, v71);
          re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(v256);
          v72 = v265[0];
          v8 = v222;
          if (v265[0])
          {
            v73 = v267;
            if ((_DWORD)v267)
            {
              v74 = 0;
              v75 = (int *)(v266 + 8);
              while (1)
              {
                v76 = *v75;
                v75 += 28;
                if (v76 < 0)
                  break;
                if (v267 == ++v74)
                {
                  LODWORD(v74) = v267;
                  break;
                }
              }
            }
            else
            {
              LODWORD(v74) = 0;
            }
            if ((_DWORD)v267 != (_DWORD)v74)
            {
              v77 = v74;
              v78 = v266;
              do
              {
                re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<re::TechniqueFunctionConstant&>((uint64_t)v262, (re::DynamicString *)(v78 + 112 * v77 + 16), v78 + 112 * v77 + 48);
                v78 = v266;
                if (v267 <= (int)v74 + 1)
                  v79 = v74 + 1;
                else
                  v79 = v267;
                v80 = v74;
                while (1)
                {
                  v77 = (v80 + 1);
                  if (v79 - 1 == v80)
                    break;
                  ++v80;
                  LODWORD(v74) = v77;
                  if ((*(_DWORD *)(v266 + 112 * v77 + 8) & 0x80000000) != 0)
                    goto LABEL_121;
                }
                LODWORD(v74) = v79;
LABEL_121:
                ;
              }
              while (v73 != (_DWORD)v74);
            }
          }
          else
          {
            re::DynamicString::DynamicString((re::DynamicString *)v256, (const re::DynamicString *)&v265[8]);
            v275[0] = 0;
            *(_QWORD *)v276 = v256[0];
            *(_QWORD *)&v277 = v256[3];
            *(_OWORD *)&v276[8] = *(_OWORD *)&v256[1];
          }
          re::Result<re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::DynamicString>::~Result((uint64_t)v265);
          if (v258)

          if (!v72)
            break;
          v57 = *(_DWORD *)&v262[28];
          v58 = *(_DWORD *)(v222 + 324);
          v59 = v221;
        }
        if (v57 < v58)
        {
          v36 = (re::StringID *)((char *)v59 + 8);
          if (v36 != v210)
            continue;
        }
        goto LABEL_128;
      }
      re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v259);
      v22 = v208;
      a7 = v209;
      goto LABEL_130;
    }
LABEL_128:
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v259);
    a7 = v209;
    v22 = v208;
  }
  re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v265, (uint64_t)v262);
  v275[0] = 1;
  v278 = 0;
  *(_OWORD *)v276 = *(_OWORD *)v265;
  memset(v265, 0, sizeof(v265));
  *(_QWORD *)&v276[16] = *(_QWORD *)&v265[16];
  v277 = v266;
  v266 = xmmword_2260F5A80;
  re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v265);
LABEL_130:
  re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v262);
  if (!v275[0])
  {
    re::DynamicString::DynamicString((re::DynamicString *)v265, (const re::DynamicString *)v276);
    *(_BYTE *)a7 = 0;
    *(_QWORD *)(a7 + 8) = *(_QWORD *)v265;
    *(_QWORD *)(a7 + 32) = v266;
    *(_OWORD *)(a7 + 16) = *(_OWORD *)&v265[8];
    return (re::DynamicString *)re::Result<re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::DynamicString>::~Result((uint64_t)v275);
  }
  *a6 = re::parseMaterialAssetMetadata((_anonymous_namespace_ *)v8, *((_QWORD *)v22 + 93), (uint64_t)v276, a3);
  v81 = atomic_load((unsigned __int8 *)&qword_254106160);
  if ((v81 & 1) == 0 && __cxa_guard_acquire(&qword_254106160))
  {
    _MergedGlobals_138 = re::hashString((re *)"OpaqueAR", v201);
    __cxa_guard_release(&qword_254106160);
  }
  v82 = *((_QWORD *)v22 + 93) + 16;
  *(_QWORD *)v265 = _MergedGlobals_138;
  if (!re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(v82, (uint64_t *)v265))
  {
    v83 = atomic_load((unsigned __int8 *)&qword_254106170);
    if ((v83 & 1) == 0 && __cxa_guard_acquire(&qword_254106170))
    {
      qword_254106168 = re::hashString((re *)"Opaque", v203);
      __cxa_guard_release(&qword_254106170);
    }
    v84 = *((_QWORD *)v22 + 93) + 16;
    *(_QWORD *)v265 = qword_254106168;
    if (re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(v84, (uint64_t *)v265))
    {
      v85 = *((_QWORD *)v22 + 93) + 16;
      *(_QWORD *)v265 = _MergedGlobals_138;
      re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<unsigned long long const&>(v85, (unint64_t *)v265, &qword_254106168);
    }
  }
  v86 = atomic_load((unsigned __int8 *)&qword_254106180);
  if ((v86 & 1) == 0 && __cxa_guard_acquire(&qword_254106180))
  {
    qword_254106178 = re::hashString((re *)"TransparentAR", v202);
    __cxa_guard_release(&qword_254106180);
  }
  v87 = *((_QWORD *)v22 + 93) + 16;
  *(_QWORD *)v265 = qword_254106178;
  v88 = re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(v87, (uint64_t *)v265);
  if (!v88)
  {
    v89 = atomic_load((unsigned __int8 *)&qword_254106190);
    if ((v89 & 1) == 0 && __cxa_guard_acquire(&qword_254106190))
    {
      qword_254106188 = re::hashString((re *)"Transparent", v204);
      __cxa_guard_release(&qword_254106190);
    }
    v90 = *((_QWORD *)v22 + 93) + 16;
    *(_QWORD *)v265 = qword_254106188;
    v88 = re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(v90, (uint64_t *)v265);
    if (v88)
    {
      v91 = *((_QWORD *)v22 + 93) + 16;
      *(_QWORD *)v265 = qword_254106178;
      re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<unsigned long long const&>(v91, (unint64_t *)v265, &qword_254106188);
    }
  }
  v261[0] = 0;
  *(_QWORD *)&v260 = 0;
  v259 = 0uLL;
  DWORD2(v260) = 0;
  v257[0] = 0;
  memset(v256, 0, 28);
  v92 = *(_QWORD *)(v8 + 384);
  if (!v92)
  {
    v192 = 0;
    v191 = 0;
    v190 = 0;
    goto LABEL_291;
  }
  v93 = *(unsigned __int8 **)(v8 + 400);
  v216 = &v93[272 * v92];
  v94 = v8;
  v95 = &v267;
  v211 = v94 + 9;
  do
  {
    *(_QWORD *)&v265[8] = 0;
    *(_QWORD *)&v265[16] = &str_110;
    *(_QWORD *)&v266 = 0;
    *((_QWORD *)&v266 + 1) = &str_110;
    *v95 = 0;
    v95[1] = 0;
    *((_DWORD *)v95 + 4) = 0;
    v273 = 0u;
    v274 = 0u;
    v271 = 0u;
    v272 = 0u;
    v270 = 0u;
    v96 = *((_QWORD *)v93 + 10);
    if (v96)
    {
      v97 = atomic_load((unsigned int *)(v96 + 704));
      if (v97 == 3)
      {
        v98 = re::AssetHandle::assetInfo((re::AssetHandle *)(v93 + 72));
        if ((v98[17] & 1) != 0)
          v99 = (char *)v98[18];
        else
          v99 = (char *)v98 + 137;
        re::DynamicString::format((re::DynamicString *)"Found invalid linkedFunctionLibrary asset (%s) in FunctionLink. loadFailed() returned true.", (re::DynamicString *)v264, v99);
        goto LABEL_254;
      }
    }
    re::AssetHandle::AssetHandle((re::AssetHandle *)v252, (const re::AssetHandle *)(v93 + 72));
    v100 = re::AssetHandle::assetInfo((re::AssetHandle *)(v93 + 72));
    if ((v100[17] & 1) != 0)
      v101 = (char *)v100[18];
    else
      v101 = (char *)v100 + 137;
    re::DynamicString::format((re::DynamicString *)"Searching for linkedFunctionLibrary asset '%s'", (re::DynamicString *)v264, v101);
    if ((BYTE8(v264[0]) & 1) != 0)
      v102 = *(char **)&v264[1];
    else
      v102 = (char *)v264 + 9;
    re::validateAssetType((const re::AssetHandle *)v252, (uint64_t)v102);
    if (*(_QWORD *)&v264[0] && (BYTE8(v264[0]) & 1) != 0)
      (*(void (**)(void))(**(_QWORD **)&v264[0] + 40))();
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v252);
    v104 = *((_QWORD *)v93 + 10);
    if (!v104)
    {
      re::ShaderGraphAsset::assetType(v103);
LABEL_166:
      re::AssetHandle::AssetHandle((re::AssetHandle *)v251, (const re::AssetHandle *)(v93 + 72));
      re::getLibraryHash((re *)&v286, (uint64_t)a1, (const re::AssetHandle *)v251);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v251);
      if ((_BYTE)v286)
      {
        v267 = *((_QWORD *)&v286 + 1);
        if (*((_QWORD *)&v286 + 1))
          goto LABEL_168;
        v128 = re::AssetHandle::assetInfo((re::AssetHandle *)(v93 + 72));
        if ((v128[17] & 1) != 0)
          v129 = (char *)v128[18];
        else
          v129 = (char *)v128 + 137;
        re::DynamicString::format((re::DynamicString *)"Could not find hash for linkedFunctionLibrary asset (%s) in FunctionLink.", (re::DynamicString *)v264, v129);
        v126 = (__n128)v264[0];
        v130 = v264[1];
        *(_BYTE *)a7 = 0;
        *(__n128 *)(a7 + 8) = v126;
        *(_OWORD *)(a7 + 24) = v130;
      }
      else
      {
        v125 = v211;
        if ((*(_BYTE *)(v222 + 8) & 1) != 0)
          v125 = *(_QWORD *)(v222 + 16);
        re::DynamicString::format((re::DynamicString *)"[%s] - unable to get linked function (%s) library hash", (re::DynamicString *)v264, v125, *((_QWORD *)&v266 + 1));
        v126 = (__n128)v264[0];
        v127 = v264[1];
        *(_BYTE *)a7 = 0;
        *(__n128 *)(a7 + 8) = v126;
        *(_OWORD *)(a7 + 24) = v127;
      }
      v131 = 1;
      goto LABEL_277;
    }
    v105 = *(uint64_t **)(v104 + 264);
    if (v105 != re::ShaderGraphAsset::assetType(v103))
      goto LABEL_166;
    v106 = (_anonymous_namespace_ *)re::AssetHandle::loadedAsset<re::ShaderGraphAsset>((re::ShaderGraphAsset *)(v93 + 72));
    if (!v106)
    {
      v132 = "ShaderGraphAsset in FunctionLink was not loaded.";
      goto LABEL_253;
    }
    v107 = *((_QWORD *)v106 + 6);
    if (v107)
      v106 = (_anonymous_namespace_ *)(id)(v107 + 8);
    v108 = v268;
    v268 = v107;
    if (v108)

LABEL_168:
    v265[0] = *v93;
    v109 = *((_QWORD *)v93 + 6);
    if ((v109 & 1) != 0)
      v110 = v109 >> 1;
    else
      v110 = v109 >> 1;
    if (!v110)
    {
      v132 = "Found empty linkedFunctionName in FunctionLink.";
LABEL_253:
LABEL_254:
      v126 = (__n128)v264[0];
      v174 = v264[1];
      *(_BYTE *)a7 = 0;
      *(__n128 *)(a7 + 8) = v126;
      *(_OWORD *)(a7 + 24) = v174;
      v131 = 1;
      goto LABEL_277;
    }
    re::StringID::StringID((re::StringID *)&v286, (const re::DynamicString *)(v93 + 40));
    v111 = v286;
    *(_QWORD *)&v286 = 0;
    *((_QWORD *)&v286 + 1) = &str_110;
    v112 = v266;
    v113 = *((_QWORD *)&v266 + 1);
    v266 = v111;
    *(_QWORD *)&v264[0] = v111 & 0xFFFFFFFFFFFFFFFELL | v112 & 1;
    *((_QWORD *)&v264[0] + 1) = v113;
    re::StringID::destroyString((re::StringID *)v264);
    re::StringID::destroyString((re::StringID *)&v286);
    if (*v93 - 1 > 1)
      goto LABEL_178;
    v115 = *((_QWORD *)v93 + 2);
    if ((v115 & 1) != 0)
      v116 = v115 >> 1;
    else
      v116 = v115 >> 1;
    if (!v116)
    {
      v132 = "Found empty shaderFunctionName in FunctionLink.";
      goto LABEL_253;
    }
    re::StringID::StringID((re::StringID *)&v286, (const re::DynamicString *)(v93 + 8));
    v117 = v286;
    *(_QWORD *)&v286 = 0;
    *((_QWORD *)&v286 + 1) = &str_110;
    v118 = v265[8];
    v119 = *(_QWORD *)&v265[16];
    *(_OWORD *)&v265[8] = v117;
    *(_QWORD *)&v264[0] = v117 & 0xFFFFFFFFFFFFFFFELL | v118 & 1;
    *((_QWORD *)&v264[0] + 1) = v119;
    re::StringID::destroyString((re::StringID *)v264);
    re::StringID::destroyString((re::StringID *)&v286);
LABEL_178:
    v120 = *((_QWORD *)v93 + 14);
    if (v120)
    {
      v121 = 0;
      v122 = (int *)*((_QWORD *)v93 + 16);
      v123 = 4 * v120;
      do
      {
        v124 = *v122++;
        v121 |= v124;
        v123 -= 4;
      }
      while (v123);
    }
    else
    {
      v121 = 0;
    }
    v269 = v121;
    memset(v262, 0, 36);
    *(_QWORD *)&v262[36] = 0x7FFFFFFFLL;
    v133 = *((_QWORD *)v93 + 10);
    if (!v133)
    {
      v135 = re::ShaderLibraryAsset::assetType(v114);
LABEL_228:
      re::ShaderGraphAsset::assetType((re::ShaderGraphAsset *)v135);
LABEL_229:
      v161 = v211;
      if ((*(_BYTE *)(v222 + 8) & 1) != 0)
        v161 = *(_QWORD *)(v222 + 16);
      re::DynamicString::format((re::DynamicString *)"%s [LinkedFunction %s]", (re::DynamicString *)&v247, v161, *((_QWORD *)&v266 + 1));
      v255 = 0;
      memset(v253, 0, sizeof(v253));
      v254 = 0;
      if ((v248 & 1) != 0)
        v162 = v250;
      else
        v162 = (_anonymous_namespace_ *)v249;
      v131 = 1;
      v245[0] = 1;
      re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)v246, (uint64_t)(v93 + 184));
      v241[0] = 1;
      re::DynamicArray<BOOL>::DynamicArray((uint64_t)v242, (uint64_t *)v93 + 29);
      v164 = re::parseFunctionConstants(v162, (uint64_t)v262, (uint64_t)(v93 + 136), v245, (uint64_t)v241, 0, 1, 0, (uint64_t)&v286);
      if (v241[0])
      {
        v163 = (_anonymous_namespace_ *)v242[0];
        if (v242[0])
        {
          if (v244)
            v163 = (_anonymous_namespace_ *)(*(uint64_t (**)(double))(*(_QWORD *)v242[0] + 40))(v164);
          v244 = 0;
          memset(v242, 0, sizeof(v242));
          ++v243;
        }
      }
      if (v245[0])
        re::HashTable<re::DynamicString,re::ConstantDataEntry,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v246, v164);
      if ((_BYTE)v286)
      {
        v165 = DWORD1(v288);
        v166 = DWORD2(v288);
        if (DWORD2(v288))
        {
          v167 = 0;
          v168 = (int *)(*((_QWORD *)&v287 + 1) + 8);
          while (1)
          {
            v169 = *v168;
            v168 += 28;
            if (v169 < 0)
              break;
            if (DWORD2(v288) == ++v167)
            {
              LODWORD(v167) = DWORD2(v288);
              break;
            }
          }
        }
        else
        {
          LODWORD(v167) = 0;
        }
        if (DWORD2(v288) != (_DWORD)v167)
        {
          v175 = 0;
          v176 = v167;
          do
          {
            v177 = *((_QWORD *)&v270 + 1);
            if (*((_QWORD *)&v270 + 1) <= v175)
            {
              v263 = 0;
              memset(v264, 0, 80);
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v279 = 136315906;
              *(_QWORD *)&v279[4] = "operator[]";
              v280 = 1024;
              v281 = 468;
              v282 = 2048;
              v283 = v175;
              v284 = 2048;
              v285 = v177;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
            v178 = *((_QWORD *)&v287 + 1) + 112 * v176;
            v179 = re::DynamicString::operator=((re::DynamicString *)(v271 + (v175 << 6)), (re::DynamicString *)(v178 + 48));
            *((_DWORD *)v179 + 8) = *(_DWORD *)(v178 + 80);
            re::FixedArray<unsigned char>::operator=((uint64_t *)v179 + 5, (uint64_t *)(v178 + 88));
            ++v175;
            if (DWORD2(v288) <= (v167 + 1))
              v180 = v167 + 1;
            else
              v180 = DWORD2(v288);
            while (1)
            {
              v176 = (v167 + 1);
              if (v180 - 1 == (_DWORD)v167)
                break;
              LODWORD(v167) = v167 + 1;
              v181 = v176;
              if ((*(_DWORD *)(*((_QWORD *)&v287 + 1) + 112 * v176 + 8) & 0x80000000) != 0)
                goto LABEL_266;
            }
            v181 = v180;
LABEL_266:
            LODWORD(v167) = v181;
          }
          while (v166 != v181);
        }
        v182 = (_anonymous_namespace_ *)re::TechniqueDefinitionBuilder::hashFunctionConstants(v271, *((uint64_t *)&v270 + 1));
        *((_QWORD *)&v271 + 1) = v182;
        a7 = v209;
        switch(*v93)
        {
          case 1u:
          case 3u:
            v183 = (_anonymous_namespace_ *)&v259;
            goto LABEL_270;
          case 2u:
          case 4u:
            v183 = (_anonymous_namespace_ *)v256;
LABEL_270:
            re::DynamicArray<re::LinkedFunction>::add(v183, (uint64_t)v265);
            v131 = 0;
            break;
          default:
            v184 = v264[0];
            v185 = v264[1];
            a7 = v209;
            *(_BYTE *)v209 = 0;
            *(_OWORD *)(v209 + 8) = v184;
            *(_OWORD *)(v209 + 24) = v185;
            v131 = 1;
            break;
        }
      }
      else
      {
        v170 = (_anonymous_namespace_ *)v249;
        if ((v248 & 1) != 0)
          v170 = v250;
        v171 = (char *)&v287 + 1;
        if ((v287 & 1) != 0)
          v171 = (char *)*((_QWORD *)&v287 + 1);
        re::DynamicString::format((re::DynamicString *)"Failed to parse %s function constants: %s", (re::DynamicString *)v264, v170, v171);
        v172 = v264[0];
        v173 = v264[1];
        *(_BYTE *)a7 = 0;
        *(_OWORD *)(a7 + 8) = v172;
        *(_OWORD *)(a7 + 24) = v173;
      }
      re::Result<re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::DynamicString>::~Result((uint64_t)&v286);
      re::DynamicArray<re::TechniqueFunctionConstant>::deinit((uint64_t)v253);
      if (v247 && (v248 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v247 + 40))();
      goto LABEL_276;
    }
    v134 = *(uint64_t **)(v133 + 264);
    v135 = re::ShaderLibraryAsset::assetType(v114);
    if (v134 != v135)
      goto LABEL_228;
    v136 = re::AssetHandle::loadedAsset<re::ShaderLibraryAsset>((re::ShaderLibraryAsset *)(v93 + 72));
    if (v136)
    {
      re::ShaderManager::makeFunction(a1[7], *(_QWORD *)(v136 + 72), *((re::ns **)&v266 + 1), 0, v279);
      v137 = objc_msgSend(*(id *)v279, sel_functionConstantsDictionary);
      memset(v264, 0, 36);
      *(_QWORD *)((char *)&v264[2] + 4) = 0x7FFFFFFFLL;
      v138 = objc_msgSend(v137, sel_keyEnumerator);
      v139 = objc_msgSend(v138, sel_nextObject);
      if (v139)
      {
        v140 = v139;
        do
        {
          *(_QWORD *)&v286 = objc_msgSend(v140, sel_UTF8String);
          v253[0] = objc_msgSend(v137, sel_objectForKey_, v140);
          re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::add((uint64_t)v264, (char **)&v286, v253);
          if (v253[0])

          v140 = objc_msgSend(v138, sel_nextObject);
        }
        while (v140);
      }
      v141 = *(_QWORD *)&v264[0];
      if (!*(_QWORD *)v262 || *(_QWORD *)v262 == *(_QWORD *)&v264[0])
      {
        *(_QWORD *)&v264[0] = *(_QWORD *)v262;
        v188 = *(_OWORD *)&v262[8];
        *(_QWORD *)v262 = v141;
        *(_QWORD *)&v262[8] = *((_QWORD *)&v264[0] + 1);
        *(_QWORD *)&v262[16] = *(_QWORD *)&v264[1];
        *(_OWORD *)((char *)v264 + 8) = v188;
        v189 = *(_OWORD *)&v262[24];
        *(_OWORD *)&v262[24] = *(_OWORD *)((char *)&v264[1] + 8);
        *(_OWORD *)((char *)&v264[1] + 8) = v189;
      }
      else
      {
        if (*(_DWORD *)&v262[28])
        {
          v142 = a7;
          if (*(_DWORD *)&v262[24])
            memset_pattern16(*(void **)&v262[8], &memset_pattern_154_0, 4 * *(unsigned int *)&v262[24]);
          v143 = *(unsigned int *)&v262[32];
          if (*(_DWORD *)&v262[32])
          {
            v144 = 0;
            v145 = 0;
            do
            {
              v146 = *(_QWORD *)&v262[16] + v144;
              v147 = *(_DWORD *)(*(_QWORD *)&v262[16] + v144 + 8);
              if (v147 < 0)
              {
                *(_DWORD *)(v146 + 8) = v147 & 0x7FFFFFFF;
                v148 = *(void **)(v146 + 24);
                if (v148)
                {

                  *(_QWORD *)(v146 + 24) = 0;
                  v143 = *(unsigned int *)&v262[32];
                }
              }
              ++v145;
              v144 += 32;
            }
            while (v145 < v143);
          }
          *(_DWORD *)&v262[28] = 0;
          *(_DWORD *)&v262[32] = 0;
          *(_DWORD *)&v262[36] = 0x7FFFFFFF;
          ++*(_DWORD *)&v262[40];
          a7 = v142;
        }
        if (v141)
        {
          if (*(_DWORD *)&v262[24] < HIDWORD(v264[1]))
            re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::setCapacity((uint64_t)v262, HIDWORD(v264[1]));
          v149 = LODWORD(v264[2]);
          if (LODWORD(v264[2]))
          {
            v150 = 0;
            v151 = 0;
            v205 = v95;
            do
            {
              v152 = (unint64_t *)(*(_QWORD *)&v264[1] + v150);
              if ((*(_DWORD *)(*(_QWORD *)&v264[1] + v150 + 8) & 0x80000000) != 0)
              {
                v153 = *v152;
                v154 = *v152 % *(unsigned int *)&v262[24];
                v155 = *(unsigned int *)&v262[36];
                if (*(_DWORD *)&v262[36] == 0x7FFFFFFF)
                {
                  v155 = *(unsigned int *)&v262[32];
                  v156 = *(_DWORD *)&v262[32];
                  if (*(_DWORD *)&v262[32] == *(_DWORD *)&v262[24])
                  {
                    re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::setCapacity((uint64_t)v262, 2 * *(_DWORD *)&v262[28]);
                    v154 = v153 % *(unsigned int *)&v262[24];
                    v156 = *(_DWORD *)&v262[32];
                  }
                  *(_DWORD *)&v262[32] = v156 + 1;
                  v157 = *(_QWORD *)&v262[16];
                  v158 = *(_DWORD *)(*(_QWORD *)&v262[16] + 32 * v155 + 8);
                }
                else
                {
                  v157 = *(_QWORD *)&v262[16];
                  v158 = *(_DWORD *)(*(_QWORD *)&v262[16] + 32 * *(unsigned int *)&v262[36] + 8);
                  *(_DWORD *)&v262[36] = v158 & 0x7FFFFFFF;
                }
                *(_DWORD *)(v157 + 32 * v155 + 8) = v158 | 0x80000000;
                v159 = v154;
                *(_DWORD *)(*(_QWORD *)&v262[16] + 32 * v155 + 8) = *(_DWORD *)(*(_QWORD *)&v262[16] + 32 * v155 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)&v262[8] + 4 * v154);
                *(_QWORD *)(*(_QWORD *)&v262[16] + 32 * v155) = v153;
                *(_QWORD *)(*(_QWORD *)&v262[16] + 32 * v155 + 16) = v152[2];
                v160 = *(_QWORD *)&v262[16] + 32 * v155;
                *(_QWORD *)(v160 + 24) = (id)v152[3];
                *(_DWORD *)(*(_QWORD *)&v262[8] + 4 * v159) = v155;
                ++*(_DWORD *)&v262[28];
                v149 = LODWORD(v264[2]);
                v95 = v205;
              }
              ++v151;
              v150 += 32;
            }
            while (v151 < v149);
          }
          ++*(_DWORD *)&v262[40];
          a7 = v209;
        }
      }
      re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v264);
      if (*(_QWORD *)v279)

      goto LABEL_229;
    }
    v186 = v264[0];
    v187 = v264[1];
    *(_BYTE *)a7 = 0;
    *(_OWORD *)(a7 + 8) = v186;
    *(_OWORD *)(a7 + 24) = v187;
    v131 = 1;
LABEL_276:
    v126.n128_f64[0] = re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v262);
LABEL_277:
    if (*((_QWORD *)&v273 + 1))
    {
      if ((_QWORD)v274)
      {
        (*(void (**)(__n128))(**((_QWORD **)&v273 + 1) + 40))(v126);
        v274 = 0uLL;
      }
      *((_QWORD *)&v273 + 1) = 0;
    }
    re::FixedArray<re::TypedArgument>::deinit(&v272);
    re::FixedArray<re::TechniqueFunctionConstant>::deinit(&v270);
    if (v268)
    {

      v268 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v266);
    re::StringID::destroyString((re::StringID *)&v265[8]);
    if (v131)
      goto LABEL_320;
    v93 += 272;
  }
  while (v93 != v216);
  v190 = v260;
  v191 = v256[2];
  v192 = v261[0];
  v8 = v222;
  v22 = v208;
LABEL_291:
  v288 = 0u;
  v287 = 0u;
  v286 = 0u;
  if (v190)
  {
    v194 = v287;
    v195 = 144 * v190;
    do
    {
      re::ObjectHelper::move<re::LinkedFunction>(v192, v194);
      v192 += 144;
      v194 += 144;
      v195 -= 144;
    }
    while (v195);
  }
  if (v191)
  {
    v196 = v257[0];
    v197 = *((_QWORD *)&v288 + 1);
    v198 = 144 * v191;
    do
    {
      re::ObjectHelper::move<re::LinkedFunction>(v196, v197);
      v196 += 144;
      v197 += 144;
      v198 -= 144;
    }
    while (v198);
  }
  v199 = *((_QWORD *)v22 + 93);
  v240 = v199;
  if (v199)
    v200 = (id)(v199 + 8);
  v223[0] = *(_BYTE *)(v8 + 344);
  if (v223[0])
    v223[1] = *(_BYTE *)(v8 + 345);
  if (*(_BYTE *)(v8 + 346))
    v225 = *(_BYTE *)(v8 + 347);
  if (*(_BYTE *)(v8 + 348))
    v227 = *(_BYTE *)(v8 + 349);
  if (*(_BYTE *)(v8 + 350))
    v229 = *(_BYTE *)(v8 + 351);
  if (*(_BYTE *)(v8 + 352))
    v231 = *(_BYTE *)(v8 + 353);
  if (*(_BYTE *)(v8 + 354))
    v233 = *(_BYTE *)(v8 + 355);
  if (*(_BYTE *)(v8 + 356))
    v235 = *(_BYTE *)(v8 + 357);
  if (*(_BYTE *)(v8 + 358))
    v237 = *(_BYTE *)(v8 + 359);
  if (*(_BYTE *)(v8 + 360))
    v239 = *(_BYTE *)(v8 + 361);
  re::MaterialBuilder::MaterialBuilder((uint64_t)v265, &v240, a5, (uint64_t *)v276, v223, (uint64_t *)&v286, v8, a4);
  if (v199)

  re::MaterialBuilder::MaterialBuilder((uint64_t)v264, (uint64_t)v265);
  *(_BYTE *)a7 = 1;
  re::MaterialBuilder::MaterialBuilder(a7 + 8, (uint64_t)v264);
  re::MaterialBuilder::~MaterialBuilder((re::MaterialBuilder *)v264);
  re::MaterialBuilder::~MaterialBuilder((re::MaterialBuilder *)v265);
  re::FixedArray<re::LinkedFunction>::deinit((_QWORD *)&v287 + 1);
  re::FixedArray<re::LinkedFunction>::deinit(&v286);
LABEL_320:
  re::DynamicArray<re::LinkedFunction>::deinit((uint64_t)v256);
  re::DynamicArray<re::LinkedFunction>::deinit((uint64_t)&v259);
  return (re::DynamicString *)re::Result<re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::DynamicString>::~Result((uint64_t)v275);
}

BOOL re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::containsKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (*a2 % (unint64_t)*(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 24 * v3 + 8) == v2)
    return 1;
  do
  {
    LODWORD(v3) = *(_DWORD *)(v5 + 24 * v3) & 0x7FFFFFFF;
    result = (_DWORD)v3 != 0x7FFFFFFF;
  }
  while ((_DWORD)v3 != 0x7FFFFFFF && *(_QWORD *)(v5 + 24 * v3 + 8) != v2);
  return result;
}

void re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addNew<unsigned long long const&>(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  v7 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v7 = v6 % *(unsigned int *)(a1 + 24);
    v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v7);
    if ((_DWORD)v8 != 0x7FFFFFFF)
    {
      v13 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v13 + 24 * v8 + 8) == v6)
        return;
      while (1)
      {
        LODWORD(v8) = *(_DWORD *)(v13 + 24 * v8) & 0x7FFFFFFF;
        if ((_DWORD)v8 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v13 + 24 * v8 + 8) == v6)
          return;
      }
    }
  }
  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v7) = v6 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
      v6 = *a2;
    }
    else
    {
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v9);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v9);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v14 = 24 * v9;
  *(_DWORD *)(v11 + v14) = v12 | 0x80000000;
  v15 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9) & 0x80000000 | *(_DWORD *)(v15 + 4 * v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9 + 8) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v9 + 16) = *a3;
  *(_DWORD *)(v15 + 4 * v7) = v9;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
}

void re::validateAssetType(const re::AssetHandle *a1, uint64_t a2)
{
  re::AssetHandle *v4;
  _anonymous_namespace_ *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  re *v19;
  NSObject *v20;
  uint64_t v21;
  _BYTE v22[8];
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  void *__dst;
  uint64_t v29;
  __int128 __src;
  int v31;
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint8_t buf[32];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v4 = re::AssetHandle::AssetHandle((re::AssetHandle *)v22, a1);
  *(_QWORD *)&__src = re::ShaderLibraryAsset::assetType(v4);
  *((_QWORD *)&__src + 1) = re::ShaderGraphAsset::assetType((re::ShaderGraphAsset *)__src);
  __dst = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::AssetType const*>::setCapacity(&v24, 2uLL);
  ++v27;
  v6 = v26;
  if (v26 == -1)
  {
    v29 = 0;
    v41 = 0u;
    v42 = 0u;
    v40 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v31 = 136315906;
    v32 = "copy";
    v33 = 1024;
    v34 = 643;
    v35 = 2048;
    v36 = 0;
    v37 = 2048;
    v38 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v26 > 1)
  {
    v9 = (char *)__dst;
    *(_OWORD *)__dst = __src;
  }
  else
  {
    if (v25 <= 1)
    {
      if (v24)
      {
        v7 = 2 * v25;
        if (2 * v25 <= 2)
          v7 = 2;
        if (v25)
          v8 = v7;
        else
          v8 = 8;
      }
      else
      {
        v8 = 2;
      }
      re::DynamicArray<re::AssetType const*>::setCapacity(&v24, v8);
    }
    v10 = v26;
    v9 = (char *)__dst;
    v11 = (char *)&__src + 8 * v26;
    if (v26)
    {
      memcpy(__dst, &__src, 8 * v26);
      v12 = 16 - 8 * v10;
    }
    else
    {
      v12 = 16;
    }
    memcpy(&v9[8 * v10], v11, v12);
    v6 = 2;
  }
  v13 = 0;
  v14 = 8 * v6 - 8;
  do
  {
    if (v23)
      v15 = *(_QWORD *)(v23 + 264);
    else
      v15 = 0;
    v16 = *(_QWORD *)&v9[v13];
    v17 = v15 == v16 || v14 == v13;
    v13 += 8;
  }
  while (!v17);
  if (v24)
    v18 = v9 == 0;
  else
    v18 = 1;
  if (!v18)
    (*(void (**)(void))(*v24 + 40))();
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v22);
  if (v15 != v16)
  {
    v20 = *re::assetsLogObjects(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      v21 = **(_QWORD **)(*((_QWORD *)a1 + 1) + 264);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v21;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = a2;
      _os_log_error_impl(&dword_224FE9000, v20, OS_LOG_TYPE_ERROR, "MaterialCompiler: validateAssetType failed for asset type %s. Caller: %s", buf, 0x16u);
    }
  }
}

uint64_t re::AssetHandle::loadedAsset<re::ShaderGraphAsset>(re::ShaderGraphAsset *a1)
{
  uint64_t *v2;

  if (!*((_QWORD *)a1 + 1))
    return 0;
  v2 = re::ShaderGraphAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

uint64_t re::AssetHandle::loadedAsset<re::ShaderLibraryAsset>(re::ShaderLibraryAsset *a1)
{
  uint64_t *v2;

  if (!*((_QWORD *)a1 + 1))
    return 0;
  v2 = re::ShaderLibraryAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

_anonymous_namespace_ *re::DynamicArray<re::LinkedFunction>::add(_anonymous_namespace_ *result, uint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = result;
  v4 = *((_QWORD *)result + 1);
  v5 = *((_QWORD *)result + 2);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)result)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::LinkedFunction>::setCapacity(result, v10);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::LinkedFunction>::setCapacity(v3, v6);
        ++*((_DWORD *)v3 + 6);
      }
    }
    v5 = *((_QWORD *)v3 + 2);
  }
  v11 = *((_QWORD *)v3 + 4) + 144 * v5;
  *(_BYTE *)v11 = *(_BYTE *)a2;
  v12 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(v11 + 8) & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = &str_110;
  v13 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v11 + 24) = *(_QWORD *)(v11 + 24) & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  *(_QWORD *)(v11 + 24) = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL | v13 & 1;
  v14 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v11 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = &str_110;
  v15 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v11 + 40) = v14;
  *(_QWORD *)(v11 + 48) = v15;
  *(_QWORD *)(a2 + 48) = 0;
  *(_DWORD *)(v11 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(v11 + 72) = 0;
  *(_QWORD *)(v11 + 80) = 0;
  *(_QWORD *)(v11 + 64) = 0;
  v16 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(v11 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(v11 + 72) = v16;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v17 = *(_QWORD *)(v11 + 80);
  v18 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(v11 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = v17;
  *(_QWORD *)(v11 + 88) = v18;
  *(_QWORD *)(v11 + 96) = 0;
  *(_QWORD *)(v11 + 104) = 0;
  *(_QWORD *)(v11 + 112) = 0;
  v19 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(v11 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(v11 + 104) = v19;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  v20 = *(_QWORD *)(v11 + 112);
  *(_QWORD *)(v11 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = v20;
  *(_QWORD *)(v11 + 120) = 0;
  *(_QWORD *)(v11 + 128) = 0;
  *(_QWORD *)(v11 + 136) = 0;
  v21 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(v11 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(v11 + 128) = v21;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  v22 = *(_QWORD *)(v11 + 136);
  *(_QWORD *)(v11 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = v22;
  ++*((_QWORD *)v3 + 2);
  ++*((_DWORD *)v3 + 6);
  return result;
}

re::DynamicString *re::MaterialCompiler::getCurrentCompiledAssetInfo@<X0>(re::MaterialCompiler *this@<X0>, uint64_t a2@<X8>)
{
  re::MaterialAsset *v3;
  const char *v5[2];

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v3 = (re::MaterialAsset *)re::DynamicString::setCapacity((_QWORD *)(a2 + 8), 0);
  *(_QWORD *)a2 = 0x100000001;
  v5[0] = (const char *)*re::MaterialAsset::assetType(v3);
  v5[1] = (const char *)strlen(v5[0]);
  return re::DynamicString::operator=((re::DynamicString *)(a2 + 8), (uint64_t)v5);
}

__guard re::MaterialCompiler::assetIntrospectionType(re::MaterialCompiler *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::MaterialAsset>(void)::info = re::introspect_MaterialAsset(0);
    }
  }
  return v2[434];
}

_QWORD *re::MaterialCompiler::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, re::MaterialCompiler::getSupportedExtensions(void)const::supportedExtensions);
}

re *re::MaterialCompiler::compile@<X0>(re::MaterialCompiler *this@<X0>, re *a2@<X1>, re::AssetSerializationScheme *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  char *v9;
  re *result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[8];
  re *v20;
  char v21;

  v8 = re::globalAllocators(this);
  v9 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 1896, 8);
  bzero(v9, 0x768uLL);
  re::MaterialAsset::MaterialAsset((re::MaterialAsset *)v9);
  result = (re *)re::compileMaterialFile(v9 + 8, a2, a3, (uint64_t)v19);
  if (v19[0])
  {
    *(_BYTE *)a4 = 1;
    *(_QWORD *)(a4 + 8) = v9;
  }
  else
  {
    v11 = re::globalAllocators(result)[2];
    (**(void (***)(char *))v9)(v9);
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v11 + 40))(v11, v9);
    *(_QWORD *)&v15 = 100;
    *((_QWORD *)&v15 + 1) = &re::AssetErrorCategory(void)::instance;
    re::DynamicString::DynamicString((re::DynamicString *)&v16, (const re::DynamicString *)&v20);
    v12 = v16;
    *(_OWORD *)(a4 + 8) = v15;
    v13 = v17;
    v14 = v18;
    *(_BYTE *)a4 = 0;
    *(_OWORD *)(a4 + 24) = v12;
    *(_QWORD *)(a4 + 40) = v13;
    *(_QWORD *)(a4 + 48) = v14;
    result = v20;
    if (v20)
    {
      if ((v21 & 1) != 0)
        return (re *)(*(uint64_t (**)(void))(*(_QWORD *)v20 + 40))();
    }
  }
  return result;
}

re *re::MaterialCompiler::deleteAsset(re *this, void (***a2)(_QWORD))
{
  uint64_t v3;

  if (a2)
  {
    v3 = re::globalAllocators(this)[2];
    (**a2)(a2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, a2);
  }
  return this;
}

re::DynamicString *re::MaterialDefinitionCompiler::getCurrentCompiledAssetInfo@<X0>(re::MaterialDefinitionCompiler *this@<X0>, uint64_t a2@<X8>)
{
  re::MaterialDefinitionAsset *v3;
  const char *v5[2];

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v3 = (re::MaterialDefinitionAsset *)re::DynamicString::setCapacity((_QWORD *)(a2 + 8), 0);
  *(_QWORD *)a2 = 0x100000001;
  v5[0] = (const char *)*re::MaterialDefinitionAsset::assetType(v3);
  v5[1] = (const char *)strlen(v5[0]);
  return re::DynamicString::operator=((re::DynamicString *)(a2 + 8), (uint64_t)v5);
}

__guard re::MaterialDefinitionCompiler::assetIntrospectionType(re::MaterialDefinitionCompiler *this)
{
  unsigned __int8 v1;
  __guard *v2;
  int v4;

  if ((v1 & 1) == 0)
  {
    if (v4)
    {
      re::introspect<re::MaterialDefinitionAsset>(void)::info = re::introspect_MaterialDefinitionAsset(0);
    }
  }
  return v2[33];
}

_QWORD *re::MaterialDefinitionCompiler::getSupportedExtensions@<X0>(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)a1, &re::MaterialDefinitionCompiler::getSupportedExtensions(void)const::supportedExtensions);
}

re *re::MaterialDefinitionCompiler::compile@<X0>(re::MaterialDefinitionCompiler *this@<X0>, re::MaterialDefinitionFile *a2@<X1>, re::AssetSerializationScheme *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  void (***v9)(_QWORD);
  re *result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[8];
  re *v20;
  char v21;

  v8 = re::globalAllocators(this);
  v9 = (void (***)(_QWORD))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8[2] + 32))(v8[2], 2488, 8);
  bzero(v9, 0x9B8uLL);
  re::MaterialDefinitionAsset::MaterialDefinitionAsset((re::MaterialDefinitionAsset *)v9);
  result = (re *)re::compileMaterialDefinitionFile((re *)(v9 + 1), a2, a3, (uint64_t)v19);
  if (v19[0])
  {
    *(_BYTE *)a4 = 1;
    *(_QWORD *)(a4 + 8) = v9;
  }
  else
  {
    v11 = re::globalAllocators(result)[2];
    (**v9)(v9);
    (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v11 + 40))(v11, v9);
    *(_QWORD *)&v15 = 100;
    *((_QWORD *)&v15 + 1) = &re::AssetErrorCategory(void)::instance;
    re::DynamicString::DynamicString((re::DynamicString *)&v16, (const re::DynamicString *)&v20);
    v12 = v16;
    *(_OWORD *)(a4 + 8) = v15;
    v13 = v17;
    v14 = v18;
    *(_BYTE *)a4 = 0;
    *(_OWORD *)(a4 + 24) = v12;
    *(_QWORD *)(a4 + 40) = v13;
    *(_QWORD *)(a4 + 48) = v14;
    result = v20;
    if (v20)
    {
      if ((v21 & 1) != 0)
        return (re *)(*(uint64_t (**)(void))(*(_QWORD *)v20 + 40))();
    }
  }
  return result;
}

re *re::MaterialDefinitionCompiler::deleteAsset(re *this, void (***a2)(_QWORD))
{
  uint64_t v3;

  if (a2)
  {
    v3 = re::globalAllocators(this)[2];
    (**a2)(a2);
    return (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v3 + 40))(v3, a2);
  }
  return this;
}

void re::MaterialCompiler::~MaterialCompiler(re::MaterialCompiler *this)
{
  JUMPOUT(0x2276933B8);
}

void re::MaterialDefinitionCompiler::~MaterialDefinitionCompiler(re::MaterialDefinitionCompiler *this)
{
  JUMPOUT(0x2276933B8);
}

uint64_t std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__generic_assign[abi:nn180100]<std::__variant_detail::__copy_assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = result;
  v3 = *(unsigned int *)(result + 32);
  v4 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v3 == -1)
  {
    if ((_DWORD)v4 == -1)
      return result;
  }
  else if ((_DWORD)v4 == -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_24ED44C70 + v3))(&v6, result, a2);
    *(_DWORD *)(v2 + 32) = -1;
    return result;
  }
  v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_24ED44C80[v4])(&v5, result, a2);
}

re::DynamicString *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re13DynamicStringENS8_11AssetHandleEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSR_EEEDcSJ_DpT0_(re::DynamicString **a1, re::DynamicString *a2, re::DynamicString *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__assign_alt[abi:nn180100]<0ul,re::DynamicString,re::DynamicString const&>(*a1, a2, a3);
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8nn180100IOZNS0_12__assignmentINS0_8__traitsIJN2re13DynamicStringENS8_11AssetHandleEEEEE16__generic_assignB8nn180100IRKNS0_17__copy_assignmentISB_LNS0_6_TraitE1EEEEEvOT_EUlRSJ_OT0_E_JRNS0_6__baseILSF_1EJS9_SA_EEERKSR_EEEDcSJ_DpT0_(re::AssetHandle **a1, re::AssetHandle *a2, re::AssetHandle *a3)
{
  return std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__assign_alt[abi:nn180100]<1ul,re::AssetHandle,re::AssetHandle const&>(*a1, a2, a3);
}

re::DynamicString *std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__assign_alt[abi:nn180100]<0ul,re::DynamicString,re::DynamicString const&>(re::DynamicString *a1, re::DynamicString *this, re::DynamicString *a3)
{
  if (*((_DWORD *)a1 + 8))
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__emplace[abi:nn180100]<0ul,re::DynamicString const&>(a1, a3);
  else
    return re::DynamicString::operator=(this, a3);
}

re::DynamicString *std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__emplace[abi:nn180100]<0ul,re::DynamicString const&>(re::DynamicString *this, re::DynamicString *a2)
{
  uint64_t v4;
  re::DynamicString *result;
  char v6;

  v4 = *((unsigned int *)this + 8);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, re::DynamicString *))*(&off_24ED44C70 + v4))(&v6, this);
  *((_DWORD *)this + 8) = -1;
  result = re::DynamicString::DynamicString(this, a2);
  *((_DWORD *)this + 8) = 0;
  return result;
}

uint64_t *std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__assign_alt[abi:nn180100]<1ul,re::AssetHandle,re::AssetHandle const&>(re::AssetHandle *a1, re::AssetHandle *this, re::AssetHandle *a3)
{
  if (*((_DWORD *)a1 + 8) == 1)
    return re::AssetHandle::operator=((uint64_t *)this, (uint64_t *)a3);
  else
    return (uint64_t *)std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__emplace[abi:nn180100]<1ul,re::AssetHandle const&>(a1, a3);
}

re::AssetHandle *std::__variant_detail::__assignment<std::__variant_detail::__traits<re::DynamicString,re::AssetHandle>>::__emplace[abi:nn180100]<1ul,re::AssetHandle const&>(re::AssetHandle *this, re::AssetHandle *a2)
{
  uint64_t v4;
  re::AssetHandle *result;
  char v6;

  v4 = *((unsigned int *)this + 8);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, re::AssetHandle *))*(&off_24ED44C70 + v4))(&v6, this);
  *((_DWORD *)this + 8) = -1;
  result = re::AssetHandle::AssetHandle(this, a2);
  *((_DWORD *)this + 8) = 1;
  return result;
}

re::MaterialTechniqueData *re::MaterialTechniqueData::MaterialTechniqueData(re::MaterialTechniqueData *this, const re::MaterialTechniqueData *a2)
{
  re::DynamicString *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  int v9;

  v4 = re::DynamicString::DynamicString(this, a2);
  re::DynamicString::DynamicString((re::DynamicString *)((char *)v4 + 32), (const re::MaterialTechniqueData *)((char *)a2 + 32));
  re::AssetHandle::AssetHandle((re::MaterialTechniqueData *)((char *)this + 64), (const re::MaterialTechniqueData *)((char *)a2 + 64));
  re::AssetHandle::AssetHandle((re::MaterialTechniqueData *)((char *)this + 88), (const re::MaterialTechniqueData *)((char *)a2 + 88));
  re::DynamicString::DynamicString((re::MaterialTechniqueData *)((char *)this + 112), (const re::MaterialTechniqueData *)((char *)a2 + 112));
  re::AssetHandle::AssetHandle((re::MaterialTechniqueData *)((char *)this + 144), (const re::MaterialTechniqueData *)((char *)a2 + 144));
  re::DynamicString::DynamicString((re::MaterialTechniqueData *)((char *)this + 168), (const re::MaterialTechniqueData *)((char *)a2 + 168));
  v5 = *(_OWORD *)((char *)a2 + 200);
  v6 = *(_OWORD *)((char *)a2 + 216);
  v7 = *(_OWORD *)((char *)a2 + 232);
  *((_DWORD *)this + 62) = *((_DWORD *)a2 + 62);
  *(_OWORD *)((char *)this + 232) = v7;
  *(_OWORD *)((char *)this + 216) = v6;
  *(_OWORD *)((char *)this + 200) = v5;
  v8 = *((unsigned __int8 *)a2 + 252);
  *((_BYTE *)this + 252) = v8;
  if (v8)
    *((_BYTE *)this + 253) = *((_BYTE *)a2 + 253);
  re::DynamicArray<re::RenderAttachmentState>::DynamicArray((uint64_t)this + 256, (uint64_t *)a2 + 32);
  re::DynamicString::DynamicString((re::MaterialTechniqueData *)((char *)this + 296), (const re::MaterialTechniqueData *)((char *)a2 + 296));
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)this + 328, (uint64_t)a2 + 328);
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)this + 376, (uint64_t)a2 + 376);
  re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)this + 424, (uint64_t *)a2 + 53);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)this + 464, (uint64_t)a2 + 464);
  re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)this + 512, (uint64_t *)a2 + 64);
  *((_WORD *)this + 276) = *((_WORD *)a2 + 276);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)this + 560, (uint64_t)a2 + 560);
  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable((uint64_t)this + 608, (uint64_t)a2 + 608);
  *((_BYTE *)this + 656) = *((_BYTE *)a2 + 656);
  v9 = *((unsigned __int8 *)a2 + 657);
  *((_BYTE *)this + 657) = v9;
  if (v9)
    *((_BYTE *)this + 658) = *((_BYTE *)a2 + 658);
  return this;
}

uint64_t re::DynamicArray<re::RenderAttachmentState>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::RenderAttachmentState>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::RenderAttachmentState>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

void **re::DynamicArray<re::RenderAttachmentState>::copy(void **result, uint64_t a2)
{
  void **v3;
  unint64_t v4;
  void *v5;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<re::RenderAttachmentState>::setCapacity(result, *(_QWORD *)(a2 + 16));
    v5 = v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), 32 * (_QWORD)v5);
      v5 = v3[2];
    }
    result = (void **)memcpy((char *)v3[4] + 32 * (_QWORD)v5, (const void *)(*(_QWORD *)(a2 + 32) + 32 * (_QWORD)v5), 32 * v4 - 32 * (_QWORD)v5);
  }
  else if (v4)
  {
    result = (void **)memmove(result[4], *(const void **)(a2 + 32), 32 * v4);
  }
  v3[2] = (void *)v4;
  return result;
}

_QWORD *re::DynamicArray<re::RenderAttachmentState>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 59)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 32, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 32 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 32 * a2, 4);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], 32 * v5[2]);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::RenderAttachmentState>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u)
      v5 = 3;
    else
      v5 = *(_DWORD *)(a2 + 28);
    re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, v4, v5);
    re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
  }
  return a1;
}

void re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, (re::DynamicString *)(v8 + 16), (uint64_t *)(v8 + 48));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 88;
    }
  }
}

uint64_t re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 88 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 88 * v10 + 8) = v13 | 0x80000000;
  v14 = 88 * v10;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v14 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v14) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + v14 + 16), a4);
  re::DynamicArray<re::DynamicString>::DynamicArray(*(_QWORD *)(a1 + 16) + 88 * v10 + 48, a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

uint64_t re::append<re::DynamicString,re::DynamicArray<re::DynamicString>>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  re::DynamicString *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v20;
  char v21;

  v2 = a2;
  v3 = result;
  v4 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 22;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v8 = v5;
    v9 = *(_QWORD *)(a2 + 16);
    v20 = *(_DWORD *)(a2 + 32);
    do
    {
      v10 = v9 + 88 * v8;
      v11 = (re::DynamicString *)(v10 + 16);
      v12 = (uint64_t *)(v10 + 48);
      v13 = re::Hash<re::DynamicString>::operator()((uint64_t)&v21, v10 + 16);
      v14 = v13;
      if (*(_QWORD *)v3)
      {
        v15 = v13 % *(unsigned int *)(v3 + 24);
        v4 = *(unsigned int *)(*(_QWORD *)(v3 + 8) + 4 * v15);
        if ((_DWORD)v4 != 0x7FFFFFFF)
        {
          v16 = *(_QWORD *)(v3 + 16);
          while (!re::DynamicString::operator==(v16 + 88 * v4 + 16, (uint64_t)v11))
          {
            v4 = *(_DWORD *)(v16 + 88 * v4 + 8) & 0x7FFFFFFF;
            if (v4 == 0x7FFFFFFF)
            {
              v2 = a2;
              goto LABEL_15;
            }
          }
          re::DynamicArray<re::DynamicString>::deinit(v16 + 88 * v4 + 48);
          result = re::DynamicArray<re::DynamicString>::DynamicArray(*(_QWORD *)(v3 + 16) + 88 * v4 + 48, v12);
          v2 = a2;
          LODWORD(v4) = v20;
          goto LABEL_18;
        }
LABEL_15:
        LODWORD(v4) = v20;
      }
      else
      {
        LODWORD(v15) = 0;
      }
      result = re::HashTable<re::DynamicString,re::DynamicArray<re::DynamicString>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsCopy(v3, v15, v14, v11, v12);
LABEL_18:
      ++*(_DWORD *)(v3 + 40);
      v9 = *(_QWORD *)(v2 + 16);
      if (*(_DWORD *)(v2 + 32) <= (v5 + 1))
        v17 = v5 + 1;
      else
        v17 = *(_DWORD *)(v2 + 32);
      while (1)
      {
        v8 = (v5 + 1);
        if (v17 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v18 = v8;
        if ((*(_DWORD *)(v9 + 88 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_25;
      }
      v18 = v17;
LABEL_25:
      LODWORD(v5) = v18;
    }
    while ((_DWORD)v4 != v18);
  }
  return result;
}

uint64_t re::DynamicArray<re::DynamicString>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::DynamicArray<re::DynamicString>::copy((_QWORD *)a1, (uint64_t)a2);
        ++*(_DWORD *)(a1 + 24);
      }
      else
      {
        re::DynamicArray<re::DynamicString>::clear((_QWORD *)a1);
      }
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::DynamicString>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::DynamicString>::copy((_QWORD *)a1, (uint64_t)a2);
    }
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::MaterialTechniqueData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const re::DynamicString *a4, uint64_t a5)
{
  unsigned int v10;
  unsigned int v11;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  uint64_t result;
  _BYTE v28[44];

  v10 = *(_DWORD *)(a1 + 36);
  if (v10 == 0x7FFFFFFF)
  {
    v10 = *(_DWORD *)(a1 + 32);
    v11 = v10;
    if (v10 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = v10 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<re::DynamicString,re::MaterialTechniqueData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v28, v14, v13);
          v16 = *(_OWORD *)v28;
          *(_OWORD *)v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v28[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v28[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = v18 + 48;
            do
            {
              if ((*(_DWORD *)(v22 - 40) & 0x80000000) != 0)
                re::HashTable<re::DynamicString,re::MaterialTechniqueData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 48) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 48), v22 - 32, v22);
              v22 += 712;
              --v21;
            }
            while (v21);
          }
          re::HashTable<re::DynamicString,re::MaterialTechniqueData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v13)
          v25 = 2 * v12;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 712 * v10 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 712 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 712 * v10 + 8) = v24 | 0x80000000;
  v26 = 712 * v10;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v26) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + v26 + 16), a4);
  result = re::MaterialTechniqueData::MaterialTechniqueData(*(_QWORD *)(a1 + 16) + 712 * v10 + 48, a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void re::HashTable<re::DynamicString,re::MaterialTechniqueData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 712 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_154_0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::MaterialTechniqueData::MaterialTechniqueData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 24) = 0;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 56) = 0;
  v11 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a2 + 40) = v11;
  *(_QWORD *)(a2 + 48) = v10;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  v12 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v12;
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = v13;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  v14 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = v14;
  v15 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = v15;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  v16 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  v17 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 136) = 0;
  v19 = *(_QWORD *)(a1 + 120);
  v18 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = v16;
  *(_QWORD *)(a1 + 128) = v17;
  *(_QWORD *)(a2 + 120) = v19;
  *(_QWORD *)(a2 + 128) = v18;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;
  v20 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = v20;
  v21 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = v21;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  v22 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a2 + 168) = 0;
  v23 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 192) = 0;
  v25 = *(_QWORD *)(a1 + 176);
  v24 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 176) = v22;
  *(_QWORD *)(a1 + 184) = v23;
  *(_QWORD *)(a2 + 176) = v25;
  *(_QWORD *)(a2 + 184) = v24;
  v26 = *(_OWORD *)(a2 + 200);
  v27 = *(_OWORD *)(a2 + 216);
  v28 = *(_OWORD *)(a2 + 232);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 232) = v28;
  *(_OWORD *)(a1 + 216) = v27;
  *(_OWORD *)(a1 + 200) = v26;
  LODWORD(v23) = *(unsigned __int8 *)(a2 + 252);
  *(_BYTE *)(a1 + 252) = v23;
  if ((_DWORD)v23)
    *(_BYTE *)(a1 + 253) = *(_BYTE *)(a2 + 253);
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  v29 = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = v29;
  *(_QWORD *)(a2 + 256) = 0;
  *(_QWORD *)(a2 + 264) = 0;
  v30 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 272) = v30;
  v31 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a2 + 288) = v31;
  ++*(_DWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 296) = 0uLL;
  *(_OWORD *)(a1 + 312) = 0uLL;
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_QWORD *)(a2 + 320) = 0;
  v32 = *(_QWORD *)(a1 + 304);
  v33 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = v33;
  *(_QWORD *)(a2 + 296) = 0;
  v34 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  ++*(_DWORD *)(a1 + 280);
  *(_QWORD *)(a2 + 304) = v32;
  *(_QWORD *)(a2 + 312) = v34;
  *(_DWORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 328) = 0uLL;
  *(_OWORD *)(a1 + 344) = 0uLL;
  *(_QWORD *)(a1 + 364) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 328), (uint64_t *)(a2 + 328));
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 408) = 0x7FFFFFFF00000000;
  *(_DWORD *)(a1 + 416) = 0;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 376), (uint64_t *)(a2 + 376));
  *(_QWORD *)(a1 + 456) = 0;
  *(_DWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  v35 = *(_QWORD *)(a2 + 432);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 432) = v35;
  *(_QWORD *)(a2 + 424) = 0;
  *(_QWORD *)(a2 + 432) = 0;
  v36 = *(_QWORD *)(a1 + 440);
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_QWORD *)(a2 + 440) = v36;
  v37 = *(_QWORD *)(a1 + 456);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a2 + 456) = v37;
  ++*(_DWORD *)(a2 + 448);
  ++*(_DWORD *)(a1 + 448);
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_DWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 500) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 464), (uint64_t *)(a2 + 464));
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a2 + 512) = 0;
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a2 + 520) = 0;
  v38 = *(_QWORD *)(a1 + 528);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a2 + 528) = v38;
  v39 = *(_QWORD *)(a1 + 544);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a2 + 544) = v39;
  ++*(_DWORD *)(a2 + 536);
  ++*(_DWORD *)(a1 + 536);
  *(_WORD *)(a1 + 552) = *(_WORD *)(a2 + 552);
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_DWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 596) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 560), (uint64_t *)(a2 + 560));
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_QWORD *)(a1 + 640) = 0x7FFFFFFF00000000;
  *(_DWORD *)(a1 + 648) = 0;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(a1 + 608), (uint64_t *)(a2 + 608));
  *(_BYTE *)(a1 + 656) = *(_BYTE *)(a2 + 656);
  v40 = *(unsigned __int8 *)(a2 + 657);
  *(_BYTE *)(a1 + 657) = v40;
  if (v40)
    *(_BYTE *)(a1 + 658) = *(_BYTE *)(a2 + 658);
  return a1;
}

uint64_t re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u)
      v5 = 3;
    else
      v5 = *(_DWORD *)(a2 + 28);
    re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, v4, v5);
    re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
  }
  return a1;
}

void re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, (re::DynamicString *)(v8 + 16), (_DWORD *)(v8 + 48));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 56;
    }
  }
}

void re::HashTable<re::DynamicString,int,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;
  uint64_t v7;
  __n128 *v8;
  int v9;
  uint64_t v10;
  __n128 *v11;
  uint64_t v12;
  int v13;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_154_0, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = 0uLL;
      do
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = (__n128 *)(v7 + v4);
        v9 = *(_DWORD *)(v7 + v4 + 8);
        if (v9 < 0)
        {
          v8->n128_u32[2] = v9 & 0x7FFFFFFF;
          v12 = v8[1].n128_i64[0];
          v11 = v8 + 1;
          v10 = v12;
          if (v12)
          {
            if ((*(_BYTE *)(v7 + v4 + 24) & 1) != 0)
            {
              (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v10 + 40))(v10, *(_QWORD *)(v7 + v4 + 32), v6);
              v6 = 0uLL;
            }
            *v11 = v6;
            v11[1] = v6;
            v3 = *(unsigned int *)(a1 + 32);
          }
        }
        ++v5;
        v4 += 56;
      }
      while (v5 < v3);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v13 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v13;
  }
}

re::MaterialTechniqueQualityLevelSetData *re::MaterialTechniqueQualityLevelSetData::MaterialTechniqueQualityLevelSetData(re::MaterialTechniqueQualityLevelSetData *this, const re::MaterialTechniqueQualityLevelSetData *a2)
{
  re::DynamicString *v4;

  v4 = re::DynamicString::DynamicString(this, a2);
  re::DynamicString::DynamicString((re::DynamicString *)((char *)v4 + 32), (const re::MaterialTechniqueQualityLevelSetData *)((char *)a2 + 32));
  re::DynamicArray<re::DynamicString>::DynamicArray((uint64_t)this + 64, (uint64_t *)a2 + 8);
  return this;
}

void re::TokenizedMember::~TokenizedMember(uint64_t **this)
{
  re::TokenizedMember *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;

  v1 = (re::TokenizedMember *)this;
  v2 = this[3];
  if (v2)
  {
    v3 = this[5];
    v4 = 8 * (_QWORD)v2;
    do
    {
      v5 = *v3;
      if (*v3)
      {
        v6 = re::globalAllocators((re *)this);
        this = (uint64_t **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6[2] + 40))(v6[2], v5);
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  *((_QWORD *)v1 + 3) = 0;
  v7 = *((_DWORD *)v1 + 8) + 1;
  *((_DWORD *)v1 + 8) = v7;
  v8 = *((_QWORD *)v1 + 1);
  if (v8)
  {
    if (*((_QWORD *)v1 + 5))
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
      v7 = *((_DWORD *)v1 + 8);
    }
    *((_QWORD *)v1 + 5) = 0;
    *((_QWORD *)v1 + 2) = 0;
    *((_QWORD *)v1 + 3) = 0;
    *((_QWORD *)v1 + 1) = 0;
    *((_DWORD *)v1 + 8) = v7 + 1;
  }
}

void re::validateParsedType(re *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  NSObject *v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)a1)
  {
    if (*(unsigned __int8 *)a1 != a4)
    {
      v8 = *re::graphicsLogObjects(a1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v9 = 136315650;
        v10 = a2;
        v11 = 2080;
        v12 = a3;
        v13 = 2080;
        v14 = a5;
        _os_log_error_impl(&dword_224FE9000, v8, OS_LOG_TYPE_ERROR, "parameter %s, token %s is being parsed as %s, but previous tokens were parsed differently.", (uint8_t *)&v9, 0x20u);
      }
    }
  }
  else
  {
    *(_BYTE *)a1 = a4;
  }
}

double re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 16 * v3;
      do
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          v8 = v6 + v4;
          *(_DWORD *)v8 = v7 & 0x7FFFFFFF;
          *(_QWORD *)(v8 + 8) = 0;
        }
        v4 += 16;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::DynamicArray<re::BufferSlice>::deinit(uint64_t a1)
{
  uint64_t result;
  id *v3;
  uint64_t v4;
  uint64_t v5;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(id **)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 16 * v4;
        do
        {
          if (*v3)
          {

            *v3 = 0;
          }
          v3 += 2;
          v5 -= 16;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(id **)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, id *))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

double re::HashTable<re::DynamicString,re::WeakStringID,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1, double result)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  __n128 *v9;
  int v10;
  uint64_t v11;
  __n128 *v12;
  uint64_t v13;

  v3 = *a1;
  if (v3)
  {
    v4 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = 0;
      v7 = 0uLL;
      do
      {
        v8 = a1[2];
        v9 = (__n128 *)(v8 + v5);
        v10 = *(_DWORD *)(v8 + v5 + 8);
        if (v10 < 0)
        {
          v9->n128_u32[2] = v10 & 0x7FFFFFFF;
          v13 = v9[1].n128_i64[0];
          v12 = v9 + 1;
          v11 = v13;
          if (v13)
          {
            if ((*(_BYTE *)(v8 + v5 + 24) & 1) != 0)
            {
              (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v11 + 40))(v11, *(_QWORD *)(v8 + v5 + 32), v7);
              v7 = 0uLL;
            }
            *v12 = v7;
            v12[1] = v7;
            v4 = *((unsigned int *)a1 + 8);
          }
          *(_QWORD *)(v8 + v5 + 48) = 0;
        }
        ++v6;
        v5 += 56;
      }
      while (v6 < v4);
      v3 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::Bitset<128>::toWordIndex(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (a2 < 0x80)
    return a2 >> 6;
  re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %d.", "b < kBitCount", "toWordIndex", 345, a2, 128, v2, v3);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::operator=(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    if (!*(_QWORD *)a1 || *(_QWORD *)a1 == *a2)
    {
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)a1, a2);
    }
    else if (*a2)
    {
      re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::copy(a1, (uint64_t)a2);
      ++*(_DWORD *)(a1 + 40);
    }
    else
    {
      re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::clear(a1);
    }
  }
  return a1;
}

void re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_154_0, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 16 * v3;
      do
      {
        v6 = *(_QWORD *)(a1 + 16) + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 16;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

void re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addAsCopy(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, v8 + 12, (_WORD *)(v8 + 12));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 16;
    }
  }
}

uint64_t re::DynamicArray<re::RenderAttachmentState>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
        re::DynamicArray<re::RenderAttachmentState>::copy((void **)a1, (uint64_t)a2);
      else
        *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::RenderAttachmentState>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::RenderAttachmentState>::copy((void **)a1, (uint64_t)a2);
    }
  }
  return a1;
}

_QWORD *re::DynamicArray<re::AssetType const*>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  if (result[1] == a2)
    return result;
  v4 = result;
  if (result[2] > a2)
    return result;
  v5 = *result;
  if (!*v4)
  {
    result = (_QWORD *)re::DynamicArray<re::AssetType const*>::setCapacity(v4, a2);
    ++*((_DWORD *)v4 + 6);
    return result;
  }
  if (a2 >> 61)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 8, a2);
    _os_crash();
    __break(1u);
    goto LABEL_12;
  }
  v2 = 8 * a2;
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, 8 * a2, 8);
  if (!result)
  {
LABEL_12:
    re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v4 + 8));
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v7 = result;
  if (v4[1])
  {
    memcpy(result, (const void *)v4[4], 8 * v4[2]);
    result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
  }
  v4[4] = v7;
  v4[1] = a2;
  return result;
}

double re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  if (*(_QWORD *)(a1 + 56))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3)
      {
        v4 = 72 * v3;
        v5 = v2 + 8;
        do
        {
          re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(v5);
          v5 += 72;
          v4 -= 72;
        }
        while (v4);
      }
      *(_QWORD *)(a1 + 8) = 0;
    }
    if (*(_QWORD *)a1)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56));
      *(_QWORD *)a1 = 0;
    }
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

double re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(uint64_t *a1, double result)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  __n128 *v12;

  v3 = *a1;
  if (v3)
  {
    v4 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = 0;
      v7 = 0uLL;
      do
      {
        v8 = a1[2];
        v9 = *(_DWORD *)(v8 + v5);
        if (v9 < 0)
        {
          v10 = v9 & 0x7FFFFFFF;
          v11 = v8 + v5;
          *(_DWORD *)v11 = v10;
          *(_QWORD *)(v11 + 8) = 0;
          v12 = (__n128 *)(v8 + v5 + 16);
          if (v12->n128_u64[0])
          {
            if ((*(_BYTE *)(v11 + 24) & 1) != 0)
            {
              (*(void (**)(unint64_t, _QWORD, __n128))(*(_QWORD *)v12->n128_u64[0] + 40))(v12->n128_u64[0], *(_QWORD *)(v8 + v5 + 32), v7);
              v7 = 0uLL;
            }
            *v12 = v7;
            v12[1] = v7;
            v4 = *((unsigned int *)a1 + 8);
          }
        }
        ++v6;
        v5 += 48;
      }
      while (v6 < v4);
      v3 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::DynamicArray<unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const re::DynamicString *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v31[44];

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v10 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v31, 0, 36);
          *(_QWORD *)&v31[36] = 0x7FFFFFFFLL;
          re::HashTable<re::DynamicString,re::DynamicArray<unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v31, v14, v13);
          v16 = *(_OWORD *)v31;
          *(_OWORD *)v31 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v31[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v31[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v31[24];
          *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v31[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = v18 + 48;
            do
            {
              if ((*(_DWORD *)(v22 - 40) & 0x80000000) != 0)
                re::HashTable<re::DynamicString,re::DynamicArray<unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 48) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 48), v22 - 32, v22);
              v22 += 88;
              --v21;
            }
            while (v21);
          }
          re::HashTable<re::DynamicString,re::DynamicArray<re::ResourceFetchManager::Request *>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v31);
        }
      }
      else
      {
        if (v13)
          v25 = 2 * v12;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 88 * v10 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 88 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 88 * v10 + 8) = v24 | 0x80000000;
  v26 = 88 * v10;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v26 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v26) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + v26 + 16), a4);
  v27 = *(_QWORD *)(a1 + 16) + 88 * v10;
  *(_QWORD *)(v27 + 80) = 0;
  *(_DWORD *)(v27 + 72) = 0;
  *(_QWORD *)(v27 + 56) = 0;
  *(_QWORD *)(v27 + 64) = 0;
  *(_QWORD *)(v27 + 48) = 0;
  *(_QWORD *)(v27 + 48) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(v27 + 56) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  v28 = *(_QWORD *)(v27 + 64);
  *(_QWORD *)(v27 + 64) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v28;
  v29 = *(_QWORD *)(v27 + 80);
  *(_QWORD *)(v27 + 80) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v29;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v27 + 72);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,re::DynamicArray<unsigned long>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 88 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_154_0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<re::DynamicString,re::MaterialTechniqueGroupData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  signed int v21;
  _BYTE v22[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(_QWORD *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::MaterialTechniqueGroupData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v22, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v22;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)v22 = v5;
      *(_QWORD *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = v6 + 48;
        do
        {
          if ((*(_DWORD *)(v13 - 40) & 0x80000000) != 0)
          {
            v14 = *(_QWORD *)(v13 - 48);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<re::DynamicString,re::MaterialTechniqueGroupData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 120 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 120 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 120 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 120 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 120 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 120 * v17) = v14;
            re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 120 * v17 + 16), (const re::DynamicString *)(v13 - 32));
            re::MaterialTechniqueGroupData::MaterialTechniqueGroupData(*(_QWORD *)(a1 + 16) + 120 * v17 + 48, v13);
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 120;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::DynamicString,re::MaterialTechniqueGroupData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2)
      v21 = a2;
    else
      v21 = 3;
  }
}

void re::HashTable<re::DynamicString,re::MaterialTechniqueGroupData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 120 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_154_0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::MaterialTechniqueGroupData::MaterialTechniqueGroupData(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 24) = 0;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v8;
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v9;
  ++*(_DWORD *)(a2 + 56);
  ++*(_DWORD *)(a1 + 56);
  return result;
}

void re::HashTable<re::DynamicString,re::DebugMapping,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  signed int v24;
  _BYTE v25[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(_QWORD *)&v25[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::DebugMapping,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v25, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v25;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v25[8];
      *(_OWORD *)v25 = v5;
      *(_QWORD *)&v25[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v25[24];
      *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (uint64_t *)(v6 + 80);
        do
        {
          if ((*(_DWORD *)(v13 - 9) & 0x80000000) != 0)
          {
            v14 = *(v13 - 10);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<re::DynamicString,re::DebugMapping,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + (v17 << 7) + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + (v17 << 7) + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + (v17 << 7) + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v17 << 7) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v17 << 7) + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v17 << 7)) = v14;
            re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + (v17 << 7) + 16), (const re::DynamicString *)(v13 - 8));
            v21 = *(_QWORD *)(a1 + 16) + (v17 << 7);
            *(_OWORD *)(v21 + 48) = 0u;
            *(_OWORD *)(v21 + 64) = 0u;
            *(_QWORD *)(v21 + 48) = *(v13 - 4);
            *(v13 - 4) = 0;
            v22 = *(_QWORD *)(v21 + 64);
            *(_QWORD *)(v21 + 64) = *(v13 - 2);
            *(v13 - 2) = v22;
            *(_QWORD *)(v21 + 72) = *(v13 - 1);
            *(v13 - 1) = 0;
            v23 = *(_QWORD *)(v21 + 56);
            *(_QWORD *)(v21 + 56) = *(v13 - 3);
            *(v13 - 3) = v23;
            *(_OWORD *)(v21 + 80) = 0u;
            v21 += 80;
            *(_DWORD *)(v21 + 32) = 0;
            *(_OWORD *)(v21 + 16) = 0u;
            *(_QWORD *)(v21 + 36) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v21, v13);
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 16;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::DynamicString,re::DebugMapping,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v25, *(double *)&v7);
    }
  }
  else
  {
    if (a2)
      v24 = a2;
    else
      v24 = 3;
  }
}

void re::HashTable<re::DynamicString,re::DebugMapping,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + (v10 << 7), 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_154_0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<re::DynamicString,re::MaterialTechniqueQualityLevelSetData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  signed int v22;
  _BYTE v23[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(_QWORD *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::MaterialTechniqueQualityLevelSetData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v23, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v23;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)v23 = v5;
      *(_QWORD *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = v6 + 48;
        do
        {
          if ((*(_DWORD *)(v13 - 40) & 0x80000000) != 0)
          {
            v14 = *(_QWORD *)(v13 - 48);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(_DWORD *)(a1 + 36);
            if (v17 == 0x7FFFFFFF)
            {
              v17 = *(_DWORD *)(a1 + 32);
              v18 = v17;
              if (v17 == (_DWORD)v15)
              {
                re::HashTable<re::DynamicString,re::MaterialTechniqueQualityLevelSetData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 152 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 152 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 152 * v17 + 8) = v20 | 0x80000000;
            v21 = *(_QWORD *)(a1 + 16) + 152 * v17;
            *(_DWORD *)(v21 + 8) = *(_DWORD *)(v21 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 152 * v17) = v14;
            re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 152 * v17 + 16), (const re::DynamicString *)(v13 - 32));
            re::MaterialTechniqueQualityLevelSetData::MaterialTechniqueQualityLevelSetData(*(_QWORD *)(a1 + 16) + 152 * v17 + 48, v13);
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 152;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::DynamicString,re::MaterialTechniqueQualityLevelSetData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2)
      v22 = a2;
    else
      v22 = 3;
  }
}

void re::HashTable<re::DynamicString,re::MaterialTechniqueQualityLevelSetData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 152 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_154_0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::MaterialTechniqueQualityLevelSetData::MaterialTechniqueQualityLevelSetData(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 24) = 0;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 56) = 0;
  v10 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a2 + 40) = v10;
  *(_QWORD *)(a2 + 48) = v9;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v12 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = v12;
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = v13;
  ++*(_DWORD *)(a2 + 88);
  ++*(_DWORD *)(a1 + 88);
  return result;
}

void re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (re::DynamicString *)(*(_QWORD *)&v13[16] + v10 + 16));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 96;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, unsigned __int8 *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 96 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 96 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 96 * v9 + 8) = v12 | 0x80000000;
  v13 = a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96 * v9) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 96 * v9 + 16), a4);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = v14 + 96 * v9;
  v16 = *a5;
  *(_BYTE *)(v15 + 48) = v16;
  v17 = v15 + 48;
  if (v16)
  {
    *(_OWORD *)(v17 + 24) = 0u;
    *(_OWORD *)(v17 + 8) = 0u;
    *(_QWORD *)(v17 + 32) = *((_QWORD *)a5 + 4);
    v18 = *((_QWORD *)a5 + 2);
    *(_QWORD *)(v17 + 8) = *((_QWORD *)a5 + 1);
    *((_QWORD *)a5 + 1) = 0;
    v19 = *((_QWORD *)a5 + 3);
    *((_QWORD *)a5 + 4) = 0;
    v21 = *(_QWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v17 + 24);
    *(_QWORD *)(v17 + 16) = v18;
    *(_QWORD *)(v17 + 24) = v19;
    *((_QWORD *)a5 + 2) = v21;
    *((_QWORD *)a5 + 3) = v20;
  }
  v22 = a5[40];
  *(_BYTE *)(v14 + 96 * v9 + 88) = v22;
  if (v22)
    *(_BYTE *)(v14 + 96 * v9 + 89) = a5[41];
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v13) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 96 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_154_0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 96 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 96 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 96 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 96 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 96 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 96 * v10 + 16), a4);
  v14 = *(_QWORD *)(a1 + 16) + 96 * v10;
  *(_OWORD *)(v14 + 48) = 0u;
  v14 += 48;
  *(_DWORD *)(v14 + 32) = 0;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_QWORD *)(v14 + 36) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v14, a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::OptionalMaterialParameterProperties,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (re::DynamicString *)(*(_QWORD *)&v13[16] + v10 + 16));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 96;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

_QWORD *re::DynamicArray<re::MaterialTechniqueData>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::MaterialTechniqueData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MaterialTechniqueData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::MaterialTechniqueData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  re::MaterialTechniqueData *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MaterialTechniqueData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x298uLL))
        {
          v2 = 664 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 664 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 664, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (re::MaterialTechniqueData *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 664 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::MaterialTechniqueData::MaterialTechniqueData(v11, (uint64_t)v8);
          re::MaterialTechniqueData::~MaterialTechniqueData(v8);
          v8 = (re::MaterialTechniqueData *)((char *)v8 + 664);
          v11 += 664;
          v10 -= 664;
        }
        while (v10);
        v8 = (re::MaterialTechniqueData *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, re::MaterialTechniqueData *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  re::MaterialTechniqueGroupData *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x48uLL))
        {
          v2 = 72 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 72 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 72, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (re::MaterialTechniqueGroupData *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 72 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::MaterialTechniqueGroupData::MaterialTechniqueGroupData(v11, (uint64_t)v8);
          re::MaterialTechniqueGroupData::deinit(v8);
          re::DynamicArray<re::DynamicString>::deinit((uint64_t)v8 + 32);
          if (*(_QWORD *)v8)
          {
            if ((*((_BYTE *)v8 + 8) & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v8 + 40))(*(_QWORD *)v8, *((_QWORD *)v8 + 2));
            *(_OWORD *)v8 = 0u;
            *((_OWORD *)v8 + 1) = 0u;
          }
          v8 = (re::MaterialTechniqueGroupData *)((char *)v8 + 72);
          v11 += 72;
          v10 -= 72;
        }
        while (v10);
        v8 = (re::MaterialTechniqueGroupData *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, re::MaterialTechniqueGroupData *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::MaterialTechniqueGroupData>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MaterialTechniqueGroupData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::DebugMapping>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::DebugMapping>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DebugMapping>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::DebugMapping>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  double v17;
  double v18;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::DebugMapping>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x50uLL))
        {
          v2 = 80 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 80 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_20;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 80, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_20:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (uint64_t *)(v8 + 32);
        v11 = 80 * v9;
        v12 = v7;
        do
        {
          *(_OWORD *)v12 = 0u;
          *((_OWORD *)v12 + 1) = 0u;
          *v12 = *(v10 - 4);
          *(v10 - 4) = 0;
          v12[3] = *(v10 - 1);
          *(v10 - 1) = 0;
          v14 = v12[1];
          v13 = v12[2];
          v15 = *(v10 - 2);
          v12[1] = *(v10 - 3);
          v12[2] = v15;
          *(v10 - 3) = v14;
          *(v10 - 2) = v13;
          *((_OWORD *)v12 + 2) = 0u;
          v16 = v12 + 4;
          *((_DWORD *)v16 + 8) = 0;
          *((_OWORD *)v16 + 1) = 0u;
          *(_QWORD *)((char *)v16 + 36) = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap(v16, v10);
          v18 = re::HashTable<re::DynamicString,unsigned long,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(v10, v17);
          if (*(v10 - 4))
          {
            if ((*(_BYTE *)(v10 - 3) & 1) != 0)
              (*(void (**)(_QWORD, _QWORD, double))(*(_QWORD *)*(v10 - 4) + 40))(*(v10 - 4), *(v10 - 2), v18);
            *((_OWORD *)v10 - 2) = 0u;
            *((_OWORD *)v10 - 1) = 0u;
          }
          v10 += 10;
          v12 = v16 + 6;
          v11 -= 80;
        }
        while (v11);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_20;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  re::MaterialTechniqueQualityLevelSetData *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x68uLL))
        {
          v2 = 104 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 104 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 104, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (re::MaterialTechniqueQualityLevelSetData *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 104 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::MaterialTechniqueQualityLevelSetData::MaterialTechniqueQualityLevelSetData(v11, (uint64_t)v8);
          re::MaterialTechniqueQualityLevelSetData::~MaterialTechniqueQualityLevelSetData(v8);
          v8 = (re::MaterialTechniqueQualityLevelSetData *)((char *)v8 + 104);
          v11 += 104;
          v10 -= 104;
        }
        while (v10);
        v8 = (re::MaterialTechniqueQualityLevelSetData *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, re::MaterialTechniqueQualityLevelSetData *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::MaterialTechniqueQualityLevelSetData>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

double re::HashTable<re::DynamicString,re::MaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1, double result)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  __n128 *v9;
  int v10;
  uint64_t v11;
  __n128 *v12;
  uint64_t v13;

  v3 = *a1;
  if (v3)
  {
    v4 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = 0;
      v7 = 0uLL;
      do
      {
        v8 = a1[2];
        v9 = (__n128 *)(v8 + v5);
        v10 = *(_DWORD *)(v8 + v5 + 8);
        if (v10 < 0)
        {
          v9->n128_u32[2] = v10 & 0x7FFFFFFF;
          v13 = v9[1].n128_i64[0];
          v12 = v9 + 1;
          v11 = v13;
          if (v13)
          {
            if ((*(_BYTE *)(v8 + v5 + 24) & 1) != 0)
            {
              (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v11 + 40))(v11, *(_QWORD *)(v8 + v5 + 32), v7);
              v7 = 0uLL;
            }
            *v12 = v7;
            v12[1] = v7;
            v4 = *((unsigned int *)a1 + 8);
          }
        }
        ++v6;
        v5 += 104;
      }
      while (v6 < v4);
      v3 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 40))(v3, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  void *v8;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          v8 = *(void **)(v6 + 24);
          if (v8)
          {

            *(_QWORD *)(v6 + 24) = 0;
            v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 32;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::DynamicString,re::MaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  signed int v24;
  _BYTE v25[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v25, 0, 36);
      *(_QWORD *)&v25[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::MaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v25, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v25;
      v6 = *(uint64_t **)(a1 + 16);
      v7 = *(_OWORD *)&v25[8];
      *(_OWORD *)v25 = v5;
      *(_QWORD *)&v25[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v25[24];
      *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v25[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        do
        {
          if ((v6[1] & 0x80000000) != 0)
          {
            v13 = *v6;
            v14 = *(unsigned int *)(a1 + 24);
            v15 = *v6 % v14;
            v16 = *(_DWORD *)(a1 + 36);
            if (v16 == 0x7FFFFFFF)
            {
              v16 = *(_DWORD *)(a1 + 32);
              v17 = v16;
              if (v16 == (_DWORD)v14)
              {
                re::HashTable<re::DynamicString,re::MaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * v11));
                v15 = v13 % *(unsigned int *)(a1 + 24);
                v17 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v17 + 1;
              v18 = *(_QWORD *)(a1 + 16);
              v19 = *(_DWORD *)(v18 + 104 * v16 + 8);
            }
            else
            {
              v18 = *(_QWORD *)(a1 + 16);
              v19 = *(_DWORD *)(v18 + 104 * v16 + 8);
              *(_DWORD *)(a1 + 36) = v19 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v18 + 104 * v16 + 8) = v19 | 0x80000000;
            v20 = *(_QWORD *)(a1 + 16) + 104 * v16;
            *(_DWORD *)(v20 + 8) = *(_DWORD *)(v20 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v15);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 104 * v16) = v13;
            re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 104 * v16 + 16), (const re::DynamicString *)(v6 + 2));
            v21 = *(_QWORD *)(a1 + 16) + 104 * v16;
            v7 = *((_OWORD *)v6 + 3);
            v22 = *((_OWORD *)v6 + 4);
            v23 = *((_OWORD *)v6 + 5);
            *(_QWORD *)(v21 + 96) = v6[12];
            *(_OWORD *)(v21 + 64) = v22;
            *(_OWORD *)(v21 + 80) = v23;
            *(_OWORD *)(v21 + 48) = v7;
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v15) = v16;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v6 += 13;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::DynamicString,re::MaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v25, *(double *)&v7);
    }
  }
  else
  {
    if (a2)
      v24 = a2;
    else
      v24 = 3;
  }
}

void re::HashTable<re::DynamicString,re::MaterialSamplerData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 104 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_154_0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  signed int v21;
  _BYTE v22[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(_QWORD *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v22, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v22;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)v22 = v5;
      *(_QWORD *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (_QWORD *)(v6 + 24);
        do
        {
          if ((*(_DWORD *)(v13 - 2) & 0x80000000) != 0)
          {
            v14 = *(v13 - 3);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 32 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17) = v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 16) = *(v13 - 1);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 24) = *v13;
            *v13 = 0;
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 4;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2)
      v21 = a2;
    else
      v21 = 3;
  }
}

void re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 32 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_154_0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  int v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v7 == 0x7FFFFFFF)
  {
    v7 = *(unsigned int *)(a1 + 32);
    v8 = v7;
    if ((_DWORD)v7 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v8 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v8 + 1;
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 16 * v7);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 16 * v7);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  v12 = 16 * v7;
  *(_DWORD *)(v10 + v12) = v11 | 0x80000000;
  v13 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v12) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 16 * v7) & 0x80000000 | *(_DWORD *)(v13 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * v7 + 8) = *a5;
  *(_DWORD *)(v13 + 4 * a2) = v7;
  ++*(_DWORD *)(a1 + 28);
  return v7;
}

void re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 30));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, *(_QWORD *)&v15[16] + v10 + 8, *(_QWORD *)&v15[16] + v10 + 8);
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 16;
        }
        while (v11 < v9);
      }
      re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

void re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 16 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_154_0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 600);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u)
      v5 = 3;
    else
      v5 = *(_DWORD *)(a2 + 28);
    re::HashTable<re::StringID,re::RigDataTypeClass,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, v4, v5);
    re::HashTable<re::DynamicString,re::ParameterBinding,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
  }
  return a1;
}

uint64_t re::Result<re::TechniqueFunctionConstant,re::DynamicString>::~Result(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)a1)
  {
    v2 = *(_QWORD *)(a1 + 48);
    if (v2)
    {
      if (*(_QWORD *)(a1 + 56))
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *(_QWORD *)(a1 + 64));
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 64) = 0;
      }
      *(_QWORD *)(a1 + 48) = 0;
    }
  }
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 16) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 24));
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
  }
  return a1;
}

uint64_t re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addInternal<re::TechniqueFunctionConstant&>(uint64_t a1, re::DynamicString *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v8 = re::Hash<re::DynamicString>::operator()((uint64_t)&v28, (uint64_t)a2);
  v9 = v8;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v10) = 0;
    goto LABEL_8;
  }
  v10 = v8 % *(unsigned int *)(a1 + 24);
  v11 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v10);
  if ((_DWORD)v11 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<re::TechniqueFunctionConstant&>(a1, v10, v9, a2, a4);
    ++*(_DWORD *)(a1 + 40);
    v14 = *(_QWORD *)(a1 + 16) + 112 * v13;
    return v14 + 48;
  }
  v12 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v12 + 112 * v11 + 16, (uint64_t)a2))
  {
    v11 = *(_DWORD *)(v12 + 112 * v11 + 8) & 0x7FFFFFFF;
    if (v11 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  switch(a3)
  {
    case 0:
    case 1:
      v14 = v12 + 112 * v11;
      break;
    case 2:
    case 3:
      v16 = v12 + 112 * v11;
      v19 = *(_QWORD *)(v16 + 88);
      v18 = (_QWORD *)(v16 + 88);
      v17 = v19;
      if (v19)
      {
        v20 = v12 + 112 * v11;
        v22 = *(_QWORD *)(v20 + 96);
        v21 = (_QWORD *)(v20 + 96);
        if (v22)
        {
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 40))(v17, *(_QWORD *)(v12 + 112 * v11 + 104));
          *v21 = 0;
          v21[1] = 0;
        }
        *v18 = 0;
      }
      v23 = v12 + 112 * v11;
      v26 = *(_QWORD *)(v23 + 48);
      v25 = v23 + 48;
      v24 = v26;
      if (v26)
      {
        if ((*(_BYTE *)(v25 + 8) & 1) != 0)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v24 + 40))(v24, *(_QWORD *)(v25 + 16));
        *(_OWORD *)v25 = 0u;
        *(_OWORD *)(v25 + 16) = 0u;
      }
      v27 = *(_QWORD *)(a1 + 16) + 112 * v11;
      re::DynamicString::DynamicString((re::DynamicString *)(v27 + 48), (const re::DynamicString *)a4);
      *(_DWORD *)(v27 + 80) = *(_DWORD *)(a4 + 32);
      re::FixedArray<unsigned char>::FixedArray((_QWORD *)(v27 + 88), (uint64_t *)(a4 + 40));
      ++*(_DWORD *)(a1 + 40);
      v14 = *(_QWORD *)(a1 + 16) + 112 * v11;
      break;
    default:
      goto LABEL_8;
  }
  return v14 + 48;
}

uint64_t re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<re::TechniqueFunctionConstant&>(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 112 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 112 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 112 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 112 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 112 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 112 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 112 * v10 + 16), a4);
  v14 = *(_QWORD *)(a1 + 16) + 112 * v10;
  re::DynamicString::DynamicString((re::DynamicString *)(v14 + 48), (const re::DynamicString *)a5);
  *(_DWORD *)(v14 + 80) = *(_DWORD *)(a5 + 32);
  re::FixedArray<unsigned char>::FixedArray((_QWORD *)(v14 + 88), (uint64_t *)(a5 + 40));
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (re::DynamicString *)(*(_QWORD *)&v13[16] + v10 + 16), *(_QWORD *)&v13[16] + v10 + 48);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 112;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 112 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 112 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 112 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 112 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 112 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 112 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 112 * v10 + 16), a4);
  v14 = *(_QWORD *)(a1 + 16) + 112 * v10;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_QWORD *)(v14 + 72) = *(_QWORD *)(a5 + 24);
  v15 = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(v14 + 48) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  v16 = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 24) = 0;
  v18 = *(_QWORD *)(v14 + 56);
  v17 = *(_QWORD *)(v14 + 64);
  *(_QWORD *)(v14 + 56) = v15;
  *(_QWORD *)(v14 + 64) = v16;
  *(_QWORD *)(a5 + 8) = v18;
  *(_QWORD *)(a5 + 16) = v17;
  *(_DWORD *)(v14 + 80) = *(_DWORD *)(a5 + 32);
  *(_QWORD *)(v14 + 96) = 0;
  *(_QWORD *)(v14 + 104) = 0;
  *(_QWORD *)(v14 + 88) = 0;
  v19 = *(_QWORD *)(a5 + 48);
  *(_QWORD *)(v14 + 88) = *(_QWORD *)(a5 + 40);
  *(_QWORD *)(v14 + 96) = v19;
  *(_QWORD *)(a5 + 40) = 0;
  *(_QWORD *)(a5 + 48) = 0;
  v20 = *(_QWORD *)(v14 + 104);
  *(_QWORD *)(v14 + 104) = *(_QWORD *)(a5 + 56);
  *(_QWORD *)(a5 + 56) = v20;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 112 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_154_0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::HashTable(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u)
      v5 = 3;
    else
      v5 = *(_DWORD *)(a2 + 28);
    re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(a1, v4, v5);
    re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(a1, a2);
  }
  return a1;
}

void re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addEmplace<re::TechniqueFunctionConstant&>(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, (re::DynamicString *)(v8 + 16), v8 + 48);
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 112;
    }
  }
}

void re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_147, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 16) + v3);
        ++v4;
        v3 += 112;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

uint64_t re::Result<re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>,re::DynamicString>::~Result(uint64_t a1)
{
  _OWORD *v2;

  v2 = (_OWORD *)(a1 + 8);
  if (*(_BYTE *)a1)
  {
    re::HashTable<re::DynamicString,re::TechniqueFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)(a1 + 8));
  }
  else if (*(_QWORD *)v2)
  {
    if ((*(_BYTE *)(a1 + 16) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v2 + 40))(*(_QWORD *)v2, *(_QWORD *)(a1 + 24));
    *v2 = 0u;
    v2[1] = 0u;
  }
  return a1;
}

uint64_t re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::add(uint64_t a1, char **a2, _QWORD *a3)
{
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  unsigned int v13;
  char v15;

  v6 = re::RigEvaluation::HashString::operator()((int)&v15, *a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    return *(_QWORD *)(a1 + 16) + 32 * v13 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *a2;
  while (1)
  {
    v12 = v10 + 32 * v9;
    if (!strcmp(*(const char **)(v12 + 16), v11))
      return v12 + 24;
    v9 = *(_DWORD *)(v12 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
}

uint64_t re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *a5 = 0;
  *(_DWORD *)(v13 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

void re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<char const*,NS::SharedPtr<MTL::FunctionConstant>,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 32;
        }
        while (v11 < v9);
      }
      re::HashTable<unsigned long long,NS::SharedPtr<MTL::SamplerState>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

double re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  if (*(_QWORD *)(a1 + 56))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3)
      {
        v4 = (_QWORD *)(v2 + 72);
        v5 = 96 * v3;
        do
        {
          v6 = *(v4 - 4);
          if (v6)
          {
            if (*v4)
              (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
            *v4 = 0;
            *(v4 - 3) = 0;
            *(v4 - 2) = 0;
            *(v4 - 4) = 0;
            ++*((_DWORD *)v4 - 2);
          }
          v7 = *(v4 - 9);
          if (v7)
          {
            if ((*(_BYTE *)(v4 - 8) & 1) != 0)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, *(v4 - 7));
            *(_OWORD *)(v4 - 9) = 0u;
            *(_OWORD *)(v4 - 7) = 0u;
          }
          v4 += 12;
          v5 -= 96;
        }
        while (v5);
      }
      *(_QWORD *)(a1 + 8) = 0;
    }
    if (*(_QWORD *)a1)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56));
      *(_QWORD *)a1 = 0;
    }
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::find(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v14;
  char v15;
  char v16;
  char v17;

  if (!a1[7] || (unint64_t)a1[2] < 0x10 || !a1[3])
    return -1;
  v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v15, a2) % ((unint64_t)a1[2] >> 4);
  while (1)
  {
    v5 = *a1;
    v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v16, a2);
    v14 = *(int8x16_t *)(v5 + 16 * v4);
    v7 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(vdupq_n_s8(v6 & 0x7F), v14), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    v8 = __clz(__rbit64(v7));
    if (v8 <= 0x3F)
      break;
LABEL_10:
    v12.i64[0] = -1;
    v12.i64[1] = -1;
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v14, v12), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (++v4 == (unint64_t)a1[2] >> 4)
      v4 = 0;
    v11 = -1;
    if (v4 == re::Hash<re::DynamicString>::operator()((uint64_t)&v17, a2) % ((unint64_t)a1[2] >> 4))
      return v11;
  }
  v9 = 16 * v4;
  v10 = a1[1];
  while (1)
  {
    v11 = v8 + v9;
    if (re::DynamicString::operator==(a2, v10 + 96 * (v8 + v9)))
      return v11;
    if (v8 <= 0x3E)
    {
      v8 = __clz(__rbit64((-2 << v8) & v7));
      if (v8 < 0x40)
        continue;
    }
    goto LABEL_10;
  }
}

uint64_t re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::internalAdd(_anonymous_namespace_ *a1, const re::DynamicString *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  int v20;
  _QWORD v21[3];
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || *((_QWORD *)a1 + 2) > (unint64_t)(8 * v6))
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::resize(a1, 1);
  v7 = re::Hash<re::DynamicString>::operator()((uint64_t)&v18, (uint64_t)a2) % (*((_QWORD *)a1 + 2) >> 4);
  while (1)
  {
    v8 = *(_QWORD *)a1;
    v9 = re::Hash<re::DynamicString>::operator()((uint64_t)&v18, (uint64_t)a2);
    v10 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + 16 * v7)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v10 <= 0x3F)
      break;
    if (v7 + 1 == *((_QWORD *)a1 + 2) >> 4)
      v7 = 0;
    else
      ++v7;
  }
  v11 = v8 + 16 * v7;
  v12 = *(unsigned __int8 *)(v11 + v10);
  *(_BYTE *)(v11 + v10) = v9 & 0x7F;
  v13 = v10 + 16 * v7;
  re::KeyValuePair<re::DynamicString,re::VariedFunctionConstant>::KeyValuePair<re::DynamicString,re::VariedFunctionConstant>((re::DynamicString *)&v18, a2, a3);
  v14 = *((_QWORD *)a1 + 1) + 96 * v13;
  re::DynamicString::operator=((re::DynamicString *)v14, (re::DynamicString *)&v18);
  *(_DWORD *)(v14 + 32) = v20;
  re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v14 + 40, (uint64_t)v21);
  v15 = v24;
  *(_WORD *)(v14 + 88) = v25;
  *(_QWORD *)(v14 + 80) = v15;
  if (v21[0])
  {
    if (v23)
      (*(void (**)(void))(*(_QWORD *)v21[0] + 40))();
    v23 = 0;
    memset(v21, 0, sizeof(v21));
    ++v22;
  }
  if (v18 && (v19 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v18 + 40))();
  v16 = *((_QWORD *)a1 + 4);
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v16 - (v12 == 255);
  *((_QWORD *)a1 + 5) ^= re::Hash<re::DynamicString>::operator()((uint64_t)&v18, *((_QWORD *)a1 + 1) + 96 * v13);
  return *((_QWORD *)a1 + 1) + 96 * v13 + 32;
}

double re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[3] + a2;
  v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    v5 = 3 * v2;
    v6 = v5 << 6;
    v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7)
      v4 = v7;
    v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::doResize(a1, v3);
}

_QWORD *re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  v6 = v5 & 0x3FFFFFFFFFFFFF0;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v7 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 97 * v6, 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v8 = 0;
      *(_QWORD *)&v9 = -1;
      *((_QWORD *)&v9 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v8++) = v9;
      while (v7 != v8);
      result = (_QWORD *)*v3;
    }
    v3[1] = &result[2 * v7];
    v6 = v3[2];
    if (v6)
    {
      v10 = 0;
      for (i = 0; i < v6; ++i)
      {
        v12 = v3[1] + v10;
        *(_OWORD *)v12 = 0u;
        *(_OWORD *)(v12 + 16) = 0u;
        result = re::DynamicString::setCapacity((_QWORD *)v12, 0);
        *(_OWORD *)(v12 + 64) = 0u;
        *(_OWORD *)(v12 + 80) = 0u;
        *(_OWORD *)(v12 + 32) = 0u;
        *(_OWORD *)(v12 + 48) = 0u;
        v6 = v3[2];
        v10 += 96;
      }
    }
  }
  else
  {
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v6;
  return result;
}

double re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD v18[2];
  uint64_t v19;
  _OWORD v20[4];

  v4 = a1[7];
  memset(v20, 0, sizeof(v20));
  re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::init(v20, v4, a2);
  v18[0] = a1;
  v5 = a1[2];
  if (v5 >= 0x10)
  {
    v6 = 0;
    v7 = *a1;
    v8 = v5 >> 4;
    while (1)
    {
      v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v18[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF)
        break;
      v6 += 16;
      if (!--v8)
        goto LABEL_9;
    }
    v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    v19 = v10;
    if (v10 != -1)
    {
      do
      {
        re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::internalAdd((_anonymous_namespace_ *)v20, (const re::DynamicString *)(*(_QWORD *)(v18[0] + 8) + 96 * v10), *(_QWORD *)(v18[0] + 8) + 96 * v10 + 32);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v18);
        v10 = v19;
      }
      while (v19 != -1);
      v5 = a1[2];
    }
  }
LABEL_9:
  v11 = *((_QWORD *)&v20[3] + 1);
  *((_QWORD *)&v20[3] + 1) = a1[7];
  v12 = v20[0];
  v13 = v20[1];
  v20[0] = *(_OWORD *)a1;
  *(_QWORD *)&v20[1] = v5;
  v14 = v20[2];
  v15 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v20[3];
  a1[7] = v11;
  *(_OWORD *)((char *)&v20[2] + 8) = v15;
  v16 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v12;
  *((_OWORD *)a1 + 1) = v13;
  *((_OWORD *)a1 + 2) = v14;
  *(_OWORD *)((char *)&v20[1] + 8) = v16;
  return re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit((uint64_t)v20);
}

re::DynamicString *re::KeyValuePair<re::DynamicString,re::VariedFunctionConstant>::KeyValuePair<re::DynamicString,re::VariedFunctionConstant>(re::DynamicString *a1, const re::DynamicString *a2, uint64_t a3)
{
  re::DynamicString *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = re::DynamicString::DynamicString(a1, a2);
  *((_DWORD *)result + 8) = *(_DWORD *)a3;
  *((_QWORD *)result + 9) = 0;
  *((_DWORD *)result + 16) = 0;
  *((_QWORD *)result + 6) = 0;
  *((_QWORD *)result + 7) = 0;
  *((_QWORD *)result + 5) = 0;
  v5 = *(_QWORD *)(a3 + 16);
  *((_QWORD *)result + 5) = *(_QWORD *)(a3 + 8);
  *((_QWORD *)result + 6) = v5;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v6 = *((_QWORD *)result + 7);
  *((_QWORD *)result + 7) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = v6;
  v7 = *((_QWORD *)result + 9);
  *((_QWORD *)result + 9) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 40) = v7;
  ++*(_DWORD *)(a3 + 32);
  ++*((_DWORD *)result + 16);
  v8 = *(_QWORD *)(a3 + 48);
  *((_WORD *)result + 44) = *(_WORD *)(a3 + 56);
  *((_QWORD *)result + 10) = v8;
  return result;
}

uint64_t re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::HashBrown(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = a2[7];
  if (v4)
  {
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::init((_QWORD *)a1, v4, a2[3]);
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::copy((_anonymous_namespace_ *)a1, a2);
  }
  return a1;
}

_QWORD *re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::copy(_anonymous_namespace_ *a1, uint64_t *a2)
{
  _QWORD *result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD v16[3];
  int v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  _QWORD v21[2];
  uint64_t i;

  result = re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::clear(a1);
  v21[0] = a2;
  v5 = a2[2];
  if (v5 >= 0x10)
  {
    v6 = 0;
    v7 = *a2;
    v8 = v5 >> 4;
    while (1)
    {
      v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v21[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF)
        break;
      v6 += 16;
      if (!--v8)
        return result;
    }
    v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    for (i = v10; i != -1; v10 = i)
    {
      v11 = *(_QWORD *)(v21[0] + 8) + 96 * v10;
      re::DynamicString::DynamicString((re::DynamicString *)&v13, (const re::DynamicString *)v11);
      LODWORD(v15) = *(_DWORD *)(v11 + 32);
      re::DynamicArray<char const*>::DynamicArray((uint64_t)v16, (uint64_t *)(v11 + 40));
      v12 = *(_QWORD *)(v11 + 80);
      v20 = *(_WORD *)(v11 + 88);
      v19 = v12;
      re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::internalAdd(a1, (const re::DynamicString *)&v13, &v15);
      if (v16[0])
      {
        if (v18)
          (*(void (**)(void))(*(_QWORD *)v16[0] + 40))();
        v18 = 0;
        memset(v16, 0, sizeof(v16));
        ++v17;
      }
      if (v13)
      {
        if ((v14 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v13 + 40))();
      }
      result = re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v21);
    }
  }
  return result;
}

_QWORD *re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::clear(_QWORD *result)
{
  unint64_t v1;
  unint64_t v2;
  __int128 v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  result[5] = 0;
  result[6] = 0;
  v1 = result[2];
  result[3] = 0;
  result[4] = v1;
  if (v1 >= 0x10)
  {
    v2 = 0;
    *(_QWORD *)&v3 = -1;
    *((_QWORD *)&v3 + 1) = -1;
    do
    {
      *(_OWORD *)(*result + 16 * v2++) = v3;
      v1 = result[2];
    }
    while (v2 < v1 >> 4);
  }
  if (v1)
  {
    v4 = (_QWORD *)(result[1] + 72);
    v5 = 96 * v1;
    do
    {
      v6 = *(v4 - 4);
      if (v6)
      {
        if (*v4)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
        *v4 = 0;
        *(v4 - 3) = 0;
        *(v4 - 2) = 0;
        *(v4 - 4) = 0;
        ++*((_DWORD *)v4 - 2);
      }
      result = (_QWORD *)*(v4 - 9);
      if (result)
      {
        if ((*(_BYTE *)(v4 - 8) & 1) != 0)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 40))(result, *(v4 - 7));
        *(_OWORD *)(v4 - 9) = 0u;
        *(_OWORD *)(v4 - 7) = 0u;
      }
      v4 += 12;
      v5 -= 96;
    }
    while (v5);
  }
  return result;
}

uint64_t re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::internalAdd(_anonymous_namespace_ *a1, const re::DynamicString *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  int v21;
  _QWORD v22[3];
  int v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || *((_QWORD *)a1 + 2) > (unint64_t)(8 * v6))
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::resize((uint64_t *)a1, 1);
  v7 = re::Hash<re::DynamicString>::operator()((uint64_t)&v19, (uint64_t)a2) % (*((_QWORD *)a1 + 2) >> 4);
  while (1)
  {
    v8 = *(_QWORD *)a1;
    v9 = re::Hash<re::DynamicString>::operator()((uint64_t)&v19, (uint64_t)a2);
    v10 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + 16 * v7)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v10 <= 0x3F)
      break;
    if (++v7 == *((_QWORD *)a1 + 2) >> 4)
      v7 = 0;
    if (v7 == re::Hash<re::DynamicString>::operator()((uint64_t)&v19, (uint64_t)a2) % (*((_QWORD *)a1 + 2) >> 4))
    {
      re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      result = _os_crash();
      __break(1u);
      return result;
    }
  }
  v12 = v8 + 16 * v7;
  v13 = *(unsigned __int8 *)(v12 + v10);
  *(_BYTE *)(v12 + v10) = v9 & 0x7F;
  v14 = v10 + 16 * v7;
  re::DynamicString::DynamicString((re::DynamicString *)&v19, a2);
  v21 = *(_DWORD *)a3;
  re::DynamicArray<char const*>::DynamicArray((uint64_t)v22, a3 + 1);
  v25 = a3[6];
  v26 = *((_WORD *)a3 + 28);
  v15 = *((_QWORD *)a1 + 1) + 96 * v14;
  re::DynamicString::operator=((re::DynamicString *)v15, (re::DynamicString *)&v19);
  *(_DWORD *)(v15 + 32) = v21;
  re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(v15 + 40, (uint64_t)v22);
  v16 = v25;
  *(_WORD *)(v15 + 88) = v26;
  *(_QWORD *)(v15 + 80) = v16;
  if (v22[0])
  {
    if (v24)
      (*(void (**)(void))(*(_QWORD *)v22[0] + 40))();
    v24 = 0;
    memset(v22, 0, sizeof(v22));
    ++v23;
  }
  if (v19 && (v20 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v19 + 40))();
  v17 = *((_QWORD *)a1 + 4);
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v17 - (v13 == 255);
  *((_QWORD *)a1 + 5) ^= re::Hash<re::DynamicString>::operator()((uint64_t)&v19, *((_QWORD *)a1 + 1) + 96 * v14);
  return *((_QWORD *)a1 + 1) + 96 * v14 + 32;
}

uint64_t re::Result<re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>,re::DynamicString>::~Result(uint64_t a1)
{
  _OWORD *v2;

  v2 = (_OWORD *)(a1 + 8);
  if (*(_BYTE *)a1)
  {
    re::HashBrown<re::DynamicString,re::VariedFunctionConstant,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,void,false>::deinit(a1 + 8);
  }
  else if (*(_QWORD *)v2)
  {
    if ((*(_BYTE *)(a1 + 16) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v2 + 40))(*(_QWORD *)v2, *(_QWORD *)(a1 + 24));
    *v2 = 0u;
    v2[1] = 0u;
  }
  return a1;
}

uint64_t re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, _WORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize((uint64_t *)a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v11;
  LOWORD(v14) = *a3;
  v17 = *((_QWORD *)a1 + 1);
  v18 = v17 + 16 * v16;
  v19 = 16 * v16;
  *(_QWORD *)(v17 + v19) = *a2;
  *(_WORD *)(v18 + 8) = v14;
  result = v18 + 8;
  v21 = v15;
  v22 = *((_QWORD *)a1 + 4) - v21;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v22;
  v23 = *(_QWORD *)(v17 + v19) ^ (*(_QWORD *)(v17 + v19) >> 30);
  v24 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v23) ^ ((0xBF58476D1CE4E5B9 * v23) >> 27));
  *((_QWORD *)a1 + 5) ^= (v24 >> 31) ^ v24;
  return result;
}

uint64_t re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[3] + a2;
  v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    v5 = 3 * v2;
    v6 = v5 << 6;
    v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7)
      v4 = v7;
    v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::doResize(a1, v3);
}

_QWORD *re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v6 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 17 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v7 = 0;
      *(_QWORD *)&v8 = -1;
      *((_QWORD *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      result = (_QWORD *)*v3;
    }
    v9 = &result[2 * v6];
    v3[1] = v9;
    v10 = v3[2];
    if (v10)
    {
      v11 = v9 + 1;
      v12 = v3[2];
      do
      {
        *((_QWORD *)v11 - 1) = 0;
        *v11 = 0;
        v11 += 8;
        --v12;
      }
      while (v12);
    }
  }
  else
  {
    v10 = 0;
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v10;
  return result;
}

uint64_t re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __n128 v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _QWORD v22[2];
  uint64_t v23;
  _OWORD v24[4];

  v4 = a1[7];
  memset(v24, 0, sizeof(v24));
  re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::init(v24, v4, a2);
  v22[0] = a1;
  v6 = a1[2];
  if (v6 >= 0x10)
  {
    v7 = 0;
    v8 = *a1;
    v9 = v6 >> 4;
    v10 = (__n128)xmmword_2260EE390;
    v5.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v11 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v22[1] = (unsigned __int16)~v11;
      if (v11 != 0xFFFF)
        break;
      v7 += 16;
      if (!--v9)
        goto LABEL_9;
    }
    v12 = __clz(__rbit64((unsigned __int16)~v11)) + v7;
    v23 = v12;
    if (v12 != -1)
    {
      do
      {
        re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd(v24, *(_QWORD *)(v22[0] + 8) + 16 * v12, *(_QWORD *)(v22[0] + 8) + 16 * v12 + 8, v10, v5);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v22);
        v12 = v23;
      }
      while (v23 != -1);
      v6 = a1[2];
    }
  }
LABEL_9:
  v14 = *((_QWORD *)&v24[3] + 1);
  *((_QWORD *)&v24[3] + 1) = a1[7];
  result = *((_QWORD *)&v24[3] + 1);
  v15 = v24[0];
  v16 = v24[1];
  *(_QWORD *)&v24[1] = v6;
  v17 = *a1;
  v18 = a1[1];
  *(_QWORD *)&v24[0] = *a1;
  *((_QWORD *)&v24[0] + 1) = v18;
  v19 = v24[2];
  v20 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v24[3];
  a1[7] = v14;
  *(_OWORD *)((char *)&v24[2] + 8) = v20;
  v21 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v15;
  *((_OWORD *)a1 + 1) = v16;
  *((_OWORD *)a1 + 2) = v19;
  *(_OWORD *)((char *)&v24[1] + 8) = v21;
  if (result)
  {
    if (v18)
      *((_QWORD *)&v24[0] + 1) = 0;
    if (v17)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

uint64_t re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::find(_QWORD *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  unint64_t v10;
  int8x16_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1[7])
    return -1;
  v2 = a1[2];
  if (v2 < 0x10 || !a1[3])
    return -1;
  v3 = v2 >> 4;
  v4 = *a2;
  v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  v7 = v6 % v3;
  v8 = vdupq_n_s8(v6 & 0x7F);
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  v10 = v6 % v3;
  while (1)
  {
    v11 = *(int8x16_t *)(*a1 + 16 * v10);
    v12 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v8, v11), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    v13 = __clz(__rbit64(v12));
    if (v13 <= 0x3F)
      break;
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v11, v9), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v10 + 1 == v3)
      v10 = 0;
    else
      ++v10;
    v15 = -1;
    if (v10 == v7)
      return v15;
  }
  v14 = 16 * v10;
  while (1)
  {
    v15 = v13 + v14;
    if (v4 == *(_QWORD *)(a1[1] + 72 * (v13 + v14)))
      return v15;
    if (v13 <= 0x3E)
    {
      v13 = __clz(__rbit64((-2 << v13) & v12));
      if (v13 < 0x40)
        continue;
    }
    goto LABEL_10;
  }
}

_QWORD *re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  _QWORD *result;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize((uint64_t *)a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = *(_QWORD *)a1;
  v12 = v9 % v10;
  while (1)
  {
    v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + 16 * v12)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v13 <= 0x3F)
      break;
    if (v12 + 1 == v10)
      v12 = 0;
    else
      ++v12;
    if (v12 == v9 % v10)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  v14 = v11 + 16 * v12;
  v15 = *(unsigned __int8 *)(v14 + v13);
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v12;
  v33 = *a2;
  re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::HashBrown((uint64_t)&v34, a3);
  v17 = *((_QWORD *)a1 + 1);
  v18 = (uint64_t *)(v17 + 72 * v16);
  *v18 = v33;
  if (v18 != &v33)
  {
    v19 = (_QWORD *)(v17 + 72 * v16);
    v20 = v19[8];
    v19[8] = v41;
    v41 = v20;
    v21 = v19[1];
    v19[1] = v34;
    v34 = v21;
    v22 = v19[2];
    v19[2] = v35;
    v35 = v22;
    v23 = v19[3];
    v19[3] = v36;
    v36 = v23;
    v24 = v19[6];
    v19[6] = v39;
    v39 = v24;
    v25 = v19[7];
    v19[7] = v40;
    v40 = v25;
    v26 = v19[4];
    v19[4] = v37;
    v37 = v26;
    v27 = v19[5];
    v19[5] = v38;
    v38 = v27;
  }
  if (v41)
  {
    if (v35)
      v35 = 0;
    if (v34)
      (*(void (**)(void))(*(_QWORD *)v41 + 40))();
  }
  v28 = *((_QWORD *)a1 + 4);
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v28 - (v15 == 255);
  v29 = (unint64_t *)(*((_QWORD *)a1 + 1) + 72 * v16);
  v31 = *v29;
  result = v29 + 1;
  v32 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v31 ^ (v31 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v31 ^ (v31 >> 30))) >> 27));
  *((_QWORD *)a1 + 5) ^= (v32 >> 31) ^ v32;
  return result;
}

double re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[3] + a2;
  v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    v5 = 3 * v2;
    v6 = v5 << 6;
    v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7)
      v4 = v7;
    v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::doResize(a1, v3);
}

_QWORD *re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v6 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 73 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v7 = 0;
      *(_QWORD *)&v8 = -1;
      *((_QWORD *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      result = (_QWORD *)*v3;
    }
    v3[1] = &result[2 * v6];
    if (v3[2])
    {
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = v3[1] + v9;
        *(_QWORD *)(v11 + 64) = 0;
        *(_OWORD *)(v11 + 32) = 0uLL;
        *(_OWORD *)(v11 + 48) = 0uLL;
        *(_OWORD *)v11 = 0uLL;
        *(_OWORD *)(v11 + 16) = 0uLL;
        ++v10;
        v12 = v3[2];
        v9 += 72;
      }
      while (v10 < v12);
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v12;
  return result;
}

double re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _QWORD v18[2];
  uint64_t v19;
  _OWORD v20[4];

  v4 = a1[7];
  memset(v20, 0, sizeof(v20));
  re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::init(v20, v4, a2);
  v18[0] = a1;
  v5 = a1[2];
  if (v5 >= 0x10)
  {
    v6 = 0;
    v7 = *a1;
    v8 = v5 >> 4;
    while (1)
    {
      v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v18[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF)
        break;
      v6 += 16;
      if (!--v8)
        goto LABEL_9;
    }
    v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    v19 = v10;
    if (v10 != -1)
    {
      do
      {
        re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd((_anonymous_namespace_ *)v20, (uint64_t *)(*(_QWORD *)(v18[0] + 8) + 72 * v10), (__int128 *)(*(_QWORD *)(v18[0] + 8) + 72 * v10 + 8));
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v18);
        v10 = v19;
      }
      while (v19 != -1);
      v5 = a1[2];
    }
  }
LABEL_9:
  v11 = *((_QWORD *)&v20[3] + 1);
  *((_QWORD *)&v20[3] + 1) = a1[7];
  v12 = v20[0];
  v13 = v20[1];
  v20[0] = *(_OWORD *)a1;
  *(_QWORD *)&v20[1] = v5;
  v14 = v20[2];
  v15 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v20[3];
  a1[7] = v11;
  *(_OWORD *)((char *)&v20[2] + 8) = v15;
  v16 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v12;
  *((_OWORD *)a1 + 1) = v13;
  *((_OWORD *)a1 + 2) = v14;
  *(_OWORD *)((char *)&v20[1] + 8) = v16;
  return re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::deinit((uint64_t)v20);
}

_QWORD *re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd(_anonymous_namespace_ *a1, uint64_t *a2, __int128 *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t *v28;
  _QWORD *result;
  unint64_t v30;
  unint64_t v31;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize(a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13);
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = *a2;
  v17 = *a3;
  v18 = a3[1];
  *a3 = 0u;
  a3[1] = 0u;
  v19 = a3[2];
  a3[2] = 0u;
  v20 = v13 + 16 * v11;
  v22 = *((_QWORD *)a3 + 6);
  v21 = *((_QWORD *)a3 + 7);
  *((_QWORD *)a3 + 6) = 0;
  *((_QWORD *)a3 + 7) = 0;
  v23 = *((_QWORD *)a1 + 1) + 72 * v20;
  v24 = *(_QWORD *)(v23 + 64);
  v25 = *(_QWORD *)(v23 + 8);
  *(_OWORD *)(v23 + 8) = v17;
  *(_QWORD *)v23 = v16;
  *(_QWORD *)(v23 + 56) = v22;
  *(_QWORD *)(v23 + 64) = v21;
  *(_OWORD *)(v23 + 24) = v18;
  *(_OWORD *)(v23 + 40) = v19;
  if (v24)
    v26 = v25 == 0;
  else
    v26 = 1;
  if (!v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
  v27 = *((_QWORD *)a1 + 4);
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v27 - (v15 == 255);
  v28 = (unint64_t *)(*((_QWORD *)a1 + 1) + 72 * v20);
  v30 = *v28;
  result = v28 + 1;
  v31 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v30 ^ (v30 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v30 ^ (v30 >> 30))) >> 27));
  *((_QWORD *)a1 + 5) ^= (v31 >> 31) ^ v31;
  return result;
}

uint64_t re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::HashBrown(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = a2[7];
  if (v4)
  {
    re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::init((_QWORD *)a1, v4, a2[3]);
    re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::copy((_anonymous_namespace_ *)a1, a2);
  }
  return a1;
}

_anonymous_namespace_ *re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::copy(_anonymous_namespace_ *result, uint64_t *a2)
{
  _anonymous_namespace_ *v2;
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[2];
  uint64_t i;

  v2 = result;
  *((_QWORD *)result + 5) = 0;
  *((_QWORD *)result + 6) = 0;
  v3 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 3) = 0;
  *((_QWORD *)result + 4) = v3;
  if (v3 >= 0x10)
  {
    v4 = 0;
    *(_QWORD *)&v5 = -1;
    *((_QWORD *)&v5 + 1) = -1;
    do
      *(_OWORD *)(*(_QWORD *)result + 16 * v4++) = v5;
    while (v4 < *((_QWORD *)result + 2) >> 4);
  }
  v13[0] = a2;
  v6 = a2[2];
  if (v6 >= 0x10)
  {
    v7 = 0;
    v8 = *a2;
    v9 = v6 >> 4;
    while (1)
    {
      v10 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v8 + v7)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v13[1] = (unsigned __int16)~v10;
      if (v10 != 0xFFFF)
        break;
      v7 += 16;
      if (!--v9)
        return result;
    }
    v11 = __clz(__rbit64((unsigned __int16)~v10)) + v7;
    for (i = v11; i != -1; v11 = i)
    {
      v12 = *(_OWORD *)(*(_QWORD *)(v13[0] + 8) + 16 * v11);
      re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd(v2, &v12, (__int16 *)&v12 + 4);
      result = (_anonymous_namespace_ *)re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v13);
    }
  }
  return result;
}

uint64_t re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, __int16 *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::resize((uint64_t *)a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9;
  v9 = 0x94D049BB133111EBLL;
  v10 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v11 = (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31);
  v12 = v7 >> 4;
  v13 = *(_QWORD *)a1;
  v14 = v11 % v12;
  while (1)
  {
    v15 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v13 + 16 * v14)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v15 < 0x40)
      break;
    if (v14 + 1 == v12)
      v14 = 0;
    else
      ++v14;
    if (v14 == v11 % v12)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  v16 = v13 + 16 * v14;
  v17 = *(unsigned __int8 *)(v16 + v15) == 255;
  *(_BYTE *)(v16 + v15) = v11 & 0x7F;
  v18 = v15 + 16 * v14;
  v19 = *a3;
  v20 = *((_QWORD *)a1 + 1);
  v21 = v20 + 16 * v18;
  v22 = 16 * v18;
  *(_QWORD *)(v20 + v22) = *a2;
  *(_WORD *)(v21 + 8) = v19;
  result = v21 + 8;
  v24 = v17;
  v25 = *((_QWORD *)a1 + 4) - v24;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v25;
  v26 = *(_QWORD *)(v20 + v22) ^ (*(_QWORD *)(v20 + v22) >> 30);
  v27 = ((v26 * v8) ^ ((v26 * v8) >> 27)) * v9;
  *((_QWORD *)a1 + 5) ^= (v27 >> 31) ^ v27;
  return result;
}

double re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 120;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;

  v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    v2 = result;
    v4 = (_OWORD *)(result + 16);
    v3 = *(_QWORD *)(result + 16);
    *((_DWORD *)v4 - 2) = v1 & 0x7FFFFFFF;
    if (v3)
    {
      if ((*(_BYTE *)(v2 + 24) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(v2 + 32));
      *v4 = 0u;
      v4[1] = 0u;
    }
    v5 = *(_QWORD *)(v2 + 88);
    if (v5)
    {
      if ((*(_BYTE *)(v2 + 96) & 1) != 0)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(v2 + 104));
      *(_OWORD *)(v2 + 88) = 0u;
      *(_OWORD *)(v2 + 104) = 0u;
    }
    return re::DynamicArray<re::DynamicString>::deinit(v2 + 48);
  }
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 120 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 120 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 120 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 120 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 120 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 120 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 120 * v10 + 16), a4);
  v14 = *(_QWORD *)(a1 + 16) + 120 * v10;
  *(_QWORD *)(v14 + 80) = 0;
  *(_DWORD *)(v14 + 72) = 0;
  *(_QWORD *)(v14 + 56) = 0;
  *(_QWORD *)(v14 + 64) = 0;
  *(_QWORD *)(v14 + 48) = 0;
  v15 = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(v14 + 48) = *(_QWORD *)a5;
  *(_QWORD *)(v14 + 56) = v15;
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  v16 = *(_QWORD *)(v14 + 64);
  *(_QWORD *)(v14 + 64) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v16;
  v17 = *(_QWORD *)(v14 + 80);
  *(_QWORD *)(v14 + 80) = *(_QWORD *)(a5 + 32);
  *(_QWORD *)(a5 + 32) = v17;
  ++*(_DWORD *)(a5 + 24);
  ++*(_DWORD *)(v14 + 72);
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_QWORD *)(v14 + 112) = *(_QWORD *)(a5 + 64);
  v18 = *(_QWORD *)(a5 + 48);
  *(_QWORD *)(v14 + 88) = *(_QWORD *)(a5 + 40);
  *(_QWORD *)(a5 + 40) = 0;
  v19 = *(_QWORD *)(a5 + 56);
  *(_QWORD *)(a5 + 64) = 0;
  v21 = *(_QWORD *)(v14 + 96);
  v20 = *(_QWORD *)(v14 + 104);
  *(_QWORD *)(v14 + 96) = v18;
  *(_QWORD *)(v14 + 104) = v19;
  *(_QWORD *)(a5 + 48) = v21;
  *(_QWORD *)(a5 + 56) = v20;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::MaterialTechniqueGroupData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (re::DynamicString *)(*(_QWORD *)&v13[16] + v10 + 16));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 120;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,re::Pair<re::DynamicArray<re::DynamicString>,re::DynamicString,true>,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

void re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 48 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_154_0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

uint64_t re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 48 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 48 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 48 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 48 * v8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * v8 + 8) = *a4;
  v14 = *(_QWORD *)(a1 + 16) + 48 * v8;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_QWORD *)(v14 + 40) = a5[3];
  v15 = a5[1];
  *(_QWORD *)(v14 + 16) = *a5;
  *a5 = 0;
  v16 = a5[2];
  a5[3] = 0;
  v18 = *(_QWORD *)(v14 + 24);
  v17 = *(_QWORD *)(v14 + 32);
  *(_QWORD *)(v14 + 24) = v15;
  *(_QWORD *)(v14 + 32) = v16;
  a5[1] = v18;
  a5[2] = v17;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_OWORD *)&v15[24];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = DWORD2(v7);
      if (DWORD2(v7))
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 30));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, *(_QWORD *)&v15[16] + v10 + 8, *(_QWORD *)&v15[16] + v10 + 16);
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 48;
        }
        while (v11 < v9);
      }
      re::HashTable<re::WeakStringID,re::MaterialParameterProperties,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v15, *(double *)&v7);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

_QWORD *re::DynamicArray<re::TechniqueFunctionConstant>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::TechniqueFunctionConstant>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 6;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_22;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_22:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = v9 << 6;
        v12 = 0uLL;
        do
        {
          v13 = &v7[v10 / 8];
          v14 = (_QWORD *)(v8 + v10);
          *(_OWORD *)v13 = v12;
          *((_OWORD *)v13 + 1) = v12;
          v13[3] = *(_QWORD *)(v8 + v10 + 24);
          v15 = *(_QWORD *)(v8 + v10 + 8);
          *v13 = *(_QWORD *)(v8 + v10);
          *v14 = 0;
          v16 = *(_QWORD *)(v8 + v10 + 16);
          v14[3] = 0;
          v18 = v7[v10 / 8 + 1];
          v17 = v7[v10 / 8 + 2];
          v13[1] = v15;
          v13[2] = v16;
          v14[1] = v18;
          v14[2] = v17;
          *((_DWORD *)v13 + 8) = *(_DWORD *)(v8 + v10 + 32);
          v13[6] = 0;
          v13[7] = 0;
          v13[5] = 0;
          v19 = *(_QWORD *)(v8 + v10 + 48);
          v13[5] = *(_QWORD *)(v8 + v10 + 40);
          v13[6] = v19;
          v14[5] = 0;
          v14[6] = 0;
          v20 = v7[v10 / 8 + 7];
          v13[7] = *(_QWORD *)(v8 + v10 + 56);
          v14[7] = v20;
          if (*(_QWORD *)(v8 + v10 + 40))
            v14[5] = 0;
          if (*v14)
          {
            if ((v14[1] & 1) != 0)
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v14 + 40))(*v14, v14[2]);
              v12 = 0uLL;
            }
            *(_OWORD *)v14 = v12;
            *((_OWORD *)v14 + 1) = v12;
          }
          v10 += 64;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_22;
    }
  }
  return result;
}

void re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  signed int v14;
  _BYTE v15[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v15, 0, 36);
      *(_QWORD *)&v15[36] = 0x7FFFFFFFLL;
      re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v15, v4, a2);
      v5 = *(_OWORD *)v15;
      *(_OWORD *)v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v15[16];
      *(_QWORD *)&v15[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v15[24];
      *(_OWORD *)&v15[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v15[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v15[16] + v10) & 0x80000000) != 0)
          {
            v12 = 0xBF58476D1CE4E5B9
                * (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) ^ (*(_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8) >> 30));
            v13 = (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) ^ ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31);
            re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(a1, v13 % *(unsigned int *)(a1 + 24), v13, (_QWORD *)(*(_QWORD *)&v15[16] + v10 + 8), (_QWORD *)(*(_QWORD *)&v15[16] + v10 + 16));
            v9 = *(_DWORD *)&v15[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit((uint64_t *)v15);
    }
  }
  else
  {
    if (a2)
      v14 = a2;
    else
      v14 = 3;
  }
}

uint64_t re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 24 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  v14 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(v14 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(v14 + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 24 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_154_0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

double re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  uint64_t v8;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2];
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          v8 = v6 + v4;
          *(_DWORD *)v8 = v7 & 0x7FFFFFFF;
          *(_QWORD *)(v8 + 8) = 0;
          *(_QWORD *)(v8 + 16) = 0;
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 24;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10) & 0x80000000) != 0)
          {
            re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10 + 8) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10 + 8), (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 8), (_QWORD *)(*(_QWORD *)&v13[16] + v10 + 16));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>::setCapacity(a1, (2 * *(_DWORD *)(a1 + 28)));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 24 * v8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  v13 = 24 * v8;
  *(_DWORD *)(v11 + v13) = v12 | 0x80000000;
  v14 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v13) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8) & 0x80000000 | *(_DWORD *)(v14 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(v14 + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

uint64_t re::DynamicArray<re::LinkedFunction>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 0;
        v6 = 144 * v4;
        do
        {
          v7 = (_QWORD *)(v3 + v5);
          v8 = *(_QWORD *)(v3 + v5 + 120);
          if (v8)
          {
            if (v7[16])
            {
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, *(_QWORD *)(v3 + v5 + 136));
              v7[16] = 0;
              v7[17] = 0;
            }
            v7[15] = 0;
          }
          re::FixedArray<re::TypedArgument>::deinit(v7 + 12);
          re::FixedArray<re::TechniqueFunctionConstant>::deinit(v7 + 8);
          v9 = v7[6];
          if (v9)
          {

            v7[6] = 0;
          }
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 24));
          re::StringID::destroyString((re::StringID *)(v3 + v5 + 8));
          v5 += 144;
        }
        while (v6 != v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::TechniqueFunctionConstant>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = (_QWORD *)(v3 + 40);
        v6 = v4 << 6;
        do
        {
          v7 = v5 - 5;
          if (*v5)
          {
            if (v5[1])
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[2]);
              v5[1] = 0;
              v5[2] = 0;
            }
            *v5 = 0;
          }
          if (*v7)
          {
            if ((*(_BYTE *)(v5 - 4) & 1) != 0)
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v7 + 40))(*v7, *(v5 - 3));
            *(_OWORD *)v7 = 0u;
            *(_OWORD *)(v5 - 3) = 0u;
          }
          v5 += 8;
          v6 -= 64;
        }
        while (v6);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::FixedArray<re::TechniqueFunctionConstant>::init<>(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v4;
  _anonymous_namespace_ *v5;
  uint64_t v6;
  _anonymous_namespace_ *v7;
  unint64_t i;

  *result = a2;
  result[1] = a3;
  if (!a3)
    return result;
  if (a3 >> 58)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 64, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  v5 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3 << 6, 8);
  v4[2] = v5;
  if (!v5)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v6, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = (_QWORD *)_os_crash();
    __break(1u);
    return result;
  }
  v7 = v5;
  for (i = a3 - 1; i; --i)
  {
    *(_OWORD *)v7 = 0u;
    *((_OWORD *)v7 + 1) = 0u;
    v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v7, 0);
    *((_DWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 6) = 0;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 5) = 0;
    v7 = (_anonymous_namespace_ *)((char *)v7 + 64);
  }
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  result = re::DynamicString::setCapacity(v7, 0);
  *((_DWORD *)v7 + 8) = 0;
  *((_QWORD *)v7 + 6) = 0;
  *((_QWORD *)v7 + 7) = 0;
  *((_QWORD *)v7 + 5) = 0;
  return result;
}

_QWORD *re::DynamicArray<re::LinkedFunction>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::LinkedFunction>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x90uLL))
        {
          v2 = 144 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 144 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 144, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 144 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::LinkedFunction>(v8, v11);
          v8 += 144;
          v11 += 144;
          v10 -= 144;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t re::FixedArray<re::LinkedFunction>::init<>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  if (!a3)
    return result;
  if (a3 >= 0x1C71C71C71C71C8)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 144, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 144 * a3, 8);
  *(_QWORD *)(v4 + 16) = result;
  if (!result)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    result = _os_crash();
    __break(1u);
    return result;
  }
  v6 = a3 - 1;
  if (a3 != 1)
  {
    do
    {
      *(_BYTE *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = &str_110;
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = &str_110;
      *(_QWORD *)(result + 40) = 0;
      *(_QWORD *)(result + 48) = 0;
      *(_DWORD *)(result + 56) = 0;
      *(_OWORD *)(result + 64) = 0uLL;
      *(_OWORD *)(result + 80) = 0uLL;
      *(_OWORD *)(result + 96) = 0uLL;
      *(_OWORD *)(result + 112) = 0uLL;
      *(_OWORD *)(result + 128) = 0uLL;
      result += 144;
      --v6;
    }
    while (v6);
  }
  *(_BYTE *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &str_110;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = &str_110;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 56) = 0;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  return result;
}

void re::ObjectHelper::move<re::LinkedFunction>(uint64_t a1, uint64_t a2)
{
  char v3;
  re::StringID *v4;
  char v5;
  re::StringID *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_BYTE *)a2 = *(_BYTE *)a1;
  v4 = (re::StringID *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(a1 + 8) & 1;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFFELL | v3 & 1;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = &str_110;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = (re::StringID *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL | *(_QWORD *)(a1 + 24) & 1;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL | v5 & 1;
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = &str_110;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  v8 = *(_DWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v10 = (_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 40) = v7;
  *(_QWORD *)(a2 + 64) = v9;
  *(_QWORD *)(a1 + 64) = 0;
  v11 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a2 + 80) = v12;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v14 = *(_QWORD *)(a1 + 96);
  v13 = (_QWORD *)(a1 + 96);
  *(_DWORD *)(a2 + 56) = v8;
  *(_QWORD *)(a2 + 96) = v14;
  *v13 = 0;
  v15 = *(_QWORD *)(a2 + 112);
  v16 = v13[2];
  *(_QWORD *)(a2 + 104) = v13[1];
  *(_QWORD *)(a2 + 112) = v16;
  v13[1] = 0;
  v13[2] = v15;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v17 = v13[4];
  *(_QWORD *)(a2 + 120) = v13[3];
  *(_QWORD *)(a2 + 128) = v17;
  v13[3] = 0;
  v13[4] = 0;
  v18 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = v13[5];
  v13[5] = v18;
  if (v13[3])
    *(_QWORD *)(a1 + 120) = 0;
  re::FixedArray<re::TypedArgument>::deinit(v13);
  re::FixedArray<re::TechniqueFunctionConstant>::deinit(v10);
  v19 = *(_QWORD *)(a1 + 48);
  if (v19)
  {

    *(_QWORD *)(a1 + 48) = 0;
  }
  re::StringID::destroyString(v6);
  re::StringID::destroyString(v4);
}

void re::dispatch::Queue::make(const char *a1@<X0>, int *a2@<X1>, NSObject **a3@<X8>)
{
  NSObject *v6;
  id v7;
  uint64_t v8;
  dispatch_qos_class_t v9;
  NSObject *v10;
  int v11;
  dispatch_autorelease_frequency_t v12;
  dispatch_queue_t *v13;
  dispatch_queue_t v14;
  NSObject *v15;
  NSObject *attr;

  if (a2[2] == 1)
  {
    v6 = MEMORY[0x24BDAC9C0];
    v7 = MEMORY[0x24BDAC9C0];
  }
  else
  {
    v6 = 0;
  }
  v8 = *a2;
  if (v8 > 4)
    v9 = QOS_CLASS_UNSPECIFIED;
  else
    v9 = dword_2261067B0[v8];
  dispatch_queue_attr_make_with_qos_class(v6, v9, 0);
  v10 = objc_claimAutoreleasedReturnValue();

  v11 = a2[1];
  if (v11 == 2)
    v12 = DISPATCH_AUTORELEASE_FREQUENCY_NEVER;
  else
    v12 = (unint64_t)(v11 == 1);
  dispatch_queue_attr_make_with_autorelease_frequency(v10, v12);
  attr = objc_claimAutoreleasedReturnValue();

  v13 = (dispatch_queue_t *)*((_QWORD *)a2 + 2);
  if (v13 && *v13)
    v14 = dispatch_queue_create_with_target_V2(a1, attr, *v13);
  else
    v14 = dispatch_queue_create(a1, attr);
  v15 = v14;
  *a3 = v15;

}

void re::dispatch::Queue::global(re::dispatch::Queue *this@<X0>, uintptr_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v4;

  dispatch_get_global_queue((intptr_t)this, a2);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  *a3 = v4;

}

void re::dispatch::Group::async(id *a1, NSObject **a2, void *a3, void (__cdecl *a4)(void *))
{
  NSObject *v6;
  NSObject *v7;

  v6 = *a2;
  v7 = *a1;
  dispatch_group_async_f(v7, v6, a3, a4);

}

void re::dispatch::Group::async(id *a1, NSObject **a2, void *a3)
{
  NSObject *v4;
  NSObject *v5;

  v4 = *a2;
  v5 = *a1;
  dispatch_group_async(v5, v4, a3);

}

void re::dispatch::Group::notify(id *a1, NSObject **a2, void *a3)
{
  NSObject *v4;
  NSObject *v5;

  v4 = *a2;
  v5 = *a1;
  dispatch_group_notify(v5, v4, a3);

}

float32x4_t *re::ecs2::CARESortingManager::optionalSortingPlaneFrom(float32x4_t *this, const re::ecs2::Entity *a2, re::ecs2::SortingTransformCache *a3)
{
  float32x4_t *result;
  float32x4_t v6;
  int8x16_t v7;
  unsigned __int32 v8;
  float32x2_t v9;
  float32x2_t v10;
  float32x4_t v11;
  float32x4_t v12;
  __int32 v13;
  uint32x4_t v14;
  float v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  float32x4_t v21;

  result = (float32x4_t *)re::ecs2::SortingTransformCache::getOrRecomputeWorldMatrixAndInverse(a3, a2);
  v6 = result[2];
  v7 = (int8x16_t)vmulq_f32(v6, v6);
  if (fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))) < 1.0e-10)
    goto LABEL_6;
  v8 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))).u32[0];
  v9 = vrsqrte_f32((float32x2_t)v8);
  v10 = vmul_f32(v9, vrsqrts_f32((float32x2_t)v8, vmul_f32(v9, v9)));
  v11 = vmulq_n_f32(v6, vmul_f32(v10, vrsqrts_f32((float32x2_t)v8, vmul_f32(v10, v10))).f32[0]);
  v12 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1);
  if ((vmovn_s32((int32x4_t)vmvnq_s8(vorrq_s8((int8x16_t)vcgtq_f32(v12, v11), (int8x16_t)vcgeq_f32(v11, v12)))).u8[0] & 1) != 0
    || (v13 = v11.i32[2],
        v20 = v11.i64[0],
        v21 = result[2],
        v17 = *result,
        v18 = result[1],
        v19 = result[3],
        (result = (float32x4_t *)re::ecs2::EntityComponentCollection::get((const re::ecs2::Entity *)((char *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)) == 0))
  {
LABEL_6:
    this->i8[0] = 0;
  }
  else
  {
    v14 = (uint32x4_t)vcgtq_f32(result[3], result[4]);
    v14.i32[3] = v14.i32[2];
    if ((vmaxvq_u32(v14) & 0x80000000) != 0)
      v15 = result[2].f32[2] * 0.5;
    else
      LODWORD(v15) = result[4].i64[1];
    v16 = vaddq_f32(v19, vmlaq_n_f32(vmlaq_f32(vmulq_f32(v17, (float32x4_t)0), (float32x4_t)0, v18), v21, v15));
    this->i8[0] = 1;
    this[1].i64[0] = v20;
    this[1].i32[2] = v13;
    this[2] = vdivq_f32(v16, (float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 3));
  }
  return result;
}

uint64_t re::ecs2::SortingTransformCache::getOrRecomputeWorldMatrixAndInverse(re::ecs2::SortingTransformCache *this, const re::ecs2::Entity *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  simd_float4 v17;
  simd_float4 v18;
  simd_float4 v19;
  simd_float4 v20;
  simd_float4 v21;
  simd_float4 v22;
  uint64_t v23;
  simd_float4x4 v25[2];

  v4 = (char *)this + 8;
  v5 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                         * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
  v6 = v5 ^ (v5 >> 31);
  if (*((_QWORD *)this + 1))
  {
    v7 = *(unsigned int *)(*((_QWORD *)this + 2) + 4 * (v6 % *((unsigned int *)this + 8)));
    if ((_DWORD)v7 != 0x7FFFFFFF)
    {
      v14 = *((_QWORD *)this + 3);
      if (*(const re::ecs2::Entity **)(v14 + 160 * v7 + 16) == a2)
      {
LABEL_12:
        v15 = v14 + 160 * v7;
        return v15 + 32;
      }
      while (1)
      {
        LODWORD(v7) = *(_DWORD *)(v14 + 160 * v7 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v7 == 0x7FFFFFFF)
          break;
        if (*(const re::ecs2::Entity **)(v14 + 160 * v7 + 16) == a2)
          goto LABEL_12;
      }
    }
  }
  memset(v25, 0, sizeof(v25));
  re::ecs2::TransformHelper::computeWorldMatrixForRendering(*(re::ecs2::TransformHelper **)this, (re::ecs2::TransformComponent **)a2, v25);
  v25[1] = __invert_f4(v25[0]);
  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    v8 = v6 % *((unsigned int *)this + 8);
    v9 = *(unsigned int *)(*((_QWORD *)this + 2) + 4 * v8);
    if ((_DWORD)v9 != 0x7FFFFFFF)
    {
      v23 = *((_QWORD *)this + 3);
      if (*(const re::ecs2::Entity **)(v23 + 160 * v9 + 16) == a2)
      {
LABEL_18:
        v15 = v23 + 160 * v9;
        return v15 + 32;
      }
      while (1)
      {
        LODWORD(v9) = *(_DWORD *)(v23 + 160 * v9 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v9 == 0x7FFFFFFF)
          break;
        if (*(const re::ecs2::Entity **)(v23 + 160 * v9 + 16) == a2)
          goto LABEL_18;
      }
    }
  }
  v10 = *((unsigned int *)this + 11);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *((unsigned int *)this + 10);
    v11 = v10;
    if ((_DWORD)v10 == *((_DWORD *)this + 8))
    {
      re::HashTable<re::ecs2::Entity const*,re::ecs2::TransformAndInverse,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)v4, 2 * *((_DWORD *)this + 9));
      LODWORD(v8) = v6 % *((unsigned int *)this + 8);
      v11 = *((_DWORD *)this + 10);
    }
    *((_DWORD *)this + 10) = v11 + 1;
    v12 = *((_QWORD *)this + 3);
    v13 = *(_DWORD *)(v12 + 160 * v10 + 8);
  }
  else
  {
    v12 = *((_QWORD *)this + 3);
    v13 = *(_DWORD *)(v12 + 160 * v10 + 8);
    *((_DWORD *)this + 11) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 160 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*((_QWORD *)this + 3) + 160 * v10 + 8) = *(_DWORD *)(*((_QWORD *)this + 3) + 160 * v10 + 8) & 0x80000000 | *(_DWORD *)(*((_QWORD *)this + 2) + 4 * v8);
  *(_QWORD *)(*((_QWORD *)this + 3) + 160 * v10) = v6;
  *(_QWORD *)(*((_QWORD *)this + 3) + 160 * v10 + 16) = a2;
  v16 = *((_QWORD *)this + 3) + 160 * v10;
  v17 = v25[0].columns[0];
  v18 = v25[0].columns[1];
  v19 = v25[0].columns[3];
  *(simd_float4 *)(v16 + 64) = v25[0].columns[2];
  *(simd_float4 *)(v16 + 80) = v19;
  *(simd_float4 *)(v16 + 32) = v17;
  *(simd_float4 *)(v16 + 48) = v18;
  v20 = v25[1].columns[0];
  v21 = v25[1].columns[1];
  v22 = v25[1].columns[3];
  *(simd_float4 *)(v16 + 128) = v25[1].columns[2];
  *(simd_float4 *)(v16 + 144) = v22;
  *(simd_float4 *)(v16 + 96) = v20;
  *(simd_float4 *)(v16 + 112) = v21;
  *(_DWORD *)(*((_QWORD *)this + 2) + 4 * v8) = v10;
  ++*((_DWORD *)this + 9);
  ++*((_DWORD *)this + 12);
  v15 = *((_QWORD *)this + 3) + 160 * v10;
  return v15 + 32;
}

uint64_t re::ecs2::CARESortingManager::CARESortingManager(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  re *v16;
  float v17;
  NSObject *v18;
  _BOOL8 v19;
  float v20;
  NSObject *v21;
  _BOOL8 v22;
  NSObject *v23;
  _BOOL8 v24;
  _anonymous_namespace_ *v25;
  _anonymous_namespace_ *v26;
  _anonymous_namespace_ *v27;
  _anonymous_namespace_ *v28;
  _anonymous_namespace_ *v29;
  _anonymous_namespace_ *v30;
  uint8_t buf[4];
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24ED44CA0;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 44) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 56) = 0u;
  v5 = a1 + 56;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 92) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 104) = 0u;
  v6 = a1 + 104;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 152) = 0u;
  v7 = a1 + 152;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_DWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 188) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  v8 = a1 + 248;
  *(_QWORD *)(a1 + 236) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  v9 = a1 + 296;
  *(_QWORD *)(a1 + 284) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  v10 = a1 + 344;
  *(_QWORD *)(a1 + 332) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 380) = 0x7FFFFFFFLL;
  *(_DWORD *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_QWORD *)(a1 + 428) = 0x7FFFFFFFLL;
  v11 = a1 + 448;
  *(_QWORD *)(a1 + 440) = 0;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 200) = 0u;
  *(_QWORD *)(v8 + 232) = 0x7FFFFFFF00000000;
  *(_DWORD *)(v8 + 240) = 0;
  *(_QWORD *)(v8 + 248) = a2;
  *(_QWORD *)(v8 + 288) = 0;
  *(_QWORD *)(v8 + 296) = 0;
  *(_QWORD *)(v8 + 280) = 0;
  *(_QWORD *)(v8 + 256) = re::ServiceLocator::serviceOrNull<re::AssetService>(a2);
  v12 = re::ServiceLocator::serviceOrNull<re::RenderManager>(*(_QWORD *)(v8 + 248));
  *(_QWORD *)(v8 + 264) = v12;
  if (!v12)
  {
    v13 = *re::sortingLogObjects(0);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v13, OS_LOG_TYPE_DEFAULT, "No RenderManager found, CARE sorting will not happen.", buf, 2u);
    }
  }
  v14 = re::ServiceLocator::serviceOrNull<re::ecs2::PortalService>(*(_QWORD *)(a1 + 496));
  *(_QWORD *)(a1 + 520) = v14;
  if (!v14)
  {
    v15 = *re::sortingLogObjects(0);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "No portal service found, CARE sorting will consider all entities to be in the same world.", buf, 2u);
    }
  }
  v16 = (re *)re::ServiceLocator::serviceOrNull<re::ecs2::BillboardService>(*(_QWORD *)(a1 + 496));
  *(_QWORD *)(a1 + 440) = v16;
  if (re::CARESortingDefaults::normalThreshold(void)::onceToken != -1)
    dispatch_once(&re::CARESortingDefaults::normalThreshold(void)::onceToken, &__block_literal_global_19);
  dword_25410619C = re::CARESortingDefaults::normalThreshold(void)::sortingNormalThreshold;
  if (re::CARESortingDefaults::distanceThreshold(void)::onceToken != -1)
    dispatch_once(&re::CARESortingDefaults::distanceThreshold(void)::onceToken, &__block_literal_global_3_0);
  dword_2541061A0 = re::CARESortingDefaults::distanceThreshold(void)::sortingDistanceThreshold;
  if (re::CARESortingDefaults::displacementOrderingThreshold(void)::onceToken != -1)
    dispatch_once(&re::CARESortingDefaults::displacementOrderingThreshold(void)::onceToken, &__block_literal_global_6);
  dword_2541061A4 = re::CARESortingDefaults::displacementOrderingThreshold(void)::sortingDisplacementOrderingThreshold;
  v17 = *(float *)&dword_25410619C;
  v18 = *re::sortingLogObjects(v16);
  v19 = os_log_type_enabled(v18, OS_LOG_TYPE_INFO);
  if (v19)
  {
    v20 = acosf(1.0 - v17);
    *(_DWORD *)buf = 134218496;
    v33 = *(float *)&dword_25410619C;
    v34 = 2048;
    v35 = v20;
    v36 = 2048;
    v37 = (float)(v20 * 180.0) / 3.14159265;
    _os_log_impl(&dword_224FE9000, v18, OS_LOG_TYPE_INFO, "Sorting NormalThreshold: %f %frad (%fdeg)", buf, 0x20u);
  }
  v21 = *re::sortingLogObjects((re *)v19);
  v22 = os_log_type_enabled(v21, OS_LOG_TYPE_INFO);
  if (v22)
  {
    *(_DWORD *)buf = 134217984;
    v33 = *(float *)&dword_2541061A0;
    _os_log_impl(&dword_224FE9000, v21, OS_LOG_TYPE_INFO, "Sorting DistanceThreshold: %fm", buf, 0xCu);
  }
  v23 = *re::sortingLogObjects((re *)v22);
  v24 = os_log_type_enabled(v23, OS_LOG_TYPE_INFO);
  if (v24)
  {
    *(_DWORD *)buf = 134217984;
    v33 = *(float *)&dword_2541061A4;
    _os_log_impl(&dword_224FE9000, v23, OS_LOG_TYPE_INFO, "Sorting DisplacementOrderingThreshold: %fm", buf, 0xCu);
  }
  re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew<re::ecs2::CARESortingManager &,re::ServiceLocator &>(v5, &re::kDefaultWorldRootId, a1);
  re::ecs2::CARESortingDebugging::m_dirtyTransformEntityCount = 0;
  re::ecs2::CARESortingDebugging::m_hierarchicalDirtiedTransformEntityCount = 0;
  re::ecs2::CARESortingDebugging::m_dirtyAnchorEntityCount = 0;
  re::ecs2::CARESortingDebugging::m_dirtyInactiveEntities = 0;
  re::ecs2::CARESortingDebugging::m_entitiesRemovedFromSortGroups = 0;
  re::ecs2::CARESortingDebugging::m_entitiesAddedToSortGroups = 0;
  re::ecs2::CARESortingDebugging::m_sortGroupsResorted = 0;
  re::ecs2::CARESortingDebugging::s_codirGroupsWithDirtyEntities = 0;
  re::ecs2::CARESortingDebugging::m_sortGroupsRecalculatedOverrides = 0;
  re::ecs2::CARESortingDebugging::m_entitiesRecalculatedOverrides = 0;
  re::ecs2::CARESortingDebugging::m_entitiesRecalculatedOverridesMeshSortingComponentDirtied = 0;
  re::ecs2::CARESortingDebugging::m_highestPriorityInGroup = 0;
  re::ecs2::CARESortingDebugging::m_highestPriorityGroupId = 0;
  re::ecs2::CARESortingDebugging::m_entitiesActivated = 0;
  re::ecs2::CARESortingDebugging::m_entitiesDeactivated = 0;
  re::ecs2::CARESortingDebugging::m_uiSortingComponentActivated = 0;
  re::ecs2::CARESortingDebugging::m_uiSortingComponentDeactivated = 0;
  return a1;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::PortalService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ecs2::PortalService>(void)::info = re::ecs2::introspect_PortalService(0);
  }
  v3 = re::introspect<re::ecs2::PortalService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::BillboardService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ecs2::BillboardService>(void)::info = re::ecs2::introspect_BillboardService(0);
  }
  v3 = re::introspect<re::ecs2::BillboardService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

void re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 184 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew<re::ecs2::CARESortingManager &,re::ServiceLocator &>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _anonymous_namespace_ *v18;
  _anonymous_namespace_ *v19;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(_QWORD *)a1)
  {
    v9 = v8 % *(unsigned int *)(a1 + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v11 + 184 * v10 + 16) == v6)
        return;
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v11 + 184 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v11 + 184 * v10 + 16) == v6)
          return;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  v12 = *(_DWORD *)(a1 + 36);
  if (v12 == 0x7FFFFFFF)
  {
    v12 = *(_DWORD *)(a1 + 32);
    v13 = v12;
    if (v12 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((_anonymous_namespace_ *)a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      v13 = *(_DWORD *)(a1 + 32);
      v6 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v13 + 1;
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(_DWORD *)(v14 + 184 * v12 + 8);
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(_DWORD *)(v14 + 184 * v12 + 8);
    *(_DWORD *)(a1 + 36) = v15 & 0x7FFFFFFF;
  }
  v16 = 184 * v12;
  *(_DWORD *)(v14 + v16 + 8) = v15 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + v16 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + v16 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v16) = v8;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + v16 + 16) = v6;
  v17 = *(_QWORD *)(a1 + 16) + v16;
  *(_OWORD *)(v17 + 24) = 0u;
  v17 += 24;
  *(_OWORD *)(v17 + 16) = 0u;
  *(_DWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 36) = 0x7FFFFFFFLL;
  *(_DWORD *)(v17 + 80) = 0;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_QWORD *)(v17 + 84) = 0x7FFFFFFFLL;
  *(_DWORD *)(v17 + 128) = 0;
  *(_OWORD *)(v17 + 112) = 0u;
  *(_OWORD *)(v17 + 96) = 0u;
  *(_QWORD *)(v17 + 132) = 0x7FFFFFFFLL;
  *(_QWORD *)(v17 + 144) = a3;
  *(_QWORD *)(v17 + 152) = a3 + 440;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9) = v12;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
}

void re::ecs2::WorldSortingState::recomputeCodirectionalGroupAverages(re::ecs2::WorldSortingState *this, float32x4_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;

  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = (int *)(*((_QWORD *)this + 2) + 8);
    while (1)
    {
      v6 = *v5;
      v5 += 6;
      if (v6 < 0)
        break;
      if (v3 == ++v4)
      {
        LODWORD(v4) = *((_DWORD *)this + 8);
        break;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  if ((_DWORD)v3 != (_DWORD)v4)
  {
    v7 = v4;
    do
    {
      a2 = re::ecs2::CAMeshCodirectionalGroup::recomputeAverages((re::ecs2::CAMeshCodirectionalGroup *)*(_QWORD *)(*((_QWORD *)this + 2) + 24 * v7 + 16), a2);
      if (*((_DWORD *)this + 8) <= (v4 + 1))
        v8 = v4 + 1;
      else
        v8 = *((_DWORD *)this + 8);
      v9 = v4;
      while (1)
      {
        v7 = (v9 + 1);
        if (v8 - 1 == v9)
          break;
        ++v9;
        LODWORD(v4) = v7;
        if ((*(_DWORD *)(*((_QWORD *)this + 2) + 24 * v7 + 8) & 0x80000000) != 0)
          goto LABEL_17;
      }
      LODWORD(v4) = v8;
LABEL_17:
      ;
    }
    while ((_DWORD)v3 != (_DWORD)v4);
  }
}

float32x4_t re::ecs2::CAMeshCodirectionalGroup::recomputeAverages(re::ecs2::CAMeshCodirectionalGroup *this, float32x4_t result)
{
  simd_float4 v3;
  float32x4_t *v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int32x4_t v11;
  float32x4_t v12;
  unsigned __int32 v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  unint64_t v24;
  float v25;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int v49;
  int v50;
  int32x4_t v51;
  float32x2_t v52;
  float32x2_t v53;
  uint32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66[2];
  float32x4_t v67;
  simd_float4x4 v68;
  simd_float4x4 v69;

  if (*((_BYTE *)this + 144))
  {
    v3.i32[3] = 0;
    *((_OWORD *)this + 7) = 0u;
    v4 = (float32x4_t *)((char *)this + 112);
    *((_BYTE *)this + 144) = 0;
    *((_OWORD *)this + 8) = 0u;
    if (*((_DWORD *)this + 13))
    {
      v6 = *((float32x4_t *)this + 5);
      v5 = *((float32x4_t *)this + 6);
      v7 = vmulq_f32(v6, (float32x4_t)xmmword_2260E5F20);
      v8 = vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1));
      v9 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), v8);
      v9.f32[0] = fabsf(v9.f32[0]);
      v8.i32[0] = 0.5;
      v10 = vsubq_f32(v5, vaddq_f32(v6, v5));
      v11 = (int32x4_t)vmulq_f32(v10, v10);
      v12 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v9, v8), 0), (int8x16_t)xmmword_2260E5F10, (int8x16_t)xmmword_2260E5F20);
      v13 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v11, 2), vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1))).u32[0];
      *(float32x2_t *)v8.f32 = vrsqrte_f32((float32x2_t)v13);
      *(float32x2_t *)v8.f32 = vmul_f32(*(float32x2_t *)v8.f32, vrsqrts_f32((float32x2_t)v13, vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32)));
      v14 = vmulq_n_f32(v10, vmul_f32(*(float32x2_t *)v8.f32, vrsqrts_f32((float32x2_t)v13, vmul_f32(*(float32x2_t *)v8.f32, *(float32x2_t *)v8.f32))).f32[0]);
      v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), (int8x16_t)v14, 0xCuLL);
      v16 = vmlaq_f32(vmulq_f32(v15, vnegq_f32(v12)), v14, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL));
      v17 = (int32x4_t)vmulq_f32(v16, v16);
      v17.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v17, 2), *(float32x2_t *)v17.i8)).u32[0];
      v18 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), (int8x16_t)v16, 0xCuLL);
      *(float32x2_t *)v16.f32 = vrsqrte_f32((float32x2_t)v17.u32[0]);
      *(float32x2_t *)v16.f32 = vmul_f32(*(float32x2_t *)v16.f32, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32)));
      v19 = vmulq_n_f32(v18, vmul_f32(*(float32x2_t *)v16.f32, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32))).f32[0]);
      v20 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL), vnegq_f32(v14)), v19, v15);
      v21 = vmulq_f32(v5, v19);
      v22 = vmulq_f32(v5, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), v20, 0xCuLL));
      v23 = vmulq_f32(v5, v14);
      v24 = __PAIR64__(v20.u32[0], v19.u32[1]);
      v25 = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0];
      v3.i64[0] = __PAIR64__(v20.u32[1], v19.u32[2]);
      v19.i32[1] = v20.i32[2];
      v19.i32[2] = v14.i32[0];
      v61 = v19;
      __asm { FMOV            V2.4S, #1.0 }
      _Q2.f32[0] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0];
      _Q2.f32[1] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0];
      v59 = _Q2;
      v31 = *((unsigned int *)this + 14);
      if ((_DWORD)v31)
      {
        v32 = 0;
        v33 = (int *)(*((_QWORD *)this + 5) + 8);
        while (1)
        {
          v34 = *v33;
          v33 += 6;
          if (v34 < 0)
            break;
          if (v31 == ++v32)
          {
            LODWORD(v32) = *((_DWORD *)this + 14);
            break;
          }
        }
      }
      else
      {
        LODWORD(v32) = 0;
      }
      v35 = v61;
      v35.i32[3] = 0;
      v62 = v35;
      v36 = (float32x4_t)v24;
      v36.i32[2] = v14.i32[1];
      v63 = v36;
      v3.i32[2] = v14.i32[2];
      v37 = v59;
      v37.f32[2] = v25;
      v60 = v37;
      v38 = vdupq_n_s32(0x7F800000u);
      if ((_DWORD)v31 == (_DWORD)v32)
      {
        v65 = (float32x4_t)v38;
        v39 = *v4;
        v40.i64[0] = 0x7F0000007FLL;
        v40.i64[1] = 0x7F0000007FLL;
        v64 = v40;
      }
      else
      {
        v65 = (float32x4_t)v38;
        v41 = v32;
        v42.i64[0] = 0x7F0000007FLL;
        v42.i64[1] = 0x7F0000007FLL;
        v64 = v42;
        v58 = (float32x4_t)v3;
        do
        {
          re::ecs2::CARESortingManager::optionalSortingPlaneFrom(v66, *(const re::ecs2::Entity **)(*((_QWORD *)this + 5) + 24 * v41 + 16), *((re::ecs2::SortingTransformCache **)this + 54));
          v3 = (simd_float4)v58;
          v43 = vaddq_f32(v60, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v62, v67.f32[0]), v63, *(float32x2_t *)v67.f32, 1), v58, v67, 2));
          v44 = vdivq_f32(v43, (float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 3));
          v46 = v64;
          v45 = v65;
          v45.i32[3] = 0;
          v44.i32[3] = 0;
          v47 = vminnmq_f32(v45, v44);
          v46.i32[3] = 0;
          v48 = vmaxnmq_f32(v46, v44);
          v39 = vaddq_f32(v66[1], *((float32x4_t *)this + 7));
          *((float32x4_t *)this + 7) = v39;
          if (*((_DWORD *)this + 14) <= (v32 + 1))
            v49 = v32 + 1;
          else
            v49 = *((_DWORD *)this + 14);
          v50 = v32;
          while (1)
          {
            v41 = (v50 + 1);
            if (v49 - 1 == v50)
              break;
            ++v50;
            LODWORD(v32) = v41;
            if ((*(_DWORD *)(*((_QWORD *)this + 5) + 24 * v41 + 8) & 0x80000000) != 0)
              goto LABEL_20;
          }
          LODWORD(v32) = v49;
LABEL_20:
          v64 = v48;
          v65 = v47;
        }
        while ((_DWORD)v31 != (_DWORD)v32);
      }
      v51 = (int32x4_t)vmulq_f32(v39, v39);
      v51.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v51, 2), vadd_f32(*(float32x2_t *)v51.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v51.i8, 1))).u32[0];
      v52 = vrsqrte_f32((float32x2_t)v51.u32[0]);
      v53 = vmul_f32(v52, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(v52, v52)));
      *v4 = vmulq_n_f32(v39, vmul_f32(v53, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(v53, v53))).f32[0]);
      v68.columns[0] = (simd_float4)v62;
      v68.columns[1] = (simd_float4)v63;
      v68.columns[2] = v3;
      v68.columns[3] = (simd_float4)v60;
      v69 = __invert_f4(v68);
      v54 = (uint32x4_t)vcgtq_f32(v65, v64);
      v54.i32[3] = v54.i32[2];
      if ((vmaxvq_u32(v54) & 0x80000000) != 0)
      {
        v56 = 0uLL;
      }
      else
      {
        v55.i64[0] = 0x3F0000003F000000;
        v55.i64[1] = 0x3F0000003F000000;
        v56 = vmulq_f32(vaddq_f32(v65, v64), v55);
      }
      v57 = vaddq_f32((float32x4_t)v69.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v69.columns[0], v56.f32[0]), (float32x4_t)v69.columns[1], *(float32x2_t *)v56.f32, 1), (float32x4_t)v69.columns[2], v56, 2));
      result = vdivq_f32(v57, (float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 3));
      *((float32x4_t *)this + 8) = result;
      *((_BYTE *)this + 145) = 1;
    }
  }
  return result;
}

uint64_t re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::add(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v4 = *a2;
  v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  v7 = *(unsigned int *)(result + 24);
  if ((_DWORD)v7)
  {
    v8 = v6 % v7;
    v9 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * (v6 % v7));
    if ((_DWORD)v9 != 0x7FFFFFFF)
    {
      v10 = *(_QWORD *)(result + 16);
      if (*(_QWORD *)(v10 + 24 * v9 + 16) == v4)
        return result;
      while (1)
      {
        LODWORD(v9) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v9 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v10 + 24 * v9 + 16) == v4)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v8) = 0;
  }
  result = re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::addAsCopy(result, v8, v6, a2);
  ++*(_DWORD *)(v3 + 40);
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<unsigned long long,5ul>::add(_anonymous_namespace_ *result, _QWORD *a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;

  v3 = result;
  if (!*(_QWORD *)result)
  {
    v10 = *((_QWORD *)v3 + 1) + 1;
    result = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,5ul>::setCapacity(v3, v10);
    v11 = *((_DWORD *)v3 + 4) + 2;
    *((_DWORD *)v3 + 4) = v11;
    if ((v11 & 1) == 0)
      goto LABEL_12;
LABEL_18:
    v12 = (_QWORD *)((char *)v3 + 24);
    goto LABEL_19;
  }
  v4 = *((_QWORD *)result + 1);
  v5 = *((_DWORD *)result + 4);
  if ((v5 & 1) == 0)
  {
    v6 = *((_QWORD *)result + 3);
    v8 = v4 >= v6;
    v7 = v4 + 1;
    v8 = !v8 || v6 >= v7;
    if (!v8)
    {
      v9 = 2 * v6;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  v7 = v4 + 1;
  if (v7 < 6)
  {
LABEL_11:
    if ((v5 & 1) == 0)
      goto LABEL_12;
    goto LABEL_18;
  }
  v9 = 10;
LABEL_14:
  if (v9 <= v7)
    v13 = v7;
  else
    v13 = v9;
  result = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,5ul>::setCapacity(result, v13);
  if ((*((_DWORD *)v3 + 4) & 1) != 0)
    goto LABEL_18;
LABEL_12:
  v12 = (_QWORD *)*((_QWORD *)v3 + 4);
LABEL_19:
  v14 = *((_QWORD *)v3 + 1);
  v12[v14] = *a2;
  *((_QWORD *)v3 + 1) = v14 + 1;
  *((_DWORD *)v3 + 4) += 2;
  return result;
}

void re::ecs2::CARESortingManager::PerWorldDirtyEntities::addDirtyEntityIfSortable(uint64_t *a1, unint64_t a2, _QWORD *a3)
{
  re::ecs2::SortingTransformCache *v6;
  re::ecs2::EntityComponentCollection *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  _anonymous_namespace_ *v21;
  re::ecs2::MeshSortingComponent *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  re::ecs2::WorldSortingState *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  float32x4_t v42[3];

  v6 = (re::ecs2::SortingTransformCache *)a1[2];
  v7 = (re::ecs2::EntityComponentCollection *)(a2 + 32);
  v8 = (_BYTE *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v8
    || v8[95]
    && ((v9 = *(_QWORD *)(a2 + 176)) == 0
     || (v10 = *(_QWORD *)(v9 + 40)) == 0
     || (v11 = atomic_load((unsigned int *)(v10 + 704)), v11 != 2))
    || v8[92] && !v8[93]
    || (re::ecs2::CARESortingManager::optionalSortingPlaneFrom(v42, (const re::ecs2::Entity *)a2, v6), !v42[0].i8[0]))
  {
    v21 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get(v7, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    return;
  }
  (*(void (**)(float32x4_t *__return_ptr, _QWORD, unint64_t))(*(_QWORD *)*a3 + 8))(v42, *a3, a2);
  v12 = a1[3];
  if (v42[0].i8[0])
    v13 = v42[0].u64[1];
  else
    v13 = 0;
  v14 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v13 ^ (v13 >> 30))) >> 27));
  v15 = v14 ^ (v14 >> 31);
  if (v12)
  {
    v12 = v15 % *((unsigned int *)a1 + 12);
    v16 = *(unsigned int *)(a1[4] + 4 * v12);
    if ((_DWORD)v16 != 0x7FFFFFFF)
    {
      v25 = a1[5];
      if (*(_QWORD *)(v25 + 72 * v16 + 16) == v13)
      {
LABEL_24:
        v24 = v25 + 72 * v16;
        goto LABEL_25;
      }
      while (1)
      {
        LODWORD(v16) = *(_DWORD *)(v25 + 72 * v16 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v16 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v25 + 72 * v16 + 16) == v13)
          goto LABEL_24;
      }
    }
  }
  v17 = *((unsigned int *)a1 + 15);
  if ((_DWORD)v17 == 0x7FFFFFFF)
  {
    v17 = *((unsigned int *)a1 + 14);
    v18 = v17;
    if ((_DWORD)v17 == *((_DWORD *)a1 + 12))
    {
      re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)(a1 + 3), 2 * *((_DWORD *)a1 + 13));
      LODWORD(v12) = v15 % *((unsigned int *)a1 + 12);
      v18 = *((_DWORD *)a1 + 14);
    }
    *((_DWORD *)a1 + 14) = v18 + 1;
    v19 = a1[5];
    v20 = *(_DWORD *)(v19 + 72 * v17 + 8);
  }
  else
  {
    v19 = a1[5];
    v20 = *(_DWORD *)(v19 + 72 * v17 + 8);
    *((_DWORD *)a1 + 15) = v20 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v19 + 72 * v17 + 8) = v20 | 0x80000000;
  *(_DWORD *)(a1[5] + 72 * v17 + 8) = *(_DWORD *)(a1[5] + 72 * v17 + 8) & 0x80000000 | *(_DWORD *)(a1[4]
                                                                                                 + 4
                                                                                                 * v12);
  *(_QWORD *)(a1[5] + 72 * v17) = v15;
  *(_QWORD *)(a1[5] + 72 * v17 + 16) = v13;
  v23 = a1[5] + 72 * v17;
  *(_OWORD *)(v23 + 56) = 0u;
  *(_OWORD *)(v23 + 24) = 0u;
  *(_OWORD *)(v23 + 40) = 0u;
  *(_DWORD *)(v23 + 60) = 0x7FFFFFFF;
  *(_DWORD *)(a1[4] + 4 * v12) = v17;
  ++*((_DWORD *)a1 + 13);
  ++*((_DWORD *)a1 + 16);
  v24 = a1[5] + 72 * v17;
LABEL_25:
  v26 = v24 + 24;
  if (!*(_QWORD *)(v24 + 24))
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init(v26, a1[3], 64);
  v27 = *(_DWORD *)(v26 + 40);
  v42[0].i64[0] = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v26, (uint64_t *)v42);
  if (*(_DWORD *)(v26 + 40) != v27)
  {
    v29 = *a1;
    v28 = a1[1];
    v42[0].i64[0] = a2;
    v30 = (unint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v28, (uint64_t *)v42);
    if (v30)
    {
      if (*v30 != v13)
      {
        v31 = (re::ecs2::WorldSortingState *)re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v29 + 56, *v30);
        if (v31)
          re::ecs2::WorldSortingState::removeEntityFromTracking(v31, (re::ecs2::Entity *)a2);
      }
    }
    v32 = a1[1];
    v33 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    v34 = v33 ^ (v33 >> 31);
    v35 = *(_QWORD *)v32;
    if (*(_QWORD *)v32)
    {
      v35 = v34 % *(unsigned int *)(v32 + 24);
      v36 = *(unsigned int *)(*(_QWORD *)(v32 + 8) + 4 * v35);
      if ((_DWORD)v36 != 0x7FFFFFFF)
      {
        v41 = *(_QWORD *)(v32 + 16);
        if (*(_QWORD *)(v41 + 32 * v36 + 16) == a2)
        {
LABEL_43:
          *(_QWORD *)(v41 + 32 * v36 + 24) = v13;
LABEL_44:
          ++*(_DWORD *)(v32 + 40);
          return;
        }
        while (1)
        {
          v36 = *(_DWORD *)(v41 + 32 * v36 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v36 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v41 + 32 * v36 + 16) == a2)
            goto LABEL_43;
        }
      }
    }
    v37 = *(unsigned int *)(v32 + 36);
    if ((_DWORD)v37 == 0x7FFFFFFF)
    {
      v37 = *(unsigned int *)(v32 + 32);
      v38 = v37;
      if ((_DWORD)v37 == *(_DWORD *)(v32 + 24))
      {
        re::HashTable<re::ecs2::Entity const*,unsigned long long,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(v32, 2 * *(_DWORD *)(v32 + 28));
        LODWORD(v35) = v34 % *(unsigned int *)(v32 + 24);
        v38 = *(_DWORD *)(v32 + 32);
      }
      *(_DWORD *)(v32 + 32) = v38 + 1;
      v39 = *(_QWORD *)(v32 + 16);
      v40 = *(_DWORD *)(v39 + 32 * v37 + 8);
    }
    else
    {
      v39 = *(_QWORD *)(v32 + 16);
      v40 = *(_DWORD *)(v39 + 32 * v37 + 8);
      *(_DWORD *)(v32 + 36) = v40 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v39 + 32 * v37 + 8) = v40 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(v32 + 16) + 32 * v37 + 8) = *(_DWORD *)(*(_QWORD *)(v32 + 16) + 32 * v37 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v32 + 8) + 4 * v35);
    *(_QWORD *)(*(_QWORD *)(v32 + 16) + 32 * v37) = v34;
    *(_QWORD *)(*(_QWORD *)(v32 + 16) + 32 * v37 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)(v32 + 16) + 32 * v37 + 24) = v13;
    *(_DWORD *)(*(_QWORD *)(v32 + 8) + 4 * v35) = v37;
    ++*(_DWORD *)(v32 + 28);
    goto LABEL_44;
  }
}

uint64_t re::ecs2::CARESortingManager::dirtyEntityTransformHierarchy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD v25[2];

  v24 = a1;
  result = re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a3, &v24);
  if ((result & 1) == 0 && (*(_BYTE *)(v24 + 288) & 1) != 0)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a5 + 8))(&v19);
    if ((_BYTE)v19)
      v10 = v20;
    else
      v10 = 0;
    v21 = 1;
    v22 = 0;
    v23 = 0;
    v19 = a2;
    v20 = 0;
    re::DynamicOverflowArray<re::ecs2::Entity *,128ul>::setCapacity(&v19, 0);
    v21 += 2;
    re::DynamicOverflowArray<re::ecs2::Entity *,128ul>::add((int *)&v19, &v24);
    v11 = v20;
    while (v11)
    {
      v18 = 0;
      v12 = v23;
      if ((v21 & 1) != 0)
        v12 = &v22;
      v18 = v12[--v11];
      v20 = v11;
      v21 += 2;
      re::ecs2::CARESortingManager::PerWorldDirtyEntities::addDirtyEntityIfSortable(a4, v18, a5);
      re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a3, (uint64_t *)&v18);
      v13 = *(_QWORD *)(v18 + 328);
      if (v13)
      {
        v14 = *(uint64_t **)(v18 + 344);
        v15 = 8 * v13;
        do
        {
          v17 = 0;
          v17 = *v14;
          if ((*(_BYTE *)(v17 + 288) & 1) != 0
            && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a3, &v17))
          {
            (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a5 + 8))(v25, *a5, v17);
            v16 = LOBYTE(v25[0]) ? v25[1] : 0;
            if (v16 == v10)
              re::DynamicOverflowArray<re::ecs2::Entity *,128ul>::add((int *)&v19, &v17);
          }
          ++v14;
          v15 -= 8;
        }
        while (v15);
        v11 = v20;
      }
    }
    result = v19;
    if (v19)
    {
      if ((v21 & 1) == 0)
        return (*(uint64_t (**)(void))(*(_QWORD *)v19 + 40))();
    }
  }
  return result;
}

void re::ecs2::CARESortingManager::update(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  signed int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _BOOL4 v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  BOOL v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float32x4_t *v90;
  float32x4_t v91;
  int v92;
  int v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  re *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int *v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int *v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int *v118;
  int v119;
  uint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  int *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  int *v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int *v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int *v165;
  int v166;
  unint64_t *v167;
  uint64_t v168;
  unint64_t *v169;
  unint64_t *v170;
  unint64_t v171;
  re::ecs2::EntityComponentCollection *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  signed int v180;
  signed int v181;
  uint64_t v182;
  uint64_t v183;
  int *v184;
  int v185;
  unsigned int v186;
  uint64_t v187;
  int *v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  id v193;
  unsigned int v194;
  unsigned int v195;
  float32x4_t v196;
  const re::ecs2::Entity **v197;
  const re::ecs2::Entity *v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  float32x4_t **v213;
  float32x4_t *v214;
  unsigned __int32 *v215;
  unint64_t v216;
  uint64_t i;
  unint64_t *v218;
  uint64_t v219;
  float32x4_t *v220;
  float32x4_t v221;
  float32x4_t v222;
  uint64_t v223;
  uint64_t v224;
  id v225;
  int v226;
  int v227;
  uint64_t v228;
  int *v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  id v236;
  uint64_t v237;
  uint64_t v238;
  int *v239;
  int v240;
  uint64_t v241;
  unint64_t v242;
  unint64_t v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  int v257;
  id v258;
  unsigned int v259;
  unsigned int v260;
  re *v261;
  float32x4_t v262;
  unsigned int v263;
  uint64_t v264;
  int *v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  float32x4_t *v271;
  re::ecs2::Entity *v272;
  unint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  int *v278;
  int v279;
  float32x4_t *v280;
  uint64_t v281;
  uint64_t v282;
  float32x4_t v283;
  uint64_t v284;
  uint64_t *v285;
  float32x4_t *v286;
  float32x4_t v287;
  int v288;
  int v289;
  uint64_t *v290;
  uint64_t v291;
  _QWORD *v292;
  _anonymous_namespace_ *v293;
  _anonymous_namespace_ *v294;
  unsigned int v295;
  unsigned int v296;
  unint64_t v297;
  _anonymous_namespace_ *v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  int *v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  unint64_t v307;
  uint64_t v308;
  unsigned int v309;
  unsigned int v310;
  unint64_t v311;
  uint64_t v312;
  unint64_t v313;
  float32x4_t *v314;
  unsigned __int32 *v315;
  unint64_t v316;
  float32x4_t *v317;
  unsigned __int32 *v318;
  float32x4_t v319;
  uint64_t v320;
  uint64_t v321;
  int *v322;
  int v323;
  unsigned int v324;
  uint64_t v325;
  __int32 v326;
  int v327;
  uint64_t v328;
  int *v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  __int32 v333;
  int v334;
  uint64_t v335;
  unsigned __int32 *v336;
  float32x4_t v337;
  uint64_t v338;
  uint64_t v339;
  BOOL v340;
  uint64_t v341;
  uint64_t v342;
  unsigned int *v343;
  unsigned int v344;
  uint64_t v345;
  int *v346;
  int v347;
  uint64_t v348;
  _QWORD *v349;
  uint64_t v350;
  id v351;
  int v352;
  int v353;
  uint64_t v354;
  BOOL *v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  int *v359;
  int v360;
  float32x4_t v361;
  uint64_t v362;
  _QWORD *v363;
  uint64_t v364;
  id v365;
  int v366;
  int v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t *v375;
  uint64_t *v376;
  uint64_t v377;
  uint64_t v378;
  id v379;
  const re::ecs2::Entity **v380;
  uint64_t v381;
  const re::ecs2::Entity *v382;
  re::ecs2::EntityComponentCollection *v383;
  uint64_t v384;
  uint64_t v385;
  _QWORD *v386;
  uint64_t v387;
  int v388;
  __int128 v389;
  re::ecs2::SortingTransformCache *v390;
  uint64_t v391;
  _BOOL4 v392;
  int v393;
  _BOOL4 v394;
  char v395;
  __int128 v396;
  BOOL v397;
  __n128 **v399;
  uint64_t v400;
  __n128 *v401;
  __int8 *v402;
  uint64_t v403;
  BOOL *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  int *v409;
  int v410;
  unsigned int v411;
  int v412;
  unsigned int v413;
  uint64_t v414;
  _QWORD *v415;
  uint64_t v416;
  id v417;
  uint64_t v418;
  uint64_t v419;
  int *v420;
  int v421;
  uint64_t v422;
  int v423;
  int v424;
  uint64_t v425;
  uint64_t v426;
  int *v427;
  int v428;
  uint64_t v429;
  uint64_t v430;
  int *v431;
  int v432;
  uint64_t v433;
  int v434;
  int v435;
  int v436;
  int v437;
  uint64_t v438;
  uint64_t v439;
  re::ecs2::Component *v440;
  float v441;
  float v442;
  float v443;
  float32x4_t v444;
  float32x4_t v445;
  float32x4_t v446;
  int v447;
  __int128 v448;
  re::ecs2::SortingTransformCache *v449;
  uint64_t v450;
  int v451;
  int v452;
  BOOL v453;
  BOOL v454;
  __int128 v455;
  float v456;
  float v457;
  float32_t v458;
  BOOL v459;
  int v460;
  int v461;
  uint64_t v463;
  int v464;
  int v465;
  unsigned __int8 v466;
  NSObject *v467;
  __int128 v468;
  uint64_t v469;
  uint64_t v470;
  __int128 v471;
  __int128 v472;
  __int128 v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  int *v477;
  int v478;
  unsigned int v479;
  uint64_t v480;
  uint64_t v481;
  float32x4_t **v482;
  float *v483;
  float v484;
  int v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  float v489;
  float v490;
  __int128 v491;
  float v492;
  __int128 v493;
  float v494;
  float32x4_t *v495;
  uint64_t v496;
  uint64_t v497;
  int *v498;
  int v499;
  float32x4_t **v500;
  uint64_t v501;
  re::ecs2::TransformComponent **v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint32x4_t v506;
  __int128 v507;
  float32x4_t v508;
  float32x4_t v509;
  float32x4_t v510;
  float32x4_t *v511;
  __int32 v512;
  __int32 v513;
  float32x4_t v514;
  float32x4_t v515;
  int32x4_t v516;
  float32x2_t v517;
  float32x2_t v518;
  float32x4_t v519;
  float32x4_t v520;
  float32x4_t v521;
  float32x4_t v522;
  int32x4_t v523;
  float32x2_t v524;
  float32x2_t v525;
  float32x4_t v526;
  float v527;
  float32x4_t v528;
  float v529;
  float v530;
  float v531;
  float v532;
  float v533;
  float32x2_t v534;
  float32x2_t v535;
  float v536;
  BOOL v537;
  BOOL v538;
  float v539;
  unsigned int v540;
  float32x2_t v541;
  float32x2_t v542;
  float v543;
  float v544;
  float v545;
  float v546;
  float v547;
  float v548;
  float v549;
  float v550;
  float v551;
  float v552;
  float v553;
  float v554;
  float v555;
  float v556;
  float v557;
  float v558;
  float v559;
  float v560;
  float v561;
  float v562;
  __int128 v563;
  float v564;
  __int128 v565;
  __int128 v566;
  float32x4_t *v567;
  int v568;
  int v569;
  uint64_t v570;
  int *v571;
  int v572;
  int v573;
  int v574;
  int v575;
  uint64_t v576;
  unsigned int v577;
  unint64_t v578;
  uint64_t v579;
  int *v580;
  int v581;
  uint64_t v582;
  uint64_t v583;
  float64x2_t v584;
  unint64_t *v585;
  unint64_t v586;
  uint64_t v587;
  uint64_t v588;
  int *v589;
  int v590;
  uint64_t v591;
  re::ecs2::TransformComponent **v592;
  uint64_t v593;
  uint64_t v594;
  int v595;
  uint64_t v596;
  float32x4_t v597;
  uint64_t v598;
  float v599;
  float v600;
  float32x4_t v601;
  float v602;
  float32x4_t v603;
  float v604;
  float32x2_t v605;
  float32x2_t v606;
  float v607;
  float v608;
  float v609;
  float v610;
  float v611;
  float32x4_t v612;
  float32x4_t v613;
  float v614;
  float v615;
  float32x2_t v616;
  float32x2_t v617;
  __int128 v618;
  float v619;
  float v620;
  float v621;
  float v622;
  float v623;
  __float2 v624;
  uint64_t v625;
  float v626;
  float v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  uint64_t v631;
  float32x4_t v632;
  float32x4_t v633;
  float32x4_t v634;
  float32x4_t v635;
  uint64_t v636;
  float32x4_t v637;
  float32x4_t v638;
  float32x4_t v639;
  float32x4_t v640;
  unint64_t v641;
  __int128 v642;
  __int8 v643;
  uint64_t v644;
  char *v645;
  __int128 v646;
  int v647;
  int v648;
  uint64_t v649;
  __int128 v650;
  float v651;
  __int128 *v652;
  uint64_t v653;
  __int128 v654;
  __int128 v655;
  int v656;
  int v657;
  int v658;
  unsigned int v659;
  unsigned int v660;
  int v661;
  int v662;
  __int128 v663;
  __int128 v664;
  unsigned int v665;
  int v666;
  unint64_t *v667;
  uint64_t v668;
  uint64_t v669;
  uint64_t v670;
  unint64_t v671;
  re::ecs2::SortingTransformCache *v672;
  int v673;
  int v674;
  uint64_t *v675;
  unint64_t v676;
  uint64_t v677;
  os_unfair_lock_s *v678;
  uint64_t v679;
  float v680;
  uint64_t v681;
  __int128 v682;
  unsigned int v684;
  _QWORD *v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  re::ecs2::SortingTransformCache **v689;
  _QWORD *v690;
  uint64_t v691;
  int v692;
  unsigned int v693;
  unint64_t v694;
  uint64_t v695;
  unsigned int *v696;
  int v697;
  unsigned int *v698;
  uint64_t v699;
  float32x4_t v700;
  float32x4_t v701;
  float32x4_t v702;
  uint64_t v703;
  float32x4_t **v704;
  __int128 v705;
  float32x4_t v706;
  float64x2_t v707;
  uint64_t v708;
  int v709;
  unint64_t *v710;
  unint64_t v711;
  uint64_t v712;
  uint64_t v713;
  __int128 v714;
  __int128 v715;
  uint64_t v716;
  int v717;
  uint64_t v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  int v723;
  const re::ecs2::Entity **v724;
  float32x4_t *v725;
  unsigned __int128 v726;
  __int128 v727;
  uint64_t v728;
  uint64_t v729;
  __int128 v730;
  float32x4_t v731;
  __int128 v732;
  uuid_t out;
  _OWORD v734[2];
  __int128 v735;
  __int128 v736;
  char v737;
  _BYTE v738[12];
  __int16 v739;
  int v740;
  __int16 v741;
  unint64_t v742;
  __int16 v743;
  unint64_t v744;
  uint64_t v745;

  v745 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 512))
  {
    v1 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 520) + 24))(*(_QWORD *)(a1 + 520));
    v2 = a1;
    v3 = v1;
    v718 = v1;
    if (*(_DWORD *)(a1 + 476))
    {
      v4 = *(unsigned int *)(a1 + 472);
      if ((_DWORD)v4)
      {
        memset_pattern16(*(void **)(a1 + 456), &unk_2260EB7B0, 4 * v4);
        v2 = a1;
      }
      v5 = *(unsigned int *)(v2 + 480);
      if ((_DWORD)v5)
      {
        v6 = 0;
        v7 = 160 * v5;
        do
        {
          v8 = *(_QWORD *)(v2 + 464) + v6;
          v9 = *(_DWORD *)(v8 + 8);
          if (v9 < 0)
            *(_DWORD *)(v8 + 8) = v9 & 0x7FFFFFFF;
          v6 += 160;
        }
        while (v7 != v6);
      }
      *(_DWORD *)(v2 + 484) = 0x7FFFFFFF;
      *(_QWORD *)(v2 + 476) = 0;
      ++*(_DWORD *)(v2 + 488);
    }
    v10 = a1;
    v11 = re::RenderManager::perFrameAllocator(*(re::RenderManager **)(v2 + 512));
    re::ecs2::CARESortingDebugging::m_dirtyTransformEntityCount = 0;
    v12 = &unk_255828000;
    re::ecs2::CARESortingDebugging::m_hierarchicalDirtiedTransformEntityCount = 0;
    re::ecs2::CARESortingDebugging::m_dirtyAnchorEntityCount = 0;
    re::ecs2::CARESortingDebugging::m_dirtyInactiveEntities = 0;
    re::ecs2::CARESortingDebugging::m_entitiesRemovedFromSortGroups = 0;
    re::ecs2::CARESortingDebugging::m_entitiesAddedToSortGroups = 0;
    re::ecs2::CARESortingDebugging::m_sortGroupsResorted = 0;
    re::ecs2::CARESortingDebugging::s_codirGroupsWithDirtyEntities = 0;
    re::ecs2::CARESortingDebugging::m_sortGroupsRecalculatedOverrides = 0;
    re::ecs2::CARESortingDebugging::m_entitiesRecalculatedOverrides = 0;
    re::ecs2::CARESortingDebugging::m_entitiesRecalculatedOverridesMeshSortingComponentDirtied = 0;
    re::ecs2::CARESortingDebugging::m_highestPriorityInGroup = 0;
    re::ecs2::CARESortingDebugging::m_highestPriorityGroupId = 0;
    v13 = *(_QWORD *)(a1 + 520);
    v681 = v11;
    if (v13)
    {
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
      LODWORD(v734[0]) = 1;
      *(_QWORD *)&v734[1] = 0;
      *((_QWORD *)&v734[0] + 1) = 0;
      *(_QWORD *)&out[8] = 0;
      *(_QWORD *)out = v11;
      re::DynamicOverflowArray<unsigned long long,5ul>::setCapacity(out, 0);
      v16 = a1;
      LODWORD(v734[0]) += 2;
      v17 = *(unsigned int *)(a1 + 88);
      if ((_DWORD)v17)
      {
        v18 = 0;
        v19 = (int *)(*(_QWORD *)(a1 + 72) + 8);
        while (1)
        {
          v20 = *v19;
          v19 += 46;
          if (v20 < 0)
            break;
          if (v17 == ++v18)
          {
            LODWORD(v18) = *(_DWORD *)(a1 + 88);
            break;
          }
        }
      }
      else
      {
        LODWORD(v18) = 0;
      }
      if ((_DWORD)v17 != (_DWORD)v18)
      {
        v22 = v18;
        do
        {
          v23 = *(_QWORD *)(v16 + 72) + 184 * v22;
          v26 = *(_QWORD *)(v23 + 16);
          v25 = (uint64_t *)(v23 + 16);
          v24 = v26;
          if (v26)
          {
            if (*(_DWORD *)(v15 + 124))
            {
              v27 = re::HashSetBase<re::WeakStringID,re::WeakStringID,re::internal::ValueAsKey<re::WeakStringID>,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::contains(v15 + 96, v25);
              v16 = a1;
              if (v27)
                goto LABEL_32;
            }
            else
            {
              v28 = *(_QWORD *)(v15 + 16);
              if (v28)
              {
                v29 = 8 * v28;
                v30 = (_QWORD *)(v15 + 32);
                while (*v30 != v24)
                {
                  ++v30;
                  v29 -= 8;
                  if (!v29)
                    goto LABEL_31;
                }
                if (v29)
                  goto LABEL_32;
              }
            }
LABEL_31:
            re::DynamicOverflowArray<unsigned long long,5ul>::add((_anonymous_namespace_ *)out, v25);
            v16 = a1;
          }
LABEL_32:
          if (*(_DWORD *)(v16 + 88) <= (v18 + 1))
            v31 = v18 + 1;
          else
            v31 = *(_DWORD *)(v16 + 88);
          while (1)
          {
            v22 = (v18 + 1);
            if (v31 - 1 == (_DWORD)v18)
              break;
            LODWORD(v18) = v18 + 1;
            v32 = v22;
            if ((*(_DWORD *)(*(_QWORD *)(v16 + 72) + 184 * v22 + 8) & 0x80000000) != 0)
              goto LABEL_39;
          }
          v32 = v31;
LABEL_39:
          LODWORD(v18) = v32;
        }
        while ((_DWORD)v17 != v32);
      }
      LODWORD(v720) = 1;
      *(_QWORD *)&v721 = 0;
      *((_QWORD *)&v720 + 1) = 0;
      v719 = (unint64_t)v11;
      re::DynamicOverflowArray<unsigned long long,5ul>::setCapacity(&v719, 0);
      LODWORD(v720) = v720 + 2;
      v33 = *(_DWORD *)(v15 + 124);
      if (v33)
      {
        v34 = v15 + 96;
        v12 = (void *)*(unsigned int *)(v15 + 128);
        if ((_DWORD)v12)
        {
          v35 = 0;
          v36 = *(int **)(v15 + 112);
          while (1)
          {
            v37 = *v36;
            v36 += 4;
            if (v37 < 0)
              break;
            if (v12 == (void *)++v35)
            {
              LODWORD(v35) = *(_DWORD *)(v15 + 128);
              break;
            }
          }
          LODWORD(v18) = v35;
        }
        else
        {
          LODWORD(v18) = 0;
        }
        v38 = v15 + 96;
      }
      else
      {
        v34 = v15 + 32;
        v38 = v15 + 32 + 8 * *(_QWORD *)(v15 + 16);
      }
      v39 = a1;
      v40 = (_QWORD *)(a1 + 56);
      v41 = v34 != v38;
      if (v33)
        v41 = (_DWORD)v12 != v18;
      if (v41)
      {
        do
        {
          v711 = 0;
          v42 = (unint64_t *)v34;
          if (v33)
            v42 = (unint64_t *)(*(_QWORD *)(v34 + 16) + 16 * v18 + 8);
          v43 = *v42;
          v711 = v43;
          if (!*v40
            || (v44 = 0x94D049BB133111EBLL
                    * ((0xBF58476D1CE4E5B9 * (v43 ^ (v43 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v43 ^ (v43 >> 30))) >> 27)),
                v45 = *(unsigned int *)(*(_QWORD *)(v39 + 64) + 4 * ((v44 ^ (v44 >> 31)) % *(unsigned int *)(v39 + 80))),
                (_DWORD)v45 == 0x7FFFFFFF))
          {
LABEL_60:
            re::DynamicOverflowArray<unsigned long long,5ul>::add((_anonymous_namespace_ *)&v719, &v711);
            v39 = a1;
          }
          else
          {
            v46 = *(_QWORD *)(v39 + 72);
            while (*(_QWORD *)(v46 + 184 * v45 + 16) != v43)
            {
              LODWORD(v45) = *(_DWORD *)(v46 + 184 * v45 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v45 == 0x7FFFFFFF)
                goto LABEL_60;
            }
          }
          if (v33)
          {
            v47 = v18 + 1;
            v48 = 16 * (v18 + 1);
            do
            {
              LODWORD(v18) = v47;
              if (v47 >= *(_DWORD *)(v34 + 32))
                break;
              v49 = *(_DWORD *)(*(_QWORD *)(v34 + 16) + v48);
              ++v47;
              v48 += 16;
            }
            while ((v49 & 0x80000000) == 0);
          }
          else
          {
            v34 += 8;
          }
          v50 = v34 != v38;
          if (v33)
            v50 = (_DWORD)v12 != (_DWORD)v18;
        }
        while (v50);
      }
      v51 = (uint64_t *)&v720 + 1;
      if ((v734[0] & 1) != 0)
        v52 = (uint64_t *)v734 + 1;
      else
        v52 = *(uint64_t **)&v734[1];
      if (*(_QWORD *)&out[8])
      {
        v53 = &v52[*(_QWORD *)&out[8]];
        do
        {
          if (*v40)
          {
            v54 = *v52;
            v55 = 0xBF58476D1CE4E5B9 * (*v52 ^ ((unint64_t)*v52 >> 30));
            v56 = ((0x94D049BB133111EBLL * (v55 ^ (v55 >> 27))) ^ ((0x94D049BB133111EBLL * (v55 ^ (v55 >> 27))) >> 31))
                % *(unsigned int *)(v39 + 80);
            v57 = *(_QWORD *)(v39 + 64);
            v58 = *(unsigned int *)(v57 + 4 * v56);
            if ((_DWORD)v58 != 0x7FFFFFFF)
            {
              v59 = *(_QWORD *)(v39 + 72);
              if (*(_QWORD *)(v59 + 184 * v58 + 16) == v54)
              {
                *(_DWORD *)(v57 + 4 * v56) = *(_DWORD *)(v59 + 184 * v58 + 8) & 0x7FFFFFFF;
LABEL_82:
                re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(*(_QWORD *)(v39 + 72) + 184 * v58);
                v39 = a1;
                v61 = *(_QWORD *)(a1 + 72) + 184 * v58;
                *(_DWORD *)(v61 + 8) = *(_DWORD *)(v61 + 8) & 0x80000000 | *(_DWORD *)(a1 + 92);
                --*(_DWORD *)(a1 + 84);
                v62 = *(_DWORD *)(a1 + 96) + 1;
                *(_DWORD *)(a1 + 92) = v58;
                *(_DWORD *)(a1 + 96) = v62;
              }
              else
              {
                while (1)
                {
                  v60 = v58;
                  v58 = *(_DWORD *)(v59 + 184 * v58 + 8) & 0x7FFFFFFF;
                  if (v58 == 0x7FFFFFFF)
                    break;
                  if (*(_QWORD *)(v59 + 184 * v58 + 16) == v54)
                  {
                    *(_DWORD *)(v59 + 184 * v60 + 8) = *(_DWORD *)(v59 + 184 * v60 + 8) & 0x80000000 | *(_DWORD *)(v59 + 184 * v58 + 8) & 0x7FFFFFFF;
                    goto LABEL_82;
                  }
                }
              }
            }
          }
          ++v52;
        }
        while (v52 != v53);
      }
      if ((v720 & 1) == 0)
        v51 = (uint64_t *)v721;
      if (*((_QWORD *)&v719 + 1))
      {
        v63 = 8 * *((_QWORD *)&v719 + 1);
        do
        {
          v64 = *v51++;
          v711 = v64;
          re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew<re::ecs2::CARESortingManager &,re::ServiceLocator &>((uint64_t)v40, (uint64_t *)&v711, a1);
          v39 = a1;
          v63 -= 8;
        }
        while (v63);
      }
      v11 = v681;
      if ((_QWORD)v719 && (v720 & 1) == 0)
      {
        (*(void (**)(void))(*(_QWORD *)v719 + 40))();
        v39 = a1;
      }
      if (*(_QWORD *)out && (v734[0] & 1) == 0)
      {
        (*(void (**)(void))(**(_QWORD **)out + 40))();
        v39 = a1;
      }
      v65 = *(_QWORD *)(v39 + 520);
      v711 = v39;
      v712 = v39 + 104;
      v672 = (re::ecs2::SortingTransformCache *)(v39 + 440);
      v713 = v39 + 440;
      v717 = 0;
      if (v65)
      {
        v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 24))(v65);
        v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 16))(v66);
        v68 = *(_DWORD *)(v67 + 124);
        if (!v68)
          v68 = *(_DWORD *)(v67 + 16);
        v21 = v68 + 1;
      }
      else
      {
        v21 = 1;
      }
      v10 = a1;
    }
    else
    {
      v711 = a1;
      v712 = a1 + 104;
      v672 = (re::ecs2::SortingTransformCache *)(a1 + 440);
      v713 = a1 + 440;
      v717 = 0;
      v21 = 1;
    }
    *(_OWORD *)out = 0u;
    memset(v734, 0, 20);
    *(_QWORD *)((char *)&v734[1] + 4) = 0x7FFFFFFFLL;
    re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)out, v11, v21);
    v714 = *(_OWORD *)out;
    memset(out, 0, sizeof(out));
    v715 = v734[0];
    *(_QWORD *)&v734[0] = 0;
    v716 = *(_QWORD *)&v734[1];
    *(_OWORD *)((char *)v734 + 8) = xmmword_2260F5A80;
    re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)out);
    v69 = *(unsigned int *)(v10 + 184);
    v70 = v10;
    v71 = 0;
    if ((_DWORD)v69)
    {
      v72 = (int *)(*(_QWORD *)(v10 + 168) + 8);
      while (1)
      {
        v73 = *v72;
        v72 += 6;
        if (v73 < 0)
          break;
        if (v69 == ++v71)
        {
          LODWORD(v71) = *(_DWORD *)(v10 + 184);
          break;
        }
      }
    }
    if ((_DWORD)v69 != (_DWORD)v71)
    {
      v74 = v71;
      v75 = v10 + 392;
      do
      {
        *(_QWORD *)out = 0;
        *(_QWORD *)out = *(_QWORD *)(*(_QWORD *)(v70 + 168) + 24 * v74 + 16);
        v76 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(_QWORD *)out + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v76 && *(_BYTE *)(v76 + 95))
          re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v75, (uint64_t *)out);
        v70 = a1;
        if (*(_DWORD *)(a1 + 184) <= (v71 + 1))
          v77 = v71 + 1;
        else
          v77 = *(_DWORD *)(a1 + 184);
        while (1)
        {
          v74 = (v71 + 1);
          if (v77 - 1 == (_DWORD)v71)
            break;
          LODWORD(v71) = v71 + 1;
          v78 = v74;
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 168) + 24 * v74 + 8) & 0x80000000) != 0)
            goto LABEL_118;
        }
        v78 = v77;
LABEL_118:
        LODWORD(v71) = v78;
      }
      while ((_DWORD)v69 != v78);
    }
    v79 = v70 + 152;
    v80 = *(unsigned int *)(v70 + 420);
    *(_QWORD *)&v721 = 0;
    *(_QWORD *)&v720 = 0;
    DWORD2(v720) = 0;
    v719 = (unint64_t)v681;
    re::DynamicArray<float *>::setCapacity(&v719, v80);
    v81 = a1;
    ++DWORD2(v720);
    v82 = *(unsigned int *)(a1 + 424);
    if ((_DWORD)v82)
    {
      v83 = 0;
      v84 = (int *)(*(_QWORD *)(a1 + 408) + 8);
      while (1)
      {
        v85 = *v84;
        v84 += 6;
        if (v85 < 0)
          break;
        if (v82 == ++v83)
        {
          LODWORD(v83) = *(_DWORD *)(a1 + 424);
          break;
        }
      }
    }
    else
    {
      LODWORD(v83) = 0;
    }
    if ((_DWORD)v82 != (_DWORD)v83)
    {
      v86 = v83;
      while (1)
      {
        *(_QWORD *)&v726 = 0;
        *(_QWORD *)&v726 = *(_QWORD *)(*(_QWORD *)(v81 + 408) + 24 * v86 + 16);
        v87 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v726 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (!v87)
          goto LABEL_131;
        v88 = *(_QWORD *)(v726 + 176);
        if (v88)
        {
          v89 = v87;
          v90 = (float32x4_t *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v88 + 32));
          if (v90)
            break;
        }
LABEL_132:
        v81 = a1;
        if (*(_DWORD *)(a1 + 424) <= (v83 + 1))
          v92 = v83 + 1;
        else
          v92 = *(_DWORD *)(a1 + 424);
        while (1)
        {
          v86 = (v83 + 1);
          if (v92 - 1 == (_DWORD)v83)
            break;
          LODWORD(v83) = v83 + 1;
          v93 = v86;
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 408) + 24 * v86 + 8) & 0x80000000) != 0)
            goto LABEL_139;
        }
        v93 = v92;
LABEL_139:
        LODWORD(v83) = v93;
        if ((_DWORD)v82 == v93)
          goto LABEL_140;
      }
      *(_OWORD *)out = xmmword_2260E5F10;
      v734[0] = xmmword_2260E5F20;
      v734[1] = xmmword_2260E5F40;
      v735 = xmmword_2260E5D70;
      re::MeshAsset::aabbFromMesh(v90, (float32x4_t *)out, (uint64_t)&v730);
      v91 = v731;
      *(_OWORD *)(v89 + 48) = v730;
      *(float32x4_t *)(v89 + 64) = v91;
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v79, (uint64_t *)&v726);
LABEL_131:
      re::DynamicArray<re::TransitionCondition *>::add(&v719, &v726);
      goto LABEL_132;
    }
LABEL_140:
    if ((_QWORD)v720)
    {
      v94 = (uint64_t *)v721;
      v95 = 8 * v720;
      do
      {
        v96 = *v94++;
        *(_QWORD *)out = v96;
        re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 392, (uint64_t *)out);
        v95 -= 8;
      }
      while (v95);
    }
    v97 = (re *)v719;
    if ((_QWORD)v719 && (_QWORD)v721)
      v97 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v719 + 40))();
    v98 = a1;
    v99 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v99)
    {
      v100 = 0;
      v101 = (int *)(*(_QWORD *)(a1 + 168) + 8);
      while (1)
      {
        v102 = *v101;
        v101 += 6;
        if (v102 < 0)
          break;
        if (v99 == ++v100)
        {
          LODWORD(v100) = *(_DWORD *)(a1 + 184);
          break;
        }
      }
    }
    else
    {
      LODWORD(v100) = 0;
    }
    if ((_DWORD)v99 != (_DWORD)v100)
    {
      v103 = v100;
      do
      {
        re::ecs2::CARESortingManager::PerWorldDirtyEntities::addDirtyEntityIfSortable((uint64_t *)&v711, *(_QWORD *)(*(_QWORD *)(v98 + 168) + 24 * v103 + 16), &v718);
        v98 = a1;
        if (*(_DWORD *)(a1 + 184) <= (v100 + 1))
          v104 = v100 + 1;
        else
          v104 = *(_DWORD *)(a1 + 184);
        v105 = v100;
        while (1)
        {
          v103 = (v105 + 1);
          if (v104 - 1 == v105)
            break;
          ++v105;
          LODWORD(v100) = v103;
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 168) + 24 * v103 + 8) & 0x80000000) != 0)
            goto LABEL_162;
        }
        LODWORD(v100) = v104;
LABEL_162:
        ;
      }
      while ((_DWORD)v99 != (_DWORD)v100);
    }
    if (*(_DWORD *)(v98 + 276) || *(_DWORD *)(v98 + 324))
    {
      *(_OWORD *)out = 0u;
      memset(v734, 0, 20);
      *(_QWORD *)((char *)&v734[1] + 4) = 0x7FFFFFFFLL;
      re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)out, v681, 128);
      v106 = a1;
      v107 = *(unsigned int *)(a1 + 328);
      if ((_DWORD)v107)
      {
        v108 = 0;
        v109 = (int *)(*(_QWORD *)(a1 + 312) + 8);
        while (1)
        {
          v110 = *v109;
          v109 += 6;
          if (v110 < 0)
            break;
          if (v107 == ++v108)
          {
            LODWORD(v108) = *(_DWORD *)(a1 + 328);
            break;
          }
        }
      }
      else
      {
        LODWORD(v108) = 0;
      }
      if ((_DWORD)v107 != (_DWORD)v108)
      {
        v111 = v108;
        do
        {
          re::ecs2::CARESortingManager::dirtyEntityTransformHierarchy(*(_QWORD *)(*(_QWORD *)(v106 + 312) + 24 * v111 + 16), v681, (uint64_t)out, (uint64_t *)&v711, &v718);
          v106 = a1;
          if (*(_DWORD *)(a1 + 328) <= (v108 + 1))
            v112 = v108 + 1;
          else
            v112 = *(_DWORD *)(a1 + 328);
          v113 = v108;
          while (1)
          {
            v111 = (v113 + 1);
            if (v112 - 1 == v113)
              break;
            ++v113;
            LODWORD(v108) = v111;
            if ((*(_DWORD *)(*(_QWORD *)(a1 + 312) + 24 * v111 + 8) & 0x80000000) != 0)
              goto LABEL_181;
          }
          LODWORD(v108) = v112;
LABEL_181:
          ;
        }
        while ((_DWORD)v107 != (_DWORD)v108);
      }
      v114 = v106 + 248;
      v115 = v106 + 296;
      re::ecs2::CARESortingDebugging::m_hierarchicalDirtiedTransformEntityCount = HIDWORD(v734[0]);
      re::ecs2::CARESortingDebugging::m_dirtyAnchorEntityCount = *(_DWORD *)(v106 + 324);
      v116 = *(unsigned int *)(v106 + 280);
      if ((_DWORD)v116)
      {
        v117 = 0;
        v118 = (int *)(*(_QWORD *)(v106 + 264) + 8);
        while (1)
        {
          v119 = *v118;
          v118 += 6;
          if (v119 < 0)
            break;
          if (v116 == ++v117)
          {
            LODWORD(v117) = *(_DWORD *)(v106 + 280);
            break;
          }
        }
      }
      else
      {
        LODWORD(v117) = 0;
      }
      if ((_DWORD)v116 != (_DWORD)v117)
      {
        v120 = v117;
        do
        {
          re::ecs2::CARESortingManager::dirtyEntityTransformHierarchy(*(_QWORD *)(*(_QWORD *)(v106 + 264) + 24 * v120 + 16), v681, (uint64_t)out, (uint64_t *)&v711, &v718);
          v106 = a1;
          if (*(_DWORD *)(a1 + 280) <= (v117 + 1))
            v121 = v117 + 1;
          else
            v121 = *(_DWORD *)(a1 + 280);
          v122 = v117;
          while (1)
          {
            v120 = (v122 + 1);
            if (v121 - 1 == v122)
              break;
            ++v122;
            LODWORD(v117) = v120;
            if ((*(_DWORD *)(*(_QWORD *)(a1 + 264) + 24 * v120 + 8) & 0x80000000) != 0)
              goto LABEL_198;
          }
          LODWORD(v117) = v121;
LABEL_198:
          ;
        }
        while ((_DWORD)v116 != (_DWORD)v117);
      }
      re::ecs2::CARESortingDebugging::m_dirtyTransformEntityCount = *(_DWORD *)(v106 + 276);
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v114);
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v115);
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)out);
      v98 = a1;
    }
    v669 = v79;
    if (*(_DWORD *)(v98 + 372))
    {
      v703 = v98 + 344;
      LODWORD(v721) = 0;
      v719 = 0u;
      v720 = 0u;
      *(_QWORD *)((char *)&v721 + 4) = 0x7FFFFFFFLL;
      re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::init((uint64_t)&v719, v681, 128);
      v123 = a1;
      v124 = *(unsigned int *)(a1 + 376);
      if ((_DWORD)v124)
      {
        v125 = 0;
        v126 = (int *)(*(_QWORD *)(a1 + 360) + 8);
        while (1)
        {
          v127 = *v126;
          v126 += 6;
          if (v127 < 0)
            break;
          if (v124 == ++v125)
          {
            LODWORD(v125) = *(_DWORD *)(a1 + 376);
            break;
          }
        }
      }
      else
      {
        LODWORD(v125) = 0;
      }
      if ((_DWORD)v124 != (_DWORD)v125)
      {
        v128 = v125;
        do
        {
          *(_QWORD *)&v726 = *(_QWORD *)(*(_QWORD *)(v123 + 360) + 24 * v128 + 16);
          if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)&v719, (uint64_t *)&v726)&& (*(_BYTE *)(v726 + 288) & 1) != 0)
          {
            (*(void (**)(unsigned __int8 *__return_ptr, uint64_t))(*(_QWORD *)v3 + 8))(out, v3);
            if (out[0])
              v129 = *(_QWORD *)&out[8];
            else
              v129 = 0;
            LODWORD(v734[0]) = 1;
            *((_QWORD *)&v734[0] + 1) = 0;
            *(_QWORD *)&v734[1] = 0;
            *(_QWORD *)&out[8] = 0;
            *(_QWORD *)out = v681;
            re::DynamicOverflowArray<re::ecs2::Entity *,128ul>::setCapacity(out, 0);
            LODWORD(v734[0]) += 2;
            re::DynamicOverflowArray<re::ecs2::Entity *,128ul>::add((int *)out, &v726);
            v130 = *(_QWORD *)&out[8];
            while (v130)
            {
              v707.f64[0] = 0.0;
              v131 = *(char **)&v734[1];
              if ((v734[0] & 1) != 0)
                v131 = (char *)v734 + 8;
              --v130;
              v707.f64[0] = *(float64_t *)&v131[8 * v130];
              *(_QWORD *)&out[8] = v130;
              LODWORD(v734[0]) += 2;
              re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add((uint64_t)&v719, (uint64_t *)&v707);
              v132 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(_QWORD *)&v707.f64[0] + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
              if (!v132 || *(_DWORD *)(v132 + 80) != 3)
                re::ecs2::CARESortingManager::PerWorldDirtyEntities::addDirtyEntityIfSortable((uint64_t *)&v711, *(unint64_t *)&v707.f64[0], &v718);
              v133 = *(_QWORD *)(*(_QWORD *)&v707.f64[0] + 328);
              if (v133)
              {
                v134 = *(_QWORD **)(*(_QWORD *)&v707.f64[0] + 344);
                v135 = 8 * v133;
                do
                {
                  *(_QWORD *)v738 = 0;
                  *(_QWORD *)v738 = *v134;
                  if ((*(_BYTE *)(*(_QWORD *)v738 + 288) & 1) != 0
                    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)&v719, (uint64_t *)v738))
                  {
                    (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v3 + 8))(&v730, v3, *(_QWORD *)v738);
                    v136 = (_BYTE)v730 ? *((_QWORD *)&v730 + 1) : 0;
                    if (v136 == v129)
                    {
                      v137 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(_QWORD *)v738 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                      if (!v137 || *(_DWORD *)(v137 + 80) != 3)
                        re::DynamicOverflowArray<re::ecs2::Entity *,128ul>::add((int *)out, v738);
                    }
                  }
                  ++v134;
                  v135 -= 8;
                }
                while (v135);
                v130 = *(_QWORD *)&out[8];
              }
            }
            if (*(_QWORD *)out && (v734[0] & 1) == 0)
              (*(void (**)(void))(**(_QWORD **)out + 40))();
          }
          v123 = a1;
          if (*(_DWORD *)(a1 + 376) <= (v125 + 1))
            v138 = v125 + 1;
          else
            v138 = *(_DWORD *)(a1 + 376);
          while (1)
          {
            v128 = (v125 + 1);
            if (v138 - 1 == (_DWORD)v125)
              break;
            LODWORD(v125) = v125 + 1;
            v139 = v128;
            if ((*(_DWORD *)(*(_QWORD *)(a1 + 360) + 24 * v128 + 8) & 0x80000000) != 0)
              goto LABEL_244;
          }
          v139 = v138;
LABEL_244:
          LODWORD(v125) = v139;
        }
        while ((_DWORD)v124 != v139);
      }
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v703);
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v719);
      v98 = a1;
    }
    v140 = *(unsigned int *)(v98 + 88);
    if ((_DWORD)v140)
    {
      v141 = 0;
      v142 = (int *)(*(_QWORD *)(v98 + 72) + 8);
      while (1)
      {
        v143 = *v142;
        v142 += 46;
        if (v143 < 0)
          break;
        if (v140 == ++v141)
        {
          LODWORD(v141) = *(_DWORD *)(v98 + 88);
          break;
        }
      }
    }
    else
    {
      LODWORD(v141) = 0;
    }
    if ((_DWORD)v140 == (_DWORD)v141)
    {
LABEL_253:
      if (*(_QWORD *)(v98 + 504))
      {
        v144 = *(_QWORD *)(*(_QWORD *)(v98 + 512) + 104);
        v145 = v669;
        if (v144)
        {
          v146 = *(_QWORD *)(v144 + 304);
          if (v146)
          {
            v147 = (uint64_t)&unk_255828000;
            if (re::CARESortingDefaults::enableDrawLayerSortingGroups(void)::onceToken != -1)
              goto LABEL_966;
            while (re::gEnableDrawLayerSortingGroups)
            {
              v148 = *(_QWORD *)(a1 + 536);
              if (!v148)
                goto LABEL_802;
              v149 = atomic_load((unsigned int *)(v148 + 704));
              if (v149 != 2)
              {
                if (!*(_QWORD *)(a1 + 536))
                {
LABEL_802:
                  (*(void (**)(unsigned __int8 *__return_ptr, _QWORD, const char *))(**(_QWORD **)(a1 + 504)
                                                                                              + 8))(out, *(_QWORD *)(a1 + 504), "engine:Courier.refont");
                  v468 = *(_OWORD *)(a1 + 528);
                  *(_OWORD *)(a1 + 528) = *(_OWORD *)out;
                  *(_OWORD *)out = v468;
                  v469 = *(_QWORD *)(a1 + 544);
                  *(_QWORD *)(a1 + 544) = *(_QWORD *)&v734[0];
                  *(_QWORD *)&v734[0] = v469;
                  re::AssetHandle::~AssetHandle((re::AssetHandle *)out);
                }
                re::AssetHandle::loadAsync((re::AssetHandle *)(a1 + 528));
                goto LABEL_808;
              }
              re::makeFontID((re *)(a1 + 528), (re::StringID *)&v726);
              if (*(_QWORD *)(v147 + 1696) != -1)
                dispatch_once(&re::CARESortingDefaults::enableDrawLayerSortingGroups(void)::onceToken, &__block_literal_global_9_0);
              v150 = a1;
              if (!re::gEnableDrawLayerSortingGroups)
                goto LABEL_807;
              v151 = *(unsigned int *)(a1 + 88);
              if ((_DWORD)v151)
              {
                v152 = 0;
                v153 = (int *)(*(_QWORD *)(a1 + 72) + 8);
                while (1)
                {
                  v154 = *v153;
                  v153 += 46;
                  if (v154 < 0)
                    break;
                  if (v151 == ++v152)
                  {
                    LODWORD(v152) = *(_DWORD *)(a1 + 88);
                    break;
                  }
                }
              }
              else
              {
LABEL_805:
                LODWORD(v152) = 0;
              }
              if ((_DWORD)v151 == (_DWORD)v152)
              {
LABEL_807:
                re::StringID::destroyString((re::StringID *)&v726);
                v145 = v669;
                goto LABEL_808;
              }
              v470 = v152;
              v471 = xmmword_2260E5F10;
              v472 = xmmword_2260E5F40;
              v147 = 24;
              *((_QWORD *)&v473 + 1) = 0x3F80000000000000;
              *(_QWORD *)&v473 = COERCE_UNSIGNED_INT(1.0);
              v664 = v473;
              LODWORD(v473) = 0;
              DWORD1(v473) = 1.0;
              v663 = v473;
              v678 = (os_unfair_lock_s *)v146;
              v661 = v151;
              while (1)
              {
                v474 = *(_QWORD *)(v150 + 72) + 184 * v470;
                v475 = v474 + 24;
                v699 = *(unsigned int *)(v474 + 56);
                v476 = 0;
                if ((_DWORD)v699)
                {
                  v477 = (int *)(*(_QWORD *)(v474 + 40) + 8);
                  while (1)
                  {
                    v478 = *v477;
                    v477 += 6;
                    if (v478 < 0)
                      break;
                    if (v699 == ++v476)
                    {
                      LODWORD(v476) = v699;
                      break;
                    }
                  }
                }
                v662 = v152;
                v479 = v699;
                v668 = v475;
                if ((_DWORD)v699 != (_DWORD)v476)
                {
                  v480 = v476;
                  do
                  {
                    v481 = *(_QWORD *)(v475 + 16) + 24 * v480;
                    v483 = *(float **)(v481 + 16);
                    v482 = (float32x4_t **)(v481 + 16);
                    v484 = (float)((float)((float)((float)(v483[32] + v483[33]) + v483[34]) + v483[28]) + v483[29])
                         + v483[30];
                    *(float *)&v487 = fmodf(fminf(v484 - floorf(v484), 1.0), 1.0) / 0.16667;
                    v485 = (int)*(float *)&v487;
                    *(float *)&v486 = *(float *)&v487 - (float)(int)*(float *)&v487;
                    *(float *)&v487 = 1.0 - *(float *)&v486;
                    *(float *)&v488 = 1.0 - (float)(1.0 - *(float *)&v486);
                    switch(v485)
                    {
                      case 0:
                        *(_QWORD *)&v486 = __PAIR64__(v488, 1.0);
                        DWORD2(v486) = 0;
                        v719 = v486;
                        v489 = (float)(*(float *)&v487 * -0.5) + 1.0;
                        LODWORD(v487) = 0.5;
                        v490 = v489 * 0.5;
                        goto LABEL_822;
                      case 1:
                        DWORD1(v487) = 1.0;
                        DWORD2(v487) = 0;
                        v719 = v487;
                        v490 = 0.5;
                        *(float *)&v487 = (float)((float)(*(float *)&v486 * -0.5) + 1.0) * 0.5;
LABEL_822:
                        v492 = 0.25;
                        goto LABEL_828;
                      case 2:
                        v493 = v663;
                        DWORD2(v493) = v488;
                        v719 = v493;
                        v490 = 0.5;
                        v492 = (float)((float)(*(float *)&v487 * -0.5) + 1.0) * 0.5;
                        goto LABEL_825;
                      case 3:
                        LODWORD(v488) = 0;
                        *((float *)&v488 + 1) = 1.0 - *(float *)&v486;
                        DWORD2(v488) = 1.0;
                        v719 = v488;
                        v494 = (float)(*(float *)&v486 * -0.5) + 1.0;
                        v492 = 0.5;
                        v490 = v494 * 0.5;
LABEL_825:
                        LODWORD(v487) = 0.25;
                        goto LABEL_828;
                      case 4:
                        DWORD1(v488) = 0;
                        DWORD2(v488) = 1.0;
                        v719 = v488;
                        v492 = 0.5;
                        *(float *)&v487 = (float)((float)(*(float *)&v487 * -0.5) + 1.0) * 0.5;
                        goto LABEL_827;
                      default:
                        v491 = v664;
                        *((float *)&v491 + 2) = 1.0 - *(float *)&v486;
                        v719 = v491;
                        LODWORD(v487) = 0.5;
                        v492 = (float)((float)(*(float *)&v486 * -0.5) + 1.0) * 0.5;
LABEL_827:
                        v490 = 0.25;
LABEL_828:
                        *((float *)&v487 + 1) = v490;
                        *((float *)&v487 + 2) = v492;
                        v730 = v487;
                        v704 = v482;
                        v495 = *v482;
                        v496 = (*v482)[3].u32[2];
                        if ((_DWORD)v496)
                        {
                          v497 = 0;
                          v498 = (int *)(v495[2].i64[1] + 8);
                          do
                          {
                            v499 = *v498;
                            v498 += 6;
                            if (v499 < 0)
                              goto LABEL_834;
                            ++v497;
                          }
                          while (v496 != v497);
                          LODWORD(v497) = v496;
                        }
                        else
                        {
                          LODWORD(v497) = 0;
                        }
LABEL_834:
                        if ((_DWORD)v496 == (_DWORD)v497)
                        {
                          v500 = v704;
                          goto LABEL_852;
                        }
                        v501 = v497;
                        break;
                    }
                    do
                    {
                      v502 = *(re::ecs2::TransformComponent ***)(v495[2].i64[1] + 24 * v501 + 16);
                      v503 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v502 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                      if (v503)
                      {
                        v504 = v503;
                        re::ecs2::TransformComponent::worldMatrix4x4F(v502, (const re::ecs2::Entity *)1, out);
                        *(_OWORD *)out = v735;
                        re::DebugRenderer::drawLine(v678, (__int128 *)out, (__int128 *)(v504 + 304), &v730, 1);
                        v505 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v502 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                        if (v505)
                        {
                          v506 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)(v505 + 48), *(float32x4_t *)(v505 + 64));
                          v506.i32[3] = v506.i32[2];
                          if ((vmaxvq_u32(v506) & 0x80000000) != 0)
                          {
                            v508 = *(float32x4_t *)(v505 + 32);
                            v509.i64[0] = 0xBF000000BF000000;
                            v509.i64[1] = 0xBF000000BF000000;
                            v510.i64[0] = 0x3F0000003F000000;
                            v510.i64[1] = 0x3F0000003F000000;
                            v734[0] = vmulq_f32(v508, v509);
                            v734[1] = vmulq_f32(v508, v510);
                          }
                          else
                          {
                            v507 = *(_OWORD *)(v505 + 64);
                            v734[0] = *(_OWORD *)(v505 + 48);
                            v734[1] = v507;
                          }
                          out[0] = 1;
                          v511 = (float32x4_t *)re::ecs2::SortingTransformCache::getOrRecomputeWorldMatrixAndInverse(v672, (const re::ecs2::Entity *)v502);
                          re::DebugRenderer::drawBox(v678, v511, (float *)v734, &v730, 1);
                        }
                      }
                      if (v495[3].i32[2] <= (v497 + 1))
                        v512 = v497 + 1;
                      else
                        v512 = v495[3].i32[2];
                      while (1)
                      {
                        v501 = (v497 + 1);
                        if (v512 - 1 == (_DWORD)v497)
                          break;
                        LODWORD(v497) = v497 + 1;
                        v513 = v501;
                        if ((*(_DWORD *)(v495[2].i64[1] + 24 * v501 + 8) & 0x80000000) != 0)
                          goto LABEL_850;
                      }
                      v513 = v512;
LABEL_850:
                      LODWORD(v497) = v513;
                    }
                    while ((_DWORD)v496 != v513);
                    v500 = v704;
                    v495 = *v704;
LABEL_852:
                    v514 = v495[8];
                    v515 = vsubq_f32(v514, v495[7]);
                    v516 = (int32x4_t)vmulq_f32(v515, v515);
                    v516.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v516, 2), vadd_f32(*(float32x2_t *)v516.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v516.i8, 1))).u32[0];
                    v517 = vrsqrte_f32((float32x2_t)v516.u32[0]);
                    v518 = vmul_f32(v517, vrsqrts_f32((float32x2_t)v516.u32[0], vmul_f32(v517, v517)));
                    v519 = vmulq_n_f32(v515, vmul_f32(v518, vrsqrts_f32((float32x2_t)v516.u32[0], vmul_f32(v518, v518))).f32[0]);
                    v520 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v519, (int32x4_t)v519), (int8x16_t)v519, 0xCuLL);
                    v521 = vmlaq_f32(vmulq_f32(v520, (float32x4_t)xmmword_2261027B0), (float32x4_t)xmmword_2260E5F40, v519);
                    v522 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v521, (int32x4_t)v521), (int8x16_t)v521, 0xCuLL);
                    v523 = (int32x4_t)vmulq_f32(v521, v521);
                    v523.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v523.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v523, 2), *(float32x2_t *)v523.i8)).u32[0];
                    v524 = vrsqrte_f32((float32x2_t)v523.u32[0]);
                    v525 = vmul_f32(v524, vrsqrts_f32((float32x2_t)v523.u32[0], vmul_f32(v524, v524)));
                    v526 = vmulq_n_f32(v522, vmul_f32(v525, vrsqrts_f32((float32x2_t)v523.u32[0], vmul_f32(v525, v525))).f32[0]);
                    v527 = v526.f32[1];
                    v528 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v526, (int32x4_t)v526), (int8x16_t)v526, 0xCuLL), vnegq_f32(v519)), v526, v520);
                    v529 = v519.f32[2] + vaddq_f32(v526, v528).f32[0];
                    if (v529 >= 0.0)
                    {
                      v530 = 1.0;
                      v528.f32[0] = sqrtf(v529 + 1.0);
                      v526.f32[0] = v528.f32[0] + v528.f32[0];
                      v534 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v528.f32[0] + v528.f32[0]));
                      v535 = vmul_f32(v534, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v528.f32[0] + v528.f32[0]), v534));
                      v536 = vmul_f32(v535, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v528.f32[0] + v528.f32[0]), v535)).f32[0];
                      v528.f32[0] = (float)(v528.f32[1] - v519.f32[1]) * v536;
                      v531 = (float)(v519.f32[0] - v526.f32[2]) * v536;
                      v532 = (float)(v526.f32[1] - v528.f32[2]) * v536;
                      v533 = v526.f32[0] * 0.25;
                      v475 = v668;
                    }
                    else
                    {
                      v475 = v668;
                      if (v526.f32[0] < v519.f32[2]
                        || (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v526, v528))).u8[0] & 1) != 0)
                      {
                        v530 = 1.0;
                        v526.f32[0] = 1.0 - v526.f32[0];
                        v537 = v528.f32[0] < v519.f32[2];
                        v538 = v528.f32[0] < v519.f32[2];
                        v539 = sqrtf(v519.f32[2] + (float)(v526.f32[0] - v528.f32[0]));
                        *(float *)&v540 = v539 + v539;
                        v541 = vrecpe_f32((float32x2_t)v540);
                        v542 = vmul_f32(v541, vrecps_f32((float32x2_t)v540, v541));
                        v543 = vmul_f32(v542, vrecps_f32((float32x2_t)v540, v542)).f32[0];
                        v544 = (float)(v519.f32[0] + v526.f32[2]) * v543;
                        v545 = (float)(v519.f32[1] + v528.f32[1]) * v543;
                        v546 = *(float *)&v540 * 0.25;
                        v547 = (float)(v526.f32[1] - v528.f32[2]) * v543;
                        v528.f32[0] = sqrtf((float)(v526.f32[0] - v519.f32[2]) + v528.f32[0]);
                        v528.f32[0] = v528.f32[0] + v528.f32[0];
                        *(float32x2_t *)v526.f32 = vrecpe_f32((float32x2_t)v528.u32[0]);
                        *(float32x2_t *)v526.f32 = vmul_f32(*(float32x2_t *)v526.f32, vrecps_f32((float32x2_t)v528.u32[0], *(float32x2_t *)v526.f32));
                        v548 = vmul_f32(*(float32x2_t *)v526.f32, vrecps_f32((float32x2_t)v528.u32[0], *(float32x2_t *)v526.f32)).f32[0];
                        v549 = (float)(v527 + v528.f32[2]) * v548;
                        v550 = v528.f32[0] * 0.25;
                        v551 = (float)(v519.f32[1] + v528.f32[1]) * v548;
                        v533 = (float)(v519.f32[0] - v526.f32[2]) * v548;
                        if (v537)
                          v528.f32[0] = v544;
                        else
                          v528.f32[0] = v549;
                        if (v538)
                          v531 = v545;
                        else
                          v531 = v550;
                        if (v538)
                          v532 = v546;
                        else
                          v532 = v551;
                        if (v538)
                          v533 = v547;
                      }
                      else
                      {
                        v530 = 1.0;
                        v528.f32[0] = sqrtf(v526.f32[0] + (float)((float)(1.0 - v528.f32[0]) - v519.f32[2]));
                        v528.f32[0] = v528.f32[0] + v528.f32[0];
                        *(float32x2_t *)v526.f32 = vrecpe_f32((float32x2_t)v528.u32[0]);
                        *(float32x2_t *)v526.f32 = vmul_f32(*(float32x2_t *)v526.f32, vrecps_f32((float32x2_t)v528.u32[0], *(float32x2_t *)v526.f32));
                        v526.f32[0] = vmul_f32(*(float32x2_t *)v526.f32, vrecps_f32((float32x2_t)v528.u32[0], *(float32x2_t *)v526.f32)).f32[0];
                        v528.f32[0] = v528.f32[0] * 0.25;
                        v531 = (float)(v527 + v528.f32[2]) * v526.f32[0];
                        v532 = (float)(v519.f32[0] + v526.f32[2]) * v526.f32[0];
                        v533 = (float)(v528.f32[1] - v519.f32[1]) * v526.f32[0];
                      }
                    }
                    v552 = v528.f32[0] + v528.f32[0];
                    v553 = v531 + v531;
                    v554 = v532 + v532;
                    v555 = v528.f32[0] * (float)(v528.f32[0] + v528.f32[0]);
                    v556 = v531 * (float)(v531 + v531);
                    v557 = v532 * (float)(v532 + v532);
                    v558 = v552 * v531;
                    v559 = v552 * v532;
                    v560 = v553 * v532;
                    v561 = v553 * v533;
                    v562 = v554 * v533;
                    HIDWORD(v563) = 0;
                    *(float *)&v563 = v530 - (float)(v556 + v557);
                    *((float *)&v563 + 1) = v558 + v562;
                    *((float *)&v563 + 2) = v559 - v561;
                    v564 = v552 * v533;
                    HIDWORD(v565) = 0;
                    *(_QWORD *)&v565 = __PAIR64__(v530 - (float)(v555 + v557), v558 - v562);
                    *((float *)&v565 + 2) = v560 + v564;
                    HIDWORD(v566) = 0;
                    *(float *)&v566 = v559 + v561;
                    *((float *)&v566 + 1) = v560 - v564;
                    *((float *)&v566 + 2) = v530 - (float)(v555 + v556);
                    *(_OWORD *)out = v563;
                    v734[0] = v565;
                    v514.f32[3] = v530;
                    v734[1] = v566;
                    v735 = (__int128)v514;
                    re::DebugRenderer::drawSphere(v678, (uint64_t)out, 32, &v719, 1, 0.03);
                    v567 = *v500 + 8;
                    *(float32x4_t *)out = vaddq_f32(*v567, vmulq_f32((*v500)[7], (float32x4_t)vdupq_n_s32(0x3E4CCCCDu)));
                    re::DebugRenderer::drawArrow(v678, v567, (float32x4_t *)out, &v719, 1, 0.015);
                    v479 = *(_DWORD *)(v475 + 32);
                    if (v479 <= (int)v476 + 1)
                      v568 = v476 + 1;
                    else
                      v568 = *(_DWORD *)(v475 + 32);
                    v150 = a1;
                    v472 = xmmword_2260E5F40;
                    v471 = xmmword_2260E5F10;
                    while (1)
                    {
                      v480 = (v476 + 1);
                      if (v568 - 1 == (_DWORD)v476)
                        break;
                      LODWORD(v476) = v476 + 1;
                      v569 = v480;
                      if ((*(_DWORD *)(*(_QWORD *)(v475 + 16) + 24 * v480 + 8) & 0x80000000) != 0)
                        goto LABEL_876;
                    }
                    v569 = v568;
LABEL_876:
                    LODWORD(v476) = v569;
                  }
                  while ((_DWORD)v699 != v569);
                }
                v570 = 0;
                if (v479)
                {
                  v571 = (int *)(*(_QWORD *)(v475 + 16) + 8);
                  while (1)
                  {
                    v572 = *v571;
                    v571 += 6;
                    if (v572 < 0)
                      break;
                    if (v479 == ++v570)
                    {
                      LODWORD(v570) = v479;
                      break;
                    }
                  }
                }
                if (v479 != (_DWORD)v570)
                  break;
LABEL_883:
                v573 = v662;
                if (*(_DWORD *)(v150 + 88) <= (v662 + 1))
                  v574 = v662 + 1;
                else
                  v574 = *(_DWORD *)(v150 + 88);
                while (1)
                {
                  v470 = (v573 + 1);
                  if (v574 - 1 == v573)
                    break;
                  ++v573;
                  v575 = v470;
                  if ((*(_DWORD *)(*(_QWORD *)(v150 + 72) + 184 * v470 + 8) & 0x80000000) != 0)
                    goto LABEL_963;
                }
                v575 = v574;
LABEL_963:
                LODWORD(v152) = v575;
                if (v661 == v575)
                  goto LABEL_807;
              }
              v576 = v570;
              v577 = v479;
              v578 = 1;
              v665 = v479;
              while (1)
              {
                v666 = v570;
                v145 = *(_QWORD *)(*(_QWORD *)(v475 + 16) + 24 * v576 + 16);
                v670 = *(unsigned int *)(v145 + 232);
                v579 = 0;
                if ((_DWORD)v670)
                {
                  v580 = (int *)(*(_QWORD *)(v145 + 216) + 8);
                  while (1)
                  {
                    v581 = *v580;
                    v580 += 6;
                    if (v581 < 0)
                      break;
                    if (v670 == ++v579)
                    {
                      LODWORD(v579) = *(_DWORD *)(v145 + 232);
                      break;
                    }
                  }
                }
                if ((_DWORD)v670 != (_DWORD)v579)
                  break;
LABEL_953:
                v658 = v666;
                if (v577 <= v666 + 1)
                  v659 = v666 + 1;
                else
                  v659 = v577;
                while (1)
                {
                  v576 = (v658 + 1);
                  if (v659 - 1 == v658)
                    break;
                  ++v658;
                  v660 = v576;
                  if ((*(_DWORD *)(*(_QWORD *)(v475 + 16) + 24 * v576 + 8) & 0x80000000) != 0)
                    goto LABEL_960;
                }
                v660 = v659;
LABEL_960:
                LODWORD(v570) = v660;
                if (v665 == v660)
                  goto LABEL_883;
              }
              v582 = v579;
              while (1)
              {
                v583 = *(_QWORD *)(v145 + 216) + 24 * v582;
                v584 = vcvtq_f64_u64((uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v578), (int8x16_t)xmmword_2260E7EF0));
                *(float32x2_t *)&v584.f64[0] = vcvt_f32_f64(v584);
                v671 = v578;
                *(float *)&v584.f64[1] = (float)(v578 & 4);
                v707 = v584;
                v586 = *(_QWORD *)(v583 + 16);
                v585 = (unint64_t *)(v583 + 16);
                v146 = v586;
                v587 = *(unsigned int *)(v586 + 304);
                if ((_DWORD)v587)
                {
                  v588 = 0;
                  v589 = (int *)(*(_QWORD *)(v146 + 288) + 8);
                  while (1)
                  {
                    v590 = *v589;
                    v589 += 6;
                    if (v590 < 0)
                      break;
                    if (v587 == ++v588)
                    {
                      LODWORD(v588) = v587;
                      break;
                    }
                  }
                }
                else
                {
                  LODWORD(v588) = 0;
                }
                if ((_DWORD)v587 != (_DWORD)v588)
                  break;
LABEL_940:
                v649 = *(_QWORD *)(v146 + 56);
                v650 = xmmword_2260E5F20;
                v651 = 1.0;
                if (v649)
                {
                  v652 = *(__int128 **)(v146 + 64);
                  v653 = 16 * v649;
                  do
                  {
                    v654 = *v652++;
                    v655 = v654;
                    *(_OWORD *)out = v471;
                    v734[0] = v650;
                    *((float *)&v655 + 3) = v651;
                    v734[1] = v472;
                    v735 = v655;
                    re::DebugRenderer::drawSphere(v678, (uint64_t)out, 4, (__int128 *)&v707, 1, 0.01);
                    v651 = 1.0;
                    v650 = xmmword_2260E5F20;
                    v472 = xmmword_2260E5F40;
                    v471 = xmmword_2260E5F10;
                    v653 -= 16;
                  }
                  while (v653);
                }
                v578 = v671 + 1;
                if (*(_DWORD *)(v145 + 232) <= (v579 + 1))
                  v656 = v579 + 1;
                else
                  v656 = *(_DWORD *)(v145 + 232);
                v150 = a1;
                v475 = v668;
                while (1)
                {
                  v582 = (v579 + 1);
                  if (v656 - 1 == (_DWORD)v579)
                    break;
                  LODWORD(v579) = v579 + 1;
                  v657 = v582;
                  if ((*(_DWORD *)(*(_QWORD *)(v145 + 216) + 24 * v582 + 8) & 0x80000000) != 0)
                    goto LABEL_951;
                }
                v657 = v656;
LABEL_951:
                LODWORD(v579) = v657;
                if ((_DWORD)v670 == v657)
                {
                  v577 = *(_DWORD *)(v668 + 32);
                  goto LABEL_953;
                }
              }
              v667 = v585;
              v591 = v588;
              while (1)
              {
                v592 = *(re::ecs2::TransformComponent ***)(*(_QWORD *)(v146 + 288) + 24 * v591 + 16);
                v593 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v592 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                if (!v593)
                  break;
                v595 = *(_DWORD *)(v593 + 160);
                re::DynamicString::format((re::DynamicString *)"%d\n", (re::DynamicString *)&v730, v595);
                re::ecs2::TransformComponent::worldMatrix4x4F(v592, (const re::ecs2::Entity *)1, out);
                v705 = v735;
                re::ecs2::TransformComponent::worldOrientation(v592, (const re::ecs2::Entity *)1);
                v597.i64[0] = v596;
                v597.i64[1] = v598;
                v700 = v597;
                re::ecs2::TransformComponent::worldScale(v592, (const re::ecs2::Entity *)1);
                v600 = v599;
                v601 = vmulq_f32(v700, v700);
                LODWORD(v602) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v601, 2), vaddq_f32(v601, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v601.f32, 1))).u32[0];
                v603 = 0uLL;
                if (fabsf(v602) >= 1.0e-10)
                {
                  v604 = v602;
                  v605 = vrsqrte_f32((float32x2_t)LODWORD(v602));
                  v606 = vmul_f32(v605, vrsqrts_f32((float32x2_t)LODWORD(v604), vmul_f32(v605, v605)));
                  v603 = vmulq_n_f32(v700, vmul_f32(v606, vrsqrts_f32((float32x2_t)LODWORD(v604), vmul_f32(v606, v606))).f32[0]);
                }
                v607 = v700.f32[3];
                v608 = fabsf(v700.f32[3]);
                v609 = 1.0;
                if (v608 <= 1.0
                  || (v609 = 1.0, fabsf(v608 + -1.0) < (float)((float)((float)(v608 + 1.0) + 1.0) * 0.00001)))
                {
                  if (v700.f32[3] > v609)
                    v607 = v609;
                  if (v607 < -1.0)
                    v607 = -1.0;
                  v701 = v603;
                  v611 = acosf(v607);
                  v603 = v701;
                  v610 = v611 + v611;
                }
                else
                {
                  v610 = NAN;
                }
                v612 = (float32x4_t)v705;
                v613 = vmulq_f32(v603, v603);
                LODWORD(v614) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v613, 2), vaddq_f32(v613, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v613.f32, 1))).u32[0];
                if (fabsf(v614) >= 1.0e-10)
                {
                  v615 = v614;
                  v616 = vrsqrte_f32((float32x2_t)LODWORD(v614));
                  v617 = vmul_f32(v616, vrsqrts_f32((float32x2_t)LODWORD(v615), vmul_f32(v616, v616)));
                  v603 = vmulq_n_f32(v603, vmul_f32(v617, vrsqrts_f32((float32x2_t)LODWORD(v615), vmul_f32(v617, v617))).f32[0]);
                }
                *(_QWORD *)&v618 = 0;
                *((_QWORD *)&v618 + 1) = __PAIR64__(1.0, COERCE_UNSIGNED_INT(fminf((float)((float)v595 * 0.005) + 0.005, 0.05)));
                v682 = v618;
                v612.i32[3] = 1.0;
                v702 = v603;
                v706 = v612;
                v680 = vmulq_f32(v603, v603).f32[0];
                v619 = vmuls_lane_f32(v603.f32[1], *(float32x2_t *)v603.f32, 1);
                v620 = vmuls_lane_f32(v603.f32[2], v603, 2);
                v621 = vmuls_lane_f32(v603.f32[0], *(float32x2_t *)v603.f32, 1);
                v622 = vmuls_lane_f32(v603.f32[0], v603, 2);
                v623 = vmuls_lane_f32(v603.f32[1], v603, 2);
                v624 = __sincosf_stret(v610);
                v625 = 0;
                v626 = vmuls_lane_f32(v624.__sinval, *(float32x2_t *)v702.f32, 1);
                v627 = vmuls_lane_f32(v624.__sinval, v702, 2);
                HIDWORD(v628) = 0;
                *(float *)&v628 = v680 + (float)(v624.__cosval * (float)(1.0 - v680));
                *((float *)&v628 + 1) = v627 + (float)(v621 * (float)(1.0 - v624.__cosval));
                *((float *)&v628 + 2) = -(float)(v626 - (float)(v622 * (float)(1.0 - v624.__cosval)));
                HIDWORD(v629) = 0;
                *(float *)&v629 = -(float)(v627 - (float)(v621 * (float)(1.0 - v624.__cosval)));
                *((float *)&v629 + 1) = v619 + (float)(v624.__cosval * (float)(1.0 - v619));
                *((float *)&v629 + 2) = (float)(v624.__sinval * v702.f32[0])
                                      + (float)(v623 * (float)(1.0 - v624.__cosval));
                HIDWORD(v630) = 0;
                *(float *)&v630 = v626 + (float)(v622 * (float)(1.0 - v624.__cosval));
                *((float *)&v630 + 1) = -(float)((float)(v624.__sinval * v702.f32[0])
                                               - (float)(v623 * (float)(1.0 - v624.__cosval)));
                *((float *)&v630 + 2) = v620 + (float)(v624.__cosval * (float)(1.0 - v620));
                v719 = v628;
                v720 = v629;
                v721 = v630;
                v722 = xmmword_2260E5D70;
                do
                {
                  *(float32x4_t *)&out[v625] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_2260E5F10, COERCE_FLOAT(*(__int128 *)((char *)&v719 + v625))), (float32x4_t)xmmword_2260E5F20, *(float32x2_t *)((char *)&v719 + v625), 1), (float32x4_t)xmmword_2260E5F40, *(float32x4_t *)((char *)&v719 + v625), 2), v706, *(float32x4_t *)((char *)&v719 + v625), 3);
                  v625 += 16;
                }
                while (v625 != 64);
                v631 = 0;
                v632 = *(float32x4_t *)out;
                v633 = (float32x4_t)v734[0];
                v634 = (float32x4_t)v734[1];
                v635 = (float32x4_t)v735;
                v719 = xmmword_2260E5F10;
                v720 = xmmword_2260E5F20;
                v721 = xmmword_2260E5F40;
                v722 = v682;
                do
                {
                  *(float32x4_t *)&out[v631] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v632, COERCE_FLOAT(*(__int128 *)((char *)&v719 + v631))), v633, *(float32x2_t *)((char *)&v719 + v631), 1), v634, *(float32x4_t *)((char *)&v719 + v631), 2), v635, *(float32x4_t *)((char *)&v719 + v631), 3);
                  v631 += 16;
                }
                while (v631 != 64);
                v636 = 0;
                v637 = *(float32x4_t *)out;
                v638 = (float32x4_t)v734[0];
                v639 = (float32x4_t)v734[1];
                v640 = (float32x4_t)v735;
                LODWORD(v641) = 0;
                *((float *)&v641 + 1) = v600 * 0.025;
                *(_QWORD *)&v642 = 0;
                HIDWORD(v642) = 0;
                *((float *)&v642 + 2) = v600 * 0.025;
                v719 = COERCE_UNSIGNED_INT(v600 * 0.025);
                v720 = v641;
                v721 = v642;
                v722 = xmmword_2260E5D70;
                do
                {
                  *(float32x4_t *)&out[v636] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v637, COERCE_FLOAT(*(__int128 *)((char *)&v719 + v636))), v638, *(float32x2_t *)((char *)&v719 + v636), 1), v639, *(float32x4_t *)((char *)&v719 + v636), 2), v640, *(float32x4_t *)((char *)&v719 + v636), 3);
                  v636 += 16;
                }
                while (v636 != 64);
                v643 = BYTE8(v730);
                v644 = v731.i64[0];
                if ((BYTE8(v730) & 1) != 0)
                  v645 = (char *)v731.i64[0];
                else
                  v645 = (char *)&v730 + 9;
                *(float64_t *)&v646 = v707.f64[0];
                *((_QWORD *)&v646 + 1) = __PAIR64__(1.0, LODWORD(v707.f64[1]));
                v719 = v646;
                re::DebugRenderer::drawText((uint64_t)v678, (__int128 *)out, v645, (const StringID *)&v726, &v719);
                if ((v643 & 1) != 0 && (_QWORD)v730)
                  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v730 + 40))(v730, v644);
                if (*(_DWORD *)(v146 + 304) <= (v588 + 1))
                  v647 = v588 + 1;
                else
                  v647 = *(_DWORD *)(v146 + 304);
                v472 = xmmword_2260E5F40;
                v471 = xmmword_2260E5F10;
                while (1)
                {
                  v591 = (v588 + 1);
                  if (v647 - 1 == (_DWORD)v588)
                    break;
                  LODWORD(v588) = v588 + 1;
                  v648 = v591;
                  if ((*(_DWORD *)(*(_QWORD *)(v146 + 288) + 24 * v591 + 8) & 0x80000000) != 0)
                    goto LABEL_938;
                }
                v648 = v647;
LABEL_938:
                LODWORD(v588) = v648;
                if ((_DWORD)v587 == v648)
                {
                  v146 = *v667;
                  goto LABEL_940;
                }
              }
              re::internal::assertLog((re::internal *)4, v594, "assertion failure: '%s' (%s:line %i) MeshSortingComponent must exist for entities in sort groups", "meshSortingComponent", "drawDebug", 1646);
              _os_crash();
              __break(1u);
LABEL_966:
              dispatch_once(&re::CARESortingDefaults::enableDrawLayerSortingGroups(void)::onceToken, &__block_literal_global_9_0);
            }
          }
        }
        goto LABEL_808;
      }
LABEL_796:
      v145 = v669;
      do
        v466 = __ldaxr(_MergedGlobals_139);
      while (__stlxr(1u, _MergedGlobals_139));
      if ((v466 & 1) == 0)
      {
        v467 = *re::sortingLogObjects(v97);
        if (os_log_type_enabled(v467, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)out = 0;
          _os_log_impl(&dword_224FE9000, v467, OS_LOG_TYPE_DEFAULT, "No AssetService found, CARE sorting debug drawing will not be performed.", out, 2u);
        }
      }
LABEL_808:
      re::ecs2::CARESortingDebugging::m_entitiesActivated = 0;
      re::ecs2::CARESortingDebugging::m_entitiesDeactivated = 0;
      re::ecs2::CARESortingDebugging::m_uiSortingComponentActivated = 0;
      re::ecs2::CARESortingDebugging::m_uiSortingComponentDeactivated = 0;
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v145);
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(a1 + 200);
      re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v714);
      return;
    }
    v155 = v141;
    v673 = *(_DWORD *)(v98 + 88);
LABEL_269:
    v677 = *(_QWORD *)(v98 + 72);
    v156 = v677 + 184 * v155;
    v674 = v141;
    if (!(_QWORD)v714)
      goto LABEL_280;
    v157 = *(_QWORD *)(v156 + 16);
    v158 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v157 ^ (v157 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v157 ^ (v157 >> 30))) >> 27));
    v159 = *(unsigned int *)(*((_QWORD *)&v714 + 1) + 4 * ((v158 ^ (v158 >> 31)) % DWORD2(v715)));
    if ((_DWORD)v159 == 0x7FFFFFFF)
      goto LABEL_280;
    while (*(_QWORD *)(v715 + 72 * v159 + 16) != v157)
    {
      LODWORD(v159) = *(_DWORD *)(v715 + 72 * v159 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v159 == 0x7FFFFFFF)
        goto LABEL_280;
    }
    v160 = v715 + 72 * v159;
    v161 = *(unsigned int *)(v160 + 52);
    if ((_DWORD)v161)
    {
      v162 = v160 + 24;
      v708 = 0;
      v709 = 0;
      v710 = 0;
      v707 = (float64x2_t)(unint64_t)v714;
      re::DynamicArray<float *>::setCapacity(&v707, v161);
      ++v709;
      v163 = *(unsigned int *)(v162 + 32);
      if ((_DWORD)v163)
      {
        v164 = 0;
        v165 = (int *)(*(_QWORD *)(v162 + 16) + 8);
        while (1)
        {
          v166 = *v165;
          v165 += 6;
          if (v166 < 0)
            break;
          if (v163 == ++v164)
          {
            LODWORD(v164) = *(_DWORD *)(v162 + 32);
            break;
          }
        }
      }
      else
      {
        LODWORD(v164) = 0;
      }
      if ((_DWORD)v163 != (_DWORD)v164)
      {
        v463 = v164;
        do
        {
          *(_QWORD *)out = 0;
          *(_QWORD *)out = *(_QWORD *)(*(_QWORD *)(v162 + 16) + 24 * v463 + 16);
          re::DynamicArray<re::TransitionCondition *>::add(&v707, out);
          if (*(_DWORD *)(v162 + 32) <= (v164 + 1))
            v464 = v164 + 1;
          else
            v464 = *(_DWORD *)(v162 + 32);
          v465 = v164;
          while (1)
          {
            v463 = (v465 + 1);
            if (v464 - 1 == v465)
              break;
            ++v465;
            LODWORD(v164) = v463;
            if ((*(_DWORD *)(*(_QWORD *)(v162 + 16) + 24 * v463 + 8) & 0x80000000) != 0)
              goto LABEL_793;
          }
          LODWORD(v164) = v464;
LABEL_793:
          ;
        }
        while ((_DWORD)v163 != (_DWORD)v164);
      }
    }
    else
    {
LABEL_280:
      v710 = 0;
      v708 = 0;
      v707 = 0uLL;
      v709 = 0;
    }
    v679 = v155;
    v167 = v710;
    v168 = v708;
    v169 = &v710[v708];
    if (v708)
    {
      v170 = v710;
      do
      {
        v171 = *v170;
        v172 = (re::ecs2::EntityComponentCollection *)(*v170 + 32);
        v173 = re::ecs2::EntityComponentCollection::get(v172, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v173)
        {
          v174 = v173;
          v175 = re::ecs2::EntityComponentCollection::get(v172, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          if (!v175 || *(_DWORD *)(v175 + 80) != 3)
          {
            v176 = *(_QWORD *)(v171 + 24);
            if (v176)
            {
              while ((*(_BYTE *)(v176 + 288) & 0x80) == 0)
              {
                v177 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v176 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                if (v177 && *(_DWORD *)(v177 + 80) == 3)
                {
                  re::ecs2::UISortingComponent::setCaSortOrder(v174, *(_DWORD *)(v177 + 88));
                  break;
                }
                v176 = *(_QWORD *)(v176 + 24);
                if (!v176)
                  break;
              }
            }
          }
        }
        ++v170;
      }
      while (v170 != v169);
    }
    v178 = v156 + 24;
    v179 = *(_DWORD *)(v178 + 28);
    if (v168 <= 1)
      v180 = 1;
    else
      v180 = v168;
    LODWORD(v721) = 0;
    if (v179 <= 1)
      v181 = 1;
    else
      v181 = v179;
    v719 = 0u;
    v720 = 0u;
    *(_QWORD *)((char *)&v721 + 4) = 0x7FFFFFFFLL;
    re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)&v719, v681, v180);
    LODWORD(v732) = 0;
    v730 = 0u;
    v731 = 0u;
    *(_QWORD *)((char *)&v732 + 4) = 0x7FFFFFFFLL;
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)&v730, v681, v181);
    re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear((uint64_t)&v730);
    v182 = *(unsigned int *)(v178 + 32);
    if ((_DWORD)v182)
    {
      v183 = 0;
      v184 = (int *)(*(_QWORD *)(v178 + 16) + 8);
      while (1)
      {
        v185 = *v184;
        v184 += 6;
        if (v185 < 0)
          break;
        if (v182 == ++v183)
        {
          LODWORD(v183) = *(_DWORD *)(v178 + 32);
          break;
        }
      }
    }
    else
    {
      LODWORD(v183) = 0;
    }
    if ((_DWORD)v182 == (_DWORD)v183)
    {
LABEL_307:
      v186 = v732;
      v688 = v178;
      v187 = 0;
      if ((_DWORD)v732)
      {
        v188 = (int *)(v731.i64[0] + 8);
        while (1)
        {
          v189 = *v188;
          v188 += 6;
          if (v189 < 0)
            break;
          if (v732 == ++v187)
          {
            LODWORD(v187) = v732;
            break;
          }
        }
      }
      v687 = v677 + 184 * v679 + 72;
      if ((_DWORD)v732 != (_DWORD)v187)
      {
        v190 = v187;
        v191 = v731.i64[0];
        do
        {
          v192 = *(_QWORD *)(v191 + 24 * v190 + 16);
          if (v192)
          {
            v193 = (id)(v192 + 8);
            re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::remove(v178, v192);
            re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::remove(v687, v192);

          }
          else
          {
            re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::remove(v178, 0);
            re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::remove(v687, 0);
          }
          if (v186 <= (int)v187 + 1)
            v194 = v187 + 1;
          else
            v194 = v186;
          while (1)
          {
            v190 = (v187 + 1);
            if (v194 - 1 == (_DWORD)v187)
              break;
            LODWORD(v187) = v187 + 1;
            v195 = v190;
            if ((*(_DWORD *)(v191 + 24 * v190 + 8) & 0x80000000) != 0)
              goto LABEL_324;
          }
          v195 = v194;
LABEL_324:
          LODWORD(v187) = v195;
        }
        while (v186 != v195);
      }
      re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear((uint64_t)&v730);
      re::ecs2::WorldSortingState::recomputeCodirectionalGroupAverages((re::ecs2::WorldSortingState *)v178, v196);
      if (v168)
      {
        v197 = (const re::ecs2::Entity **)v167;
        do
        {
          v198 = *v197;
          re::ecs2::CARESortingManager::optionalSortingPlaneFrom((float32x4_t *)out, *v197, *(re::ecs2::SortingTransformCache **)(v677 + 184 * v679 + 176));
          v726 = v734[0];
          v727 = v734[1];
          v199 = 0x94D049BB133111EBLL
               * ((0xBF58476D1CE4E5B9 * ((unint64_t)v198 ^ ((unint64_t)v198 >> 30))) ^ ((0xBF58476D1CE4E5B9 * ((unint64_t)v198 ^ ((unint64_t)v198 >> 30))) >> 27));
          v200 = v199 ^ (v199 >> 31);
          v201 = v719;
          if (!(_QWORD)v719
            || (v201 = v200 % DWORD2(v720),
                v202 = *((_QWORD *)&v719 + 1),
                v203 = *(unsigned int *)(*((_QWORD *)&v719 + 1) + 4 * v201),
                (_DWORD)v203 == 0x7FFFFFFF))
          {
LABEL_332:
            v205 = DWORD1(v721);
            if (DWORD1(v721) == 0x7FFFFFFF)
            {
              v205 = v721;
              v206 = v721;
              if ((_DWORD)v721 == DWORD2(v720))
              {
                re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity((uint64_t)&v719, 2 * HIDWORD(v720));
                v206 = v721;
                v201 = v200 % DWORD2(v720);
              }
              LODWORD(v721) = v206 + 1;
              v204 = v720;
              v207 = *(_DWORD *)(v720 + (v205 << 6) + 8);
            }
            else
            {
              v204 = v720;
              v207 = *(_DWORD *)(v720 + ((unint64_t)DWORD1(v721) << 6) + 8);
              DWORD1(v721) = v207 & 0x7FFFFFFF;
            }
            v208 = v204 + (v205 << 6);
            *(_DWORD *)(v208 + 8) = v207 | 0x80000000;
            v202 = *((_QWORD *)&v719 + 1);
            *(_DWORD *)(v208 + 8) = *(_DWORD *)(*((_QWORD *)&v719 + 1) + 4 * v201) | 0x80000000;
            *(_QWORD *)v208 = v200;
            *(_QWORD *)(v208 + 16) = v198;
            *(_OWORD *)(v208 + 32) = v726;
            *(_OWORD *)(v208 + 48) = v727;
            *(_DWORD *)(v202 + 4 * v201) = v205;
            ++HIDWORD(v720);
            ++DWORD2(v721);
          }
          else
          {
            v204 = v720;
            while (*(const re::ecs2::Entity **)(v720 + (v203 << 6) + 16) != v198)
            {
              v203 = *(_DWORD *)(v720 + (v203 << 6) + 8) & 0x7FFFFFFF;
              if ((_DWORD)v203 == 0x7FFFFFFF)
                goto LABEL_332;
            }
          }
          ++v197;
        }
        while (v197 != (const re::ecs2::Entity **)v169);
        re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear((uint64_t)&v730);
        v209 = v677 + 184 * v679 + 120;
        v210 = v719;
        v211 = DWORD2(v720);
        v694 = DWORD2(v720);
        do
        {
          v212 = *v167;
          v213 = (float32x4_t **)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v209, *v167);
          if (v213)
          {
            v214 = *v213;
            *(_QWORD *)&v726 = v214;
            if (v214)
              v215 = &v214->u32[2];
            if (v210)
            {
              v216 = 0x94D049BB133111EBLL
                   * ((0xBF58476D1CE4E5B9 * (v212 ^ (v212 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v212 ^ (v212 >> 30))) >> 27));
              for (i = *(unsigned int *)(v202 + 4 * ((v216 ^ (v216 >> 31)) % v211));
                    (_DWORD)i != 0x7FFFFFFF;
                    i = *(_DWORD *)(v204 + (i << 6) + 8) & 0x7FFFFFFF)
              {
                if (*(_QWORD *)(v204 + (i << 6) + 16) == v212)
                {
                  v218 = v169;
                  v219 = v210;
                  v220 = (float32x4_t *)(v204 + (i << 6));
                  re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::add(v687, (uint64_t *)&v726);
                  v214[9].i8[0] = 1;
                  v221 = v220[2];
                  v210 = v219;
                  v169 = v218;
                  v211 = v694;
                  v222 = vmulq_f32(v214[7], v221);
                  if ((float)(1.0
                             - vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v222, 2), vaddq_f32(v222, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v222.f32, 1))).f32[0]) > *(float *)&dword_25410619C)goto LABEL_349;
                  *(_QWORD *)out = v212;
                  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add((uint64_t)&v214[21].i64[1], (uint64_t *)out);
                  goto LABEL_350;
                }
              }
            }
            re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::add(v687, (uint64_t *)&v726);
            v214[9].i8[0] = 1;
LABEL_349:
            re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(v209, v212);
            re::ecs2::CAMeshCodirectionalGroup::remove((re::ecs2::CAMeshCodirectionalGroup *)v214, (re::ecs2::Entity *)v212);
            re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::add((uint64_t)&v730, (uint64_t *)&v726);
LABEL_350:

          }
          ++v167;
        }
        while (v167 != v169);
      }
      else
      {
        re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear((uint64_t)&v730);
      }
      if ((_DWORD)v732)
      {
        v228 = 0;
        v229 = (int *)(v731.i64[0] + 8);
        while (1)
        {
          v230 = *v229;
          v229 += 6;
          if (v230 < 0)
            break;
          if (v732 == ++v228)
          {
            LODWORD(v228) = v732;
            break;
          }
        }
      }
      else
      {
        LODWORD(v228) = 0;
      }
      v231 = v688;
      if ((_DWORD)v732 != (_DWORD)v228)
      {
        v232 = v228;
        v233 = v677 + 184 * v679;
        v689 = (re::ecs2::SortingTransformCache **)(v233 + 176);
        v695 = v233 + 120;
        v234 = v731.i64[0];
        v684 = v732;
        while (1)
        {
          v235 = *(_QWORD *)(v234 + 24 * v232 + 16);
          if (v235)
            v236 = (id)(v235 + 8);
          v237 = *(unsigned int *)(v235 + 56);
          if ((_DWORD)v237)
          {
            v238 = 0;
            v239 = (int *)(*(_QWORD *)(v235 + 40) + 8);
            while (1)
            {
              v240 = *v239;
              v239 += 6;
              if (v240 < 0)
                break;
              if (v237 == ++v238)
              {
                LODWORD(v238) = *(_DWORD *)(v235 + 56);
                break;
              }
            }
          }
          else
          {
            LODWORD(v238) = 0;
          }
          if ((_DWORD)v237 != (_DWORD)v238)
            break;
LABEL_413:
          re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v235 + 24);
          re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v235 + 344);
          *(_BYTE *)(v235 + 144) = 1;
          v258 = (id)(v235 + 8);
          v231 = v688;
          re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::remove(v688, v235);
          re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::remove(v687, v235);

          if (v684 <= (int)v228 + 1)
            v259 = v228 + 1;
          else
            v259 = v684;
          while (1)
          {
            v232 = (v228 + 1);
            if (v259 - 1 == (_DWORD)v228)
              break;
            LODWORD(v228) = v228 + 1;
            v260 = v232;
            if ((*(_DWORD *)(v234 + 24 * v232 + 8) & 0x80000000) != 0)
              goto LABEL_420;
          }
          v260 = v259;
LABEL_420:
          LODWORD(v228) = v260;
          if (v684 == v260)
            goto LABEL_421;
        }
        v241 = v238;
        while (2)
        {
          v242 = *(_QWORD *)(*(_QWORD *)(v235 + 40) + 24 * v241 + 16);
          v243 = 0x94D049BB133111EBLL
               * ((0xBF58476D1CE4E5B9 * (v242 ^ (v242 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v242 ^ (v242 >> 30))) >> 27));
          v244 = v243 ^ (v243 >> 31);
          if ((_QWORD)v719)
          {
            v245 = v244 % DWORD2(v720);
            v246 = *((_QWORD *)&v719 + 1);
            v247 = *(unsigned int *)(*((_QWORD *)&v719 + 1) + 4 * v245);
            if ((_DWORD)v247 != 0x7FFFFFFF)
            {
              while (*(_QWORD *)(v720 + (v247 << 6) + 16) != v242)
              {
                v247 = *(_DWORD *)(v720 + (v247 << 6) + 8) & 0x7FFFFFFF;
                if ((_DWORD)v247 == 0x7FFFFFFF)
                  goto LABEL_394;
              }
LABEL_405:
              re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(v695, v242);
              if (*(_DWORD *)(v235 + 56) <= (v238 + 1))
                v256 = v238 + 1;
              else
                v256 = *(_DWORD *)(v235 + 56);
              while (1)
              {
                v241 = (v238 + 1);
                if (v256 - 1 == (_DWORD)v238)
                  break;
                LODWORD(v238) = v238 + 1;
                v257 = v241;
                if ((*(_DWORD *)(*(_QWORD *)(v235 + 40) + 24 * v241 + 8) & 0x80000000) != 0)
                  goto LABEL_412;
              }
              v257 = v256;
LABEL_412:
              LODWORD(v238) = v257;
              if ((_DWORD)v237 == v257)
                goto LABEL_413;
              continue;
            }
LABEL_394:
            re::ecs2::CARESortingManager::optionalSortingPlaneFrom((float32x4_t *)out, (const re::ecs2::Entity *)v242, *v689);
            v726 = v734[0];
            v727 = v734[1];
            v248 = v245;
            v249 = *(unsigned int *)(v246 + 4 * v245);
            if ((_DWORD)v249 != 0x7FFFFFFF)
            {
              while (*(_QWORD *)(v720 + (v249 << 6) + 16) != v242)
              {
                v249 = *(_DWORD *)(v720 + (v249 << 6) + 8) & 0x7FFFFFFF;
                if ((_DWORD)v249 == 0x7FFFFFFF)
                  goto LABEL_399;
              }
              goto LABEL_405;
            }
          }
          else
          {
            re::ecs2::CARESortingManager::optionalSortingPlaneFrom((float32x4_t *)out, (const re::ecs2::Entity *)v242, *v689);
            v248 = 0;
            v726 = v734[0];
            v727 = v734[1];
          }
          break;
        }
LABEL_399:
        v250 = DWORD1(v721);
        if (DWORD1(v721) == 0x7FFFFFFF)
        {
          v250 = v721;
          v251 = v721;
          if ((_DWORD)v721 == DWORD2(v720))
          {
            re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity((uint64_t)&v719, 2 * HIDWORD(v720));
            v251 = v721;
            v248 = v244 % DWORD2(v720);
          }
          LODWORD(v721) = v251 + 1;
          v252 = v720;
          v253 = *(_DWORD *)(v720 + (v250 << 6) + 8);
        }
        else
        {
          v252 = v720;
          v253 = *(_DWORD *)(v720 + ((unint64_t)DWORD1(v721) << 6) + 8);
          DWORD1(v721) = v253 & 0x7FFFFFFF;
        }
        v254 = v252 + (v250 << 6);
        *(_DWORD *)(v254 + 8) = v253 | 0x80000000;
        v255 = *((_QWORD *)&v719 + 1);
        *(_DWORD *)(v254 + 8) = *(_DWORD *)(*((_QWORD *)&v719 + 1) + 4 * v248) | 0x80000000;
        *(_QWORD *)v254 = v244;
        *(_QWORD *)(v254 + 16) = v242;
        *(_OWORD *)(v254 + 32) = v726;
        *(_OWORD *)(v254 + 48) = v727;
        *(_DWORD *)(v255 + 4 * v248) = v250;
        ++HIDWORD(v720);
        ++DWORD2(v721);
        goto LABEL_405;
      }
LABEL_421:
      re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear((uint64_t)&v730);
      if (!HIDWORD(v720))
        goto LABEL_556;
      v263 = v721;
      v264 = 0;
      if ((_DWORD)v721)
      {
        v265 = (int *)(v720 + 8);
        while (1)
        {
          v266 = *v265;
          v265 += 16;
          if (v266 < 0)
            break;
          if (v721 == ++v264)
          {
            LODWORD(v264) = v721;
            break;
          }
        }
      }
      if ((_DWORD)v721 != (_DWORD)v264)
      {
        v267 = v264;
        v268 = v677 + 184 * v679;
        v269 = (_QWORD *)(v268 + 120);
        v270 = v720;
        v696 = (unsigned int *)(v268 + 144);
        v690 = (_QWORD *)(v268 + 128);
        v675 = (uint64_t *)(v268 + 136);
        v685 = (_QWORD *)(v268 + 168);
        do
        {
          v271 = (float32x4_t *)(v270 + (v267 << 6));
          v272 = (re::ecs2::Entity *)v271[1].i64[0];
          *(_QWORD *)&v726 = v272;
          if (!*v269
            || (v273 = 0x94D049BB133111EBLL
                     * ((0xBF58476D1CE4E5B9 * ((unint64_t)v272 ^ ((unint64_t)v272 >> 30))) ^ ((0xBF58476D1CE4E5B9 * ((unint64_t)v272 ^ ((unint64_t)v272 >> 30))) >> 27)),
                v274 = *(unsigned int *)(*v690 + 4 * ((v273 ^ (v273 >> 31)) % *v696)),
                (_DWORD)v274 == 0x7FFFFFFF))
          {
LABEL_434:
            v276 = *(unsigned int *)(v688 + 32);
            if ((_DWORD)v276)
            {
              v277 = 0;
              v278 = (int *)(*(_QWORD *)(v688 + 16) + 8);
              while (1)
              {
                v279 = *v278;
                v278 += 6;
                if (v279 < 0)
                  break;
                if (v276 == ++v277)
                {
                  LODWORD(v277) = *(_DWORD *)(v688 + 32);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v277) = 0;
            }
            if ((_DWORD)v276 == (_DWORD)v277)
            {
LABEL_451:
              v290 = re::globalAllocators(v261);
              v291 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v290[2] + 32))(v290[2], 448, 16);
              ArcSharedObject::ArcSharedObject((ArcSharedObject *)v291, 0);
              *v292 = &off_24ED44CE0;
              uuid_generate_random(out);
              *(_QWORD *)(v291 + 16) = (*(_QWORD *)&out[8]
                                      + (*(_QWORD *)out << 6)
                                      + (*(_QWORD *)out >> 2)
                                      - 0x61C8864680B583E9) ^ *(_QWORD *)out;
              *(_OWORD *)(v291 + 24) = 0u;
              *(_OWORD *)(v291 + 40) = 0u;
              *(_DWORD *)(v291 + 56) = 0;
              *(_QWORD *)(v291 + 60) = 0x7FFFFFFFLL;
              *(_OWORD *)(v291 + 168) = 0u;
              *(_DWORD *)(v291 + 184) = 0;
              *(_OWORD *)(v291 + 152) = 0u;
              *(_OWORD *)(v291 + 80) = 0u;
              *(_OWORD *)(v291 + 96) = 0u;
              *(_OWORD *)(v291 + 112) = 0u;
              *(_OWORD *)(v291 + 128) = 0u;
              *(_WORD *)(v291 + 144) = 0;
              *(_QWORD *)(v291 + 188) = 0x7FFFFFFFLL;
              *(_OWORD *)(v291 + 200) = 0u;
              *(_OWORD *)(v291 + 216) = 0u;
              *(_DWORD *)(v291 + 232) = 0;
              *(_QWORD *)(v291 + 236) = 0x7FFFFFFFLL;
              *(_DWORD *)(v291 + 280) = 0;
              *(_OWORD *)(v291 + 248) = 0u;
              *(_OWORD *)(v291 + 264) = 0u;
              *(_QWORD *)(v291 + 284) = 0x7FFFFFFFLL;
              *(_OWORD *)(v291 + 296) = 0u;
              *(_OWORD *)(v291 + 312) = 0u;
              *(_DWORD *)(v291 + 328) = 0;
              *(_QWORD *)(v291 + 332) = 0x7FFFFFFFLL;
              *(_OWORD *)(v291 + 344) = 0u;
              *(_OWORD *)(v291 + 360) = 0u;
              *(_DWORD *)(v291 + 376) = 0;
              *(_QWORD *)(v291 + 380) = 0x7FFFFFFFLL;
              *(_QWORD *)(v291 + 424) = 0;
              *(_QWORD *)(v291 + 400) = 0;
              *(_QWORD *)(v291 + 408) = 0;
              *(_DWORD *)(v291 + 416) = 0;
              *(_QWORD *)(v291 + 392) = 0;
              *(_QWORD *)(v291 + 432) = *v685 + 440;
              *(_QWORD *)out = v291;
              re::ecs2::CAMeshCodirectionalGroup::add((re::ecs2::CAMeshCodirectionalGroup *)v291, v272);
              re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addInternal<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>&>((uint64_t)v269, (uint64_t *)&v726, (uint64_t *)out);
              re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::add(v688, (uint64_t *)out);
              re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::add(v687, (uint64_t *)out);

            }
            else
            {
              v280 = v271 + 2;
              v281 = v277;
              v282 = *(_QWORD *)(v688 + 16);
              v283 = *v280;
              while (1)
              {
                v284 = v282 + 24 * v281;
                v286 = *(float32x4_t **)(v284 + 16);
                v285 = (uint64_t *)(v284 + 16);
                v261 = (re *)v286;
                v287 = vmulq_f32(v283, v286[7]);
                if ((float)(1.0
                           - vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v287, 2), vaddq_f32(v287, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v287.f32, 1))).f32[0]) <= *(float *)&dword_25410619C)break;
                if (v276 <= (int)v277 + 1)
                  v288 = v277 + 1;
                else
                  v288 = *(_DWORD *)(v688 + 32);
                while (1)
                {
                  v281 = (v277 + 1);
                  if (v288 - 1 == (_DWORD)v277)
                    break;
                  LODWORD(v277) = v277 + 1;
                  v289 = v281;
                  if ((*(_DWORD *)(v282 + 24 * v281 + 8) & 0x80000000) != 0)
                    goto LABEL_450;
                }
                v289 = v288;
LABEL_450:
                LODWORD(v277) = v289;
                if ((_DWORD)v276 == v289)
                  goto LABEL_451;
              }
              re::ecs2::CAMeshCodirectionalGroup::add(v261, v272);
              re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addInternal<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>&>((uint64_t)v269, (uint64_t *)&v726, v285);
              v261 = (re *)re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::add(v687, v285);
            }
          }
          else
          {
            v275 = *v675;
            while (*(re::ecs2::Entity **)(v275 + 32 * v274 + 16) != v272)
            {
              v274 = *(_DWORD *)(v275 + 32 * v274 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v274 == 0x7FFFFFFF)
                goto LABEL_434;
            }
          }
          if (v263 <= (int)v264 + 1)
            v295 = v264 + 1;
          else
            v295 = v263;
          while (1)
          {
            v267 = (v264 + 1);
            if (v295 - 1 == (_DWORD)v264)
              break;
            LODWORD(v264) = v264 + 1;
            v296 = v267;
            if ((*(_DWORD *)(v270 + (v267 << 6) + 8) & 0x80000000) != 0)
              goto LABEL_460;
          }
          v296 = v295;
LABEL_460:
          LODWORD(v264) = v296;
        }
        while (v263 != v296);
      }
      v231 = v688;
      re::ecs2::WorldSortingState::recomputeCodirectionalGroupAverages((re::ecs2::WorldSortingState *)v688, v262);
      v297 = *(unsigned int *)(v688 + 28);
      if (v297 <= 1)
        goto LABEL_556;
      *(_QWORD *)&v727 = 0;
      DWORD2(v727) = 0;
      v728 = 0;
      v726 = (unint64_t)v681;
      v298 = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(&v726, v297);
      v299 = ++DWORD2(v727);
      v300 = *(unsigned int *)(v688 + 32);
      if ((_DWORD)v300)
      {
        v301 = 0;
        v302 = (int *)(*(_QWORD *)(v688 + 16) + 8);
        while (1)
        {
          v303 = *v302;
          v302 += 6;
          if (v303 < 0)
            break;
          if (v300 == ++v301)
          {
            LODWORD(v301) = *(_DWORD *)(v688 + 32);
            break;
          }
        }
      }
      else
      {
        LODWORD(v301) = 0;
      }
      if ((_DWORD)v300 == (_DWORD)v301)
      {
        v146 = v727;
        v686 = v728;
      }
      else
      {
        v304 = v301;
        v146 = v727;
        do
        {
          v305 = *(_QWORD *)(v231 + 16);
          if (v146 >= *((_QWORD *)&v726 + 1))
          {
            if (*((_QWORD *)&v726 + 1) < v146 + 1)
            {
              if ((_QWORD)v726)
              {
                v306 = 8;
                if (*((_QWORD *)&v726 + 1))
                  v306 = 2 * *((_QWORD *)&v726 + 1);
                if (v306 <= v146 + 1)
                  v307 = v146 + 1;
                else
                  v307 = v306;
                v298 = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(&v726, v307);
              }
              else
              {
                v298 = (_anonymous_namespace_ *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(&v726, v146 + 1);
                ++DWORD2(v727);
              }
            }
            v146 = v727;
          }
          v308 = *(_QWORD *)(v305 + 24 * v304 + 16);
          v686 = v728;
          *(_QWORD *)(v728 + 8 * v146) = v308;
          if (v308)
            v298 = (_anonymous_namespace_ *)(id)(v308 + 8);
          *(_QWORD *)&v727 = ++v146;
          v299 = ++DWORD2(v727);
          v231 = v688;
          v309 = *(_DWORD *)(v688 + 32);
          if (v309 <= (int)v301 + 1)
            v309 = v301 + 1;
          while (1)
          {
            v304 = (v301 + 1);
            if (v309 - 1 == (_DWORD)v301)
              break;
            LODWORD(v301) = v301 + 1;
            v310 = v304;
            if ((*(_DWORD *)(*(_QWORD *)(v688 + 16) + 24 * v304 + 8) & 0x80000000) != 0)
              goto LABEL_490;
          }
          v310 = v309;
LABEL_490:
          LODWORD(v301) = v310;
        }
        while ((_DWORD)v300 != v310);
      }
      if (v146 < 2)
        goto LABEL_546;
      v697 = v299;
      v311 = 0;
      v312 = v686;
      v691 = v686 - 8;
      v313 = 1;
      while (1)
      {
        if (v146 <= v311)
        {
          v729 = 0;
          v735 = 0u;
          v736 = 0u;
          memset(v734, 0, sizeof(v734));
          *(_OWORD *)out = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v738 = 136315906;
          *(_QWORD *)&v738[4] = "operator[]";
          v739 = 1024;
          v740 = 789;
          v741 = 2048;
          v742 = v311;
          v743 = 2048;
          v744 = v146;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
          goto LABEL_805;
        }
        v676 = v311;
        v314 = *(float32x4_t **)(v312 + 8 * v311);
        v725 = v314;
        if (v314)
          v315 = &v314->u32[2];
        v316 = v146;
        do
        {
          if (v146 <= --v316)
          {
            v729 = 0;
            v735 = 0u;
            v736 = 0u;
            memset(v734, 0, sizeof(v734));
            *(_OWORD *)out = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v738 = 136315906;
            *(_QWORD *)&v738[4] = "operator[]";
            v739 = 1024;
            v740 = 789;
            v741 = 2048;
            v742 = v316;
            v743 = 2048;
            v744 = v146;
            _os_log_send_and_compose_impl();
            v97 = (re *)_os_crash_msg();
            __break(1u);
            goto LABEL_796;
          }
          v317 = *(float32x4_t **)(v312 + 8 * v316);
          if (v317)
            v318 = &v317->u32[2];
          v319 = vmulq_f32(v314[7], v317[7]);
          if ((float)(1.0
                     - vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v319, 2), vaddq_f32(v319, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v319.f32, 1))).f32[0]) <= *(float *)&dword_25410619C)
          {
            v320 = v317[3].u32[2];
            if ((_DWORD)v320)
            {
              v321 = 0;
              v322 = (int *)(v317[2].i64[1] + 8);
              while (1)
              {
                v323 = *v322;
                v322 += 6;
                if (v323 < 0)
                  break;
                if (v320 == ++v321)
                {
                  LODWORD(v321) = v317[3].i32[2];
                  break;
                }
              }
            }
            else
            {
              LODWORD(v321) = 0;
            }
            v324 = v317[3].u32[2];
            if ((_DWORD)v320 != (_DWORD)v321)
            {
              v325 = v321;
              do
              {
                *(_QWORD *)out = *(_QWORD *)(v317[2].i64[1] + 24 * v325 + 16);
                re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addInternal<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>&>(v677 + 184 * v679 + 120, (uint64_t *)out, (uint64_t *)&v725);
                v324 = v317[3].u32[2];
                if (v324 <= (int)v321 + 1)
                  v326 = v321 + 1;
                else
                  v326 = v317[3].i32[2];
                v327 = v321;
                while (1)
                {
                  v325 = (v327 + 1);
                  if (v326 - 1 == v327)
                    break;
                  ++v327;
                  LODWORD(v321) = v325;
                  if ((*(_DWORD *)(v317[2].i64[1] + 24 * v325 + 8) & 0x80000000) != 0)
                    goto LABEL_517;
                }
                LODWORD(v321) = v326;
LABEL_517:
                ;
              }
              while ((_DWORD)v320 != (_DWORD)v321);
            }
            v328 = 0;
            if (v324)
            {
              v329 = (int *)(v317[2].i64[1] + 8);
              v231 = v688;
              while (1)
              {
                v330 = *v329;
                v329 += 6;
                if (v330 < 0)
                  break;
                if (v324 == ++v328)
                {
                  LODWORD(v328) = v324;
                  break;
                }
              }
            }
            else
            {
              v231 = v688;
            }
            if (v324 != (_DWORD)v328)
            {
              v331 = v328;
              v332 = v317[2].i64[1];
              do
              {
                re::ecs2::CAMeshCodirectionalGroup::add((re::ecs2::CAMeshCodirectionalGroup *)v314, *(re::ecs2::Entity **)(v332 + 24 * v331 + 16));
                v332 = v317[2].i64[1];
                if (v317[3].i32[2] <= (v328 + 1))
                  v333 = v328 + 1;
                else
                  v333 = v317[3].i32[2];
                v334 = v328;
                while (1)
                {
                  v331 = (v334 + 1);
                  if (v333 - 1 == v334)
                    break;
                  ++v334;
                  LODWORD(v328) = v331;
                  if ((*(_DWORD *)(v332 + 24 * v331 + 8) & 0x80000000) != 0)
                    goto LABEL_534;
                }
                LODWORD(v328) = v333;
LABEL_534:
                ;
              }
              while (v324 != (_DWORD)v328);
            }
            re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear((uint64_t)&v317[1].i64[1]);
            re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear((uint64_t)&v317[21].i64[1]);
            v317[9].i8[0] = 1;
            if (v146 - 1 <= v316)
            {
              v335 = *(_QWORD *)(v691 + 8 * v146);
              if (v335)
                goto LABEL_539;
            }
            else
            {
              v335 = *(_QWORD *)(v686 + 8 * v316);
              *(_QWORD *)(v686 + 8 * v316) = *(_QWORD *)(v691 + 8 * v146);
              *(_QWORD *)(v691 + 8 * v146) = v335;
              if (!v335)
                goto LABEL_540;
LABEL_539:

              *(_QWORD *)(v691 + 8 * v146) = 0;
            }
LABEL_540:
            ++v697;
            v336 = &v317->u32[2];
            re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::remove(v231, (unint64_t)v317);
            re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::remove(v687, (unint64_t)v317);

            re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::add(v687, (uint64_t *)&v725);
            --v146;
            v312 = v686;
          }

        }
        while (v313 < v316);
        if (v314[9].i8[0])
        {
          re::ecs2::CAMeshCodirectionalGroup::recomputeAverages((re::ecs2::CAMeshCodirectionalGroup *)v314, v337);
          v313 = v676;
        }
        v311 = v313;

        if (++v313 >= v146)
        {
          v686 = v728;
          v299 = v697;
LABEL_546:
          *(_QWORD *)&v727 = 0;
          if (v146)
          {
            v338 = 8 * v146;
            v339 = v686;
            do
            {
              if (*(_QWORD *)v339)
              {

                *(_QWORD *)v339 = 0;
              }
              v339 += 8;
              v338 -= 8;
            }
            while (v338);
          }
          DWORD2(v727) = v299 + 1;
          if ((_QWORD)v726)
            v340 = v686 == 0;
          else
            v340 = 1;
          if (!v340)
            (*(void (**)(void))(*(_QWORD *)v726 + 40))();
LABEL_556:
          re::ecs2::WorldSortingState::recomputeCodirectionalGroupAverages((re::ecs2::WorldSortingState *)v231, v262);
          v341 = v677 + 184 * v679;
          v344 = *(_DWORD *)(v341 + 104);
          v343 = (unsigned int *)(v341 + 104);
          v342 = v344;
          if (v344)
          {
            v345 = 0;
            v346 = (int *)(*(_QWORD *)(v677 + 184 * v679 + 88) + 8);
            while (1)
            {
              v347 = *v346;
              v346 += 6;
              if (v347 < 0)
                break;
              if (v342 == ++v345)
              {
                LODWORD(v345) = v342;
                break;
              }
            }
          }
          else
          {
            LODWORD(v345) = 0;
          }
          if ((_DWORD)v342 != (_DWORD)v345)
          {
            v348 = v345;
            v349 = (_QWORD *)(v677 + 184 * v679 + 88);
            do
            {
              v350 = *(_QWORD *)(*v349 + 24 * v348 + 16);
              if (v350)
              {
                v351 = (id)(v350 + 8);
                re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder((re::ecs2::CAMeshCodirectionalGroup *)v350);

              }
              else
              {
                re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(0);
              }
              if (*v343 <= (int)v345 + 1)
                v352 = v345 + 1;
              else
                v352 = *v343;
              while (1)
              {
                v348 = (v345 + 1);
                if (v352 - 1 == (_DWORD)v345)
                  break;
                LODWORD(v345) = v345 + 1;
                v353 = v348;
                if ((*(_DWORD *)(*v349 + 24 * v348 + 8) & 0x80000000) != 0)
                  goto LABEL_574;
              }
              v353 = v352;
LABEL_574:
              LODWORD(v345) = v353;
            }
            while ((_DWORD)v342 != v353);
          }
          re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)&v730);
          re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)&v719);
          v698 = v343;
          if (*(_DWORD *)(v677 + 184 * v679 + 100))
          {
            v356 = (8 * *(_DWORD *)(v231 + 28)) | 1u;
            *(_QWORD *)&out[8] = 0;
            *(_QWORD *)&v734[0] = 0;
            DWORD2(v734[0]) = 0;
            *(_QWORD *)&v734[1] = 0;
            *(_QWORD *)out = v681;
            re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(out, v356);
            ++DWORD2(v734[0]);
            v731.i64[0] = 0;
            v731.i32[2] = 0;
            *(_QWORD *)&v732 = 0;
            v730 = (unint64_t)v681;
            re::DynamicArray<float *>::setCapacity(&v730, 0x40uLL);
            ++v731.i32[2];
            v357 = *v343;
            if ((_DWORD)v357)
            {
              v358 = 0;
              v359 = (int *)(*(_QWORD *)(v677 + 184 * v679 + 88) + 8);
              while (1)
              {
                v360 = *v359;
                v359 += 6;
                if (v360 < 0)
                  break;
                if (v357 == ++v358)
                {
                  LODWORD(v358) = *v343;
                  break;
                }
              }
            }
            else
            {
              LODWORD(v358) = 0;
            }
            if ((_DWORD)v357 != (_DWORD)v358)
            {
              v362 = v358;
              v363 = (_QWORD *)(v677 + 184 * v679 + 88);
              do
              {
                v364 = *(_QWORD *)(*v363 + 24 * v362 + 16);
                if (v364)
                {
                  v365 = (id)(v364 + 8);
                  re::ecs2::CAMeshCodirectionalGroup::updateSortGroups(v364, v681, (uint64_t)out, (uint64_t)&v730);

                }
                else
                {
                  re::ecs2::CAMeshCodirectionalGroup::updateSortGroups(0, v681, (uint64_t)out, (uint64_t)&v730);
                }
                if (*v343 <= (int)v358 + 1)
                  v366 = v358 + 1;
                else
                  v366 = *v343;
                while (1)
                {
                  v362 = (v358 + 1);
                  if (v366 - 1 == (_DWORD)v358)
                    break;
                  LODWORD(v358) = v358 + 1;
                  v367 = v362;
                  if ((*(_DWORD *)(*v363 + 24 * v362 + 8) & 0x80000000) != 0)
                    goto LABEL_595;
                }
                v367 = v366;
LABEL_595:
                LODWORD(v358) = v367;
              }
              while ((_DWORD)v357 != v367);
            }
            *(_QWORD *)&v721 = 0;
            *(_QWORD *)&v720 = 0;
            v719 = 0uLL;
            DWORD2(v720) = 0;
            if (*(_QWORD *)out)
            {
              v368 = *(_QWORD *)&v734[0];
              *(_QWORD *)&v719 = *(_QWORD *)out;
              re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(&v719, *(unint64_t *)&v734[0]);
              ++DWORD2(v720);
              v369 = v720;
              if (v368 >= (unint64_t)v720)
              {
                re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(&v719, v368);
                v373 = v720;
                v374 = v721;
                v375 = (uint64_t *)(*(_QWORD *)&v734[1] + 8 * v720);
                std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::internal::AssetReference> *,re::SharedPtr<re::internal::AssetReference> *,re::SharedPtr<re::internal::AssetReference> *,0>(*(uint64_t **)&v734[1], v375, (uint64_t *)v721);
                if (v373 != v368)
                {
                  v376 = (uint64_t *)(v374 + 8 * v373);
                  v377 = 8 * v368 - 8 * v373;
                  do
                  {
                    v378 = *v375;
                    *v376 = *v375;
                    if (v378)
                      v379 = (id)(v378 + 8);
                    ++v375;
                    ++v376;
                    v377 -= 8;
                  }
                  while (v377);
                }
              }
              else
              {
                v370 = v721;
                std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,re::SharedPtr<re::internal::AssetReference> *,re::SharedPtr<re::internal::AssetReference> *,re::SharedPtr<re::internal::AssetReference> *,0>(*(uint64_t **)&v734[1], (uint64_t *)(*(_QWORD *)&v734[1] + 8 * v368), (uint64_t *)v721);
                v371 = v370 + 8 * v368;
                v372 = 8 * v369 - 8 * v368;
                do
                {
                  if (*(_QWORD *)v371)
                  {

                    *(_QWORD *)v371 = 0;
                  }
                  v371 += 8;
                  v372 -= 8;
                }
                while (v372);
              }
              *(_QWORD *)&v720 = v368;
            }
            re::DynamicArray<char const*>::DynamicArray((uint64_t)&v721 + 8, (uint64_t *)&v730);
            if ((_QWORD)v730 && (_QWORD)v732)
              (*(void (**)(void))(*(_QWORD *)v730 + 40))();
            re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)out);
            if (*((_QWORD *)&v722 + 1))
            {
              v380 = v724;
              v381 = 8 * *((_QWORD *)&v722 + 1);
              while (1)
              {
                v382 = *v380;
                v383 = (const re::ecs2::Entity *)((char *)*v380 + 32);
                v384 = re::ecs2::EntityComponentCollection::get(v383, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                if (v384)
                  break;
LABEL_645:
                ++v380;
                v381 -= 8;
                if (!v381)
                  goto LABEL_649;
              }
              v385 = v384;
              v386 = (_QWORD *)(v384 + 176);
              v387 = *(_QWORD *)(v384 + 176);
              v692 = *(_DWORD *)(v384 + 160);
              LOBYTE(v730) = *(_BYTE *)(v384 + 416);
              v388 = v730;
              if ((_BYTE)v730)
              {
                v389 = *(_OWORD *)(v384 + 448);
                v731 = *(float32x4_t *)(v384 + 432);
                v732 = v389;
              }
              LOBYTE(v734[0]) = 0;
              LOBYTE(v735) = 0;
              v737 = 0;
              *(_QWORD *)out = 0;
              *(_WORD *)&out[8] = 0;
              re::ecs2::MeshSortGroupToken::operator=(v384 + 176, (uint64_t)out);
              *(_DWORD *)(v385 + 160) = 0;
              v390 = *(re::ecs2::SortingTransformCache **)(v677 + 184 * v679 + 176);
              v391 = re::ecs2::EntityComponentCollection::get(v383, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
              if (v391 && *(_BYTE *)(v391 + 96))
              {
                re::ecs2::CARESortingManager::optionalSortingPlaneFrom((float32x4_t *)out, v382, v390);
                v392 = out[0] == 0;
              }
              else
              {
                v392 = 1;
              }
              v393 = *(unsigned __int8 *)(v385 + 416);
              if (*(_BYTE *)(v385 + 416) || !v392)
              {
                if (*(_BYTE *)(v385 + 416))
                  v394 = v392;
                else
                  v394 = 0;
                if (v394)
                {
                  v393 = 0;
                  *(_BYTE *)(v385 + 416) = 0;
                }
                else
                {
                  if (*(_BYTE *)(v385 + 416))
                    v395 = 1;
                  else
                    v395 = v392;
                  if ((v395 & 1) == 0)
                  {
                    v393 = 1;
                    *(_BYTE *)(v385 + 416) = 1;
                  }
                  v361 = (float32x4_t)v734[0];
                  v396 = v734[1];
                  *(_OWORD *)(v385 + 432) = v734[0];
                  *(_OWORD *)(v385 + 448) = v396;
                }
              }
              else
              {
                v393 = 0;
              }
              if (v387 != *v386 || v692 != *(_DWORD *)(v385 + 160))
                goto LABEL_643;
              if (v388)
                v397 = v393 == 0;
              else
                v397 = 1;
              if (v397)
              {
                if (v393 | v388)
                  goto LABEL_643;
              }
              else
              {
                if (re::SortingPlane::operator==(v731.f32, (float *)(v385 + 432)))
                  goto LABEL_644;
LABEL_643:
                re::ecs2::Component::markDirty((_QWORD *)v385);
              }
LABEL_644:
              v343 = v698;
              goto LABEL_645;
            }
          }
          else
          {
            v719 = 0uLL;
            DWORD2(v720) = 0;
            *(_QWORD *)&v720 = 0;
            v724 = 0;
            v361 = 0uLL;
            v721 = 0u;
            v722 = 0u;
            v723 = 0;
          }
LABEL_649:
          if ((_QWORD)v720)
          {
            v399 = (__n128 **)v721;
            v400 = 8 * v720;
            do
            {
              v401 = *v399;
              if (*v399)
              {
                v402 = &v401->n128_i8[8];
                re::ecs2::CAMeshSortGroup::updateMeshSortingComponents(v401, v403, v404);

              }
              else
              {
                re::ecs2::CAMeshSortGroup::updateMeshSortingComponents(0, v354, v355);
              }
              ++v399;
              v400 -= 8;
            }
            while (v400);
          }
          v405 = *v343;
          if ((_DWORD)v405)
          {
            v406 = 0;
            v408 = v677;
            v407 = v679;
            v409 = (int *)(*(_QWORD *)(v677 + 184 * v679 + 88) + 8);
            while (1)
            {
              v410 = *v409;
              v409 += 6;
              if (v410 < 0)
                break;
              if (v405 == ++v406)
              {
                LODWORD(v406) = *v343;
                break;
              }
            }
          }
          else
          {
            LODWORD(v406) = 0;
            v408 = v677;
            v407 = v679;
          }
          if ((_DWORD)v405 == (_DWORD)v406)
          {
LABEL_662:
            re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear(v687);
            if (*((_QWORD *)&v721 + 1))
            {
              if (v724)
                (*(void (**)(void))(**((_QWORD **)&v721 + 1) + 40))();
              v724 = 0;
              v722 = 0uLL;
              *((_QWORD *)&v721 + 1) = 0;
              ++v723;
            }
            re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)&v719);
            v97 = *(re **)&v707.f64[0];
            if (*(_QWORD *)&v707.f64[0] && v710)
              v97 = (re *)(*(uint64_t (**)(void))(**(_QWORD **)&v707.f64[0] + 40))();
            v98 = a1;
            v411 = *(_DWORD *)(a1 + 88);
            v412 = v674;
            if (v411 <= v674 + 1)
              v411 = v674 + 1;
            while (1)
            {
              v155 = (v412 + 1);
              if (v411 - 1 == v412)
                break;
              ++v412;
              v413 = v155;
              if ((*(_DWORD *)(*(_QWORD *)(a1 + 72) + 184 * v155 + 8) & 0x80000000) != 0)
                goto LABEL_675;
            }
            v413 = v411;
LABEL_675:
            LODWORD(v141) = v413;
            if (v673 == v413)
              goto LABEL_253;
            goto LABEL_269;
          }
          v414 = v406;
          v415 = (_QWORD *)(v408 + 184 * v407 + 88);
          v693 = *v343;
          while (2)
          {
            v416 = *(_QWORD *)(*v415 + 24 * v414 + 16);
            if (v416)
              v417 = (id)(v416 + 8);
            if (*(_BYTE *)(v416 + 144))
              v361 = re::ecs2::CAMeshCodirectionalGroup::recomputeAverages((re::ecs2::CAMeshCodirectionalGroup *)v416, v361);
            if (*(_BYTE *)(v416 + 145))
            {
              v418 = *(unsigned int *)(v416 + 232);
              if ((_DWORD)v418)
              {
                v419 = 0;
                v420 = (int *)(*(_QWORD *)(v416 + 216) + 8);
                while (1)
                {
                  v421 = *v420;
                  v420 += 6;
                  if (v421 < 0)
                    break;
                  if (v418 == ++v419)
                  {
                    LODWORD(v419) = *(_DWORD *)(v416 + 232);
                    break;
                  }
                }
              }
              else
              {
                LODWORD(v419) = 0;
              }
              if ((_DWORD)v418 != (_DWORD)v419)
              {
                v422 = v419;
                do
                {
                  re::ecs2::CAMeshSortGroup::updateGroupToken(*(float32x4_t **)(*(_QWORD *)(v416 + 216) + 24 * v422 + 16));
                  if (*(_DWORD *)(v416 + 232) <= (v419 + 1))
                    v423 = v419 + 1;
                  else
                    v423 = *(_DWORD *)(v416 + 232);
                  v424 = v419;
                  while (1)
                  {
                    v422 = (v424 + 1);
                    if (v423 - 1 == v424)
                      break;
                    ++v424;
                    LODWORD(v419) = v422;
                    if ((*(_DWORD *)(*(_QWORD *)(v416 + 216) + 24 * v422 + 8) & 0x80000000) != 0)
                      goto LABEL_699;
                  }
                  LODWORD(v419) = v423;
LABEL_699:
                  ;
                }
                while ((_DWORD)v418 != (_DWORD)v419);
              }
              v425 = *(unsigned int *)(v416 + 56);
              if ((_DWORD)v425)
              {
                v426 = 0;
                v427 = (int *)(*(_QWORD *)(v416 + 40) + 8);
                while (1)
                {
                  v428 = *v427;
                  v427 += 6;
                  if (v428 < 0)
                    break;
                  if (v425 == ++v426)
                  {
                    LODWORD(v426) = *(_DWORD *)(v416 + 56);
                    break;
                  }
                }
              }
              else
              {
                LODWORD(v426) = 0;
              }
              if ((_DWORD)v425 == (_DWORD)v426)
              {
LABEL_707:
                *(_BYTE *)(v416 + 145) = 0;
                v343 = v698;
                LODWORD(v405) = v693;
                goto LABEL_708;
              }
              v438 = v426;
              while (2)
              {
                v439 = *(_QWORD *)(*(_QWORD *)(v416 + 40) + 24 * v438 + 16);
                LOBYTE(v726) = 0;
                v441 = *((float *)v440 + 76);
                v442 = *((float *)v440 + 77);
                v443 = *((float *)v440 + 78);
                re::ecs2::CARESortingManager::optionalSortingPlaneFrom((float32x4_t *)out, (const re::ecs2::Entity *)v439, *(re::ecs2::SortingTransformCache **)(v416 + 432));
                v445 = *(float32x4_t *)(v416 + 112);
                v444 = *(float32x4_t *)(v416 + 128);
                v446 = vmulq_f32(v445, vsubq_f32((float32x4_t)v734[1], v444));
                *((float32x4_t *)v440 + 19) = vaddq_f32(v444, vmulq_n_f32(v445, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v446, 2), vaddq_f32(v446, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v446.f32, 1))).f32[0]));
                ++re::ecs2::CARESortingDebugging::m_entitiesRecalculatedOverrides;
                out[0] = *((_BYTE *)v440 + 416);
                v447 = out[0];
                if (out[0])
                {
                  v448 = *((_OWORD *)v440 + 28);
                  v734[0] = *((_OWORD *)v440 + 27);
                  v734[1] = v448;
                }
                v449 = *(re::ecs2::SortingTransformCache **)(v416 + 432);
                v450 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v439 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                if (v450 && *(_BYTE *)(v450 + 96))
                {
                  re::ecs2::CARESortingManager::optionalSortingPlaneFrom((float32x4_t *)&v730, (const re::ecs2::Entity *)v439, v449);
                  v451 = v730;
                }
                else
                {
                  v451 = 0;
                }
                v452 = *((unsigned __int8 *)v440 + 416);
                if (v452 | v451)
                {
                  if (*((_BYTE *)v440 + 416))
                    v453 = v451 == 0;
                  else
                    v453 = 0;
                  if (v453)
                  {
                    v452 = 0;
                    *((_BYTE *)v440 + 416) = 0;
                  }
                  else
                  {
                    if (*((_BYTE *)v440 + 416))
                      v454 = 1;
                    else
                      v454 = v451 == 0;
                    if (!v454)
                    {
                      v452 = 1;
                      *((_BYTE *)v440 + 416) = 1;
                    }
                    v361 = v731;
                    v455 = v732;
                    *((float32x4_t *)v440 + 27) = v731;
                    *((_OWORD *)v440 + 28) = v455;
                  }
                }
                else
                {
                  v452 = 0;
                }
                v456 = *((float *)v440 + 76);
                if (v441 != v456
                  && vabds_f32(v441, v456) >= (float)((float)((float)(fabsf(v441) + fabsf(v456)) + 1.0) * 0.00001))
                {
                  goto LABEL_770;
                }
                v457 = *((float *)v440 + 77);
                if (v442 != v457
                  && vabds_f32(v442, v457) >= (float)((float)((float)(fabsf(v442) + fabsf(v457)) + 1.0) * 0.00001))
                {
                  goto LABEL_770;
                }
                v361.i32[0] = *((_DWORD *)v440 + 78);
                if (v443 != v361.f32[0])
                {
                  v458 = (float)((float)(fabsf(v443) + fabsf(v361.f32[0])) + 1.0) * 0.00001;
                  v361.f32[0] = vabds_f32(v443, v361.f32[0]);
                  if (v361.f32[0] >= v458)
                    goto LABEL_770;
                }
                if ((_BYTE)v726)
                  goto LABEL_770;
                if (v447)
                  v459 = v452 == 0;
                else
                  v459 = 1;
                if (v459)
                {
                  if (v452 | v447)
                    goto LABEL_770;
                }
                else
                {
                  if (re::SortingPlane::operator==((float *)v734, (float *)v440 + 108))
                    goto LABEL_771;
LABEL_770:
                  re::ecs2::Component::markDirty(v440);
                  ++re::ecs2::CARESortingDebugging::m_entitiesRecalculatedOverridesMeshSortingComponentDirtied;
                }
LABEL_771:
                if (*(_DWORD *)(v416 + 56) <= (v426 + 1))
                  v460 = v426 + 1;
                else
                  v460 = *(_DWORD *)(v416 + 56);
                while (1)
                {
                  v438 = (v426 + 1);
                  if (v460 - 1 == (_DWORD)v426)
                    break;
                  LODWORD(v426) = v426 + 1;
                  v461 = v438;
                  if ((*(_DWORD *)(*(_QWORD *)(v416 + 40) + 24 * v438 + 8) & 0x80000000) != 0)
                    goto LABEL_778;
                }
                v461 = v460;
LABEL_778:
                LODWORD(v426) = v461;
                if ((_DWORD)v425 == v461)
                  goto LABEL_707;
                continue;
              }
            }
LABEL_708:
            v429 = *(unsigned int *)(v416 + 232);
            if ((_DWORD)v429)
            {
              v430 = 0;
              v431 = (int *)(*(_QWORD *)(v416 + 216) + 8);
              while (1)
              {
                v432 = *v431;
                v431 += 6;
                if (v432 < 0)
                  break;
                if (v429 == ++v430)
                {
                  LODWORD(v430) = *(_DWORD *)(v416 + 232);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v430) = 0;
            }
            if ((_DWORD)v429 == (_DWORD)v430)
            {
              if (!v416)
              {
LABEL_728:
                if (*v343 <= (int)v406 + 1)
                  v436 = v406 + 1;
                else
                  v436 = *v343;
                while (1)
                {
                  v414 = (v406 + 1);
                  if (v436 - 1 == (_DWORD)v406)
                    break;
                  LODWORD(v406) = v406 + 1;
                  v437 = v414;
                  if ((*(_DWORD *)(*v415 + 24 * v414 + 8) & 0x80000000) != 0)
                    goto LABEL_735;
                }
                v437 = v436;
LABEL_735:
                LODWORD(v406) = v437;
                if ((_DWORD)v405 == v437)
                  goto LABEL_662;
                continue;
              }
            }
            else
            {
              v433 = v430;
              do
              {
                re::ecs2::CAMeshSortGroup::updateMeshSortingComponents(*(__n128 **)(*(_QWORD *)(v416 + 216) + 24 * v433 + 16), v354, v355);
                if (*(_DWORD *)(v416 + 232) <= (v430 + 1))
                  v434 = v430 + 1;
                else
                  v434 = *(_DWORD *)(v416 + 232);
                v435 = v430;
                while (1)
                {
                  v433 = (v435 + 1);
                  if (v434 - 1 == v435)
                    break;
                  ++v435;
                  LODWORD(v430) = v433;
                  if ((*(_DWORD *)(*(_QWORD *)(v416 + 216) + 24 * v433 + 8) & 0x80000000) != 0)
                    goto LABEL_726;
                }
                LODWORD(v430) = v434;
LABEL_726:
                ;
              }
              while ((_DWORD)v429 != (_DWORD)v430);
            }
            break;
          }

          goto LABEL_728;
        }
      }
    }
    v223 = v183;
    while (1)
    {
      v224 = *(_QWORD *)(*(_QWORD *)(v178 + 16) + 24 * v223 + 16);
      *(_QWORD *)out = v224;
      if (v224)
      {
        v225 = (id)(v224 + 8);
        if (!*(_DWORD *)(v224 + 52))
          re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::add((uint64_t)&v730, (uint64_t *)out);
      }
      else if (!MEMORY[0x34])
      {
        re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::add((uint64_t)&v730, (uint64_t *)out);
        goto LABEL_361;
      }

LABEL_361:
      if (*(_DWORD *)(v178 + 32) <= (v183 + 1))
        v226 = v183 + 1;
      else
        v226 = *(_DWORD *)(v178 + 32);
      while (1)
      {
        v223 = (v183 + 1);
        if (v226 - 1 == (_DWORD)v183)
          break;
        LODWORD(v183) = v183 + 1;
        v227 = v223;
        if ((*(_DWORD *)(*(_QWORD *)(v178 + 16) + 24 * v223 + 8) & 0x80000000) != 0)
          goto LABEL_368;
      }
      v227 = v226;
LABEL_368:
      LODWORD(v183) = v227;
      if ((_DWORD)v182 == v227)
        goto LABEL_307;
    }
  }
}

uint64_t re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 184 * v3 + 16) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 184 * v3 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v5 + 184 * v3 + 16) == a2)
        return v5 + 184 * v3 + 24;
    }
    return 0;
  }
  return v5 + 184 * v3 + 24;
}

void re::ecs2::WorldSortingState::removeEntityFromTracking(re::ecs2::WorldSortingState *this, re::ecs2::Entity *a2)
{
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  id v7;
  _anonymous_namespace_ *v8;
  re::ecs2::MeshSortingComponent *v9;
  uint64_t v10;

  v4 = (char *)this + 96;
  v5 = (uint64_t *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 96, (unint64_t)a2);
  if (v5)
  {
    v6 = *v5;
    v10 = v6;
    if (v6)
    {
      v7 = (id)(v6 + 8);
      re::ecs2::CAMeshCodirectionalGroup::remove((re::ecs2::CAMeshCodirectionalGroup *)v6, a2);
      re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove((uint64_t)v4, (unint64_t)a2);
      re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::add((uint64_t)this + 48, &v10);

    }
    else
    {
      re::ecs2::CAMeshCodirectionalGroup::remove(0, a2);
      re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove((uint64_t)v4, (unint64_t)a2);
      re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::add((uint64_t)this + 48, &v10);
    }
  }
  v8 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
}

void `anonymous namespace'::cleanSortingComponentIfCAREManaged(_anonymous_namespace_ *this, re::ecs2::MeshSortingComponent *a2)
{
  uint64_t v2;

  if (this)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
    {
      if (*((_BYTE *)this + 25) == 5)
        re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    }
  }
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 32 * v3 + 16) != a2)
  {
    while (1)
    {
      v3 = *(_DWORD *)(v5 + 32 * v3 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v5 + 32 * v3 + 16) == a2)
        return v5 + 32 * v3 + 24;
    }
    return 0;
  }
  return v5 + 32 * v3 + 24;
}

void re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;

  if (*(_QWORD *)a1)
  {
    v3 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    v4 = (v3 ^ (v3 >> 31)) % *(unsigned int *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(unsigned int *)(v5 + 4 * v4);
    if ((_DWORD)v6 != 0x7FFFFFFF)
    {
      v7 = *(_QWORD *)(a1 + 16);
      v8 = v7 + 32 * v6;
      if (*(_QWORD *)(v8 + 16) == a2)
      {
        *(_DWORD *)(v5 + 4 * v4) = *(_DWORD *)(v8 + 8) & 0x7FFFFFFF;
LABEL_8:
        v12 = *(_QWORD *)(a1 + 16) + 32 * v6;
        v13 = *(_DWORD *)(v12 + 8);
        if (v13 < 0)
        {
          *(_DWORD *)(v12 + 8) = v13 & 0x7FFFFFFF;
          v16 = *(_QWORD *)(v12 + 24);
          v15 = (_QWORD *)(v12 + 24);
          v14 = v16;
          if (v16)
          {

            *v15 = 0;
          }
        }
        v17 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v6 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v6 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
        --*(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 36) = v6;
        *(_DWORD *)(a1 + 40) = v17 + 1;
      }
      else
      {
        while (1)
        {
          v9 = v6;
          v10 = *(_DWORD *)(v7 + 32 * v6 + 8);
          v6 = v10 & 0x7FFFFFFF;
          if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF)
            break;
          v11 = v7 + 32 * v6;
          if (*(_QWORD *)(v11 + 16) == a2)
          {
            *(_DWORD *)(v7 + 32 * v9 + 8) = *(_DWORD *)(v7 + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(v11 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
}

uint64_t re::ecs2::CAMeshCodirectionalGroup::remove(re::ecs2::CAMeshCodirectionalGroup *this, re::ecs2::Entity *a2)
{
  int v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  re::ecs2::Entity *v9;

  v9 = a2;
  v3 = *((_DWORD *)this + 16);
  result = re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 24, (uint64_t *)&v9);
  if (*((_DWORD *)this + 16) != v3)
  {
    re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 344, (uint64_t *)&v9);
    *((_BYTE *)this + 144) = 1;
    v5 = (uint64_t *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 152, (unint64_t)v9);
    if (v5)
    {
      v6 = *v5;
      v8 = v6;
      if (v6)
      {
        v7 = (id)(v6 + 8);
        re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::add((uint64_t)this + 296, &v8);
        re::ecs2::CAMeshSortGroup::remove((re::ecs2::CAMeshSortGroup *)v6, v9);
        re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove((uint64_t)this + 152, (unint64_t)v9);

      }
      else
      {
        re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::add((uint64_t)this + 296, &v8);
        re::ecs2::CAMeshSortGroup::remove(0, v9);
        re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove((uint64_t)this + 152, (unint64_t)v9);
      }
    }
    return re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 248, (uint64_t *)&v9);
  }
  return result;
}

uint64_t re::ecs2::CAMeshCodirectionalGroup::add(re::ecs2::CAMeshCodirectionalGroup *this, re::ecs2::Entity *a2)
{
  int v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  re::ecs2::Entity *v7;
  float32x4_t v8;
  __int128 v9;
  __int128 v10;

  v7 = a2;
  v3 = *((_DWORD *)this + 16);
  result = re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add((uint64_t)this + 24, (uint64_t *)&v7);
  if (*((_DWORD *)this + 16) != v3)
  {
    v8.i64[0] = (uint64_t)v7;
    result = re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add((uint64_t)this + 344, (uint64_t *)&v8);
    if (*((_DWORD *)this + 13) == 1)
    {
      result = (uint64_t)re::ecs2::CARESortingManager::optionalSortingPlaneFrom(&v8, v7, *((re::ecs2::SortingTransformCache **)this + 54));
      v6 = v9;
      v5 = v10;
      *((_OWORD *)this + 5) = v9;
      *((_OWORD *)this + 6) = v5;
      *((_OWORD *)this + 7) = v6;
      *((_OWORD *)this + 8) = v5;
      *((_BYTE *)this + 145) = 1;
    }
    else
    {
      *((_BYTE *)this + 144) = 1;
    }
  }
  return result;
}

void re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(re::ecs2::CAMeshCodirectionalGroup *this)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  const re::ecs2::Entity *v11;
  _anonymous_namespace_ *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  float32x4_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30[2];
  float32x4_t v31;

  v2 = *((unsigned int *)this + 13);
  v3 = (_QWORD *)((char *)this + 392);
  v4 = *((_DWORD *)this + 104);
  *((_QWORD *)this + 51) = 0;
  if (!v2)
    ++v4;
  *((_DWORD *)this + 104) = v4 + 1;
  if (*((_QWORD *)this + 50) < v2)
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)this + 49, v2);
  v5 = *((unsigned int *)this + 14);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*((_QWORD *)this + 5) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 6;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *((_DWORD *)this + 14);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
  {
    v9 = *((_QWORD *)this + 51);
  }
  else
  {
    v10 = v6;
    do
    {
      v11 = *(const re::ecs2::Entity **)(*((_QWORD *)this + 5) + 24 * v10 + 16);
      v12 = (_anonymous_namespace_ *)re::ecs2::CARESortingManager::optionalSortingPlaneFrom(v30, v11, *((re::ecs2::SortingTransformCache **)this + 54));
      v13 = v31;
      v15 = *((float32x4_t *)this + 7);
      v14 = *((float32x4_t *)this + 8);
      v17 = *((_QWORD *)this + 50);
      v16 = *((_QWORD *)this + 51);
      if (v16 >= v17)
      {
        v18 = v16 + 1;
        if (v17 < v16 + 1)
        {
          v27 = *((float32x4_t *)this + 7);
          v28 = *((float32x4_t *)this + 8);
          v29 = v31;
          if (*v3)
          {
            v19 = 2 * v17;
            if (!v17)
              v19 = 8;
            if (v19 <= v18)
              v20 = v18;
            else
              v20 = v19;
            re::DynamicArray<re::RigNodeConstraint>::setCapacity(v3, v20);
          }
          else
          {
            re::DynamicArray<re::RigNodeConstraint>::setCapacity(v3, v18);
            ++*((_DWORD *)this + 104);
          }
          v14 = v28;
          v13 = v29;
          v15 = v27;
        }
        v16 = *((_QWORD *)this + 51);
      }
      v21 = vmulq_f32(vsubq_f32(v13, v14), v15);
      v22 = *((_QWORD *)this + 53) + 16 * v16;
      *(_QWORD *)v22 = v11;
      *(_DWORD *)(v22 + 8) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).u32[0];
      v9 = v16 + 1;
      *((_QWORD *)this + 51) = v9;
      ++*((_DWORD *)this + 104);
      if (*((_DWORD *)this + 14) <= (v6 + 1))
        v23 = v6 + 1;
      else
        v23 = *((_DWORD *)this + 14);
      while (1)
      {
        v10 = (v6 + 1);
        if (v23 - 1 == (_DWORD)v6)
          break;
        LODWORD(v6) = v6 + 1;
        v24 = v10;
        if ((*(_DWORD *)(*((_QWORD *)this + 5) + 24 * v10 + 8) & 0x80000000) != 0)
          goto LABEL_33;
      }
      v24 = v23;
LABEL_33:
      LODWORD(v6) = v24;
    }
    while ((_DWORD)v5 != v24);
  }
  v25 = 126 - 2 * __clz(v9);
  if (v9)
    v26 = v25;
  else
    v26 = 0;
  std::__introsort<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *,false>(*((float **)this + 53), (float *)(*((_QWORD *)this + 53) + 16 * v9), v26, 1);
}

void re::ecs2::CAMeshCodirectionalGroup::updateSortGroups(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  signed int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  id v25;
  int v26;
  int v27;
  unsigned int v28;
  unint64_t v29;
  re::Allocator *v30;
  uint64_t v31;
  signed int v32;
  signed int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  __int128 v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  int *v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  float32x4_t *v82;
  float32x4_t *v83;
  unsigned int v84;
  uint64_t v85;
  signed int v86;
  unsigned int v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t i;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  int *v98;
  int v99;
  float32x4_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int v107;
  re::ecs2::CAMeshSortGroup **v108;
  unint64_t v109;
  re::ecs2::CAMeshCodirectionalGroup *v110;
  unint64_t v111;
  _anonymous_namespace_ *appended;
  unint64_t v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  float32x4_t v119;
  unsigned int v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  unint64_t v125;
  float32x4_t v126;
  unint64_t v127;
  unint64_t v128;
  _DWORD *v129;
  int v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  unsigned int *v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  int v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unsigned int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  id v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  id v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  int *v178;
  int v179;
  uint64_t v180;
  int v181;
  int v182;
  uint64_t v183;
  int *v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  int v188;
  int v189;
  unsigned int v190;
  unsigned int v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  __n128 v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t *v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  float32x4_t v208;
  float32x4_t v209;
  uint64_t v210;
  unsigned int v211;
  unint64_t v212;
  uint64_t v213;
  re::Allocator *v214;
  unsigned int v215;
  _OWORD v216[2];
  _BYTE v217[12];
  _QWORD v218[2];
  uint64_t v219;
  int v220;
  uint64_t *v221;
  _QWORD v222[2];
  unint64_t v223;
  int v224;
  uint64_t v225;
  __int128 v226;
  __int128 v227;
  unsigned int v228;
  uint64_t v229;
  _OWORD v230[2];
  unsigned int v231[6];
  uint64_t v232;
  _BYTE v233[28];
  __int16 v234;
  _BYTE v235[10];
  _BYTE v236[28];
  __int16 v237;
  _BYTE v238[10];
  _BYTE v239[12];
  __int16 v240;
  int v241;
  __int16 v242;
  unint64_t v243;
  __int16 v244;
  unint64_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  uint64_t v251;

  v251 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 372))
  {
    ++re::ecs2::CARESortingDebugging::s_codirGroupsWithDirtyEntities;
  }
  else if (!*(_DWORD *)(a1 + 324))
  {
    return;
  }
  *((_QWORD *)&v202 + 1) = a3;
  if (*(_DWORD *)(a1 + 228) <= 1u)
    v8 = 1;
  else
    v8 = *(_DWORD *)(a1 + 228);
  v226 = 0u;
  v227 = 0u;
  v228 = 0;
  v229 = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)&v226, a2, v8);
  v9 = *(_DWORD *)(a1 + 372);
  if (v9 <= 1)
    v10 = 1;
  else
    v10 = v9;
  v225 = 0;
  v222[1] = 0;
  v223 = 0;
  v224 = 0;
  v222[0] = a2;
  re::DynamicArray<float *>::setCapacity(v222, v10);
  ++v224;
  v11 = *(unsigned int *)(a1 + 376);
  *(_QWORD *)&v200 = a4;
  v12 = 0;
  if ((_DWORD)v11)
  {
    v13 = (int *)(*(_QWORD *)(a1 + 360) + 8);
    while (1)
    {
      v14 = *v13;
      v13 += 6;
      if (v14 < 0)
        break;
      if (v11 == ++v12)
      {
        LODWORD(v12) = *(_DWORD *)(a1 + 376);
        break;
      }
    }
  }
  if ((_DWORD)v11 != (_DWORD)v12)
  {
    v15 = v12;
    do
    {
      v246.i64[0] = 0;
      v246.i64[0] = *(_QWORD *)(*(_QWORD *)(a1 + 360) + 24 * v15 + 16);
      re::DynamicArray<re::TransitionCondition *>::add(v222, &v246);
      if (*(_DWORD *)(a1 + 376) <= (v12 + 1))
        v16 = v12 + 1;
      else
        v16 = *(_DWORD *)(a1 + 376);
      v17 = v12;
      while (1)
      {
        v15 = (v17 + 1);
        if (v16 - 1 == v17)
          break;
        ++v17;
        LODWORD(v12) = v15;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 360) + 24 * v15 + 8) & 0x80000000) != 0)
          goto LABEL_25;
      }
      LODWORD(v12) = v16;
LABEL_25:
      ;
    }
    while ((_DWORD)v11 != (_DWORD)v12);
  }
  v221 = 0;
  v218[1] = 0;
  v219 = 0;
  v220 = 0;
  v218[0] = a2;
  re::DynamicArray<float *>::setCapacity(v218, v223);
  ++v220;
  v18 = *(unsigned int *)(a1 + 376);
  v214 = (re::Allocator *)a2;
  v19 = 0;
  if ((_DWORD)v18)
  {
    v20 = (int *)(*(_QWORD *)(a1 + 360) + 8);
    while (1)
    {
      v21 = *v20;
      v20 += 6;
      if (v21 < 0)
        break;
      if (v18 == ++v19)
      {
        LODWORD(v19) = *(_DWORD *)(a1 + 376);
        break;
      }
    }
  }
  v206 = a1 + 200;
  if ((_DWORD)v18 != (_DWORD)v19)
  {
    v22 = v19;
    v4 = a1 + 296;
    do
    {
      v246.i64[0] = 0;
      v246.i64[0] = *(_QWORD *)(*(_QWORD *)(a1 + 360) + 24 * v22 + 16);
      v23 = (uint64_t *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a1 + 152, v246.u64[0]);
      if (v23)
      {
        v24 = *v23;
        *(_QWORD *)&v230[0] = v24;
        if (v24)
        {
          v25 = (id)(v24 + 8);
          re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::add(a1 + 296, (uint64_t *)v230);
          re::ecs2::CAMeshSortGroup::remove((re::ecs2::CAMeshSortGroup *)v24, (re::ecs2::Entity *)v246.i64[0]);
          re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(a1 + 152, v246.u64[0]);
          ++re::ecs2::CARESortingDebugging::m_entitiesRemovedFromSortGroups;

        }
        else
        {
          re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::add(a1 + 296, (uint64_t *)v230);
          re::ecs2::CAMeshSortGroup::remove(0, (re::ecs2::Entity *)v246.i64[0]);
          re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(a1 + 152, v246.u64[0]);
          ++re::ecs2::CARESortingDebugging::m_entitiesRemovedFromSortGroups;
        }
      }
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 248, (uint64_t *)&v246);
      if (*(_DWORD *)(a1 + 376) <= (v19 + 1))
        v26 = v19 + 1;
      else
        v26 = *(_DWORD *)(a1 + 376);
      while (1)
      {
        v22 = (v19 + 1);
        if (v26 - 1 == (_DWORD)v19)
          break;
        LODWORD(v19) = v19 + 1;
        v27 = v22;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 360) + 24 * v22 + 8) & 0x80000000) != 0)
          goto LABEL_44;
      }
      v27 = v26;
LABEL_44:
      LODWORD(v19) = v27;
    }
    while ((_DWORD)v18 != v27);
  }
  v207 = a1 + 248;
  v28 = *(_DWORD *)(a1 + 276);
  *(_QWORD *)&v238[2] = 0;
  if (v28 <= 8)
    v29 = 8;
  else
    v29 = v28;
  memset(&v236[8], 0, 20);
  v30 = (re::Allocator *)a2;
  *(_QWORD *)v236 = a2;
  re::DynamicArray<float *>::setCapacity(v236, v29);
  ++*(_DWORD *)&v236[24];
  memset(v216, 0, sizeof(v216));
  *(_DWORD *)v217 = 0;
  *(_QWORD *)&v217[4] = 0x7FFFFFFFLL;
  v31 = *(_QWORD *)(a1 + 200);
  if (v31)
  {
    v32 = *(_DWORD *)(a1 + 228) <= 3u ? 3 : *(_DWORD *)(a1 + 228);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)v216, v31, v32);
    re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::copy((uint64_t)v216, v206);
    v33 = HIDWORD(v216[1]);
    if (HIDWORD(v216[1]))
    {
      v34 = (unint64_t)&unk_255828000;
      while (1)
      {
        if (!v223)
          goto LABEL_94;
        v231[0] = 0;
        memset(v230, 0, sizeof(v230));
        *(_QWORD *)&v231[1] = 0x7FFFFFFFLL;
        re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)v230, (uint64_t)v214, v33);
        if (v223)
          break;
LABEL_61:
        v38 = HIDWORD(v230[1]);
        if (HIDWORD(v230[1]))
        {
          v39 = *(unsigned int *)(a1 + 280);
          if ((_DWORD)v39)
          {
            v40 = 0;
            v41 = (int *)(*(_QWORD *)(a1 + 264) + 8);
            while (1)
            {
              v42 = *v41;
              v41 += 6;
              if (v42 < 0)
                break;
              if (v39 == ++v40)
              {
                LODWORD(v40) = *(_DWORD *)(a1 + 280);
                break;
              }
            }
          }
          else
          {
            LODWORD(v40) = 0;
          }
          if ((_DWORD)v39 != (_DWORD)v40)
          {
            v43 = v40;
            do
            {
              v246.i64[0] = 0;
              v246.i64[0] = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 24 * v43 + 16);
              re::ecs2::CAMeshCodirectionalGroup::checkEntityAgainstSortGroups((re::ecs2::CAMeshSortGroup **)v233, a1, (re::ecs2::Entity *)v246.i64[0], (uint64_t)v230, (uint64_t)&v226, v214);
              if (*(_QWORD *)v233)
              {

                re::DynamicArray<re::TransitionCondition *>::add(v236, &v246);
                ++re::ecs2::CARESortingDebugging::m_entitiesAddedToSortGroups;
              }
              if (*(_DWORD *)(a1 + 280) <= (v40 + 1))
                v44 = v40 + 1;
              else
                v44 = *(_DWORD *)(a1 + 280);
              while (1)
              {
                v43 = (v40 + 1);
                if (v44 - 1 == (_DWORD)v40)
                  break;
                LODWORD(v40) = v40 + 1;
                v45 = v43;
                if ((*(_DWORD *)(*(_QWORD *)(a1 + 264) + 24 * v43 + 8) & 0x80000000) != 0)
                  goto LABEL_79;
              }
              v45 = v44;
LABEL_79:
              LODWORD(v40) = v45;
            }
            while ((_DWORD)v39 != v45);
          }
          if (*(_QWORD *)&v236[16])
          {
            v46 = *(uint64_t **)&v238[2];
            v4 = 8 * *(_QWORD *)&v236[16];
            do
            {
              v246.i64[0] = 0;
              v47 = *v46++;
              v246.i64[0] = v47;
              re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v207, (uint64_t *)&v246);
              v4 -= 8;
            }
            while (v4);
          }
          *(_QWORD *)&v236[16] = 0;
          ++*(_DWORD *)&v236[24];
        }
        v48 = *(_QWORD *)&v230[0];
        if (*(_QWORD *)&v216[0])
          v49 = *(_QWORD *)&v216[0] == *(_QWORD *)&v230[0];
        else
          v49 = 1;
        if (v49)
        {
          *(_QWORD *)&v230[0] = *(_QWORD *)&v216[0];
          v50 = *(_OWORD *)((char *)v216 + 8);
          *(_QWORD *)&v216[0] = v48;
          *((_QWORD *)&v216[0] + 1) = *((_QWORD *)&v230[0] + 1);
          *(_QWORD *)&v216[1] = *(_QWORD *)&v230[1];
          *(_OWORD *)((char *)v230 + 8) = v50;
          v51 = DWORD2(v216[1]);
          *((_QWORD *)&v216[1] + 1) = __PAIR64__(v38, DWORD2(v230[1]));
          *((_QWORD *)&v230[1] + 1) = __PAIR64__(v33, v51);
          v52 = *(_QWORD *)v217;
          *(_QWORD *)v217 = *(_QWORD *)v231;
          *(_QWORD *)v231 = v52;
        }
        else if (*(_QWORD *)&v230[0])
        {
          re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::copy((uint64_t)v216, (uint64_t)v230);
          ++*(_DWORD *)&v217[8];
        }
        else
        {
          re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear((uint64_t)v216);
        }
        re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)v230);
        v33 = HIDWORD(v216[1]);
        if (!HIDWORD(v216[1]))
          goto LABEL_94;
      }
      v35 = v223 - 1;
      while (1)
      {
        v36 = v223;
        if (v223 <= v35)
          break;
        re::ecs2::CAMeshCodirectionalGroup::checkEntityAgainstSortGroups((re::ecs2::CAMeshSortGroup **)&v246, a1, *(re::ecs2::Entity **)(v225 + 8 * v35), (uint64_t)v216, (uint64_t)&v226, v214);
        v37 = v246.i64[0];
        if (v246.i64[0])
        {
          re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::add((uint64_t)v230, (uint64_t *)&v246);
          ++re::ecs2::CARESortingDebugging::m_entitiesAddedToSortGroups;
          re::DynamicArray<re::internal::AnimationCompositionChainBase *>::removeAt((uint64_t)v222, v35);

        }
        if (--v35 == -1)
          goto LABEL_61;
      }
      *(_QWORD *)v239 = 0;
      v249 = 0u;
      v250 = 0u;
      v247 = 0u;
      v248 = 0u;
      v246 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v233 = 136315906;
      *(_QWORD *)&v233[4] = "operator[]";
      *(_WORD *)&v233[12] = 1024;
      *(_DWORD *)&v233[14] = 789;
      *(_WORD *)&v233[18] = 2048;
      *(_QWORD *)&v233[20] = v35;
      v234 = 2048;
      *(_QWORD *)v235 = v36;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_336;
    }
  }
LABEL_94:
  if (*(_QWORD *)v236 && *(_QWORD *)&v238[2])
    (*(void (**)(void))(**(_QWORD **)v236 + 40))();
  v53 = *(_DWORD *)(a1 + 276);
  if (v53 <= 8)
    v54 = 8;
  else
    v54 = v53;
  v248.i64[0] = 0;
  v247.i64[0] = 0;
  v247.i32[2] = 0;
  v246 = (float32x4_t)(unint64_t)v214;
  re::DynamicArray<float *>::setCapacity(&v246, v54);
  ++v247.i32[2];
  v55 = v223;
  if (v223)
  {
    v56 = 0;
    do
    {
      *(_QWORD *)&v230[0] = 0;
      *(_QWORD *)&v230[0] = *(_QWORD *)(v225 + 8 * v56++);
      v57 = v56;
      if (v56 < v55)
      {
        do
          re::ecs2::CAMeshCodirectionalGroup::checkEntitiesForSorting(a1, *(re::ecs2::Entity **)&v230[0], *(re::ecs2::Entity **)(v225 + 8 * v57++), &v246, (uint64_t)&v226, (uint64_t)v214);
        while (v57 < v223);
      }
      v58 = *(unsigned int *)(a1 + 280);
      if ((_DWORD)v58)
      {
        v59 = 0;
        v60 = (int *)(*(_QWORD *)(a1 + 264) + 8);
        while (1)
        {
          v61 = *v60;
          v60 += 6;
          if (v61 < 0)
            break;
          if (v58 == ++v59)
          {
            LODWORD(v59) = *(_DWORD *)(a1 + 280);
            break;
          }
        }
      }
      else
      {
        LODWORD(v59) = 0;
      }
      if ((_DWORD)v58 != (_DWORD)v59)
      {
        v62 = v59;
        do
        {
          re::ecs2::CAMeshCodirectionalGroup::checkEntitiesForSorting(a1, *(re::ecs2::Entity **)&v230[0], *(re::ecs2::Entity **)(*(_QWORD *)(a1 + 264) + 24 * v62 + 16), &v246, (uint64_t)&v226, (uint64_t)v214);
          if (*(_DWORD *)(a1 + 280) <= (v59 + 1))
            v63 = v59 + 1;
          else
            v63 = *(_DWORD *)(a1 + 280);
          v64 = v59;
          while (1)
          {
            v62 = (v64 + 1);
            if (v63 - 1 == v64)
              break;
            ++v64;
            LODWORD(v59) = v62;
            if ((*(_DWORD *)(*(_QWORD *)(a1 + 264) + 24 * v62 + 8) & 0x80000000) != 0)
              goto LABEL_120;
          }
          LODWORD(v59) = v63;
LABEL_120:
          ;
        }
        while ((_DWORD)v58 != (_DWORD)v59);
      }
      if (!*(_QWORD *)(a1 + 152)
        || (v65 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (*(_QWORD *)&v230[0] ^ (*(_QWORD *)&v230[0] >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                                  * (*(_QWORD *)&v230[0] ^ (*(_QWORD *)&v230[0] >> 30))) >> 27)),
            v66 = *(unsigned int *)(*(_QWORD *)(a1 + 160) + 4 * ((v65 ^ (v65 >> 31)) % *(unsigned int *)(a1 + 176))),
            (_DWORD)v66 == 0x7FFFFFFF))
      {
LABEL_126:
        re::DynamicArray<re::TransitionCondition *>::add(v218, v230);
      }
      else
      {
        v67 = *(_QWORD *)(a1 + 168);
        while (*(_QWORD *)(v67 + 32 * v66 + 16) != *(_QWORD *)&v230[0])
        {
          v66 = *(_DWORD *)(v67 + 32 * v66 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v66 == 0x7FFFFFFF)
            goto LABEL_126;
        }
      }
      v55 = v223;
    }
    while (v56 < v223);
  }
  if (v247.i64[0])
  {
    v68 = (uint64_t *)v248.i64[0];
    v69 = 8 * v247.i64[0];
    do
    {
      v70 = *v68++;
      *(_QWORD *)&v230[0] = v70;
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v207, (uint64_t *)v230);
      v69 -= 8;
    }
    while (v69);
  }
  if (v246.i64[0] && v248.i64[0])
    (*(void (**)(void))(*(_QWORD *)v246.i64[0] + 40))();
  v71 = *(unsigned int *)(a1 + 328);
  if ((_DWORD)v71)
  {
    v72 = 0;
    v73 = (int *)(*(_QWORD *)(a1 + 312) + 8);
    while (1)
    {
      v74 = *v73;
      v73 += 6;
      if (v74 < 0)
        break;
      if (v71 == ++v72)
      {
        v72 = *(unsigned int *)(a1 + 328);
        break;
      }
    }
  }
  else
  {
    v72 = 0;
  }
  if ((_DWORD)v71 == (_DWORD)v72)
  {
LABEL_141:
    re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear(a1 + 296);
    v75 = v228;
    if (!v228)
      goto LABEL_279;
    v76 = 0;
    v77 = (int *)(v227 + 8);
    while (1)
    {
      v78 = *v77;
      v77 += 6;
      if (v78 < 0)
        goto LABEL_280;
      if (v228 == ++v76)
      {
        LODWORD(v76) = v228;
        goto LABEL_280;
      }
    }
  }
  v79 = v72;
  *((_QWORD *)&v201 + 1) = &v233[8];
  *(_QWORD *)&v202 = &v236[8];
  v4 = 24;
  *((_QWORD *)&v200 + 1) = *(unsigned int *)(a1 + 328);
  while (1)
  {
    v80 = *(_QWORD *)(a1 + 312) + 24 * v79;
    v83 = *(float32x4_t **)(v80 + 16);
    v81 = (uint64_t *)(v80 + 16);
    v82 = v83;
    if (v83[18].i32[3] <= 1u)
      goto LABEL_263;
    if (v82[13].i8[0])
      re::ecs2::CAMeshSortGroup::recomputeTransform(v82, v30);
    re::ecs2::CAMeshSortGroup::updateGroupToken(v82);
    v84 = v82[18].u32[3];
    if (!v84)
    {
      v82[15].i64[0] = 0;
      ++v82[15].i32[2];
      ++re::ecs2::CARESortingDebugging::m_sortGroupsResorted;
LABEL_263:
      re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::add((uint64_t)&v226, v81);
      goto LABEL_264;
    }
    *(_QWORD *)&v203 = v81;
    *((_QWORD *)&v203 + 1) = v72;
    v231[0] = 0;
    memset(v230, 0, sizeof(v230));
    *(_QWORD *)&v231[1] = 0x7FFFFFFFLL;
    v85 = v82[17].i64[0];
    if (v85)
    {
      if (v84 <= 3)
        v86 = 3;
      else
        v86 = v84;
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)v230, v85, v86);
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear((uint64_t)v230);
      v87 = v82[18].u32[3];
      if (DWORD2(v230[1]) < v87)
        re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity((uint64_t)v230, v87);
      v88 = v82[19].u32[0];
      if ((_DWORD)v88)
      {
        v89 = 0;
        for (i = 0; i < v88; ++i)
        {
          v91 = v82[18].i64[0] + v89;
          if ((*(_DWORD *)(v91 + 8) & 0x80000000) != 0)
          {
            re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::addAsCopy((uint64_t)v230, *(_QWORD *)v91 % (unint64_t)DWORD2(v230[1]), *(_QWORD *)v91, v91 + 16, (_QWORD *)(v91 + 16));
            v88 = v82[19].u32[0];
          }
          v89 += 24;
        }
      }
    }
    v92 = v82[15].i64[0];
    if (v92)
    {
      v34 = v92 - 1;
      v93 = 16 * v92 - 16;
      while (1)
      {
        v36 = v82[15].u64[0];
        if (v36 <= v34)
          break;
        v94 = re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)&v82[17], (uint64_t *)(v82[16].i64[0] + v93));
        v36 = v82[15].u64[0];
        if (v94)
        {
          if (v36 <= v34)
            goto LABEL_341;
          re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)v230, (uint64_t *)(v82[16].i64[0] + v93));
        }
        else
        {
          if (v36 <= v34)
            goto LABEL_342;
          v95 = v36 - 1;
          if (v36 - 1 > v34)
          {
            *(_OWORD *)(v82[16].i64[0] + v93) = *(_OWORD *)(v82[16].i64[0] + 16 * v36 - 16);
            v95 = v82[15].i64[0] - 1;
          }
          v82[15].i64[0] = v95;
          ++v82[15].i32[2];
        }
        --v34;
        v93 -= 16;
        if (v34 == -1)
          goto LABEL_173;
      }
LABEL_336:
      *(_QWORD *)v233 = 0;
      v249 = 0u;
      v250 = 0u;
      v247 = 0u;
      v248 = 0u;
      v246 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v236 = 136315906;
      *(_QWORD *)&v236[4] = "operator[]";
      *(_WORD *)&v236[12] = 1024;
      *(_DWORD *)&v236[14] = 789;
      *(_WORD *)&v236[18] = 2048;
      *(_QWORD *)&v236[20] = v34;
      v237 = 2048;
      *(_QWORD *)v238 = v36;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_337:
      *(_QWORD *)v239 = 0;
      v249 = v126;
      v250 = v126;
      v247 = v126;
      v248 = v126;
      v246 = v126;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v233 = 136315906;
      *(_QWORD *)&v233[4] = "operator[]";
      *(_WORD *)&v233[12] = 1024;
      *(_DWORD *)&v233[14] = 789;
      *(_WORD *)&v233[18] = 2048;
      *(_QWORD *)&v233[20] = v36;
      v234 = 2048;
      *(_QWORD *)v235 = v4;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_338;
    }
LABEL_173:
    v96 = v231[0];
    if (v231[0])
    {
      v97 = 0;
      v98 = (int *)(*(_QWORD *)&v230[1] + 8);
      while (1)
      {
        v99 = *v98;
        v98 += 6;
        if (v99 < 0)
          break;
        if (v231[0] == ++v97)
        {
          LODWORD(v97) = v231[0];
          break;
        }
      }
    }
    else
    {
      LODWORD(v97) = 0;
    }
    v100 = v82 + 14;
    v101 = v82[15].u64[0];
    if (v231[0] != (_DWORD)v97)
    {
      v102 = v97;
      v103 = *(_QWORD *)&v230[1];
      do
      {
        v104 = *(_QWORD *)(v103 + 24 * v102 + 16);
        if (v101 >= v82[14].i64[1])
        {
          re::DynamicArray<re::RigNodeConstraint>::growCapacity((float32x4_t *)v82[14].i64, v101 + 1);
          v101 = v82[15].u64[0];
        }
        v105 = v82[16].i64[0] + 16 * v101;
        *(_QWORD *)v105 = v104;
        *(_DWORD *)(v105 + 8) = 0;
        v82[15].i64[0] = ++v101;
        ++v82[15].i32[2];
        v103 = *(_QWORD *)&v230[1];
        if (v231[0] <= (int)v97 + 1)
          v106 = v97 + 1;
        else
          v106 = v231[0];
        while (1)
        {
          v102 = (v97 + 1);
          if (v106 - 1 == (_DWORD)v97)
            break;
          LODWORD(v97) = v97 + 1;
          v107 = v102;
          if ((*(_DWORD *)(*(_QWORD *)&v230[1] + 24 * v102 + 8) & 0x80000000) != 0)
            goto LABEL_191;
        }
        v107 = v106;
LABEL_191:
        LODWORD(v97) = v107;
      }
      while (v96 != v107);
    }
    v108 = (re::ecs2::CAMeshSortGroup **)v82[16].i64[0];
    v246.i64[0] = (uint64_t)v82;
    v109 = 126 - 2 * __clz(v101);
    if (v101)
      v110 = (re::ecs2::CAMeshCodirectionalGroup *)v109;
    else
      v110 = 0;
    std::__introsort<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *,false>(v108, &v108[2 * v101], (re::ecs2::CAMeshCodirectionalGroup *)&v246, v110, 1);
    v111 = v82[15].u64[0];
    *(_QWORD *)v202 = 0;
    *(_QWORD *)(v202 + 8) = 0;
    *(_DWORD *)(v202 + 16) = 0;
    *(_QWORD *)&v238[2] = 0;
    *(_QWORD *)v236 = v30;
    appended = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::CoincidentalSortKey>::setCapacity(v236, v111);
    v117 = ++*(_DWORD *)&v236[24];
    v34 = v82[15].u64[0];
    if (v34)
    {
      *(_QWORD *)&v201 = v82 + 14;
      v118 = 0;
      v36 = 0;
      v211 = 0;
      do
      {
        if (v36)
        {
          v4 = (v36 - 1);
          if (v34 <= v4)
            goto LABEL_339;
          re::ecs2::CARESortingManager::optionalSortingPlaneFrom(&v246, *(const re::ecs2::Entity **)(v82[16].i64[0] + 16 * v4), *(re::ecs2::SortingTransformCache **)(v82[16].i64[1] + 432));
          v34 = v82[15].u64[0];
          if (v34 <= v36)
            goto LABEL_340;
          v208 = v248;
          v209 = v247;
          appended = (_anonymous_namespace_ *)re::ecs2::CARESortingManager::optionalSortingPlaneFrom(&v246, *(const re::ecs2::Entity **)(v82[16].i64[0] + v118), *(re::ecs2::SortingTransformCache **)(v82[16].i64[1] + 432));
          v119 = vmulq_f32(v209, vsubq_f32(v248, v208));
          v120 = v211;
          if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v119, 2), vaddq_f32(v119, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v119.f32, 1))).f32[0] > *(float *)&dword_2541061A4)v120 = v211 + 1;
          v211 = v120;
        }
        v121 = *(_QWORD *)&v236[16];
        if (*(_QWORD *)&v236[16] >= *(_QWORD *)&v236[8])
        {
          v122 = *(_QWORD *)&v236[16] + 1;
          if (*(_QWORD *)&v236[8] < (unint64_t)(*(_QWORD *)&v236[16] + 1))
          {
            if (*(_QWORD *)v236)
            {
              v123 = 2 * *(_QWORD *)&v236[8];
              if (!*(_QWORD *)&v236[8])
                v123 = 8;
              if (v123 <= v122)
                v124 = *(_QWORD *)&v236[16] + 1;
              else
                v124 = v123;
              re::DynamicArray<re::ecs2::CoincidentalSortKey>::setCapacity(v236, v124);
              v117 = *(_DWORD *)&v236[24];
            }
            else
            {
              re::DynamicArray<re::ecs2::CoincidentalSortKey>::setCapacity(v236, v122);
              v117 = *(_DWORD *)&v236[24] + 1;
            }
          }
          v121 = *(_QWORD *)&v236[16];
        }
        v125 = *(_QWORD *)&v238[2];
        v34 = *(_QWORD *)&v238[2] + (v121 << 6);
        v126 = 0uLL;
        *(_OWORD *)v34 = 0u;
        *(_OWORD *)(v34 + 16) = 0u;
        *(_DWORD *)(v34 + 32) = 0;
        v127 = v121 + 1;
        *(_QWORD *)&v236[16] = v121 + 1;
        *(_DWORD *)&v236[24] = ++v117;
        v4 = v82[15].u64[0];
        if (v4 <= v36)
          goto LABEL_337;
        v128 = v125;
        v129 = (_DWORD *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(_QWORD *)(v82[16].i64[0] + v118) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        v246.i8[0] = 0;
        re::DrawCallSortKey<4ul,unsigned long long>::appendUInt32(v34, v211, &v246);
        v130 = v129[20];
        if (v130 == 3)
          v131 = 3;
        else
          v131 = (v130 + 3);
        re::DrawCallSortKey<4ul,unsigned long long>::appendUInt32(v34, v131, &v246);
        re::DrawCallSortKey<4ul,unsigned long long>::appendUInt32(v34, v129[22], &v246);
        re::DrawCallSortKey<4ul,unsigned long long>::appendUInt8(v34, v129[20] != 3, &v246);
        appended = (_anonymous_namespace_ *)re::DrawCallSortKey<4ul,unsigned long long>::appendInt32(v34, v129[21], &v246);
        *(_DWORD *)(v34 + 32) = v36++;
        v34 = v82[15].u64[0];
        v118 += 16;
      }
      while (v34 > v36);
      v100 = v82 + 14;
    }
    else
    {
      v128 = *(_QWORD *)&v238[2];
      v127 = *(_QWORD *)&v236[16];
    }
    v132 = 126 - 2 * __clz(v127);
    if (v127)
      v133 = v132;
    else
      v133 = 0;
    std::__introsort<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *,false>(v128, v128 + (v127 << 6), v133, 1uLL, v113, v114, v115, v116, v196, v197, v198, v199, v200, v201, v202, v203, v206, v207, v208.i64[0],
      v208.i64[1]);
    v134 = (*(uint64_t (**)(float32x4_t *))(v82->i64[0] + 24))(v82);
    v135 = v82[15].u64[0];
    **((_OWORD **)&v201 + 1) = 0uLL;
    *(_DWORD *)(*((_QWORD *)&v201 + 1) + 16) = 0;
    *(_QWORD *)&v235[2] = 0;
    *(_QWORD *)v233 = v134;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity(v233, v135);
    v137 = ++*(_DWORD *)&v233[24];
    if (v127)
    {
      v138 = (unsigned int *)(v128 + 32);
      while (1)
      {
        v139 = *v138;
        v138 += 16;
        v34 = v139;
        v36 = v82[15].u64[0];
        if (v36 <= v139)
          break;
        v140 = v82[16].i64[0];
        v141 = *(_QWORD *)&v233[16];
        if (*(_QWORD *)&v233[16] >= *(_QWORD *)&v233[8])
        {
          re::DynamicArray<re::RigNodeConstraint>::growCapacity(v233, *(_QWORD *)&v233[16] + 1);
          v141 = *(_QWORD *)&v233[16];
          v137 = *(_DWORD *)&v233[24];
        }
        *(_OWORD *)(*(_QWORD *)&v235[2] + 16 * v141) = *(_OWORD *)(v140 + 16 * v34);
        *(_QWORD *)&v233[16] = v141 + 1;
        *(_DWORD *)&v233[24] = ++v137;
        if (!--v127)
          goto LABEL_230;
      }
LABEL_338:
      v232 = 0;
      v249 = 0u;
      v250 = 0u;
      v247 = 0u;
      v248 = 0u;
      v246 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v239 = 136315906;
      *(_QWORD *)&v239[4] = "operator[]";
      v240 = 1024;
      v241 = 789;
      v242 = 2048;
      v243 = v34;
      v244 = 2048;
      v245 = v36;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_339:
      *(_QWORD *)v239 = 0;
      v249 = 0u;
      v250 = 0u;
      v247 = 0u;
      v248 = 0u;
      v246 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v233 = 136315906;
      *(_QWORD *)&v233[4] = "operator[]";
      *(_WORD *)&v233[12] = 1024;
      *(_DWORD *)&v233[14] = 789;
      *(_WORD *)&v233[18] = 2048;
      *(_QWORD *)&v233[20] = v4;
      v234 = 2048;
      *(_QWORD *)v235 = v34;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_340:
      *(_QWORD *)v239 = 0;
      v249 = 0u;
      v250 = 0u;
      v247 = 0u;
      v248 = 0u;
      v246 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v233 = 136315906;
      *(_QWORD *)&v233[4] = "operator[]";
      *(_WORD *)&v233[12] = 1024;
      *(_DWORD *)&v233[14] = 789;
      *(_WORD *)&v233[18] = 2048;
      *(_QWORD *)&v233[20] = v36;
      v234 = 2048;
      *(_QWORD *)v235 = v34;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_341:
      *(_QWORD *)v233 = 0;
      v249 = 0u;
      v250 = 0u;
      v247 = 0u;
      v248 = 0u;
      v246 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v236 = 136315906;
      *(_QWORD *)&v236[4] = "operator[]";
      *(_WORD *)&v236[12] = 1024;
      *(_DWORD *)&v236[14] = 789;
      *(_WORD *)&v236[18] = 2048;
      *(_QWORD *)&v236[20] = v34;
      v237 = 2048;
      *(_QWORD *)v238 = v36;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_342:
      *(_QWORD *)v233 = 0;
      v249 = 0u;
      v250 = 0u;
      v247 = 0u;
      v248 = 0u;
      v246 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v236 = 136315906;
      *(_QWORD *)&v236[4] = "removeAt";
      *(_WORD *)&v236[12] = 1024;
      *(_DWORD *)&v236[14] = 931;
      *(_WORD *)&v236[18] = 2048;
      *(_QWORD *)&v236[20] = v34;
      v237 = 2048;
      *(_QWORD *)v238 = v36;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_343:
      v232 = 0;
      v249 = 0u;
      v250 = 0u;
      v247 = 0u;
      v248 = 0u;
      v246 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v239 = 136315906;
      *(_QWORD *)&v239[4] = "operator[]";
      v240 = 1024;
      v241 = 789;
      v242 = 2048;
      v243 = 0;
      v244 = 2048;
      v245 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_344:
      re::internal::assertLog((re::internal *)4, v136, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      _os_crash();
      __break(1u);
    }
LABEL_230:
    v142 = v100->i64[0];
    if (v100->i64[0] && *(_QWORD *)v233 && v142 != *(_QWORD *)v233)
      goto LABEL_344;
    v144 = *(_QWORD *)&v233[8];
    v143 = *(_QWORD *)&v233[16];
    v82[14].i64[0] = *(_QWORD *)v233;
    v82[14].i64[1] = v144;
    v82[15].i64[0] = v143;
    v145 = v82[16].i64[0];
    v146 = *(_QWORD *)&v235[2];
    v82[16].i64[0] = *(_QWORD *)&v235[2];
    ++v82[15].i32[2];
    if (!v143)
      goto LABEL_343;
    v208.i64[0] = v145;
    v210 = v142;
    v212 = v128;
    v147 = 0;
    *(_DWORD *)(v146 + 8) = 0;
    if (v143 != 1)
      break;
LABEL_247:
    if (v210 && v208.i64[0])
      (*(void (**)(void))(*(_QWORD *)v210 + 40))();
    v30 = v214;
    LODWORD(v71) = DWORD2(v200);
    v81 = v204;
    LODWORD(v72) = v205;
    v4 = 24;
    if (v212 && *(_QWORD *)v236)
      (*(void (**)(_QWORD, unint64_t))(**(_QWORD **)v236 + 40))(*(_QWORD *)v236, v212);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v230);
    ++re::ecs2::CARESortingDebugging::m_sortGroupsResorted;
    if ((v147 & 1) == 0)
      goto LABEL_263;
    v159 = *((_QWORD *)&v202 + 1);
    v161 = *(_QWORD *)(*((_QWORD *)&v202 + 1) + 8);
    v160 = *(_QWORD *)(*((_QWORD *)&v202 + 1) + 16);
    if (v160 >= v161)
    {
      v162 = v160 + 1;
      if (v161 < v160 + 1)
      {
        if (**((_QWORD **)&v202 + 1))
        {
          v163 = 2 * v161;
          if (!v161)
            v163 = 8;
          if (v163 <= v162)
            v164 = v162;
          else
            v164 = v163;
          re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(*((_QWORD **)&v202 + 1), v164);
          v159 = *((_QWORD *)&v202 + 1);
        }
        else
        {
          re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(*((_QWORD **)&v202 + 1), v162);
          v159 = *((_QWORD *)&v202 + 1);
          ++*(_DWORD *)(*((_QWORD *)&v202 + 1) + 24);
        }
      }
      v160 = *(_QWORD *)(v159 + 16);
    }
    v168 = *v204;
    *(_QWORD *)(*(_QWORD *)(v159 + 32) + 8 * v160) = *v204;
    if (v168)
    {
      v169 = (id)(v168 + 8);
      v159 = *((_QWORD *)&v202 + 1);
      v160 = *(_QWORD *)(*((_QWORD *)&v202 + 1) + 16);
    }
    *(_QWORD *)(v159 + 16) = v160 + 1;
    ++*(_DWORD *)(v159 + 24);
LABEL_264:
    v165 = *(_DWORD *)(a1 + 328);
    if (v165 <= (int)v72 + 1)
      v166 = (v72 + 1);
    else
      v166 = v165;
    while (1)
    {
      v79 = (v72 + 1);
      if ((_DWORD)v166 - 1 == (_DWORD)v72)
        break;
      LODWORD(v72) = v72 + 1;
      v167 = v79;
      if ((*(_DWORD *)(*(_QWORD *)(a1 + 312) + 24 * v79 + 8) & 0x80000000) != 0)
        goto LABEL_271;
    }
    v167 = v166;
LABEL_271:
    v72 = v167;
    if ((_DWORD)v71 == (_DWORD)v167)
      goto LABEL_141;
  }
  v148 = 0;
  v147 = 0;
  v149 = 1;
LABEL_236:
  v150 = v82[16].i64[0] + 16 * v149;
  v151 = *(_QWORD *)v150;
  *(_DWORD *)(v150 + 8) = 0;
  v152 = (unsigned int *)(v150 + 8);
  v153 = v148;
  while (1)
  {
    v154 = v82[15].u64[0];
    if (v154 <= v153)
      break;
    v155 = v82[16].i64[0];
    {
      v156 = *(_DWORD *)(v155 + 16 * v153 + 8);
      if (*v152 <= v156 + 1)
        v157 = v156 + 1;
      else
        v157 = *v152;
      *v152 = v157;
      if (re::ecs2::CARESortingDebugging::m_highestPriorityInGroup < v157)
      {
        re::ecs2::CARESortingDebugging::m_highestPriorityInGroup = v157;
        re::ecs2::CARESortingDebugging::m_highestPriorityGroupId = v82[5].i64[0];
      }
      v147 = 1;
    }
    v158 = v153-- + 1;
    if (v158 <= 1)
    {
      ++v149;
      ++v148;
      if (v82[15].i64[0] <= v149)
        goto LABEL_247;
      goto LABEL_236;
    }
  }
  v232 = 0;
  v249 = 0u;
  v250 = 0u;
  v247 = 0u;
  v248 = 0u;
  v246 = 0u;
  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
  *(_DWORD *)v239 = 136315906;
  *(_QWORD *)&v239[4] = "operator[]";
  v240 = 1024;
  v241 = 789;
  v242 = 2048;
  v243 = v153;
  v244 = 2048;
  v245 = v154;
  _os_log_send_and_compose_impl();
  _os_crash_msg();
  __break(1u);
LABEL_279:
  LODWORD(v76) = 0;
LABEL_280:
  v213 = a1 + 344;
  if (v75 != (_DWORD)v76)
  {
    v170 = v76;
    v171 = v227;
    v172 = a1 + 152;
    v215 = v75;
    do
    {
      v173 = *(_QWORD *)(v171 + 24 * v170 + 16);
      v174 = (id)(v173 + 8);
      v175 = *(unsigned int *)(v173 + 304);
      v176 = *(_DWORD *)(v173 + 304);
      if (*(_DWORD *)(v173 + 300))
      {
        v177 = 0;
        if (v176)
        {
          v178 = (int *)(*(_QWORD *)(v173 + 288) + 8);
          while (1)
          {
            v179 = *v178;
            v178 += 6;
            if (v179 < 0)
              break;
            if (v175 == ++v177)
            {
              LODWORD(v177) = *(_DWORD *)(v173 + 304);
              break;
            }
          }
        }
        if ((_DWORD)v175 != (_DWORD)v177)
        {
          v180 = v177;
          do
          {
            v246.i64[0] = 0;
            v246.i64[0] = *(_QWORD *)(*(_QWORD *)(v173 + 288) + 24 * v180 + 16);
            re::DynamicArray<re::TransitionCondition *>::add(v218, &v246);
            v176 = *(_DWORD *)(v173 + 304);
            if (v176 <= (int)v177 + 1)
              v181 = v177 + 1;
            else
              v181 = *(_DWORD *)(v173 + 304);
            v182 = v177;
            while (1)
            {
              v180 = (v182 + 1);
              if (v181 - 1 == v182)
                break;
              ++v182;
              LODWORD(v177) = v180;
              if ((*(_DWORD *)(*(_QWORD *)(v173 + 288) + 24 * v180 + 8) & 0x80000000) != 0)
                goto LABEL_298;
            }
            LODWORD(v177) = v181;
LABEL_298:
            ;
          }
          while ((_DWORD)v175 != (_DWORD)v177);
        }
      }
      v183 = 0;
      if (v176)
      {
        v184 = (int *)(*(_QWORD *)(v173 + 288) + 8);
        v185 = v207;
        while (1)
        {
          v186 = *v184;
          v184 += 6;
          if (v186 < 0)
            break;
          if (v176 == ++v183)
          {
            LODWORD(v183) = v176;
            break;
          }
        }
      }
      else
      {
        v185 = v207;
      }
      if (v176 != (_DWORD)v183)
      {
        v187 = v183;
        do
        {
          v246.i64[0] = 0;
          v246.i64[0] = *(_QWORD *)(*(_QWORD *)(v173 + 288) + 24 * v187 + 16);
          re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove(v172, v246.u64[0]);
          re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v185, (uint64_t *)&v246);
          ++re::ecs2::CARESortingDebugging::m_entitiesRemovedFromSortGroups;
          if (*(_DWORD *)(v173 + 304) <= (v183 + 1))
            v188 = v183 + 1;
          else
            v188 = *(_DWORD *)(v173 + 304);
          v189 = v183;
          while (1)
          {
            v187 = (v189 + 1);
            if (v188 - 1 == v189)
              break;
            ++v189;
            LODWORD(v183) = v187;
            if ((*(_DWORD *)(*(_QWORD *)(v173 + 288) + 24 * v187 + 8) & 0x80000000) != 0)
              goto LABEL_315;
          }
          LODWORD(v183) = v188;
LABEL_315:
          ;
        }
        while (v176 != (_DWORD)v183);
      }
      *(_BYTE *)(v173 + 208) = *(_DWORD *)(v173 + 300) != 0;
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v173 + 272);
      *(_QWORD *)(v173 + 336) = 0;
      ++*(_DWORD *)(v173 + 344);
      *(_BYTE *)(v173 + 209) = 1;
      re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::remove(v206, v173);

      if (v215 <= (int)v76 + 1)
        v190 = v76 + 1;
      else
        v190 = v215;
      while (1)
      {
        v170 = (v76 + 1);
        if (v190 - 1 == (_DWORD)v76)
          break;
        LODWORD(v76) = v76 + 1;
        v191 = v170;
        if ((*(_DWORD *)(v171 + 24 * v170 + 8) & 0x80000000) != 0)
          goto LABEL_323;
      }
      v191 = v190;
LABEL_323:
      LODWORD(v76) = v191;
    }
    while (v215 != v191);
  }
  if (v219)
  {
    v192 = v221;
    v193 = 8 * v219;
    do
    {
      v194 = *v192++;
      v246.i64[0] = v194;
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v207, (uint64_t *)&v246);
      re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)v200, &v246);
      v193 -= 8;
    }
    while (v193);
  }
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v213);
  v195.n128_f64[0] = re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)v216);
  if (v218[0] && v221)
    (*(void (**)(double))(*(_QWORD *)v218[0] + 40))(v195.n128_f64[0]);
  if (v222[0])
  {
    if (v225)
      (*(void (**)(__n128))(*(_QWORD *)v222[0] + 40))(v195);
  }
  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)&v226);
}

BOOL re::ecs2::CAMeshSortGroup::remove(re::ecs2::CAMeshSortGroup *this, re::ecs2::Entity *a2)
{
  re::ecs2::Entity *v4;

  v4 = a2;
  if (re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 272, (uint64_t *)&v4))*((_BYTE *)this + 208) = 1;
  return re::DynamicArray<unsigned long long>::remove((uint64_t)this + 320, &v4);
}

void re::ecs2::CAMeshCodirectionalGroup::checkEntityAgainstSortGroups(re::ecs2::CAMeshSortGroup **a1, uint64_t a2, re::ecs2::Entity *a3, uint64_t a4, uint64_t a5, re::Allocator *a6)
{
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  __int32 v26;
  __int32 v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  re::ecs2::Entity *v37;

  v37 = a3;
  *a1 = 0;
  v8 = *(unsigned int *)(a4 + 32);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = (int *)(*(_QWORD *)(a4 + 16) + 8);
    while (1)
    {
      v11 = *v10;
      v10 += 6;
      if (v11 < 0)
        break;
      if (v8 == ++v9)
      {
        LODWORD(v9) = *(_DWORD *)(a4 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  if ((_DWORD)v8 != (_DWORD)v9)
  {
    v12 = v9;
    v31 = a2 + 296;
    v32 = a2 + 152;
    v13 = *(_QWORD *)(a4 + 16);
    do
    {
      v14 = v13 + 24 * v12;
      v17 = *(float32x4_t **)(v14 + 16);
      v15 = (uint64_t *)(v14 + 16);
      v16 = v17;
      if (!v17[13].i8[1])
      {
        if (v16[13].i8[0])
          re::ecs2::CAMeshSortGroup::recomputeTransform(v16, a6);
        v19 = v16[13].f32[1];
        v18 = v16[13].f32[2];
        v20 = v16[19].u32[0];
        if ((_DWORD)v20)
        {
          v21 = 0;
          v22 = (int *)(v16[18].i64[0] + 8);
          while (1)
          {
            v23 = *v22;
            v22 += 6;
            if (v23 < 0)
              break;
            if (v20 == ++v21)
            {
              LODWORD(v21) = v16[19].i32[0];
              break;
            }
          }
        }
        else
        {
          LODWORD(v21) = 0;
        }
        if ((_DWORD)v20 == (_DWORD)v21)
        {
LABEL_30:
          v28 = 0;
        }
        else
        {
          v24 = v21;
          while (1)
          {
            v25 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(_QWORD *)(v16[18].i64[0] + 24 * v24 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
            if (v25)
            {
              if (*(_BYTE *)(v25 + 94))
                break;
            }
            if (v16[19].i32[0] <= (v21 + 1))
              v26 = v21 + 1;
            else
              v26 = v16[19].i32[0];
            while (1)
            {
              v24 = (v21 + 1);
              if (v26 - 1 == (_DWORD)v21)
                break;
              LODWORD(v21) = v21 + 1;
              v27 = v24;
              if ((*(_DWORD *)(v16[18].i64[0] + 24 * v24 + 8) & 0x80000000) != 0)
                goto LABEL_29;
            }
            v27 = v26;
LABEL_29:
            LODWORD(v21) = v27;
            if ((_DWORD)v20 == v27)
              goto LABEL_30;
          }
          v28 = 1;
        }
        {
          if (*a1)
          {
            re::ecs2::CAMeshCodirectionalGroup::mergeSortGroups(a2, a1, v15, a5);
          }
          else
          {
            re::ecs2::CAMeshSortGroup::add((re::ecs2::CAMeshSortGroup *)*v15, a3);
            re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add<re::SharedPtr<re::ecs2::CAMeshSortGroup>&>(v32, (uint64_t *)&v37, v15);
            re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::add(v31, v15);
            re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)a1, *v15);
          }
        }
      }
      v13 = *(_QWORD *)(a4 + 16);
      if (*(_DWORD *)(a4 + 32) <= (v9 + 1))
        v29 = v9 + 1;
      else
        v29 = *(_DWORD *)(a4 + 32);
      while (1)
      {
        v12 = (v9 + 1);
        if (v29 - 1 == (_DWORD)v9)
          break;
        LODWORD(v9) = v9 + 1;
        v30 = v12;
        if ((*(_DWORD *)(v13 + 24 * v12 + 8) & 0x80000000) != 0)
          goto LABEL_43;
      }
      v30 = v29;
LABEL_43:
      LODWORD(v9) = v30;
    }
    while ((_DWORD)v8 != v30);
  }
}

void re::ecs2::CAMeshCodirectionalGroup::checkEntitiesForSorting(uint64_t a1, re::ecs2::Entity *a2, re::ecs2::Entity *a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  re::ecs2::CAMeshSortGroup **v13;
  re::ecs2::CAMeshSortGroup **v14;
  uint64_t v15;
  re::ecs2::CAMeshSortGroup *v16;
  char *v17;
  id v18;
  _BOOL8 v19;
  void *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  re::ecs2::CAMeshSortGroup *v26;
  re::ecs2::Entity *v27;
  re::ecs2::Entity *v28;

  v27 = a3;
  v28 = a2;
  v12 = a1 + 152;
  v13 = (re::ecs2::CAMeshSortGroup **)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a1 + 152, (unint64_t)a2);
  v14 = (re::ecs2::CAMeshSortGroup **)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v12, (unint64_t)a3);
  v15 = (uint64_t)v14;
  if (v13 && v14)
  {
    v16 = *v13;
    if (*v13 == *v14)
      return;
LABEL_7:
    v26 = v16;
    if (v16)
      v17 = (char *)v16 + 8;
    if (v15)
      goto LABEL_10;
LABEL_13:
    v25 = 0;
    goto LABEL_14;
  }
  if (v13)
  {
    v16 = *v13;
    goto LABEL_7;
  }
  v16 = 0;
  v26 = 0;
  if (!v14)
    goto LABEL_13;
LABEL_10:
  v15 = *(_QWORD *)v15;
  v25 = v15;
  if (v15)
    v18 = (id)(v15 + 8);
LABEL_14:
  if (v19)
  {
    if (v16)
    {
      if (!v15)
      {
        re::ecs2::CAMeshSortGroup::add(v16, a3);
        re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add<re::SharedPtr<re::ecs2::CAMeshSortGroup>&>(v12, (uint64_t *)&v27, (uint64_t *)&v26);
        re::DynamicArray<re::TransitionCondition *>::add(a4, &v27);
        ++re::ecs2::CARESortingDebugging::m_entitiesAddedToSortGroups;
        goto LABEL_26;
      }
      re::ecs2::CAMeshCodirectionalGroup::mergeSortGroups(a1, v13, &v25, a5);
    }
    else
    {
      if (!v15)
      {
        v21 = re::globalAllocators((re *)v19);
        v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v21[2] + 32))(v21[2], 368, 16);
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)v22, 0);
        *(_QWORD *)v23 = &off_24ED45158;
        *(_DWORD *)(v23 + 212) = 0;
        *(_DWORD *)(v23 + 216) = 0;
        *(_OWORD *)(v23 + 16) = 0u;
        *(_OWORD *)(v23 + 32) = 0u;
        *(_OWORD *)(v23 + 48) = 0u;
        *(_QWORD *)(v23 + 64) = 0;
        *(_OWORD *)(v23 + 80) = 0u;
        *(_OWORD *)(v23 + 96) = 0u;
        *(_OWORD *)(v23 + 112) = 0u;
        *(_OWORD *)(v23 + 128) = 0u;
        *(_OWORD *)(v23 + 144) = 0u;
        *(_OWORD *)(v23 + 160) = 0u;
        *(_OWORD *)(v23 + 176) = 0u;
        *(_OWORD *)(v23 + 192) = 0u;
        *(_WORD *)(v23 + 208) = 0;
        *(_QWORD *)(v22 + 256) = 0;
        *(_QWORD *)(v22 + 232) = 0;
        *(_QWORD *)(v22 + 240) = 0;
        *(_DWORD *)(v22 + 248) = 0;
        re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)(v22 + 224), 0x10uLL);
        ++*(_DWORD *)(v22 + 248);
        *(_QWORD *)(v22 + 264) = a1;
        *(_OWORD *)(v22 + 272) = 0u;
        *(_OWORD *)(v22 + 288) = 0u;
        *(_DWORD *)(v22 + 304) = 0;
        *(_QWORD *)(v22 + 308) = 0x7FFFFFFFLL;
        *(_QWORD *)(v22 + 352) = 0;
        *(_QWORD *)(v22 + 328) = 0;
        *(_QWORD *)(v22 + 336) = 0;
        *(_QWORD *)(v22 + 320) = 0;
        *(_DWORD *)(v22 + 344) = 0;
        v24 = v22;
        re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::add(a1 + 200, &v24);
        re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::add(a1 + 296, &v24);
        re::ecs2::CAMeshSortGroup::add((re::ecs2::CAMeshSortGroup *)v22, v28);
        re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add<re::SharedPtr<re::ecs2::CAMeshSortGroup>&>(v12, (uint64_t *)&v28, &v24);
        re::DynamicArray<re::TransitionCondition *>::add(a4, &v28);
        re::ecs2::CAMeshSortGroup::add((re::ecs2::CAMeshSortGroup *)v22, v27);
        re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add<re::SharedPtr<re::ecs2::CAMeshSortGroup>&>(v12, (uint64_t *)&v27, &v24);
        re::DynamicArray<re::TransitionCondition *>::add(a4, &v27);
        re::ecs2::CARESortingDebugging::m_entitiesAddedToSortGroups += 2;
        v20 = (void *)(v22 + 8);
        goto LABEL_27;
      }
      re::ecs2::CAMeshSortGroup::add((re::ecs2::CAMeshSortGroup *)v15, a2);
      re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add<re::SharedPtr<re::ecs2::CAMeshSortGroup>&>(v12, (uint64_t *)&v28, &v25);
      re::DynamicArray<re::TransitionCondition *>::add(a4, &v28);
      ++re::ecs2::CARESortingDebugging::m_entitiesAddedToSortGroups;
    }
  }
  else if (!v15)
  {
    if (!v16)
      return;
    goto LABEL_26;
  }

  v16 = v26;
  if (v26)
  {
LABEL_26:
    v20 = (char *)v16 + 8;
LABEL_27:

  }
}

__n128 *re::ecs2::CAMeshSortGroup::updateMeshSortingComponents(__n128 *this, uint64_t a2, BOOL *a3)
{
  unint64_t v3;
  float32x4_t *v4;
  __n128 *v5;
  uint64_t v6;
  _anonymous_namespace_ **i;
  float32x4_t *v8;
  uint32x4_t v9;
  uint32x4_t v10;
  char v11;

  v3 = this[15].n128_u64[0];
  if (v3)
  {
    v4 = (float32x4_t *)this;
    v5 = this + 5;
    v6 = 16 * v3;
    for (i = (_anonymous_namespace_ **)(this[16].n128_u64[0] + 8); ; i += 2)
    {
      v11 = 0;
      this = (__n128 *)&v8[11];
      if (v11 || *(_DWORD *)i != v8[10].i32[0] || v4[5].u8[8] != v8[11].u8[8] || v4[5].u8[9] != v8[11].u8[9])
        break;
      if (v4[6].i8[0] && v8[12].i8[0])
      {
        v9 = (uint32x4_t)vceqq_f32(v4[7], v8[13]);
        v9.i32[3] = v9.i32[2];
        if ((vminvq_u32(v9) & 0x80000000) == 0)
          break;
      }
      else if (v8[12].u8[0] | v4[6].u8[0])
      {
        break;
      }
      if (v4[8].i8[0] && v8[14].i8[0])
      {
        v10 = (uint32x4_t)vceqq_f32(v4[9], v8[15]);
        v10.i32[3] = v10.i32[2];
        if ((vminvq_u32(v10) & 0x80000000) == 0)
          break;
      }
      else if (v8[14].u8[0] | v4[8].u8[0])
      {
        break;
      }
      if (v5->n128_u64[0] != this->n128_u64[0])
        break;
LABEL_19:
      v6 -= 16;
      if (!v6)
        return this;
    }
    re::ecs2::MeshSortGroupToken::operator=(this, v5);
    v8[10].i32[0] = *(_DWORD *)i;
    this = (__n128 *)re::ecs2::Component::markDirty(v8);
    goto LABEL_19;
  }
  return this;
}

int *re::DynamicOverflowArray<re::ecs2::Entity *,128ul>::add(int *result, _QWORD *a2)
{
  int *v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v3 = result;
  if (!*(_QWORD *)result)
  {
    v10 = *((_QWORD *)v3 + 1) + 1;
    result = (int *)re::DynamicOverflowArray<re::ecs2::Entity *,128ul>::setCapacity(v3, v10);
    v5 = v3[4] + 2;
    v3[4] = v5;
    goto LABEL_15;
  }
  v4 = *((_QWORD *)result + 1);
  v5 = result[4];
  if ((v5 & 1) != 0)
  {
    if (v4 - 128 >= 0xFFFFFFFFFFFFFF7FLL)
      goto LABEL_15;
    v7 = v4 + 1;
    v9 = 256;
    goto LABEL_11;
  }
  v6 = *((_QWORD *)result + 3);
  v8 = v4 >= v6;
  v7 = v4 + 1;
  v8 = !v8 || v6 >= v7;
  if (!v8)
  {
    v9 = 2 * v6;
LABEL_11:
    if (v9 <= v7)
      v11 = v7;
    else
      v11 = v9;
    result = (int *)re::DynamicOverflowArray<re::ecs2::Entity *,128ul>::setCapacity(result, v11);
    v5 = v3[4];
  }
LABEL_15:
  if ((v5 & 1) != 0)
    v12 = v3 + 6;
  else
    v12 = (_QWORD *)*((_QWORD *)v3 + 4);
  v13 = *((_QWORD *)v3 + 1);
  v12[v13] = *a2;
  *((_QWORD *)v3 + 1) = v13 + 1;
  v3[4] += 2;
  return result;
}

float32x4_t *re::ecs2::CAMeshSortGroup::updateGroupToken(float32x4_t *this)
{
  uint64_t v1;
  uint64_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  uint64_t v7;
  re::ecs2::SortingTransformCache *v8;
  int v9;
  float32x4_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  __int16 v16[8];
  char v17;
  float32x4_t v18;
  char v19;
  __int128 v20;
  char v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24[8];
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;

  v1 = (uint64_t)this;
  v27 = *MEMORY[0x24BDAC8D0];
  v2 = this[16].i64[1];
  v3 = *(float32x4_t *)(v2 + 112);
  v4 = *(float32x4_t *)(v2 + 128);
  v5 = vmulq_f32(v3, vsubq_f32(this[2], v4));
  v6 = vmulq_n_f32(v3, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), vaddq_f32(v5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1))).f32[0]);
  if (this[21].i64[0])
  {
    v14 = v6;
    v15 = *(float32x4_t *)(v2 + 128);
    v7 = *(_QWORD *)this[22].i64[0];
    v8 = *(re::ecs2::SortingTransformCache **)(v2 + 432);
    this = (float32x4_t *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v7 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (this)
    {
      v9 = this[6].u8[0];
      if (this[6].i8[0])
      {
        this = re::ecs2::CARESortingManager::optionalSortingPlaneFrom(v24, (const re::ecs2::Entity *)v7, v8);
        v9 = v24[0].u8[0];
        if (v24[0].i8[0])
        {
          v25 = v24[1];
          v26 = v24[2];
          v9 = 1;
        }
      }
    }
    else
    {
      v9 = 0;
    }
    v6 = v14;
    v4 = v15;
  }
  else
  {
    v9 = 0;
  }
  v10 = vaddq_f32(v4, v6);
  if (*(_QWORD *)(v1 + 80))
  {
    if (!*(_BYTE *)(v1 + 96))
      *(_BYTE *)(v1 + 96) = 1;
    *(float32x4_t *)(v1 + 112) = v10;
    v12 = *(_QWORD *)(v1 + 16);
    v11 = *(_QWORD *)(v1 + 24);
    if (!*(_BYTE *)(v1 + 128))
      *(_BYTE *)(v1 + 128) = 1;
    *(_QWORD *)(v1 + 144) = v12;
    *(_QWORD *)(v1 + 152) = v11;
    if (v9)
    {
      if (!*(_BYTE *)(v1 + 160))
        *(_BYTE *)(v1 + 160) = 1;
      v13 = v26;
      *(float32x4_t *)(v1 + 176) = v25;
      *(float32x4_t *)(v1 + 192) = v13;
    }
    else if (*(_BYTE *)(v1 + 160))
    {
      *(_BYTE *)(v1 + 160) = 0;
    }
  }
  else
  {
    v16[0] = 261;
    v17 = 1;
    v18 = v10;
    v19 = 1;
    v20 = *(_OWORD *)(v1 + 16);
    v21 = v9;
    if (v9)
    {
      v22 = v25;
      v23 = v26;
    }
    re::ecs2::MeshSortGroupToken::createNewToken((uint64_t)v16, (uint64_t)v24);
    return (float32x4_t *)re::ecs2::MeshSortGroupToken::operator=(v1 + 80, (uint64_t)v24);
  }
  return this;
}

re::ecs2::Component *`anonymous namespace'::getOrAddMeshSortingComponent(_anonymous_namespace_ *this, re::ecs2::Entity *a2, BOOL *a3)
{
  char *v5;
  uint64_t v6;
  re::ecs2::Component *v7;
  id v8;
  ArcSharedObject *v9;
  _anonymous_namespace_ **v10;
  char *v11;
  re::ecs2::Component *v13;
  re::ecs2::Component *v14;

  v5 = (char *)this + 32;
  v6 = re::ecs2::EntityComponentCollection::get((_anonymous_namespace_ *)((char *)this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v6)
  {
    v7 = (re::ecs2::Component *)v6;
    v8 = (id)(v6 + 8);
    if (*((_BYTE *)v7 + 25) != 5)
    {
      *((_BYTE *)v7 + 25) = 5;
      *(_BYTE *)a2 = 1;
    }
  }
  else
  {
    v9 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                                                  + 7)
                                                                               + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType+ 7), 464, 0);
    re::make::shared::inplace<re::ecs2::MeshSortingComponent>(v9, &v14);
    v7 = v14;
    *((_BYTE *)v14 + 25) = 5;
    v10 = (_anonymous_namespace_ **)*((_QWORD *)this + 25);
    if (v10)
      re::ecs2::NetworkComponent::disableSyncForComponent(v10, v7);
    v13 = v7;
    v11 = (char *)v7 + 8;
    re::ecs2::EntityComponentCollection::add((uint64_t)v5, (uint64_t *)&v13, 1);
    if (v13)
    {

      v13 = 0;
    }
  }

  return v7;
}

_QWORD *re::ecs2::CAMeshSortGroup::add(re::ecs2::CAMeshSortGroup *this, re::ecs2::Entity *a2)
{
  _QWORD *result;
  re::ecs2::Entity *v4;

  v4 = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add((uint64_t)this + 272, (uint64_t *)&v4);
  *((_BYTE *)this + 208) = 1;
  result = (_QWORD *)re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)v4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    if (*((_BYTE *)result + 96))
      return re::DynamicArray<re::TransitionCondition *>::add((_QWORD *)this + 40, &v4);
  }
  return result;
}

void re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add<re::SharedPtr<re::ecs2::CAMeshSortGroup>&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  v9 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v9 = v8 % *(unsigned int *)(a1 + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v18 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v18 + 32 * v10 + 16) == v6)
        return;
      while (1)
      {
        v10 = *(_DWORD *)(v18 + 32 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v18 + 32 * v10 + 16) == v6)
          return;
      }
    }
  }
  v11 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v11 == 0x7FFFFFFF)
  {
    v11 = *(unsigned int *)(a1 + 32);
    v12 = v11;
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::AssetType const*,re::SharedPtr<re::RealityFileAssetProvider::PerTypeLoadCallbacks>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      v12 = *(_DWORD *)(a1 + 32);
      v6 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v12 + 1;
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
    *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v13 + 32 * v11 + 8) = v14 | 0x80000000;
  v15 = v9;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11) = v8;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 16) = v6;
  v16 = *a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 24) = *a3;
  if (v16)
    v17 = (id)(v16 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v15) = v11;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
}

void re::ecs2::CAMeshCodirectionalGroup::mergeSortGroups(uint64_t a1, re::ecs2::CAMeshSortGroup **a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  re::ecs2::Entity *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  re::ecs2::CAMeshSortGroup *v23;
  char *v24;
  int v25;
  int v26;
  int v29;
  _QWORD *v30;

  v4 = a4;
  v5 = a3;
  v8 = *a3;
  v9 = *(unsigned int *)(*a3 + 304);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = (int *)(*(_QWORD *)(v8 + 288) + 8);
    while (1)
    {
      v12 = *v11;
      v11 += 6;
      if (v12 < 0)
        break;
      if (v9 == ++v10)
      {
        LODWORD(v10) = *(_DWORD *)(*a3 + 304);
        break;
      }
    }
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if ((_DWORD)v9 != (_DWORD)v10)
  {
    v13 = v10;
    v29 = *(_DWORD *)(*a3 + 304);
    v30 = (_QWORD *)(a1 + 152);
    while (1)
    {
      v14 = *(re::ecs2::Entity **)(*(_QWORD *)(v8 + 288) + 24 * v13 + 16);
      re::ecs2::CAMeshSortGroup::add(*a2, v14);
      v15 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((unint64_t)v14 ^ ((unint64_t)v14 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                                * ((unint64_t)v14 ^ ((unint64_t)v14 >> 30))) >> 27));
      v16 = v15 ^ (v15 >> 31);
      if (*v30)
      {
        v17 = v16 % *(unsigned int *)(a1 + 176);
        v18 = *(unsigned int *)(*(_QWORD *)(a1 + 160) + 4 * v17);
        if ((_DWORD)v18 != 0x7FFFFFFF)
        {
          v19 = *(_QWORD *)(a1 + 168);
          while (*(re::ecs2::Entity **)(v19 + 32 * v18 + 16) != v14)
          {
            v18 = *(_DWORD *)(v19 + 32 * v18 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v18 == 0x7FFFFFFF)
              goto LABEL_16;
          }
          re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v19 + 32 * v18 + 24), (uint64_t)*a2);
          goto LABEL_25;
        }
      }
      else
      {
        v17 = 0;
      }
LABEL_16:
      v9 = *(unsigned int *)(a1 + 188);
      if ((_DWORD)v9 == 0x7FFFFFFF)
      {
        v9 = *(unsigned int *)(a1 + 184);
        v20 = v9;
        if ((_DWORD)v9 == *(_DWORD *)(a1 + 176))
        {
          re::HashTable<re::AssetType const*,re::SharedPtr<re::RealityFileAssetProvider::PerTypeLoadCallbacks>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::setCapacity((uint64_t)v30, 2 * *(_DWORD *)(a1 + 180));
          v17 = v16 % *(unsigned int *)(a1 + 176);
          v20 = *(_DWORD *)(a1 + 184);
        }
        *(_DWORD *)(a1 + 184) = v20 + 1;
        v21 = *(_QWORD *)(a1 + 168);
        v22 = *(_DWORD *)(v21 + 32 * v9 + 8);
      }
      else
      {
        v21 = *(_QWORD *)(a1 + 168);
        v22 = *(_DWORD *)(v21 + 32 * v9 + 8);
        *(_DWORD *)(a1 + 188) = v22 & 0x7FFFFFFF;
      }
      *(_DWORD *)(v21 + 32 * v9 + 8) = v22 | 0x80000000;
      *(_DWORD *)(*(_QWORD *)(a1 + 168) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 168) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * v17);
      *(_QWORD *)(*(_QWORD *)(a1 + 168) + 32 * v9) = v16;
      *(_QWORD *)(*(_QWORD *)(a1 + 168) + 32 * v9 + 16) = v14;
      v23 = *a2;
      *(_QWORD *)(*(_QWORD *)(a1 + 168) + 32 * v9 + 24) = *a2;
      if (v23)
        v24 = (char *)v23 + 8;
      *(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * v17) = v9;
      ++*(_DWORD *)(a1 + 180);
      LODWORD(v9) = v29;
LABEL_25:
      ++*(_DWORD *)(a1 + 192);
      if (*(_DWORD *)(v8 + 304) <= (v10 + 1))
        v25 = v10 + 1;
      else
        v25 = *(_DWORD *)(v8 + 304);
      while (1)
      {
        v13 = (v10 + 1);
        if (v25 - 1 == (_DWORD)v10)
          break;
        LODWORD(v10) = v10 + 1;
        v26 = v13;
        if ((*(_DWORD *)(*(_QWORD *)(v8 + 288) + 24 * v13 + 8) & 0x80000000) != 0)
          goto LABEL_32;
      }
      v26 = v25;
LABEL_32:
      LODWORD(v10) = v26;
      if ((_DWORD)v9 == v26)
      {
        v4 = a4;
        v5 = a3;
        v8 = *a3;
        break;
      }
    }
  }
  *(_BYTE *)(v8 + 208) = *(_DWORD *)(v8 + 300) != 0;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(v8 + 272);
  *(_QWORD *)(v8 + 336) = 0;
  ++*(_DWORD *)(v8 + 344);
  re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::add(v4, v5);
  re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::remove(a1 + 296, *v5);
  *(_BYTE *)(*v5 + 209) = 1;
}

BOOL `anonymous namespace'::doEntitiesOverlap(uint64_t a1, re::ecs2::Entity *a2, re::ecs2::SortingTransformCache *a3, uint64_t a4, int a5)
{
  unint64_t v5;
  float32x4_t *v10;
  uint64_t v11;
  uint32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t *v23;
  float32x4_t v24;
  uint64_t v25;
  _BOOL4 v26;
  _BOOL8 doesEntityOverlapBox;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v35;
  unint64_t v36;
  float32x4_t *v37;
  uint64_t v38;
  _BYTE v39[38];
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v35 = 0;
  v36 = 0;
  v37 = 0;
  re::FixedArray<re::Vector3<float>>::init<>(&v35, a4, 4uLL);
  v10 = (float32x4_t *)re::ecs2::SortingTransformCache::getOrRecomputeWorldMatrixAndInverse(a3, (const re::ecs2::Entity *)a1);
  v29 = *v10;
  v30 = v10[1];
  v31 = v10[3];
  v32 = v10[2];
  v11 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v11)
    goto LABEL_10;
  v12 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)(v11 + 48), *(float32x4_t *)(v11 + 64));
  v12.i32[3] = v12.i32[2];
  if ((vmaxvq_u32(v12) & 0x80000000) != 0)
  {
    v13 = *(float32x4_t *)(v11 + 32);
    v14.i64[0] = 0xBF000000BF000000;
    v14.i64[1] = 0xBF000000BF000000;
    v15.i64[0] = 0x3F0000003F000000;
    v15.i64[1] = 0x3F0000003F000000;
    v33 = vmulq_f32(v13, v14);
    v34 = vmulq_f32(v13, v15);
  }
  else
  {
    v33 = *(float32x4_t *)(v11 + 48);
    v34 = *(float32x4_t *)(v11 + 64);
  }
  if (!v36)
  {
    v38 = 0;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v40 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v39 = 136315906;
    *(_QWORD *)&v39[4] = "operator[]";
    *(_WORD *)&v39[12] = 1024;
    *(_DWORD *)&v39[14] = 468;
    *(_WORD *)&v39[18] = 2048;
    *(_QWORD *)&v39[20] = 0;
    *(_WORD *)&v39[28] = 2048;
    *(_QWORD *)&v39[30] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_18;
  }
  v16 = vmulq_n_f32(v29, v33.f32[0]);
  v17 = 0uLL;
  v18 = vaddq_f32(v31, vmlaq_f32(vmlaq_n_f32(v16, v30, v33.f32[1]), (float32x4_t)0, v32));
  *v37 = vdivq_f32(v18, (float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 3));
  v5 = v36;
  if (v36 <= 1)
  {
LABEL_18:
    v38 = 0;
    v43 = v17;
    v44 = v17;
    v41 = v17;
    v42 = v17;
    v40 = v17;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v39 = 136315906;
    *(_QWORD *)&v39[4] = "operator[]";
    *(_WORD *)&v39[12] = 1024;
    *(_DWORD *)&v39[14] = 468;
    *(_WORD *)&v39[18] = 2048;
    *(_QWORD *)&v39[20] = 1;
    *(_WORD *)&v39[28] = 2048;
    *(_QWORD *)&v39[30] = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_19;
  }
  v19 = vaddq_f32(v31, vmlaq_f32(vmlaq_n_f32(v16, v30, v34.f32[1]), (float32x4_t)0, v32));
  v37[1] = vdivq_f32(v19, (float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 3));
  if (v5 == 2)
  {
LABEL_19:
    v38 = 0;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v40 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v39 = 136315906;
    *(_QWORD *)&v39[4] = "operator[]";
    *(_WORD *)&v39[12] = 1024;
    *(_DWORD *)&v39[14] = 468;
    *(_WORD *)&v39[18] = 2048;
    *(_QWORD *)&v39[20] = 2;
    *(_WORD *)&v39[28] = 2048;
    *(_QWORD *)&v39[30] = 2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_20:
    v38 = 0;
    v43 = v21;
    v44 = v21;
    v41 = v21;
    v42 = v21;
    v40 = v21;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v39 = 136315906;
    *(_QWORD *)&v39[4] = "operator[]";
    *(_WORD *)&v39[12] = 1024;
    *(_DWORD *)&v39[14] = 468;
    *(_WORD *)&v39[18] = 2048;
    *(_QWORD *)&v39[20] = 3;
    *(_WORD *)&v39[28] = 2048;
    *(_QWORD *)&v39[30] = 3;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v20 = vmulq_n_f32(v29, v34.f32[0]);
  v21 = 0uLL;
  v22 = vaddq_f32(v31, vmlaq_f32(vmlaq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v33.i32[1], 0), v30), (float32x4_t)0, v32));
  v23 = v37;
  v37[2] = vdivq_f32(v22, (float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 3));
  if (v5 <= 3)
    goto LABEL_20;
  v24 = vaddq_f32(v31, vmlaq_f32(vmlaq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v34.i32[1], 0), v30), (float32x4_t)0, v32));
  v23[3] = vdivq_f32(v24, (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 3));
LABEL_10:
  re::ecs2::CARESortingManager::optionalSortingPlaneFrom(&v40, (const re::ecs2::Entity *)a1, a3);
  *(float32x4_t *)v39 = v41;
  *(float32x4_t *)&v39[16] = v42;
  v25 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v25)
    v26 = *(_BYTE *)(v25 + 94) != 0;
  else
    v26 = 0;
  if (v35 && v36)
    (*(void (**)(void))(*(_QWORD *)v35 + 40))();
  return doesEntityOverlapBox;
}

void re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::remove(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v4 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    v5 = (v4 ^ (v4 >> 31)) % v2;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(v6 + 4 * v5);
    if ((_DWORD)v7 != 0x7FFFFFFF)
    {
      v8 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v8 + 24 * v7 + 16) == a2)
      {
        *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v8 + 24 * v7 + 8) & 0x7FFFFFFF;
LABEL_8:
        v11 = *(_QWORD *)(a1 + 16);
        v12 = v11 + 24 * v7;
        v15 = *(_DWORD *)(v12 + 8);
        v13 = (int *)(v12 + 8);
        v14 = v15;
        if (v15 < 0)
        {
          *v13 = v14 & 0x7FFFFFFF;
          v16 = v11 + 24 * v7;
          v19 = *(_QWORD *)(v16 + 16);
          v18 = (_QWORD *)(v16 + 16);
          v17 = v19;
          if (v19)
          {

            *v18 = 0;
          }
        }
        v20 = *(_QWORD *)(a1 + 16) + 24 * v7;
        v21 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)(v20 + 8) = *(_DWORD *)(v20 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
        --*(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 36) = v7;
        *(_DWORD *)(a1 + 40) = v21 + 1;
      }
      else
      {
        while (1)
        {
          v9 = v7;
          v10 = *(_DWORD *)(v8 + 24 * v7 + 8);
          v7 = v10 & 0x7FFFFFFF;
          if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v8 + 24 * v7 + 16) == a2)
          {
            *(_DWORD *)(v8 + 24 * v9 + 8) = *(_DWORD *)(v8 + 24 * v9 + 8) & 0x80000000 | *(_DWORD *)(v8 + 24 * v7 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
}

void re::ecs2::CAMeshSortGroup::recomputeTransform(float32x4_t *this, re::Allocator *a2)
{
  _anonymous_namespace_ *v4;
  uint64_t *v5;
  unint64_t v6;
  float32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t *v22;
  float32x4_t v23;
  float32x4_t *v24;
  uint64_t v25;
  uint32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  unint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  __int32 v37;
  __int32 v38;
  float32x4_t v39;
  float32x4_t v40;
  int32x4_t v41;
  float32x2_t v42;
  float32x2_t v43;
  float32x4_t v44;
  unint64_t v45;
  float v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float v51;
  float v52;
  uint64_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v5 = (uint64_t *)&this[3];
  v4 = (_anonymous_namespace_ *)this[3].i64[0];
  *((_OWORD *)v5 - 2) = 0u;
  *((_OWORD *)v5 - 1) = 0u;
  if (v4)
  {
    if (this[3].i64[1])
    {
      v4 = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t))(*(_QWORD *)v4 + 40))(v4, this[4].i64[0]);
      this[3].i64[1] = 0;
      this[4].i64[0] = 0;
    }
    *v5 = 0;
  }
  v6 = (4 * this[18].i32[3]);
  v8 = this[18].u32[3];
  v9 = 32 * v8;
  v53 = v8;
  if ((_DWORD)v8)
  {
    v10 = (_OWORD *)(*(uint64_t (**)(re::Allocator *, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v9, 16);
    if (!v10)
      goto LABEL_54;
    v12 = v10;
    v13 = v10;
    if ((_DWORD)v53 != 1)
    {
      bzero(v10, v9 - 32);
      v13 = &v12[(unint64_t)v9 / 0x10 - 2];
    }
    v7.i32[1] = 0;
    *v13 = 0u;
    v13[1] = 0u;
  }
  else
  {
    v12 = 0;
  }
  v14 = this[19].u32[0];
  v15 = 0;
  if ((_DWORD)v14)
  {
    v16 = (int *)(this[18].i64[0] + 8);
    while (1)
    {
      v17 = *v16;
      v16 += 6;
      if (v17 < 0)
        break;
      if (v14 == ++v15)
      {
        LODWORD(v15) = this[19].i32[0];
        break;
      }
    }
  }
  if ((_DWORD)v14 != (_DWORD)v15)
  {
    v18 = 0;
    v19 = 0;
    v20 = v15;
    while (1)
    {
      v21 = *(_QWORD *)(this[18].i64[0] + 24 * v20 + 16);
      re::ecs2::CARESortingManager::optionalSortingPlaneFrom(&v61, (const re::ecs2::Entity *)v21, *(re::ecs2::SortingTransformCache **)(this[16].i64[1] + 432));
      v59 = v63;
      if (v18 == v53)
        break;
      v22 = (float32x4_t *)&v12[2 * v18];
      *v22 = v62;
      v22[1] = v59;
      v23 = this[2];
      this[1] = vaddq_f32(this[1], *v22);
      this[2] = vaddq_f32(v23, v22[1]);
      v24 = (float32x4_t *)re::ecs2::SortingTransformCache::getOrRecomputeWorldMatrixAndInverse(*(re::ecs2::SortingTransformCache **)(this[16].i64[1] + 432), (const re::ecs2::Entity *)v21);
      v54 = *v24;
      v55 = v24[1];
      v56 = v24[3];
      v57 = v24[2];
      v25 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v21 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v25)
      {
        v26 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)(v25 + 48), *(float32x4_t *)(v25 + 64));
        v26.i32[3] = v26.i32[2];
        if ((vmaxvq_u32(v26) & 0x80000000) != 0)
        {
          v27 = *(float32x4_t *)(v25 + 32);
          v28.i64[0] = 0xBF000000BF000000;
          v28.i64[1] = 0xBF000000BF000000;
          v29.i64[0] = 0x3F0000003F000000;
          v29.i64[1] = 0x3F0000003F000000;
          v58 = vmulq_f32(v27, v28);
          v60 = vmulq_f32(v27, v29);
        }
        else
        {
          v58 = *(float32x4_t *)(v25 + 48);
          v60 = *(float32x4_t *)(v25 + 64);
        }
        if (this[3].i64[1] <= v19)
          goto LABEL_50;
        v30 = vmulq_n_f32(v54, v58.f32[0]);
        v31 = vaddq_f32(v56, vmlaq_f32(vmlaq_n_f32(v30, v55, v58.f32[1]), (float32x4_t)0, v57));
        *(float32x4_t *)(this[4].i64[0] + 16 * v19) = vdivq_f32(v31, (float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 3));
        if (this[3].i64[1] <= v19 + 1)
          goto LABEL_51;
        v32 = vaddq_f32(v56, vmlaq_f32(vmlaq_n_f32(v30, v55, v60.f32[1]), (float32x4_t)0, v57));
        *(float32x4_t *)(this[4].i64[0] + 16 * (v19 + 1)) = vdivq_f32(v32, (float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 3));
        if (this[3].i64[1] <= v19 + 2)
          goto LABEL_52;
        v33 = v19 + 3;
        v34 = vmulq_n_f32(v54, v60.f32[0]);
        v35 = vaddq_f32(v56, vmlaq_f32(vmlaq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v58.i32[1], 0), v55), (float32x4_t)0, v57));
        *(float32x4_t *)(this[4].i64[0] + 16 * (v19 + 2)) = vdivq_f32(v35, (float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 3));
        if (this[3].i64[1] <= v19 + 3)
          goto LABEL_53;
        v19 += 4;
        v36 = vaddq_f32(v56, vmlaq_f32(vmlaq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v60.i32[1], 0), v55), (float32x4_t)0, v57));
        v7 = vdivq_f32(v36, (float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 3));
        *(float32x4_t *)(this[4].i64[0] + 16 * v33) = v7;
      }
      ++v18;
      if (this[19].i32[0] <= (v15 + 1))
        v37 = v15 + 1;
      else
        v37 = this[19].i32[0];
      while (1)
      {
        v20 = (v15 + 1);
        if (v37 - 1 == (_DWORD)v15)
          break;
        LODWORD(v15) = v15 + 1;
        v38 = v20;
        if ((*(_DWORD *)(this[18].i64[0] + 24 * v20 + 8) & 0x80000000) != 0)
          goto LABEL_35;
      }
      v38 = v37;
LABEL_35:
      LODWORD(v15) = v38;
      if ((_DWORD)v14 == v38)
        goto LABEL_36;
    }
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_50:
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_51:
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_52:
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_53:
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v61 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_54:
    re::internal::assertLog((re::internal *)4, v11, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
  }
LABEL_36:
  v7.f32[0] = (float)this[18].u32[3];
  v39 = this[1];
  v40 = vdivq_f32(this[2], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 0));
  v41 = (int32x4_t)vmulq_f32(v39, v39);
  v41.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v41, 2), vadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.i8, 1))).u32[0];
  v42 = vrsqrte_f32((float32x2_t)v41.u32[0]);
  v43 = vmul_f32(v42, vrsqrts_f32((float32x2_t)v41.u32[0], vmul_f32(v42, v42)));
  v44 = vmulq_n_f32(v39, vmul_f32(v43, vrsqrts_f32((float32x2_t)v41.u32[0], vmul_f32(v43, v43))).f32[0]);
  this[1] = v44;
  this[2] = v40;
  this[13].i32[1] = 0;
  this[13].i32[2] = 0;
  if ((_DWORD)v53)
  {
    v45 = 0;
    v46 = 0.0;
    v47 = 0.0;
    do
    {
      v48 = (float32x4_t)v12[v45 / 0x10 + 1];
      v49 = vmulq_f32(v44, vsubq_f32(v48, v40));
      v50 = vmulq_f32((float32x4_t)v12[v45 / 0x10], vsubq_f32(v40, v48));
      v51 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), vaddq_f32(v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 1))).f32[0];
      v52 = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), vaddq_f32(v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1))).f32[0];
      if (v47 < v51)
        v47 = v51;
      if (v47 < v52)
        v47 = v52;
      if (v51 < v46)
        v46 = v51;
      if (v46 > v52)
        v46 = v52;
      this[13].f32[1] = v46;
      this[13].f32[2] = v47;
      v45 += 32;
    }
    while (v9 != v45);
    this[13].f32[1] = fabsf(v46);
    this[13].i8[0] = 0;
    (*(void (**)(re::Allocator *, _OWORD *))(*(_QWORD *)a2 + 40))(a2, v12);
  }
  else
  {
    this[13].i8[0] = 0;
  }
}

BOOL `anonymous namespace'::doesEntityOverlapBox(float32x4_t *a1, uint64_t a2, int a3, re::ecs2::Entity *a4, re::ecs2::SortingTransformCache *a5, int a6, float a7, float a8)
{
  float32x4_t v16;
  float32x4_t v18;
  float32x4_t v19;
  float v20;
  float32x4_t v21;
  float v22;
  float v23;
  float v24;
  re::ecs2::EntityComponentCollection *v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  float64x2_t v29;
  double v30;
  double v31;
  uint64_t v32;
  float32x4_t *v33;
  float32x2_t *v34;
  uint64_t v35;
  float64x2_t *v36;
  float64x2_t v37;
  double v38;
  float32x4_t v39;
  double v40;
  float64x2_t v41;
  double v42;
  float32x2_t v43;
  float32x2_t v44;
  float32_t v45;
  float32x2_t v46;
  CGFloat v47;
  CGFloat v48;
  double v49;
  float32x4_t *v50;
  float32x4_t v51;
  float32x4_t v52;
  uint32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float64x2_t v56;
  float32x2_t v57;
  float32x2_t v58;
  float32_t v59;
  float32x2_t v60;
  float32_t v61;
  float64x2_t v62;
  float64_t v63;
  float64_t v64;
  float32x2_t v65;
  float32x2_t v66;
  float32x2_t v67;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  float64x2_t v72;
  float32x2_t v73;
  double v74;
  CGFloat v75;
  float64x2_t rect;
  double recta;
  float64x2_t rectb;
  float32x2_t rect_16;
  float32x2_t rect_16a;
  float32x2_t rect_16b;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  CGRect v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;
  CGRect v89;

  re::ecs2::CARESortingManager::optionalSortingPlaneFrom(&v82, a4, a5);
  v16 = vmulq_f32(v83, *a1);
  if ((float)(1.0
             - vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0]) > *(float *)&dword_25410619C)return 0;
  if (!a6)
  {
    v18 = a1[1];
    v19 = vmulq_f32(*a1, vsubq_f32(v84, v18));
    LODWORD(v20) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).u32[0];
    v21 = vmulq_f32(v83, vsubq_f32(v18, v84));
    v22 = fabsf(v20);
    v23 = fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0]);
    if (v23 >= v22)
      v23 = v22;
    v24 = v20 <= 0.0 ? a8 : a7;
    if ((float)(v23 - v24) > *(float *)&dword_2541061A0)
      return 0;
  }
  v25 = (re::ecs2::Entity *)((char *)a4 + 32);
  v26 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)a4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (a3 && v26 && *(_BYTE *)(v26 + 94))
    return 1;
  v27 = re::ecs2::SortingTransformCache::getOrRecomputeWorldMatrixAndInverse(a5, a4);
  v28 = (double *)MEMORY[0x24BDBF070];
  v29 = *(float64x2_t *)MEMORY[0x24BDBF070];
  v30 = *(double *)(MEMORY[0x24BDBF070] + 16);
  v31 = *(double *)(MEMORY[0x24BDBF070] + 24);
  v32 = *(_QWORD *)(a2 + 8);
  if (v32)
  {
    v33 = (float32x4_t *)v27;
    v34 = *(float32x2_t **)(a2 + 16);
    v35 = 16 * v32;
    v36 = (float64x2_t *)MEMORY[0x24BDBF148];
    v37.f64[0] = *(float64_t *)(MEMORY[0x24BDBF070] + 16);
    v38 = *(double *)(MEMORY[0x24BDBF070] + 24);
    do
    {
      v74 = v37.f64[0];
      rect = v29;
      v39 = vaddq_f32(v33[7], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33[4], COERCE_FLOAT(*(_OWORD *)v34->f32)), v33[5], *v34, 1), v33[6], *(float32x4_t *)v34->f32, 2));
      rect_16 = (float32x2_t)vdivq_f32(v39, (float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 3)).u64[0];
      v40 = v29.f64[1];
      v41 = v29;
      v42 = v38;
      if (CGRectIsNull(*(CGRect *)(&v37 - 1)))
      {
        v37 = *v36;
        v43 = rect_16;
      }
      else
      {
        v44.f32[0] = rect.f64[0] + v74;
        v45 = v40 + v38;
        v44.f32[1] = v45;
        v46 = vminnm_f32(rect_16, vcvt_f32_f64(rect));
        v37 = vcvtq_f64_f32(vsub_f32(vmaxnm_f32(rect_16, v44), v46));
        v43 = v46;
      }
      v29 = vcvtq_f64_f32(v43);
      v34 += 2;
      v38 = v37.f64[1];
      v35 -= 16;
    }
    while (v35);
    v47 = v29.f64[1];
    v48 = v29.f64[0];
    v49 = v28[1];
    v30 = v28[2];
    v31 = v28[3];
    v75 = v37.f64[0];
    recta = *v28;
  }
  else
  {
    v49 = *(double *)(MEMORY[0x24BDBF070] + 8);
    v38 = *(double *)(MEMORY[0x24BDBF070] + 24);
    v75 = *(double *)(MEMORY[0x24BDBF070] + 16);
    v47 = v49;
    recta = *MEMORY[0x24BDBF070];
    v48 = *MEMORY[0x24BDBF070];
  }
  v50 = (float32x4_t *)re::ecs2::EntityComponentCollection::get(v25, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v50)
  {
    v52 = v50[3];
    v51 = v50[4];
    v53 = (uint32x4_t)vcgtq_f32(v52, v51);
    v53.i32[3] = v53.i32[2];
    if ((vmaxvq_u32(v53) & 0x80000000) != 0)
    {
      v54 = v50[2];
      v55.i64[0] = 0xBF000000BF000000;
      v55.i64[1] = 0xBF000000BF000000;
      v52.i64[0] = vmulq_f32(v54, v55).u64[0];
      v55.i64[0] = 0x3F0000003F000000;
      v51.i64[1] = 0x3F0000003F000000;
      v51.i64[0] = vmulq_f32(v54, v51).u64[0];
    }
    rect_16a = *(float32x2_t *)v52.f32;
    v73 = *(float32x2_t *)v51.f32;
    v85.origin.x = recta;
    v85.origin.y = v49;
    v85.size.width = v30;
    v85.size.height = v31;
    if (CGRectIsNull(v85))
    {
      v56 = *(float64x2_t *)MEMORY[0x24BDBF148];
      v57 = rect_16a;
    }
    else
    {
      v58.f32[0] = recta;
      v59 = v49;
      v58.f32[1] = v59;
      v60.f32[0] = v30 + recta;
      v61 = v31 + v49;
      v60.f32[1] = v61;
      v57 = vminnm_f32(rect_16a, v58);
      v56 = vcvtq_f64_f32(vsub_f32(vmaxnm_f32(rect_16a, v60), v57));
    }
    rectb = v56;
    rect_16b = v57;
    v62 = vcvtq_f64_f32(v57);
    v63 = v62.f64[1];
    v64 = v56.f64[1];
    v72 = v62;
    if (CGRectIsNull(*(CGRect *)(&v56 - 1)))
    {
      v49 = v73.f32[1];
      recta = v73.f32[0];
      v30 = *MEMORY[0x24BDBF148];
      v31 = *(double *)(MEMORY[0x24BDBF148] + 8);
    }
    else
    {
      v65 = vminnm_f32(v73, rect_16b);
      v66 = vmaxnm_f32(v73, vcvt_f32_f64(vaddq_f64(rectb, v72)));
      recta = v65.f32[0];
      v49 = v65.f32[1];
      v67 = vsub_f32(v66, v65);
      v30 = v67.f32[0];
      v31 = v67.f32[1];
    }
  }
  v86.size.width = v75;
  v86.origin.x = v48;
  v86.origin.y = v47;
  v86.size.height = v38;
  v87 = CGRectInset(v86, 0.00000011920929, 0.00000011920929);
  x = v87.origin.x;
  y = v87.origin.y;
  width = v87.size.width;
  height = v87.size.height;
  v87.origin.x = recta;
  v87.origin.y = v49;
  v87.size.width = v30;
  v87.size.height = v31;
  v89 = CGRectInset(v87, 0.00000011920929, 0.00000011920929);
  v88.origin.x = x;
  v88.origin.y = y;
  v88.size.width = width;
  v88.size.height = height;
  return CGRectIntersectsRect(v88, v89);
}

uint64_t re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(re::ecs2::CAMeshSortGroup *this, const re::ecs2::Entity *a2, const re::ecs2::Entity *a3, re::ecs2::CAMeshCodirectionalGroup *a4)
{
  re::ecs2::SortingTransformCache *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v12;
  float32x4_t v13[2];
  float32x4_t v14;

  v6 = (re::ecs2::SortingTransformCache *)*((_QWORD *)a3 + 54);
  re::ecs2::CARESortingManager::optionalSortingPlaneFrom(v13, this, v6);
  v12 = v14;
  re::ecs2::CARESortingManager::optionalSortingPlaneFrom(v13, a2, v6);
  v8 = *((float32x4_t *)a3 + 7);
  v7 = *((float32x4_t *)a3 + 8);
  v9 = vmulq_f32(vsubq_f32(v12, v7), v8);
  v10 = vmulq_f32(vsubq_f32(v14, v7), v8);
  return *(_QWORD *)&vmovn_s32(vcgtq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))))) & 1;
}

__n128 re::ecs2::MeshSortGroupToken::operator=(__n128 *a1, __n128 *a2)
{
  unint64_t v2;
  int v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  __n128 result;
  int v8;
  BOOL v9;
  BOOL v10;
  __n128 v11;

  v2 = a2->n128_u64[0];
  a1->n128_u16[4] = a2->n128_u16[4];
  a1->n128_u64[0] = v2;
  v3 = a2[1].n128_u8[0];
  if (a1[1].n128_u8[0])
    v4 = 0;
  else
    v4 = v3 == 0;
  if (!v4)
  {
    if (a1[1].n128_u8[0])
      v5 = v3 == 0;
    else
      v5 = 0;
    if (v5)
    {
      a1[1].n128_u8[0] = 0;
    }
    else
    {
      if (a1[1].n128_u8[0])
        v6 = 1;
      else
        v6 = v3 == 0;
      if (!v6)
        a1[1].n128_u8[0] = 1;
      result = a2[2];
      a1[2] = result;
    }
  }
  v8 = a2[3].n128_u8[0];
  if (a1[3].n128_u8[0])
    v9 = 0;
  else
    v9 = v8 == 0;
  if (!v9)
  {
    if (a1[3].n128_u8[0])
      v10 = v8 == 0;
    else
      v10 = 0;
    if (v10)
    {
      a1[3].n128_u8[0] = 0;
    }
    else
    {
      if (!a1[3].n128_u8[0] && a2[3].n128_u8[0])
        a1[3].n128_u8[0] = 1;
      result = a2[4];
      a1[4] = result;
    }
  }
  if (a1[5].n128_u8[0] || a2[5].n128_u8[0])
  {
    if (!a1[5].n128_u8[0] || a2[5].n128_u8[0])
    {
      if (!a1[5].n128_u8[0])
      {
        if (a2[5].n128_u8[0])
          a1[5].n128_u8[0] = 1;
      }
      result = a2[6];
      v11 = a2[7];
      a1[6] = result;
      a1[7] = v11;
    }
    else
    {
      a1[5].n128_u8[0] = 0;
    }
  }
  return result;
}

uint64_t re::ecs2::CARESortingManager::registerScene(re::ecs2::CARESortingManager *this, re::EventBus **a2)
{
  re::EventBus *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  re *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  re *v12;
  re *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  re *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  re *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  re *v30;
  re *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  re *v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  void *v49;
  re *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  re *v55;
  re *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  re *v61;
  re *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  re *v67;
  void *v68;
  re *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  re *v74;
  re *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  re *v80;
  re *v81;
  __guard v82;
  unint64_t EventInfo;
  re *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  re *v89;
  re *v90;
  __guard v91;
  unint64_t v92;
  re *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  re *v98;
  re *v99;
  __guard v100;
  unint64_t v101;
  re *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  re *v107;
  re *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  re *v113;
  re *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  re *v119;
  re *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  re *v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t result;
  _QWORD v132[2];
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  re::ecs2::Scene *v138;
  _BYTE v139[24];
  uint64_t v140;
  _BYTE *v141;
  _BYTE v142[24];
  uint64_t v143;
  re *v144;
  _BYTE v145[24];
  uint64_t v146;
  re *v147;
  _BYTE v148[24];
  uint64_t v149;
  re *v150;
  _BYTE v151[24];
  uint64_t v152;
  re *v153;
  _BYTE v154[24];
  uint64_t v155;
  re *v156;
  _BYTE v157[24];
  uint64_t v158;
  re *v159;
  _BYTE v160[24];
  uint64_t v161;
  re *v162;
  _BYTE v163[24];
  uint64_t v164;
  re *v165;
  _BYTE v166[24];
  uint64_t v167;
  re *v168;
  _BYTE v169[24];
  uint64_t v170;
  re *v171;
  _BYTE v172[24];
  uint64_t v173;
  re *v174;
  _BYTE v175[24];
  uint64_t v176;
  re *v177;
  _BYTE v178[24];
  uint64_t v179;
  re *v180;
  _BYTE v181[24];
  uint64_t v182;
  re *v183;
  _BYTE v184[24];
  uint64_t v185;
  re *v186;
  _BYTE v187[24];
  uint64_t v188;
  uint64_t *v189;
  _BYTE v190[24];
  uint64_t v191;
  re *v192;
  _BYTE v193[24];
  uint64_t v194;
  re *v195;
  _QWORD v196[3];
  _BYTE v197[24];
  uint64_t v198;
  _BYTE *v199;
  uint64_t (**v200)();
  _BYTE v201[24];
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t (***v205)();
  _BYTE v206[24];
  uint64_t v207;
  _BYTE *v208;
  uint64_t v209;

  v209 = *MEMORY[0x24BDAC8D0];
  v138 = (re::ecs2::Scene *)a2;
  v2 = a2[36];
  if (!v2)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) An event bus is expected for this system to track mesh sorting changes.", "eventBus", "registerScene", 2138);
    _os_crash();
    __break(1u);
  }
  v132[0] = 0;
  v132[1] = 0;
  v133 = 1;
  v135 = 0;
  v136 = 0;
  v134 = 0;
  v137 = 0;
  v5 = 0;
  v196[0] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v196[1] = re::ecs2::ComponentImpl<re::ecs2::SkeletalPoseComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v196[2] = re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  do
  {
    v6 = v196[v5];
    v194 = re::globalAllocators((re *)v4)[2];
    v195 = 0;
    v7 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v194 + 32))(v194, 32, 0);
    *(_QWORD *)v7 = &off_24ED44D50;
    *((_QWORD *)v7 + 1) = this;
    *((_QWORD *)v7 + 2) = re::ecs2::CARESortingManager::invalidateEntityEventHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v7 + 3) = 0;
    v195 = v7;
    v8 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v2, (uint64_t)v193, v6, 0);
    v10 = v9;
    v11 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v132);
    *v11 = v8;
    v11[1] = v10;
    v12 = v195;
    if (v195)
    {
      v12 = (re *)(**(uint64_t (***)(re *))v195)(v195);
      if (v195 != (re *)v193)
        v12 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v194 + 40))(v194);
      v195 = 0;
    }
    v191 = re::globalAllocators(v12)[2];
    v192 = 0;
    v13 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v191 + 32))(v191, 32, 0);
    *(_QWORD *)v13 = &off_24ED44DA8;
    *((_QWORD *)v13 + 1) = this;
    *((_QWORD *)v13 + 2) = re::ecs2::CARESortingManager::invalidateEntityEventHandler<REComponentDidAddEvent>;
    *((_QWORD *)v13 + 3) = 0;
    v192 = v13;
    v14 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v2, (uint64_t)v190, v6, 0);
    v16 = v15;
    v17 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v132);
    *v17 = v14;
    v17[1] = v16;
    v18 = v192;
    if (v192)
    {
      v18 = (re *)(**(uint64_t (***)(re *))v192)(v192);
      if (v192 != (re *)v190)
        v18 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v191 + 40))(v191);
      v192 = 0;
    }
    v188 = re::globalAllocators(v18)[2];
    v189 = 0;
    v19 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v188 + 32))(v188, 32, 0);
    *v19 = (uint64_t)&off_24ED44E00;
    v19[1] = (uint64_t)this;
    v19[2] = (uint64_t)re::ecs2::CARESortingManager::invalidateEntityEventHandler<REComponentWillRemoveEvent>;
    v19[3] = 0;
    v189 = v19;
    v20 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v2, (uint64_t)v187, v6, 0);
    v22 = v21;
    v23 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v132);
    *v23 = v20;
    v23[1] = v22;
    v4 = v189;
    if (v189)
    {
      v4 = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v189)(v189);
      if (v189 != (uint64_t *)v187)
        v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v188 + 40))(v188);
      v189 = 0;
    }
    ++v5;
  }
  while (v5 != 3);
  v24 = re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v185 = re::globalAllocators((re *)v4)[2];
  v186 = 0;
  v25 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v185 + 32))(v185, 32, 0);
  *(_QWORD *)v25 = &off_24ED44D50;
  *((_QWORD *)v25 + 1) = this;
  *((_QWORD *)v25 + 2) = re::ecs2::CARESortingManager::invalidateTransformEventHandler<REComponentDidChangeEvent>;
  *((_QWORD *)v25 + 3) = 0;
  v186 = v25;
  v26 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v2, (uint64_t)v184, (uint64_t)v24, 0);
  v28 = v27;
  v29 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v132);
  *v29 = v26;
  v29[1] = v28;
  v30 = v186;
  if (v186)
  {
    v30 = (re *)(**(uint64_t (***)(re *))v186)(v186);
    if (v186 != (re *)v184)
      v30 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v185 + 40))(v185);
    v186 = 0;
  }
  v182 = re::globalAllocators(v30)[2];
  v183 = 0;
  v31 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v182 + 32))(v182, 32, 0);
  *(_QWORD *)v31 = &off_24ED44DA8;
  *((_QWORD *)v31 + 1) = this;
  *((_QWORD *)v31 + 2) = re::ecs2::CARESortingManager::invalidateTransformEventHandler<REComponentDidAddEvent>;
  *((_QWORD *)v31 + 3) = 0;
  v183 = v31;
  v32 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v2, (uint64_t)v181, (uint64_t)v24, 0);
  v34 = v33;
  v35 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v132);
  *v35 = v32;
  v35[1] = v34;
  v36 = v183;
  if (v183)
  {
    v36 = (re *)(**(uint64_t (***)(re *))v183)(v183);
    if (v183 != (re *)v181)
      v36 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v182 + 40))(v182);
    v183 = 0;
  }
  v179 = re::globalAllocators(v36)[2];
  v180 = 0;
  v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v179 + 32))(v179, 32, 0);
  *(_QWORD *)v37 = &off_24ED44E00;
  *((_QWORD *)v37 + 1) = this;
  *((_QWORD *)v37 + 2) = re::ecs2::CARESortingManager::invalidateTransformEventHandler<REComponentWillRemoveEvent>;
  *((_QWORD *)v37 + 3) = 0;
  v180 = v37;
  v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v2, (uint64_t)v178, (uint64_t)v24, 0);
  v40 = v39;
  v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v132);
  *v41 = v38;
  v41[1] = v40;
  v42 = v180;
  if (v180)
  {
    v42 = (re *)(**(uint64_t (***)(re *))v180)(v180);
    if (v180 != (re *)v178)
      v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v179 + 40))(v179);
    v180 = 0;
  }
  v176 = re::globalAllocators(v42)[2];
  v177 = 0;
  v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v176 + 32))(v176, 32, 0);
  *(_QWORD *)v43 = &off_24ED44E58;
  *((_QWORD *)v43 + 1) = this;
  *((_QWORD *)v43 + 2) = re::ecs2::CARESortingManager::invalidateTransformEventHandler<REBillboardTransformChangedEvent>;
  *((_QWORD *)v43 + 3) = 0;
  v177 = v43;
  v44 = re::EventBus::subscribe<re::ecs2::Entity,REBillboardTransformChangedEvent>(v2, (uint64_t)v175, 0, 0);
  v46 = v45;
  v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v132);
  *v47 = v44;
  v47[1] = v46;
  v48 = v177;
  if (v177)
  {
    v48 = (re *)(**(uint64_t (***)(re *))v177)(v177);
    if (v177 != (re *)v175)
      v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v176 + 40))(v176);
    v177 = 0;
  }
  v49 = re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v173 = re::globalAllocators(v48)[2];
  v174 = 0;
  v50 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v173 + 32))(v173, 32, 0);
  *(_QWORD *)v50 = &off_24ED44D50;
  *((_QWORD *)v50 + 1) = this;
  *((_QWORD *)v50 + 2) = re::ecs2::CARESortingManager::invalidateAnchorEventHandler<REComponentDidChangeEvent>;
  *((_QWORD *)v50 + 3) = 0;
  v174 = v50;
  v51 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v2, (uint64_t)v172, (uint64_t)v49, 0);
  v53 = v52;
  v54 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v132);
  *v54 = v51;
  v54[1] = v53;
  v55 = v174;
  if (v174)
  {
    v55 = (re *)(**(uint64_t (***)(re *))v174)(v174);
    if (v174 != (re *)v172)
      v55 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v173 + 40))(v173);
    v174 = 0;
  }
  v170 = re::globalAllocators(v55)[2];
  v171 = 0;
  v56 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v170 + 32))(v170, 32, 0);
  *(_QWORD *)v56 = &off_24ED44DA8;
  *((_QWORD *)v56 + 1) = this;
  *((_QWORD *)v56 + 2) = re::ecs2::CARESortingManager::invalidateAnchorEventHandler<REComponentDidAddEvent>;
  *((_QWORD *)v56 + 3) = 0;
  v171 = v56;
  v57 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v2, (uint64_t)v169, (uint64_t)v49, 0);
  v59 = v58;
  v60 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v132);
  *v60 = v57;
  v60[1] = v59;
  v61 = v171;
  if (v171)
  {
    v61 = (re *)(**(uint64_t (***)(re *))v171)(v171);
    if (v171 != (re *)v169)
      v61 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v170 + 40))(v170);
    v171 = 0;
  }
  v167 = re::globalAllocators(v61)[2];
  v168 = 0;
  v62 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v167 + 32))(v167, 32, 0);
  *(_QWORD *)v62 = &off_24ED44E00;
  *((_QWORD *)v62 + 1) = this;
  *((_QWORD *)v62 + 2) = re::ecs2::CARESortingManager::invalidateAnchorEventHandler<REComponentWillRemoveEvent>;
  *((_QWORD *)v62 + 3) = 0;
  v168 = v62;
  v63 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v2, (uint64_t)v166, (uint64_t)v49, 0);
  v65 = v64;
  v66 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v132);
  *v66 = v63;
  v66[1] = v65;
  v67 = v168;
  if (v168)
  {
    v67 = (re *)(**(uint64_t (***)(re *))v168)(v168);
    if (v168 != (re *)v166)
      v67 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v167 + 40))(v167);
    v168 = 0;
  }
  v68 = re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v164 = re::globalAllocators(v67)[2];
  v165 = 0;
  v69 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v164 + 32))(v164, 32, 0);
  *(_QWORD *)v69 = &off_24ED44DA8;
  *((_QWORD *)v69 + 1) = this;
  *((_QWORD *)v69 + 2) = re::ecs2::CARESortingManager::meshSortingComponentAddedEventHandler;
  *((_QWORD *)v69 + 3) = 0;
  v165 = v69;
  v70 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v2, (uint64_t)v163, (uint64_t)v68, 0);
  v72 = v71;
  v73 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v132);
  *v73 = v70;
  v73[1] = v72;
  v74 = v165;
  if (v165)
  {
    v74 = (re *)(**(uint64_t (***)(re *))v165)(v165);
    if (v165 != (re *)v163)
      v74 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v164 + 40))(v164);
    v165 = 0;
  }
  v161 = re::globalAllocators(v74)[2];
  v162 = 0;
  v75 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v161 + 32))(v161, 32, 0);
  *(_QWORD *)v75 = &off_24ED44E00;
  *((_QWORD *)v75 + 1) = this;
  *((_QWORD *)v75 + 2) = re::ecs2::CARESortingManager::invalidateEntityEventHandler<REComponentWillRemoveEvent>;
  *((_QWORD *)v75 + 3) = 0;
  v162 = v75;
  v76 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v2, (uint64_t)v160, (uint64_t)v68, 0);
  v78 = v77;
  v79 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v132);
  *v79 = v76;
  v79[1] = v78;
  v80 = v162;
  if (v162)
  {
    v80 = (re *)(**(uint64_t (***)(re *))v162)(v162);
    if (v162 != (re *)v160)
      v80 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v161 + 40))(v161);
    v162 = 0;
  }
  v158 = re::globalAllocators(v80)[2];
  v159 = 0;
  v81 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v158 + 32))(v158, 32, 0);
  *(_QWORD *)v81 = &off_24ED44EC0;
  *((_QWORD *)v81 + 1) = this;
  *((_QWORD *)v81 + 2) = re::ecs2::CARESortingManager::didChangeUISortingCASortOrderEventHandler;
  *((_QWORD *)v81 + 3) = 0;
  v159 = v81;
  v198 = v158;
  v199 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v197, (uint64_t)v157);
  v82 = re::EventBus::getTypeId<re::ecs2::UISortingComponentDidChangeCASortOrderEvent>();
  EventInfo = re::EventBus::addOrGetEventInfo(v2, v82);
  v207 = v198;
  v208 = 0;
  v84 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v206, (uint64_t)v197);
  v204 = re::globalAllocators(v84)[2];
  v205 = 0;
  v200 = &off_24ED45250;
  v202 = v207;
  v203 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v201, (uint64_t)v206);
  v205 = &v200;
  if (v208)
  {
    (**(void (***)(_BYTE *))v208)(v208);
    if (v208 != v206)
      (*(void (**)(uint64_t))(*(_QWORD *)v207 + 40))(v207);
  }
  v85 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)&v200, 0, 0);
  v87 = v86;
  if (v205)
  {
    ((void (*)(uint64_t (***)()))**v205)(v205);
    if (v205 != &v200)
      (*(void (**)(uint64_t))(*(_QWORD *)v204 + 40))(v204);
  }
  if (v199)
  {
    (**(void (***)(_BYTE *))v199)(v199);
    if (v199 != v197)
      (*(void (**)(uint64_t))(*(_QWORD *)v198 + 40))(v198);
  }
  v88 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v132);
  *v88 = v85;
  v88[1] = v87;
  v89 = v159;
  if (v159)
  {
    v89 = (re *)(**(uint64_t (***)(re *))v159)(v159);
    if (v159 != (re *)v157)
      v89 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v158 + 40))(v158);
    v159 = 0;
  }
  v155 = re::globalAllocators(v89)[2];
  v90 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v155 + 32))(v155, 32, 0);
  *(_QWORD *)v90 = &off_24ED44F28;
  *((_QWORD *)v90 + 1) = this;
  *((_QWORD *)v90 + 2) = re::ecs2::CARESortingManager::invalidateEntityEventHandler<re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent>;
  *((_QWORD *)v90 + 3) = 0;
  v156 = v90;
  v198 = v155;
  v199 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v197, (uint64_t)v154);
  v91 = re::EventBus::getTypeId<re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent>();
  v92 = re::EventBus::addOrGetEventInfo(v2, v91);
  v207 = v198;
  v208 = 0;
  v93 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v206, (uint64_t)v197);
  v204 = re::globalAllocators(v93)[2];
  v205 = 0;
  v200 = &off_24ED452A8;
  v202 = v207;
  v203 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v201, (uint64_t)v206);
  v205 = &v200;
  if (v208)
  {
    (**(void (***)(_BYTE *))v208)(v208);
    if (v208 != v206)
      (*(void (**)(uint64_t))(*(_QWORD *)v207 + 40))(v207);
  }
  v94 = re::EventBus::EventInfo::addSubscription(v92, (uint64_t)&v200, 0, 0);
  v96 = v95;
  if (v205)
  {
    ((void (*)(uint64_t (***)()))**v205)(v205);
    if (v205 != &v200)
      (*(void (**)(uint64_t))(*(_QWORD *)v204 + 40))(v204);
  }
  if (v199)
  {
    (**(void (***)(_BYTE *))v199)(v199);
    if (v199 != v197)
      (*(void (**)(uint64_t))(*(_QWORD *)v198 + 40))(v198);
  }
  v97 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v132);
  *v97 = v94;
  v97[1] = v96;
  v98 = v156;
  if (v156)
  {
    v98 = (re *)(**(uint64_t (***)(re *))v156)(v156);
    if (v156 != (re *)v154)
      v98 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v155 + 40))(v155);
    v156 = 0;
  }
  v152 = re::globalAllocators(v98)[2];
  v99 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v152 + 32))(v152, 32, 0);
  *(_QWORD *)v99 = &off_24ED44F90;
  *((_QWORD *)v99 + 1) = this;
  *((_QWORD *)v99 + 2) = re::ecs2::CARESortingManager::invalidateEntityEventHandler<re::ecs2::UISortingComponentDidChangeIsPlatterEvent>;
  *((_QWORD *)v99 + 3) = 0;
  v153 = v99;
  v198 = v152;
  v199 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v197, (uint64_t)v151);
  v100 = re::EventBus::getTypeId<re::ecs2::UISortingComponentDidChangeIsPlatterEvent>();
  v101 = re::EventBus::addOrGetEventInfo(v2, v100);
  v207 = v198;
  v208 = 0;
  v102 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v206, (uint64_t)v197);
  v204 = re::globalAllocators(v102)[2];
  v205 = 0;
  v200 = &off_24ED45300;
  v202 = v207;
  v203 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v201, (uint64_t)v206);
  v205 = &v200;
  if (v208)
  {
    (**(void (***)(_BYTE *))v208)(v208);
    if (v208 != v206)
      (*(void (**)(uint64_t))(*(_QWORD *)v207 + 40))(v207);
  }
  v103 = re::EventBus::EventInfo::addSubscription(v101, (uint64_t)&v200, 0, 0);
  v105 = v104;
  if (v205)
  {
    ((void (*)(uint64_t (***)()))**v205)(v205);
    if (v205 != &v200)
      (*(void (**)(uint64_t))(*(_QWORD *)v204 + 40))(v204);
  }
  if (v199)
  {
    (**(void (***)(_BYTE *))v199)(v199);
    if (v199 != v197)
      (*(void (**)(uint64_t))(*(_QWORD *)v198 + 40))(v198);
  }
  v106 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v132);
  *v106 = v103;
  v106[1] = v105;
  v107 = v153;
  if (v153)
  {
    v107 = (re *)(**(uint64_t (***)(re *))v153)(v153);
    if (v153 != (re *)v151)
      v107 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v152 + 40))(v152);
    v153 = 0;
  }
  v149 = re::globalAllocators(v107)[2];
  v108 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v149 + 32))(v149, 32, 0);
  *(_QWORD *)v108 = &off_24ED44FF8;
  *((_QWORD *)v108 + 1) = this;
  *((_QWORD *)v108 + 2) = re::ecs2::CARESortingManager::invalidateEntityEventHandler<RESceneEntityDidReparentEvent>;
  *((_QWORD *)v108 + 3) = 0;
  v150 = v108;
  v109 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v2, (uint64_t)v148, 0, 0);
  v111 = v110;
  v112 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v132);
  *v112 = v109;
  v112[1] = v111;
  v113 = v150;
  if (v150)
  {
    v113 = (re *)(**(uint64_t (***)(re *))v150)(v150);
    if (v150 != (re *)v148)
      v113 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v149 + 40))(v149);
    v150 = 0;
  }
  v146 = re::globalAllocators(v113)[2];
  v114 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v146 + 32))(v146, 32, 0);
  *(_QWORD *)v114 = &off_24ED45050;
  *((_QWORD *)v114 + 1) = this;
  *((_QWORD *)v114 + 2) = re::ecs2::CARESortingManager::activateEntityEventHandler;
  *((_QWORD *)v114 + 3) = 0;
  v147 = v114;
  v115 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidActivateEvent>(v2, (uint64_t)v145, 0, 0);
  v117 = v116;
  v118 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v132);
  *v118 = v115;
  v118[1] = v117;
  v119 = v147;
  if (v147)
  {
    v119 = (re *)(**(uint64_t (***)(re *))v147)(v147);
    if (v147 != (re *)v145)
      v119 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v146 + 40))(v146);
    v147 = 0;
  }
  v143 = re::globalAllocators(v119)[2];
  v120 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v143 + 32))(v143, 32, 0);
  *(_QWORD *)v120 = &off_24ED450A8;
  *((_QWORD *)v120 + 1) = this;
  *((_QWORD *)v120 + 2) = re::ecs2::CARESortingManager::deactivateOrRemoveEntityEventHandler<RESceneEntityWillDeactivateEvent>;
  *((_QWORD *)v120 + 3) = 0;
  v144 = v120;
  v121 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v2, (uint64_t)v142, 0, 0);
  v123 = v122;
  v124 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v132);
  *v124 = v121;
  v124[1] = v123;
  v125 = v144;
  if (v144)
  {
    v125 = (re *)(**(uint64_t (***)(re *))v144)(v144);
    if (v144 != (re *)v142)
      v125 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v143 + 40))(v143);
    v144 = 0;
  }
  v140 = re::globalAllocators(v125)[2];
  v126 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v140 + 32))(v140, 32, 0);
  *v126 = &off_24ED45100;
  v126[1] = this;
  v126[2] = re::ecs2::CARESortingManager::deactivateOrRemoveEntityEventHandler<RESceneEntityWillRemoveEvent>;
  v126[3] = 0;
  v141 = v126;
  v127 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v2, (uint64_t)v139, 0, 0);
  v129 = v128;
  v130 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)v132);
  *v130 = v127;
  v130[1] = v129;
  if (v141)
  {
    (**(void (***)(_BYTE *))v141)(v141);
    if (v141 != v139)
      (*(void (**)(uint64_t))(*(_QWORD *)v140 + 40))(v140);
    v141 = 0;
  }
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 8, (uint64_t *)&v138, (uint64_t)v132);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)v132);
  result = v132[0];
  if (v132[0])
  {
    if ((v133 & 1) == 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v132[0] + 40))();
  }
  return result;
}

uint64_t re::ecs2::CARESortingManager::invalidateEntityEventHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  if ((*(_BYTE *)(a2 + 288) & 1) != 0)
  {
    v3 = a1 + 152;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 152, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  _BYTE v9[24];
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a2 + 24);
  v11 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a2);
  v7 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(a1, 0, (uint64_t)v9, a3, a4);
  if (v11)
  {
    (**(void (***)(_BYTE *))v11)(v11);
    if (v11 != v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  }
  return v7;
}

uint64_t re::ecs2::CARESortingManager::invalidateEntityEventHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  if ((*(_BYTE *)(a2 + 288) & 1) != 0)
  {
    v3 = a1 + 152;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 152, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  _BYTE v9[24];
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a2 + 24);
  v11 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a2);
  v7 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(a1, 0, (uint64_t)v9, a3, a4);
  if (v11)
  {
    (**(void (***)(_BYTE *))v11)(v11);
    if (v11 != v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  }
  return v7;
}

uint64_t re::ecs2::CARESortingManager::invalidateEntityEventHandler<REComponentWillRemoveEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  if ((*(_BYTE *)(a2 + 288) & 1) != 0)
  {
    v3 = a1 + 152;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 152, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::CARESortingManager::invalidateTransformEventHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  if ((*(_BYTE *)(a2 + 288) & 1) != 0)
  {
    v3 = a1 + 248;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 248, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::CARESortingManager::invalidateTransformEventHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  if ((*(_BYTE *)(a2 + 288) & 1) != 0)
  {
    v3 = a1 + 248;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 248, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::CARESortingManager::invalidateTransformEventHandler<REComponentWillRemoveEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  if ((*(_BYTE *)(a2 + 288) & 1) != 0)
  {
    v3 = a1 + 248;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 248, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  _BYTE v9[24];
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a2 + 24);
  v11 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a2);
  v7 = re::EventBus::subscribe<re::ecs2::Entity,REBillboardTransformChangedEvent>(a1, 0, (uint64_t)v9, a3, a4);
  if (v11)
  {
    (**(void (***)(_BYTE *))v11)(v11);
    if (v11 != v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  }
  return v7;
}

uint64_t re::ecs2::CARESortingManager::invalidateTransformEventHandler<REBillboardTransformChangedEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  if ((*(_BYTE *)(a2 + 288) & 1) != 0)
  {
    v3 = a1 + 248;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 248, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::CARESortingManager::invalidateAnchorEventHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  if ((*(_BYTE *)(a2 + 288) & 1) != 0)
  {
    v3 = a1 + 296;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 296, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::CARESortingManager::invalidateAnchorEventHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  if ((*(_BYTE *)(a2 + 288) & 1) != 0)
  {
    v3 = a1 + 296;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 296, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::CARESortingManager::invalidateAnchorEventHandler<REComponentWillRemoveEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  if ((*(_BYTE *)(a2 + 288) & 1) != 0)
  {
    v3 = a1 + 296;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 296, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::CARESortingManager::meshSortingComponentAddedEventHandler(re::ecs2::CARESortingManager *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v4 && *(_BYTE *)(v4 + 25) != 5 && !*(_BYTE *)(v4 + 168))
    re::ecs2::CARESortingManager::removeEntityFromTracking(a1, (re::ecs2::Entity *)a2);
  return 0;
}

uint64_t re::ecs2::CARESortingManager::didChangeUISortingCASortOrderEventHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  if ((*(_BYTE *)(a2 + 288) & 1) != 0)
  {
    v3 = a1 + 344;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 344, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::CARESortingManager::invalidateEntityEventHandler<re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  if ((*(_BYTE *)(a2 + 288) & 1) != 0)
  {
    v3 = a1 + 152;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 152, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::CARESortingManager::invalidateEntityEventHandler<re::ecs2::UISortingComponentDidChangeIsPlatterEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  if ((*(_BYTE *)(a2 + 288) & 1) != 0)
  {
    v3 = a1 + 152;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 152, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::CARESortingManager::invalidateEntityEventHandler<RESceneEntityDidReparentEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v5 = a2;
  if ((*(_BYTE *)(a2 + 288) & 1) != 0)
  {
    v3 = a1 + 152;
    if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 152, &v5)&& !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1 + 200, &v5))
    {
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(v3, &v5);
    }
  }
  return 0;
}

uint64_t re::ecs2::CARESortingManager::activateEntityEventHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const __int16 *v4;
  int16x8_t *v5;
  int16x8_t v6;
  int v7;
  uint16x8_t v8;
  uint64_t v10;

  v10 = a2;
  ++re::ecs2::CARESortingDebugging::m_entitiesActivated;
  v3 = *(unsigned __int16 *)(a2 + 82);
  if (*(_WORD *)(a2 + 82))
  {
    v4 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                         + 16);
    v5 = *(int16x8_t **)(a2 + 88);
    v6 = vld1q_dup_s16(v4);
    v7 = 1;
    while (1)
    {
      v8 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v6, *v5), (int8x16_t)xmmword_2260F1E80);
      v8.i16[0] = vmaxvq_u16(v8);
      if (v8.i32[0])
        break;
      v7 -= 8;
      ++v5;
      if (!--v3)
        goto LABEL_8;
    }
    if (v8.u16[0] - v7 < *(unsigned __int16 *)(a2 + 80))
      ++re::ecs2::CARESortingDebugging::m_uiSortingComponentActivated;
  }
LABEL_8:
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1 + 152, &v10);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1 + 248, &v10);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(a1 + 200, &v10);
  return 0;
}

uint64_t re::ecs2::CARESortingManager::deactivateOrRemoveEntityEventHandler<RESceneEntityWillDeactivateEvent>(re::ecs2::CARESortingManager *a1, uint64_t a2)
{
  uint64_t v2;
  const __int16 *v3;
  int16x8_t *v4;
  int16x8_t v5;
  int v6;
  uint16x8_t v7;

  ++re::ecs2::CARESortingDebugging::m_entitiesDeactivated;
  v2 = *(unsigned __int16 *)(a2 + 82);
  if (*(_WORD *)(a2 + 82))
  {
    v3 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                         + 16);
    v4 = *(int16x8_t **)(a2 + 88);
    v5 = vld1q_dup_s16(v3);
    v6 = 1;
    while (1)
    {
      v7 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v5, *v4), (int8x16_t)xmmword_2260F1E80);
      v7.i16[0] = vmaxvq_u16(v7);
      if (v7.i32[0])
        break;
      v6 -= 8;
      ++v4;
      if (!--v2)
        goto LABEL_8;
    }
    if (v7.u16[0] - v6 < *(unsigned __int16 *)(a2 + 80))
      ++re::ecs2::CARESortingDebugging::m_uiSortingComponentDeactivated;
  }
LABEL_8:
  re::ecs2::CARESortingManager::removeEntityFromTracking(a1, (re::ecs2::Entity *)a2);
  return 0;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  _BYTE v9[24];
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = *(_QWORD *)(a2 + 24);
  v11 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a2);
  v7 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(a1, 0, (uint64_t)v9, a3, a4);
  if (v11)
  {
    (**(void (***)(_BYTE *))v11)(v11);
    if (v11 != v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  }
  return v7;
}

uint64_t re::ecs2::CARESortingManager::deactivateOrRemoveEntityEventHandler<RESceneEntityWillRemoveEvent>(re::ecs2::CARESortingManager *a1, uint64_t a2)
{
  uint64_t v2;
  const __int16 *v3;
  int16x8_t *v4;
  int16x8_t v5;
  int v6;
  uint16x8_t v7;

  ++re::ecs2::CARESortingDebugging::m_entitiesDeactivated;
  v2 = *(unsigned __int16 *)(a2 + 82);
  if (*(_WORD *)(a2 + 82))
  {
    v3 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::UISortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                         + 16);
    v4 = *(int16x8_t **)(a2 + 88);
    v5 = vld1q_dup_s16(v3);
    v6 = 1;
    while (1)
    {
      v7 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v5, *v4), (int8x16_t)xmmword_2260F1E80);
      v7.i16[0] = vmaxvq_u16(v7);
      if (v7.i32[0])
        break;
      v6 -= 8;
      ++v4;
      if (!--v2)
        goto LABEL_8;
    }
    if (v7.u16[0] - v6 < *(unsigned __int16 *)(a2 + 80))
      ++re::ecs2::CARESortingDebugging::m_uiSortingComponentDeactivated;
  }
LABEL_8:
  re::ecs2::CARESortingManager::removeEntityFromTracking(a1, (re::ecs2::Entity *)a2);
  return 0;
}

uint64_t re::ecs2::CARESortingManager::unregisterScene(re::ecs2::CARESortingManager *this, re::ecs2::Entity ***a2)
{
  re::ecs2::Entity **v3;
  re::ecs2::Entity **v4;
  uint64_t v5;
  re::ecs2::Entity *v6;
  char *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  re::ecs2::Scene *v14;

  v14 = (re::ecs2::Scene *)a2;
  v3 = a2[16];
  if (v3)
  {
    v4 = a2[18];
    v5 = 8 * (_QWORD)v3;
    do
    {
      v6 = *v4++;
      re::ecs2::CARESortingManager::removeEntityFromTracking(this, v6);
      v5 -= 8;
    }
    while (v5);
  }
  v7 = (char *)this + 8;
  result = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)v7, (uint64_t *)&v14);
  if (result)
  {
    v9 = *((_QWORD *)v14 + 36);
    if (v9)
    {
      v10 = result;
      v11 = *(_QWORD *)(result + 40);
      if (v11)
      {
        for (i = 0; i != v11; ++i)
        {
          v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v10, i);
          re::EventBus::unsubscribe(v9, *(_QWORD *)v13, *(_QWORD *)(v13 + 8));
        }
      }
    }
    return re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v7, (uint64_t *)&v14);
  }
  return result;
}

uint64_t re::ecs2::CARESortingManager::removeEntityFromTracking(re::ecs2::CARESortingManager *this, re::ecs2::Entity *a2)
{
  char *v3;
  unint64_t *v4;
  re::ecs2::WorldSortingState *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  re::ecs2::Entity *v18;

  v18 = a2;
  v3 = (char *)this + 104;
  v4 = (unint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 104, (uint64_t *)&v18);
  if (v4)
  {
    v5 = (re::ecs2::WorldSortingState *)re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 56, *v4);
    if (v5)
      re::ecs2::WorldSortingState::removeEntityFromTracking(v5, v18);
    re::HashTable<re::ecs2::Entity const*,re::ecs2::EntityVisualProxyScopeData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::remove((uint64_t)v3, (uint64_t *)&v18);
  }
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 152, (uint64_t *)&v18);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add((uint64_t)this + 200, (uint64_t *)&v18);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 248, (uint64_t *)&v18);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 296, (uint64_t *)&v18);
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 344, (uint64_t *)&v18);
  if (*((_QWORD *)this + 56))
  {
    v6 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * ((unint64_t)v18 ^ ((unint64_t)v18 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                             * ((unint64_t)v18 ^ ((unint64_t)v18 >> 30))) >> 27));
    v7 = (v6 ^ (v6 >> 31)) % *((unsigned int *)this + 118);
    v8 = *((_QWORD *)this + 57);
    v9 = *(unsigned int *)(v8 + 4 * v7);
    if ((_DWORD)v9 != 0x7FFFFFFF)
    {
      v10 = *((_QWORD *)this + 58);
      if (*(re::ecs2::Entity **)(v10 + 160 * v9 + 16) == v18)
      {
        *(_DWORD *)(v8 + 4 * v7) = *(_DWORD *)(v10 + 160 * v9 + 8) & 0x7FFFFFFF;
LABEL_12:
        v12 = *((_QWORD *)this + 58);
        v13 = v12 + 160 * v9;
        v16 = *(_DWORD *)(v13 + 8);
        v15 = (int *)(v13 + 8);
        v14 = v16;
        if (v16 < 0)
        {
          *v15 = v14 & 0x7FFFFFFF;
          v12 = *((_QWORD *)this + 58);
          v14 = *(_DWORD *)(v12 + 160 * v9 + 8);
        }
        *(_DWORD *)(v12 + 160 * v9 + 8) = *((_DWORD *)this + 121) | v14 & 0x80000000;
        *((_DWORD *)this + 121) = v9;
        --*((_DWORD *)this + 119);
        ++*((_DWORD *)this + 122);
      }
      else
      {
        while (1)
        {
          v11 = v9;
          LODWORD(v9) = *(_DWORD *)(v10 + 160 * v9 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v9 == 0x7FFFFFFF)
            break;
          if (*(re::ecs2::Entity **)(v10 + 160 * v9 + 16) == v18)
          {
            *(_DWORD *)(v10 + 160 * v11 + 8) = *(_DWORD *)(v10 + 160 * v11 + 8) & 0x80000000 | *(_DWORD *)(v10 + 160 * v9 + 8) & 0x7FFFFFFF;
            goto LABEL_12;
          }
        }
      }
    }
  }
  return re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)this + 392, (uint64_t *)&v18);
}

void re::ecs2::CARESortingManager::debugDumpSorting(re::ecs2::CARESortingManager *this, __CFString *a2)
{
  char v2;

  re::ecs2::CARESortingDebugging::dumpSorting((re::ecs2::CARESortingDebugging *)&v2, a2, this);
}

uint64_t *re::ecs2::CARESortingManager::tryGetCodirectionalGroupForEntity@<X0>(re::ecs2::CARESortingManager *this@<X0>, const re::ecs2::Entity *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;
  const re::ecs2::Entity *v6;

  v6 = a2;
  result = (uint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 104, (uint64_t *)&v6);
  if (result)
  {
    result = (uint64_t *)re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 56, result);
    if (result)
      return re::ecs2::WorldSortingState::tryGetCodirectionalGroupForEntity((uint64_t)result, (uint64_t)v6, a3);
  }
  *a3 = 0;
  return result;
}

uint64_t re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 184 * v4 + 16) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 184 * v4 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v6 + 184 * v4 + 16) == v2)
        return v6 + 184 * v4 + 24;
    }
    return 0;
  }
  return v6 + 184 * v4 + 24;
}

uint64_t *re::ecs2::WorldSortingState::tryGetCodirectionalGroupForEntity@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;

  v6 = a2;
  result = (uint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 96, &v6);
  if (result)
  {
    v5 = *result;
    *a3 = *result;
    if (v5)
      return (uint64_t *)(id)(v5 + 8);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void re::ecs2::CARESortingManager::~CARESortingManager(re::ecs2::CARESortingManager *this)
{
  re::ecs2::CARESortingManager::~CARESortingManager(this);
  JUMPOUT(0x2276933B8);
}

{
  re::AssetHandle::~AssetHandle((re::ecs2::CARESortingManager *)((char *)this + 528));
  re::HashTable<unsigned long long,re::ecs2::MeshSortGroupToken,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 56);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 49);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 43);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 37);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 31);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 25);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 19);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 13);
  re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 7);
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 1);
}

void re::ecs2::CAMeshCodirectionalGroup::~CAMeshCodirectionalGroup(re::ecs2::CAMeshCodirectionalGroup *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED44CE0;
  v2 = *((_QWORD *)this + 49);
  if (v2)
  {
    if (*((_QWORD *)this + 53))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 53) = 0;
    *((_QWORD *)this + 50) = 0;
    *((_QWORD *)this + 51) = 0;
    *((_QWORD *)this + 49) = 0;
    ++*((_DWORD *)this + 104);
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 43);
  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)this + 37);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 31);
  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)this + 25);
  re::HashTable<unsigned long long,re::SharedPtr<re::RealityFile>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 19);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 3);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED44CE0;
  v2 = *((_QWORD *)this + 49);
  if (v2)
  {
    if (*((_QWORD *)this + 53))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 53) = 0;
    *((_QWORD *)this + 50) = 0;
    *((_QWORD *)this + 51) = 0;
    *((_QWORD *)this + 49) = 0;
    ++*((_DWORD *)this + 104);
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 43);
  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)this + 37);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 31);
  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)this + 25);
  re::HashTable<unsigned long long,re::SharedPtr<re::RealityFile>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 19);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 3);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t *re::ecs2::CAMeshCodirectionalGroup::allocator(re::ecs2::CAMeshCodirectionalGroup *this)
{
}

void re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::addAsCopy(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, (uint64_t *)(v8 + 16));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 24;
    }
  }
}

void re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  signed int v21;
  _BYTE v22[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(_QWORD *)&v22[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)v22, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v22;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)v22 = v5;
      *(_QWORD *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (_QWORD *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v13 - 1) & 0x80000000) != 0)
          {
            v14 = *(v13 - 2);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 24 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 24 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17) = v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v17 + 16) = *v13;
            *v13 = 0;
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 3;
          --v10;
        }
        while (v10);
      }
      re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2)
      v21 = a2;
    else
      v21 = 3;
  }
}

uint64_t re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v7 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v7 == 0x7FFFFFFF)
  {
    v7 = *(unsigned int *)(a1 + 32);
    v8 = v7;
    if ((_DWORD)v7 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v8 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v8 + 1;
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_DWORD *)(v9 + 24 * v7 + 8);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_DWORD *)(v9 + 24 * v7 + 8);
    *(_DWORD *)(a1 + 36) = v10 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v9 + 24 * v7 + 8) = v10 | 0x80000000;
  v11 = a2;
  v12 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v7 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v7 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v7) = a3;
  v13 = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v7 + 16) = *a4;
  if (v13)
  {
    v14 = (id)(v13 + 8);
    v12 = *(_QWORD *)(a1 + 8);
  }
  *(_DWORD *)(v12 + 4 * v11) = v7;
  ++*(_DWORD *)(a1 + 28);
  return v7;
}

double re::make::shared::inplace<re::ecs2::MeshSortingComponent>@<D0>(ArcSharedObject *a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v3;
  uint64_t v4;
  double result;

  *((_OWORD *)a1 + 27) = 0u;
  *((_OWORD *)a1 + 28) = 0u;
  *((_OWORD *)a1 + 25) = 0u;
  *((_OWORD *)a1 + 26) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  v3 = (_OWORD *)((char *)a1 + 304);
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v4 + 16) = 0;
  *(_WORD *)(v4 + 24) = 0;
  *(_QWORD *)v4 = &off_24ED45598;
  *(_QWORD *)(v4 + 32) = 0;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 48) = 0;
  *(_BYTE *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 160) = 0x7FFFFFFF00000000;
  *(_BYTE *)(v4 + 168) = 0;
  *(_QWORD *)(v4 + 176) = 0;
  *(_WORD *)(v4 + 184) = 0;
  *(_BYTE *)(v4 + 192) = 0;
  *(_BYTE *)(v4 + 224) = 0;
  *(_BYTE *)(v4 + 256) = 0;
  *(_QWORD *)(v4 + 392) = 0;
  *(_BYTE *)(v4 + 400) = 0;
  *(_BYTE *)(v4 + 416) = 0;
  result = 0.0;
  *(_OWORD *)((char *)v3 + 28) = 0u;
  *(_OWORD *)(v4 + 304) = 0u;
  *(_OWORD *)(v4 + 320) = 0u;
  *(_DWORD *)(v4 + 384) = 0;
  *(_OWORD *)(v4 + 352) = 0u;
  *(_OWORD *)(v4 + 368) = 0u;
  *a2 = v4;
  return result;
}

void re::ecs2::MeshSortingComponent::~MeshSortingComponent(re::ecs2::MeshSortingComponent *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24ED45598;
  v2 = *((_QWORD *)this + 45);
  if (v2)
  {
    if (*((_QWORD *)this + 49))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 49) = 0;
    *((_QWORD *)this + 46) = 0;
    *((_QWORD *)this + 47) = 0;
    *((_QWORD *)this + 45) = 0;
    ++*((_DWORD *)this + 96);
  }
  v3 = *((_QWORD *)this + 40);
  if (v3)
  {
    if (*((_QWORD *)this + 44))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 44) = 0;
    *((_QWORD *)this + 41) = 0;
    *((_QWORD *)this + 42) = 0;
    *((_QWORD *)this + 40) = 0;
    ++*((_DWORD *)this + 86);
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24ED45598;
  v2 = *((_QWORD *)this + 45);
  if (v2)
  {
    if (*((_QWORD *)this + 49))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 49) = 0;
    *((_QWORD *)this + 46) = 0;
    *((_QWORD *)this + 47) = 0;
    *((_QWORD *)this + 45) = 0;
    ++*((_DWORD *)this + 96);
  }
  v3 = *((_QWORD *)this + 40);
  if (v3)
  {
    if (*((_QWORD *)this + 44))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 44) = 0;
    *((_QWORD *)this + 41) = 0;
    *((_QWORD *)this + 42) = 0;
    *((_QWORD *)this + 40) = 0;
    ++*((_DWORD *)this + 86);
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

void re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED44D50;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED44D50;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED44DA8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED44DA8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED44E00;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED44E00;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED44E58;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED44E58;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,REBillboardTransformChangedEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED44EC0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED44EC0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED44F28;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED44F28;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED44F90;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED44F90;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED44FF8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED44FF8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED45050;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED45050;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED450A8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED450A8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED45100;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED45100;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::CARESortingManager,REEventHandlerResult (re::ecs2::CARESortingManager::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

double re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 184;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1;
  uint64_t *v3;
  double result;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + 8) = v1 & 0x7FFFFFFF;
    v3 = (uint64_t *)(a1 + 24);
    re::HashTable<unsigned long long,re::SharedPtr<re::RealityFile>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)(a1 + 120));
    re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)(a1 + 72));
    return re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit(v3);
  }
  return result;
}

void re::HashTable<re::ecs2::Entity const*,re::ecs2::TransformAndInverse,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  signed int v28;
  _BYTE v29[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v29, 0, 36);
      *(_QWORD *)&v29[36] = 0x7FFFFFFFLL;
      re::HashTable<re::DynamicString,re::MaterialTextureBlockData,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v29, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v29;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v29[8];
      *(_OWORD *)v29 = v5;
      *(_QWORD *)&v29[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v29[24];
      *(_OWORD *)&v29[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v29[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v13 - 8) & 0x80000000) != 0)
          {
            v14 = *(_QWORD *)(v13 - 16);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<re::ecs2::Entity const*,re::ecs2::TransformAndInverse,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 160 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 160 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 160 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 160 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 160 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 160 * v17) = v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 160 * v17 + 16) = *(_QWORD *)v13;
            v21 = (_OWORD *)(*(_QWORD *)(a1 + 16) + 160 * v17);
            v22 = *(_OWORD *)(v13 + 16);
            v23 = *(_OWORD *)(v13 + 32);
            v24 = *(_OWORD *)(v13 + 64);
            v21[4] = *(_OWORD *)(v13 + 48);
            v21[5] = v24;
            v21[2] = v22;
            v21[3] = v23;
            v25 = *(_OWORD *)(v13 + 80);
            v26 = *(_OWORD *)(v13 + 96);
            v27 = *(_OWORD *)(v13 + 128);
            v21[8] = *(_OWORD *)(v13 + 112);
            v21[9] = v27;
            v21[6] = v25;
            v21[7] = v26;
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 160;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned long long,re::ecs2::MeshSortGroupToken,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v29);
    }
  }
  else
  {
    if (a2)
      v28 = a2;
    else
      v28 = 3;
  }
}

void re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(_anonymous_namespace_ *a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  signed int v33;
  int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  _DWORD *v53;
  _QWORD *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  id v64;
  signed int v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  _DWORD *v73;
  unsigned int *v74;
  unsigned int *v75;
  _QWORD *v76;
  int *v77;
  _BYTE v78[44];

  v3 = (uint64_t)a1;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *((_DWORD *)a1 + 6) != a2 && *((_DWORD *)a1 + 7) <= a2)
    {
      memset(v78, 0, 36);
      *(_QWORD *)&v78[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v78, v4, a2);
      v5 = *(_OWORD *)v3;
      *(_QWORD *)v3 = *(_QWORD *)v78;
      v6 = *(_QWORD *)(v3 + 16);
      v7 = *(_OWORD *)&v78[8];
      *(_OWORD *)v78 = v5;
      *(_QWORD *)&v78[16] = v6;
      *(_OWORD *)(v3 + 8) = v7;
      v9 = *(_OWORD *)&v78[24];
      *(_OWORD *)&v78[24] = *(_OWORD *)(v3 + 24);
      v8 = *(_DWORD *)&v78[32];
      *(_OWORD *)(v3 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v66 = v8;
        v67 = v3;
        v69 = v6;
        do
        {
          if ((*(_DWORD *)(v6 + 184 * v11 + 8) & 0x80000000) != 0)
          {
            v14 = (unint64_t *)(v6 + 184 * v11);
            v17 = *v14;
            v16 = (uint64_t)(v14 + 3);
            v15 = v17;
            v18 = *(unsigned int *)(v3 + 24);
            v19 = v17 % v18;
            v20 = *(_DWORD *)(v3 + 36);
            if (v20 == 0x7FFFFFFF)
            {
              v20 = *(_DWORD *)(v3 + 32);
              v21 = v20;
              if (v20 == (_DWORD)v18)
              {
                re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(v3, (2 * v12));
                v19 = v15 % *(unsigned int *)(v3 + 24);
                v21 = *(_DWORD *)(v3 + 32);
                v13 = *(_QWORD *)(v3 + 8);
              }
              *(_DWORD *)(v3 + 32) = v21 + 1;
              v22 = *(_QWORD *)(v3 + 16);
              v23 = *(_DWORD *)(v22 + 184 * v20 + 8);
            }
            else
            {
              v22 = *(_QWORD *)(v3 + 16);
              v23 = *(_DWORD *)(v22 + 184 * v20 + 8);
              *(_DWORD *)(v3 + 36) = v23 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v22 + 184 * v20 + 8) = v23 | 0x80000000;
            v68 = v19;
            v24 = *(_QWORD *)(v3 + 16) + 184 * v20;
            *(_DWORD *)(v24 + 8) = *(_DWORD *)(v24 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v19);
            *(_QWORD *)(*(_QWORD *)(v3 + 16) + 184 * v20) = v15;
            *(_QWORD *)(*(_QWORD *)(v3 + 16) + 184 * v20 + 16) = *(_QWORD *)(v6 + 184 * v11 + 16);
            v71 = *(_QWORD *)(v3 + 16);
            v72 = v20;
            v25 = v71 + 184 * v20;
            re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::HashSetBase(v25 + 24, v16);
            v26 = v6 + 184 * v11;
            re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::HashSetBase(v25 + 72, v26 + 72);
            *(_OWORD *)(v25 + 120) = 0u;
            v27 = v25 + 120;
            *(_QWORD *)(v27 + 36) = 0x7FFFFFFFLL;
            *(_DWORD *)(v27 + 32) = 0;
            v70 = v27;
            *(_OWORD *)(v27 + 16) = 0u;
            v28 = *(_QWORD *)(v26 + 120);
            if (v28)
            {
              v29 = v69 + 184 * v11;
              v32 = *(_DWORD *)(v29 + 148);
              v31 = (unsigned int *)(v29 + 148);
              v30 = v32;
              if (v32 <= 3)
                v33 = 3;
              else
                v33 = v30;
              v77 = (int *)(v27 + 36);
              re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(v27, v28, v33);
              v34 = (int *)(v27 + 36);
              v36 = v71;
              v35 = v20;
              v76 = (_QWORD *)(v71 + 184 * v20 + 148);
              if (*(_DWORD *)v76)
              {
                v37 = *(unsigned int *)(v71 + 184 * v20 + 144);
                if ((_DWORD)v37)
                {
                  memset_pattern16(*(void **)(v71 + 184 * v20 + 128), &unk_2260EB7B0, 4 * v37);
                  v34 = (int *)(v27 + 36);
                }
                v38 = v71 + 184 * v20;
                v41 = *(_DWORD *)(v38 + 152);
                v40 = (unsigned int *)(v38 + 152);
                v39 = v41;
                if (v41)
                {
                  v42 = 0;
                  v43 = 0;
                  do
                  {
                    v44 = *(_QWORD *)(v71 + 184 * v20 + 136) + v42;
                    v45 = *(_DWORD *)(v44 + 8);
                    if (v45 < 0)
                    {
                      *(_DWORD *)(v44 + 8) = v45 & 0x7FFFFFFF;
                      v46 = *(_QWORD *)(v44 + 24);
                      if (v46)
                      {

                        v34 = v77;
                        *(_QWORD *)(v44 + 24) = 0;
                        v39 = *v40;
                      }
                    }
                    ++v43;
                    v42 += 32;
                  }
                  while (v43 < v39);
                }
                v36 = v71;
                *v34 = 0x7FFFFFFF;
                *v76 = 0;
                ++*(_DWORD *)(v70 + 40);
                v35 = v20;
              }
              v75 = (unsigned int *)(v36 + 184 * v35 + 144);
              if (*v75 < *v31)
              {
                re::HashTable<re::AssetType const*,re::SharedPtr<re::RealityFileAssetProvider::PerTypeLoadCallbacks>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::setCapacity(v70, *v31);
                v34 = v77;
              }
              v47 = v69 + 184 * v11;
              v48 = *(unsigned int *)(v47 + 152);
              v74 = (unsigned int *)(v47 + 152);
              if (*(_DWORD *)(v47 + 152))
              {
                v49 = 0;
                v50 = 0;
                v51 = v71 + 184 * v72;
                v52 = (uint64_t *)(v51 + 136);
                v53 = (_DWORD *)(v51 + 152);
                v54 = (_QWORD *)(v51 + 128);
                v73 = (_DWORD *)(v51 + 152);
                do
                {
                  v55 = (unint64_t *)(*(_QWORD *)(v69 + 184 * v11 + 136) + v49);
                  if ((v55[1] & 0x80000000) != 0)
                  {
                    v56 = *v55;
                    v57 = *v75;
                    v58 = *v55 % v57;
                    v59 = *v34;
                    if ((_DWORD)v59 == 0x7FFFFFFF)
                    {
                      v59 = *v53;
                      v60 = v59;
                      if ((_DWORD)v59 == (_DWORD)v57)
                      {
                        re::HashTable<re::AssetType const*,re::SharedPtr<re::RealityFileAssetProvider::PerTypeLoadCallbacks>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::setCapacity(v70, 2 * *(_DWORD *)v76);
                        v53 = v73;
                        v34 = v77;
                        v58 = v56 % *v75;
                        v60 = *v73;
                      }
                      *v53 = v60 + 1;
                      v61 = *v52;
                      v62 = *(_DWORD *)(*v52 + 32 * v59 + 8);
                    }
                    else
                    {
                      v61 = *v52;
                      v62 = *(_DWORD *)(*v52 + 32 * v59 + 8);
                      *v34 = v62 & 0x7FFFFFFF;
                    }
                    *(_DWORD *)(v61 + 32 * v59 + 8) = v62 | 0x80000000;
                    *(_DWORD *)(*v52 + 32 * v59 + 8) = *(_DWORD *)(*v52 + 32 * v59 + 8) & 0x80000000 | *(_DWORD *)(*v54 + 4 * v58);
                    *(_QWORD *)(*v52 + 32 * v59) = v56;
                    *(_QWORD *)(*v52 + 32 * v59 + 16) = v55[2];
                    v63 = v55[3];
                    *(_QWORD *)(*v52 + 32 * v59 + 24) = v63;
                    if (v63)
                    {
                      v64 = (id)(v63 + 8);
                      v53 = v73;
                      v34 = v77;
                    }
                    *(_DWORD *)(*v54 + 4 * v58) = v59;
                    ++*(_DWORD *)v76;
                    v48 = *v74;
                  }
                  ++v50;
                  v49 += 32;
                }
                while (v50 < v48);
              }
            }
            v6 = v69;
            *(_OWORD *)(v71 + 184 * v72 + 168) = *(_OWORD *)(v69 + 184 * v11 + 168);
            v3 = v67;
            v13 = *(_QWORD *)(v67 + 8);
            *(_DWORD *)(v13 + 4 * v68) = v72;
            v12 = *(_DWORD *)(v67 + 28) + 1;
            *(_DWORD *)(v67 + 28) = v12;
            v10 = v66;
          }
          ++v11;
        }
        while (v11 != v10);
      }
      re::HashTable<unsigned long long,re::ecs2::WorldSortingState,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v78);
    }
  }
  else
  {
    if (a2)
      v65 = a2;
    else
      v65 = 3;
  }
}

uint64_t re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>>,true,false>::HashSetBase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t v10;

  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 36) = 0x7FFFFFFFLL;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    if (*(_DWORD *)(a2 + 28) <= 3u)
      v5 = 3;
    else
      v5 = *(_DWORD *)(a2 + 28);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init(a1, v4, v5);
    re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear(a1);
    v6 = *(_DWORD *)(a2 + 28);
    if (*(_DWORD *)(a1 + 24) < v6)
      re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::setCapacity(a1, v6);
    v7 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v7)
    {
      v8 = 0;
      for (i = 0; i < v7; ++i)
      {
        v10 = *(_QWORD *)(a2 + 16) + v8;
        if ((*(_DWORD *)(v10 + 8) & 0x80000000) != 0)
        {
          re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::addAsCopy(a1, *(_QWORD *)v10 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v10, (uint64_t *)(v10 + 16));
          v7 = *(unsigned int *)(a2 + 32);
        }
        v8 += 24;
      }
    }
  }
  return a1;
}

BOOL re::SortingPlane::operator==(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  if (*a1 != *a2 && vabds_f32(*a1, *a2) >= (float)((float)((float)(fabsf(*a1) + fabsf(*a2)) + 1.0) * 0.00001))
    return 0;
  v2 = a1[1];
  v3 = a2[1];
  if (v2 != v3 && vabds_f32(v2, v3) >= (float)((float)((float)(fabsf(v2) + fabsf(v3)) + 1.0) * 0.00001))
    return 0;
  v4 = a1[2];
  v5 = a2[2];
  if (v4 != v5 && vabds_f32(v4, v5) >= (float)((float)((float)(fabsf(v4) + fabsf(v5)) + 1.0) * 0.00001))
    return 0;
  v6 = a1[4];
  v7 = a2[4];
  if (v6 != v7 && vabds_f32(v6, v7) >= (float)((float)((float)(fabsf(v6) + fabsf(v7)) + 1.0) * 0.00001))
    return 0;
  v8 = a1[5];
  v9 = a2[5];
  if (v8 != v9 && vabds_f32(v8, v9) >= (float)((float)((float)(fabsf(v8) + fabsf(v9)) + 1.0) * 0.00001))
    return 0;
  v10 = a1[6];
  v11 = a2[6];
  return v10 == v11 || vabds_f32(v10, v11) < (float)((float)((float)(fabsf(v10) + fabsf(v11)) + 1.0) * 0.00001);
}

void re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  signed int v22;
  _BYTE v23[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(_QWORD *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v23, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v23;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)v23 = v5;
      *(_QWORD *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (uint64_t *)(v6 + 24);
        do
        {
          if ((*(_DWORD *)(v13 - 2) & 0x80000000) != 0)
          {
            v14 = *(v13 - 3);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<unsigned long long,re::HashSet<re::ecs2::Entity *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 72 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 72 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 72 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v17) = v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v17 + 16) = *(v13 - 1);
            v21 = *(_QWORD *)(a1 + 16) + 72 * v17;
            *(_OWORD *)(v21 + 24) = 0u;
            v21 += 24;
            *(_DWORD *)(v21 + 32) = 0;
            *(_OWORD *)(v21 + 16) = 0u;
            *(_QWORD *)(v21 + 36) = 0x7FFFFFFFLL;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v21, v13);
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 9;
          --v10;
        }
        while (v10);
      }
      re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2)
      v22 = a2;
    else
      v22 = 3;
  }
}

void re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  signed int v23;
  _BYTE v24[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(_QWORD *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)v24, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v24;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)v24 = v5;
      *(_QWORD *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v13 - 8) & 0x80000000) != 0)
          {
            v14 = *(_QWORD *)(v13 - 16);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + (v17 << 6) + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + (v17 << 6) + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + (v17 << 6) + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v17 << 6) + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + (v17 << 6) + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v17 << 6)) = v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + (v17 << 6) + 16) = *(_QWORD *)v13;
            v21 = *(_QWORD *)(a1 + 16) + (v17 << 6);
            v22 = *(_OWORD *)(v13 + 32);
            *(_OWORD *)(v21 + 32) = *(_OWORD *)(v13 + 16);
            *(_OWORD *)(v21 + 48) = v22;
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 64;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2)
      v23 = a2;
    else
      v23 = 3;
  }
}

double re::HashTable<re::ecs2::Entity *,re::SortingPlane,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = v3 << 6;
      do
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 64;
      }
      while (v5 != v4);
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addInternal<re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>&>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  v9 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1
    || (v9 = v8 % *(unsigned int *)(a1 + 24),
        v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9),
        (_DWORD)v10 == 0x7FFFFFFF))
  {
LABEL_3:
    v11 = *(unsigned int *)(a1 + 36);
    if ((_DWORD)v11 == 0x7FFFFFFF)
    {
      v11 = *(unsigned int *)(a1 + 32);
      v12 = v11;
      if ((_DWORD)v11 == *(_DWORD *)(a1 + 24))
      {
        re::HashTable<re::AssetType const*,re::SharedPtr<re::RealityFileAssetProvider::PerTypeLoadCallbacks>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
        LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
        v12 = *(_DWORD *)(a1 + 32);
        v6 = *a2;
      }
      *(_DWORD *)(a1 + 32) = v12 + 1;
      v13 = *(_QWORD *)(a1 + 16);
      v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
    }
    else
    {
      v13 = *(_QWORD *)(a1 + 16);
      v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
      *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v13 + 32 * v11 + 8) = v14 | 0x80000000;
    v15 = v9;
    *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11) = v8;
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 16) = v6;
    v16 = *a3;
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 24) = *a3;
    if (v16)
      v17 = (id)(v16 + 8);
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v15) = v11;
    ++*(_DWORD *)(a1 + 28);
    goto LABEL_11;
  }
  v18 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v18 + 32 * v10 + 16) != v6)
  {
    v19 = *(_DWORD *)(v18 + 32 * v10 + 8);
    v10 = v19 & 0x7FFFFFFF;
    if ((v19 & 0x7FFFFFFF) == 0x7FFFFFFF)
      goto LABEL_3;
  }
  v20 = v18 + 32 * v10;
  v23 = *(_QWORD *)(v20 + 24);
  v22 = (_QWORD *)(v20 + 24);
  v21 = v23;
  if (v23)
  {

    *v22 = 0;
    v18 = *(_QWORD *)(a1 + 16);
  }
  v24 = *a3;
  *(_QWORD *)(v18 + 32 * v10 + 24) = *a3;
  if (v24)
    v25 = (id)(v24 + 8);
LABEL_11:
  ++*(_DWORD *)(a1 + 40);
}

_QWORD *re::DynamicOverflowArray<re::ecs2::Entity *,128ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (a2 && !v5)
  {
    result = (_QWORD *)re::DynamicOverflowArray<re::ecs2::Entity *,128ul>::setCapacity(v4, a2);
    v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)result + 4);
  if ((v7 & 1) != 0)
    v8 = 128;
  else
    v8 = result[3];
  if (v8 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 0x80 || (v7 & 1) == 0))
    {
      if (a2 < 0x81)
      {
        v14 = result + 3;
        v15 = v4[4];
        if ((v7 & 1) != 0)
          v16 = v4 + 3;
        else
          v16 = (const void *)v4[4];
        memcpy(v14, v16, 8 * v9);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 8 * a2;
        v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, 8 * a2, 8);
        if (v10)
        {
          v12 = v10;
          if ((v4[2] & 1) != 0)
            v13 = v4 + 3;
          else
            v13 = (const void *)v4[4];
          result = memcpy(v10, v13, 8 * v4[1]);
          v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
            v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *,false>(float *a1, float *a2, uint64_t a3, char a4)
{
  float *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  float v17;
  float *v18;
  float *v19;
  float *v20;
  float v21;
  float *v22;
  float v23;
  float *v24;
  float v25;
  float v26;
  BOOL v27;
  float *v28;
  float v29;
  float *v30;
  float v31;
  float *v32;
  float *v33;
  float v34;
  uint64_t v35;
  int v36;
  float v37;
  float v38;
  __int128 *v39;
  __int128 *v40;
  __int128 *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  float *v45;
  BOOL v47;
  uint64_t v48;
  float *v49;
  float *v50;
  float v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  float v55;
  uint64_t v56;
  int64_t v57;
  int64_t v58;
  int64_t v59;
  uint64_t v60;
  float *v61;
  float v62;
  float *v63;
  uint64_t v64;
  int v65;
  float *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float *v71;
  float *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  float v77;
  uint64_t v78;
  int v79;
  float *v80;
  float *v82;
  float v83;
  uint64_t v84;
  int v85;
  float *v86;
  float v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;

float *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(float *result, float *a2, float *a3)
{
  float v3;
  float v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v3 = a2[2];
  v4 = a3[2];
  if (v3 >= result[2])
  {
    if (v4 < v3)
    {
      v6 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v6;
      if (a2[2] < result[2])
      {
        v7 = *(_OWORD *)result;
        *(_OWORD *)result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v7;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v8 = *(_OWORD *)result;
      *(_OWORD *)result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (a3[2] >= a2[2])
        return result;
      v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      v5 = *(_OWORD *)result;
      *(_OWORD *)result = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 v6;
  float *v7;
  float *v8;
  uint64_t v9;
  int v10;
  float v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 2) < a1[2])
      {
        v6 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *((_OWORD *)a2 - 1);
        *((_OWORD *)a2 - 1) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(a1, a1 + 4, a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(a1, (uint64_t)(a1 + 4), (uint64_t)(a1 + 8), (uint64_t)(a2 - 4));
      return 1;
    case 5:
      v17 = (__int128 *)(a1 + 4);
      v18 = (__int128 *)(a1 + 8);
      v19 = (__int128 *)(a1 + 12);
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(a1, (uint64_t)(a1 + 4), (uint64_t)(a1 + 8), (uint64_t)(a1 + 12));
      if (*(a2 - 2) < a1[14])
      {
        v20 = *v19;
        *v19 = *((_OWORD *)a2 - 1);
        *((_OWORD *)a2 - 1) = v20;
        if (a1[14] < a1[10])
        {
          v21 = *v18;
          *v18 = *v19;
          *v19 = v21;
          if (a1[10] < a1[6])
          {
            v22 = *v17;
            *v17 = *v18;
            *v18 = v22;
            if (a1[6] < a1[2])
            {
              v23 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *v17 = v23;
            }
          }
        }
      }
      return 1;
    default:
      v7 = a1 + 8;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(a1, a1 + 4, a1 + 8);
      v8 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = v8[2];
    if (v11 < v7[2])
    {
      v12 = *(_QWORD *)v8;
      v13 = *((_DWORD *)v8 + 3);
      v14 = v9;
      while (1)
      {
        *(_OWORD *)((char *)a1 + v14 + 48) = *(_OWORD *)((char *)a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(float *)((char *)a1 + v14 + 24);
        v14 -= 16;
        if (v11 >= v15)
        {
          v16 = (uint64_t)a1 + v14 + 48;
          goto LABEL_13;
        }
      }
      v16 = (uint64_t)a1;
LABEL_13:
      *(_QWORD *)v16 = v12;
      *(float *)(v16 + 8) = v11;
      *(_DWORD *)(v16 + 12) = v13;
      if (++v10 == 8)
        return v8 + 4 == a2;
    }
    v7 = v8;
    v9 += 16;
    v8 += 4;
    if (v8 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshCodirectionalGroup::rebuildEntityArrayInBackToFrontOrder(void)::$_0 &,re::ecs2::CAMeshCodirectionalGroup::EntityWithDisplacement *>(a1, (float *)a2, (float *)a3);
  result.n128_u32[0] = *(_DWORD *)(a4 + 8);
  if (result.n128_f32[0] < *(float *)(a3 + 8))
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    result.n128_u32[0] = *(_DWORD *)(a3 + 8);
    if (result.n128_f32[0] < *(float *)(a2 + 8))
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      result.n128_u32[0] = *(_DWORD *)(a2 + 8);
      if (result.n128_f32[0] < a1[2])
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

void re::ecs2::CAMeshSortGroup::~CAMeshSortGroup(re::ecs2::CAMeshSortGroup *this)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24ED45158;
  v2 = *((_QWORD *)this + 40);
  if (v2)
  {
    if (*((_QWORD *)this + 44))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 44) = 0;
    *((_QWORD *)this + 41) = 0;
    *((_QWORD *)this + 42) = 0;
    *((_QWORD *)this + 40) = 0;
    ++*((_DWORD *)this + 86);
  }
  v3.n128_f64[0] = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 34);
  v4 = *((_QWORD *)this + 28);
  if (v4)
  {
    if (*((_QWORD *)this + 32))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v4 + 40))(v4, v3.n128_f64[0]);
    *((_QWORD *)this + 32) = 0;
    *((_QWORD *)this + 29) = 0;
    *((_QWORD *)this + 30) = 0;
    *((_QWORD *)this + 28) = 0;
    ++*((_DWORD *)this + 62);
  }
  v5 = *((_QWORD *)this + 6);
  if (v5)
  {
    if (*((_QWORD *)this + 7))
    {
      (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 8), v3);
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
    }
    *((_QWORD *)this + 6) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24ED45158;
  v2 = *((_QWORD *)this + 40);
  if (v2)
  {
    if (*((_QWORD *)this + 44))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 44) = 0;
    *((_QWORD *)this + 41) = 0;
    *((_QWORD *)this + 42) = 0;
    *((_QWORD *)this + 40) = 0;
    ++*((_DWORD *)this + 86);
  }
  v3.n128_f64[0] = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 34);
  v4 = *((_QWORD *)this + 28);
  if (v4)
  {
    if (*((_QWORD *)this + 32))
      (*(void (**)(uint64_t, double))(*(_QWORD *)v4 + 40))(v4, v3.n128_f64[0]);
    *((_QWORD *)this + 32) = 0;
    *((_QWORD *)this + 29) = 0;
    *((_QWORD *)this + 30) = 0;
    *((_QWORD *)this + 28) = 0;
    ++*((_DWORD *)this + 62);
  }
  v5 = *((_QWORD *)this + 6);
  if (v5)
  {
    if (*((_QWORD *)this + 7))
    {
      (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v5 + 40))(v5, *((_QWORD *)this + 8), v3);
      *((_QWORD *)this + 7) = 0;
      *((_QWORD *)this + 8) = 0;
    }
    *((_QWORD *)this + 6) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t *re::ecs2::CAMeshSortGroup::allocator(re::ecs2::CAMeshSortGroup *this)
{
}

void std::__introsort<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *,false>(re::ecs2::CAMeshSortGroup **a1, const re::ecs2::Entity **a2, re::ecs2::CAMeshCodirectionalGroup *a3, re::ecs2::CAMeshCodirectionalGroup *a4, char a5)
{
  re::ecs2::CAMeshCodirectionalGroup *v5;
  const re::ecs2::Entity **v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const re::ecs2::Entity **v13;
  re::ecs2::CAMeshCodirectionalGroup *v14;
  uint64_t v15;
  const re::ecs2::Entity *v16;
  const re::ecs2::Entity *v17;
  char v18;
  re::ecs2::CAMeshSortGroup **v19;
  const re::ecs2::Entity **v20;
  re::ecs2::CAMeshSortGroup *v21;
  re::ecs2::CAMeshSortGroup *v22;
  const re::ecs2::Entity **v23;
  re::ecs2::CAMeshSortGroup *v24;
  re::ecs2::CAMeshSortGroup *v25;
  BOOL v26;
  re::ecs2::CAMeshCodirectionalGroup *v27;
  const re::ecs2::Entity *v28;
  re::ecs2::CAMeshSortGroup *v29;
  const re::ecs2::Entity *v30;
  unint64_t v31;
  const re::ecs2::Entity **v32;
  const re::ecs2::Entity *v33;
  const re::ecs2::Entity *v34;
  const re::ecs2::Entity *v35;
  const re::ecs2::Entity **v36;
  re::ecs2::CAMeshSortGroup *v37;
  re::ecs2::CAMeshSortGroup **v38;
  BOOL v40;
  uint64_t v41;
  re::ecs2::CAMeshSortGroup **v42;
  re::ecs2::CAMeshSortGroup **v43;
  re::ecs2::CAMeshSortGroup *v44;
  re::ecs2::CAMeshSortGroup *v45;
  uint64_t v46;
  const re::ecs2::Entity **v47;
  re::ecs2::CAMeshSortGroup **v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  re::ecs2::CAMeshSortGroup **v53;
  uint64_t v54;
  int v55;
  re::ecs2::CAMeshSortGroup **v56;
  char v57;
  const re::ecs2::Entity *v58;
  re::ecs2::CAMeshSortGroup **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const re::ecs2::Entity **v63;
  uint64_t v64;
  _OWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  re::ecs2::CAMeshSortGroup **v71;
  const re::ecs2::Entity *v72;
  uint64_t v73;
  _OWORD *v74;
  re::ecs2::CAMeshSortGroup **v76;
  re::ecs2::CAMeshSortGroup *v77;
  re::ecs2::CAMeshSortGroup *v78;
  re::ecs2::CAMeshSortGroup **v79;
  re::ecs2::CAMeshSortGroup **v80;
  char v81;
  unint64_t v82;
  re::ecs2::CAMeshSortGroup *v83;
  re::ecs2::CAMeshSortGroup **v84;
  const re::ecs2::Entity **v85;
  int64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;

  v5 = a4;
LABEL_2:
  v84 = a2 - 2;
  v9 = a1;
  while (2)
  {
    a1 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = ((char *)a2 - (char *)v9) >> 4;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v37 = *(a2 - 2);
        v36 = a2 - 2;
        if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v37, *a1, *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), a4))
        {
          v91 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v36;
          *(_OWORD *)v36 = v91;
        }
        return;
      case 3:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(a1, a1 + 2, v84, a3);
        return;
      case 4:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(a1, a1 + 2, a1 + 4, v84, a3);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *,0>(a1, a1 + 2, a1 + 4, a1 + 6, v84, a3);
        return;
      default:
        if (v10 <= 383)
        {
          v38 = a1 + 2;
          v40 = a1 == a2 || v38 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v40)
            {
              v41 = 0;
              v42 = a1;
              do
              {
                v43 = v38;
                if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v42[2], *v42, *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), a4))
                {
                  v44 = *v43;
                  v45 = v42[3];
                  v46 = v41;
                  while (1)
                  {
                    v47 = (re::ecs2::CAMeshSortGroup **)((char *)a1 + v46);
                    *(_OWORD *)((char *)a1 + v46 + 16) = *(_OWORD *)((char *)a1 + v46);
                    if (!v46)
                      break;
                    v46 -= 16;
                    if ((re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v44, *(v47 - 2), *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), a4) & 1) == 0)
                    {
                      v48 = (re::ecs2::CAMeshSortGroup **)((char *)a1 + v46 + 16);
                      goto LABEL_72;
                    }
                  }
                  v48 = a1;
LABEL_72:
                  *v48 = v44;
                  v48[1] = v45;
                }
                v38 = v43 + 2;
                v41 += 16;
                v42 = v43;
              }
              while (v43 + 2 != a2);
            }
          }
          else if (!v40)
          {
            do
            {
              v76 = v38;
              if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(a1[2], *a1, *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), a4))
              {
                v77 = *v76;
                v78 = a1[3];
                v79 = v76;
                do
                {
                  v80 = v79 - 2;
                  *(_OWORD *)v79 = *((_OWORD *)v79 - 1);
                  v81 = re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v77, *(v79 - 4), *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), a4);
                  v79 = v80;
                }
                while ((v81 & 1) != 0);
                *v80 = v77;
                v80[1] = v78;
              }
              v38 = v76 + 2;
              a1 = v76;
            }
            while (v76 + 2 != a2);
          }
          return;
        }
        if (!v5)
        {
          if (a1 != a2)
          {
            v82 = v10;
            v49 = (unint64_t)(v11 - 2) >> 1;
            v50 = v49;
            v85 = a2;
            do
            {
              v51 = v50;
              if (v49 >= v50)
              {
                v52 = (2 * v50) | 1;
                v53 = &a1[2 * v52];
                v54 = 2 * v50 + 2;
                v87 = v50;
                if (v54 < v11)
                {
                  v55 = re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*v53, v53[2], *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), a4);
                  if (v55)
                    v53 += 2;
                  a2 = v85;
                  v51 = v87;
                  if (v55)
                    v52 = v54;
                }
                v56 = &a1[2 * v51];
                v57 = re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*v53, *v56, *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), a4);
                v51 = v87;
                if ((v57 & 1) == 0)
                {
                  v58 = *v56;
                  v83 = v56[1];
                  do
                  {
                    v59 = v56;
                    v56 = v53;
                    *(_OWORD *)v59 = *(_OWORD *)v53;
                    if (v49 < v52)
                      break;
                    v60 = (2 * v52) | 1;
                    v53 = &a1[2 * v60];
                    v61 = 2 * v52 + 2;
                    if (v61 < v11
                      && re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*v53, v53[2], *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), a4))
                    {
                      v53 += 2;
                      v60 = v61;
                    }
                    v52 = v60;
                  }
                  while (!re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*v53, v58, *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), a4));
                  a2 = v85;
                  *v56 = v58;
                  v56[1] = v83;
                  v51 = v87;
                }
              }
              v50 = v51 - 1;
            }
            while (v51);
            v62 = v82 >> 4;
            do
            {
              v63 = a2;
              v64 = 0;
              v92 = *(_OWORD *)a1;
              v65 = a1;
              do
              {
                v66 = (uint64_t)&v65[v64 + 1];
                v67 = (2 * v64) | 1;
                v68 = 2 * v64 + 2;
                if (v68 < v62
                  && re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*(re::ecs2::CAMeshSortGroup **)&v65[v64 + 1], *(const re::ecs2::Entity **)&v65[v64 + 2], *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), a4))
                {
                  v66 += 16;
                  v67 = v68;
                }
                *v65 = *(_OWORD *)v66;
                v65 = (_OWORD *)v66;
                v64 = v67;
              }
              while (v67 <= (uint64_t)((unint64_t)(v62 - 2) >> 1));
              a2 = v63 - 2;
              if ((const re::ecs2::Entity **)v66 == v63 - 2)
              {
                *(_OWORD *)v66 = v92;
              }
              else
              {
                *(_OWORD *)v66 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v92;
                v69 = v66 - (_QWORD)a1 + 16;
                if (v69 >= 17)
                {
                  v70 = (((unint64_t)v69 >> 4) - 2) >> 1;
                  v71 = &a1[2 * v70];
                  if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*v71, *(const re::ecs2::Entity **)v66, *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), a4))
                  {
                    v72 = *(const re::ecs2::Entity **)v66;
                    v73 = *(_QWORD *)(v66 + 8);
                    do
                    {
                      v74 = (_OWORD *)v66;
                      v66 = (uint64_t)v71;
                      *v74 = *(_OWORD *)v71;
                      if (!v70)
                        break;
                      v70 = (v70 - 1) >> 1;
                      v71 = &a1[2 * v70];
                    }
                    while ((re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*v71, v72, *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), a4) & 1) != 0);
                    *(_QWORD *)v66 = v72;
                    *(_QWORD *)(v66 + 8) = v73;
                    a2 = v63 - 2;
                  }
                }
              }
            }
            while (v62-- > 2);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &a1[2 * ((unint64_t)v11 >> 1)];
        if ((unint64_t)v10 < 0x801)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(v13, a1, v84, a3);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(a1, v13, v84, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(a1 + 2, v13 - 2, a2 - 4, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(a1 + 4, &a1[2 * v12 + 2], a2 - 6, a3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(v13 - 2, v13, &a1[2 * v12 + 2], a3);
          v88 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v13;
          *(_OWORD *)v13 = v88;
        }
        v5 = (re::ecs2::CAMeshCodirectionalGroup *)((char *)v5 - 1);
        if ((a5 & 1) == 0
          && (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*(a1 - 2), *a1, *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), v14) & 1) == 0)
        {
          v29 = *a1;
          v28 = a1[1];
          if ((re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*a1, *v84, *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), v14) & 1) != 0)
          {
            v9 = a1;
            do
            {
              v30 = v9[2];
              v9 += 2;
            }
            while ((re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v29, v30, *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), a4) & 1) == 0);
          }
          else
          {
            v31 = (unint64_t)(a1 + 2);
            do
            {
              v9 = (const re::ecs2::Entity **)v31;
              if (v31 >= (unint64_t)a2)
                break;
              v31 += 16;
            }
            while (!re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v29, *v9, *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), a4));
          }
          v32 = a2;
          if (v9 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *(v32 - 2);
              v32 -= 2;
            }
            while ((re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v29, v33, *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), a4) & 1) != 0);
          }
          while (v9 < v32)
          {
            v90 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v32;
            *(_OWORD *)v32 = v90;
            do
            {
              v34 = v9[2];
              v9 += 2;
            }
            while (!re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v29, v34, *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), a4));
            do
            {
              v35 = *(v32 - 2);
              v32 -= 2;
            }
            while ((re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v29, v35, *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), a4) & 1) != 0);
          }
          if (v9 - 2 != a1)
            *(_OWORD *)a1 = *((_OWORD *)v9 - 1);
          a5 = 0;
          *(v9 - 2) = v29;
          *(v9 - 1) = v28;
          continue;
        }
        v15 = 0;
        v17 = *a1;
        v16 = a1[1];
        do
        {
          v18 = re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(a1[v15 + 2], v17, *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), v14);
          v15 += 2;
        }
        while ((v18 & 1) != 0);
        v19 = &a1[v15];
        v20 = a2;
        if (v15 == 2)
        {
          v20 = a2;
          do
          {
            if (v19 >= v20)
              break;
            v22 = *(v20 - 2);
            v20 -= 2;
          }
          while ((re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v22, v17, *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), v14) & 1) == 0);
        }
        else
        {
          do
          {
            v21 = *(v20 - 2);
            v20 -= 2;
          }
          while (!re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v21, v17, *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), v14));
        }
        v9 = &a1[v15];
        if (v19 < v20)
        {
          v23 = v20;
          do
          {
            v89 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v23;
            *(_OWORD *)v23 = v89;
            do
            {
              v24 = v9[2];
              v9 += 2;
            }
            while ((re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v24, v17, *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), v14) & 1) != 0);
            do
            {
              v25 = *(v23 - 2);
              v23 -= 2;
            }
            while (!re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v25, v17, *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), v14));
          }
          while (v9 < v23);
        }
        if (v9 - 2 != a1)
          *(_OWORD *)a1 = *((_OWORD *)v9 - 1);
        *(v9 - 2) = v17;
        *(v9 - 1) = v16;
        if (v19 < v20)
        {
LABEL_30:
          std::__introsort<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *,false>(a1, v9 - 2, a3, v5, a5 & 1);
          a5 = 0;
          continue;
        }
        v26 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(a1, v9 - 2, a3, v14);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(v9, a2, a3, v27))
        {
          if (v26)
            continue;
          goto LABEL_30;
        }
        a2 = v9 - 2;
        if (!v26)
          goto LABEL_2;
        return;
    }
  }
}

__n128 std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *,0>(const re::ecs2::Entity **a1, re::ecs2::CAMeshSortGroup **a2, re::ecs2::CAMeshSortGroup **a3, re::ecs2::CAMeshSortGroup **a4, re::ecs2::CAMeshSortGroup **a5, re::ecs2::CAMeshCodirectionalGroup *a6)
{
  re::ecs2::CAMeshCodirectionalGroup *v12;
  re::ecs2::CAMeshCodirectionalGroup *v13;
  __n128 result;
  __int128 v15;
  re::ecs2::CAMeshCodirectionalGroup *v16;
  __int128 v17;
  re::ecs2::CAMeshCodirectionalGroup *v18;
  __int128 v19;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(a1, a2, a3, a4, a6);
  if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*a5, *a4, *(const re::ecs2::Entity **)(*(_QWORD *)a6 + 264), v12))
  {
    v15 = *(_OWORD *)a4;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)a5 = v15;
    if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*a4, *a3, *(const re::ecs2::Entity **)(*(_QWORD *)a6 + 264), v13))
    {
      v17 = *(_OWORD *)a3;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)a4 = v17;
      if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*a3, *a2, *(const re::ecs2::Entity **)(*(_QWORD *)a6 + 264), v16))
      {
        v19 = *(_OWORD *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)a3 = v19;
        if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*a2, *a1, *(const re::ecs2::Entity **)(*(_QWORD *)a6 + 264), v18))
        {
          result = *(__n128 *)a1;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(const re::ecs2::Entity **a1, re::ecs2::CAMeshSortGroup **a2, re::ecs2::CAMeshSortGroup **a3, re::ecs2::CAMeshCodirectionalGroup *a4)
{
  char v8;
  re::ecs2::CAMeshCodirectionalGroup *v9;
  uint64_t result;
  re::ecs2::CAMeshCodirectionalGroup *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v8 = re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*a2, *a1, *(const re::ecs2::Entity **)(*(_QWORD *)a4 + 264), a4);
  result = re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*a3, *a2, *(const re::ecs2::Entity **)(*(_QWORD *)a4 + 264), v9);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v12 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a3;
    }
    else
    {
      v15 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v15;
      result = re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*a3, *a2, *(const re::ecs2::Entity **)(*(_QWORD *)a4 + 264), v11);
      if (!(_DWORD)result)
        return result;
      v12 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v12;
  }
  else if ((_DWORD)result)
  {
    v13 = *(_OWORD *)a2;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)a3 = v13;
    result = re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*a2, *a1, *(const re::ecs2::Entity **)(*(_QWORD *)a4 + 264), v11);
    if ((_DWORD)result)
    {
      v14 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)a2 = v14;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(const re::ecs2::Entity **a1, const re::ecs2::Entity **a2, re::ecs2::CAMeshCodirectionalGroup *a3, re::ecs2::CAMeshCodirectionalGroup *a4)
{
  uint64_t v7;
  _BOOL8 result;
  const re::ecs2::Entity **v9;
  __int128 v10;
  const re::ecs2::Entity **v11;
  re::ecs2::CAMeshCodirectionalGroup *v12;
  const re::ecs2::Entity **v13;
  uint64_t v14;
  int v15;
  re::ecs2::CAMeshSortGroup *v16;
  const re::ecs2::Entity *v17;
  uint64_t v18;
  const re::ecs2::Entity **v19;
  const re::ecs2::Entity **v20;

  v7 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v7)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v9 = a2 - 2;
      if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*(a2 - 2), *a1, *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), a4))
      {
        v10 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *(_OWORD *)v9 = v10;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *,0>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2, a3);
      return 1;
    default:
      v11 = a1 + 4;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(a1, a1 + 2, a1 + 4, a3);
      v13 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*v13, *v11, *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), v12))
    {
      v16 = *v13;
      v17 = v13[1];
      v18 = v14;
      while (1)
      {
        v19 = (const re::ecs2::Entity **)((char *)a1 + v18);
        *(_OWORD *)((char *)a1 + v18 + 48) = *(_OWORD *)((char *)a1 + v18 + 32);
        if (v18 == -32)
          break;
        v18 -= 16;
        if ((re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(v16, v19[2], *(const re::ecs2::Entity **)(*(_QWORD *)a3 + 264), v12) & 1) == 0)
        {
          v20 = (const re::ecs2::Entity **)((char *)a1 + v18 + 48);
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *v20 = v16;
      v20[1] = v17;
      if (++v15 == 8)
        return v13 + 2 == a2;
    }
    v11 = v13;
    v14 += 16;
    v13 += 2;
    if (v13 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(const re::ecs2::Entity **a1, re::ecs2::CAMeshSortGroup **a2, re::ecs2::CAMeshSortGroup **a3, re::ecs2::CAMeshSortGroup **a4, re::ecs2::CAMeshCodirectionalGroup *a5)
{
  re::ecs2::CAMeshCodirectionalGroup *v10;
  re::ecs2::CAMeshCodirectionalGroup *v11;
  __n128 result;
  __int128 v13;
  re::ecs2::CAMeshCodirectionalGroup *v14;
  __int128 v15;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_0 &,re::ecs2::CAMeshSortGroup::EntityAndPriority *>(a1, a2, a3, a5);
  if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*a4, *a3, *(const re::ecs2::Entity **)(*(_QWORD *)a5 + 264), v10))
  {
    v13 = *(_OWORD *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)a4 = v13;
    if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*a3, *a2, *(const re::ecs2::Entity **)(*(_QWORD *)a5 + 264), v11))
    {
      v15 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v15;
      if (re::ecs2::CAMeshSortGroup::compareEntitiesByCodirDisplacement(*a2, *a1, *(const re::ecs2::Entity **)(*(_QWORD *)a5 + 264), v14))
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::ecs2::CoincidentalSortKey>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 6;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 64);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], v5[2] << 6);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::CoincidentalSortKey>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *,false>(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, BOOL a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  char v20;
  unint64_t v21;
  __int128 *v23;
  unint64_t v24;
  __int128 *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 *v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  __int128 v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  __int128 *v48;
  __int128 v49;
  __int128 *v50;
  uint64_t v51;
  __int128 *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  __int128 *v64;
  unint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  __int128 v80;
  __int128 v81;
  BOOL v82;
  __int128 *v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  __int128 v95;
  __int128 v96;
  int v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  __int128 *v109;
  int v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  __int128 *v116;
  __int128 *v117;
  __int128 *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  __int128 *v122;
  BOOL v124;
  __int128 *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 *v131;
  __int128 *v132;
  __int128 *v133;
  __int128 v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  __int128 v139;
  int64_t v140;
  __int128 *v141;
  __int128 *v142;
  int64_t v143;
  int64_t v144;
  uint64_t v145;
  __int128 *v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  __int128 v151;
  __int128 v152;
  unint64_t v153;
  int v154;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  __int128 *v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  int v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  __int128 v166;
  __int128 *v167;
  __int128 *v168;
  __int128 *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  int v173;
  __int128 v174;
  int v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  unint64_t v180;
  __int128 *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  __int128 v185;
  __int128 v187;
  __int128 v188;
  __int128 *v189;
  int v190;
  __int128 v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  int v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  int v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  unint64_t v209;
  unint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  __int128 v214;
  __int128 v215;
  __int128 *v216;
  __int128 *v217;
  uint64_t v218;
  __int128 *v219;
  __int128 v220;
  unint64_t v221;
  unint64_t v222;
  int v223;
  __int128 v224;
  uint64_t v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  unint64_t v235;
  unint64_t v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 *v242;
  __int128 v243;
  __int128 vars0;
  int v245;
  int v246;
  int v247;

  v20 = a4;
  v21 = a3;
  v23 = (__int128 *)result;
  a20 = *MEMORY[0x24BDAC8D0];
  v24 = (unint64_t)&v243 | 0x18;
LABEL_2:
  v242 = (__int128 *)(a2 - 64);
  v25 = v23;
  while (2)
  {
    v23 = v25;
    v26 = a2 - (_QWORD)v25;
    v27 = (uint64_t)(a2 - (_QWORD)v25) >> 6;
    switch(v27)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v113 = 0;
        while (1)
        {
          v114 = *(_QWORD *)(a2 - 40 + v113);
          v115 = *(_QWORD *)((char *)v25 + v113 + 24);
          if (v114 != v115)
            break;
          v113 -= 8;
          if (v113 == -32)
            return result;
        }
        if (v114 < v115)
        {
          v197 = v25[1];
          v198 = v25[3];
          a15 = v25[2];
          a16 = v198;
          a14 = v197;
          a13 = *v25;
          v199 = *(_DWORD *)(a2 - 32);
          v200 = *(_OWORD *)(a2 - 48);
          *v25 = *v242;
          v25[1] = v200;
          *((_DWORD *)v25 + 8) = v199;
          v202 = a13;
          v201 = a14;
          *(_DWORD *)(a2 - 32) = a15;
          *v242 = v202;
          *(_OWORD *)(a2 - 48) = v201;
        }
        return result;
      case 3uLL:
        return (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(v25, v25 + 4, v242);
      case 4uLL:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(v25, v25 + 4, v25 + 8, (uint64_t)v242);
      case 5uLL:
        v116 = v25 + 4;
        v117 = v25 + 8;
        v118 = v25 + 12;
        result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(v25, v25 + 4, v25 + 8, (uint64_t)(v25 + 12));
        v119 = 0;
        while (1)
        {
          v120 = *(_QWORD *)(a2 - 40 + v119);
          v121 = *(_QWORD *)((char *)v25 + v119 + 216);
          if (v120 != v121)
            break;
          v119 -= 8;
          if (v119 == -32)
            return result;
        }
        if (v120 < v121)
        {
          v203 = 0;
          v204 = v25[15];
          a15 = v25[14];
          a16 = v204;
          v205 = v25[13];
          a13 = *v118;
          v206 = a13;
          a14 = v205;
          v208 = *v242;
          v207 = *(_OWORD *)(a2 - 48);
          *((_DWORD *)v25 + 56) = *(_DWORD *)(a2 - 32);
          *v118 = v208;
          v25[13] = v207;
          *(_DWORD *)(a2 - 32) = a15;
          *v242 = v206;
          *(_OWORD *)(a2 - 48) = v205;
          while (1)
          {
            v209 = *(_QWORD *)((char *)v25 + v203 + 216);
            v210 = *(_QWORD *)((char *)v25 + v203 + 152);
            if (v209 != v210)
              break;
            v203 -= 8;
            if (v203 == -32)
              return result;
          }
          if (v209 < v210)
          {
            v225 = 0;
            a15 = v25[10];
            *((_DWORD *)v25 + 40) = *((_DWORD *)v25 + 56);
            *((_DWORD *)v25 + 56) = a15;
            v227 = *v117;
            v226 = v25[9];
            v228 = v25[13];
            *v117 = *v118;
            v25[9] = v228;
            *v118 = v227;
            v25[13] = v226;
            while (1)
            {
              v229 = *(_QWORD *)((char *)v25 + v225 + 152);
              v230 = *(_QWORD *)((char *)v25 + v225 + 88);
              if (v229 != v230)
                break;
              v225 -= 8;
              if (v225 == -32)
                return result;
            }
            if (v229 < v230)
            {
              v231 = 0;
              a15 = v25[6];
              *((_DWORD *)v25 + 24) = *((_DWORD *)v25 + 40);
              *((_DWORD *)v25 + 40) = a15;
              v233 = *v116;
              v232 = v25[5];
              v234 = v25[9];
              *v116 = *v117;
              v25[5] = v234;
              *v117 = v233;
              v25[9] = v232;
              while (1)
              {
                v235 = *(_QWORD *)((char *)v25 + v231 + 88);
                v236 = *(_QWORD *)((char *)v25 + v231 + 24);
                if (v235 != v236)
                  break;
                v231 -= 8;
                if (v231 == -32)
                  return result;
              }
              if (v235 < v236)
              {
                v237 = v25[1];
                v238 = v25[3];
                a15 = v25[2];
                a16 = v238;
                a14 = v237;
                a13 = *v25;
                *((_DWORD *)v25 + 8) = *((_DWORD *)v25 + 24);
                v239 = v25[5];
                *v25 = *v116;
                v25[1] = v239;
                v240 = a13;
                v241 = a14;
                *((_DWORD *)v25 + 24) = a15;
                *v116 = v240;
                v25[5] = v241;
              }
            }
          }
        }
        return result;
      default:
        if (v26 <= 1535)
        {
          v122 = v25 + 4;
          v124 = v25 == (__int128 *)a2 || v122 == (__int128 *)a2;
          if ((v20 & 1) != 0)
          {
            if (!v124)
            {
              v125 = v25;
              do
              {
                v126 = 0;
                while (1)
                {
                  v127 = *(_QWORD *)((char *)v125 + v126 + 88);
                  v128 = *(_QWORD *)((char *)v125 + v126 + 24);
                  if (v127 != v128)
                    break;
                  v126 -= 8;
                  if (v126 == -32)
                    goto LABEL_147;
                }
                if (v127 < v128)
                {
                  v130 = v122[2];
                  v129 = v122[3];
                  a14 = v122[1];
                  a15 = v130;
                  a16 = v129;
                  a13 = *v122;
                  v131 = v125;
                  v132 = v122;
                  while (1)
                  {
                    v133 = v132;
                    v132 = v131;
                    v134 = v131[1];
                    *v133 = *v131;
                    v133[1] = v134;
                    *((_DWORD *)v133 + 8) = *((_DWORD *)v131 + 8);
                    if (v131 == v25)
                      break;
                    v135 = 0;
                    v131 -= 4;
                    while (1)
                    {
                      v136 = *(_QWORD *)(((unint64_t)&a13 | 0x18) + v135);
                      v137 = *(_QWORD *)((char *)v132 + v135 - 40);
                      if (v136 != v137)
                        break;
                      v135 -= 8;
                      if (v135 == -32)
                        goto LABEL_146;
                    }
                    if (v136 >= v137)
                      goto LABEL_146;
                  }
                  v132 = v25;
LABEL_146:
                  v138 = a15;
                  v132[1] = a14;
                  v139 = a13;
                  *((_DWORD *)v132 + 8) = v138;
                  *v132 = v139;
                }
LABEL_147:
                v122 += 4;
                v125 += 4;
              }
              while (v122 != (__int128 *)a2);
            }
          }
          else if (!v124)
          {
            do
            {
              v211 = 0;
              while (1)
              {
                v212 = *(_QWORD *)((char *)v23 + v211 + 88);
                v213 = *(_QWORD *)((char *)v23 + v211 + 24);
                if (v212 != v213)
                  break;
                v211 -= 8;
                if (v211 == -32)
                  goto LABEL_238;
              }
              if (v212 < v213)
              {
                v215 = v122[2];
                v214 = v122[3];
                a14 = v122[1];
                a15 = v215;
                a16 = v214;
                a13 = *v122;
                v216 = v23;
                v217 = v122;
                do
                {
                  v218 = 0;
                  v219 = v217;
                  v217 = v216;
                  v220 = v216[1];
                  *v219 = *v216;
                  v219[1] = v220;
                  *((_DWORD *)v219 + 8) = *((_DWORD *)v216 + 8);
                  v216 -= 4;
                  while (1)
                  {
                    v221 = *(_QWORD *)((char *)&a14 + v218 + 8);
                    v222 = *(_QWORD *)((char *)v217 + v218 - 40);
                    if (v221 != v222)
                      break;
                    v218 -= 8;
                    if (v218 == -32)
                      goto LABEL_237;
                  }
                }
                while (v221 < v222);
LABEL_237:
                v223 = a15;
                v217[1] = a14;
                v224 = a13;
                *((_DWORD *)v217 + 8) = v223;
                *v217 = v224;
              }
LABEL_238:
              v122 += 4;
              v23 += 4;
            }
            while (v122 != (__int128 *)a2);
          }
          return result;
        }
        if (!v21)
        {
          if (v25 != (__int128 *)a2)
          {
            v140 = (v27 - 2) >> 1;
            v141 = &v25[8 * v140];
            v142 = &v25[4 * v140];
            v143 = v140;
            do
            {
              v144 = v143;
              if (v140 >= v143)
              {
                v145 = (2 * v143) | 1;
                v146 = &v25[4 * v145];
                if (2 * v144 + 2 < (uint64_t)v27)
                {
                  v147 = 0;
                  while (1)
                  {
                    v148 = *(_QWORD *)((char *)v141 + v147 + 88);
                    a4 = *(_QWORD *)((char *)v141 + v147 + 152);
                    if (v148 != a4)
                      break;
                    v147 -= 8;
                    if (v147 == -32)
                      goto LABEL_158;
                  }
                  LOBYTE(a5) = v148 < a4;
LABEL_158:
                  if (((v148 != a4) & a5) != 0)
                  {
                    v146 += 4;
                    v145 = 2 * v144 + 2;
                  }
                }
                result = (unint64_t)&v25[4 * v144];
                v149 = 24;
                while (1)
                {
                  v150 = *(_QWORD *)((char *)v146 + v149);
                  a3 = *(_QWORD *)((char *)v142 + v149);
                  if (v150 != a3)
                    break;
                  v149 -= 8;
                  if (v149 == -8)
                    goto LABEL_165;
                }
                if (v150 < a3)
                  goto LABEL_185;
LABEL_165:
                v152 = *(_OWORD *)(result + 32);
                v151 = *(_OWORD *)(result + 48);
                a14 = *(_OWORD *)(result + 16);
                a15 = v152;
                a16 = v151;
                a13 = *(_OWORD *)result;
                while (1)
                {
                  v153 = (unint64_t)v146;
                  v154 = *((_DWORD *)v146 + 8);
                  *(_OWORD *)(result + 16) = *(_OWORD *)(v153 + 16);
                  v155 = *(_OWORD *)v153;
                  *(_DWORD *)(result + 32) = v154;
                  *(_OWORD *)result = v155;
                  if (v140 < v145)
                    break;
                  v156 = (2 * v145) | 1;
                  v146 = &v25[4 * v156];
                  v157 = 2 * v145 + 2;
                  if (v157 >= (uint64_t)v27)
                  {
                    v145 = (2 * v145) | 1;
                  }
                  else
                  {
                    a4 = 0;
                    v158 = &v25[8 * v145];
                    while (1)
                    {
                      a5 = *(_QWORD *)((char *)v158 + a4 + 88);
                      v159 = *(_QWORD *)((char *)v158 + a4 + 152);
                      if (a5 != v159)
                        break;
                      a4 -= 8;
                      if (a4 == -32)
                        goto LABEL_174;
                    }
                    a7 = a5 < v159;
LABEL_174:
                    if (a5 != v159 && a7)
                    {
                      v146 += 4;
                      v145 = v157;
                    }
                    else
                    {
                      v145 = v156;
                    }
                  }
                  v160 = 24;
                  while (1)
                  {
                    v161 = *(_QWORD *)((char *)v146 + v160);
                    a3 = *(_QWORD *)((char *)&a13 + v160);
                    if (v161 != a3)
                      break;
                    v160 -= 8;
                    if (v160 == -8)
                      goto LABEL_182;
                  }
                  LOBYTE(a4) = v161 < a3;
LABEL_182:
                  result = v153;
                  if (v161 != a3)
                  {
                    result = v153;
                    if ((a4 & 1) != 0)
                      break;
                  }
                }
                v162 = a15;
                *(_OWORD *)(v153 + 16) = a14;
                v163 = a13;
                *(_DWORD *)(v153 + 32) = v162;
                *(_OWORD *)v153 = v163;
              }
LABEL_185:
              v143 = v144 - 1;
              v141 -= 8;
              v142 -= 4;
            }
            while (v144);
            v164 = (unint64_t)v26 >> 6;
            do
            {
              v165 = 0;
              v166 = v25[2];
              vars0 = v25[1];
              v247 = v166;
              v243 = *v25;
              v167 = v25;
              do
              {
                v168 = &v167[4 * v165];
                v169 = v168 + 4;
                v170 = (2 * v165) | 1;
                v165 = 2 * v165 + 2;
                if (v165 >= v164)
                {
                  v165 = v170;
                }
                else
                {
                  v171 = 0;
                  while (1)
                  {
                    result = *(_QWORD *)((char *)v168 + v171 + 88);
                    v172 = *(_QWORD *)((char *)v168 + v171 + 152);
                    if (result != v172)
                      break;
                    v171 -= 8;
                    if (v171 == -32)
                      goto LABEL_195;
                  }
                  LOBYTE(a3) = result < v172;
LABEL_195:
                  if (((result != v172) & a3) != 0)
                    v169 = v168 + 8;
                  else
                    v165 = v170;
                }
                v173 = *((_DWORD *)v169 + 8);
                v167[1] = v169[1];
                v174 = *v169;
                *((_DWORD *)v167 + 8) = v173;
                *v167 = v174;
                v167 = v169;
              }
              while (v165 <= (uint64_t)((unint64_t)(v164 - 2) >> 1));
              a2 -= 64;
              if (v169 == (__int128 *)a2)
              {
                v169[1] = vars0;
                v185 = v243;
                *((_DWORD *)v169 + 8) = v166;
                *v169 = v185;
              }
              else
              {
                v175 = *(_DWORD *)(a2 + 32);
                v169[1] = *(_OWORD *)(a2 + 16);
                v176 = *(_OWORD *)a2;
                *((_DWORD *)v169 + 8) = v175;
                *v169 = v176;
                v178 = v243;
                v177 = vars0;
                *(_DWORD *)(a2 + 32) = v247;
                *(_OWORD *)a2 = v178;
                *(_OWORD *)(a2 + 16) = v177;
                v179 = (char *)v169 - (char *)v25 + 64;
                if (v179 >= 65)
                {
                  v180 = (((unint64_t)v179 >> 6) - 2) >> 1;
                  v181 = &v25[4 * v180];
                  v182 = 24;
                  while (1)
                  {
                    v183 = *(_QWORD *)((char *)v181 + v182);
                    v184 = *(_QWORD *)((char *)v169 + v182);
                    if (v183 != v184)
                      break;
                    v182 -= 8;
                    if (v182 == -8)
                      goto LABEL_206;
                  }
                  if (v183 < v184)
                  {
                    v188 = v169[2];
                    v187 = v169[3];
                    a14 = v169[1];
                    a15 = v188;
                    a16 = v187;
                    a13 = *v169;
                    do
                    {
                      v189 = v181;
                      v190 = *((_DWORD *)v181 + 8);
                      v169[1] = v189[1];
                      v191 = *v189;
                      *((_DWORD *)v169 + 8) = v190;
                      *v169 = v191;
                      if (!v180)
                        break;
                      v180 = (v180 - 1) >> 1;
                      v181 = &v25[4 * v180];
                      v192 = 24;
                      while (1)
                      {
                        v193 = *(_QWORD *)((char *)v181 + v192);
                        v194 = *(_QWORD *)((char *)&a13 + v192);
                        if (v193 != v194)
                          break;
                        v192 -= 8;
                        if (v192 == -8)
                          goto LABEL_217;
                      }
                      v169 = v189;
                    }
                    while (v193 < v194);
LABEL_217:
                    v195 = a15;
                    v189[1] = a14;
                    v196 = a13;
                    *((_DWORD *)v189 + 8) = v195;
                    *v189 = v196;
                  }
                }
              }
LABEL_206:
              ;
            }
            while (v164-- > 2);
          }
          return result;
        }
        v28 = v27 >> 1;
        v29 = &v25[4 * (v27 >> 1)];
        if ((unint64_t)v26 <= 0x2000)
        {
          result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(&v23[4 * (v27 >> 1)], v23, v242);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(v23, &v23[4 * (v27 >> 1)], v242);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(v23 + 4, v29 - 4, (__int128 *)(a2 - 128));
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(v23 + 8, &v23[4 * v28 + 4], (__int128 *)(a2 - 192));
          result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(v29 - 4, v29, &v23[4 * v28 + 4]);
          v34 = v23[1];
          v35 = v23[3];
          a15 = v23[2];
          a16 = v35;
          a14 = v34;
          a13 = *v23;
          v36 = *((_DWORD *)v29 + 8);
          v37 = v29[1];
          *v23 = *v29;
          v23[1] = v37;
          *((_DWORD *)v23 + 8) = v36;
          v39 = a13;
          v38 = a14;
          *((_DWORD *)v29 + 8) = a15;
          *v29 = v39;
          v29[1] = v38;
        }
        --v21;
        if ((v20 & 1) == 0)
        {
          v40 = 0;
          while (1)
          {
            v41 = *(_QWORD *)((char *)v23 + v40 - 40);
            v42 = *(_QWORD *)((char *)v23 + v40 + 24);
            if (v41 != v42)
              break;
            v40 -= 8;
            if (v40 == -32)
              goto LABEL_13;
          }
          if (v41 >= v42)
          {
LABEL_13:
            v43 = 0;
            v44 = v23[2];
            vars0 = v23[1];
            v245 = v44;
            v243 = *v23;
            while (1)
            {
              v45 = *(_QWORD *)((char *)&vars0 + v43 + 8);
              v46 = *(_QWORD *)(a2 + v43 - 40);
              v47 = v45 >= v46;
              if (v45 != v46)
                break;
              v43 -= 8;
              if (v43 == -32)
              {
                v48 = v23;
                while (1)
                {
LABEL_75:
                  v25 = v48 + 4;
                  if ((unint64_t)(v48 + 4) >= a2)
                    goto LABEL_83;
                  v87 = 0;
                  while (1)
                  {
                    v88 = *(_QWORD *)(v24 + v87);
                    v89 = *(_QWORD *)((char *)v48 + v87 + 88);
                    if (v88 != v89)
                      break;
                    v87 -= 8;
                    if (v87 == -32)
                      goto LABEL_81;
                  }
                  v30 = v88 < v89;
LABEL_81:
                  v48 += 4;
                  if (v88 != v89)
                  {
                    v48 = v25;
                    if (v30)
                      goto LABEL_83;
                  }
                }
              }
            }
            v83 = v23;
            v48 = v23;
            if (v47)
              goto LABEL_75;
            while (1)
            {
              v84 = 0;
              v25 = v83 + 4;
              while (1)
              {
                v85 = *(_QWORD *)(v24 + v84);
                v86 = *(_QWORD *)((char *)v83 + v84 + 88);
                if (v85 != v86)
                  break;
                v84 -= 8;
                if (v84 == -32)
                  goto LABEL_72;
              }
              v30 = v85 < v86;
LABEL_72:
              v83 += 4;
              if (v85 != v86)
              {
                v83 = v25;
                if (v30)
                  break;
              }
            }
LABEL_83:
            v90 = a2;
            if ((unint64_t)v25 < a2)
            {
              v91 = a2;
              do
              {
                v92 = 0;
                v90 = v91 - 64;
                while (1)
                {
                  v93 = *(_QWORD *)(v24 + v92);
                  v94 = *(_QWORD *)(v91 + v92 - 40);
                  if (v93 != v94)
                    break;
                  v92 -= 8;
                  if (v92 == -32)
                    goto LABEL_105;
                }
                v91 -= 64;
              }
              while (v93 < v94);
            }
LABEL_105:
            while ((unint64_t)v25 < v90)
            {
              v95 = v25[1];
              v96 = v25[3];
              a15 = v25[2];
              a16 = v96;
              a14 = v95;
              a13 = *v25;
              v97 = *(_DWORD *)(v90 + 32);
              v98 = *(_OWORD *)(v90 + 16);
              *v25 = *(_OWORD *)v90;
              v25[1] = v98;
              *((_DWORD *)v25 + 8) = v97;
              v100 = a13;
              v99 = a14;
              *(_DWORD *)(v90 + 32) = a15;
              *(_OWORD *)v90 = v100;
              *(_OWORD *)(v90 + 16) = v99;
              v101 = v25;
              while (1)
              {
                v102 = 0;
                v25 = v101 + 4;
                while (1)
                {
                  v103 = *(_QWORD *)(v24 + v102);
                  v104 = *(_QWORD *)((char *)v101 + v102 + 88);
                  if (v103 != v104)
                    break;
                  v102 -= 8;
                  if (v102 == -32)
                    goto LABEL_97;
                }
                v31 = v103 < v104;
LABEL_97:
                v101 += 4;
                if (v103 != v104)
                {
                  v101 = v25;
                  if (v31)
                    break;
                }
              }
              v105 = v90;
              do
              {
                v106 = 0;
                v90 = v105 - 64;
                while (1)
                {
                  v107 = *(_QWORD *)(v24 + v106);
                  v108 = *(_QWORD *)(v105 + v106 - 40);
                  if (v107 != v108)
                    break;
                  v106 -= 8;
                  if (v106 == -32)
                    goto LABEL_105;
                }
                v105 -= 64;
              }
              while (v107 < v108);
            }
            v109 = v25 - 4;
            if (v25 - 4 != v23)
            {
              v110 = *((_DWORD *)v25 - 8);
              v23[1] = *(v25 - 3);
              v111 = *v109;
              *((_DWORD *)v23 + 8) = v110;
              *v23 = v111;
            }
            v20 = 0;
            *(v25 - 3) = vars0;
            v112 = v243;
            *((_DWORD *)v25 - 8) = v245;
            *v109 = v112;
            continue;
          }
        }
        v49 = v23[2];
        vars0 = v23[1];
        v246 = v49;
        v243 = *v23;
        v50 = v23;
        do
        {
          v51 = 0;
          v52 = v50;
          v50 += 4;
          while (1)
          {
            v53 = *(_QWORD *)((char *)v52 + v51 + 88);
            v54 = *(_QWORD *)((char *)&vars0 + v51 + 8);
            if (v53 != v54)
              break;
            v51 -= 8;
            if (v51 == -32)
              goto LABEL_24;
          }
        }
        while (v53 < v54);
LABEL_24:
        v55 = a2;
        if (v52 == v23)
        {
          v60 = a2;
          while ((unint64_t)v50 < v60)
          {
            v61 = 0;
            v57 = v60 - 64;
            while (1)
            {
              v62 = *(_QWORD *)(v60 + v61 - 40);
              v63 = *(_QWORD *)(v24 + v61);
              if (v62 != v63)
                break;
              v61 -= 8;
              if (v61 == -32)
                goto LABEL_40;
            }
            v32 = v62 < v63;
LABEL_40:
            v60 -= 64;
            if (v62 != v63)
            {
              v60 = v57;
              if (v32)
                goto LABEL_44;
            }
          }
          v57 = v60;
        }
        else
        {
          while (1)
          {
            v56 = 0;
            v57 = v55 - 64;
            while (1)
            {
              v58 = *(_QWORD *)(v55 + v56 - 40);
              v59 = *(_QWORD *)(v24 + v56);
              if (v58 != v59)
                break;
              v56 -= 8;
              if (v56 == -32)
                goto LABEL_30;
            }
            v32 = v58 < v59;
LABEL_30:
            v55 -= 64;
            if (v58 != v59)
            {
              v55 = v57;
              if (v32)
                break;
            }
          }
        }
LABEL_44:
        if ((unint64_t)v50 < v57)
        {
          v64 = v50;
          v65 = v57;
          do
          {
            v66 = v64[3];
            a15 = v64[2];
            a16 = v66;
            v67 = v64[1];
            a13 = *v64;
            v68 = a13;
            a14 = v67;
            v70 = *(_OWORD *)v65;
            v69 = *(_OWORD *)(v65 + 16);
            *((_DWORD *)v64 + 8) = *(_DWORD *)(v65 + 32);
            *v64 = v70;
            v64[1] = v69;
            v71 = a15;
            *(_OWORD *)v65 = v68;
            *(_OWORD *)(v65 + 16) = v67;
            *(_DWORD *)(v65 + 32) = v71;
            do
            {
              v72 = 0;
              v52 = v64;
              v64 += 4;
              while (1)
              {
                v73 = *(_QWORD *)((char *)v52 + v72 + 88);
                v74 = *(_QWORD *)(v24 + v72);
                if (v73 != v74)
                  break;
                v72 -= 8;
                if (v72 == -32)
                  goto LABEL_52;
              }
            }
            while (v73 < v74);
            while (1)
            {
LABEL_52:
              v75 = 0;
              v76 = v65 - 64;
              while (1)
              {
                v77 = *(_QWORD *)(v65 + v75 - 40);
                v78 = *(_QWORD *)(v24 + v75);
                if (v77 != v78)
                  break;
                v75 -= 8;
                if (v75 == -32)
                  goto LABEL_57;
              }
              v33 = v77 < v78;
LABEL_57:
              v65 -= 64;
              if (v77 != v78)
              {
                v65 = v76;
                if (v33)
                  break;
              }
            }
            v65 = v76;
          }
          while ((unint64_t)v64 < v76);
        }
        if (v52 != v23)
        {
          v79 = *((_DWORD *)v52 + 8);
          v23[1] = v52[1];
          v80 = *v52;
          *((_DWORD *)v23 + 8) = v79;
          *v23 = v80;
        }
        v52[1] = vars0;
        v81 = v243;
        *((_DWORD *)v52 + 8) = v246;
        *v52 = v81;
        if ((unint64_t)v50 < v57)
        {
LABEL_65:
          result = std::__introsort<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *,false>(v23, v52, v21, v20 & 1);
          v20 = 0;
          v25 = v52 + 4;
          continue;
        }
        v82 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>((char *)v23, (char *)v52);
        v25 = v52 + 4;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>((char *)v52 + 64, (char *)a2);
        if (!(_DWORD)result)
        {
          if (v82)
            continue;
          goto LABEL_65;
        }
        a2 = (unint64_t)v52;
        if (!v82)
          goto LABEL_2;
        return result;
    }
  }
}

_OWORD *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(_OWORD *result, __int128 *a2, __int128 *a3)
{
  BOOL v3;
  BOOL v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v5 = 24;
  while (1)
  {
    v6 = *(_QWORD *)((char *)a2 + v5);
    v7 = *(_QWORD *)((char *)result + v5);
    if (v6 != v7)
      break;
    v5 -= 8;
    if (v5 == -8)
      goto LABEL_6;
  }
  v3 = v6 < v7;
LABEL_6:
  v8 = v6 != v7 && v3;
  v9 = 24;
  while (1)
  {
    v10 = *(_QWORD *)((char *)a3 + v9);
    v11 = *(_QWORD *)((char *)a2 + v9);
    if (v10 != v11)
      break;
    v9 -= 8;
    if (v9 == -8)
      goto LABEL_11;
  }
  v4 = v10 < v11;
LABEL_11:
  if (v8)
  {
    if (v10 != v11 && v4)
    {
      v36 = result[2];
      v13 = *result;
      v12 = result[1];
      v15 = *a3;
      v14 = a3[1];
      *((_DWORD *)result + 8) = *((_DWORD *)a3 + 8);
      *result = v15;
      result[1] = v14;
LABEL_27:
      *a3 = v13;
      a3[1] = v12;
      *((_DWORD *)a3 + 8) = v36;
      return result;
    }
    v38 = result[2];
    v24 = *result;
    v23 = result[1];
    v26 = *a2;
    v25 = a2[1];
    *((_DWORD *)result + 8) = *((_DWORD *)a2 + 8);
    *result = v26;
    result[1] = v25;
    *a2 = v24;
    a2[1] = v23;
    *((_DWORD *)a2 + 8) = v38;
    v27 = 24;
    while (1)
    {
      v28 = *(_QWORD *)((char *)a3 + v27);
      v29 = *(_QWORD *)((char *)a2 + v27);
      if (v28 != v29)
        break;
      v27 -= 8;
      if (v27 == -8)
        return result;
    }
    if (v28 < v29)
    {
      v36 = a2[2];
      v13 = *a2;
      v12 = a2[1];
      v35 = *a3;
      v34 = a3[1];
      *((_DWORD *)a2 + 8) = *((_DWORD *)a3 + 8);
      *a2 = v35;
      a2[1] = v34;
      goto LABEL_27;
    }
  }
  else if (v10 != v11 && v4)
  {
    v37 = a2[2];
    v17 = *a2;
    v16 = a2[1];
    v19 = *a3;
    v18 = a3[1];
    *((_DWORD *)a2 + 8) = *((_DWORD *)a3 + 8);
    *a2 = v19;
    a2[1] = v18;
    *a3 = v17;
    a3[1] = v16;
    *((_DWORD *)a3 + 8) = v37;
    v20 = 24;
    while (1)
    {
      v21 = *(_QWORD *)((char *)a2 + v20);
      v22 = *(_QWORD *)((char *)result + v20);
      if (v21 != v22)
        break;
      v20 -= 8;
      if (v20 == -8)
        return result;
    }
    if (v21 < v22)
    {
      v39 = result[2];
      v31 = *result;
      v30 = result[1];
      v33 = *a2;
      v32 = a2[1];
      *((_DWORD *)result + 8) = *((_DWORD *)a2 + 8);
      *result = v33;
      result[1] = v32;
      *a2 = v31;
      a2[1] = v30;
      *((_DWORD *)a2 + 8) = v39;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(char *a1, char *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  int v12;
  char *v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  __int128 v27;
  __int128 *v28;
  __int128 *v29;
  __int128 *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  unint64_t v56;
  unint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 vars0;

  v4 = (a2 - a1) >> 6;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = 0;
      v7 = a2 - 64;
      while (1)
      {
        v8 = *(_QWORD *)&a2[v6 - 40];
        v9 = *(_QWORD *)&a1[v6 + 24];
        if (v8 != v9)
          break;
        v6 -= 8;
        if (v6 == -32)
          return 1;
      }
      if (v8 < v9)
      {
        v63 = *((_OWORD *)a1 + 2);
        v36 = *(_OWORD *)a1;
        v35 = *((_OWORD *)a1 + 1);
        v38 = *(_OWORD *)v7;
        v37 = *((_OWORD *)a2 - 3);
        *((_DWORD *)a1 + 8) = *((_DWORD *)a2 - 8);
        *(_OWORD *)a1 = v38;
        *((_OWORD *)a1 + 1) = v37;
        *(_OWORD *)v7 = v36;
        *((_OWORD *)a2 - 3) = v35;
        *((_DWORD *)a2 - 8) = v63;
      }
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(a1, (__int128 *)a1 + 4, (__int128 *)a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>((__int128 *)a1, (__int128 *)a1 + 4, (__int128 *)a1 + 8, (uint64_t)(a2 - 64));
      return 1;
    case 5:
      v28 = (__int128 *)(a1 + 64);
      v29 = (__int128 *)(a1 + 128);
      v30 = (__int128 *)(a1 + 192);
      v31 = a2 - 64;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>((__int128 *)a1, (__int128 *)a1 + 4, (__int128 *)a1 + 8, (uint64_t)(a1 + 192));
      v32 = 0;
      while (1)
      {
        v33 = *(_QWORD *)&a2[v32 - 40];
        v34 = *(_QWORD *)&a1[v32 + 216];
        if (v33 != v34)
          break;
        v32 -= 8;
        if (v32 == -32)
          return 1;
      }
      if (v33 < v34)
      {
        v39 = 0;
        v63 = *((_OWORD *)a1 + 14);
        v41 = *v30;
        v40 = *((_OWORD *)a1 + 13);
        v43 = *(_OWORD *)v31;
        v42 = *((_OWORD *)a2 - 3);
        *((_DWORD *)a1 + 56) = *((_DWORD *)a2 - 8);
        *v30 = v43;
        *((_OWORD *)a1 + 13) = v42;
        *((_DWORD *)a2 - 8) = v63;
        *(_OWORD *)v31 = v41;
        *((_OWORD *)a2 - 3) = v40;
        result = 1;
        while (1)
        {
          v44 = *(_QWORD *)&a1[v39 + 216];
          v45 = *(_QWORD *)&a1[v39 + 152];
          if (v44 != v45)
            break;
          v39 -= 8;
          if (v39 == -32)
            return result;
        }
        if (v44 < v45)
        {
          v46 = 0;
          v63 = *((_OWORD *)a1 + 10);
          *((_DWORD *)a1 + 40) = *((_DWORD *)a1 + 56);
          *((_DWORD *)a1 + 56) = v63;
          v48 = *v29;
          v47 = *((_OWORD *)a1 + 9);
          v49 = *((_OWORD *)a1 + 13);
          *v29 = *v30;
          *((_OWORD *)a1 + 9) = v49;
          *v30 = v48;
          *((_OWORD *)a1 + 13) = v47;
          result = 1;
          while (1)
          {
            v50 = *(_QWORD *)&a1[v46 + 152];
            v51 = *(_QWORD *)&a1[v46 + 88];
            if (v50 != v51)
              break;
            v46 -= 8;
            if (v46 == -32)
              return result;
          }
          if (v50 < v51)
          {
            v52 = 0;
            v63 = *((_OWORD *)a1 + 6);
            *((_DWORD *)a1 + 24) = *((_DWORD *)a1 + 40);
            *((_DWORD *)a1 + 40) = v63;
            v54 = *v28;
            v53 = *((_OWORD *)a1 + 5);
            v55 = *((_OWORD *)a1 + 9);
            *v28 = *v29;
            *((_OWORD *)a1 + 5) = v55;
            *v29 = v54;
            *((_OWORD *)a1 + 9) = v53;
            result = 1;
            while (1)
            {
              v56 = *(_QWORD *)&a1[v52 + 88];
              v57 = *(_QWORD *)&a1[v52 + 24];
              if (v56 != v57)
                break;
              v52 -= 8;
              if (v52 == -32)
                return result;
            }
            if (v56 < v57)
            {
              v63 = *((_OWORD *)a1 + 2);
              v59 = *(_OWORD *)a1;
              v58 = *((_OWORD *)a1 + 1);
              v60 = *((_OWORD *)a1 + 5);
              *(_OWORD *)a1 = *v28;
              *((_OWORD *)a1 + 1) = v60;
              *((_DWORD *)a1 + 8) = *((_DWORD *)a1 + 24);
              *v28 = v59;
              *((_OWORD *)a1 + 5) = v58;
              *((_DWORD *)a1 + 24) = v63;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 128;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(a1, (__int128 *)a1 + 4, (__int128 *)a1 + 8);
      v11 = a1 + 192;
      if (a1 + 192 == a2)
        return 1;
      v12 = 0;
      v13 = a1 + 88;
      v14 = a1;
      break;
  }
  while (2)
  {
    v15 = 0;
    while (1)
    {
      v16 = *(_QWORD *)((char *)v14 + v15 + 216);
      v17 = *(_QWORD *)((char *)v14 + v15 + 152);
      if (v16 != v17)
        break;
      v15 -= 8;
      if (v15 == -32)
        goto LABEL_23;
    }
    if (v16 < v17)
    {
      v18 = *((_OWORD *)v11 + 1);
      v61 = *(_OWORD *)v11;
      v62 = v18;
      v19 = *((_OWORD *)v11 + 3);
      v63 = *((_OWORD *)v11 + 2);
      vars0 = v19;
      v20 = v13;
      v21 = v11;
      while (1)
      {
        v22 = *((_OWORD *)v10 + 1);
        *(_OWORD *)v21 = *(_OWORD *)v10;
        *((_OWORD *)v21 + 1) = v22;
        *((_DWORD *)v21 + 8) = *((_DWORD *)v10 + 8);
        if (v10 == a1)
          break;
        v21 = v10;
        v23 = 0;
        v10 -= 64;
        while (1)
        {
          v24 = *(_QWORD *)(((unint64_t)&v61 | 0x18) + v23);
          v25 = *(_QWORD *)&v20[v23];
          if (v24 != v25)
            break;
          v23 -= 8;
          if (v23 == -32)
            goto LABEL_22;
        }
        v20 -= 64;
        if (v24 >= v25)
          goto LABEL_22;
      }
      v21 = a1;
LABEL_22:
      v26 = v63;
      *((_OWORD *)v21 + 1) = v62;
      v27 = v61;
      *((_DWORD *)v21 + 8) = v26;
      *(_OWORD *)v21 = v27;
      if (++v12 == 8)
        return v11 + 64 == a2;
    }
LABEL_23:
    v10 = v11;
    v14 += 4;
    v13 += 64;
    v11 += 64;
    if (v11 != a2)
      continue;
    return 1;
  }
}

_OWORD *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  _OWORD *result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 vars0;
  __int128 vars0a;
  __int128 vars0b;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,re::ecs2::CAMeshSortGroup::recomputeMeshSorting(re::Allocator &)::$_1 &,re::ecs2::CoincidentalSortKey *>(a1, a2, a3);
  v9 = 24;
  while (1)
  {
    v10 = *(_QWORD *)(a4 + v9);
    v11 = *(_QWORD *)((char *)a3 + v9);
    if (v10 != v11)
      break;
    v9 -= 8;
    if (v9 == -8)
      return result;
  }
  if (v10 < v11)
  {
    vars0 = a3[2];
    v13 = *a3;
    v12 = a3[1];
    v15 = *(_OWORD *)a4;
    v14 = *(_OWORD *)(a4 + 16);
    *((_DWORD *)a3 + 8) = *(_DWORD *)(a4 + 32);
    *a3 = v15;
    a3[1] = v14;
    *(_OWORD *)a4 = v13;
    *(_OWORD *)(a4 + 16) = v12;
    *(_DWORD *)(a4 + 32) = vars0;
    v16 = 24;
    while (1)
    {
      v17 = *(_QWORD *)((char *)a3 + v16);
      v18 = *(_QWORD *)((char *)a2 + v16);
      if (v17 != v18)
        break;
      v16 -= 8;
      if (v16 == -8)
        return result;
    }
    if (v17 < v18)
    {
      vars0a = a2[2];
      v20 = *a2;
      v19 = a2[1];
      v22 = *a3;
      v21 = a3[1];
      *((_DWORD *)a2 + 8) = *((_DWORD *)a3 + 8);
      *a2 = v22;
      a2[1] = v21;
      *a3 = v20;
      a3[1] = v19;
      *((_DWORD *)a3 + 8) = vars0a;
      v23 = 24;
      while (1)
      {
        v24 = *(_QWORD *)((char *)a2 + v23);
        v25 = *(_QWORD *)((char *)a1 + v23);
        if (v24 != v25)
          break;
        v23 -= 8;
        if (v23 == -8)
          return result;
      }
      if (v24 < v25)
      {
        vars0b = a1[2];
        v27 = *a1;
        v26 = a1[1];
        v29 = *a2;
        v28 = a2[1];
        *((_DWORD *)a1 + 8) = *((_DWORD *)a2 + 8);
        *a1 = v29;
        a1[1] = v28;
        *a2 = v27;
        a2[1] = v26;
        *((_DWORD *)a2 + 8) = vars0b;
      }
    }
  }
  return result;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t Type;
  unint64_t EventInfo;
  uint64_t v12;
  uint64_t (**v14[6])();
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  Type = re::EventBus::getTypeId<REComponentDidAddEvent>();
  EventInfo = re::EventBus::addOrGetEventInfo(a1, Type);
  re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(a3, a5, v14);
  v12 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)v14, a2, a4);
  if (v16)
  {
    ((void (*)(uint64_t (***)()))**v16)(v16);
    if (v16 != v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return v12;
}

{
  uint64_t Type;
  re *EventInfo;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;
  _QWORD *v17;
  uint64_t (**v18[6])();
  uint64_t v19;
  uint64_t (***v20)();
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  Type = re::EventBus::getTypeId<REComponentDidAddEvent>();
  EventInfo = (re *)re::EventBus::addOrGetEventInfo(a1, Type);
  v12 = re::globalAllocators(EventInfo)[2];
  v15[0] = &off_24ED5DAA0;
  v15[1] = a3;
  v16 = v12;
  v17 = v15;
  re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>((uint64_t)v15, a5, v18);
  v13 = re::EventBus::EventInfo::addSubscription((unint64_t)EventInfo, (uint64_t)v18, a2, a4);
  if (v20)
  {
    ((void (*)(uint64_t (***)()))**v20)(v20);
    if (v20 != v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    v20 = 0;
  }
  if (v17)
  {
    (*(void (**)(_QWORD *))*v17)(v17);
    if (v17 != v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  }
  return v13;
}

uint64_t re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>@<X0>(uint64_t a1@<X2>, char a2@<W4>, uint64_t (***a3)()@<X8>)
{
  re *v4;
  uint64_t v5;
  uint64_t (**v6)();
  re *v7;
  uint64_t result;
  _BYTE v9[24];
  uint64_t (**v10)();
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = *(uint64_t (***)())(a1 + 24);
  v11 = 0;
  if ((a2 & 1) != 0)
  {
    v7 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v7)[2];
    v6 = &off_24ED45418;
  }
  else
  {
    v4 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v4)[2];
    v6 = &off_24ED45470;
  }
  a3[6] = (uint64_t (**)())v5;
  a3[7] = 0;
  *a3 = v6;
  a3[4] = v10;
  a3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a3 + 1), (uint64_t)v9);
  a3[7] = (uint64_t (**)())a3;
  result = (uint64_t)v11;
  if (v11)
  {
    result = (**(uint64_t (***)(_BYTE *))v11)(v11);
    if (v11 != v9)
      return (*((uint64_t (**)(uint64_t (**)()))*v10 + 5))(v10);
  }
  return result;
}

uint64_t re::EventBus::getTypeId<REComponentDidAddEvent>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const char *v4;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      re::EventBus::getTypeId<REComponentDidAddEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"22REComponentDidAddEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
    }
  }
  return v1[326];
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED45418;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED45418;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
  return 1;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED45418;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED45418;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED45470;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED45470;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED45470;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED45470;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentDidAddEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  unint64_t EventInfo;
  uint64_t v12;
  uint64_t (**v14[6])();
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v10 = re::EventBus::getTypeId<REComponentWillRemoveEvent>();
  EventInfo = re::EventBus::addOrGetEventInfo(a1, v10);
  re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(a3, a5, v14);
  v12 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)v14, a2, a4);
  if (v16)
  {
    ((void (*)(uint64_t (***)()))**v16)(v16);
    if (v16 != v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return v12;
}

{
  uint64_t v10;
  re *EventInfo;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;
  _QWORD *v17;
  uint64_t (**v18[6])();
  uint64_t v19;
  uint64_t (***v20)();
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v10 = re::EventBus::getTypeId<REComponentWillRemoveEvent>();
  EventInfo = (re *)re::EventBus::addOrGetEventInfo(a1, v10);
  v12 = re::globalAllocators(EventInfo)[2];
  v15[0] = &off_24ED5DAF8;
  v15[1] = a3;
  v16 = v12;
  v17 = v15;
  re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>((uint64_t)v15, a5, v18);
  v13 = re::EventBus::EventInfo::addSubscription((unint64_t)EventInfo, (uint64_t)v18, a2, a4);
  if (v20)
  {
    ((void (*)(uint64_t (***)()))**v20)(v20);
    if (v20 != v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    v20 = 0;
  }
  if (v17)
  {
    (*(void (**)(_QWORD *))*v17)(v17);
    if (v17 != v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  }
  return v13;
}

uint64_t re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>@<X0>(uint64_t a1@<X2>, char a2@<W4>, uint64_t (***a3)()@<X8>)
{
  re *v4;
  uint64_t v5;
  uint64_t (**v6)();
  re *v7;
  uint64_t result;
  _BYTE v9[24];
  uint64_t (**v10)();
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = *(uint64_t (***)())(a1 + 24);
  v11 = 0;
  if ((a2 & 1) != 0)
  {
    v7 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v7)[2];
    v6 = &off_24ED454D8;
  }
  else
  {
    v4 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v4)[2];
    v6 = &off_24ED45530;
  }
  a3[6] = (uint64_t (**)())v5;
  a3[7] = 0;
  *a3 = v6;
  a3[4] = v10;
  a3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a3 + 1), (uint64_t)v9);
  a3[7] = (uint64_t (**)())a3;
  result = (uint64_t)v11;
  if (v11)
  {
    result = (**(uint64_t (***)(_BYTE *))v11)(v11);
    if (v11 != v9)
      return (*((uint64_t (**)(uint64_t (**)()))*v10 + 5))(v10);
  }
  return result;
}

uint64_t re::EventBus::getTypeId<REComponentWillRemoveEvent>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const char *v4;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      re::EventBus::getTypeId<REComponentWillRemoveEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"26REComponentWillRemoveEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
    }
  }
  return v1[328];
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED454D8;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED454D8;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
  return 1;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED454D8;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED454D8;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED45530;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED45530;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED45530;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED45530;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REComponentWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  __guard Type;
  unint64_t EventInfo;
  uint64_t v12;
  uint64_t (**v14[6])();
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  Type = re::EventBus::getTypeId<REBillboardTransformChangedEvent>();
  EventInfo = re::EventBus::addOrGetEventInfo(a1, Type);
  re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(a3, a5, v14);
  v12 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)v14, a2, a4);
  if (v16)
  {
    ((void (*)(uint64_t (***)()))**v16)(v16);
    if (v16 != v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return v12;
}

uint64_t re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>@<X0>(uint64_t a1@<X2>, char a2@<W4>, uint64_t (***a3)()@<X8>)
{
  re *v4;
  uint64_t v5;
  uint64_t (**v6)();
  re *v7;
  uint64_t result;
  _BYTE v9[24];
  uint64_t (**v10)();
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = *(uint64_t (***)())(a1 + 24);
  v11 = 0;
  if ((a2 & 1) != 0)
  {
    v7 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v7)[2];
    v6 = &off_24ED451A0;
  }
  else
  {
    v4 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v4)[2];
    v6 = &off_24ED451F8;
  }
  a3[6] = (uint64_t (**)())v5;
  a3[7] = 0;
  *a3 = v6;
  a3[4] = v10;
  a3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a3 + 1), (uint64_t)v9);
  a3[7] = (uint64_t (**)())a3;
  result = (uint64_t)v11;
  if (v11)
  {
    result = (**(uint64_t (***)(_BYTE *))v11)(v11);
    if (v11 != v9)
      return (*((uint64_t (**)(uint64_t (**)()))*v10 + 5))(v10);
  }
  return result;
}

__guard re::EventBus::getTypeId<REBillboardTransformChangedEvent>()
{
  unsigned __int8 v0;
  __guard *v1;
  int v3;
  const char *v4;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      re::EventBus::getTypeId<REBillboardTransformChangedEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"32REBillboardTransformChangedEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
    }
  }
  return v1[317];
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED451A0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED451A0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
  return 1;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED451A0;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED451A0;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED451F8;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED451F8;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED451F8;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED451F8;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,REBillboardTransformChangedEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,REBillboardTransformChangedEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

__guard re::EventBus::getTypeId<re::ecs2::UISortingComponentDidChangeCASortOrderEvent>()
{
  unsigned __int8 v0;
  __guard *v1;
  int v3;
  const char *v4;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      re::EventBus::getTypeId<re::ecs2::UISortingComponentDidChangeCASortOrderEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"N2re4ecs243UISortingComponentDidChangeCASortOrderEventE" & 0x7FFFFFFFFFFFFFFFLL), v4);
    }
  }
  return v1[320];
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeCASortOrderEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED45250;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeCASortOrderEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED45250;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeCASortOrderEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeCASortOrderEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED45250;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeCASortOrderEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED45250;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeCASortOrderEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCASortOrderEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

__guard re::EventBus::getTypeId<re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent>()
{
  unsigned __int8 v0;
  __guard *v1;
  int v3;
  const char *v4;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      re::EventBus::getTypeId<re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"N2re4ecs248UISortingComponentDidChangeCALayerNeedsMeshEventE" & 0x7FFFFFFFFFFFFFFFLL), v4);
    }
  }
  return v1[322];
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED452A8;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED452A8;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED452A8;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED452A8;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeCALayerNeedsMeshEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

__guard re::EventBus::getTypeId<re::ecs2::UISortingComponentDidChangeIsPlatterEvent>()
{
  unsigned __int8 v0;
  __guard *v1;
  int v3;
  const char *v4;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      re::EventBus::getTypeId<re::ecs2::UISortingComponentDidChangeIsPlatterEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"N2re4ecs241UISortingComponentDidChangeIsPlatterEventE" & 0x7FFFFFFFFFFFFFFFLL), v4);
    }
  }
  return v1[324];
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeIsPlatterEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED45300;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeIsPlatterEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED45300;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeIsPlatterEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeIsPlatterEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED45300;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeIsPlatterEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED45300;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,re::ecs2::UISortingComponentDidChangeIsPlatterEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,re::ecs2::UISortingComponentDidChangeIsPlatterEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::EventBus *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  unint64_t EventInfo;
  uint64_t v12;
  uint64_t (**v14[6])();
  uint64_t v15;
  uint64_t (***v16)();
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v10 = re::EventBus::getTypeId<RESceneEntityWillRemoveEvent>();
  EventInfo = re::EventBus::addOrGetEventInfo(a1, v10);
  re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(a3, a5, v14);
  v12 = re::EventBus::EventInfo::addSubscription(EventInfo, (uint64_t)v14, a2, a4);
  if (v16)
  {
    ((void (*)(uint64_t (***)()))**v16)(v16);
    if (v16 != v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  return v12;
}

uint64_t re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>@<X0>(uint64_t a1@<X2>, char a2@<W4>, uint64_t (***a3)()@<X8>)
{
  re *v4;
  uint64_t v5;
  uint64_t (**v6)();
  re *v7;
  uint64_t result;
  _BYTE v9[24];
  uint64_t (**v10)();
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = *(uint64_t (***)())(a1 + 24);
  v11 = 0;
  if ((a2 & 1) != 0)
  {
    v7 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v7)[2];
    v6 = &off_24ED45358;
  }
  else
  {
    v4 = (re *)re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v9, a1);
    v5 = re::globalAllocators(v4)[2];
    v6 = &off_24ED453B0;
  }
  a3[6] = (uint64_t (**)())v5;
  a3[7] = 0;
  *a3 = v6;
  a3[4] = v10;
  a3[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a3 + 1), (uint64_t)v9);
  a3[7] = (uint64_t (**)())a3;
  result = (uint64_t)v11;
  if (v11)
  {
    result = (**(uint64_t (***)(_BYTE *))v11)(v11);
    if (v11 != v9)
      return (*((uint64_t (**)(uint64_t (**)()))*v10 + 5))(v10);
  }
  return result;
}

uint64_t re::EventBus::getTypeId<RESceneEntityWillRemoveEvent>()
{
  unsigned __int8 v0;
  _QWORD *v1;
  int v3;
  const char *v4;

  if ((v0 & 1) == 0)
  {
    if (v3)
    {
      re::EventBus::getTypeId<RESceneEntityWillRemoveEvent>(void)const::s_id = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"28RESceneEntityWillRemoveEvent" & 0x7FFFFFFFFFFFFFFFLL), v4);
    }
  }
  return v1[330];
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED45358;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED45358;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  (*(void (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
  return 1;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED45358;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED45358;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#1},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED453B0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  return a1;
}

void re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::~Callable(_QWORD *a1)
{
  *a1 = &off_24ED453B0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 1));
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::operator()(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a3;
  v5 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), &v5, v3);
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED453B0;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

_QWORD *re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED453B0;
  a2[4] = *(_QWORD *)(a1 + 32);
  a2[5] = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(a2 + 1), a1 + 8);
  return a2;
}

uint64_t re::internal::Callable<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)> re::EventBus::createHandler<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(re::ecs2::Entity *,re::Function<REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)> const&,void const*,re::EventBus::HandlerOptions)::{lambda(void *,void const*)#2},REEventHandlerResult ()(void *,void const*)>::size()
{
  return 48;
}

uint64_t re::ecs2::LightComponentHelper::makeEntityWithDirectionalLight@<X0>(re::ecs2::EntityFactory *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, re::ecs2::Entity **a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  uint64_t *v12;
  re::ecs2::EntityComponentCollection *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t result;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;

  v12 = re::ecs2::EntityFactory::instance(a1);
  re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v12, 4uLL, a4);
  v13 = (re::ecs2::Entity *)((char *)*a4 + 32);
  v14 = re::ecs2::EntityComponentCollection::add(v13, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TransformComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v18[0] = 0x3F8000003F800000;
  v18[1] = 1065353216;
  v15 = *(_OWORD *)a1;
  v19 = *((_OWORD *)a1 + 1);
  v20 = v15;
  re::ecs2::TransformComponent::setWorldSRT(v14, (uint64_t)v18, 0);
  result = re::ecs2::EntityComponentCollection::add(v13, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  *(_QWORD *)&v17 = *(_QWORD *)a2;
  DWORD2(v17) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(result + 336) = v17;
  *(_BYTE *)(result + 352) = 0;
  *(_DWORD *)(result + 28) = 1158028115;
  if (a3)
  {
    result = re::ecs2::EntityComponentCollection::add(v13, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DirectionalLightShadowMapComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    *(float *)(result + 28) = a5;
    *(float *)(result + 32) = a6;
  }
  return result;
}

re::ecs2::CustomComponent *re::ecs2::CustomComponent::CustomComponent(re::ecs2::CustomComponent *this, const re::ecs2::CustomComponentType *a2)
{
  uint64_t v4;
  uint64_t (*v5)(const re::ecs2::CustomComponentType *);
  _anonymous_namespace_ *v6;
  uint64_t v7;
  void *Instance;
  uint64_t v9;
  re::ecs2::CustomComponent *result;
  _BYTE v11[8];
  uint64_t v12;
  __int128 v13;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 24) = 0;
  *(_QWORD *)v4 = &off_24ED45618;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = a2;
  v5 = (uint64_t (*)(const re::ecs2::CustomComponentType *))*((_QWORD *)a2 + 6);
  if (v5)
  {
    *((_QWORD *)this + 4) = v5(a2);
    return this;
  }
  v13 = *((_OWORD *)a2 + 10);
  if ((_QWORD)v13)
  {
    re::TypeRegistry::typeInfo((re *)v13, (re **)&v13, v11);
    if (!v11[0])
      goto LABEL_10;
  }
  else
  {
    Instance = malloc_type_calloc(1uLL, *(int *)(*((_QWORD *)a2 + 16) + 20), 0xD2347398uLL);
  }
  *((_QWORD *)this + 4) = Instance;
  if (Instance)
    return this;
  re::internal::assertLog((re::internal *)4, v9, "assertion failure: '%s' (%s:line %i) ", "object != nullptr", "CustomComponent", 46);
  _os_crash();
  __break(1u);
LABEL_10:
  re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) ", "objectType", "CustomComponent", 37);
  result = (re::ecs2::CustomComponent *)_os_crash();
  __break(1u);
  return result;
}

re::Allocator *re::ecs2::CustomComponent::initComponentType(re::ecs2::CustomComponent *this)
{
  re *v1;
  char v2;
  uint64_t (*v3)(void);
  re::Allocator *v4;
  re::Allocator *result;

  v1 = (re *)re::Allocator::useMallocAllocator(this);
  v2 = (char)v1;
  v3 = *(uint64_t (**)(void))(*(_QWORD *)re::globalAllocators(v1)[2] + 32);
  if ((v2 & 1) != 0)
  {
    v4 = (re::Allocator *)v3();
    result = re::Allocator::Allocator(v4, "CustomComponent", 1);
    *(_QWORD *)result = &off_24ED42648;
  }
  else
  {
    v4 = (re::Allocator *)v3();
  }
  re::ecs2::CustomComponent::s_allocator = (uint64_t)v4;
  return result;
}

re *re::ecs2::CustomComponent::deinitComponentType(re *this)
{
  void (***v1)(_QWORD);
  uint64_t v2;

  v1 = (void (***)(_QWORD))re::ecs2::CustomComponent::s_allocator;
  if (re::ecs2::CustomComponent::s_allocator)
  {
    v2 = re::globalAllocators(this)[2];
    (**v1)(v1);
    this = (re *)(*(uint64_t (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v2 + 40))(v2, v1);
  }
  re::ecs2::CustomComponent::s_allocator = 0;
  return this;
}

re::ecs2::CustomComponent *re::ecs2::CustomComponentType::doMakeComponent@<X0>(re::ecs2::CustomComponentType *this@<X0>, re::ecs2::CustomComponent **a2@<X8>)
{
  re::ecs2::CustomComponent *v4;
  re::ecs2::CustomComponent *result;

  v4 = (re::ecs2::CustomComponent *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)re::ecs2::CustomComponent::s_allocator
                                                                                        + 32))(re::ecs2::CustomComponent::s_allocator, 48, 0);
  result = re::ecs2::CustomComponent::CustomComponent(v4, this);
  *a2 = result;
  return result;
}

uint64_t re::ecs2::CustomComponentType::doGetComponentIntrospectionInfo(re::ecs2::CustomComponentType *this)
{
  return *((_QWORD *)this + 17);
}

__n128 re::ecs2::CustomComponentType::doGetComponentTypeID@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = this[9];
  *a2 = result;
  return result;
}

uint64_t re::ecs2::CustomComponentType::doGetNetworkSyncInfo(re::ecs2::CustomComponentType *this)
{
  return *((_QWORD *)this + 15);
}

uint64_t re::ecs2::CustomComponentCollection::setScene(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 120) = a2;
  return result;
}

void re::ecs2::CustomComponentCollection::didAdd(uint64_t a1, uint64_t a2)
{
  void (*v4)(_QWORD);
  unint64_t v5;
  unint64_t i;

  v4 = *(void (**)(_QWORD))(*(_QWORD *)(a1 + 48) + 64);
  v5 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    if (!v5)
      return;
    for (i = 0; i < v5; ++i)
    {
      v4(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * i));
      v5 = *(_QWORD *)(a2 + 16);
    }
  }
  if (v5)
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>::didAdd(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 128, a1);
}

void re::ecs2::CustomComponentCollection::doActivate(uint64_t a1, uint64_t a2)
{
  void (*v4)(_QWORD);
  unint64_t v5;
  unint64_t i;

  v4 = *(void (**)(_QWORD))(*(_QWORD *)(a1 + 48) + 72);
  v5 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    if (!v5)
      return;
    for (i = 0; i < v5; ++i)
    {
      v4(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * i));
      v5 = *(_QWORD *)(a2 + 16);
    }
  }
  if (v5)
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>::doActivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 216, a1);
}

void re::ecs2::CustomComponentCollection::doDeactivate(uint64_t a1, uint64_t a2)
{
  void (*v4)(_QWORD);
  BOOL v5;
  unint64_t v6;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
    v4 = *(void (**)(_QWORD))(*(_QWORD *)(a1 + 48) + 80);
    if (v4)
      v5 = *(_QWORD *)(a2 + 16) == 0;
    else
      v5 = 1;
    if (!v5)
    {
      v6 = 0;
      do
        v4(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v6++));
      while (v6 < *(_QWORD *)(a2 + 16));
    }
  }
}

void re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>::doDeactivate(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 304, a1);
}

void re::ecs2::CustomComponentCollection::willRemove(uint64_t a1, uint64_t a2)
{
  void (*v4)(_QWORD);
  unint64_t v5;

  re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>::willRemove(a1, a2);
  v4 = *(void (**)(_QWORD))(*(_QWORD *)(a1 + 48) + 88);
  if (v4 && *(_QWORD *)(a2 + 16))
  {
    v5 = 0;
    do
      v4(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v5++));
    while (v5 < *(_QWORD *)(a2 + 16));
  }
}

void re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>::willRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  re::ecs2::Component **v5;
  re::ecs2::ComponentBucketsBase *v6;
  uint64_t v7;
  re::ecs2::Component *v8;

  if (*(_QWORD *)(a2 + 16))
  {
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(a1 + 392, a1);
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      v5 = *(re::ecs2::Component ***)(a2 + 32);
      v6 = (re::ecs2::ComponentBucketsBase *)(a1 + 480);
      v7 = 8 * v4;
      do
      {
        v8 = *v5++;
        re::ecs2::ComponentBucketsBase::removeComponentFromAllBuckets(v6, v8);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

void re::ecs2::CustomComponent::~CustomComponent(re::ecs2::CustomComponent *this)
{
  uint64_t v2;
  void (*v3)(void);
  _anonymous_namespace_ *v4;
  uint64_t v5;
  void *v6;
  _BYTE v7[8];
  uint64_t v8;
  __int128 v9;

  *(_QWORD *)this = &off_24ED45618;
  v2 = *((_QWORD *)this + 5);
  v3 = *(void (**)(void))(v2 + 56);
  if (v3)
  {
    v3();
LABEL_7:
    *((_QWORD *)this + 4) = 0;
    *(_QWORD *)this = &off_24ED426B8;
    objc_destructInstance((char *)this + 8);
    return;
  }
  v9 = *(_OWORD *)(v2 + 160);
  if (!(_QWORD)v9)
  {
    free(*((void **)this + 4));
    goto LABEL_7;
  }
  re::TypeRegistry::typeInfo((re *)v9, (re **)&v9, v7);
  if (v7[0])
  {
    v6 = (void *)*((_QWORD *)this + 4);
    goto LABEL_7;
  }
  re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) ", "objectType", "~CustomComponent", 183);
  _os_crash();
  __break(1u);
}

{
  re::ecs2::CustomComponent::~CustomComponent(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::CustomComponentType::createCustomComponentShimIntrospection(re::ecs2::CustomComponentType *this)
{
  uint64_t v2;
  const char *v3;
  re::IntrospectionRegistry *v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t *v7;
  const char *v8;
  re::IntrospectionRegistry *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  re::DynamicString *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  const re::IntrospectionBase *v18;
  uint64_t v19;
  re::DynamicString *v20;
  char *v21;
  NSObject *v22;
  uint64_t v23;
  _BOOL8 v24;
  re *v25;
  std::__shared_mutex_base *v26;
  re::IntrospectionRegistry *v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  char v31;
  unsigned __int8 *v32;
  int v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  _OWORD *v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  int v44;
  uint64_t v45;
  uint64_t *v46;
  void *v47;
  uint64_t v48;
  _QWORD *v49;
  __int128 v50;
  _QWORD v51[2];
  void *v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  char v56[24];
  uint64_t v57;
  uint64_t v58;
  char v59;
  _BYTE v60[23];
  uint64_t v61;
  char v62;
  char v63;
  _BYTE v64[6];
  re::IntrospectionRegistry *v65;
  _OWORD buf[30];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 16);
  re::DynamicString::format((re::DynamicString *)"CustomComponent%s", (re::DynamicString *)&v61, *(_QWORD *)(v2 + 48));
  if ((v62 & 1) != 0)
    v4 = v65;
  else
    v4 = (re::IntrospectionRegistry *)&v63;
  v5 = re::IntrospectionRegistry::lookupType(v4, v3);
  if (v5)
  {
    *((_QWORD *)this + 17) = v5;
    *((_OWORD *)this + 9) = *((_OWORD *)v5 + 2);
    goto LABEL_6;
  }
  v7 = re::introspectionAllocator(0);
  re::DynamicString::format((re::DynamicString *)"%s*", (re::DynamicString *)&v58, *(_QWORD *)(v2 + 48));
  if ((v59 & 1) != 0)
    v9 = *(re::IntrospectionRegistry **)&v60[7];
  else
    v9 = (re::IntrospectionRegistry *)v60;
  v10 = re::IntrospectionRegistry::lookupType(v9, v8);
  if (!v10)
  {
    v22 = *re::ecsCoreLogObjects(0);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      v23 = *(_QWORD *)(v2 + 48);
      LODWORD(buf[0]) = 136315138;
      *(_QWORD *)((char *)buf + 4) = v23;
      _os_log_impl(&dword_224FE9000, v22, OS_LOG_TYPE_DEFAULT, "Custom component failed to find introspection for pointer to struct '%s'", (uint8_t *)buf, 0xCu);
    }
    goto LABEL_65;
  }
  v11 = v10;
  if ((v62 & 1) != 0)
    v12 = (const char *)v65;
  else
    v12 = &v63;
  v13 = (re::DynamicString *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 32, 8);
  re::DynamicString::DynamicString(v13, v12, (re::Allocator *)v7);
  v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 72, 8);
  *(_DWORD *)v14 = 1;
  *(_QWORD *)(v14 + 8) = "object";
  *(_QWORD *)(v14 + 16) = v11;
  v49 = v11;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = 0x2000000001;
  *(_DWORD *)(v14 + 40) = 0;
  *(_QWORD *)(v14 + 48) = 0;
  *(_QWORD *)(v14 + 56) = 0;
  *(_DWORD *)(v14 + 64) = 0;
  v15 = (_QWORD *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 8, 4);
  *v15 = 0x100000004;
  v16 = (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 16, 8);
  *v16 = v14;
  v16[1] = (uint64_t)v15;
  v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v7 + 32))(v7, 120, 8);
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)(v17 + 96) = 0u;
  *(_QWORD *)(v17 + 112) = 0;
  *(_OWORD *)(v17 + 32) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v17, 0);
  *(_WORD *)(v19 + 28) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  v20 = v13;
  *(_QWORD *)(v19 + 40) = 0xFFFFFFFFLL;
  *(_QWORD *)v19 = &off_24ED7DAA8;
  *(_QWORD *)(v19 + 48) = 0;
  *(_DWORD *)(v19 + 56) = 0;
  *(_OWORD *)(v19 + 64) = 0u;
  *(_OWORD *)(v19 + 80) = 0u;
  *(_OWORD *)(v19 + 96) = 0u;
  *(_QWORD *)(v19 + 112) = 0;
  *(_QWORD *)(v19 + 16) = 0x3000000008;
  *(_DWORD *)(v19 + 24) = 8;
  if ((*((_BYTE *)v13 + 8) & 1) != 0)
    v21 = (char *)*((_QWORD *)v13 + 2);
  else
    v21 = (char *)v13 + 9;
  *(_QWORD *)(v17 + 48) = v21;
  *(_DWORD *)(v17 + 56) = 2;
  *(_QWORD *)(v17 + 64) = v16;
  *(_QWORD *)(v17 + 80) = re::internal::defaultDestruct<re::ecs2::CustomComponent>;
  v24 = re::IntrospectionRegistry::add((re::IntrospectionRegistry *)v17, v18);
  if (!v24)
  {
    v34 = *re::ecsCoreLogObjects((re *)v24);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      v35 = *(_QWORD *)(v17 + 48);
      LODWORD(buf[0]) = 136315138;
      *(_QWORD *)((char *)buf + 4) = v35;
      _os_log_impl(&dword_224FE9000, v34, OS_LOG_TYPE_DEFAULT, "Custom component failed to register struct '%s'", (uint8_t *)buf, 0xCu);
    }
    (**(void (***)(uint64_t))v17)(v17);
    (*(void (**)(uint64_t *, uint64_t))(*v7 + 40))(v7, v17);
    (*(void (**)(uint64_t *, uint64_t *))(*v7 + 40))(v7, v16);
    re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)(v14 + 48));
    re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)(v14 + 16));
    (*(void (**)(uint64_t *, uint64_t))(*v7 + 40))(v7, v14);
    (*(void (**)(uint64_t *, _QWORD *))(*v7 + 40))(v7, v15);
    if (*(_QWORD *)v13)
    {
      if ((*((_BYTE *)v13 + 8) & 1) != 0)
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)v13 + 40))(*(_QWORD *)v13, *((_QWORD *)v13 + 2));
      *(_OWORD *)v13 = 0u;
      *((_OWORD *)v13 + 1) = 0u;
    }
    (*(void (**)(uint64_t *, re::DynamicString *))(*v7 + 40))(v7, v13);
    goto LABEL_65;
  }
  *((_QWORD *)this + 17) = v17;
  v26 = re::introspectionSharedMutex(v25);
  std::__shared_mutex_base::lock(v26);
  if ((v62 & 1) != 0)
    v27 = v65;
  else
    v27 = (re::IntrospectionRegistry *)&v63;
  if (v27)
  {
    v28 = *(char *)v27;
    v29 = v49;
    if (*(_BYTE *)v27)
    {
      v30 = (v62 & 1) != 0 ? (char *)v65 + 1 : v64;
      v31 = *v30;
      if (*v30)
      {
        v32 = (unsigned __int8 *)(v30 + 1);
        do
        {
          v28 = 31 * v28 + v31;
          v33 = *v32++;
          v31 = v33;
        }
        while (v33);
      }
    }
  }
  else
  {
    v28 = 0;
    v29 = v49;
  }
  *(_QWORD *)&buf[0] = 2 * v28;
  *((_QWORD *)&buf[0] + 1) = v27;
  v36 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, buf);
  if (v36)
  {
    v37 = *v36;
  }
  else
  {
    v38 = 0;
    v37 = 0xFFFFFFFFLL;
  }
  *((_QWORD *)this + 18) = v38;
  *((_QWORD *)this + 19) = v37;
  v39 = (_OWORD *)((char *)this + 144);
  re::StringID::destroyString((re::StringID *)buf);
  if (!*((_QWORD *)this + 18))
  {
    if (*(_DWORD *)(v57 + 64) > 0xFFFFFFFD)
      v40 = 1;
    else
      v40 = *(_DWORD *)(v57 + 64);
    v55 = *(_OWORD *)(*((_QWORD *)this + 16) + 32);
    v41 = *((_QWORD *)v20 + 1);
    if ((v41 & 1) != 0)
    {
      v43 = (_BYTE *)*((_QWORD *)v20 + 2);
      if (!v43)
        goto LABEL_59;
      LOBYTE(v42) = *v43;
    }
    else
    {
      v42 = v41 >> 8;
      v43 = (char *)v20 + 9;
    }
    if ((_BYTE)v42)
    {
      v42 = (char)v42;
      LOBYTE(v44) = v43[1];
      if ((_BYTE)v44)
      {
        v45 = 2;
        do
        {
          v42 = 31 * v42 + (char)v44;
          v44 = v43[v45++];
        }
        while (v44);
      }
      goto LABEL_60;
    }
LABEL_59:
    v42 = 0;
LABEL_60:
    *(_QWORD *)&v54 = 2 * v42;
    *((_QWORD *)&v54 + 1) = v43;
    v51[0] = 0x6DAE480279BALL;
    v51[1] = "Component";
    v46 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v51);
    if (v46)
    {
      v53 = *v46;
    }
    else
    {
      v47 = 0;
      v53 = 0xFFFFFFFFLL;
    }
    v52 = v47;
    re::TypeBuilder::beginObjectType((uint64_t)buf, (uint64_t *)&v54, 1, v40, 0x30uLL, 8uLL, (uint64_t)&v52);
    re::StringID::destroyString((re::StringID *)v51);
    re::StringID::destroyString((re::StringID *)&v54);
    re::TypeBuilder::setDestructor((uint64_t)buf, (uint64_t)re::internal::defaultDestructV2<re::ecs2::CustomComponent>);
    v50 = *((_OWORD *)v29 + 2);
    *(_QWORD *)&v54 = 0x18601467ELL;
    *((_QWORD *)&v54 + 1) = "object";
    re::TypeBuilder::addObjectMember((uint64_t)buf, 1, (uint64_t)&v50, (uint64_t *)&v54, 32);
    re::StringID::destroyString((re::StringID *)&v54);
    re::TypeBuilder::setHideObjectWithOneMember((uint64_t)buf, 1);
    *v39 = v54;
    *(_OWORD *)(v17 + 32) = *v39;
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)buf, v48);
  }
  std::__shared_mutex_base::unlock(v26);
LABEL_65:
  if (v58 && (v59 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v58 + 40))();
LABEL_6:
  result = v61;
  if (v61)
  {
    if ((v62 & 1) != 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v61 + 40))();
  }
  return result;
}

re::ecs2::CustomComponent *`anonymous namespace'::customComponentConstruct(re::ecs2::ComponentTypeRegistry *a1, uint64_t a2, re::ecs2::CustomComponent *a3)
{
  char *v5;
  const re::ecs2::CustomComponentType *v6;

  v5 = re::ecs2::ComponentTypeRegistry::instance(a1);
  v6 = (const re::ecs2::CustomComponentType *)re::ecs2::ComponentTypeRegistry::componentTypeWithIntrospectionInfo((os_unfair_lock_s *)v5, a1);
  return re::ecs2::CustomComponent::CustomComponent(a3, v6);
}

uint64_t re::internal::defaultDestruct<re::ecs2::CustomComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

re::ecs2::CustomComponent *`anonymous namespace'::customComponentConstructV2(_anonymous_namespace_ *this, re::TypeInfo *a2, const re::TypeInfo *a3, re::Allocator *a4, void *a5)
{
  uint64_t *v6;
  const char *v7;
  re::ecs2::ComponentTypeRegistry *v8;
  char *v9;
  const re::ecs2::CustomComponentType *v10;

  v6 = re::TypeInfo::name(a2);
  v8 = (re::ecs2::ComponentTypeRegistry *)re::IntrospectionRegistry::lookupType((re::IntrospectionRegistry *)v6[1], v7);
  v9 = re::ecs2::ComponentTypeRegistry::instance(v8);
  v10 = (const re::ecs2::CustomComponentType *)re::ecs2::ComponentTypeRegistry::componentTypeWithIntrospectionInfo((os_unfair_lock_s *)v9, v8);
  return re::ecs2::CustomComponent::CustomComponent(this, v10);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::CustomComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::CustomComponentType::CustomComponentType(uint64_t a1, const StringID *a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_QWORD *)a1 = &unk_24ED45840;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = -1;
  re::StringID::StringID((re::StringID *)(a1 + 24), a2);
  *(_DWORD *)(a1 + 40) = a5;
  *(_QWORD *)a1 = &off_24ED45668;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = a3;
  *(_QWORD *)(a1 + 152) = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0xFFFFFFFFLL;
  re::ecs2::CustomComponentType::createCustomComponentShimIntrospection((re::ecs2::CustomComponentType *)a1);
  if (a4)
  {
    *(_QWORD *)(a1 + 120) = a4;
    RESyncRetain();
  }
  return a1;
}

{
  _anonymous_namespace_ *v10;
  _anonymous_namespace_ *v11;
  const char *v12;
  uint64_t v13;
  re *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  const re::IntrospectionBase *v18;
  _BOOL8 v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  const re::IntrospectionBase *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v29;
  uint64_t v30;
  char v31;
  _BYTE v32[23];
  char v33[8];
  unint64_t v34;
  int v35;
  int v36;
  _OWORD v37[2];
  __int128 v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  int v44;
  _BYTE v45[40];

  *(_QWORD *)a1 = &unk_24ED45840;
  *(_QWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = -1;
  re::StringID::StringID((re::StringID *)(a1 + 24), a2);
  *(_DWORD *)(a1 + 40) = a5;
  *(_QWORD *)a1 = &off_24ED45668;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)a3;
  v11 = (_anonymous_namespace_ *)re::DynamicString::format((re::DynamicString *)"%s*", (re::DynamicString *)&v30, a2->var1);
  if ((v31 & 1) != 0)
    v12 = *(const char **)&v32[7];
  else
    v12 = v32;
  *(_QWORD *)&v29 = 0;
  *((_QWORD *)&v29 + 1) = &str_110;
  v13 = *(_QWORD *)(a3 + 8);
  v36 = -1;
  memset(v37, 0, sizeof(v37));
  v38 = 0u;
  v39 = 0xFFFFFFFFLL;
  v40 = 1;
  v41 = 0xFFFFFFFFLL;
  v42 = 1;
  v43 = 0xFFFFFFFFLL;
  v44 = 0;
  v33[0] = 9;
  re::StringID::operator=(&v34, (uint64_t *)&v29);
  v35 = 1;
  *(_OWORD *)((char *)v37 + 4) = 0x800000008uLL;
  *(_QWORD *)((char *)&v38 + 4) = 0;
  *(_QWORD *)((char *)&v37[1] + 4) = 0;
  v40 = -1;
  v41 = v13;
  v42 = 0;
  re::StringID::destroyString((re::StringID *)&v29);
  v15 = re::globalAllocators(v14);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15[2] + 32))(v15[2], 120, 8);
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)(v16 + 16) = 0u;
  *(_OWORD *)(v16 + 32) = 0u;
  *(_OWORD *)(v16 + 48) = 0u;
  *(_OWORD *)(v16 + 64) = 0u;
  *(_OWORD *)(v16 + 80) = 0u;
  *(_OWORD *)(v16 + 96) = 0u;
  *(_QWORD *)(v16 + 112) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v16, 0);
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 22) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 40) = 0xFFFFFFFFLL;
  *(_QWORD *)v17 = &off_24ED7DAA8;
  *(_QWORD *)(v17 + 48) = 0;
  *(_DWORD *)(v17 + 56) = 0;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)(v17 + 96) = 0u;
  *(_QWORD *)(v17 + 112) = 0;
  *(_DWORD *)(v17 + 16) = 8;
  *(_OWORD *)(v17 + 32) = *(_OWORD *)a3;
  *(_QWORD *)(v17 + 48) = a2->var1;
  *(_QWORD *)(a1 + 128) = v17;
  v19 = re::IntrospectionRegistry::add((re::IntrospectionRegistry *)v17, v18);
  v20 = re::globalAllocators((re *)v19);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20[2] + 32))(v20[2], 64, 8);
  *(_OWORD *)v21 = 0u;
  *(_OWORD *)(v21 + 16) = 0u;
  *(_OWORD *)(v21 + 32) = 0u;
  *(_OWORD *)(v21 + 48) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v21, 0);
  *(_QWORD *)((char *)v22 + 22) = 0;
  v22[2] = 0;
  v22[4] = 0;
  v22[5] = 0xFFFFFFFFLL;
  *v22 = &off_24ED30800;
  v22[7] = 0;
  re::SerializedReference<re::IntrospectionBase const*>::reset((_QWORD *)(v21 + 48));
  *(_DWORD *)(v21 + 16) = 1;
  *(_OWORD *)(v21 + 32) = v29;
  v24 = *(_QWORD *)(a1 + 128);
  v25 = *(uint64_t **)(v21 + 56);
  *(_QWORD *)(v21 + 56) = 0;
  *(_QWORD *)(v21 + 48) = v24;
  if (v25)
  {
    v26 = *v25;
    if (*v25)
    {
      if ((v25[1] & 1) != 0)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 40))(*v25, v25[2]);
      *(_OWORD *)v25 = 0u;
      *((_OWORD *)v25 + 1) = 0u;
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v26 + 40))(v26, v25);
  }
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)v21, v23);
  re::ecs2::CustomComponentType::createCustomComponentShimIntrospection((re::ecs2::CustomComponentType *)a1);
  if (a4)
  {
    *(_QWORD *)(a1 + 120) = a4;
    RESyncRetain();
  }
  if (v30 && (v31 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v30 + 40))();
  re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v33, v27);
  return a1;
}

void re::ecs2::CustomComponentType::~CustomComponentType(re::IntrospectionRegistry **this)
{
  std::__shared_mutex_base *v2;
  re *v3;
  re::IntrospectionRegistry *v4;
  uint64_t *v5;
  const re::IntrospectionBase *v6;
  _QWORD *v7;
  const char *v8;
  re::IntrospectionRegistry *v9;
  re::IntrospectionRegistry *v10;
  const re::IntrospectionBase *v11;
  uint64_t *v12;
  uint64_t v13;
  const re::IntrospectionBase *v14;
  uint64_t *v15;
  re::IntrospectionRegistry *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  _BYTE v21[23];
  __int128 v22;

  *this = (re::IntrospectionRegistry *)&off_24ED45668;
  v2 = re::introspectionSharedMutex((re *)this);
  std::__shared_mutex_base::lock(v2);
  v4 = this[17];
  if (v4)
  {
    v5 = re::introspectionAllocator(v3);
    re::IntrospectionRegistry::remove(v4, v6);
    v7 = (_QWORD *)*((_QWORD *)v4 + 8);
    if (*v7)
    {
      (*(void (**)(uint64_t *, _QWORD))(*v5 + 40))(v5, *v7);
      v7 = (_QWORD *)*((_QWORD *)v4 + 8);
    }
    if (!v7[1] || ((*(void (**)(uint64_t *, _QWORD))(*v5 + 40))(v5, v7[1]), *((_QWORD *)v4 + 8)))
      (*(void (**)(uint64_t *))(*v5 + 40))(v5);
    (**(void (***)(re::IntrospectionRegistry *))v4)(v4);
    (*(void (**)(uint64_t *, re::IntrospectionRegistry *))(*v5 + 40))(v5, v4);
    this[17] = 0;
  }
  if (this[18])
  {
    v22 = *((_OWORD *)this + 9);
    this[18] = 0;
    this[19] = (re::IntrospectionRegistry *)0xFFFFFFFFLL;
  }
  if (this[20])
  {
    re::DynamicString::format((re::DynamicString *)"%s*", (re::DynamicString *)&v19, *((_QWORD *)this[16] + 6));
    if ((v20 & 1) != 0)
      v9 = *(re::IntrospectionRegistry **)&v21[7];
    else
      v9 = (re::IntrospectionRegistry *)v21;
    v10 = (re::IntrospectionRegistry *)re::IntrospectionRegistry::lookupType(v9, v8);
    v12 = re::IntrospectionRegistry::remove(v10, v11);
    v13 = re::globalAllocators((re *)v12)[2];
    (**(void (***)(re::IntrospectionRegistry *))v10)(v10);
    (*(void (**)(uint64_t, re::IntrospectionRegistry *))(*(_QWORD *)v13 + 40))(v13, v10);
    v15 = re::IntrospectionRegistry::remove(this[16], v14);
    v16 = this[16];
    if (v16)
    {
      v17 = re::globalAllocators((re *)v15)[2];
      (**(void (***)(re::IntrospectionRegistry *))v16)(v16);
      (*(void (**)(uint64_t, re::IntrospectionRegistry *))(*(_QWORD *)v17 + 40))(v17, v16);
    }
    this[16] = 0;
    v18 = *((_OWORD *)this + 10);
    this[20] = 0;
    this[21] = (re::IntrospectionRegistry *)0xFFFFFFFFLL;
    if (v19 && (v20 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v19 + 40))();
  }
  if (this[15])
    RESyncRelease();
  std::__shared_mutex_base::unlock(v2);
  *this = (re::IntrospectionRegistry *)&unk_24ED45840;
  re::StringID::destroyString((re::StringID *)(this + 3));
}

{
  re::ecs2::CustomComponentType::~CustomComponentType(this);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::CustomComponentCollection::~CustomComponentCollection(re::ecs2::CustomComponentCollection *this)
{
  re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>::~SceneComponentCollection((uint64_t)this);
  JUMPOUT(0x2276933B8);
}

double re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>::registerCallbacks(uint64_t a1, _QWORD *a2)
{
  double result;
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::CustomComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Slice<re::ecs2::CustomComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 128, (uint64_t)&v5);
  }
  if (a2[4])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::CustomComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Slice<re::ecs2::CustomComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 392, (uint64_t)&v5);
  }
  if (a2[5])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::CustomComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Slice<re::ecs2::CustomComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomComponent*>&&)#1}::__invoke;
    result = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 216, (uint64_t)&v5);
  }
  if (a2[6])
  {
    v5 = a2;
    v6 = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::CustomComponent>;
    v7 = 0;
    v8 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Slice<re::ecs2::CustomComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomComponent*>&&)#1}::__invoke;
    return re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(a1 + 304, (uint64_t)&v5);
  }
  return result;
}

void re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>::unregisterCallbacks(uint64_t a1, _QWORD *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  if (a2[3])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::CustomComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Slice<re::ecs2::CustomComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 128, &v4);
  }
  if (a2[4])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::CustomComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Slice<re::ecs2::CustomComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 392, &v4);
  }
  if (a2[5])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::CustomComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Slice<re::ecs2::CustomComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 216, &v4);
  }
  if (a2[6])
  {
    *(_QWORD *)&v4 = a2;
    *((_QWORD *)&v4 + 1) = re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::CustomComponent>;
    v5 = 0;
    v6 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Slice<re::ecs2::CustomComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomComponent*>&&)#1}::__invoke;
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(a1 + 304, &v4);
  }
}

uint64_t re::ecs2::CustomComponent::allocator(re::ecs2::CustomComponent *this)
{
  return re::ecs2::CustomComponent::s_allocator;
}

uint64_t re::ecs2::CustomComponent::commonComponentIndex(re::ecs2::CustomComponent *this)
{
  return -1;
}

uint64_t re::ecs2::CustomComponent::componentType(re::ecs2::CustomComponent *this)
{
  return *((_QWORD *)this + 5);
}

double re::ecs2::CustomComponentType::makeBindNode@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return re::makeRelativeBindNode(*(_anonymous_namespace_ **)(a1 + 136), a2, a3);
}

uint64_t re::ecs2::CustomComponentType::isCustomComponent(re::ecs2::CustomComponentType *this)
{
  return 1;
}

uint64_t re::ecs2::CustomComponentType::doMakeSceneComponentCollection(re::ecs2::CustomComponentType *this)
{
  uint64_t *v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;

  v2 = re::globalAllocators(this);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 656, 8);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = this;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)v3 = &off_24ED457B0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_DWORD *)(v3 + 208) = 0;
  *(_DWORD *)(v3 + 192) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_QWORD *)(v3 + 288) = 0;
  *(_DWORD *)(v3 + 296) = 0;
  *(_OWORD *)(v3 + 248) = 0u;
  *(_DWORD *)(v3 + 280) = 0;
  *(_OWORD *)(v3 + 264) = 0u;
  *(_QWORD *)(v3 + 304) = 0;
  *(_QWORD *)(v3 + 312) = 0;
  *(_DWORD *)(v3 + 328) = 0;
  *(_QWORD *)(v3 + 320) = 0;
  *(_QWORD *)(v3 + 376) = 0;
  *(_DWORD *)(v3 + 384) = 0;
  *(_DWORD *)(v3 + 368) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_QWORD *)(v3 + 392) = 0;
  *(_QWORD *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 416) = 0;
  *(_QWORD *)(v3 + 408) = 0;
  *(_QWORD *)(v3 + 464) = 0;
  *(_DWORD *)(v3 + 472) = 0;
  *(_DWORD *)(v3 + 456) = 0;
  *(_OWORD *)(v3 + 424) = 0u;
  *(_OWORD *)(v3 + 440) = 0u;
  *(_QWORD *)(v3 + 480) = 0;
  *(_QWORD *)(v3 + 488) = 0;
  *(_QWORD *)(v3 + 496) = 0;
  *(_DWORD *)(v3 + 504) = 1;
  *(_QWORD *)(v3 + 520) = 0;
  *(_QWORD *)(v3 + 512) = 0;
  *(_DWORD *)(v3 + 536) = 0;
  *(_QWORD *)(v3 + 528) = 0;
  *(_QWORD *)(v3 + 552) = 0;
  *(_QWORD *)(v3 + 544) = 0;
  *(_DWORD *)(v3 + 560) = 1;
  *(_QWORD *)(v3 + 576) = 0;
  *(_QWORD *)(v3 + 568) = 0;
  *(_DWORD *)(v3 + 592) = 0;
  *(_QWORD *)(v3 + 584) = 0;
  *(_QWORD *)(v3 + 608) = 0;
  *(_QWORD *)(v3 + 600) = 0;
  *(_DWORD *)(v3 + 616) = 1;
  *(_QWORD *)(v3 + 632) = 0;
  *(_QWORD *)(v3 + 624) = 0;
  *(_DWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 640) = 0;
  v4 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 128), 0);
  ++*(_DWORD *)(v3 + 152);
  v5 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 216), 0);
  ++*(_DWORD *)(v3 + 240);
  v6 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 304), 0);
  ++*(_DWORD *)(v3 + 328);
  v7 = (_anonymous_namespace_ *)re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)(v3 + 392), 0);
  ++*(_DWORD *)(v3 + 416);
  *(_QWORD *)v3 = &off_24ED456C0;
  return v3;
}

uint64_t re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>::~SceneComponentCollection(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_24ED457B0;
  v3 = (uint64_t *)(a1 + 128);
  v2 = *(_QWORD *)(a1 + 128);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 160))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 160) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 152);
  }
  v4 = *(_QWORD *)(a1 + 216);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 248))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    ++*(_DWORD *)(a1 + 240);
  }
  v5 = *(_QWORD *)(a1 + 304);
  if (v5)
  {
    if (*(_QWORD *)(a1 + 336))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a1 + 336) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    ++*(_DWORD *)(a1 + 328);
  }
  v6 = *(_QWORD *)(a1 + 392);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 424))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a1 + 424) = 0;
    *(_QWORD *)(a1 + 400) = 0;
    *(_QWORD *)(a1 + 408) = 0;
    *(_QWORD *)(a1 + 392) = 0;
    ++*(_DWORD *)(a1 + 416);
  }
  re::ecs2::ComponentBucketsBase::deinit((re::ecs2::ComponentBucketsBase *)(a1 + 480));
  re::BucketArray<unsigned long,8ul>::deinit(a1 + 600);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 600);
  re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(a1 + 544);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 544);
  re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(a1 + 488);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1 + 488);
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 392));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 304));
  re::Event<re::Engine>::~Event((uint64_t *)(a1 + 216));
  re::Event<re::Engine>::~Event(v3);
  *(_QWORD *)a1 = off_24ED71348;
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(a1 + 56);
  return re::ReadOnlyCollection<re::ecs2::Component *,true>::~ReadOnlyCollection(a1);
}

void re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>::~SceneComponentCollection(uint64_t a1)
{
  re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>::~SceneComponentCollection(a1);
  JUMPOUT(0x2276933B8);
}

uint64_t re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t *v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (uint64_t *)re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::operator[](a1, i);
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(v4);
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::HashTable<re::ecs2::Component *,re::DataArrayHandle<re::ecs2::Component *>,re::Hash<re::ecs2::Component *>,re::EqualTo<re::ecs2::Component *>,true,false>,8ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 3)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 3)) + 48 * (a2 & 7);
}

{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1018, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 3)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 3)) + 48 * (a2 & 7);
}

uint64_t re::BucketArray<re::DataArray<re::ecs2::Component *>,8ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  _QWORD *v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (_QWORD *)re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](a1, i);
      re::DataArray<re::ecs2::Component *>::~DataArray(v4);
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::DataArray<re::ecs2::Component *>::~DataArray(_QWORD *a1)
{
  re::DataArray<re::ecs2::Component *>::deinit((uint64_t)a1);
  if (*a1)
  {
    if (a1[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
    a1[4] = 0;
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    ++*((_DWORD *)a1 + 6);
  }
  return a1;
}

uint64_t re::DataArray<re::ecs2::Component *>::deinit(uint64_t result)
{
  uint64_t *v1;
  double v2;
  _QWORD *v3;

  if (*(_DWORD *)(result + 44))
  {
    v1 = (uint64_t *)result;
    v2 = re::DataArray<re::ecs2::Component *>::clear((_QWORD *)result);
    if (!v1[2])
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v3 = (_QWORD *)v1[4];
    (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)*v1 + 40))(*v1, *v3, v2);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)*v1 + 40))(*v1, v3[1]);
    result = *v1;
    if (*v1)
    {
      if (v1[4])
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      v1[4] = 0;
      v1[1] = 0;
      v1[2] = 0;
      *v1 = 0;
      ++*((_DWORD *)v1 + 6);
    }
    *((_DWORD *)v1 + 11) = 0;
  }
  return result;
}

double re::DataArray<re::ecs2::Component *>::clear(_QWORD *a1)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  _OWORD v12[5];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)v12, (uint64_t)a1, 0);
  if (*(_QWORD **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFFLL || (DWORD2(v12[0]) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v4 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)v12);
      re::DataArray<re::ecs2::Component *>::destroy((uint64_t)a1, v4);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(v12);
    }
    while (*(_QWORD **)&v12[0] != a1 || WORD4(v12[0]) != 0xFFFF || WORD5(v12[0]) != 0xFFFF);
  }
  v7 = a1[2];
  v8 = v7 - 1;
  if (v7 != 1)
  {
    v9 = 16 * v7;
    do
    {
      if (a1[2] <= v8)
      {
        memset(v12, 0, sizeof(v12));
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v10 = a1[4] + v9;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *(_QWORD *)(v10 - 16));
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *(_QWORD *)(v10 - 8));
      re::DynamicArray<re::DataArray<re::RigGraphOperatorDefinition>::ElementBlock>::removeAt((uint64_t)a1, v8);
      v9 -= 16;
      --v8;
    }
    while (v8);
  }
  result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

_DWORD *re::DataArray<re::ecs2::Component *>::destroy(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  _DWORD *result;

  v2 = a2;
  v4 = a2 >> 16;
  result = (_DWORD *)re::DataArray<re::ecs2::Component *>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (result)
  {
    if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    *result = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
  return result;
}

uint64_t re::DataArray<re::ecs2::Component *>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  BOOL v6;

  v2 = *(_QWORD *)(a1 + 16);
  if (WORD1(a2) < v2
    && ((unsigned __int16)(v2 - 1) != WORD1(a2) ? (v3 = *(_DWORD *)(a1 + 44)) : (v3 = *(_DWORD *)(a1 + 48)),
        (unsigned __int16)a2 < v3
     && ((v4 = *(_QWORD *)(a1 + 32),
          (v5 = *(_DWORD *)(*(_QWORD *)(v4 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2)) != 0)
       ? (v6 = v5 == (HIDWORD(a2) & 0xFFFFFF))
       : (v6 = 0),
         v6)))
  {
    return *(_QWORD *)(v4 + 16 * WORD1(a2)) + 8 * (unsigned __int16)a2;
  }
  else
  {
    return 0;
  }
}

void re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::raise(uint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  _OWORD v12[2];
  uint64_t v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;
  _BYTE v22[88];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v3 + 1;
  if (*(_QWORD *)(a1 + 16))
  {
    v5 = 0;
    do
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32 * v5 + 24))(a2) == 1)
        re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((_QWORD *)a1, v5);
      else
        ++v5;
    }
    while (v5 < *(_QWORD *)(a1 + 16));
    v3 = *(_DWORD *)(a1 + 80) - 1;
  }
  *(_DWORD *)(a1 + 80) = v3;
  if (!v3)
  {
    v6 = *(_QWORD *)(a1 + 56);
    if (v6)
    {
      v7 = 0;
      for (i = 0; i != v6; ++i)
      {
        v9 = *(_QWORD *)(a1 + 56);
        if (v9 <= i)
        {
          memset(v22, 0, 80);
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v14 = 136315906;
          v15 = "operator[]";
          v16 = 1024;
          v17 = 789;
          v18 = 2048;
          v19 = i;
          v20 = 2048;
          v21 = v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v10 = *(_QWORD *)(a1 + 72) + v7;
        v11 = *(_OWORD *)(v10 + 16);
        v12[0] = *(_OWORD *)v10;
        v12[1] = v11;
        v13 = *(_QWORD *)(v10 + 32);
        if (LOBYTE(v12[0]))
        {
          re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::indexOf((uint64_t)v22, *(_QWORD *)(a1 + 16), *(char **)(a1 + 32), (_QWORD *)v12 + 1);
          if (!v22[0])
            re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::add(a1, (uint64_t)v12 + 8);
        }
        else
        {
          re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::removeStable(a1, (_QWORD *)v12 + 1);
        }
        v7 += 40;
      }
    }
  }
}

__n128 re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::add(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  __n128 result;
  __int128 v13;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::EvaluationRegister>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  v11 = (_OWORD *)(*(_QWORD *)(a1 + 32) + 32 * v5);
  result = *(__n128 *)a2;
  v13 = *(_OWORD *)(a2 + 16);
  *v11 = *(_OWORD *)a2;
  v11[1] = v13;
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

_QWORD *re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::removeStable(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;
  _BYTE v4[8];
  unint64_t v5;

  result = (_QWORD *)re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::indexOf((uint64_t)v4, *(_QWORD *)(a1 + 16), *(char **)(a1 + 32), a2);
  if (v4[0])
    return re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((_QWORD *)a1, v5);
  return result;
}

uint64_t re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::indexOf(uint64_t result, uint64_t a2, char *a3, _QWORD *a4)
{
  char *v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v4 = a3;
  if (a2)
  {
    v5 = 32 * a2;
    v4 = a3;
    while (*(_QWORD *)v4 != *a4 || *((_QWORD *)v4 + 1) != a4[1] || *((_QWORD *)v4 + 2) != a4[2])
    {
      v4 += 32;
      v5 -= 32;
      if (!v5)
      {
        v4 = &a3[32 * a2];
        break;
      }
    }
  }
  v7 = (v4 - a3) >> 5;
  if (v7 == a2)
  {
    v8 = 0;
  }
  else
  {
    *(_QWORD *)(result + 8) = v7;
    v8 = 1;
  }
  *(_BYTE *)result = v8;
  return result;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::didAddComponent<re::ecs2::CustomComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 24);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::willRemoveComponent<re::ecs2::CustomComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 32);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doActivateComponent<re::ecs2::CustomComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 40);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

uint64_t re::ecs2::SceneComponentCollectionCallbacks::doDeactivateComponent<re::ecs2::CustomComponent>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void (*v5)(_QWORD);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(void (**)(_QWORD))(a1 + 48);
  if (*(_BYTE *)(a1 + 16))
  {
    if (a4)
    {
      v7 = 8 * a4;
      do
      {
        v8 = *a3++;
        ((void (*)(uint64_t, _QWORD))v5)(v8, *(_QWORD *)(a1 + 56));
        v7 -= 8;
      }
      while (v7);
    }
  }
  else if (a4)
  {
    v9 = 8 * a4;
    do
    {
      v10 = *a3++;
      v5(v10);
      v9 -= 8;
    }
    while (v9);
  }
  return 0;
}

double re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::addSubscription(uint64_t a1, uint64_t a2)
{
  double result;
  __int128 v5;
  char v6[8];
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::indexOf((uint64_t)v6, *(_QWORD *)(a1 + 16), *(char **)(a1 + 32), (_QWORD *)a2);
  if (!v6[0])
  {
    if (*(_DWORD *)(a1 + 80))
    {
      v6[0] = 1;
      v5 = *(_OWORD *)(a2 + 16);
      v7 = *(_OWORD *)a2;
      v8 = v5;
      *(_QWORD *)&result = re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::add(a1 + 40, (uint64_t)v6).n128_u64[0];
    }
    else
    {
      *(_QWORD *)&result = re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::add(a1, a2).n128_u64[0];
    }
  }
  return result;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::createSubscription<re::ecs2::SceneComponentCollectionCallbacks>(re::ecs2::SceneComponentCollectionCallbacks *,REEventHandlerResult (re::ecs2::SceneComponentCollectionCallbacks::*)(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Slice<re::ecs2::CustomComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription const&,re::Slice<re::ecs2::CustomComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

void re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::removeSubscription(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  _BYTE v5[8];
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::indexOf((uint64_t)v5, *(_QWORD *)(a1 + 16), *(char **)(a1 + 32), a2);
  if (v5[0])
  {
    if (*(_DWORD *)(a1 + 80))
    {
      v5[0] = 0;
      v4 = a2[1];
      v6 = *a2;
      v7 = v4;
      re::DynamicArray<re::Pair<BOOL,re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription,true>>::add(a1 + 40, (uint64_t)v5);
    }
    else
    {
      re::DynamicArray<re::Event<re::ecs2::SceneComponentCollection<re::ecs2::CustomComponent>,re::Slice<re::ecs2::CustomComponent*>>::Subscription>::removeStable(a1, a2);
    }
  }
}

id *re::ecs2::BlendShapeWeightsBufferComponent::resetDeformerInputs(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id *v8;
  void *v9;
  re *inited;
  uint64_t v11;
  id location;
  _QWORD v14[3];
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v8 = (id *)(a1 + 32);
  if (a2)
    v9 = (void *)(a2 + 8);
  else
    v9 = 0;
  inited = (re *)objc_initWeak(&location, v9);
  memset(v14, 0, sizeof(v14));
  v15 = re::globalAllocators(inited)[2];
  v16 = 0;
  re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::reset(v8, &location, a3, (uint64_t)v14);
  if (v16)
  {
    (*(void (**)(_QWORD *))*v16)(v16);
    if (v16 != v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  objc_destroyWeak(&location);
  if (a5)
  {
    v11 = a4 + 168 * a5;
    do
    {
      ++*(_BYTE *)a4;
      *(_QWORD *)(a4 + 24) = 0;
      a4 += 168;
    }
    while (a4 != v11);
  }
  return v8;
}

uint64_t re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::reset(id *location, id *a2, void *a3, uint64_t a4)
{
  _QWORD *WeakRetained;
  _QWORD *v9;
  re *v10;
  uint64_t *v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD v18[3];
  uint64_t v19;
  re *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (location[1])
  {
    WeakRetained = objc_loadWeakRetained(location);
    if (WeakRetained)
    {
      v9 = WeakRetained;

      if (!location[6])
      {
        v16 = re::globalAllocators(v10)[2];
        v18[0] = &off_24ED459A0;
        v19 = v16;
        v20 = (re *)v18;
        re::FunctionBase<24ul,void ()(void)>::operator=<24ul>((uint64_t)(location + 2), (uint64_t)v18);
        v10 = v20;
        if (v20)
        {
          v10 = (re *)(**(uint64_t (***)(re *))v20)(v20);
          if (v20 != (re *)v18)
            v10 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
        }
      }
      v11 = re::globalAllocators(v10);
      v12 = v9[2] & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)v9[1] << 60);
      v13 = location[1];
      v14 = re::PerFrameAllocatorManager::perFrameAllocator(v11[6], v12);
      (*(void (**)(uint64_t, id, id *))(*(_QWORD *)v14 + 16))(v14, v13, location + 2);
    }
    else
    {
      v15 = location[6];
      if (v15)
      {
        v18[0] = location[1];
        (*(void (**)(id, _QWORD *))(*(_QWORD *)v15 + 16))(v15, v18);
      }
      else
      {
        re::internal::destroyPersistent<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs>((re *)"reset", 161, location[1]);
      }
    }
  }
  re::ArcWeakPtr<re::VideoHistogram>::operator=(location, a2);
  location[1] = a3;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)(location + 2), a4);
}

uint64_t re::ecs2::BlendShapeWeightsBufferComponent::rebuildWeights(uint64_t result, uint64_t a2, re::BlendShapeWeightsMapping *a3, uint64_t a4, const re::MeshNameMap *a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v9;
  unint64_t v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v33;
  uint64_t v34;
  uint64_t v35;
  const re::MeshNameMap *v36;
  unint64_t v37;
  _BYTE v38[24];
  uint64_t v39;
  _BYTE *v40;
  int v41;
  const char *v42;
  __int16 v43;
  int v44;
  __int16 v45;
  unint64_t v46;
  __int16 v47;
  unint64_t v48;
  __n128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(result + 112) = 0;
  ++*(_DWORD *)(result + 120);
  *(_QWORD *)(result + 152) = 0;
  v30 = result;
  ++*(_DWORD *)(result + 160);
  v6 = *(_QWORD *)(a2 + 56);
  if (v6)
  {
    v9 = 0;
    v10 = 0;
    v11 = (_anonymous_namespace_ *)(result + 96);
    v29 = result + 136;
    v26 = a2;
    do
    {
      v12 = *(_QWORD *)(a2 + 72);
      v13 = *(unsigned int *)(v12 + 48 * v10 + 40);
      if (*(_QWORD *)(a6 + 16) <= v13)
      {
        v20 = v9;
      }
      else
      {
        v28 = v10;
        re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)a5, (unsigned __int8 *)(v12 + 48 * v10), &v49);
        v35 = a4;
        v36 = a5;
        v37 = v49.n128_u64[0];
        v39 = v51;
        v40 = 0;
        re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v38, (uint64_t)&v49.n128_i64[1]);
        if (*((_QWORD *)&v51 + 1))
        {
          (***((void (****)(_QWORD))&v51 + 1))(*((_QWORD *)&v51 + 1));
          if (*((__n128 **)&v51 + 1) != (__n128 *)&v49.n128_i8[8])
            (*(void (**)(_QWORD))(*(_QWORD *)v51 + 40))(v51);
        }
        v31 = v37;
        if (v37)
        {
          v14 = 0;
          do
          {
            v49.n128_u64[0] = v14;
            v15 = (*(uint64_t (**)(_BYTE *, __n128 *))(*(_QWORD *)v40 + 16))(v40, &v49);
            v49.n128_u64[0] = v14;
            v16 = (unsigned __int16)((unint64_t)(*(uint64_t (**)(_BYTE *, __n128 *))(*(_QWORD *)v40 + 16))(v40, &v49) >> 32);
            re::BlendShapeWeightsMapping::blendWeightValues(a3, a5, v15, v16);
            v18 = v17;
            v49.n128_u64[0] = __PAIR64__(v9, v15);
            v49.n128_u64[1] = __PAIR64__(v16, v17);
            re::DynamicArray<re::ecs2::BlendShapeMeshWeightRange>::add(v29, &v49);
            v19 = *((_QWORD *)a3 + 6);
            if (*(_QWORD *)(v30 + 104) < v19)
              re::DynamicArray<int>::setCapacity(v11, v19);
            v20 = v9 + v18;
            if (v9 < v20)
            {
              v9 = v9;
              v21 = (8 * v9) | 4;
              do
              {
                if (*((_QWORD *)a3 + 3) <= v9
                  || (v22 = *(unsigned int *)(*((_QWORD *)a3 + 4) + v21), (_DWORD)v22 == -1))
                {
                  v25 = 0;
                }
                else
                {
                  v23 = *(_QWORD *)(a6 + 16);
                  if (v23 <= v13)
                  {
                    v34 = 0;
                    v52 = 0u;
                    v53 = 0u;
                    v50 = 0u;
                    v51 = 0u;
                    v49 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    v41 = 136315906;
                    v42 = "operator[]";
                    v43 = 1024;
                    v44 = 797;
                    v45 = 2048;
                    v46 = v13;
                    v47 = 2048;
                    v48 = v23;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_31:
                    v34 = 0;
                    v52 = 0u;
                    v53 = 0u;
                    v50 = 0u;
                    v51 = 0u;
                    v49 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    v41 = 136315906;
                    v42 = "operator[]";
                    v43 = 1024;
                    v44 = 476;
                    v45 = 2048;
                    v46 = v22;
                    v47 = 2048;
                    v48 = v23;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                  }
                  v24 = *(_QWORD *)(a6 + 32) + 32 * v13;
                  v23 = *(_QWORD *)(v24 + 8);
                  if (v23 <= v22)
                    goto LABEL_31;
                  v25 = *(_DWORD *)(*(_QWORD *)(v24 + 16) + 4 * v22);
                }
                v33 = v25;
                re::DynamicArray<float>::add(v11, (float *)&v33);
                ++v9;
                v21 += 8;
              }
              while (v20 != v9);
            }
            ++v14;
            LODWORD(v9) = v20;
          }
          while (v14 != v31);
        }
        else
        {
          v20 = v9;
        }
        result = (uint64_t)v40;
        if (v40)
        {
          result = (**(uint64_t (***)(_BYTE *))v40)(v40);
          if (v40 != v38)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39);
        }
        a2 = v26;
        v6 = *(_QWORD *)(v26 + 56);
        v10 = v28;
      }
      ++v10;
      v9 = v20;
    }
    while (v10 < v6);
  }
  return result;
}

__n128 re::DynamicArray<re::ecs2::BlendShapeMeshWeightRange>::add(uint64_t a1, __n128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::BlendNode>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::BlendNode>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(a1 + 32) + 16 * v5) = *a2;
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

re::ecs2::BlendShapeWeightsBufferComponentStateImpl *re::ecs2::BlendShapeWeightsBufferComponentStateImpl::BlendShapeWeightsBufferComponentStateImpl(re::ecs2::BlendShapeWeightsBufferComponentStateImpl *this)
{
  uint64_t *v2;
  uint64_t v4[2];
  _QWORD v5[2];
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24ED458A8;
  v2 = (uint64_t *)((char *)this + 32);
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v6[0] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v6[1] = re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v6[2] = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[0] = v6;
  v5[1] = 3;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::FixedArray((_anonymous_namespace_ *)v4, (uint64_t)v5);
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=(v2, v4);
  if (v4[0] && v4[1])
    (*(void (**)(void))(*(_QWORD *)v4[0] + 40))();
  return this;
}

uint64_t *re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (result != a2)
  {
    v2 = *result;
    v3 = *a2;
    if (*result)
      v4 = v2 == v3;
    else
      v4 = 1;
    if (v4)
    {
      *result = v3;
      *a2 = v2;
      v5 = result[1];
      v6 = result[2];
      v7 = a2[2];
      result[1] = a2[1];
      result[2] = v7;
      a2[1] = v5;
      a2[2] = v6;
    }
    else
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || m_allocator == other.m_allocator", "operator=", 296);
      result = (uint64_t *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

BOOL re::ecs2::BlendShapeWeightsBufferComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;

  v9 = *(_QWORD *)(a1 + 24);
  if (v9)
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 104))(v9);
  else
    v10 = 0;
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v32, a5, 0);
  v11 = v32;
  v12 = v33;
  v32 = a4;
  v33 = v11;
  v34 = v12;
  v13 = (unsigned __int16)v12;
  v14 = v12 & 0xFFFF0000;
  if (v11 != a5 || v13 != 0xFFFF || v14 != 4294901760)
  {
    do
    {
      v17 = *(_QWORD *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v33);
      v18 = *(_QWORD *)(v17 + 16);
      v19 = *(_QWORD *)(v18 + 184);
      v20 = (unint64_t *)(a3 + 32);
      if (v19)
      {
        v21 = *(_QWORD **)(v17 + 40);
        if (v21)
        {
          v22 = *(_QWORD *)(v19 + 248) != *v21 || v10 == 0;
          if (!v22 && v21[1] == v10)
            goto LABEL_27;
          v23 = *(_QWORD *)(v19 + 392);
          if (v23)
          {
            v25 = *(_QWORD *)(v23 + 88);
            v24 = *(_QWORD *)(v23 + 96);
          }
          else
          {
            v25 = 0;
            v24 = 0;
          }
          re::ecs2::BlendShapeWeightsBufferComponent::resetDeformerInputs(v17, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 136), 0, v24, v25);
        }
        v26 = *(_QWORD *)(v18 + 176);
        v20 = (unint64_t *)(a3 + 32);
        if (v26)
        {
          if (*(_QWORD *)(v26 + 40))
            v20 = (unint64_t *)(a3 + 40);
          else
            v20 = (unint64_t *)(a3 + 32);
        }
      }
      v27 = v32;
      v28 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v33);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v27, v28, *v20);
LABEL_27:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v33);
    }
    while (v33 != a5 || (unsigned __int16)v34 != 0xFFFF || WORD1(v34) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result;
  uint64_t v7;

  result = re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), a2, a3, *(_QWORD *)(a1 + 24));
  if (result != a2 || (_DWORD)v7 != (_DWORD)a3 || ((v7 ^ a3) & 0xFFFFFF00000000) != 0)
    return (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, result);
  return result;
}

BOOL re::ecs2::BlendShapeWeightsBufferComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v7;
  __guard *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  re *v15;
  re::MeshNameMap *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  id v25;
  id *v26;
  id *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  re::MeshNameMap *v34;
  unint64_t v35;
  unsigned int v36;
  _QWORD *v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int started;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  id *v65;
  re::ecs2::MeshDeformationComponent *v66;
  re::ecs2::MeshComponent *v67;
  re::MeshNameMap *v68;
  uint64_t v69;
  unint64_t v70;
  __int128 v71;
  uint64_t v72;
  int v73;
  const char *v74;
  __int16 v75;
  int v76;
  __int16 v77;
  unint64_t v78;
  __int16 v79;
  _QWORD *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 24);
  if (v7)
    v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 104))(v7);
  else
    v60 = 0;
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v81, a5, 0);
  v70 = a4;
  v71 = v81;
  if ((_QWORD)v81 != a5 || WORD4(v81) != 0xFFFFLL || (DWORD2(v81) & 0xFFFF0000) != 4294901760)
  {
    v62 = a5;
    do
    {
      v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v71);
      v12 = *(_QWORD **)v11;
      v13 = *(_QWORD **)(*(_QWORD *)v11 + 16);
      v67 = (re::ecs2::MeshComponent *)v13[22];
      v14 = (_QWORD *)re::AssetHandle::asset<re::MeshAsset>((re::ecs2::MeshComponent *)((char *)v67 + 32));
      v15 = (re *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v13 + 4), (const re::ecs2::ComponentTypeBase *)v10[347]);
      if (v15)
        v16 = (re *)((char *)v15 + 216);
      else
        v16 = (re::MeshNameMap *)(v14 + 56);
      if (*(_QWORD *)(v13[23] + 240) && v12[16] && v12[14])
      {
        v66 = (re::ecs2::MeshDeformationComponent *)v13[23];
        v17 = (_QWORD *)v12[5];
        if (!v17 || *((_QWORD *)v66 + 31) != *v17)
        {
          v68 = v16;
          v18 = *((_QWORD *)v66 + 49);
          v19 = *(_QWORD *)(v18 + 88);
          v20 = *(_QWORD *)(v18 + 96);
          v21 = *(_QWORD *)(a1 + 16);
          v22 = re::globalAllocators(v15);
          v23 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22[2] + 32))(v22[2], 48, 8);
          v24 = *((_QWORD *)v66 + 31);
          v25 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 184), sel_newBufferWithBytes_length_options_, v12[16], 4 * v12[14], 0);
          *v23 = v24;
          v23[1] = v60;
          v23[2] = v25;
          v23[3] = 0;
          v23[4] = 0;
          v23[5] = 0;
          v63 = v20;
          v26 = re::ecs2::BlendShapeWeightsBufferComponent::resetDeformerInputs((uint64_t)v12, *(_QWORD *)(v21 + 136), v23, v20, v19);
          v27 = v26;
          if (v25)

          v28 = v27[1];
          v28[4] = v19;
          if (v19)
          {
            if (v19 >> 60)
              goto LABEL_53;
            v28[5] = v30;
            if (!v30)
            {
LABEL_54:
              re::internal::assertLog((re::internal *)4, v31, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
              _os_crash();
              __break(1u);
            }
            v32 = v19 - 1;
            if (v19 != 1)
            {
              do
              {
                *v30 = 0;
                v30[1] = 0;
                v30 += 2;
                --v32;
              }
              while (v32);
            }
            *v30 = 0;
            v30[1] = 0;
          }
          v64 = v19;
          v65 = v27;
          v33 = v12[19];
          v34 = v68;
          if (v33)
          {
            v19 = v12[21];
            v35 = v19 + 16 * v33;
            do
            {
              v36 = *(_DWORD *)v19;
              if (*(_DWORD *)v19 <= *((_DWORD *)v34 + 54))
              {
                v37 = v12;
                v38 = *(unsigned int *)(v19 + 4);
                v69 = *(unsigned int *)(v19 + 8);
                v39 = *(unsigned __int16 *)(v19 + 12);
                v40 = v14[55];
                v41 = re::MeshNameMap::modelIndex(v34, v36);
                v42 = (_QWORD *)v14[52];
                if ((unint64_t)v42 <= v41)
                {
                  v72 = 0;
                  v84 = 0u;
                  v85 = 0u;
                  v82 = 0u;
                  v83 = 0u;
                  v81 = 0u;
                  v48 = MEMORY[0x24BDACB70];
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v73 = 136315906;
                  v74 = "operator[]";
                  v75 = 1024;
                  v76 = 797;
                  v77 = 2048;
                  v78 = v41;
                  v79 = 2048;
                  v80 = v42;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_48:
                  v72 = 0;
                  v84 = 0u;
                  v85 = 0u;
                  v82 = 0u;
                  v83 = 0u;
                  v81 = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v73 = 136315906;
                  v74 = "slice";
                  v75 = 1024;
                  v76 = 1119;
                  v77 = 2048;
                  v78 = v38;
                  v79 = 2048;
                  v80 = (_QWORD *)v48;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_49:
                  re::internal::assertLog((re::internal *)7, v46, "assertion failure: '%s' (%s:line %i) Invalid count. index = %zu, count = %zu, array size = %zu", "endIndexExclusive <= m_size", "slice", 1129, v38, v49, v47);
                  _os_crash();
                  __break(1u);
LABEL_50:
                  v72 = 0;
                  v84 = 0u;
                  v85 = 0u;
                  v82 = 0u;
                  v83 = 0u;
                  v81 = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v73 = 136315906;
                  v74 = "operator[]";
                  v75 = 1024;
                  v76 = 468;
                  v77 = 2048;
                  v78 = v48;
                  v79 = 2048;
                  v80 = v14;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_51:
                  re::internal::assertLog((re::internal *)6, v46, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v48, v53);
                  _os_crash();
                  __break(1u);
LABEL_52:
                  v72 = 0;
                  v84 = 0u;
                  v85 = 0u;
                  v82 = 0u;
                  v83 = 0u;
                  v81 = 0u;
                  os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                  v73 = 136315906;
                  v74 = "operator[]";
                  v75 = 1024;
                  v76 = 468;
                  v77 = 2048;
                  v78 = v48;
                  v79 = 2048;
                  v80 = (_QWORD *)v38;
                  _os_log_send_and_compose_impl();
                  _os_crash_msg();
                  __break(1u);
LABEL_53:
                  re::internal::assertLog((re::internal *)6, v29, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 16, v19);
                  _os_crash();
                  __break(1u);
                  goto LABEL_54;
                }
                v43 = re::DataArray<re::MeshModel>::tryGet(v40 + 8, *(_QWORD *)(v14[54] + 8 * v41));
                v12 = v37;
                v34 = v68;
                if (v43)
                {
                  started = re::MeshNameMap::meshPartStartIndexForInstance(v68, v36);
                  v45 = re::MeshDeformationRuntimeData::absoluteDeformedMeshPartIndex((re::ecs2::MeshDeformationComponent *)((char *)v66 + 232), started + v39);
                  if (v45 != -1)
                  {
                    v47 = v37[14];
                    v48 = v47 + 1;
                    if (v47 + 1 <= v38)
                      goto LABEL_48;
                    v49 = v69;
                    if (v69 + v38 > v47)
                      goto LABEL_49;
                    v50 = v14;
                    v51 = v65[1];
                    v48 = v45;
                    v14 = (_QWORD *)v51[4];
                    if ((unint64_t)v14 <= v45)
                      goto LABEL_50;
                    v52 = (_QWORD *)(v51[5] + 16 * v45);
                    *v52 = v37[16] + 4 * v38;
                    v52[1] = v69;
                    v53 = v64;
                    if (v64 <= v45)
                      goto LABEL_51;
                    v54 = v65[1];
                    v38 = v54[4];
                    if (v38 <= v45)
                      goto LABEL_52;
                    v14 = v50;
                    v55 = v63 + 168 * v45;
                    v56 = v54[5] + 16 * v45;
                    ++*(_BYTE *)v55;
                    *(_QWORD *)(v55 + 24) = v56;
                  }
                }
              }
              v19 += 16;
            }
            while (v19 != v35);
          }
        }
        a5 = v62;
        if (re::ecs2::MeshDeformationComponent::areRequiredAssetsLoaded(v66, v67))
        {
          v57 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v71);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v70, v57, *(_QWORD *)(a3 + 48));
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v71);
    }
    while ((_QWORD)v71 != a5 || WORD4(v71) != 0xFFFF || WORD5(v71) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::BlendShapeWeightsBufferSystem::updateScenes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  re::ecs2::System *v27;
  uint64_t v29;
  _BYTE v30[16];
  uint64_t v31[2];
  _QWORD v32[2];
  uint64_t v33;

  v32[0] = a3;
  v32[1] = a4;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v31);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v30, 3150, a1);
  v6 = *(_QWORD *)(a1 + 104);
  if (v6)
  {
    if ((*(_BYTE *)(v6 + 424) & 0x10) != 0)
    {
      v7 = *(_QWORD *)(a2 + 8);
      if (v7)
      {
        v8 = *(uint64_t **)a2;
        v29 = *(_QWORD *)a2 + 8 * v7;
        while (1)
        {
          v33 = *v8;
          v9 = *(_QWORD *)(*(_QWORD *)(a1 + 280)
                         + 16
                         * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 272), &v33)+ 8);
          re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 384, v9);
          v10 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 216, v9);
          v11 = *(_QWORD *)(*v10 + 224);
          v12 = v10[3];
          v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v10[2] + 8, v12);
          if (*(_DWORD *)(v13 + 40))
            v14 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v11 + 24))(v11, v32, v10, v12, v13, 0);
          else
            v14 = 0;
          v15 = v10[5];
          v16 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v10[2] + 8, v15);
          if (*(_DWORD *)(v16 + 40))
            v14 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, v32, v10, v15, v16, 0);
          v17 = v10[6];
          v18 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v10[2] + 8, v17);
          if (*(_DWORD *)(v18 + 40))
            break;
          if (v14)
            goto LABEL_12;
LABEL_13:
          if (*(_BYTE *)(a1 + 448))
          {
            v19 = *(_QWORD *)(a1 + 392);
            v20 = *(_DWORD *)(a1 + 400);
            if (v19 < 0xB)
            {
              v23 = (uint64_t *)(a1 + 408);
              if ((v20 & 1) == 0)
                v23 = *(uint64_t **)(a1 + 416);
              if (!v19)
                goto LABEL_31;
              v24 = 0;
              v25 = 8 * v19;
              do
              {
                v26 = *v23++;
                v24 |= v26;
                v25 -= 8;
              }
              while (v25);
              if (!v24)
                goto LABEL_31;
            }
            else
            {
              v21 = (_QWORD *)(a1 + 408);
              if ((v20 & 1) == 0)
                v21 = *(_QWORD **)(a1 + 416);
              v22 = 8 * v19;
              while (!*v21)
              {
                ++v21;
                v22 -= 8;
                if (!v22)
                  goto LABEL_31;
              }
            }
            v27 = *(re::ecs2::System **)(a1 + 432);
            if (!*((_BYTE *)v27 + 86))
              re::ecs2::System::queueToRun(v27, 0.0);
          }
LABEL_31:
          if (++v8 == (uint64_t *)v29)
            goto LABEL_32;
        }
        if (((v14 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v11 + 40))(v11, v32, v10, v17, v18, 0)) & 1) == 0)goto LABEL_13;
LABEL_12:
        re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 384, v9);
        goto LABEL_13;
      }
    }
  }
LABEL_32:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v30);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v31);
}

uint64_t re::ecs2::BlendShapeWeightsBufferSystem::willAddSystemToECSService(re::ecs2::BlendShapeWeightsBufferSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  v2 = *((_QWORD *)this + 14);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::ecs2::ThrottleService>(v3);
  *((_QWORD *)this + 22) = v2;
  *((_QWORD *)this + 23) = result;
  return result;
}

double re::ecs2::BlendShapeWeightsBufferSystem::willRemoveSystemFromECSService(re::ecs2::BlendShapeWeightsBufferSystem *this)
{
  double result;

  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_QWORD *)this + 19) = 0;
  return result;
}

void re::ecs2::BlendShapeWeightsBufferSystem::willAddSceneToECSService(re::ecs2::BlendShapeWeightsBufferSystem *this, re::ecs2::Scene *a2)
{
  char *v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)this + 216;
  v57[0] = (uint64_t)a2;
  v5 = (re::ecs2::BlendShapeWeightsBufferSystem *)((char *)this + 336);
  v6 = *((_QWORD *)this + 43);
  v7 = *((_DWORD *)this + 88);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)this + 360);
    else
      v8 = (_QWORD *)*((_QWORD *)this + 46);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)this + 360);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)this + 46);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 336, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::BlendShapeWeightsBufferSystem *)((char *)this + 272), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = (char *)this + 384;
    v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  v56 = 0u;
  v49 = 0u;
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 1;
  v55 = 0uLL;
  v17 = *((_QWORD *)this + 32);
  *(_QWORD *)&v56 = 0;
  v18 = *((_QWORD *)this + 28);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 27, (v17 + 4) >> 2);
    v18 = *((_QWORD *)this + 28);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v17 >> 2;
    v64 = 2048;
    v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*((_BYTE *)this + 232) & 1) != 0)
    v19 = (char *)this + 240;
  else
    v19 = (char *)*((_QWORD *)this + 31);
  v20 = *(_QWORD *)&v19[8 * (v17 >> 2)];
  ++*((_QWORD *)this + 32);
  ++*((_DWORD *)this + 66);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v49;
  v23 = v50;
  v24 = v51;
  *(_QWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  v26 = *((_QWORD *)this + 32);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(_QWORD *)&v66[0] = *((_QWORD *)this + 32) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::BlendShapeWeightsBufferSystem *)((char *)this + 272), v57, (uint64_t *)v66);
  v28 = *((_QWORD *)this + 32);
  v29 = *((_QWORD *)this + 47);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *((_QWORD *)this + 47) = v28;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *((_QWORD *)this + 47) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*((_BYTE *)this + 352) & 1) != 0)
      v33 = (char *)this + 360;
    else
      v33 = (char *)*((_QWORD *)this + 46);
    *(_QWORD *)&v33[8 * *((_QWORD *)this + 43) - 8] &= v31;
  }
  v34 = *((_QWORD *)this + 32);
  v35 = *((_QWORD *)this + 53);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *((_QWORD *)this + 53) = v34;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::BlendShapeWeightsBufferSystem *)((char *)this + 384), v36, &v49);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *((_QWORD *)this + 53) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*((_BYTE *)this + 400) & 1) != 0)
      v39 = (char *)this + 408;
    else
      v39 = (char *)*((_QWORD *)this + 52);
    *(_QWORD *)&v39[8 * *((_QWORD *)this + 49) - 8] &= v37;
  }
  v16 = *(_QWORD *)&v66[0];
  v15 = (char *)this + 384;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((_BYTE *)this + 448))
    return;
  v40 = *((_QWORD *)this + 49);
  v41 = *((_DWORD *)this + 100);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)((char *)this + 408);
    else
      v42 = (_QWORD *)*((_QWORD *)this + 52);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        return;
    }
LABEL_65:
    v48 = (re::ecs2::System *)*((_QWORD *)this + 54);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    return;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)((char *)this + 408);
    if (!v40)
      return;
  }
  else
  {
    v43 = (uint64_t *)*((_QWORD *)this + 52);
    if (!v40)
      return;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
}

uint64_t re::ecs2::BlendShapeWeightsBufferSystem::willRemoveSceneFromECSService(re::ecs2::BlendShapeWeightsBufferSystem *this, re::ecs2::Scene *a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  re::ecs2::Scene *v16;

  v16 = a2;
  v3 = (uint64_t *)((char *)this + 272);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 34, &v16);
  if (result != -1)
  {
    v5 = *((_QWORD *)this + 35) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 336, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 384, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 216, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

double re::internal::defaultConstruct<re::ecs2::BlendShapeMeshWeightRange>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)a3 = 0xFFFFFFFFLL;
  *(_DWORD *)(a3 + 8) = 0;
  return result;
}

double re::internal::defaultConstructV2<re::ecs2::BlendShapeMeshWeightRange>(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)a1 = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t *re::ecs2::allocInfo_BlendShapeWeightsBufferComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541061D0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541061D0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541062E0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541062F0 = 0;
    qword_254106300 = 0;
    qword_254106308 = 0xFFFFFFFFLL;
    qword_2541062E0 = (uint64_t)&off_24ED7DAA8;
    qword_254106310 = (uint64_t)"BlendShapeWeightsBufferComponent";
    dword_254106318 = 0;
    xmmword_254106320 = 0u;
    unk_254106330 = 0u;
    xmmword_254106340 = 0u;
    qword_254106350 = 0;
    __cxa_guard_release(&qword_2541061D0);
  }
  return &qword_2541062E0;
}

void re::ecs2::initInfo_BlendShapeWeightsBufferComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned __int8 v14;
  uint64_t *v15;
  unsigned __int8 v16;
  const re::IntrospectionBase *v17;
  unsigned __int8 v18;
  int v19;
  re::IntrospectionRegistry *v20;
  const re::IntrospectionBase *v21;
  const char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  const re::IntrospectionBase *v28;
  void *v29;
  uint64_t v30;
  re *v31;
  uint64_t *v32;
  const re::IntrospectionBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  const re::IntrospectionBase *v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  const re::IntrospectionBase *v41;
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  const re::IntrospectionBase *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52[2];
  __int128 v53;
  const char *v54;
  __int128 v55;

  *(_QWORD *)&v53 = 0x83B2A9AC9A6DC864;
  *((_QWORD *)&v53 + 1) = "BlendShapeWeightsBufferComponent";
  re::StringID::destroyString((re::StringID *)&v53);
  *((_OWORD *)this + 2) = v49;
  v4 = atomic_load((unsigned __int8 *)&qword_2541061C8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541061C8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254106208 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "m_totalBlendShapeWeights";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x6000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254106210 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v14 = atomic_load((unsigned __int8 *)&qword_2541061E0);
      if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_2541061E0))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254106228, 0);
        *(uint64_t *)((char *)&qword_254106238 + 6) = 0;
        qword_254106238 = 0;
        *(_QWORD *)&xmmword_254106248 = 0;
        *((_QWORD *)&xmmword_254106248 + 1) = 0xFFFFFFFFLL;
        qword_254106228 = (uint64_t)&off_24ED1FA08;
        qword_254106260 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_254106258);
        qword_254106228 = (uint64_t)&off_24ED45B58;
        __cxa_guard_release(&qword_2541061E0);
      }
      if ((_MergedGlobals_140 & 1) == 0)
      {
        v15 = (uint64_t *)qword_2541061C0;
        if (qword_2541061C0)
          goto LABEL_10;
        v16 = atomic_load((unsigned __int8 *)&qword_2541061B0);
        if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_2541061B0))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254106268, 0);
          *(uint64_t *)((char *)&qword_254106278 + 6) = 0;
          qword_254106278 = 0;
          *(_QWORD *)&xmmword_254106288 = 0;
          *((_QWORD *)&xmmword_254106288 + 1) = 0xFFFFFFFFLL;
          qword_254106268 = (uint64_t)&off_24ED7DAA8;
          qword_254106298 = (uint64_t)"BlendShapeMeshWeightRange";
          dword_2541062A0 = 0;
          *(_OWORD *)&qword_2541062A8 = 0u;
          xmmword_2541062B8 = 0u;
          *(_OWORD *)&qword_2541062C8 = 0u;
          qword_2541062D8 = 0;
          __cxa_guard_release(&qword_2541061B0);
        }
        qword_2541061C0 = (uint64_t)&qword_254106268;
        *(_QWORD *)&v55 = 0xB54CA9662B8EA2D0;
        *((_QWORD *)&v55 + 1) = "BlendShapeMeshWeightRange";
        re::StringID::destroyString((re::StringID *)&v55);
        xmmword_254106288 = v53;
        v18 = atomic_load((unsigned __int8 *)&qword_2541061B8);
        if ((v18 & 1) == 0)
        {
          v31 = (re *)__cxa_guard_acquire(&qword_2541061B8);
          if ((_DWORD)v31)
          {
            v32 = re::introspectionAllocator(v31);
            v34 = re::introspect_uint32_t((re *)1, v33);
            v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v32 + 32))(v32, 72, 8);
            *(_DWORD *)v35 = 1;
            *(_QWORD *)(v35 + 8) = "instanceIndex";
            *(_QWORD *)(v35 + 16) = v34;
            *(_QWORD *)(v35 + 24) = 0;
            *(_QWORD *)(v35 + 32) = 1;
            *(_DWORD *)(v35 + 40) = 0;
            *(_QWORD *)(v35 + 48) = 0;
            *(_QWORD *)(v35 + 56) = 0;
            *(_DWORD *)(v35 + 64) = 0;
            qword_2541061E8 = v35;
            v36 = re::introspectionAllocator((re *)v35);
            v38 = re::introspect_uint32_t((re *)1, v37);
            v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 72, 8);
            *(_DWORD *)v39 = 1;
            *(_QWORD *)(v39 + 8) = "weightRangeStartIndex";
            *(_QWORD *)(v39 + 16) = v38;
            *(_QWORD *)(v39 + 24) = 0;
            *(_QWORD *)(v39 + 32) = 0x400000002;
            *(_DWORD *)(v39 + 40) = 0;
            *(_QWORD *)(v39 + 48) = 0;
            *(_QWORD *)(v39 + 56) = 0;
            *(_DWORD *)(v39 + 64) = 0;
            qword_2541061F0 = v39;
            v40 = re::introspectionAllocator((re *)v39);
            v42 = re::introspect_uint32_t((re *)1, v41);
            v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
            *(_DWORD *)v43 = 1;
            *(_QWORD *)(v43 + 8) = "weightRangeSize";
            *(_QWORD *)(v43 + 16) = v42;
            *(_QWORD *)(v43 + 24) = 0;
            *(_QWORD *)(v43 + 32) = 0x800000003;
            *(_DWORD *)(v43 + 40) = 0;
            *(_QWORD *)(v43 + 48) = 0;
            *(_QWORD *)(v43 + 56) = 0;
            *(_DWORD *)(v43 + 64) = 0;
            qword_2541061F8 = v43;
            v44 = re::introspectionAllocator((re *)v43);
            v46 = re::introspect_uint32_t((re *)1, v45);
            v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
            *(_DWORD *)v47 = 1;
            *(_QWORD *)(v47 + 8) = "partIndex";
            *(_QWORD *)(v47 + 16) = v46;
            *(_QWORD *)(v47 + 24) = 0;
            *(_QWORD *)(v47 + 32) = 0xC00000004;
            *(_DWORD *)(v47 + 40) = 0;
            *(_QWORD *)(v47 + 48) = 0;
            *(_QWORD *)(v47 + 56) = 0;
            *(_DWORD *)(v47 + 64) = 0;
            qword_254106200 = v47;
            __cxa_guard_release(&qword_2541061B8);
          }
        }
        qword_254106278 = 0x1000000008;
        v15 = &qword_254106268;
        dword_254106280 = 4;
        word_254106284 = 1;
        dword_2541062A0 = 4;
        qword_2541062A8 = (uint64_t)&qword_2541061E8;
        unk_2541062B0 = re::internal::defaultConstruct<re::ecs2::BlendShapeMeshWeightRange>;
        *(_QWORD *)&xmmword_2541062B8 = re::internal::defaultDestruct<re::ecs2::BlendShapeMeshWeightRange>;
        *((_QWORD *)&xmmword_2541062B8 + 1) = 0;
        qword_2541062C8 = 0;
        unk_2541062D0 = re::internal::defaultConstructV2<re::ecs2::BlendShapeMeshWeightRange>;
        qword_2541062D8 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::BlendShapeMeshWeightRange>;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254106268, v17);
        v55 = v53;
        if ((_MergedGlobals_140 & 1) == 0)
        {
LABEL_10:
          _MergedGlobals_140 = 1;
          v19 = *((_DWORD *)v15 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254106228, 0);
          qword_254106238 = 0x2800000003;
          dword_254106240 = v19;
          word_254106244 = 0;
          *(_QWORD *)&xmmword_254106248 = 0;
          *((_QWORD *)&xmmword_254106248 + 1) = 0xFFFFFFFFLL;
          qword_254106258 = (uint64_t)v15;
          qword_254106260 = 0;
          qword_254106228 = (uint64_t)&off_24ED45B58;
          re::IntrospectionRegistry::add(v20, v21);
          re::getPrettyTypeName((re *)&qword_254106228, (const re::IntrospectionBase *)&v53);
          if ((BYTE8(v53) & 1) != 0)
            v22 = v54;
          else
            v22 = (char *)&v53 + 9;
          if ((_QWORD)v53 && (BYTE8(v53) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v53 + 40))();
          v51 = *((_OWORD *)v15 + 2);
          v23 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v52);
          if (v23)
          {
            v24 = *v23;
            *((_QWORD *)&v50 + 1) = v24;
          }
          else
          {
            v55 = v51;
            re::TypeBuilder::beginListType((uint64_t)&v53, v52, 1, 0x28uLL, 8uLL, &v55);
            re::TypeBuilder::setConstructor((uint64_t)&v53, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v53, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v53, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v53, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v53, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v53, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v53, v25);
          }
          xmmword_254106248 = v50;
          re::StringID::destroyString((re::StringID *)v52);
        }
      }
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "m_blendShapeWeightsRanges";
      *(_QWORD *)(v26 + 16) = &qword_254106228;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x8800000002;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_254106218 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v29 = re::introspect_size_t((re *)1, v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "m_processedBlendShapeWeightsRangeHash";
      *(_QWORD *)(v30 + 16) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x5800000003;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_254106220 = v30;
      __cxa_guard_release(&qword_2541061C8);
    }
  }
  *((_QWORD *)this + 2) = 0xB000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254106208;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::BlendShapeWeightsBufferComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::BlendShapeWeightsBufferComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::BlendShapeWeightsBufferComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::BlendShapeWeightsBufferComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v48 = v49;
}

uint64_t re::internal::defaultConstruct<re::ecs2::BlendShapeWeightsBufferComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::BlendShapeWeightsBufferComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::BlendShapeWeightsBufferComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5 = (_QWORD *)(a3 + 136);
  v4 = *(_QWORD *)(a3 + 136);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 168))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 168) = 0;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    ++*(_DWORD *)(a3 + 160);
  }
  v6 = *(_QWORD *)(a3 + 96);
  if (v6)
  {
    if (*(_QWORD *)(a3 + 128))
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    *(_QWORD *)(a3 + 128) = 0;
    *(_QWORD *)(a3 + 104) = 0;
    *(_QWORD *)(a3 + 112) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    ++*(_DWORD *)(a3 + 120);
  }
  re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr((id *)(a3 + 32));
  *(_QWORD *)a3 = &off_24ED426B8;
  return objc_destructInstance((id)(a3 + 8));
}

void *re::internal::defaultDestructV2<re::ecs2::BlendShapeWeightsBufferComponent>(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a1 + 136);
  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 168))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 168) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 160);
  }
  v4 = *(_QWORD *)(a1 + 96);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 128))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    ++*(_DWORD *)(a1 + 120);
  }
  re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr((id *)(a1 + 32));
  *(_QWORD *)a1 = &off_24ED426B8;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_BlendShapeWeightsBufferComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendShapeWeightsBufferComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_BlendShapeWeightsBufferComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_BlendShapeWeightsBufferComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::BlendShapeWeightsBufferComponent>, this);
}

uint64_t *re::ecs2::allocInfo_BlendShapeWeightsBufferSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541061D8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541061D8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254106358, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254106368 = 0;
    qword_254106378 = 0;
    qword_254106380 = 0xFFFFFFFFLL;
    qword_254106358 = (uint64_t)&off_24ED7DAA8;
    qword_254106388 = (uint64_t)"BlendShapeWeightsBufferSystem";
    dword_254106390 = 0;
    xmmword_254106398 = 0u;
    unk_2541063A8 = 0u;
    xmmword_2541063B8 = 0u;
    qword_2541063C8 = 0;
    __cxa_guard_release(&qword_2541061D8);
  }
  return &qword_254106358;
}

void re::ecs2::initInfo_BlendShapeWeightsBufferSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xC750A969B247FE34;
  v5[1] = "BlendShapeWeightsBufferSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1C800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_BlendShapeWeightsBufferSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::BlendShapeWeightsBufferSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::BlendShapeWeightsBufferSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::BlendShapeWeightsBufferSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::BlendShapeWeightsBufferSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::BlendShapeWeightsBufferSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::BlendShapeWeightsBufferSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::BlendShapeWeightsBufferSystem *re::internal::defaultConstruct<re::ecs2::BlendShapeWeightsBufferSystem>(uint64_t a1, uint64_t a2, re::ecs2::BlendShapeWeightsBufferSystem *a3)
{
  return re::ecs2::BlendShapeWeightsBufferSystem::BlendShapeWeightsBufferSystem(a3);
}

void *re::internal::defaultDestruct<re::ecs2::BlendShapeWeightsBufferSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 27);
  a3[20] = &off_24ED458A8;
  v4 = a3[24];
  if (v4)
  {
    if (a3[25])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[26]);
      a3[25] = 0;
      a3[26] = 0;
    }
    a3[24] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::BlendShapeWeightsBufferSystem>(_QWORD *a1)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 27);
  a1[20] = &off_24ED458A8;
  v2 = a1[24];
  if (v2)
  {
    if (a1[25])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[26]);
      a1[25] = 0;
      a1[26] = 0;
    }
    a1[24] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_BlendShapeWeightsBufferSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendShapeWeightsBufferSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_BlendShapeWeightsBufferSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_BlendShapeWeightsBufferSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::BlendShapeWeightsBufferSystem>, this);
}

uint64_t re::ecs2::BlendShapeWeightsBufferComponentStateImpl::dependsOnComponents(re::ecs2::BlendShapeWeightsBufferComponentStateImpl *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::BlendShapeWeightsBufferComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 24;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
      }
      v6 += 8;
    }
    while (v6 != 56);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::BlendShapeWeightsBufferComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::BlendShapeWeightsBufferSystem::~BlendShapeWeightsBufferSystem(re::ecs2::BlendShapeWeightsBufferSystem *this)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 27);
  *((_QWORD *)this + 20) = &off_24ED458A8;
  v2 = *((_QWORD *)this + 24);
  if (v2)
  {
    if (*((_QWORD *)this + 25))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 26));
      *((_QWORD *)this + 25) = 0;
      *((_QWORD *)this + 26) = 0;
    }
    *((_QWORD *)this + 24) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 27);
  *((_QWORD *)this + 20) = &off_24ED458A8;
  v2 = *((_QWORD *)this + 24);
  if (v2)
  {
    if (*((_QWORD *)this + 25))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 26));
      *((_QWORD *)this + 25) = 0;
      *((_QWORD *)this + 26) = 0;
    }
    *((_QWORD *)this + 24) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::BlendShapeWeightsBufferSystem::typeInfo(re::ecs2::BlendShapeWeightsBufferSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendShapeWeightsBufferSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_BlendShapeWeightsBufferSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_BlendShapeWeightsBufferSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::BlendShapeWeightsBufferSystem>, 0);
}

_QWORD *re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(_QWORD *a1)
{
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)a1);
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 7));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 15));
  a1[20] = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 21));
  a1[26] = 0;
  a1[27] = 0;
  a1[28] = 0;
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 21));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 15));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 7));
  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)a1);
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)a1);
  return a1;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  _QWORD *v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, i);
      re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(v4);
    }
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + 112 * (a2 & 3);
}

_QWORD *re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t i;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  re::ecs2::ComponentBucketsBase *v8;

  if (*a1)
  {
    *a1 = 0;
    v2 = *(_QWORD *)(a1[1] + 288);
    if (v2)
    {
      v3 = a1[12];
      if (v3)
      {
        for (i = 0; i != v3; ++i)
        {
          v5 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(a1 + 7), i);
          re::EventBus::unsubscribe(v2, *(_QWORD *)v5, *(_QWORD *)(v5 + 8));
        }
      }
    }
    re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(a1 + 7));
    v6 = 0;
    v7 = a1 + 3;
    do
    {
      v8 = (re::ecs2::ComponentBucketsBase *)a1[2];
      if (*(_QWORD *)v8)
        re::ecs2::ComponentBucketsBase::removeBucket(v8, v7[v6]);
      v7[v6++] = -1;
    }
    while (v6 != 4);
    a1[1] = 0;
    a1[2] = 0;
  }
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(a1 + 7));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 7));
  return a1;
}

re *re::internal::destroyPersistent<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs>(re *result, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a3)
  {
    v4 = re::globalAllocators(result)[2];
    v5 = a3[3];
    if (v5)
    {
      if (a3[4])
      {
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, a3[5]);
        a3[4] = 0;
        a3[5] = 0;
      }
      a3[3] = 0;
    }
    v6 = (void *)a3[2];
    if (v6)
    {

      a3[2] = 0;
    }
    return (re *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 40))(v4, a3);
  }
  return result;
}

void re::internal::Callable<re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

re *re::internal::Callable<re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::operator()(uint64_t a1, _QWORD **a2)
{
  return re::internal::destroyPersistent<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs>((re *)"operator()", 149, *a2);
}

_QWORD *re::internal::Callable<re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED459A0;
  return result;
}

_QWORD *re::internal::Callable<re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED459A0;
  return result;
}

uint64_t re::internal::Callable<re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::reset(re::ArcWeakPtr<re::FrameManager>,re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs*,re::Function<void ()(void *)> &&)::{lambda(void *)#1},void ()(void *)>::size()
{
  return 16;
}

uint64_t re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*(unsigned __int16 *a1)
{
  unint64_t v1;

  v1 = a1[5];
  if (*(_QWORD *)(*(_QWORD *)a1 + 16) <= v1)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 16 * v1) + 8 * a1[4];
}

uint64_t re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  int64x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64x2_t v7;

  if (*(_QWORD *)result && *(_QWORD *)(*(_QWORD *)result + 152))
  {
    v1 = (_QWORD *)result;
    result = mach_absolute_time();
    v2 = *v1;
    v3 = *(int64x2_t **)(*v1 + 152);
    if (v3)
    {
      v4 = result - v1[1];
      v5 = v3[492].u64[0];
      if (v5 >= v4)
        v5 = result - v1[1];
      v3[492].i64[0] = v5;
      v6 = v3[492].u64[1];
      if (v6 <= v4)
        v6 = v4;
      v3[492].i64[1] = v6;
      v7 = vdupq_n_s64(1uLL);
      v7.i64[0] = v4;
      v3[493] = vaddq_s64(v3[493], v7);
      *(_BYTE *)(v2 + 184) = 0;
    }
    *v1 = 0;
  }
  return result;
}

uint64_t re::DynamicBitset<unsigned long long,64ul>::clearBit(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  if (*(_QWORD *)(result + 8) <= a2 >> 6)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(result + 16) & 1) != 0)
    v2 = result + 24;
  else
    v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(v2 + 8 * (a2 >> 6)) &= ~(1 << a2);
  return result;
}

unint64_t re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v2 = a1 + 24;
  else
    v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 8);
  if (a2 >= v3 << 6)
    return -1;
  v4 = a2 >> 6;
  if ((a2 & 0x3F) != 0)
  {
    v5 = *(_QWORD *)(v2 + 8 * v4) & (-1 << (a2 & 0x3F));
    if (v5)
      return __clz(__rbit64(v5)) + (a2 & 0xFFFFFFFFFFFFFFC0);
    ++v4;
  }
  v7 = v3 > v4;
  v8 = v3 - v4;
  if (!v7)
    return -1;
  v9 = -64 * v4;
  v10 = (unint64_t *)(v2 + 8 * v4);
  while (1)
  {
    v12 = *v10++;
    v11 = v12;
    if (v12)
      break;
    v9 -= 64;
    if (!--v8)
      return -1;
  }
  return __clz(__rbit64(v11)) - v9;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED459F8;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED45A50;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED45AA8;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED45B00;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED459F8;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED45A50;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED45AA8;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED45B00;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

_QWORD *re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew(_anonymous_namespace_ *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;

  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  if (v6 == -1)
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::internalAdd(a1, a2, a3);
  else
    return (_QWORD *)(*((_QWORD *)a1 + 1) + 16 * v6 + 8);
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED459F8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED459F8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED45A50;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED45A50;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED45AA8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED45AA8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED45B00;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED45B00;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

_QWORD *re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  _QWORD *result;
  unint64_t v24;
  unint64_t v25;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::resize((uint64_t *)a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9;
  v9 = 0x94D049BB133111EBLL;
  v10 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v11 = (0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31);
  v12 = v7 >> 4;
  v13 = *(_QWORD *)a1;
  v14 = v11 % v12;
  while (1)
  {
    v15 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v13 + 16 * v14)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    if (v15 < 0x40)
      break;
    if (v14 + 1 == v12)
      v14 = 0;
    else
      ++v14;
    if (v14 == v11 % v12)
    {
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
      _os_crash();
      __break(1u);
      break;
    }
  }
  v16 = v13 + 16 * v14;
  v17 = *(unsigned __int8 *)(v16 + v15) == 255;
  *(_BYTE *)(v16 + v15) = v11 & 0x7F;
  v18 = v15 + 16 * v14;
  v19 = *a3;
  v20 = (_QWORD *)(*((_QWORD *)a1 + 1) + 16 * v18);
  *v20 = *a2;
  v20[1] = v19;
  v21 = *((_QWORD *)a1 + 4) - v17;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v21;
  v22 = (unint64_t *)(*((_QWORD *)a1 + 1) + 16 * v18);
  v24 = *v22;
  result = v22 + 1;
  v25 = (((v24 ^ (v24 >> 30)) * v8) ^ (((v24 ^ (v24 >> 30)) * v8) >> 27)) * v9;
  *((_QWORD *)a1 + 5) ^= (v25 >> 31) ^ v25;
  return result;
}

{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  _QWORD *result;
  unint64_t v22;
  unint64_t v23;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::resize(a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v11;
  v17 = *a3;
  v18 = (_QWORD *)(*((_QWORD *)a1 + 1) + 16 * v16);
  *v18 = *a2;
  v18[1] = v17;
  v19 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v19;
  v20 = (unint64_t *)(*((_QWORD *)a1 + 1) + 16 * v16);
  v22 = *v20;
  result = v20 + 1;
  v23 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v22 ^ (v22 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v22 ^ (v22 >> 30))) >> 27));
  *((_QWORD *)a1 + 5) ^= (v23 >> 31) ^ v23;
  return result;
}

uint64_t re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::resize(uint64_t *a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[3] + a2;
  v4 = (((151 * v3) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v4 > v2)
  {
    v5 = 3 * v2;
    v6 = v5 << 6;
    v7 = (v5 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v4 <= v6 >> 7)
      v4 = v7;
    v3 = (v4 << 7) / 0x97;
  }
  return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::doResize(a1, v3);
}

uint64_t re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::doResize(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD v20[2];
  uint64_t v21;
  _OWORD v22[4];

  v4 = a1[7];
  memset(v22, 0, sizeof(v22));
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(v22, v4, a2);
  v20[0] = a1;
  v5 = a1[2];
  if (v5 >= 0x10)
  {
    v6 = 0;
    v7 = *a1;
    v8 = v5 >> 4;
    while (1)
    {
      v9 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v7 + v6)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v20[1] = (unsigned __int16)~v9;
      if (v9 != 0xFFFF)
        break;
      v6 += 16;
      if (!--v8)
        goto LABEL_9;
    }
    v10 = __clz(__rbit64((unsigned __int16)~v9)) + v6;
    v21 = v10;
    if (v10 != -1)
    {
      do
      {
        re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::internalAdd((_anonymous_namespace_ *)v22, (_QWORD *)(*(_QWORD *)(v20[0] + 8) + 16 * v10), (uint64_t *)(*(_QWORD *)(v20[0] + 8) + 16 * v10 + 8));
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v20);
        v10 = v21;
      }
      while (v21 != -1);
      v5 = a1[2];
    }
  }
LABEL_9:
  v12 = *((_QWORD *)&v22[3] + 1);
  *((_QWORD *)&v22[3] + 1) = a1[7];
  result = *((_QWORD *)&v22[3] + 1);
  v13 = v22[0];
  v14 = v22[1];
  *(_QWORD *)&v22[1] = v5;
  v15 = *a1;
  v16 = a1[1];
  *(_QWORD *)&v22[0] = *a1;
  *((_QWORD *)&v22[0] + 1) = v16;
  v17 = v22[2];
  v18 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v22[3];
  a1[7] = v12;
  *(_OWORD *)((char *)&v22[2] + 8) = v18;
  v19 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v13;
  *((_OWORD *)a1 + 1) = v14;
  *((_OWORD *)a1 + 2) = v17;
  *(_OWORD *)((char *)&v22[1] + 8) = v19;
  if (result)
  {
    if (v16)
      *((_QWORD *)&v22[0] + 1) = 0;
    if (v15)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

uint64_t *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::setBucketsCapacity(a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  v4 = *(_QWORD *)a2;
  if (v4)
  {
    re::BucketArray<RESubscriptionHandle,8ul>::init(a1, v4, *(_QWORD *)(a2 + 8));
    re::BucketArray<RESubscriptionHandle,8ul>::copy(a1, a2);
  }
  return a1;
}

void re::BucketArray<RESubscriptionHandle,8ul>::copy(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[5];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 40);
  if (v4 >= *(_QWORD *)(a1 + 40))
  {
    re::BucketArray<RESubscriptionHandle,8ul>::setBucketsCapacity((uint64_t *)a1, (v4 + 7) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<RESubscriptionHandle,8ul>::BucketArrayIterator<RESubscriptionHandle,RESubscriptionHandle const&,re::BucketArray<RESubscriptionHandle,8ul> const&,true>,re::BucketArray<RESubscriptionHandle,8ul>::BucketArrayIterator<RESubscriptionHandle,RESubscriptionHandle const&,re::BucketArray<RESubscriptionHandle,8ul> const&,true>,re::BucketArray<RESubscriptionHandle,8ul>::BucketArrayIterator<RESubscriptionHandle,RESubscriptionHandle&,re::BucketArray<RESubscriptionHandle,8ul>&,true>>(a2, 0, a2, *(_QWORD *)(a1 + 40), a1, 0, (uint64_t *)v12);
    v6 = *(_QWORD *)(a1 + 40);
    v7 = v4 - v6;
    if (v4 != v6)
    {
      v8 = 0;
      do
      {
        v9 = v8 + *(_QWORD *)(a1 + 40);
        if (*(_QWORD *)(a1 + 8) <= v9 >> 3)
        {
          memset(v12, 0, sizeof(v12));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v10 = a1 + 24;
        if ((*(_BYTE *)(a1 + 16) & 1) == 0)
          v10 = *(_QWORD *)(a1 + 32);
        v11 = *(_QWORD *)(v10 + 8 * (v9 >> 3));
        *(_OWORD *)(v11 + 16 * (v9 & 7)) = *(_OWORD *)re::BucketArray<re::StringID,8ul>::operator[](a2, v9);
        ++v8;
      }
      while (v7 != v8);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<RESubscriptionHandle,8ul>::BucketArrayIterator<RESubscriptionHandle,RESubscriptionHandle const&,re::BucketArray<RESubscriptionHandle,8ul> const&,true>,re::BucketArray<RESubscriptionHandle,8ul>::BucketArrayIterator<RESubscriptionHandle,RESubscriptionHandle const&,re::BucketArray<RESubscriptionHandle,8ul> const&,true>,re::BucketArray<RESubscriptionHandle,8ul>::BucketArrayIterator<RESubscriptionHandle,RESubscriptionHandle&,re::BucketArray<RESubscriptionHandle,8ul>&,true>>(a2, 0, a2, *(_QWORD *)(a2 + 40), a1, 0, (uint64_t *)v12);
    if (v4 != *(_QWORD *)(a1 + 40))
    {
      v5 = v4;
      do
        re::BucketArray<RESubscriptionHandle,8ul>::operator[](a1, v5++);
      while (v5 != *(_QWORD *)(a1 + 40));
    }
  }
  *(_QWORD *)(a1 + 40) = v4;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::BucketArray<RESubscriptionHandle,8ul>::BucketArrayIterator<RESubscriptionHandle,RESubscriptionHandle const&,re::BucketArray<RESubscriptionHandle,8ul> const&,true>,re::BucketArray<RESubscriptionHandle,8ul>::BucketArrayIterator<RESubscriptionHandle,RESubscriptionHandle const&,re::BucketArray<RESubscriptionHandle,8ul> const&,true>,re::BucketArray<RESubscriptionHandle,8ul>::BucketArrayIterator<RESubscriptionHandle,RESubscriptionHandle&,re::BucketArray<RESubscriptionHandle,8ul>&,true>>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  unint64_t v13;
  unint64_t v14;
  _OWORD *v15;

  if (a1 != a3 || a2 != a4)
  {
    v13 = a4 - 1;
    do
    {
      do
      {
        v14 = a2;
        v15 = (_OWORD *)re::BucketArray<re::StringID,8ul>::operator[](a1, a2);
        *(_OWORD *)re::BucketArray<RESubscriptionHandle,8ul>::operator[](a5, a6) = *v15;
        a2 = v14 + 1;
        ++a6;
      }
      while (a1 != a3);
    }
    while (v13 != v14);
    a2 = a4;
  }
  *a7 = a1;
  a7[1] = a2;
  a7[2] = a5;
  a7[3] = a6;
}

_anonymous_namespace_ *re::DynamicOverflowArray<unsigned long long,2ul>::resize(_anonymous_namespace_ *result, unint64_t a2, _QWORD *a3)
{
  _anonymous_namespace_ *v4;
  unint64_t v5;
  unint64_t v7;
  char *v8;

  v4 = result;
  v5 = *((_QWORD *)result + 1);
  if (v5 >= a2)
  {
    if (v5 <= a2)
      return result;
  }
  else
  {
    result = re::DynamicOverflowArray<unsigned long long,2ul>::reserve(result, a2);
    v7 = *((_QWORD *)v4 + 1);
    if (v7 < a2)
    {
      do
      {
        v8 = (char *)v4 + 24;
        if ((*((_BYTE *)v4 + 16) & 1) == 0)
          v8 = (char *)*((_QWORD *)v4 + 4);
        *(_QWORD *)&v8[8 * v7++] = *a3;
      }
      while (a2 != v7);
    }
  }
  *((_QWORD *)v4 + 1) = a2;
  *((_DWORD *)v4 + 4) += 2;
  return result;
}

_anonymous_namespace_ *re::DynamicOverflowArray<unsigned long long,2ul>::reserve(_anonymous_namespace_ *result, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  int v5;

  v3 = result;
  if (*(_QWORD *)result)
  {
    if ((*((_DWORD *)result + 4) & 1) == 0)
    {
LABEL_3:
      v4 = *((_QWORD *)v3 + 3);
      goto LABEL_6;
    }
  }
  else
  {
    result = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    v5 = *((_DWORD *)v3 + 4) + 2;
    *((_DWORD *)v3 + 4) = v5;
    if ((v5 & 1) == 0)
      goto LABEL_3;
  }
  v4 = 2;
LABEL_6:
  if (v4 < a2)
    return (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
  return result;
}

BOOL re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int8x16_t *v5;
  int8x16_t v6;
  int8x8_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find(a1, a2);
  v4 = v3;
  if (v3 != -1)
  {
    v5 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v6.i64[0] = -1;
    v6.i64[1] = -1;
    v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v5, v6), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    if (v7)
      v8 = -1;
    else
      v8 = 0x80;
    v5->i8[v3 & 0xF] = v8;
    v9 = a1[2];
    v10 = *(_QWORD *)(a1[1] + 16 * v3);
    v11 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v10 ^ (v10 >> 30))) >> 27));
    a1[5] ^= (v11 >> 31) ^ v11;
    v12 = a1[4];
    if (v7)
      ++v12;
    v13 = a1[3] - 1;
    a1[3] = v13;
    a1[4] = v12;
    if (v9 >= 0x11 && v13 < v9 >> 2)
      re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::resize(a1, 0);
  }
  return v4 != -1;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::BlendShapeMeshWeightRange>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::BlendShapeMeshWeightRange>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::BlendShapeMeshWeightRange>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::BlendShapeMeshWeightRange>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::BlendShapeMeshWeightRange>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<re::BlendNode>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::BlendShapeMeshWeightRange>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::BlendNode>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::ecs2::BlendShapeMeshWeightRange>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::BlendNode>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::BlendShapeMeshWeightRange>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4)
{
  re::IntrospectionBase *v8;
  __int128 v10;

  v10 = xmmword_226107ED0;
  re::DynamicArray<re::ecs2::BlendShapeMeshWeightRange>::add(a4, (__n128 *)&v10);
  v8 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 16 * *(_QWORD *)(a4 + 16) - 16);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::BlendShapeMeshWeightRange>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::BlendShapeMeshWeightRange>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 16 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 16 * a3;
}

_QWORD *re::DynamicArray<re::ecs2::BlendShapeMeshWeightRange>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  unint64_t v8;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::BlendNode>::setCapacity(result, a2);
      v4 = v3[2];
    }
    if (v4 < a2)
    {
      v5 = v3[4];
      v6 = (_OWORD *)(v5 + 16 * v4);
      v7 = v5 + 16 * a2 - (_QWORD)v6;
      if (v7 >= 1)
      {
        v8 = ((unint64_t)v7 >> 4) + 1;
        do
        {
          *v6++ = xmmword_226107ED0;
          --v8;
        }
        while (v8 > 1);
      }
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::BlendNode>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::Allocator *v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *(re::Allocator **)a1;
  if (v8 == a3)
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    if (v8)
    {
      if (*(_QWORD *)(a1 + 32))
        (*(void (**)(re::Allocator *))(*(_QWORD *)v8 + 40))(v8);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::BlendNode>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  v9 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::BlendShapeMeshWeightRange>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(char **)(a1 + 32);
      v12 = 16 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 16;
        v12 -= 16;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 16 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 16 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::BlendShapeMeshWeightRange>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::BlendShapeWeightsBufferComponent>(uint64_t a1)
{
  id *v2;
  uint64_t v3;
  re *inited;

  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v2 = (id *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED45BF0;
  inited = (re *)objc_initWeak(v2, 0);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 72) = re::globalAllocators(inited)[2];
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  return a1;
}

void re::ecs2::BlendShapeWeightsBufferComponent::~BlendShapeWeightsBufferComponent(re::ecs2::BlendShapeWeightsBufferComponent *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)((char *)this + 136);
  v2 = *((_QWORD *)this + 17);
  if (v2)
  {
    if (*((_QWORD *)this + 21))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 21) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 40);
  }
  v4 = *((_QWORD *)this + 12);
  if (v4)
  {
    if (*((_QWORD *)this + 16))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 16) = 0;
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 12) = 0;
    ++*((_DWORD *)this + 30);
  }
  re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr((id *)this + 4);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)((char *)this + 136);
  v2 = *((_QWORD *)this + 17);
  if (v2)
  {
    if (*((_QWORD *)this + 21))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 21) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 40);
  }
  v4 = *((_QWORD *)this + 12);
  if (v4)
  {
    if (*((_QWORD *)this + 16))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 16) = 0;
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 12) = 0;
    ++*((_DWORD *)this + 30);
  }
  re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr((id *)this + 4);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

id *re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::~FramePersistentPtr(id *a1)
{
  re *inited;
  id location;
  _QWORD v5[3];
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  inited = (re *)objc_initWeak(&location, 0);
  memset(v5, 0, sizeof(v5));
  v6 = re::globalAllocators(inited)[2];
  v7 = 0;
  re::FramePersistentPtr<re::ecs2::BlendShapeWeightsBufferComponent::BlendShapeWeightsInputs,re::FrameManager>::reset(a1, &location, 0, (uint64_t)v5);
  if (v7)
  {
    (*(void (**)(_QWORD *))*v7)(v7);
    if (v7 != v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  }
  objc_destroyWeak(&location);
  location = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable((uint64_t)(a1 + 2));
  objc_destroyWeak(a1);
  *a1 = 0;
  return a1;
}

re::ecs2::BlendShapeWeightsBufferSystem *re::ecs2::BlendShapeWeightsBufferSystem::BlendShapeWeightsBufferSystem(re::ecs2::BlendShapeWeightsBufferSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  uint64_t v9;
  char v10;

  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)v2 = &off_24ED45910;
  v3 = v2 + 160;
  v4 = re::ecs2::BlendShapeWeightsBufferComponentStateImpl::BlendShapeWeightsBufferComponentStateImpl((re::ecs2::BlendShapeWeightsBufferComponentStateImpl *)(v2 + 160));
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_DWORD *)this + 58) = 1;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_DWORD *)this + 66) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_DWORD *)this + 88) = 1;
  *((_QWORD *)this + 49) = 0;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *((_DWORD *)this + 100) = 1;
  *(_OWORD *)((char *)this + 433) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 42, 0);
  *((_DWORD *)this + 88) += 2;
  *((_QWORD *)this + 47) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)this + 48, 0);
  *((_DWORD *)this + 100) += 2;
  *((_QWORD *)this + 53) = 0;
  *((_QWORD *)this + 54) = this;
  *((_QWORD *)this + 55) = v3;
  *((_BYTE *)this + 448) = 1;
  LOWORD(v9) = 257;
  HIDWORD(v9) = 1023969417;
  v10 = 0;
  re::ecs2::System::setTaskOptions(this, &v9);
  return this;
}

id re::internal::defaultRetain<re::ecs2::BlendShapeWeightsBufferSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::BlendShapeWeightsBufferSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_ImageBasedReflectionContentComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_141);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_141))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541063E8, 0);
    *(uint64_t *)((char *)&qword_2541063F8 + 6) = 0;
    qword_2541063F8 = 0;
    qword_254106408 = 0;
    qword_254106410 = 0xFFFFFFFFLL;
    qword_2541063E8 = (uint64_t)&off_24ED7DAA8;
    qword_254106418 = (uint64_t)"ImageBasedReflectionContentComponent";
    dword_254106420 = 0;
    unk_254106428 = 0u;
    unk_254106438 = 0u;
    unk_254106448 = 0u;
    qword_254106458 = 0;
    __cxa_guard_release(&_MergedGlobals_141);
  }
  return &qword_2541063E8;
}

void re::ecs2::initInfo_ImageBasedReflectionContentComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0xE5C615947B7704ELL;
  v10[1] = "ImageBasedReflectionContentComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_2541063E0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541063E0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541063D8 = v8;
      __cxa_guard_release(&qword_2541063E0);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2541063D8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ImageBasedReflectionContentComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ImageBasedReflectionContentComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ImageBasedReflectionContentComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ImageBasedReflectionContentComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::ImageBasedReflectionContentComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED45C70;
}

uint64_t re::internal::defaultDestruct<re::ecs2::ImageBasedReflectionContentComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::ImageBasedReflectionContentComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED45C70;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::ImageBasedReflectionContentComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_ImageBasedReflectionContentComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImageBasedReflectionContentComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ImageBasedReflectionContentComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ImageBasedReflectionContentComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ImageBasedReflectionContentComponent>, this);
}

void re::ecs2::ImageBasedReflectionContentComponent::~ImageBasedReflectionContentComponent(re::ecs2::ImageBasedReflectionContentComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t re::ecs2::PhysicsJointsPhysicsSubsystem::physicsSimulationService(re::ecs2::PhysicsJointsPhysicsSubsystem *this)
{
  uint64_t result;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  __int16 v5;
  uint8_t buf[2];

  if (this)
  {
    result = *((_QWORD *)this + 20);
    if (result)
      return result;
    v2 = *re::physicsLogObjects(0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v5 = 0;
      v3 = "PhysicsJointsPhysicsSubsystem::physicsSimulationService(): No PhysicsSimulationService";
      v4 = (uint8_t *)&v5;
LABEL_7:
      _os_log_impl(&dword_224FE9000, v2, OS_LOG_TYPE_DEFAULT, v3, v4, 2u);
    }
  }
  else
  {
    v2 = *re::physicsLogObjects(0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v3 = "PhysicsJointsPhysicsSubsystem::physicsSimulationService(): No parent PhysicsSystem";
      v4 = buf;
      goto LABEL_7;
    }
  }
  return 0;
}

_QWORD *re::ecs2::PhysicsJointsPhysicsSubsystem::init(_anonymous_namespace_ *this, uint64_t a2)
{
  *((_QWORD *)this + 32) = a2;
  return re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsJointsComponent,re::ecs2::PhysicsJointsComponentStateImpl>::init(this, a2);
}

_QWORD *re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsJointsComponent,re::ecs2::PhysicsJointsComponentStateImpl>::init(_anonymous_namespace_ *a1, uint64_t a2)
{
  _anonymous_namespace_ *v3;
  uint64_t v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;
  _anonymous_namespace_ *v7;
  _QWORD *result;

  v3 = a1;
  v4 = (uint64_t)a1 + 8;
  v7 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)v3 + 16, 0);
  *((_DWORD *)v3 + 36) += 2;
  *((_QWORD *)v3 + 21) = 0;
  v3 = (_anonymous_namespace_ *)((char *)v3 + 176);
  result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, 0);
  *((_DWORD *)v3 + 4) += 2;
  *((_QWORD *)v3 + 5) = 0;
  *((_QWORD *)v3 + 6) = a2;
  *((_QWORD *)v3 + 7) = (char *)v3 + 72;
  *((_BYTE *)v3 + 64) = 0;
  return result;
}

void re::ecs2::PhysicsJointsPhysicsSubsystem::ecsToSim(re::ecs2::PhysicsJointsPhysicsSubsystem **this, const re::ecs2::Scene *a2, re::PhysicsSimulation *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v11;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v25;
  __int128 v28;
  __int128 v29;

  v6 = re::ecs2::PhysicsJointsPhysicsSubsystem::physicsSimulationService(this[32]);
  if (v6)
  {
    v7 = (*(uint64_t (**)(uint64_t, const re::ecs2::Scene *))(*(_QWORD *)v6 + 40))(v6, a2);
    if (v7)
    {
      v8 = v7;
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v29, v7, 0);
      v28 = v29;
      v9 = v8 == (_QWORD)v29 && WORD4(v29) == 0xFFFFLL;
      if (!v9 || (DWORD2(v29) & 0xFFFF0000) != 4294901760)
      {
        while (1)
        {
          v11 = *(_QWORD *)(re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v28)
                          + 8);
          if (v11)
          {
            if (*(_BYTE *)(v11 + 240))
              break;
          }
          re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v28);
          if ((_QWORD)v28 == v8 && WORD4(v28) == 0xFFFF && WORD5(v28) == 0xFFFF)
            goto LABEL_20;
        }
        v14 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
              + 8);
        if (*((_QWORD *)a2 + 28) > v14)
        {
          v15 = *(_QWORD *)(*((_QWORD *)a2 + 30) + 8 * v14);
          if (v15)
          {
            v16 = *(_QWORD *)(v15 + 24);
            if (v16)
            {
              v17 = *(_QWORD ***)(v15 + 40);
              v18 = 8 * v16;
              do
              {
                v19 = *v17++;
                re::ecs2::Component::markDirty(v19);
                v18 -= 8;
              }
              while (v18);
            }
          }
        }
        v20 = re::ecs2::PhysicsJointsPhysicsSubsystem::physicsSimulationService(this[32]);
        if (v20)
        {
          v21 = (*(uint64_t (**)(uint64_t, const re::ecs2::Scene *))(*(_QWORD *)v20 + 32))(v20, a2);
          if (v21)
          {
            v22 = v21;
            re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v29, v21, 0);
            v23 = v22 == (_QWORD)v29 && WORD4(v29) == 0xFFFFLL;
            if (!v23 || (DWORD2(v29) & 0xFFFF0000) != 4294901760)
            {
              do
              {
                v25 = *(_QWORD *)(re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v29)
                                + 8);
                if (v25)
                  *(_BYTE *)(v25 + 240) = 0;
                re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v29);
              }
              while ((_QWORD)v29 != v22 || WORD4(v29) != 0xFFFF || WORD5(v29) != 0xFFFF);
            }
          }
        }
      }
    }
  }
LABEL_20:
  v29 = xmmword_2260E7EE0;
  re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene((uint64_t)(this + 1), (uint64_t)a2, (uint64_t)&v29, (uint64_t)a3);
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsJointsComponent,re::ecs2::PhysicsJointsComponentStateImpl>::ecsToSim(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;

  v3 = xmmword_2260E7EE0;
  re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene(a1 + 8, a2, (uint64_t)&v3, a3);
}

void re::ecs2::PhysicsJointsPhysicsSubsystem::~PhysicsJointsPhysicsSubsystem(re::ecs2::PhysicsJointsPhysicsSubsystem *this)
{
  *(_QWORD *)this = &off_24ED45DA0;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = &off_24ED45DA0;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 1);
  JUMPOUT(0x2276933B8);
}

void *re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsJointsComponent,re::ecs2::PhysicsJointsComponentStateImpl>::physicsComponentTypeBase()
{
  return re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsJointsComponent,re::ecs2::PhysicsJointsComponentStateImpl>::deinit(_QWORD *a1)
{
  uint64_t result;

  re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::deinit((uint64_t)(a1 + 1));
  re::HashBrown<unsigned long long,re::Pair<void const*,void const*,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)(a1 + 8));
  re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 16));
  a1[21] = 0;
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit((uint64_t)(a1 + 22));
  a1[27] = 0;
  a1[28] = 0;
  a1[29] = 0;
  return result;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsJointsComponent,re::ecs2::PhysicsJointsComponentStateImpl>::registerScene(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 8;
  v57[0] = a2;
  v5 = (_anonymous_namespace_ *)(a1 + 128);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_DWORD *)(a1 + 144);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(a1 + 152);
    else
      v8 = *(_QWORD **)(a1 + 160);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(a1 + 152);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = *(uint64_t **)(a1 + 160);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a1 + 128, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::init(v14, v4, a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = a1 + 176;
    v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  v56 = 0u;
  v49 = 0u;
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 1;
  v55 = 0uLL;
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)&v56 = 0;
  v18 = *(_QWORD *)(a1 + 16);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,4ul>::setBucketsCapacity((_QWORD *)(a1 + 8), (v17 + 4) >> 2);
    v18 = *(_QWORD *)(a1 + 16);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v17 >> 2;
    v64 = 2048;
    v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    v19 = a1 + 32;
  else
    v19 = *(_QWORD *)(a1 + 40);
  v20 = *(_QWORD *)(v19 + 8 * (v17 >> 2));
  ++*(_QWORD *)(a1 + 48);
  ++*(_DWORD *)(a1 + 56);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v49;
  v23 = v50;
  v24 = v51;
  *(_QWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  v26 = *(_QWORD *)(a1 + 48);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::init(v27, v4, v57[0]);
  *(_QWORD *)&v66[0] = *(_QWORD *)(a1 + 48) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(a1 + 64), v57, (uint64_t *)v66);
  v28 = *(_QWORD *)(a1 + 48);
  v29 = *(_QWORD *)(a1 + 168);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *(_QWORD *)(a1 + 168) = v28;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *(_QWORD *)(a1 + 168) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*(_BYTE *)(a1 + 144) & 1) != 0)
      v33 = a1 + 152;
    else
      v33 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(v33 + 8 * *(_QWORD *)(a1 + 136) - 8) &= v31;
  }
  v34 = *(_QWORD *)(a1 + 48);
  v35 = *(_QWORD *)(a1 + 216);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *(_QWORD *)(a1 + 216) = v34;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 176), v36, &v49);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *(_QWORD *)(a1 + 216) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*(_BYTE *)(a1 + 192) & 1) != 0)
      v39 = a1 + 200;
    else
      v39 = *(_QWORD *)(a1 + 208);
    *(_QWORD *)(v39 + 8 * *(_QWORD *)(a1 + 184) - 8) &= v37;
  }
  v16 = *(_QWORD *)&v66[0];
  v15 = a1 + 176;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit(v15, v16);
  if (!*(_BYTE *)(a1 + 240))
    return;
  v40 = *(_QWORD *)(a1 + 184);
  v41 = *(_DWORD *)(a1 + 192);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)(a1 + 200);
    else
      v42 = *(_QWORD **)(a1 + 208);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        return;
    }
LABEL_65:
    v48 = *(re::ecs2::System **)(a1 + 224);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    return;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)(a1 + 200);
    if (!v40)
      return;
  }
  else
  {
    v43 = *(uint64_t **)(a1 + 208);
    if (!v40)
      return;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
}

uint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsJointsComponent,re::ecs2::PhysicsJointsComponentStateImpl>::unregisterScene(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  uint64_t v16;

  v16 = a2;
  v3 = (uint64_t *)(a1 + 64);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), &v16);
  if (result != -1)
  {
    v5 = *(_QWORD *)(a1 + 72) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 128, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 176, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

unint64_t re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsJointsComponent,re::ecs2::PhysicsJointsComponentStateImpl>::simToECS(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = a1 + 8;
  v8 = a3;
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), &v8);
  v6 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v4, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16 * v5 + 8));
  return re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](*(_QWORD *)(v6 + 16) + 8, *(_QWORD *)(v6 + 48));
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsJointsComponent,re::ecs2::PhysicsJointsComponentStateImpl>::onPhysicsSimulationRootUpdated(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  re::ecs2::ComponentBucketsBase **v7;
  uint64_t i;
  _QWORD *v9;
  uint64_t v10;
  re::ecs2::Component *v11;
  uint64_t j;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD v28[15];

  v4 = a2;
  do
  {
    v5 = v4;
    v4 = *(_QWORD *)(v4 + 24);
  }
  while (v4);
  v28[0] = *(_QWORD *)(v5 + 16);
  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 64), v28);
  if (v6 == -1)
    v7 = 0;
  else
    v7 = (re::ecs2::ComponentBucketsBase **)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 8, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 16 * v6 + 8));
  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v28);
  v22[0] = 0;
  v22[1] = 0;
  v23 = 1;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v27 = 0;
  re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v22, (uint64_t)v28, 1uLL);
  *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = a2;
  for (i = v26; v26; i = v26)
  {
    v9 = *(_QWORD **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, i - 1);
    re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v22, --v26);
    ++v27;
    v10 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v9 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v10)
    {
      v11 = (re::ecs2::Component *)v10;
      for (j = 3; j != 7; ++j)
      {
        v13 = re::ecs2::ComponentBucketsBase::componentHandle(v7[2], (unint64_t)v7[j], v11);
        if (v13 != -1 && (v14 & 0xFFFFFF00000000) != 0)
        {
          v16 = v13;
          v17 = v14;
          goto LABEL_16;
        }
      }
      v16 = -1;
      v17 = 0xFFFFFFFFLL;
LABEL_16:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(v7, v16, v17, 0);
    }
    v18 = v9[41];
    if (v18)
    {
      v19 = (uint64_t *)v9[43];
      v20 = 8 * v18;
      do
      {
        v21 = *v19++;
        *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v22) = v21;
        v20 -= 8;
      }
      while (v20);
    }
  }
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v22);
  if (v22[0] && (v23 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v22[0] + 40))();
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v28);
}

re::ecs2::PhysicsJointsComponent *re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsJointsComponent,re::ecs2::PhysicsJointsComponentStateImpl>::onPhysicsComponentDeactivated(uint64_t a1, uint64_t a2)
{
  re::ecs2::PhysicsJointsComponent *result;

  result = (re::ecs2::PhysicsJointsComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
    return (re::ecs2::PhysicsJointsComponent *)re::ecs2::PhysicsJointsComponent::removeFromSimulation(result);
  return result;
}

_QWORD *re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsJointsComponent,re::ecs2::PhysicsJointsComponentStateImpl>::~PhysicsSubsystemImpl(_QWORD *a1)
{
  *a1 = &off_24ED45DA0;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  return a1;
}

void re::ecs2::PhysicsSubsystemImpl<re::ecs2::PhysicsJointsComponent,re::ecs2::PhysicsJointsComponentStateImpl>::~PhysicsSubsystemImpl(_QWORD *a1)
{
  *a1 = &off_24ED45DA0;
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 1);
  JUMPOUT(0x2276933B8);
}

_QWORD *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 448, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  re::ecs2::System *v25;
  uint64_t v26;

  v26 = a2;
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 64)
                 + 16
                 * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 56), &v26)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 168, v7);
  v8 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1, v7);
  v9 = *(_QWORD *)(*v8 + 224);
  v10 = v8[3];
  v11 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v8[2] + 8, v10);
  if (*(_DWORD *)(v11 + 40))
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, a3, v8, v10, v11, a4);
  else
    v12 = 0;
  v13 = v8[5];
  v14 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v8[2] + 8, v13);
  if (*(_DWORD *)(v14 + 40))
    v12 |= (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, a3, v8, v13, v14, a4);
  v15 = v8[6];
  v16 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v8[2] + 8, v15);
  if (*(_DWORD *)(v16 + 40))
  {
    if (((v12 | (*(unsigned int (**)(uint64_t, uint64_t, _QWORD *, unint64_t, unint64_t, uint64_t))(*(_QWORD *)v9 + 40))(v9, a3, v8, v15, v16, a4)) & 1) == 0)goto LABEL_9;
    goto LABEL_8;
  }
  if (v12)
LABEL_8:
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 168, v7);
LABEL_9:
  if (!*(_BYTE *)(a1 + 232))
    return;
  v17 = *(_QWORD *)(a1 + 176);
  v18 = *(_DWORD *)(a1 + 184);
  if (v17 >= 0xB)
  {
    if ((v18 & 1) != 0)
      v19 = (_QWORD *)(a1 + 192);
    else
      v19 = *(_QWORD **)(a1 + 200);
    v21 = 8 * v17;
    while (!*v19)
    {
      ++v19;
      v21 -= 8;
      if (!v21)
        return;
    }
LABEL_27:
    v25 = *(re::ecs2::System **)(a1 + 216);
    if (!*((_BYTE *)v25 + 86))
      re::ecs2::System::queueToRun(v25, 0.0);
    return;
  }
  if ((v18 & 1) != 0)
  {
    v20 = (uint64_t *)(a1 + 192);
    if (!v17)
      return;
  }
  else
  {
    v20 = *(uint64_t **)(a1 + 200);
    if (!v17)
      return;
  }
  v22 = 0;
  v23 = 8 * v17;
  do
  {
    v24 = *v20++;
    v22 |= v24;
    v23 -= 8;
  }
  while (v23);
  if (v22)
    goto LABEL_27;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED45E10;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED45E68;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED45EC0;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED45F18;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED45E10;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED45E68;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED45EC0;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED45F18;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  re::ecs2::ComponentBucketsBase *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(re::ecs2::ComponentBucketsBase **)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)v4 + 7, &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v4 + 168, *(_QWORD *)(*((_QWORD *)v4 + 8) + 16 * v5 + 8));
  if (!*((_BYTE *)v4 + 232))
    goto LABEL_20;
  v6 = *((_QWORD *)v4 + 22);
  v7 = *((_DWORD *)v4 + 46);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)v4 + 192);
    else
      v8 = (_QWORD *)*((_QWORD *)v4 + 25);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = (re::ecs2::System *)*((_QWORD *)v4 + 27);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)v4 + 25);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsJointsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState((re::ecs2::ComponentBucketsBase **)a1, v18, v19, 0);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

unint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(re::ecs2::ComponentBucketsBase **a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v8 = re::ecs2::ComponentBucketsBase::moveComponent(a1[2], a2, a3, (unint64_t)a1[a4 + 3]);
  v10 = v8;
  if (!a4 && (v8 != a2 || (_DWORD)v9 != (_DWORD)a3 || ((v9 ^ a3) & 0xFFFFFF00000000) != 0))
    (*(void (**)(_QWORD, re::ecs2::ComponentBucketsBase **, unint64_t, uint64_t))(**((_QWORD **)*a1 + 28)
                                                                                                 + 16))(*((_QWORD *)*a1 + 28), a1, v8, v9);
  return v10;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED45E10;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED45E10;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED45E68;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED45E68;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED45EC0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED45EC0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED45F18;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED45F18;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

_QWORD *re::internal::defaultConstruct<re::ecs2::VFXREBindingDescriptor>(_anonymous_namespace_ *a1, uint64_t a2, _OWORD *a3)
{
  _OWORD *v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  _anonymous_namespace_ *v6;

  v3 = a3;
  *a3 = 0u;
  a3[1] = 0u;
  v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  v3[3] = 0u;
  v3[2] = 0u;
  v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v3 + 4, 0);
  v3[5] = 0u;
  v3[4] = 0u;
  v6 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v3 + 8, 0);
  v3[6] = 0u;
  v3[7] = 0u;
  v3 += 6;
  return re::DynamicString::setCapacity(v3, 0);
}

double re::internal::defaultDestruct<re::ecs2::VFXREBindingDescriptor>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _OWORD *v5;
  double result;
  uint64_t v7;
  uint64_t v8;

  v5 = a3 + 12;
  v4 = a3[12];
  if (v4)
  {
    if ((a3[13] & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[14]);
    result = 0.0;
    *v5 = 0u;
    v5[1] = 0u;
  }
  v7 = a3[8];
  if (v7)
  {
    if ((a3[9] & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 40))(v7, a3[10]);
    result = 0.0;
    *((_OWORD *)a3 + 4) = 0u;
    *((_OWORD *)a3 + 5) = 0u;
  }
  v8 = a3[4];
  if (v8)
  {
    if ((a3[5] & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 40))(v8, a3[6]);
    result = 0.0;
    *((_OWORD *)a3 + 2) = 0u;
    *((_OWORD *)a3 + 3) = 0u;
  }
  if (*a3)
  {
    if ((a3[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 40))(*a3, a3[2]);
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
  return result;
}

_QWORD *re::internal::defaultConstructV2<re::ecs2::VFXREBindingDescriptor>(_anonymous_namespace_ *a1)
{
  _anonymous_namespace_ *v1;
  _anonymous_namespace_ *v2;
  _anonymous_namespace_ *v3;
  _anonymous_namespace_ *v4;

  v1 = a1;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v1, 0);
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 2) = 0u;
  v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v1 + 4, 0);
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 4) = 0u;
  v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v1 + 8, 0);
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  v1 = (_anonymous_namespace_ *)((char *)v1 + 96);
  return re::DynamicString::setCapacity(v1, 0);
}

double re::internal::defaultDestructV2<re::ecs2::VFXREBindingDescriptor>(_QWORD *a1)
{
  uint64_t v2;
  _OWORD *v3;
  double result;
  uint64_t v5;
  uint64_t v6;

  v3 = a1 + 12;
  v2 = a1[12];
  if (v2)
  {
    if ((a1[13] & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[14]);
    result = 0.0;
    *v3 = 0u;
    v3[1] = 0u;
  }
  v5 = a1[8];
  if (v5)
  {
    if ((a1[9] & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, a1[10]);
    result = 0.0;
    *((_OWORD *)a1 + 4) = 0u;
    *((_OWORD *)a1 + 5) = 0u;
  }
  v6 = a1[4];
  if (v6)
  {
    if ((a1[5] & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, a1[6]);
    result = 0.0;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
  }
  if (*a1)
  {
    if ((a1[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, a1[2]);
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

void re::internal::defaultConstruct<re::ecs2::VFXREBinding>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a3 = -1;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(_DWORD *)(a3 + 48) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::VFXREBinding>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v4;

  v4 = (_QWORD *)(a3 + 8);
  result = *(_QWORD *)(a3 + 8);
  if (result)
  {
    if (*(_QWORD *)(a3 + 40))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a3 + 40) = 0;
    v4[1] = 0;
    v4[2] = 0;
    *v4 = 0;
    ++*(_DWORD *)(a3 + 32);
  }
  return result;
}

uint64_t re::internal::defaultConstructV2<re::ecs2::VFXREBinding>(uint64_t result)
{
  *(_DWORD *)result = -1;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::VFXREBinding>(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 8);
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    if (*(_QWORD *)(a1 + 40))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 40) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 32);
  }
  return result;
}

void re::IntrospectionInfo<re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  uint64_t *v3;
  _OWORD *v4;
  uint64_t *v5;
  unsigned __int8 v6;
  const re::IntrospectionBase *v7;
  unsigned __int8 v8;
  int v9;
  re::IntrospectionRegistry *v10;
  const re::IntrospectionBase *v11;
  const char *v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _anonymous_namespace_ *v20;
  uint64_t v21;
  uint64_t v22;
  re *v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  const re::IntrospectionBase *v29;
  void *v30;
  uint64_t v31;
  uint64_t *v32;
  const re::IntrospectionBase *v33;
  void *v34;
  uint64_t (*v35)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41[2];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  const char *v45;
  _QWORD v46[2];
  __int128 v47;
  __int128 v48;
  uint64_t *v49;

  v2 = atomic_load((unsigned __int8 *)&qword_2541064E8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2541064E8))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_254106618);
    qword_254106618 = (uint64_t)&off_24ED46140;
    __cxa_guard_release(&qword_2541064E8);
  }
  v3 = &qword_254106000;
  if ((byte_254106462 & 1) == 0)
  {
    v4 = re::introspect_size_t((re *)1, a2);
    v5 = (uint64_t *)qword_254106490;
    if (!qword_254106490)
    {
      v6 = atomic_load((unsigned __int8 *)&qword_254106480);
      if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254106480))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254106748, 0);
        *(_QWORD *)(v22 + 22) = 0;
        qword_254106758 = 0;
        *(_QWORD *)&xmmword_254106768 = 0;
        *((_QWORD *)&xmmword_254106768 + 1) = 0xFFFFFFFFLL;
        qword_254106748 = (uint64_t)&off_24ED7DAA8;
        qword_254106778 = (uint64_t)"VFXREBinding";
        dword_254106780 = 0;
        *(_OWORD *)(v22 + 64) = 0u;
        *(_OWORD *)(v22 + 80) = 0u;
        *(_OWORD *)(v22 + 96) = 0u;
        qword_2541067B8 = 0;
        __cxa_guard_release(&qword_254106480);
      }
      qword_254106490 = (uint64_t)&qword_254106748;
      *(_QWORD *)&v48 = 0x3E4EFC2E3FAE7C54;
      *((_QWORD *)&v48 + 1) = "VFXREBinding";
      re::StringID::destroyString((re::StringID *)&v48);
      xmmword_254106768 = v44;
      v8 = atomic_load((unsigned __int8 *)&qword_254106488);
      if ((v8 & 1) == 0)
      {
        v23 = (re *)__cxa_guard_acquire(&qword_254106488);
        if ((_DWORD)v23)
        {
          v24 = re::introspectionAllocator(v23);
          v26 = re::IntrospectionInfo<re::DynamicArray<unsigned char>>::get(1, v25);
          v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
          *(_DWORD *)v27 = 1;
          *(_QWORD *)(v27 + 8) = "valueStorage";
          *(_QWORD *)(v27 + 16) = v26;
          *(_QWORD *)(v27 + 24) = 0;
          *(_QWORD *)(v27 + 32) = 0x800000002;
          *(_DWORD *)(v27 + 40) = 0;
          *(_QWORD *)(v27 + 48) = 0;
          *(_QWORD *)(v27 + 56) = 0;
          *(_DWORD *)(v27 + 64) = 0;
          qword_254106508 = v27;
          v28 = re::introspectionAllocator((re *)v27);
          v30 = re::introspect_uint32_t((re *)1, v29);
          v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
          *(_DWORD *)v31 = 1;
          *(_QWORD *)(v31 + 8) = "version";
          *(_QWORD *)(v31 + 16) = v30;
          *(_QWORD *)(v31 + 24) = 0;
          *(_QWORD *)(v31 + 32) = 0x3000000005;
          *(_DWORD *)(v31 + 40) = 0;
          *(_QWORD *)(v31 + 48) = 0;
          *(_QWORD *)(v31 + 56) = 0;
          *(_DWORD *)(v31 + 64) = 0;
          qword_254106510 = v31;
          v32 = re::introspectionAllocator((re *)v31);
          v34 = re::introspect_int((re *)1, v33);
          v35 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v32 + 32);
          v36 = v32;
          v3 = &qword_254106000;
          v37 = v35(v36, 72, 8);
          *(_DWORD *)v37 = 1;
          *(_QWORD *)(v37 + 8) = "descriptorIndex";
          *(_QWORD *)(v37 + 16) = v34;
          *(_QWORD *)(v37 + 24) = 0;
          *(_QWORD *)(v37 + 32) = 6;
          *(_DWORD *)(v37 + 40) = 0;
          *(_QWORD *)(v37 + 48) = 0;
          *(_QWORD *)(v37 + 56) = 0;
          *(_DWORD *)(v37 + 64) = 0;
          qword_254106518 = v37;
          __cxa_guard_release(&qword_254106488);
        }
      }
      qword_254106758 = 0x4000000008;
      v5 = &qword_254106748;
      dword_254106760 = 8;
      word_254106764 = 0;
      dword_254106780 = 3;
      qword_254106788 = (uint64_t)&qword_254106508;
      qword_254106790 = (uint64_t)re::internal::defaultConstruct<re::ecs2::VFXREBinding>;
      qword_254106798 = (uint64_t)re::internal::defaultDestruct<re::ecs2::VFXREBinding>;
      qword_2541067A8 = 0;
      qword_2541067A0 = 0;
      qword_2541067B0 = (uint64_t)re::internal::defaultConstructV2<re::ecs2::VFXREBinding>;
      qword_2541067B8 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::VFXREBinding>;
      re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254106748, v7);
      v48 = v44;
    }
    if ((*((_BYTE *)v3 + 1122) & 1) == 0)
    {
      byte_254106462 = 1;
      v9 = *((_DWORD *)v5 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254106618, 0);
      qword_254106628 = 0x3000000007;
      dword_254106630 = v9;
      word_254106634 = 0;
      *(_QWORD *)&xmmword_254106638 = 0;
      *((_QWORD *)&xmmword_254106638 + 1) = 0xFFFFFFFFLL;
      qword_254106648 = (uint64_t)v4;
      unk_254106650 = 0;
      qword_254106658 = (uint64_t)v5;
      unk_254106660 = 0;
      qword_254106618 = (uint64_t)&off_24ED46140;
      re::IntrospectionRegistry::add(v10, v11);
      re::getPrettyTypeName((re *)&qword_254106618, (const re::IntrospectionBase *)&v44);
      if ((BYTE8(v44) & 1) != 0)
        v12 = v45;
      else
        v12 = (char *)&v44 + 9;
      if ((_QWORD)v44 && (BYTE8(v44) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v44 + 40))();
      v13 = v4[2];
      v39 = *((_OWORD *)v5 + 2);
      v40 = v13;
      v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v41);
      if (v14)
      {
        v15 = *v14;
        *((_QWORD *)&v38 + 1) = v15;
      }
      else
      {
        *(_QWORD *)&v44 = 0x449AD97C4B77BED4;
        *((_QWORD *)&v44 + 1) = "_CompareFunc";
        v16 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v44);
        if (v16)
        {
          v17 = *v16;
          re::StringID::destroyString((re::StringID *)&v44);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v44);
          *(_QWORD *)&v48 = 0x449AD97C4B77BED4;
          *((_QWORD *)&v48 + 1) = "_CompareFunc";
          v17 = *((_QWORD *)&v44 + 1);
          v18 = (void *)v44;
          re::StringID::destroyString((re::StringID *)&v48);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v48, (uint64_t)&v44 + 8);
        if (!v18
          || (v19 = *v49,
              *(_QWORD *)&v44 = v17,
              *((_QWORD *)&v44 + 1) = v19,
              LODWORD(v45) = -1,
              (v20 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(v48 + 768, (uint64_t *)&v44)) == 0)|| !*(_QWORD *)v20)
        {
          v47 = v40;
          v46[0] = v18;
          v46[1] = v17;
        }
        v42 = v39;
        v43 = v40;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v44, v41, 1, 0x30uLL, 8uLL, &v43, &v42);
        re::TypeBuilder::setConstructor((uint64_t)&v44, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v44, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v44, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v44, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v44, v21);
      }
      xmmword_254106638 = v38;
      re::StringID::destroyString((re::StringID *)v41);
    }
  }
}

uint64_t *re::ecs2::allocInfo_VFXSceneComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541064B0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541064B0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541067C0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541067D0 = 0;
    qword_2541067E0 = 0;
    qword_2541067E8 = 0xFFFFFFFFLL;
    qword_2541067C0 = (uint64_t)&off_24ED7DAA8;
    qword_2541067F0 = (uint64_t)"VFXSceneComponent";
    dword_2541067F8 = 0;
    xmmword_254106800 = 0u;
    unk_254106810 = 0u;
    xmmword_254106820 = 0u;
    qword_254106830 = 0;
    __cxa_guard_release(&qword_2541064B0);
  }
  return &qword_2541067C0;
}

void re::ecs2::initInfo_VFXSceneComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  void *v14;
  uint64_t v15;
  const re::IntrospectionBase *v16;
  uint64_t *v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int *v22;
  _anonymous_namespace_ *v23;
  unint64_t v24;
  unint64_t i;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  unint64_t j;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char v37;
  unsigned __int8 *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  const re::IntrospectionBase *v44;
  void *v45;
  uint64_t v46;
  uint64_t *v47;
  const re::IntrospectionBase *v48;
  void *v49;
  uint64_t v50;
  uint64_t *v51;
  const re::IntrospectionBase *v52;
  void *v53;
  uint64_t v54;
  uint64_t *v55;
  const re::IntrospectionBase *v56;
  void *v57;
  uint64_t v58;
  uint64_t *v59;
  const re::IntrospectionBase *v60;
  void *v61;
  uint64_t v62;
  uint64_t *v63;
  const re::IntrospectionBase *v64;
  void *v65;
  uint64_t v66;
  uint64_t *v67;
  const re::IntrospectionBase *v68;
  void *v69;
  uint64_t v70;
  uint64_t *v71;
  const re::IntrospectionBase *v72;
  void *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  re *v78;
  uint64_t *v79;
  re *v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86[2];
  StringID v87;
  _QWORD v88[2];
  uint64_t v89;
  const char *v90;

  v89 = 0x24F9B15154932732;
  v90 = "VFXSceneComponent";
  re::StringID::destroyString((re::StringID *)&v89);
  *((_OWORD *)this + 2) = v85;
  v4 = atomic_load((unsigned __int8 *)&qword_2541064A8);
  if ((v4 & 1) != 0)
    goto LABEL_2;
  v5 = (re *)__cxa_guard_acquire(&qword_2541064A8);
  if (!(_DWORD)v5)
    goto LABEL_2;
  v6 = re::introspectionAllocator(v5);
  v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
  v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = "Component";
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_DWORD *)(v8 + 40) = 3;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_DWORD *)(v8 + 64) = 0;
  qword_254106668 = v8;
  v9 = re::introspectionAllocator((re *)v8);
  re::IntrospectionInfo<re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>>::get((uint64_t)v9, v10);
  v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
  *(_DWORD *)v11 = 1;
  *(_QWORD *)(v11 + 8) = "m_bindingTable";
  *(_QWORD *)(v11 + 16) = &qword_254106618;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0x7000000002;
  *(_DWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 56) = 0;
  *(_DWORD *)(v11 + 64) = 0;
  qword_254106670 = v11;
  v12 = re::introspectionAllocator((re *)v11);
  v14 = re::introspect_float((re *)1, v13);
  v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
  *(_DWORD *)v15 = 1;
  *(_QWORD *)(v15 + 8) = "simulationRate";
  *(_QWORD *)(v15 + 16) = v14;
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0x16000000003;
  *(_DWORD *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 56) = 0;
  *(_DWORD *)(v15 + 64) = 0;
  qword_254106678 = v15;
  v17 = re::introspectionAllocator((re *)v15);
  v18 = atomic_load((unsigned __int8 *)&qword_254106498);
  if ((v18 & 1) == 0)
  {
    v78 = (re *)__cxa_guard_acquire(&qword_254106498);
    if ((_DWORD)v78)
    {
      v79 = re::introspectionAllocator(v78);
      v80 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v79 + 32))(v79, 24, 8);
      *(_DWORD *)v80 = 1;
      *((_QWORD *)v80 + 1) = 0;
      *((_QWORD *)v80 + 2) = "Playing";
      qword_2541064F8 = (uint64_t)v80;
      v81 = re::introspectionAllocator(v80);
      v82 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v81 + 32))(v81, 24, 8);
      *(_DWORD *)v82 = 1;
      *(_QWORD *)(v82 + 8) = 1;
      *(_QWORD *)(v82 + 16) = "Paused";
      qword_254106500 = v82;
      __cxa_guard_release(&qword_254106498);
    }
  }
  v19 = atomic_load((unsigned __int8 *)&qword_2541064A0);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_2541064A0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2541065D0, "VFXSimulationState", 1, 1, 1, 1);
    qword_2541065D0 = (uint64_t)&off_24ED7D9E8;
    qword_254106610 = (uint64_t)&re::ecs2::introspect_VFXSimulationState(BOOL)::enumTable;
    dword_2541065E0 = 9;
    __cxa_guard_release(&qword_2541064A0);
  }
  if ((_MergedGlobals_142 & 1) != 0)
  {
LABEL_33:
    v42 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
    *(_DWORD *)v42 = 1;
    *(_QWORD *)(v42 + 8) = "simulationState";
    *(_QWORD *)(v42 + 16) = &qword_2541065D0;
    *(_QWORD *)(v42 + 24) = 0;
    *(_QWORD *)(v42 + 32) = 0x16800000004;
    *(_DWORD *)(v42 + 40) = 0;
    *(_QWORD *)(v42 + 48) = 0;
    *(_QWORD *)(v42 + 56) = 0;
    *(_DWORD *)(v42 + 64) = 0;
    qword_254106680 = v42;
    v43 = re::introspectionAllocator((re *)v42);
    v45 = re::introspect_BOOL((re *)1, v44);
    v46 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v43 + 32))(v43, 72, 8);
    *(_DWORD *)v46 = 1;
    *(_QWORD *)(v46 + 8) = "explicitSimulationTime";
    *(_QWORD *)(v46 + 16) = v45;
    *(_QWORD *)(v46 + 24) = 0;
    *(_QWORD *)(v46 + 32) = 0xE000000006;
    *(_DWORD *)(v46 + 40) = 0;
    *(_QWORD *)(v46 + 48) = 0;
    *(_QWORD *)(v46 + 56) = 0;
    *(_DWORD *)(v46 + 64) = 0;
    qword_254106688 = v46;
    v47 = re::introspectionAllocator((re *)v46);
    v49 = re::introspect_float((re *)1, v48);
    v50 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v47 + 32))(v47, 72, 8);
    *(_DWORD *)v50 = 1;
    *(_QWORD *)(v50 + 8) = "totalSimulationTime";
    *(_QWORD *)(v50 + 16) = v49;
    *(_QWORD *)(v50 + 24) = 0;
    *(_QWORD *)(v50 + 32) = 0xE400000007;
    *(_DWORD *)(v50 + 40) = 0;
    *(_QWORD *)(v50 + 48) = 0;
    *(_QWORD *)(v50 + 56) = 0;
    *(_DWORD *)(v50 + 64) = 0;
    qword_254106690 = v50;
    v51 = re::introspectionAllocator((re *)v50);
    v53 = re::introspect_float((re *)1, v52);
    v54 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v51 + 32))(v51, 72, 8);
    *(_DWORD *)v54 = 1;
    *(_QWORD *)(v54 + 8) = "lastTickTotalSimulationTime";
    *(_QWORD *)(v54 + 16) = v53;
    *(_QWORD *)(v54 + 24) = 0;
    *(_QWORD *)(v54 + 32) = 0xE800000008;
    *(_DWORD *)(v54 + 40) = 0;
    *(_QWORD *)(v54 + 48) = 0;
    *(_QWORD *)(v54 + 56) = 0;
    *(_DWORD *)(v54 + 64) = 0;
    qword_254106698 = v54;
    v55 = re::introspectionAllocator((re *)v54);
    v57 = re::introspect_float((re *)1, v56);
    v58 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v55 + 32))(v55, 72, 8);
    *(_DWORD *)v58 = 1;
    *(_QWORD *)(v58 + 8) = "sceneScale";
    *(_QWORD *)(v58 + 16) = v57;
    *(_QWORD *)(v58 + 24) = 0;
    *(_QWORD *)(v58 + 32) = 0x16400000009;
    *(_DWORD *)(v58 + 40) = 0;
    *(_QWORD *)(v58 + 48) = 0;
    *(_QWORD *)(v58 + 56) = 0;
    *(_DWORD *)(v58 + 64) = 0;
    qword_2541066A0 = v58;
    v59 = re::introspectionAllocator((re *)v58);
    v61 = re::introspect_uint32_t((re *)1, v60);
    v62 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v59 + 32))(v59, 72, 8);
    *(_DWORD *)v62 = 1;
    *(_QWORD *)(v62 + 8) = "performResetVersion";
    *(_QWORD *)(v62 + 16) = v61;
    *(_QWORD *)(v62 + 24) = 0;
    *(_QWORD *)(v62 + 32) = 0xEC0000000ALL;
    *(_DWORD *)(v62 + 40) = 0;
    *(_QWORD *)(v62 + 48) = 0;
    *(_QWORD *)(v62 + 56) = 0;
    *(_DWORD *)(v62 + 64) = 0;
    qword_2541066A8 = v62;
    v63 = re::introspectionAllocator((re *)v62);
    v65 = re::introspect_BOOL((re *)1, v64);
    v66 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v63 + 32))(v63, 72, 8);
    *(_DWORD *)v66 = 1;
    *(_QWORD *)(v66 + 8) = "m_isInitialized";
    *(_QWORD *)(v66 + 16) = v65;
    *(_QWORD *)(v66 + 24) = 0;
    *(_QWORD *)(v66 + 32) = 0xD50000000BLL;
    *(_DWORD *)(v66 + 40) = 0;
    *(_QWORD *)(v66 + 48) = 0;
    *(_QWORD *)(v66 + 56) = 0;
    *(_DWORD *)(v66 + 64) = 0;
    qword_2541066B0 = v66;
    v67 = re::introspectionAllocator((re *)v66);
    v69 = re::introspect_BOOL((re *)1, v68);
    v70 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v67 + 32))(v67, 72, 8);
    *(_DWORD *)v70 = 1;
    *(_QWORD *)(v70 + 8) = "m_hasBindingToFetch";
    *(_QWORD *)(v70 + 16) = v69;
    *(_QWORD *)(v70 + 24) = 0;
    *(_QWORD *)(v70 + 32) = 0xD40000000DLL;
    *(_DWORD *)(v70 + 40) = 0;
    *(_QWORD *)(v70 + 48) = 0;
    *(_QWORD *)(v70 + 56) = 0;
    *(_DWORD *)(v70 + 64) = 0;
    qword_2541066B8 = v70;
    v71 = re::introspectionAllocator((re *)v70);
    v73 = re::introspect_uint64_t((re *)1, v72);
    v74 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v71 + 32))(v71, 72, 8);
    *(_DWORD *)v74 = 1;
    *(_QWORD *)(v74 + 8) = "m_collidingPortalEntityId";
    *(_QWORD *)(v74 + 16) = v73;
    *(_QWORD *)(v74 + 24) = 0;
    *(_QWORD *)(v74 + 32) = 0xF00000000ELL;
    *(_DWORD *)(v74 + 40) = 0;
    *(_QWORD *)(v74 + 48) = 0;
    *(_QWORD *)(v74 + 56) = 0;
    *(_DWORD *)(v74 + 64) = 0;
    qword_2541066C0 = v74;
    v75 = re::introspectionAllocator((re *)v74);
    v76 = re::introspect_Vector2F((re::IntrospectionBase **)1);
    v77 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v75 + 32))(v75, 72, 8);
    *(_DWORD *)v77 = 1;
    *(_QWORD *)(v77 + 8) = "m_collidingPortalPadding";
    *(_QWORD *)(v77 + 16) = v76;
    *(_QWORD *)(v77 + 24) = 0;
    *(_QWORD *)(v77 + 32) = 0xF80000000FLL;
    *(_DWORD *)(v77 + 40) = 0;
    *(_QWORD *)(v77 + 48) = 0;
    *(_QWORD *)(v77 + 56) = 0;
    *(_DWORD *)(v77 + 64) = 0;
    qword_2541066C8 = v77;
    __cxa_guard_release(&qword_2541064A8);
LABEL_2:
    *((_QWORD *)this + 2) = 0x17000000008;
    *((_DWORD *)this + 6) = 16;
    *((_WORD *)this + 14) = 0;
    *((_DWORD *)this + 14) = 13;
    *((_QWORD *)this + 8) = &qword_254106668;
    *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VFXSceneComponent>;
    *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VFXSceneComponent>;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VFXSceneComponent>;
    *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VFXSceneComponent>;
    re::IntrospectionRegistry::add(this, v3);
    v84 = v85;
    return;
  }
  _MergedGlobals_142 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541065D0, v16);
  v86[0] = 0x1096B9A2A9580404;
  v86[1] = (uint64_t)"VFXSimulationState";
  v89 = 6104748;
  v90 = "char";
  v20 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v89);
  if (v20)
  {
    v21 = *v20;
    re::StringID::destroyString((re::StringID *)&v89);
    v22 = (unsigned int *)qword_254106610;
    v88[1] = v21;
    re::TypeBuilder::beginEnumType((uint64_t)&v89, v86, 1, 1, (uint64_t)v88);
    v24 = *v22;
    if ((_DWORD)v24)
    {
      for (i = 0; i < v24; ++i)
      {
        v26 = *(_QWORD *)(*((_QWORD *)v22 + 1) + 8 * i);
        if (*(_DWORD *)v26 == 1)
        {
          v27 = *(char **)(v26 + 16);
          if (v27)
          {
            v28 = *v27;
            if (*v27)
            {
              v29 = v27[1];
              if (v29)
              {
                v30 = (unsigned __int8 *)(v27 + 2);
                do
                {
                  v28 = 31 * v28 + v29;
                  v31 = *v30++;
                  v29 = v31;
                }
                while (v31);
              }
            }
          }
          else
          {
            v28 = 0;
          }
          v32 = *(_QWORD *)(v26 + 8);
          *(_QWORD *)&v87.var0 = 2 * v28;
          v87.var1 = v27;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v89, v32, &v87);
          re::StringID::destroyString((re::StringID *)&v87);
          v24 = *v22;
        }
      }
      if (v24)
      {
        for (j = 0; j < v24; ++j)
        {
          v34 = *(_QWORD *)(*((_QWORD *)v22 + 1) + 8 * j);
          if (*(_DWORD *)v34 == 2)
          {
            v35 = *(char **)(v34 + 16);
            if (v35)
            {
              v36 = *v35;
              if (*v35)
              {
                v37 = v35[1];
                if (v37)
                {
                  v38 = (unsigned __int8 *)(v35 + 2);
                  do
                  {
                    v36 = 31 * v36 + v37;
                    v39 = *v38++;
                    v37 = v39;
                  }
                  while (v39);
                }
              }
            }
            else
            {
              v36 = 0;
            }
            v40 = *(_QWORD *)(v34 + 8);
            *(_QWORD *)&v87.var0 = 2 * v36;
            v87.var1 = v35;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v89, v40, &v87);
            re::StringID::destroyString((re::StringID *)&v87);
            v24 = *v22;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v89, v41);
    xmmword_2541065F0 = (__int128)v87;
    re::StringID::destroyString((re::StringID *)v86);
    goto LABEL_33;
  }
  re::StringID::destroyString((re::StringID *)&v89);
  re::internal::assertLog((re::internal *)5, v83, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "VFXSimulationState");
  _os_crash();
  __break(1u);
}

double re::internal::defaultConstruct<re::ecs2::VFXSceneComponent>(int a1, int a2, re::ecs2::VFXSceneComponent *this)
{
  return re::ecs2::VFXSceneComponent::VFXSceneComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::VFXSceneComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::VFXSceneComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_VFXSceneComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VFXSceneComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VFXSceneComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VFXSceneComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VFXSceneComponent>, this);
}

uint64_t *re::ecs2::allocInfo_VFXSceneReadbackComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541064C0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541064C0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254106838, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254106848 = 0;
    qword_254106858 = 0;
    qword_254106860 = 0xFFFFFFFFLL;
    qword_254106838 = (uint64_t)&off_24ED7DAA8;
    qword_254106868 = (uint64_t)"VFXSceneReadbackComponent";
    dword_254106870 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_2541068A8 = 0;
    __cxa_guard_release(&qword_2541064C0);
  }
  return &qword_254106838;
}

void re::ecs2::initInfo_VFXSceneReadbackComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  void *v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[2];
  __int128 v18;

  v17[0] = 0xB776A00B8A58A138;
  v17[1] = "VFXSceneReadbackComponent";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  v4 = atomic_load((unsigned __int8 *)&qword_2541064B8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541064B8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254106520 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>>::get((uint64_t)v9, v10);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "bindings";
      *(_QWORD *)(v11 + 16) = &qword_254106618;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254106528 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::introspect_BOOL((re *)1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "hasBeenSyncedBack";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x5000000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254106530 = v15;
      __cxa_guard_release(&qword_2541064B8);
    }
  }
  *((_QWORD *)this + 2) = 0x5800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254106520;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VFXSceneReadbackComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VFXSceneReadbackComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VFXSceneReadbackComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VFXSceneReadbackComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v16 = v18;
}

double re::internal::defaultConstruct<re::ecs2::VFXSceneReadbackComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_QWORD *)this + 10) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED461E0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_DWORD *)(v3 + 64) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v3 + 68) = 0x7FFFFFFFLL;
  *(_BYTE *)(v3 + 80) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::VFXSceneReadbackComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::VFXSceneReadbackComponent>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED461E0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_DWORD *)(v1 + 64) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v1 + 68) = 0x7FFFFFFFLL;
  *(_BYTE *)(v1 + 80) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::VFXSceneReadbackComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_VFXSceneReadbackComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VFXSceneReadbackComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VFXSceneReadbackComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VFXSceneReadbackComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VFXSceneReadbackComponent>, this);
}

uint64_t *re::ecs2::allocInfo_VFXSceneMetadataComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541064D0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541064D0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541068B0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541068C0 = 0;
    qword_2541068D0 = 0;
    qword_2541068D8 = 0xFFFFFFFFLL;
    qword_2541068B0 = (uint64_t)&off_24ED7DAA8;
    qword_2541068E0 = (uint64_t)"VFXSceneMetadataComponent";
    dword_2541068E8 = 0;
    xmmword_2541068F0 = 0u;
    xmmword_254106900 = 0u;
    xmmword_254106910 = 0u;
    qword_254106920 = 0;
    __cxa_guard_release(&qword_2541064D0);
  }
  return &qword_2541068B0;
}

void re::ecs2::initInfo_VFXSceneMetadataComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unsigned __int8 v10;
  uint64_t *v11;
  unsigned __int8 v12;
  const re::IntrospectionBase *v13;
  unsigned __int8 v14;
  int v15;
  re::IntrospectionRegistry *v16;
  const re::IntrospectionBase *v17;
  const char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  re *v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  void *v39;
  uint64_t v40;
  uint64_t *v41;
  const re::IntrospectionBase *v42;
  void *v43;
  uint64_t v44;
  uint64_t *v45;
  const re::IntrospectionBase *v46;
  void *v47;
  uint64_t v48;
  uint64_t *v49;
  const re::IntrospectionBase *v50;
  void *v51;
  uint64_t v52;
  uint64_t *v53;
  const re::IntrospectionBase *v54;
  void *v55;
  uint64_t v56;
  uint64_t *v57;
  const re::IntrospectionBase *v58;
  void *v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65[2];
  __int128 v66;
  const char *v67;
  __int128 v68;

  *(_QWORD *)&v66 = 0x5FF980AED9C40254;
  *((_QWORD *)&v66 + 1) = "VFXSceneMetadataComponent";
  re::StringID::destroyString((re::StringID *)&v66);
  *((_OWORD *)this + 2) = v62;
  v4 = atomic_load((unsigned __int8 *)&qword_2541064C8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541064C8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254106538 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = atomic_load((unsigned __int8 *)&qword_2541064F0);
      if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_2541064F0))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254106590, 0);
        *(uint64_t *)((char *)&qword_2541065A0 + 6) = 0;
        qword_2541065A0 = 0;
        *(_QWORD *)&xmmword_2541065B0 = 0;
        *((_QWORD *)&xmmword_2541065B0 + 1) = 0xFFFFFFFFLL;
        qword_254106590 = (uint64_t)&off_24ED1FA08;
        qword_2541065C8 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_2541065C0);
        qword_254106590 = (uint64_t)&off_24ED46260;
        __cxa_guard_release(&qword_2541064F0);
      }
      if ((byte_254106463 & 1) == 0)
      {
        v11 = (uint64_t *)qword_254106478;
        if (qword_254106478)
          goto LABEL_10;
        v12 = atomic_load((unsigned __int8 *)&qword_254106468);
        if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_254106468))
        {
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541066D0, 0);
          *(_QWORD *)(v27 + 22) = 0;
          qword_2541066E0 = 0;
          *(_QWORD *)&xmmword_2541066F0 = 0;
          *((_QWORD *)&xmmword_2541066F0 + 1) = 0xFFFFFFFFLL;
          qword_2541066D0 = (uint64_t)&off_24ED7DAA8;
          qword_254106700 = (uint64_t)"VFXREBindingDescriptor";
          dword_254106708 = 0;
          xmmword_254106710 = 0u;
          *(_OWORD *)&qword_254106720 = 0u;
          xmmword_254106730 = 0u;
          qword_254106740 = 0;
          __cxa_guard_release(&qword_254106468);
        }
        qword_254106478 = (uint64_t)&qword_2541066D0;
        *(_QWORD *)&v68 = 0x5E7718CB343B8272;
        *((_QWORD *)&v68 + 1) = "VFXREBindingDescriptor";
        re::StringID::destroyString((re::StringID *)&v68);
        xmmword_2541066F0 = v66;
        v14 = atomic_load((unsigned __int8 *)&qword_254106470);
        if ((v14 & 1) == 0)
        {
          v28 = (re *)__cxa_guard_acquire(&qword_254106470);
          if ((_DWORD)v28)
          {
            v29 = re::introspectionAllocator(v28);
            v31 = re::IntrospectionInfo<re::DynamicString>::get(1, v30);
            v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
            *(_DWORD *)v32 = 1;
            *(_QWORD *)(v32 + 8) = "identifier";
            *(_QWORD *)(v32 + 16) = v31;
            *(_QWORD *)(v32 + 24) = 0;
            *(_QWORD *)(v32 + 32) = 1;
            *(_DWORD *)(v32 + 40) = 0;
            *(_QWORD *)(v32 + 48) = 0;
            *(_QWORD *)(v32 + 56) = 0;
            *(_DWORD *)(v32 + 64) = 0;
            qword_254106550 = v32;
            v33 = re::introspectionAllocator((re *)v32);
            v35 = re::IntrospectionInfo<re::DynamicString>::get(1, v34);
            v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
            *(_DWORD *)v36 = 1;
            *(_QWORD *)(v36 + 8) = "object";
            *(_QWORD *)(v36 + 16) = v35;
            *(_QWORD *)(v36 + 24) = 0;
            *(_QWORD *)(v36 + 32) = 0x2000000002;
            *(_DWORD *)(v36 + 40) = 0;
            *(_QWORD *)(v36 + 48) = 0;
            *(_QWORD *)(v36 + 56) = 0;
            *(_DWORD *)(v36 + 64) = 0;
            qword_254106558 = v36;
            v37 = re::introspectionAllocator((re *)v36);
            v39 = re::IntrospectionInfo<re::DynamicString>::get(1, v38);
            v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
            *(_DWORD *)v40 = 1;
            *(_QWORD *)(v40 + 8) = "binding";
            *(_QWORD *)(v40 + 16) = v39;
            *(_QWORD *)(v40 + 24) = 0;
            *(_QWORD *)(v40 + 32) = 0x4000000003;
            *(_DWORD *)(v40 + 40) = 0;
            *(_QWORD *)(v40 + 48) = 0;
            *(_QWORD *)(v40 + 56) = 0;
            *(_DWORD *)(v40 + 64) = 0;
            qword_254106560 = v40;
            v41 = re::introspectionAllocator((re *)v40);
            v43 = re::IntrospectionInfo<re::DynamicString>::get(1, v42);
            v44 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v41 + 32))(v41, 72, 8);
            *(_DWORD *)v44 = 1;
            *(_QWORD *)(v44 + 8) = "userManual";
            *(_QWORD *)(v44 + 16) = v43;
            *(_QWORD *)(v44 + 24) = 0;
            *(_QWORD *)(v44 + 32) = 0x6000000004;
            *(_DWORD *)(v44 + 40) = 0;
            *(_QWORD *)(v44 + 48) = 0;
            *(_QWORD *)(v44 + 56) = 0;
            *(_DWORD *)(v44 + 64) = 0;
            qword_254106568 = v44;
            v45 = re::introspectionAllocator((re *)v44);
            v47 = re::introspect_int64_t((re *)1, v46);
            v48 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v45 + 32))(v45, 72, 8);
            *(_DWORD *)v48 = 1;
            *(_QWORD *)(v48 + 8) = "type";
            *(_QWORD *)(v48 + 16) = v47;
            *(_QWORD *)(v48 + 24) = 0;
            *(_QWORD *)(v48 + 32) = 0x8000000005;
            *(_DWORD *)(v48 + 40) = 0;
            *(_QWORD *)(v48 + 48) = 0;
            *(_QWORD *)(v48 + 56) = 0;
            *(_DWORD *)(v48 + 64) = 0;
            qword_254106570 = v48;
            v49 = re::introspectionAllocator((re *)v48);
            v51 = re::introspect_int64_t((re *)1, v50);
            v52 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v49 + 32))(v49, 72, 8);
            *(_DWORD *)v52 = 1;
            *(_QWORD *)(v52 + 8) = "semantic";
            *(_QWORD *)(v52 + 16) = v51;
            *(_QWORD *)(v52 + 24) = 0;
            *(_QWORD *)(v52 + 32) = 0x8800000006;
            *(_DWORD *)(v52 + 40) = 0;
            *(_QWORD *)(v52 + 48) = 0;
            *(_QWORD *)(v52 + 56) = 0;
            *(_DWORD *)(v52 + 64) = 0;
            qword_254106578 = v52;
            v53 = re::introspectionAllocator((re *)v52);
            v55 = re::introspect_double((re *)1, v54);
            v56 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v53 + 32))(v53, 72, 8);
            *(_DWORD *)v56 = 1;
            *(_QWORD *)(v56 + 8) = "min";
            *(_QWORD *)(v56 + 16) = v55;
            *(_QWORD *)(v56 + 24) = 0;
            *(_QWORD *)(v56 + 32) = 0x9000000007;
            *(_DWORD *)(v56 + 40) = 0;
            *(_QWORD *)(v56 + 48) = 0;
            *(_QWORD *)(v56 + 56) = 0;
            *(_DWORD *)(v56 + 64) = 0;
            qword_254106580 = v56;
            v57 = re::introspectionAllocator((re *)v56);
            v59 = re::introspect_double((re *)1, v58);
            v60 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v57 + 32))(v57, 72, 8);
            *(_DWORD *)v60 = 1;
            *(_QWORD *)(v60 + 8) = "max";
            *(_QWORD *)(v60 + 16) = v59;
            *(_QWORD *)(v60 + 24) = 0;
            *(_QWORD *)(v60 + 32) = 0x9800000008;
            *(_DWORD *)(v60 + 40) = 0;
            *(_QWORD *)(v60 + 48) = 0;
            *(_QWORD *)(v60 + 56) = 0;
            *(_DWORD *)(v60 + 64) = 0;
            qword_254106588 = v60;
            __cxa_guard_release(&qword_254106470);
          }
        }
        qword_2541066E0 = 0xA000000008;
        v11 = &qword_2541066D0;
        dword_2541066E8 = 8;
        word_2541066EC = 0;
        dword_254106708 = 8;
        *(_QWORD *)&xmmword_254106710 = &qword_254106550;
        *((_QWORD *)&xmmword_254106710 + 1) = re::internal::defaultConstruct<re::ecs2::VFXREBindingDescriptor>;
        qword_254106720 = (uint64_t)re::internal::defaultDestruct<re::ecs2::VFXREBindingDescriptor>;
        *(_QWORD *)&xmmword_254106730 = 0;
        qword_254106728 = 0;
        *((_QWORD *)&xmmword_254106730 + 1) = re::internal::defaultConstructV2<re::ecs2::VFXREBindingDescriptor>;
        qword_254106740 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::VFXREBindingDescriptor>;
        re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541066D0, v13);
        v68 = v66;
        if ((byte_254106463 & 1) == 0)
        {
LABEL_10:
          byte_254106463 = 1;
          v15 = *((_DWORD *)v11 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254106590, 0);
          qword_2541065A0 = 0x2800000003;
          dword_2541065A8 = v15;
          word_2541065AC = 0;
          *(_QWORD *)&xmmword_2541065B0 = 0;
          *((_QWORD *)&xmmword_2541065B0 + 1) = 0xFFFFFFFFLL;
          qword_2541065C0 = (uint64_t)v11;
          qword_2541065C8 = 0;
          qword_254106590 = (uint64_t)&off_24ED46260;
          re::IntrospectionRegistry::add(v16, v17);
          re::getPrettyTypeName((re *)&qword_254106590, (const re::IntrospectionBase *)&v66);
          if ((BYTE8(v66) & 1) != 0)
            v18 = v67;
          else
            v18 = (char *)&v66 + 9;
          if ((_QWORD)v66 && (BYTE8(v66) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v66 + 40))();
          v64 = *((_OWORD *)v11 + 2);
          v19 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v65);
          if (v19)
          {
            v20 = *v19;
            *((_QWORD *)&v63 + 1) = v20;
          }
          else
          {
            v68 = v64;
            re::TypeBuilder::beginListType((uint64_t)&v66, v65, 1, 0x28uLL, 8uLL, &v68);
            re::TypeBuilder::setConstructor((uint64_t)&v66, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v66, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v66, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v66, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v66, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v66, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::VFXREBindingDescriptor>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v66, v21);
          }
          xmmword_2541065B0 = v63;
          re::StringID::destroyString((re::StringID *)v65);
        }
      }
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "m_bindingDescriptors";
      *(_QWORD *)(v22 + 16) = &qword_254106590;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x2000000001;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_254106540 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v25 = re::introspect_AssetHandle((re *)1, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "m_effect";
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x4800000002;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_254106548 = v26;
      __cxa_guard_release(&qword_2541064C8);
    }
  }
  *((_QWORD *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254106538;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VFXSceneMetadataComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VFXSceneMetadataComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VFXSceneMetadataComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VFXSceneMetadataComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v61 = v62;
}

double re::internal::defaultConstruct<re::ecs2::VFXSceneMetadataComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED462F8;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::VFXSceneMetadataComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::VFXSceneMetadataComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED462F8;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 56) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::VFXSceneMetadataComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_VFXSceneMetadataComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VFXSceneMetadataComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VFXSceneMetadataComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VFXSceneMetadataComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VFXSceneMetadataComponent>, this);
}

uint64_t *re::ecs2::allocInfo_VFXSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541064D8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541064D8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254106928, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254106938 = 0;
    qword_254106948 = 0;
    qword_254106950 = 0xFFFFFFFFLL;
    qword_254106928 = (uint64_t)&off_24ED7DAA8;
    qword_254106958 = (uint64_t)"VFXSystem";
    dword_254106960 = 0;
    xmmword_254106968 = 0u;
    xmmword_254106978 = 0u;
    xmmword_254106988 = 0u;
    qword_254106998 = 0;
    __cxa_guard_release(&qword_2541064D8);
  }
  return &qword_254106928;
}

void re::ecs2::initInfo_VFXSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x8911F46A97EELL;
  v5[1] = "VFXSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xF800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_VFXSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VFXSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VFXSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::VFXSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::VFXSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VFXSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VFXSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::VFXSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  *(_QWORD *)(a3 + 240) = 0;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  re::ecs2::System::System(a3, 1, 1);
  *(_QWORD *)(v3 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)v3 = &off_24ED46080;
  *(_WORD *)(v3 + 160) = 0;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_OWORD *)(v3 + 232) = 0u;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::VFXSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 28));
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::VFXSystem>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  re::ecs2::System::System(a1, 1, 1);
  *(_QWORD *)(v1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)v1 = &off_24ED46080;
  *(_WORD *)(v1 + 160) = 0;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 232) = 0u;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::VFXSystem>(_QWORD *a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 28));
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_VFXSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VFXSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VFXSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VFXSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VFXSystem>, this);
}

uint64_t re::ecs2::VFXSystem::onComponentUpdated(re::ecs2::VFXSystem *this, re::NetworkSystem *a2, re::ecs2::Component *a3)
{
  uint64_t v4;
  uint64_t v5;
  __guard *v6;
  unsigned __int8 v7;
  uint64_t v8;
  _QWORD *i;
  _DWORD *v10;
  int v11;
  int v12;
  uint64_t v14;

  v4 = (*(uint64_t (**)(re::ecs2::Component *, re::NetworkSystem *))(*(_QWORD *)a3 + 40))(a3, a2);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  while (1)
  {
    if ((v7 & 1) == 0)
    {
      v14 = v5;
      v12 = v11;
      v5 = v14;
      if (v12)
      {
        re::introspect<re::ecs2::VFXSceneComponent>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"VFXSceneComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VFXSceneComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VFXSceneComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VFXSceneComponent>, 0);
        v5 = v14;
      }
    }
    if (v5 == v6[359])
      break;
    v8 = *(unsigned int *)(v5 + 56);
    if ((_DWORD)v8)
    {
      for (i = *(_QWORD **)(v5 + 64); ; ++i)
      {
        v10 = (_DWORD *)*i;
        if (*(_DWORD *)*i == 1 && v10[10] == 3)
          break;
        if (!--v8)
          return 0;
      }
      v5 = *((_QWORD *)v10 + 2);
      if (v5)
        continue;
    }
    return 0;
  }
  re::ecs2::VFXSceneComponent::invalidateIfNeeded(a3);
  return 0;
}

void re::ecs2::VFXSceneComponent::invalidateIfNeeded(re::ecs2::VFXSceneComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  if (!*((_BYTE *)this + 40))
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
      v3 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    else
      v3 = *((_QWORD *)this + 27);
    v4 = re::AssetHandle::loadedAsset<re::VFXAsset>((re::VFXAsset *)(v3 + 72));
    if (!v4)
    {
      *((_BYTE *)this + 40) = 1;
      return;
    }
    v5 = *((_QWORD *)this + 7);
    if (v5 && (v6 = *(void **)(v4 + 64)) != 0)
    {
      v7 = objc_msgSend(v6, "uuid");
      *((_BYTE *)this + 40) = v5 != v7;
      if (v5 == v7)
        return;
    }
    else
    {
      *((_BYTE *)this + 40) = 1;
    }
    v8 = *((_QWORD *)this + 4);
    if (v8)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v8 + 24));
      *(_BYTE *)(v8 + 8) = 1;
      os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 24));
      *((_QWORD *)this + 4) = 0;
    }
  }
}

void re::ecs2::VFXSystem::willAddSystemToECSService(re::ecs2::VFXSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 21) = re::ServiceLocator::serviceOrNull<re::ecs2::ClippingService>(v2);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 22) = re::ServiceLocator::serviceOrNull<re::ecs2::OpacityService>(v3);
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 23) = re::ServiceLocator::serviceOrNull<re::ecs2::ImageBasedLightService>(v4);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 24) = re::ServiceLocator::serviceOrNull<re::ecs2::VisualProxyScopeService>(v5);
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 25) = re::ServiceLocator::serviceOrNull<re::ecs2::RenderPassGroupService>(v6);
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 26) = re::ServiceLocator::serviceOrNull<re::ecs2::LightService>(v7);
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 27) = re::ServiceLocator::serviceOrNull<re::ecs2::BillboardService>(v8);
  (*(void (**)(__int128 *__return_ptr, _QWORD, const char *))(**((_QWORD **)this + 15) + 8))(&v15, *((_QWORD *)this + 15), "engine:blueNoise64RGBA8.ktx");
  v9 = *((_OWORD *)this + 14);
  *((_OWORD *)this + 14) = v15;
  v15 = v9;
  v10 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = v16;
  v16 = v10;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v15);
  v11 = *((_QWORD *)this + 29);
  if (!v11 || (v12 = atomic_load((unsigned int *)(v11 + 704)), v12 != 2))
    re::AssetHandle::loadAsync((re::ecs2::VFXSystem *)((char *)this + 224));
  v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  v14 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v13);
  if (v14)
  {
    if (!*((_BYTE *)this + 160))
    {
      *(_QWORD *)&v15 = this;
      *((_QWORD *)&v15 + 1) = re::ecs2::VFXSystem::onComponentUpdated;
      v16 = 0;
      v17 = re::Event<re::NetworkSystem,re::ecs2::Component *>::createSubscription<re::ecs2::VFXSystem>(re::ecs2::VFXSystem *,REEventHandlerResult (re::ecs2::VFXSystem::*)(re::NetworkSystem*,re::ecs2::Component *))::{lambda(re::NetworkSystem*,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription const&,re::ecs2::Component *&&)#1}::__invoke;
      re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v14 + 352), (uint64_t)&v15);
      *((_BYTE *)this + 160) = 1;
    }
  }
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::ClippingService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ecs2::ClippingService>(void)::info = re::ecs2::introspect_ClippingService(0);
  }
  v3 = re::introspect<re::ecs2::ClippingService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::OpacityService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ecs2::OpacityService>(void)::info = re::ecs2::introspect_OpacityService(0);
  }
  v3 = re::introspect<re::ecs2::OpacityService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::ImageBasedLightService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ecs2::ImageBasedLightService>(void)::info = re::ecs2::introspect_ImageBasedLightService(0);
  }
  v3 = re::introspect<re::ecs2::ImageBasedLightService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::VisualProxyScopeService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ecs2::VisualProxyScopeService>(void)::info = re::ecs2::introspect_VisualProxyScopeService(0);
  }
  v3 = re::introspect<re::ecs2::VisualProxyScopeService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::RenderPassGroupService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ecs2::RenderPassGroupService>(void)::info = re::ecs2::introspect_RenderPassGroupService(0);
  }
  v3 = re::introspect<re::ecs2::RenderPassGroupService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::LightService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ecs2::LightService>(void)::info = re::ecs2::introspect_LightService(0);
  }
  v3 = re::introspect<re::ecs2::LightService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

uint64_t re::ServiceLocator::serviceOrNull<re::NetworkSystem>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::NetworkSystem>(void)::info = re::introspect_NetworkSystem(0);
  }
  v3 = re::introspect<re::NetworkSystem>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

double re::ecs2::VFXSystem::willRemoveSystemFromECSService(re::ecs2::VFXSystem *this)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __int128 v9;
  double result;
  _BYTE v11[24];
  __int128 v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  v2 = *((_OWORD *)this + 14);
  v3 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 28) = 0;
  *(_OWORD *)v11 = v2;
  *(_QWORD *)&v11[16] = v3;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v11);
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  v5 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v4);
  if (v5)
  {
    if (*((_BYTE *)this + 160))
    {
      v6 = v5;
      if (*(_QWORD *)(v5 + 368))
      {
        v7 = 0;
        do
        {
          v8 = (_OWORD *)(*(_QWORD *)(v6 + 384) + 32 * v7);
          if (*(re::ecs2::VFXSystem **)v8 == this)
          {
            if (!*(_DWORD *)(v6 + 432))
            {
              re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((_QWORD *)(v6 + 352), v7);
              continue;
            }
            v11[0] = 0;
            v9 = v8[1];
            *(_OWORD *)&v11[8] = *v8;
            v12 = v9;
            re::DynamicArray<re::Pair<BOOL,re::Event<re::NetworkSystem,re::ecs2::Component *>::Subscription,true>>::add((_anonymous_namespace_ *)(v6 + 392), (uint64_t)v11);
          }
          ++v7;
        }
        while (v7 < *(_QWORD *)(v6 + 368));
      }
    }
  }
  *((_QWORD *)this + 19) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void re::ecs2::VFXSystem::updateScenes(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  re::MaterialManager *v9;
  uint64_t v10;
  _QWORD *TextureTableForName;
  uint64_t v12;
  re::ecs2::RenderingSubsystem **v13;
  uint64_t v14;
  float32x2_t v20;
  float32x2_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  re::ecs2::SceneComponentTable *v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  re::ProfilerConfig *v30;
  unint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  re *isStatisticCollectionEnabled;
  uint64_t v41;
  re::ProfilerConfig *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int64x2_t *v47;
  unint64_t v48;
  unint64_t v49;
  int64x2_t v50;
  re::RenderManager *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  signed int v58;
  _anonymous_namespace_ *v59;
  _anonymous_namespace_ *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  id v64;
  _anonymous_namespace_ *v65;
  int v66;
  uint64_t v67;
  int *v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  int v76;
  int v77;
  uint64_t v78;
  int *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  re *v88;
  uint64_t v89;
  re *v90;
  re *VFXRESceneClass;
  objc_class *v92;
  Class VFXSceneLoadOptionsClass;
  objc_class *v94;
  re::VFXAsset *v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  dispatch_queue_t *v99;
  void *v100;
  NSObject *v101;
  NSObject *v102;
  id v103;
  void *v104;
  id v105;
  __int128 v106;
  id v107;
  uint64_t v108;
  re::ecs2::Entity *v109;
  re::RenderManager ***v110;
  re::RenderManager **v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  _OWORD *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  re::Allocator *v123;
  __n128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int *v129;
  int v130;
  int32x4_t v131;
  __int128 v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned __int8 v138;
  re::ecs2::Entity *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  __int16 v145;
  __int32 v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  BOOL v151;
  id v152;
  void *v153;
  BOOL v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  id v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  const re::ecs2::Component *v163;
  uint64_t v164;
  NSObject *v165;
  void *v166;
  re::ecs2::NetworkComponent *v167;
  float v168;
  int v169;
  float v170;
  float v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int *v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  float32x4_t *v185;
  uint64_t v186;
  id v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  float32x4_t *v192;
  float32x4_t v193;
  int8x16_t v194;
  float v195;
  int8x16_t v196;
  float32x2_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float v200;
  float32x4_t v201;
  _BOOL4 v202;
  float v203;
  float32x4_t v204;
  _BOOL4 v205;
  float v206;
  _BOOL4 v207;
  uint64_t v208;
  float32x4_t v209;
  float v210;
  float v211;
  __float2 v212;
  float v213;
  float v214;
  float v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  float v219;
  int v220;
  int v221;
  float v222;
  float v223;
  float v224;
  float v225;
  float v226;
  __float2 v227;
  float v228;
  float v229;
  unsigned int v230;
  float v231;
  unsigned int v232;
  unsigned int v233;
  int32x4_t v234;
  unint64_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  id v240;
  double v241;
  double v242;
  double v243;
  uint32x4_t v244;
  uint64_t v245;
  id v246;
  id v247;
  __int128 v248;
  __int128 v249;
  const char *v250;
  char v251;
  unsigned int v252;
  uint64_t v253;
  int *v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  unsigned int v258;
  uint64_t v259;
  uint64_t v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  uint64_t v264;
  int *v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  unsigned int v269;
  uint64_t v270;
  uint64_t v271;
  unsigned int v272;
  unsigned int v273;
  uint64_t v274;
  int64x2_t *v275;
  uint64_t v276;
  uint64_t v277;
  int64x2_t v278;
  _Unwind_Exception *v279;
  float32x4_t v280;
  uint64_t v281;
  uint64_t v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float32x4_t v288;
  int64x2_t v289;
  uint64_t v290;
  uint64_t v291;
  int8x16_t v292;
  int8x16_t v293;
  float32x4_t v294;
  int8x16_t v295;
  uint64_t v296;
  re::ecs2::RenderingSubsystem **v297;
  _anonymous_namespace_ *v298;
  uint64_t v299;
  int32x4_t v300;
  uint64_t v301;
  uint64_t v302;
  int v303;
  _QWORD *v304;
  int v305;
  re::ecs2::TransformHelper *v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t *v309;
  void *v310;
  re::RenderFrame *v311;
  uint64_t v312;
  id v313;
  re::ecs2::RenderingSubsystem *v314;
  uint64_t v315;
  float32x4_t *v316[3];
  float32x4_t *v317;
  _QWORD v318[2];
  char v319;
  _QWORD v320[6];
  BOOL v321;
  char v322;
  re::ecs2::Entity *v323;
  __int128 v324;
  __int128 v325;
  unsigned int v326;
  uint64_t v327;
  __int128 v328;
  __int128 v329;
  unsigned int v330;
  uint64_t v331;
  _BYTE v332[16];
  char v333;
  uint64_t v334;
  _QWORD v335[2];
  uint64_t v336;
  int v337;
  uint64_t *v338;
  char v339;
  uint64_t v340;
  _OWORD v341[2];
  __int128 v342;
  _OWORD v343[4];
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  _OWORD v348[4];
  id location[2];
  float32x4_t v350;
  float32x4_t v351;
  float32x4_t v352;
  int32x4_t v353;
  int32x4_t v354;
  int32x4_t v355;
  int32x4_t v356;
  int32x4_t v357;
  int32x4_t v358;
  int32x4_t v359;
  int32x4_t v360;
  int32x4_t v361;
  int32x4_t v362;
  int32x4_t v363;
  int32x4_t v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  int v369;
  char v370;
  uint64_t v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  char v381;
  __int128 v382;
  __int128 v383;
  uint64_t v384;
  char v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  uint64_t v390;
  uint64_t v391;
  id v392;
  int32x4_t v393;
  __int128 v394;
  __int128 v395;
  __int128 v396;
  int32x4_t v397;
  __int128 v398;
  int v399;
  int v400;
  int v401;
  uint64_t v402;
  char v403;
  __int16 v404;
  char v405;
  int32x4_t v406[17];
  __int128 v407;
  __int128 v408;
  __int128 v409;
  __int128 v410;
  int v411;
  char v412;
  uint64_t v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  __int128 v417;
  __int128 v418;
  __int128 v419;
  __int128 v420;
  __int128 v421;
  __int128 v422;
  char v423;
  __int128 v424;
  __int128 v425;
  uint64_t v426;
  char v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  uint64_t v432;
  _OWORD v433[2];
  void *v434;
  re::ecs2::Entity *v435;
  __int128 v436;
  __int128 v437;
  char v438;
  __int128 v439;
  __int128 v440;
  __int128 v441;
  __int128 v442;
  __int128 v443;
  __int128 v444;
  __int128 v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  int32x4_t *v450;
  uint64_t v451;
  __int128 *v452;
  int v453;
  uint64_t v454;
  uint64_t v455;
  int v456;
  __int16 v457;
  uint64_t v458;
  _QWORD *v459;
  uint64_t v460;
  int v461;
  uint64_t v462;
  char v463;
  char v464;
  __int128 *v465;
  int v466;
  char v467;
  char v468;
  BOOL v469;
  _BYTE v470[7];
  __int16 v471;
  __int128 *v472;
  __n128 v473;
  __int128 v474;
  _BYTE v475[12];
  __int128 v476;
  __int128 v477;
  __int128 v478;
  __int128 v479;
  __int128 v480;
  __int128 v481;
  __int128 v482;
  __int128 v483;
  char v484;
  __int128 v485;
  __int128 v486;
  __int128 v487;
  __int128 v488;
  __int128 v489;
  __int128 v490;
  __int128 v491;
  _QWORD v492[4];
  char v493;
  char v494;
  __int128 v495;
  uint64_t v496;
  uint64_t v497;
  int v498;
  __int128 v499;
  _BYTE v500[19];
  unint64_t v501;
  int32x4_t v502;
  __int128 v503;
  uint64_t v504;
  char v505;
  uint64_t v506;
  char v507;
  uint64_t v508;
  uint64_t v509;
  void *v510;
  int32x4_t v511;
  __int128 v512;
  __int128 v513;
  __int128 v514;
  int32x4_t v515;
  __int128 v516;
  unint64_t v517;
  int v518;
  uint64_t v519;
  int v520;
  uint64_t v521;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v521 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(v1 + 104))
  {
    v4 = v3;
    v5 = v2;
    v6 = v1;
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 40) + 168))(*(_QWORD *)(v1 + 40)) & 1) == 0
      && (*(_BYTE *)(*(_QWORD *)(v6 + 104) + 424) & 0x10) != 0)
    {
      v7 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)(v6 + 224));
      if (v7)
      {
        v8 = v7;
        v9 = *(re::MaterialManager **)(*(_QWORD *)(v6 + 112) + 24);
        if (!re::MaterialManager::findTextureTableByName(v9, "VFXTextureTable"))
        {
          TextureTableForName = (_QWORD *)re::MaterialManager::createTextureTableForName(v9, "VFXTextureTable");
          v473.n128_u64[0] = 0xC10C601B47401E3;
          if (*(_DWORD *)(v8 + 240))
          {
            v279 = (_Unwind_Exception *)std::__throw_bad_variant_access[abi:nn180100]();
            _Unwind_Resume(v279);
          }
          re::TextureTable::setTexture(TextureTableForName, (uint64_t *)&v473, (id *)(v8 + 160));
        }
        if (!*(_QWORD *)(v6 + 112))
          goto LABEL_387;
        v12 = *(_QWORD *)(v5 + 8);
        if (v12)
        {
          v13 = *(re::ecs2::RenderingSubsystem ***)v5;
          v299 = *(_QWORD *)v5 + 8 * v12;
          v289 = vdupq_n_s64(1uLL);
          v300 = vdupq_n_s32(0x7F800000u);
          v14 = 0x10100010001;
          __asm { FMOV            V10.2S, #1.0 }
          v20 = vrsqrte_f32((float32x2_t)1065353216);
          v21 = vmul_f32(v20, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v20, v20)));
          LODWORD(v283) = vmul_f32(v21, vrsqrts_f32((float32x2_t)1065353216, vmul_f32(v21, v21))).u32[0];
          v288 = vmulq_n_f32((float32x4_t)xmmword_2260E5F10, v283);
          v284 = vmuls_lane_f32(v288.f32[1], v288, 2);
          v285 = vmuls_lane_f32(v288.f32[2], v288, 2);
          v22 = 1.0;
          LODWORD(v287) = vmulq_f32(v288, v288).u32[0];
          v286 = vmuls_lane_f32(v288.f32[1], *(float32x2_t *)v288.f32, 1);
          v308 = v6;
          do
          {
            v314 = *v13;
            if (*v13)
            {
              v339 = 0;
              v23 = *(_QWORD *)(v6 + 144);
              if (v23)
              {
                v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
                v25 = 1;
                v339 = 1;
                v340 = v24;
                v334 = v24;
              }
              else
              {
                v25 = 0;
              }
              v333 = v25;
              v338 = 0;
              v336 = 0;
              v335[0] = 0;
              v335[1] = 0;
              v337 = 0;
              v26 = (re::ecs2::RenderingSubsystem *)((char *)v314 + 200);
              v27 = re::ecs2::SceneComponentTable::get((re::ecs2::RenderingSubsystem *)((char *)v314 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              if (v27)
              {
                v28 = *(unint64_t **)(v27 + 40);
                v29 = *(_QWORD *)(v27 + 24);
              }
              else
              {
                v28 = 0;
                v29 = 0;
              }
              v30 = (re::ProfilerConfig *)re::ecs2::SceneComponentTable::get(v26, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXEmitterComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
              if (v30)
              {
                v31 = (unint64_t *)*((_QWORD *)v30 + 5);
                v32 = *((_QWORD *)v30 + 3);
              }
              else
              {
                v31 = 0;
                v32 = 0;
              }
              v33 = v32 + v29;
              if (v32 + v29)
                v30 = (re::ProfilerConfig *)re::DynamicArray<std::pair<re::ecs2::Component *,re::ecs2::VFXSceneComponent *>>::setCapacity(v335, v33);
              if (v29)
              {
                v34 = 8 * v29;
                do
                {
                  v35 = *v28;
                  if (*v28)
                  {
                    if (!v333
                      || (v30 = (re::ProfilerConfig *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v334, *(_QWORD *)(v35 + 16)), *(_BYTE *)v30))
                    {
                      v473.n128_u64[0] = v35;
                      v473.n128_u64[1] = v35;
                      re::DynamicArray<std::pair<re::ecs2::Component *,re::ecs2::VFXSceneComponent *>>::add((uint64_t)v335, &v473);
                    }
                  }
                  ++v28;
                  v34 -= 8;
                }
                while (v34);
              }
              if (v32)
              {
                v36 = 8 * v32;
                do
                {
                  v37 = *v31;
                  if (*v31)
                  {
                    if (!v333
                      || (v30 = (re::ProfilerConfig *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v334, *(_QWORD *)(v37 + 16)), *(_BYTE *)v30))
                    {
                      v38 = *(_QWORD *)(v37 + 32);
                      v473.n128_u64[0] = v37;
                      v473.n128_u64[1] = v38;
                      re::DynamicArray<std::pair<re::ecs2::Component *,re::ecs2::VFXSceneComponent *>>::add((uint64_t)v335, &v473);
                    }
                  }
                  ++v31;
                  v36 -= 8;
                }
                while (v36);
              }
              v39 = v336;
              if (v336)
              {
                if (!*(_QWORD *)(v6 + 112))
                  goto LABEL_386;
                isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(v30);
                if ((_DWORD)isStatisticCollectionEnabled)
                {
                  v41 = re::profilerThreadContext(isStatisticCollectionEnabled);
                  if (*(_QWORD *)(v41 + 152))
                    v290 = mach_absolute_time();
                }
                else
                {
                  v41 = 0;
                }
                v296 = v41;
                re::ecs2::SceneComponentTable::get(v26, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                v42 = re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v332, 3103, v6);
                v43 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(v42);
                if ((_DWORD)v43)
                {
                  v44 = re::profilerThreadContext(v43);
                  v45 = re::ecs2::SceneComponentTable::get(v26, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                  v46 = v45 ? *(_QWORD *)(v45 + 24) : 0;
                  v47 = *(int64x2_t **)(v44 + 152);
                  if (v47)
                  {
                    v48 = v47[600].u64[0];
                    if (v48 >= v46)
                      v48 = v46;
                    v47[600].i64[0] = v48;
                    v49 = v47[600].u64[1];
                    if (v49 <= v46)
                      v49 = v46;
                    v47[600].i64[1] = v49;
                    v50.i64[1] = v289.i64[1];
                    v50.i64[0] = v46;
                    v47[601] = vaddq_s64(v47[601], v50);
                    *(_BYTE *)(v44 + 184) = 0;
                  }
                }
                v51 = *(re::RenderManager **)(v6 + 112);
                v52 = *((_QWORD *)v51 + 13);
                if (v52)
                {
                  v52 = re::RenderFrameBox::get(v52 + 344, 0xFFFFFFFFFFFFFFFuLL);
                  v51 = *(re::RenderManager **)(v6 + 112);
                }
                v311 = (re::RenderFrame *)v52;
                v297 = v13;
                v53 = *((_QWORD *)v51 + 10);
                if (*(_BYTE *)(v53 + 18))
                {
                  *(_QWORD *)(v53 + 96) = 0;
                  ++*(_DWORD *)(v53 + 104);
                }
                *(_BYTE *)(v53 + 18) = 0;
                v54 = re::RenderManager::perFrameAllocator(v51);
                v55 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 136) + 24))(*(_QWORD *)(v6 + 136));
                v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v55 + 16))(v55);
                v57 = *(_DWORD *)(v56 + 124);
                if (!v57)
                  v57 = *(_DWORD *)(v56 + 16);
                v58 = v57 + 1;
                v330 = 0;
                v328 = 0u;
                v329 = 0u;
                v331 = 0x7FFFFFFFLL;
                v310 = (void *)v54;
                re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)&v328, v54, v57 + 1);
                v326 = 0;
                v324 = 0u;
                v325 = 0u;
                v327 = 0x7FFFFFFFLL;
                *(_DWORD *)v475 = 0;
                v474 = 0u;
                v473 = 0u;
                *(_QWORD *)&v475[4] = 0x7FFFFFFFLL;
                v61 = 0;
                v62 = v338;
                do
                {
                  v63 = v62[v61];
                  v406[0].i64[0] = 0;
                  (*(void (**)(id *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v55 + 8))(location, v55, *(_QWORD *)(v63 + 16));
                  if (LOBYTE(location[0]))
                    v64 = location[1];
                  else
                    v64 = 0;
                  v406[0].i64[0] = (uint64_t)v64;
                  LODWORD(location[0]) = 0;
                  v65 = (_anonymous_namespace_ *)re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<int>((uint64_t)&v473, v406[0].i64, (int *)location);
                  ++*(_QWORD *)v65;
                  v61 += 2;
                }
                while (2 * v39 != v61);
                v312 = v55;
                v66 = *(_DWORD *)v475;
                if (*(_DWORD *)v475)
                {
                  v67 = 0;
                  v68 = (int *)(v474 + 8);
                  while (1)
                  {
                    v69 = *v68;
                    v68 += 8;
                    if (v69 < 0)
                      break;
                    if (*(unsigned int *)v475 == ++v67)
                    {
                      LODWORD(v67) = *(_DWORD *)v475;
                      break;
                    }
                  }
                }
                else
                {
                  LODWORD(v67) = 0;
                }
                v70 = *(_DWORD *)v475;
                if (*(_DWORD *)v475 != (_DWORD)v67)
                {
                  v71 = v67;
                  v72 = v474;
                  do
                  {
                    v73 = v72 + 32 * v71;
                    v74 = *(_QWORD *)(v73 + 24);
                    v75 = (uint64_t *)(v73 + 16);
                    location[1] = 0;
                    v350.i64[0] = 0;
                    v350.i32[2] = 0;
                    v351.i64[0] = 0;
                    location[0] = v310;
                    re::DynamicArray<re::VFXScene>::setCapacity(location, v74);
                    ++v350.i32[2];
                    re::HashTable<unsigned long long,re::ecs2::VFXSystem::updateSceneForRenderInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add((uint64_t)&v328, v75, (uint64_t)location);
                    v65 = (_anonymous_namespace_ *)re::DynamicArray<re::VFXScene>::deinit((uint64_t)location);
                    v70 = *(_DWORD *)v475;
                    v72 = v474;
                    if (*(_DWORD *)v475 <= (v67 + 1))
                      v76 = v67 + 1;
                    else
                      v76 = *(_DWORD *)v475;
                    v77 = v67;
                    while (1)
                    {
                      v71 = (v77 + 1);
                      if (v76 - 1 == v77)
                        break;
                      ++v77;
                      LODWORD(v67) = v71;
                      if ((*(_DWORD *)(v474 + 32 * v71 + 8) & 0x80000000) != 0)
                        goto LABEL_80;
                    }
                    LODWORD(v67) = v76;
LABEL_80:
                    ;
                  }
                  while (v66 != (_DWORD)v67);
                }
                v78 = 0;
                if (v70)
                {
                  v79 = (int *)(v474 + 8);
                  while (1)
                  {
                    v80 = *v79;
                    v79 += 8;
                    if (v80 < 0)
                      break;
                    if (v70 == ++v78)
                    {
                      LODWORD(v78) = v70;
                      break;
                    }
                  }
                }
                if (v70 != (_DWORD)v78)
                {
                  v81 = v78;
                  v82 = v474;
                  do
                  {
                    v83 = (uint64_t *)(v82 + 32 * v81 + 16);
                    v351.i32[0] = 0;
                    v350 = 0u;
                    *(_OWORD *)location = 0u;
                    *(uint64_t *)((char *)v351.i64 + 4) = 0x7FFFFFFFLL;
                    re::HashTable<unsigned long long,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add((uint64_t)&v324, v83, (uint64_t *)location);
                    re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)location);
                    v82 = v474;
                    if (*(_DWORD *)v475 <= (v78 + 1))
                      v84 = v78 + 1;
                    else
                      v84 = *(_DWORD *)v475;
                    v85 = v78;
                    while (1)
                    {
                      v81 = (v85 + 1);
                      if (v84 - 1 == v85)
                        break;
                      ++v85;
                      LODWORD(v78) = v81;
                      if ((*(_DWORD *)(v474 + 32 * v81 + 8) & 0x80000000) != 0)
                        goto LABEL_96;
                    }
                    LODWORD(v78) = v84;
LABEL_96:
                    ;
                  }
                  while (v70 != (_DWORD)v78);
                  v62 = v338;
                  v39 = v336;
                }
                re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v473);
                if (v39)
                {
                  v309 = &v62[2 * v39];
                  v298 = (_anonymous_namespace_ *)(v53 + 80);
                  while (2)
                  {
                    v86 = v62[1];
                    if (!*(_BYTE *)(v86 + 213))
                      goto LABEL_247;
                    v315 = *v62;
                    v87 = *(_QWORD *)(v6 + 112);
                    re::ecs2::VFXSceneComponent::invalidateIfNeeded((re::ecs2::VFXSceneComponent *)v86);
                    v89 = *(_QWORD *)(v86 + 16);
                    if (v89)
                    {
                      v88 = (re *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v89 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                      v90 = v88;
                    }
                    else
                    {
                      v90 = *(re **)(v86 + 216);
                    }
                    if (!*((_QWORD *)v90 + 10) && *(_BYTE *)(v86 + 40))
                      goto LABEL_123;
                    VFXRESceneClass = re::getVFXRESceneClass(v88);
                    if (VFXRESceneClass)
                    {
                      v92 = VFXRESceneClass;
                      VFXSceneLoadOptionsClass = re::getVFXSceneLoadOptionsClass(VFXRESceneClass);
                      if (VFXSceneLoadOptionsClass)
                      {
                        v94 = VFXSceneLoadOptionsClass;
                        v95 = (re *)((char *)v90 + 72);
                        v96 = re::AssetHandle::loadedAsset<re::VFXAsset>(v95);
                        if (v96)
                        {
                          if (*(_BYTE *)(v86 + 40))
                          {
                            v97 = v96;
                            v98 = objc_retainAutorelease(*(id *)(v96 + 64));
                            if (v98)
                            {
                              if (*(_QWORD *)(v86 + 48))
                              {
                                re::ObjCObject::operator=((void **)(v86 + 48), 0);
                                *(_DWORD *)(v86 + 236) = 0;
                              }
                              v99 = *(dispatch_queue_t **)(v87 + 80);
                              v100 = *(void **)(v97 + 64);
                              if (v100)
                                v100 = (void *)objc_msgSend(v100, "uuid");
                              *(_QWORD *)(v86 + 56) = v100;
                              if (*((_BYTE *)v99 + 17))
                              {
                                objc_initWeak(location, (id)(v86 + 8));
                                v406[0].i64[0] = (uint64_t)v98;
                                v473.n128_u64[0] = MEMORY[0x24BDAC760];
                                v473.n128_u64[1] = 3321888768;
                                *(_QWORD *)&v474 = ___ZN2re4ecs217VFXSceneComponent12loadIfNeededERNS_13RenderManagerERNS_12AssetServiceE_block_invoke;
                                *((_QWORD *)&v474 + 1) = &__block_descriptor_40_a8_32c51_ZTSN2re10ArcWeakPtrINS_4ecs217VFXSceneComponentEEE_e62_v16__0__VFXLoadTask____B___UnfairLock__os_unfair_lock_s_I__B_8l;
                                *(_QWORD *)v475 = 0;
                                objc_copyWeak((id *)v475, location);
                                *(_QWORD *)(v86 + 32) = re::VFXManager::makeScheduledLoadRuntimeTask(v99, (id *)v406, &v473);

                                objc_destroyWeak((id *)v475);
                                *(_QWORD *)v475 = 0;
                                objc_destroyWeak(location);
                                goto LABEL_128;
                              }
                              v103 = objc_alloc_init(v94);
                              objc_msgSend(v103, "setEnableRuntimeScriptCompilation:", *((unsigned __int8 *)v99 + 16));
                              v104 = (void *)objc_msgSend([v92 alloc], "initWithCommandQueue:model:options:", *v99, v98, v103);
                              if (v104)
                              {
                                v105 = v104;
                                location[0] = v105;
                                re::ecs2::VFXSceneComponent::setRuntimeScene(v86, location);

LABEL_128:
                                *(_BYTE *)(v86 + 40) = 0;
                              }
                              else
                              {
                                v165 = *re::ecsComponentsLogObjects(0);
                                if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR))
                                {
                                  LOWORD(location[0]) = 0;
                                  _os_log_error_impl(&dword_224FE9000, v165, OS_LOG_TYPE_ERROR, "Unable to instanciate VFX runtime", (uint8_t *)location, 2u);
                                }

                              }
                            }
                            else
                            {
                              v102 = *re::ecsComponentsLogObjects(0);
                              if (os_log_type_enabled(v102, OS_LOG_TYPE_ERROR))
                              {
                                LOWORD(location[0]) = 0;
                                _os_log_error_impl(&dword_224FE9000, v102, OS_LOG_TYPE_ERROR, "VFX effect model scene is not loaded", (uint8_t *)location, 2u);
                              }
                            }

                            v6 = v308;
                          }
LABEL_130:
                          if (!*(_QWORD *)(v86 + 32))
                          {
                            v323 = *(re::ecs2::Entity **)(v315 + 16);
                            v313 = objc_retainAutorelease(*(id *)(v86 + 48));
                            if (v313)
                            {
                              v493 = 0;
                              v494 = 0;
                              v495 = 0u;
                              v473 = 0u;
                              v474 = 0u;
                              *(_QWORD *)v475 = 0;
                              v476 = 0u;
                              v477 = 0u;
                              v478 = 0u;
                              v479 = 0u;
                              v480 = 0u;
                              v481 = 0u;
                              v482 = 0u;
                              v483 = 0u;
                              v484 = 0;
                              v485 = 0u;
                              v486 = 0u;
                              v487 = 0u;
                              v488 = 0u;
                              v489 = 0u;
                              v490 = 0u;
                              v491 = 0u;
                              memset(v492, 0, 28);
                              if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
                                dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
                              v496 = re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash;
                              v497 = _D10;
                              v498 = 1065353216;
                              v499 = 0u;
                              memset(v500, 0, sizeof(v500));
                              v501 = 0xFFFFFFFF00000001;
                              v502 = v300;
                              *(_QWORD *)&v106 = 0x7F0000007FLL;
                              *((_QWORD *)&v106 + 1) = 0x7F0000007FLL;
                              v503 = v106;
                              v504 = 0;
                              v505 = 0;
                              v506 = 0;
                              v507 = 0;
                              v508 = v14;
                              v509 = 0;
                              v510 = 0;
                              v511.i64[0] = 0x3F8000003F800000;
                              v511.i64[1] = 1065353216;
                              *((_QWORD *)&v512 + 1) = 0x3F80000000000000;
                              *(_QWORD *)&v512 = 0;
                              v513 = 0u;
                              *(_QWORD *)&v514 = 0x3F8000003F800000;
                              *((_QWORD *)&v514 + 1) = 1065353216;
                              v515.i64[1] = 0x3F80000000000000;
                              v515.i64[0] = 0;
                              v516 = 0u;
                              v517 = 0xBF8000003F800000;
                              v518 = 1065353216;
                              v519 = 0;
                              v520 = 1;
                              *(_QWORD *)&v500[8] = *((_QWORD *)v323 + 37);
                              v107 = (id)(v315 + 8);
                              v108 = v509;
                              v509 = v315;
                              if (v108)

                              re::ObjCObject::operator=(&v510, v313);
                              v109 = v323;
                              v110 = *(re::RenderManager ****)(v308 + 112);
                              location[0] = 0;
                              LODWORD(location[1]) = 0;
                              v111 = v110[3];
                              v406[0].i64[0] = *((_QWORD *)v323 + 37);
                              if (re::HashTable<unsigned long long,unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::containsKey((uint64_t)(v111 + 129), v406[0].i64))
                              {
                                v112 = re::MaterialManager::getOrAddSystemMaterialParameterBlock(v110[3], *((_QWORD *)v109 + 37));
                                if (re::DynamicInlineArray<__CVBuffer *,2ul>::ensureCapacity(location, v113))
                                {
                                  v114 = (char *)location[0];
                                  v350.i64[(uint64_t)location[0]] = v112;
                                  location[0] = v114 + 1;
                                  ++LODWORD(location[1]);
                                }
                              }
                              v115 = *(_QWORD *)(v308 + 184);
                              if (v115)
                              {
                                v116 = (_OWORD *)(*(uint64_t (**)(_QWORD, re::ecs2::RenderingSubsystem *))(*(_QWORD *)v115 + 24))(*(_QWORD *)(v308 + 184), v314);
                              }
                              else
                              {
                                v342 = 0u;
                                memset(v341, 0, sizeof(v341));
                                v116 = v341;
                                DWORD1(v342) = 0x7FFFFFFF;
                              }
                              v406[0].i64[0] = (uint64_t)v109;
                              v117 = re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)v116, v406[0].i64);
                              if (v117)
                              {
                                v118 = re::ecs2::EntityHandle::resolve((id *)(*(_QWORD *)v117 + 32), (uint64_t)v314);
                                if (v118)
                                {
                                  v119 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v118 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                                  if (v119)
                                  {
                                    v121 = v119;
                                    if (*(_BYTE *)(v119 + 152))
                                    {
                                      if (re::DynamicInlineArray<__CVBuffer *,2ul>::ensureCapacity(location, v120))
                                      {
                                        v122 = (char *)location[0];
                                        v350.i64[(uint64_t)location[0]] = v121 + 160;
                                        location[0] = v122 + 1;
                                        ++LODWORD(location[1]);
                                      }
                                    }
                                  }
                                }
                              }
                              v123 = (re::Allocator *)re::RenderManager::perFrameAllocator((re::RenderManager *)v110);
                              if (location[0])
                              {
                                if (location[0] == (id)1)
                                  v125 = re::MaterialParameterBlock::deltaSynchronizedMaterialParameterTable((re::MaterialParameterBlock *)v350.i64[0], v123);
                                else
                                  v125 = (uint64_t)re::MaterialParameterBlock::copyParametersFromArray(v123, &v350, (uint64_t)location[0]);
                                v126 = v125;
                                if (!v115)
LABEL_155:
                                  v124.n128_f64[0] = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v341);
                              }
                              else
                              {
                                v126 = 0;
                                if (!v115)
                                  goto LABEL_155;
                              }
                              *(_QWORD *)&v489 = v126;
                              v127 = *(_QWORD *)(v308 + 192);
                              location[0] = v323;
                              if (v127
                                && (v128 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v127 + 16))(v127, v124), (v129 = (int *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v128, (uint64_t *)location)) != 0))
                              {
                                v130 = *v129;
                              }
                              else
                              {
                                v130 = 1;
                              }
                              LODWORD(v501) = v130;
                              objc_msgSend(v313, "worldBoundingBox");
                              v502 = v131;
                              v503 = v132;
                              *(_OWORD *)location = xmmword_2260E5F10;
                              v350 = (float32x4_t)xmmword_2260E5F20;
                              v351 = (float32x4_t)xmmword_2260E5F40;
                              v352 = (float32x4_t)xmmword_2260E5D70;
                              v133 = re::ecs2::MeshComponentHelper::clippingDataForMeshScene((uint64_t)v323, (const re::ecs2::MeshComponent *)&v502, (float32x4_t *)location, *(_QWORD *)(v308 + 168));
                              HIBYTE(v520) = BYTE5(v133) & 1;
                              LODWORD(v492[3]) = v133;
                              v134 = *(_QWORD *)(v308 + 176);
                              if (v134)
                              {
                                v135 = (*(uint64_t (**)(uint64_t, re::ecs2::Entity *))(*(_QWORD *)v134 + 24))(v134, v323);
                                v137 = v136;
                              }
                              else
                              {
                                v137 = 0;
                                v135 = 1065353216;
                              }
                              LODWORD(v497) = v135;
                              v138 = atomic_load((unsigned __int8 *)&qword_2541064E0);
                              if ((v138 & 1) == 0)
                              {
                                v135 = __cxa_guard_acquire(&qword_2541064E0);
                                if ((_DWORD)v135)
                                {
                                  re::Defaults::BOOLValue((re::Defaults *)"disableFadeTechniqueMappingOverride", v250, (char *)location);
                                  if (LOBYTE(location[0]))
                                    v251 = BYTE1(location[0]) ^ 1;
                                  else
                                    v251 = 1;
                                  byte_254106461 = v251;
                                  __cxa_guard_release(&qword_2541064E0);
                                }
                              }
                              if (byte_254106461 && (re::useDitherFade((re *)v135) & 1) == 0 && *(float *)&v497 < v22)
                              {
                                if (re::MaterialParameterTable::kFadeNameHash(void)::once != -1)
                                  dispatch_once(&re::MaterialParameterTable::kFadeNameHash(void)::once, &__block_literal_global_3_1);
                                v496 = re::MaterialParameterTable::kFadeNameHash(void)::_kFadeNameHash;
                              }
                              v476 = xmmword_2260E5F10;
                              v477 = xmmword_2260E5F20;
                              v478 = xmmword_2260E5F40;
                              v479 = xmmword_2260E5D70;
                              re::ecs2::TransformHelper::computeWorldMatrixForRendering(*(re::ecs2::TransformHelper **)(v308 + 216), (re::ecs2::TransformComponent **)v323, location);
                              v406[0] = 0u;
                              v433[0] = xmmword_2260E5D70;
                              v348[0] = 0u;
                              re::decomposeScaleRotationTranslation<float>((uint64_t)location, v406, v433, v348);
                              v511 = v406[0];
                              v512 = v433[0];
                              v513 = v348[0];
                              v139 = v323;
                              v140 = *((_QWORD *)v323 + 30);
                              if (v140)
                              {
                                v141 = *(_QWORD *)(v140 + 136);
                                if (v141)
                                {
                                  *(_OWORD *)location = 0u;
                                  v406[0] = (int32x4_t)xmmword_2260E5D70;
                                  v433[0] = 0u;
                                  re::decomposeScaleRotationTranslation<float>(v141 + 48, (int32x4_t *)location, v406, v433);
                                  v514 = *(_OWORD *)location;
                                  v515 = v406[0];
                                  v516 = v433[0];
                                  v139 = v323;
                                }
                              }
                              v518 = *(_DWORD *)(v86 + 356);
                              v142 = *(_QWORD *)(v308 + 208);
                              if (v142)
                              {
                                LOWORD(v142) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v142 + 24))(v142);
                                v139 = v323;
                              }
                              *(_WORD *)&v500[16] = v142;
                              v143 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)v139 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSortingComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                              if (v143)
                              {
                                v494 = *(_BYTE *)(v143 + 25);
                                v495 = *(_OWORD *)(v143 + 304);
                              }
                              if (v339)
                              {
                                v144 = (char *)re::ecs2::RenderOptions::forEntity((re::ecs2::RenderOptions *)&v340, (unint64_t)v323);
                                LOBYTE(location[0]) = *v144;
                                BYTE2(location[0]) = v144[2];
                                if (BYTE2(location[0]))
                                  BYTE3(location[0]) = v144[3];
                                BYTE4(location[0]) = v144[4];
                                if (BYTE4(location[0]))
                                  BYTE5(location[0]) = v144[5];
                                BYTE6(location[0]) = v144[6];
                                if (BYTE6(location[0]))
                                  HIBYTE(location[0]) = v144[7];
                                LOBYTE(location[1]) = v144[8];
                                v145 = *(_WORD *)(v144 + 9);
                                BYTE3(location[1]) = v144[11];
                                *(_WORD *)((char *)&location[1] + 1) = v145;
                                BYTE4(location[1]) = v144[12];
                                if (BYTE4(location[1]))
                                  BYTE5(location[1]) = v144[13];
                                BYTE6(location[1]) = v144[14];
                                if (BYTE6(location[1]))
                                  HIBYTE(location[1]) = v144[15];
                                v350.i8[0] = v144[16];
                                if (v350.i8[0])
                                  v350.i8[1] = v144[17];
                                v350.i8[2] = v144[18];
                                if (v350.i8[2])
                                  v350.i8[3] = v144[19];
                                v350.i8[4] = v144[20];
                                if (v350.i8[4])
                                  v350.i16[3] = *((_WORD *)v144 + 11);
                                v146 = *((_DWORD *)v144 + 6);
                                v350.i8[12] = v144[28];
                                v350.i32[2] = v146;
                                *(_QWORD *)v500 = re::HierarchicalMeshOverrideFlags::flattenToOverrideFlags((re::HierarchicalMeshOverrideFlags *)((char *)location + 2));
                              }
                              (*(void (**)(id *__return_ptr, uint64_t, re::ecs2::Entity *))(*(_QWORD *)v312 + 8))(location, v312, v323);
                              if (LOBYTE(location[0]))
                                v147 = location[1];
                              else
                                v147 = 0;
                              v148 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v308 + 200) + 16))(*(_QWORD *)(v308 + 200));
                              v149 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v148, (uint64_t *)&v323);
                              if (v149)
                              {
                                v150 = *(_QWORD *)v149;
                                v151 = *(_BYTE *)(v149 + 8) != 0;
                              }
                              else
                              {
                                v150 = 0;
                                v151 = 0;
                              }
                              v320[0] = &v324;
                              v307 = (unint64_t)v147;
                              v320[1] = v147;
                              v320[2] = &v502;
                              v320[3] = &v476;
                              v320[4] = v137;
                              v320[5] = v150;
                              v321 = v151;
                              v322 = 0;
                              re::ecs2::MeshComponentHelper::addRenderPassGroupBoundsTable((uint64_t)v320);
                              v305 = *(_DWORD *)&v500[4];
                              v303 = *(_DWORD *)v500;
                              v152 = objc_retainAutorelease(*(id *)(v86 + 48));
                              objc_msgSend(v152, "effect");
                              v153 = (void *)objc_claimAutoreleasedReturnValue();
                              if (v153)
                              {
                                v301 = v150;
                                v154 = v151;
                                v155 = *(_QWORD *)(v86 + 16);
                                v156 = v137;
                                if (v155)
                                  v157 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v155 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                                else
                                  v157 = *(_QWORD *)(v86 + 216);
                                objc_msgSend(v152, "scene");
                                v158 = (void *)objc_claimAutoreleasedReturnValue();
                                location[0] = (id)MEMORY[0x24BDAC760];
                                location[1] = (id)3221225472;
                                v350.i64[0] = (uint64_t)___ZN2re4ecs217VFXSceneComponent22writeBindingsToRuntimeEv_block_invoke;
                                v350.i64[1] = (uint64_t)&unk_24ED46370;
                                v351.i64[1] = v86;
                                v352.i64[0] = v157;
                                v351.i64[0] = (uint64_t)v153;
                                objc_msgSend(v158, "performTransaction:", location);

                                v137 = v156;
                                v151 = v154;
                                v150 = v301;

                              }
                              if (*(_QWORD *)(v86 + 16) && *(_BYTE *)(v86 + 212))
                              {
                                v159 = objc_retainAutorelease(*(id *)(v86 + 48));
                                objc_msgSend(v159, "effect");
                                v160 = (void *)objc_claimAutoreleasedReturnValue();
                                if (v160)
                                {
                                  v161 = *(_QWORD *)(v86 + 16);
                                  if (v161)
                                  {
                                    v162 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v161 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneReadbackComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                                    if (v162)
                                    {
                                      v163 = (const re::ecs2::Component *)v162;
                                      v164 = *(_QWORD *)(v86 + 16);
                                      v291 = v137;
                                      if (v164)
                                        v302 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v164 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                                      else
                                        v302 = *(_QWORD *)(v86 + 216);
                                      objc_msgSend(v159, "scene");
                                      v166 = (void *)objc_claimAutoreleasedReturnValue();
                                      location[0] = (id)MEMORY[0x24BDAC760];
                                      location[1] = (id)3221225472;
                                      v350.i64[0] = (uint64_t)___ZN2re4ecs217VFXSceneComponent23readBindingsFromRuntimeEv_block_invoke;
                                      v350.i64[1] = (uint64_t)&unk_24ED46028;
                                      v351.i64[1] = v86;
                                      v352.i64[0] = (uint64_t)v163;
                                      v352.i64[1] = v302;
                                      v351.i64[0] = (uint64_t)v160;
                                      objc_msgSend(v166, "performTransaction:", location);

                                      v137 = v291;
                                      *((_BYTE *)v163 + 80) = 0;
                                      v167 = *(re::ecs2::NetworkComponent **)(*(_QWORD *)(v86 + 16) + 200);
                                      if (v167)
                                        re::ecs2::NetworkComponent::markDirty(v167, v163);

                                    }
                                  }
                                }

                              }
                              v168 = *(float *)(v86 + 352);
                              *(float *)&v517 = v168;
                              v169 = *(unsigned __int8 *)(v86 + 360);
                              LOBYTE(v520) = *(_BYTE *)(v86 + 360) == 0;
                              v170 = v4;
                              if (*(_BYTE *)(v86 + 224))
                                v170 = v168 * (float)(*(float *)(v86 + 228) - *(float *)(v86 + 232));
                              if (v169)
                              {
                                v171 = *(float *)(v86 + 232);
                              }
                              else
                              {
                                v171 = *(float *)(v86 + 228);
                                *(float *)(v86 + 232) = v171;
                              }
                              *(float *)(v86 + 228) = v170 + v171;
                              *((float *)&v517 + 1) = v170;
                              if (*(_DWORD *)(v86 + 236) != *(_DWORD *)(v86 + 208))
                              {
                                location[0] = (id)objc_msgSend(v313, "uuid");
                                re::DynamicArray<unsigned long>::add(v298, location);
                                *(_DWORD *)(v86 + 208) = *(_DWORD *)(v86 + 236);
                              }
                              *(_BYTE *)(v86 + 224) = 0;
                              v319 = 0;
                              if (*(_QWORD *)(v308 + 136)
                                && !*((_QWORD *)v323 + 26)
                                && (((v303 ^ 0x180197E) & ~v305 | v303 & v305) & 0x80) != 0)
                              {
                                v172 = *(_QWORD *)(v308 + 200);
                                *(_QWORD *)&v433[0] = 0;
                                *((_QWORD *)&v433[0] + 1) = v172;
                                v433[1] = *(_OWORD *)(v308 + 168);
                                v434 = v310;
                                v435 = v323;
                                v436 = 0u;
                                v437 = 0u;
                                v438 = 0;
                                v439 = 0u;
                                v440 = 0u;
                                v441 = 0u;
                                v442 = 0u;
                                v443 = 0u;
                                v444 = 0u;
                                v445 = 0u;
                                v446 = 0;
                                v448 = 0;
                                v449 = 0;
                                v447 = v489;
                                v450 = &v502;
                                v451 = 0;
                                v452 = &v476;
                                v453 = v497;
                                v454 = v137;
                                v455 = 1065353216;
                                v456 = v501;
                                v457 = *(_WORD *)&v500[16];
                                v318[0] = 0;
                                v318[1] = &str_110;
                                v458 = v150;
                                v459 = v318;
                                v460 = *((_QWORD *)v311 + 46);
                                v461 = (v303 ^ 0x180197E) & ~v305 | v303 & v305;
                                v462 = *(_QWORD *)v500;
                                v463 = 0;
                                v464 = v494;
                                v465 = &v495;
                                v466 = 0;
                                v467 = 0;
                                v468 = 0;
                                v469 = v151;
                                memset(v470, 0, sizeof(v470));
                                v471 = 1;
                                v472 = &v324;
                                v173 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v312 + 32))(v312, v307);
                                v175 = v173;
                                v176 = *(unsigned int *)(v173 + 32);
                                if ((_DWORD)v176)
                                {
                                  v177 = 0;
                                  v178 = (int *)(*(_QWORD *)(v173 + 16) + 8);
                                  v179 = v312;
                                  while (1)
                                  {
                                    v180 = *v178;
                                    v178 += 6;
                                    if (v180 < 0)
                                      break;
                                    if (v176 == ++v177)
                                    {
                                      LODWORD(v177) = v176;
                                      break;
                                    }
                                  }
                                }
                                else
                                {
                                  LODWORD(v177) = 0;
                                  v179 = v312;
                                }
                                if ((_DWORD)v176 == (_DWORD)v177)
                                {
LABEL_238:
                                  re::StringID::destroyString((re::StringID *)v318);
                                  goto LABEL_239;
                                }
                                v182 = v177;
                                v183 = *(_QWORD *)(v175 + 16);
                                v304 = (_QWORD *)(v86 + 256);
                                while (2)
                                {
                                  v184 = *(_QWORD *)(v183 + 24 * v182 + 16);
                                  if (!v184)
                                  {
                                    re::internal::assertLog((re::internal *)4, v174, "assertion failure: '%s' (%s:line %i) ", "referencingPortalComponent != nullptr", "updateSceneForRenderInternal", 626);
                                    _os_crash();
                                    __break(1u);
LABEL_386:
                                    re::internal::assertLog((re::internal *)4, v33, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneForRenderInternal", 330);
                                    _os_crash();
                                    __break(1u);
LABEL_387:
                                    re::internal::assertLog((re::internal *)4, v10, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateScenes", 255);
                                    _os_crash();
                                    __break(1u);
                                  }
                                  (*(void (**)(id *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v179 + 8))(location, v179, *(_QWORD *)(v184 + 16));
                                  if (LOBYTE(location[0]))
                                    v185 = (float32x4_t *)location[1];
                                  else
                                    v185 = 0;
                                  v317 = v185;
                                  v186 = re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)&v328, (unint64_t)v185);
                                  if (!v186)
                                  {
                                    location[1] = 0;
                                    v350.i64[0] = 0;
                                    v350.i32[2] = 0;
                                    v351.i64[0] = 0;
                                    location[0] = v310;
                                    re::DynamicArray<re::VFXScene>::setCapacity(location, 1uLL);
                                    ++v350.i32[2];
                                    v186 = re::HashTable<unsigned long long,re::ecs2::VFXSystem::updateSceneForRenderInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add((uint64_t)&v328, (uint64_t *)&v317, (uint64_t)location);
                                    re::DynamicArray<re::VFXScene>::deinit((uint64_t)location);
                                  }
                                  v316[0] = (float32x4_t *)v184;
                                  v316[1] = v185;
                                  v316[2] = (float32x4_t *)&v319;
                                  re::ecs2::MeshComponentHelper::generateSceneForPortalCrossing((unint64_t)v433, v316, (uint64_t)v406);
                                  if (v406[0].i8[0])
                                  {
                                    v361 = v406[13];
                                    v362 = v406[14];
                                    v363 = v406[15];
                                    v364 = v406[16];
                                    v357 = v406[9];
                                    v358 = v406[10];
                                    v359 = v406[11];
                                    v360 = v406[12];
                                    v353 = v406[5];
                                    v354 = v406[6];
                                    v355 = v406[7];
                                    v356 = v406[8];
                                    *(int32x4_t *)location = v406[1];
                                    v350 = (float32x4_t)v406[2];
                                    v351 = (float32x4_t)v406[3];
                                    v352 = (float32x4_t)v406[4];
                                    v368 = v410;
                                    v365 = v407;
                                    v366 = v408;
                                    v407 = 0u;
                                    v408 = 0u;
                                    v367 = v409;
                                    v410 = 0u;
                                    v409 = 0u;
                                    v369 = v411;
                                    v370 = v412;
                                    if (v412)
                                      v371 = v413;
                                    v378 = v420;
                                    v379 = v421;
                                    v380 = v422;
                                    v374 = v416;
                                    v375 = v417;
                                    v376 = v418;
                                    v377 = v419;
                                    v372 = v414;
                                    v373 = v415;
                                    v381 = v423;
                                    if (v423)
                                    {
                                      v382 = v424;
                                      v383 = v425;
                                    }
                                    v384 = v426;
                                    v385 = v427;
                                    if (v427)
                                    {
                                      v386 = v428;
                                      v387 = v429;
                                      v388 = v430;
                                      v389 = v431;
                                    }
                                    v390 = v432;
                                    v391 = v315;
                                    v187 = (id)(v315 + 8);
                                    v392 = v313;
                                    v393 = v511;
                                    v394 = v512;
                                    v395 = v513;
                                    v396 = v514;
                                    v397 = v515;
                                    v398 = v516;
                                    v399 = v517;
                                    v400 = -1082130432;
                                    v401 = v518;
                                    v402 = 0;
                                    v403 = v520;
                                    v404 = 0;
                                    v405 = 0;
                                    re::DynamicArray<re::VFXScene>::add(v186, (__int128 *)location);

                                    if (v391)
                                    {

                                      v391 = 0;
                                    }
                                    if (*((_QWORD *)&v368 + 1))
                                    {
                                      if (*((_QWORD *)&v365 + 1))
                                        *((_QWORD *)&v365 + 1) = 0;
                                      v174 = v365;
                                      if ((_QWORD)v365)
                                        (*(void (**)(void))(**((_QWORD **)&v368 + 1) + 40))();
                                    }
                                    v188 = *(_QWORD *)(v184 + 16);
                                    if (v188)
                                    {
                                      v189 = *(_QWORD *)(v86 + 240);
                                      if (v189 == *(_QWORD *)(v188 + 296))
                                      {
                                        v190 = *(_QWORD *)(v188 + 176);
                                        if (v190)
                                        {
                                          v306 = *(re::ecs2::TransformHelper **)(v308 + 216);
                                          re::ecs2::MeshComponent::updateStaticBoundingBoxData((_QWORD *)v190, *(const re::ecs2::Entity **)(v190 + 16), 0);
                                          v191 = *(_QWORD *)(v190 + 288);
                                          if (v191)
                                          {
                                            if (*(_QWORD *)(v191 + 104) <= 1uLL)
                                            {
                                              v192 = (float32x4_t *)re::MeshBoundingBoxes::boundingBox((re::MeshBoundingBoxes *)(v191 + 80), 0);
                                              v193 = vsubq_f32(v192[1], *v192);
                                              v193.i32[3] = 0;
                                              v194 = (int8x16_t)vmaxnmq_f32(v193, (float32x4_t)0);
                                              v195 = *(float *)&v194.i32[2];
                                              if (*(float *)v194.i32 == 0.0
                                                || *(float *)&v194.i32[1] == 0.0
                                                || *(float *)&v194.i32[2] == 0.0)
                                              {
                                                if (*(float *)&v194.i32[1] != 0.0)
                                                {
                                                  if (*(float *)&v194.i32[2] == 0.0)
                                                    v195 = *(float *)v194.i32;
                                                  v196.i64[0] = LODWORD(v195);
                                                  v196.i64[1] = __PAIR64__(v194.u32[3], v194.u32[1]);
                                                  v194 = v196;
                                                }
                                                v197 = *(float32x2_t *)(v86 + 248);
                                                v198 = *(float32x4_t *)(v184 + 112);
                                                v199 = vmulq_f32(v198, (float32x4_t)xmmword_2260E5F10);
                                                v200 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v199, 2), vaddq_f32(v199, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v199.f32, 1))).f32[0];
                                                v201 = vmulq_f32(v198, (float32x4_t)xmmword_2260E5F20);
                                                v202 = v200 == 0.0;
                                                v203 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v201, 2), vaddq_f32(v201, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v201.f32, 1))).f32[0];
                                                v204 = vmulq_f32(v198, (float32x4_t)xmmword_2260E5F40);
                                                v205 = v203 == 0.0;
                                                LODWORD(v206) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v204, 2), vaddq_f32(v204, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v204.f32, 1))).u32[0];
                                                v207 = v203 == 0.0 && v200 == 0.0;
                                                if (v206 != 0.0)
                                                {
                                                  v205 = 0;
                                                  v202 = 0;
                                                }
                                                if (v205 || v202 || v207)
                                                {
                                                  v344 = xmmword_2260E5F10;
                                                  v345 = xmmword_2260E5F20;
                                                  v346 = xmmword_2260E5F40;
                                                  v347 = xmmword_2260E5D70;
                                                  if (v207)
                                                  {
                                                    v208 = _D10;
                                                    v209 = v288;
                                                    v210 = vmuls_lane_f32(v209.f32[0], *(float32x2_t *)v209.f32, 1);
                                                    v211 = vmuls_lane_f32(v209.f32[0], v209, 2);
                                                    v292 = v194;
                                                    v212 = __sincosf_stret((float)(int)((__PAIR64__(v206 > 0.0, LODWORD(v206))- COERCE_UNSIGNED_INT(0.0)) >> 32)* -1.5708);
                                                    *(float *)&v218 = vmuls_lane_f32(v212.__sinval, *(float32x2_t *)v288.f32, 1);
                                                    v213 = vmuls_lane_f32(v212.__sinval, v288, 2);
                                                    v214 = -(float)(v213 - (float)(v210 * (float)(1.0 - v212.__cosval)));
                                                    v215 = v213 + (float)(v210 * (float)(1.0 - v212.__cosval));
                                                    _D10 = v208;
                                                    v22 = 1.0;
                                                    HIDWORD(v216) = 0;
                                                    *(float *)&v216 = v287
                                                                    + (float)(v212.__cosval * (float)(1.0 - v287));
                                                    *((float *)&v216 + 1) = v215;
                                                    *((float *)&v216 + 2) = -(float)(*(float *)&v218
                                                                                   - (float)(v211
                                                                                           * (float)(1.0 - v212.__cosval)));
                                                    HIDWORD(v217) = 0;
                                                    *(float *)&v217 = v214;
                                                    *((float *)&v217 + 1) = v286
                                                                          + (float)(v212.__cosval * (float)(1.0 - v286));
                                                    *((float *)&v217 + 2) = (float)(v212.__sinval * v288.f32[0])
                                                                          + (float)(v284 * (float)(1.0 - v212.__cosval));
                                                    HIDWORD(v218) = 0;
                                                    *(float *)&v218 = *(float *)&v218
                                                                    + (float)(v211 * (float)(1.0 - v212.__cosval));
                                                    *((float *)&v218 + 1) = -(float)((float)(v212.__sinval * v288.f32[0])
                                                                                   - (float)(v284
                                                                                           * (float)(1.0 - v212.__cosval)));
                                                    v219 = v285 + (float)(v212.__cosval * (float)(1.0 - v285));
                                                    v194 = v292;
                                                    goto LABEL_312;
                                                  }
                                                  if (v202)
                                                  {
                                                    v280 = vmulq_n_f32((float32x4_t)xmmword_2260E5F10, v283);
                                                    v281 = _D10;
                                                    v282 = v14;
                                                    v222 = vmuls_lane_f32(v280.f32[1], *(float32x2_t *)v280.f32, 1);
                                                    v223 = vmuls_lane_f32(v280.f32[2], v280, 2);
                                                    v224 = vmuls_lane_f32(v280.f32[0], *(float32x2_t *)v280.f32, 1);
                                                    v225 = vmuls_lane_f32(v280.f32[0], v280, 2);
                                                    v226 = vmuls_lane_f32(v280.f32[1], v280, 2);
                                                    v293 = v194;
                                                    v227 = __sincosf_stret((float)(int)((__PAIR64__(v203 > 0.0, LODWORD(v203))- COERCE_UNSIGNED_INT(0.0)) >> 32)* -3.1416);
                                                    v228 = vmulq_f32(v280, v280).f32[0];
                                                    *(float *)&v218 = vmuls_lane_f32(v227.__sinval, *(float32x2_t *)v280.f32, 1);
                                                    v229 = vmuls_lane_f32(v227.__sinval, v280, 2);
                                                    *(float *)&v230 = *(float *)&v218
                                                                    + (float)(v225 * (float)(1.0 - v227.__cosval));
                                                    v231 = v222 + (float)(v227.__cosval * (float)(1.0 - v222));
                                                    *(float *)&v232 = -(float)((float)(v227.__sinval * v280.f32[0])
                                                                             - (float)(v226
                                                                                     * (float)(1.0 - v227.__cosval)));
                                                    *(float *)&v218 = -(float)(*(float *)&v218
                                                                             - (float)(v225
                                                                                     * (float)(1.0 - v227.__cosval)));
                                                    v22 = 1.0;
                                                    *(float *)&v216 = v228
                                                                    + (float)(v227.__cosval * (float)(1.0 - v228));
                                                    *(float *)&v233 = (float)(v227.__sinval * v280.f32[0])
                                                                    + (float)(v226 * (float)(1.0 - v227.__cosval));
                                                    v194 = v293;
                                                    _D10 = v281;
                                                    v14 = v282;
                                                    *((float *)&v216 + 1) = v229
                                                                          + (float)(v224 * (float)(1.0 - v227.__cosval));
                                                    *((_QWORD *)&v216 + 1) = v218;
                                                    *(float *)&v217 = -(float)(v229
                                                                             - (float)(v224
                                                                                     * (float)(1.0 - v227.__cosval)));
                                                    *((float *)&v217 + 1) = v231;
                                                    *((_QWORD *)&v217 + 1) = v233;
                                                    HIDWORD(v218) = 0;
                                                    *(_QWORD *)&v218 = __PAIR64__(v232, v230);
                                                    v219 = v223 + (float)(v227.__cosval * (float)(1.0 - v223));
LABEL_312:
                                                    *((float *)&v218 + 2) = v219;
                                                    v344 = v216;
                                                    v345 = v217;
                                                    v346 = v218;
                                                  }
                                                  else if (v205)
                                                  {
                                                    location[0] = 0;
                                                    location[1] = (id)1065353216;
                                                    v295 = v194;
                                                    re::Matrix4x4<float>::makeRotation((float32x4_t *)location, &v344, (float)(int)((__PAIR64__(v200 > 0.0, LODWORD(v200))- COERCE_UNSIGNED_INT(0.0)) >> 32)* 1.5708);
                                                    v194 = v295;
                                                  }
                                                  v234 = (int32x4_t)vextq_s8(v194, v194, 8uLL);
                                                  *(float32x2_t *)v234.i8 = vsub_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v194.i8, *(int32x2_t *)v234.i8), v197);
                                                  v294 = (float32x4_t)vtrn2q_s32(vrev64q_s32(vzip1q_s32(v234, v234)), (int32x4_t)v194);
                                                  re::ecs2::TransformHelper::computeWorldMatrixForRendering(v306, *(re::ecs2::TransformComponent ***)(v184 + 16), v343);
                                                  v235 = 0;
                                                  v236 = (float32x4_t)v343[0];
                                                  v237 = (float32x4_t)v343[1];
                                                  v238 = (float32x4_t)v343[2];
                                                  v239 = (float32x4_t)v343[3];
                                                  v348[0] = v344;
                                                  v348[1] = v345;
                                                  v348[2] = v346;
                                                  v348[3] = v347;
                                                  do
                                                  {
                                                    *(float32x4_t *)&location[v235 / 8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v236, COERCE_FLOAT(v348[v235 / 0x10])), v237, *(float32x2_t *)&v348[v235 / 0x10], 1), v238, (float32x4_t)v348[v235 / 0x10], 2), v239, (float32x4_t)v348[v235 / 0x10], 3);
                                                    v235 += 16;
                                                  }
                                                  while (v235 != 64);
                                                  v240 = location[0];
                                                  v241 = *(double *)v350.i64;
                                                  v242 = *(double *)v351.i64;
                                                  v243 = *(double *)v352.i64;
                                                  v344 = *(_OWORD *)location;
                                                  v345 = (__int128)v350;
                                                  v346 = (__int128)v351;
                                                  v347 = (__int128)v352;
                                                  if (*v304 == *(_QWORD *)(v188 + 296))
                                                  {
                                                    v244 = (uint32x4_t)vceqq_f32(*(float32x4_t *)(v86 + 272), v294);
                                                    v244.i32[3] = v244.i32[2];
                                                    if ((vminvq_u32(v244) & 0x80000000) == 0
                                                      || (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v86 + 304), v350), (int8x16_t)vceqq_f32(*(float32x4_t *)(v86 + 288), *(float32x4_t *)location)), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v86 + 320), v351), (int8x16_t)vceqq_f32(*(float32x4_t *)(v86 + 336), v352)))) & 0x80000000) == 0)
                                                    {
                                                      re::ecs2::VFXSceneComponent::updateCollisionPlane(v86, *(_QWORD *)(v86 + 264), *(double *)v294.i64, *(double *)location, *(double *)v350.i64, *(double *)v351.i64, *(double *)v352.i64);
                                                      goto LABEL_324;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    v245 = *(_QWORD *)(v86 + 264);
                                                    if (v245)
                                                    {
                                                      re::ecs2::VFXSceneComponent::removeCollisionPlane((id *)v86, v245);
                                                      v240 = (id)v344;
                                                      v241 = *(double *)&v345;
                                                      v242 = *(double *)&v346;
                                                      v243 = *(double *)&v347;
                                                    }
                                                    v246 = re::ecs2::VFXSceneComponent::addCollisionPlane(v86, *(double *)v294.i64, *(double *)&v240, v241, v242, v243);
                                                    *(_QWORD *)(v86 + 264) = v246;
                                                    v247 = objc_retainAutorelease(*(id *)(v86 + 48));
                                                    if (v247)
                                                      objc_msgSend(v247, "collideOutsidePlaneWithId:", v246);
                                                    *v304 = *(_QWORD *)(v188 + 296);
LABEL_324:
                                                    *(float32x4_t *)(v86 + 272) = v294;
                                                    v248 = v345;
                                                    *(_OWORD *)(v86 + 288) = v344;
                                                    *(_OWORD *)(v86 + 304) = v248;
                                                    v249 = v347;
                                                    *(_OWORD *)(v86 + 320) = v346;
                                                    *(_OWORD *)(v86 + 336) = v249;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      else if (!v189)
                                      {
                                        v174 = *(_QWORD *)(v86 + 264);
                                        if (v174)
                                        {
                                          re::ecs2::VFXSceneComponent::removeCollisionPlane((id *)v86, v174);
                                          *(_OWORD *)v304 = 0u;
                                          *(_OWORD *)(v86 + 272) = 0u;
                                          *(_OWORD *)(v86 + 288) = xmmword_2260E5F10;
                                          *(_OWORD *)(v86 + 304) = xmmword_2260E5F20;
                                          *(_OWORD *)(v86 + 320) = xmmword_2260E5F40;
                                          *(_OWORD *)(v86 + 336) = xmmword_2260E5D70;
                                        }
                                      }
                                    }
                                    if (v406[0].i8[0] && *((_QWORD *)&v410 + 1))
                                    {
                                      if (*((_QWORD *)&v407 + 1))
                                        *((_QWORD *)&v407 + 1) = 0;
                                      v174 = v407;
                                      if ((_QWORD)v407)
                                        (*(void (**)(void))(**((_QWORD **)&v410 + 1) + 40))();
                                    }
                                  }
                                  v183 = *(_QWORD *)(v175 + 16);
                                  if (*(_DWORD *)(v175 + 32) <= (v177 + 1))
                                    v220 = v177 + 1;
                                  else
                                    v220 = *(_DWORD *)(v175 + 32);
                                  while (1)
                                  {
                                    v182 = (v177 + 1);
                                    if (v220 - 1 == (_DWORD)v177)
                                      break;
                                    LODWORD(v177) = v177 + 1;
                                    v221 = v182;
                                    if ((*(_DWORD *)(v183 + 24 * v182 + 8) & 0x80000000) != 0)
                                      goto LABEL_308;
                                  }
                                  v221 = v220;
LABEL_308:
                                  LODWORD(v177) = v221;
                                  v179 = v312;
                                  if ((_DWORD)v176 == v221)
                                    goto LABEL_238;
                                  continue;
                                }
                              }
LABEL_239:
                              v181 = re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)&v328, v307);
                              re::DynamicArray<re::VFXScene>::add(v181, (__int128 *)&v473);

                              if (v509)
                              {

                                v509 = 0;
                              }
                              if (v492[2])
                              {
                                if ((_QWORD)v490)
                                  *(_QWORD *)&v490 = 0;
                                if (*((_QWORD *)&v489 + 1))
                                  (*(void (**)(void))(*(_QWORD *)v492[2] + 40))();
                              }
                            }

                            v6 = v308;
                          }
LABEL_247:
                          v62 += 2;
                          if (v62 == v309)
                            goto LABEL_332;
                          continue;
                        }
                        re::AssetHandle::loadAsync(v95);
LABEL_123:
                        re::ObjCObject::operator=((void **)(v86 + 48), 0);
                        *(_DWORD *)(v86 + 236) = 0;
                        goto LABEL_130;
                      }
                      v101 = *re::ecsComponentsLogObjects(0);
                      if (!os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
                        goto LABEL_130;
                    }
                    else
                    {
                      v101 = *re::ecsComponentsLogObjects(0);
                      if (!os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
                        goto LABEL_130;
                    }
                    break;
                  }
                  LOWORD(location[0]) = 0;
                  _os_log_error_impl(&dword_224FE9000, v101, OS_LOG_TYPE_ERROR, "VFX framework is not loaded", (uint8_t *)location, 2u);
                  goto LABEL_130;
                }
LABEL_332:
                v252 = v330;
                if (v330)
                {
                  v253 = 0;
                  v254 = (int *)(v329 + 8);
                  v13 = v297;
                  while (1)
                  {
                    v255 = *v254;
                    v254 += 16;
                    if (v255 < 0)
                      break;
                    if (v330 == ++v253)
                    {
                      LODWORD(v253) = v330;
                      break;
                    }
                  }
                }
                else
                {
                  LODWORD(v253) = 0;
                  v13 = v297;
                }
                if (v330 != (_DWORD)v253)
                {
                  v256 = v253;
                  v257 = v329;
                  v258 = v330;
                  do
                  {
                    v259 = v257 + (v256 << 6);
                    re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v314, *(const re::ecs2::Scene **)(v259 + 16), (re::DynamicString **)v311, &v473);
                    if (*(_QWORD *)(v259 + 40))
                    {
                      location[0] = (id)(v473.n128_u64[0] >> 1);
                      v260 = re::RenderFrameData::stream((re::RenderFrame *)((char *)v311 + 264), (const re::WeakStringID *)location);
                      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v260 + 48) + 744))(*(_QWORD *)(v260 + 48), v259 + 24);
                      v258 = v330;
                      v257 = v329;
                    }
                    re::StringID::destroyString((re::StringID *)&v473);
                    if (v258 <= (int)v253 + 1)
                      v261 = v253 + 1;
                    else
                      v261 = v258;
                    while (1)
                    {
                      v256 = (v253 + 1);
                      if (v261 - 1 == (_DWORD)v253)
                        break;
                      LODWORD(v253) = v253 + 1;
                      v262 = v256;
                      if ((*(_DWORD *)(v257 + (v256 << 6) + 8) & 0x80000000) != 0)
                        goto LABEL_349;
                    }
                    v262 = v261;
LABEL_349:
                    LODWORD(v253) = v262;
                  }
                  while (v252 != v262);
                }
                v263 = v326;
                if (v326)
                {
                  v264 = 0;
                  v265 = (int *)(v325 + 8);
                  while (1)
                  {
                    v266 = *v265;
                    v265 += 18;
                    if (v266 < 0)
                      break;
                    if (v326 == ++v264)
                    {
                      LODWORD(v264) = v326;
                      break;
                    }
                  }
                }
                else
                {
                  LODWORD(v264) = 0;
                }
                if (v326 != (_DWORD)v264)
                {
                  v267 = v264;
                  v268 = v325;
                  v269 = v326;
                  do
                  {
                    v270 = v268 + 72 * v267;
                    if (*(_DWORD *)(v270 + 52))
                    {
                      re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v314, *(const re::ecs2::Scene **)(v268 + 72 * v267 + 16), (re::DynamicString **)v311, &v473);
                      v271 = *(_QWORD *)(v6 + 200);
                      if (v271)
                        (*(void (**)(uint64_t, __n128 *, _QWORD, uint64_t))(*(_QWORD *)v271 + 32))(v271, &v473, *((_QWORD *)v311 + 46), v270 + 24);
                      re::StringID::destroyString((re::StringID *)&v473);
                      v269 = v326;
                      v268 = v325;
                    }
                    if (v269 <= (int)v264 + 1)
                      v272 = v264 + 1;
                    else
                      v272 = v269;
                    while (1)
                    {
                      v267 = (v264 + 1);
                      if (v272 - 1 == (_DWORD)v264)
                        break;
                      LODWORD(v264) = v264 + 1;
                      v273 = v267;
                      if ((*(_DWORD *)(v268 + 72 * v267 + 8) & 0x80000000) != 0)
                        goto LABEL_369;
                    }
                    v273 = v272;
LABEL_369:
                    LODWORD(v264) = v273;
                  }
                  while (v263 != v273);
                }
                re::HashTable<unsigned long long,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v324);
                re::HashTable<unsigned long long,re::ecs2::VFXSystem::updateSceneForRenderInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable((uint64_t *)&v328);
                re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v332);
                if (v296)
                {
                  if (*(_QWORD *)(v296 + 152))
                  {
                    v274 = mach_absolute_time();
                    v275 = *(int64x2_t **)(v296 + 152);
                    if (v275)
                    {
                      v276 = v275[524].u64[0];
                      if (v276 >= v274 - v290)
                        v276 = v274 - v290;
                      v275[524].i64[0] = v276;
                      v277 = v275[524].u64[1];
                      if (v277 <= v274 - v290)
                        v277 = v274 - v290;
                      v275[524].i64[1] = v277;
                      v278 = vdupq_n_s64(1uLL);
                      v278.i64[0] = v274 - v290;
                      v275[525] = vaddq_s64(v275[525], v278);
                      *(_BYTE *)(v296 + 184) = 0;
                    }
                  }
                }
              }
              if (v335[0])
              {
                if (v338)
                  (*(void (**)(void))(*(_QWORD *)v335[0] + 40))();
              }
            }
            ++v13;
          }
          while (v13 != (re::ecs2::RenderingSubsystem **)v299);
        }
      }
      else
      {
        re::AssetHandle::loadAsync((re::AssetHandle *)(v6 + 224));
      }
    }
  }
}

__n128 re::DynamicArray<std::pair<re::ecs2::Component *,re::ecs2::VFXSceneComponent *>>::add(uint64_t a1, __n128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  __n128 result;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v5 + 1)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<std::pair<re::ecs2::Component *,re::ecs2::VFXSceneComponent *>>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<std::pair<re::ecs2::Component *,re::ecs2::VFXSceneComponent *>>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(a1 + 32) + 16 * v5) = *a2;
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<int>(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<int>(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 32 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 32 * v10 + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 32 * v10;
  return v12 + 24;
}

unint64_t re::HashTable<unsigned long long,re::ecs2::VFXSystem::updateSceneForRenderInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long long,re::ecs2::VFXSystem::updateSceneForRenderInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + ((unint64_t)v13 << 6);
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + (v10 << 6) + 16) != v6)
  {
    v10 = *(_DWORD *)(v11 + (v10 << 6) + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + (v10 << 6);
  return v12 + 24;
}

uint64_t re::HashTable<unsigned long long,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<unsigned long long,re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 72 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 72 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 72 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 72 * v10;
  return v12 + 24;
}

unint64_t re::HierarchicalMeshOverrideFlags::flattenToOverrideFlags(re::HierarchicalMeshOverrideFlags *this)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  int v4;
  unsigned int v5;
  _BOOL4 v6;
  BOOL v7;
  int v8;
  int v9;
  _BOOL4 v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;

  v1 = *(unsigned __int8 *)this;
  if (*(_BYTE *)this)
  {
    v2 = *((unsigned __int8 *)this + 1);
    v1 = 1;
  }
  else
  {
    v2 = 0;
  }
  if (*((_BYTE *)this + 6))
  {
    v2 |= 2u;
  }
  else if (*((_BYTE *)this + 2))
  {
    v2 |= 2 * (*((_BYTE *)this + 3) == 1);
    v1 = v1 | 2;
  }
  if (*((_BYTE *)this + 10))
  {
    v2 = v2 & 0xFFFFFFFB | (4 * *((unsigned __int8 *)this + 11));
    v1 = v1 | 4;
  }
  if (*((_BYTE *)this + 12))
  {
    v2 = v2 & 0xFFFFFFF7 | (8 * *((unsigned __int8 *)this + 13));
    v1 = v1 | 8;
  }
  if (*((_BYTE *)this + 14))
  {
    v2 = v2 & 0xFFFFFFEF | (16 * *((unsigned __int8 *)this + 15));
    v1 = v1 | 0x10;
  }
  if (*((_BYTE *)this + 16))
  {
    v2 = v2 & 0xFFFFFF7F | (*((unsigned __int8 *)this + 17) << 7);
    v1 = v1 | 0x80;
  }
  if (*((_BYTE *)this + 18))
  {
    v3 = *((__int16 *)this + 10);
    if (v3 >= 3)
      v3 = 3;
    if (v3 <= -3)
      v3 = -3;
    v4 = v3 ^ (v3 >> 15);
    v5 = v4 & 0x80000001;
    v6 = (v4 & 0x80000001) == 1;
    v7 = (v4 & 0xFFFFFFFE) == 2;
    v8 = v7;
    v9 = !v7;
    v10 = v5 != 1;
    if (v3 < 0)
      v8 = v9;
    else
      v10 = v6;
    v11 = v2 & 0xFFFFF8FF | v3 & 0x100;
    if (v10)
      v12 = 512;
    else
      v12 = 0;
    v13 = v11 | v12;
    if (v8)
      v14 = 1024;
    else
      v14 = 0;
    v2 = v13 | v14;
    v1 = v1 | 0x700;
  }
  if (*((_BYTE *)this + 4))
  {
    v2 = v2 & 0xFFF9FFFF | ((*((_BYTE *)this + 5) & 3) << 17);
    v1 = v1 | 0x60000;
  }
  return v2 | (unint64_t)(v1 << 32);
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *a2;
  v3 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 8)
                       + 4
                       * (((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) ^ ((0x94D049BB133111EBLL * (v3 ^ (v3 >> 27))) >> 31))
                        % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v4 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v6 + 40 * v4 + 16) != v2)
  {
    while (1)
    {
      LODWORD(v4) = *(_DWORD *)(v6 + 40 * v4 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v4 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v6 + 40 * v4 + 16) == v2)
        return v6 + 40 * v4 + 24;
    }
    return 0;
  }
  return v6 + 40 * v4 + 24;
}

__n128 re::DynamicArray<re::VFXScene>::add(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;
  __int128 v33;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __n128 result;
  __int128 v44;
  __int128 v45;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  if (v5 >= v4)
  {
    v6 = v5 + 1;
    if (v4 < v6)
    {
      if (*(_QWORD *)a1)
      {
        v7 = 2 * v4;
        v8 = v4 == 0;
        v9 = 8;
        if (!v8)
          v9 = v7;
        if (v9 <= v6)
          v10 = v6;
        else
          v10 = v9;
        re::DynamicArray<re::VFXScene>::setCapacity((_QWORD *)a1, v10);
      }
      else
      {
        re::DynamicArray<re::VFXScene>::setCapacity((_QWORD *)a1, v6);
        ++*(_DWORD *)(a1 + 24);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
  }
  v11 = *(_QWORD *)(a1 + 32);
  v12 = v11 + 800 * v5;
  v13 = *a2;
  v14 = a2[1];
  v15 = a2[3];
  *(_OWORD *)(v12 + 32) = a2[2];
  *(_OWORD *)(v12 + 48) = v15;
  *(_OWORD *)v12 = v13;
  *(_OWORD *)(v12 + 16) = v14;
  v16 = a2[4];
  v17 = a2[5];
  v18 = a2[7];
  *(_OWORD *)(v12 + 96) = a2[6];
  *(_OWORD *)(v12 + 112) = v18;
  *(_OWORD *)(v12 + 64) = v16;
  *(_OWORD *)(v12 + 80) = v17;
  v19 = a2[8];
  v20 = a2[9];
  v21 = a2[11];
  *(_OWORD *)(v12 + 160) = a2[10];
  *(_OWORD *)(v12 + 176) = v21;
  *(_OWORD *)(v12 + 128) = v19;
  *(_OWORD *)(v12 + 144) = v20;
  v22 = a2[12];
  v23 = a2[13];
  v24 = a2[15];
  *(_OWORD *)(v12 + 224) = a2[14];
  *(_OWORD *)(v12 + 240) = v24;
  *(_OWORD *)(v12 + 192) = v22;
  *(_OWORD *)(v12 + 208) = v23;
  *(_OWORD *)(v12 + 288) = 0u;
  *(_OWORD *)(v12 + 304) = 0u;
  *(_OWORD *)(v12 + 256) = 0u;
  *(_OWORD *)(v12 + 272) = 0u;
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::swap((uint64_t *)(v12 + 256), (uint64_t *)a2 + 32);
  *(_DWORD *)(v12 + 320) = *((_DWORD *)a2 + 80);
  v25 = *((unsigned __int8 *)a2 + 328);
  *(_BYTE *)(v12 + 328) = v25;
  if (v25)
    *(_QWORD *)(v12 + 336) = *((_QWORD *)a2 + 42);
  *(_OWORD *)(v12 + 344) = *(__int128 *)((char *)a2 + 344);
  v26 = *(__int128 *)((char *)a2 + 360);
  v27 = *(__int128 *)((char *)a2 + 376);
  v28 = *(__int128 *)((char *)a2 + 408);
  *(_OWORD *)(v12 + 392) = *(__int128 *)((char *)a2 + 392);
  *(_OWORD *)(v12 + 408) = v28;
  *(_OWORD *)(v12 + 360) = v26;
  *(_OWORD *)(v12 + 376) = v27;
  v29 = *(__int128 *)((char *)a2 + 424);
  v30 = *(__int128 *)((char *)a2 + 440);
  v31 = *(__int128 *)((char *)a2 + 472);
  *(_OWORD *)(v12 + 456) = *(__int128 *)((char *)a2 + 456);
  *(_OWORD *)(v12 + 472) = v31;
  *(_OWORD *)(v12 + 424) = v29;
  *(_OWORD *)(v12 + 440) = v30;
  v32 = *((unsigned __int8 *)a2 + 496);
  *(_BYTE *)(v12 + 496) = v32;
  if (v32)
  {
    v33 = a2[33];
    *(_OWORD *)(v12 + 512) = a2[32];
    *(_OWORD *)(v12 + 528) = v33;
  }
  *(_QWORD *)(v12 + 544) = *((_QWORD *)a2 + 68);
  v34 = *((unsigned __int8 *)a2 + 560);
  *(_BYTE *)(v12 + 560) = v34;
  if (v34)
  {
    v35 = a2[36];
    v36 = a2[37];
    v37 = a2[39];
    *(_OWORD *)(v12 + 608) = a2[38];
    *(_OWORD *)(v12 + 624) = v37;
    *(_OWORD *)(v12 + 576) = v35;
    *(_OWORD *)(v12 + 592) = v36;
  }
  *(_QWORD *)(v12 + 640) = *((_QWORD *)a2 + 80);
  v38 = v11 + 800 * v5;
  *(_QWORD *)(v38 + 656) = *((_QWORD *)a2 + 82);
  v39 = *((_QWORD *)a2 + 83);
  a2[41] = 0u;
  *(_QWORD *)(v38 + 664) = v39;
  v40 = a2[42];
  v41 = a2[43];
  v42 = a2[45];
  *(_OWORD *)(v38 + 704) = a2[44];
  *(_OWORD *)(v38 + 720) = v42;
  *(_OWORD *)(v38 + 672) = v40;
  *(_OWORD *)(v38 + 688) = v41;
  result = (__n128)a2[46];
  v44 = a2[47];
  v45 = a2[48];
  *(_OWORD *)(v38 + 780) = *(__int128 *)((char *)a2 + 780);
  *(_OWORD *)(v38 + 752) = v44;
  *(_OWORD *)(v38 + 768) = v45;
  *(__n128 *)(v38 + 736) = result;
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t *re::HashTable<unsigned long long,re::ecs2::VFXSystem::updateSceneForRenderInternal(re::ecs2::Scene *,re::ecs2::System::UpdateContext)::PerWorldData,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::~HashTable(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::DynamicArray<re::VFXScene>::deinit(v6 + 24);
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 64;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return a1;
}

void re::TextureTable::setTexture(_QWORD *a1, uint64_t *a2, id *a3)
{
  id v6;
  uint64_t v7;

  if (*a3)
    v6 = objc_msgSend(*a3, sel_protectionOptions);
  else
    v6 = 0;
  v7 = *a2;
  re::TextureTableImpl<NS::SharedPtr<MTL::Texture>>::setTexture(a1, &v7, a3, (uint64_t)v6);
}

double re::ecs2::VFXSceneComponent::VFXSceneComponent(re::ecs2::VFXSceneComponent *this)
{
  uint64_t v1;
  double result;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED45F70;
  *(_QWORD *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 40) = 1;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_DWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 100) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 148) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_DWORD *)(v1 + 192) = 0;
  *(_QWORD *)(v1 + 196) = 0x7FFFFFFFLL;
  *(_DWORD *)(v1 + 208) = 0;
  *(_WORD *)(v1 + 212) = 0;
  *(_QWORD *)(v1 + 216) = 0;
  *(_BYTE *)(v1 + 224) = 0;
  *(_OWORD *)(v1 + 244) = 0u;
  *(_OWORD *)(v1 + 228) = 0u;
  *(_OWORD *)(v1 + 272) = 0u;
  *(_OWORD *)(v1 + 288) = xmmword_2260E5F10;
  *(_OWORD *)(v1 + 260) = 0u;
  *(_OWORD *)(v1 + 304) = xmmword_2260E5F20;
  *(_OWORD *)(v1 + 320) = xmmword_2260E5F40;
  *(_OWORD *)(v1 + 336) = xmmword_2260E5D70;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(v1 + 352) = result;
  *(_BYTE *)(v1 + 360) = 0;
  return result;
}

void re::ecs2::VFXSceneComponent::~VFXSceneComponent(re::ecs2::VFXSceneComponent *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED45F70;
  re::ecs2::VFXSceneComponent::clearBindings(this);
  v2 = *((_QWORD *)this + 27);
  if (v2)
  {

    *((_QWORD *)this + 27) = 0;
  }
  _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)this + 20);
  re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 14);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 8);

  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::ecs2::VFXSceneComponent::~VFXSceneComponent(this);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::VFXSceneComponent::clearBindings(re::ecs2::VFXSceneComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;

  re::HashTable<unsigned long long,unsigned long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)this + 64);
  re::HashTable<unsigned long,re::ecs2::VFXREBinding,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear((uint64_t)this + 112);
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v3 = *((_QWORD *)this + 27);
  if (v3)
LABEL_3:
    re::DynamicArray<re::ecs2::VFXREBindingDescriptor>::clear((_QWORD *)(v3 + 32));
LABEL_4:
  v4 = *((unsigned int *)this + 48);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*((_QWORD *)this + 22) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 12;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *((_DWORD *)this + 48);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  v8 = *((_DWORD *)this + 48);
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v9 = v5;
    do
    {
      CFRelease(*(CFTypeRef *)(*((_QWORD *)this + 22) + 48 * v9 + 40));
      v8 = *((_DWORD *)this + 48);
      if (v8 <= (int)v5 + 1)
        v10 = v5 + 1;
      else
        v10 = *((_DWORD *)this + 48);
      v11 = v5;
      while (1)
      {
        v9 = (v11 + 1);
        if (v10 - 1 == v11)
          break;
        ++v11;
        LODWORD(v5) = v9;
        if ((*(_DWORD *)(*((_QWORD *)this + 22) + 48 * v9 + 8) & 0x80000000) != 0)
          goto LABEL_22;
      }
      LODWORD(v5) = v10;
LABEL_22:
      ;
    }
    while ((_DWORD)v4 != (_DWORD)v5);
  }
  if (*((_DWORD *)this + 47))
  {
    v12 = *((unsigned int *)this + 46);
    if ((_DWORD)v12)
    {
      memset_pattern16(*((void **)this + 21), &unk_2260EB7B0, 4 * v12);
      v8 = *((_DWORD *)this + 48);
    }
    if (v8)
    {
      v13 = 0;
      v14 = 48 * v8;
      do
      {
        v15 = *((_QWORD *)this + 22) + v13;
        v16 = *(_DWORD *)(v15 + 8);
        if (v16 < 0)
          *(_DWORD *)(v15 + 8) = v16 & 0x7FFFFFFF;
        v13 += 48;
      }
      while (v14 != v13);
    }
    *((_DWORD *)this + 47) = 0;
    *((_DWORD *)this + 48) = 0;
    v17 = *((_DWORD *)this + 50) + 1;
    *((_DWORD *)this + 49) = 0x7FFFFFFF;
    *((_DWORD *)this + 50) = v17;
  }
}

void re::ecs2::VFXSceneComponent::createDetachedSceneComponent(_QWORD *a1@<X8>)
{
  re::ecs2::VFXSceneComponent *v3;
  double v4;
  uint64_t v5;
  ArcSharedObject *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (re::ecs2::VFXSceneComponent *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                            + 7)
                                                                                         + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 368, 0);
  v4 = re::ecs2::VFXSceneComponent::VFXSceneComponent(v3);
  *a1 = v5;
  v6 = (ArcSharedObject *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD, double))(**((_QWORD **)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                                                                                        + 7)
                                                                                     + 32))(*((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType+ 7), 96, 0, v4);
  ArcSharedObject::ArcSharedObject(v6, 0);
  *(_QWORD *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 24) = 0;
  *(_QWORD *)v7 = &off_24ED462F8;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_DWORD *)(v7 + 56) = 0;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  v8 = *((_QWORD *)v3 + 27);
  *((_QWORD *)v3 + 27) = v7;
  if (v8)

}

void re::ecs2::VFXSceneComponent::setVFX(uint64_t a1, const re::AssetHandle *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    v5 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  else
    v5 = *(_QWORD *)(a1 + 216);
  re::AssetHandle::AssetHandle((re::AssetHandle *)&v8, a2);
  v6 = *(_OWORD *)(v5 + 72);
  *(_OWORD *)(v5 + 72) = v8;
  v8 = v6;
  v7 = *(_QWORD *)(v5 + 88);
  *(_QWORD *)(v5 + 88) = v9;
  v9 = v7;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v8);
  re::ecs2::VFXSceneMetadataComponent::markDirtyAndMarkDirtyForNetwork((re::ecs2::VFXSceneMetadataComponent *)v5);
  *(_BYTE *)(a1 + 213) = 0;
  re::ecs2::VFXSceneComponent::loadModelBindingStates((_anonymous_namespace_ **)a1);
  *(_BYTE *)(a1 + 213) = 1;
}

void re::ecs2::VFXSceneMetadataComponent::markDirtyAndMarkDirtyForNetwork(re::ecs2::VFXSceneMetadataComponent *this)
{
  uint64_t v1;
  re::ecs2::NetworkComponent *v3;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    re::ecs2::Component::enqueueMarkDirty((uint64_t)this);
    v3 = *(re::ecs2::NetworkComponent **)(v1 + 200);
    if (v3)
      re::ecs2::NetworkComponent::markDirty(v3, this);
  }
}

void re::ecs2::VFXSceneComponent::setVFXFromParticleEmitter(uint64_t a1, const re::AssetHandle *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    v5 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  else
    v5 = *(_QWORD *)(a1 + 216);
  re::AssetHandle::AssetHandle((re::AssetHandle *)&v8, a2);
  v6 = *(_OWORD *)(v5 + 72);
  *(_OWORD *)(v5 + 72) = v8;
  v8 = v6;
  v7 = *(_QWORD *)(v5 + 88);
  *(_QWORD *)(v5 + 88) = v9;
  v9 = v7;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v8);
  re::ecs2::VFXSceneMetadataComponent::markDirtyAndMarkDirtyForNetwork((re::ecs2::VFXSceneMetadataComponent *)v5);
  *(_BYTE *)(a1 + 213) = 0;
}

void re::ecs2::VFXSceneComponent::loadModelBindingStates(_anonymous_namespace_ **this)
{
  void *v2;
  _anonymous_namespace_ *v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  _anonymous_namespace_ *v7;
  int v8;
  signed int v9;
  unsigned int *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  signed int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int *v26;
  int *v27;
  _OWORD *v28;
  __int128 v29;
  unint64_t v30;
  uint64_t j;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  int v41;
  _anonymous_namespace_ *v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *Descriptor;
  __int128 v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t i;
  void *v56;
  unint64_t v57;
  re::ecs2::VFXSceneMetadataComponent *v58;
  char *__b;
  uint64_t v60;
  id v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  _BYTE v66[32];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t *v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;

  re::ecs2::VFXSceneComponent::modelScene((re::ecs2::VFXSceneComponent *)this, &v61);
  objc_msgSend(v61, "scene");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v2)
    goto LABEL_58;
  v4 = this[2];
  if (v4)
  {
    v3 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::getOrAdd((_anonymous_namespace_ *)((char *)v4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v5 = v3;
    if (!v3)
      goto LABEL_58;
  }
  else
  {
    v5 = this[27];
    if (!v5)
    {
LABEL_58:

      return;
    }
  }
  v6 = *((unsigned int *)this + 35);
  v76 = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v7 = (_anonymous_namespace_ *)re::DynamicArray<std::pair<unsigned long,re::ecs2::VFXREBinding>>::setCapacity(&v72, v6);
  v8 = ++v75;
  v9 = *((_DWORD *)this + 35);
  v10 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  v11 = 245;
  do
  {
    v12 = v11 >> 1;
    v13 = &v10[v11 >> 1];
    v15 = *v13;
    v14 = v13 + 1;
    v11 += ~(v11 >> 1);
    if (v15 < v9)
      v10 = v14;
    else
      v11 = v12;
  }
  while (v11);
  v16 = *v10;
  v17 = (4 * v16 + 15) & 0x7FFFFFFF0;
  if (__b)
  {
    if ((_DWORD)v16)
      memset_pattern16(__b, &unk_2260EB7B0, 4 * v16);
    v57 = v16;
    v60 = *((unsigned int *)this + 36);
    v56 = v2;
    v19 = 0;
    if ((_DWORD)v60)
    {
      v20 = (int *)((char *)this[16] + 8);
      while (1)
      {
        v21 = *v20;
        v20 += 22;
        if (v21 < 0)
          break;
        if (v60 == ++v19)
        {
          LODWORD(v19) = *((_DWORD *)this + 36);
          break;
        }
      }
    }
    v58 = v5;
    v22 = &__b[v17];
    if ((_DWORD)v60 == (_DWORD)v19)
    {
      v23 = v76;
      v24 = v74;
    }
    else
    {
      v37 = v19;
      v24 = v74;
      do
      {
        v38 = (uint64_t)this[16] + 88 * v37;
        v40 = *(void **)(v38 + 16);
        v39 = v38 + 16;
        v41 = *(_DWORD *)(v39 + 8);
        v61 = v40;
        v62 = v41;
        v42 = (_anonymous_namespace_ *)re::DynamicArray<BOOL>::DynamicArray((uint64_t)&v63, (uint64_t *)(v39 + 16));
        *(_OWORD *)&v66[8] = *(_OWORD *)(v39 + 56);
        if (v24 >= v73)
        {
          if (v73 < v24 + 1)
          {
            if (v72)
            {
              v43 = 8;
              if (v73)
                v43 = 2 * v73;
              if (v43 <= v24 + 1)
                v44 = v24 + 1;
              else
                v44 = v43;
              re::DynamicArray<std::pair<unsigned long,re::ecs2::VFXREBinding>>::setCapacity(&v72, v44);
              v8 = v75;
            }
            else
            {
              re::DynamicArray<std::pair<unsigned long,re::ecs2::VFXREBinding>>::setCapacity(&v72, v24 + 1);
              v8 = v75 + 1;
            }
          }
          v24 = v74;
        }
        v23 = v76;
        v45 = v76 + 72 * v24;
        *(_QWORD *)v45 = v61;
        *(_DWORD *)(v45 + 8) = v62;
        *(_QWORD *)(v45 + 48) = 0;
        *(_QWORD *)(v45 + 24) = 0;
        *(_QWORD *)(v45 + 32) = 0;
        *(_QWORD *)(v45 + 16) = 0;
        *(_DWORD *)(v45 + 40) = 0;
        *(_QWORD *)(v45 + 16) = v63;
        v63 = 0;
        *(_QWORD *)(v45 + 24) = v64;
        v64 = 0;
        v46 = *(_QWORD *)(v45 + 32);
        *(_QWORD *)(v45 + 32) = v65;
        *(_QWORD *)&v65 = v46;
        v47 = *(_QWORD *)(v45 + 48);
        *(_QWORD *)(v45 + 48) = *(_QWORD *)v66;
        *(_QWORD *)v66 = v47;
        ++DWORD2(v65);
        ++*(_DWORD *)(v45 + 40);
        *(_OWORD *)(v45 + 56) = *(_OWORD *)&v66[8];
        v74 = ++v24;
        v75 = ++v8;
        if (v63 && *(_QWORD *)v66)
          (*(void (**)(void))(*(_QWORD *)v63 + 40))();
        Descriptor = (_OWORD *)re::ecs2::VFXSceneMetadataComponent::getDescriptor(v58, *(_DWORD *)(v39 + 8));
        re::DynamicString::DynamicString((re::DynamicString *)&v61, (const re::DynamicString *)Descriptor);
        re::DynamicString::DynamicString((re::DynamicString *)&v65, (const re::DynamicString *)(Descriptor + 2));
        re::DynamicString::DynamicString((re::DynamicString *)&v66[16], (const re::DynamicString *)(Descriptor + 4));
        re::DynamicString::DynamicString((re::DynamicString *)&v68, (const re::DynamicString *)(Descriptor + 6));
        v49 = Descriptor[9];
        v70 = Descriptor[8];
        v71 = v49;
        v50 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)v39 ^ (*(_QWORD *)v39 >> 30));
        v51 = *(unsigned int *)&__b[4
                                  * (((0x94D049BB133111EBLL * (v50 ^ (v50 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                     * (v50 ^ (v50 >> 27))) >> 31))
                                   % v57)];
        if ((_DWORD)v51 == 0x7FFFFFFF)
        {
          v51 = 0x7FFFFFFFLL;
        }
        else
        {
          v54 = *(_QWORD *)&v22[32 * v51 + 16];
          for (i = v51; v54 != *(_QWORD *)v39; v51 = i)
          {
            i = *(_DWORD *)&v22[32 * i + 8] & 0x7FFFFFFF;
            v51 = 0x7FFFFFFFLL;
            if (i == 0x7FFFFFFF)
              break;
            v54 = *(_QWORD *)&v22[32 * i + 16];
          }
        }
        *(_QWORD *)&v22[32 * v51 + 24] = v70;
        if ((_QWORD)v68)
        {
          if ((BYTE8(v68) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v68 + 40))();
          v68 = 0u;
          v69 = 0u;
        }
        if (*(_QWORD *)&v66[16])
        {
          if ((v66[24] & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)&v66[16] + 40))();
          *(_OWORD *)&v66[16] = 0u;
          v67 = 0u;
        }
        if ((_QWORD)v65)
        {
          if ((BYTE8(v65) & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v65 + 40))();
          v65 = 0u;
          *(_OWORD *)v66 = 0u;
        }
        if (v61 && (v62 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v61 + 40))();
        if (*((_DWORD *)this + 36) <= (v19 + 1))
          v52 = v19 + 1;
        else
          v52 = *((_DWORD *)this + 36);
        while (1)
        {
          v37 = (v19 + 1);
          if (v52 - 1 == (_DWORD)v19)
            break;
          LODWORD(v19) = v19 + 1;
          v53 = v37;
          if ((*((_DWORD *)this[16] + 22 * v37 + 2) & 0x80000000) != 0)
            goto LABEL_98;
        }
        v53 = v52;
LABEL_98:
        LODWORD(v19) = v53;
      }
      while ((_DWORD)v60 != v53);
    }
    re::ecs2::VFXSceneComponent::clearBindings((re::ecs2::VFXSceneComponent *)this);
    re::ecs2::VFXSceneComponent::initializeBindings((re::ecs2::VFXSceneComponent *)this);
    if (v24)
    {
      v25 = v23 + 72 * v24;
      do
      {
        if (*(_DWORD *)(v23 + 56))
        {
          v26 = (int *)re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)(this + 14), (uint64_t *)v23);
          if (v26)
          {
            v27 = v26;
            v28 = (_OWORD *)re::ecs2::VFXSceneMetadataComponent::getDescriptor(v58, *v26);
            re::DynamicString::DynamicString((re::DynamicString *)&v61, (const re::DynamicString *)v28);
            re::DynamicString::DynamicString((re::DynamicString *)&v65, (const re::DynamicString *)(v28 + 2));
            re::DynamicString::DynamicString((re::DynamicString *)&v66[16], (const re::DynamicString *)(v28 + 4));
            re::DynamicString::DynamicString((re::DynamicString *)&v68, (const re::DynamicString *)(v28 + 6));
            v29 = v28[9];
            v70 = v28[8];
            v71 = v29;
            v30 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)v23 ^ (*(_QWORD *)v23 >> 30));
            for (j = *(unsigned int *)&__b[4
                                          * (((0x94D049BB133111EBLL * (v30 ^ (v30 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                             * (v30 ^ (v30 >> 27))) >> 31))
                                           % v57)]; (_DWORD)j != 0x7FFFFFFF; j = *(_DWORD *)&v22[32 * j + 8] & 0x7FFFFFFF)
            {
              if (*(_QWORD *)&v22[32 * j + 16] == *(_QWORD *)v23)
              {
                if ((_QWORD)v70 == *(_QWORD *)&v22[32 * j + 24])
                {
                  re::DynamicArray<BOOL>::operator=((uint64_t)(v27 + 2), (uint64_t *)(v23 + 16));
                  v27[12] = 1;
                }
                break;
              }
            }
            if ((_QWORD)v68)
            {
              if ((BYTE8(v68) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v68 + 40))();
              v68 = 0u;
              v69 = 0u;
            }
            if (*(_QWORD *)&v66[16])
            {
              if ((v66[24] & 1) != 0)
                (*(void (**)(void))(**(_QWORD **)&v66[16] + 40))();
              *(_OWORD *)&v66[16] = 0u;
              v67 = 0u;
            }
            if ((_QWORD)v65)
            {
              if ((BYTE8(v65) & 1) != 0)
                (*(void (**)(void))(*(_QWORD *)v65 + 40))();
              v65 = 0u;
              *(_OWORD *)v66 = 0u;
            }
            if (v61 && (v62 & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v61 + 40))();
          }
        }
        v23 += 72;
      }
      while (v23 != v25);
    }
    re::ecs2::VFXSceneComponent::updateBindingStatesInitialValues((re::ecs2::VFXSceneComponent *)this);
    v32 = v72;
    if (v72)
    {
      v33 = v76;
      if (v76)
      {
        if (v74)
        {
          v34 = 72 * v74;
          v35 = (_QWORD *)(v76 + 48);
          do
          {
            v36 = *(v35 - 4);
            if (v36)
            {
              if (*v35)
                (*(void (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
              *v35 = 0;
              *(v35 - 3) = 0;
              *(v35 - 2) = 0;
              *(v35 - 4) = 0;
              ++*((_DWORD *)v35 - 2);
            }
            v35 += 9;
            v34 -= 72;
          }
          while (v34);
        }
        (*(void (**)(uint64_t *, uint64_t))(*v32 + 40))(v32, v33);
      }
    }
    v2 = v56;
    goto LABEL_58;
  }
  re::internal::assertLog((re::internal *)4, v18, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
  _os_crash();
  __break(1u);
}

id *re::ecs2::VFXSceneComponent::modelScene@<X0>(re::ecs2::VFXSceneComponent *this@<X0>, id *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  id *result;

  *a2 = 0;
  v3 = *((_QWORD *)this + 2);
  if (v3)
    v4 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  else
    v4 = *((_QWORD *)this + 27);
  result = (id *)re::AssetHandle::loadedAsset<re::VFXAsset>((re::VFXAsset *)(v4 + 72));
  if (result)
    return re::ObjCObject::operator=(a2, result + 8);
  return result;
}

uint64_t re::AssetHandle::loadedAsset<re::VFXAsset>(re::VFXAsset *a1)
{
  uint64_t *v2;

  if (!*((_QWORD *)a1 + 1))
    return 0;
  v2 = re::VFXAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

void re::ecs2::VFXSceneComponent::getParameterValueCopy(uint64_t a1, void *a2, uint64_t a3, _QWORD *a4)
{
  id v7;
  id v8;
  const char *v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  re::ecs2::VFXSceneMetadataComponent *v13;
  uint64_t *v14;
  int *v15;
  uint64_t *v16;
  uint64_t Descriptor;
  uint64_t v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v7 = a2;
  re::ecs2::VFXSceneComponent::applyReadbackUpdates(a1);
  v8 = objc_retainAutorelease(v7);
  v9 = (const char *)objc_msgSend(v8, "UTF8String");
  v10 = strlen(v9);
  if (v10)
  {
    MurmurHash3_x64_128((uint64_t)v9, v10, 0, (unint64_t *)v18);
    v11 = (v18[1] + (v18[0] << 6) + ((unint64_t)v18[0] >> 2) - 0x61C8864680B583E9) ^ v18[0];
  }
  else
  {
    v11 = 0;
  }
  v18[0] = v11;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v13 = (re::ecs2::VFXSceneMetadataComponent *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v12 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (!v13)
      goto LABEL_11;
  }
  else
  {
    v13 = *(re::ecs2::VFXSceneMetadataComponent **)(a1 + 216);
    if (!v13)
      goto LABEL_11;
  }
  v14 = (uint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(a1 + 64, v18);
  if (v14)
  {
    v15 = (int *)re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet(a1 + 112, v14);
    if (v15)
    {
      v16 = (uint64_t *)(v15 + 2);
      Descriptor = re::ecs2::VFXSceneMetadataComponent::getDescriptor(v13, *v15);
      re::DynamicArray<BOOL>::operator=(a3, v16);
      *a4 = *(_QWORD *)(Descriptor + 128);
    }
  }
LABEL_11:

}

uint64_t re::ecs2::VFXSceneComponent::applyReadbackUpdates(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;

  if (*(_BYTE *)(this + 212))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 16);
    if (v2)
    {
      this = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneReadbackComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (this)
      {
        v3 = this;
        if (!*(_BYTE *)(this + 80))
        {
          v4 = *(unsigned int *)(this + 64);
          if ((_DWORD)v4)
          {
            v5 = 0;
            v6 = (int *)(*(_QWORD *)(this + 48) + 8);
            while (1)
            {
              v7 = *v6;
              v6 += 22;
              if (v7 < 0)
                break;
              if (v4 == ++v5)
              {
                LODWORD(v5) = *(_DWORD *)(this + 64);
                break;
              }
            }
          }
          else
          {
            LODWORD(v5) = 0;
          }
          if ((_DWORD)v4 != (_DWORD)v5)
          {
            v8 = v5;
            v9 = v1 + 112;
            do
            {
              v10 = *(_QWORD *)(v3 + 48);
              this = re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet(v9, (uint64_t *)(v10 + 88 * v8 + 16));
              if (this)
                this = re::DynamicArray<BOOL>::operator=(this + 8, (uint64_t *)(v10 + 88 * v8 + 32));
              v11 = *(_DWORD *)(v3 + 64);
              if (v11 <= (int)v5 + 1)
                v11 = v5 + 1;
              while (1)
              {
                v8 = (v5 + 1);
                if (v11 - 1 == (_DWORD)v5)
                  break;
                LODWORD(v5) = v5 + 1;
                v12 = v8;
                if ((*(_DWORD *)(*(_QWORD *)(v3 + 48) + 88 * v8 + 8) & 0x80000000) != 0)
                  goto LABEL_21;
              }
              v12 = v11;
LABEL_21:
              LODWORD(v5) = v12;
            }
            while ((_DWORD)v4 != v12);
          }
          *(_BYTE *)(v3 + 80) = 1;
        }
      }
    }
  }
  return this;
}

uint64_t re::ecs2::VFXSceneMetadataComponent::getDescriptor(re::ecs2::VFXSceneMetadataComponent *this, int a2)
{
  if (*((_QWORD *)this + 6) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)this + 8) + 160 * a2;
}

uint64_t *re::ecs2::VFXSceneComponent::bindingStorageWithIdentifier@<X0>(re::ecs2::VFXSceneComponent *this@<X0>, id a2@<X1>, uint64_t a3@<X8>)
{
  const char *v5;
  size_t v6;
  unint64_t v7;
  uint64_t *result;
  uint64_t v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v5 = (const char *)objc_msgSend(objc_retainAutorelease(a2), "UTF8String");
  v6 = strlen(v5);
  if (v6)
  {
    MurmurHash3_x64_128((uint64_t)v5, v6, 0, (unint64_t *)v9);
    v7 = (v9[1] + (v9[0] << 6) + ((unint64_t)v9[0] >> 2) - 0x61C8864680B583E9) ^ v9[0];
  }
  else
  {
    v7 = 0;
  }
  v9[0] = v7;
  result = (uint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)this + 64, v9);
  if (result)
  {
    result = (uint64_t *)re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)this + 112, result);
    if (result)
      return (uint64_t *)re::DynamicArray<BOOL>::DynamicArray(a3, result + 1);
  }
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
  return result;
}

void re::ecs2::VFXSceneComponent::setParameterValueCopy(re::ecs2::VFXSceneMetadataComponent *a1, void *a2, uint64_t a3, unint64_t a4, void *a5)
{
  id v8;
  void (**v9)(id, _QWORD);
  id v10;
  const char *v11;
  size_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  re::ecs2::VFXSceneMetadataComponent *v18;
  unint64_t v19;
  unint64_t __s1[9];

  __s1[8] = *MEMORY[0x24BDAC8D0];
  v8 = a2;
  v9 = a5;
  v10 = objc_retainAutorelease(v8);
  v11 = (const char *)objc_msgSend(v10, "UTF8String");
  v12 = strlen(v11);
  if (v12)
  {
    MurmurHash3_x64_128((uint64_t)v11, v12, 0, __s1);
    v13 = (__s1[1] + (__s1[0] << 6) + (__s1[0] >> 2) - 0x61C8864680B583E9) ^ __s1[0];
  }
  else
  {
    v13 = 0;
  }
  v19 = v13;
  v14 = (uint64_t *)re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet((uint64_t)a1 + 64, (uint64_t *)&v19);
  if (v14)
  {
    v15 = re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)a1 + 112, v14);
    if (v15)
    {
      v16 = v15;
      v17 = *((_QWORD *)a1 + 2);
      if (v17)
      {
        v18 = (re::ecs2::VFXSceneMetadataComponent *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v17 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VFXSceneMetadataComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (!v18)
          goto LABEL_16;
      }
      else
      {
        v18 = (re::ecs2::VFXSceneMetadataComponent *)*((_QWORD *)a1 + 27);
        if (!v18)
          goto LABEL_16;
      }
      re::ecs2::VFXSceneMetadataComponent::getDescriptor(v18, *(_DWORD *)v16);
      if (a4 > 0x40)
      {
        re::DynamicArray<BOOL>::resize(v16 + 8, a4);
        v9[2](v9, *(_QWORD *)(v16 + 40));
        goto LABEL_15;
      }
      ((void (**)(id, unint64_t *))v9)[2](v9, __s1);
      if (*(_QWORD *)(v16 + 24) != a4 || memcmp(__s1, *(const void **)(v16 + 40), a4))
      {
        re::DynamicArray<BOOL>::resize(v16 + 8, a4);
        memcpy(*(void **)(v16 + 40), __s1, a4);
LABEL_15:
        ++*(_DWORD *)(v16 + 48);
        re::ecs2::VFXSceneMetadataComponent::markDirtyAndMarkDirtyForNetwork(a1);
      }
    }
  }
LABEL_16:

}

void ___ZN2re4ecs217VFXSceneComponent12loadIfNeededERNS_13RenderManagerERNS_12AssetServiceE_block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *WeakRetained;
  _QWORD *v4;
  void *v5;
  NSObject *v6;
  id v7;
  uint8_t buf[16];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  v5 = *(void **)(a2 + 40);
  if (v5)
  {
    if (!WeakRetained)
      return;
    if (WeakRetained[3] == a2)
    {
      v7 = v5;
      re::ecs2::VFXSceneComponent::setRuntimeScene((uint64_t)(v4 - 1), &v7);

      v4[3] = 0;
    }
    goto LABEL_8;
  }
  v6 = *re::ecsComponentsLogObjects((re *)WeakRetained);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "VFXLoadRuntimeTask has invalid runtime", buf, 2u);
  }
  if (v4)
LABEL_8:

}

void re::ecs2::VFXSceneComponent::setRuntimeScene(uint64_t a1, id *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  void *v8;
  id v9;
  _anonymous_namespace_ *v10;
  id v11;
  _anonymous_namespace_ *v12;
  unint64_t v13;
  _BYTE *v14;
  const void *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  void *v23;
  id obj;
  uint64_t v25;
  __n128 buf;
  const void *v27;
  unint64_t v28;
  uint64_t v29;
  char v30;
  _BYTE v31[23];
  uint8_t v32[8];
  char v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  re::ObjCObject::operator=((id *)(a1 + 48), a2);
  objc_msgSend(*(id *)(a1 + 48), "effect");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v23 = v3;
    objc_msgSend(v3, "bindings");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
    if (!v5)
      goto LABEL_29;
    v6 = v5;
    v25 = *(_QWORD *)v35;
    while (1)
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v35 != v25)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * i);
        objc_msgSend(v8, "objectName");
        v9 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v10 = (_anonymous_namespace_ *)objc_msgSend(v9, "UTF8String");

        objc_msgSend(v8, "bindingName");
        v11 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v12 = (_anonymous_namespace_ *)objc_msgSend(v11, "UTF8String");

        v13 = objc_msgSend(v8, "type");
        v28 = 0;
        if (re::HashTable<re::ecs2::Scene const*,re::DataArray<re::ecs2::PhysicsSimulationData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet(a1 + 112, (uint64_t *)&v28))
        {
          if ((v30 & 1) != 0)
            v14 = *(_BYTE **)&v31[7];
          else
            v14 = v31;
          v15 = (const void *)objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v14);
          CFRetain(v15);
          buf = (__n128)(unint64_t)objc_msgSend(v8, "objectID");
          v27 = v15;
          v16 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v28 ^ (v28 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v28 ^ (v28 >> 30))) >> 27));
          v17 = v16 ^ (v16 >> 31);
          if (!*(_QWORD *)(a1 + 160))
          {
            LODWORD(v18) = 0;
LABEL_20:
            re::HashTable<unsigned long,re::ecs2::VFXSceneComponent::BindingRuntimeData,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(a1 + 160, v18, v17, &v28, &buf);
            ++*(_DWORD *)(a1 + 200);
            goto LABEL_21;
          }
          v18 = v17 % *(unsigned int *)(a1 + 184);
          v19 = *(unsigned int *)(*(_QWORD *)(a1 + 168) + 4 * v18);
          if ((_DWORD)v19 == 0x7FFFFFFF)
            goto LABEL_20;
          v20 = *(_QWORD *)(a1 + 176);
          while (*(_QWORD *)(v20 + 48 * v19 + 16) != v28)
          {
            LODWORD(v19) = *(_DWORD *)(v20 + 48 * v19 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v19 == 0x7FFFFFFF)
              goto LABEL_20;
          }
        }
        else
        {
          v21 = *re::ecsComponentsLogObjects(0);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
          {
            buf.n128_u16[0] = 0;
            _os_log_debug_impl(&dword_224FE9000, v21, OS_LOG_TYPE_DEBUG, "Missing VFX binding", (uint8_t *)&buf, 2u);
          }
        }
LABEL_21:
        if (v29 && (v30 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v29 + 40))();
        if (*(_QWORD *)v32 && (v33 & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)v32 + 40))();
      }
      v6 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
      if (!v6)
      {
LABEL_29:

        v4 = v23;
        goto LABEL_32;
      }
    }
  }
  v22 = *re::ecsComponentsLogObjects(0);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)v32 = 0;
    _os_log_debug_impl(&dword_224FE9000, v22, OS_LOG_TYPE_DEBUG, "Unable to get VFX effect from runtime scene", v32, 2u);
  }
LABEL_32:

}

void __copy_helper_block_a8_32c51_ZTSN2re10ArcWeakPtrINS_4ecs217VFXSceneComponentEEE(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 32) = 0;
  objc_copyWeak((id *)(a1 + 32), (id *)(a2 + 32));
}

void __destroy_helper_block_a8_32c51_ZTSN2re10ArcWeakPtrINS_4ecs217VFXSceneComponentEEE(uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
}

unint64_t re::ecs2::`anonymous namespace'::bindingUniqueIdentifier(re::ecs2::_anonymous_namespace_ *this, const re::DynamicString *a2, unint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v9;
  char v10;

  v5 = re::Hash<re::DynamicString>::operator()((uint64_t)&v9, (uint64_t)this);
  v6 = ((v5 << 6)
      + (v5 >> 2)
      + re::Hash<re::DynamicString>::operator()((uint64_t)&v10, (uint64_t)a2)
      - 0x61C8864680B583E9) ^ v5;
  v7 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a3 ^ (a3 >> 30))) >> 27));
  return ((v7 ^ (v7 >> 31)) + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9) ^ v6;
}

