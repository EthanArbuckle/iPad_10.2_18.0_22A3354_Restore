double re::IntrospectionHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  re::IntrospectionBase *v8;
  uint64_t v10;

  v10 = 0;
  v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(int **)(a2 + 16);
    while (1)
    {
      v8 = *v7;
      v7 += 8;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 32 * v10 + 8, *(_QWORD *)(a2 + 16) + 32 * v10 + 24);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 32 * v10) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
  re::StringID::destroyString(this);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, StringID *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 32 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = *(int **)(v2 + 16);
        while (1)
        {
          v7 = *v6;
          v6 += 8;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 8;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,double,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  re::IntrospectionBase *v8;
  int v10;

  v10 = 0;
  v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(int **)(a2 + 16);
    while (1)
    {
      v8 = *v7;
      v7 += 8;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 32 * v10 + 8, *(_QWORD *)(a2 + 16) + 32 * v10 + 24);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 32 * v10) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
  re::StringID::destroyString(this);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, StringID *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 32 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = *(int **)(v2 + 16);
        while (1)
        {
          v7 = *v6;
          v6 += 8;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 8;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,int,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  re::IntrospectionBase *v8;
  uint64_t v10;

  v10 = 0;
  v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(int **)(a2 + 16);
    while (1)
    {
      v8 = *v7;
      v7 += 8;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 32 * v10 + 8, *(_QWORD *)(a2 + 16) + 32 * v10 + 24);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 32 * v10) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
  re::StringID::destroyString(this);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, StringID *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 32 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = *(int **)(v2 + 16);
        while (1)
        {
          v7 = *v6;
          v6 += 8;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 8;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector2<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  re::IntrospectionBase *v8;
  __int128 v10;

  v10 = 0u;
  v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(int **)(a2 + 16);
    while (1)
    {
      v8 = *v7;
      v7 += 12;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 48 * v10 + 8, *(_QWORD *)(a2 + 16) + 48 * v10 + 32);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 48 * v10) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
  re::StringID::destroyString(this);
}

void re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::StringID::destroyString((re::StringID *)(v6 + v4 + 8));
          v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 48;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, StringID *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 48 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = *(int **)(v2 + 16);
        while (1)
        {
          v7 = *v6;
          v6 += 12;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 48 * *(unsigned int *)(a1 + 32) + 8;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 48 * *(unsigned int *)(a1 + 32) + 32;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  re::IntrospectionBase *v8;
  __int128 v10;

  v10 = 0uLL;
  v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(int **)(a2 + 16);
    while (1)
    {
      v8 = *v7;
      v7 += 12;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 48 * v10 + 8, *(_QWORD *)(a2 + 16) + 48 * v10 + 32);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 48 * v10) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
  re::StringID::destroyString(this);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, StringID *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 48 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = *(int **)(v2 + 16);
        while (1)
        {
          v7 = *v6;
          v6 += 12;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 48 * *(unsigned int *)(a1 + 32) + 8;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 48 * *(unsigned int *)(a1 + 32) + 32;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Vector4<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  re::IntrospectionBase *v8;
  __int128 v10;

  v10 = xmmword_2260E5D70;
  v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(int **)(a2 + 16);
    while (1)
    {
      v8 = *v7;
      v7 += 12;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 48 * v10 + 8, *(_QWORD *)(a2 + 16) + 48 * v10 + 32);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 48 * v10) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
  re::StringID::destroyString(this);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::Vector3<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DeformationAttributeData,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<unsigned long long,re::ecs2::EntityHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, StringID *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 48 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = *(int **)(v2 + 16);
        while (1)
        {
          v7 = *v6;
          v6 += 12;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 48 * *(unsigned int *)(a1 + 32) + 8;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 48 * *(unsigned int *)(a1 + 32) + 32;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::Quaternion<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  re::IntrospectionBase *v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)&v10 = 0x3F8000003F800000;
  *((_QWORD *)&v10 + 1) = 1065353216;
  v11 = 0;
  v12 = 0x3F80000000000000;
  v13 = 0;
  v14 = 0;
  v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(int **)(a2 + 16);
    while (1)
    {
      v8 = *v7;
      v7 += 20;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 80 * v10 + 8, *(_QWORD *)(a2 + 16) + 80 * v10 + 32);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 80 * v10) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
  re::StringID::destroyString(this);
}

void re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
          re::StringID::destroyString((re::StringID *)(v6 + v4 + 8));
          v3 = *(unsigned int *)(a1 + 32);
        }
        v4 += 80;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, StringID *a4)
{
  __int128 *Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = (__int128 *)re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 80 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = *(int **)(v2 + 16);
        while (1)
        {
          v7 = *v6;
          v6 += 20;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 80 * *(unsigned int *)(a1 + 32) + 8;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 80 * *(unsigned int *)(a1 + 32) + 32;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::GenericSRT<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  re::IntrospectionBase *v8;
  uint64_t v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v14 = 0;
  v15 = 0;
  v12 = 0u;
  v13 = 0u;
  v10[0] = 0;
  v11 = 0u;
  v10[1] = (uint64_t)&str_110;
  v16 = 0;
  v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a4, a5, v10);
  re::SkeletalPose::~SkeletalPose((re::SkeletalPose *)v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(int **)(a2 + 16);
    while (1)
    {
      v8 = *v7;
      v7 += 28;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 112 * v10 + 8, *(_QWORD *)(a2 + 16) + 112 * v10 + 24);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 112 * v10) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
  re::StringID::destroyString(this);
}

void re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(_QWORD *)(a1 + 16) + v3));
        ++v4;
        v3 += 112;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

uint64_t re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v14;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, (uint64_t)a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 112 * v11;
    return v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v10 + 112 * v9 + 8), a2))
  {
    v9 = *(_DWORD *)(v10 + 112 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v14 = (_QWORD *)(v10 + 112 * v9);
  re::StringID::operator=(v14 + 3, a3);
  re::FixedArray<re::GenericSRT<float>>::operator=(v14 + 5, (uint64_t)(a3 + 2));
  re::DynamicArray<BOOL>::operator=((uint64_t)(v14 + 8), a3 + 5);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(v14 + 13, a3[10]);
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 112 * v9;
  return v12 + 24;
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, StringID *a4)
{
  uint64_t *Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = (uint64_t *)re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 112 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = *(int **)(v2 + 16);
        while (1)
        {
          v7 = *v6;
          v6 += 28;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 112 * *(unsigned int *)(a1 + 32) + 8;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 112 * *(unsigned int *)(a1 + 32) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::SkeletalPose,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  re::IntrospectionBase *v8;
  _QWORD v10[3];
  int v11;
  uint64_t v12;

  v12 = 0;
  memset(v10, 0, sizeof(v10));
  v11 = 0;
  v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, (uint64_t)v10);
  if (v10[0] && v12)
    (*(void (**)(void))(*(_QWORD *)v10[0] + 40))();
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(int **)(a2 + 16);
    while (1)
    {
      v8 = *v7;
      v7 += 16;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + (v10 << 6) + 8, *(_QWORD *)(a2 + 16) + (v10 << 6) + 24);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + (v10 << 6)) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
  re::StringID::destroyString(this);
}

void re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free(*(_QWORD *)(a1 + 16) + v3);
        ++v4;
        v3 += 64;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

unint64_t re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 16) + ((unint64_t)v12 << 6);
    return v13 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + (v9 << 6);
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      break;
    v9 = *(_DWORD *)(v10 + (v9 << 6)) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  re::DynamicArray<re::RigComponentConstraint>::operator=(v11 + 24, a3);
  ++*(_DWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 16) + (v9 << 6);
  return v13 + 24;
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

unint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, StringID *a4)
{
  void **Instance;
  unint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, (uint64_t)Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + ((unint64_t)v10++ << 6));
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = *(int **)(v2 + 16);
        while (1)
        {
          v7 = *v6;
          v6 += 16;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + ((unint64_t)*(unsigned int *)(a1 + 32) << 6) + 8;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + ((unint64_t)*(unsigned int *)(a1 + 32) << 6) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  re::IntrospectionBase *v8;
  _QWORD v10[3];
  int v11;
  uint64_t v12;

  v12 = 0;
  memset(v10, 0, sizeof(v10));
  v11 = 0;
  v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, (uint64_t)v10);
  if (v10[0] && v12)
    (*(void (**)(void))(*(_QWORD *)v10[0] + 40))();
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(int **)(a2 + 16);
    while (1)
    {
      v8 = *v7;
      v7 += 16;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + (v10 << 6) + 8, *(_QWORD *)(a2 + 16) + (v10 << 6) + 24);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + (v10 << 6)) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
  re::StringID::destroyString(this);
}

unint64_t re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(uint64_t a1, StringID *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 16) + ((unint64_t)v12 << 6);
    return v13 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v11 = v10 + (v9 << 6);
    if (re::StringID::operator==((_QWORD *)(v11 + 8), a2))
      break;
    v9 = *(_DWORD *)(v10 + (v9 << 6)) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  re::DynamicArray<re::RigComponentConstraint>::operator=(v11 + 24, a3);
  ++*(_DWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 16) + (v9 << 6);
  return v13 + 24;
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::DynamicArray<float>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<unsigned long long,re::Function<void ()(void)>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

unint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, StringID *a4)
{
  void **Instance;
  unint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, (uint64_t)Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + ((unint64_t)v10++ << 6));
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = *(int **)(v2 + 16);
        while (1)
        {
          v7 = *v6;
          v6 += 16;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + ((unint64_t)*(unsigned int *)(a1 + 32) << 6) + 8;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + ((unint64_t)*(unsigned int *)(a1 + 32) << 6) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::DynamicArray<re::Vector3<float>>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  re::IntrospectionBase *v8;
  uint64_t v10;

  v10 = 0;
  v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a4, a5, &v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(int **)(a2 + 16);
    while (1)
    {
      v8 = *v7;
      v7 += 8;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 32 * v10 + 8, *(_QWORD *)(a2 + 16) + 32 * v10 + 24);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 32 * v10) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
  re::StringID::destroyString(this);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,BOOL,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphOperatorDefinition>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, StringID *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 32 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = *(int **)(v2 + 16);
        while (1)
        {
          v7 = *v6;
          v6 += 8;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 8;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 32 * *(unsigned int *)(a1 + 32) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,long long,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

_QWORD *re::IntrospectionHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, StringID *a5)
{
  re::IntrospectionBase *v8;
  _OWORD v10[2];

  memset(v10, 0, sizeof(v10));
  v8 = (re::IntrospectionBase *)re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a4, a5, (uint64_t)v10);
  re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = *(int **)(a2 + 16);
    while (1)
    {
      v8 = *v7;
      v7 += 14;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 56 * v10 + 8, *(_QWORD *)(a2 + 16) + 56 * v10 + 24);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 56 * v10) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

void re::IntrospectionHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::destroyKey(int a1, re::StringID *this)
{
  re::StringID::destroyString(this);
}

void re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::EntryWithoutHash::free((_DWORD *)(*(_QWORD *)(a1 + 16) + v3));
        ++v4;
        v3 += 56;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

uint64_t re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(uint64_t a1, StringID *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;

  v6 = 0xBF58476D1CE4E5B9 * ((*(_QWORD *)&a2->var0 >> 31) ^ (*(_QWORD *)&a2->var0 >> 1));
  v7 = (0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) ^ ((0x94D049BB133111EBLL * (v6 ^ (v6 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v7 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::addAsCopy(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 56 * v11;
    return v12 + 24;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::StringID::operator==((_QWORD *)(v10 + 56 * v9 + 8), a2))
  {
    v9 = *(_DWORD *)(v10 + 56 * v9) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v14 = v10 + 56 * v9;
  re::FixedArray<float>::operator=((uint64_t *)(v14 + 24), a3);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v14 + 48), *(_QWORD *)(a3 + 24));
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 56 * v9;
  return v12 + 24;
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
  return re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::deinit(a1);
    re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, StringID *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::add(a1, a4, (uint64_t)Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 56 * v10++);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = *(int **)(v2 + 16);
        while (1)
        {
          v7 = *v6;
          v6 += 14;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 56 * *(unsigned int *)(a1 + 32) + 8;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 56 * *(unsigned int *)(a1 + 32) + 24;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::StringID,re::BlendShapeWeights,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::KeyValueComponent>(_QWORD *a1)
{
  double result;

  bzero(a1, 0x328uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  a1[2] = 0;
  *((_BYTE *)a1 + 24) = 0;
  *a1 = &off_24ED57EB8;
  a1[4] = &off_24ED65B58;
  result = 0.0;
  *(_OWORD *)(a1 + 5) = 0u;
  *(_OWORD *)(a1 + 7) = 0u;
  *((_DWORD *)a1 + 18) = 0;
  *(_QWORD *)((char *)a1 + 76) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 11) = 0u;
  *(_OWORD *)(a1 + 13) = 0u;
  *((_DWORD *)a1 + 30) = 0;
  *(_QWORD *)((char *)a1 + 124) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 17) = 0u;
  *(_OWORD *)(a1 + 19) = 0u;
  *((_DWORD *)a1 + 42) = 0;
  *(_QWORD *)((char *)a1 + 172) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 23) = 0u;
  *(_OWORD *)(a1 + 25) = 0u;
  *((_DWORD *)a1 + 54) = 0;
  *(_QWORD *)((char *)a1 + 220) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 29) = 0u;
  *(_OWORD *)(a1 + 31) = 0u;
  *((_DWORD *)a1 + 66) = 0;
  *(_OWORD *)(a1 + 35) = 0u;
  *(_QWORD *)((char *)a1 + 268) = 0x7FFFFFFFLL;
  *((_DWORD *)a1 + 78) = 0;
  *(_OWORD *)(a1 + 37) = 0u;
  *(_QWORD *)((char *)a1 + 316) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 41) = 0u;
  *(_OWORD *)(a1 + 43) = 0u;
  *((_DWORD *)a1 + 90) = 0;
  *(_QWORD *)((char *)a1 + 364) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 49) = 0u;
  *((_DWORD *)a1 + 102) = 0;
  *(_QWORD *)((char *)a1 + 412) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 53) = 0u;
  *(_OWORD *)(a1 + 55) = 0u;
  *((_DWORD *)a1 + 114) = 0;
  *(_QWORD *)((char *)a1 + 460) = 0x7FFFFFFFLL;
  *((_DWORD *)a1 + 126) = 0;
  *(_OWORD *)(a1 + 59) = 0u;
  *(_OWORD *)(a1 + 61) = 0u;
  *(_QWORD *)((char *)a1 + 508) = 0x7FFFFFFFLL;
  *((_DWORD *)a1 + 138) = 0;
  *(_OWORD *)(a1 + 65) = 0u;
  *(_OWORD *)(a1 + 67) = 0u;
  *(_QWORD *)((char *)a1 + 556) = 0x7FFFFFFFLL;
  *((_DWORD *)a1 + 150) = 0;
  *(_OWORD *)(a1 + 71) = 0u;
  *(_OWORD *)(a1 + 73) = 0u;
  *(_QWORD *)((char *)a1 + 604) = 0x7FFFFFFFLL;
  *((_DWORD *)a1 + 162) = 0;
  *(_OWORD *)(a1 + 77) = 0u;
  *(_OWORD *)(a1 + 79) = 0u;
  *(_QWORD *)((char *)a1 + 652) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 83) = 0u;
  *(_OWORD *)(a1 + 85) = 0u;
  *((_DWORD *)a1 + 174) = 0;
  *(_QWORD *)((char *)a1 + 700) = 0x7FFFFFFFLL;
  *((_DWORD *)a1 + 186) = 0;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_OWORD *)(a1 + 91) = 0u;
  *(_QWORD *)((char *)a1 + 748) = 0x7FFFFFFFLL;
  *((_DWORD *)a1 + 198) = 0;
  *(_OWORD *)(a1 + 95) = 0u;
  *(_OWORD *)(a1 + 97) = 0u;
  *(_QWORD *)((char *)a1 + 796) = 0x7FFFFFFFLL;
  return result;
}

re::ecs2::AudioDebugSystem *re::ecs2::AudioDebugSystem::AudioDebugSystem(re::ecs2::AudioDebugSystem *this)
{
  re *v2;
  uint64_t *v3;
  re::audio::MeshVisualizer *v4;
  re::audio::MeshVisualizer *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)v2 = &off_24ED66470;
  *((_QWORD *)v2 + 14) = 0;
  *((_QWORD *)v2 + 15) = 0;
  *((_QWORD *)v2 + 13) = 0;
  v3 = re::globalAllocators(v2);
  v4 = (re::audio::MeshVisualizer *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 416, 16);
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_OWORD *)v4 + 12) = 0u;
  *((_OWORD *)v4 + 13) = 0u;
  *((_OWORD *)v4 + 14) = 0u;
  *((_OWORD *)v4 + 15) = 0u;
  *((_OWORD *)v4 + 16) = 0u;
  *((_OWORD *)v4 + 17) = 0u;
  *((_OWORD *)v4 + 18) = 0u;
  *((_OWORD *)v4 + 19) = 0u;
  *((_OWORD *)v4 + 20) = 0u;
  *((_OWORD *)v4 + 21) = 0u;
  *((_OWORD *)v4 + 22) = 0u;
  *((_OWORD *)v4 + 23) = 0u;
  *((_OWORD *)v4 + 24) = 0u;
  *((_OWORD *)v4 + 25) = 0u;
  v5 = re::audio::MeshVisualizer::MeshVisualizer(v4);
  *((_OWORD *)this + 14) = 0u;
  *((_QWORD *)this + 17) = &off_24ED664F8;
  *((_QWORD *)this + 16) = v5;
  *((_QWORD *)this + 20) = (char *)this + 136;
  *((_BYTE *)this + 168) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 64) = 0;
  *(_QWORD *)((char *)this + 260) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_DWORD *)this + 76) = 0;
  *(_QWORD *)((char *)this + 308) = 0x7FFFFFFFLL;
  *((_QWORD *)v5 + 12) = 0x800000008;
  v6 = *((_QWORD *)v5 + 20);
  if (*((_QWORD *)v5 + 21) != v6)
  {
    v7 = 0;
    v8 = 12;
    do
    {
      *(_DWORD *)(v6 + v8) = 1059749626;
      *((_DWORD *)v5 + 51) = 1059749626;
      ++v7;
      v6 = *((_QWORD *)v5 + 20);
      v8 += 16;
    }
    while (v7 < (*((_QWORD *)v5 + 21) - v6) >> 4);
  }
  return this;
}

void `anonymous namespace'::tryLoadMaterialAsset(_anonymous_namespace_ *this, re::AssetHandle *a2, re::RenderManager *a3, re::RenderManager *a4, AssetService *a5)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v11;
  __int128 v12;
  uint64_t v13;
  _BYTE v14[24];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = *((_QWORD *)this + 1);
  if (!v8 || (v9 = atomic_load((unsigned int *)(v8 + 704)), v9 != 2))
  {
    (*(void (**)(uint64_t *__return_ptr, re::RenderManager *, re::AssetHandle *, re::RenderManager *, re::RenderManager *, AssetService *))(*(_QWORD *)a4 + 8))(&v17, a4, a2, a3, a4, a5);
    if (v18)
    {
      if (!atomic_load((unsigned int *)(v18 + 704)))
        re::AssetHandle::loadNow(v18, 0);
      if (v18)
      {
        v11 = atomic_load((unsigned int *)(v18 + 704));
        if (v11 == 2)
        {
          re::AssetHandle::AssetHandle((re::AssetHandle *)v14, (const re::AssetHandle *)&v17);
          re::MaterialAsset::makeMaterialMemoryAsset((uint64_t)a4, a3, (re::AssetHandle *)v14, 0, 0);
          v12 = *(_OWORD *)this;
          *(_OWORD *)this = v15;
          v15 = v12;
          v13 = *((_QWORD *)this + 2);
          *((_QWORD *)this + 2) = v16;
          v16 = v13;
          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v15);
          re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
        }
      }
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v17);
  }
}

void re::ecs2::AudioDebugSystem::willAddSystemToECSService(re::ecs2::AudioDebugSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  re::RenderManager *v6;
  AssetService *v7;
  AssetService *v8;

  *((_QWORD *)this + 15) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 13) = re::ServiceLocator::serviceOrNull<re::AudioSceneService>(v2);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  v4 = re::ServiceLocator::serviceOrNull<re::RenderManager>(v3);
  *((_QWORD *)this + 14) = v4;
  if (v4)
  {
    v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
    v6 = (re::RenderManager *)re::ServiceLocator::service<re::AssetService>(v5);
  }
}

void re::ecs2::AudioDebugSystem::willRemoveSystemFromECSService(re::ecs2::AudioDebugSystem *this)
{
  uint64_t v2;
  uint64_t v3;

  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {

    *((_QWORD *)this + 22) = 0;
  }
  *((_QWORD *)this + 23) = 0;
  v3 = *((_QWORD *)this + 25);
  if (v3)
  {

    *((_QWORD *)this + 25) = 0;
  }
  *((_QWORD *)this + 26) = 0;
}

double re::ecs2::AudioDebugSystem::willAddSceneToECSService(re::ecs2::AudioDebugSystem *this, re::ecs2::Scene *a2)
{
  re::ecs2::SceneComponentTable *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  re::ecs2::AudioDebugSystem *v8;
  void *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = (re::ecs2::Scene *)((char *)a2 + 200);
    v4 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
    v8 = this;
    v9 = re::ecs2::AudioDebugSystem::didAddComponents;
    v10 = 0;
    v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>,re::Slice<re::ecs2::AudioDebugComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>*,re::Slice<re::ecs2::AudioDebugComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>,re::Slice<re::ecs2::AudioDebugComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioDebugComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 128), (uint64_t)&v8);
    v8 = this;
    v9 = re::ecs2::AudioDebugSystem::willRemoveComponents;
    v10 = 0;
    v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>,re::Slice<re::ecs2::AudioDebugComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>*,re::Slice<re::ecs2::AudioDebugComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>,re::Slice<re::ecs2::AudioDebugComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioDebugComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v4 + 392), (uint64_t)&v8);
    v5 = re::ecs2::SceneComponentTable::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v8 = this;
    v9 = re::ecs2::AudioDebugSystem::didAddAcousticMeshComponents;
    v10 = 0;
    v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v5 + 128), (uint64_t)&v8);
    v8 = this;
    v9 = re::ecs2::AudioDebugSystem::willRemoveAcousticMeshComponents;
    v10 = 0;
    v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v5 + 392), (uint64_t)&v8);
    v6 = re::ecs2::SceneComponentTable::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v8 = this;
    v9 = re::ecs2::AudioDebugSystem::didAddAudioPlayerComponents;
    v10 = 0;
    v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Slice<re::ecs2::AudioPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v6 + 128), (uint64_t)&v8);
    v8 = this;
    v9 = re::ecs2::AudioDebugSystem::willRemoveAudioPlayerComponents;
    v10 = 0;
    v11 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Slice<re::ecs2::AudioPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioPlayerComponent*>&&)#1}::__invoke;
    return re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v6 + 392), (uint64_t)&v8);
  }
  return result;
}

uint64_t re::ecs2::AudioDebugSystem::didAddComponents(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  re::ecs2::Entity *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  if (a4)
  {
    v4 = a3;
    v7 = &a3[a4];
    v8 = a1 + 272;
    do
    {
      v9 = *v4;
      v10 = *(re::ecs2::Entity **)(*v4 + 16);
      if (v10)
      {
        if (v10 == re::ecs2::ComponentHelper::privateSceneDataEntity(*(re::ecs2::ComponentHelper **)(a2 + 120), 0))
        {
          v11 = *(_QWORD *)(a2 + 120);
          v18 = v9;
          v12 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v11 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          if (v12)
          {
            v13 = *(_QWORD *)(v12 + 24);
            if (v13)
            {
              v14 = *(uint64_t **)(v12 + 40);
              v15 = 8 * v13;
              do
              {
                v17 = *v14;
                if (*(_QWORD *)(v17 + 16))
                  re::HashTable<re::ecs2::AudioPlayerComponent *,re::ecs2::AudioDebugComponent const*,re::Hash<re::ecs2::AudioPlayerComponent *>,re::EqualTo<re::ecs2::AudioPlayerComponent *>,true,false>::add<re::ecs2::AudioDebugComponent const*&>(v8, &v17, &v18);
                ++v14;
                v15 -= 8;
              }
              while (v15);
            }
          }
        }
        else
        {
          re::ecs2::AudioDebugSystem::didAddComponentsRecursive(a1, v10, v9);
        }
      }
      ++v4;
    }
    while (v4 != v7);
  }
  return 0;
}

uint64_t re::ecs2::AudioDebugSystem::willRemoveComponents(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  int *v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t i;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  re::ecs2::Entity *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  unint64_t *v70;
  unsigned int v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  __int128 v76;
  __int128 v77;
  int v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  int v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  unsigned int v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92[3];

  v4 = a4;
  v5 = a3;
  v86 = 0;
  v84 = 0u;
  v85 = 0u;
  v87 = 0x7FFFFFFFLL;
  v6 = 8 * a4;
  if (a4)
  {
    v7 = 8 * a4;
    v8 = a3;
    do
    {
      if (*v8)
      {
        v9 = *(_QWORD **)(*v8 + 16);
        if (v9)
          collectEntitiesRecursive((uint64_t)&v84, v9);
      }
      ++v8;
      v7 -= 8;
    }
    while (v7);
    v10 = v86;
    v82 = 0;
    v80 = 0u;
    v81 = 0u;
    v83 = 0x7FFFFFFFLL;
    v11 = 0;
    if (v86)
    {
      v12 = (int *)(v85 + 8);
      while (1)
      {
        v13 = *v12;
        v12 += 6;
        if (v13 < 0)
          break;
        if (v86 == ++v11)
        {
          LODWORD(v11) = v86;
          break;
        }
      }
    }
  }
  else
  {
    v10 = 0;
    LODWORD(v11) = 0;
    v82 = 0;
    v80 = 0uLL;
    v81 = 0uLL;
    v83 = 0x7FFFFFFFLL;
  }
  if (v10 != (_DWORD)v11)
  {
    v15 = v11;
    v16 = v85;
    v70 = (unint64_t *)(a1 + 272);
    v74 = v6;
    v75 = &v5[v4];
    v72 = v5;
    v73 = v4;
    v71 = v10;
    while (1)
    {
      v17 = *(_QWORD *)(v16 + 24 * v15 + 16);
      v76 = 0u;
      v77 = 0u;
      v78 = 0;
      v79 = 0x7FFFFFFFLL;
      v92[0] = v17;
      v90 = 0;
      v88 = 0u;
      v89 = 0u;
      v91 = 0x7FFFFFFFLL;
      if (v17)
      {
        while (1)
        {
          re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add((uint64_t)&v88, v92);
          v18 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v92[0] + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
          v19 = v18;
          if (v18)
          {
            if (v4)
            {
              v20 = v6;
              v21 = v5;
              while (*v21 != v18)
              {
                ++v21;
                v20 -= 8;
                if (!v20)
                {
                  v21 = v75;
                  break;
                }
              }
            }
            else
            {
              v21 = v5;
            }
            if (v4 != v21 - v5)
              v19 = 0;
          }
          v22 = *(_QWORD *)(v92[0] + 24);
          if (!v22)
            break;
          v23 = *(_DWORD *)(v22 + 288) & 0x80;
          if (v23)
            v22 = 0;
          v92[0] = v22;
          if (v19)
            v24 = 0;
          else
            v24 = v23 == 0;
          if (!v24)
            goto LABEL_36;
        }
        v92[0] = 0;
LABEL_36:
        v25 = v90;
        if (v90)
        {
          v26 = 0;
          v27 = (int *)(v89 + 8);
          while (1)
          {
            v28 = *v27;
            v27 += 6;
            if (v28 < 0)
              break;
            if (v90 == ++v26)
            {
              LODWORD(v26) = v90;
              break;
            }
          }
        }
        else
        {
          LODWORD(v26) = 0;
        }
      }
      else
      {
        v25 = 0;
        v19 = 0;
        LODWORD(v26) = 0;
      }
      if (v25 != (_DWORD)v26)
      {
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = v26;
        v36 = v89;
        v37 = v25;
        do
        {
          v38 = *(_QWORD *)(v36 + 24 * v35 + 16);
          v39 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v38 ^ (v38 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v38 ^ (v38 >> 30))) >> 27));
          v40 = v39 ^ (v39 >> 31);
          v41 = v76;
          if ((_QWORD)v76)
          {
            v41 = v40 % v34;
            for (i = *(unsigned int *)(v33 + 4 * v41);
                  (_DWORD)i != 0x7FFFFFFF;
                  i = *(_DWORD *)(v32 + 32 * i + 8) & 0x7FFFFFFF)
            {
              if (*(_QWORD *)(v32 + 32 * i + 16) == v38)
              {
                *(_QWORD *)(v32 + 32 * i + 24) = v19;
                goto LABEL_57;
              }
            }
          }
          v43 = v79;
          if ((_DWORD)v79 == 0x7FFFFFFF)
          {
            v34 = DWORD2(v77);
            if ((_DWORD)v31 == DWORD2(v77))
            {
              re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)&v76, 2 * v30);
              v34 = DWORD2(v77);
              v30 = HIDWORD(v77);
              v41 = v40 % DWORD2(v77);
              v32 = v77;
              v44 = v78;
              v29 = HIDWORD(v79);
            }
            else
            {
              v44 = v31;
            }
            v46 = (v44 + 1);
            v78 = v44 + 1;
            v43 = v31;
            v45 = *(_DWORD *)(v32 + 32 * v31 + 8);
          }
          else
          {
            v45 = *(_DWORD *)(v32 + 32 * v79 + 8);
            LODWORD(v79) = v45 & 0x7FFFFFFF;
            v46 = v31;
            LODWORD(v31) = v43;
          }
          *(_DWORD *)(v32 + 32 * v43 + 8) = v45 | 0x80000000;
          v33 = *((_QWORD *)&v76 + 1);
          v32 = v77;
          v47 = v77 + 32 * v43;
          *(_DWORD *)(v47 + 8) = *(_DWORD *)(v47 + 8) & 0x80000000 | *(_DWORD *)(*((_QWORD *)&v76 + 1) + 4 * v41);
          *(_QWORD *)v47 = v40;
          *(_QWORD *)(v47 + 16) = v38;
          *(_QWORD *)(v47 + 24) = v19;
          *(_DWORD *)(v33 + 4 * v41) = v31;
          HIDWORD(v77) = ++v30;
          v37 = v90;
          v31 = v46;
LABEL_57:
          HIDWORD(v79) = ++v29;
          v36 = v89;
          if (v37 <= (int)v26 + 1)
            v48 = v26 + 1;
          else
            v48 = v37;
          while (1)
          {
            v35 = (v26 + 1);
            if (v48 - 1 == (_DWORD)v26)
              break;
            LODWORD(v26) = v26 + 1;
            v49 = v35;
            if ((*(_DWORD *)(v89 + 24 * v35 + 8) & 0x80000000) != 0)
              goto LABEL_64;
          }
          v49 = v48;
LABEL_64:
          LODWORD(v26) = v49;
        }
        while (v25 != v49);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v88);
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v76);
      v5 = v72;
      v4 = v73;
      v6 = v74;
      if (v19)
        goto LABEL_66;
      v52 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v17 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v52)
        re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::remove(a1 + 224, v52);
      v53 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v17 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (!v53)
        goto LABEL_66;
      v54 = v53;
      do
      {
        v55 = v17;
        v17 = *(_QWORD *)(v17 + 24);
      }
      while (v17);
      v56 = re::ecs2::ComponentHelper::privateSceneDataEntity(*(re::ecs2::ComponentHelper **)(v55 + 16), (re::ecs2::Scene *)1);
      v57 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)v56 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
      if (v57)
        break;
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::remove((uint64_t)v70, v54);
LABEL_66:
      v16 = v85;
      if (v86 <= (int)v11 + 1)
        v50 = v11 + 1;
      else
        v50 = v86;
      while (1)
      {
        v15 = (v11 + 1);
        if (v50 - 1 == (_DWORD)v11)
          break;
        LODWORD(v11) = v11 + 1;
        v51 = v15;
        if ((*(_DWORD *)(v85 + 24 * v15 + 8) & 0x80000000) != 0)
          goto LABEL_73;
      }
      v51 = v50;
LABEL_73:
      LODWORD(v11) = v51;
      if (v71 == v51)
        goto LABEL_14;
    }
    v58 = v57;
    v59 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v54 ^ (v54 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v54 ^ (v54 >> 30))) >> 27));
    v60 = v59 ^ (v59 >> 31);
    v61 = *v70;
    if (*v70)
    {
      v62 = a1;
      v61 = v60 % *(unsigned int *)(a1 + 296);
      v63 = *(unsigned int *)(*(_QWORD *)(a1 + 280) + 4 * v61);
      if ((_DWORD)v63 != 0x7FFFFFFF)
      {
        v64 = *(_QWORD *)(a1 + 288);
        while (*(_QWORD *)(v64 + 32 * v63 + 16) != v54)
        {
          v63 = *(_DWORD *)(v64 + 32 * v63 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v63 == 0x7FFFFFFF)
            goto LABEL_89;
        }
        *(_QWORD *)(v64 + 32 * v63 + 24) = v57;
        goto LABEL_96;
      }
    }
    else
    {
      v62 = a1;
    }
LABEL_89:
    v65 = *(unsigned int *)(v62 + 308);
    if ((_DWORD)v65 == 0x7FFFFFFF)
    {
      v65 = *(unsigned int *)(v62 + 304);
      v66 = v65;
      if ((_DWORD)v65 == *(_DWORD *)(v62 + 296))
      {
        re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)v70, 2 * *(_DWORD *)(v62 + 300));
        v61 = v60 % *(unsigned int *)(v62 + 296);
        v66 = *(_DWORD *)(v62 + 304);
      }
      *(_DWORD *)(v62 + 304) = v66 + 1;
      v67 = *(_QWORD *)(v62 + 288);
      v68 = *(_DWORD *)(v67 + 32 * v65 + 8);
    }
    else
    {
      v67 = *(_QWORD *)(v62 + 288);
      v68 = *(_DWORD *)(v67 + 32 * v65 + 8);
      *(_DWORD *)(v62 + 308) = v68 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v67 + 32 * v65 + 8) = v68 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(v62 + 288) + 32 * v65 + 8) = *(_DWORD *)(*(_QWORD *)(v62 + 288) + 32 * v65 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v62 + 280) + 4 * v61);
    *(_QWORD *)(*(_QWORD *)(v62 + 288) + 32 * v65) = v60;
    *(_QWORD *)(*(_QWORD *)(v62 + 288) + 32 * v65 + 16) = v54;
    *(_QWORD *)(*(_QWORD *)(v62 + 288) + 32 * v65 + 24) = v58;
    *(_DWORD *)(*(_QWORD *)(v62 + 280) + 4 * v61) = v65;
    ++*(_DWORD *)(v62 + 300);
LABEL_96:
    ++*(_DWORD *)(v62 + 312);
    v6 = v74;
    goto LABEL_66;
  }
LABEL_14:
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v80);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v84);
  return 0;
}

void re::ecs2::AudioDebugSystem::willRemoveSceneFromECSService(re::ecs2::AudioDebugSystem *this, re::ecs2::Scene *a2)
{
  re::ecs2::SceneComponentTable *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v3 = (re::ecs2::Scene *)((char *)a2 + 200);
    v4 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
    *(_QWORD *)&v7 = this;
    *((_QWORD *)&v7 + 1) = re::ecs2::AudioDebugSystem::didAddComponents;
    v8 = 0;
    v9 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>,re::Slice<re::ecs2::AudioDebugComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>*,re::Slice<re::ecs2::AudioDebugComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>,re::Slice<re::ecs2::AudioDebugComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioDebugComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 128, &v7);
    *(_QWORD *)&v7 = this;
    *((_QWORD *)&v7 + 1) = re::ecs2::AudioDebugSystem::willRemoveComponents;
    v8 = 0;
    v9 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>,re::Slice<re::ecs2::AudioDebugComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>*,re::Slice<re::ecs2::AudioDebugComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>,re::Slice<re::ecs2::AudioDebugComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioDebugComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v4 + 392, &v7);
    v5 = re::ecs2::SceneComponentTable::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    *(_QWORD *)&v7 = this;
    *((_QWORD *)&v7 + 1) = re::ecs2::AudioDebugSystem::didAddAcousticMeshComponents;
    v8 = 0;
    v9 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v5 + 128, &v7);
    *(_QWORD *)&v7 = this;
    *((_QWORD *)&v7 + 1) = re::ecs2::AudioDebugSystem::willRemoveAcousticMeshComponents;
    v8 = 0;
    v9 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v5 + 392, &v7);
    v6 = re::ecs2::SceneComponentTable::get(v3, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    *(_QWORD *)&v7 = this;
    *((_QWORD *)&v7 + 1) = re::ecs2::AudioDebugSystem::didAddAudioPlayerComponents;
    v8 = 0;
    v9 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Slice<re::ecs2::AudioPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v6 + 128, &v7);
    *(_QWORD *)&v7 = this;
    *((_QWORD *)&v7 + 1) = re::ecs2::AudioDebugSystem::willRemoveAudioPlayerComponents;
    v8 = 0;
    v9 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Slice<re::ecs2::AudioPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioPlayerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v6 + 392, &v7);
  }
}

void re::ecs2::AudioDebugSystem::didAddComponentsRecursive(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  re::ecs2::EntityComponentCollection *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v28 = a3;
  v6 = (re::ecs2::EntityComponentCollection *)(a2 + 4);
  v7 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 224);
    v27 = v7;
    v9 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v27 ^ (v27 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v27 ^ (v27 >> 30))) >> 27));
    v10 = v9 ^ (v9 >> 31);
    if (v8)
    {
      v11 = v10 % *(unsigned int *)(a1 + 248);
      v12 = *(unsigned int *)(*(_QWORD *)(a1 + 232) + 4 * v11);
      if ((_DWORD)v12 != 0x7FFFFFFF)
      {
        v13 = *(_QWORD *)(a1 + 240);
        if (*(_QWORD *)(v13 + 32 * v12 + 16) == v7)
        {
LABEL_7:
          *(_QWORD *)(v13 + 32 * v12 + 24) = a3;
LABEL_10:
          ++*(_DWORD *)(a1 + 264);
          goto LABEL_11;
        }
        while (1)
        {
          v12 = *(_DWORD *)(v13 + 32 * v12 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v12 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v13 + 32 * v12 + 16) == v7)
            goto LABEL_7;
        }
      }
    }
    else
    {
      LODWORD(v11) = 0;
    }
    re::HashTable<re::ecs2::AcousticMeshComponent *,re::ecs2::AudioDebugComponent const*,re::Hash<re::ecs2::AcousticMeshComponent *>,re::EqualTo<re::ecs2::AcousticMeshComponent *>,true,false>::addEmplace<re::ecs2::AudioDebugComponent const*&>(a1 + 224, v11, v10, &v27, &v28);
    goto LABEL_10;
  }
LABEL_11:
  v14 = re::ecs2::EntityComponentCollection::get(v6, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (!v14)
    goto LABEL_21;
  v27 = v14;
  v15 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v14 ^ (v14 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v14 ^ (v14 >> 30))) >> 27));
  v16 = v15 ^ (v15 >> 31);
  if (!*(_QWORD *)(a1 + 272))
  {
    LODWORD(v17) = 0;
    goto LABEL_19;
  }
  v17 = v16 % *(unsigned int *)(a1 + 296);
  v18 = *(unsigned int *)(*(_QWORD *)(a1 + 280) + 4 * v17);
  if ((_DWORD)v18 == 0x7FFFFFFF)
  {
LABEL_19:
    re::HashTable<unsigned long long,void (*)(unsigned long long),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<void (*&)(unsigned long long)>(a1 + 272, v17, v16, &v27, &v28);
    goto LABEL_20;
  }
  v19 = *(_QWORD *)(a1 + 288);
  while (*(_QWORD *)(v19 + 32 * v18 + 16) != v14)
  {
    v18 = *(_DWORD *)(v19 + 32 * v18 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v18 == 0x7FFFFFFF)
      goto LABEL_19;
  }
  *(_QWORD *)(v19 + 32 * v18 + 24) = a3;
LABEL_20:
  ++*(_DWORD *)(a1 + 312);
LABEL_21:
  v20 = a2[41];
  if (v20)
  {
    v21 = (uint64_t *)a2[43];
    v22 = 8 * v20;
    do
    {
      v23 = *v21;
      if (*v21)
      {
        v24 = (id)(v23 + 8);
        v25 = re::ecs2::EntityComponentCollection::get(v6, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
        if (v25)
          v26 = v25;
        else
          v26 = a3;
        re::ecs2::AudioDebugSystem::didAddComponentsRecursive(a1, v23, v26);

      }
      ++v21;
      v22 -= 8;
    }
    while (v22);
  }
}

uint64_t re::HashTable<re::ecs2::AudioPlayerComponent *,re::ecs2::AudioDebugComponent const*,re::Hash<re::ecs2::AudioPlayerComponent *>,re::EqualTo<re::ecs2::AudioPlayerComponent *>,true,false>::add<re::ecs2::AudioDebugComponent const*&>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (*(_QWORD *)result)
  {
    v9 = v8 % *(unsigned int *)(result + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(result + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *(_QWORD *)(result + 16);
      if (*(_QWORD *)(v11 + 32 * v10 + 16) == v6)
        return result;
      while (1)
      {
        v10 = *(_DWORD *)(v11 + 32 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v11 + 32 * v10 + 16) == v6)
          return result;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  result = re::HashTable<unsigned long long,void (*)(unsigned long long),re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<void (*&)(unsigned long long)>(result, v9, v8, a2, a3);
  ++*(_DWORD *)(v5 + 40);
  return result;
}

void collectEntitiesRecursive(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  _QWORD *v10;

  v10 = a2;
  if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a1, (uint64_t *)&v10))
  {
    v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AcousticMeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v4 | re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
    {
      v10 = a2;
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::add(a1, (uint64_t *)&v10);
    }
    v5 = a2[41];
    if (v5)
    {
      v6 = (uint64_t *)a2[43];
      v7 = 8 * v5;
      do
      {
        v8 = *v6;
        if (*v6)
        {
          v9 = (id)(v8 + 8);
          collectEntitiesRecursive(a1, v8);

        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
  }
}

uint64_t re::ecs2::AudioDebugSystem::didAddAcousticMeshComponents(uint64_t a1, unint64_t a2, unint64_t *a3, uint64_t a4)
{
  unint64_t *v4;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AudioDebugComponentFromEntity;
  unint64_t v16;

  if (a4)
  {
    v4 = a3;
    v6 = (_QWORD *)(a1 + 224);
    v7 = &a3[a4];
    do
    {
      v8 = *v4;
      v16 = v8;
      v9 = *(_anonymous_namespace_ **)(v8 + 16);
      if (v9)
      {
        if (AudioDebugComponentFromEntity)
        {
          v10 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
          v11 = v10 ^ (v10 >> 31);
          if (*v6)
          {
            a2 = v11 % *(unsigned int *)(a1 + 248);
            v12 = *(unsigned int *)(*(_QWORD *)(a1 + 232) + 4 * a2);
            if ((_DWORD)v12 != 0x7FFFFFFF)
            {
              v13 = *(_QWORD *)(a1 + 240);
              while (*(_QWORD *)(v13 + 32 * v12 + 16) != v8)
              {
                v12 = *(_DWORD *)(v13 + 32 * v12 + 8) & 0x7FFFFFFF;
                if ((_DWORD)v12 == 0x7FFFFFFF)
                  goto LABEL_12;
              }
              goto LABEL_13;
            }
          }
          else
          {
            LODWORD(a2) = 0;
          }
LABEL_12:
          re::HashTable<re::ecs2::AcousticMeshComponent *,re::ecs2::AudioDebugComponent const*,re::Hash<re::ecs2::AcousticMeshComponent *>,re::EqualTo<re::ecs2::AcousticMeshComponent *>,true,false>::addEmplace<re::ecs2::AudioDebugComponent const*&>((uint64_t)v6, a2, v11, &v16, &AudioDebugComponentFromEntity);
          ++*(_DWORD *)(a1 + 264);
        }
      }
LABEL_13:
      ++v4;
    }
    while (v4 != v7);
  }
  return 0;
}

uint64_t `anonymous namespace'::getAudioDebugComponentFromEntity(_anonymous_namespace_ *this, const re::ecs2::Entity *a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;

  do
  {
    result = re::ecs2::EntityComponentCollection::get((_anonymous_namespace_ *)((char *)this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
    v4 = *((_QWORD *)this + 3);
    if (!v4)
      break;
    v5 = *(_DWORD *)(v4 + 288);
    this = (v5 & 0x80) != 0 ? 0 : (_anonymous_namespace_ *)*((_QWORD *)this + 3);
  }
  while ((v5 & 0x80) == 0 && !result);
  return result;
}

uint64_t re::ecs2::AudioDebugSystem::willRemoveAcousticMeshComponents(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (a4)
  {
    v5 = a1 + 224;
    v6 = 8 * a4;
    do
    {
      v7 = *a3++;
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::remove(v5, v7);
      v6 -= 8;
    }
    while (v6);
  }
  return 0;
}

uint64_t re::ecs2::AudioDebugSystem::didAddAudioPlayerComponents(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  re::ecs2::Entity *v7;
  uint64_t v8;
  const re::ecs2::Entity *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _anonymous_namespace_ *v13;
  uint64_t AudioDebugComponentFromEntity;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v7 = re::ecs2::ComponentHelper::privateSceneDataEntity(*(re::ecs2::ComponentHelper **)(a2 + 120), (re::ecs2::Scene *)1);
  v8 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)v7 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
  if (a4)
  {
    v10 = v8;
    v11 = a1 + 272;
    v12 = 8 * a4;
    do
    {
      v18 = *a3;
      v13 = *(_anonymous_namespace_ **)(v18 + 16);
      if (v13)
      {
        if (AudioDebugComponentFromEntity)
          v15 = AudioDebugComponentFromEntity;
        else
          v15 = v10;
        v17 = v15;
        if (v15)
          re::HashTable<re::ecs2::AudioPlayerComponent *,re::ecs2::AudioDebugComponent const*,re::Hash<re::ecs2::AudioPlayerComponent *>,re::EqualTo<re::ecs2::AudioPlayerComponent *>,true,false>::add<re::ecs2::AudioDebugComponent const*&>(v11, &v18, &v17);
      }
      ++a3;
      v12 -= 8;
    }
    while (v12);
  }
  return 0;
}

uint64_t re::ecs2::AudioDebugSystem::willRemoveAudioPlayerComponents(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (a4)
  {
    v5 = a1 + 272;
    v6 = 8 * a4;
    do
    {
      v7 = *a3++;
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::remove(v5, v7);
      v6 -= 8;
    }
    while (v6);
  }
  return 0;
}

uint64_t re::ecs2::AudioDebugSystem::update(uint64_t result, re::ecs2::ComponentHelper *a2, uint64_t a3)
{
  re::ecs2::ComponentHelper *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  double *v17;
  double *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  re::AssetManager *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  re::ecs2::TransformComponent **v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  int v45;
  int v46;
  int v47;
  __int8 v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  BOOL v55;
  uint64_t *v56;
  int v57;
  unsigned int v59;
  unsigned int v60;
  double *v61;
  double *v62;
  double *v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  re::ecs2::Entity *v67;
  uint64_t v68;
  re *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  re::ecs2::ComponentHelper *v73;
  uint64_t v74;
  re::ecs2::TransformComponent **v75;
  _OWORD v76[2];
  int32x4_t v77;
  int32x4_t v78[3];
  int32x4_t v79;
  int32x4_t v80;
  float32x4_t v81;
  int32x4_t v82;
  __int128 v83;
  float32x4_t v84;
  uint64_t v85;
  float32x4_t *v86;
  _QWORD v87[132];
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  unint64_t v94[13];
  int v95;
  int v96;
  int v97;
  char v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  char v106;
  uint64_t v107;

  v107 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if ((a3 & 0x100000000) == 0)
    {
      v3 = a2;
      v4 = result;
      v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 40) + 32))(*(_QWORD *)(result + 40));
      result = re::ServiceLocator::serviceOrNull<re::Engine>(v5);
      if (!result || (*(_BYTE *)(result + 424) & 0x10) != 0)
      {
        v6 = *(_QWORD *)(v4 + 112);
        if (v6)
        {
          LODWORD(v83) = 0;
          v81 = 0u;
          v82 = 0u;
          *(_QWORD *)((char *)&v83 + 4) = 0x7FFFFFFFLL;
          if (*(_DWORD *)(v4 + 252))
          {
            re::PrimitiveRenderingContext::PrimitiveRenderingContext((re::PrimitiveRenderingContext *)v94, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 104) + 312) + 224), *(re::RenderManager **)(*(_QWORD *)(*(_QWORD *)(v6 + 104) + 312) + 248));
            re::audio::MeshVisualizer::setMaterial(*(re::audio::MeshVisualizer **)(v4 + 128), *(re::RenderManager **)(v4 + 112), (re::PrimitiveRenderingContext *)v94);
            v7 = *(unsigned int *)(v4 + 256);
            if ((_DWORD)v7)
            {
              v8 = 0;
              v9 = (int *)(*(_QWORD *)(v4 + 240) + 8);
              while (1)
              {
                v10 = *v9;
                v9 += 8;
                if (v10 < 0)
                  break;
                if (v7 == ++v8)
                {
                  LODWORD(v8) = *(_DWORD *)(v4 + 256);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v8) = 0;
            }
            if ((_DWORD)v7 != (_DWORD)v8)
            {
              v11 = v8;
              v12 = *(_DWORD *)(v4 + 256);
              do
              {
                v13 = *(_QWORD *)(v4 + 240) + 32 * v11;
                v14 = *(_QWORD *)(v13 + 24);
                if (v14 && *(_DWORD *)(v14 + 32) && *(_BYTE *)(v14 + 25) == 1)
                {
                  v15 = *(_QWORD *)(v13 + 16);
                  re::ecs2::TransformHelper::computeWorldMatrixForRendering(*(re::ecs2::TransformComponent ***)(v15 + 16), *(_QWORD *)(v4 + 120), &v84);
                  re::audio::cleanUpTransformForPHASE(&v84, v16, v17, v18, (uint64_t)v87);
                  v77 = 0u;
                  v79 = 0u;
                  v80 = (int32x4_t)xmmword_2260E5D70;
                  re::decomposeScaleRotationTranslation<float>((uint64_t)v87, &v77, &v80, &v79);
                  v78[0] = v77;
                  v78[1] = v80;
                  v78[2] = v79;
                  re::AssetHandle::AssetHandle((re::AssetHandle *)&v77, (const re::AssetHandle *)(v15 + 32));
                  if (v77.i64[1])
                  {
                    v19 = atomic_load((unsigned int *)(v77.i64[1] + 704));
                    if (v19 == 2)
                    {
                      v20 = re::AssetHandle::asset<re::AcousticMeshAsset>((re::AcousticMeshAsset *)&v77);
                      if (*(_DWORD *)(v20 + 8) == 1)
                      {
                        v21 = v20;
                        re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::add((uint64_t)&v81, (re::AssetHandle *)&v77);
                        re::AssetHandle::AssetHandle((re::AssetHandle *)v76, (const re::AssetHandle *)&v77);
                        v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 40) + 32))(*(_QWORD *)(v4 + 40));
                        v23 = (re::AssetManager *)re::ServiceLocator::service<re::AssetService>(v22);
                        re::audio::MeshVisualizer::setupMaterials(*(re::audio::MeshVisualizer **)(v4 + 128), v23, *(re::RenderManager **)(v4 + 112));
                        v24 = *(_QWORD *)(v4 + 128);
                        if (*(_BYTE *)(v4 + 168)
                          || (v40 = *(_DWORD *)(v24 + 104) == 2, (*(_BYTE *)(v4 + 168) = v40) != 0))
                        {
                          re::AssetHandle::AssetHandle((re::AssetHandle *)v87, (const re::AssetHandle *)v76);
                          re::audio::MeshVisualizer::addDebugVisMesh(v24, (const re::AssetHandle *)v87, v21 + 16);
                          re::AssetHandle::~AssetHandle((re::AssetHandle *)v87);
                          v25 = *(_QWORD *)(v4 + 128);
                          re::AssetHandle::AssetHandle((re::AssetHandle *)&v84, (const re::AssetHandle *)v76);
                          re::audio::MeshVisualizer::drawDebugVisMesh(v25, (uint64_t)&v84, v78, (uint64_t)v94);
                          re::AssetHandle::~AssetHandle((re::AssetHandle *)&v84);
                        }
                        re::AssetHandle::~AssetHandle((re::AssetHandle *)v76);
                      }
                    }
                  }
                  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v77);
                  v12 = *(_DWORD *)(v4 + 256);
                }
                if (v12 <= (int)v8 + 1)
                  v26 = v8 + 1;
                else
                  v26 = v12;
                while (1)
                {
                  v11 = (v8 + 1);
                  if (v26 - 1 == (_DWORD)v8)
                    break;
                  LODWORD(v8) = v8 + 1;
                  v27 = v11;
                  if ((*(_DWORD *)(*(_QWORD *)(v4 + 240) + 32 * v11 + 8) & 0x80000000) != 0)
                    goto LABEL_34;
                }
                v27 = v26;
LABEL_34:
                LODWORD(v8) = v27;
              }
              while ((_DWORD)v7 != v27);
            }
            v28 = *(_QWORD *)(*(_QWORD *)(v4 + 112) + 104);
            if (v28)
              v29 = *(_QWORD *)(v28 + 312);
            else
              v29 = 0;
            re::PrimitiveRenderer::submitContext(v29, v94);
            if (v101)
            {
              if (v105)
                (*(void (**)(void))(*(_QWORD *)v101 + 40))();
              v105 = 0;
              v102 = 0;
              v103 = 0;
              v101 = 0;
              ++v104;
            }
            re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit((uint64_t)&v99);
            re::PrimitiveRenderingDynamicGeometry::~PrimitiveRenderingDynamicGeometry((re::PrimitiveRenderingDynamicGeometry *)v94);
          }
          re::audio::MeshVisualizer::removeDebugVisMeshesNotInUse(*(_QWORD *)(v4 + 128), (uint64_t)&v81);
          re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)&v81);
          if (*(_DWORD *)(v4 + 300))
          {
            v30 = *(_QWORD *)(*(_QWORD *)(v4 + 112) + 104);
            if (v30)
              v74 = *(_QWORD *)(v30 + 312);
            else
              v74 = 0;
            LOBYTE(v94[0]) = 0;
            v106 = 0;
            v31 = *(unsigned int *)(v4 + 304);
            if ((_DWORD)v31)
            {
              v32 = 0;
              v33 = (int *)(*(_QWORD *)(v4 + 288) + 8);
              while (1)
              {
                v34 = *v33;
                v33 += 8;
                if (v34 < 0)
                  break;
                if (v31 == ++v32)
                {
                  LODWORD(v32) = *(_DWORD *)(v4 + 304);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v32) = 0;
            }
            if ((_DWORD)v31 != (_DWORD)v32)
            {
              v35 = v32;
              v73 = v3;
              v36 = *(_DWORD *)(v4 + 304);
              do
              {
                v37 = *(_QWORD *)(v4 + 288) + 32 * v35;
                v39 = *(_QWORD *)(v37 + 16);
                v38 = *(_QWORD *)(v37 + 24);
                if (v39)
                  v40 = v38 == 0;
                else
                  v40 = 1;
                if (!v40)
                {
                  v41 = *(re::ecs2::TransformComponent ***)(v39 + 16);
                  if (v41)
                  {
                    if ((*(_BYTE *)(v38 + 32) & 1) != 0)
                    {
                      v80.i64[0] = 0x300000004;
                      v80.i8[8] = 0;
                      v42 = *(unsigned int *)(v39 + 112);
                      if ((_DWORD)v42)
                      {
                        v43 = 0;
                        v44 = (int *)(*(_QWORD *)(v39 + 96) + 8);
                        while (1)
                        {
                          v45 = *v44;
                          v44 += 8;
                          if (v45 < 0)
                            break;
                          if (v42 == ++v43)
                          {
                            LODWORD(v43) = *(_DWORD *)(v39 + 112);
                            break;
                          }
                        }
                      }
                      else
                      {
                        LODWORD(v43) = 0;
                      }
                      if ((_DWORD)v42 == (_DWORD)v43)
                      {
                        v46 = 4;
                        v47 = 3;
                      }
                      else
                      {
                        v75 = v41;
                        v48 = 0;
                        v49 = v43;
                        v47 = 3;
                        v46 = 4;
                        v50 = *(_DWORD *)(v39 + 112);
                        do
                        {
                          v51 = *(_QWORD *)(v39 + 96) + 32 * v49;
                          v52 = *(_QWORD *)(v51 + 24);
                          if (*(_BYTE *)(v52 + 478))
                          {
                            v53 = *(_QWORD *)(v52 + 256);
                            if ((v53 & 1) != 0)
                              v54 = v53 >> 1;
                            else
                              v54 = v53 >> 1;
                            if (v54 || !*(_QWORD *)(v52 + 40) && (*(_QWORD *)(v52 + 232) || *(_QWORD *)(v52 + 240)))
                            {
                              if (v47)
                                v55 = v47 == 3;
                              else
                                v55 = 1;
                              if (v55)
                                v47 = 0;
                              else
                                v47 = 2;
                            }
                            else if (((v47 - 1) & 0xFFFFFFFD) != 0)
                            {
                              v47 = 2;
                            }
                            else
                            {
                              v47 = 1;
                            }
                            v56 = (uint64_t *)(v51 + 16);
                            v57 = re::ecs2::AudioPlayerComponent::selectInputMode((re::ecs2::AudioPlayerComponent *)v39, *(_QWORD *)(v51 + 16));
                            switch(v57)
                            {
                              case 2:
                                if (v46 == 1 || v46 == 4)
                                  v46 = 1;
                                else
                                  v46 = 3;
                                break;
                              case 1:
                                if (((v46 - 2) & 0xFFFFFFFD) != 0)
                                  v46 = 3;
                                else
                                  v46 = 2;
                                break;
                              case 0:
                                if (v46 == 4)
                                  v46 = 0;
                                else
                                  v46 = 3;
                                break;
                            }
                            v48 |= re::ecs2::AudioPlayerComponent::playbackStateForToken((re::ecs2::AudioPlayerComponent *)v39, *v56) == 1;
                            v50 = *(_DWORD *)(v39 + 112);
                          }
                          if (v50 <= (int)v43 + 1)
                            v59 = v43 + 1;
                          else
                            v59 = v50;
                          while (1)
                          {
                            v49 = (v43 + 1);
                            if (v59 - 1 == (_DWORD)v43)
                              break;
                            LODWORD(v43) = v43 + 1;
                            v60 = v49;
                            if ((*(_DWORD *)(*(_QWORD *)(v39 + 96) + 32 * v49 + 8) & 0x80000000) != 0)
                              goto LABEL_108;
                          }
                          v60 = v59;
LABEL_108:
                          LODWORD(v43) = v60;
                        }
                        while ((_DWORD)v42 != v60);
                        v80.i64[0] = __PAIR64__(v47, v46);
                        v80.i8[8] = v48;
                        v41 = v75;
                      }
                      if (v46 != 4 || v47 != 3)
                      {
                        if (!v106)
                        {
                          re::PrimitiveRenderingContext::PrimitiveRenderingContext((re::PrimitiveRenderingContext *)v87, *(_QWORD *)(v74 + 224), *(re::RenderManager **)(v74 + 248));
                          std::optional<re::PrimitiveRenderingContext>::operator=[abi:nn180100]<re::PrimitiveRenderingContext,void>((uint64_t)v94, (uint64_t)v87);
                          if (v89)
                          {
                            if (v93)
                              (*(void (**)(void))(*(_QWORD *)v89 + 40))();
                            v93 = 0;
                            v90 = 0;
                            v91 = 0;
                            v89 = 0;
                            ++v92;
                          }
                          re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit((uint64_t)&v88);
                          re::PrimitiveRenderingDynamicGeometry::~PrimitiveRenderingDynamicGeometry((re::PrimitiveRenderingDynamicGeometry *)v87);
                          if (v98)
                          {
                            v94[12] = 0;
                            ++v95;
                            v98 = 0;
                          }
                          if (v97)
                            v97 = 0;
                          v96 = 998445679;
                        }
                        re::ecs2::TransformHelper::computeWorldMatrixForRendering(v41, *(_QWORD *)(v4 + 120), &v84);
                        re::audio::cleanUpTransformForPHASE(&v84, v61, v62, v63, (uint64_t)v87);
                        v78[0] = 0u;
                        v77 = (int32x4_t)xmmword_2260E5D70;
                        v76[0] = 0u;
                        re::decomposeScaleRotationTranslation<float>((uint64_t)v87, v78, &v77, v76);
                        v81 = (float32x4_t)v78[0];
                        v82 = v77;
                        v83 = v76[0];
                        if (!v106 || (re::ecs2::AudioDebugSystem::createAxis(v46, &v81, (uint64_t)v94), !v106))
                        {
                          v71 = std::__throw_bad_optional_access[abi:nn180100]();
                          return std::optional<re::PrimitiveRenderingContext>::operator=[abi:nn180100]<re::PrimitiveRenderingContext,void>(v71, v72);
                        }
                        re::ecs2::AudioDebugSystem::createShape((unsigned int *)&v80, (uint64_t)&v81, (uint64_t)v94);
                      }
                      v36 = *(_DWORD *)(v4 + 304);
                    }
                  }
                }
                if (v36 <= (int)v32 + 1)
                  v64 = v32 + 1;
                else
                  v64 = v36;
                while (1)
                {
                  v35 = (v32 + 1);
                  if (v64 - 1 == (_DWORD)v32)
                    break;
                  LODWORD(v32) = v32 + 1;
                  v65 = v35;
                  if ((*(_DWORD *)(*(_QWORD *)(v4 + 288) + 32 * v35 + 8) & 0x80000000) != 0)
                    goto LABEL_136;
                }
                v65 = v64;
LABEL_136:
                LODWORD(v32) = v65;
              }
              while ((_DWORD)v31 != v65);
              v3 = v73;
              if (v106 && !re::PrimitiveRenderingContext::isEmpty((re::PrimitiveRenderingContext *)v94))
              {
                v100 = 0;
                re::PrimitiveRenderer::submitContext(v74, v94);
              }
            }
            std::__optional_destruct_base<re::PrimitiveRenderingContext,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v94);
          }
          v78[0].i64[0] = (uint64_t)v3;
          v66 = *(_QWORD *)(*(_QWORD *)(v4 + 112) + 104);
          if (v66)
            v66 = *(_QWORD *)(v66 + 312);
          v77.i64[0] = v66;
          LOBYTE(v94[0]) = 0;
          v106 = 0;
          v67 = re::ecs2::ComponentHelper::privateSceneDataEntity(v3, (re::ecs2::Scene *)1);
          *(_QWORD *)&v76[0] = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)v67 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioDebugComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
          if (*(_QWORD *)&v76[0])
          {
            v81.i64[0] = 0;
            v81.i8[8] = 1;
            v68 = *(_QWORD *)(v4 + 104);
            if (v68)
            {
              v69 = (re *)(*(uint64_t (**)(uint64_t, re::ecs2::ComponentHelper *))(*(_QWORD *)v68 + 16))(v68, v3);
              v87[0] = v78;
              v87[1] = v76;
              v87[2] = v94;
              v87[3] = &v77;
              v87[4] = v4;
              v87[5] = &v81;
              v70 = re::globalAllocators(v69)[2];
              v84.i64[0] = (uint64_t)&off_24ED66588;
              v84.i64[1] = (uint64_t)v87;
              v85 = v70;
              v86 = &v84;
              (*(void (**)(re *, float32x4_t *))(*(_QWORD *)v69 + 808))(v69, &v84);
              if (v86)
              {
                (*(void (**)(float32x4_t *))v86->i64[0])(v86);
                if (v86 != &v84)
                  (*(void (**)(uint64_t))(*(_QWORD *)v85 + 40))(v85);
                v86 = 0;
              }
              if (v106)
              {
                if (!re::PrimitiveRenderingContext::isEmpty((re::PrimitiveRenderingContext *)v94))
                {
                  v100 = 0;
                  re::PrimitiveRenderer::submitContext(v77.i64[0], v94);
                }
              }
            }
          }
          return std::__optional_destruct_base<re::PrimitiveRenderingContext,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v94);
        }
      }
    }
  }
  return result;
}

uint64_t std::optional<re::PrimitiveRenderingContext>::operator=[abi:nn180100]<re::PrimitiveRenderingContext,void>(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t j;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t k;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t result;

  if (*(_BYTE *)(a1 + 1200))
  {
    for (i = 0; i != 280; i += 40)
    {
      if (a1 != a2)
      {
        v5 = *(_QWORD *)(a1 + i);
        v6 = *(_QWORD *)(a2 + i);
        if (v5)
          v7 = v6 == 0;
        else
          v7 = 1;
        if (!v7 && v5 != v6)
        {
          re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
          _os_crash();
          __break(1u);
LABEL_61:
          re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
          _os_crash();
          __break(1u);
LABEL_62:
          re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
          _os_crash();
          __break(1u);
LABEL_63:
          re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
          _os_crash();
          __break(1u);
LABEL_64:
          re::internal::assertLog((re::internal *)4, v57, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
          _os_crash();
          __break(1u);
          goto LABEL_65;
        }
        v9 = a1 + i;
        v10 = a2 + i;
        v11 = *(_QWORD *)(a1 + i + 8);
        v12 = *(_QWORD *)(a2 + i + 8);
        *(_QWORD *)v9 = v6;
        *(_QWORD *)(v9 + 8) = v12;
        *(_QWORD *)v10 = v5;
        *(_QWORD *)(v10 + 8) = v11;
        v13 = *(_QWORD *)(a1 + i + 16);
        *(_QWORD *)(v9 + 16) = *(_QWORD *)(a2 + i + 16);
        *(_QWORD *)(v10 + 16) = v13;
        v14 = *(_QWORD *)(a1 + i + 32);
        *(_QWORD *)(v9 + 32) = *(_QWORD *)(a2 + i + 32);
        *(_QWORD *)(v10 + 32) = v14;
        *(_DWORD *)(v10 + 24) = *(_DWORD *)(a2 + i + 24) + 1;
        *(_DWORD *)(v9 + 24) = *(_DWORD *)(a1 + i + 24) + 1;
      }
    }
    v15 = 0;
    v16 = *(_OWORD *)(a2 + 288);
    v17 = *(_OWORD *)(a2 + 304);
    v18 = *(_OWORD *)(a2 + 336);
    *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
    *(_OWORD *)(a1 + 336) = v18;
    *(_OWORD *)(a1 + 288) = v16;
    *(_OWORD *)(a1 + 304) = v17;
    v19 = *(_OWORD *)(a2 + 352);
    v20 = *(_OWORD *)(a2 + 368);
    v21 = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
    *(_OWORD *)(a1 + 400) = v21;
    *(_OWORD *)(a1 + 352) = v19;
    *(_OWORD *)(a1 + 368) = v20;
    v22 = *(_OWORD *)(a2 + 416);
    v23 = *(_OWORD *)(a2 + 432);
    v24 = *(_OWORD *)(a2 + 464);
    *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 464) = v24;
    *(_OWORD *)(a1 + 416) = v22;
    *(_OWORD *)(a1 + 432) = v23;
    v25 = *(_OWORD *)(a2 + 480);
    v26 = *(_OWORD *)(a2 + 496);
    v27 = *(_OWORD *)(a2 + 512);
    *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
    *(_OWORD *)(a1 + 496) = v26;
    *(_OWORD *)(a1 + 512) = v27;
    *(_OWORD *)(a1 + 480) = v25;
    do
    {
      if (a1 != a2)
      {
        v28 = *(_QWORD *)(a1 + v15 + 536);
        v29 = *(_QWORD *)(a2 + v15 + 536);
        if (v28)
          v30 = v29 == 0;
        else
          v30 = 1;
        if (!v30 && v28 != v29)
          goto LABEL_61;
        *(_QWORD *)(a1 + v15 + 536) = v29;
        *(_QWORD *)(a2 + v15 + 536) = v28;
        v32 = a1 + v15;
        v33 = a2 + v15;
        v34 = *(_QWORD *)(a1 + v15 + 544);
        *(_QWORD *)(v32 + 544) = *(_QWORD *)(a2 + v15 + 544);
        *(_QWORD *)(v33 + 544) = v34;
        v35 = *(_QWORD *)(a1 + v15 + 552);
        *(_QWORD *)(v32 + 552) = *(_QWORD *)(a2 + v15 + 552);
        *(_QWORD *)(v33 + 552) = v35;
        v36 = *(_QWORD *)(a1 + v15 + 568);
        *(_QWORD *)(v32 + 568) = *(_QWORD *)(a2 + v15 + 568);
        *(_QWORD *)(v33 + 568) = v36;
        *(_DWORD *)(v33 + 560) = *(_DWORD *)(a2 + v15 + 560) + 1;
        *(_DWORD *)(v32 + 560) = *(_DWORD *)(a1 + v15 + 560) + 1;
      }
      v15 += 40;
    }
    while (v15 != 160);
    for (j = 0; j != 160; j += 40)
    {
      if (a1 != a2)
      {
        v38 = *(_QWORD *)(a1 + j + 696);
        v39 = *(_QWORD *)(a2 + j + 696);
        if (v38)
          v40 = v39 == 0;
        else
          v40 = 1;
        if (!v40 && v38 != v39)
          goto LABEL_62;
        *(_QWORD *)(a1 + j + 696) = v39;
        *(_QWORD *)(a2 + j + 696) = v38;
        v42 = a1 + j;
        v43 = a2 + j;
        v44 = *(_QWORD *)(a1 + j + 704);
        *(_QWORD *)(v42 + 704) = *(_QWORD *)(a2 + j + 704);
        *(_QWORD *)(v43 + 704) = v44;
        v45 = *(_QWORD *)(a1 + j + 712);
        *(_QWORD *)(v42 + 712) = *(_QWORD *)(a2 + j + 712);
        *(_QWORD *)(v43 + 712) = v45;
        v46 = *(_QWORD *)(a1 + j + 728);
        *(_QWORD *)(v42 + 728) = *(_QWORD *)(a2 + j + 728);
        *(_QWORD *)(v43 + 728) = v46;
        *(_DWORD *)(v43 + 720) = *(_DWORD *)(a2 + j + 720) + 1;
        *(_DWORD *)(v42 + 720) = *(_DWORD *)(a1 + j + 720) + 1;
      }
    }
    for (k = 0; k != 160; k += 40)
    {
      if (a1 != a2)
      {
        v48 = *(_QWORD *)(a1 + k + 856);
        v49 = *(_QWORD *)(a2 + k + 856);
        if (v48)
          v50 = v49 == 0;
        else
          v50 = 1;
        if (!v50 && v48 != v49)
          goto LABEL_63;
        *(_QWORD *)(a1 + k + 856) = v49;
        *(_QWORD *)(a2 + k + 856) = v48;
        v52 = a1 + k;
        v53 = a2 + k;
        v54 = *(_QWORD *)(a1 + k + 864);
        *(_QWORD *)(v52 + 864) = *(_QWORD *)(a2 + k + 864);
        *(_QWORD *)(v53 + 864) = v54;
        v55 = *(_QWORD *)(a1 + k + 872);
        *(_QWORD *)(v52 + 872) = *(_QWORD *)(a2 + k + 872);
        *(_QWORD *)(v53 + 872) = v55;
        v56 = *(_QWORD *)(a1 + k + 888);
        *(_QWORD *)(v52 + 888) = *(_QWORD *)(a2 + k + 888);
        *(_QWORD *)(v53 + 888) = v56;
        *(_DWORD *)(v53 + 880) = *(_DWORD *)(a2 + k + 880) + 1;
        *(_DWORD *)(v52 + 880) = *(_DWORD *)(a1 + k + 880) + 1;
      }
    }
    re::DynamicArray<re::FixedFunction<48ul,REEventHandlerResult ()(void *,void const*)>>::operator=(a1 + 1016, a2 + 1016);
    if (a1 == a2)
    {
LABEL_58:
      v70 = *(_OWORD *)(a2 + 1176);
      *(_QWORD *)(a1 + 1192) = *(_QWORD *)(a2 + 1192);
      *(_OWORD *)(a1 + 1176) = v70;
      return a1;
    }
    v58 = *(_QWORD *)(a1 + 1056);
    v59 = *(_QWORD *)(a2 + 1056);
    if (v58 && v59 && v58 != v59)
      goto LABEL_64;
    *(_QWORD *)(a1 + 1056) = v59;
    *(_QWORD *)(a2 + 1056) = v58;
    v60 = *(_QWORD *)(a1 + 1064);
    *(_QWORD *)(a1 + 1064) = *(_QWORD *)(a2 + 1064);
    *(_QWORD *)(a2 + 1064) = v60;
    v61 = *(_QWORD *)(a1 + 1072);
    *(_QWORD *)(a1 + 1072) = *(_QWORD *)(a2 + 1072);
    *(_QWORD *)(a2 + 1072) = v61;
    v62 = *(_QWORD *)(a1 + 1088);
    *(_QWORD *)(a1 + 1088) = *(_QWORD *)(a2 + 1088);
    *(_QWORD *)(a2 + 1088) = v62;
    ++*(_DWORD *)(a2 + 1080);
    ++*(_DWORD *)(a1 + 1080);
    v63 = *(_OWORD *)(a2 + 1096);
    v64 = *(_OWORD *)(a2 + 1112);
    *(_DWORD *)(a1 + 1128) = *(_DWORD *)(a2 + 1128);
    *(_OWORD *)(a1 + 1096) = v63;
    *(_OWORD *)(a1 + 1112) = v64;
    v65 = *(_QWORD *)(a1 + 1136);
    v66 = *(_QWORD *)(a2 + 1136);
    if (!v65 || !v66 || v65 == v66)
    {
      *(_QWORD *)(a1 + 1136) = v66;
      *(_QWORD *)(a2 + 1136) = v65;
      v67 = *(_QWORD *)(a1 + 1144);
      *(_QWORD *)(a1 + 1144) = *(_QWORD *)(a2 + 1144);
      *(_QWORD *)(a2 + 1144) = v67;
      v68 = *(_QWORD *)(a1 + 1152);
      *(_QWORD *)(a1 + 1152) = *(_QWORD *)(a2 + 1152);
      *(_QWORD *)(a2 + 1152) = v68;
      v69 = *(_QWORD *)(a1 + 1168);
      *(_QWORD *)(a1 + 1168) = *(_QWORD *)(a2 + 1168);
      *(_QWORD *)(a2 + 1168) = v69;
      ++*(_DWORD *)(a2 + 1160);
      ++*(_DWORD *)(a1 + 1160);
      goto LABEL_58;
    }
LABEL_65:
    re::internal::assertLog((re::internal *)4, v57, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    re::PrimitiveRenderingDynamicGeometry::PrimitiveRenderingDynamicGeometry(a1, a2);
    *(_QWORD *)(a1 + 1088) = 0;
    *(_QWORD *)(a1 + 1056) = 0;
    *(_DWORD *)(a1 + 1080) = 0;
    *(_QWORD *)(a1 + 1072) = 0;
    *(_QWORD *)(a1 + 1064) = 0;
    *(_QWORD *)(a1 + 1056) = *(_QWORD *)(a2 + 1056);
    *(_QWORD *)(a2 + 1056) = 0;
    *(_QWORD *)(a1 + 1064) = *(_QWORD *)(a2 + 1064);
    *(_QWORD *)(a2 + 1064) = 0;
    v71 = *(_QWORD *)(a1 + 1072);
    *(_QWORD *)(a1 + 1072) = *(_QWORD *)(a2 + 1072);
    *(_QWORD *)(a2 + 1072) = v71;
    v72 = *(_QWORD *)(a1 + 1088);
    *(_QWORD *)(a1 + 1088) = *(_QWORD *)(a2 + 1088);
    *(_QWORD *)(a2 + 1088) = v72;
    ++*(_DWORD *)(a2 + 1080);
    ++*(_DWORD *)(a1 + 1080);
    v73 = *(_OWORD *)(a2 + 1096);
    v74 = *(_OWORD *)(a2 + 1112);
    *(_DWORD *)(a1 + 1128) = *(_DWORD *)(a2 + 1128);
    *(_OWORD *)(a1 + 1096) = v73;
    *(_OWORD *)(a1 + 1112) = v74;
    *(_QWORD *)(a1 + 1168) = 0;
    *(_QWORD *)(a1 + 1136) = 0;
    *(_QWORD *)(a1 + 1152) = 0;
    *(_QWORD *)(a1 + 1144) = 0;
    *(_DWORD *)(a1 + 1160) = 0;
    *(_QWORD *)(a1 + 1136) = *(_QWORD *)(a2 + 1136);
    *(_QWORD *)(a2 + 1136) = 0;
    *(_QWORD *)(a1 + 1144) = *(_QWORD *)(a2 + 1144);
    *(_QWORD *)(a2 + 1144) = 0;
    v75 = *(_QWORD *)(a1 + 1152);
    *(_QWORD *)(a1 + 1152) = *(_QWORD *)(a2 + 1152);
    *(_QWORD *)(a2 + 1152) = v75;
    v76 = *(_QWORD *)(a1 + 1168);
    *(_QWORD *)(a1 + 1168) = *(_QWORD *)(a2 + 1168);
    *(_QWORD *)(a2 + 1168) = v76;
    ++*(_DWORD *)(a2 + 1160);
    ++*(_DWORD *)(a1 + 1160);
    v77 = *(_OWORD *)(a2 + 1176);
    *(_QWORD *)(a1 + 1192) = *(_QWORD *)(a2 + 1192);
    *(_OWORD *)(a1 + 1176) = v77;
    *(_BYTE *)(a1 + 1200) = 1;
    return a1;
  }
  return result;
}

float re::ecs2::AudioDebugSystem::createAxis(int a1, float32x4_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  float result;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  uint64_t v37;
  uint64_t v38;

  if (a1 != 2)
  {
    v37 = v3;
    v38 = v4;
    v6 = a2[1];
    v36 = a2[2];
    v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL);
    v8 = vnegq_f32(v6);
    v9 = vmlaq_f32(vmulq_f32(v6, (float32x4_t)xmmword_2261027B0), (float32x4_t)xmmword_2260E5F10, v7);
    v10 = (int8x16_t)vaddq_f32(v9, v9);
    v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), v10, 0xCuLL);
    v12 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), v8), v11, v7);
    v13 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v11, v6, 3), (float32x4_t)xmmword_2260E5F10), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), v12, 0xCuLL));
    v14 = vmlaq_f32(vmulq_f32(v6, (float32x4_t)xmmword_2261027C0), (float32x4_t)xmmword_2260E5F20, v7);
    v15 = (int8x16_t)vaddq_f32(v14, v14);
    v16 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), v15, 0xCuLL);
    v17 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), (int8x16_t)v16, 0xCuLL), v8), v16, v7);
    v18 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v16, v6, 3), (float32x4_t)xmmword_2260E5F20), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), v17, 0xCuLL));
    v19 = vmlaq_f32(vmulq_f32(v6, (float32x4_t)xmmword_2261027D0), (float32x4_t)xmmword_2260E5F40, v7);
    v20 = (int8x16_t)vaddq_f32(v19, v19);
    v21 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), v20, 0xCuLL);
    v22 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL), v8), v21, v7);
    v23 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v21, v6, 3), (float32x4_t)xmmword_2260E5F40), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), v22, 0xCuLL));
    v24 = vmulq_f32(v13, v13);
    v25 = vmulq_n_f32(v13, 0.1/ sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]));
    v26 = vmulq_f32(v18, v18);
    v27 = vmulq_n_f32(v18, 0.1/ sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]));
    v28 = vmulq_f32(v23, v23);
    v33 = v27;
    v34 = vmulq_n_f32(v23, 0.1/ sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0]));
    v35 = vaddq_f32(v36, v25);
    v29 = re::PrimitiveRenderingContext::addLine(a3, &v36, &v35);
    v35 = vaddq_f32(v36, v33);
    v30 = re::PrimitiveRenderingContext::addLine(a3, &v36, &v35);
    v35 = vaddq_f32(v36, v34);
    v31 = re::PrimitiveRenderingContext::addLine(a3, &v36, &v35);
    v35 = (float32x4_t)xmmword_226104350;
    re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v29, (__n128 *)&v35, (_anonymous_namespace_ *)(a3 + 200), (_BYTE *)(a3 + 517), *(_QWORD *)(a3 + 136), *(_QWORD *)(a3 + 528), *(re **)(a3 + 1192));
    v35 = (float32x4_t)xmmword_22610BBE0;
    re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v30, (__n128 *)&v35, (_anonymous_namespace_ *)(a3 + 200), (_BYTE *)(a3 + 517), *(_QWORD *)(a3 + 136), *(_QWORD *)(a3 + 528), *(re **)(a3 + 1192));
    v35 = (float32x4_t)xmmword_22610BC10;
    re::PrimitiveRenderingDynamicGeometry::set<re::Vector4<float>,re::PrimitiveRenderingAttribute>(5, v31, (__n128 *)&v35, (_anonymous_namespace_ *)(a3 + 200), (_BYTE *)(a3 + 517), *(_QWORD *)(a3 + 136), *(_QWORD *)(a3 + 528), *(re **)(a3 + 1192));
  }
  return result;
}

double re::ecs2::AudioDebugSystem::createShape(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  float v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x4_t v23;
  float v24;
  float v25;
  float32x2_t v26;
  float32x2_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int32x2_t v30;
  float v31;
  float32x4_t v32;
  int32x4_t v33;
  float32x2_t v34;
  float32x2_t v35;
  float32x4_t v36;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v41;
  unint64_t v46;
  unsigned __int8 v47;
  unint64_t v48;
  unsigned int v49;
  __int128 v50;
  float v51;
  int32x4_t v53;
  float32x4_t v54;

  _Q0 = *(float32x4_t *)(a2 + 16);
  v6 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL);
  v7 = vnegq_f32(_Q0);
  v8 = vmlaq_f32(vmulq_f32(_Q0, (float32x4_t)xmmword_2261027B0), (float32x4_t)xmmword_2260E5F10, v6);
  v9 = (int8x16_t)vaddq_f32(v8, v8);
  v10 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), v9, 0xCuLL);
  v11 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL), v7), v10, v6);
  v12 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v10, _Q0, 3), (float32x4_t)xmmword_2260E5F10), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), v11, 0xCuLL));
  v13 = vmlaq_f32(vmulq_f32(_Q0, (float32x4_t)xmmword_2261176C0), (float32x4_t)xmmword_226108EE0, v6);
  v14 = (int8x16_t)vaddq_f32(v13, v13);
  v15 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), v14, 0xCuLL);
  v16 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL), v7), v15, v6);
  v17 = vaddq_f32(vaddq_f32(vmulq_laneq_f32(v15, _Q0, 3), (float32x4_t)xmmword_226108EE0), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), v16, 0xCuLL));
  v18 = vmulq_f32(v12, v12);
  LODWORD(v19) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).u32[0];
  if (fabsf(v19) >= 1.0e-10)
  {
    v20 = v19;
    v21 = vrsqrte_f32((float32x2_t)LODWORD(v19));
    v22 = vmul_f32(v21, vrsqrts_f32((float32x2_t)LODWORD(v20), vmul_f32(v21, v21)));
    v12 = vmulq_n_f32(v12, vmul_f32(v22, vrsqrts_f32((float32x2_t)LODWORD(v20), vmul_f32(v22, v22))).f32[0]);
  }
  v23 = vmulq_f32(v17, v17);
  LODWORD(v24) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).u32[0];
  if (fabsf(v24) >= 1.0e-10)
  {
    v25 = v24;
    v26 = vrsqrte_f32((float32x2_t)LODWORD(v24));
    v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)LODWORD(v25), vmul_f32(v26, v26)));
    v17 = vmulq_n_f32(v17, vmul_f32(v27, vrsqrts_f32((float32x2_t)LODWORD(v25), vmul_f32(v27, v27))).f32[0]);
  }
  v28 = (float32x4_t)vdupq_laneq_s32((int32x4_t)_Q0, 3);
  v29 = vmulq_f32(v12, v17);
  v30 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).u64[0];
  if (*(float *)v30.i32 == -1.0
    || (v31 = (float)((float)(fabsf(*(float *)v30.i32) + 1.0) + 1.0) * 0.00001,
        *(float *)v30.i32 = *(float *)v30.i32 + 1.0,
        fabsf(*(float *)v30.i32) < v31))
  {
    if (fabsf(v12.f32[2]) >= 0.00001)
    {
      v32.i32[0] = 0;
      v32.f32[1] = -v12.f32[2];
      v32.i64[1] = v12.u32[1];
    }
    else
    {
      v32 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v12.f32[1]), (int32x4_t)v12);
    }
    v33 = (int32x4_t)vmulq_f32(v32, v32);
    v33.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v33, 2), vadd_f32(*(float32x2_t *)v33.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v33.i8, 1))).u32[0];
    v34 = vrsqrte_f32((float32x2_t)v33.u32[0]);
    v35 = vmul_f32(v34, vrsqrts_f32((float32x2_t)v33.u32[0], vmul_f32(v34, v34)));
    v36 = vmulq_n_f32(v32, vmul_f32(v35, vrsqrts_f32((float32x2_t)v33.u32[0], vmul_f32(v35, v35))).f32[0]);
    _S3 = 0.0;
  }
  else
  {
    v38 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), (int8x16_t)v17, 0xCuLL), vnegq_f32(v12)), v17, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL));
    v39 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), v38, 0xCuLL);
    *(float *)v30.i32 = sqrtf(*(float *)v30.i32 + *(float *)v30.i32);
    _S3 = *(float *)v30.i32 * 0.5;
    v36 = vdivq_f32(v39, (float32x4_t)vdupq_lane_s32(v30, 0));
  }
  _Q2 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36), (int8x16_t)v36, 0xCuLL), v7), v36, v6);
  v41 = vmlaq_n_f32(vmlaq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q2, (int32x4_t)_Q2), _Q2, 0xCuLL), v36, v28), _Q0, _S3);
  __asm { FMLA            S2, S3, V0.S[3] }
  v41.i32[3] = _Q2.i32[0];
  v54 = v41;
  v46 = *a1;
  if (v46 >= 5)
    v47 = 0;
  else
    v47 = 0x607000304uLL >> (8 * v46);
  v48 = re::PrimitiveRenderingContext::addShape<re::PrimitiveRenderingShape>(a3, v47 & 7, (_OWORD *)(a2 + 32), &v54);
  v53 = vdupq_n_s32(0x3CCCCCCDu);
  re::PrimitiveRenderingContext::setAttribute<re::Vector3<float>,re::PrimitiveRenderingShape>(a3, v48, v47 & 7, 2, (__n128 *)&v53);
  v49 = a1[1];
  if (v49 == 2)
  {
    v50 = xmmword_226120580;
  }
  else if (v49 == 1)
  {
    v50 = xmmword_2260E5F40;
  }
  else
  {
    *(_QWORD *)&v50 = 0;
    DWORD2(v50) = 0;
    if (!v49)
      v50 = xmmword_2260E5F10;
  }
  v51 = 1.0;
  if (!*((_BYTE *)a1 + 8))
    v51 = 0.25;
  *((float *)&v50 + 3) = v51;
  v53 = (int32x4_t)v50;
  return re::PrimitiveRenderingContext::setAttribute<re::Vector4<float>,re::PrimitiveRenderingShape>(a3, v48, v47, 3, (__n128 *)&v53);
}

uint64_t re::AssetHandle::asset<re::AcousticMeshAsset>(re::AcousticMeshAsset *a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v6;
  _QWORD *v7;
  char *v8;
  int v9;
  char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v2 = re::AcousticMeshAsset::assetType(a1);
  v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = v4;
      v7 = re::AssetHandle::assetInfo(a1);
      if ((v7[17] & 1) != 0)
        v8 = (char *)v7[18];
      else
        v8 = (char *)v7 + 137;
      v9 = 136315138;
      v10 = v8;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v9, 0xCu);

    }
  }
  return v3;
}

void re::introspect_AudioDebugDrawMode(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  re *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  StringID v38;
  _QWORD v39[2];
  _QWORD v40[61];

  v2 = atomic_load((unsigned __int8 *)&qword_25410F438);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_25410F438);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Wireframe";
      qword_25410F498 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Solid";
      qword_25410F4A0 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *((_QWORD *)v32 + 1) = 2;
      *((_QWORD *)v32 + 2) = "Transparent";
      qword_25410F4A8 = (uint64_t)v32;
      v33 = re::introspectionAllocator(v32);
      v34 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 24, 8);
      *(_DWORD *)v34 = 1;
      *(_QWORD *)(v34 + 8) = 3;
      *(_QWORD *)(v34 + 16) = "Lines";
      qword_25410F4B0 = v34;
      __cxa_guard_release(&qword_25410F438);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25410F440);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25410F440))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25410F4F8, "AudioDebugDrawMode", 4, 4, 1, 1);
    qword_25410F4F8 = (uint64_t)&off_24ED7D9E8;
    qword_25410F538 = (uint64_t)&re::introspect_AudioDebugDrawMode(BOOL)::enumTable;
    dword_25410F508 = 9;
    __cxa_guard_release(&qword_25410F440);
  }
  if ((_MergedGlobals_255 & 1) == 0)
  {
    _MergedGlobals_255 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25410F4F8, a2);
    v36 = 0xFA7BEE5A61D098C8;
    v37 = "AudioDebugDrawMode";
    v40[0] = 208862;
    v40[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v40);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v40);
      v6 = (unsigned int *)qword_25410F538;
      v39[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v40, &v36, 1, 1, (uint64_t)v39);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v38.var0 = 2 * v12;
            v38.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v40, v16, &v38);
            re::StringID::destroyString((re::StringID *)&v38);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v38.var0 = 2 * v20;
              v38.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v40, v24, &v38);
              re::StringID::destroyString((re::StringID *)&v38);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v40, v25);
      xmmword_25410F518 = (__int128)v38;
      re::StringID::destroyString((re::StringID *)&v36);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v40);
      re::internal::assertLog((re::internal *)5, v35, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AudioDebugDrawMode", v36, v37);
      _os_crash();
      __break(1u);
    }
  }
}

void re::introspect_AudioDebugDrawLevel(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  StringID v36;
  _QWORD v37[2];
  _QWORD v38[61];

  v2 = atomic_load((unsigned __int8 *)&qword_25410F448);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_25410F448);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Disabled";
      qword_25410F480 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "ECSComponent";
      qword_25410F488 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = 2;
      *(_QWORD *)(v32 + 16) = "PHASE";
      qword_25410F490 = v32;
      __cxa_guard_release(&qword_25410F448);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25410F450);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25410F450))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25410F540, "AudioDebugDrawLevel", 1, 1, 1, 1);
    qword_25410F540 = (uint64_t)&off_24ED7D9E8;
    qword_25410F580 = (uint64_t)&re::introspect_AudioDebugDrawLevel(BOOL)::enumTable;
    dword_25410F550 = 9;
    __cxa_guard_release(&qword_25410F450);
  }
  if ((byte_25410F431 & 1) == 0)
  {
    byte_25410F431 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25410F540, a2);
    v34 = 0x5501DCF1D81DC1C6;
    v35 = "AudioDebugDrawLevel";
    v38[0] = 0x31CD534126;
    v38[1] = "uint8_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v38);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v38);
      v6 = (unsigned int *)qword_25410F580;
      v37[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v36.var0 = 2 * v12;
            v36.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v16, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v36.var0 = 2 * v20;
              v36.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v24, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v25);
      xmmword_25410F560 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AudioDebugDrawLevel", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

void re::introspect_AudioDebugDrawOptions(re *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  re *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  StringID v38;
  _QWORD v39[2];
  _QWORD v40[61];

  v2 = atomic_load((unsigned __int8 *)&qword_25410F458);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_25410F458);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Disabled";
      qword_25410F4B8 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "AudioSources";
      qword_25410F4C0 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *((_QWORD *)v32 + 1) = 2;
      *((_QWORD *)v32 + 2) = "VirtualAcousticGeometries";
      qword_25410F4C8 = (uint64_t)v32;
      v33 = re::introspectionAllocator(v32);
      v34 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 24, 8);
      *(_DWORD *)v34 = 1;
      *(_QWORD *)(v34 + 8) = 4;
      *(_QWORD *)(v34 + 16) = "ARAcousticGeometries";
      qword_25410F4D0 = v34;
      __cxa_guard_release(&qword_25410F458);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25410F460);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25410F460))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25410F588, "AudioDebugDrawOptions", 4, 4, 1, 1);
    qword_25410F588 = (uint64_t)&off_24ED7D9E8;
    qword_25410F5C8 = (uint64_t)&re::introspect_AudioDebugDrawOptions(BOOL)::enumTable;
    dword_25410F598 = 9;
    __cxa_guard_release(&qword_25410F460);
  }
  if ((byte_25410F432 & 1) == 0)
  {
    byte_25410F432 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25410F588, a2);
    v36 = 0x1BFE67DDAA6FE07ALL;
    v37 = "AudioDebugDrawOptions";
    v40[0] = 0x607DD0F01DCLL;
    v40[1] = "uint32_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v40);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v40);
      v6 = (unsigned int *)qword_25410F5C8;
      v39[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v40, &v36, 1, 1, (uint64_t)v39);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v38.var0 = 2 * v12;
            v38.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v40, v16, &v38);
            re::StringID::destroyString((re::StringID *)&v38);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v38.var0 = 2 * v20;
              v38.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v40, v24, &v38);
              re::StringID::destroyString((re::StringID *)&v38);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v40, v25);
      xmmword_25410F5A8 = (__int128)v38;
      re::StringID::destroyString((re::StringID *)&v36);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v40);
      re::internal::assertLog((re::internal *)5, v35, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "AudioDebugDrawOptions", v36, v37);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t *re::ecs2::allocInfo_AudioDebugComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410F468);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410F468))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410F5D0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410F5E0 = 0;
    qword_25410F5F0 = 0;
    qword_25410F5F8 = 0xFFFFFFFFLL;
    qword_25410F5D0 = (uint64_t)&off_24ED7DAA8;
    qword_25410F600 = (uint64_t)"AudioDebugComponent";
    dword_25410F608 = 0;
    xmmword_25410F610 = 0u;
    unk_25410F620 = 0u;
    xmmword_25410F630 = 0u;
    qword_25410F640 = 0;
    __cxa_guard_release(&qword_25410F468);
  }
  return &qword_25410F5D0;
}

void re::ecs2::initInfo_AudioDebugComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;

  v19[0] = 0x5501DB4321E1AA80;
  v19[1] = "AudioDebugComponent";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  v4 = atomic_load((unsigned __int8 *)&qword_25410F470);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410F470);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410F4D8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      re::introspect_AudioDebugDrawLevel((re *)v9, v10);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "debugDrawLevel";
      *(_QWORD *)(v11 + 16) = &qword_25410F540;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x1900000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_25410F4E0 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      re::introspect_AudioDebugDrawMode((re *)v12, v13);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "debugDrawMode";
      *(_QWORD *)(v14 + 16) = &qword_25410F4F8;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x1C00000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_25410F4E8 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      re::introspect_AudioDebugDrawOptions((re *)v15, v16);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "debugDrawOptions";
      *(_QWORD *)(v17 + 16) = &qword_25410F588;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x2000000003;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_25410F4F0 = v17;
      __cxa_guard_release(&qword_25410F470);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_25410F4D8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioDebugComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioDebugComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AudioDebugComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioDebugComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v18 = v20;
}

double re::internal::defaultConstruct<re::ecs2::AudioDebugComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_WORD *)(v3 + 24) = 256;
  *(_QWORD *)v3 = &off_24ED57F38;
  *(_QWORD *)&result = 3;
  *(_QWORD *)(v3 + 28) = 3;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::AudioDebugComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::AudioDebugComponent>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 24) = 256;
  *(_QWORD *)v1 = &off_24ED57F38;
  *(_QWORD *)&result = 3;
  *(_QWORD *)(v1 + 28) = 3;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AudioDebugComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AudioDebugComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioDebugComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioDebugComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioDebugComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioDebugComponent>, this);
}

uint64_t *re::ecs2::allocInfo_AudioDebugSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410F478);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410F478))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410F648, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410F658 = 0;
    qword_25410F668 = 0;
    qword_25410F670 = 0xFFFFFFFFLL;
    qword_25410F648 = (uint64_t)&off_24ED7DAA8;
    qword_25410F678 = (uint64_t)"AudioDebugSystem";
    dword_25410F680 = 0;
    xmmword_25410F688 = 0u;
    unk_25410F698 = 0u;
    xmmword_25410F6A8 = 0u;
    qword_25410F6B8 = 0;
    __cxa_guard_release(&qword_25410F478);
  }
  return &qword_25410F648;
}

void re::ecs2::initInfo_AudioDebugSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xBB723698560B198;
  v5[1] = "AudioDebugSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x14000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_AudioDebugSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioDebugSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioDebugSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::AudioDebugSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::AudioDebugSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AudioDebugSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioDebugSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::AudioDebugSystem *re::internal::defaultConstruct<re::ecs2::AudioDebugSystem>(int a1, int a2, re::ecs2::AudioDebugSystem *this)
{
  return re::ecs2::AudioDebugSystem::AudioDebugSystem(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::AudioDebugSystem>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AudioDebugSystem>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AudioDebugSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioDebugSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioDebugSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioDebugSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioDebugSystem>, this);
}

void re::ecs2::AudioDebugSystem::~AudioDebugSystem(re::ecs2::AudioDebugSystem *this)
{
  uint64_t *v2;

  *(_QWORD *)this = &off_24ED66470;
  v2 = (uint64_t *)((char *)this + 128);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 34);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 28);
  re::AssetHandle::~AssetHandle((re::ecs2::AudioDebugSystem *)((char *)this + 200));
  re::AssetHandle::~AssetHandle((re::ecs2::AudioDebugSystem *)((char *)this + 176));
  std::unique_ptr<re::TypeRegistry,std::function<void ()(re::TypeRegistry*)>>::~unique_ptr[abi:nn180100](v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t *v2;

  *(_QWORD *)this = &off_24ED66470;
  v2 = (uint64_t *)((char *)this + 128);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 34);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 28);
  re::AssetHandle::~AssetHandle((re::ecs2::AudioDebugSystem *)((char *)this + 200));
  re::AssetHandle::~AssetHandle((re::ecs2::AudioDebugSystem *)((char *)this + 176));
  std::unique_ptr<re::TypeRegistry,std::function<void ()(re::TypeRegistry*)>>::~unique_ptr[abi:nn180100](v2);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::AudioDebugSystem::typeInfo(re::ecs2::AudioDebugSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioDebugSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioDebugSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioDebugSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioDebugSystem>, 0);
}

uint64_t std::__optional_destruct_base<re::PrimitiveRenderingContext,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  uint64_t v2;

  if (*(_BYTE *)(a1 + 1200))
  {
    v2 = *(_QWORD *)(a1 + 1136);
    if (v2)
    {
      if (*(_QWORD *)(a1 + 1168))
        (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
      *(_QWORD *)(a1 + 1168) = 0;
      *(_QWORD *)(a1 + 1144) = 0;
      *(_QWORD *)(a1 + 1152) = 0;
      *(_QWORD *)(a1 + 1136) = 0;
      ++*(_DWORD *)(a1 + 1160);
    }
    re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit(a1 + 1056);
    re::PrimitiveRenderingDynamicGeometry::~PrimitiveRenderingDynamicGeometry((re::PrimitiveRenderingDynamicGeometry *)a1);
  }
  return a1;
}

re::audio::MeshVisualizer *re::audio::MeshVisualizer::MeshVisualizer(re::audio::MeshVisualizer *this)
{
  *((_DWORD *)this + 8) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_QWORD *)((char *)this + 36) = 0x7FFFFFFFLL;
  *((_DWORD *)this + 26) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 30) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  __asm { FMOV            V0.4S, #1.0 }
  *((_OWORD *)this + 8) = _Q0;
  *((_OWORD *)this + 9) = _Q0;
  re::audio::ColorPaletteEditorMaterial::ColorPaletteEditorMaterial((re::audio::MeshVisualizer *)((char *)this + 160));
  re::audio::ColorPaletteARKitMaterial::ColorPaletteARKitMaterial((re::audio::MeshVisualizer *)((char *)this + 240));
  re::audio::ColorPaletteARKitClassification::ColorPaletteARKitClassification((re::audio::MeshVisualizer *)((char *)this + 320));
  *((_WORD *)this + 200) = 257;
  *((_BYTE *)this + 402) = 1;
  return this;
}

void _ZNSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_5audio14MeshVisualizerEJEEENS_10unique_ptrIT_NS_8functionIFvPS7_EEEEEDpOT0_EUlPS5_E_NS_9allocatorISH_EEFvSG_EED0Ev()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *_ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_5audio14MeshVisualizerEJEEENS_10unique_ptrIT_NS_8functionIFvPS7_EEEEEDpOT0_EUlPS5_E_NS_9allocatorISH_EEFvSG_EE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24ED664F8;
  return result;
}

void _ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_5audio14MeshVisualizerEJEEENS_10unique_ptrIT_NS_8functionIFvPS7_EEEEEDpOT0_EUlPS5_E_NS_9allocatorISH_EEFvSG_EE7__cloneEPNS0_6__baseISK_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED664F8;
}

re *_ZNSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_5audio14MeshVisualizerEJEEENS_10unique_ptrIT_NS_8functionIFvPS7_EEEEEDpOT0_EUlPS5_E_NS_9allocatorISH_EEFvSG_EEclEOSG_(re *result, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  double v10;

  v2 = *a2;
  if (*a2)
  {
    v3 = re::globalAllocators(result)[2];
    v4 = (void *)v2[46];
    if (v4)
      operator delete(v4);
    v5 = (void *)v2[40];
    if (v5)
    {
      v2[41] = (uint64_t)v5;
      operator delete(v5);
    }
    v6 = (void *)v2[36];
    if (v6)
      operator delete(v6);
    v7 = (void *)v2[30];
    if (v7)
    {
      v2[31] = (uint64_t)v7;
      operator delete(v7);
    }
    v8 = (void *)v2[26];
    if (v8)
      operator delete(v8);
    v9 = (void *)v2[20];
    if (v9)
    {
      v2[21] = (uint64_t)v9;
      operator delete(v9);
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(v2 + 9));
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(v2 + 6));
    v10 = re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(v2);
    return (re *)(*(uint64_t (**)(uint64_t, uint64_t *, double))(*(_QWORD *)v3 + 40))(v3, v2, v10);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_5audio14MeshVisualizerEJEEENS_10unique_ptrIT_NS_8functionIFvPS7_EEEEEDpOT0_EUlPS5_E_NS_9allocatorISH_EEFvSG_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN2re20makeDefaultUniquePtrINS2_5audio14MeshVisualizerEJEEENS_10unique_ptrIT_NS_8functionIFvPS7_EEEEEDpOT0_EUlPS5_E_NS_9allocatorISH_EEFvSG_EE11target_typeEv()
{
}

double re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 56;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    v2 = result;
    *(_DWORD *)(result + 8) = v1 & 0x7FFFFFFF;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)(result + 16));
    return std::shared_ptr<re::AssetManager>::~shared_ptr[abi:nn180100](v2 + 40);
  }
  return result;
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>,re::Slice<re::ecs2::AudioDebugComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>*,re::Slice<re::ecs2::AudioDebugComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioDebugComponent>,re::Slice<re::ecs2::AudioDebugComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioDebugComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Slice<re::ecs2::AcousticMeshComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AcousticMeshComponent>,re::Slice<re::ecs2::AcousticMeshComponent*>>::Subscription const&,re::Slice<re::ecs2::AcousticMeshComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::createSubscription<re::ecs2::AudioDebugSystem>(re::ecs2::AudioDebugSystem *,REEventHandlerResult (re::ecs2::AudioDebugSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Slice<re::ecs2::AudioPlayerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AudioPlayerComponent>,re::Slice<re::ecs2::AudioPlayerComponent*>>::Subscription const&,re::Slice<re::ecs2::AudioPlayerComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

void re::HashTable<re::ecs2::AcousticMeshComponent *,re::ecs2::AudioDebugComponent const*,re::Hash<re::ecs2::AcousticMeshComponent *>,re::EqualTo<re::ecs2::AcousticMeshComponent *>,true,false>::addEmplace<re::ecs2::AudioDebugComponent const*&>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

uint64_t re::PrimitiveRenderingDynamicGeometry::PrimitiveRenderingDynamicGeometry(uint64_t result, uint64_t a2)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t j;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t k;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  for (i = 0; i != 280; i += 40)
  {
    v3 = result + i;
    v4 = a2 + i;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)v3 = 0;
    *(_DWORD *)(v3 + 24) = 0;
    v5 = *(_QWORD *)(a2 + i + 8);
    *(_QWORD *)v3 = *(_QWORD *)(a2 + i);
    *(_QWORD *)(v3 + 8) = v5;
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    v6 = *(_QWORD *)(result + i + 16);
    *(_QWORD *)(v3 + 16) = *(_QWORD *)(a2 + i + 16);
    *(_QWORD *)(v4 + 16) = v6;
    v7 = *(_QWORD *)(result + i + 32);
    *(_QWORD *)(v3 + 32) = *(_QWORD *)(a2 + i + 32);
    *(_QWORD *)(v4 + 32) = v7;
    *(_DWORD *)(v4 + 24) = *(_DWORD *)(a2 + i + 24) + 1;
    *(_DWORD *)(v3 + 24) = *(_DWORD *)(result + i + 24) + 1;
  }
  v8 = 0;
  v9 = *(_OWORD *)(a2 + 288);
  v10 = *(_OWORD *)(a2 + 304);
  v11 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(result + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(result + 336) = v11;
  *(_OWORD *)(result + 288) = v9;
  *(_OWORD *)(result + 304) = v10;
  v12 = *(_OWORD *)(a2 + 352);
  v13 = *(_OWORD *)(a2 + 368);
  v14 = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(result + 384) = *(_OWORD *)(a2 + 384);
  *(_OWORD *)(result + 400) = v14;
  *(_OWORD *)(result + 352) = v12;
  *(_OWORD *)(result + 368) = v13;
  v15 = *(_OWORD *)(a2 + 416);
  v16 = *(_OWORD *)(a2 + 432);
  v17 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(result + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(result + 464) = v17;
  *(_OWORD *)(result + 416) = v15;
  *(_OWORD *)(result + 432) = v16;
  v18 = *(_OWORD *)(a2 + 480);
  v19 = *(_OWORD *)(a2 + 496);
  v20 = *(_OWORD *)(a2 + 512);
  *(_QWORD *)(result + 528) = *(_QWORD *)(a2 + 528);
  *(_OWORD *)(result + 496) = v19;
  *(_OWORD *)(result + 512) = v20;
  *(_OWORD *)(result + 480) = v18;
  do
  {
    v21 = result + v8;
    v22 = a2 + v8;
    *(_QWORD *)(v21 + 568) = 0;
    *(_QWORD *)(v21 + 536) = 0;
    *(_QWORD *)(v21 + 552) = 0;
    *(_QWORD *)(v21 + 544) = 0;
    *(_DWORD *)(v21 + 560) = 0;
    *(_QWORD *)(v21 + 536) = *(_QWORD *)(a2 + v8 + 536);
    *(_QWORD *)(v22 + 536) = 0;
    *(_QWORD *)(v21 + 544) = *(_QWORD *)(a2 + v8 + 544);
    *(_QWORD *)(v22 + 544) = 0;
    v23 = *(_QWORD *)(result + v8 + 552);
    *(_QWORD *)(v21 + 552) = *(_QWORD *)(a2 + v8 + 552);
    *(_QWORD *)(v22 + 552) = v23;
    v24 = *(_QWORD *)(result + v8 + 568);
    *(_QWORD *)(v21 + 568) = *(_QWORD *)(a2 + v8 + 568);
    *(_QWORD *)(v22 + 568) = v24;
    *(_DWORD *)(v22 + 560) = *(_DWORD *)(a2 + v8 + 560) + 1;
    *(_DWORD *)(v21 + 560) = *(_DWORD *)(result + v8 + 560) + 1;
    v8 += 40;
  }
  while (v8 != 160);
  for (j = 0; j != 160; j += 40)
  {
    v26 = result + j;
    v27 = a2 + j;
    *(_QWORD *)(v26 + 728) = 0;
    *(_QWORD *)(v26 + 696) = 0;
    *(_QWORD *)(v26 + 712) = 0;
    *(_QWORD *)(v26 + 704) = 0;
    *(_DWORD *)(v26 + 720) = 0;
    *(_QWORD *)(v26 + 696) = *(_QWORD *)(a2 + j + 696);
    *(_QWORD *)(v27 + 696) = 0;
    *(_QWORD *)(v26 + 704) = *(_QWORD *)(a2 + j + 704);
    *(_QWORD *)(v27 + 704) = 0;
    v28 = *(_QWORD *)(result + j + 712);
    *(_QWORD *)(v26 + 712) = *(_QWORD *)(a2 + j + 712);
    *(_QWORD *)(v27 + 712) = v28;
    v29 = *(_QWORD *)(result + j + 728);
    *(_QWORD *)(v26 + 728) = *(_QWORD *)(a2 + j + 728);
    *(_QWORD *)(v27 + 728) = v29;
    *(_DWORD *)(v27 + 720) = *(_DWORD *)(a2 + j + 720) + 1;
    *(_DWORD *)(v26 + 720) = *(_DWORD *)(result + j + 720) + 1;
  }
  for (k = 0; k != 160; k += 40)
  {
    v31 = result + k;
    v32 = a2 + k;
    *(_QWORD *)(v31 + 888) = 0;
    *(_QWORD *)(v31 + 856) = 0;
    *(_QWORD *)(v31 + 872) = 0;
    *(_QWORD *)(v31 + 864) = 0;
    *(_DWORD *)(v31 + 880) = 0;
    *(_QWORD *)(v31 + 856) = *(_QWORD *)(a2 + k + 856);
    *(_QWORD *)(v32 + 856) = 0;
    *(_QWORD *)(v31 + 864) = *(_QWORD *)(a2 + k + 864);
    *(_QWORD *)(v32 + 864) = 0;
    v33 = *(_QWORD *)(result + k + 872);
    *(_QWORD *)(v31 + 872) = *(_QWORD *)(a2 + k + 872);
    *(_QWORD *)(v32 + 872) = v33;
    v34 = *(_QWORD *)(result + k + 888);
    *(_QWORD *)(v31 + 888) = *(_QWORD *)(a2 + k + 888);
    *(_QWORD *)(v32 + 888) = v34;
    *(_DWORD *)(v32 + 880) = *(_DWORD *)(a2 + k + 880) + 1;
    *(_DWORD *)(v31 + 880) = *(_DWORD *)(result + k + 880) + 1;
  }
  *(_QWORD *)(result + 1048) = 0;
  *(_QWORD *)(result + 1016) = 0;
  *(_QWORD *)(result + 1032) = 0;
  *(_QWORD *)(result + 1024) = 0;
  *(_DWORD *)(result + 1040) = 0;
  *(_QWORD *)(result + 1016) = *(_QWORD *)(a2 + 1016);
  *(_QWORD *)(a2 + 1016) = 0;
  *(_QWORD *)(result + 1024) = *(_QWORD *)(a2 + 1024);
  *(_QWORD *)(a2 + 1024) = 0;
  v35 = *(_QWORD *)(result + 1032);
  *(_QWORD *)(result + 1032) = *(_QWORD *)(a2 + 1032);
  *(_QWORD *)(a2 + 1032) = v35;
  v36 = *(_QWORD *)(result + 1048);
  *(_QWORD *)(result + 1048) = *(_QWORD *)(a2 + 1048);
  *(_QWORD *)(a2 + 1048) = v36;
  ++*(_DWORD *)(a2 + 1040);
  ++*(_DWORD *)(result + 1040);
  return result;
}

void re::internal::CallableRef<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0,void ()(unsigned long long)>::~CallableRef()
{
  JUMPOUT(0x2276933B8);
}

double re::internal::CallableRef<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0,void ()(unsigned long long)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::invoke[abi:nn180100]<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0 const&,unsigned long long>(*(uint64_t ***)(a1 + 8), *a2);
}

uint64_t re::internal::CallableRef<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0,void ()(unsigned long long)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 *v2;
  __int128 v3;
  __int128 v4;

  v2 = *(__int128 **)(a1 + 8);
  *(_QWORD *)a2 = &unk_24ED665E0;
  v3 = *v2;
  v4 = v2[1];
  *(_OWORD *)(a2 + 40) = v2[2];
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return a2;
}

uint64_t re::internal::CallableRef<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0,void ()(unsigned long long)>::moveInto(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t re::internal::CallableRef<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0,void ()(unsigned long long)>::size()
{
  return 56;
}

double std::invoke[abi:nn180100]<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0 const&,unsigned long long>(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t *v8;
  double *v9;
  double *v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t v14[4];
  float32x4_t v15[3];
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19[132];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v3 = a1[4];
  v4 = **a1;
  v19[0] = a2;
  v5 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v4 + 152, v19);
  if (v5)
  {
    v7 = *(_QWORD *)(v5 + 8);
    if (!v7)
      return result;
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 104);
    if (*(_QWORD *)(v7 + 296) != v19[0])
      return result;
  }
  if ((*(_BYTE *)(*a1[1] + 32) & 1) != 0)
  {
    if (!*((_BYTE *)a1[2] + 1200))
    {
      re::PrimitiveRenderingContext::PrimitiveRenderingContext((re::PrimitiveRenderingContext *)v19, *(_QWORD *)(*a1[3] + 224), *(re::RenderManager **)(*a1[3] + 248));
      std::optional<re::PrimitiveRenderingContext>::operator=[abi:nn180100]<re::PrimitiveRenderingContext,void>((uint64_t)a1[2], (uint64_t)v19);
      if (v21)
      {
        if (v25)
          (*(void (**)(void))(*(_QWORD *)v21 + 40))();
        v25 = 0;
        v22 = 0;
        v23 = 0;
        v21 = 0;
        ++v24;
      }
      re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::deinit((uint64_t)&v20);
      re::PrimitiveRenderingDynamicGeometry::~PrimitiveRenderingDynamicGeometry((re::PrimitiveRenderingDynamicGeometry *)v19);
      v8 = a1[2];
      if (*((_BYTE *)v8 + 514))
      {
        v8[12] = 0;
        ++*((_DWORD *)v8 + 26);
        *((_BYTE *)v8 + 514) = 0;
      }
      if (*((_DWORD *)v8 + 92))
        *((_DWORD *)v8 + 92) = 0;
      *((_DWORD *)v8 + 88) = 998445679;
    }
    re::ecs2::TransformHelper::computeWorldMatrixForRendering((re::ecs2::TransformComponent **)v7, v3[15], v14);
    re::audio::cleanUpTransformForPHASE(v14, v9, v10, v11, (uint64_t)v19);
    v17 = (float32x4_t)xmmword_2260E5D70;
    v18 = 0u;
    v16 = 0u;
    re::decomposeScaleRotationTranslation<float>((uint64_t)v19, (int32x4_t *)&v18, &v17, &v16);
    v15[0] = v18;
    v15[1] = v17;
    v15[2] = v16;
    v12 = (uint64_t)a1[2];
    if (!*(_BYTE *)(v12 + 1200)
      || (re::ecs2::AudioDebugSystem::createAxis(*(_DWORD *)a1[5], v15, v12),
          v13 = (uint64_t)a1[2],
          !*(_BYTE *)(v13 + 1200)))
    {
      std::__throw_bad_optional_access[abi:nn180100]();
      JUMPOUT(0x2257259E4);
    }
    return re::ecs2::AudioDebugSystem::createShape((unsigned int *)a1[5], (uint64_t)v15, v13);
  }
  return result;
}

void re::internal::Callable<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0,void ()(unsigned long long)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

double re::internal::Callable<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0,void ()(unsigned long long)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::invoke[abi:nn180100]<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0 const&,unsigned long long>((uint64_t **)(a1 + 8), *a2);
}

uint64_t re::internal::Callable<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0,void ()(unsigned long long)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  *(_QWORD *)a2 = &unk_24ED665E0;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0,void ()(unsigned long long)>::moveInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  *(_QWORD *)a2 = &unk_24ED665E0;
  v2 = *(_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::Callable<re::ecs2::AudioDebugSystem::renderTrackedCALayerEntities(re::ecs2::Scene *)::$_0,void ()(unsigned long long)>::size()
{
  return 56;
}

id re::internal::defaultRetain<re::ecs2::AudioDebugSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AudioDebugSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_EDRColorManagementComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_256);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_256))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410F6D8, 0);
    *(uint64_t *)((char *)&qword_25410F6E8 + 6) = 0;
    qword_25410F6E8 = 0;
    qword_25410F6F8 = 0;
    qword_25410F700 = 0xFFFFFFFFLL;
    qword_25410F6D8 = (uint64_t)&off_24ED7DAA8;
    qword_25410F708 = (uint64_t)"EDRColorManagementComponent";
    dword_25410F710 = 0;
    unk_25410F718 = 0u;
    unk_25410F728 = 0u;
    unk_25410F738 = 0u;
    qword_25410F748 = 0;
    __cxa_guard_release(&_MergedGlobals_256);
  }
  return &qword_25410F6D8;
}

void re::ecs2::initInfo_EDRColorManagementComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x34DD0CE7CF85CC94;
  v10[1] = "EDRColorManagementComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25410F6D0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410F6D0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410F6C8 = v8;
      __cxa_guard_release(&qword_25410F6D0);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25410F6C8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::EDRColorManagementComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::EDRColorManagementComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::EDRColorManagementComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::EDRColorManagementComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::EDRColorManagementComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED57FB8;
  *(_QWORD *)(v3 + 32) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::EDRColorManagementComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::EDRColorManagementComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED57FB8;
  *(_QWORD *)(v1 + 32) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::EDRColorManagementComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_EDRColorManagementComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"EDRColorManagementComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_EDRColorManagementComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_EDRColorManagementComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::EDRColorManagementComponent>, this);
}

uint64_t *re::ecs2::allocInfo_PortalRenderingSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_257);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_257))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410F758, 0);
    *(uint64_t *)((char *)&qword_25410F768 + 6) = 0;
    qword_25410F768 = 0;
    qword_25410F778 = 0;
    qword_25410F780 = 0xFFFFFFFFLL;
    qword_25410F758 = (uint64_t)&off_24ED7DAA8;
    qword_25410F788 = (uint64_t)"PortalRenderingSystem";
    dword_25410F790 = 0;
    unk_25410F798 = 0u;
    unk_25410F7A8 = 0u;
    unk_25410F7B8 = 0u;
    qword_25410F7C8 = 0;
    __cxa_guard_release(&_MergedGlobals_257);
  }
  return &qword_25410F758;
}

void re::ecs2::initInfo_PortalRenderingSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xB8F182DDF4708B5ELL;
  v5[1] = "PortalRenderingSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_PortalRenderingSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PortalRenderingSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PortalRenderingSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::PortalRenderingSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::PortalRenderingSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PortalRenderingSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PortalRenderingSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::PortalRenderingSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;
  double result;

  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(_QWORD *)(v3 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)v3 = &off_24ED66648;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::PortalRenderingSystem>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::PortalRenderingSystem>(_OWORD *a1)
{
  uint64_t v1;
  double result;

  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(_QWORD *)(v1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)v1 = &off_24ED66648;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PortalRenderingSystem>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PortalRenderingSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PortalRenderingSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PortalRenderingSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PortalRenderingSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PortalRenderingSystem>, this);
}

void re::ecs2::PortalRenderingSystem::updateScenes(uint64_t a1)
{
  uint64_t v2;
  _BYTE v3[16];

  v2 = *(_QWORD *)(a1 + 104);
  if (!v2 || (*(_BYTE *)(v2 + 424) & 0x10) != 0)
  {
    if (*(_QWORD *)(a1 + 136))
    {
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v3, 3127, a1);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 48))(*(_QWORD *)(a1 + 136));
      re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v3);
    }
  }
}

uint64_t re::ecs2::PortalRenderingSystem::willAddSystemToECSService(re::ecs2::PortalRenderingSystem *this)
{
  uint64_t result;

  re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  result = *((_QWORD *)this + 17);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)result + 16))(result, *((_QWORD *)this + 5));
  return result;
}

uint64_t re::ecs2::PortalRenderingSystem::willAddSceneToECSService(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 136);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t re::ecs2::PortalRenderingSystem::willRemoveSceneFromECSService(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 136);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void re::ecs2::PortalRenderingSystem::~PortalRenderingSystem(re::ecs2::PortalRenderingSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::PortalRenderingSystem::typeInfo(re::ecs2::PortalRenderingSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PortalRenderingSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PortalRenderingSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PortalRenderingSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PortalRenderingSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::PortalRenderingSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::PortalRenderingSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_PhysicsSimulationService(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_258);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_258))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410F7D8, 0);
    *(uint64_t *)((char *)&qword_25410F7E8 + 6) = 0;
    qword_25410F7E8 = 0;
    qword_25410F7F8 = 0;
    qword_25410F800 = 0xFFFFFFFFLL;
    qword_25410F7D8 = (uint64_t)&off_24ED7DAA8;
    qword_25410F808 = (uint64_t)"PhysicsSimulationService";
    dword_25410F810 = 0;
    unk_25410F818 = 0u;
    unk_25410F828 = 0u;
    unk_25410F838 = 0u;
    qword_25410F848 = 0;
    __cxa_guard_release(&_MergedGlobals_258);
  }
  return &qword_25410F7D8;
}

void re::ecs2::initInfo_PhysicsSimulationService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x747915B438994E8ELL;
  v5[1] = "PhysicsSimulationService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_PhysicsSimulationService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::ecs2::introspect_PhysicsSimulationService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsSimulationService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsSimulationService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsSimulationService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsSimulationService>, this);
}

uint64_t re::ecs2::WorldRootProvider::worldIds@<X0>(re::ecs2::WorldRootProvider *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_DWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 132) = 0x7FFFFFFFLL;
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
  re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::operator=(a2, v3);
  return re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::add(a2, &re::kDefaultWorldRootId);
}

uint64_t re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;

  if (*(_DWORD *)(a1 + 124) || *(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 120))
  {
    v4 = (uint64_t *)(a1 + 96);
    if (*(_QWORD *)(a1 + 96))
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::PrecalculatedHash,re::EqualTo<unsigned long long>,false,false>::deinit(v4);
    *(_QWORD *)(a1 + 16) = 0;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)a1 = 0;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (*(_DWORD *)(a2 + 124))
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::operator=(a1 + 96, a2 + 96);
  else
    re::DynamicInlineArray<__CVBuffer *,2ul>::operator=((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  return a1;
}

uint64_t re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot@<X0>(re::ecs2::RenderingSubsystem *this@<X0>, const re::ecs2::Scene *a2@<X1>, re::DynamicString **a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;
  char *v7;
  uint64_t v8;
  char v9;
  unsigned __int8 *v10;
  int v11;

  result = re::RenderFrame::getStreamNameForWorldRoot(a3, (const re::StringID *)(*((_QWORD *)this + 13) + 272), (uint64_t)a2);
  v7 = *(char **)(result + 16);
  if ((*(_BYTE *)(result + 8) & 1) == 0)
    v7 = (char *)(result + 9);
  if (v7)
  {
    v8 = *v7;
    if (*v7)
    {
      v9 = v7[1];
      if (v9)
      {
        v10 = (unsigned __int8 *)(v7 + 2);
        do
        {
          v8 = 31 * v8 + v9;
          v11 = *v10++;
          v9 = v11;
        }
        while (v11);
      }
    }
  }
  else
  {
    v8 = 0;
  }
  *a4 = 2 * v8;
  a4[1] = v7;
  return result;
}

void re::ecs2::RenderingSubsystem::update(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  id WeakRetained;
  void *v11;
  _anonymous_namespace_ *v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  char v22;
  unint64_t *v23;
  uint64_t v24;
  _QWORD v25[2];
  uint64_t *v26;
  unint64_t v27;
  int v28;
  unint64_t v29;
  unint64_t *v30;
  _BYTE v31[16];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v31, 3099, (uint64_t)a1);
  v26 = 0;
  v27 = 0;
  v28 = 1;
  v29 = 0;
  v30 = 0;
  v6 = (*(uint64_t (**)(_QWORD *))(*a1[5] + 120))(a1[5]);
  if (!v7)
  {
    v21 = 0;
    v20 = &v29;
    goto LABEL_24;
  }
  v8 = (id *)v6;
  v9 = 8 * v7;
  do
  {
    WeakRetained = objc_loadWeakRetained(v8);
    if (!WeakRetained)
      goto LABEL_19;
    v11 = WeakRetained;
    v12 = (_anonymous_namespace_ *)WeakRetained;
    if (v26)
    {
      v13 = v28;
      if ((v28 & 1) != 0)
      {
        if (v27 - 8 < 0xFFFFFFFFFFFFFFF7)
        {
          v14 = v27 + 1;
          v15 = 16;
          goto LABEL_12;
        }
      }
      else if (v27 >= v29)
      {
        v14 = v27 + 1;
        if (v29 < v27 + 1)
        {
          v15 = 2 * v29;
LABEL_12:
          if (v15 <= v14)
            v16 = v14;
          else
            v16 = v15;
          re::DynamicOverflowArray<re::SharedPtr<re::ecs2::Scene>,8ul>::setCapacity((uint64_t *)&v26, v16);
          v13 = v28;
        }
      }
    }
    else
    {
      re::DynamicOverflowArray<re::SharedPtr<re::ecs2::Scene>,8ul>::setCapacity((uint64_t *)&v26, v27 + 1);
      v13 = v28 + 2;
      v28 += 2;
    }
    v17 = (v13 & 1) == 0;
    v18 = v30;
    v19 = v27;
    if (!v17)
      v18 = &v29;
    v18[v27] = (unint64_t)v11 - 8;
    v27 = v19 + 1;
    v28 += 2;

LABEL_19:
    ++v8;
    v9 -= 8;
  }
  while (v9);
  v20 = v30;
  v21 = v27;
  if ((v28 & 1) != 0)
    v20 = &v29;
LABEL_24:
  v25[0] = v20;
  v25[1] = v21;
  ((void (*)(_QWORD **, _QWORD *, uint64_t, uint64_t))(*a1)[12])(a1, v25, a2, a3);
  if (v26)
  {
    v22 = v28;
    if (v27)
    {
      if ((v28 & 1) != 0)
        v23 = &v29;
      else
        v23 = v30;
      v24 = 8 * v27;
      do
      {
        if (*v23)
        {

          *v23 = 0;
        }
        ++v23;
        v24 -= 8;
      }
      while (v24);
      v22 = v28;
    }
    if ((v22 & 1) == 0)
      (*(void (**)(uint64_t *, unint64_t *))(*v26 + 40))(v26, v30);
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v31);
}

void re::ecs2::RenderingSubsystem::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  _QWORD v8[2];
  uint64_t v9;

  v9 = a2;
  if (a2)
    v7 = (id)(a2 + 8);
  v8[0] = &v9;
  v8[1] = 1;
  (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, v8, a3, a4);
  if (v9)

}

uint64_t re::ecs2::RenderingSubsystem::willAddSystemToECSService(re::ecs2::RenderingSubsystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 13) = re::ServiceLocator::serviceOrNull<re::Engine>(v2);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 14) = re::ServiceLocator::serviceOrNull<re::RenderManager>(v3);
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 15) = re::ServiceLocator::serviceOrNull<re::AssetService>(v4);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 16) = re::ServiceLocator::serviceOrNull<re::ShadowService>(v5);
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 17) = re::ServiceLocator::serviceOrNull<re::ecs2::PortalService>(v6);
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 18) = re::ServiceLocator::serviceOrNull<re::ecs2::RenderOptionsService>(v7);
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::ecs2::BillboardService>(v8);
  *((_QWORD *)this + 19) = result;
  return result;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ShadowService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ShadowService>(void)::info = re::introspect_ShadowService(0);
  }
  v3 = re::introspect<re::ShadowService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

double re::ecs2::RenderingSubsystem::willRemoveSystemFromECSService(re::ecs2::RenderingSubsystem *this)
{
  double result;

  *((_QWORD *)this + 19) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

uint64_t re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::init(a1, v4, v5);
      re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::copy(a1, a2);
    }
  }
  return a1;
}

void re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16);
      if ((*(_DWORD *)(v8 + v6) & 0x80000000) != 0)
      {
        v9 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)(v8 + v6 + 8) ^ (*(_QWORD *)(v8 + v6 + 8) >> 30));
        v10 = (0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) ^ ((0x94D049BB133111EBLL * (v9 ^ (v9 >> 27))) >> 31);
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::addAsCopy(a1, v10 % *(unsigned int *)(a1 + 24), v10, v8 + v6 + 8, (_QWORD *)(v8 + v6 + 8));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 16;
    }
  }
}

void re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 16 * v3;
      do
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_DWORD *)(v6 + v4);
        if (v7 < 0)
          *(_DWORD *)(v6 + v4) = v7 & 0x7FFFFFFF;
        v4 += 16;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

uint64_t re::DynamicOverflowArray<re::SharedPtr<re::ecs2::Scene>,8ul>::setCapacity(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  result = *a1;
  if (a2 && !result)
  {
    result = re::DynamicOverflowArray<re::SharedPtr<re::ecs2::Scene>,8ul>::setCapacity(a1, a2);
    v6 = *((_DWORD *)a1 + 4) + 2;
LABEL_4:
    *((_DWORD *)a1 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)a1 + 4);
  if ((v7 & 1) != 0)
    v8 = 8;
  else
    v8 = a1[3];
  if (v8 != a2)
  {
    v9 = a1[1];
    if (v9 <= a2 && (a2 > 8 || (v7 & 1) == 0))
    {
      if (a2 < 9)
      {
        v14 = a1 + 3;
        if ((v7 & 1) != 0)
          v15 = a1 + 3;
        else
          v15 = (_QWORD *)a1[4];
        if (v9)
        {
          v16 = 8 * v9;
          do
          {
            *v14++ = *v15;
            *v15++ = 0;
            v16 -= 8;
          }
          while (v16);
        }
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
        v6 = *((_DWORD *)a1 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 8 * a2;
        result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)result + 32))(result, 8 * a2, 8);
        if (result)
        {
          v11 = result;
          v12 = *((_DWORD *)a1 + 4);
          if ((v12 & 1) != 0)
            v13 = a1 + 3;
          else
            v13 = (_QWORD *)a1[4];
          v17 = a1[1];
          if (v17)
          {
            v18 = 8 * v17;
            v19 = (_QWORD *)result;
            do
            {
              *v19++ = *v13;
              *v13++ = 0;
              v18 -= 8;
            }
            while (v18);
            v12 = *((_DWORD *)a1 + 4);
          }
          if ((v12 & 1) == 0)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a1[4]);
            v12 = *((_DWORD *)a1 + 4);
          }
          *((_DWORD *)a1 + 4) = v12 & 0xFFFFFFFE;
          a1[3] = a2;
          a1[4] = v11;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*a1 + 8));
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_ListenerComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_259);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_259))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410F878, 0);
    *(uint64_t *)((char *)&qword_25410F888 + 6) = 0;
    qword_25410F888 = 0;
    qword_25410F898 = 0;
    qword_25410F8A0 = 0xFFFFFFFFLL;
    qword_25410F878 = (uint64_t)&off_24ED7DAA8;
    qword_25410F8A8 = (uint64_t)"ListenerComponent";
    dword_25410F8B0 = 0;
    unk_25410F8B8 = 0u;
    unk_25410F8C8 = 0u;
    unk_25410F8D8 = 0u;
    qword_25410F8E8 = 0;
    __cxa_guard_release(&_MergedGlobals_259);
  }
  return &qword_25410F878;
}

void re::ecs2::initInfo_ListenerComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x9E2DEA8680918512;
  v14[1] = "ListenerComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_25410F858);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410F858);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410F868 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_float((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "linearGain";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1C00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410F870 = v12;
      __cxa_guard_release(&qword_25410F858);
    }
  }
  *((_QWORD *)this + 2) = 0x9000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_25410F868;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ListenerComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ListenerComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ListenerComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ListenerComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

double re::internal::defaultConstruct<re::ecs2::ListenerComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::ListenerComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::ListenerComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::ListenerComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_ListenerComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ListenerComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ListenerComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ListenerComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ListenerComponent>, this);
}

uint64_t *re::ecs2::allocInfo_ListenerSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410F860);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410F860))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410F8F0, 0);
    *(uint64_t *)((char *)&qword_25410F900 + 6) = 0;
    qword_25410F900 = 0;
    qword_25410F910 = 0;
    qword_25410F918 = 0xFFFFFFFFLL;
    qword_25410F8F0 = (uint64_t)&off_24ED7DAA8;
    qword_25410F920 = (uint64_t)"ListenerSystem";
    dword_25410F928 = 0;
    xmmword_25410F930 = 0u;
    unk_25410F940 = 0u;
    xmmword_25410F950 = 0u;
    qword_25410F960 = 0;
    __cxa_guard_release(&qword_25410F860);
  }
  return &qword_25410F8F0;
}

void re::ecs2::initInfo_ListenerSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x7E48499C06873046;
  v5[1] = "ListenerSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x9800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_ListenerSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ListenerSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ListenerSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::ListenerSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::ListenerSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ListenerSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ListenerSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::ListenerSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  re::ecs2::System::System(a3, 1, 1);
  *(_QWORD *)v3 = &off_24ED666F0;
  result = 0.0;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_QWORD *)(v3 + 136) = 0;
  *(_DWORD *)(v3 + 144) = 1065353216;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::ListenerSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)(a3 + 14));
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::ListenerSystem>(uint64_t a1)
{
  uint64_t v1;
  double result;

  re::ecs2::System::System(a1, 1, 1);
  *(_QWORD *)v1 = &off_24ED666F0;
  result = 0.0;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_QWORD *)(v1 + 136) = 0;
  *(_DWORD *)(v1 + 144) = 1065353216;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::ListenerSystem>(_QWORD *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)(a1 + 14));
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ListenerSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ListenerSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ListenerSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ListenerSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ListenerSystem>, this);
}

uint64_t re::ecs2::ListenerSystem::willAddSystemToECSService(re::ecs2::ListenerSystem *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::AudioSceneService>(v2);
  *((_QWORD *)this + 13) = result;
  return result;
}

uint64_t re::ecs2::ListenerSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(_QWORD *)(this + 104) = 0;
  return this;
}

void re::ecs2::ListenerSystem::willAddSceneToECSService(re::ecs2::ListenerSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  re *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  void *v12;
  re::ecs2::Scene *v13;
  unint64_t v14;
  uint64_t v15;
  re::ecs2::Scene *v16;
  uint8_t buf[8];
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v19;
  uint64_t (*v20)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v16 = a2;
  if (a2)
  {
    v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ListenerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    *(_QWORD *)buf = this;
    v18 = re::ecs2::ListenerSystem::willRemoveComponents;
    v19 = 0;
    v20 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ListenerComponent>,re::Slice<re::ecs2::ListenerComponent*>>::createSubscription<re::ecs2::ListenerSystem>(re::ecs2::ListenerSystem *,REEventHandlerResult (re::ecs2::ListenerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::ListenerComponent>*,re::Slice<re::ecs2::ListenerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ListenerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ListenerComponent>,re::Slice<re::ecs2::ListenerComponent*>>::Subscription const&,re::Slice<re::ecs2::ListenerComponent*>&&)#1}::__invoke;
    re::Event<re::NetworkSystem,re::ecs2::Component *>::addSubscription((_DWORD *)(v3 + 392), (uint64_t)buf);
    std::__hash_table<re::ecs2::Scene *,std::hash<re::ecs2::Scene *>,std::equal_to<re::ecs2::Scene *>,std::allocator<re::ecs2::Scene *>>::__emplace_unique_key_args<re::ecs2::Scene *,re::ecs2::Scene * const&>((uint64_t)this + 112, &v16, &v16);
    v4 = *((_QWORD *)this + 13);
    if (v4)
    {
      v5 = *(_QWORD *)(*((_QWORD *)v16 + 13) + 272);
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      if (v6)
      {
        v9 = MEMORY[0x24BDAC760];
        v10 = 3221225472;
        v11 = ___ZN2re4ecs214ListenerSystem24willAddSceneToECSServiceEPNS0_5SceneE_block_invoke;
        v12 = &__block_descriptor_56_e5_v8__0l;
        v13 = v16;
        v14 = v5 >> 1;
        v15 = v6;
        v7 = (re *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, 768);
        v8 = *re::audioLogObjects(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_debug_impl(&dword_224FE9000, v8, OS_LOG_TYPE_DEBUG, "[ListenerSystem] ->[willAddSystemToECSService] addServiceResetCallback :: Adding Callback", buf, 2u);
        }
      }
    }
  }
}

void ___ZN2re4ecs214ListenerSystem24willAddSceneToECSServiceEPNS0_5SceneE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *re::audioLogObjects((re *)a1);
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 134217984;
      v11 = v9;
      _os_log_debug_impl(&dword_224FE9000, v3, OS_LOG_TYPE_DEBUG, "[ListenerSystem] ->[willAddSystemToECSService] addServiceResetCallback :: Start of Callback for scene: %llu", buf, 0xCu);
    }
    v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*(_QWORD *)(a1 + 32) + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ListenerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v5 = *(_QWORD *)(v4 + 24);
    if (v5)
    {
      v6 = *(uint64_t **)(v4 + 40);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 48) + 312))(*(_QWORD *)(a1 + 48), *(_QWORD *)(v8 + 32));
        *(_OWORD *)(v8 + 32) = xmmword_2260E7ED0;
        v7 -= 8;
      }
      while (v7);
    }
    (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 88))(*(_QWORD *)(a1 + 48), 4, *(_QWORD *)(a1 + 40), 1);
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_224FE9000, v3, OS_LOG_TYPE_ERROR, "[ListenerSystem] ->[willAddSystemToECSService] addServiceResetCallback :: Scene is a nullptr", buf, 2u);
  }
}

uint64_t re::ecs2::ListenerSystem::willRemoveSceneFromECSService(uint64_t this, re::ecs2::Scene *a2)
{
  uint64_t v2;
  uint64_t v3;
  re::ecs2::Scene *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, _QWORD *, _QWORD *);
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v4 = a2;
  if (a2)
  {
    v2 = this;
    v3 = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ListenerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    *(_QWORD *)&v5 = v2;
    *((_QWORD *)&v5 + 1) = re::ecs2::ListenerSystem::willRemoveComponents;
    v6 = 0;
    v7 = re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ListenerComponent>,re::Slice<re::ecs2::ListenerComponent*>>::createSubscription<re::ecs2::ListenerSystem>(re::ecs2::ListenerSystem *,REEventHandlerResult (re::ecs2::ListenerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::ListenerComponent>*,re::Slice<re::ecs2::ListenerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ListenerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ListenerComponent>,re::Slice<re::ecs2::ListenerComponent*>>::Subscription const&,re::Slice<re::ecs2::ListenerComponent*>&&)#1}::__invoke;
    re::Event<re::GeometricObjectBase>::removeSubscription(v3 + 392, &v5);
    std::__hash_table<re::ecs2::Scene *,std::hash<re::ecs2::Scene *>,std::equal_to<re::ecs2::Scene *>,std::allocator<re::ecs2::Scene *>>::__erase_unique<re::ecs2::Scene *>((_QWORD *)(v2 + 112), &v4);
    this = *(_QWORD *)(v2 + 104);
    if (this)
    {
      this = (*(uint64_t (**)(uint64_t, re::ecs2::Scene *))(*(_QWORD *)this + 16))(this, v4);
      if (this)
        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 40))(this, 768, *(_QWORD *)(*((_QWORD *)v4 + 13) + 272) >> 1);
    }
  }
  return this;
}

uint64_t re::ecs2::ListenerSystem::willRemoveComponents(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  BOOL v4;
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *i;
  uint64_t v10;

  if (*(_QWORD *)(a1 + 104))
    v4 = a4 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = a3;
    v7 = &a3[a4];
    do
    {
      v8 = *v5;
      for (i = *(_QWORD **)(a1 + 128); i; i = (_QWORD *)*i)
      {
        v10 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 104) + 16))(*(_QWORD *)(a1 + 104), i[2]);
        if (v10)
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v10 + 312))(v10, *(_QWORD *)(v8 + 32));
      }
      *(_OWORD *)(v8 + 32) = xmmword_2260E7ED0;
      ++v5;
    }
    while (v5 != v7);
  }
  return 0;
}

uint64_t re::ecs2::ListenerSystem::update(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  re *isStatisticCollectionEnabled;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64x2_t *v9;
  unint64_t v10;
  unint64_t v11;
  int64x2_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t i;
  uint64_t v19;
  re::ecs2::NetworkComponent *v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  _BYTE v39[16];
  uint64_t v40[2];
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;

  if (*(_QWORD *)(result + 40))
  {
    if (a2)
    {
      v3 = result;
      if (*(_QWORD *)(result + 104))
      {
        v4 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v40);
        isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v4);
        if ((_DWORD)isStatisticCollectionEnabled)
        {
          v6 = re::profilerThreadContext(isStatisticCollectionEnabled);
          v7 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ListenerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          v8 = v7 ? *(_QWORD *)(v7 + 24) : 0;
          v9 = *(int64x2_t **)(v6 + 152);
          if (v9)
          {
            v10 = v9[564].u64[0];
            if (v10 >= v8)
              v10 = v8;
            v9[564].i64[0] = v10;
            v11 = v9[564].u64[1];
            if (v11 <= v8)
              v11 = v8;
            v9[564].i64[1] = v11;
            v12 = vdupq_n_s64(1uLL);
            v12.i64[0] = v8;
            v9[565] = vaddq_s64(v9[565], v12);
            *(_BYTE *)(v6 + 184) = 0;
          }
        }
        re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ListenerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v39, 3063, v3);
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 104) + 272);
        v34 = *(_QWORD *)(re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AudioPlayerComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 24);
        v14 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ListenerComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        v15 = *(_QWORD *)(v14 + 24);
        if (v15)
        {
          v16 = v13 >> 1;
          v17 = *(uint64_t **)(v14 + 40);
          for (i = 8 * v15; i; i -= 8)
          {
            v19 = *v17;
            v20 = *(re::ecs2::NetworkComponent **)(*(_QWORD *)(*v17 + 16) + 200);
            if (v20)
              LODWORD(v20) = re::ecs2::NetworkComponent::owningProcessType(v20);
            if (*(_QWORD *)(v19 + 40) == v16
              && (v21 = *(unsigned __int8 *)(v19 + 48), v21 == *(unsigned __int8 *)(v19 + 128)))
            {
              v22 = (_QWORD *)(v19 + 32);
              if (*(_QWORD *)(v19 + 32))
                goto LABEL_29;
            }
            else
            {
              *(_QWORD *)(v19 + 32) = 0;
              v22 = (_QWORD *)(v19 + 32);
              *(_DWORD *)(v19 + 52) = 1065353216;
              *(_OWORD *)(v19 + 64) = xmmword_2260E5F10;
              *(_OWORD *)(v19 + 80) = xmmword_2260E5F20;
              *(_OWORD *)(v19 + 96) = xmmword_2260E5F40;
              *(_OWORD *)(v19 + 112) = xmmword_2260E5D70;
            }
            *(_QWORD *)(v19 + 40) = -1;
            if ((_DWORD)v20)
              goto LABEL_39;
            v23 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 104) + 16))(*(_QWORD *)(v3 + 104), a2);
            if (v23)
            {
              v24 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v23 + 304))(v23, v16, *(unsigned __int8 *)(v19 + 128));
              *(_QWORD *)(v19 + 32) = v24;
              if (!v24)
                goto LABEL_39;
            }
            else if (!*v22)
            {
              goto LABEL_39;
            }
            *(_QWORD *)(v19 + 40) = v16;
            v21 = *(unsigned __int8 *)(v19 + 128);
            *(_BYTE *)(v19 + 48) = v21;
LABEL_29:
            if (v21 == 2)
            {
              v25 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 104) + 16))(*(_QWORD *)(v3 + 104), a2);
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 320))(v25, *v22);
            }
            re::ecs2::TransformComponent::worldMatrix4x4F(*(re::ecs2::TransformComponent ***)(v19 + 16), (const re::ecs2::Entity *)1, &v41);
            if (*(float *)(v19 + 52) != *(float *)(v19 + 28))
            {
              v26 = v41;
              v27 = v42;
              v28 = v43;
              v29 = v44;
LABEL_35:
              if ((*(_BYTE *)(*(_QWORD *)(v19 + 16) + 288) & 1) != 0 && (v34 || *(_BYTE *)(v19 + 48) == 2))
              {
                v35 = v26;
                v36 = v27;
                v37 = v28;
                v38 = v29;
                v30 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 104) + 16))(*(_QWORD *)(v3 + 104), a2);
                v31 = *(_QWORD *)(v19 + 32);
                v41 = v35;
                v42 = v36;
                v43 = v37;
                v44 = v38;
                v32 = *(float *)(v19 + 28);
                v33 = mach_absolute_time();
                (*(void (**)(uint64_t, uint64_t, float32x4_t *, uint64_t, float))(*(_QWORD *)v30 + 328))(v30, v31, &v41, v33, v32);
                *(_DWORD *)(v19 + 52) = *(_DWORD *)(v19 + 28);
                *(float32x4_t *)(v19 + 64) = v35;
                *(float32x4_t *)(v19 + 80) = v36;
                *(float32x4_t *)(v19 + 96) = v37;
                *(float32x4_t *)(v19 + 112) = v38;
              }
              goto LABEL_39;
            }
            v26 = v41;
            v27 = v42;
            v28 = v43;
            v29 = v44;
            if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v19 + 80), v42), (int8x16_t)vceqq_f32(*(float32x4_t *)(v19 + 64), v41)), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v19 + 96), v43), (int8x16_t)vceqq_f32(*(float32x4_t *)(v19 + 112), v44)))) & 0x80000000) == 0)goto LABEL_35;
LABEL_39:
            ++v17;
          }
        }
        re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v39);
        return re::ProfilerTimeGuard<(re::ProfilerStatistic)120>::end((uint64_t)v40);
      }
    }
  }
  return result;
}

void re::ecs2::ListenerSystem::~ListenerSystem(re::ecs2::ListenerSystem *this)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  std::__hash_table<std::__hash_value_type<unsigned long long,unsigned short>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned short>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned short>>>::~__hash_table((uint64_t)this + 112);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ListenerSystem::typeInfo(re::ecs2::ListenerSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ListenerSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ListenerSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ListenerSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ListenerSystem>, 0);
}

double re::make::shared::unsafelyInplace<re::ecs2::ListenerComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED58038;
  *(_DWORD *)(v1 + 28) = 1065353216;
  *(_OWORD *)(v1 + 32) = xmmword_2260E7ED0;
  *(_BYTE *)(v1 + 48) = 1;
  *(_DWORD *)(v1 + 52) = 1065353216;
  *(_OWORD *)(v1 + 64) = xmmword_2260E5F10;
  *(_OWORD *)(v1 + 80) = xmmword_2260E5F20;
  result = 0.0;
  *(_OWORD *)(v1 + 96) = xmmword_2260E5F40;
  *(_OWORD *)(v1 + 112) = xmmword_2260E5D70;
  *(_BYTE *)(v1 + 128) = 1;
  return result;
}

id re::internal::defaultRetain<re::ecs2::ListenerSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::ListenerSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ListenerComponent>,re::Slice<re::ecs2::ListenerComponent*>>::createSubscription<re::ecs2::ListenerSystem>(re::ecs2::ListenerSystem *,REEventHandlerResult (re::ecs2::ListenerSystem::*)(re::ecs2::SceneComponentCollection<re::ecs2::ListenerComponent>*,re::Slice<re::ecs2::ListenerComponent*>))::{lambda(re::ecs2::SceneComponentCollection<re::ecs2::ListenerComponent>*,re::Event<re::ecs2::SceneComponentCollection<re::ecs2::ListenerComponent>,re::Slice<re::ecs2::ListenerComponent*>>::Subscription const&,re::Slice<re::ecs2::ListenerComponent*>&&)#1}::__invoke(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v4)(_QWORD *, uint64_t, _QWORD, _QWORD);
  uint64_t v5;
  _QWORD *v6;

  v4 = (uint64_t (*)(_QWORD *, uint64_t, _QWORD, _QWORD))a2[1];
  v5 = a2[2];
  v6 = (_QWORD *)(*a2 + (v5 >> 1));
  if ((v5 & 1) != 0)
    v4 = *(uint64_t (**)(_QWORD *, uint64_t, _QWORD, _QWORD))(*v6 + v4);
  return v4(v6, a1, *a3, a3[1]);
}

uint64_t *re::ecs2::allocInfo_AdaptiveResolutionSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_260);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_260))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410F970, 0);
    *(uint64_t *)((char *)&qword_25410F980 + 6) = 0;
    qword_25410F980 = 0;
    qword_25410F990 = 0;
    qword_25410F998 = 0xFFFFFFFFLL;
    qword_25410F970 = (uint64_t)&off_24ED7DAA8;
    qword_25410F9A0 = (uint64_t)"AdaptiveResolutionSystem";
    dword_25410F9A8 = 0;
    unk_25410F9B0 = 0u;
    unk_25410F9C0 = 0u;
    unk_25410F9D0 = 0u;
    qword_25410F9E0 = 0;
    __cxa_guard_release(&_MergedGlobals_260);
  }
  return &qword_25410F970;
}

void re::ecs2::initInfo_AdaptiveResolutionSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x5E3F6A3BDCE67162;
  v5[1] = "AdaptiveResolutionSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_AdaptiveResolutionSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AdaptiveResolutionSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AdaptiveResolutionSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::AdaptiveResolutionSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::AdaptiveResolutionSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AdaptiveResolutionSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AdaptiveResolutionSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::AdaptiveResolutionSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  *(_QWORD *)(a3 + 96) = 0;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::ecs2::System::System(a3, 1);
  *v3 = &off_24ED66778;
}

void *re::internal::defaultDestruct<re::ecs2::AdaptiveResolutionSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::AdaptiveResolutionSystem>(uint64_t a1)
{
  _QWORD *v1;

  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::ecs2::System::System(a1, 1);
  *v1 = &off_24ED66778;
}

void *re::internal::defaultDestructV2<re::ecs2::AdaptiveResolutionSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

void re::ecs2::AdaptiveResolutionSystem::update(uint64_t a1, uint64_t a2)
{
  float v2;
  re::ecs2::SceneComponentTable *v4;
  uint64_t v5;
  uint64_t v6;
  re::ecs2::TransformComponent **v7;
  uint64_t *v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re::ecs2::CameraViewDescriptorsComponent **v13;
  uint64_t v14;
  re::ecs2::CameraViewDescriptorsComponent *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  double v27;
  float *v28;
  float v29;
  float *v30;
  float v31;
  uint64_t v32;
  re::ecs2::TransformComponent **v33;
  uint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float v37;
  float v38;
  uint64_t *v39;
  float32x4_t v40;
  int v41;
  __int128 v42;
  unint64_t v43;
  char v44;
  __int128 v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD v49[3];
  float32x4_t v50;

  v4 = (re::ecs2::SceneComponentTable *)(a2 + 200);
  v5 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v5)
    return;
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6)
    return;
  v7 = 0;
  v8 = *(uint64_t **)(v5 + 40);
  v39 = &v8[v6];
  v9 = 0.0;
  do
  {
    v10 = *v8;
    if (v7)
      goto LABEL_23;
    v11 = re::ecs2::SceneComponentTable::get(v4, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CameraViewDescriptorsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (!v11)
      break;
    v12 = *(_QWORD *)(v11 + 24);
    if (!v12)
      break;
    v13 = *(re::ecs2::CameraViewDescriptorsComponent ***)(v11 + 40);
    v14 = 8 * v12;
    while (1)
    {
      v15 = *v13;
      v16 = *((_QWORD *)*v13 + 2);
      if (!v16 || (*(_BYTE *)(v16 + 288) & 1) == 0)
        goto LABEL_13;
      v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 56) + 32))(*(_QWORD *)(a2 + 56));
      v18 = re::ServiceLocator::serviceOrNull<re::RenderManager>(v17);
      v19 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v16 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PerspectiveCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v19)
        break;
      v22 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v16 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::OrthographicCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v22)
      {
        v30 = (float *)v22;
        v48 = 0;
        re::ecs2::CameraViewDescriptorsComponent::getCameraScreenSize(v15, v18, (float *)&v48, v23, v24);
        v31 = 1.0;
        if (*((float *)&v48 + 1) >= 0.0001)
          v31 = *(float *)&v48 / *((float *)&v48 + 1);
        re::ecs2::OrthographicCameraComponent::calculateProjection(v30, (uint64_t)&v41, v31);
        goto LABEL_22;
      }
      v25 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v16 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::CustomMatrixCameraComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (v25)
      {
        v32 = v25;
        v48 = 0;
        re::ecs2::CameraViewDescriptorsComponent::getCameraScreenSize(v15, v18, (float *)&v48, v26, v27);
        v41 = 0;
        v42 = xmmword_226117740;
        v43 = 0xBDCCCCCD3DCCCCCDLL;
        v44 = 0;
        v45 = xmmword_2260E5F40;
        v46 = 1;
        v47 = 0;
        re::Projection::setFromMatrix4x4F((uint64_t)&v41, v32 + 256);
        goto LABEL_22;
      }
LABEL_13:
      ++v13;
      v14 -= 8;
      if (!v14)
        return;
    }
    v28 = (float *)v19;
    v48 = 0;
    re::ecs2::CameraViewDescriptorsComponent::getCameraScreenSize(v15, v18, (float *)&v48, v20, v21);
    v29 = 1.0;
    if (*((float *)&v48 + 1) >= 0.0001)
      v29 = *(float *)&v48 / *((float *)&v48 + 1);
    re::ecs2::PerspectiveCameraComponent::calculateProjection(v28, (uint64_t)&v41, v29);
LABEL_22:
    re::Projection::computeMatrix4x4F((re::Projection *)&v41, (uint64_t)v49);
    v2 = *(float *)v49;
    v7 = (re::ecs2::TransformComponent **)*((_QWORD *)v15 + 2);
    v9 = *(float *)&v48;
    if (!v7)
      return;
LABEL_23:
    v33 = *(re::ecs2::TransformComponent ***)(v10 + 16);
    v34 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v33 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AdaptiveResolutionStateComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    re::ecs2::TransformComponent::worldMatrix4x4F(v33, (const re::ecs2::Entity *)1, v49);
    v40 = v50;
    re::ecs2::TransformComponent::worldMatrix4x4F(v7, (const re::ecs2::Entity *)1, v49);
    v35 = vsubq_f32(v40, v50);
    v36 = vmulq_f32(v35, v35);
    v36.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1))).f32[0]);
    v37 = v9 / (float)((float)(1.0 / v2) * (float)(v36.f32[0] + v36.f32[0]));
    v38 = 512.0;
    if (v37 >= 512.0)
    {
      if (v37 >= 1024.0)
      {
        v38 = 2048.0;
        if (v37 < 2048.0)
        {
          v38 = 1024.0;
          if ((float)(v37 + -1024.0) > 512.0)
            v38 = 2048.0;
        }
      }
      else
      {
        v38 = 1024.0;
        if ((float)(v37 + -512.0) <= 256.0)
          v38 = 512.0;
      }
    }
    if (v38 != *(float *)(v34 + 28))
    {
      *(float *)(v34 + 28) = v38;
      re::ecs2::Component::enqueueMarkDirty(v34);
    }
    ++v8;
  }
  while (v8 != v39);
}

void re::ecs2::AdaptiveResolutionSystem::~AdaptiveResolutionSystem(re::ecs2::AdaptiveResolutionSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::AdaptiveResolutionSystem::typeInfo(re::ecs2::AdaptiveResolutionSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AdaptiveResolutionSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AdaptiveResolutionSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AdaptiveResolutionSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AdaptiveResolutionSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::AdaptiveResolutionSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::AdaptiveResolutionSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

BOOL re::ecs2::BlendShapeWeightsComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  re::ecs2::BlendShapeWeightsComponent *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v21, a5, 0);
  v8 = v21;
  v9 = v22;
  v21 = a4;
  v22 = v8;
  v23 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = *(re::ecs2::BlendShapeWeightsComponent **)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v22);
      v15 = *((_QWORD *)v14 + 2);
      re::ecs2::BlendShapeWeightsComponent::upgradeBlendWeightsFromBlendShapeWeights(v14);
      v16 = (unint64_t *)(a3 + 32);
      if (*(_QWORD *)(v15 + 184))
      {
        v17 = *(_QWORD *)(v15 + 176);
        v16 = (unint64_t *)(a3 + 32);
        if (v17)
        {
          if (*(_QWORD *)(v17 + 40))
            v16 = (unint64_t *)(a3 + 40);
          else
            v16 = (unint64_t *)(a3 + 32);
        }
      }
      v18 = v21;
      v19 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v22);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v18, v19, *v16);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v22);
    }
    while (v22 != a5 || (unsigned __int16)v23 != 0xFFFF || WORD1(v23) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

void re::ecs2::BlendShapeWeightsComponent::upgradeBlendWeightsFromBlendShapeWeights(re::ecs2::BlendShapeWeightsComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  re::BlendShapeWeights *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[12];
  __int16 v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 43))
  {
    if (!*((_QWORD *)this + 9))
    {
      v2 = re::AssetHandle::loadedAsset<re::BlendShapeWeightsDefinitionAsset>((re::ecs2::BlendShapeWeightsComponent *)((char *)this + 32));
      if (v2)
      {
        v3 = v2;
        v4 = *((_QWORD *)this + 9);
        if (v4)
        {
          v5 = (re::BlendShapeWeights *)*((_QWORD *)this + 11);
          v6 = 32 * v4;
          do
          {
            re::BlendShapeWeights::deinit(v5);
            v5 = (re::BlendShapeWeights *)((char *)v5 + 32);
            v6 -= 32;
          }
          while (v6);
        }
        if (*(_QWORD *)(v3 + 16))
        {
          v7 = 0;
          v8 = 0;
          do
          {
            re::make::shared::object<re::BlendShapeWeightsDefinition,re::FixedArray<re::StringID> const&>((const StringID **)(*(_QWORD *)(v3 + 32) + v7), (_anonymous_namespace_ **)v21);
            v28 = 0u;
            v29 = 0u;
            re::BlendShapeWeights::init((uint64_t *)&v28, (uint64_t *)v21);
            v9 = *((_QWORD *)this + 9);
            if (v9 >= *((_QWORD *)this + 8))
            {
              re::DynamicArray<re::BlendShapeWeights>::growCapacity((_QWORD *)this + 7, v9 + 1);
              v9 = *((_QWORD *)this + 9);
            }
            v10 = re::FixedArray<float>::FixedArray((uint64_t *)(*((_QWORD *)this + 11) + 32 * v9), (uint64_t)&v28);
            v11 = *((_QWORD *)&v29 + 1);
            v10[3] = *((_QWORD *)&v29 + 1);
            if (v11)
              v12 = (id)(v11 + 8);
            ++*((_QWORD *)this + 9);
            ++*((_DWORD *)this + 20);
            re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)&v28);
            if (*(_QWORD *)v21)

            ++v8;
            v7 += 24;
          }
          while (v8 < *(_QWORD *)(v3 + 16));
        }
        v13 = *((_QWORD *)this + 43);
        if (v13)
        {
          v14 = 0;
          v15 = *((_QWORD *)this + 45);
          do
          {
            v16 = *(_QWORD *)(v15 + 40 * v14 + 16);
            if (v16)
            {
              v17 = *((_QWORD *)this + 9);
              if (v17 > v14)
              {
                v18 = 0;
                v19 = *(_QWORD *)(v15 + 40 * v14 + 32);
                v20 = *((_QWORD *)this + 11) + 32 * v14;
                v17 = *(_QWORD *)(v20 + 8);
                while (v17 != v18)
                {
                  *(_DWORD *)(*(_QWORD *)(v20 + 16) + 4 * v18) = *(_DWORD *)(v19 + 4 * v18);
                  if (v16 == ++v18)
                    goto LABEL_24;
                }
                v31 = 0u;
                v32 = 0u;
                v29 = 0u;
                v30 = 0u;
                v28 = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v21 = 136315906;
                *(_QWORD *)&v21[4] = "operator[]";
                v22 = 1024;
                v23 = 468;
                v24 = 2048;
                v25 = v17;
                v26 = 2048;
                v27 = v17;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
              }
              v31 = 0u;
              v32 = 0u;
              v29 = 0u;
              v30 = 0u;
              v28 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v21 = 136315906;
              *(_QWORD *)&v21[4] = "operator[]";
              v22 = 1024;
              v23 = 789;
              v24 = 2048;
              v25 = v14;
              v26 = 2048;
              v27 = v17;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
            }
LABEL_24:
            ++v14;
          }
          while (v14 != v13);
        }
      }
    }
  }
}

BOOL re::ecs2::BlendShapeWeightsComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  re::ecs2::BlendShapeWeightsComponent **v13;
  re::ecs2::BlendShapeWeightsComponent *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  const re::MeshNameMap *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  re::BlendShapeWeightsMapping *v40;
  uint64_t v41;
  const re::ecs2::Component *v42;
  re::ecs2::NetworkComponent *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v51, a5, 0);
  v7 = v51;
  v8 = v52;
  v51 = a4;
  v52 = v7;
  v53 = v8;
  v9 = (unsigned __int16)v8;
  v10 = v8 & 0xFFFF0000;
  v48 = a5;
  if (v7 != a5 || v9 != 0xFFFF || v10 != 4294901760)
  {
    do
    {
      v13 = (re::ecs2::BlendShapeWeightsComponent **)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v52);
      v14 = *v13;
      v15 = (_QWORD *)*((_QWORD *)*v13 + 2);
      re::ecs2::BlendShapeWeightsComponent::upgradeBlendWeightsFromBlendShapeWeights(*v13);
      v16 = v15[22];
      v17 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v16 + 32));
      if (v17)
      {
        v18 = (_QWORD *)v17;
        v19 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v15 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        v20 = v18[47];
        v49 = v18[49];
        v50 = v20;
        if (v19)
        {
          v21 = (const re::MeshNameMap *)(v19 + 216);
          v22 = *(_QWORD *)(v19 + 192);
          v49 = *(_QWORD *)(v19 + 208);
          v50 = v22;
        }
        else
        {
          v21 = (const re::MeshNameMap *)(v18 + 56);
        }
        v27 = re::AssetHandle::loadedAsset<re::BlendShapeWeightsDefinitionAsset>((re::ecs2::BlendShapeWeightsComponent *)((char *)v14 + 32));
        if (v27)
        {
          v28 = (_QWORD *)v27;
          v29 = *(_QWORD *)(v16 + 40);
          if (v29)
            v30 = *(_QWORD *)(v29 + 664);
          else
            v30 = 0;
          v33 = *((_QWORD *)v14 + 5);
          if (v33)
            v34 = *(_QWORD *)(v33 + 664);
          else
            v34 = 0;
          v35 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v29 ^ (v29 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v29 ^ (v29 >> 30))) >> 27));
          v36 = v30 ^ (v35 >> 31) ^ v35;
          v37 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v33 ^ (v33 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v33 ^ (v33 >> 30))) >> 27));
          v38 = ((v36 << 6) + (v36 >> 2) + (v34 ^ (v37 >> 31) ^ v37) - 0x61C8864680B583E9) ^ v36;
          if (*((_QWORD *)v14 + 12))
          {
            *((_QWORD *)v14 + 12) = 0;
            re::DynamicArray<re::FixedArray<re::StringID>>::deinit((uint64_t)v14 + 104);
            re::DynamicArray<re::MeshDeformationIndex>::deinit((uint64_t)v14 + 144);
          }
        }
        else
        {
          if (*((_QWORD *)v14 + 5))
            re::AssetHandle::loadAsync((re::ecs2::BlendShapeWeightsComponent *)((char *)v14 + 32));
          v31 = *(_QWORD *)(v16 + 40);
          if (v31)
            v32 = *(_QWORD *)(v31 + 664);
          else
            v32 = 0;
          v39 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v31 ^ (v31 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v31 ^ (v31 >> 30))) >> 27));
          v38 = v32 ^ (v39 >> 31) ^ v39;
          if (v38 != *((_QWORD *)v14 + 12))
          {
            *((_QWORD *)v14 + 12) = v38;
            re::DynamicArray<re::FixedArray<re::StringID>>::deinit((uint64_t)v14 + 104);
            re::DynamicArray<re::MeshDeformationIndex>::deinit((uint64_t)v14 + 144);
            re::BlendShapeWeightsDefinitionAsset::init((uint64_t)v14 + 104, v18, &v49, 0);
            v38 = *((_QWORD *)v14 + 12);
          }
          v28 = (_QWORD *)((char *)v14 + 104);
        }
        v40 = (re::ecs2::BlendShapeWeightsComponent *)((char *)v14 + 240);
        v41 = (uint64_t)v14 + 56;
        re::BlendShapeWeightsMapping::update<re::MeshAsset>((re::ecs2::BlendShapeWeightsComponent *)((char *)v14 + 240), v28, (re::MeshNameMap *)v18, (uint64_t)v21, v38, (uint64_t)v14 + 56);
        v42 = (const re::ecs2::Component *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v15 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        re::ecs2::BlendShapeWeightsBufferComponent::rebuildWeights((uint64_t)v42, (uint64_t)v28, v40, (uint64_t)v18, v21, v41);
        re::ecs2::Component::markDirty(v42);
        v43 = (re::ecs2::NetworkComponent *)v15[25];
        if (v43)
          re::ecs2::NetworkComponent::markDirty(v43, v42);
        v44 = v51;
        v45 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v52);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v44, v45, *(_QWORD *)(a3 + 48));
      }
      else
      {
        v23 = *(_QWORD *)(v16 + 40);
        if (v23 && (v24 = atomic_load((unsigned int *)(v23 + 704)), v24 == 3))
        {
          v25 = v51;
          v26 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v52);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v25, v26, *(_QWORD *)(a3 + 32));
        }
        else
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)(v16 + 32));
        }
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v52);
    }
    while (v52 != v48 || (unsigned __int16)v53 != 0xFFFF || WORD1(v53) != 0xFFFF);
  }
  return *(_DWORD *)(v48 + 40) != 0;
}

uint64_t re::AssetHandle::loadedAsset<re::BlendShapeWeightsDefinitionAsset>(re::BlendShapeWeightsDefinitionAsset *a1)
{
  uint64_t *v2;

  if (!*((_QWORD *)a1 + 1))
    return 0;
  v2 = re::BlendShapeWeightsDefinitionAsset::assetType(a1);
  return re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 1);
}

uint64_t re::ecs2::BlendShapeWeightsSystem::removedBlendShapeWeightsBufferHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  re::ecs2::Component *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  uint64_t v17;

  v4 = a2;
  do
  {
    v5 = v4;
    v4 = *(_QWORD *)(v4 + 24);
  }
  while (v4);
  v17 = *(_QWORD *)(v5 + 16);
  v6 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 272), &v17);
  if (v6 != -1)
  {
    v7 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 216, *(_QWORD *)(*(_QWORD *)(a1 + 280) + 16 * v6 + 8));
    v8 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v8)
    {
      v9 = (re::ecs2::Component *)v8;
      v10 = 24;
      v11 = 0xFFFFFFFFLL;
      do
      {
        v12 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(v7 + 16), *(_QWORD *)(v7 + v10), v9);
        if (v12 != -1 && (v13 & 0xFFFFFF00000000) != 0)
        {
          v15 = v12;
          v11 = v13;
          goto LABEL_13;
        }
        v10 += 8;
      }
      while (v10 != 56);
      v15 = -1;
LABEL_13:
      re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(v7, v15, v11);
    }
  }
  return 0;
}

uint64_t re::ecs2::BlendShapeWeightsSystem::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  re *isStatisticCollectionEnabled;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64x2_t *v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  re::ecs2::System *v33;
  _BYTE v35[16];
  uint64_t v36[2];
  _QWORD v37[2];
  uint64_t v38;

  v37[0] = a3;
  v37[1] = a4;
  v6 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v36);
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    v8 = re::profilerThreadContext(isStatisticCollectionEnabled);
    v9 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    v10 = v9 ? *(_QWORD *)(v9 + 24) : 0;
    v11 = *(int64x2_t **)(v8 + 152);
    if (v11)
    {
      v12 = v11[448].u64[0];
      if (v12 >= v10)
        v12 = v10;
      v11[448].i64[0] = v12;
      v13 = v11[448].u64[1];
      if (v13 <= v10)
        v13 = v10;
      v11[448].i64[1] = v13;
      v14 = vdupq_n_s64(1uLL);
      v14.i64[0] = v10;
      v11[449] = vaddq_s64(v11[449], v14);
      *(_BYTE *)(v8 + 184) = 0;
    }
  }
  re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v35, 3033, a1);
  v38 = a2;
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 280)
                  + 16
                  * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 272), &v38)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 384, v15);
  v16 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 216, v15);
  v17 = *(_QWORD *)(*v16 + 224);
  v18 = v16[3];
  v19 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v18);
  if (*(_DWORD *)(v19 + 40))
    v20 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v17 + 24))(v17, v37, v16, v18, v19, 0);
  else
    v20 = 0;
  v21 = v16[5];
  v22 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v21);
  if (*(_DWORD *)(v22 + 40))
    v20 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, v37, v16, v21, v22, 0);
  v23 = v16[6];
  v24 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v23);
  if (*(_DWORD *)(v24 + 40))
  {
    if (((v20 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v17 + 40))(v17, v37, v16, v23, v24, 0)) & 1) == 0)goto LABEL_19;
    goto LABEL_18;
  }
  if (v20)
LABEL_18:
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 384, v15);
LABEL_19:
  if (!*(_BYTE *)(a1 + 448))
    goto LABEL_39;
  v25 = *(_QWORD *)(a1 + 392);
  v26 = *(_DWORD *)(a1 + 400);
  if (v25 >= 0xB)
  {
    if ((v26 & 1) != 0)
      v27 = (_QWORD *)(a1 + 408);
    else
      v27 = *(_QWORD **)(a1 + 416);
    v29 = 8 * v25;
    while (!*v27)
    {
      ++v27;
      v29 -= 8;
      if (!v29)
        goto LABEL_39;
    }
LABEL_37:
    v33 = *(re::ecs2::System **)(a1 + 432);
    if (!*((_BYTE *)v33 + 86))
      re::ecs2::System::queueToRun(v33, 0.0);
    goto LABEL_39;
  }
  if ((v26 & 1) != 0)
  {
    v28 = (uint64_t *)(a1 + 408);
    if (!v25)
      goto LABEL_39;
  }
  else
  {
    v28 = *(uint64_t **)(a1 + 416);
    if (!v25)
      goto LABEL_39;
  }
  v30 = 0;
  v31 = 8 * v25;
  do
  {
    v32 = *v28++;
    v30 |= v32;
    v31 -= 8;
  }
  while (v31);
  if (v30)
    goto LABEL_37;
LABEL_39:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v35);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v36);
}

uint64_t re::ecs2::BlendShapeWeightsSystem::willAddSystemToECSService(re::ecs2::BlendShapeWeightsSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 19) = re::ServiceLocator::serviceOrNull<re::Engine>(v2);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  v4 = re::ServiceLocator::serviceOrNull<re::RenderManager>(v3);
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::ecs2::ThrottleService>(v5);
  *((_QWORD *)this + 22) = v4;
  *((_QWORD *)this + 23) = result;
  return result;
}

_QWORD *re::ecs2::BlendShapeWeightsSystem::willRemoveSystemFromECSService(_QWORD *this)
{
  this[19] = 0;
  this[22] = 0;
  this[23] = 0;
  return this;
}

void re::ecs2::BlendShapeWeightsSystem::willAddSceneToECSService(re::ecs2::BlendShapeWeightsSystem *this, re::EventBus **a2)
{
  char *v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  re::EventBus *v49;
  uint64_t v50;
  _anonymous_namespace_ *v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  re::ecs2::Scene *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67[2];
  _BYTE v68[24];
  uint64_t v69;
  _BYTE *v70;
  int v71;
  const char *v72;
  __int16 v73;
  int v74;
  __int16 v75;
  unint64_t v76;
  __int16 v77;
  unint64_t v78;
  uint64_t v79[12];

  v79[11] = *MEMORY[0x24BDAC8D0];
  v58 = (re::ecs2::Scene *)a2;
  v4 = (char *)this + 216;
  v67[0] = (uint64_t)a2;
  v5 = (re::ecs2::BlendShapeWeightsSystem *)((char *)this + 336);
  v6 = *((_QWORD *)this + 43);
  v7 = *((_DWORD *)this + 88);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)this + 360);
    else
      v8 = (_QWORD *)*((_QWORD *)this + 46);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)this + 360);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)this + 46);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v59 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 336, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v59);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::BlendShapeWeightsSystem *)((char *)this + 272), v67, (uint64_t *)&v59);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v59);
    v15 = (char *)this + 384;
    v16 = v59;
    goto LABEL_49;
  }
LABEL_17:
  v66 = 0u;
  v59 = 0u;
  *(_QWORD *)&v60 = 0;
  *((_QWORD *)&v60 + 1) = -1;
  v61 = 0u;
  v62 = 0u;
  v63 = 0;
  v64 = 1;
  v65 = 0uLL;
  v17 = *((_QWORD *)this + 32);
  *(_QWORD *)&v66 = 0;
  v18 = *((_QWORD *)this + 28);
  DWORD2(v66) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 27, (v17 + 4) >> 2);
    v18 = *((_QWORD *)this + 28);
  }
  if (v18 <= v17 >> 2)
  {
    v67[1] = 0;
    memset(v79, 0, 80);
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v71 = 136315906;
    v72 = "operator[]";
    v73 = 1024;
    v74 = 858;
    v75 = 2048;
    v76 = v17 >> 2;
    v77 = 2048;
    v78 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_76;
  }
  if ((*((_BYTE *)this + 232) & 1) != 0)
    v19 = (char *)this + 240;
  else
    v19 = (char *)*((_QWORD *)this + 31);
  v20 = *(_QWORD *)&v19[8 * (v17 >> 2)];
  ++*((_QWORD *)this + 32);
  ++*((_DWORD *)this + 66);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v59;
  v23 = v60;
  v24 = v61;
  *(_QWORD *)(v21 + 48) = v62;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v62 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v59);
  v26 = *((_QWORD *)this + 32);
  if (!v26)
  {
LABEL_76:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::init(v27, (uint64_t)v4, v67[0]);
  v79[0] = *((_QWORD *)this + 32) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::BlendShapeWeightsSystem *)((char *)this + 272), v67, v79);
  v28 = *((_QWORD *)this + 32);
  v29 = *((_QWORD *)this + 47);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *((_QWORD *)this + 47) = v28;
  *(_QWORD *)&v59 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v59);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *((_QWORD *)this + 47) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*((_BYTE *)this + 352) & 1) != 0)
      v33 = (char *)this + 360;
    else
      v33 = (char *)*((_QWORD *)this + 46);
    *(_QWORD *)&v33[8 * *((_QWORD *)this + 43) - 8] &= v31;
  }
  v34 = *((_QWORD *)this + 32);
  v35 = *((_QWORD *)this + 53);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *((_QWORD *)this + 53) = v34;
  *(_QWORD *)&v59 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::BlendShapeWeightsSystem *)((char *)this + 384), v36, &v59);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *((_QWORD *)this + 53) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*((_BYTE *)this + 400) & 1) != 0)
      v39 = (char *)this + 408;
    else
      v39 = (char *)*((_QWORD *)this + 52);
    *(_QWORD *)&v39[8 * *((_QWORD *)this + 49) - 8] &= v37;
  }
  v16 = v79[0];
  v15 = (char *)this + 384;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((_BYTE *)this + 448))
    goto LABEL_67;
  v40 = *((_QWORD *)this + 49);
  v41 = *((_DWORD *)this + 100);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)((char *)this + 408);
    else
      v42 = (_QWORD *)*((_QWORD *)this + 52);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        goto LABEL_67;
    }
LABEL_65:
    v48 = (re::ecs2::System *)*((_QWORD *)this + 54);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    goto LABEL_67;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)((char *)this + 408);
    if (!v40)
      goto LABEL_67;
  }
  else
  {
    v43 = (uint64_t *)*((_QWORD *)this + 52);
    if (!v40)
      goto LABEL_67;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
LABEL_67:
  v49 = a2[36];
  if (v49)
  {
    *(_QWORD *)&v62 = 0;
    v59 = 0u;
    v60 = 1uLL;
    v61 = 0uLL;
    v50 = re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 104, (uint64_t *)&v58, (uint64_t)&v59);
    re::BucketArray<RESubscriptionHandle,4ul>::deinit((uint64_t)&v59);
    v51 = (_anonymous_namespace_ *)v59;
    if ((_QWORD)v59 && (v60 & 1) == 0)
      v51 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v59 + 40))();
    v69 = re::globalAllocators((re *)v52)[2];
    v53 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v69 + 32))(v69, 32, 0);
    *v53 = &off_24ED668F0;
    v53[1] = this;
    v53[2] = re::ecs2::BlendShapeWeightsSystem::removedBlendShapeWeightsBufferHandler;
    v53[3] = 0;
    v70 = v53;
    v54 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v49, (uint64_t)v68, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsBufferComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v56 = v55;
    v57 = (_QWORD *)re::BucketArray<RESubscriptionHandle,4ul>::addUninitialized(v50);
    *v57 = v54;
    v57[1] = v56;
    if (v70)
    {
      (**(void (***)(_BYTE *))v70)(v70);
      if (v70 != v68)
        (*(void (**)(uint64_t))(*(_QWORD *)v69 + 40))(v69);
    }
  }
}

uint64_t re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v9) = 0;
    goto LABEL_8;
  }
  v9 = v8 % *(unsigned int *)(a1 + 24);
  v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
LABEL_8:
    v13 = re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(a1, v9, v8, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 80 * v13;
    return v12 + 24;
  }
  v11 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v11 + 80 * v10 + 16) != v6)
  {
    LODWORD(v10) = *(_DWORD *)(v11 + 80 * v10 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v10 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v12 = v11 + 80 * v10;
  return v12 + 24;
}

uint64_t re::ecs2::BlendShapeWeightsSystem::willRemoveSceneFromECSService(re::ecs2::BlendShapeWeightsSystem *this, re::ecs2::Scene *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  uint64_t *v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t j;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  re::ecs2::ComponentBucketsBase *v22;
  re::ecs2::Scene *v23;
  re::ecs2::Scene *v24;

  v23 = a2;
  v3 = (char *)this + 104;
  v4 = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)this + 104, (uint64_t *)&v23);
  if (v4)
  {
    v5 = *((_QWORD *)v23 + 36);
    if (v5)
    {
      v6 = v4;
      v7 = *(_QWORD *)(v4 + 40);
      if (v7)
      {
        for (i = 0; i != v7; ++i)
        {
          v9 = re::BucketArray<re::PipelineCompilationData,4ul>::operator[](v6, i);
          re::EventBus::unsubscribe(v5, *(_QWORD *)v9, *(_QWORD *)(v9 + 8));
        }
      }
    }
    re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v3, (uint64_t *)&v23);
  }
  v24 = v23;
  v10 = (uint64_t *)((char *)this + 272);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 34, &v24);
  if (result != -1)
  {
    v12 = *((_QWORD *)this + 35) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 336, *(_QWORD *)(v12 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 384, *(_QWORD *)(v12 + 8));
    v13 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 216, *(_QWORD *)(v12 + 8));
    if (*v13)
    {
      v14 = v13;
      *v13 = 0;
      v15 = v13 + 1;
      v16 = *(_QWORD *)(v13[1] + 288);
      if (v16)
      {
        v17 = v13[12];
        if (v17)
        {
          for (j = 0; j != v17; ++j)
          {
            v19 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v14 + 7), j);
            re::EventBus::unsubscribe(v16, *(_QWORD *)v19, *(_QWORD *)(v19 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v14 + 7));
      v20 = 0;
      v21 = v14 + 3;
      do
      {
        v22 = (re::ecs2::ComponentBucketsBase *)v14[2];
        if (*(_QWORD *)v22)
          re::ecs2::ComponentBucketsBase::removeBucket(v22, v21[v20]);
        v21[v20++] = -1;
      }
      while (v20 != 4);
      *v15 = 0;
      v15[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v10, &v24);
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;

  if (!*(_QWORD *)a1)
    return 0;
  v3 = *a2;
  v4 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v5 = ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) ^ ((0x94D049BB133111EBLL * (v4 ^ (v4 >> 27))) >> 31))
     % *(unsigned int *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v6 + 4 * v5);
  if ((_DWORD)v7 == 0x7FFFFFFF)
    return 0;
  v9 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v9 + 80 * v7 + 16) != v3)
  {
    while (1)
    {
      v10 = v7;
      v11 = *(_DWORD *)(v9 + 80 * v7 + 8);
      v7 = v11 & 0x7FFFFFFF;
      if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF)
        return 0;
      if (*(_QWORD *)(v9 + 80 * v7 + 16) == v3)
      {
        *(_DWORD *)(v9 + 80 * v10 + 8) = *(_DWORD *)(v9 + 80 * v10 + 8) & 0x80000000 | *(_DWORD *)(v9 + 80 * v7 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v9 + 80 * v7 + 8) & 0x7FFFFFFF;
LABEL_9:
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 16) + 80 * v7);
  v12 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v7 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v7 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v7;
  *(_DWORD *)(a1 + 40) = v12 + 1;
  return 1;
}

_QWORD *re::ecs2::BlendShapeWeightsComponentVersionUtilities::downgradeBlendShapeWeightsComponentFromFall2023@<X0>(_QWORD *this@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  uint64_t v16[3];
  int v17;
  uint64_t v18;

  v5 = this[9];
  if (v5)
  {
    v6 = (uint64_t)this;
    v7 = this[11];
    v8 = v7 + 32 * v5;
    v9 = this + 41;
    do
    {
      v18 = 0;
      v17 = 0;
      memset(v16, 0, sizeof(v16));
      v10 = *(_QWORD *)(v7 + 8);
      if (v10)
      {
        v11 = *(int **)(v7 + 16);
        v12 = 4 * v10;
        do
        {
          v15 = 0;
          v13 = *v11++;
          v15 = v13;
          re::DynamicArray<float>::add((_anonymous_namespace_ *)v16, (float *)&v15);
          v12 -= 4;
        }
        while (v12);
      }
      v14 = *(_QWORD *)(v6 + 344);
      if (v14 >= *(_QWORD *)(v6 + 336))
      {
        re::DynamicArray<re::DynamicArray<float>>::growCapacity(v9, v14 + 1);
        v14 = *(_QWORD *)(v6 + 344);
      }
      re::DynamicArray<float>::DynamicArray(*(_QWORD *)(v6 + 360) + 40 * v14, v16);
      ++*(_QWORD *)(v6 + 344);
      ++*(_DWORD *)(v6 + 352);
      this = (_QWORD *)v16[0];
      if (v16[0] && v18)
        this = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v16[0] + 40))();
      v7 += 32;
    }
    while (v7 != v8);
  }
  *a2 = 1;
  return this;
}

uint64_t *re::ecs2::allocInfo_BlendShapeWeightsComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  _OWORD *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410F9F8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410F9F8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410FAC0, 0);
    *(uint64_t *)((char *)&qword_25410FAD0 + 6) = 0;
    qword_25410FAD0 = 0;
    qword_25410FAE0 = 0;
    qword_25410FAE8 = 0xFFFFFFFFLL;
    qword_25410FAC0 = (uint64_t)&off_24ED7DAA8;
    qword_25410FAF0 = (uint64_t)"BlendShapeWeightsComponent";
    dword_25410FAF8 = 0;
    v3[4] = 0u;
    v3[5] = 0u;
    v3[6] = 0u;
    qword_25410FB30 = 0;
    __cxa_guard_release(&qword_25410F9F8);
  }
  return &qword_25410FAC0;
}

void re::ecs2::initInfo_BlendShapeWeightsComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  const re::IntrospectionBase *v9;
  uint64_t *v10;
  unsigned __int8 v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  re::IntrospectionRegistry *v15;
  const re::IntrospectionBase *v16;
  const char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  const re::IntrospectionBase *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  re::IntrospectionRegistry *v31;
  const re::IntrospectionBase *v32;
  const char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44[2];
  __int128 v45;
  unint64_t v46;
  const char *v47;
  const char *v48;

  v46 = 0x881015E46FDA48A4;
  v47 = "BlendShapeWeightsComponent";
  re::StringID::destroyString((re::StringID *)&v46);
  *((_OWORD *)this + 2) = v41;
  v4 = atomic_load((unsigned __int8 *)&qword_25410F9F0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410F9F0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410FA18 = v8;
      v10 = re::introspectionAllocator((re *)v8);
      v11 = atomic_load((unsigned __int8 *)&qword_25410FA08);
      if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_25410FA08))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410FA40, 0);
        *(uint64_t *)((char *)&qword_25410FA50 + 6) = 0;
        qword_25410FA50 = 0;
        *(_QWORD *)&xmmword_25410FA60 = 0;
        *((_QWORD *)&xmmword_25410FA60 + 1) = 0xFFFFFFFFLL;
        qword_25410FA40 = (uint64_t)&off_24ED1FA08;
        qword_25410FA78 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_25410FA70);
        qword_25410FA40 = (uint64_t)&off_24ED66AA8;
        __cxa_guard_release(&qword_25410FA08);
      }
      if ((_MergedGlobals_261 & 1) == 0)
      {
        v12 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v9);
        if ((_MergedGlobals_261 & 1) == 0)
        {
          v13 = (uint64_t)v12;
          _MergedGlobals_261 = 1;
          v14 = *((_DWORD *)v12 + 6);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410FA40, 0);
          qword_25410FA50 = 0x2800000003;
          dword_25410FA58 = v14;
          word_25410FA5C = 0;
          *(_QWORD *)&xmmword_25410FA60 = 0;
          *((_QWORD *)&xmmword_25410FA60 + 1) = 0xFFFFFFFFLL;
          qword_25410FA70 = v13;
          qword_25410FA78 = 0;
          qword_25410FA40 = (uint64_t)&off_24ED66AA8;
          re::IntrospectionRegistry::add(v15, v16);
          re::getPrettyTypeName((re *)&qword_25410FA40, (const re::IntrospectionBase *)&v46);
          if ((v47 & 1) != 0)
            v17 = v48;
          else
            v17 = (char *)&v47 + 1;
          if (v46 && (v47 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v46 + 40))();
          v43 = *(_OWORD *)(v13 + 32);
          v18 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v44);
          if (v18)
          {
            v19 = *v18;
            *((_QWORD *)&v42 + 1) = v19;
          }
          else
          {
            v45 = v43;
            re::TypeBuilder::beginListType((uint64_t)&v46, v44, 1, 0x28uLL, 8uLL, &v45);
            re::TypeBuilder::setConstructor((uint64_t)&v46, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v46, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v46, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v46, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v46, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v46, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v46, v20);
          }
          xmmword_25410FA60 = v42;
          re::StringID::destroyString((re::StringID *)v44);
        }
      }
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "blendShapeWeights";
      *(_QWORD *)(v21 + 16) = &qword_25410FA40;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x14800000001;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_25410FA20 = v21;
      v22 = re::introspectionAllocator((re *)v21);
      v24 = re::introspect_AssetHandle((re *)1, v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v22 + 32))(v22, 72, 8);
      *(_DWORD *)v25 = 1;
      *(_QWORD *)(v25 + 8) = "blendShapeWeightsDefinition";
      *(_QWORD *)(v25 + 16) = v24;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0x2000000002;
      *(_DWORD *)(v25 + 40) = 0;
      *(_QWORD *)(v25 + 48) = 0;
      *(_QWORD *)(v25 + 56) = 0;
      *(_DWORD *)(v25 + 64) = 0;
      qword_25410FA28 = v25;
      v26 = re::introspectionAllocator((re *)v25);
      v27 = atomic_load((unsigned __int8 *)&qword_25410FA10);
      if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_25410FA10))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410FA80, 0);
        *(uint64_t *)((char *)&qword_25410FA90 + 6) = 0;
        qword_25410FA90 = 0;
        *(_QWORD *)&xmmword_25410FAA0 = 0;
        *((_QWORD *)&xmmword_25410FAA0 + 1) = 0xFFFFFFFFLL;
        qword_25410FA80 = (uint64_t)&off_24ED1FA08;
        qword_25410FAB8 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_25410FAB0);
        qword_25410FA80 = (uint64_t)&off_24ED66B40;
        __cxa_guard_release(&qword_25410FA10);
      }
      if ((byte_25410F9E9 & 1) == 0)
      {
        v28 = re::introspect_BlendShapeWeights((re::IntrospectionBase **)1);
        if ((byte_25410F9E9 & 1) == 0)
        {
          v29 = v28;
          byte_25410F9E9 = 1;
          v30 = *(_DWORD *)(v28 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410FA80, 0);
          qword_25410FA90 = 0x2800000003;
          *(_DWORD *)algn_25410FA98 = v30;
          *(_WORD *)&algn_25410FA98[4] = 0;
          *(_QWORD *)&xmmword_25410FAA0 = 0;
          *((_QWORD *)&xmmword_25410FAA0 + 1) = 0xFFFFFFFFLL;
          qword_25410FAB0 = v29;
          qword_25410FAB8 = 0;
          qword_25410FA80 = (uint64_t)&off_24ED66B40;
          re::IntrospectionRegistry::add(v31, v32);
          re::getPrettyTypeName((re *)&qword_25410FA80, (const re::IntrospectionBase *)&v46);
          if ((v47 & 1) != 0)
            v33 = v48;
          else
            v33 = (char *)&v47 + 1;
          if (v46 && (v47 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v46 + 40))();
          v43 = *(_OWORD *)(v29 + 32);
          v34 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v44);
          if (v34)
          {
            v35 = *v34;
            *((_QWORD *)&v42 + 1) = v35;
          }
          else
          {
            v45 = v43;
            re::TypeBuilder::beginListType((uint64_t)&v46, v44, 1, 0x28uLL, 8uLL, &v45);
            re::TypeBuilder::setConstructor((uint64_t)&v46, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v46, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v46, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v46, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v46, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v46, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v46, v36);
          }
          xmmword_25410FAA0 = v42;
          re::StringID::destroyString((re::StringID *)v44);
        }
      }
      v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v26 + 32))(v26, 72, 8);
      *(_DWORD *)v37 = 1;
      *(_QWORD *)(v37 + 8) = "blendWeights";
      *(_QWORD *)(v37 + 16) = &qword_25410FA80;
      *(_QWORD *)(v37 + 24) = 0;
      *(_QWORD *)(v37 + 32) = 0x3800000003;
      *(_DWORD *)(v37 + 40) = 0;
      *(_QWORD *)(v37 + 48) = 0;
      *(_QWORD *)(v37 + 56) = 0;
      *(_DWORD *)(v37 + 64) = 0;
      qword_25410FA30 = v37;
      v38 = re::introspectionAllocator((re *)v37);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v38 + 32))(v38, 64, 8);
      *(_DWORD *)v39 = 6;
      *(_QWORD *)(v39 + 8) = 1;
      *(_QWORD *)(v39 + 16) = 0;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0;
      *(_BYTE *)(v39 + 40) = 1;
      *(_QWORD *)(v39 + 48) = re::ecs2::BlendShapeWeightsComponentVersionUtilities::downgradeBlendShapeWeightsComponentFromFall2023;
      *(_DWORD *)(v39 + 56) = 2;
      qword_25410FA38 = v39;
      __cxa_guard_release(&qword_25410F9F0);
    }
  }
  *((_QWORD *)this + 2) = 0x17000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_25410FA18;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::BlendShapeWeightsComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::BlendShapeWeightsComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::BlendShapeWeightsComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::BlendShapeWeightsComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v40 = v41;
}

double re::internal::defaultConstruct<re::ecs2::BlendShapeWeightsComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::BlendShapeWeightsComponent>(a3);
}

void re::internal::defaultDestruct<re::ecs2::BlendShapeWeightsComponent>(int a1, int a2, re::ecs2::BlendShapeWeightsComponent *this)
{
  re::ecs2::BlendShapeWeightsComponent::~BlendShapeWeightsComponent(this);
}

uint64_t re::ecs2::introspect_BlendShapeWeightsComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendShapeWeightsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_BlendShapeWeightsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_BlendShapeWeightsComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::BlendShapeWeightsComponent>, this);
}

uint64_t *re::ecs2::allocInfo_BlendShapeWeightsSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_25410FA00);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410FA00))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410FB38, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_25410FB48 = 0;
    qword_25410FB58 = 0;
    qword_25410FB60 = 0xFFFFFFFFLL;
    qword_25410FB38 = (uint64_t)&off_24ED7DAA8;
    qword_25410FB68 = (uint64_t)"BlendShapeWeightsSystem";
    dword_25410FB70 = 0;
    xmmword_25410FB78 = 0u;
    unk_25410FB88 = 0u;
    xmmword_25410FB98 = 0u;
    qword_25410FBA8 = 0;
    __cxa_guard_release(&qword_25410FA00);
  }
  return &qword_25410FB38;
}

void re::ecs2::initInfo_BlendShapeWeightsSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xAD07549E6AE565F4;
  v5[1] = "BlendShapeWeightsSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1C800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_BlendShapeWeightsSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::BlendShapeWeightsSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::BlendShapeWeightsSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::BlendShapeWeightsSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::BlendShapeWeightsSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::BlendShapeWeightsSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::BlendShapeWeightsSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::BlendShapeWeightsSystem *re::internal::defaultConstruct<re::ecs2::BlendShapeWeightsSystem>(int a1, int a2, re::ecs2::BlendShapeWeightsSystem *this)
{
  return re::ecs2::BlendShapeWeightsSystem::BlendShapeWeightsSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::BlendShapeWeightsSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 27);
  a3[20] = &off_24ED66800;
  v4 = a3[24];
  if (v4)
  {
    if (a3[25])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[26]);
      a3[25] = 0;
      a3[26] = 0;
    }
    a3[24] = 0;
  }
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a3 + 13);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::BlendShapeWeightsSystem>(_QWORD *a1)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 27);
  a1[20] = &off_24ED66800;
  v2 = a1[24];
  if (v2)
  {
    if (a1[25])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[26]);
      a1[25] = 0;
      a1[26] = 0;
    }
    a1[24] = 0;
  }
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(a1 + 13);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_BlendShapeWeightsSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendShapeWeightsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_BlendShapeWeightsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_BlendShapeWeightsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::BlendShapeWeightsSystem>, this);
}

uint64_t re::ecs2::ComponentType<re::ecs2::BlendShapeWeightsComponent>::makeBindNode@<X0>(_anonymous_namespace_ *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  uint64_t result;

  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *v5 = &off_24ED66BD8;
  result = re::BindPoint::BindPoint((uint64_t)(v5 + 1), a2);
  v5[7] = 0;
  *(_QWORD *)(a3 + 16) = v5;
  return result;
}

uint64_t re::ecs2::BlendShapeWeightsComponentStateImpl::dependsOnComponents(re::ecs2::BlendShapeWeightsComponentStateImpl *this)
{
  return *((_QWORD *)this + 6);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::BlendShapeWeightsComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 24;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
      }
      v6 += 8;
    }
    while (v6 != 56);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::BlendShapeWeightsComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::BlendShapeWeightsSystem::~BlendShapeWeightsSystem(re::ecs2::BlendShapeWeightsSystem *this)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 27);
  *((_QWORD *)this + 20) = &off_24ED66800;
  v2 = *((_QWORD *)this + 24);
  if (v2)
  {
    if (*((_QWORD *)this + 25))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 26));
      *((_QWORD *)this + 25) = 0;
      *((_QWORD *)this + 26) = 0;
    }
    *((_QWORD *)this + 24) = 0;
  }
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 27);
  *((_QWORD *)this + 20) = &off_24ED66800;
  v2 = *((_QWORD *)this + 24);
  if (v2)
  {
    if (*((_QWORD *)this + 25))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 26));
      *((_QWORD *)this + 25) = 0;
      *((_QWORD *)this + 26) = 0;
    }
    *((_QWORD *)this + 24) = 0;
  }
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::BlendShapeWeightsSystem::typeInfo(re::ecs2::BlendShapeWeightsSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BlendShapeWeightsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_BlendShapeWeightsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_BlendShapeWeightsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::BlendShapeWeightsSystem>, 0);
}

void re::internal::CallableMemFn<re::ecs2::BlendShapeWeightsSystem,REEventHandlerResult (re::ecs2::BlendShapeWeightsSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BlendShapeWeightsSystem,REEventHandlerResult (re::ecs2::BlendShapeWeightsSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BlendShapeWeightsSystem,REEventHandlerResult (re::ecs2::BlendShapeWeightsSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED668F0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BlendShapeWeightsSystem,REEventHandlerResult (re::ecs2::BlendShapeWeightsSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED668F0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BlendShapeWeightsSystem,REEventHandlerResult (re::ecs2::BlendShapeWeightsSystem::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 32;
}

_QWORD *re::DynamicArray<re::DynamicArray<float>>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::DynamicArray<float>>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::DynamicArray<float>>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

double re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 80;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(result + 8) = v1 & 0x7FFFFFFF;
    v2 = result + 24;
    re::BucketArray<RESubscriptionHandle,4ul>::deinit(result + 24);
    return re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2);
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED66948;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED669A0;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED669F8;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED66A50;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED66948;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED669A0;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED669F8;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED66A50;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::BlendShapeWeightsComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED66948;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED66948;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED669A0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED669A0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED669F8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED669F8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED66A50;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED66A50;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t re::BucketArray<RESubscriptionHandle,4ul>::deinit(uint64_t a1)
{
  uint64_t v2;
  unint64_t i;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    for (i = 0; i != v2; ++i)
      re::BucketArray<re::PipelineCompilationData,4ul>::operator[](a1, i);
  }
  while (*(_QWORD *)(a1 + 8))
    re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)a1);
  result = re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(a1);
  *(_QWORD *)(a1 + 40) = 0;
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 80 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 80 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 80 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v10) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v10 + 16) = *a4;
  v14 = *(_QWORD *)(a1 + 16) + 80 * v10;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  v14 += 24;
  *(_DWORD *)(v14 + 16) = 1;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  *(_QWORD *)(v14 + 24) = 0;
  *(_DWORD *)(v14 + 48) = 0;
  re::BucketArray<RESubscriptionHandle,8ul>::swap(v14, a5);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 24);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 80;
        }
        while (v11 < v9);
      }
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,4ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t *re::BucketArray<RESubscriptionHandle,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<RESubscriptionHandle,4ul>::setBucketsCapacity((uint64_t *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

uint64_t *re::BucketArray<RESubscriptionHandle,4ul>::setBucketsCapacity(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (uint64_t *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      while (v4 < a2)
      {
        v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 64, 0);
        result = (uint64_t *)re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::add((uint64_t)v3, &v5);
        v4 = v3[1];
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<RESubscriptionHandle,4ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 4 * v3)
  {
    re::BucketArray<RESubscriptionHandle,4ul>::setBucketsCapacity((uint64_t *)a1, (v2 + 4) >> 2);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 2));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 16 * (v2 & 3);
}

_QWORD *re::DynamicArray<re::BlendShapeWeights>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::BlendShapeWeights>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::BlendShapeWeights>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::IntrospectionDynamicArray<re::DynamicArray<float>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::DynamicArray<float>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::DynamicArray<float>>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::DynamicArray<float>>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::DynamicArray<unsigned char>>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::DynamicArray<float>>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::DynamicArray<unsigned char>>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::DynamicArray<float>>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::DynamicArray<float>>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::DynamicArray<float>>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::DynamicArray<float>>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::DynamicArray<float>>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::DynamicArray<float>>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  re::IntrospectionBase *v11;

  v8 = *((_QWORD *)this + 2);
  if (v8 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::DynamicArray<float>>::growCapacity(this, v8 + 1);
    v8 = *((_QWORD *)this + 2);
  }
  v9 = *((_QWORD *)this + 4) + 40 * v8;
  *(_QWORD *)(v9 + 32) = 0;
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  *(_DWORD *)(v9 + 24) = 1;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v10 + 1;
  ++*((_DWORD *)this + 6);
  v11 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 40 * v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v11);
  return v11;
}

uint64_t re::IntrospectionDynamicArray<re::DynamicArray<float>>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::DynamicArray<float>>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 40 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 40 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::DynamicArray<float>>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE v16[32];
  _BYTE v17[8];
  uint64_t v18;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = 40 * v8;
      v10 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 32);
      do
      {
        v11 = *(v10 - 4);
        if (v11)
        {
          if (*v10)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
          *v10 = 0;
          *(v10 - 3) = 0;
          *(v10 - 2) = 0;
          *(v10 - 4) = 0;
          ++*((_DWORD *)v10 - 2);
        }
        v10 += 5;
        v9 -= 40;
      }
      while (v9);
    }
  }
  else
  {
    re::DynamicArray<re::DynamicArray<unsigned char>>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::DynamicArray<float>>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  v12 = (_anonymous_namespace_ *)re::DynamicArray<re::DynamicArray<float>>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v17);
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v18);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13)
    {
      v14 = *(char **)(a1 + 32);
      v15 = 40 * v13;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v16, v14, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v16, (void **)v14, a3, 0);
        v14 += 40;
        v15 -= 40;
      }
      while (v15);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 40 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 40 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::DynamicArray<float>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::BlendShapeWeights>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::BlendShapeWeights>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::BlendShapeWeights>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::BlendShapeWeights>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::BlendShapeWeights>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::BlendShapeWeights>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::BlendShapeWeights>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::BlendShapeWeights>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::BlendShapeWeights>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::BlendShapeWeights>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::BlendShapeWeights>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::BlendShapeWeights>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::BlendShapeWeights>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  id v11;
  re::IntrospectionBase *v12;
  __int128 v14;
  __int128 v15;

  v14 = 0u;
  v15 = 0u;
  v8 = *((_QWORD *)this + 2);
  if (v8 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::BlendShapeWeights>::growCapacity(this, v8 + 1);
    v8 = *((_QWORD *)this + 2);
  }
  v9 = re::FixedArray<float>::FixedArray((uint64_t *)(*((_QWORD *)this + 4) + 32 * v8), (uint64_t)&v14);
  v10 = *((_QWORD *)&v15 + 1);
  v9[3] = *((_QWORD *)&v15 + 1);
  if (v10)
    v11 = (id)(v10 + 8);
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  re::BlendShapeWeights::~BlendShapeWeights((re::BlendShapeWeights *)&v14);
  v12 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 32 * *((_QWORD *)this + 2) - 32);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v12);
  return v12;
}

uint64_t re::IntrospectionDynamicArray<re::BlendShapeWeights>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::BlendShapeWeights>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 32 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 32 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::BlendShapeWeights>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  re::BlendShapeWeights *v9;
  uint64_t v10;
  uint64_t v11;
  _anonymous_namespace_ *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _BYTE v16[32];
  _BYTE v17[8];
  uint64_t v18;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = *(re::BlendShapeWeights **)(a1 + 32);
      v10 = 32 * v8;
      do
      {
        re::BlendShapeWeights::~BlendShapeWeights(v9);
        v9 = (re::BlendShapeWeights *)(v11 + 32);
        v10 -= 32;
      }
      while (v10);
    }
  }
  else
  {
    re::DynamicArray<re::BlendShapeWeights>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::BlendShapeWeights>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::BlendShapeWeights>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v17);
    re::TypeInfo::TypeInfo((uint64_t)v16, (uint64_t)&v18);
    v13 = *(_QWORD *)(a1 + 16);
    if (v13)
    {
      v14 = *(char **)(a1 + 32);
      v15 = 32 * v13;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v16, v14, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v16, (void **)v14, a3, 0);
        v14 += 32;
        v15 -= 32;
      }
      while (v15);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 32 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 32 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::BlendShapeWeights>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::BlendShapeWeightsComponent>(ArcSharedObject *a1)
{
  _OWORD *v1;
  uint64_t v2;
  double result;

  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  v1 = (_OWORD *)((char *)a1 + 144);
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_24ED435D8;
  result = 0.0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_DWORD *)(v2 + 168) = 0;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_DWORD *)(v2 + 208) = 0;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 116) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_DWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 216) = 0;
  *(_QWORD *)(v2 + 224) = v2 + 104;
  *(_QWORD *)(v2 + 232) = v1;
  *(_QWORD *)(v2 + 240) = 0;
  *(_QWORD *)(v2 + 248) = -1;
  *(_QWORD *)(v2 + 360) = 0;
  *(_DWORD *)(v2 + 352) = 0;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  return result;
}

id re::internal::defaultRetain<re::ecs2::BlendShapeWeightsSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::BlendShapeWeightsSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

void re::ecs2::BlendShapeWeightsComponentBindNodeImpl::~BlendShapeWeightsComponentBindNodeImpl(re::ecs2::BlendShapeWeightsComponentBindNodeImpl *this)
{
  char *v1;

  v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
}

{
  char *v1;

  v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
  JUMPOUT(0x2276933B8);
}

const char *re::internal::BindNodeImpl<re::ecs2::BlendShapeWeightsComponentBindNodeImpl>::implTypeInfo()
{
  return "@";
}

uint64_t re::internal::BindNodeImpl<re::ecs2::BlendShapeWeightsComponentBindNodeImpl>::copyInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED66BD8;
  a2[1] = v3;
  result = re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)(a2 + 2), (uint64_t *)(a1 + 16));
  a2[7] = 0;
  return result;
}

uint64_t re::internal::BindNodeImpl<re::ecs2::BlendShapeWeightsComponentBindNodeImpl>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  *a2 = &off_24ED66BD8;
  result = re::BindPoint::BindPoint((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
  a2[7] = 0;
  return result;
}

BOOL re::internal::BindNodeImpl<re::ecs2::BlendShapeWeightsComponentBindNodeImpl>::equals(uint64_t a1, uint64_t a2)
{
  return (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == "@"
      && re::BindPoint::operator==((re::BindPoint *)(a1 + 8), (re::BindPoint *)(a2 + 8));
}

double re::ecs2::BlendShapeWeightsComponentBindNodeImpl::nodeForURI@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t re::ecs2::BlendShapeWeightsComponentBindNodeImpl::relativeNodeForKey@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (!v4
    || (v5 = result, result = strncmp(*(const char **)a2, "blendWeights", v4), (_DWORD)result)
    || aBlendweights[v4])
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    v7 = *(_QWORD *)(v5 + 8);
    *v6 = &off_24ED66C70;
    v6[1] = v7;
    result = re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)(v6 + 2), (uint64_t *)(v5 + 16));
    *(_QWORD *)(a3 + 16) = v6;
  }
  return result;
}

double re::ecs2::BlendShapeWeightsComponentBindNodeImpl::bindPointForKey@<D0>(re *a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  NSObject *v5;
  double result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v5 = *re::foundationBindingLogObjects(a1);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    v7 = *a2;
    v8 = 136315138;
    v9 = v7;
    _os_log_error_impl(&dword_224FE9000, v5, OS_LOG_TYPE_ERROR, "Failed to bind to blend shape index: %s", (uint8_t *)&v8, 0xCu);
  }
  *(_QWORD *)(a3 + 40) = 0;
  result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 0;
  return result;
}

void re::ecs2::BlendWeightsIndexBindNodeImpl::~BlendWeightsIndexBindNodeImpl(re::ecs2::BlendWeightsIndexBindNodeImpl *this)
{
  char *v1;

  v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
}

{
  char *v1;

  v1 = (char *)this + 16;
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)this + 16);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)v1);
  JUMPOUT(0x2276933B8);
}

const char *re::internal::BindNodeImpl<re::ecs2::BlendWeightsIndexBindNodeImpl>::implTypeInfo()
{
  return "8";
}

uint64_t re::internal::BindNodeImpl<re::ecs2::BlendWeightsIndexBindNodeImpl>::copyInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED66C70;
  a2[1] = v2;
  return re::DynamicArray<re::BindPoint::BindPointData>::DynamicArray((uint64_t)(a2 + 2), (uint64_t *)(a1 + 16));
}

uint64_t re::internal::BindNodeImpl<re::ecs2::BlendWeightsIndexBindNodeImpl>::moveInto(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24ED66C70;
  return re::BindPoint::BindPoint((uint64_t)(a2 + 1), (uint64_t *)(a1 + 8));
}

BOOL re::internal::BindNodeImpl<re::ecs2::BlendWeightsIndexBindNodeImpl>::equals(uint64_t a1, uint64_t a2)
{
  return (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == "8"
      && re::BindPoint::operator==((re::BindPoint *)(a1 + 8), (re::BindPoint *)(a2 + 8));
}

double re::ecs2::BlendWeightsIndexBindNodeImpl::nodeForURI@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double re::ecs2::BlendWeightsIndexBindNodeImpl::relativeNodeForKey@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void re::ecs2::BlendWeightsIndexBindNodeImpl::bindPointForKey(uint64_t a1@<X0>, const char **a2@<X2>, uint64_t a3@<X8>)
{
  size_t v4;
  const char *v5;
  uint64_t v6;
  size_t v7;
  unsigned int v8;
  BOOL v9;
  const re::BindPoint *v10;
  _anonymous_namespace_ *v11;
  _anonymous_namespace_ *v12;
  unsigned __int8 v13;
  _anonymous_namespace_ *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = (size_t)a2[1];
  if (!v4)
    goto LABEL_11;
  v5 = *a2;
  if (*(unsigned __int8 *)*a2 - 48 > 9)
  {
    v9 = 1;
  }
  else
  {
    v6 = 1;
    do
    {
      v7 = v6;
      if (v4 == v6)
        break;
      v8 = v5[v6++] - 48;
    }
    while (v8 < 0xA);
    v9 = v7 < v4;
  }
  v10 = (const re::BindPoint *)(a1 + 8);
  v11 = (_anonymous_namespace_ *)re::BindPoint::baseValueUntyped((re::BindPoint *)(a1 + 8));
  if (!v11)
  {
LABEL_11:
    *(_QWORD *)(a3 + 40) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = 0;
    return;
  }
  v12 = v11;
  v24 = 0;
  v25 = &str_110;
  LOBYTE(v23) = v9;
  v21 = 0;
  v22 = (char *)&str_110;
  if (v9)
  {
    re::StringID::operator=(&v24, &v21);
LABEL_14:
    if ((v13 & 1) == 0)
    {
      {
        re::introspect<re::BlendShapeWeights>(void)::info = re::introspect_BlendShapeWeights(0);
      }
    }
    *(_QWORD *)a3 = re::introspect<re::BlendShapeWeights>(void)::info;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_DWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    re::BindPoint::addToBindPointStack((re::BindPoint *)a3, v10);
    v26 = 0u;
    v27 = 0u;
    re::DynamicArray<re::BindPoint::BindPointData>::add((_anonymous_namespace_ *)(a3 + 8), &v26);
    v15 = re::BindPoint::BindPointData::deinit((re::BindPoint::BindPointData *)&v26);
    v16 = *(_QWORD *)(a3 + 40) + 32 * *(_QWORD *)(a3 + 24);
    *(_QWORD *)(v16 - 32) = 0;
    v18 = v23;
    v19 = v24;
    v20 = v25;
    v25 = &str_110;
    *(_QWORD *)&v26 = v23;
    v24 = 0;
    *(_QWORD *)v17 = &off_24ED66D08;
    objc_initWeak((id *)(v17 + 8), (char *)v12 + 8);
    *(_QWORD *)(v17 + 16) = v18;
    *(_QWORD *)(v17 + 24) = v19;
    *(_QWORD *)(v17 + 32) = v20;
    *((_QWORD *)&v26 + 1) = 0;
    *(_QWORD *)&v27 = &str_110;
    re::StringID::destroyString((re::StringID *)((char *)&v26 + 8));
    *(_QWORD *)(v16 - 16) = v17;
    goto LABEL_17;
  }
  LODWORD(v26) = 0;
  if (sscanf(v22, "%u", &v26) == 1)
  {
    HIDWORD(v23) = v26;
    goto LABEL_14;
  }
  *(_QWORD *)(a3 + 40) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 0;
LABEL_17:
  re::StringID::destroyString((re::StringID *)&v21);
  re::StringID::destroyString((re::StringID *)&v24);
}

void re::ecs2::BlendWeightsIndexBindPointImpl::~BlendWeightsIndexBindPointImpl(id *this)
{
  re::StringID::destroyString((re::StringID *)(this + 3));
  objc_destroyWeak(this + 1);
  this[1] = 0;
}

{
  re::StringID::destroyString((re::StringID *)(this + 3));
  objc_destroyWeak(this + 1);
  this[1] = 0;
  JUMPOUT(0x2276933B8);
}

const char *re::internal::BindPointImpl<re::ecs2::BlendWeightsIndexBindPointImpl>::implTypeInfo()
{
  return "(";
}

re::StringID *re::internal::BindPointImpl<re::ecs2::BlendWeightsIndexBindPointImpl>::copyInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED66D08;
  *(_QWORD *)(a2 + 8) = 0;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  return re::StringID::StringID((re::StringID *)(a2 + 24), (const StringID *)(a1 + 24));
}

re::StringID *re::internal::BindPointImpl<re::ecs2::BlendWeightsIndexBindPointImpl>::moveInto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24ED66D08;
  *(_QWORD *)(a2 + 8) = 0;
  objc_copyWeak((id *)(a2 + 8), (id *)(a1 + 8));
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  return re::StringID::StringID((re::StringID *)(a2 + 24), (const StringID *)(a1 + 24));
}

BOOL re::internal::BindPointImpl<re::ecs2::BlendWeightsIndexBindPointImpl>::equals(uint64_t a1, uint64_t a2)
{
  return (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2) == "("
      && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
      && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && re::StringID::operator==((_QWORD *)(a1 + 24), (_QWORD *)(a2 + 24));
}

uint64_t re::ecs2::BlendWeightsIndexBindPointImpl::hash(uint64_t a1)
{
  char *WeakRetained;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 8));
  if (WeakRetained)
  {
    v3 = WeakRetained - 8;

  }
  else
  {
    v3 = 0;
  }
  v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * ((unint64_t)v3 ^ ((unint64_t)v3 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                         * ((unint64_t)v3 ^ ((unint64_t)v3 >> 30))) >> 27));
  v5 = (*(unsigned __int8 *)(a1 + 16) + ((v4 ^ (v4 >> 31)) << 6) + ((v4 ^ (v4 >> 31)) >> 2) - 0x61C8864680B583E9) ^ v4 ^ (v4 >> 31);
  v6 = (*(unsigned int *)(a1 + 20) + (v5 << 6) + (v5 >> 2) - 0x61C8864680B583E9) ^ v5;
  return ((*(_QWORD *)(a1 + 24) >> 1) + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9) ^ v6;
}

uint64_t re::ecs2::BlendWeightsIndexBindPointImpl::isWeak()
{
  return 1;
}

uint64_t re::ecs2::BlendWeightsIndexBindPointImpl::isAlive()
{
  return 1;
}

uint64_t re::ecs2::BlendWeightsIndexBindPointImpl::baseValueUntyped(uint64_t a1)
{
  _QWORD *WeakRetained;
  char *v3;
  void *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
  if (WeakRetained)
    v3 = (char *)(WeakRetained - 1);
  else
    v3 = 0;
  if (WeakRetained)
  {
    v4 = WeakRetained;
    if (*(_BYTE *)(a1 + 16) == 1)
    {
      v8 = re::AssetHandle::asset<re::BlendShapeWeightsDefinitionAsset>((re::BlendShapeWeightsDefinitionAsset *)(WeakRetained + 3));
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 96);
        if (v9)
        {
          v5 = 0;
          v10 = (_QWORD *)(a1 + 24);
          v11 = *(_QWORD **)(v8 + 112);
          while (!re::StringID::operator==(v11, v10))
          {
            ++v5;
            v11 += 2;
            if (v9 == v5)
              goto LABEL_15;
          }
          if (*((_QWORD *)v3 + 9) <= v5)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          v6 = v3 + 88;
          goto LABEL_18;
        }
      }
    }
    else if (!*(_BYTE *)(a1 + 16))
    {
      v5 = *(unsigned int *)(a1 + 20);
      if (WeakRetained[8] > v5)
      {
        v6 = WeakRetained + 10;
LABEL_18:
        v7 = *v6 + 32 * v5;
        goto LABEL_19;
      }
    }
LABEL_15:
    v7 = 0;
LABEL_19:

    return v7;
  }
  return 0;
}

uint64_t re::ecs2::BlendWeightsIndexBindPointImpl::supportsOverrideValue()
{
  return 1;
}

uint64_t re::ecs2::BlendWeightsIndexBindPointImpl::isOverridden()
{
  return 0;
}

uint64_t re::ecs2::BlendWeightsIndexBindPointImpl::overrideValueUntyped()
{
  return 0;
}

uint64_t re::ecs2::BlendWeightsIndexBindPointImpl::boundOwner()
{
  return 0;
}

uint64_t re::AssetHandle::asset<re::BlendShapeWeightsDefinitionAsset>(re::BlendShapeWeightsDefinitionAsset *a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = re::BlendShapeWeightsDefinitionAsset::assetType(a1);
  v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = re::AssetHandle::assetInfo(a1);
      if ((v6[17] & 1) != 0)
        v7 = (char *)v6[18];
      else
        v7 = (char *)v6 + 137;
      v8 = 136315138;
      v9 = v7;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

re::ecs2::RenderCallbacksComponent *re::ecs2::RenderCallbacksComponent::RenderCallbacksComponent(re::ecs2::RenderCallbacksComponent *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v5;
  re *v6;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_24ED66DD8;
  v3 = v2 + 56;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 76) = 0u;
  *(_QWORD *)(v2 + 92) = 0x7FFFFFFFLL;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 112) = 0;
  *(_QWORD *)(v2 + 120) = 0;
  *(_DWORD *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  v4 = (_QWORD *)(v2 + 104);
  *(_BYTE *)(v2 + 144) = 0;
  v5 = re::globalAllocators((re *)v2);
  re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(v3, v5[2], 16);
  *v4 = re::globalAllocators(v6)[2];
  re::DynamicArray<re::EvaluationRegisterId<int>>::setCapacity(v4, 0x10uLL);
  ++*((_DWORD *)this + 32);
  return this;
}

void re::ecs2::RenderCallbacksSystem::updateScenes(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  re::DynamicString **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const re::ecs2::Scene *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (**v25)(void);
  void (**v26)(void);
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  uint8_t buf[44];
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 104);
  if (!v3 || (*(_BYTE *)(v3 + 424) & 0x10) != 0)
  {
    v4 = a2[1];
    if (v4)
    {
      v5 = (_QWORD **)*a2;
      v6 = *a2 + 8 * v4;
      v28 = v6;
      do
      {
        v7 = *(_QWORD *)(a1 + 112);
        if (!v7)
        {
          re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneInternal", 36);
          _os_crash();
          __break(1u);
        }
        v8 = *v5;
        v9 = *(_QWORD *)(v7 + 104);
        if (v9)
          v10 = (re::DynamicString **)re::RenderFrameBox::get(v9 + 344, 0xFFFFFFFFFFFFFFFuLL);
        else
          v10 = 0;
        v11 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v8 + 25), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderCallbacksComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (!v11)
          goto LABEL_25;
        v12 = *(_QWORD *)(v11 + 24);
        if (!v12)
          goto LABEL_25;
        v13 = *(uint64_t **)(v11 + 40);
        if (v12 != 1)
        {
          v14 = *re::graphicsLogObjects((re *)v11);
          v11 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v11)
          {
            v15 = v14;
            v16 = v8[5];
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "updateSceneInternal";
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v16;
            _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "%s: more than 1 RenderCallbacksComponent found on scene: %s.Only first component will be processed.\n", buf, 0x16u);

          }
        }
        v17 = *v13;
        if (!*(_BYTE *)(v17 + 144))
        {
          v25 = *(void (***)(void))(v17 + 48);
          if (v25)
          {
            if (!*(_QWORD *)(a1 + 112))
            {
              v27 = *re::graphicsLogObjects((re *)v11);
              v6 = v28;
              if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315138;
                *(_QWORD *)&buf[4] = "updateSceneInternal";
                _os_log_impl(&dword_224FE9000, v27, OS_LOG_TYPE_DEFAULT, "%s: invalid RenderManager.\n", buf, 0xCu);
              }
              goto LABEL_25;
            }
            v26 = v25;
            v25[2]();

            *(_BYTE *)(v17 + 144) = 1;
            v6 = v28;
          }
        }
        v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
        (*(void (**)(uint8_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v18 + 8))(buf, v18, *(_QWORD *)(v17 + 16));
        if (buf[0])
          v19 = *(const re::ecs2::Scene **)&buf[8];
        else
          v19 = 0;
        re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot((re::ecs2::RenderingSubsystem *)v8, v19, v10, v30);
        memset(buf, 0, sizeof(buf));
        v32 = 0x7FFFFFFFLL;
        if (*(_QWORD *)(v17 + 32))
        {
          re::ObjCObject::operator=((id *)buf, (id *)(v17 + 32));
          re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=((uint64_t)&buf[8], v17 + 56);
          v20 = *(_QWORD *)(v17 + 120);
          if (v20)
          {
            v21 = *(uint64_t **)(v17 + 136);
            v22 = 8 * v20;
            do
            {
              v23 = *v21++;
              v29 = v23;
              re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::add((uint64_t)&buf[8], &v29);
              v22 -= 8;
            }
            while (v22);
            *(_QWORD *)(v17 + 120) = 0;
            ++*(_DWORD *)(v17 + 128);
          }
          v29 = v30[0] >> 1;
          v24 = re::RenderFrameData::stream((re::RenderFrameData *)(v10 + 33), (const re::WeakStringID *)&v29);
          (*(void (**)(_QWORD, uint8_t *))(**(_QWORD **)(v24 + 48) + 1040))(*(_QWORD *)(v24 + 48), buf);
        }
        re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&buf[8]);

        re::StringID::destroyString((re::StringID *)v30);
LABEL_25:
        ++v5;
      }
      while (v5 != (_QWORD **)v6);
    }
  }
}

uint64_t *re::ecs2::allocInfo_RenderCallbacksComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_262);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_262))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410FBD0, 0);
    *(uint64_t *)((char *)&qword_25410FBE0 + 6) = 0;
    qword_25410FBE0 = 0;
    qword_25410FBF0 = 0;
    qword_25410FBF8 = 0xFFFFFFFFLL;
    qword_25410FBD0 = (uint64_t)&off_24ED7DAA8;
    qword_25410FC00 = (uint64_t)"RenderCallbacksComponent";
    dword_25410FC08 = 0;
    xmmword_25410FC10 = 0u;
    unk_25410FC20 = 0u;
    xmmword_25410FC30 = 0u;
    qword_25410FC40 = 0;
    __cxa_guard_release(&_MergedGlobals_262);
  }
  return &qword_25410FBD0;
}

void re::ecs2::initInfo_RenderCallbacksComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0xD3BBB33D62F7084ALL;
  v10[1] = "RenderCallbacksComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25410FBC0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410FBC0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410FBB8 = v8;
      __cxa_guard_release(&qword_25410FBC0);
    }
  }
  *((_QWORD *)this + 2) = 0x9800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25410FBB8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::RenderCallbacksComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::RenderCallbacksComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RenderCallbacksComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RenderCallbacksComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

re::ecs2::RenderCallbacksComponent *re::internal::defaultConstruct<re::ecs2::RenderCallbacksComponent>(int a1, int a2, re::ecs2::RenderCallbacksComponent *this)
{
  return re::ecs2::RenderCallbacksComponent::RenderCallbacksComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::RenderCallbacksComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::RenderCallbacksComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_RenderCallbacksComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderCallbacksComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RenderCallbacksComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RenderCallbacksComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RenderCallbacksComponent>, this);
}

uint64_t *re::ecs2::allocInfo_RenderCallbacksSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410FBC8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410FBC8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410FC48, 0);
    *(uint64_t *)((char *)&qword_25410FC58 + 6) = 0;
    qword_25410FC58 = 0;
    qword_25410FC68 = 0;
    qword_25410FC70 = 0xFFFFFFFFLL;
    qword_25410FC48 = (uint64_t)&off_24ED7DAA8;
    qword_25410FC78 = (uint64_t)"RenderCallbacksSystem";
    dword_25410FC80 = 0;
    xmmword_25410FC88 = 0u;
    unk_25410FC98 = 0u;
    xmmword_25410FCA8 = 0u;
    qword_25410FCB8 = 0;
    __cxa_guard_release(&qword_25410FBC8);
  }
  return &qword_25410FC48;
}

void re::ecs2::initInfo_RenderCallbacksSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xD5A6B6E0F52B380ELL;
  v5[1] = "RenderCallbacksSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xA000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_RenderCallbacksSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::RenderCallbacksSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::RenderCallbacksSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::RenderCallbacksSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::RenderCallbacksSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RenderCallbacksSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RenderCallbacksSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::RenderCallbacksSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;
  double result;

  a3[8] = 0u;
  a3[9] = 0u;
  a3[6] = 0u;
  a3[7] = 0u;
  a3[4] = 0u;
  a3[5] = 0u;
  a3[2] = 0u;
  a3[3] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(_QWORD *)(v3 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)v3 = &off_24ED66E28;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::RenderCallbacksSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::RenderCallbacksSystem>(_OWORD *a1)
{
  uint64_t v1;
  double result;

  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(_QWORD *)(v1 + 152) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)v1 = &off_24ED66E28;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::RenderCallbacksSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_RenderCallbacksSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderCallbacksSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RenderCallbacksSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RenderCallbacksSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RenderCallbacksSystem>, this);
}

void re::ecs2::RenderCallbacksSystem::~RenderCallbacksSystem(re::ecs2::RenderCallbacksSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::RenderCallbacksSystem::typeInfo(re::ecs2::RenderCallbacksSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderCallbacksSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RenderCallbacksSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RenderCallbacksSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RenderCallbacksSystem>, 0);
}

void re::ecs2::RenderCallbacksComponent::~RenderCallbacksComponent(re::ecs2::RenderCallbacksComponent *this)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_24ED66DD8;
  v3 = (_QWORD *)((char *)this + 104);
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    if (*((_QWORD *)this + 17))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 17) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 32);
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7);

  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_24ED66DD8;
  v3 = (_QWORD *)((char *)this + 104);
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    if (*((_QWORD *)this + 17))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 17) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 32);
  }
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)this + 7);

  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::RenderCallbacksComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::RenderCallbacksComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::RenderCallbacksComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::RenderCallbacksComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::RenderCallbacksComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

uint64_t re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::init(a1, v4, v5);
      re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

void re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsCopy(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, v8 + 16, (_QWORD *)(v8 + 16));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 24;
    }
  }
}

void re::HashSetBase<unsigned long,unsigned long,re::internal::ValueAsKey<unsigned long>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &memset_pattern_23, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 24 * v3;
      do
      {
        v6 = *(_QWORD *)(a1 + 16) + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
        v4 += 24;
      }
      while (v5 != v4);
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

id re::internal::defaultRetain<re::ecs2::RenderCallbacksSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::RenderCallbacksSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

__n128 re::PeerVideoStreamingEncoder::operator=(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  __n128 result;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 != a1)
  {
    v2 = *a1;
    v3 = *((_QWORD *)a1 + 2);
    v4 = *((_DWORD *)a2 + 4);
    *a1 = *a2;
    *((_DWORD *)a1 + 4) = v4;
    *((_DWORD *)a2 + 4) = v3;
    *a2 = v2;
    v5 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = v5;
    result = (__n128)a1[2];
    v7 = *((_QWORD *)a1 + 6);
    v8 = *((_DWORD *)a2 + 12);
    a1[2] = a2[2];
    *((_DWORD *)a1 + 12) = v8;
    *((_DWORD *)a2 + 12) = v7;
    a2[2] = (__int128)result;
    v9 = *((_QWORD *)a1 + 7);
    *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 7) = v9;
    v10 = *((_QWORD *)a1 + 8);
    *((_QWORD *)a1 + 8) = *((_QWORD *)a2 + 8);
    *((_QWORD *)a2 + 8) = v10;
  }
  return result;
}

void re::PeerVideoStreamingEncoder::~PeerVideoStreamingEncoder(re::PeerVideoStreamingEncoder *this)
{
  const void *v2;
  __CVPixelBufferPool *v3;

  v2 = (const void *)*((_QWORD *)this + 3);
  if (v2)
  {
    VTCompressionSessionInvalidate(*((VTCompressionSessionRef *)this + 3));
    CFRelease(v2);
    *((_QWORD *)this + 3) = 0;
  }
  v3 = (__CVPixelBufferPool *)*((_QWORD *)this + 7);
  if (v3)
  {
    CVPixelBufferPoolRelease(v3);
    *((_QWORD *)this + 7) = 0;
  }
}

void re::PeerVideoStreamingEncoder::createPixelBufferFromPool(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  __CVPixelBufferPool *v5;
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  const __CFDictionary *v13;
  re *v14;
  int v15;
  NSObject *v16;
  re *v17;
  NSObject *v18;
  _BOOL8 v19;
  NSObject *v20;
  re *PixelBuffer;
  int v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  CVPixelBufferPoolRef poolOut;
  _BYTE pixelBufferOut[24];
  uint64_t v30;
  __int16 v31;
  int v32;
  uint8_t buf[4];
  int v34;
  uint8_t v35[8];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v5 = *(__CVPixelBufferPool **)(a1 + 56);
  v6 = (_QWORD *)(a1 + 32);
  if (v5)
  {
    if (*(_QWORD *)a2 == *v6
      && *(_QWORD *)(a2 + 8) == *(_QWORD *)(a1 + 40)
      && *(_DWORD *)(a2 + 16) == *(_DWORD *)(a1 + 48))
    {
      goto LABEL_18;
    }
    v7 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 16);
    *(_OWORD *)v6 = v7;
    CVPixelBufferPoolRelease(v5);
    *(_QWORD *)(a1 + 56) = 0;
  }
  else
  {
    v8 = *(_OWORD *)a2;
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 16);
    *(_OWORD *)v6 = v8;
  }
  v9 = re::PeerVideoStreamingUtils::cvPixelFormatFromMTLPixelFormat(*(_DWORD *)(a1 + 48), a2);
  *(_QWORD *)v35 = *MEMORY[0x24BDC5708];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", *(_QWORD *)(a1 + 32));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)pixelBufferOut = v10;
  v36 = *MEMORY[0x24BDC5650];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedLong:", *(_QWORD *)(a1 + 40));
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_QWORD *)&pixelBufferOut[8] = v11;
  v37 = *MEMORY[0x24BDC56B8];
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInt:", v9);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v38 = *MEMORY[0x24BDC5690];
  *(_QWORD *)&pixelBufferOut[16] = v12;
  v30 = MEMORY[0x24BDBD1C8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", pixelBufferOut, v35, 4);
  v13 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

  poolOut = 0;
  v14 = (re *)CVPixelBufferPoolCreate(0, 0, v13, &poolOut);
  if ((_DWORD)v14)
  {
    v15 = (int)v14;
    v16 = *re::peerVideoStreamingLogObjects(v14);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v34 = v15;
      _os_log_error_impl(&dword_224FE9000, v16, OS_LOG_TYPE_ERROR, "Error creating pixel buffer pool. errCode: %d", buf, 8u);
    }

    *(_QWORD *)(a1 + 56) = 0;
  }
  else
  {
    v5 = poolOut;

    *(_QWORD *)(a1 + 56) = v5;
    if (v5)
      goto LABEL_18;
  }
  v18 = *re::peerVideoStreamingLogObjects(v17);
  v19 = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
  if (v19)
  {
    v25 = *(_QWORD *)(a1 + 32);
    v26 = *(_QWORD *)(a1 + 40);
    v27 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)pixelBufferOut = 134218752;
    *(_QWORD *)&pixelBufferOut[4] = a1;
    *(_WORD *)&pixelBufferOut[12] = 2048;
    *(_QWORD *)&pixelBufferOut[14] = v25;
    *(_WORD *)&pixelBufferOut[22] = 2048;
    v30 = v26;
    v31 = 1024;
    v32 = v27;
    _os_log_error_impl(&dword_224FE9000, v18, OS_LOG_TYPE_ERROR, "Invalid pixel buffer pool for encoder 0x%p, w:%zu, h:%zu, format:%d", pixelBufferOut, 0x26u);
  }
  v5 = *(__CVPixelBufferPool **)(a1 + 56);
  if (!v5)
  {
    v20 = *re::peerVideoStreamingLogObjects((re *)v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)pixelBufferOut = 0;
      _os_log_error_impl(&dword_224FE9000, v20, OS_LOG_TYPE_ERROR, "Could not create pixel buffer because could not create a pixel buffer pool", pixelBufferOut, 2u);
    }
    *a3 = 0;
    return;
  }
LABEL_18:
  *(_QWORD *)pixelBufferOut = 0;
  PixelBuffer = (re *)CVPixelBufferPoolCreatePixelBuffer(0, v5, (CVPixelBufferRef *)pixelBufferOut);
  if ((_DWORD)PixelBuffer)
  {
    v22 = (int)PixelBuffer;
    v23 = *re::peerVideoStreamingLogObjects(PixelBuffer);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v35 = 67109120;
      *(_DWORD *)&v35[4] = v22;
      _os_log_error_impl(&dword_224FE9000, v23, OS_LOG_TYPE_ERROR, "Failed to create CVPixelBuffer, errCode: %d", v35, 8u);
    }
    v24 = 0;
  }
  else
  {
    v24 = *(_QWORD *)pixelBufferOut;
  }
  *a3 = v24;
}

void re::PeerVideoStreamingEncoder::encodeFrame(CMTimeValue a1, CVPixelBufferRef *a2, uint64_t a3, uint64_t a4, id *a5)
{
  uint64_t v10;
  OpaqueVTCompressionSession *v11;
  NSObject *v12;
  const __CFDictionary *v13;
  re *v14;
  int v15;
  NSObject *v16;
  re *v17;
  NSObject *v18;
  _BOOL8 v19;
  NSObject *v20;
  NSObject *v21;
  CMTimeScale *v22;
  const void *v23;
  re *v24;
  int v25;
  NSObject *v26;
  re *v27;
  int v28;
  NSObject *v29;
  const void *v30;
  re *v31;
  int v32;
  NSObject *v33;
  re *v34;
  int v35;
  NSObject *v36;
  re *v37;
  int v38;
  NSObject *v39;
  re *v40;
  int v41;
  NSObject *v42;
  int64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  void *v47;
  void *v48;
  const __CFDictionary *v49;
  __CVBuffer *v50;
  re *v51;
  int v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  NSObject *v57;
  CMTimeScale *v58;
  CMTime duration;
  CMTime presentationTimeStamp;
  __int128 v61;
  int v62;
  VTSessionRef session;
  CMTime buf;
  uint64_t v65;
  void *v66;
  _QWORD aBlock[4];
  id v68;
  CMTimeValue v69;
  CVPixelBufferRef *v70;
  int64_t v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  CMTime v75;
  uint64_t v76;
  __int16 v77;
  int v78;
  uint64_t v79;
  uint8_t v80[8];
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v10 = re::internal::enableSignposts(0, 0);
  if ((_DWORD)v10)
  {
    v10 = re::internal::enableHighFrequencyNetworkTracing(0, 0);
    if ((_DWORD)v10)
      v10 = kdebug_trace();
  }
  if (!*a2)
  {
    v12 = *re::peerVideoStreamingLogObjects((re *)v10);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v75.value) = 0;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "Invalid arg to encodeFrame: pixelBuffer is nullptr", (uint8_t *)&v75, 2u);
    }
    if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
      goto LABEL_25;
    return;
  }
  re::VideoBufferInfo::VideoBufferInfo((re::VideoBufferInfo *)&v61, *a2);
  v11 = *(OpaqueVTCompressionSession **)(a1 + 24);
  if (v11)
  {
    if (v61 == *(_OWORD *)a1 && v62 == *(_DWORD *)(a1 + 16))
      goto LABEL_52;
    *(_OWORD *)a1 = v61;
    *(_DWORD *)(a1 + 16) = v62;
    VTCompressionSessionInvalidate(v11);
    CFRelease(v11);
  }
  else
  {
    *(_OWORD *)a1 = v61;
    *(_DWORD *)(a1 + 16) = v62;
  }
  v79 = *MEMORY[0x24BDF99B8];
  *(_QWORD *)v80 = MEMORY[0x24BDBD1C8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v80, &v79, 1);
  v13 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  session = 0;
  v14 = (re *)VTCompressionSessionCreate(0, *(_DWORD *)a1, *(_DWORD *)(a1 + 8), 0x6D757861u, v13, 0, 0, 0, 0, (VTCompressionSessionRef *)&session);
  v15 = (int)v14;
  v16 = *re::peerVideoStreamingLogObjects(v14);
  if (v15)
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      v57 = v16;
      re::VideoBufferInfo::debugStr((re::VideoBufferInfo *)a1, (re::DynamicString *)&v75);
      v58 = (v75.timescale & 1) != 0 ? (CMTimeScale *)v75.epoch : (CMTimeScale *)((char *)&v75.timescale + 1);
      LODWORD(buf.value) = 67109378;
      HIDWORD(buf.value) = v15;
      LOWORD(buf.timescale) = 2080;
      *(_QWORD *)((char *)&buf.timescale + 2) = v58;
      _os_log_error_impl(&dword_224FE9000, v57, OS_LOG_TYPE_ERROR, "Error creating compression session, errCode: %d. Info: %s", (uint8_t *)&buf, 0x12u);

      if (v75.value)
      {
        if ((v75.timescale & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v75.value + 40))();
      }
    }

    *(_QWORD *)(a1 + 24) = 0;
  }
  else
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v21 = v16;
      re::VideoBufferInfo::debugStr((re::VideoBufferInfo *)a1, (re::DynamicString *)&v75);
      v22 = (v75.timescale & 1) != 0 ? (CMTimeScale *)v75.epoch : (CMTimeScale *)((char *)&v75.timescale + 1);
      LODWORD(buf.value) = 136315138;
      *(CMTimeValue *)((char *)&buf.value + 4) = (CMTimeValue)v22;
      _os_log_impl(&dword_224FE9000, v21, OS_LOG_TYPE_DEFAULT, "Created compression session with info: %s", (uint8_t *)&buf, 0xCu);

      if (v75.value)
      {
        if ((v75.timescale & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v75.value + 40))();
      }
    }
    v23 = (const void *)*MEMORY[0x24BDBD268];
    v24 = (re *)VTSessionSetProperty(session, (CFStringRef)*MEMORY[0x24BDF91F8], (CFTypeRef)*MEMORY[0x24BDBD268]);
    if ((_DWORD)v24)
    {
      v25 = (int)v24;
      v26 = *re::peerVideoStreamingLogObjects(v24);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v75.value) = 67109120;
        HIDWORD(v75.value) = v25;
        _os_log_error_impl(&dword_224FE9000, v26, OS_LOG_TYPE_ERROR, "Failed to disable frame reordering, errCode: %d", (uint8_t *)&v75, 8u);
      }
    }
    v27 = (re *)VTSessionSetProperty(session, (CFStringRef)*MEMORY[0x24BDF9360], v23);
    if ((_DWORD)v27)
    {
      v28 = (int)v27;
      v29 = *re::peerVideoStreamingLogObjects(v27);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v75.value) = 67109120;
        HIDWORD(v75.value) = v28;
        _os_log_error_impl(&dword_224FE9000, v29, OS_LOG_TYPE_ERROR, "Failed to disable throttling, errCode: %d", (uint8_t *)&v75, 8u);
      }
    }
    v30 = (const void *)*MEMORY[0x24BDBD270];
    v31 = (re *)VTSessionSetProperty(session, (CFStringRef)*MEMORY[0x24BDF9348], (CFTypeRef)*MEMORY[0x24BDBD270]);
    if ((_DWORD)v31)
    {
      v32 = (int)v31;
      v33 = *re::peerVideoStreamingLogObjects(v31);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v75.value) = 67109120;
        HIDWORD(v75.value) = v32;
        _os_log_error_impl(&dword_224FE9000, v33, OS_LOG_TYPE_ERROR, "Failed to enable real time compression, errCode: %d", (uint8_t *)&v75, 8u);
      }
    }
    v34 = (re *)VTSessionSetProperty(session, (CFStringRef)*MEMORY[0x24BDF92D0], &unk_24EDB7AD8);
    if ((_DWORD)v34)
    {
      v35 = (int)v34;
      v36 = *re::peerVideoStreamingLogObjects(v34);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v75.value) = 67109120;
        HIDWORD(v75.value) = v35;
        _os_log_error_impl(&dword_224FE9000, v36, OS_LOG_TYPE_ERROR, "Failed to set make keyframe interval duration, errCode: %d", (uint8_t *)&v75, 8u);
      }
    }
    v37 = (re *)VTSessionSetProperty(session, (CFStringRef)*MEMORY[0x24BDF9200], v30);
    if ((_DWORD)v37)
    {
      v38 = (int)v37;
      v39 = *re::peerVideoStreamingLogObjects(v37);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v75.value) = 67109120;
        HIDWORD(v75.value) = v38;
        _os_log_error_impl(&dword_224FE9000, v39, OS_LOG_TYPE_ERROR, "Failed to enable temporal compression, errCode: %d", (uint8_t *)&v75, 8u);
      }
    }
    v40 = (re *)VTCompressionSessionPrepareToEncodeFrames((VTCompressionSessionRef)session);
    if ((_DWORD)v40)
    {
      v41 = (int)v40;
      v42 = *re::peerVideoStreamingLogObjects(v40);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v75.value) = 67109120;
        HIDWORD(v75.value) = v41;
        _os_log_error_impl(&dword_224FE9000, v42, OS_LOG_TYPE_ERROR, "Error preparing compression session: %d", (uint8_t *)&v75, 8u);
      }
    }
    v11 = (OpaqueVTCompressionSession *)session;

    *(_QWORD *)(a1 + 24) = v11;
    if (v11)
      goto LABEL_52;
  }
  v18 = *re::peerVideoStreamingLogObjects(v17);
  v19 = os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
  if (v19)
  {
    v54 = *(_QWORD *)a1;
    v55 = *(_QWORD *)(a1 + 8);
    v56 = *(_DWORD *)(a1 + 16);
    LODWORD(v75.value) = 134218752;
    *(CMTimeValue *)((char *)&v75.value + 4) = a1;
    LOWORD(v75.flags) = 2048;
    *(_QWORD *)((char *)&v75.flags + 2) = v54;
    HIWORD(v75.epoch) = 2048;
    v76 = v55;
    v77 = 1024;
    v78 = v56;
    _os_log_error_impl(&dword_224FE9000, v18, OS_LOG_TYPE_ERROR, "Invalid compression session for encoder 0x%p, w:%zu, h:%zu, format:%d", (uint8_t *)&v75, 0x26u);
  }
  v11 = *(OpaqueVTCompressionSession **)(a1 + 24);
  if (v11)
  {
LABEL_52:
    v43 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v43 + 1;
    applesauce::dispatch::v1::queue::get(a5);
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 3321888768;
    aBlock[2] = ___ZN2re25PeerVideoStreamingEncoder11encodeFrameERKNS_15InputVideoFrameEbNS_8FunctionIFvP20opaqueCMSampleBufferEEEN10applesauce8dispatch2v15queueE_block_invoke;
    aBlock[3] = &unk_24ED66F10;
    v69 = a1;
    v70 = a2;
    v71 = v43;
    v45 = v44;
    v46 = *(_QWORD *)(a4 + 24);
    v68 = v45;
    v73 = v46;
    v74 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v72, a4);
    v47 = _Block_copy(aBlock);
    v65 = *MEMORY[0x24BDF9578];
    objc_msgSend(MEMORY[0x24BDD16E0], "numberWithBool:", a3);
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v66 = v48;
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", &v66, &v65, 1);
    v49 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();

    memset(&v75, 0, sizeof(v75));
    CMTimeMake(&v75, v43, 1);
    memset(&buf, 0, sizeof(buf));
    CMTimeMake(&buf, 1, 90);
    v50 = *a2;
    presentationTimeStamp = v75;
    duration = buf;
    v51 = (re *)VTCompressionSessionEncodeFrameWithOutputHandler(v11, v50, &presentationTimeStamp, &duration, v49, 0, v47);
    if ((_DWORD)v51)
    {
      v52 = (int)v51;
      v53 = *re::peerVideoStreamingLogObjects(v51);
      if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v80 = 67109120;
        *(_DWORD *)&v80[4] = v52;
        _os_log_error_impl(&dword_224FE9000, v53, OS_LOG_TYPE_ERROR, "Failed to encode frame, errCode %d", v80, 8u);
      }
    }

    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }

    return;
  }
  v20 = *re::peerVideoStreamingLogObjects((re *)v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v75.value) = 0;
    _os_log_error_impl(&dword_224FE9000, v20, OS_LOG_TYPE_ERROR, "Could not create compression session for encodeFrame", (uint8_t *)&v75, 2u);
  }
  if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
LABEL_25:
    kdebug_trace();
}

uint64_t ___ZN2re25PeerVideoStreamingEncoder11encodeFrameERKNS_15InputVideoFrameEbNS_8FunctionIFvP20opaqueCMSampleBufferEEEN10applesauce8dispatch2v15queueE_block_invoke(re *a1, int a2, char a3, CFTypeRef cf)
{
  NSObject *v6;
  uint64_t result;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD v13[4];
  _BYTE v14[24];
  uint64_t v15;
  _BYTE *v16;
  CFTypeRef v17;
  uint8_t buf[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v6 = *re::peerVideoStreamingLogObjects(a1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v19) = a2;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "CompressionOutputHandler. Failed with errCode: %d", buf, 8u);
    }
    result = re::internal::enableSignposts(0, 0);
    if ((_DWORD)result)
    {
      result = re::internal::enableHighFrequencyNetworkTracing(0, 0);
      if ((_DWORD)result)
        return kdebug_trace();
    }
  }
  else if ((a3 & 2) != 0)
  {
    v10 = *re::peerVideoStreamingLogObjects(a1);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *((_QWORD *)a1 + 7);
      *(_DWORD *)buf = 134217984;
      v19 = v11;
      _os_log_impl(&dword_224FE9000, v10, OS_LOG_TYPE_DEFAULT, "Encoder dropped frame with timestamp %lld", buf, 0xCu);
    }
    result = re::internal::enableSignposts(0, 0);
    if ((_DWORD)result)
    {
      result = re::internal::enableHighFrequencyNetworkTracing(0, 0);
      if ((_DWORD)result)
        return kdebug_trace();
    }
  }
  else if (cf)
  {
    CFRetain(cf);
    v9 = *((_QWORD *)a1 + 4);
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 3321888768;
    v13[2] = ___ZN2re25PeerVideoStreamingEncoder11encodeFrameERKNS_15InputVideoFrameEbNS_8FunctionIFvP20opaqueCMSampleBufferEEEN10applesauce8dispatch2v15queueE_block_invoke_1;
    v13[3] = &__block_descriptor_80_a8_32c46_ZTSN2re8FunctionIFvP20opaqueCMSampleBufferEEE_e5_v8__0l;
    v15 = *((_QWORD *)a1 + 11);
    v16 = 0;
    re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v14, (uint64_t)a1 + 64);
    v17 = cf;
    dispatch_async(v9, v13);
    if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
      kdebug_trace();
    result = (uint64_t)v16;
    if (v16)
    {
      result = (**(uint64_t (***)(_BYTE *))v16)(v16);
      if (v16 != v14)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
    }
  }
  else
  {
    v12 = *re::peerVideoStreamingLogObjects(a1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "CMSampleBuffer for encoded frame is null.", buf, 2u);
    }
    result = re::internal::enableSignposts(0, 0);
    if ((_DWORD)result)
    {
      result = re::internal::enableHighFrequencyNetworkTracing(0, 0);
      if ((_DWORD)result)
        return kdebug_trace();
    }
  }
  return result;
}

void ___ZN2re25PeerVideoStreamingEncoder11encodeFrameERKNS_15InputVideoFrameEbNS_8FunctionIFvP20opaqueCMSampleBufferEEEN10applesauce8dispatch2v15queueE_block_invoke_1(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + 64;
  v2 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(v3 + 8);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v4);
  CFRelease(*(CFTypeRef *)(a1 + 72));
}

uint64_t __copy_helper_block_a8_32c46_ZTSN2re8FunctionIFvP20opaqueCMSampleBufferEEE(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(a1 + 32, a2 + 32);
}

uint64_t (***__destroy_helper_block_a8_32c46_ZTSN2re8FunctionIFvP20opaqueCMSampleBufferEEE(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 32);
}

uint64_t __copy_helper_block_a8_64c46_ZTSN2re8FunctionIFvP20opaqueCMSampleBufferEEE(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = 0;
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(a1 + 64, a2 + 64);
}

uint64_t (***__destroy_helper_block_a8_64c46_ZTSN2re8FunctionIFvP20opaqueCMSampleBufferEEE(uint64_t a1))(_QWORD)
{
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 64);
}

int32x4_t re::ecs2::MeshComponentHelper::computeEntityMeshBounds@<Q0>(uint64_t a1@<X0>, int a2@<W1>, float32x4_t *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  char v6;
  int32x4_t result;
  __int128 v11;
  NSObject *v12;
  __int128 v13;
  uint8_t v14[16];

  if (a1)
  {
    v6 = a4;
    result = vdupq_n_s32(0x7F800000u);
    *(_QWORD *)&v11 = 0x7F0000007FLL;
    *((_QWORD *)&v11 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)a5 = result;
    *(_OWORD *)(a5 + 16) = v11;
    if (!a4 || (a4 & ~*(_DWORD *)(a1 + 288)) == 0)
    {
      if (a2)
      {
        if (*(_QWORD *)(a1 + 328))
      }
    }
  }
  else
  {
    v12 = *re::ecsCoreLogObjects(0);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v14 = 0;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "Null entity passed to computeEntityMeshBoundsAnchored!", v14, 2u);
    }
    result = vdupq_n_s32(0x7F800000u);
    *(_QWORD *)&v13 = 0x7F0000007FLL;
    *((_QWORD *)&v13 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)a5 = result;
    *(_OWORD *)(a5 + 16) = v13;
  }
  return result;
}

float32x4_t `anonymous namespace'::extendBounds(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t result;
  uint64_t *v9;
  float32x4_t *v10;
  uint64_t v11;
  uint64_t v12;
  re::MeshManager *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v20;
  uint64_t v21;
  float32x4_t *v22;
  unint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  __int128 v29;
  __int128 v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  __int128 v41;
  __int128 v42;
  float32x4_t v43[2];

  v5 = a1;
  v6 = *(_QWORD *)(a1 + 176);
  v7 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v6)
  {
    v9 = (uint64_t *)v7;
    v10 = (float32x4_t *)re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v6 + 32));
    if (v10)
    {
      if (v9)
      {
        do
        {
          v11 = v5;
          v5 = *(_QWORD *)(v5 + 24);
        }
        while (v5);
        v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v11 + 16) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 56));
        v13 = *(re::MeshManager **)(re::ServiceLocator::service<re::RenderManager>(v12) + 32);
        re::ecs2::MeshSceneComponent::ensureCachedDataUpToDate(v9, v13);
        v14 = v9[24];
        if (v14)
        {
          v15 = (_QWORD *)v9[26];
          v16 = &v15[v14];
          v17 = (uint64_t)v13 + 72;
          v18 = (float32x4_t)vdupq_n_s32(0x7F800000u);
          v19 = (uint64_t)v13 + 8;
          v20.i64[0] = 0x7F0000007FLL;
          v20.i64[1] = 0x7F0000007FLL;
          do
          {
            v37 = v20;
            v38 = v18;
            v21 = re::DataArray<re::MeshInstance>::get(v17, *v15);
            v22 = (float32x4_t *)re::DataArray<re::MeshModel>::get(v19, *(_QWORD *)(v21 + 16));
            v23 = 0;
            v24 = *a2;
            v25 = a2[1];
            v26 = a2[2];
            v27 = a2[3];
            v28 = *(float32x4_t *)(v21 + 48);
            v29 = *(_OWORD *)(v21 + 64);
            v30 = *(_OWORD *)(v21 + 80);
            v39 = *(float32x4_t *)(v21 + 32);
            v40 = v28;
            v41 = v29;
            v42 = v30;
            do
            {
              v43[v23 / 4] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, COERCE_FLOAT(*(_OWORD *)((char *)&v39 + v23 * 4))), v25, *(float32x2_t *)&v39.f32[v23], 1), v26, *(float32x4_t *)((char *)&v39 + v23 * 4), 2), v27, *(float32x4_t *)((char *)&v39 + v23 * 4), 3);
              v23 += 4;
            }
            while (v23 != 16);
            re::AABB::transform(v22 + 1, v43, (uint64_t)&v39);
            v32 = v38;
            v31 = v39;
            v32.i32[3] = 0;
            v33 = v40;
            v31.i32[3] = 0;
            v34 = v37;
            v34.i32[3] = 0;
            v18 = vminnmq_f32(v32, v31);
            v33.i32[3] = 0;
            v20 = vmaxnmq_f32(v34, v33);
            ++v15;
          }
          while (v15 != v16);
        }
        else
        {
          v18 = (float32x4_t)vdupq_n_s32(0x7F800000u);
          v20.i64[0] = 0x7F0000007FLL;
          v20.i32[2] = 127;
        }
        v36 = *a3;
        v35 = a3[1];
        v36.i32[3] = 0;
      }
      else
      {
        re::MeshAsset::aabbFromMesh(v10, a2, (uint64_t)v43);
        v36 = *a3;
        v35 = a3[1];
        v36.i32[3] = 0;
        v18 = v43[0];
        v20 = v43[1];
      }
      v18.i32[3] = 0;
      v35.i32[3] = 0;
      result = vminnmq_f32(v36, v18);
      v20.i32[3] = 0;
      *a3 = result;
      a3[1] = vmaxnmq_f32(v35, v20);
    }
  }
  return result;
}

uint64_t `anonymous namespace'::extendChildBounds(uint64_t result, float32x4_t *a2, char a3, float32x4_t *a4)
{
  uint64_t v4;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float32x4_t v16;
  __int128 v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float32x4_t v30;
  float32x4_t v31;
  float32_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  __n128 v40;
  _OWORD v41[4];
  float32x4_t v42[4];

  v4 = *(_QWORD *)(result + 328);
  if (v4)
  {
    v8 = *(uint64_t **)(result + 344);
    v9 = &v8[v4];
    do
    {
      result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*v8 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (!result)
      {
        result = *v8;
        if ((a3 & 1) != 0 || (~*(_DWORD *)(result + 288) & 0x2008) == 0)
        {
          v10 = *(_QWORD *)(result + 240);
          if (v10)
          {
            v11 = 0;
            v12 = *(float *)(v10 + 48);
            v13 = *(float *)(v10 + 52);
            v14 = *(float *)(v10 + 56);
            v15 = *(float *)(v10 + 60);
            v16 = *(float32x4_t *)(v10 + 32);
            v17 = *(_OWORD *)(v10 + 64);
            v18 = v12 + v12;
            v19 = v13 + v13;
            v20 = v14 + v14;
            v21 = v12 * (float)(v12 + v12);
            v22 = v13 * (float)(v13 + v13);
            v23 = v14 * (float)(v14 + v14);
            v24 = v18 * v13;
            v25 = v18 * v14;
            v26 = v19 * v14;
            v27 = v18 * v15;
            v28 = v19 * v15;
            v29 = v20 * v15;
            v30.i32[3] = 0;
            v30.f32[0] = 1.0 - (float)(v22 + v23);
            v30.f32[1] = v24 + v29;
            v30.f32[2] = v25 - v28;
            v31.i32[3] = 0;
            v31.f32[0] = v24 - v29;
            v31.f32[1] = 1.0 - (float)(v21 + v23);
            v31.f32[2] = v26 + v27;
            v32 = v26 - v27;
            v33.i32[3] = 0;
            v33.f32[0] = v25 + v28;
            v33.f32[1] = v32;
            v33.f32[2] = 1.0 - (float)(v21 + v22);
            HIDWORD(v17) = 1.0;
            v34 = *a2;
            v35 = a2[1];
            v36 = a2[2];
            v37 = a2[3];
            v41[0] = vmulq_n_f32(v30, v16.f32[0]);
            v41[1] = vmulq_n_f32(v31, *(float *)vshrq_n_u64((uint64x2_t)v16, 0x20uLL).i32);
            v41[2] = vmulq_laneq_f32(v33, v16, 2);
            v41[3] = v17;
            do
            {
              v42[v11] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v34, COERCE_FLOAT(v41[v11])), v35, *(float32x2_t *)&v41[v11], 1), v36, (float32x4_t)v41[v11], 2), v37, (float32x4_t)v41[v11], 3);
              ++v11;
            }
            while (v11 != 4);
          }
          else
          {
            v38 = a2[1];
            v42[0] = *a2;
            v42[1] = v38;
            v39 = a2[3];
            v42[2] = a2[2];
            v42[3] = v39;
          }
          result = *v8;
          if (*(_QWORD *)(*v8 + 328))
        }
      }
      ++v8;
    }
    while (v8 != v9);
  }
  return result;
}

int32x4_t re::ecs2::MeshComponentHelper::computeEntityMeshTightBounds@<Q0>(uint64_t a1@<X0>, int a2@<W1>, float32x4_t *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  char v6;
  int32x4_t result;
  __int128 v11;
  NSObject *v12;
  __int128 v13;
  uint8_t v14[16];

  if (a1)
  {
    v6 = a4;
    result = vdupq_n_s32(0x7F800000u);
    *(_QWORD *)&v11 = 0x7F0000007FLL;
    *((_QWORD *)&v11 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)a5 = result;
    *(_OWORD *)(a5 + 16) = v11;
    if (!a4 || (a4 & ~*(_DWORD *)(a1 + 288)) == 0)
    {
      if (a2)
      {
        if (*(_QWORD *)(a1 + 328))
      }
    }
  }
  else
  {
    v12 = *re::ecsCoreLogObjects(0);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v14 = 0;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "Null entity passed to computeEntityMeshTightBounds!", v14, 2u);
    }
    result = vdupq_n_s32(0x7F800000u);
    *(_QWORD *)&v13 = 0x7F0000007FLL;
    *((_QWORD *)&v13 + 1) = 0x7F0000007FLL;
    *(int32x4_t *)a5 = result;
    *(_OWORD *)(a5 + 16) = v13;
  }
  return result;
}

float32x4_t `anonymous namespace'::extendTightBounds(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  uint64_t v5;
  float32x4_t result;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11[2];

  if (a1)
  {
    v5 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(a1 + 32));
    if (v5)
    {
      re::MeshAsset::tightAABBFromMesh(v5, a2, v11);
      v7 = *a3;
      v8 = a3[1];
      v7.i32[3] = 0;
      v9 = v11[0];
      v10 = v11[1];
      v9.i32[3] = 0;
      v8.i32[3] = 0;
      result = vminnmq_f32(v7, v9);
      v10.i32[3] = 0;
      *a3 = result;
      a3[1] = vmaxnmq_f32(v8, v10);
    }
  }
  return result;
}

uint64_t `anonymous namespace'::extendChildTightBounds(uint64_t result, float32x4_t *a2, char a3, float32x4_t *a4)
{
  uint64_t v4;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float32x4_t v17;
  __int128 v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float32x4_t v31;
  float32x4_t v32;
  float32_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  __n128 v41;
  _OWORD v42[4];
  float32x4_t v43[4];

  v4 = *(_QWORD *)(result + 328);
  if (v4)
  {
    v8 = *(uint64_t **)(result + 344);
    v9 = &v8[v4];
    do
    {
      result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*v8 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
      if (!result)
      {
        v10 = *v8;
        if ((a3 & 1) != 0 || (~*(_DWORD *)(v10 + 288) & 0x2008) == 0)
        {
          v11 = *(_QWORD *)(v10 + 240);
          if (v11)
          {
            v12 = 0;
            v13 = *(float *)(v11 + 48);
            v14 = *(float *)(v11 + 52);
            v15 = *(float *)(v11 + 56);
            v16 = *(float *)(v11 + 60);
            v17 = *(float32x4_t *)(v11 + 32);
            v18 = *(_OWORD *)(v11 + 64);
            v19 = v13 + v13;
            v20 = v14 + v14;
            v21 = v15 + v15;
            v22 = v13 * (float)(v13 + v13);
            v23 = v14 * (float)(v14 + v14);
            v24 = v15 * (float)(v15 + v15);
            v25 = v19 * v14;
            v26 = v19 * v15;
            v27 = v20 * v15;
            v28 = v19 * v16;
            v29 = v20 * v16;
            v30 = v21 * v16;
            v31.i32[3] = 0;
            v31.f32[0] = 1.0 - (float)(v23 + v24);
            v31.f32[1] = v25 + v30;
            v31.f32[2] = v26 - v29;
            v32.i32[3] = 0;
            v32.f32[0] = v25 - v30;
            v32.f32[1] = 1.0 - (float)(v22 + v24);
            v32.f32[2] = v27 + v28;
            v33 = v27 - v28;
            v34.i32[3] = 0;
            v34.f32[0] = v26 + v29;
            v34.f32[1] = v33;
            v34.f32[2] = 1.0 - (float)(v22 + v23);
            HIDWORD(v18) = 1.0;
            v35 = *a2;
            v36 = a2[1];
            v37 = a2[2];
            v38 = a2[3];
            v42[0] = vmulq_n_f32(v31, v17.f32[0]);
            v42[1] = vmulq_n_f32(v32, *(float *)vshrq_n_u64((uint64x2_t)v17, 0x20uLL).i32);
            v42[2] = vmulq_laneq_f32(v34, v17, 2);
            v42[3] = v18;
            do
            {
              v43[v12] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, COERCE_FLOAT(v42[v12])), v36, *(float32x2_t *)&v42[v12], 1), v37, (float32x4_t)v42[v12], 2), v38, (float32x4_t)v42[v12], 3);
              ++v12;
            }
            while (v12 != 4);
          }
          else
          {
            v39 = a2[1];
            v43[0] = *a2;
            v43[1] = v39;
            v40 = a2[3];
            v43[2] = a2[2];
            v43[3] = v40;
          }
          result = *v8;
          if (*(_QWORD *)(*v8 + 328))
        }
      }
      ++v8;
    }
    while (v8 != v9);
  }
  return result;
}

void *re::ecs2::MeshComponentHelper::repairedMaterialHandles@<X0>(re::MeshManager *this@<X1>, uint64_t a2@<X0>, re::AssetHandle *a3@<X2>, re::AssetHandle *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _anonymous_namespace_ *MaxMaterialIndex;
  unint64_t v11;
  void *result;
  uint64_t v13;
  uint64_t v14;
  re::AssetHandle *v15;
  unsigned int v16;

  MaxMaterialIndex = (_anonymous_namespace_ *)re::MeshManager::findMaxMaterialIndex(this, (const re::MeshCollectionHandles *)(a2 + 360));
  *(_QWORD *)(a6 + 32) = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_DWORD *)(a6 + 24) = 0;
  v11 = (int)MaxMaterialIndex + 1;
  result = re::DynamicArray<re::AssetHandle>::setCapacity((_QWORD *)a6, v11);
  ++*(_DWORD *)(a6 + 24);
  if (a5)
  {
    v13 = 24 * a5;
    do
    {
      v14 = *((_QWORD *)a4 + 1);
      v15 = a3;
      if (v14)
      {
        v16 = atomic_load((unsigned int *)(v14 + 704));
        if (v16 == 2)
          v15 = a4;
        else
          v15 = a3;
      }
      result = re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)a6, v15);
      a4 = (re::AssetHandle *)((char *)a4 + 24);
      v13 -= 24;
    }
    while (v13);
  }
  while (*(_QWORD *)(a6 + 16) < v11)
    result = re::DynamicArray<re::AssetHandle>::add((_anonymous_namespace_ *)a6, a3);
  return result;
}

void re::ecs2::MeshComponentHelper::overrideMaterials(uint64_t a1, re::MeshManager *this, re::MaterialAsset *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6)
{
  unint64_t v6;
  _anonymous_namespace_ *MaxMaterialIndex;
  uint64_t v12;
  unint64_t i;
  uint64_t v14;
  unint64_t v15;
  re::MaterialParameterBlock *v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  __int16 v28;
  unint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  MaxMaterialIndex = (_anonymous_namespace_ *)re::MeshManager::findMaxMaterialIndex(this, (const re::MeshCollectionHandles *)(a1 + 360));
  v12 = ((_DWORD)MaxMaterialIndex + 1);
  if (!*a4)
  {
  }
  if (!*a5)
  {
  }
  if (*a6)
  {
    if (!(_DWORD)v12)
      return;
    goto LABEL_9;
  }
  if ((_DWORD)v12)
  {
LABEL_9:
    for (i = 0; v12 != i; ++i)
    {
      v14 = re::AssetHandle::loadedAsset<re::MaterialAsset>(a3);
      v15 = a4[1];
      if (v15 <= i)
      {
        v21 = 0;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v30 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v22 = 136315906;
        v23 = "operator[]";
        v24 = 1024;
        v25 = 468;
        v26 = 2048;
        v27 = i;
        v28 = 2048;
        v29 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_22:
        v21 = 0;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v30 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v22 = 136315906;
        v23 = "operator[]";
        v24 = 1024;
        v25 = 468;
        v26 = 2048;
        v27 = i;
        v28 = 2048;
        v29 = v15;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_23:
        v21 = 0;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v30 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v22 = 136315906;
        v23 = "operator[]";
        v24 = 1024;
        v25 = 468;
        v26 = 2048;
        v27 = i;
        v28 = 2048;
        v29 = v6;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      *(_QWORD *)(a4[2] + 8 * i) = *(_QWORD *)(v14 + 1664);
      v16 = *(re::MaterialParameterBlock **)(v14 + 1672);
      if (re::MaterialParameterBlock::isEmpty(v16))
      {
        v15 = a5[1];
        if (v15 <= i)
          goto LABEL_22;
      }
      else
      {
        re::MaterialParameterBlock::createMaterialParameterTableIfNeeded(v16, &v20);
        v17 = (_QWORD *)re::BucketArray<re::SharedPtr<re::MaterialParameterTable>,8ul>::addUninitialized((uint64_t)a6);
        v18 = v20;
        *v17 = v20;
        if (v18)
        {
          v19 = (id)(v18 + 8);
          v6 = a5[1];
          if (v6 <= i)
            goto LABEL_23;
          *(_QWORD *)(a5[2] + 8 * i) = v18;

          continue;
        }
        v6 = a5[1];
        if (v6 <= i)
          goto LABEL_23;
      }
      *(_QWORD *)(a5[2] + 8 * i) = 0;
    }
  }
}

uint64_t re::ecs2::MeshComponentHelper::areRequiredAssetsLoaded(re::ecs2::MeshComponentHelper *this, const re::ecs2::MeshComponent *a2)
{
  uint64_t v3;
  unsigned int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  re::MaterialAsset *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 5);
  if (v3 && (v4 = atomic_load((unsigned int *)(v3 + 704)), v4 == 2))
  {
    v5 = 1;
  }
  else
  {
    re::AssetHandle::loadAsync((re::ecs2::MeshComponentHelper *)((char *)this + 32));
    v5 = 0;
  }
  v6 = *((_QWORD *)this + 5);
  if (v6 && *(_QWORD *)(v6 + 24))
  {
    v7 = *((_QWORD *)this + 9);
    if (v7)
    {
      v8 = (re::MaterialAsset *)*((_QWORD *)this + 11);
      v9 = 24 * v7;
      do
      {
        v10 = *((_QWORD *)v8 + 1);
        if (v10)
        {
          v11 = atomic_load((unsigned int *)(v10 + 704));
          if (v11 != 3)
          {
            if (*((_QWORD *)v8 + 1))
            {
              v12 = re::AssetHandle::loadedAsset<re::MaterialAsset>(v8);
              if (!v12 || *(_BYTE *)(v12 + 1656))
              {
                re::AssetHandle::loadAsync(v8);
                v5 = 0;
              }
            }
          }
        }
        v8 = (re::MaterialAsset *)((char *)v8 + 24);
        v9 -= 24;
      }
      while (v9);
    }
  }
  else
  {
    v5 = 0;
  }
  return v5 & 1;
}

uint64_t re::ecs2::MeshComponentHelper::computeTriangleCount(re::ecs2::MeshComponentHelper *this, const re::ecs2::MeshComponent *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  re::MeshAsset *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  re::MeshPart *v21;
  uint64_t v22;

  v2 = *((_QWORD *)this + 2);
  do
  {
    v3 = v2;
    v2 = *(_QWORD *)(v2 + 24);
  }
  while (v2);
  if (!*(_QWORD *)(v3 + 16))
    return 0xFFFFFFFFLL;
  v4 = *((_QWORD *)this + 5);
  if (!v4)
    return 0xFFFFFFFFLL;
  v5 = atomic_load((unsigned int *)(v4 + 704));
  if (v5 != 2)
    return 0xFFFFFFFFLL;
  v6 = (re::ecs2::MeshComponentHelper *)((char *)this + 32);
  v7 = *((_QWORD *)this + 2);
  do
  {
    v8 = v7;
    v7 = *(_QWORD *)(v7 + 24);
  }
  while (v7);
  v9 = (*(uint64_t (**)(_QWORD, const re::ecs2::MeshComponent *))(**(_QWORD **)(*(_QWORD *)(v8 + 16) + 56)
                                                                          + 32))(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 56), a2);
  v10 = *(_QWORD *)(re::ServiceLocator::service<re::RenderManager>(v9) + 32);
  v11 = re::AssetHandle::loadedAsset<re::MeshAsset>(v6);
  v12 = *(_QWORD *)(v11 + 376);
  if (!v12)
    return 0;
  v13 = 0;
  v14 = *(uint64_t **)(v11 + 392);
  v15 = &v14[v12];
  v16 = v10 + 72;
  v17 = v10 + 8;
  do
  {
    v18 = re::DataArray<re::MeshInstance>::tryGet(v16, *v14);
    v19 = re::DataArray<re::MeshModel>::tryGet(v17, *(_QWORD *)(v18 + 16));
    v20 = *(_QWORD *)(v19 + 56);
    if (v20)
    {
      v21 = *(re::MeshPart **)(v19 + 64);
      v22 = 560 * v20;
      do
      {
        v13 = re::MeshPart::computeTriangleCount(v21) + v13;
        v21 = (re::MeshPart *)((char *)v21 + 560);
        v22 -= 560;
      }
      while (v22);
    }
    ++v14;
  }
  while (v14 != v15);
  return v13;
}

uint64_t re::ecs2::MeshComponentHelper::isMappedToOcclusionPass(re::ecs2::MeshComponentHelper *this, const re::ecs2::MeshComponent *a2)
{
  uint64_t v2;
  uint64_t v3;
  const re::AssetHandle *i;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  re *v9;
  const char *v10;
  _BYTE v12[24];

  v2 = *((_QWORD *)this + 9);
  if (v2)
  {
    v3 = 24 * v2;
    for (i = (const re::AssetHandle *)*((_QWORD *)this + 11); ; i = (const re::AssetHandle *)((char *)i + 24))
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v12, i);
      v5 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)v12);
      if (!v5)
        break;
      v6 = *(_QWORD *)(v5 + 1664);
      if (!v6)
        break;
      if ((v7 & 1) == 0)
      {
        if ((_DWORD)v9)
        {
          re::ecs2::MeshComponentHelper::isMappedToOcclusionPass(re::ecs2::MeshComponent const&)::occlusionKey = re::hashString(v9, v10);
        }
      }
      v8 = re::ecs2::MeshComponentHelper::isMappedToOcclusionPass(re::ecs2::MeshComponent const&)::occlusionKey;
      if (re::MaterialParameterTable::kDefaultNameHash(void)::once != -1)
        dispatch_once(&re::MaterialParameterTable::kDefaultNameHash(void)::once, &__block_literal_global_29);
      if (!re::MaterialParameterTable::tryGetPassTechniqueMapping((re::MaterialParameterTable *)(v6 + 224), v8, re::MaterialParameterTable::kDefaultNameHash(void)::_kDefaultNameHash))break;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
      v3 -= 24;
      if (!v3)
        return 1;
    }
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v12);
  }
  return 0;
}

void re::ecs2::MeshComponentHelper::fixLegacyParametersColorGamut(re::RenderManager *a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  re *v8;
  uint64_t *v9;
  re::MaterialParameterBlock *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  BOOL v31[16];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v6 = a3[11];
  v7 = a3[6];
  if (v6 < v7)
  {
    re::DynamicArray<re::SharedPtr<re::Shareable<re::AssetLoadDescriptor>>>::resize((uint64_t)(a3 + 9), a3[6]);
    do
    {
      v9 = re::globalAllocators(v8);
      v10 = (re::MaterialParameterBlock *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9[2] + 32))(v9[2], 1008, 8);
      v8 = re::MaterialParameterBlock::MaterialParameterBlock(v10, a1);
      if (a3[11] <= v6)
      {
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        *(_OWORD *)v31 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_41:
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        *(_OWORD *)v31 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v11 = a3[13];
      v12 = *(_QWORD *)(v11 + 8 * v6);
      *(_QWORD *)(v11 + 8 * v6) = v8;
      if (v12)

      ++v6;
    }
    while (v7 != v6);
  }
  if (*(_QWORD *)(a2 + 16))
  {
    v13 = 0;
    while (1)
    {
      if (a3[6] <= v13)
        return;
      v14 = re::AssetHandle::loadedAsset<re::MaterialAsset>((re::MaterialAsset *)(*(_QWORD *)(a2 + 32) + 24 * v13));
      v15 = re::AssetHandle::loadedAsset<re::MaterialDefinitionAsset>((re::MaterialDefinitionAsset *)(v14 + 40));
      if (a3[6] <= v13)
        goto LABEL_41;
      v16 = a3[8];
      v17 = *(_QWORD *)(v16 + 24 * v13);
      if (!v17)
        v17 = *(_QWORD *)(v16 + 24 * v13 + 8);
      v18 = *(unsigned int *)(v17 + 336);
      if ((_DWORD)v18)
      {
        v19 = 0;
        v20 = *(_DWORD **)(v17 + 320);
        while ((*v20 & 0x80000000) == 0)
        {
          v20 += 80;
          if (v18 == ++v19)
          {
            LODWORD(v19) = *(_DWORD *)(v17 + 336);
            break;
          }
        }
      }
      else
      {
        LODWORD(v19) = 0;
      }
      if ((_DWORD)v18 != (_DWORD)v19)
        break;
LABEL_20:
      if (++v13 >= *(_QWORD *)(a2 + 16))
        return;
    }
    v21 = v19;
    v22 = v14 + 1680;
    v23 = v15 + 2272;
    while (1)
    {
      v24 = *(_QWORD *)(v17 + 320);
      if (!*(_BYTE *)(v24 + 320 * v21 + 280))
      {
        *(_QWORD *)v31 = *(_QWORD *)(v24 + 320 * v21 + 8) >> 1;
        v28 = re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v22, (uint64_t *)v31);
        if (!v28 || (v29 = *(_BYTE *)(v28 + 20)) == 0)
        {
          *(_QWORD *)v31 = *(_QWORD *)(*(_QWORD *)(v17 + 320) + 320 * v21 + 8) >> 1;
          v30 = re::HashTable<re::WeakStringID,re::ColorConstantTable::ColorValue,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,false,false>::tryGet(v23, (uint64_t *)v31);
          if (!v30)
            goto LABEL_24;
          v29 = *(_BYTE *)(v30 + 20);
        }
        if ((v29 & 0xFE) == 0x14)
        {
          *(_BYTE *)(*(_QWORD *)(v17 + 320) + 320 * v21 + 280) = 1;
          re::ecs2::MaterialParameterBlockArrayComponent::updateParameterBlockValue((re::ecs2::MaterialParameterBlockArrayComponent *)a3, a1, (const char **)(*(_QWORD *)(v17 + 320) + 320 * v21 + 8), (re::ecs2::SerializedMaterialParameter *)(*(_QWORD *)(v17 + 320) + 320 * v21 + 32), (re::MaterialParameterBlock *)v13, 0, v31);
        }
      }
LABEL_24:
      v25 = *(_DWORD *)(v17 + 336);
      if (v25 <= (int)v19 + 1)
        v26 = v19 + 1;
      else
        v26 = *(_DWORD *)(v17 + 336);
      while (1)
      {
        v21 = (v19 + 1);
        if (v26 - 1 == (_DWORD)v19)
          break;
        LODWORD(v19) = v19 + 1;
        v27 = v21;
        if ((*(_DWORD *)(*(_QWORD *)(v17 + 320) + 320 * v21) & 0x80000000) != 0)
          goto LABEL_31;
      }
      v27 = v26;
LABEL_31:
      LODWORD(v19) = v27;
      if (v25 == v27)
        goto LABEL_20;
    }
  }
}

float32x4_t re::ecs2::MeshComponentHelper::addRenderPassGroupBoundsTable(uint64_t a1)
{
  uint64_t v2;
  float32x4_t result;
  uint64_t v4;
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t *v10;
  uint64_t v11;
  float32x4_t *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;

  v2 = re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::tryGet(*(_QWORD *)a1, (uint64_t *)(a1 + 8));
  if (v2)
  {
    v4 = v2;
    re::AABB::transform(*(float32x4_t **)(a1 + 16), *(float32x4_t **)(a1 + 24), (uint64_t)&v17);
    if (*(_QWORD *)(a1 + 40))
    {
      v5 = re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<>(v4, (uint64_t *)(a1 + 40));
      v6 = *(float32x4_t *)v5;
      v7 = *(float32x4_t *)(v5 + 16);
      v6.i32[3] = 0;
      v8 = v17;
      v9 = v18;
      v8.i32[3] = 0;
      result = vminnmq_f32(v6, v8);
      v7.i32[3] = 0;
      v9.i32[3] = 0;
      *(float32x4_t *)v5 = result;
      *(float32x4_t *)(v5 + 16) = vmaxnmq_f32(v7, v9);
      *(_BYTE *)(v5 + 32) |= *(_BYTE *)(a1 + 49);
    }
    v11 = *(_QWORD *)(a1 + 32);
    v10 = (uint64_t *)(a1 + 32);
    if (v11)
    {
      v12 = (float32x4_t *)re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<>(v4, v10);
      v13 = *v12;
      v14 = v12[1];
      v13.i32[3] = 0;
      v15 = v17;
      v16 = v18;
      v15.i32[3] = 0;
      v14.i32[3] = 0;
      result = vminnmq_f32(v13, v15);
      v16.i32[3] = 0;
      *v12 = result;
      v12[1] = vmaxnmq_f32(v14, v16);
    }
  }
  return result;
}

uint64_t re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  v4 = *a2;
  v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  if (!*(_QWORD *)a1)
  {
    LODWORD(v7) = 0;
    goto LABEL_8;
  }
  v7 = v6 % *(unsigned int *)(a1 + 24);
  v8 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v7);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<>(a1, v7, v6, a2);
    ++*(_DWORD *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 16) + 80 * v11;
    return v10 + 32;
  }
  v9 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v9 + 80 * v8 + 16) != v4)
  {
    LODWORD(v8) = *(_DWORD *)(v9 + 80 * v8 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v8 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v10 = v9 + 80 * v8;
  return v10 + 32;
}

uint64_t re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addEmplace<>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int128 v12;

  v7 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v7 == 0x7FFFFFFF)
  {
    v7 = *(unsigned int *)(a1 + 32);
    v8 = v7;
    if ((_DWORD)v7 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::ecs2::RenderPassGroupBoundsInfo,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v8 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v8 + 1;
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_DWORD *)(v9 + 80 * v7 + 8);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_DWORD *)(v9 + 80 * v7 + 8);
    *(_DWORD *)(a1 + 36) = v10 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v9 + 80 * v7 + 8) = v10 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v7 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v7 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v7) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v7 + 16) = *a4;
  v11 = *(_QWORD *)(a1 + 16) + 80 * v7;
  *(_QWORD *)&v12 = 0x7F0000007FLL;
  *((_QWORD *)&v12 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v11 + 32) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(v11 + 48) = v12;
  *(_BYTE *)(v11 + 64) = 0;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v7;
  ++*(_DWORD *)(a1 + 28);
  return v7;
}

re::ecs2::ClippingParametersRegistry *re::ecs2::ClippingParametersRegistry::ClippingParametersRegistry(re::ecs2::ClippingParametersRegistry *this)
{
  _anonymous_namespace_ *v2;
  _anonymous_namespace_ *v3;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_DWORD *)this + 16) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 26) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  v2 = (_anonymous_namespace_ *)re::DynamicArray<re::ClippingParametersEntry>::setCapacity(this, 0x400uLL);
  ++*((_DWORD *)this + 6);
  v3 = (_anonymous_namespace_ *)re::DynamicArray<int>::setCapacity((_QWORD *)this + 5, 0x400uLL);
  ++*((_DWORD *)this + 16);
  re::DynamicArray<unsigned short>::setCapacity((_QWORD *)this + 10, 0x400uLL);
  ++*((_DWORD *)this + 26);
  return this;
}

void re::ecs2::ClippingParametersRegistry::~ClippingParametersRegistry(re::ecs2::ClippingParametersRegistry *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 15);
  if (v2)
  {

    *((_QWORD *)this + 15) = 0;
  }
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    if (*((_QWORD *)this + 14))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 14) = 0;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 10) = 0;
    ++*((_DWORD *)this + 26);
  }
  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    if (*((_QWORD *)this + 9))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 5) = 0;
    ++*((_DWORD *)this + 16);
  }
  if (*(_QWORD *)this)
  {
    if (*((_QWORD *)this + 4))
      (*(void (**)(_QWORD))(**(_QWORD **)this + 40))(*(_QWORD *)this);
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
    *(_QWORD *)this = 0;
    ++*((_DWORD *)this + 6);
  }
}

uint64_t re::ecs2::ClippingParametersRegistry::copyClippingParameterEntries(_anonymous_namespace_ *a1, uint64_t a2)
{
  _anonymous_namespace_ *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  re *v7;
  re *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;

  v3 = a1;
  v15 = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)a1 + 15))
  {
    re::make::shared::object<re::ecs2::ShareableClippingParameters>(a1, v12);
    v4 = *((_QWORD *)v3 + 15);
    v5 = v12[0];
    *((_QWORD *)v3 + 15) = v12[0];
    v12[0] = v4;
    if (v4)
    {

      v5 = *((_QWORD *)v3 + 15);
    }
    v6 = *((_QWORD *)v3 + 2);
    v12[0] = *((_QWORD *)v3 + 4);
    v12[1] = v6;
    a1 = re::FixedArray<re::ClippingParametersEntry>::operator=((_anonymous_namespace_ *)(v5 + 24), (uint64_t)v12);
  }
  re::globalAllocators(a1);
  v7 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 8, 8);
  v8 = v7;
  v9 = *((_QWORD *)v3 + 15);
  *(_QWORD *)v7 = v9;
  if (v9)
    v7 = (re *)(id)(v9 + 8);
  v10 = re::globalAllocators(v7)[2];
  v12[0] = (uint64_t)&off_24ED66F50;
  v13 = v10;
  v14 = v12;
  (*(void (**)(uint64_t, re *, uint64_t *))(*(_QWORD *)a2 + 16))(a2, v8, v12);
  if (v14)
  {
    (*(void (**)(uint64_t *))*v14)(v14);
    if (v14 != v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
  }
  return *(_QWORD *)(*((_QWORD *)v3 + 15) + 40);
}

_anonymous_namespace_ *re::FixedArray<re::ClippingParametersEntry>::operator=(_anonymous_namespace_ *a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)a1)
    goto LABEL_4;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
LABEL_4:
    re::FixedArray<re::ClippingParametersEntry>::copy(a1, a2);
  }
  return a1;
}

void re::ecs2::ClippingParametersRegistry::add(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[5];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 96);
  if (v6)
  {
    v7 = v6 - 1;
    v8 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 112) + 2 * v7);
    *(_QWORD *)(a1 + 96) = v7;
    ++*(_DWORD *)(a1 + 104);
    if (*(_QWORD *)(a1 + 16) <= v8)
    {
      memset(v27, 0, sizeof(v27));
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v9 = (_OWORD *)(*(_QWORD *)(a1 + 32) + (v8 << 6));
    v10 = *a2;
    v11 = a2[1];
    v12 = a2[3];
    v9[2] = a2[2];
    v9[3] = v12;
    *v9 = v10;
    v9[1] = v11;
    v14 = (_QWORD *)(a1 + 120);
    v13 = *(_QWORD *)(a1 + 120);
    if (!v13)
      goto LABEL_20;

    goto LABEL_19;
  }
  v8 = *(_QWORD *)(a1 + 16);
  if (v8 > 0x3FF)
  {
    *(_BYTE *)a3 = 0;
    return;
  }
  v15 = *(_QWORD *)(a1 + 8);
  v16 = *(_QWORD *)(a1 + 16);
  if (v8 >= v15)
  {
    if (*(_QWORD *)a1)
    {
      v17 = 2 * v15;
      v18 = v15 == 0;
      v19 = 8;
      if (!v18)
        v19 = v17;
      if (v19 <= v8 + 1)
        v20 = v8 + 1;
      else
        v20 = v19;
      re::DynamicArray<re::ClippingParametersEntry>::setCapacity((_QWORD *)a1, v20);
    }
    else
    {
      re::DynamicArray<re::ClippingParametersEntry>::setCapacity((_QWORD *)a1, v8 + 1);
      ++*(_DWORD *)(a1 + 24);
    }
    v16 = *(_QWORD *)(a1 + 16);
  }
  v21 = (_OWORD *)(*(_QWORD *)(a1 + 32) + (v16 << 6));
  v22 = *a2;
  v23 = a2[1];
  v24 = a2[3];
  v21[2] = a2[2];
  v21[3] = v24;
  *v21 = v22;
  v21[1] = v23;
  ++*(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(a1 + 24);
  LODWORD(v27[0]) = 0;
  re::DynamicArray<int>::add((_QWORD *)(a1 + 40), v27);
  v26 = *(_QWORD *)(a1 + 120);
  v14 = (_QWORD *)(a1 + 120);
  v25 = v26;
  if (v26)
  {

LABEL_19:
    *v14 = 0;
  }
LABEL_20:
  *(_BYTE *)a3 = 1;
  *(_WORD *)(a3 + 2) = v8;
}

uint64_t re::ecs2::ClippingParametersRegistry::registerClippingParameterDataRefs(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = *(_QWORD *)(a2 + 152);
  if (v2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(result + 56);
    do
    {
      v5 = *(_QWORD *)(a2 + 176);
      if ((*(_BYTE *)(a2 + 160) & 1) != 0)
        v5 = a2 + 168;
      v6 = *(unsigned __int16 *)(v5 + 2 * v3);
      if (v4 <= v6)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      ++*(_DWORD *)(*(_QWORD *)(result + 72) + 4 * v6);
      ++v3;
    }
    while (v2 != v3);
  }
  return result;
}

void re::ecs2::ClippingParametersRegistry::unregisterClippingParameterDataRefs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int16 v13;
  uint64_t v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 152);
  if (v3)
  {
    v5 = 0;
    v6 = a2 + 168;
    do
    {
      v13 = 0;
      if ((*(_DWORD *)(a2 + 160) & 1) != 0)
        v7 = v6;
      else
        v7 = *(_QWORD *)(a2 + 176);
      v13 = *(_WORD *)(v7 + 2 * v5);
      v8 = v13;
      v9 = *(_QWORD *)(a1 + 56);
      if (v9 <= v13)
      {
        v14 = 0;
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        v23 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v15 = 136315906;
        v16 = "operator[]";
        v17 = 1024;
        v18 = 789;
        v19 = 2048;
        v20 = v8;
        v21 = 2048;
        v22 = v9;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v10 = *(_QWORD *)(a1 + 72);
      v11 = *(_DWORD *)(v10 + 4 * v13) - 1;
      *(_DWORD *)(v10 + 4 * v13) = v11;
      if (!v11)
        re::DynamicArray<unsigned short>::add((_QWORD *)(a1 + 80), &v13);
      ++v5;
    }
    while (v3 != v5);
  }
  if (*(_QWORD *)(a1 + 96) == *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = 0;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 56) = 0;
    ++*(_DWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 96) = 0;
    ++*(_DWORD *)(a1 + 104);
    v12 = *(_QWORD *)(a1 + 120);
    if (v12)
    {

      *(_QWORD *)(a1 + 120) = 0;
    }
  }
}

void re::internal::Callable<re::ecs2::ClippingParametersRegistry::copyClippingParameterEntries(re::PerFrameAllocator *)::$_0,void ()(void *)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

void re::internal::Callable<re::ecs2::ClippingParametersRegistry::copyClippingParameterEntries(re::PerFrameAllocator *)::$_0,void ()(void *)>::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a2;
  v3 = **a2;
  if (v3)
  {

    *v2 = 0;
  }
}

_QWORD *re::internal::Callable<re::ecs2::ClippingParametersRegistry::copyClippingParameterEntries(re::PerFrameAllocator *)::$_0,void ()(void *)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED66F50;
  return result;
}

_QWORD *re::internal::Callable<re::ecs2::ClippingParametersRegistry::copyClippingParameterEntries(re::PerFrameAllocator *)::$_0,void ()(void *)>::moveInto(uint64_t a1, _QWORD *a2)
{
  _QWORD *result;

  result = a2;
  *a2 = &off_24ED66F50;
  return result;
}

uint64_t re::internal::Callable<re::ecs2::ClippingParametersRegistry::copyClippingParameterEntries(re::PerFrameAllocator *)::$_0,void ()(void *)>::size()
{
  return 16;
}

_QWORD *re::DynamicArray<re::ClippingParametersEntry>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  void *v7;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (*v5)
      {
        if (!a2)
        {
          v7 = 0;
          if (!v3)
            goto LABEL_9;
          goto LABEL_8;
        }
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 6;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
            {
LABEL_9:
              v5[4] = v7;
              v5[1] = a2;
              return result;
            }
LABEL_8:
            memcpy(v7, (const void *)v5[4], v5[2] << 6);
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v5 + 40))(*v5, v5[4]);
            goto LABEL_9;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
      }
      else
      {
        result = (_QWORD *)re::DynamicArray<re::ClippingParametersEntry>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
      }
    }
  }
  return result;
}

void re::make::shared::object<re::ecs2::ShareableClippingParameters>(re *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = re::globalAllocators(a1);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 48, 8);
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v4, 0);
  *(_QWORD *)v4 = &off_24ED66FA8;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *a2 = v4;
}

void re::ecs2::ShareableClippingParameters::~ShareableClippingParameters(re::ecs2::ShareableClippingParameters *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if (*((_QWORD *)this + 4))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 5));
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 5) = 0;
    }
    *((_QWORD *)this + 3) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    if (*((_QWORD *)this + 4))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 5));
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 5) = 0;
    }
    *((_QWORD *)this + 3) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

void *re::FixedArray<re::ClippingParametersEntry>::copy(void *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)result + 1);
  if (v2 == *(_QWORD *)(a2 + 8))
  {
    if (v2)
      return memmove(*((void **)result + 2), *(const void **)a2, v2 << 6);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) Cannot copy from a Slice of a different size", "m_size == other.size()", "copy", 378);
    result = (void *)_os_crash();
    __break(1u);
  }
  return result;
}

void re::FixedArray<re::ClippingParametersEntry>::init<>(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;

  *a1 = a2;
  a1[1] = a3;
  if (!a3)
    return;
  if (a3 >> 58)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 64, a3);
    _os_crash();
    __break(1u);
    goto LABEL_9;
  }
  v5 = a3 << 6;
  v6 = (_OWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3 << 6, 16);
  a1[2] = (uint64_t)v6;
  if (!v6)
  {
LABEL_9:
    re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
    return;
  }
  v8 = v6;
  if (a3 != 1)
  {
    bzero(v6, v5 - 64);
    v8 = (_OWORD *)((char *)v8 + v5 - 64);
  }
  v8[2] = 0u;
  v8[3] = 0u;
  *v8 = 0u;
  v8[1] = 0u;
}

uint64_t re::ecs2::IntrospectedNetworkTypeHelper::shouldSerializeAsJson(re::ecs2::IntrospectedNetworkTypeHelper *this, const re::ecs2::ComponentTypeBase *a2, const re::IntrospectionBase *a3)
{
  uint64_t result;
  uint64_t v6;
  const char ***i;
  const char **v8;
  const char *v9;
  uint64_t v10;
  const char **v11;
  BOOL v12;

  result = (*(uint64_t (**)(re::ecs2::IntrospectedNetworkTypeHelper *, const re::ecs2::ComponentTypeBase *, const re::IntrospectionBase *))(*(_QWORD *)this + 8))(this, a2, a3);
  if ((_DWORD)result)
  {
    if ((_DWORD)result)
    {
      if (*((_DWORD *)a2 + 4) != 8)
        return 0;
      v6 = *((unsigned int *)a2 + 14);
      if (!(_DWORD)v6)
        return 0;
      for (i = (const char ***)*((_QWORD *)a2 + 8); ; ++i)
      {
        v8 = *i;
        if (*(_DWORD *)*i == 1)
          break;
        if (!--v6)
          return 0;
      }
      if (!*((_DWORD *)v8 + 10)
        && !strcmp("object", v8[1])
        && (v9 = v8[2]) != 0
        && *((_DWORD *)v9 + 4) == 1
        && (v10 = *((_QWORD *)v9 + 6)) != 0
        && *(_DWORD *)(v10 + 16) == 8
        && ((v11 = re::ecs2::IntrospectedNetworkTypeHelper::shouldSerializeAsJson(re::ecs2::ComponentTypeBase const&,re::IntrospectionBase const&)::$_0::__invoke(v10),
             *(_DWORD *)(v10 + 56))
          ? (v12 = v11 == 0)
          : (v12 = 0),
            !v12))
      {
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void re::ecs2::IntrospectedNetworkTypeHelper::registerSwiftComponent(re::ecs2::IntrospectedNetworkTypeHelper *this, const char *a2)
{
  const char *v2;
  _anonymous_namespace_ *v3;
  uint64_t v4[2];

  v2 = (const char *)this;
  {
  }
  v3 = (_anonymous_namespace_ *)strncmp(v2, "CustomComponent", 0xFuLL);
  if (!(_DWORD)v3)
    v2 += 15;
  v4[0] = 0;
  v4[1] = (uint64_t)&str_110;
  re::StringID::destroyString((re::StringID *)v4);
}

uint64_t `anonymous namespace'::encodeEntity(_anonymous_namespace_ *this, const re::ecs2::Entity *a2, re::DynamicString *a3)
{
  re::DynamicString::assignf(a2, "%llu", *((_QWORD *)this + 37));
  return 1;
}

void `anonymous namespace'::decodeEntity(_anonymous_namespace_ *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  objc_initWeak((id *)a2, 0);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  re::ecs2::EntityHandle::reset((id *)a2);
  if (this && *(_BYTE *)this)
  {
    v6 = 0;
    if (sscanf((const char *)this, "%llu", &v6) == 1)
    {
      v5 = v6;
      re::ecs2::EntityHandle::reset((id *)a2);
      *(_QWORD *)(a2 + 8) = v5;
    }
  }
}

uint64_t re::ecs2::IntrospectedNetworkTypeHelper::makeTypeInfo@<X0>(const re::IntrospectionBase *a1@<X2>, const re::ecs2::ComponentTypeBase *a2@<X3>, uint64_t a3@<X1>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t result;
  re::NetworkSystemFeatureFlags *v10;
  uint64_t v11;
  re *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  re::NetworkSystemFeatureFlags *v20;
  void **v21;
  void **v22;
  const re::IntrospectionBase *v23;
  _QWORD *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t *v28;
  uint64_t v29;
  NSObject *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  re *shouldSerializeAsJson;
  const re::IntrospectionBase *v36;
  void *v37;
  void *v38;
  NSObject *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  void *v43;
  _QWORD v44[3];
  int v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t);
  void *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t, uint64_t);
  void *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t, uint64_t, uint64_t);
  void *v67;
  _QWORD *v68;
  _QWORD v69[5];
  _QWORD v70[5];
  _QWORD v71[6];
  _QWORD v72[6];
  uint64_t v73;
  _QWORD v74[5];
  uint64_t v75;
  _QWORD v76[5];
  _QWORD v77[5];
  _QWORD v78[6];
  _QWORD v79[6];
  _QWORD v80[5];
  _QWORD v81[5];
  _QWORD v82[5];
  _QWORD v83[5];
  _QWORD v84[6];
  _QWORD v85[6];
  _QWORD v86[6];
  _QWORD v87[6];
  uint64_t v88[3];
  int v89;
  uint64_t v90;
  _QWORD v91[6];
  _QWORD aBlock[6];
  _BYTE buf[12];
  uint64_t v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  if (a1
    && (*(uint64_t (**)(const re::IntrospectionBase *, uint64_t, const re::IntrospectionBase *, const re::ecs2::ComponentTypeBase *))(*(_QWORD *)a1 + 64))(a1, a3, a1, a2))
  {
    v8 = (*(uint64_t (**)(const re::IntrospectionBase *))(*(_QWORD *)a1 + 64))(a1);
    RESyncSyncableTypeInfoSetTypeId();
    result = RESyncSyncableTypeInfoSupportsNetworkSync();
    if ((result & 1) != 0)
    {
      v10 = (re::NetworkSystemFeatureFlags *)RESyncRetain();
      result = re::NetworkSystemFeatureFlags::enableAltSharedApp(v10);
      *a4 = v8;
      if ((result & 1) != 0)
      {
        v11 = MEMORY[0x24BDAC760];
        aBlock[0] = MEMORY[0x24BDAC760];
        aBlock[1] = 0x40000000;
        aBlock[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke;
        aBlock[3] = &__block_descriptor_tmp_17;
        aBlock[4] = a1;
        aBlock[5] = v8;
        a4[1] = (uint64_t)_Block_copy(aBlock);
        v91[0] = v11;
        v91[1] = 0x40000000;
        v91[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_4;
        v91[3] = &__block_descriptor_tmp_6;
        v91[4] = a1;
        v91[5] = v8;
        result = (uint64_t)_Block_copy(v91);
        a4[2] = result;
      }
      else
      {
        a4[1] = 0;
        a4[2] = 0;
      }
    }
    else
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
    }
    return result;
  }
  v90 = 0;
  memset(v88, 0, sizeof(v88));
  v89 = 0;
  if (*(_DWORD *)(a3 + 16) != 8)
    goto LABEL_15;
  re::getDowngradeFunctions(a3, 2u, (uint64_t)buf);
  re::DynamicArray<re::Result<re::Unit,re::DynamicString> (*)(void *,void *)>::operator=((uint64_t)v88, (uint64_t)buf);
  v12 = *(re **)buf;
  if (*(_QWORD *)buf && v94)
    v12 = (re *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)buf + 40))(*(_QWORD *)buf);
  if (*(_DWORD *)(a3 + 16) == 8 && (v13 = re::snapshot::Registry::list(void)::s_head) != 0)
  {
    v14 = *(_QWORD *)(a3 + 48);
    while (*(_QWORD *)(v13 + 40) != a3)
    {
      v13 = *(_QWORD *)(v13 + 32);
      if (!v13)
        goto LABEL_15;
    }
    v30 = *re::ecsNetworkLogObjects(v12);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v14;
      _os_log_impl(&dword_224FE9000, v30, OS_LOG_TYPE_INFO, "Found static snapshot entry for '%{private}s'", buf, 0xCu);
    }
    v87[0] = MEMORY[0x24BDAC760];
    v87[1] = 0x40000000;
    v87[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_7;
    v87[3] = &__block_descriptor_tmp_9_0;
    v87[4] = v13;
    v87[5] = v14;
    v86[0] = MEMORY[0x24BDAC760];
    v86[1] = 0x40000000;
    v86[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_10;
    v86[3] = &__block_descriptor_tmp_11_0;
    v86[4] = v13;
    v86[5] = v14;
    v85[0] = MEMORY[0x24BDAC760];
    v85[1] = 0x40000000;
    v85[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_12;
    v85[3] = &__block_descriptor_tmp_14_0;
    v85[4] = v13;
    v85[5] = v14;
    v84[0] = MEMORY[0x24BDAC760];
    v84[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_15;
    v84[3] = &__block_descriptor_tmp_16_0;
    v17 = v85;
    v84[4] = v13;
    v84[5] = v14;
    v16 = v84;
    v15 = v86;
    v18 = v87;
    v84[1] = 0x40000000;
  }
  else
  {
LABEL_15:
    v15 = 0;
    v16 = 0;
    v83[0] = MEMORY[0x24BDAC760];
    v83[1] = 0x40000000;
    v83[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_17;
    v83[3] = &__block_descriptor_tmp_18_0;
    v83[4] = a3;
    v82[0] = MEMORY[0x24BDAC760];
    v82[1] = 0x40000000;
    v82[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_19;
    v82[3] = &__block_descriptor_tmp_20;
    v82[4] = a3;
    v17 = v82;
    v18 = v83;
  }
  v19 = RESyncSyncableTypeInfoCreate();
  RESyncSyncableTypeInfoSetTypeId();
  re::getPrettyTypeName((re *)a3, (const re::IntrospectionBase *)buf);
  RESyncSyncableTypeInfoSetDebugName();
  v20 = *(re::NetworkSystemFeatureFlags **)buf;
  if (*(_QWORD *)buf && (buf[8] & 1) != 0)
    v20 = (re::NetworkSystemFeatureFlags *)(*(uint64_t (**)(void))(**(_QWORD **)buf + 40))();
  *a4 = v19;
  a4[1] = 0;
  v21 = (void **)(a4 + 1);
  a4[2] = 0;
  if (re::NetworkSystemFeatureFlags::enableAltSharedApp(v20))
  {
    v22 = (void **)re::snapshot::Registry::list(void)::s_head;
    if (re::snapshot::Registry::list(void)::s_head)
    {
      do
      {
        if (v22[5] == (void *)a3)
          break;
        v22 = (void **)v22[4];
      }
      while (v22);
    }
    if (a1 && (*(unsigned int (**)(const re::IntrospectionBase *))(*(_QWORD *)a1 + 8))(a1))
    {
      if (v22)
      {
        v81[0] = MEMORY[0x24BDAC760];
        v81[1] = 0x40000000;
        v81[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_21;
        v81[3] = &__block_descriptor_tmp_22;
        v81[4] = v22;
        *v21 = _Block_copy(v81);
        v80[0] = MEMORY[0x24BDAC760];
        v80[1] = 0x40000000;
        v80[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_2;
        v80[3] = &__block_descriptor_tmp_23_1;
        v80[4] = v22;
        v24 = v80;
      }
      else
      {
        v31 = (void *)*((_QWORD *)a1 + 12);
        v43 = (void *)*((_QWORD *)a1 + 13);
        if (re::ecs2::IntrospectedNetworkTypeHelper::shouldSerializeAsJson(a1, (const re::ecs2::ComponentTypeBase *)a3, v23))
        {
          v32 = re::ecs2::g_encodeComponent;
          if (v31)
            v32 = v31;
          if (v43)
            v33 = v43;
          else
            v33 = re::ecs2::g_decodeComponent;
          v79[0] = MEMORY[0x24BDAC760];
          v79[1] = 0x40000000;
          v79[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_3;
          v79[3] = &__block_descriptor_tmp_25;
          v79[4] = v32;
          v79[5] = a1;
          *v21 = _Block_copy(v79);
          v78[0] = MEMORY[0x24BDAC760];
          v78[1] = 0x40000000;
          v78[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_26;
          v78[3] = &__block_descriptor_tmp_27;
          v24 = v78;
          v78[4] = v33;
          v78[5] = a1;
        }
        else
        {
          v34 = MEMORY[0x24BDAC760];
          v77[0] = MEMORY[0x24BDAC760];
          v77[1] = 0x40000000;
          v77[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_2_28;
          v77[3] = &__block_descriptor_tmp_29;
          v77[4] = a3;
          *v21 = _Block_copy(v77);
          v76[0] = v34;
          v76[1] = 0x40000000;
          v76[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_3_30;
          v76[3] = &__block_descriptor_tmp_31;
          v76[4] = a3;
          v24 = v76;
        }
      }
      a4[2] = (uint64_t)_Block_copy(v24);
      goto LABEL_47;
    }
    if (v22)
    {
      v25 = *v22;
      v75 = MEMORY[0x24BDAC760];
      v26 = &__block_descriptor_tmp_32;
      v27 = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_4;
      v28 = &v75;
    }
    else
    {
      v29 = MEMORY[0x24BDAC760];
      v74[0] = MEMORY[0x24BDAC760];
      v74[1] = 0x40000000;
      v74[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_5;
      v74[3] = &__block_descriptor_tmp_33;
      v74[4] = a3;
      v25 = _Block_copy(v74);
      v73 = v29;
      v26 = &__block_descriptor_tmp_34;
      v28 = &v73;
      v22 = (void **)a3;
      v27 = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_6;
    }
    a4[1] = (uint64_t)v25;
    v28[1] = 0x40000000;
    v28[2] = (uint64_t)v27;
    v28[3] = (uint64_t)v26;
    v28[4] = (uint64_t)v22;
    a4[2] = (uint64_t)_Block_copy(v28);
  }
  if (!a1)
    goto LABEL_58;
LABEL_47:
  shouldSerializeAsJson = (re *)(*(uint64_t (**)(const re::IntrospectionBase *))(*(_QWORD *)a1 + 8))(a1);
  if (!(_DWORD)shouldSerializeAsJson)
  {
LABEL_58:
    if (!v15)
    {
      v70[0] = MEMORY[0x24BDAC760];
      v70[1] = 0x40000000;
      v70[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_2_54;
      v70[3] = &__block_descriptor_tmp_55;
      v70[4] = a3;
      v15 = v70;
    }
    v41 = 0;
    if (!v16)
    {
      v69[0] = MEMORY[0x24BDAC760];
      v69[1] = 0x40000000;
      v69[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_56;
      v69[3] = &__block_descriptor_tmp_57;
      v69[4] = a3;
      v16 = v69;
    }
    goto LABEL_67;
  }
  v38 = (void *)*((_QWORD *)a1 + 12);
  v37 = (void *)*((_QWORD *)a1 + 13);
  if (*((_OWORD *)a1 + 6) == 0)
  {
    shouldSerializeAsJson = (re *)re::ecs2::IntrospectedNetworkTypeHelper::shouldSerializeAsJson(a1, (const re::ecs2::ComponentTypeBase *)a3, v36);
    if (!(_DWORD)shouldSerializeAsJson)
    {
      v41 = 1;
      goto LABEL_63;
    }
    v38 = re::ecs2::g_encodeComponent;
    v37 = re::ecs2::g_decodeComponent;
  }
  if ((!v38 || v37) && (v38 || !v37))
  {
    v41 = 1;
    if (v38)
    {
      v15 = v18;
      v16 = v17;
      if (v37)
      {
        v72[0] = MEMORY[0x24BDAC760];
        v72[1] = 0x40000000;
        v72[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_5_50;
        v72[3] = &__block_descriptor_tmp_51;
        v72[4] = v38;
        v72[5] = a1;
        v71[0] = MEMORY[0x24BDAC760];
        v71[2] = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_52;
        v71[3] = &__block_descriptor_tmp_53;
        v17 = v71;
        v71[4] = v37;
        v71[5] = a1;
        v15 = v72;
        v16 = v71;
        v71[1] = 0x40000000;
      }
      goto LABEL_67;
    }
LABEL_63:
    v15 = v18;
    v16 = v17;
LABEL_67:
    v42 = MEMORY[0x24BDAC760];
    v64 = MEMORY[0x24BDAC760];
    v65 = 0x40000000;
    v66 = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_58;
    v67 = &unk_24ED67388;
    v68 = v16;
    RESyncSyncableTypeInfoSetReadSnapshotCb();
    v59 = v42;
    v60 = 0x40000000;
    v61 = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_2_60;
    v62 = &unk_24ED673B0;
    v63 = v15;
    RESyncSyncableTypeInfoSetWriteSnapshotCb();
    v49 = v42;
    v50 = 0x40000000;
    v51 = ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_3_62;
    v52 = &unk_24ED673D8;
    v58 = v41;
    v55 = a3;
    v56 = v19;
    v57 = a3;
    v53 = v17;
    v54 = v15;
    RESyncSyncableTypeInfoSetReadPayloadCb();
    v48 = v41;
    re::DynamicArray<re::Result<re::Unit,re::DynamicString> (*)(void *,void *)>::DynamicArray((uint64_t)v44, v88);
    v47 = a3;
    RESyncSyncableTypeInfoSetWritePayloadCb();
    if (v44[0])
    {
      if (v46)
        (*(void (**)(void))(*(_QWORD *)v44[0] + 40))();
      v46 = 0;
      memset(v44, 0, sizeof(v44));
      ++v45;
    }
    goto LABEL_71;
  }
  v39 = *re::ecsNetworkLogObjects(shouldSerializeAsJson);
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    v40 = *((_QWORD *)a1 + 4);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v40;
    _os_log_impl(&dword_224FE9000, v39, OS_LOG_TYPE_DEFAULT, "Custom Component %s has an encode or decode function, but not both.  This is incompatible with RESync.  Treating as opaque type.", buf, 0xCu);
  }
  RESyncSyncableTypeInfoSetReadSnapshotCb();
  RESyncSyncableTypeInfoSetWriteSnapshotCb();
  RESyncSyncableTypeInfoSetReadPayloadCb();
  RESyncSyncableTypeInfoSetWritePayloadCb();
LABEL_71:
  result = v88[0];
  if (v88[0] && v90)
    return (*(uint64_t (**)(void))(*(_QWORD *)v88[0] + 40))();
  return result;
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t SyncObjectContext;
  uint64_t v11;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x24BDAC8D0];
  v5 = RESyncBitWriterBackedRequiredSize();
  v6 = MEMORY[0x24BDAC7A8](v5);
  bzero((char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v7 = *(_DWORD *)(a2 + 8);
  v8 = RESyncBitWriterConstructBackedNoAlloc();
  v9 = RESyncSyncableTypeInfoGetWriteSnapshotCb();
  SyncObjectContext = RESyncCreateSyncObjectContext();
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 16))(v9, v8, a3, SyncObjectContext);
  *(_DWORD *)(a2 + 8) = RESyncBitWriterSize() + v7;
  RESyncDestroySyncObjectContext();
  RESyncBitWriterDestructNoDealloc();
  return v11;
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  size_t RequiredSize;
  uint64_t v8;
  uint64_t v9;
  uint64_t SnapshotCb;
  uint64_t SyncObjectContext;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x24BDAC8D0];
  RequiredSize = RESyncBitReaderGetRequiredSize();
  v8 = MEMORY[0x24BDAC7A8](RequiredSize);
  bzero((char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), RequiredSize);
  v9 = RESyncBitReaderConstructNoAlloc();
  SnapshotCb = RESyncSyncableTypeInfoGetReadSnapshotCb();
  SyncObjectContext = RESyncCreateSyncObjectContext();
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(SnapshotCb + 16))(SnapshotCb, v9, a4, SyncObjectContext);
  *(_QWORD *)(a2 + 16) += a3;
  RESyncDestroySyncObjectContext();
  RESyncBitReaderDestructNoDealloc();
  return v12;
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_7(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  re *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v17;
  char *v18;
  _anonymous_namespace_ *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t (*v23)(_anonymous_namespace_ *, void *, unsigned __int8 *);
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _BYTE buf[12];
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)buf = 0;
  v19 = (_anonymous_namespace_ *)RESyncBitWriterOpenBuffer();
  v20 = 0;
  v21 = 0;
  v22 = a2;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  re::DynamicString::setCapacity(&v24, 0);
  v28 = a5;
  v29 = a4;
  v11 = (*(uint64_t (**)(_QWORD, _anonymous_namespace_ **, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 32)
                                                                                                  + 16)
                                                                                      + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), &v19, a3, v10);
  v12 = (re *)RESyncBitWriterCloseBuffer();
  if ((v11 & 1) == 0)
  {
    v15 = *re::ecsNetworkLogObjects(v12);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v17 = *(_QWORD *)(a1 + 40);
      if ((v25 & 1) != 0)
        v18 = v26;
      else
        v18 = (char *)&v25 + 1;
      *(_DWORD *)buf = 136380931;
      *(_QWORD *)&buf[4] = v17;
      v31 = 2081;
      v32 = v18;
      _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "Failed to write OPACK payload of type %{private}s: %{private}s", buf, 0x16u);
    }
  }
  if (v24 && (v25 & 1) != 0)
    (*(void (**)(uint64_t *, char *, uint64_t, uint64_t))(*v24 + 40))(v24, v26, v13, v14);
  return v11;
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  re *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v17;
  char *v18;
  _anonymous_namespace_ *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t (*v23)(_anonymous_namespace_ *, void *, unsigned __int8 *);
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _BYTE buf[12];
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)buf = 0;
  v19 = (_anonymous_namespace_ *)RESyncBitWriterOpenBuffer();
  v20 = 0;
  v21 = 0;
  v22 = a2;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  re::DynamicString::setCapacity(&v24, 0);
  v28 = a5;
  v29 = a4;
  v11 = (*(uint64_t (**)(_QWORD, _anonymous_namespace_ **, uint64_t, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(**(_QWORD **)(a1 + 32), &v19, a3, v10);
  v12 = (re *)RESyncBitWriterCloseBuffer();
  if ((v11 & 1) == 0)
  {
    v15 = *re::ecsNetworkLogObjects(v12);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v17 = *(_QWORD *)(a1 + 40);
      if ((v25 & 1) != 0)
        v18 = v26;
      else
        v18 = (char *)&v25 + 1;
      *(_DWORD *)buf = 136380931;
      *(_QWORD *)&buf[4] = v17;
      v31 = 2081;
      v32 = v18;
      _os_log_error_impl(&dword_224FE9000, v15, OS_LOG_TYPE_ERROR, "Failed to write raw snapshot of type %{private}s: %{private}s", buf, 0x16u);
    }
  }
  if (v24 && (v25 & 1) != 0)
    (*(void (**)(uint64_t *, char *, uint64_t, uint64_t))(*v24 + 40))(v24, v26, v13, v14);
  return v11;
}

BOOL ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_17(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v10;
  re *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v16;
  char *v17;
  _anonymous_namespace_ *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t (*v22)(_anonymous_namespace_ *, void *, unsigned __int8 *);
  uint64_t *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _BYTE buf[12];
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)buf = 0;
  v18 = (_anonymous_namespace_ *)RESyncBitWriterOpenBuffer();
  v19 = 0;
  v20 = 0;
  v21 = a2;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  re::DynamicString::setCapacity(&v23, 0);
  v27 = a5;
  v28 = a4;
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::write((unsigned int *)&v18, a3, *(_QWORD *)(a1 + 32));
  if ((v24 & 1) != 0)
    v10 = v24 >> 1;
  else
    v10 = v24 >> 1;
  v11 = (re *)RESyncBitWriterCloseBuffer();
  if (v10)
  {
    v14 = *re::ecsNetworkLogObjects(v11);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
      if ((v24 & 1) != 0)
        v17 = v25;
      else
        v17 = (char *)&v24 + 1;
      *(_DWORD *)buf = 136380931;
      *(_QWORD *)&buf[4] = v16;
      v30 = 2081;
      v31 = v17;
      _os_log_error_impl(&dword_224FE9000, v14, OS_LOG_TYPE_ERROR, "Failed to write OPACK payload of type %{private}s: %{private}s", buf, 0x16u);
    }
  }
  if (v23 && (v24 & 1) != 0)
    (*(void (**)(uint64_t *, char *, uint64_t, uint64_t))(*v23 + 40))(v23, v25, v12, v13);
  return v10 == 0;
}

BOOL ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_19(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, uint64_t a6)
{
  _BOOL8 v7;
  _BOOL8 v8;
  NSObject *v9;
  uint64_t v11;
  _QWORD v12[4];
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v12[0] = a2;
  v12[1] = a3;
  v13 = -1;
  v14 = 0;
  v15 = a5;
  v16 = a6;
  v17 = 0;
  v12[2] = a2;
  v12[3] = a2 + a3;
  v7 = re::snapshot::Reader<re::snapshot::DecoderOPACK>::apply((uint64_t)v12, a4, *(_QWORD *)(a1 + 32));
  v8 = v7;
  if (!v7)
  {
    v9 = *re::ecsNetworkLogObjects((re *)v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
      *(_DWORD *)buf = 136380675;
      v19 = v11;
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Failed to read OPACK payload of type %{private}s", buf, 0xCu);
    }
  }
  return v8;
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_21(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 16))();
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_2(uint64_t a1, __int128 *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  __int128 v15;
  uint64_t v16;

  v8 = *a2;
  v9 = re::Slice<unsigned char>::range(&v8, *((_QWORD *)a2 + 2) - v8, *((_QWORD *)a2 + 2) - v8 + a3);
  v10 = v6;
  v13 = -1;
  v14 = 0;
  v15 = *(__int128 *)((char *)a2 + 40);
  v16 = 0;
  v11 = v9;
  v12 = v9 + v6;
  result = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) + 16))();
  *((_QWORD *)a2 + 2) += a3;
  return result;
}

BOOL ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re *Length;
  re *v6;
  size_t v7;
  UInt8 *BytePtr;
  unint64_t v9;
  unint64_t v10;
  NSObject *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  Length = (re *)(*(uint64_t (**)(uint64_t, _QWORD, const char *))(a1 + 32))(a3, *(_QWORD *)(a1 + 40), "json");
  v6 = Length;
  if (!Length || (Length = (re *)CFDataGetLength(Length)) == 0)
  {
    v12 = *re::ecsNetworkLogObjects(Length);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32);
      v14 = 136380675;
      v15 = v13;
      _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "Failed to encode custom component of type %{private}s.", (uint8_t *)&v14, 0xCu);
      if (!v6)
        return 0;
    }
    else if (!v6)
    {
      return 0;
    }
    CFRelease(v6);
    return 0;
  }
  v7 = (size_t)Length;
  BytePtr = (UInt8 *)CFDataGetBytePtr(v6);
  re::snapshot::Encoder::writeRaw<true>((unsigned int *)a2, BytePtr, v7);
  CFRelease(v6);
  v9 = *(_QWORD *)(a2 + 40);
  if ((v9 & 1) != 0)
    v10 = v9 >> 1;
  else
    v10 = v9 >> 1;
  return v10 == 0;
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_26(uint64_t a1, uint64_t a2, CFIndex length, uint64_t a4)
{
  unsigned int v5;
  CFDataRef v8;
  uint64_t v9;

  v5 = length;
  v8 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], *(const UInt8 **)(a2 + 16), length, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, CFDataRef, const char *))(a1 + 32))(a4, *(_QWORD *)(a1 + 40), v8, "json");
  CFRelease(v8);
  *(_QWORD *)(a2 + 16) += v5;
  return v9;
}

BOOL ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_2_28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;

  re::snapshot::Writer<re::snapshot::EncoderOPACK>::write((unsigned int *)a2, a3, *(_QWORD *)(a1 + 32));
  v4 = *(_QWORD *)(a2 + 40);
  if ((v4 & 1) != 0)
    v5 = v4 >> 1;
  else
    v5 = v4 >> 1;
  return v5 == 0;
}

BOOL ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_3_30(uint64_t a1, __int128 *a2, unsigned int a3, float *a4)
{
  uint64_t v8;
  _BOOL8 result;
  __int128 v10;
  _QWORD v11[4];
  int v12;
  char v13;
  __int128 v14;
  uint64_t v15;

  v10 = *a2;
  v11[0] = re::Slice<unsigned char>::range(&v10, *((_QWORD *)a2 + 2) - v10, *((_QWORD *)a2 + 2) - v10 + a3);
  v11[1] = v8;
  v12 = -1;
  v13 = 0;
  v14 = *(__int128 *)((char *)a2 + 40);
  v15 = 0;
  v11[2] = v11[0];
  v11[3] = v11[0] + v8;
  result = re::snapshot::Reader<re::snapshot::DecoderOPACK>::apply((uint64_t)v11, a4, *(_QWORD *)(a1 + 32));
  *((_QWORD *)a2 + 2) += a3;
  return result;
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_4(uint64_t a1, __int128 *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t result;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  __int128 v15;
  uint64_t v16;

  v8 = *a2;
  v9 = re::Slice<unsigned char>::range(&v8, *((_QWORD *)a2 + 2) - v8, *((_QWORD *)a2 + 2) - v8 + a3);
  v10 = v6;
  v13 = -1;
  v14 = 0;
  v15 = *(__int128 *)((char *)a2 + 40);
  v16 = 0;
  v11 = v9;
  v12 = v9 + v6;
  result = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 16))();
  *((_QWORD *)a2 + 2) += a3;
  return result;
}

BOOL ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;

  re::snapshot::Writer<re::snapshot::EncoderRaw>::write((unsigned int *)a2, a3, *(_QWORD *)(a1 + 32));
  v4 = *(_QWORD *)(a2 + 40);
  if ((v4 & 1) != 0)
    v5 = v4 >> 1;
  else
    v5 = v4 >> 1;
  return v5 == 0;
}

BOOL ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_6(uint64_t a1, __int128 *a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v8;
  _BOOL8 result;
  __int128 v10;
  _QWORD v11[4];
  int v12;
  char v13;
  __int128 v14;
  uint64_t v15;

  v10 = *a2;
  v11[0] = re::Slice<unsigned char>::range(&v10, *((_QWORD *)a2 + 2) - v10, *((_QWORD *)a2 + 2) - v10 + a3);
  v11[1] = v8;
  v12 = -1;
  v13 = 0;
  v14 = *(__int128 *)((char *)a2 + 40);
  v15 = 0;
  v11[2] = v11[0];
  v11[3] = v11[0] + v8;
  result = re::snapshot::Reader<re::snapshot::DecoderRaw>::apply((uint64_t)v11, a4, *(_QWORD *)(a1 + 32));
  *((_QWORD *)a2 + 2) += a3;
  return result;
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_35()
{
  return 0;
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_2_38()
{
  return 0;
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_3_42(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = RESyncBitReaderDataPtr();
  v5 = RESyncBitReaderBytesLeft();
  MEMORY[0x227691F24](a3, v4, v5);
  RESyncBitReaderBytesLeft();
  RESyncBitReaderSkipData();
  return RESyncBitWriterIsOverflow() ^ 1;
}

void ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_4_46()
{
  RESyncBitReaderDataPtr();
  RESyncBitReaderBytesLeft();
  JUMPOUT(0x227691F24);
}

BOOL ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_5_50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re *Length;
  re *v6;
  re *v7;
  const UInt8 *BytePtr;
  re *IsOverflow;
  NSObject *v10;
  _BOOL8 result;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  Length = (re *)(*(uint64_t (**)(uint64_t, _QWORD, const char *))(a1 + 32))(a3, *(_QWORD *)(a1 + 40), "json");
  v6 = Length;
  if (!Length || (Length = (re *)CFDataGetLength(Length)) == 0)
  {
    v13 = *re::ecsNetworkLogObjects(Length);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32);
      v15 = 136380675;
      v16 = v14;
      _os_log_error_impl(&dword_224FE9000, v13, OS_LOG_TYPE_ERROR, "Failed to encode custom component of type %{private}s.", (uint8_t *)&v15, 0xCu);
      if (!v6)
        return 0;
    }
    else if (!v6)
    {
      return 0;
    }
    CFRelease(v6);
    return 0;
  }
  v7 = Length;
  BytePtr = CFDataGetBytePtr(v6);
  MEMORY[0x227691F24](a2, BytePtr, v7);
  CFRelease(v6);
  IsOverflow = (re *)RESyncBitWriterIsOverflow();
  if (!(_DWORD)IsOverflow)
    return 1;
  v10 = *re::ecsNetworkLogObjects(IsOverflow);
  result = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  if (result)
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32);
    v15 = 136380675;
    v16 = v12;
    _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, "Failed to write data payload of type %{private}s", (uint8_t *)&v15, 0xCu);
    return 0;
  }
  return result;
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_52(uint64_t a1, const UInt8 *a2, CFIndex a3, uint64_t a4)
{
  CFDataRef v6;
  uint64_t v7;

  v6 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x24BDBD240], a2, a3, (CFAllocatorRef)*MEMORY[0x24BDBD258]);
  v7 = (*(uint64_t (**)(uint64_t, _QWORD, CFDataRef, const char *))(a1 + 32))(a4, *(_QWORD *)(a1 + 40), v6, "json");
  CFRelease(v6);
  return v7;
}

BOOL ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_2_54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unint64_t v10;
  re *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v16;
  char *v17;
  _anonymous_namespace_ *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t (*v22)(_anonymous_namespace_ *, void *, unsigned __int8 *);
  uint64_t *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  _BYTE buf[12];
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)buf = 0;
  v18 = (_anonymous_namespace_ *)RESyncBitWriterOpenBuffer();
  v19 = 0;
  v20 = 0;
  v21 = a2;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  re::DynamicString::setCapacity(&v23, 0);
  v27 = a5;
  v28 = a4;
  re::snapshot::Writer<re::snapshot::EncoderRaw>::write((unsigned int *)&v18, a3, *(_QWORD *)(a1 + 32));
  if ((v24 & 1) != 0)
    v10 = v24 >> 1;
  else
    v10 = v24 >> 1;
  v11 = (re *)RESyncBitWriterCloseBuffer();
  if (v10)
  {
    v14 = *re::ecsNetworkLogObjects(v11);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
      if ((v24 & 1) != 0)
        v17 = v25;
      else
        v17 = (char *)&v24 + 1;
      *(_DWORD *)buf = 136380931;
      *(_QWORD *)&buf[4] = v16;
      v30 = 2081;
      v31 = v17;
      _os_log_error_impl(&dword_224FE9000, v14, OS_LOG_TYPE_ERROR, "Failed to write raw snapshot of type %{private}s: %{private}s", buf, 0x16u);
    }
  }
  if (v23 && (v24 & 1) != 0)
    (*(void (**)(uint64_t *, char *, uint64_t, uint64_t))(*v23 + 40))(v23, v25, v12, v13);
  return v10 == 0;
}

BOOL ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_56(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  _BOOL8 v7;
  _BOOL8 v8;
  NSObject *v9;
  uint64_t v11;
  _QWORD v12[4];
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v12[0] = a2;
  v12[1] = a3;
  v13 = -1;
  v14 = 0;
  v15 = a5;
  v16 = a6;
  v17 = 0;
  v12[2] = a2;
  v12[3] = a2 + a3;
  v7 = re::snapshot::Reader<re::snapshot::DecoderRaw>::apply((uint64_t)v12, a4, *(_QWORD *)(a1 + 32));
  v8 = v7;
  if (!v7)
  {
    v9 = *re::ecsNetworkLogObjects((re *)v7);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
      *(_DWORD *)buf = 136380675;
      v19 = v11;
      _os_log_error_impl(&dword_224FE9000, v9, OS_LOG_TYPE_ERROR, "Failed to read raw snapshot of type %{private}s", buf, 0xCu);
    }
  }
  return v8;
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t SyncObjectContextEntry;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _anonymous_namespace_ *v9;

  SyncObjectContextEntry = RESyncGetSyncObjectContextEntry();
  v6 = *(_QWORD *)(a1 + 32);
  v7 = RESyncBitReaderDataPtr();
  v8 = RESyncBitReaderSize();
  v9 = (_anonymous_namespace_ *)RESyncBitReaderSkipData();
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_2_60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = RESyncGetSyncObjectContextEntry() + 456;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, a3, v6, 6);
}

uint64_t ___ZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseE_block_invoke_3_62(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int ContextSupportsProtocolLevelWalnut;
  uint64_t v6;
  uint64_t v7;
  uint64_t IsLocalSession;
  re::IntrospectionBase *v10;
  uint64_t v11;
  _QWORD *v12;
  re *v13;
  NSObject *v14;
  uint64_t DebugName;
  uint64_t *v16;
  uint64_t *v17;
  int v18;
  _QWORD *v19;
  re *ContextEntry;
  re *v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE v27[24];
  uint64_t v28;
  char v29;
  _BYTE v30[23];
  _QWORD v31[3];
  _BYTE v32[8];
  uint64_t v33;
  _BYTE v34[39];
  char v35;
  _QWORD v36[3];
  _QWORD v37[4];
  uint64_t v38;
  uint8_t v39[4];
  uint64_t v40;
  __int16 v41;
  _BYTE *v42;
  _BYTE buf[12];
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[8];

  v51[5] = *MEMORY[0x24BDAC8D0];
  ContextSupportsProtocolLevelWalnut = RESyncObjectReadContextSupportsProtocolLevelWalnut();
  v38 = RESyncBitReaderBytesLeft();
  if ((ContextSupportsProtocolLevelWalnut & 1) == 0)
    RESyncBiasedVLQRead();
  v6 = RESyncBitReaderDataPtr();
  RESyncBitReaderSkipData();
  if ((RESyncBitReaderIsOverflow() & 1) == 0)
  {
    IsLocalSession = RESyncObjectReadContextIsLocalSession();
    if ((IsLocalSession & 1) != 0 || *(_BYTE *)(a1 + 72))
    {
      MEMORY[0x227691F24](a3, v6, v38);
      return 1;
    }
    memset(&v37[1], 0, 24);
    v36[0] = &re::PassthroughAssetSerialization::instance(void)::instance;
    v36[1] = v37;
    v36[2] = 0;
    v11 = *(_QWORD *)(a1 + 48);
    v12 = operator new(0x20uLL);
    *v12 = &off_24ED67440;
    v12[1] = v11;
    v12[2] = v36;
    v51[0] = (uint64_t)v10;
    v51[4] = (uint64_t)v12;
    if (ContextSupportsProtocolLevelWalnut)
    {
      v13 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      if ((v13 & 1) == 0)
      {
        v14 = *re::ecsNetworkLogObjects(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          DebugName = RESyncSyncableTypeInfoGetDebugName();
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = DebugName;
          _os_log_error_impl(&dword_224FE9000, v14, OS_LOG_TYPE_ERROR, "Failed to deserialize OPACK payload of type \"%s\".", buf, 0xCu);
        }
        goto LABEL_24;
      }
    }
    else if (RESyncObjectReadContextSupportsProtocolLevelAlmond())
    {
      re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v35);
      re::TypeInfo::TypeInfo((uint64_t)v34, (uint64_t)&buf[8]);
      v16 = re::TypeInfo::name((re::TypeInfo *)v34);
      if (v32[0])
      {
        v18 = v38;
        v19[1] = 0;
        v19[2] = 0;
        *v19 = 0;
        *(_WORD *)&buf[8] = 256;
        *(_QWORD *)buf = &off_24ED7C2E0;
        v44 = v19;
        v45 = &unk_24ED1E828;
        v46 = v6;
        v47 = v18;
        v48 = v18;
        v49 = 0;
        v50 = v18;
        v31[0] = &off_24ED2D1C0;
        v31[1] = RESyncGetSyncObjectReadContextEntry();
        v31[2] = 0;
        ContextEntry = (re *)RESyncGetSyncObjectReadContextEntry();
        *((_QWORD *)ContextEntry + 55) = v31;
        v21 = (re *)re::deserializeObject(ContextEntry, (re::NetworkCompatDeserializer *)buf, v10, v34, (const re::TypeInfo *)&v33, (uint64_t)v27);
        if (v27[0])
        {
          re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)buf);
          re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v35);
          goto LABEL_17;
        }
        v24 = *re::ecsNetworkLogObjects(v21);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          v25 = re::TypeInfo::name((re::TypeInfo *)v34)[1];
          if ((v29 & 1) != 0)
            v26 = *(_BYTE **)&v30[7];
          else
            v26 = v30;
          *(_DWORD *)v39 = 136380931;
          v40 = v25;
          v41 = 2080;
          v42 = v26;
          _os_log_error_impl(&dword_224FE9000, v24, OS_LOG_TYPE_ERROR, "Failed to deserialize payload of type \"%{private}s\". Details: %s", v39, 0x16u);
        }
        if (!v27[0] && v28 && (v29 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v28 + 40))();
        re::internal::MemoryInputStream<re::FixedArray<char>>::~MemoryInputStream((uint64_t)buf);
      }
      else
      {
        v22 = *re::ecsNetworkLogObjects((re *)v17);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          v23 = re::TypeInfo::name((re::TypeInfo *)v34)[1];
          *(_DWORD *)buf = 136380675;
          *(_QWORD *)&buf[4] = v23;
          _os_log_error_impl(&dword_224FE9000, v22, OS_LOG_TYPE_ERROR, "Failed to read payload in backward compatible format. Type \"%{private}s\" does not exist in previous RealityKit version.", buf, 0xCu);
        }
      }
      re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v35);
LABEL_24:
      v7 = 0;
      goto LABEL_25;
    }
LABEL_17:
    v7 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
LABEL_25:
    std::unique_ptr<re::RigHierarchy,std::function<void ()(re::RigHierarchy*)>>::~unique_ptr[abi:nn180100](v51);
    return v7;
  }
  return 0;
}

uint64_t __copy_helper_block_8_64c74_ZTSN2re12DynamicArrayIPFNS_6ResultINS_4UnitENS_13DynamicStringEEEPvS5_EEE(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::Result<re::Unit,re::DynamicString> (*)(void *,void *)>::DynamicArray(a1 + 64, (uint64_t *)(a2 + 64));
}

uint64_t __destroy_helper_block_8_64c74_ZTSN2re12DynamicArrayIPFNS_6ResultINS_4UnitENS_13DynamicStringEEEPvS5_EEE(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;

  v3 = (_QWORD *)(a1 + 64);
  result = *(_QWORD *)(a1 + 64);
  if (result)
  {
    if (*(_QWORD *)(a1 + 96))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 96) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*(_DWORD *)(a1 + 88);
  }
  return result;
}

const char **re::ecs2::IntrospectedNetworkTypeHelper::shouldSerializeAsJson(re::ecs2::ComponentTypeBase const&,re::IntrospectionBase const&)::$_0::__invoke(uint64_t a1)
{
  uint64_t v1;
  const char ***i;
  const char **v3;

  if (*(_DWORD *)(a1 + 16) != 8)
    return 0;
  v1 = *(unsigned int *)(a1 + 56);
  if (!(_DWORD)v1)
    return 0;
  for (i = *(const char ****)(a1 + 64); ; ++i)
  {
    v3 = *i;
    if (*(_DWORD *)*i == 1)
      break;
    if (!--v1)
      return 0;
  }
  if (*((_DWORD *)v3 + 10) || strcmp("__JSON__", v3[1]))
    return 0;
  return v3;
}

uint64_t _ZZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseEEUb_EN3__18__invokeEPvPhjPj(re::snapshot::Encoder *this, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  re *v11;
  NSObject *v12;
  uint8_t v13[16];

  v6 = *((unsigned int *)this + 2);
  v7 = *((unsigned int *)this + 3);
  v8 = v6 + *a4;
  if (v8 <= v7)
    goto LABEL_2;
  v11 = (re *)re::snapshot::Encoder::grow(this, v8);
  if ((_DWORD)v11)
  {
    LODWORD(v6) = *((_DWORD *)this + 2);
    LODWORD(v7) = *((_DWORD *)this + 3);
LABEL_2:
    v9 = *(_QWORD *)this;
    *a4 = v7 - v6;
    return v9 + *((unsigned int *)this + 2);
  }
  v12 = *re::ecsNetworkLogObjects(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)v13 = 0;
    _os_log_error_impl(&dword_224FE9000, v12, OS_LOG_TYPE_ERROR, "[NetworkSystem] failed to grow snapshot buffer for BitWriter.", v13, 2u);
  }
  return 0;
}

uint64_t `anonymous namespace'::bitWriterGrowFn(_anonymous_namespace_ *this, void *a2, unsigned __int8 *a3)
{
  return RESyncBitWriterGrowBuffer();
}

void _ZNSt3__110__function6__funcIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS2_17IntrospectionBaseEPKNS3_17ComponentTypeBaseEEUb0_E3__2NS_9allocatorISB_EEFvPvEED0Ev()
{
  JUMPOUT(0x2276933B8);
}

__n128 _ZNKSt3__110__function6__funcIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS2_17IntrospectionBaseEPKNS3_17ComponentTypeBaseEEUb0_E3__2NS_9allocatorISB_EEFvPvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24ED67440;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS2_17IntrospectionBaseEPKNS3_17ComponentTypeBaseEEUb0_E3__2NS_9allocatorISB_EEFvPvEE7__cloneEPNS0_6__baseISF_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED67440;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS2_17IntrospectionBaseEPKNS3_17ComponentTypeBaseEEUb0_E3__2NS_9allocatorISB_EEFvPvEEclEOSE_(uint64_t *a1, uint64_t **a2)
{
  re::introspectionReleasePointer(*a2, a1[3], a1[2], a1[1]);
}

uint64_t _ZNKSt3__110__function6__funcIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS2_17IntrospectionBaseEPKNS3_17ComponentTypeBaseEEUb0_E3__2NS_9allocatorISB_EEFvPvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseEEUb0_E3__2))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS2_17IntrospectionBaseEPKNS3_17ComponentTypeBaseEEUb0_E3__2NS_9allocatorISB_EEFvPvEE11target_typeEv()
{
  return &_ZTIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseEEUb0_E3__2;
}

void _ZNSt3__110__function6__funcIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS2_17IntrospectionBaseEPKNS3_17ComponentTypeBaseEEUb1_E3__3NS_9allocatorISB_EEFvPvEED0Ev()
{
  JUMPOUT(0x2276933B8);
}

__n128 _ZNKSt3__110__function6__funcIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS2_17IntrospectionBaseEPKNS3_17ComponentTypeBaseEEUb1_E3__3NS_9allocatorISB_EEFvPvEE7__cloneEv(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24ED674C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS2_17IntrospectionBaseEPKNS3_17ComponentTypeBaseEEUb1_E3__3NS_9allocatorISB_EEFvPvEE7__cloneEPNS0_6__baseISF_EE(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24ED674C0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS2_17IntrospectionBaseEPKNS3_17ComponentTypeBaseEEUb1_E3__3NS_9allocatorISB_EEFvPvEEclEOSE_(uint64_t *a1, uint64_t **a2)
{
  re::introspectionReleasePointer(*a2, a1[3], a1[2], a1[1]);
}

uint64_t _ZNKSt3__110__function6__funcIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS2_17IntrospectionBaseEPKNS3_17ComponentTypeBaseEEUb1_E3__3NS_9allocatorISB_EEFvPvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseEEUb1_E3__3))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS2_17IntrospectionBaseEPKNS3_17ComponentTypeBaseEEUb1_E3__3NS_9allocatorISB_EEFvPvEE11target_typeEv()
{
  return &_ZTIZZN2re4ecs229IntrospectedNetworkTypeHelper12makeTypeInfoEyRKNS_17IntrospectionBaseEPKNS0_17ComponentTypeBaseEEUb1_E3__3;
}

uint64_t re::DynamicArray<re::Result<re::Unit,re::DynamicString> (*)(void *,void *)>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<float *>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    v6 = a2[2];
    if (v6 >= *(_QWORD *)(a1 + 16))
    {
      re::DynamicArray<float *>::setCapacity((_QWORD *)a1, a2[2]);
      v7 = *(_QWORD *)(a1 + 16);
      if (v7)
      {
        memmove(*(void **)(a1 + 32), (const void *)a2[4], 8 * v7);
        v7 = *(_QWORD *)(a1 + 16);
      }
      memcpy((void *)(*(_QWORD *)(a1 + 32) + 8 * v7), (const void *)(a2[4] + 8 * v7), 8 * v6 - 8 * v7);
    }
    else if (v6)
    {
      memmove(*(void **)(a1 + 32), (const void *)a2[4], 8 * v6);
    }
    *(_QWORD *)(a1 + 16) = v6;
  }
  return a1;
}

void re::ecs2::ImageBasedLightReceiverManager::updateIBLData(re::ecs2::ImageBasedLightReceiverManager *this, const re::ecs2::Scene *a2, re::RenderManager *a3)
{
  unsigned __int8 *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  re *v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  __int128 v21;
  int32x4_t v22;
  float32x4_t v23;
  int32x2_t v24;
  float32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  __int128 v28;
  float32x4_t v29;
  float32x4_t v30;
  uint32x4_t v31;
  NSObject *v32;
  uint64_t v33;
  unint64_t v34;
  __int128 v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  id v41;
  id v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void **v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void **v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v72;
  uint64_t *v73;
  _QWORD v74[4];
  _QWORD v75[4];
  _QWORD v76[4];
  _QWORD v77[4];
  _QWORD v78[4];
  _QWORD v79[4];
  _QWORD v80[4];
  _QWORD v81[4];
  _QWORD v82[2];
  uint64_t v83;
  _QWORD v84[4];
  __int128 v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  void (**v91)(_QWORD);
  uint64_t v92;
  __int32 v93;
  uint64_t v94;
  int v95;
  float v96;
  int v97;
  __int128 v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  __int128 v114;
  _OWORD v115[3];
  int32x4_t buf[3];
  uint64_t v117;

  v117 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned __int8 *)*((_QWORD *)a3 + 19);
  if (v4)
    v72 = *v4;
  else
    v72 = 0;
  v5 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
       + 8);
  if (*((_QWORD *)a2 + 28) > v5)
  {
    v6 = *(_QWORD *)(*((_QWORD *)a2 + 30) + 8 * v5);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 24);
      if (v7)
      {
        v8 = *(uint64_t **)(v6 + 40);
        v73 = &v8[v7];
        v69 = 1065353216;
        v68 = 0x3F80000000000000;
        while (1)
        {
          v9 = *v8;
          if (*(_QWORD *)(*v8 + 1304))
            break;
LABEL_36:
          if (++v8 == v73)
            goto LABEL_37;
        }
        if (!*(_BYTE *)(v9 + 152))
        {
          re::MaterialParameterBlock::MaterialParameterBlock((re::MaterialParameterBlock *)&v85, a3);
          LOBYTE(v90) = 1;
          re::MaterialParameterBlock::MaterialParameterBlock((re::MaterialParameterBlock *)&v91, (const re::MaterialParameterBlock *)&v85);
          re::Optional<re::MaterialParameterBlock>::operator=((unsigned __int8 *)(v9 + 152), (unsigned __int8 *)&v90);
          if ((_BYTE)v90)
            (*v91)(&v91);
          re::MaterialParameterBlock::~MaterialParameterBlock((re::MaterialParameterBlock *)&v85);
        }
        v96 = exp2f(*(float *)(v9 + 28));
        if (*(_BYTE *)(v9 + 1208))
        {
          re::ecs2::TransformComponent::worldMatrix4x4F(*(re::ecs2::TransformComponent ***)(v9 + 16), (const re::ecs2::Entity *)1, &v85);
          buf[0] = 0u;
          v115[0] = xmmword_2260E5D70;
          v114 = 0u;
          v10 = (re *)re::decomposeScaleRotationTranslation<float>((uint64_t)&v85, buf, v115, &v114);
          v11 = 0;
          LODWORD(v21) = v115[0];
          v12 = *((float *)v115 + 2);
          v13 = v12 + v12;
          v14 = *(float *)&v21 * (float)(*(float *)&v21 + *(float *)&v21);
          v15 = *((float *)v115 + 1) * (float)(*((float *)v115 + 1) + *((float *)v115 + 1));
          v16 = v12 * (float)(v12 + v12);
          v17 = (float)(*(float *)&v21 + *(float *)&v21) * *((float *)v115 + 1);
          v18 = (float)(*(float *)&v21 + *(float *)&v21) * *((float *)v115 + 2);
          v19 = (float)(*((float *)v115 + 1) + *((float *)v115 + 1)) * *((float *)v115 + 2);
          v20 = (float)(*(float *)&v21 + *(float *)&v21) * *((float *)v115 + 3);
          v25.f32[0] = (float)(*((float *)v115 + 1) + *((float *)v115 + 1)) * *((float *)v115 + 3);
          *(float *)&v21 = 1.0 - (float)(v15 + v16);
          v23 = (float32x4_t)v21;
          v23.f32[1] = v17 + (float)(v13 * *((float *)v115 + 3));
          *(float *)&v28 = v18 - v25.f32[0];
          v29.f32[0] = v17 - (float)(v13 * *((float *)v115 + 3));
          v25.f32[0] = v18 + v25.f32[0];
          *((float *)&v21 + 1) = v29.f32[0];
          DWORD2(v21) = v25.i32[0];
          v25.f32[1] = v19 - v20;
          v22 = vzip1q_s32((int32x4_t)v23, (int32x4_t)v25);
          v23.i32[2] = v28;
          *(float *)v24.i32 = 1.0 - (float)(v14 + v16);
          v25.f32[2] = 1.0 - (float)(v14 + v15);
          *(float *)v26.i32 = v19 + v20;
          v27 = vzip2q_s32(v22, vdupq_lane_s32(v24, 0));
          DWORD1(v28) = v26.i32[0];
          DWORD2(v28) = v25.i32[2];
          v115[0] = vzip1q_s32(v22, (int32x4_t)v29);
          v115[1] = v27;
          v115[2] = vzip1q_s32(vzip2q_s32((int32x4_t)v23, (int32x4_t)v25), v26);
          v29.i32[1] = v24.i32[0];
          v29.i32[2] = v26.i32[0];
          do
          {
            buf[v11] = (int32x4_t)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, COERCE_FLOAT(v115[v11])), v29, *(float32x2_t *)&v115[v11], 1), v25, (float32x4_t)v115[v11], 2);
            ++v11;
          }
          while (v11 != 3);
          v30 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
          v31 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v30, vabdq_f32((float32x4_t)xmmword_2260E5F20, (float32x4_t)buf[1])), (int8x16_t)vcgeq_f32(v30, vabdq_f32((float32x4_t)xmmword_2260E5F10, (float32x4_t)buf[0]))), (int8x16_t)vcgeq_f32(v30, vabdq_f32((float32x4_t)xmmword_2260E5F40, (float32x4_t)buf[2])));
          v31.i32[3] = v31.i32[2];
          if ((vminvq_u32(v31) & 0x80000000) == 0)
          {
            v32 = *re::ecsComponentsLogObjects(v10);
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
            {
              v33 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 280);
              buf[0].i32[0] = 136315138;
              *(uint64_t *)((char *)buf[0].i64 + 4) = v33;
              _os_log_impl(&dword_224FE9000, v32, OS_LOG_TYPE_DEFAULT, "The world transform of the entity [%s] includes non-uniform scaling.                                     Set the rotation of its IBL component to identity.", (uint8_t *)buf, 0xCu);
            }
            v27 = (int32x4_t)xmmword_2260E5F20;
            v21 = xmmword_2260E5F10;
            v28 = xmmword_2260E5F40;
          }
          LODWORD(v91) = DWORD2(v21);
          v93 = v27.i32[2];
          v90 = v21;
          v92 = v27.i64[0];
          v95 = DWORD2(v28);
          v94 = v28;
        }
        else
        {
          LODWORD(v91) = 0;
          v90 = v69;
          v93 = 0;
          v92 = v68;
          v95 = 1065353216;
          v94 = 0;
        }
        v97 = *(_DWORD *)(v9 + 1200);
        v34 = *(unsigned int *)(v9 + 1288) | ((unint64_t)*(unsigned __int8 *)(v9 + 1296) << 32);
        *(_QWORD *)&v85 = *(_QWORD *)(v9 + 1280);
        *((_QWORD *)&v85 + 1) = v34;
        *(_QWORD *)&v35 = re::ColorGamut3F::as((uint64_t *)&v85, v72, 1);
        DWORD2(v35) = v36;
        v98 = v35;
        re::ColorManager::computeWPCMatrix((float32x4_t *)(*((_QWORD *)a3 + 14) + 2032), *((_QWORD *)a3 + 11), (uint64_t)&v85);
        v100 = DWORD2(v85);
        v102 = v87;
        v99 = v85;
        v101 = v86;
        v104 = v89;
        v103 = v88;
        v105 = *(_DWORD *)(v9 + 1204);
        if (*(_BYTE *)(v9 + 1209))
        {
          v38 = *(_OWORD *)(v9 + 1216);
          v37 = *(_OWORD *)(v9 + 1232);
          v39 = *(_OWORD *)(v9 + 1248);
        }
        else
        {
          v37 = xmmword_2261272B0;
          v39 = unk_2261272C0;
          v38 = _PromotedConst;
        }
        v107 = DWORD2(v38);
        v109 = DWORD2(v37);
        v106 = v38;
        v108 = v37;
        v111 = DWORD2(v39);
        v110 = v39;
        if (*(_BYTE *)(v9 + 136))
        {
          v112 = *(_DWORD *)(v9 + 140);
          if (*(_BYTE *)(v9 + 137))
          {
            v40 = *(_DWORD *)(v9 + 144);
LABEL_30:
            v113 = v40;
            v41 = objc_msgSend(*((id *)a3 + 23), sel_newBufferWithBytes_length_options_, &v90, 208, 0, v68, v69);
            v42 = v41;
            v43 = (_QWORD)objc_msgSend(v41, sel_length) << 32;
            v83 = 0x262DF9A294ABAC1CLL;
            v44 = v42;
            v82[0] = v44;
            v82[1] = v43;
            re::MaterialParameterBlock::setBuffer((re::MaterialParameterBlock *)(v9 + 160), &v83, (uint64_t)v82, (uint64_t)v84);
            v84[0] = 0;
            if (v44)
            {

              v82[0] = 0;
            }
            v83 = 0;
            if (v42)

            if (v41)
            goto LABEL_36;
          }
        }
        else
        {
          v112 = 0;
        }
        v40 = 0;
        goto LABEL_30;
      }
    }
  }
LABEL_37:
  LODWORD(v45) = 0x7FFFFFFF;
  if (*((_QWORD *)this + 7))
  {
    v46 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                            * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
    v47 = *(unsigned int *)(*((_QWORD *)this + 8) + 4 * ((v46 ^ (v46 >> 31)) % *((unsigned int *)this + 20)));
    if ((_DWORD)v47 != 0x7FFFFFFF)
    {
      v48 = *((_QWORD *)this + 9);
      if (*(const re::ecs2::Scene **)(v48 + 80 * v47 + 16) == a2)
      {
        LODWORD(v45) = v47;
      }
      else
      {
        v45 = v47;
        while (1)
        {
          LODWORD(v45) = *(_DWORD *)(v48 + 80 * v45 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v45 == 0x7FFFFFFF)
            break;
          if (*(const re::ecs2::Scene **)(v48 + 80 * v45 + 16) == a2)
            goto LABEL_46;
        }
        LODWORD(v45) = 0x7FFFFFFF;
      }
    }
  }
LABEL_46:
  v49 = *((_QWORD *)this + 9) + 80 * v45;
  v51 = *(_QWORD *)(v49 + 64);
  v50 = (unint64_t *)(v49 + 64);
  if (v51)
  {
    v52 = 0;
    do
    {
      v53 = *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)(v50 - 5), v52);
      v54 = (unsigned __int8 *)(v53 + 152);
      if (!*v54)
      {
        re::MaterialParameterBlock::MaterialParameterBlock((re::MaterialParameterBlock *)&v85, a3);
        LOBYTE(v90) = 1;
        re::MaterialParameterBlock::MaterialParameterBlock((re::MaterialParameterBlock *)&v91, (const re::MaterialParameterBlock *)&v85);
        re::Optional<re::MaterialParameterBlock>::operator=(v54, (unsigned __int8 *)&v90);
        if ((_BYTE)v90)
          (*v91)(&v91);
        re::MaterialParameterBlock::~MaterialParameterBlock((re::MaterialParameterBlock *)&v85);
      }
      if (*(_QWORD *)(v53 + 96))
      {
        v55 = re::AssetHandle::loadedAsset<re::ImageBasedLightAsset>((re::ImageBasedLightAsset *)(v53 + 88));
        if (!v55)
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)(v53 + 88));
          v61 = 1;
          goto LABEL_58;
        }
        v56 = v55;
        v57 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)(v55 + 24));
        v58 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)(v56 + 48));
        v91 = 0;
        v90 = 0;
        v85 = 0uLL;
        re::TextureHandle::operator=((re::TextureHandle *)&v90, (re::TextureHandle *)(v57 + 48));
        re::TextureHandle::operator=((re::TextureHandle *)&v85, (re::TextureHandle *)(v58 + 48));
        re::MaterialParameterBlock::setTextureHandle((re::MaterialParameterBlock *)(v53 + 160), "texturePrefilteredDiffuse", (const re::TextureHandle *)&v90, (uint64_t)v81);
        v81[0] = 0;
        re::MaterialParameterBlock::setTextureHandle((re::MaterialParameterBlock *)(v53 + 160), "texturePrefilteredSpecular", (const re::TextureHandle *)&v85, (uint64_t)v80);
        v80[0] = 0;
      }
      else
      {
        v59 = *((_QWORD *)a3 + 8);
        v60 = (void **)(v59 + 88);
        v91 = 0;
        v90 = 0;
        re::TextureManager::registerTexture((os_unfair_lock_s *)v59, (void **)(v59 + 88), (os_unfair_lock_s **)&v85);
        re::TextureHandle::operator=((re::TextureHandle *)&v90, (re::TextureHandle *)&v85);
        re::TextureHandle::invalidate((re::TextureHandle *)&v85);
        v85 = 0uLL;
        re::TextureManager::registerTexture(*((os_unfair_lock_s **)a3 + 8), v60, (os_unfair_lock_s **)buf);
        re::TextureHandle::operator=((re::TextureHandle *)&v85, (re::TextureHandle *)buf);
        re::TextureHandle::invalidate((re::TextureHandle *)buf);
        re::MaterialParameterBlock::setTextureHandle((re::MaterialParameterBlock *)(v53 + 160), "texturePrefilteredDiffuse", (const re::TextureHandle *)&v90, (uint64_t)v79);
        v79[0] = 0;
        re::MaterialParameterBlock::setTextureHandle((re::MaterialParameterBlock *)(v53 + 160), "texturePrefilteredSpecular", (const re::TextureHandle *)&v85, (uint64_t)v78);
        v78[0] = 0;
      }
      re::TextureHandle::invalidate((re::TextureHandle *)&v85);
      re::TextureHandle::invalidate((re::TextureHandle *)&v90);
      v61 = 0;
LABEL_58:
      if (*(_BYTE *)(v53 + 136) || *(_BYTE *)(v53 + 1208))
      {
        if (*(_QWORD *)(v53 + 120))
        {
          v62 = re::AssetHandle::loadedAsset<re::ImageBasedLightAsset>((re::ImageBasedLightAsset *)(v53 + 112));
          if (!v62)
          {
            re::AssetHandle::loadAsync((re::AssetHandle *)(v53 + 112));
LABEL_68:
            ++v52;
            continue;
          }
          v63 = v62;
          v64 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)(v62 + 24));
          v65 = re::AssetHandle::asset<re::TextureAsset>((re::TextureAsset *)(v63 + 48));
          v91 = 0;
          v90 = 0;
          v85 = 0uLL;
          re::TextureHandle::operator=((re::TextureHandle *)&v90, (re::TextureHandle *)(v64 + 48));
          re::TextureHandle::operator=((re::TextureHandle *)&v85, (re::TextureHandle *)(v65 + 48));
          re::MaterialParameterBlock::setTextureHandle((re::MaterialParameterBlock *)(v53 + 160), "texturePrefilteredBlendDiffuse", (const re::TextureHandle *)&v90, (uint64_t)v77);
          v77[0] = 0;
          re::MaterialParameterBlock::setTextureHandle((re::MaterialParameterBlock *)(v53 + 160), "texturePrefilteredBlendSpecular", (const re::TextureHandle *)&v85, (uint64_t)v76);
          v76[0] = 0;
        }
        else
        {
          v66 = *((_QWORD *)a3 + 8);
          v67 = (void **)(v66 + 88);
          v91 = 0;
          v90 = 0;
          re::TextureManager::registerTexture((os_unfair_lock_s *)v66, (void **)(v66 + 88), (os_unfair_lock_s **)&v85);
          re::TextureHandle::operator=((re::TextureHandle *)&v90, (re::TextureHandle *)&v85);
          re::TextureHandle::invalidate((re::TextureHandle *)&v85);
          v85 = 0uLL;
          re::TextureManager::registerTexture(*((os_unfair_lock_s **)a3 + 8), v67, (os_unfair_lock_s **)buf);
          re::TextureHandle::operator=((re::TextureHandle *)&v85, (re::TextureHandle *)buf);
          re::TextureHandle::invalidate((re::TextureHandle *)buf);
          re::MaterialParameterBlock::setTextureHandle((re::MaterialParameterBlock *)(v53 + 160), "texturePrefilteredBlendDiffuse", (const re::TextureHandle *)&v90, (uint64_t)v75);
          v75[0] = 0;
          re::MaterialParameterBlock::setTextureHandle((re::MaterialParameterBlock *)(v53 + 160), "texturePrefilteredBlendSpecular", (const re::TextureHandle *)&v85, (uint64_t)v74);
          v74[0] = 0;
        }
        re::TextureHandle::invalidate((re::TextureHandle *)&v85);
        re::TextureHandle::invalidate((re::TextureHandle *)&v90);
      }
      if (v61)
        goto LABEL_68;
      re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::removeAt((uint64_t)(v50 - 5), v52);
    }
    while (v52 < *v50);
  }
}

unsigned __int8 *re::Optional<re::MaterialParameterBlock>::operator=(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v3;
  int v4;
  BOOL v5;
  BOOL v6;
  re::MaterialParameterBlock *v7;
  BOOL v8;

  v3 = *a1;
  v4 = *a2;
  if (*a1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    if (*a1)
      v6 = v4 == 0;
    else
      v6 = 0;
    if (v6)
    {
      (**((void (***)(uint64_t))a1 + 1))((uint64_t)(a1 + 8));
      *a1 = 0;
    }
    else
    {
      v7 = (re::MaterialParameterBlock *)(a1 + 8);
      if (v3)
        v8 = 1;
      else
        v8 = v4 == 0;
      if (v8)
      {
        re::MaterialParameterBlock::operator=((uint64_t)v7, (uint64_t)(a2 + 8));
      }
      else
      {
        *a1 = 1;
        re::MaterialParameterBlock::MaterialParameterBlock(v7, (const re::MaterialParameterBlock *)(a2 + 8));
      }
    }
  }
  return a1;
}

uint64_t re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::removeAt(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "removeAt", 848, a2, v3);
    result = _os_crash();
    __break(1u);
  }
  else
  {
    v5 = v3 - 1;
    if (v3 - 1 > a2)
    {
      v6 = *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[](a1, v5);
      *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[](a1, a2) = v6;
      v5 = *(_QWORD *)(a1 + 40) - 1;
    }
    result = re::BucketArray<re::ecs2::Entity const*,32ul>::operator[](a1, v5);
    --*(_QWORD *)(a1 + 40);
    ++*(_DWORD *)(a1 + 48);
  }
  return result;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::getEntityToImageBasedLightReceiverComponentMap(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  LODWORD(v2) = 0x7FFFFFFF;
  if (*(_QWORD *)(a1 + 8))
  {
    v3 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    v4 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * ((v3 ^ (v3 >> 31)) % *(unsigned int *)(a1 + 32)));
    if ((_DWORD)v4 != 0x7FFFFFFF)
    {
      v5 = *(_QWORD *)(a1 + 24);
      if (*(_QWORD *)(v5 + 72 * v4 + 16) == a2)
      {
        LODWORD(v2) = v4;
      }
      else
      {
        v2 = v4;
        while (1)
        {
          LODWORD(v2) = *(_DWORD *)(v5 + 72 * v2 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v2 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v5 + 72 * v2 + 16) == a2)
            return *(_QWORD *)(a1 + 24) + 72 * v2 + 24;
        }
        LODWORD(v2) = 0x7FFFFFFF;
      }
    }
  }
  return *(_QWORD *)(a1 + 24) + 72 * v2 + 24;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::registerScene(re::ecs2::ImageBasedLightReceiverManager *this, unint64_t a2)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _anonymous_namespace_ *v15;
  uint64_t *v16;
  uint64_t v17;
  re::EventBus *v18;
  re *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  re *v24;
  re *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  re *v30;
  re *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  re *v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  re *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  re *v60;
  re *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  re *v66;
  re *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  re *v72;
  re *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  re *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t result;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  _BYTE v90[24];
  uint64_t v91;
  _BYTE *v92;
  _BYTE v93[24];
  uint64_t v94;
  re *v95;
  _BYTE v96[24];
  uint64_t v97;
  re *v98;
  _BYTE v99[24];
  uint64_t v100;
  re *v101;
  _BYTE v102[24];
  uint64_t v103;
  re *v104;
  _BYTE v105[24];
  uint64_t v106;
  re *v107;
  _BYTE v108[24];
  uint64_t v109;
  re *v110;
  _BYTE v111[24];
  uint64_t v112;
  re *v113;
  _BYTE v114[24];
  uint64_t v115;
  re *v116;
  _BYTE v117[24];
  uint64_t v118;
  re *v119;
  _BYTE v120[24];
  uint64_t v121;
  re *v122;
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
  v89 = a2;
  v5 = *((_QWORD *)this + 1);
  v4 = (char *)this + 8;
  v86 = 0u;
  v87 = 0u;
  v85 = 0u;
  DWORD1(v87) = 0x7FFFFFFF;
  v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v7 = v6 ^ (v6 >> 31);
  if (v5)
  {
    v8 = v7 % *((unsigned int *)this + 8);
    v9 = *(unsigned int *)(*((_QWORD *)this + 2) + 4 * v8);
    if ((_DWORD)v9 != 0x7FFFFFFF)
    {
      v10 = *((_QWORD *)this + 3);
      if (*(_QWORD *)(v10 + 72 * v9 + 16) == a2)
        goto LABEL_9;
      while (1)
      {
        LODWORD(v9) = *(_DWORD *)(v10 + 72 * v9 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v9 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v10 + 72 * v9 + 16) == a2)
          goto LABEL_9;
      }
    }
  }
  else
  {
    LODWORD(v8) = 0;
  }
  re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove((uint64_t)v4, v8, v7, &v89, (uint64_t)&v85);
  ++*((_DWORD *)this + 12);
LABEL_9:
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v85);
  v11 = *((_QWORD *)this + 7);
  v88 = 0;
  v85 = 0u;
  v86 = 1uLL;
  v87 = 0uLL;
  if (!v11)
  {
    LODWORD(v12) = 0;
    goto LABEL_16;
  }
  v12 = v7 % *((unsigned int *)this + 20);
  v13 = *(unsigned int *)(*((_QWORD *)this + 8) + 4 * v12);
  if ((_DWORD)v13 == 0x7FFFFFFF)
  {
LABEL_16:
    re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove((uint64_t)this + 56, v12, v7, &v89, (uint64_t)&v85);
    ++*((_DWORD *)this + 24);
    goto LABEL_17;
  }
  v14 = *((_QWORD *)this + 9);
  while (*(_QWORD *)(v14 + 80 * v13 + 16) != a2)
  {
    LODWORD(v13) = *(_DWORD *)(v14 + 80 * v13 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v13 == 0x7FFFFFFF)
      goto LABEL_16;
  }
LABEL_17:
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)&v85);
  v15 = (_anonymous_namespace_ *)v85;
  if ((_QWORD)v85 && (v86 & 1) == 0)
    v15 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v85 + 40))();
  v85 = 0uLL;
  LODWORD(v86) = 1;
  v87 = 0uLL;
  *((_QWORD *)&v86 + 1) = 0;
  LODWORD(v88) = 0;
  v18 = *(re::EventBus **)(a2 + 288);
  if (!v18)
  {
    re::internal::assertLog((re::internal *)4, v17, "assertion failure: '%s' (%s:line %i) An event bus is expected for this system to track IBL parameter changes.", "eventBus", "registerScene", 271);
    _os_crash();
    __break(1u);
  }
  v121 = re::globalAllocators((re *)v16)[2];
  v122 = 0;
  v19 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v121 + 32))(v121, 32, 0);
  *(_QWORD *)v19 = &off_24ED675A8;
  *((_QWORD *)v19 + 1) = this;
  *((_QWORD *)v19 + 2) = re::ecs2::ImageBasedLightReceiverManager::iblReceiverComponentDidActivateEventHandler;
  *((_QWORD *)v19 + 3) = 0;
  v122 = v19;
  v20 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v18, (uint64_t)v120, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v22 = v21;
  v23 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v85);
  *v23 = v20;
  v23[1] = v22;
  v24 = v122;
  if (v122)
  {
    v24 = (re *)(**(uint64_t (***)(re *))v122)(v122);
    if (v122 != (re *)v120)
      v24 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v121 + 40))(v121);
    v122 = 0;
  }
  v118 = re::globalAllocators(v24)[2];
  v119 = 0;
  v25 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v118 + 32))(v118, 32, 0);
  *(_QWORD *)v25 = &off_24ED67600;
  *((_QWORD *)v25 + 1) = this;
  *((_QWORD *)v25 + 2) = re::ecs2::ImageBasedLightReceiverManager::iblReceiverComponentWillDeactivateEventHandler;
  *((_QWORD *)v25 + 3) = 0;
  v119 = v25;
  v26 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v18, (uint64_t)v117, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v28 = v27;
  v29 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v85);
  *v29 = v26;
  v29[1] = v28;
  v30 = v119;
  if (v119)
  {
    v30 = (re *)(**(uint64_t (***)(re *))v119)(v119);
    if (v119 != (re *)v117)
      v30 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v118 + 40))(v118);
    v119 = 0;
  }
  v115 = re::globalAllocators(v30)[2];
  v116 = 0;
  v31 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v115 + 32))(v115, 32, 0);
  *(_QWORD *)v31 = &off_24ED67658;
  *((_QWORD *)v31 + 1) = this;
  *((_QWORD *)v31 + 2) = re::ecs2::ImageBasedLightReceiverManager::iblReceiverComponentWillDeactivateEventHandlerSceneEntityEvent;
  *((_QWORD *)v31 + 3) = 0;
  v116 = v31;
  v32 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v18, (uint64_t)v114, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v34 = v33;
  v35 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v85);
  *v35 = v32;
  v35[1] = v34;
  v36 = v116;
  if (v116)
  {
    v36 = (re *)(**(uint64_t (***)(re *))v116)(v116);
    if (v116 != (re *)v114)
      v36 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v115 + 40))(v115);
    v116 = 0;
  }
  v112 = re::globalAllocators(v36)[2];
  v113 = 0;
  v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v112 + 32))(v112, 32, 0);
  *(_QWORD *)v37 = &off_24ED676B0;
  *((_QWORD *)v37 + 1) = this;
  *((_QWORD *)v37 + 2) = re::ecs2::ImageBasedLightReceiverManager::iblReceiverComponentDidChangeEventHandler;
  *((_QWORD *)v37 + 3) = 0;
  v113 = v37;
  v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v18, (uint64_t)v111, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v40 = v39;
  v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v85);
  *v41 = v38;
  v41[1] = v40;
  v42 = v113;
  if (v113)
  {
    v42 = (re *)(**(uint64_t (***)(re *))v113)(v113);
    if (v113 != (re *)v111)
      v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v112 + 40))(v112);
    v113 = 0;
  }
  v109 = re::globalAllocators(v42)[2];
  v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v109 + 32))(v109, 32, 0);
  *(_QWORD *)v43 = &off_24ED67708;
  *((_QWORD *)v43 + 1) = this;
  *((_QWORD *)v43 + 2) = re::ecs2::ImageBasedLightReceiverManager::entityAddEventHandler;
  *((_QWORD *)v43 + 3) = 0;
  v110 = v43;
  v44 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidAddEvent>(v18, (uint64_t)v108, 0, 0);
  v46 = v45;
  v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v85);
  *v47 = v44;
  v47[1] = v46;
  v48 = v110;
  if (v110)
  {
    v48 = (re *)(**(uint64_t (***)(re *))v110)(v110);
    if (v110 != (re *)v108)
      v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v109 + 40))(v109);
    v110 = 0;
  }
  v106 = re::globalAllocators(v48)[2];
  v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v106 + 32))(v106, 32, 0);
  *(_QWORD *)v49 = &off_24ED67760;
  *((_QWORD *)v49 + 1) = this;
  *((_QWORD *)v49 + 2) = re::ecs2::ImageBasedLightReceiverManager::entityRemoveEventHandler;
  *((_QWORD *)v49 + 3) = 0;
  v107 = v49;
  v50 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v18, (uint64_t)v105, 0, 0);
  v52 = v51;
  v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v85);
  *v53 = v50;
  v53[1] = v52;
  v54 = v107;
  if (v107)
  {
    v54 = (re *)(**(uint64_t (***)(re *))v107)(v107);
    if (v107 != (re *)v105)
      v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v106 + 40))(v106);
    v107 = 0;
  }
  v103 = re::globalAllocators(v54)[2];
  v55 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v103 + 32))(v103, 32, 0);
  *(_QWORD *)v55 = &off_24ED677B8;
  *((_QWORD *)v55 + 1) = this;
  *((_QWORD *)v55 + 2) = re::ecs2::ImageBasedLightReceiverManager::entityReparentEventHandler;
  *((_QWORD *)v55 + 3) = 0;
  v104 = v55;
  v56 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v18, (uint64_t)v102, 0, 0);
  v58 = v57;
  v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v85);
  *v59 = v56;
  v59[1] = v58;
  v60 = v104;
  if (v104)
  {
    v60 = (re *)(**(uint64_t (***)(re *))v104)(v104);
    if (v104 != (re *)v102)
      v60 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v103 + 40))(v103);
    v104 = 0;
  }
  v100 = re::globalAllocators(v60)[2];
  v61 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v100 + 32))(v100, 32, 0);
  *(_QWORD *)v61 = &off_24ED675A8;
  *((_QWORD *)v61 + 1) = this;
  *((_QWORD *)v61 + 2) = re::ecs2::ImageBasedLightReceiverManager::iblComponentDidActivateEventHandler;
  *((_QWORD *)v61 + 3) = 0;
  v101 = v61;
  v62 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v18, (uint64_t)v99, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v64 = v63;
  v65 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v85);
  *v65 = v62;
  v65[1] = v64;
  v66 = v101;
  if (v101)
  {
    v66 = (re *)(**(uint64_t (***)(re *))v101)(v101);
    if (v101 != (re *)v99)
      v66 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v100 + 40))(v100);
    v101 = 0;
  }
  v97 = re::globalAllocators(v66)[2];
  v67 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v97 + 32))(v97, 32, 0);
  *(_QWORD *)v67 = &off_24ED67600;
  *((_QWORD *)v67 + 1) = this;
  *((_QWORD *)v67 + 2) = re::ecs2::ImageBasedLightReceiverManager::iblComponentWillDeactivateEventHandler;
  *((_QWORD *)v67 + 3) = 0;
  v98 = v67;
  v68 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v18, (uint64_t)v96, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v70 = v69;
  v71 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v85);
  *v71 = v68;
  v71[1] = v70;
  v72 = v98;
  if (v98)
  {
    v72 = (re *)(**(uint64_t (***)(re *))v98)(v98);
    if (v98 != (re *)v96)
      v72 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v97 + 40))(v97);
    v98 = 0;
  }
  v94 = re::globalAllocators(v72)[2];
  v73 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v94 + 32))(v94, 32, 0);
  *(_QWORD *)v73 = &off_24ED67658;
  *((_QWORD *)v73 + 1) = this;
  *((_QWORD *)v73 + 2) = re::ecs2::ImageBasedLightReceiverManager::iblComponentWillDeactivateEventHandlerSceneEntityEvent;
  *((_QWORD *)v73 + 3) = 0;
  v95 = v73;
  v74 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v18, (uint64_t)v93, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v76 = v75;
  v77 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v85);
  *v77 = v74;
  v77[1] = v76;
  v78 = v95;
  if (v95)
  {
    v78 = (re *)(**(uint64_t (***)(re *))v95)(v95);
    if (v95 != (re *)v93)
      v78 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v94 + 40))(v94);
    v95 = 0;
  }
  v91 = re::globalAllocators(v78)[2];
  v79 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v91 + 32))(v91, 32, 0);
  *v79 = &off_24ED676B0;
  v79[1] = this;
  v79[2] = re::ecs2::ImageBasedLightReceiverManager::iblComponentDidChangeEventHandler;
  v79[3] = 0;
  v92 = v79;
  v80 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v18, (uint64_t)v90, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v82 = v81;
  v83 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v85);
  *v83 = v80;
  v83[1] = v82;
  if (v92)
  {
    (**(void (***)(_BYTE *))v92)(v92);
    if (v92 != v90)
      (*(void (**)(uint64_t))(*(_QWORD *)v91 + 40))(v91);
    v92 = 0;
  }
  re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 104, (uint64_t *)&v89, (uint64_t)&v85);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)&v85);
  result = v85;
  if ((_QWORD)v85)
  {
    if ((v86 & 1) == 0)
      return (*(uint64_t (**)(void))(*(_QWORD *)v85 + 40))();
  }
  return result;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::iblReceiverComponentDidActivateEventHandler(re::ecs2::ImageBasedLightReceiverManager *a1, uint64_t a2)
{
  id *v4;

  v4 = (id *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!re::ecs2::EntityHandle::isNull(v4 + 4))
    re::ecs2::ImageBasedLightReceiverManager::addOrUpdateIBLReceiverComponentCache(a1, v4, (re::ecs2::Entity *)a2);
  return 0;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::iblReceiverComponentWillDeactivateEventHandler(re::ecs2::ImageBasedLightReceiverManager *a1, uint64_t a2)
{
  re::ecs2::ImageBasedLightReceiverComponent *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (re::ecs2::ImageBasedLightReceiverComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v5 = a2;
  do
  {
    v6 = v5;
    v5 = *(_QWORD *)(v5 + 24);
  }
  while (v5);
  re::ecs2::ImageBasedLightReceiverManager::removeIBLReceiverComponentCache(a1, v4, (re::ecs2::Entity *)a2, *(re::ecs2::Scene **)(v6 + 16));
  *((_QWORD *)v4 + 7) = 0;
  return 0;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::iblReceiverComponentWillDeactivateEventHandlerSceneEntityEvent(re::ecs2::ImageBasedLightReceiverManager *a1, uint64_t a2)
{
  re::ecs2::ImageBasedLightReceiverComponent *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (re::ecs2::ImageBasedLightReceiverComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v5 = a2;
  do
  {
    v6 = v5;
    v5 = *(_QWORD *)(v5 + 24);
  }
  while (v5);
  re::ecs2::ImageBasedLightReceiverManager::removeIBLReceiverComponentCache(a1, v4, (re::ecs2::Entity *)a2, *(re::ecs2::Scene **)(v6 + 16));
  *((_QWORD *)v4 + 7) = 0;
  return 0;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::iblReceiverComponentDidChangeEventHandler(re::ecs2::ImageBasedLightReceiverManager *a1, re::ecs2::Entity *a2)
{
  re::ecs2::ImageBasedLightReceiverManager::processIBLReceiverComponentDidChange(a1, a2);
  return 0;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::entityAddEventHandler(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;

  v22 = a2;
  v3 = a2;
  do
  {
    v4 = v3;
    v3 = *(_QWORD *)(v3 + 24);
  }
  while (v3);
  LODWORD(v5) = 0x7FFFFFFF;
  if (*(_QWORD *)(a1 + 8))
  {
    v6 = *(_QWORD *)(v4 + 16);
    v7 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v6 ^ (v6 >> 30))) >> 27));
    v8 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * ((v7 ^ (v7 >> 31)) % *(unsigned int *)(a1 + 32)));
    if ((_DWORD)v8 != 0x7FFFFFFF)
    {
      v9 = *(_QWORD *)(a1 + 24);
      if (*(_QWORD *)(v9 + 72 * v8 + 16) == v6)
      {
        LODWORD(v5) = v8;
      }
      else
      {
        v5 = v8;
        while (1)
        {
          LODWORD(v5) = *(_DWORD *)(v9 + 72 * v5 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v5 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v9 + 72 * v5 + 16) == v6)
            goto LABEL_12;
        }
        LODWORD(v5) = 0x7FFFFFFF;
      }
    }
  }
LABEL_12:
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a2 + 24);
  if (v11)
  {
    if ((*(_BYTE *)(v11 + 288) & 0x80) != 0)
      v12 = 0;
    else
      v12 = *(_QWORD *)(a2 + 24);
  }
  else
  {
    v12 = 0;
  }
  v13 = (uint64_t *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v10 + 72 * v5 + 24, v12);
  if (!v13)
    return 0;
  v21 = *v13;
  v14 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v15 = v14 ^ (v14 >> 31);
  if (!*(_QWORD *)(v10 + 72 * v5 + 24))
  {
    LODWORD(v17) = 0;
    goto LABEL_25;
  }
  v16 = v10 + 72 * v5;
  v17 = v15 % *(unsigned int *)(v16 + 48);
  v18 = *(unsigned int *)(*(_QWORD *)(v16 + 32) + 4 * v17);
  if ((_DWORD)v18 == 0x7FFFFFFF)
  {
LABEL_25:
    re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::addEmplace<re::ecs2::ImageBasedLightReceiverComponent *&>(v10 + 72 * v5 + 24, v17, v15, &v22, &v21);
    ++*(_DWORD *)(v10 + 72 * v5 + 64);
    return 0;
  }
  v19 = *(_QWORD *)(v10 + 72 * v5 + 40);
  if (*(_QWORD *)(v19 + 32 * v18 + 16) != a2)
  {
    while (1)
    {
      v18 = *(_DWORD *)(v19 + 32 * v18 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v18 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v19 + 32 * v18 + 16) == a2)
        return 0;
    }
    goto LABEL_25;
  }
  return 0;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::entityRemoveEventHandler(uint64_t a1, re::ecs2::Entity *a2)
{
  re::ecs2::Entity *v4;
  re::ecs2::Entity *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  re::ecs2::ImageBasedLightReceiverComponent **v11;

  v4 = a2;
  do
  {
    v5 = v4;
    v4 = (re::ecs2::Entity *)*((_QWORD *)v4 + 3);
  }
  while (v4);
  LODWORD(v6) = 0x7FFFFFFF;
  if (*(_QWORD *)(a1 + 8))
  {
    v7 = *((_QWORD *)v5 + 2);
    v8 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) >> 27));
    v9 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * ((v8 ^ (v8 >> 31)) % *(unsigned int *)(a1 + 32)));
    if ((_DWORD)v9 != 0x7FFFFFFF)
    {
      v10 = *(_QWORD *)(a1 + 24);
      if (*(_QWORD *)(v10 + 72 * v9 + 16) == v7)
      {
        LODWORD(v6) = v9;
      }
      else
      {
        v6 = v9;
        while (1)
        {
          LODWORD(v6) = *(_DWORD *)(v10 + 72 * v6 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v6 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v10 + 72 * v6 + 16) == v7)
            goto LABEL_12;
        }
        LODWORD(v6) = 0x7FFFFFFF;
      }
    }
  }
LABEL_12:
  v11 = (re::ecs2::ImageBasedLightReceiverComponent **)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(*(_QWORD *)(a1 + 24) + 72 * v6 + 24, (unint64_t)a2);
  if (v11)
    re::ecs2::ImageBasedLightReceiverManager::updateEntityToIBLReceiverComponentMap((re::ecs2::ImageBasedLightReceiverManager *)a1, a2, *v11, 0);
  return 0;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::entityReparentEventHandler(uint64_t a1, re::ecs2::Entity *a2, unint64_t *a3)
{
  re::ecs2::Entity *v5;
  re::ecs2::Entity *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  re::ecs2::ImageBasedLightReceiverComponent *v15;
  re::ecs2::ImageBasedLightReceiverComponent **v16;
  re::ecs2::ImageBasedLightReceiverComponent *v17;
  re::ecs2::ImageBasedLightReceiverComponent **v18;
  re::ecs2::ImageBasedLightReceiverComponent **v19;
  re::ecs2::ImageBasedLightReceiverComponent *v20;

  v5 = a2;
  do
  {
    v6 = v5;
    v5 = (re::ecs2::Entity *)*((_QWORD *)v5 + 3);
  }
  while (v5);
  LODWORD(v7) = 0x7FFFFFFF;
  if (*(_QWORD *)(a1 + 8))
  {
    v8 = *((_QWORD *)v6 + 2);
    v9 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 16) + 4 * ((v9 ^ (v9 >> 31)) % *(unsigned int *)(a1 + 32)));
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v11 = *(_QWORD *)(a1 + 24);
      if (*(_QWORD *)(v11 + 72 * v10 + 16) == v8)
      {
        LODWORD(v7) = v10;
      }
      else
      {
        v7 = v10;
        while (1)
        {
          LODWORD(v7) = *(_DWORD *)(v11 + 72 * v7 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v7 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v11 + 72 * v7 + 16) == v8)
            goto LABEL_12;
        }
        LODWORD(v7) = 0x7FFFFFFF;
      }
    }
  }
LABEL_12:
  v12 = *(_QWORD *)(a1 + 24) + 72 * v7 + 24;
  v13 = *a3;
  v14 = *((_QWORD *)a2 + 3);
  if (v14)
  {
    if ((*(_BYTE *)(v14 + 288) & 0x80) != 0)
      v15 = 0;
    else
      v15 = (re::ecs2::ImageBasedLightReceiverComponent *)*((_QWORD *)a2 + 3);
    if (!v13)
      goto LABEL_22;
  }
  else
  {
    v15 = 0;
    if (!v13)
      goto LABEL_22;
  }
  v16 = (re::ecs2::ImageBasedLightReceiverComponent **)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v12, v13);
  if (v16)
  {
    v17 = *v16;
    if (v15)
      goto LABEL_23;
    goto LABEL_26;
  }
LABEL_22:
  v17 = 0;
  if (v15)
  {
LABEL_23:
    v18 = (re::ecs2::ImageBasedLightReceiverComponent **)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v12, (unint64_t)v15);
    if (v18)
      v15 = *v18;
    else
      v15 = 0;
  }
LABEL_26:
  v19 = (re::ecs2::ImageBasedLightReceiverComponent **)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v12, (unint64_t)a2);
  if (v19)
    v20 = *v19;
  else
    v20 = 0;
  if (v20 == v17)
    re::ecs2::ImageBasedLightReceiverManager::updateEntityToIBLReceiverComponentMap((re::ecs2::ImageBasedLightReceiverManager *)a1, a2, v17, v15);
  return 0;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::iblComponentDidActivateEventHandler(re::ecs2::ImageBasedLightReceiverManager *a1, char *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2;
  do
  {
    v5 = v4;
    v4 = (char *)*((_QWORD *)v4 + 3);
  }
  while (v4);
  v6 = *((_QWORD *)v5 + 2);
  v7 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v6 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 24);
    if (v8)
    {
      v9 = *(uint64_t **)(v7 + 40);
      v10 = 8 * v8;
      do
      {
        v11 = *v9;
        if (re::ecs2::EntityHandle::resolve((id *)(*v9 + 32), v6) == a2)
          re::ecs2::ImageBasedLightReceiverManager::processIBLReceiverComponentDidChange(a1, *(re::ecs2::Entity **)(v11 + 16));
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
  return 0;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::iblComponentWillDeactivateEventHandler(re::ecs2::ImageBasedLightReceiverManager *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  re::ecs2::ImageBasedLightReceiverComponent **v9;
  uint64_t v10;
  re::ecs2::ImageBasedLightReceiverComponent *v11;

  v3 = a2;
  do
  {
    v4 = v3;
    v3 = *(_QWORD *)(v3 + 24);
  }
  while (v3);
  v5 = *(_QWORD *)(v4 + 16);
  v6 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v7 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v5 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 24);
    if (v8)
    {
      v9 = *(re::ecs2::ImageBasedLightReceiverComponent ***)(v7 + 40);
      v10 = 8 * v8;
      do
      {
        v11 = *v9;
        if (*((_QWORD *)*v9 + 7) == v6)
        {
          re::ecs2::ImageBasedLightReceiverManager::removeIBLReceiverComponentCache(a1, *v9, *((re::ecs2::Entity **)v11 + 2), (re::ecs2::Scene *)v5);
          *((_QWORD *)v11 + 7) = 0;
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
  return 0;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::iblComponentWillDeactivateEventHandlerSceneEntityEvent(re::ecs2::ImageBasedLightReceiverManager *a1, char *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  re::ecs2::ImageBasedLightReceiverComponent **v10;
  uint64_t v11;
  re::ecs2::ImageBasedLightReceiverComponent *v12;

  v4 = a2;
  do
  {
    v5 = v4;
    v4 = (char *)*((_QWORD *)v4 + 3);
  }
  while (v4);
  v6 = *((_QWORD *)v5 + 2);
  v7 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v8 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v6 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 24);
    if (v9)
    {
      v10 = *(re::ecs2::ImageBasedLightReceiverComponent ***)(v8 + 40);
      v11 = 8 * v9;
      do
      {
        v12 = *v10;
        if (*((_QWORD *)*v10 + 7) == v7)
        {
          re::ecs2::ImageBasedLightReceiverManager::removeIBLReceiverComponentCache(a1, *v10, *((re::ecs2::Entity **)v12 + 2), (re::ecs2::Scene *)v6);
          *((_QWORD *)v12 + 7) = 0;
        }
        if (re::ecs2::EntityHandle::resolve((id *)v12 + 4, v6) == a2)
        {
          re::ecs2::ImageBasedLightReceiverManager::removeIBLReceiverComponentCache(a1, v12, *((re::ecs2::Entity **)v12 + 2), (re::ecs2::Scene *)v6);
          re::ecs2::EntityHandle::reset((id *)v12 + 4);
          objc_destroyWeak((id *)v12 + 4);
          *((_QWORD *)v12 + 4) = 0;
        }
        ++v10;
        v11 -= 8;
      }
      while (v11);
    }
  }
  return 0;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::iblComponentDidChangeEventHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE v17[16];

  v2 = a2;
  v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v5 = v4;
  do
  {
    v6 = v2;
    v2 = *(_QWORD *)(v2 + 24);
  }
  while (v2);
  if (*(_QWORD *)(v4 + 1304))
  {
    v7 = *(_QWORD *)(v6 + 16);
    LODWORD(v6) = 0x7FFFFFFF;
    if (*(_QWORD *)(a1 + 56))
    {
      v8 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) >> 27));
      v9 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * ((v8 ^ (v8 >> 31)) % *(unsigned int *)(a1 + 80)));
      if ((_DWORD)v9 != 0x7FFFFFFF)
      {
        v10 = *(_QWORD *)(a1 + 72);
        if (*(_QWORD *)(v10 + 80 * v9 + 16) == v7)
        {
          LODWORD(v6) = v9;
        }
        else
        {
          v6 = v9;
          while (1)
          {
            LODWORD(v6) = *(_DWORD *)(v10 + 80 * v6 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v6 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v10 + 80 * v6 + 16) == v7)
              goto LABEL_13;
          }
          LODWORD(v6) = 0x7FFFFFFF;
        }
      }
    }
LABEL_13:
    re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::indexOf((uint64_t)v17, *(_QWORD *)(a1 + 72) + 80 * v6 + 24, v4);
    if (!v17[0])
    {
      if (*(_QWORD *)(a1 + 56))
      {
        v11 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) >> 27));
        v12 = (v11 ^ (v11 >> 31)) % *(unsigned int *)(a1 + 80);
        v13 = *(_QWORD *)(a1 + 72);
        v14 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * v12);
        v15 = 0x7FFFFFFF;
        if ((_DWORD)v14 != 0x7FFFFFFF)
        {
          if (*(_QWORD *)(v13 + 80 * v14 + 16) == v7)
          {
LABEL_19:
            v15 = v14;
          }
          else
          {
            while (1)
            {
              LODWORD(v14) = *(_DWORD *)(v13 + 80 * v14 + 8) & 0x7FFFFFFF;
              v15 = 0x7FFFFFFF;
              if ((_DWORD)v14 == 0x7FFFFFFF)
                break;
              if (*(_QWORD *)(v13 + 80 * v14 + 16) == v7)
                goto LABEL_19;
            }
          }
        }
      }
      else
      {
        v13 = *(_QWORD *)(a1 + 72);
        v15 = 0x7FFFFFFF;
      }
      *(_QWORD *)re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::addUninitialized(v13 + 80 * v15 + 24) = v5;
    }
  }
  return 0;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::unregisterScene(re::ecs2::ImageBasedLightReceiverManager *this, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t i;
  uint64_t v32;
  unint64_t v34;

  v34 = a2;
  v4 = a2 ^ (a2 >> 30);
  if (*((_QWORD *)this + 1))
  {
    v5 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v4) ^ ((0xBF58476D1CE4E5B9 * v4) >> 27));
    v6 = (v5 ^ (v5 >> 31)) % *((unsigned int *)this + 8);
    v7 = *((_QWORD *)this + 2);
    v8 = *(unsigned int *)(v7 + 4 * v6);
    if ((_DWORD)v8 != 0x7FFFFFFF)
    {
      v9 = *((_QWORD *)this + 3);
      if (*(_QWORD *)(v9 + 72 * v8 + 16) == a2)
      {
        *(_DWORD *)(v7 + 4 * v6) = *(_DWORD *)(v9 + 72 * v8 + 8) & 0x7FFFFFFF;
LABEL_8:
        v12 = *((_QWORD *)this + 3);
        v13 = v12 + 72 * v8;
        v16 = *(_DWORD *)(v13 + 8);
        v15 = (int *)(v13 + 8);
        v14 = v16;
        if (v16 < 0)
        {
          *v15 = v14 & 0x7FFFFFFF;
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(v12 + 72 * v8 + 24));
          v12 = *((_QWORD *)this + 3);
          v14 = *(_DWORD *)(v12 + 72 * v8 + 8);
        }
        v17 = *((_DWORD *)this + 12);
        *(_DWORD *)(v12 + 72 * v8 + 8) = *((_DWORD *)this + 11) | v14 & 0x80000000;
        --*((_DWORD *)this + 9);
        *((_DWORD *)this + 11) = v8;
        *((_DWORD *)this + 12) = v17 + 1;
      }
      else
      {
        while (1)
        {
          v10 = v8;
          v11 = *(_DWORD *)(v9 + 72 * v8 + 8);
          v8 = v11 & 0x7FFFFFFF;
          if ((v11 & 0x7FFFFFFF) == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v9 + 72 * v8 + 16) == a2)
          {
            *(_DWORD *)(v9 + 72 * v10 + 8) = *(_DWORD *)(v9 + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(v9 + 72 * v8 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
  if (*((_QWORD *)this + 7))
  {
    v18 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v4) ^ ((0xBF58476D1CE4E5B9 * v4) >> 27));
    v19 = (v18 ^ (v18 >> 31)) % *((unsigned int *)this + 20);
    v20 = *((_QWORD *)this + 8);
    v21 = *(unsigned int *)(v20 + 4 * v19);
    if ((_DWORD)v21 != 0x7FFFFFFF)
    {
      v22 = *((_QWORD *)this + 9);
      if (*(_QWORD *)(v22 + 80 * v21 + 16) == a2)
      {
        *(_DWORD *)(v20 + 4 * v19) = *(_DWORD *)(v22 + 80 * v21 + 8) & 0x7FFFFFFF;
LABEL_18:
        re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::EntryWithHash::free(*((_QWORD *)this + 9) + 80 * v21);
        v25 = *((_DWORD *)this + 24);
        *(_DWORD *)(*((_QWORD *)this + 9) + 80 * v21 + 8) = *(_DWORD *)(*((_QWORD *)this + 9) + 80 * v21 + 8) & 0x80000000 | *((_DWORD *)this + 23);
        --*((_DWORD *)this + 21);
        *((_DWORD *)this + 23) = v21;
        *((_DWORD *)this + 24) = v25 + 1;
      }
      else
      {
        while (1)
        {
          v23 = v21;
          v24 = *(_DWORD *)(v22 + 80 * v21 + 8);
          v21 = v24 & 0x7FFFFFFF;
          if ((v24 & 0x7FFFFFFF) == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v22 + 80 * v21 + 16) == a2)
          {
            *(_DWORD *)(v22 + 80 * v23 + 8) = *(_DWORD *)(v22 + 80 * v23 + 8) & 0x80000000 | *(_DWORD *)(v22 + 80 * v21 + 8) & 0x7FFFFFFF;
            goto LABEL_18;
          }
        }
      }
    }
  }
  v26 = *(_QWORD *)(a2 + 288);
  v27 = (char *)this + 104;
  v28 = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)this + 104, (uint64_t *)&v34);
  if (v28)
  {
    v29 = v28;
    v30 = *(_QWORD *)(v28 + 40);
    if (v30)
    {
      for (i = 0; i != v30; ++i)
      {
        v32 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v29, i);
        re::EventBus::unsubscribe(v26, *(_QWORD *)v32, *(_QWORD *)(v32 + 8));
      }
    }
  }
  return re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v27, (uint64_t *)&v34);
}

void re::ecs2::ImageBasedLightReceiverManager::addOrUpdateIBLReceiverComponentCache(re::ecs2::ImageBasedLightReceiverManager *this, id *a2, re::ecs2::Entity *a3)
{
  re::ecs2::Entity *v6;
  re::ecs2::Entity *v7;
  re::ecs2::ImageBasedLightReceiverComponent *v8;
  char *ResolvedIBLComponent;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  re::ecs2::ImageBasedLightReceiverComponent **v15;
  re::ecs2::ImageBasedLightReceiverComponent *v16;

  v6 = a3;
  do
  {
    v7 = v6;
    v6 = (re::ecs2::Entity *)*((_QWORD *)v6 + 3);
  }
  while (v6);
  v8 = (re::ecs2::ImageBasedLightReceiverComponent *)*((_QWORD *)v7 + 2);
  if (!a2[7])
  {
    if (ResolvedIBLComponent)
      re::ecs2::ImageBasedLightReceiverManager::addOrUpdateIBLComponentCache((uint64_t)this, (re::ecs2::ImageBasedLightComponent *)ResolvedIBLComponent, (re::ecs2::ImageBasedLightReceiverComponent *)a2, v8);
  }
  if ((*((_BYTE *)a3 + 288) & 1) != 0)
  {
    LODWORD(v10) = 0x7FFFFFFF;
    if (*((_QWORD *)this + 1))
    {
      v11 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((unint64_t)v8 ^ ((unint64_t)v8 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                              * ((unint64_t)v8 ^ ((unint64_t)v8 >> 30))) >> 27));
      v12 = *(unsigned int *)(*((_QWORD *)this + 2) + 4 * ((v11 ^ (v11 >> 31)) % *((unsigned int *)this + 8)));
      if ((_DWORD)v12 != 0x7FFFFFFF)
      {
        v13 = *((_QWORD *)this + 3);
        if (*(re::ecs2::ImageBasedLightReceiverComponent **)(v13 + 72 * v12 + 16) == v8)
        {
          LODWORD(v10) = v12;
        }
        else
        {
          v10 = v12;
          while (1)
          {
            LODWORD(v10) = *(_DWORD *)(v13 + 72 * v10 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v10 == 0x7FFFFFFF)
              break;
            if (*(re::ecs2::ImageBasedLightReceiverComponent **)(v13 + 72 * v10 + 16) == v8)
              goto LABEL_16;
          }
          LODWORD(v10) = 0x7FFFFFFF;
        }
      }
    }
LABEL_16:
    v14 = *((_QWORD *)a3 + 3);
    if (v14
      && (*(_BYTE *)(v14 + 288) & 0x80) == 0
      && (v15 = (re::ecs2::ImageBasedLightReceiverComponent **)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(*((_QWORD *)this + 3) + 72 * v10 + 24, v14)) != 0)
    {
      v16 = *v15;
    }
    else
    {
      v16 = 0;
    }
    re::ecs2::ImageBasedLightReceiverManager::updateEntityToIBLReceiverComponentMap(this, a3, v16, (re::ecs2::ImageBasedLightReceiverComponent *)a2);
  }
}

void re::ecs2::ImageBasedLightReceiverManager::removeIBLReceiverComponentCache(re::ecs2::ImageBasedLightReceiverManager *this, re::ecs2::ImageBasedLightReceiverComponent *a2, re::ecs2::Entity *a3, re::ecs2::Scene *a4)
{
  re::ecs2::ImageBasedLightComponent *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  re::ecs2::ImageBasedLightReceiverComponent **v14;
  re::ecs2::ImageBasedLightReceiverComponent *v15;

  v8 = (re::ecs2::ImageBasedLightComponent *)*((_QWORD *)a2 + 7);
  if (v8)
    re::ecs2::ImageBasedLightReceiverManager::removeIBLComponentCache((uint64_t)this, v8, a4);
  LODWORD(v9) = 0x7FFFFFFF;
  if (*((_QWORD *)this + 1))
  {
    v10 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * ((unint64_t)a4 ^ ((unint64_t)a4 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                            * ((unint64_t)a4 ^ ((unint64_t)a4 >> 30))) >> 27));
    v11 = *(unsigned int *)(*((_QWORD *)this + 2) + 4 * ((v10 ^ (v10 >> 31)) % *((unsigned int *)this + 8)));
    if ((_DWORD)v11 != 0x7FFFFFFF)
    {
      v12 = *((_QWORD *)this + 3);
      if (*(re::ecs2::Scene **)(v12 + 72 * v11 + 16) == a4)
      {
        LODWORD(v9) = v11;
      }
      else
      {
        v9 = v11;
        while (1)
        {
          LODWORD(v9) = *(_DWORD *)(v12 + 72 * v9 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v9 == 0x7FFFFFFF)
            break;
          if (*(re::ecs2::Scene **)(v12 + 72 * v9 + 16) == a4)
            goto LABEL_12;
        }
        LODWORD(v9) = 0x7FFFFFFF;
      }
    }
  }
LABEL_12:
  v13 = *((_QWORD *)a3 + 3);
  if (v13
    && (*(_BYTE *)(v13 + 288) & 0x80) == 0
    && (v14 = (re::ecs2::ImageBasedLightReceiverComponent **)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(*((_QWORD *)this + 3) + 72 * v9 + 24, v13)) != 0)
  {
    v15 = *v14;
  }
  else
  {
    v15 = 0;
  }
  re::ecs2::ImageBasedLightReceiverManager::updateEntityToIBLReceiverComponentMap(this, a3, a2, v15);
}

void re::ecs2::ImageBasedLightReceiverManager::processIBLReceiverComponentDidChange(re::ecs2::ImageBasedLightReceiverManager *this, re::ecs2::Entity *a2)
{
  uint64_t v4;
  re::ecs2::ImageBasedLightReceiverComponent *v5;
  re::ecs2::Entity *v6;
  re::ecs2::Entity *v7;
  re::ecs2::Scene *v8;
  BOOL isNull;
  const re::ecs2::Scene *v10;
  uint64_t v11;
  char *ResolvedIBLComponent;
  re::ecs2::ImageBasedLightComponent *v13;
  re::ecs2::ImageBasedLightComponent *v14;

  v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  v5 = (re::ecs2::ImageBasedLightReceiverComponent *)v4;
  v6 = a2;
  do
  {
    v7 = v6;
    v6 = (re::ecs2::Entity *)*((_QWORD *)v6 + 3);
  }
  while (v6);
  v8 = (re::ecs2::Scene *)*((_QWORD *)v7 + 2);
  isNull = re::ecs2::EntityHandle::isNull((id *)(v4 + 32));
  v11 = *((_QWORD *)v5 + 7);
  if (isNull)
  {
    if (v11)
    {
      re::ecs2::ImageBasedLightReceiverManager::removeIBLReceiverComponentCache(this, v5, a2, v8);
      *((_QWORD *)v5 + 7) = 0;
    }
  }
  else if (v11)
  {
    v13 = (re::ecs2::ImageBasedLightComponent *)*((_QWORD *)v5 + 7);
    if (ResolvedIBLComponent != (char *)v13)
    {
      v14 = (re::ecs2::ImageBasedLightComponent *)ResolvedIBLComponent;
      re::ecs2::ImageBasedLightReceiverManager::removeIBLComponentCache((uint64_t)this, v13, v8);
      if (v14)
        re::ecs2::ImageBasedLightReceiverManager::addOrUpdateIBLComponentCache((uint64_t)this, v14, v5, v8);
    }
  }
  else
  {
    re::ecs2::ImageBasedLightReceiverManager::addOrUpdateIBLReceiverComponentCache(this, (id *)v5, a2);
  }
}

void re::ecs2::ImageBasedLightReceiverManager::updateEntityToIBLReceiverComponentMap(re::ecs2::ImageBasedLightReceiverManager *this, re::ecs2::Entity *a2, re::ecs2::ImageBasedLightReceiverComponent *a3, re::ecs2::ImageBasedLightReceiverComponent *a4)
{
  re::ecs2::Entity *v8;
  re::ecs2::Entity *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  id v40;
  re::ecs2::ImageBasedLightReceiverComponent **v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int *v45;
  int v46;
  uint64_t v47;
  re::ecs2::ImageBasedLightReceiverComponent *v48;
  re::ecs2::Entity *v49;

  v48 = a4;
  v49 = a2;
  v8 = a2;
  do
  {
    v9 = v8;
    v8 = (re::ecs2::Entity *)*((_QWORD *)v8 + 3);
  }
  while (v8);
  LODWORD(v10) = 0x7FFFFFFF;
  if (*((_QWORD *)this + 1))
  {
    v11 = *((_QWORD *)v9 + 2);
    v12 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) >> 27));
    v13 = *(unsigned int *)(*((_QWORD *)this + 2) + 4 * ((v12 ^ (v12 >> 31)) % *((unsigned int *)this + 8)));
    if ((_DWORD)v13 != 0x7FFFFFFF)
    {
      v14 = *((_QWORD *)this + 3);
      if (*(_QWORD *)(v14 + 72 * v13 + 16) == v11)
      {
        LODWORD(v10) = v13;
      }
      else
      {
        v10 = v13;
        while (1)
        {
          LODWORD(v10) = *(_DWORD *)(v14 + 72 * v10 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v10 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v14 + 72 * v10 + 16) == v11)
            goto LABEL_12;
        }
        LODWORD(v10) = 0x7FFFFFFF;
      }
    }
  }
LABEL_12:
  v15 = *((_QWORD *)this + 3);
  v16 = v10;
  v17 = (_QWORD *)(v15 + 72 * v10 + 24);
  if (a4)
  {
    v18 = (0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                           * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27);
    v19 = (0x94D049BB133111EBLL * v18) ^ ((0x94D049BB133111EBLL * v18) >> 31);
    if (*v17)
    {
      v20 = v15 + 72 * v10;
      v21 = v19 % *(unsigned int *)(v20 + 48);
      v22 = *(unsigned int *)(*(_QWORD *)(v20 + 32) + 4 * v21);
      if ((_DWORD)v22 != 0x7FFFFFFF)
      {
        v23 = *(_QWORD *)(v15 + 72 * v10 + 40);
        if (*(re::ecs2::Entity **)(v23 + 32 * v22 + 16) == a2)
        {
LABEL_18:
          *(_QWORD *)(v23 + 32 * v22 + 24) = a4;
LABEL_27:
          ++*(_DWORD *)(v15 + 72 * v16 + 64);
          goto LABEL_28;
        }
        while (1)
        {
          v22 = *(_DWORD *)(v23 + 32 * v22 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v22 == 0x7FFFFFFF)
            break;
          if (*(re::ecs2::Entity **)(v23 + 32 * v22 + 16) == a2)
            goto LABEL_18;
        }
      }
    }
    else
    {
      LODWORD(v21) = 0;
    }
    re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::addEmplace<re::ecs2::ImageBasedLightReceiverComponent *&>((uint64_t)v17, v21, v19, &v49, &v48);
    goto LABEL_27;
  }
  if (*v17)
  {
    v24 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                            * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
    v25 = v15 + 72 * v10;
    v26 = (v24 ^ (v24 >> 31)) % *(unsigned int *)(v25 + 48);
    v27 = *(_QWORD *)(v25 + 32);
    v28 = *(unsigned int *)(v27 + 4 * v26);
    if ((_DWORD)v28 != 0x7FFFFFFF)
    {
      v29 = v15 + 72 * v16;
      v32 = *(_QWORD *)(v29 + 40);
      v30 = (uint64_t *)(v29 + 40);
      v31 = v32;
      v33 = v32 + 32 * v28;
      if (*(re::ecs2::Entity **)(v33 + 16) == a2)
      {
        *(_DWORD *)(v27 + 4 * v26) = *(_DWORD *)(v33 + 8) & 0x7FFFFFFF;
LABEL_40:
        v42 = *v30;
        v43 = *v30 + 32 * v28;
        v46 = *(_DWORD *)(v43 + 8);
        v45 = (int *)(v43 + 8);
        v44 = v46;
        if (v46 < 0)
        {
          *v45 = v44 & 0x7FFFFFFF;
          v42 = *v30;
          v44 = *(_DWORD *)(*v30 + 32 * v28 + 8);
        }
        v47 = v15 + 72 * v16;
        *(_DWORD *)(v42 + 32 * v28 + 8) = *(_DWORD *)(v47 + 60) | v44 & 0x80000000;
        *(_DWORD *)(v47 + 60) = v28;
        --*(_DWORD *)(v47 + 52);
        goto LABEL_27;
      }
      while (1)
      {
        v34 = v28;
        v28 = *(_DWORD *)(v31 + 32 * v28 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v28 == 0x7FFFFFFF)
          break;
        v35 = v31 + 32 * v28;
        if (*(re::ecs2::Entity **)(v35 + 16) == a2)
        {
          *(_DWORD *)(v31 + 32 * v34 + 8) = *(_DWORD *)(v31 + 32 * v34 + 8) & 0x80000000 | *(_DWORD *)(v35 + 8) & 0x7FFFFFFF;
          goto LABEL_40;
        }
      }
    }
  }
LABEL_28:
  v36 = *((_QWORD *)a2 + 41);
  if (v36)
  {
    v37 = (unint64_t *)*((_QWORD *)a2 + 43);
    v38 = 8 * v36;
    do
    {
      v39 = *v37;
      if (*v37)
        v40 = (id)(v39 + 8);
      v41 = (re::ecs2::ImageBasedLightReceiverComponent **)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v17, v39);
      if (!v41 || *v41 == a3)
        re::ecs2::ImageBasedLightReceiverManager::updateEntityToIBLReceiverComponentMap(this, (re::ecs2::Entity *)v39, a3, a4);
      if (v39)

      ++v37;
      v38 -= 8;
    }
    while (v38);
  }
}

char *`anonymous namespace'::getResolvedIBLComponent(id *this, re::ecs2::ImageBasedLightReceiverComponent *a2, const re::ecs2::Scene *a3)
{
  char *result;

  result = re::ecs2::EntityHandle::resolve(this + 4, (uint64_t)a2);
  if (result)
  {
    if ((result[288] & 1) != 0)
      return (char *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(result + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    else
      return 0;
  }
  return result;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::addOrUpdateIBLComponentCache(uint64_t this, re::ecs2::ImageBasedLightComponent *a2, re::ecs2::ImageBasedLightReceiverComponent *a3, re::ecs2::Scene *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  _BYTE v17[16];

  if (!*((_QWORD *)a2 + 163))
  {
    v7 = this;
    LODWORD(v8) = 0x7FFFFFFF;
    if (*(_QWORD *)(this + 56))
    {
      v9 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * ((unint64_t)a4 ^ ((unint64_t)a4 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                             * ((unint64_t)a4 ^ ((unint64_t)a4 >> 30))) >> 27));
      v10 = *(unsigned int *)(*(_QWORD *)(this + 64) + 4 * ((v9 ^ (v9 >> 31)) % *(unsigned int *)(this + 80)));
      if ((_DWORD)v10 != 0x7FFFFFFF)
      {
        v11 = *(_QWORD *)(this + 72);
        if (*(re::ecs2::Scene **)(v11 + 80 * v10 + 16) == a4)
        {
          LODWORD(v8) = v10;
        }
        else
        {
          v8 = v10;
          while (1)
          {
            LODWORD(v8) = *(_DWORD *)(v11 + 80 * v8 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v8 == 0x7FFFFFFF)
              break;
            if (*(re::ecs2::Scene **)(v11 + 80 * v8 + 16) == a4)
              goto LABEL_11;
          }
          LODWORD(v8) = 0x7FFFFFFF;
        }
      }
    }
LABEL_11:
    this = re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::indexOf((uint64_t)v17, *(_QWORD *)(this + 72) + 80 * v8 + 24, (uint64_t)a2);
    if (!v17[0])
    {
      if (*(_QWORD *)(v7 + 56))
      {
        v12 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * ((unint64_t)a4 ^ ((unint64_t)a4 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                                * ((unint64_t)a4 ^ ((unint64_t)a4 >> 30))) >> 27));
        v13 = (v12 ^ (v12 >> 31)) % *(unsigned int *)(v7 + 80);
        v14 = *(_QWORD *)(v7 + 72);
        v15 = *(unsigned int *)(*(_QWORD *)(v7 + 64) + 4 * v13);
        v16 = 0x7FFFFFFF;
        if ((_DWORD)v15 != 0x7FFFFFFF)
        {
          if (*(re::ecs2::Scene **)(v14 + 80 * v15 + 16) == a4)
          {
LABEL_17:
            v16 = v15;
          }
          else
          {
            while (1)
            {
              LODWORD(v15) = *(_DWORD *)(v14 + 80 * v15 + 8) & 0x7FFFFFFF;
              v16 = 0x7FFFFFFF;
              if ((_DWORD)v15 == 0x7FFFFFFF)
                break;
              if (*(re::ecs2::Scene **)(v14 + 80 * v15 + 16) == a4)
                goto LABEL_17;
            }
          }
        }
      }
      else
      {
        v14 = *(_QWORD *)(v7 + 72);
        v16 = 0x7FFFFFFF;
      }
      this = re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::addUninitialized(v14 + 80 * v16 + 24);
      *(_QWORD *)this = a2;
    }
  }
  ++*((_QWORD *)a2 + 163);
  *((_QWORD *)a3 + 7) = a2;
  return this;
}

uint64_t re::ecs2::ImageBasedLightReceiverManager::removeIBLComponentCache(uint64_t this, re::ecs2::ImageBasedLightComponent *a2, re::ecs2::Scene *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12[8];
  unint64_t v13[126];

  v3 = *((_QWORD *)a2 + 163) - 1;
  *((_QWORD *)a2 + 163) = v3;
  if (!v3)
  {
    v6 = this;
    v12[0] = 0;
    re::Optional<re::MaterialParameterBlock>::operator=((unsigned __int8 *)a2 + 152, v12);
    if (v12[0])
      (*(void (**)(unint64_t *))v13[0])(v13);
    LODWORD(v7) = 0x7FFFFFFF;
    if (*(_QWORD *)(v6 + 56))
    {
      v8 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * ((unint64_t)a3 ^ ((unint64_t)a3 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                             * ((unint64_t)a3 ^ ((unint64_t)a3 >> 30))) >> 27));
      v9 = *(unsigned int *)(*(_QWORD *)(v6 + 64) + 4 * ((v8 ^ (v8 >> 31)) % *(unsigned int *)(v6 + 80)));
      if ((_DWORD)v9 != 0x7FFFFFFF)
      {
        v10 = *(_QWORD *)(v6 + 72);
        if (*(re::ecs2::Scene **)(v10 + 80 * v9 + 16) == a3)
        {
          LODWORD(v7) = v9;
        }
        else
        {
          v7 = v9;
          while (1)
          {
            LODWORD(v7) = *(_DWORD *)(v10 + 80 * v7 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v7 == 0x7FFFFFFF)
              break;
            if (*(re::ecs2::Scene **)(v10 + 80 * v7 + 16) == a3)
              goto LABEL_13;
          }
          LODWORD(v7) = 0x7FFFFFFF;
        }
      }
    }
LABEL_13:
    v11 = *(_QWORD *)(v6 + 72) + 80 * v7 + 24;
    this = re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::indexOf((uint64_t)v12, v11, (uint64_t)a2);
    if (v12[0])
      return re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::removeAt(v11, v13[0]);
  }
  return this;
}

void re::ecs2::ImageBasedLightReceiverManager::~ImageBasedLightReceiverManager(re::ecs2::ImageBasedLightReceiverManager *this)
{
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13);
  re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7);
  re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1);
}

{
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13);
  re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 7);
  re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)this + 1);
  JUMPOUT(0x2276933B8);
}

void re::MaterialParameterBlock::~MaterialParameterBlock(re::MaterialParameterBlock *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24ED67810;
  re::MaterialParameterBlock::deinit(this);
  v2 = *((_QWORD *)this + 124);
  if (v2)
  {

    *((_QWORD *)this + 124) = 0;
  }
  re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit((uint64_t *)this + 111);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 824);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 760);
  re::HashBrown<re::WeakStringID,re::WeakStringID,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakStringID>,false>::deinit((uint64_t)this + 696);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 632);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 568);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 504);
  re::HashBrown<re::WeakStringID,re::WeakParameterBinding,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::WeakParameterBinding>,false>::deinit((uint64_t)this + 440);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 376);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 312);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 248);
  re::HashBrown<re::WeakStringID,unsigned char,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<unsigned char>,false>::deinit((uint64_t)this + 184);
  re::DynamicArray<NS::SharedPtr<MTL::SamplerState>>::deinit((uint64_t)this + 144);
  re::DynamicArray<re::BufferSlice>::deinit((uint64_t)this + 104);
  re::DynamicArray<re::TextureHandle>::deinit((uint64_t)this + 64);
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    if (*((_QWORD *)this + 7))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 4) = 0;
    *((_QWORD *)this + 5) = 0;
    *((_QWORD *)this + 3) = 0;
    ++*((_DWORD *)this + 12);
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::MaterialParameterBlock::~MaterialParameterBlock(this);
  JUMPOUT(0x2276933B8);
}

double re::HashTable<unsigned long,re::HashTable<unsigned long,unsigned long,re::PrecalculatedHash,re::EqualTo<unsigned long>,false,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::HashTable<re::internal::SerializeFuncKey,BOOL (*)(re::Serializer<re::EncoderOPACK<re::DynamicArrayBufferedOutputStream>> &,char const*,int,void *,re::TypeInfo const&,re::TypeInfo const&,BOOL),re::internal::HashSerializeFuncKey,re::EqualTo<re::internal::SerializeFuncKey>,false,true>::deinit((uint64_t *)(v6 + 24));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 72;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED675A8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED675A8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED67600;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED67600;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED67658;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED67658;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED676B0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED676B0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED67708;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED67708;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED67760;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED67760;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED677B8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED677B8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightReceiverManager,REEventHandlerResult (re::ecs2::ImageBasedLightReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

double re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 80;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

uint64_t re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::EntryWithHash::free(uint64_t result)
{
  int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(result + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(result + 8) = v1 & 0x7FFFFFFF;
    v2 = result + 24;
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit(result + 24);
    return re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v2);
  }
  return result;
}

double re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)(v6 + 24));
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 72;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  double result;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(_QWORD *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v29, v13, v12);
          v15 = *(_OWORD *)v29;
          *(_OWORD *)v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v29[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v29[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v29[24];
          *(_OWORD *)&v29[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 72;
              --v20;
            }
            while (v20);
          }
          re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)v29);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 72 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 72 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 72 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 16) = *a4;
  v25 = *(_QWORD *)(a1 + 16) + 72 * v9;
  *(_DWORD *)(v25 + 56) = 0;
  *(_OWORD *)(v25 + 40) = 0u;
  *(_OWORD *)(v25 + 24) = 0u;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v25 + 60) = 0x7FFFFFFFLL;
  *(_QWORD *)(v25 + 24) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  v27 = *(_QWORD *)(v25 + 32);
  *(_QWORD *)(v25 + 32) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = v27;
  v28 = *(_QWORD *)(v25 + 40);
  *(_QWORD *)(v25 + 40) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v28;
  LODWORD(v28) = *(_DWORD *)(v25 + 48);
  *(_DWORD *)(v25 + 48) = *(_DWORD *)(a5 + 24);
  *(_DWORD *)(a5 + 24) = v28;
  LODWORD(v28) = *(_DWORD *)(v25 + 52);
  *(_DWORD *)(v25 + 52) = *(_DWORD *)(a5 + 28);
  *(_DWORD *)(a5 + 28) = v28;
  LODWORD(v28) = *(_DWORD *)(v25 + 56);
  *(_DWORD *)(v25 + 56) = *(_DWORD *)(a5 + 32);
  *(_DWORD *)(a5 + 32) = v28;
  LODWORD(v28) = *(_DWORD *)(v25 + 60);
  *(_DWORD *)(v25 + 60) = *(_DWORD *)(a5 + 36);
  *(_DWORD *)(a5 + 36) = v28;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  signed int v22;
  _BYTE v23[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(_QWORD *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v23, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v23;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)v23 = v5;
      *(_QWORD *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = DWORD1(v9);
        v13 = v7;
        v14 = (_QWORD *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v14 - 1) & 0x80000000) != 0)
          {
            v15 = *(v14 - 2);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(a1, (2 * v12));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 32 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 32 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 32 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v18 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v18) = v15;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v18 + 16) = *v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v18 + 24) = v14[1];
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v17) = v18;
            v12 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v12;
          }
          ++v11;
          v14 += 4;
        }
        while (v11 < v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2)
      v22 = a2;
    else
      v22 = 3;
  }
}

uint64_t re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v31, 0, 36);
          *(_QWORD *)&v31[36] = 0x7FFFFFFFLL;
          re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::init((uint64_t)v31, v13, v12);
          v15 = *(_OWORD *)v31;
          *(_OWORD *)v31 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v31[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v31[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v31[24];
          *(_OWORD *)&v31[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v31[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 80;
              --v20;
            }
            while (v20);
          }
          re::HashTable<re::ecs2::Scene const*,re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)v31);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 80 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 80 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 80 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 80 * v9 + 16) = *a4;
  v25 = *(_QWORD *)(a1 + 16);
  v26 = v25 + 80 * v9;
  *(_QWORD *)(v26 + 24) = 0;
  *(_QWORD *)(v26 + 32) = 0;
  v26 += 24;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 40) = 0;
  v27 = a2;
  *(_QWORD *)(v26 + 24) = 0;
  *(_DWORD *)(v26 + 48) = 0;
  *(_QWORD *)&v31[24] = 0;
  *(_QWORD *)&v31[32] = 0;
  *(_OWORD *)v31 = 0uLL;
  *(_DWORD *)(v26 + 16) = 3;
  *(_DWORD *)&v31[16] = 3;
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(v26, a5);
  re::DynamicOverflowArray<RESubscriptionHandle *,2ul>::operator=(a5, (uint64_t)v31);
  result = *(_QWORD *)v31;
  if (*(_QWORD *)v31 && (v31[16] & 1) == 0)
    result = (*(uint64_t (**)(void))(**(_QWORD **)v31 + 40))();
  v29 = v25 + 80 * v9;
  v30 = *(_QWORD *)(v29 + 64);
  *(_QWORD *)(v29 + 64) = *(_QWORD *)(a5 + 40);
  *(_QWORD *)(a5 + 40) = v30;
  ++*(_DWORD *)(v29 + 72);
  ++*(_DWORD *)(a5 + 48);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v27) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::addEmplace<re::ecs2::ImageBasedLightReceiverComponent *&>(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    v12 = *(_DWORD *)(v11 + 32 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v12 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v11 + 32 * v9 + 8) = v12 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 16) = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v9 + 24) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

uint64_t re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::indexOf(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)(a2 + 40);
  if (v3)
  {
    v4 = 0;
    while (1)
    {
      if (*(_QWORD *)(a2 + 8) <= v4 >> 5)
      {
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v5 = a2 + 24;
      if ((*(_BYTE *)(a2 + 16) & 1) == 0)
        v5 = *(_QWORD *)(a2 + 32);
      if (*(_QWORD *)(*(_QWORD *)(v5 + 8 * (v4 >> 5)) + 8 * (v4 & 0x1F)) == a3)
        break;
      if (v3 == ++v4)
        goto LABEL_11;
    }
  }
  else
  {
    v4 = 0;
  }
  if (v4 == v3)
  {
LABEL_11:
    v6 = 0;
  }
  else
  {
    *(_QWORD *)(result + 8) = v4;
    v6 = 1;
  }
  *(_BYTE *)result = v6;
  return result;
}

uint64_t re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 32 * v3)
  {
    re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::setBucketsCapacity((_QWORD *)a1, (v2 + 32) >> 5);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 5)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 5));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 8 * (v2 & 0x1F);
}

_QWORD *re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 256, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
    re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, a2);
    *((_DWORD *)v3 + 4) += 2;
    v3[5] = 0;
    result = (_QWORD *)re::BucketArray<re::ecs2::ImageBasedLightComponent *,32ul>::setBucketsCapacity(v3, a2);
    ++*((_DWORD *)v3 + 12);
  }
  return result;
}

re::ecs2::ShadowPlaneTracking *re::ecs2::ShadowPlaneTracking::ShadowPlaneTracking(re::ecs2::ShadowPlaneTracking *this)
{
  char *v2;
  _QWORD v4[2];
  _QWORD v5[5];

  v5[4] = *MEMORY[0x24BDAC8D0];
  v2 = (char *)this + 32;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 32) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *(_QWORD *)((char *)this + 132) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_DWORD *)this + 44) = 0;
  *(_QWORD *)((char *)this + 180) = 0x7FFFFFFFLL;
  v5[0] = re::ecs2::ComponentImpl<re::ecs2::AnchorShadowMarker,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[1] = re::ecs2::ComponentImpl<re::ecs2::AnchorComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[2] = re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v5[3] = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v4[0] = v5;
  v4[1] = 4;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=(this, (uint64_t)v4);
  return this;
}

double re::DataArray<re::ecs2::ShadowPlaneInfo>::clear(_QWORD *a1)
{
  unint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  double result;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  __int16 v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v11 = a1;
  if (*((_DWORD *)a1 + 10))
  {
    LODWORD(v12) = 0;
    if (!a1[2])
      goto LABEL_27;
    v3 = a1;
    if (!**(_DWORD **)(a1[4] + 8))
    {
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v11);
      v3 = v11;
    }
  }
  else
  {
    LODWORD(v12) = -1;
    v3 = a1;
  }
  v11 = v3;
  v4 = (unsigned __int16)v12;
  if (v3 != a1 || ((unsigned __int16)v12 == 0xFFFFLL ? (v5 = (v12 & 0xFFFF0000) == 4294901760) : (v5 = 0), !v5))
  {
    v6 = WORD1(v12);
    do
    {
      v7 = v3[2];
      if (v7 <= v6)
        goto LABEL_26;
      re::DataArray<re::ecs2::ShadowPlaneInfo>::destroy((uint64_t)a1, ((unint64_t)(*(_DWORD *)(*(_QWORD *)(v3[4] + 16 * v6 + 8) + 4 * v4) & 0xFFFFFF) << 32) | (v6 << 16) | v4);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v11);
      v3 = v11;
      v4 = (unsigned __int16)v12;
      v6 = WORD1(v12);
    }
    while (v11 != a1 || (unsigned __int16)v12 != 0xFFFFLL || WORD1(v12) != 0xFFFFLL);
  }
  v8 = a1[2];
  v6 = v8 - 1;
  if (v8 != 1)
  {
    v7 = 16 * v8 - 16;
    while (v8 > v6)
    {
      v9 = (_QWORD *)(a1[4] + v7);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, *v9);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, v9[1]);
      v1 = a1[2];
      if (v1 <= v6)
        goto LABEL_25;
      v8 = v1 - 1;
      if (v1 - 1 > v6)
      {
        *(_OWORD *)(a1[4] + v7) = *(_OWORD *)(a1[4] + 16 * v1 - 16);
        v8 = a1[2] - 1;
      }
      a1[2] = v8;
      ++*((_DWORD *)a1 + 6);
      v7 -= 16;
      if (!--v6)
        goto LABEL_23;
    }
    v11 = 0;
    v26 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v14 = 136315906;
    v15 = "operator[]";
    v16 = 1024;
    v17 = 789;
    v18 = 2048;
    v19 = v6;
    v20 = 2048;
    v21 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_25:
    v11 = 0;
    v26 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v14 = 136315906;
    v15 = "removeAt";
    v16 = 1024;
    v17 = 931;
    v18 = 2048;
    v19 = v6;
    v20 = 2048;
    v21 = v1;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_26:
    v13 = 0;
    v26 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v14 = 136315906;
    v15 = "operator[]";
    v16 = 1024;
    v17 = 797;
    v18 = 2048;
    v19 = v6;
    v20 = 2048;
    v21 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_27:
    v13 = 0;
    v26 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v14 = 136315906;
    v15 = "operator[]";
    v16 = 1024;
    v17 = 797;
    v18 = 2048;
    v19 = 0;
    v20 = 2048;
    v21 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_23:
  result = NAN;
  a1[6] = 0xFFFFFFFF00000000;
  return result;
}

BOOL re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 40 * v3 + 16) == a2)
    return 1;
  do
  {
    LODWORD(v3) = *(_DWORD *)(v5 + 40 * v3 + 8) & 0x7FFFFFFF;
    result = (_DWORD)v3 != 0x7FFFFFFF;
  }
  while ((_DWORD)v3 != 0x7FFFFFFF && *(_QWORD *)(v5 + 40 * v3 + 16) != a2);
  return result;
}

uint64_t re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 40 * v3 + 16) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 40 * v3 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v5 + 40 * v3 + 16) == a2)
        return v5 + 40 * v3 + 24;
    }
    return 0;
  }
  return v5 + 40 * v3 + 24;
}

void re::ecs2::ShadowPlaneTracking::invalidatePlanesForSubtree(re::ecs2::ShadowPlaneTracking *this, const re::ecs2::Entity *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int *v31;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  _BYTE v56[128];

  if (*((_DWORD *)this + 43))
  {
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v56);
    v50[0] = 0;
    v50[1] = 0;
    v51 = 1;
    v53 = 0;
    v54 = 0;
    v52 = 0;
    v55 = 0;
    re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v50, (uint64_t)v56, 1uLL);
    *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v50) = a2;
    v4 = v54;
    if (v54)
    {
      while (1)
      {
        v5 = *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v50, v4 - 1);
        re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v50, --v54);
        ++v55;
        v6 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 144, v5);
        if (v6)
          break;
LABEL_41:
        v46 = *(_QWORD *)(v5 + 328);
        if (v46)
        {
          v47 = *(uint64_t **)(v5 + 344);
          v48 = 8 * v46;
          do
          {
            v49 = *v47++;
            *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v50) = v49;
            v48 -= 8;
          }
          while (v48);
        }
        v4 = v54;
        if (!v54)
          goto LABEL_45;
      }
      v7 = v6;
      if ((*(_DWORD *)(v6 + 4) & 0xFFFFFF) == 0)
        goto LABEL_31;
      v8 = re::DataArray<re::ecs2::ShadowPlaneInfo>::tryGet((uint64_t)this + 32, *(_QWORD *)v6);
      if (!v8)
        goto LABEL_31;
      v9 = *(_DWORD *)(v8 + 112);
      if (*(_BYTE *)(v7 + 8))
        *(_DWORD *)(v8 + 112) = --v9;
      if (v9)
      {
LABEL_31:
        if (*((_QWORD *)this + 18))
        {
          v34 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v5 ^ (v5 >> 30))) >> 27));
          v35 = (v34 ^ (v34 >> 31)) % *((unsigned int *)this + 42);
          v36 = *((_QWORD *)this + 19);
          v37 = *(unsigned int *)(v36 + 4 * v35);
          if ((_DWORD)v37 != 0x7FFFFFFF)
          {
            v38 = *((_QWORD *)this + 20);
            if (*(_QWORD *)(v38 + 40 * v37 + 16) == v5)
            {
              *(_DWORD *)(v36 + 4 * v35) = *(_DWORD *)(v38 + 40 * v37 + 8) & 0x7FFFFFFF;
LABEL_38:
              v40 = *((_QWORD *)this + 20);
              v41 = v40 + 40 * v37;
              v44 = *(_DWORD *)(v41 + 8);
              v43 = (int *)(v41 + 8);
              v42 = v44;
              if (v44 < 0)
              {
                *v43 = v42 & 0x7FFFFFFF;
                v40 = *((_QWORD *)this + 20);
                v42 = *(_DWORD *)(v40 + 40 * v37 + 8);
              }
              *(_DWORD *)(v40 + 40 * v37 + 8) = *((_DWORD *)this + 45) | v42 & 0x80000000;
              --*((_DWORD *)this + 43);
              v45 = *((_DWORD *)this + 46) + 1;
              *((_DWORD *)this + 45) = v37;
              *((_DWORD *)this + 46) = v45;
            }
            else
            {
              while (1)
              {
                v39 = v37;
                v37 = *(_DWORD *)(v38 + 40 * v37 + 8) & 0x7FFFFFFF;
                if (v37 == 0x7FFFFFFF)
                  break;
                if (*(_QWORD *)(v38 + 40 * v37 + 16) == v5)
                {
                  *(_DWORD *)(v38 + 40 * v39 + 8) = *(_DWORD *)(v38 + 40 * v39 + 8) & 0x80000000 | *(_DWORD *)(v38 + 40 * v37 + 8) & 0x7FFFFFFF;
                  goto LABEL_38;
                }
              }
            }
          }
        }
        goto LABEL_41;
      }
      if (*((_QWORD *)this + 12))
      {
        v10 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)v8 ^ (*(_QWORD *)v8 >> 30));
        v11 = ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) ^ ((0x94D049BB133111EBLL * (v10 ^ (v10 >> 27))) >> 31))
            % *((unsigned int *)this + 30);
        v12 = *((_QWORD *)this + 14);
        v13 = *(unsigned int *)(*((_QWORD *)this + 13) + 4 * v11);
        if ((_DWORD)v13 != 0x7FFFFFFF)
        {
          while (*(_QWORD *)(v12 + 72 * v13 + 16) != *(_QWORD *)v8)
          {
            v13 = *(_DWORD *)(v12 + 72 * v13 + 8) & 0x7FFFFFFF;
            if (v13 == 0x7FFFFFFF)
              goto LABEL_15;
          }
          goto LABEL_16;
        }
      }
      else
      {
        v12 = *((_QWORD *)this + 14);
      }
LABEL_15:
      LODWORD(v13) = 0x7FFFFFFF;
LABEL_16:
      v14 = v12 + 72 * v13;
      v15 = *(_QWORD *)v7;
      v16 = *(unsigned int *)(v14 + 48);
      if ((_DWORD)v16)
      {
        v17 = v14 + 24;
        v18 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v15 & 0xFFFFFF)) ^ ((0xBF58476D1CE4E5B9 * (v15 & 0xFFFFFF)) >> 27));
        v19 = (v18 ^ (v18 >> 31)) % v16;
        v20 = *(_QWORD *)(v17 + 8);
        v21 = *(unsigned int *)(v20 + 4 * v19);
        if ((_DWORD)v21 != 0x7FFFFFFF)
        {
          v22 = *(_QWORD *)(v17 + 16);
          v23 = 0x7FFFFFFFLL;
          while (1)
          {
            v24 = v22 + 24 * v21;
            v26 = *(unsigned __int16 *)(v24 + 16);
            v25 = v24 + 16;
            if (v26 == (unsigned __int16)v15
              && *(unsigned __int16 *)(v25 + 2) == WORD1(v15)
              && ((*(_DWORD *)(v22 + 24 * v21 + 20) ^ HIDWORD(v15)) & 0xFFFFFF) == 0)
            {
              break;
            }
            v23 = v21;
            v21 = *(_DWORD *)(v22 + 24 * v21 + 8) & 0x7FFFFFFF;
            if (v21 == 0x7FFFFFFF)
              goto LABEL_30;
          }
          v27 = *(_DWORD *)(v22 + 24 * v21 + 8) & 0x7FFFFFFF;
          if (v23 == 0x7FFFFFFF)
            *(_DWORD *)(v20 + 4 * v19) = v27;
          else
            *(_DWORD *)(v22 + 24 * v23 + 8) = *(_DWORD *)(v22 + 24 * v23 + 8) & 0x80000000 | v27;
          v28 = *(_QWORD *)(v17 + 16);
          v29 = v28 + 24 * v21;
          v32 = *(_DWORD *)(v29 + 8);
          v31 = (int *)(v29 + 8);
          v30 = v32;
          if (v32 < 0)
          {
            *v31 = v30 & 0x7FFFFFFF;
            v28 = *(_QWORD *)(v17 + 16);
            v30 = *(_DWORD *)(v28 + 24 * v21 + 8);
          }
          *(_DWORD *)(v28 + 24 * v21 + 8) = *(_DWORD *)(v17 + 36) | v30 & 0x80000000;
          --*(_DWORD *)(v17 + 28);
          v33 = *(_DWORD *)(v17 + 40) + 1;
          *(_DWORD *)(v17 + 36) = v21;
          *(_DWORD *)(v17 + 40) = v33;
          v15 = *(_QWORD *)v7;
        }
      }
LABEL_30:
      re::DataArray<re::ecs2::ShadowPlaneInfo>::destroy((uint64_t)this + 32, v15);
      goto LABEL_31;
    }
LABEL_45:
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v50);
    if (v50[0])
    {
      if ((v51 & 1) == 0)
        (*(void (**)(void))(*(_QWORD *)v50[0] + 40))();
    }
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v56);
  }
}

unint64_t re::DataArray<re::ecs2::ShadowPlaneInfo>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  BOOL v6;

  v2 = *(_QWORD *)(a1 + 16);
  if (WORD1(a2) < v2
    && ((unsigned __int16)(v2 - 1) != WORD1(a2) ? (v3 = *(_DWORD *)(a1 + 44)) : (v3 = *(_DWORD *)(a1 + 48)),
        (unsigned __int16)a2 < v3
     && ((v4 = *(_QWORD *)(a1 + 32),
          (v5 = *(_DWORD *)(*(_QWORD *)(v4 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2)) != 0)
       ? (v6 = v5 == (HIDWORD(a2) & 0xFFFFFF))
       : (v6 = 0),
         v6)))
  {
    return *(_QWORD *)(v4 + 16 * WORD1(a2)) + ((unint64_t)(unsigned __int16)a2 << 7);
  }
  else
  {
    return 0;
  }
}

void re::DataArray<re::ecs2::ShadowPlaneInfo>::destroy(uint64_t a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  unint64_t v5;
  _DWORD *v6;

  v2 = a2;
  v4 = a2 >> 16;
  v5 = re::DataArray<re::ecs2::ShadowPlaneInfo>::tryGet(a1, a2 & 0xFFFFFFFF00000000 | ((unint64_t)WORD1(a2) << 16) | (unsigned __int16)a2);
  if (v5)
  {
    v6 = (_DWORD *)v5;
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(v5 + 64));
    if (*(_QWORD *)(a1 + 16) <= (unint64_t)HIWORD(v2))
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * HIWORD(v2) + 8) + 4 * (unsigned __int16)v2) = 0;
    *v6 = *(_DWORD *)(a1 + 52);
    *(_WORD *)(a1 + 52) = v2;
    *(_WORD *)(a1 + 54) = v4;
    --*(_DWORD *)(a1 + 40);
  }
}

void re::ecs2::ProjectiveShadowClusterTracking::removeFromCluster(re::ecs2::ProjectiveShadowClusterTracking *this, const re::ecs2::Entity *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int *v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int *v59;
  int v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int *v89;
  int v90;
  _DWORD *v91;
  unsigned int v92;
  int v93;

  v4 = (_QWORD *)((char *)this + 112);
  v5 = re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)this + 112, (unint64_t)a2);
  if (v5)
  {
    v6 = (uint64_t *)v5;
    v7 = re::ecs2::EntityComponentCollection::get((const re::ecs2::Entity *)((char *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v8 = re::DataArray<re::ecs2::ProjectiveShadowClusterInfo>::get((uint64_t)this, *v6);
    if (*(_QWORD *)(v8 + 32))
    {
      v9 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v7 ^ (v7 >> 30))) >> 27));
      v10 = (v9 ^ (v9 >> 31)) % *(unsigned int *)(v8 + 56);
      v11 = *(_QWORD *)(v8 + 40);
      v12 = *(unsigned int *)(v11 + 4 * v10);
      if ((_DWORD)v12 != 0x7FFFFFFF)
      {
        v13 = *(_QWORD *)(v8 + 48);
        if (*(_QWORD *)(v13 + 48 * v12 + 16) == v7)
        {
          *(_DWORD *)(v11 + 4 * v10) = *(_DWORD *)(v13 + 48 * v12 + 8) & 0x7FFFFFFF;
LABEL_9:
          v15 = *(_QWORD *)(v8 + 48);
          v16 = v15 + 48 * v12;
          v19 = *(_DWORD *)(v16 + 8);
          v18 = (int *)(v16 + 8);
          v17 = v19;
          if (v19 < 0)
          {
            *v18 = v17 & 0x7FFFFFFF;
            v15 = *(_QWORD *)(v8 + 48);
            v17 = *(_DWORD *)(v15 + 48 * v12 + 8);
          }
          v20 = *(_DWORD *)(v8 + 72);
          *(_DWORD *)(v15 + 48 * v12 + 8) = *(_DWORD *)(v8 + 68) | v17 & 0x80000000;
          --*(_DWORD *)(v8 + 60);
          *(_DWORD *)(v8 + 68) = v12;
          *(_DWORD *)(v8 + 72) = v20 + 1;
        }
        else
        {
          while (1)
          {
            v14 = v12;
            LODWORD(v12) = *(_DWORD *)(v13 + 48 * v12 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v12 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v13 + 48 * v12 + 16) == v7)
            {
              *(_DWORD *)(v13 + 48 * v14 + 8) = *(_DWORD *)(v13 + 48 * v14 + 8) & 0x80000000 | *(_DWORD *)(v13 + 48 * v12 + 8) & 0x7FFFFFFF;
              goto LABEL_9;
            }
          }
        }
      }
    }
    if (*v4)
    {
      v21 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                              * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
      v22 = (v21 ^ (v21 >> 31)) % *((unsigned int *)this + 34);
      v23 = *((_QWORD *)this + 15);
      v24 = *(unsigned int *)(v23 + 4 * v22);
      if ((_DWORD)v24 != 0x7FFFFFFF)
      {
        v25 = *((_QWORD *)this + 16);
        v26 = v25 + 32 * v24;
        if (*(const re::ecs2::Entity **)(v26 + 16) == a2)
        {
          *(_DWORD *)(v23 + 4 * v22) = *(_DWORD *)(v26 + 8) & 0x7FFFFFFF;
LABEL_19:
          v29 = *((_QWORD *)this + 16);
          v30 = v29 + 32 * v24;
          v33 = *(_DWORD *)(v30 + 8);
          v32 = (int *)(v30 + 8);
          v31 = v33;
          if (v33 < 0)
          {
            *v32 = v31 & 0x7FFFFFFF;
            v29 = *((_QWORD *)this + 16);
            v31 = *(_DWORD *)(v29 + 32 * v24 + 8);
          }
          v34 = *((_DWORD *)this + 38);
          *(_DWORD *)(v29 + 32 * v24 + 8) = *((_DWORD *)this + 37) | v31 & 0x80000000;
          --*((_DWORD *)this + 35);
          *((_DWORD *)this + 37) = v24;
          *((_DWORD *)this + 38) = v34 + 1;
        }
        else
        {
          while (1)
          {
            v27 = v24;
            v24 = *(_DWORD *)(v25 + 32 * v24 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v24 == 0x7FFFFFFF)
              break;
            v28 = v25 + 32 * v24;
            if (*(const re::ecs2::Entity **)(v28 + 16) == a2)
            {
              *(_DWORD *)(v25 + 32 * v27 + 8) = *(_DWORD *)(v25 + 32 * v27 + 8) & 0x80000000 | *(_DWORD *)(v28 + 8) & 0x7FFFFFFF;
              goto LABEL_19;
            }
          }
        }
      }
    }
    if (!*(_DWORD *)(v8 + 60))
    {
      LODWORD(v35) = 0x7FFFFFFF;
      if (*((_QWORD *)this + 20))
      {
        v36 = *(_QWORD *)v8;
        v37 = 0xBF58476D1CE4E5B9 * (*(_QWORD *)v8 ^ (*(_QWORD *)v8 >> 30));
        v38 = *(unsigned int *)(*((_QWORD *)this + 21)
                              + 4
                              * (((0x94D049BB133111EBLL * (v37 ^ (v37 >> 27))) ^ ((0x94D049BB133111EBLL
                                                                                 * (v37 ^ (v37 >> 27))) >> 31))
                               % *((unsigned int *)this + 46)));
        if ((_DWORD)v38 != 0x7FFFFFFF)
        {
          v39 = *((_QWORD *)this + 22);
          LODWORD(v35) = v38;
          if (*(_QWORD *)(v39 + 72 * v38 + 16) != v36)
          {
            v35 = v38;
            while (1)
            {
              LODWORD(v35) = *(_DWORD *)(v39 + 72 * v35 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v35 == 0x7FFFFFFF)
                break;
              if (*(_QWORD *)(v39 + 72 * v35 + 16) == v36)
                goto LABEL_32;
            }
            LODWORD(v35) = 0x7FFFFFFF;
          }
        }
      }
LABEL_32:
      v40 = *((_QWORD *)this + 22) + 72 * v35;
      v41 = *(unsigned int *)(v40 + 48);
      if ((_DWORD)v41)
      {
        v42 = v40 + 24;
        v43 = *v6;
        v44 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (*v6 & 0xFFFFFF)) ^ ((0xBF58476D1CE4E5B9 * (*v6 & 0xFFFFFF)) >> 27));
        v45 = (v44 ^ (v44 >> 31)) % v41;
        v46 = *(_QWORD *)(v42 + 8);
        v47 = *(unsigned int *)(v46 + 4 * v45);
        if ((_DWORD)v47 != 0x7FFFFFFF)
        {
          v48 = HIDWORD(v43);
          v49 = *(_QWORD *)(v42 + 16);
          v50 = WORD1(v43);
          v51 = 0x7FFFFFFFLL;
          while (1)
          {
            v52 = v49 + 24 * v47;
            v54 = *(unsigned __int16 *)(v52 + 16);
            v53 = v52 + 16;
            if (v54 == (unsigned __int16)*v6
              && *(unsigned __int16 *)(v53 + 2) == v50
              && ((*(_DWORD *)(v49 + 24 * v47 + 20) ^ v48) & 0xFFFFFF) == 0)
            {
              break;
            }
            v51 = v47;
            v47 = *(_DWORD *)(v49 + 24 * v47 + 8) & 0x7FFFFFFF;
            if (v47 == 0x7FFFFFFF)
              goto LABEL_46;
          }
          v55 = *(_DWORD *)(v49 + 24 * v47 + 8) & 0x7FFFFFFF;
          if (v51 == 0x7FFFFFFF)
            *(_DWORD *)(v46 + 4 * v45) = v55;
          else
            *(_DWORD *)(v49 + 24 * v51 + 8) = *(_DWORD *)(v49 + 24 * v51 + 8) & 0x80000000 | v55;
          v56 = *(_QWORD *)(v42 + 16);
          v57 = v56 + 24 * v47;
          v60 = *(_DWORD *)(v57 + 8);
          v59 = (int *)(v57 + 8);
          v58 = v60;
          if (v60 < 0)
          {
            *v59 = v58 & 0x7FFFFFFF;
            v56 = *(_QWORD *)(v42 + 16);
            v58 = *(_DWORD *)(v56 + 24 * v47 + 8);
          }
          v61 = *(_DWORD *)(v42 + 40);
          *(_DWORD *)(v56 + 24 * v47 + 8) = *(_DWORD *)(v42 + 36) | v58 & 0x80000000;
          --*(_DWORD *)(v42 + 28);
          *(_DWORD *)(v42 + 36) = v47;
          *(_DWORD *)(v42 + 40) = v61 + 1;
        }
      }
LABEL_46:
      v62 = *(_QWORD *)(v8 + 8);
      if (v62)
      {
        v63 = 0x7FFFFFFFLL;
        if (*((_QWORD *)this + 8))
        {
          v64 = *(_QWORD *)(v8 + 16);
          v65 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v64 & 0xFFFFFF)) ^ ((0xBF58476D1CE4E5B9 * (v64 & 0xFFFFFF)) >> 27));
          v66 = *(unsigned int *)(*((_QWORD *)this + 9) + 4 * ((v65 ^ (v65 >> 31)) % *((unsigned int *)this + 22)));
          if ((_DWORD)v66 != 0x7FFFFFFF)
          {
            v67 = *((_QWORD *)this + 10);
            v68 = HIDWORD(v64);
            v69 = WORD1(v64);
            v63 = 0x7FFFFFFFLL;
            while (1)
            {
              v70 = v67 + 72 * v66;
              v72 = *(unsigned __int16 *)(v70 + 16);
              v71 = v70 + 16;
              if (v72 == (unsigned __int16)*(_QWORD *)(v8 + 16)
                && *(unsigned __int16 *)(v71 + 2) == v69
                && ((*(_DWORD *)(v67 + 72 * v66 + 20) ^ v68) & 0xFFFFFF) == 0)
              {
                break;
              }
              v66 = *(_DWORD *)(v67 + 72 * v66 + 8) & 0x7FFFFFFF;
              if (v66 == 0x7FFFFFFF)
                goto LABEL_56;
            }
            v63 = v66;
          }
        }
LABEL_56:
        v73 = *((_QWORD *)this + 10);
        if (*(_QWORD *)(v73 + 72 * v63 + 24))
        {
          v74 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v62 ^ (v62 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v62 ^ (v62 >> 30))) >> 27));
          v75 = v73 + 72 * v63;
          v76 = (v74 ^ (v74 >> 31)) % *(unsigned int *)(v75 + 48);
          v77 = *(_QWORD *)(v75 + 32);
          v78 = *(unsigned int *)(v77 + 4 * v76);
          if ((_DWORD)v78 != 0x7FFFFFFF)
          {
            v79 = v73 + 72 * v63;
            v82 = *(_QWORD *)(v79 + 40);
            v80 = (uint64_t *)(v79 + 40);
            v81 = v82;
            v83 = v82 + 32 * v78;
            if (*(_QWORD *)(v83 + 16) == v62)
            {
              *(_DWORD *)(v77 + 4 * v76) = *(_DWORD *)(v83 + 8) & 0x7FFFFFFF;
LABEL_63:
              v86 = *v80;
              v87 = *v80 + 32 * v78;
              v90 = *(_DWORD *)(v87 + 8);
              v89 = (int *)(v87 + 8);
              v88 = v90;
              if (v90 < 0)
              {
                *v89 = v88 & 0x7FFFFFFF;
                v86 = *v80;
                v88 = *(_DWORD *)(*v80 + 32 * v78 + 8);
              }
              v91 = (_DWORD *)(v73 + 72 * v63);
              v92 = v88 & 0x80000000;
              v93 = v91[16];
              *(_DWORD *)(v86 + 32 * v78 + 8) = v91[15] | v92;
              --v91[13];
              v91[15] = v78;
              v91[16] = v93 + 1;
            }
            else
            {
              while (1)
              {
                v84 = v78;
                v78 = *(_DWORD *)(v81 + 32 * v78 + 8) & 0x7FFFFFFF;
                if ((_DWORD)v78 == 0x7FFFFFFF)
                  break;
                v85 = v81 + 32 * v78;
                if (*(_QWORD *)(v85 + 16) == v62)
                {
                  *(_DWORD *)(v81 + 32 * v84 + 8) = *(_DWORD *)(v81 + 32 * v84 + 8) & 0x80000000 | *(_DWORD *)(v85 + 8) & 0x7FFFFFFF;
                  goto LABEL_63;
                }
              }
            }
          }
        }
      }
      re::DataArray<re::ecs2::ProjectiveShadowClusterInfo>::destroy((uint64_t)this, *v6);
    }
  }
}

void re::DataArray<re::ecs2::ProjectiveShadowClusterInfo>::destroy(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;

  v2 = WORD1(a2);
  v3 = *(_QWORD *)(a1 + 16);
  if (WORD1(a2) < v3)
  {
    v4 = a2;
    v6 = (unsigned __int16)(v3 - 1) == WORD1(a2) ? *(_DWORD *)(a1 + 48) : *(_DWORD *)(a1 + 44);
    if ((unsigned __int16)a2 < v6)
    {
      v7 = (unsigned __int16)a2;
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(_DWORD *)(*(_QWORD *)(v8 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2);
      if (v9 && v9 == (HIDWORD(a2) & 0xFFFFFF))
      {
        v11 = *(_QWORD *)(v8 + 16 * WORD1(a2));
        if (v11)
        {
          _ZN2re9HashTableI25RERealityFileMajorVersionDv3_iNS_4HashIS1_EENS_7EqualToIS1_EELb1ELb0EE6deinitEv((uint64_t *)(v11 + 80 * (unsigned __int16)a2 + 32));
          if (*(_QWORD *)(a1 + 16) <= v2)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16 * v2 + 8) + 4 * v7) = 0;
          *(_DWORD *)(v11 + 80 * v7) = *(_DWORD *)(a1 + 52);
          *(_DWORD *)(a1 + 52) = v4;
          --*(_DWORD *)(a1 + 40);
        }
      }
    }
  }
}

void re::HashTable<re::ecs2::Entity const*,re::DataArrayHandle<re::ecs2::ProjectiveShadowClusterInfo>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addNew<re::DataArrayHandle<re::ecs2::ProjectiveShadowClusterInfo>&>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  v9 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v9 = v8 % *(unsigned int *)(a1 + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v15 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v15 + 32 * v10 + 16) == v6)
        return;
      while (1)
      {
        v10 = *(_DWORD *)(v15 + 32 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v15 + 32 * v10 + 16) == v6)
          return;
      }
    }
  }
  v11 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v11 == 0x7FFFFFFF)
  {
    v11 = *(unsigned int *)(a1 + 32);
    v12 = v11;
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      v12 = *(_DWORD *)(a1 + 32);
      v6 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v12 + 1;
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
    *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v13 + 32 * v11 + 8) = v14 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11) = v8;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 16) = v6;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 24) = *a3;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9) = v11;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
}

void re::ecs2::ProjectiveShadowReceiverManager::setShadowAnchorPrioritization(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t i;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  const re::ecs2::Entity **v25;
  uint64_t v26;
  const re::ecs2::Entity *v27;
  unsigned int v28;
  unsigned int v29;

  if (*(_DWORD *)(a1 + 32) != a2)
  {
    *(_DWORD *)(a1 + 32) = a2;
    if (*(_DWORD *)(a1 + 180))
    {
      v3 = *(unsigned int *)(a1 + 176);
      if ((_DWORD)v3)
        memset_pattern16(*(void **)(a1 + 160), &unk_2260EB7B0, 4 * v3);
      v4 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v4)
      {
        v5 = 0;
        v6 = 40 * v4;
        do
        {
          v7 = *(_QWORD *)(a1 + 168) + v5;
          v8 = *(_DWORD *)(v7 + 8);
          if (v8 < 0)
            *(_DWORD *)(v7 + 8) = v8 & 0x7FFFFFFF;
          v5 += 40;
        }
        while (v6 != v5);
      }
      *(_DWORD *)(a1 + 180) = 0;
      *(_DWORD *)(a1 + 184) = 0;
      v9 = *(_DWORD *)(a1 + 192) + 1;
      *(_DWORD *)(a1 + 188) = 0x7FFFFFFF;
      *(_DWORD *)(a1 + 192) = v9;
    }
    re::DataArray<re::ecs2::ShadowPlaneInfo>::clear((_QWORD *)(a1 + 40));
    if (*(_DWORD *)(a1 + 132))
    {
      v10 = *(unsigned int *)(a1 + 128);
      if ((_DWORD)v10)
        memset_pattern16(*(void **)(a1 + 112), &unk_2260EB7B0, 4 * v10);
      v11 = *(unsigned int *)(a1 + 136);
      if ((_DWORD)v11)
      {
        v12 = 0;
        for (i = 0; i < v11; ++i)
        {
          v14 = *(_QWORD *)(a1 + 120) + v12;
          v15 = *(_DWORD *)(v14 + 8);
          if (v15 < 0)
          {
            *(_DWORD *)(v14 + 8) = v15 & 0x7FFFFFFF;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(v14 + 24));
            v11 = *(unsigned int *)(a1 + 136);
          }
          v12 += 72;
        }
      }
      *(_DWORD *)(a1 + 132) = 0;
      *(_DWORD *)(a1 + 136) = 0;
      v16 = *(_DWORD *)(a1 + 144) + 1;
      *(_DWORD *)(a1 + 140) = 0x7FFFFFFF;
      *(_DWORD *)(a1 + 144) = v16;
    }
    v17 = *(unsigned int *)(a1 + 440);
    if ((_DWORD)v17)
    {
      v18 = 0;
      v19 = (int *)(*(_QWORD *)(a1 + 424) + 8);
      while (1)
      {
        v20 = *v19;
        v19 += 30;
        if (v20 < 0)
          break;
        if (v17 == ++v18)
        {
          LODWORD(v18) = *(_DWORD *)(a1 + 440);
          break;
        }
      }
    }
    else
    {
      LODWORD(v18) = 0;
    }
    if ((_DWORD)v17 != (_DWORD)v18)
    {
      v21 = v18;
      v22 = *(_DWORD *)(a1 + 440);
      do
      {
        v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 424) + 120 * v21 + 16) + 104);
        v24 = *(_QWORD *)(v23 + 328);
        if (v24)
        {
          v25 = *(const re::ecs2::Entity ***)(v23 + 344);
          v26 = 8 * v24;
          do
          {
            v27 = *v25++;
            re::ecs2::ProjectiveShadowReceiverManager::addDirtyPlane((re::ecs2::ProjectiveShadowReceiverManager *)a1, v27);
            v26 -= 8;
          }
          while (v26);
          v22 = *(_DWORD *)(a1 + 440);
        }
        if (v22 <= (int)v18 + 1)
          v28 = v18 + 1;
        else
          v28 = v22;
        while (1)
        {
          v21 = (v18 + 1);
          if (v28 - 1 == (_DWORD)v18)
            break;
          LODWORD(v18) = v18 + 1;
          v29 = v21;
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 424) + 120 * v21 + 8) & 0x80000000) != 0)
            goto LABEL_39;
        }
        v29 = v28;
LABEL_39:
        LODWORD(v18) = v29;
      }
      while ((_DWORD)v17 != v29);
    }
  }
}

void re::ecs2::ProjectiveShadowReceiverManager::addDirtyPlane(re::ecs2::ProjectiveShadowReceiverManager *this, const re::ecs2::Entity *a2)
{
  re::ecs2::Entity *v3;
  re::ecs2::Entity *v4;
  unint64_t v5;
  uint64_t v6;
  re::ecs2::Entity *v7;

  v7 = a2;
  if ((*((_BYTE *)a2 + 288) & 1) != 0
    && !re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains((uint64_t)this + 504, (uint64_t *)&v7))
  {
    v3 = v7;
    if (re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey((uint64_t)this + 152, (unint64_t)v7))
    {
      re::ecs2::ProjectiveShadowReceiverManager::markReceiversInSubtreeDirty(this, v3);
      re::ecs2::ShadowPlaneTracking::invalidatePlanesForSubtree((re::ecs2::ProjectiveShadowReceiverManager *)((char *)this + 8), v7);
      v3 = v7;
    }
    do
    {
      v4 = v3;
      v3 = (re::ecs2::Entity *)*((_QWORD *)v3 + 3);
    }
    while (v3);
    v5 = *((_QWORD *)v4 + 2);
    if (v5)
    {
      v6 = re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)this + 408, v5);
      if (v6)
        re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(v6 + 48, (uint64_t *)&v7);
    }
  }
}

void re::ecs2::ProjectiveShadowReceiverManager::updateProjectiveShadowReceiversState(re::ecs2::ProjectiveShadowReceiverManager *this, const re::ecs2::WorldRootProvider *a2)
{
  re::ecs2::ProjectiveShadowReceiverManager *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  id *v11;
  char *WeakRetained;
  re::ecs2::Entity *v13;
  void *v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t i;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t v56;
  float32x4_t *v57;
  uint64_t v58;
  BOOL v59;
  _BOOL4 v60;
  re::ecs2::ProjectiveShadowReceiverManager *v61;
  char v62;
  BOOL v63;
  unint64_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int32x4_t v67;
  float32x2_t v68;
  float32x2_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int32x4_t v74;
  float32x4_t v75;
  float32x4_t *v76;
  float32x4_t v77;
  int32x4_t v78;
  float32x2_t v79;
  float32x2_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  float32x4_t v93;
  int v94;
  int32x4_t v95;
  float32x2_t v96;
  float32x2_t v97;
  float32x4_t v98;
  float32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  float v102;
  float v103;
  float v104;
  float v105;
  uint64_t v106;
  unint64_t *v107;
  uint64_t v108;
  float *v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  int v116;
  int v117;
  re::ecs2::ProjectiveShadowReceiverManager *v118;
  int v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  __n128 *p_to;
  _QWORD *v126;
  float32x4_t v127;
  int v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  unint64_t v142;
  _QWORD *v143;
  unint64_t v144;
  unint64_t v145;
  re::ecs2::ProjectiveShadowReceiverManager *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  int v166;
  uint64_t v167;
  uint64_t *v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  int v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  unint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  unint64_t v193;
  uint64_t v194;
  int v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  unsigned int v207;
  uint64_t v208;
  uint64_t v209;
  __n128 v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  unint64_t v217;
  re::ecs2::ProjectiveShadowReceiverManager *v218;
  int v219;
  int v220;
  unint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  __n128 *v225;
  _QWORD *v226;
  int v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  int v238;
  unint64_t v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  unsigned int v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  int v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  int v259;
  uint64_t *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  BOOL v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unsigned int v274;
  unsigned int v275;
  _QWORD *v276;
  int v277;
  _QWORD *v278;
  unsigned int *v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _QWORD *v285;
  float32x4_t v286;
  int v287;
  unint64_t *v288;
  re::ecs2::EntityComponentCollection *v289;
  re::ecs2::EntityComponentCollection *v290;
  float v291;
  unsigned int v292;
  _QWORD *v293;
  re::ecs2::ProjectiveShadowReceiverManager *v294;
  float32x4_t v295;
  float32x4_t v296;
  _BYTE v297[7];
  uint64_t v298;
  uint64_t v299;
  int v300;
  uint64_t v301;
  uint64_t *v302;
  unint64_t v303;
  int v304;
  _QWORD v305[2];
  int v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  unint64_t v311;
  unint64_t v312;
  __n128 to;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  _BYTE v318[12];
  __int16 v319;
  int v320;
  __int16 v321;
  unint64_t v322;
  __int16 v323;
  __n128 *v324;
  uint64_t v325[6];
  __int128 v326;
  __int128 v327;
  uint64_t v328;

  v328 = *MEMORY[0x24BDAC8D0];
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear((uint64_t)this + 504);
  v4 = this;
  v5 = *((unsigned int *)this + 122);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*((_QWORD *)v4 + 59) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 6;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = v5;
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  v9 = v5;
  v294 = v4;
  if ((_DWORD)v5 != (_DWORD)v6)
  {
    v10 = v6;
    do
    {
      v11 = (id *)(*((_QWORD *)v4 + 59) + 24 * v10 + 16);
      to.n128_u64[0] = 0;
      objc_copyWeak((id *)&to, v11);
      WeakRetained = (char *)objc_loadWeakRetained((id *)&to);
      if (WeakRetained)
      {
        v14 = WeakRetained;
        re::ecs2::ProjectiveShadowReceiverManager::automaticallyRemoveReceiver((re::ecs2::ProjectiveShadowReceiverManager *)(WeakRetained - 8), v13);

      }
      objc_destroyWeak((id *)&to);
      v9 = *((_DWORD *)v294 + 122);
      if (v9 <= (int)v6 + 1)
        v15 = v6 + 1;
      else
        v15 = *((_DWORD *)v294 + 122);
      while (1)
      {
        v10 = (v6 + 1);
        if (v15 - 1 == (_DWORD)v6)
          break;
        LODWORD(v6) = v6 + 1;
        v16 = v10;
        if ((*(_DWORD *)(*((_QWORD *)v294 + 59) + 24 * v10 + 8) & 0x80000000) != 0)
          goto LABEL_18;
      }
      v16 = v15;
LABEL_18:
      LODWORD(v6) = v16;
      v4 = v294;
    }
    while ((_DWORD)v5 != v16);
  }
  if (*((_DWORD *)v4 + 121))
  {
    v17 = *((unsigned int *)v4 + 120);
    if ((_DWORD)v17)
    {
      memset_pattern16(*((void **)v4 + 58), &unk_2260EB7B0, 4 * v17);
      v4 = v294;
      v9 = *((_DWORD *)v294 + 122);
    }
    v18 = (_QWORD *)((char *)v4 + 484);
    if (v9)
    {
      v19 = 0;
      for (i = 0; i < v9; ++i)
      {
        v21 = *((_QWORD *)v4 + 59) + v19;
        v22 = *(_DWORD *)(v21 + 8);
        if (v22 < 0)
        {
          *(_DWORD *)(v21 + 8) = v22 & 0x7FFFFFFF;
          objc_destroyWeak((id *)(v21 + 16));
          v4 = v294;
          *(_QWORD *)(v21 + 16) = 0;
          v9 = *((_DWORD *)v294 + 122);
        }
        v19 += 24;
      }
    }
    *((_DWORD *)v4 + 123) = 0x7FFFFFFF;
    *v18 = 0;
    ++*((_DWORD *)v4 + 124);
  }
  v23 = *((unsigned int *)v4 + 110);
  if ((_DWORD)v23)
  {
    v24 = 0;
    v25 = (int *)(*((_QWORD *)v4 + 53) + 8);
    while (1)
    {
      v26 = *v25;
      v25 += 30;
      if (v26 < 0)
        break;
      if (v23 == ++v24)
      {
        LODWORD(v24) = *((_DWORD *)v4 + 110);
        break;
      }
    }
  }
  else
  {
    LODWORD(v24) = 0;
  }
  if ((_DWORD)v23 != (_DWORD)v24)
  {
    v27 = v24;
    v288 = (unint64_t *)((char *)v4 + 152);
    v293 = (_QWORD *)((char *)v4 + 40);
    v285 = (_QWORD *)((char *)v4 + 104);
    v279 = (unsigned int *)((char *)v4 + 200);
    v282 = (uint64_t)v4 + 312;
    v276 = (_QWORD *)((char *)v4 + 360);
    v277 = *((_DWORD *)v4 + 110);
    v278 = (_QWORD *)((char *)v4 + 264);
    while (1)
    {
      v28 = *((_QWORD *)v4 + 53) + 120 * v27;
      v29 = v28 + 72;
      v281 = v28;
      v284 = *(unsigned int *)(v28 + 104);
      v30 = 0;
      if ((_DWORD)v284)
      {
        v31 = (int *)(*(_QWORD *)(v28 + 88) + 8);
        while (1)
        {
          v32 = *v31;
          v31 += 6;
          if (v32 < 0)
            break;
          if (v284 == ++v30)
          {
            LODWORD(v30) = v284;
            break;
          }
        }
      }
      v280 = v24;
      if ((_DWORD)v284 != (_DWORD)v30)
        break;
LABEL_42:
      v33 = v281 + 24;
      re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear(v29);
      v34 = *(unsigned int *)(v281 + 56);
      if ((_DWORD)v34)
      {
        v35 = 0;
        v36 = (int *)(*(_QWORD *)(v281 + 40) + 8);
        while (1)
        {
          v37 = *v36;
          v36 += 6;
          if (v37 < 0)
            break;
          if (v34 == ++v35)
          {
            LODWORD(v35) = *(_DWORD *)(v281 + 56);
            break;
          }
        }
      }
      else
      {
        LODWORD(v35) = 0;
      }
      if ((_DWORD)v34 != (_DWORD)v35)
      {
        v174 = v35;
        v175 = *(_QWORD *)(v281 + 40);
        v176 = *(_DWORD *)(v281 + 56);
        v292 = v176;
        while (1)
        {
          v177 = *(_QWORD *)(v175 + 24 * v174 + 16);
          if ((*(_BYTE *)(v177 + 288) & 1) != 0)
            break;
LABEL_321:
          if (v176 <= (int)v35 + 1)
            v274 = v35 + 1;
          else
            v274 = v176;
          while (1)
          {
            v174 = (v35 + 1);
            if (v274 - 1 == (_DWORD)v35)
              break;
            LODWORD(v35) = v35 + 1;
            v275 = v174;
            if ((*(_DWORD *)(v175 + 24 * v174 + 8) & 0x80000000) != 0)
              goto LABEL_328;
          }
          v275 = v274;
LABEL_328:
          LODWORD(v35) = v275;
          if ((_DWORD)v34 == v275)
            goto LABEL_206;
        }
        v178 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v177 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (!v178)
          goto LABEL_320;
        v179 = v178;
        v180 = (uint64_t *)re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v288, v177);
        if (!v180)
          goto LABEL_320;
        v181 = v180;
        v182 = *v180;
        v183 = re::DataArray<re::ecs2::ShadowPlaneInfo>::tryGet((uint64_t)v293, *v180);
        if (!v183)
          goto LABEL_320;
        v184 = v183;
        v185 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (v179 ^ (v179 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v179 ^ (v179 >> 30))) >> 27));
        v186 = v185 ^ (v185 >> 31);
        v187 = *(unsigned int *)(v183 + 88);
        if ((_DWORD)v187)
        {
          v188 = v186 % v187;
          v189 = *(unsigned int *)(*(_QWORD *)(v183 + 72) + 4 * (v186 % v187));
          if ((_DWORD)v189 != 0x7FFFFFFF)
          {
            v190 = *(_QWORD *)(v183 + 80);
            while (*(_QWORD *)(v190 + 24 * v189 + 16) != v179)
            {
              LODWORD(v189) = *(_DWORD *)(v190 + 24 * v189 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v189 == 0x7FFFFFFF)
                goto LABEL_227;
            }
LABEL_233:
            v196 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v177 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
            v197 = *(_QWORD *)(v177 + 224);
            if (v197 && !*(_QWORD *)(v197 + 64))
              goto LABEL_320;
            v298 = v182;
            *(_QWORD *)v318 = v177;
            v198 = (uint64_t *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v282, v177);
            if (v198)
              goto LABEL_307;
            v314 = 0u;
            v315 = 0u;
            to = 0u;
            DWORD1(v315) = 0x7FFFFFFF;
            v199 = 0x94D049BB133111EBLL
                 * ((0xBF58476D1CE4E5B9 * (v182 & 0xFFFFFF)) ^ ((0xBF58476D1CE4E5B9 * (v182 & 0xFFFFFF)) >> 27));
            v200 = v199 ^ (v199 >> 31);
            if (*v278)
            {
              v201 = v200 % *((unsigned int *)v294 + 72);
              v202 = *(unsigned int *)(*((_QWORD *)v294 + 34) + 4 * v201);
              if ((_DWORD)v202 != 0x7FFFFFFF)
              {
                v203 = *((_QWORD *)v294 + 35);
                while (1)
                {
                  v204 = v203 + 72 * v202;
                  v206 = *(unsigned __int16 *)(v204 + 16);
                  v205 = v204 + 16;
                  if (v206 == (unsigned __int16)v182
                    && *(unsigned __int16 *)(v205 + 2) == WORD1(v182)
                    && ((*(_DWORD *)(v203 + 72 * v202 + 20) ^ HIDWORD(v182)) & 0xFFFFFF) == 0)
                  {
                    break;
                  }
                  v202 = *(_DWORD *)(v203 + 72 * v202 + 8) & 0x7FFFFFFF;
                  if (v202 == 0x7FFFFFFF)
                    goto LABEL_245;
                }
                v208 = v203 + 72 * v202;
LABEL_246:
                v209 = v208 + 24;
                v210.n128_f64[0] = re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&to);
                if (v197)
                {
                  v211 = *(_QWORD *)(v197 + 64);
                  if (*(_QWORD *)v209)
                  {
                    v212 = 0x94D049BB133111EBLL
                         * ((0xBF58476D1CE4E5B9 * (v211 ^ (v211 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                             * (v211 ^ (v211 >> 30))) >> 27));
                    v213 = *(unsigned int *)(*(_QWORD *)(v209 + 8)
                                           + 4 * ((v212 ^ (v212 >> 31)) % *(unsigned int *)(v209 + 24)));
                    if ((_DWORD)v213 != 0x7FFFFFFF)
                    {
                      v214 = *(_QWORD *)(v209 + 16);
                      while (*(_QWORD *)(v214 + 32 * v213 + 16) != v211)
                      {
                        v213 = *(_DWORD *)(v214 + 32 * v213 + 8) & 0x7FFFFFFF;
                        if ((_DWORD)v213 == 0x7FFFFFFF)
                          goto LABEL_252;
                      }
                      v198 = (uint64_t *)(v214 + 32 * v213 + 24);
                      v261 = v282;
                      v260 = v198;
LABEL_306:
                      re::HashTable<re::ecs2::Entity const*,re::DataArrayHandle<re::ecs2::ProjectiveShadowClusterInfo>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::addNew<re::DataArrayHandle<re::ecs2::ProjectiveShadowClusterInfo>&>(v261, (uint64_t *)v318, v260);
LABEL_307:
                      v262 = re::DataArray<re::ecs2::ProjectiveShadowClusterInfo>::get((uint64_t)v279, *v198);
                      v263 = v262;
                      v325[0] = v196;
                      v264 = *(_QWORD *)(v196 + 16);
                      v265 = *(_QWORD *)(v264 + 224);
                      to.n128_u64[0] = *(_QWORD *)(v264 + 296);
                      to.n128_u64[1] = *(_QWORD *)(v196 + 28);
                      LODWORD(v314) = *(_DWORD *)(v196 + 36);
                      if (v265)
                      {
                        if (*(_BYTE *)(v265 + 76))
                          v266 = *(_QWORD *)(v265 + 64) != 0;
                        else
                          v266 = 0;
                      }
                      else
                      {
                        v266 = 1;
                      }
                      v267 = v262 + 32;
                      v268 = *(_QWORD *)(v263 + 32);
                      BYTE4(v314) = v266;
                      v269 = 0x94D049BB133111EBLL
                           * ((0xBF58476D1CE4E5B9 * (v196 ^ (v196 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                               * (v196 ^ (v196 >> 30))) >> 27));
                      v270 = v269 ^ (v269 >> 31);
                      if (v268)
                      {
                        v271 = v270 % *(unsigned int *)(v263 + 56);
                        v272 = *(unsigned int *)(*(_QWORD *)(v263 + 40) + 4 * v271);
                        if ((_DWORD)v272 != 0x7FFFFFFF)
                        {
                          v273 = *(_QWORD *)(v263 + 48);
                          while (*(_QWORD *)(v273 + 48 * v272 + 16) != v196)
                          {
                            LODWORD(v272) = *(_DWORD *)(v273 + 48 * v272 + 8) & 0x7FFFFFFF;
                            if ((_DWORD)v272 == 0x7FFFFFFF)
                              goto LABEL_319;
                          }
                          goto LABEL_320;
                        }
                      }
                      else
                      {
                        LODWORD(v271) = 0;
                      }
LABEL_319:
                      re::HashTable<unsigned long,re::ecs2::VFXSceneComponent::BindingRuntimeData,re::Hash<unsigned long>,re::EqualTo<unsigned long>,true,false>::addAsMove(v267, v271, v270, v325, &to);
                      ++*(_DWORD *)(v263 + 72);
LABEL_320:
                      v33 = v281 + 24;
                      v176 = *(_DWORD *)(v281 + 56);
                      v175 = *(_QWORD *)(v281 + 40);
                      LODWORD(v34) = v292;
                      goto LABEL_321;
                    }
                  }
LABEL_252:
                  v289 = *(re::ecs2::EntityComponentCollection **)(v197 + 64);
                  v215 = *(_DWORD *)(v197 + 72);
                }
                else
                {
                  v289 = 0;
                  v215 = 0;
                }
                (*(void (**)(__n128 *__return_ptr, _QWORD, unint64_t, __n128))(**(_QWORD **)a2 + 8))(&to, *(_QWORD *)a2, v177, v210);
                if (to.n128_u8[0])
                  v217 = to.n128_u64[1];
                else
                  v217 = 0;
                v312 = v217;
                v218 = v294;
                v219 = *((_DWORD *)v294 + 64);
                if ((v219 + 1) >> 24)
                  v220 = 1;
                else
                  v220 = v219 + 1;
                *((_DWORD *)v294 + 64) = v220;
                v51 = *((unsigned __int16 *)v294 + 126);
                v48 = *((unsigned __int16 *)v294 + 127);
                if (v51 == 0xFFFF && (_DWORD)v48 == 0xFFFF)
                {
                  if (*((_DWORD *)v294 + 62) >= *((_DWORD *)v294 + 61))
                  {
                    v221 = v217;
                    re::DataArray<re::ecs2::ProjectiveShadowClusterInfo>::allocBlock(v279);
                    v217 = v221;
                    v218 = v294;
                  }
                  v222 = *((_QWORD *)v218 + 27);
                  v48 = (unsigned __int16)(v222 - 1);
                  if (!v222)
                    goto LABEL_336;
                  v51 = *((unsigned int *)v218 + 62);
                  if (v51 >= 0x10000)
                    goto LABEL_338;
                  v223 = (_QWORD *)(*((_QWORD *)v218 + 29) + 16 * v48);
                  *((_DWORD *)v218 + 62) = v51 + 1;
                  *(_DWORD *)(v223[1] + 4 * v51) = *((_DWORD *)v218 + 64);
                  v224 = *v223 + 80 * v51;
                }
                else
                {
                  v225 = (__n128 *)*((_QWORD *)v294 + 27);
                  if ((unint64_t)v225 <= v48)
                    goto LABEL_337;
                  v226 = (_QWORD *)(*((_QWORD *)v294 + 29) + 16 * v48);
                  *(_DWORD *)(v226[1] + 4 * v51) = v220;
                  v224 = *v226 + 80 * v51;
                  *((_DWORD *)v294 + 63) = *(_DWORD *)v224;
                }
                ++*((_DWORD *)v218 + 60);
                *(_QWORD *)v224 = v217;
                *(_QWORD *)(v224 + 8) = v289;
                *(_QWORD *)(v224 + 16) = v182;
                *(_DWORD *)(v224 + 24) = v215;
                *(_OWORD *)(v224 + 48) = 0u;
                *(_OWORD *)(v224 + 64) = 0u;
                *(_OWORD *)(v224 + 32) = 0u;
                *(_DWORD *)(v224 + 68) = 0x7FFFFFFF;
                v227 = *((_DWORD *)v218 + 64);
                v228 = (v48 << 16) | ((unint64_t)(v227 & 0xFFFFFF) << 32) | v51;
                v325[0] = v228;
                if (v289)
                {
                  v229 = *(_QWORD *)(v197 + 64);
                  v230 = 0x94D049BB133111EBLL
                       * ((0xBF58476D1CE4E5B9 * (v229 ^ (v229 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v229 ^ (v229 >> 30))) >> 27));
                  v231 = v230 ^ (v230 >> 31);
                  v232 = *(_QWORD *)v209;
                  if (!*(_QWORD *)v209
                    || (v232 = v231 % *(unsigned int *)(v209 + 24),
                        v233 = *(unsigned int *)(*(_QWORD *)(v209 + 8) + 4 * v232),
                        (_DWORD)v233 == 0x7FFFFFFF))
                  {
LABEL_275:
                    v235 = *(unsigned int *)(v209 + 36);
                    if ((_DWORD)v235 == 0x7FFFFFFF)
                    {
                      v235 = *(unsigned int *)(v209 + 32);
                      v236 = v235;
                      if ((_DWORD)v235 == *(_DWORD *)(v209 + 24))
                      {
                        v290 = (re::ecs2::EntityComponentCollection *)v217;
                        v287 = v227;
                        re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(v209, 2 * *(_DWORD *)(v209 + 28));
                        v227 = v287;
                        v217 = (unint64_t)v290;
                        v218 = v294;
                        v232 = v231 % *(unsigned int *)(v209 + 24);
                        v236 = *(_DWORD *)(v209 + 32);
                      }
                      *(_DWORD *)(v209 + 32) = v236 + 1;
                      v237 = *(_QWORD *)(v209 + 16);
                      v238 = *(_DWORD *)(v237 + 32 * v235 + 8);
                    }
                    else
                    {
                      v237 = *(_QWORD *)(v209 + 16);
                      v238 = *(_DWORD *)(v237 + 32 * v235 + 8);
                      *(_DWORD *)(v209 + 36) = v238 & 0x7FFFFFFF;
                    }
                    *(_DWORD *)(v237 + 32 * v235 + 8) = v238 | 0x80000000;
                    *(_DWORD *)(*(_QWORD *)(v209 + 16) + 32 * v235 + 8) = *(_DWORD *)(*(_QWORD *)(v209 + 16)
                                                                                    + 32 * v235
                                                                                    + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v209 + 8) + 4 * v232);
                    *(_QWORD *)(*(_QWORD *)(v209 + 16) + 32 * v235) = v231;
                    *(_QWORD *)(*(_QWORD *)(v209 + 16) + 32 * v235 + 16) = v229;
                    *(_QWORD *)(*(_QWORD *)(v209 + 16) + 32 * v235 + 24) = v228;
                    *(_DWORD *)(*(_QWORD *)(v209 + 8) + 4 * v232) = v235;
                    ++*(_DWORD *)(v209 + 28);
                    ++*(_DWORD *)(v209 + 40);
                  }
                  else
                  {
                    v234 = *(_QWORD *)(v209 + 16);
                    while (*(_QWORD *)(v234 + 32 * v233 + 16) != v229)
                    {
                      v233 = *(_DWORD *)(v234 + 32 * v233 + 8) & 0x7FFFFFFF;
                      if ((_DWORD)v233 == 0x7FFFFFFF)
                        goto LABEL_275;
                    }
                  }
                }
                v314 = 0u;
                v315 = 0u;
                to = 0u;
                DWORD1(v315) = 0x7FFFFFFF;
                v239 = 0x94D049BB133111EBLL
                     * ((0xBF58476D1CE4E5B9 * (v217 ^ (v217 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v217 ^ (v217 >> 30))) >> 27));
                v240 = v239 ^ (v239 >> 31);
                if (*v276)
                {
                  v241 = v240 % *((unsigned int *)v218 + 96);
                  v242 = *(unsigned int *)(*((_QWORD *)v218 + 46) + 4 * v241);
                  if ((_DWORD)v242 != 0x7FFFFFFF)
                  {
                    v243 = *((_QWORD *)v218 + 47);
                    while (*(_QWORD *)(v243 + 72 * v242 + 16) != v217)
                    {
                      LODWORD(v242) = *(_DWORD *)(v243 + 72 * v242 + 8) & 0x7FFFFFFF;
                      if ((_DWORD)v242 == 0x7FFFFFFF)
                        goto LABEL_286;
                    }
                    v244 = v227;
                    v246 = v243 + 72 * v242 + 24;
LABEL_290:
                    v247 = 0x94D049BB133111EBLL
                         * ((0xBF58476D1CE4E5B9 * (v228 & 0xFFFFFF)) ^ ((0xBF58476D1CE4E5B9 * (v228 & 0xFFFFFF)) >> 27));
                    v248 = v247 ^ (v247 >> 31);
                    v249 = *(unsigned int *)(v246 + 24);
                    if ((_DWORD)v249)
                    {
                      v250 = v248 % v249;
                      v251 = *(unsigned int *)(*(_QWORD *)(v246 + 8) + 4 * (v248 % v249));
                      if ((_DWORD)v251 != 0x7FFFFFFF)
                      {
                        v252 = *(_QWORD *)(v246 + 16);
                        do
                        {
                          v253 = v252 + 24 * v251;
                          v255 = *(unsigned __int16 *)(v253 + 16);
                          v254 = v253 + 16;
                          if (v255 == (unsigned __int16)v51
                            && *(unsigned __int16 *)(v254 + 2) == WORD1(v228)
                            && ((*(_DWORD *)(v252 + 24 * v251 + 20) ^ v244) & 0xFFFFFF) == 0)
                          {
                            goto LABEL_305;
                          }
                          v251 = *(_DWORD *)(v252 + 24 * v251 + 8) & 0x7FFFFFFF;
                        }
                        while (v251 != 0x7FFFFFFF);
                      }
                    }
                    else
                    {
                      v250 = 0;
                    }
                    v256 = *(unsigned int *)(v246 + 36);
                    if ((_DWORD)v256 == 0x7FFFFFFF)
                    {
                      v256 = *(unsigned int *)(v246 + 32);
                      v257 = v256;
                      if ((_DWORD)v256 == (_DWORD)v249)
                      {
                        re::HashSetBase<re::internal::TimelineTree *,re::internal::TimelineTree *,re::internal::ValueAsKey<re::internal::TimelineTree *>,re::Hash<re::internal::TimelineTree *>,re::EqualTo<re::internal::TimelineTree *>,true,false>::setCapacity(v246, 2 * *(_DWORD *)(v246 + 28));
                        v250 = v248 % *(unsigned int *)(v246 + 24);
                        v257 = *(_DWORD *)(v246 + 32);
                      }
                      *(_DWORD *)(v246 + 32) = v257 + 1;
                      v258 = *(_QWORD *)(v246 + 16);
                      v259 = *(_DWORD *)(v258 + 24 * v256 + 8);
                    }
                    else
                    {
                      v258 = *(_QWORD *)(v246 + 16);
                      v259 = *(_DWORD *)(v258 + 24 * v256 + 8);
                      *(_DWORD *)(v246 + 36) = v259 & 0x7FFFFFFF;
                    }
                    *(_DWORD *)(v258 + 24 * v256 + 8) = v259 | 0x80000000;
                    *(_DWORD *)(*(_QWORD *)(v246 + 16) + 24 * v256 + 8) = *(_DWORD *)(*(_QWORD *)(v246 + 16)
                                                                                    + 24 * v256
                                                                                    + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v246 + 8) + 4 * v250);
                    *(_QWORD *)(*(_QWORD *)(v246 + 16) + 24 * v256) = v248;
                    *(_QWORD *)(*(_QWORD *)(v246 + 16) + 24 * v256 + 16) = v228;
                    *(_DWORD *)(*(_QWORD *)(v246 + 8) + 4 * v250) = v256;
                    ++*(_DWORD *)(v246 + 28);
                    ++*(_DWORD *)(v246 + 40);
LABEL_305:
                    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&to);
                    v198 = v325;
                    v260 = v325;
                    v261 = v282;
                    goto LABEL_306;
                  }
LABEL_286:
                  v244 = v227;
                }
                else
                {
                  v244 = v227;
                  LODWORD(v241) = 0;
                }
                v245 = re::HashTable<unsigned long long,re::HashSet<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>,re::Hash<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,re::EqualTo<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)v276, v241, v240, &v312, (uint64_t)&to);
                ++*((_DWORD *)v294 + 100);
                v246 = *((_QWORD *)v294 + 47) + 72 * v245 + 24;
                goto LABEL_290;
              }
            }
            else
            {
              LODWORD(v201) = 0;
            }
LABEL_245:
            v207 = re::HashTable<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>,re::HashTable<unsigned long long,re::DataArrayHandle<re::ecs2::ProjectiveShadowClusterInfo>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,re::EqualTo<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,true,false>::addAsMove((uint64_t)v278, v201, v200, &v298, (uint64_t)&to);
            ++*((_DWORD *)v294 + 76);
            v208 = *((_QWORD *)v294 + 35) + 72 * v207;
            goto LABEL_246;
          }
        }
        else
        {
          v188 = 0;
        }
LABEL_227:
        v191 = *(unsigned int *)(v183 + 100);
        if ((_DWORD)v191 == 0x7FFFFFFF)
        {
          v191 = *(unsigned int *)(v183 + 96);
          v192 = v191;
          if ((_DWORD)v191 == (_DWORD)v187)
          {
            v193 = v186;
            re::HashSetBase<re::internal::TimelineTree *,re::internal::TimelineTree *,re::internal::ValueAsKey<re::internal::TimelineTree *>,re::Hash<re::internal::TimelineTree *>,re::EqualTo<re::internal::TimelineTree *>,true,false>::setCapacity(v183 + 64, 2 * *(_DWORD *)(v183 + 92));
            v186 = v193;
            v188 = v193 % *(unsigned int *)(v184 + 88);
            v192 = *(_DWORD *)(v184 + 96);
          }
          *(_DWORD *)(v184 + 96) = v192 + 1;
          v194 = *(_QWORD *)(v184 + 80);
          v195 = *(_DWORD *)(v194 + 24 * v191 + 8);
        }
        else
        {
          v194 = *(_QWORD *)(v183 + 80);
          v195 = *(_DWORD *)(v194 + 24 * v191 + 8);
          *(_DWORD *)(v183 + 100) = v195 & 0x7FFFFFFF;
        }
        *(_DWORD *)(v194 + 24 * v191 + 8) = v195 | 0x80000000;
        *(_DWORD *)(*(_QWORD *)(v184 + 80) + 24 * v191 + 8) = *(_DWORD *)(*(_QWORD *)(v184 + 80) + 24 * v191 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v184 + 72) + 4 * v188);
        *(_QWORD *)(*(_QWORD *)(v184 + 80) + 24 * v191) = v186;
        *(_QWORD *)(*(_QWORD *)(v184 + 80) + 24 * v191 + 16) = v179;
        *(_DWORD *)(*(_QWORD *)(v184 + 72) + 4 * v188) = v191;
        ++*(_DWORD *)(v184 + 92);
        ++*(_DWORD *)(v184 + 104);
        v182 = *v181;
        goto LABEL_233;
      }
LABEL_206:
      re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::clear(v33);
      v4 = v294;
      v171 = v280;
      if (*((_DWORD *)v294 + 110) <= (v280 + 1))
        v172 = v280 + 1;
      else
        v172 = *((_DWORD *)v294 + 110);
      while (1)
      {
        v27 = (v171 + 1);
        if (v172 - 1 == v171)
          break;
        ++v171;
        v173 = v27;
        if ((*(_DWORD *)(*((_QWORD *)v294 + 53) + 120 * v27 + 8) & 0x80000000) != 0)
          goto LABEL_213;
      }
      v173 = v172;
LABEL_213:
      LODWORD(v24) = v173;
      if (v277 == v173)
        return;
    }
    v38 = v30;
    v39 = *(_QWORD *)(v29 + 16);
    v40 = v284;
    v283 = v29;
    while (1)
    {
      v41 = *(_QWORD *)(v39 + 24 * v38 + 16);
      if (re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::containsKey((uint64_t)v288, v41))
      {
        goto LABEL_194;
      }
      (*(void (**)(__n128 *__return_ptr, _QWORD, unint64_t))(**(_QWORD **)a2 + 8))(&to, *(_QWORD *)a2, v41);
      if (to.n128_u8[0])
        v42 = to.n128_u64[1];
      else
        v42 = 0;
      v43 = *(_QWORD *)(v41 + 24);
      if (v43 && (*(_BYTE *)(v43 + 288) & 0x80) == 0)
      {
        while (1)
        {
          v44 = v43;
          (*(void (**)(__n128 *__return_ptr, _QWORD, unint64_t))(**(_QWORD **)a2 + 8))(&to, *(_QWORD *)a2, v43);
          v45 = to.n128_u8[0] ? to.n128_u64[1] : 0;
          if (v42 != v45)
            break;
          v46 = (uint64_t *)re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v288, v44);
          if (v46)
          {
            v47 = *v46;
            goto LABEL_63;
          }
          v43 = *(_QWORD *)(v44 + 24);
          if (v43)
          {
            v41 = v44;
            if ((*(_BYTE *)(v43 + 288) & 0x80) == 0)
              continue;
          }
          v41 = v44;
          break;
        }
      }
      v47 = 0xFFFFFFFFLL;
LABEL_63:
      re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)&to);
      v305[0] = 0;
      v305[1] = 0;
      v48 = 1;
      v306 = 1;
      v308 = 0;
      v309 = 0;
      v307 = 0;
      v310 = 0;
      re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v305, (uint64_t)&to, 1uLL);
      v298 = 0;
      v299 = 0;
      v300 = 1;
      v302 = 0;
      v303 = 0;
      v301 = 0;
      v304 = 0;
      re::BucketArray<re::ecs2::ShadowPlaneTrackingState,32ul>::init((uint64_t)&v298, (uint64_t)&to, 1uLL);
      *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v305) = v41;
      v49 = re::BucketArray<re::ecs2::ShadowPlaneTrackingState,32ul>::addUninitialized((uint64_t)&v298);
      *(_QWORD *)v49 = v47;
      *(_BYTE *)(v49 + 8) = 0;
      v51 = v303;
      if (v303)
      {
        while (1)
        {
          if (!v309)
          {
            re::internal::assertLog((re::internal *)4, v50, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
            _os_crash();
            __break(1u);
LABEL_333:
            v312 = 0;
            p_to = &to;
            v326 = 0u;
            v327 = 0u;
            memset(v325, 0, sizeof(v325));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v318 = 136315906;
            *(_QWORD *)&v318[4] = "operator[]";
            v319 = 1024;
            v320 = 789;
            v321 = 2048;
            v322 = v41;
            v323 = 2048;
            v324 = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_334:
            v312 = 0;
            v326 = 0u;
            v327 = 0u;
            memset(v325, 0, sizeof(v325));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v318 = 136315906;
            *(_QWORD *)&v318[4] = "operator[]";
            v319 = 1024;
            v320 = 789;
            v321 = 2048;
            v322 = v41;
            v323 = 2048;
            v324 = p_to;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_335:
            re::internal::assertLog((re::internal *)5, v89, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v121);
            _os_crash();
            __break(1u);
LABEL_336:
            v305[0] = 0;
            v225 = &to;
            v316 = 0u;
            v317 = 0u;
            v314 = 0u;
            v315 = 0u;
            to = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v325[0]) = 136315906;
            *(uint64_t *)((char *)v325 + 4) = (uint64_t)"operator[]";
            WORD2(v325[1]) = 1024;
            *(_DWORD *)((char *)&v325[1] + 6) = 789;
            WORD1(v325[2]) = 2048;
            *(uint64_t *)((char *)&v325[2] + 4) = v48;
            WORD2(v325[3]) = 2048;
            *(uint64_t *)((char *)&v325[3] + 6) = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_337:
            v305[0] = 0;
            v316 = 0u;
            v317 = 0u;
            v314 = 0u;
            v315 = 0u;
            to = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            LODWORD(v325[0]) = 136315906;
            *(uint64_t *)((char *)v325 + 4) = (uint64_t)"operator[]";
            WORD2(v325[1]) = 1024;
            *(_DWORD *)((char *)&v325[1] + 6) = 789;
            WORD1(v325[2]) = 2048;
            *(uint64_t *)((char *)&v325[2] + 4) = v48;
            WORD2(v325[3]) = 2048;
            *(uint64_t *)((char *)&v325[3] + 6) = (uint64_t)v225;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_338:
            re::internal::assertLog((re::internal *)5, v216, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v51);
            _os_crash();
            __break(1u);
          }
          v52 = *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v305, v309 - 1);
          re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v305, --v309);
          ++v310;
          v53 = re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[]((uint64_t)&v298, --v51);
          v54 = *(_QWORD *)v53;
          v55 = *(_BYTE *)(v53 + 8);
          *(_DWORD *)v297 = *(_DWORD *)(v53 + 9);
          *(_DWORD *)&v297[3] = *(_DWORD *)(v53 + 12);
          re::BucketArray<re::ecs2::VisualProxyScopeManagerStateTracking::buildScopeMaskForEntityHierarchy(re::ecs2::Entity const*)::EntityScopeMask,32ul>::operator[]((uint64_t)&v298, v51);
          v303 = v51;
          ++v304;
          if ((*(_BYTE *)(v52 + 288) & 1) != 0)
            break;
LABEL_178:
          if (!v51)
            goto LABEL_179;
        }
        (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(**(_QWORD **)a2 + 8))(v325, *(_QWORD *)a2, v52);
        if (LOBYTE(v325[0]))
          v48 = v325[1];
        else
          v48 = 0;
        v56 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v52 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchorShadowMarker,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        v57 = *(float32x4_t **)(v52 + 128);
        v58 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v52 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AnchoringComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
        if (v57)
          v59 = v58 == 0;
        else
          v59 = 1;
        if (v59)
        {
          v60 = 0;
          v61 = v294;
        }
        else
        {
          v61 = v294;
          if (v57[2].i8[9])
            v60 = 1;
          else
            v60 = (*(_DWORD *)(v58 + 32) - 3) < 2;
        }
        v62 = v55;
        if (!v56 || !*(_BYTE *)(v56 + 25) || (!*((_DWORD *)v61 + 8) ? (v63 = v60) : (v63 = 0), v63))
        {
          if (v60)
          {
            v64 = v54;
            if (*((_DWORD *)v61 + 8) != 2)
            {
              v65 = v57[3];
              v66 = v57[4];
              v67 = (int32x4_t)vmulq_f32(v65, v65);
              v67.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v67, 2), vadd_f32(*(float32x2_t *)v67.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v67.i8, 1))).u32[0];
              v68 = vrsqrte_f32((float32x2_t)v67.u32[0]);
              v69 = vmul_f32(v68, vrsqrts_f32((float32x2_t)v67.u32[0], vmul_f32(v68, v68)));
              v70 = vmulq_n_f32(v65, vmul_f32(v69, vrsqrts_f32((float32x2_t)v67.u32[0], vmul_f32(v69, v69))).f32[0]);
              v71 = vmulq_f32(v66, v70);
              v72 = vmulq_f32(v70, v70);
              v73 = vsubq_f32(v66, vmulq_n_f32(v70, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v71, 2), vaddq_f32(v71, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.f32, 1))).f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v72, 2), vaddq_f32(v72, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.f32, 1))).f32[0]));
              v74 = (int32x4_t)vmulq_f32(v73, v73);
              v74.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v74, 2), vadd_f32(*(float32x2_t *)v74.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v74.i8, 1))).u32[0];
              *(float32x2_t *)v71.f32 = vrsqrte_f32((float32x2_t)v74.u32[0]);
              *(float32x2_t *)v71.f32 = vmul_f32(*(float32x2_t *)v71.f32, vrsqrts_f32((float32x2_t)v74.u32[0], vmul_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32)));
              v75 = vmulq_n_f32(v73, vmul_f32(*(float32x2_t *)v71.f32, vrsqrts_f32((float32x2_t)v74.u32[0], vmul_f32(*(float32x2_t *)v71.f32, *(float32x2_t *)v71.f32))).f32[0]);
              v76 = v57 + 6;
              v61 = v294;
              goto LABEL_89;
            }
          }
          else
          {
            v64 = v54;
          }
LABEL_154:
          v143 = (_QWORD *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v52 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          if (v143)
            re::ecs2::Component::markDirty(v143);
          v144 = 0x94D049BB133111EBLL
               * ((0xBF58476D1CE4E5B9 * (v52 ^ (v52 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v52 ^ (v52 >> 30))) >> 27));
          v41 = v144 ^ (v144 >> 31);
          v145 = *v288;
          v146 = v294;
          if (!*v288
            || (v145 = v41 % *((unsigned int *)v294 + 44),
                v147 = *(unsigned int *)(*((_QWORD *)v294 + 20) + 4 * v145),
                (_DWORD)v147 == 0x7FFFFFFF))
          {
LABEL_161:
            v149 = *((unsigned int *)v294 + 47);
            if ((_DWORD)v149 == 0x7FFFFFFF)
            {
              v149 = *((unsigned int *)v294 + 46);
              v150 = v149;
              if ((_DWORD)v149 == *((_DWORD *)v294 + 44))
              {
                re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity((uint64_t)v288, 2 * *((_DWORD *)v294 + 45));
                v146 = v294;
                v145 = v41 % *((unsigned int *)v294 + 44);
                v150 = *((_DWORD *)v294 + 46);
              }
              *((_DWORD *)v146 + 46) = v150 + 1;
              v151 = *((_QWORD *)v146 + 21);
              v152 = *(_DWORD *)(v151 + 40 * v149 + 8);
            }
            else
            {
              v151 = *((_QWORD *)v294 + 21);
              v152 = *(_DWORD *)(v151 + 40 * v149 + 8);
              *((_DWORD *)v294 + 47) = v152 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v151 + 40 * v149 + 8) = v152 | 0x80000000;
            *(_DWORD *)(*((_QWORD *)v146 + 21) + 40 * v149 + 8) = *(_DWORD *)(*((_QWORD *)v146 + 21) + 40 * v149 + 8) & 0x80000000 | *(_DWORD *)(*((_QWORD *)v146 + 20) + 4 * v145);
            *(_QWORD *)(*((_QWORD *)v146 + 21) + 40 * v149) = v41;
            *(_QWORD *)(*((_QWORD *)v146 + 21) + 40 * v149 + 16) = v52;
            v153 = *((_QWORD *)v146 + 21) + 40 * v149;
            *(_QWORD *)(v153 + 24) = v64;
            *(_BYTE *)(v153 + 32) = v62;
            *(_DWORD *)(v153 + 33) = *(_DWORD *)v297;
            *(_DWORD *)(v153 + 36) = *(_DWORD *)&v297[3];
            *(_DWORD *)(*((_QWORD *)v146 + 20) + 4 * v145) = v149;
            ++*((_DWORD *)v146 + 45);
            ++*((_DWORD *)v146 + 48);
            v154 = *((_QWORD *)v146 + 21) + 40 * v149;
          }
          else
          {
            v148 = *((_QWORD *)v294 + 21);
            while (*(_QWORD *)(v148 + 40 * v147 + 16) != v52)
            {
              LODWORD(v147) = *(_DWORD *)(v148 + 40 * v147 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v147 == 0x7FFFFFFF)
                goto LABEL_161;
            }
            v154 = v148 + 40 * v147;
          }
          v155 = (uint64_t *)(v154 + 24);
          v156 = *(_QWORD *)(v52 + 328);
          if (v156)
          {
            v157 = *v155;
            v158 = *(unint64_t **)(v52 + 344);
            v159 = 8 * v156;
            do
            {
              v160 = *v158++;
              v41 = v160;
              (*(void (**)(uint64_t *__return_ptr, _QWORD, unint64_t))(**(_QWORD **)a2 + 8))(v325, *(_QWORD *)a2, v160);
              if (LOBYTE(v325[0]))
                v161 = v325[1];
              else
                v161 = 0;
              if (v48 == v161)
                v162 = v157;
              else
                v162 = 0xFFFFFFFFLL;
              *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v305) = v41;
              v163 = re::BucketArray<re::ecs2::ShadowPlaneTrackingState,32ul>::addUninitialized((uint64_t)&v298);
              *(_QWORD *)v163 = v162;
              *(_BYTE *)(v163 + 8) = 0;
              v159 -= 8;
            }
            while (v159);
            v51 = v303;
          }
          goto LABEL_178;
        }
        v77 = *(float32x4_t *)(v56 + 32);
        v78 = (int32x4_t)vmulq_f32(v77, v77);
        v78.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v78, 2), vadd_f32(*(float32x2_t *)v78.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v78.i8, 1))).u32[0];
        v79 = vrsqrte_f32((float32x2_t)v78.u32[0]);
        v80 = vmul_f32(v79, vrsqrts_f32((float32x2_t)v78.u32[0], vmul_f32(v79, v79)));
        v75 = vmulq_n_f32(v77, vmul_f32(v80, vrsqrts_f32((float32x2_t)v78.u32[0], vmul_f32(v80, v80))).f32[0]);
        v76 = (float32x4_t *)(v56 + 48);
LABEL_89:
        v286 = *v76;
        v311 = v48;
        memset(v325, 0, sizeof(v325));
        HIDWORD(v325[4]) = 0x7FFFFFFF;
        v81 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v48 ^ (v48 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v48 ^ (v48 >> 30))) >> 27));
        v82 = v81 ^ (v81 >> 31);
        v295 = v75;
        if (*v285)
        {
          v83 = v82 % *((unsigned int *)v61 + 32);
          v84 = *(unsigned int *)(*((_QWORD *)v61 + 14) + 4 * v83);
          if ((_DWORD)v84 != 0x7FFFFFFF)
          {
            v85 = *((_QWORD *)v61 + 15);
            while (*(_QWORD *)(v85 + 72 * v84 + 16) != v48)
            {
              LODWORD(v84) = *(_DWORD *)(v85 + 72 * v84 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v84 == 0x7FFFFFFF)
                goto LABEL_96;
            }
            v87 = v85 + 72 * v84;
LABEL_98:
            v88 = v87 + 24;
            re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v325);
            v90 = *(unsigned int *)(v88 + 32);
            if ((_DWORD)v90)
            {
              v91 = 0;
              v92 = (int *)(*(_QWORD *)(v88 + 16) + 8);
              v93 = v295;
              while (1)
              {
                v94 = *v92;
                v92 += 6;
                if (v94 < 0)
                  break;
                if (v90 == ++v91)
                {
                  LODWORD(v91) = *(_DWORD *)(v88 + 32);
                  break;
                }
              }
            }
            else
            {
              LODWORD(v91) = 0;
              v93 = v295;
            }
            v95 = (int32x4_t)vmulq_f32(v93, v93);
            v95.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v95, 2), vadd_f32(*(float32x2_t *)v95.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v95.i8, 1))).u32[0];
            v96 = vrsqrte_f32((float32x2_t)v95.u32[0]);
            v97 = vmul_f32(v96, vrsqrts_f32((float32x2_t)v95.u32[0], vmul_f32(v96, v96)));
            v98 = vmulq_n_f32(v93, vmul_f32(v97, vrsqrts_f32((float32x2_t)v95.u32[0], vmul_f32(v97, v97))).f32[0]);
            v296 = v98;
            v99 = vmulq_f32(v98, v286);
            v291 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 2), vaddq_f32(v99, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v99.f32, 1))).f32[0];
            if ((_DWORD)v90 != (_DWORD)v91)
            {
              v100 = v91;
              v101 = *(_QWORD *)(v88 + 16);
              v102 = fabsf(v98.f32[0]);
              v103 = fabsf(v98.f32[1]);
              v104 = fabsf(v98.f32[2]);
              v105 = fabsf(-v291);
              while (1)
              {
                v106 = v101 + 24 * v100;
                v108 = *(_QWORD *)(v106 + 16);
                v107 = (unint64_t *)(v106 + 16);
                v109 = (float *)re::DataArray<re::ecs2::ShadowPlaneInfo>::get((uint64_t)v293, v108);
                v110 = v109[4];
                if (v110 == v296.f32[0]
                  || vabds_f32(v110, v296.f32[0]) < (float)((float)((float)(v102 + fabsf(v110)) + 1.0) * 0.00001))
                {
                  v111 = v109[5];
                  if (v111 == v296.f32[1]
                    || vabds_f32(v111, v296.f32[1]) < (float)((float)((float)(v103 + fabsf(v111)) + 1.0) * 0.00001))
                  {
                    v112 = v109[6];
                    if (v112 == v296.f32[2]
                      || vabds_f32(v112, v296.f32[2]) < (float)((float)((float)(v104 + fabsf(v112)) + 1.0) * 0.00001))
                    {
                      v113 = v109[15];
                      v114 = fabsf(v113);
                      v115 = v114 >= v105 ? v114 : v105;
                      if (v115 < 0.00001 || fabsf((float)(v291 + v113) / v115) < 0.00001)
                        break;
                    }
                  }
                }
                v101 = *(_QWORD *)(v88 + 16);
                if (*(_DWORD *)(v88 + 32) <= (v91 + 1))
                  v116 = v91 + 1;
                else
                  v116 = *(_DWORD *)(v88 + 32);
                while (1)
                {
                  v100 = (v91 + 1);
                  if (v116 - 1 == (_DWORD)v91)
                    break;
                  LODWORD(v91) = v91 + 1;
                  v117 = v100;
                  if ((*(_DWORD *)(v101 + 24 * v100 + 8) & 0x80000000) != 0)
                    goto LABEL_124;
                }
                v117 = v116;
LABEL_124:
                LODWORD(v91) = v117;
                if ((_DWORD)v90 == v117)
                  goto LABEL_125;
              }
              v64 = *v107;
              goto LABEL_153;
            }
LABEL_125:
            v118 = v294;
            v119 = *((_DWORD *)v294 + 24);
            if ((v119 + 1) >> 24)
              v120 = 1;
            else
              v120 = v119 + 1;
            *((_DWORD *)v294 + 24) = v120;
            v121 = *((unsigned __int16 *)v294 + 46);
            v41 = *((unsigned __int16 *)v294 + 47);
            if (v121 == 0xFFFF && (_DWORD)v41 == 0xFFFF)
            {
              if (*((_DWORD *)v294 + 22) >= *((_DWORD *)v294 + 21))
              {
                re::DataArray<re::ecs2::ShadowPlaneInfo>::allocBlock(v293);
                v118 = v294;
              }
              v122 = *((_QWORD *)v118 + 7);
              v41 = (unsigned __int16)(v122 - 1);
              if (!v122)
                goto LABEL_333;
              v121 = *((unsigned int *)v118 + 22);
              if (v121 >= 0x10000)
                goto LABEL_335;
              v123 = (_QWORD *)(*((_QWORD *)v118 + 9) + 16 * v41);
              *((_DWORD *)v118 + 22) = v121 + 1;
              *(_DWORD *)(v123[1] + 4 * v121) = *((_DWORD *)v118 + 24);
              v124 = *v123 + (v121 << 7);
            }
            else
            {
              p_to = (__n128 *)*((_QWORD *)v294 + 7);
              if ((unint64_t)p_to <= v41)
                goto LABEL_334;
              v126 = (_QWORD *)(*((_QWORD *)v294 + 9) + 16 * v41);
              *(_DWORD *)(v126[1] + 4 * v121) = v120;
              v124 = *v126 + (v121 << 7);
              *((_DWORD *)v294 + 23) = *(_DWORD *)v124;
            }
            v127 = v296;
            v127.f32[3] = -v291;
            ++*((_DWORD *)v118 + 20);
            *(_QWORD *)v124 = v48;
            *(float32x4_t *)(v124 + 16) = v296;
            *(float32x4_t *)(v124 + 32) = v286;
            *(_OWORD *)(v124 + 80) = 0u;
            *(_OWORD *)(v124 + 96) = 0u;
            *(float32x4_t *)(v124 + 48) = v127;
            *(_OWORD *)(v124 + 64) = 0u;
            *(_DWORD *)(v124 + 100) = 0x7FFFFFFF;
            *(_DWORD *)(v124 + 112) = 0;
            v128 = *((_DWORD *)v118 + 24);
            v64 = (v41 << 16) | ((unint64_t)(v128 & 0xFFFFFF) << 32) | v121;
            v129 = 0xBF58476D1CE4E5B9 * ((v41 << 16) & 0xFFFFFF | v121 & 0xFFFFFF);
            v130 = (0x94D049BB133111EBLL * (v129 ^ (v129 >> 27))) ^ ((0x94D049BB133111EBLL * (v129 ^ (v129 >> 27))) >> 31);
            v131 = *(unsigned int *)(v88 + 24);
            if ((_DWORD)v131)
            {
              v132 = v130 % v131;
              v133 = *(unsigned int *)(*(_QWORD *)(v88 + 8) + 4 * (v130 % v131));
              if ((_DWORD)v133 != 0x7FFFFFFF)
              {
                v134 = *(_QWORD *)(v88 + 16);
                do
                {
                  v135 = v134 + 24 * v133;
                  v137 = *(unsigned __int16 *)(v135 + 16);
                  v136 = v135 + 16;
                  if (v137 == (unsigned __int16)v121
                    && *(unsigned __int16 *)(v136 + 2) == WORD1(v64)
                    && ((*(_DWORD *)(v134 + 24 * v133 + 20) ^ v128) & 0xFFFFFF) == 0)
                  {
                    goto LABEL_153;
                  }
                  v133 = *(_DWORD *)(v134 + 24 * v133 + 8) & 0x7FFFFFFF;
                }
                while (v133 != 0x7FFFFFFF);
              }
            }
            else
            {
              v132 = 0;
            }
            v138 = *(unsigned int *)(v88 + 36);
            if ((_DWORD)v138 == 0x7FFFFFFF)
            {
              v138 = *(unsigned int *)(v88 + 32);
              v139 = v138;
              if ((_DWORD)v138 == (_DWORD)v131)
              {
                re::HashSetBase<re::internal::TimelineTree *,re::internal::TimelineTree *,re::internal::ValueAsKey<re::internal::TimelineTree *>,re::Hash<re::internal::TimelineTree *>,re::EqualTo<re::internal::TimelineTree *>,true,false>::setCapacity(v88, 2 * *(_DWORD *)(v88 + 28));
                v132 = v130 % *(unsigned int *)(v88 + 24);
                v139 = *(_DWORD *)(v88 + 32);
              }
              *(_DWORD *)(v88 + 32) = v139 + 1;
              v140 = *(_QWORD *)(v88 + 16);
              v141 = *(_DWORD *)(v140 + 24 * v138 + 8);
            }
            else
            {
              v140 = *(_QWORD *)(v88 + 16);
              v141 = *(_DWORD *)(v140 + 24 * v138 + 8);
              *(_DWORD *)(v88 + 36) = v141 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v140 + 24 * v138 + 8) = v141 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(v88 + 16) + 24 * v138 + 8) = *(_DWORD *)(*(_QWORD *)(v88 + 16) + 24 * v138 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v88 + 8) + 4 * v132);
            *(_QWORD *)(*(_QWORD *)(v88 + 16) + 24 * v138) = v130;
            *(_QWORD *)(*(_QWORD *)(v88 + 16) + 24 * v138 + 16) = v64;
            *(_DWORD *)(*(_QWORD *)(v88 + 8) + 4 * v132) = v138;
            ++*(_DWORD *)(v88 + 28);
            ++*(_DWORD *)(v88 + 40);
LABEL_153:
            v142 = re::DataArray<re::ecs2::ShadowPlaneInfo>::get((uint64_t)v293, v64);
            ++*(_DWORD *)(v142 + 112);
            v62 = 1;
            goto LABEL_154;
          }
        }
        else
        {
          LODWORD(v83) = 0;
        }
LABEL_96:
        v86 = re::HashTable<unsigned long long,re::HashSet<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>,re::Hash<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,re::EqualTo<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)v285, v83, v82, &v311, (uint64_t)v325);
        ++*((_DWORD *)v294 + 36);
        v87 = *((_QWORD *)v294 + 15) + 72 * v86;
        goto LABEL_98;
      }
LABEL_179:
      v164 = v298;
      if (v299)
      {
        v165 = v302;
        v166 = v300;
        v167 = v299 - 1;
        v29 = v283;
        do
        {
          if ((v166 & 1) != 0)
            v168 = &v301;
          else
            v168 = v165;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v164 + 40))(v164, v168[v167]);
          v166 += 2;
          v300 = v166;
          --v167;
        }
        while (v167 != -1);
        if ((v166 & 1) != 0)
          goto LABEL_190;
      }
      else
      {
        v29 = v283;
        if (!v298 || (v300 & 1) != 0)
          goto LABEL_190;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v164 + 40))(v164, v302);
LABEL_190:
      re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v305);
      if (v305[0] && (v306 & 1) == 0)
        (*(void (**)(void))(*(_QWORD *)v305[0] + 40))();
      re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)&to);
      v40 = *(_DWORD *)(v29 + 32);
      v39 = *(_QWORD *)(v29 + 16);
LABEL_194:
      if (v40 <= (int)v30 + 1)
        v169 = v30 + 1;
      else
        v169 = v40;
      while (1)
      {
        v38 = (v30 + 1);
        if (v169 - 1 == (_DWORD)v30)
          break;
        LODWORD(v30) = v30 + 1;
        v170 = v38;
        if ((*(_DWORD *)(v39 + 24 * v38 + 8) & 0x80000000) != 0)
          goto LABEL_201;
      }
      v170 = v169;
LABEL_201:
      LODWORD(v30) = v170;
      if ((_DWORD)v284 == v170)
        goto LABEL_42;
    }
  }
}

void re::ecs2::ProjectiveShadowReceiverManager::automaticallyRemoveReceiver(re::ecs2::ProjectiveShadowReceiverManager *this, re::ecs2::Entity *a2)
{
  re::ecs2::EntityComponentCollection *v2;
  uint64_t v3;

  v2 = (re::ecs2::ProjectiveShadowReceiverManager *)((char *)this + 32);
  v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::ProjectiveShadowReceiverManager *)((char *)this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 41))
      re::ecs2::EntityComponentCollection::remove(v2, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  }
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::registerScene(re::ecs2::ProjectiveShadowReceiverManager *this, re::ecs2::Scene *a2)
{
  _QWORD *v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  re::EventBus *v13;
  uint64_t v14;
  re *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  re *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  re *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  re *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  re *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  re *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  re *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  re *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  re *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  re *v90;
  re *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  re *v96;
  re *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  const re::ecs2::Entity **v104;
  uint64_t v105;
  const re::ecs2::Entity *v106;
  re::ecs2::Scene *v107;
  _BYTE v108[24];
  uint64_t v109;
  _BYTE *v110;
  _BYTE v111[24];
  uint64_t v112;
  _BYTE *v113;
  _BYTE v114[24];
  uint64_t v115;
  _BYTE *v116;
  _QWORD v117[3];
  uint64_t v118;
  re *v119;
  _BYTE v120[24];
  uint64_t v121;
  _BYTE *v122;
  _BYTE v123[24];
  uint64_t v124;
  _BYTE *v125;
  _BYTE v126[24];
  uint64_t v127;
  _BYTE *v128;
  _BYTE v129[24];
  uint64_t v130;
  _BYTE *v131;
  _BYTE v132[24];
  uint64_t v133;
  _BYTE *v134;
  _BYTE v135[24];
  uint64_t v136;
  _BYTE *v137;
  _BYTE v138[24];
  uint64_t v139;
  _BYTE *v140;
  _BYTE v141[24];
  uint64_t v142;
  _BYTE *v143;
  _BYTE v144[24];
  uint64_t v145;
  _BYTE *v146;
  _BYTE v147[24];
  uint64_t v148;
  _BYTE *v149;
  _BYTE v150[24];
  uint64_t v151;
  _BYTE *v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  _OWORD v156[2];
  __int128 v157;
  uint64_t v158;

  v158 = *MEMORY[0x24BDAC8D0];
  v107 = a2;
  v4 = (_QWORD *)((char *)this + 408);
  result = re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::containsKey((uint64_t)this + 408, (unint64_t)a2);
  if ((result & 1) != 0)
    return result;
  v157 = 0u;
  v153 = 0u;
  v154 = 0u;
  v155 = 0u;
  memset(v156, 0, sizeof(v156));
  DWORD1(v155) = 0x7FFFFFFF;
  *(_QWORD *)&v157 = 0x7FFFFFFF00000000;
  v6 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                         * ((unint64_t)a2 ^ ((unint64_t)a2 >> 30))) >> 27));
  v7 = v6 ^ (v6 >> 31);
  if (!*v4)
  {
    LODWORD(v8) = 0;
    goto LABEL_9;
  }
  v8 = v7 % *((unsigned int *)this + 108);
  v9 = *(unsigned int *)(*((_QWORD *)this + 52) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_9:
    re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove((uint64_t)v4, v8, v7, &v107, (uint64_t *)&v153);
    ++*((_DWORD *)this + 112);
    goto LABEL_10;
  }
  v10 = *((_QWORD *)this + 53);
  while (*(re::ecs2::Scene **)(v10 + 120 * v9 + 16) != a2)
  {
    LODWORD(v9) = *(_DWORD *)(v10 + 120 * v9 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v9 == 0x7FFFFFFF)
      goto LABEL_9;
  }
LABEL_10:
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v156);
  v12 = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)&v153);
  v13 = (re::EventBus *)*((_QWORD *)v107 + 36);
  if (!v13)
  {
    re::internal::assertLog((re::internal *)4, v11, v12, "assertion failure: '%s' (%s:line %i) An event bus is expected for this system to track entity state changes.", "eventBus", "registerScene", 368);
    _os_crash();
    __break(1u);
  }
  v154 = 1uLL;
  *(_QWORD *)&v156[0] = 0;
  v153 = 0u;
  v155 = 0uLL;
  v14 = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::add((uint64_t)this + 552, (uint64_t *)&v107, (uint64_t)&v153);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)&v153);
  v15 = (re *)v153;
  if ((_QWORD)v153 && (v154 & 1) == 0)
    v15 = (re *)(*(uint64_t (**)(void))(*(_QWORD *)v153 + 40))();
  *((_QWORD *)&v154 + 1) = re::globalAllocators(v15)[2];
  *(_QWORD *)&v155 = 0;
  v16 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)&v154 + 1) + 32))(*((_QWORD *)&v154 + 1), 32, 0);
  *v16 = &off_24ED678F0;
  v16[1] = this;
  v16[2] = re::ecs2::ProjectiveShadowReceiverManager::entityDidActivate;
  v16[3] = 0;
  *(_QWORD *)&v155 = v16;
  v151 = *((_QWORD *)&v154 + 1);
  v152 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v150, (uint64_t)&v153);
  v17 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidActivateEvent>(v13, (uint64_t)v150, 0, 0);
  v19 = v18;
  if (v152)
  {
    (**(void (***)(_BYTE *))v152)(v152);
    if (v152 != v150)
      (*(void (**)(uint64_t))(*(_QWORD *)v151 + 40))(v151);
    v152 = 0;
  }
  v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
  *v20 = v17;
  v20[1] = v19;
  v21 = (re *)v155;
  if ((_QWORD)v155)
  {
    v21 = (re *)(**(uint64_t (***)(_QWORD))v155)(v155);
    if ((__int128 *)v155 != &v153)
      v21 = (re *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v154 + 1) + 40))(*((_QWORD *)&v154 + 1));
  }
  *((_QWORD *)&v154 + 1) = re::globalAllocators(v21)[2];
  *(_QWORD *)&v155 = 0;
  v22 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)&v154 + 1) + 32))(*((_QWORD *)&v154 + 1), 32, 0);
  *v22 = &off_24ED67948;
  v22[1] = this;
  v22[2] = re::ecs2::ProjectiveShadowReceiverManager::entityDidReparent;
  v22[3] = 0;
  *(_QWORD *)&v155 = v22;
  v148 = *((_QWORD *)&v154 + 1);
  v149 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v147, (uint64_t)&v153);
  v23 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v13, (uint64_t)v147, 0, 0);
  v25 = v24;
  if (v149)
  {
    (**(void (***)(_BYTE *))v149)(v149);
    if (v149 != v147)
      (*(void (**)(uint64_t))(*(_QWORD *)v148 + 40))(v148);
    v149 = 0;
  }
  v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
  *v26 = v23;
  v26[1] = v25;
  v27 = (re *)v155;
  if ((_QWORD)v155)
  {
    v27 = (re *)(**(uint64_t (***)(_QWORD))v155)(v155);
    if ((__int128 *)v155 != &v153)
      v27 = (re *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v154 + 1) + 40))(*((_QWORD *)&v154 + 1));
  }
  *((_QWORD *)&v154 + 1) = re::globalAllocators(v27)[2];
  *(_QWORD *)&v155 = 0;
  v28 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)&v154 + 1) + 32))(*((_QWORD *)&v154 + 1), 32, 0);
  *v28 = &off_24ED679A0;
  v28[1] = this;
  v28[2] = re::ecs2::ProjectiveShadowReceiverManager::entityWillDeactivate;
  v28[3] = 0;
  *(_QWORD *)&v155 = v28;
  v145 = *((_QWORD *)&v154 + 1);
  v146 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v144, (uint64_t)&v153);
  v29 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillDeactivateEvent>(v13, (uint64_t)v144, 0, 0);
  v31 = v30;
  if (v146)
  {
    (**(void (***)(_BYTE *))v146)(v146);
    if (v146 != v144)
      (*(void (**)(uint64_t))(*(_QWORD *)v145 + 40))(v145);
    v146 = 0;
  }
  v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
  *v32 = v29;
  v32[1] = v31;
  v33 = (re *)v155;
  if ((_QWORD)v155)
  {
    v33 = (re *)(**(uint64_t (***)(_QWORD))v155)(v155);
    if ((__int128 *)v155 != &v153)
      v33 = (re *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v154 + 1) + 40))(*((_QWORD *)&v154 + 1));
  }
  *((_QWORD *)&v154 + 1) = re::globalAllocators(v33)[2];
  *(_QWORD *)&v155 = 0;
  v34 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)&v154 + 1) + 32))(*((_QWORD *)&v154 + 1), 32, 0);
  *v34 = &off_24ED679F8;
  v34[1] = this;
  v34[2] = re::ecs2::ProjectiveShadowReceiverManager::groundingShadowComponentDidChangeHandler<REComponentDidActivateEvent>;
  v34[3] = 0;
  *(_QWORD *)&v155 = v34;
  v142 = *((_QWORD *)&v154 + 1);
  v143 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v141, (uint64_t)&v153);
  v35 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v13, (uint64_t)v141, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v37 = v36;
  if (v143)
  {
    (**(void (***)(_BYTE *))v143)(v143);
    if (v143 != v141)
      (*(void (**)(uint64_t))(*(_QWORD *)v142 + 40))(v142);
    v143 = 0;
  }
  v38 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
  *v38 = v35;
  v38[1] = v37;
  v139 = *((_QWORD *)&v154 + 1);
  v140 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v138, (uint64_t)&v153);
  v39 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v13, (uint64_t)v138, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v41 = v40;
  if (v140)
  {
    (**(void (***)(_BYTE *))v140)(v140);
    if (v140 != v138)
      (*(void (**)(uint64_t))(*(_QWORD *)v139 + 40))(v139);
    v140 = 0;
  }
  v42 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
  *v42 = v39;
  v42[1] = v41;
  v43 = (re *)v155;
  if ((_QWORD)v155)
  {
    v43 = (re *)(**(uint64_t (***)(_QWORD))v155)(v155);
    if ((__int128 *)v155 != &v153)
      v43 = (re *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v154 + 1) + 40))(*((_QWORD *)&v154 + 1));
  }
  *((_QWORD *)&v154 + 1) = re::globalAllocators(v43)[2];
  v44 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)&v154 + 1) + 32))(*((_QWORD *)&v154 + 1), 32, 0);
  *v44 = &off_24ED67A50;
  v44[1] = this;
  v44[2] = re::ecs2::ProjectiveShadowReceiverManager::groundingShadowComponentDidChangeHandler<REComponentDidChangeEvent>;
  v44[3] = 0;
  *(_QWORD *)&v155 = v44;
  v136 = *((_QWORD *)&v154 + 1);
  v137 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v135, (uint64_t)&v153);
  v45 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v13, (uint64_t)v135, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v47 = v46;
  if (v137)
  {
    (**(void (***)(_BYTE *))v137)(v137);
    if (v137 != v135)
      (*(void (**)(uint64_t))(*(_QWORD *)v136 + 40))(v136);
    v137 = 0;
  }
  v48 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
  *v48 = v45;
  v48[1] = v47;
  v49 = (re *)v155;
  if ((_QWORD)v155)
  {
    v49 = (re *)(**(uint64_t (***)(_QWORD))v155)(v155);
    if ((__int128 *)v155 != &v153)
      v49 = (re *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v154 + 1) + 40))(*((_QWORD *)&v154 + 1));
  }
  *((_QWORD *)&v154 + 1) = re::globalAllocators(v49)[2];
  v50 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)&v154 + 1) + 32))(*((_QWORD *)&v154 + 1), 32, 0);
  *v50 = &off_24ED67AA8;
  v50[1] = this;
  v50[2] = re::ecs2::ProjectiveShadowReceiverManager::groundingShadowComponentWillDeactivateHandler;
  v50[3] = 0;
  *(_QWORD *)&v155 = v50;
  v133 = *((_QWORD *)&v154 + 1);
  v134 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v132, (uint64_t)&v153);
  v51 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v13, (uint64_t)v132, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v53 = v52;
  if (v134)
  {
    (**(void (***)(_BYTE *))v134)(v134);
    if (v134 != v132)
      (*(void (**)(uint64_t))(*(_QWORD *)v133 + 40))(v133);
    v134 = 0;
  }
  v54 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
  *v54 = v51;
  v54[1] = v53;
  v130 = *((_QWORD *)&v154 + 1);
  v131 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v129, (uint64_t)&v153);
  v55 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v13, (uint64_t)v129, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v57 = v56;
  if (v131)
  {
    (**(void (***)(_BYTE *))v131)(v131);
    if (v131 != v129)
      (*(void (**)(uint64_t))(*(_QWORD *)v130 + 40))(v130);
    v131 = 0;
  }
  v58 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
  *v58 = v55;
  v58[1] = v57;
  v59 = (re *)v155;
  if ((_QWORD)v155)
  {
    v59 = (re *)(**(uint64_t (***)(_QWORD))v155)(v155);
    if ((__int128 *)v155 != &v153)
      v59 = (re *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v154 + 1) + 40))(*((_QWORD *)&v154 + 1));
  }
  v60 = *((_QWORD *)this + 2);
  if (v60)
  {
    v61 = 8 * v60;
    v62 = (uint64_t *)*((_QWORD *)this + 3);
    do
    {
      v63 = *v62;
      *((_QWORD *)&v154 + 1) = re::globalAllocators(v59)[2];
      *(_QWORD *)&v155 = 0;
      v64 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)&v154 + 1) + 32))(*((_QWORD *)&v154 + 1), 32, 0);
      *v64 = &off_24ED679F8;
      v64[1] = this;
      v64[2] = re::ecs2::ProjectiveShadowReceiverManager::planeDidChangeHandler<REComponentDidActivateEvent>;
      v64[3] = 0;
      *(_QWORD *)&v155 = v64;
      v127 = *((_QWORD *)&v154 + 1);
      v128 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v126, (uint64_t)&v153);
      v65 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v13, (uint64_t)v126, v63, 0);
      v67 = v66;
      if (v128)
      {
        (**(void (***)(_BYTE *))v128)(v128);
        if (v128 != v126)
          (*(void (**)(uint64_t))(*(_QWORD *)v127 + 40))(v127);
        v128 = 0;
      }
      v68 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
      *v68 = v65;
      v68[1] = v67;
      v69 = (re *)v155;
      if ((_QWORD)v155)
      {
        v69 = (re *)(**(uint64_t (***)(_QWORD))v155)(v155);
        if ((__int128 *)v155 != &v153)
          v69 = (re *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v154 + 1) + 40))(*((_QWORD *)&v154 + 1));
      }
      *((_QWORD *)&v154 + 1) = re::globalAllocators(v69)[2];
      *(_QWORD *)&v155 = 0;
      v70 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)&v154 + 1) + 32))(*((_QWORD *)&v154 + 1), 32, 0);
      *v70 = &off_24ED67A50;
      v70[1] = this;
      v70[2] = re::ecs2::ProjectiveShadowReceiverManager::planeDidChangeHandler<REComponentDidChangeEvent>;
      v70[3] = 0;
      *(_QWORD *)&v155 = v70;
      v124 = *((_QWORD *)&v154 + 1);
      v125 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v123, (uint64_t)&v153);
      v71 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v13, (uint64_t)v123, v63, 0);
      v73 = v72;
      if (v125)
      {
        (**(void (***)(_BYTE *))v125)(v125);
        if (v125 != v123)
          (*(void (**)(uint64_t))(*(_QWORD *)v124 + 40))(v124);
        v125 = 0;
      }
      v74 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
      *v74 = v71;
      v74[1] = v73;
      v75 = (re *)v155;
      if ((_QWORD)v155)
      {
        v75 = (re *)(**(uint64_t (***)(_QWORD))v155)(v155);
        if ((__int128 *)v155 != &v153)
          v75 = (re *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v154 + 1) + 40))(*((_QWORD *)&v154 + 1));
      }
      *((_QWORD *)&v154 + 1) = re::globalAllocators(v75)[2];
      *(_QWORD *)&v155 = 0;
      v76 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)&v154 + 1) + 32))(*((_QWORD *)&v154 + 1), 32, 0);
      *v76 = &off_24ED67AA8;
      v76[1] = this;
      v76[2] = re::ecs2::ProjectiveShadowReceiverManager::planeWillDeactivateHandler;
      v76[3] = 0;
      *(_QWORD *)&v155 = v76;
      v121 = *((_QWORD *)&v154 + 1);
      v122 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v120, (uint64_t)&v153);
      v77 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v13, (uint64_t)v120, v63, 0);
      v79 = v78;
      if (v122)
      {
        (**(void (***)(_BYTE *))v122)(v122);
        if (v122 != v120)
          (*(void (**)(uint64_t))(*(_QWORD *)v121 + 40))(v121);
        v122 = 0;
      }
      v80 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
      *v80 = v77;
      v80[1] = v79;
      v59 = (re *)v155;
      if ((_QWORD)v155)
      {
        v59 = (re *)(**(uint64_t (***)(_QWORD))v155)(v155);
        if ((__int128 *)v155 != &v153)
          v59 = (re *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)&v154 + 1) + 40))(*((_QWORD *)&v154 + 1));
      }
      ++v62;
      v61 -= 8;
    }
    while (v61);
  }
  v117[0] = re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v117[1] = re::ecs2::ComponentImpl<re::ecs2::ShadowClusterComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v81 = (re *)re::DynamicArray<re::ecs2::ComponentTypeBase const*>::DynamicArray((uint64_t)&v153, (char *)v117, 2uLL);
  if ((_QWORD)v154)
  {
    v82 = 8 * v154;
    v83 = (uint64_t *)v155;
    do
    {
      v84 = *v83;
      v118 = re::globalAllocators(v81)[2];
      v119 = 0;
      v85 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v118 + 32))(v118, 32, 0);
      *(_QWORD *)v85 = &off_24ED679F8;
      *((_QWORD *)v85 + 1) = this;
      *((_QWORD *)v85 + 2) = re::ecs2::ProjectiveShadowReceiverManager::receiverDidChangeHandler<REComponentDidActivateEvent>;
      *((_QWORD *)v85 + 3) = 0;
      v119 = v85;
      v115 = v118;
      v116 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v114, (uint64_t)v117);
      v86 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v13, (uint64_t)v114, v84, 0);
      v88 = v87;
      if (v116)
      {
        (**(void (***)(_BYTE *))v116)(v116);
        if (v116 != v114)
          (*(void (**)(uint64_t))(*(_QWORD *)v115 + 40))(v115);
        v116 = 0;
      }
      v89 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
      *v89 = v86;
      v89[1] = v88;
      v90 = v119;
      if (v119)
      {
        v90 = (re *)(**(uint64_t (***)(re *))v119)(v119);
        if (v119 != (re *)v117)
          v90 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v118 + 40))(v118);
      }
      v118 = re::globalAllocators(v90)[2];
      v119 = 0;
      v91 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v118 + 32))(v118, 32, 0);
      *(_QWORD *)v91 = &off_24ED67A50;
      *((_QWORD *)v91 + 1) = this;
      *((_QWORD *)v91 + 2) = re::ecs2::ProjectiveShadowReceiverManager::receiverDidChangeHandler<REComponentDidChangeEvent>;
      *((_QWORD *)v91 + 3) = 0;
      v119 = v91;
      v112 = v118;
      v113 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v111, (uint64_t)v117);
      v92 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v13, (uint64_t)v111, v84, 0);
      v94 = v93;
      if (v113)
      {
        (**(void (***)(_BYTE *))v113)(v113);
        if (v113 != v111)
          (*(void (**)(uint64_t))(*(_QWORD *)v112 + 40))(v112);
        v113 = 0;
      }
      v95 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
      *v95 = v92;
      v95[1] = v94;
      v96 = v119;
      if (v119)
      {
        v96 = (re *)(**(uint64_t (***)(re *))v119)(v119);
        if (v119 != (re *)v117)
          v96 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v118 + 40))(v118);
      }
      v118 = re::globalAllocators(v96)[2];
      v119 = 0;
      v97 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v118 + 32))(v118, 32, 0);
      *(_QWORD *)v97 = &off_24ED67AA8;
      *((_QWORD *)v97 + 1) = this;
      *((_QWORD *)v97 + 2) = re::ecs2::ProjectiveShadowReceiverManager::receiverWillDeactivateHandler;
      *((_QWORD *)v97 + 3) = 0;
      v119 = v97;
      v109 = v118;
      v110 = 0;
      re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v108, (uint64_t)v117);
      v98 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v13, (uint64_t)v108, v84, 0);
      v100 = v99;
      if (v110)
      {
        (**(void (***)(_BYTE *))v110)(v110);
        if (v110 != v108)
          (*(void (**)(uint64_t))(*(_QWORD *)v109 + 40))(v109);
        v110 = 0;
      }
      v101 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(v14);
      *v101 = v98;
      v101[1] = v100;
      v81 = v119;
      if (v119)
      {
        v81 = (re *)(**(uint64_t (***)(re *))v119)(v119);
        if (v119 != (re *)v117)
          v81 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v118 + 40))(v118);
      }
      ++v83;
      v82 -= 8;
    }
    while (v82);
  }
  v102 = *((_QWORD *)v107 + 13);
  v103 = *(_QWORD *)(v102 + 328);
  if (v103)
  {
    v104 = *(const re::ecs2::Entity ***)(v102 + 344);
    v105 = 8 * v103;
    do
    {
      v106 = *v104++;
      re::ecs2::ProjectiveShadowReceiverManager::addDirtyPlane(this, v106);
      re::ecs2::ProjectiveShadowReceiverManager::automaticallyAddOrRemoveReceiverRecursive(v106, (re::ecs2::Entity *)1);
      v105 -= 8;
    }
    while (v105);
  }
  result = v153;
  if ((_QWORD)v153)
  {
    if ((_QWORD)v155)
      return (*(uint64_t (**)(void))(*(_QWORD *)v153 + 40))();
  }
  return result;
}

BOOL re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::containsKey(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 120 * v3 + 16) == a2)
    return 1;
  do
  {
    LODWORD(v3) = *(_DWORD *)(v5 + 120 * v3 + 8) & 0x7FFFFFFF;
    result = (_DWORD)v3 != 0x7FFFFFFF;
  }
  while ((_DWORD)v3 != 0x7FFFFFFF && *(_QWORD *)(v5 + 120 * v3 + 16) != a2);
  return result;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::entityDidActivate(re::ecs2::ProjectiveShadowReceiverManager *a1, re::ecs2::Entity *a2)
{
  re::ecs2::Entity *v4;

  v4 = a2;
  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove((uint64_t)a1 + 504, (uint64_t *)&v4);
  re::ecs2::ProjectiveShadowReceiverManager::addDirtyPlane(a1, v4);
  re::ecs2::ProjectiveShadowReceiverManager::addDirtyReceiver((uint64_t)a1, v4);
  return 0;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::entityDidReparent(re::ecs2::ProjectiveShadowReceiverManager *a1, const re::ecs2::Entity *a2)
{
  re::ecs2::ProjectiveShadowReceiverManager::addDirtyPlane(a1, a2);
  return 0;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::entityWillDeactivate(uint64_t a1, re::ecs2::Entity *a2)
{
  re::ecs2::Entity *v3;
  re::ecs2::Entity *v4;
  unint64_t v5;
  uint64_t v6;
  re::ecs2::Entity *v8;
  re::ecs2::Entity *v9;

  v8 = a2;
  re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(a1 + 504, (uint64_t *)&v8);
  re::ecs2::ProjectiveShadowReceiverManager::removeDirtyReceiver((re::ecs2::ProjectiveShadowReceiverManager *)a1, v8);
  v3 = v8;
  v9 = v8;
  re::ecs2::ProjectiveShadowReceiverManager::markReceiversInSubtreeDirty((re::ecs2::ProjectiveShadowReceiverManager *)a1, v8);
  re::ecs2::ShadowPlaneTracking::invalidatePlanesForSubtree((re::ecs2::ShadowPlaneTracking *)(a1 + 8), v3);
  do
  {
    v4 = v3;
    v3 = (re::ecs2::Entity *)*((_QWORD *)v3 + 3);
  }
  while (v3);
  v5 = *((_QWORD *)v4 + 2);
  if (v5)
  {
    v6 = re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet(a1 + 408, v5);
    if (v6)
      re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(v6 + 48, (uint64_t *)&v9);
  }
  return 0;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::groundingShadowComponentDidChangeHandler<REComponentDidActivateEvent>(uint64_t a1, re::ecs2::ProjectiveShadowReceiverManager *a2)
{
  re::ecs2::ProjectiveShadowReceiverManager::automaticallyAddOrRemoveReceiverRecursive(a2, 0);
  return 0;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::groundingShadowComponentDidChangeHandler<REComponentDidChangeEvent>(uint64_t a1, re::ecs2::ProjectiveShadowReceiverManager *a2)
{
  re::ecs2::ProjectiveShadowReceiverManager::automaticallyAddOrRemoveReceiverRecursive(a2, 0);
  return 0;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::groundingShadowComponentWillDeactivateHandler(uint64_t a1, uint64_t a2)
{
  void *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id location;

  if (a2)
    v3 = (void *)(a2 + 8);
  else
    v3 = 0;
  objc_initWeak(&location, v3);
  v4 = (unint64_t)location - 8;
  if (!location)
    v4 = 0;
  v5 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (v4 ^ (v4 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v4 ^ (v4 >> 30))) >> 27));
  v6 = v5 ^ (v5 >> 31);
  v7 = *(unsigned int *)(a1 + 480);
  if (!(_DWORD)v7)
  {
    LODWORD(v8) = 0;
    goto LABEL_13;
  }
  v8 = v6 % v7;
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 464) + 4 * (v6 % v7));
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_13:
    re::HashSetBase<re::ArcWeakPtr<re::ecs2::Entity>,re::ArcWeakPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::ArcWeakPtr<re::ecs2::Entity>>,re::Hash<re::ArcWeakPtr<re::ecs2::Entity>>,re::EqualTo<re::ArcWeakPtr<re::ecs2::Entity>>,true,false>::addAsMove(a1 + 456, v8, v6, &location);
    ++*(_DWORD *)(a1 + 496);
    goto LABEL_14;
  }
  v10 = *(_QWORD *)(a1 + 472);
  while (*(id *)(v10 + 24 * v9 + 16) != location)
  {
    LODWORD(v9) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v9 == 0x7FFFFFFF)
      goto LABEL_13;
  }
LABEL_14:
  objc_destroyWeak(&location);
  return 0;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::planeDidChangeHandler<REComponentDidActivateEvent>(re::ecs2::ProjectiveShadowReceiverManager *a1, const re::ecs2::Entity *a2)
{
  re::ecs2::ProjectiveShadowReceiverManager::addDirtyPlane(a1, a2);
  return 0;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::planeDidChangeHandler<REComponentDidChangeEvent>(re::ecs2::ProjectiveShadowReceiverManager *a1, const re::ecs2::Entity *a2)
{
  re::ecs2::ProjectiveShadowReceiverManager::addDirtyPlane(a1, a2);
  return 0;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::planeWillDeactivateHandler(re::ecs2::ProjectiveShadowReceiverManager *a1, const re::ecs2::Entity *a2)
{
  re::ecs2::ProjectiveShadowReceiverManager::addDirtyPlane(a1, a2);
  return 0;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::receiverDidChangeHandler<REComponentDidActivateEvent>(uint64_t a1, const re::ecs2::Entity *a2)
{
  re::ecs2::ProjectiveShadowReceiverManager::addDirtyReceiver(a1, a2);
  return 0;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::receiverDidChangeHandler<REComponentDidChangeEvent>(uint64_t a1, const re::ecs2::Entity *a2)
{
  re::ecs2::ProjectiveShadowReceiverManager::addDirtyReceiver(a1, a2);
  return 0;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::receiverWillDeactivateHandler(re::ecs2::ProjectiveShadowReceiverManager *a1, const re::ecs2::Entity *a2)
{
  re::ecs2::ProjectiveShadowReceiverManager::removeDirtyReceiver(a1, a2);
  return 0;
}

void re::ecs2::ProjectiveShadowReceiverManager::automaticallyAddOrRemoveReceiverRecursive(re::ecs2::ProjectiveShadowReceiverManager *this, re::ecs2::Entity *a2)
{
  int v2;
  re::ecs2::EntityComponentCollection *v4;
  uint64_t v5;
  re::ecs2::Entity *v6;
  BOOL v7;
  uint64_t v8;
  const __int16 *v9;
  int16x8_t *v10;
  int16x8_t v11;
  int v12;
  uint16x8_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  BOOL v19;

  v2 = (int)a2;
  v4 = (re::ecs2::ProjectiveShadowReceiverManager *)((char *)this + 32);
  v5 = re::ecs2::EntityComponentCollection::get((re::ecs2::ProjectiveShadowReceiverManager *)((char *)this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::GroundingShadowComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (*((_QWORD *)this + 22))
    v7 = v5 == 0;
  else
    v7 = 1;
  if (v7 || !*(_BYTE *)(v5 + 27))
  {
    re::ecs2::ProjectiveShadowReceiverManager::automaticallyRemoveReceiver(this, v6);
  }
  else
  {
    v8 = *((unsigned __int16 *)this + 41);
    if (!*((_WORD *)this + 41))
      goto LABEL_13;
    v9 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                         + 16);
    v10 = (int16x8_t *)*((_QWORD *)this + 11);
    v11 = vld1q_dup_s16(v9);
    v12 = 1;
    while (1)
    {
      v13 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v11, *v10), (int8x16_t)xmmword_2260F1E80);
      v13.i16[0] = vmaxvq_u16(v13);
      if (v13.i32[0])
        break;
      v12 -= 8;
      ++v10;
      if (!--v8)
        goto LABEL_13;
    }
    if (v13.u16[0] - v12 >= *((unsigned __int16 *)this + 40))
LABEL_13:
      *(_BYTE *)(re::ecs2::EntityComponentCollection::add(v4, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 41) = 1;
  }
  if (v2)
  {
    v14 = *((_QWORD *)this + 41);
    if (v14)
    {
      v15 = (uint64_t *)*((_QWORD *)this + 43);
      v16 = 8 * v14;
      do
      {
        v17 = *v15;
        if (*v15)
        {
          v18 = (id)(v17 + 8);
          re::ecs2::ProjectiveShadowReceiverManager::automaticallyAddOrRemoveReceiverRecursive((re::ecs2::ProjectiveShadowReceiverManager *)v17, (re::ecs2::Entity *)1, v19);

        }
        ++v15;
        v16 -= 8;
      }
      while (v16);
    }
  }
}

void re::ecs2::ProjectiveShadowReceiverManager::unregisterScene(re::ecs2::ProjectiveShadowReceiverManager *this, re::ecs2::Scene *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;
  const re::ecs2::Entity *v16;
  re::ecs2::Entity *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  _QWORD v29[2];
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _BYTE v35[120];
  unint64_t v36;

  v36 = (unint64_t)a2;
  v3 = (_QWORD *)((char *)this + 408);
  if (re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::containsKey((uint64_t)this + 408, (unint64_t)a2))
  {
    v4 = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)this + 552, (uint64_t *)&v36);
    if (v4)
    {
      v5 = *(_QWORD *)(v36 + 288);
      if (v5)
      {
        v6 = v4;
        v7 = *(_QWORD *)(v4 + 40);
        if (v7)
        {
          for (i = 0; i != v7; ++i)
          {
            v9 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v6, i);
            re::EventBus::unsubscribe(v5, *(_QWORD *)v9, *(_QWORD *)(v9 + 8));
          }
        }
      }
      re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 552, (uint64_t *)&v36);
    }
    re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v35);
    v29[0] = 0;
    v29[1] = 0;
    v30 = 1;
    v32 = 0;
    v33 = 0;
    v31 = 0;
    v34 = 0;
    re::BucketArray<re::ecs2::Entity *,32ul>::init((uint64_t)v29, (uint64_t)v35, 1uLL);
    v10 = *(_QWORD *)(v36 + 104);
    v11 = *(_QWORD *)(v10 + 328);
    if (v11)
    {
      v12 = *(uint64_t **)(v10 + 344);
      v13 = 8 * v11;
      do
      {
        v14 = *v12++;
        *(_QWORD *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v29) = v14;
        v13 -= 8;
      }
      while (v13);
    }
    for (j = v33; v33; j = v33)
    {
      v16 = *(const re::ecs2::Entity **)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v29, j - 1);
      re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v29, --v33);
      ++v34;
      re::ecs2::ProjectiveShadowClusterTracking::removeFromCluster((re::ecs2::ProjectiveShadowReceiverManager *)((char *)this + 200), v16);
      re::ecs2::ShadowPlaneTracking::invalidatePlanesForSubtree((re::ecs2::ProjectiveShadowReceiverManager *)((char *)this + 8), v16);
      re::ecs2::ProjectiveShadowReceiverManager::automaticallyRemoveReceiver(v16, v17);
      v18 = *((_QWORD *)v16 + 41);
      if (v18)
      {
        v19 = (uint64_t *)*((_QWORD *)v16 + 43);
        v20 = 8 * v18;
        do
        {
          v21 = *v19++;
          *(_QWORD *)re::BucketArray<re::ecs2::Entity *,32ul>::addUninitialized((uint64_t)v29) = v21;
          v20 -= 8;
        }
        while (v20);
      }
    }
    if (*v3)
    {
      v22 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v36 ^ (v36 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v36 ^ (v36 >> 30))) >> 27));
      v23 = (v22 ^ (v22 >> 31)) % *((unsigned int *)this + 108);
      v24 = *((_QWORD *)this + 52);
      v25 = *(unsigned int *)(v24 + 4 * v23);
      if ((_DWORD)v25 != 0x7FFFFFFF)
      {
        v26 = *((_QWORD *)this + 53);
        if (*(_QWORD *)(v26 + 120 * v25 + 16) == v36)
        {
          *(_DWORD *)(v24 + 4 * v23) = *(_DWORD *)(v26 + 120 * v25 + 8) & 0x7FFFFFFF;
LABEL_23:
          re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::EntryWithHash::free(*((_QWORD *)this + 53) + 120 * v25);
          *(_DWORD *)(*((_QWORD *)this + 53) + 120 * v25 + 8) = *(_DWORD *)(*((_QWORD *)this + 53) + 120 * v25 + 8) & 0x80000000 | *((_DWORD *)this + 111);
          *((_DWORD *)this + 111) = v25;
          --*((_DWORD *)this + 109);
          ++*((_DWORD *)this + 112);
        }
        else
        {
          while (1)
          {
            v27 = v25;
            v28 = *(_DWORD *)(v26 + 120 * v25 + 8);
            v25 = v28 & 0x7FFFFFFF;
            if ((v28 & 0x7FFFFFFF) == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v26 + 120 * v25 + 16) == v36)
            {
              *(_DWORD *)(v26 + 120 * v27 + 8) = *(_DWORD *)(v26 + 120 * v27 + 8) & 0x80000000 | *(_DWORD *)(v26 + 120 * v25 + 8) & 0x7FFFFFFF;
              goto LABEL_23;
            }
          }
        }
      }
    }
    re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v29);
    if (v29[0])
    {
      if ((v30 & 1) == 0)
        (*(void (**)(void))(*(_QWORD *)v29[0] + 40))();
    }
    re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v35);
  }
}

void re::ecs2::ProjectiveShadowReceiverManager::markReceiversInSubtreeDirty(re::ecs2::ProjectiveShadowReceiverManager *this, const re::ecs2::Entity *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[2];
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BYTE v15[120];

  re::StackScratchAllocator::StackScratchAllocator((re::StackScratchAllocator *)v15);
  v9[0] = 0;
  v9[1] = 0;
  v10 = 1;
  v12 = 0;
  v13 = 0;
  v11 = 0;
  v14 = 0;
  re::BucketArray<re::ecs2::Entity const*,32ul>::init((uint64_t)v9, (uint64_t)v15, 1uLL);
  *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v9) = a2;
  while (v13)
  {
    v4 = *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v9, v13 - 1);
    re::BucketArray<re::ecs2::Entity const*,32ul>::operator[]((uint64_t)v9, --v13);
    ++v14;
    if ((*(_BYTE *)(v4 + 288) & 1) != 0)
    {
      re::ecs2::ProjectiveShadowReceiverManager::addDirtyReceiver((uint64_t)this, (const re::ecs2::Entity *)v4);
      v5 = *(_QWORD *)(v4 + 328);
      if (v5)
      {
        v6 = *(uint64_t **)(v4 + 344);
        v7 = 8 * v5;
        do
        {
          v8 = *v6++;
          *(_QWORD *)re::BucketArray<re::ecs2::Entity const*,32ul>::addUninitialized((uint64_t)v9) = v8;
          v7 -= 8;
        }
        while (v7);
      }
    }
  }
  re::BucketArray<re::ecs2::Entity const*,32ul>::deinit((uint64_t)v9);
  if (v9[0] && (v10 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v9[0] + 40))();
  re::StackScratchAllocator::~StackScratchAllocator((re::StackScratchAllocator *)v15);
}

uint64_t re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 120 * v3 + 16) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 120 * v3 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v5 + 120 * v3 + 16) == a2)
        return v5 + 120 * v3 + 24;
    }
    return 0;
  }
  return v5 + 120 * v3 + 24;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::addDirtyReceiver(uint64_t this, const re::ecs2::Entity *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  const re::ecs2::Entity *v6;

  v6 = a2;
  if ((*((_BYTE *)a2 + 288) & 1) != 0)
  {
    v2 = this;
    this = re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(this + 504, (uint64_t *)&v6);
    if ((this & 1) == 0)
    {
      this = re::ecs2::EntityComponentCollection::get((const re::ecs2::Entity *)((char *)v6 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (this)
      {
        this = re::ecs2::ProjectiveShadowReceiverManager::invalidateReceiver(v2, this);
        v3 = (uint64_t)v6;
        do
        {
          v4 = v3;
          v3 = *(_QWORD *)(v3 + 24);
        }
        while (v3);
        v5 = *(_QWORD *)(v4 + 16);
        if (v5)
        {
          this = re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet(v2 + 408, v5);
          if (this)
            return re::HashSetBase<re::ecs2::Entity const*,re::ecs2::Entity const*,re::internal::ValueAsKey<re::ecs2::Entity const*>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::add(this, (uint64_t *)&v6);
        }
      }
    }
  }
  return this;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::invalidateReceiver(uint64_t this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int *v15;
  int v16;
  int v17;

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v4 = this;
    re::ecs2::ProjectiveShadowClusterTracking::removeFromCluster((re::ecs2::ProjectiveShadowClusterTracking *)(this + 200), *(const re::ecs2::Entity **)(a2 + 16));
    this = re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v4 + 152, v2);
    if (this)
    {
      this = re::DataArray<re::ecs2::ShadowPlaneInfo>::tryGet(v4 + 40, *(_QWORD *)this);
      if (this)
      {
        v5 = *(unsigned int *)(this + 88);
        if ((_DWORD)v5)
        {
          v6 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
          v7 = (v6 ^ (v6 >> 31)) % v5;
          v8 = *(_QWORD *)(this + 72);
          v9 = *(unsigned int *)(v8 + 4 * v7);
          if ((_DWORD)v9 != 0x7FFFFFFF)
          {
            v10 = *(_QWORD *)(this + 80);
            if (*(_QWORD *)(v10 + 24 * v9 + 16) == a2)
            {
              *(_DWORD *)(v8 + 4 * v7) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
LABEL_11:
              v12 = *(_QWORD *)(this + 80);
              v13 = v12 + 24 * v9;
              v16 = *(_DWORD *)(v13 + 8);
              v15 = (int *)(v13 + 8);
              v14 = v16;
              if (v16 < 0)
              {
                *v15 = v14 & 0x7FFFFFFF;
                v12 = *(_QWORD *)(this + 80);
                v14 = *(_DWORD *)(v12 + 24 * v9 + 8);
              }
              v17 = *(_DWORD *)(this + 104);
              *(_DWORD *)(v12 + 24 * v9 + 8) = *(_DWORD *)(this + 100) | v14 & 0x80000000;
              --*(_DWORD *)(this + 92);
              *(_DWORD *)(this + 100) = v9;
              *(_DWORD *)(this + 104) = v17 + 1;
            }
            else
            {
              while (1)
              {
                v11 = v9;
                LODWORD(v9) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
                if ((_DWORD)v9 == 0x7FFFFFFF)
                  break;
                if (*(_QWORD *)(v10 + 24 * v9 + 16) == a2)
                {
                  *(_DWORD *)(v10 + 24 * v11 + 8) = *(_DWORD *)(v10 + 24 * v11 + 8) & 0x80000000 | *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
                  goto LABEL_11;
                }
              }
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::removeDirtyReceiver(re::ecs2::ProjectiveShadowReceiverManager *this, const re::ecs2::Entity *a2)
{
  const re::ecs2::Entity *v2;
  uint64_t result;
  const re::ecs2::Entity *v5;
  unint64_t v6;
  const re::ecs2::Entity *v7;

  v2 = a2;
  v7 = a2;
  result = re::ecs2::EntityComponentCollection::get((const re::ecs2::Entity *)((char *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ProjectiveShadowReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
    result = re::ecs2::ProjectiveShadowReceiverManager::invalidateReceiver((uint64_t)this, result);
  do
  {
    v5 = v2;
    v2 = (const re::ecs2::Entity *)*((_QWORD *)v2 + 3);
  }
  while (v2);
  v6 = *((_QWORD *)v5 + 2);
  if (v6)
  {
    result = re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)this + 408, v6);
    if (result)
      return re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::remove(result, (uint64_t *)&v7);
  }
  return result;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::perEntityShadowPlanes(re::ecs2::ProjectiveShadowReceiverManager *this)
{
  return (uint64_t)this + 152;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::shadowPlanes(re::ecs2::ProjectiveShadowReceiverManager *this)
{
  return (uint64_t)this + 40;
}

void re::ecs2::ProjectiveShadowReceiverManager::~ProjectiveShadowReceiverManager(re::ecs2::ProjectiveShadowReceiverManager *this)
{
  re::ecs2::ProjectiveShadowReceiverManager::~ProjectiveShadowReceiverManager(this);
  JUMPOUT(0x2276933B8);
}

{
  unint64_t v1;
  re::ecs2::ProjectiveShadowReceiverManager *v2;
  _QWORD *v3;
  __n128 v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  double v14;
  _QWORD *v15;
  double v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  unint64_t v28;
  __int16 v29;
  unint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v2 = this;
  v36 = *MEMORY[0x24BDAC8D0];
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 69);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v2 + 63);
  re::HashSetBase<re::ArcWeakPtr<re::ecs2::Entity>,re::ArcWeakPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::ArcWeakPtr<re::ecs2::Entity>>,re::Hash<re::ArcWeakPtr<re::ecs2::Entity>>,re::EqualTo<re::ArcWeakPtr<re::ecs2::Entity>>,true,false>::deinit((uint64_t *)v2 + 57);
  re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)v2 + 51);
  v3 = (_QWORD *)((char *)v2 + 200);
  re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v2 + 45);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v2 + 39);
  v4.n128_f64[0] = re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)v2 + 33);
  if (!*((_DWORD *)v2 + 61))
  {
    if (*v3)
    {
      if (*((_QWORD *)v2 + 29))
        (*(void (**)(_QWORD, double))(*(_QWORD *)*v3 + 40))(*v3, v4.n128_f64[0]);
      *((_QWORD *)v2 + 29) = 0;
      *((_QWORD *)v2 + 26) = 0;
      *((_QWORD *)v2 + 27) = 0;
      *v3 = 0;
      ++*((_DWORD *)v2 + 56);
    }
    goto LABEL_34;
  }
  v20 = (_QWORD *)((char *)v2 + 200);
  if (*((_DWORD *)v2 + 60))
  {
    LODWORD(v21) = 0;
    if (!*((_QWORD *)v2 + 27))
      goto LABEL_54;
    v5 = (_QWORD *)((char *)v2 + 200);
    if (!**(_DWORD **)(*((_QWORD *)v2 + 29) + 8))
    {
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
      v5 = v20;
    }
  }
  else
  {
    LODWORD(v21) = -1;
    v5 = (_QWORD *)((char *)v2 + 200);
  }
  v20 = v5;
  v6 = (unsigned __int16)v21;
  if (v3 != v5 || (unsigned __int16)v21 != 0xFFFFLL || (v21 & 0xFFFF0000) != 0xFFFF0000)
  {
    v7 = WORD1(v21);
    while (1)
    {
      v8 = v5[2];
      if (v8 <= v7)
        break;
      re::DataArray<re::ecs2::ProjectiveShadowClusterInfo>::destroy((uint64_t)v2 + 200, ((unint64_t)(*(_DWORD *)(*(_QWORD *)(v5[4] + 16 * v7 + 8) + 4 * v6) & 0xFFFFFF) << 32) | (v7 << 16) | v6);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
      v5 = v20;
      v6 = (unsigned __int16)v21;
      v7 = WORD1(v21);
      if (v20 == v3 && (unsigned __int16)v21 == 0xFFFFLL && WORD1(v21) == 0xFFFFLL)
        goto LABEL_19;
    }
LABEL_52:
    v22 = 0;
    v35 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v23 = 136315906;
    v24 = "operator[]";
    v25 = 1024;
    v26 = 797;
    v27 = 2048;
    v28 = v7;
    v29 = 2048;
    v30 = v8;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_53;
  }
LABEL_19:
  v9 = *((_QWORD *)v2 + 27);
  v7 = v9 - 1;
  if (v9 == 1)
    goto LABEL_28;
  v8 = 16 * v9 - 16;
  do
  {
    if (v9 <= v7)
    {
      v20 = 0;
      v35 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v23 = 136315906;
      v24 = "operator[]";
      v25 = 1024;
      v26 = 789;
      v27 = 2048;
      v28 = v7;
      v29 = 2048;
      v30 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_51:
      v20 = 0;
      v35 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v23 = 136315906;
      v24 = "removeAt";
      v25 = 1024;
      v26 = 931;
      v27 = 2048;
      v28 = v7;
      v29 = 2048;
      v30 = v1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_52;
    }
    v10 = (_QWORD *)(*((_QWORD *)v2 + 29) + v8);
    (*(void (**)(_QWORD, _QWORD, __n128))(**((_QWORD **)v2 + 25) + 40))(*((_QWORD *)v2 + 25), *v10, v4);
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v2 + 25) + 40))(*((_QWORD *)v2 + 25), v10[1]);
    v1 = *((_QWORD *)v2 + 27);
    if (v1 <= v7)
      goto LABEL_51;
    v9 = v1 - 1;
    if (v1 - 1 > v7)
    {
      v11 = *((_QWORD *)v2 + 29);
      v4 = *(__n128 *)(v11 + 16 * v1 - 16);
      *(__n128 *)(v11 + v8) = v4;
      v9 = *((_QWORD *)v2 + 27) - 1;
    }
    *((_QWORD *)v2 + 27) = v9;
    ++*((_DWORD *)v2 + 56);
    v8 -= 16;
    --v7;
  }
  while (v7);
  *((_QWORD *)v2 + 31) = 0xFFFFFFFF00000000;
  if (!v9)
  {
    v20 = 0;
    v35 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v2 = (re::ecs2::ProjectiveShadowReceiverManager *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v23 = 136315906;
    v24 = "operator[]";
    v25 = 1024;
    v26 = 789;
    v27 = 2048;
    v28 = 0;
    v29 = 2048;
    v30 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_28:
    *((_QWORD *)v2 + 31) = 0xFFFFFFFF00000000;
  }
  v12 = (_QWORD *)*((_QWORD *)v2 + 29);
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v2 + 25) + 40))(*((_QWORD *)v2 + 25), *v12);
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v2 + 25) + 40))(*((_QWORD *)v2 + 25), v12[1]);
  v13 = *((_QWORD *)v2 + 25);
  if (v13)
  {
    if (*((_QWORD *)v2 + 29))
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
    *((_QWORD *)v2 + 29) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)v2 + 56);
  }
  *((_DWORD *)v2 + 61) = 0;
LABEL_34:
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v2 + 19);
  v14 = re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v2 + 13);
  v15 = (_QWORD *)((char *)v2 + 40);
  if (*((_DWORD *)v2 + 21))
  {
    v16 = re::DataArray<re::ecs2::ShadowPlaneInfo>::clear((_QWORD *)v2 + 5);
    if (*((_QWORD *)v2 + 7))
    {
      v17 = (_QWORD *)*((_QWORD *)v2 + 9);
      (*(void (**)(_QWORD, _QWORD, double))(**((_QWORD **)v2 + 5) + 40))(*((_QWORD *)v2 + 5), *v17, v16);
      (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v2 + 5) + 40))(*((_QWORD *)v2 + 5), v17[1]);
      v18 = *((_QWORD *)v2 + 5);
      if (v18)
      {
        if (*((_QWORD *)v2 + 9))
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
        *((_QWORD *)v2 + 9) = 0;
        *((_QWORD *)v2 + 6) = 0;
        *((_QWORD *)v2 + 7) = 0;
        *v15 = 0;
        ++*((_DWORD *)v2 + 16);
      }
      *((_DWORD *)v2 + 21) = 0;
      goto LABEL_45;
    }
LABEL_53:
    v20 = 0;
    v35 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v23 = 136315906;
    v24 = "operator[]";
    v25 = 1024;
    v26 = 789;
    v27 = 2048;
    v28 = 0;
    v29 = 2048;
    v30 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_54:
    v22 = 0;
    v35 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v23 = 136315906;
    v24 = "operator[]";
    v25 = 1024;
    v26 = 797;
    v27 = 2048;
    v28 = 0;
    v29 = 2048;
    v30 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*v15)
  {
    if (*((_QWORD *)v2 + 9))
      (*(void (**)(_QWORD, double))(*(_QWORD *)*v15 + 40))(*v15, v14);
    *((_QWORD *)v2 + 9) = 0;
    *((_QWORD *)v2 + 6) = 0;
    *((_QWORD *)v2 + 7) = 0;
    *v15 = 0;
    ++*((_DWORD *)v2 + 16);
  }
LABEL_45:
  v19 = *((_QWORD *)v2 + 1);
  if (v19)
  {
    if (*((_QWORD *)v2 + 2))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v19 + 40))(v19, *((_QWORD *)v2 + 3));
      *((_QWORD *)v2 + 2) = 0;
      *((_QWORD *)v2 + 3) = 0;
    }
    *((_QWORD *)v2 + 1) = 0;
  }
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::perWorldShadowPlanes(re::ecs2::ProjectiveShadowReceiverManager *this)
{
  return (uint64_t)this + 104;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::perWorldShadowClusters(re::ecs2::ProjectiveShadowReceiverManager *this)
{
  return (uint64_t)this + 360;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::shadowClusters(re::ecs2::ProjectiveShadowReceiverManager *this)
{
  return (uint64_t)this + 200;
}

uint64_t re::ecs2::ProjectiveShadowReceiverManager::perEntityShadowClusters(re::ecs2::ProjectiveShadowReceiverManager *this)
{
  return (uint64_t)this + 312;
}

void re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED678F0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED678F0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED67948;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED67948;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED679A0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED679A0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED679F8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED679F8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED67A50;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED67A50;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::HashSetBase<re::ArcWeakPtr<re::ecs2::Entity>,re::ArcWeakPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::ArcWeakPtr<re::ecs2::Entity>>,re::Hash<re::ArcWeakPtr<re::ecs2::Entity>>,re::EqualTo<re::ArcWeakPtr<re::ecs2::Entity>>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, id *a4)
{
  uint64_t v8;
  int v9;
  int v10;
  signed int v11;
  uint64_t v12;
  BOOL v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  signed int v23;
  uint64_t v24;
  _BYTE v25[44];

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      v10 = *(_DWORD *)(a1 + 28);
      v11 = 2 * v10;
      v12 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v11)
          v13 = (_DWORD)v8 == v11;
        else
          v13 = 1;
        if (!v13 && (v10 & 0x80000000) == 0)
        {
          memset(v25, 0, 36);
          *(_QWORD *)&v25[36] = 0x7FFFFFFFLL;
          re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)v25, v12, v11);
          v14 = *(_OWORD *)v25;
          *(_OWORD *)v25 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v14;
          v15 = *(_QWORD *)&v25[16];
          v16 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v25[16] = v16;
          *(_QWORD *)(a1 + 16) = v15;
          v18 = *(_OWORD *)&v25[24];
          *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 24);
          v17 = *(_DWORD *)&v25[32];
          *(_OWORD *)(a1 + 24) = v18;
          v19 = v17;
          if (v17)
          {
            v20 = v16 + 16;
            do
            {
              if ((*(_DWORD *)(v20 - 8) & 0x80000000) != 0)
                re::HashSetBase<re::ArcWeakPtr<re::ecs2::Entity>,re::ArcWeakPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::ArcWeakPtr<re::ecs2::Entity>>,re::Hash<re::ArcWeakPtr<re::ecs2::Entity>>,re::EqualTo<re::ArcWeakPtr<re::ecs2::Entity>>,true,false>::addAsMove(a1, *(_QWORD *)(v20 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v20 - 16), v20);
              v20 += 24;
              --v19;
            }
            while (v19);
          }
          re::HashSetBase<re::ArcWeakPtr<re::ecs2::Entity>,re::ArcWeakPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::ArcWeakPtr<re::ecs2::Entity>>,re::Hash<re::ArcWeakPtr<re::ecs2::Entity>>,re::EqualTo<re::ArcWeakPtr<re::ecs2::Entity>>,true,false>::deinit((uint64_t *)v25);
        }
      }
      else
      {
        if (v11)
          v23 = v11;
        else
          v23 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v21 = *(_QWORD *)(a1 + 16);
    v22 = *(_DWORD *)(v21 + 24 * v8 + 8);
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 16);
    v22 = *(_DWORD *)(v21 + 24 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v22 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v21 + 24 * v8 + 8) = v22 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8) = a3;
  v24 = *(_QWORD *)(a1 + 16) + 24 * v8;
  *(_QWORD *)(v24 + 16) = 0;
  objc_moveWeak((id *)(v24 + 16), a4);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
}

double re::HashSetBase<re::ArcWeakPtr<re::ecs2::Entity>,re::ArcWeakPtr<re::ecs2::Entity>,re::internal::ValueAsKey<re::ArcWeakPtr<re::ecs2::Entity>>,re::Hash<re::ArcWeakPtr<re::ecs2::Entity>>,re::EqualTo<re::ArcWeakPtr<re::ecs2::Entity>>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          objc_destroyWeak((id *)(v6 + 16));
          *(_QWORD *)(v6 + 16) = 0;
          v3 = *((unsigned int *)a1 + 8);
        }
        v4 += 24;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED67AA8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED67AA8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ProjectiveShadowReceiverManager,REEventHandlerResult (re::ecs2::ProjectiveShadowReceiverManager::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

double re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  double result;

  v2 = *a1;
  if (v2)
  {
    if (*((_DWORD *)a1 + 8))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::EntryWithHash::free(a1[2] + v3);
        ++v4;
        v3 += 120;
      }
      while (v4 < *((unsigned int *)a1 + 8));
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::EntryWithHash::free(uint64_t a1)
{
  int v1;
  uint64_t *v2;
  double result;

  v1 = *(_DWORD *)(a1 + 8);
  if (v1 < 0)
  {
    *(_DWORD *)(a1 + 8) = v1 & 0x7FFFFFFF;
    v2 = (uint64_t *)(a1 + 24);
    re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(a1 + 72));
    return re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit(v2);
  }
  return result;
}

uint64_t re::DataArray<re::ecs2::ShadowPlaneInfo>::DataArray(uint64_t a1, uint64_t a2, int a3)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 52) = 0x1FFFFFFFFLL;
  *(_QWORD *)a1 = a2;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 44) = a3;
  re::DataArray<re::ecs2::ShadowPlaneInfo>::allocBlock((_QWORD *)a1);
  return a1;
}

_anonymous_namespace_ *re::DataArray<re::ecs2::ShadowPlaneInfo>::allocBlock(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _anonymous_namespace_ *result;
  uint64_t v8;
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;

  v3 = (unint64_t)*((unsigned int *)a1 + 11) << 7;
  v4 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v3, 0);
  if (!v4)
  {
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v3, *(_QWORD *)(*a1 + 8));
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  v6 = v4;
  v1 = 4 * *((unsigned int *)a1 + 11);
  result = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v1, 0);
  if (!result)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v1, *(_QWORD *)(*a1 + 8));
    result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    return result;
  }
  v9 = result;
  v11 = a1[1];
  v10 = a1[2];
  if (v10 >= v11)
  {
    v12 = v10 + 1;
    if (v11 < v10 + 1)
    {
      if (*a1)
      {
        v13 = 2 * v11;
        if (!v11)
          v13 = 8;
        if (v13 <= v12)
          v14 = v12;
        else
          v14 = v13;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v14);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v12);
        ++*((_DWORD *)a1 + 6);
      }
    }
    v10 = a1[2];
  }
  v15 = (uint64_t *)(a1[4] + 16 * v10);
  *v15 = v6;
  v15[1] = (uint64_t)v9;
  a1[2] = v10 + 1;
  ++*((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 12) = 0;
  return result;
}

_QWORD *re::BucketArray<re::ecs2::ShadowPlaneTrackingState,32ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::ecs2::ShadowPlaneTrackingState,32ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::ecs2::ShadowPlaneTrackingState,32ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 32 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 512, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

uint64_t re::BucketArray<re::ecs2::ShadowPlaneTrackingState,32ul>::addUninitialized(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 + 1 > 32 * v3)
  {
    re::BucketArray<re::ecs2::ShadowPlaneTrackingState,32ul>::setBucketsCapacity((_QWORD *)a1, (v2 + 32) >> 5);
    v3 = *(_QWORD *)(a1 + 8);
  }
  if (v3 <= v2 >> 5)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v4 = a1 + 24;
  else
    v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(v4 + 8 * (v2 >> 5));
  ++*(_QWORD *)(a1 + 40);
  ++*(_DWORD *)(a1 + 48);
  return v5 + 16 * (v2 & 0x1F);
}

void re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  signed int v21;
  _BYTE v22[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(_QWORD *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v22, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v22;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)v22 = v5;
      *(_QWORD *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v13 - 8) & 0x80000000) != 0)
          {
            v14 = *(_QWORD *)(v13 - 16);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 40 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 40 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 40 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v17) = v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v17 + 16) = *(_QWORD *)v13;
            *(_OWORD *)(*(_QWORD *)(a1 + 16) + 40 * v17 + 24) = *(_OWORD *)(v13 + 8);
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 40;
          --v10;
        }
        while (v10);
      }
      re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2)
      v21 = a2;
    else
      v21 = 3;
  }
}

uint64_t re::HashTable<unsigned long long,re::HashSet<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>,re::Hash<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,re::EqualTo<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(_QWORD *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v29, v13, v12);
          v15 = *(_OWORD *)v29;
          *(_OWORD *)v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v29[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v29[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v29[24];
          *(_OWORD *)&v29[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::HashSet<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>,re::Hash<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,re::EqualTo<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 72;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::HashSet<unsigned long long,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v29);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 72 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 72 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 72 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 16) = *a4;
  v25 = *(_QWORD *)(a1 + 16) + 72 * v9;
  *(_OWORD *)(v25 + 40) = 0u;
  *(_DWORD *)(v25 + 56) = 0;
  *(_OWORD *)(v25 + 24) = 0u;
  *(_QWORD *)(v25 + 60) = 0x7FFFFFFFLL;
  *(_QWORD *)(v25 + 24) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  v26 = *(_QWORD *)(v25 + 32);
  *(_QWORD *)(v25 + 32) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = v26;
  v27 = *(_QWORD *)(v25 + 40);
  *(_QWORD *)(v25 + 40) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v27;
  LODWORD(v27) = *(_DWORD *)(v25 + 48);
  *(_DWORD *)(v25 + 48) = *(_DWORD *)(a5 + 24);
  *(_DWORD *)(a5 + 24) = v27;
  LODWORD(v27) = *(_DWORD *)(v25 + 52);
  *(_DWORD *)(v25 + 52) = *(_DWORD *)(a5 + 28);
  *(_DWORD *)(a5 + 28) = v27;
  LODWORD(v27) = *(_DWORD *)(v25 + 56);
  *(_DWORD *)(v25 + 56) = *(_DWORD *)(a5 + 32);
  *(_DWORD *)(a5 + 32) = v27;
  LODWORD(v27) = *(_DWORD *)(v25 + 60);
  *(_DWORD *)(v25 + 60) = *(_DWORD *)(a5 + 36);
  *(_DWORD *)(a5 + 36) = v27;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t re::DataArray<re::ecs2::ProjectiveShadowClusterInfo>::DataArray(uint64_t a1, int a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 52) = 0x1FFFFFFFFLL;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 44) = a2;
  re::DataArray<re::ecs2::ProjectiveShadowClusterInfo>::allocBlock((unsigned int *)a1);
  return a1;
}

void re::DataArray<re::ecs2::ProjectiveShadowClusterInfo>::allocBlock(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;

  v2 = 80 * a1[11];
  v5.n128_u64[0] = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)a1 + 32))(*(_QWORD *)a1, v2, 0);
  if (v5.n128_u64[0])
  {
    v2 = 4 * a1[11];
    v5.n128_u64[1] = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)a1 + 32))(*(_QWORD *)a1, v2, 0);
    if (v5.n128_u64[1])
    {
      re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)a1, &v5);
      a1[12] = 0;
      return;
    }
  }
  else
  {
    re::internal::assertLog((re::internal *)6, v3, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v2, *(_QWORD *)(*(_QWORD *)a1 + 8), 0);
    _os_crash();
    __break(1u);
  }
  re::internal::assertLog((re::internal *)6, v4, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v2, *(_QWORD *)(*(_QWORD *)a1 + 8));
  _os_crash();
  __break(1u);
}

uint64_t re::HashTable<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>,re::HashTable<unsigned long long,re::DataArrayHandle<re::ecs2::ProjectiveShadowClusterInfo>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,re::EqualTo<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v29, 0, 36);
          *(_QWORD *)&v29[36] = 0x7FFFFFFFLL;
          re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v29, v13, v12);
          v15 = *(_OWORD *)v29;
          *(_OWORD *)v29 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v29[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v29[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v29[24];
          *(_OWORD *)&v29[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v29[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>,re::HashTable<unsigned long long,re::DataArrayHandle<re::ecs2::ProjectiveShadowClusterInfo>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>,re::Hash<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,re::EqualTo<re::DataArrayHandle<re::ecs2::ShadowPlaneInfo>>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 72;
              --v20;
            }
            while (v20);
          }
          re::HashTable<re::ecs2::Scene const*,re::HashTable<re::ecs2::Entity *,re::ecs2::ImageBasedLightReceiverComponent *,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)v29);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 72 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 72 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 72 * v9 + 8) = v23 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 16) = *a4;
  v25 = *(_QWORD *)(a1 + 16) + 72 * v9;
  *(_DWORD *)(v25 + 56) = 0;
  *(_OWORD *)(v25 + 40) = 0u;
  *(_OWORD *)(v25 + 24) = 0u;
  *(_QWORD *)(v25 + 60) = 0x7FFFFFFFLL;
  *(_QWORD *)(v25 + 24) = *(_QWORD *)a5;
  *(_QWORD *)a5 = 0;
  v26 = *(_QWORD *)(v25 + 32);
  *(_QWORD *)(v25 + 32) = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = v26;
  v27 = *(_QWORD *)(v25 + 40);
  *(_QWORD *)(v25 + 40) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)(a5 + 16) = v27;
  LODWORD(v27) = *(_DWORD *)(v25 + 48);
  *(_DWORD *)(v25 + 48) = *(_DWORD *)(a5 + 24);
  *(_DWORD *)(a5 + 24) = v27;
  LODWORD(v27) = *(_DWORD *)(v25 + 52);
  *(_DWORD *)(v25 + 52) = *(_DWORD *)(a5 + 28);
  *(_DWORD *)(a5 + 28) = v27;
  LODWORD(v27) = *(_DWORD *)(v25 + 56);
  *(_DWORD *)(v25 + 56) = *(_DWORD *)(a5 + 32);
  *(_DWORD *)(a5 + 32) = v27;
  LODWORD(v27) = *(_DWORD *)(v25 + 60);
  *(_DWORD *)(v25 + 60) = *(_DWORD *)(a5 + 36);
  *(_DWORD *)(a5 + 36) = v27;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
  return v9;
}

uint64_t *re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t v10;
  int v11;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  uint64_t *result;
  _BYTE v28[44];

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v10 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<re::DynamicString,re::MeshCompileOptions,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init((uint64_t)v28, v14, v13);
          v16 = *(_OWORD *)v28;
          *(_OWORD *)v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v28[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v28[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = v18 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0)
                re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 16), v22, v22 + 8);
              v22 += 120;
              --v21;
            }
            while (v21);
          }
          re::HashTable<re::ecs2::Scene const*,re::ecs2::ProjectiveShadowReceiverManager::DirtyEntities,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v13)
          v25 = 2 * v12;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 120 * v10 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 120 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 120 * v10 + 8) = v24 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 120 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 120 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 120 * v10) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 120 * v10 + 16) = *a4;
  v26 = *(_QWORD *)(a1 + 16) + 120 * v10;
  *(_DWORD *)(v26 + 56) = 0;
  *(_OWORD *)(v26 + 40) = 0u;
  *(_OWORD *)(v26 + 24) = 0u;
  *(_QWORD *)(v26 + 60) = 0x7FFFFFFFLL;
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)(v26 + 24), a5);
  *(_OWORD *)(v26 + 72) = 0u;
  v26 += 72;
  *(_DWORD *)(v26 + 32) = 0;
  *(_OWORD *)(v26 + 16) = 0u;
  *(_QWORD *)(v26 + 36) = 0x7FFFFFFFLL;
  result = re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::swap((uint64_t *)v26, a5 + 6);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

uint64_t re::DynamicArray<re::ecs2::ComponentTypeBase const*>::DynamicArray(uint64_t a1, char *a2, unint64_t a3)
{
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  if (a3)
  {
    re::DynamicArray<float *>::setCapacity((_QWORD *)a1, a3);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<char const*>::copy((_QWORD *)a1, 0, a2, a3);
  }
  return a1;
}

float32x2_t re::poseFromOriginAndXYAxes@<D0>(uint64_t *a1@<X0>, float32x4_t *a2@<X1>, int32x4_t *a3@<X2>, uint64_t a4@<X8>)
{
  int32x4_t v4;
  float32x2_t v5;
  float32x2_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  int32x4_t v11;
  float32x2_t v12;
  float32x2_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  uint64_t v20;
  uint64_t v21;
  int32x4_t v23[3];

  v4 = (int32x4_t)vmulq_f32(*a2, *a2);
  v4.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v4, 2), vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v4.i8, 1))).u32[0];
  v5 = vrsqrte_f32((float32x2_t)v4.u32[0]);
  v6 = vmul_f32(v5, vrsqrts_f32((float32x2_t)v4.u32[0], vmul_f32(v5, v5)));
  v7 = vmulq_n_f32(*a2, vmul_f32(v6, vrsqrts_f32((float32x2_t)v4.u32[0], vmul_f32(v6, v6))).f32[0]);
  v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL);
  v9 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*a3, *a3), *(int8x16_t *)a3, 0xCuLL), vnegq_f32(v7)), *(float32x4_t *)a3, v8);
  v10 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL);
  v11 = (int32x4_t)vmulq_f32(v9, v9);
  v11.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v11, 2), *(float32x2_t *)v11.i8)).u32[0];
  v12 = vrsqrte_f32((float32x2_t)v11.u32[0]);
  v13 = vmul_f32(v12, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v12, v12)));
  v14 = vmulq_n_f32(v10, vmul_f32(v13, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v13, v13))).f32[0]);
  v15 = vmlaq_f32(vmulq_f32(v8, vnegq_f32(v14)), v7, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), (int8x16_t)v14, 0xCuLL));
  v16 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL);
  v17 = (int32x4_t)vmulq_f32(v15, v15);
  v17.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v17, 2), *(float32x2_t *)v17.i8)).u32[0];
  v18 = vrsqrte_f32((float32x2_t)v17.u32[0]);
  v19 = vmul_f32(v18, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v18, v18)));
  v20 = *a1;
  v21 = a1[1];
  v23[0] = (int32x4_t)v7;
  v23[1] = (int32x4_t)vmulq_n_f32(v16, vmul_f32(v19, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v19, v19))).f32[0]);
  v23[2] = (int32x4_t)v14;
  return re::Pose<float>::Pose(a4, v20, v21, v23);
}

id *re::ecs2::VertexCacheComponent::resetDeformerInputs(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id *v8;
  void *v9;
  re *inited;
  uint64_t v11;
  _QWORD *v12;
  id location;
  _QWORD v15[3];
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v8 = (id *)(a1 + 192);
  if (a2)
    v9 = (void *)(a2 + 8);
  else
    v9 = 0;
  inited = (re *)objc_initWeak(&location, v9);
  memset(v15, 0, sizeof(v15));
  v16 = re::globalAllocators(inited)[2];
  v17 = 0;
  re::FramePersistentPtr<re::ecs2::VertexCacheComponent::VertexCacheInputs,re::FrameManager>::reset(v8, &location, a3, (uint64_t)v15);
  if (v17)
  {
    (*(void (**)(_QWORD *))*v17)(v17);
    if (v17 != v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
  }
  objc_destroyWeak(&location);
  if (a5)
  {
    v11 = 168 * a5;
    v12 = (_QWORD *)(a4 + 152);
    do
    {
      ++*((_BYTE *)v12 - 136);
      *v12 = 0;
      v12 += 21;
      v11 -= 168;
    }
    while (v11);
  }
  return v8;
}

double re::ecs2::VertexCacheComponent::initializeBindPoint(re::ecs2::VertexCacheComponent *this, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  re *v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15[2];
  uint64_t v16;
  _QWORD v17[4];
  _BYTE v18[12];
  __int16 v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  __int16 v23;
  unint64_t v24;
  re::BindNode *v25[4];
  _BYTE v26[12];
  __int16 v27;
  int v28;
  __int16 v29;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 21);
  v5 = *((_QWORD *)this + 11);
  if (v4 >= v5)
  {
    v5 = *((_QWORD *)this + 21);
  }
  else
  {
    if (*((_QWORD *)this + 20) < v5)
    {
      re::DynamicArray<re::BindPoint>::setCapacity((_QWORD *)this + 19, v5);
      v4 = *((_QWORD *)this + 21);
    }
    v7 = v5 - v4;
    if (v5 > v4)
    {
      v8 = 48 * v4;
      v6 = 0uLL;
      do
      {
        v9 = *((_QWORD *)this + 23) + v8;
        *(_QWORD *)(v9 + 40) = 0;
        *(_OWORD *)v9 = 0uLL;
        *(_OWORD *)(v9 + 16) = 0uLL;
        *(_DWORD *)(v9 + 32) = 0;
        v8 += 48;
        --v7;
      }
      while (v7);
    }
    *((_QWORD *)this + 21) = v5;
    ++*((_DWORD *)this + 44);
  }
  if (v5 <= a2)
  {
    *(_QWORD *)v26 = 0;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v18 = 136315906;
    *(_QWORD *)&v18[4] = "operator[]";
    v19 = 1024;
    v20 = 789;
    v21 = 2048;
    v22 = a2;
    v23 = 2048;
    v24 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  if (*(_QWORD *)(*((_QWORD *)this + 23) + 48 * a2 + 24))
    return *(double *)&v6;
  v10 = (re *)*((_QWORD *)this + 2);
  if (!v10 || !*((_QWORD *)v10 + 21))
    return *(double *)&v6;
  re::makeBindNode(v10, (uint64_t)v25);
  re::DynamicString::format((re::DynamicString *)"VertexCache.vertexCacheTimes[%zu]", (re::DynamicString *)&v16, a2);
  v11 = (char *)v17[1];
  if ((v17[0] & 1) == 0)
    v11 = (char *)v17 + 1;
  v12 = LOBYTE(v17[0]) >> 1;
  if ((v17[0] & 1) != 0)
    v12 = v17[0] >> 1;
  v15[0] = (uint64_t)v11;
  v15[1] = v12;
  re::BindNode::bindPointWithOverride<float>(v25, v15, (uint64_t)v18);
  v5 = *((_QWORD *)this + 21);
  if (v5 <= a2)
  {
LABEL_24:
    v17[3] = 0;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v26 = 136315906;
    *(_QWORD *)&v26[4] = "operator[]";
    v27 = 1024;
    v28 = 789;
    v29 = 2048;
    v30 = a2;
    v31 = 2048;
    v32 = v5;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v13 = (_QWORD *)(*((_QWORD *)this + 23) + 48 * a2);
  *v13 = *(_QWORD *)v18;
  re::DynamicArray<re::RigDataValue>::operator=((uint64_t)(v13 + 1), (uint64_t)&v18[8]);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v18[8]);
  re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)&v18[8]);
  if (v16 && (v17[0] & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v16 + 40))();
  *(double *)&v6 = re::BindNode::deinit((re::BindNode *)v25);
  return *(double *)&v6;
}

BOOL re::ecs2::VertexCacheComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD v25[2];
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v26, a5, 0);
  v9 = v26;
  v10 = v27;
  v26 = a4;
  v27 = v9;
  v28 = v10;
  v11 = (unsigned __int16)v10;
  v12 = v10 & 0xFFFF0000;
  if (v9 != a5 || v11 != 0xFFFF || v12 != 4294901760)
  {
    do
    {
      v15 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v27);
      v16 = *(_QWORD *)v15;
      v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v15 + 16) + 176);
      v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v15 + 16) + 184);
      if (v17)
        v19 = v18 == 0;
      else
        v19 = 1;
      if (!v19
        && *(_QWORD *)(v18 + 40)
        && *(_QWORD *)(v17 + 240)
        && (v25[0] = v17 + 232,
            v25[1] = 16,
            !re::MeshDeformationRuntimeData::MeshDeformationIteration::isEmpty((re::MeshDeformationRuntimeData::MeshDeformationIteration *)v25)))
      {
        v22 = v26;
        v23 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v27);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v22, v23, *(_QWORD *)(a3 + 40));
      }
      else
      {
        v20 = v26;
        v21 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v27);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v20, v21, *(_QWORD *)(a3 + 32));
        re::ecs2::VertexCacheComponent::resetDeformerInputs(v16, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112) + 136), 0, 0, 0);
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v27);
    }
    while (v27 != a5 || (unsigned __int16)v28 != 0xFFFF || WORD1(v28) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::VertexCacheComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  re::MeshNameMap *v20;
  re *v21;
  re::MeshNameMap *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _anonymous_namespace_ *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  size_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  re::AssetHandle *v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  float v46;
  float32x4_t v47;
  uint64_t v48;
  float v49;
  float v50;
  unint64_t v51;
  float v52;
  float v53;
  float v54;
  unint64_t v55;
  float v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  float32x4_t *v60;
  float32x4_t v61;
  unint64_t v62;
  float32x4_t *v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  unsigned int v69;
  float32x4_t *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  unint64_t v81;
  unint64_t v82;
  re::ecs2::ComponentBucketsBase *v83;
  unint64_t v84;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char v90;
  int32x4_t v91;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _anonymous_namespace_ *v98;
  uint64_t v99;
  unint64_t v100;
  float32x4_t v101;
  float32x4_t v102;
  unint64_t v103;
  __int128 v104;
  uint64_t v105;
  _BYTE v106[18];
  __int16 v107;
  unint64_t v108;
  __int16 v109;
  unint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;

  v116 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 160);
  if (v6)
    v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6);
  else
    v94 = 0;
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v111, a5, 0);
  v103 = a4;
  v104 = v111;
  if ((_QWORD)v111 != a5 || WORD4(v111) != 0xFFFFLL || (DWORD2(v111) & 0xFFFF0000) != 4294901760)
  {
    v9 = 40;
    v91 = vdupq_n_s32(0x7F800000u);
    while (1)
    {
      v10 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v104);
      v11 = *(_QWORD **)v10;
      v12 = *(_QWORD **)(*(_QWORD *)v10 + 16);
      v13 = v12[23];
      v99 = *(_QWORD *)(*(_QWORD *)(v13 + 392) + 96);
      v100 = *(_QWORD *)(*(_QWORD *)(v13 + 392) + 88);
      v95 = v13;
      v14 = *(_QWORD *)(v13 + 248);
      v15 = *(_QWORD **)(*(_QWORD *)v10 + 200);
      if (v15)
      {
        v16 = v14 != *v15 || v94 == 0;
        if (!v16 && v94 == v15[1])
          goto LABEL_92;
        re::ecs2::VertexCacheComponent::resetDeformerInputs((uint64_t)v11, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112) + 136), 0, v99, v100);
      }
      v17 = v12[22];
      v18 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v17 + 32));
      if (v18)
        break;
      v79 = *(_QWORD *)(v17 + 40);
      if (v79)
      {
        v80 = atomic_load((unsigned int *)(v79 + 704));
        if (v80 == 3)
        {
          v81 = v103;
          v82 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v104);
          v83 = (re::ecs2::ComponentBucketsBase *)a3[2];
          v84 = a3[4];
          goto LABEL_91;
        }
      }
      re::AssetHandle::loadAsync((re::AssetHandle *)(v17 + 32));
LABEL_92:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v104);
      if ((_QWORD)v104 == a5 && WORD4(v104) == 0xFFFF && WORD5(v104) == 0xFFFF)
        return *(_DWORD *)(a5 + 40) != 0;
    }
    v19 = v18;
    v98 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v12 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
    v20 = (re::MeshNameMap *)(v19 + 448);
    v21 = (re *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v12 + 4), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v21)
      v22 = (re *)((char *)v21 + 216);
    else
      v22 = v20;
    v23 = v11[6];
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112);
    v25 = re::globalAllocators(v21);
    v26 = (_anonymous_namespace_ *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25[2] + 32))(v25[2], 40, 8);
    *(_QWORD *)v26 = v14;
    *((_QWORD *)v26 + 1) = v94;
    *((_QWORD *)v26 + 3) = v23;
    *((_QWORD *)v26 + 4) = 0;
    if (!v23)
    {
      re::ecs2::VertexCacheComponent::resetDeformerInputs((uint64_t)v11, *(_QWORD *)(v24 + 136), v26, v99, v100);
      goto LABEL_90;
    }
    v28 = v23;
    if (v23 >= 0x666666666666667)
    {
LABEL_100:
      re::internal::assertLog((re::internal *)6, v27, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 40, v28);
      _os_crash();
      __break(1u);
    }
    else
    {
      v29 = 40 * v23;
      v30 = v28;
      *((_QWORD *)v26 + 4) = v31;
      if (v31)
      {
        v33 = v31;
        v96 = v30;
        if (v30 != 1)
        {
          v34 = v29 - 40;
          bzero(v31, v34);
          v33 += v34;
        }
        *((_QWORD *)v33 + 4) = 0;
        *(_OWORD *)v33 = 0u;
        *((_OWORD *)v33 + 1) = 0u;
        v35 = (uint64_t)re::ecs2::VertexCacheComponent::resetDeformerInputs((uint64_t)v11, *(_QWORD *)(v24 + 136), v26, v99, v100);
        v93 = v35;
        v36 = 0;
        v37 = 0;
        v24 = 24;
        v38 = v96;
        while (1)
        {
          v90 = v36;
          while (1)
          {
            v39 = v11[6];
            if (v39 <= v37)
            {
              v101.i64[0] = 0;
              v114 = 0u;
              v115 = 0u;
              v112 = 0u;
              v113 = 0u;
              v111 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v106 = 136315906;
              *(_QWORD *)&v106[4] = "operator[]";
              *(_WORD *)&v106[12] = 1024;
              *(_DWORD *)&v106[14] = 789;
              v107 = 2048;
              v108 = v37;
              v109 = 2048;
              v110 = v39;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_97:
              re::internal::assertLog((re::internal *)6, v77, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v17, v100);
              _os_crash();
              __break(1u);
LABEL_98:
              v101.i64[0] = 0;
              v114 = 0u;
              v115 = 0u;
              v112 = 0u;
              v113 = 0u;
              v111 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v106 = 136315906;
              *(_QWORD *)&v106[4] = "operator[]";
              *(_WORD *)&v106[12] = 1024;
              *(_DWORD *)&v106[14] = 468;
              v107 = 2048;
              v108 = v37;
              v109 = 2048;
              v110 = v39;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_99:
              v105 = 0;
              v114 = 0u;
              v115 = 0u;
              v112 = 0u;
              v113 = 0u;
              v111 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v106 = 136315906;
              *(_QWORD *)&v106[4] = "operator[]";
              *(_WORD *)&v106[12] = 1024;
              *(_DWORD *)&v106[14] = 476;
              v107 = 2048;
              v108 = 0;
              v109 = 2048;
              v110 = 0;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_100;
            }
            v40 = (re::AssetHandle *)(v11[8] + 24 * v37);
            v17 = (unint64_t)v40 + 8;
            if (!*((_QWORD *)v40 + 1))
              goto LABEL_79;
            v41 = re::VertexCacheAsset::assetType((re::VertexCacheAsset *)v35);
            v35 = re::AssetHandle::assetWithType(v40, (const re::AssetType *)v41, 1);
            if (!v35)
              break;
            v42 = v35;
            v38 = v96;
            if (*(_BYTE *)(v35 + 49) == 30 && v37 < v11[11])
            {
              v43 = *(unsigned __int8 *)(v35 + 48);
              if (v37 < v11[16])
              {
                v44 = v11[18];
                if (*(_BYTE *)(v44 + 2 * v37))
                  v43 = *(unsigned __int8 *)(v44 + 2 * v37 + 1);
              }
              v45 = *(_QWORD *)(v93 + 8);
              v39 = *(_QWORD *)(v45 + 24);
              if (v39 <= v37)
                goto LABEL_98;
              v46 = *(float *)(v11[13] + 4 * v37);
              v24 = *(_QWORD *)(v45 + 32);
              v39 = v24 + 40 * v37;
              v47.i64[0] = 0x7F0000007FLL;
              v47.i64[1] = 0x7F0000007FLL;
              v101 = (float32x4_t)v91;
              v102 = v47;
              v48 = *(_QWORD *)(v35 + 72) * *(_QWORD *)(v35 + 80);
              v49 = *(float *)(v35 + 56);
              if (v46 <= v49)
              {
                *(_QWORD *)&v111 = *(id *)(v35 + 112);
                DWORD2(v111) = 0;
                HIDWORD(v111) = v48;
                v17 = v24 + 40 * v37;
                *(_DWORD *)(v17 + 36) = 0;
                NS::SharedPtr<MTL::Texture>::operator=((void **)v17, (void **)&v111);
                *(_QWORD *)(v39 + 8) = *((_QWORD *)&v111 + 1);

                *(_QWORD *)(v17 + 16) = 0;
                *(_QWORD *)(v17 + 24) = 0;
                *(_DWORD *)(v17 + 32) = 0;
                if ((_QWORD)v111)

                if (!*(_QWORD *)(v42 + 96))
                  goto LABEL_99;
                v70 = *(float32x4_t **)(v42 + 104);
              }
              else
              {
                v50 = *(float *)(v35 + 52);
                v51 = *(_QWORD *)(v35 + 64);
                if (v46 >= (float)(v49 + (float)(v50 * (float)v51)))
                {
                  v9 = v51 - 1;
                  v71 = (v51 - 1) * v48;
                  *(_QWORD *)&v111 = *(id *)(v35 + 112);
                  *((_QWORD *)&v111 + 1) = __PAIR64__(v48, v71);
                  v17 = v24 + 40 * v37;
                  *(_DWORD *)(v17 + 36) = 0;
                  NS::SharedPtr<MTL::Texture>::operator=((void **)v17, (void **)&v111);
                  *(_QWORD *)(v39 + 8) = *((_QWORD *)&v111 + 1);

                  *(_QWORD *)(v17 + 16) = 0;
                  *(_QWORD *)(v17 + 24) = 0;
                  *(_DWORD *)(v17 + 32) = 0;
                  if ((_QWORD)v111)

                  v24 = *(_QWORD *)(v42 + 96);
                  if (v24 <= v9)
                    goto LABEL_102;
                }
                else
                {
                  v52 = (float)(v46 - v49) / v50;
                  v53 = floorf(v52);
                  v54 = v53 + ceilf(v52 - v53);
                  v55 = (unint64_t)(float)(v54 + 0.5);
                  if (v43 && v51 != v55)
                  {
                    v56 = v52 - (float)(v54 + -1.0);
                    v87 = (unint64_t)(float)(v54 + 0.5);
                    v88 = v55 - 1;
                    v57 = (v55 - 1) * v48;
                    v9 = (v48 * v55);
                    *(_QWORD *)&v111 = *(id *)(v35 + 112);
                    *((_QWORD *)&v111 + 1) = __PAIR64__(v48, v57);
                    *(_QWORD *)v106 = *(id *)(v42 + 112);
                    *(_QWORD *)&v106[8] = __PAIR64__(v48, v9);
                    NS::SharedPtr<MTL::Texture>::operator=((void **)(v24 + 40 * v37), (void **)&v111);
                    *(_QWORD *)(v39 + 8) = *((_QWORD *)&v111 + 1);
                    v58 = v24 + 40 * v37;
                    NS::SharedPtr<MTL::Texture>::operator=((void **)(v58 + 16), (void **)v106);
                    *(_QWORD *)(v58 + 24) = *(_QWORD *)&v106[8];
                    *(float *)(v58 + 32) = v56;
                    *(_DWORD *)(v58 + 36) = 0;
                    if (*(_QWORD *)v106)

                    if ((_QWORD)v111)
                    v24 = *(_QWORD *)(v42 + 96);
                    v17 = v88;
                    if (v24 <= v88)
                      goto LABEL_103;
                    v59 = *(_QWORD *)(v42 + 104);
                    v60 = (float32x4_t *)(v59 + 32 * v88);
                    v61 = v60[1];
                    v101 = *v60;
                    v102 = v61;
                    v62 = v87;
                    if (v24 <= v87)
                      goto LABEL_105;
                    v63 = (float32x4_t *)(v59 + 32 * v87);
                    v64 = v101;
                    v65 = v102;
                    v64.i32[3] = 0;
                    v66 = *v63;
                    v66.i32[3] = 0;
                    v101 = vminnmq_f32(v64, v66);
                    v67 = v63[1];
                    v65.i32[3] = 0;
                    v67.i32[3] = 0;
                    v68 = vmaxnmq_f32(v65, v67);
                    goto LABEL_69;
                  }
                  if (v51 <= v55)
                    v9 = v51 - 1;
                  else
                    v9 = (unint64_t)(float)(v54 + 0.5);
                  *(_QWORD *)&v111 = *(id *)(v35 + 112);
                  DWORD2(v111) = v9 * v48;
                  HIDWORD(v111) = v48;
                  v17 = v24 + 40 * v37;
                  *(_DWORD *)(v17 + 36) = 0;
                  NS::SharedPtr<MTL::Texture>::operator=((void **)v17, (void **)&v111);
                  *(_QWORD *)(v39 + 8) = *((_QWORD *)&v111 + 1);

                  *(_QWORD *)(v17 + 16) = 0;
                  *(_QWORD *)(v17 + 24) = 0;
                  *(_DWORD *)(v17 + 32) = 0;
                  if ((_QWORD)v111)

                  v24 = *(_QWORD *)(v42 + 96);
                  if (v24 <= v9)
                    goto LABEL_104;
                }
                v70 = (float32x4_t *)(*(_QWORD *)(v42 + 104) + 32 * v9);
              }
              v68 = v70[1];
              v101 = *v70;
LABEL_69:
              v102 = v68;
              v24 = *(_QWORD *)(v95 + 256);
              re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)v22, (unsigned __int8 *)(v42 + 8), &v111);
              v72 = v111;
              if ((_QWORD)v111)
              {
                v9 = 0;
                do
                {
                  *(_QWORD *)v106 = v9;
                  v73 = (*(uint64_t (**)(_QWORD, _BYTE *))(**((_QWORD **)&v113 + 1) + 16))(*((_QWORD *)&v113 + 1), v106);
                  v74 = re::MeshNameMap::meshPartStartIndexForInstance(v22, v73) + WORD2(v73);
                  v75 = re::MeshDeformationRuntimeData::absoluteDeformedMeshPartIndex((re::MeshDeformationRuntimeData *)(v95 + 232), v74);
                  if (v24 > v75)
                  {
                    v17 = v75;
                    v76 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112) + 136);
                    re::ecs2::DynamicBoundingBoxComponent::setMeshPartEstimatedBoundingBox(v98, *(_QWORD *)(v76 + 24) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(v76 + 16) << 60), v74, &v101);
                    if (v100 <= v17)
                      goto LABEL_97;
                    v78 = v99 + 168 * v17;
                    ++*(_BYTE *)(v78 + 16);
                    *(_QWORD *)(v78 + 152) = v39;
                  }
                  ++v9;
                }
                while (v72 != v9);
              }
              if (*((_QWORD *)&v113 + 1))
              {
                (***((void (****)(_QWORD))&v113 + 1))(*((_QWORD *)&v113 + 1));
                if (*((__int128 **)&v113 + 1) != (__int128 *)((char *)&v111 + 8))
                  (*(void (**)(_QWORD))(*(_QWORD *)v113 + 40))(v113);
              }
              v35 = (uint64_t)re::ecs2::Component::markDirty(v98);
              v9 = 40;
              v24 = 24;
              v38 = v96;
            }
LABEL_79:
            if (++v37 == v38)
            {
              if ((v90 & 1) != 0)
                goto LABEL_92;
LABEL_90:
              v81 = v103;
              v82 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v104);
              v83 = (re::ecs2::ComponentBucketsBase *)a3[2];
              v84 = a3[6];
LABEL_91:
              re::ecs2::ComponentBucketsBase::moveComponent(v83, v81, v82, v84);
              goto LABEL_92;
            }
          }
          v38 = v96;
          if (*(_QWORD *)v17)
          {
            v69 = atomic_load((unsigned int *)(*(_QWORD *)v17 + 704));
            if (v69 == 3)
              goto LABEL_79;
          }
          re::AssetHandle::loadAsync(v40);
          v38 = v96;
          ++v37;
          v36 = 1;
          if (v37 == v96)
            goto LABEL_92;
        }
      }
    }
    re::internal::assertLog((re::internal *)4, v32, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
    _os_crash();
    __break(1u);
LABEL_102:
    v105 = 0;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v111 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v106 = 136315906;
    *(_QWORD *)&v106[4] = "operator[]";
    *(_WORD *)&v106[12] = 1024;
    *(_DWORD *)&v106[14] = 476;
    v107 = 2048;
    v108 = v9;
    v109 = 2048;
    v110 = v24;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_103:
    v105 = 0;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v111 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v106 = 136315906;
    *(_QWORD *)&v106[4] = "operator[]";
    *(_WORD *)&v106[12] = 1024;
    *(_DWORD *)&v106[14] = 476;
    v107 = 2048;
    v108 = v17;
    v109 = 2048;
    v110 = v24;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_104:
    v105 = 0;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v111 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v106 = 136315906;
    *(_QWORD *)&v106[4] = "operator[]";
    *(_WORD *)&v106[12] = 1024;
    *(_DWORD *)&v106[14] = 476;
    v107 = 2048;
    v108 = v9;
    v109 = 2048;
    v110 = v24;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_105:
    v105 = 0;
    v114 = 0u;
    v115 = 0u;
    v112 = 0u;
    v113 = 0u;
    v111 = 0u;
    v86 = v62;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v106 = 136315906;
    *(_QWORD *)&v106[4] = "operator[]";
    *(_WORD *)&v106[12] = 1024;
    *(_DWORD *)&v106[14] = 476;
    v107 = 2048;
    v108 = v86;
    v109 = 2048;
    v110 = v24;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::VertexCacheSystem::updateScenes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  re::ecs2::System *v26;
  uint64_t v28;
  uint64_t v29[2];
  _QWORD v30[2];
  uint64_t v31;

  v30[0] = a3;
  v30[1] = a4;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v29);
  v6 = *(_QWORD *)(a2 + 8);
  if (v6)
  {
    v7 = *(uint64_t **)a2;
    v28 = *(_QWORD *)a2 + 8 * v6;
    while (1)
    {
      v31 = *v7;
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 272)
                     + 16
                     * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 264), &v31)+ 8);
      re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 376, v8);
      v9 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 208, v8);
      v10 = *(_QWORD *)(*v9 + 224);
      v11 = v9[3];
      v12 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v11);
      if (*(_DWORD *)(v12 + 40))
        v13 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v10 + 24))(v10, v30, v9, v11, v12, 0);
      else
        v13 = 0;
      v14 = v9[5];
      v15 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v14);
      if (*(_DWORD *)(v15 + 40))
        v13 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v10 + 32))(v10, v30, v9, v14, v15, 0);
      v16 = v9[6];
      v17 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v9[2] + 8, v16);
      if (*(_DWORD *)(v17 + 40))
        break;
      if (v13)
        goto LABEL_10;
LABEL_11:
      if (*(_BYTE *)(a1 + 440))
      {
        v18 = *(_QWORD *)(a1 + 384);
        v19 = *(_DWORD *)(a1 + 392);
        if (v18 < 0xB)
        {
          v22 = (uint64_t *)(a1 + 400);
          if ((v19 & 1) == 0)
            v22 = *(uint64_t **)(a1 + 408);
          if (!v18)
            goto LABEL_29;
          v23 = 0;
          v24 = 8 * v18;
          do
          {
            v25 = *v22++;
            v23 |= v25;
            v24 -= 8;
          }
          while (v24);
          if (!v23)
            goto LABEL_29;
        }
        else
        {
          v20 = (_QWORD *)(a1 + 400);
          if ((v19 & 1) == 0)
            v20 = *(_QWORD **)(a1 + 408);
          v21 = 8 * v18;
          while (!*v20)
          {
            ++v20;
            v21 -= 8;
            if (!v21)
              goto LABEL_29;
          }
        }
        v26 = *(re::ecs2::System **)(a1 + 424);
        if (!*((_BYTE *)v26 + 86))
          re::ecs2::System::queueToRun(v26, 0.0);
      }
LABEL_29:
      if (++v7 == (uint64_t *)v28)
        return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v29);
    }
    if (((v13 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v10 + 40))(v10, v30, v9, v16, v17, 0)) & 1) == 0)goto LABEL_11;
LABEL_10:
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 376, v8);
    goto LABEL_11;
  }
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v29);
}

uint64_t re::ecs2::VertexCacheSystem::willAddSystemToECSService(re::ecs2::VertexCacheSystem *this)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 20) = re::ServiceLocator::serviceOrNull<re::ecs2::ThrottleService>(v2);
  return re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
}

double re::ecs2::VertexCacheSystem::willRemoveSystemFromECSService(re::ecs2::VertexCacheSystem *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void re::ecs2::VertexCacheSystem::willAddSceneToECSService(re::ecs2::VertexCacheSystem *this, re::ecs2::Scene *a2)
{
  char *v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)this + 208;
  v57[0] = (uint64_t)a2;
  v5 = (re::ecs2::VertexCacheSystem *)((char *)this + 328);
  v6 = *((_QWORD *)this + 42);
  v7 = *((_DWORD *)this + 86);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)this + 352);
    else
      v8 = (_QWORD *)*((_QWORD *)this + 45);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)this + 352);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)this + 45);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 328, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::VertexCacheSystem *)((char *)this + 264), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = (char *)this + 376;
    v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  v56 = 0u;
  v49 = 0u;
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 1;
  v55 = 0uLL;
  v17 = *((_QWORD *)this + 31);
  *(_QWORD *)&v56 = 0;
  v18 = *((_QWORD *)this + 27);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 26, (v17 + 4) >> 2);
    v18 = *((_QWORD *)this + 27);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v17 >> 2;
    v64 = 2048;
    v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*((_BYTE *)this + 224) & 1) != 0)
    v19 = (char *)this + 232;
  else
    v19 = (char *)*((_QWORD *)this + 30);
  v20 = *(_QWORD *)&v19[8 * (v17 >> 2)];
  ++*((_QWORD *)this + 31);
  ++*((_DWORD *)this + 64);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v49;
  v23 = v50;
  v24 = v51;
  *(_QWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  v26 = *((_QWORD *)this + 31);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(_QWORD *)&v66[0] = *((_QWORD *)this + 31) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::VertexCacheSystem *)((char *)this + 264), v57, (uint64_t *)v66);
  v28 = *((_QWORD *)this + 31);
  v29 = *((_QWORD *)this + 46);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *((_QWORD *)this + 46) = v28;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *((_QWORD *)this + 46) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*((_BYTE *)this + 344) & 1) != 0)
      v33 = (char *)this + 352;
    else
      v33 = (char *)*((_QWORD *)this + 45);
    *(_QWORD *)&v33[8 * *((_QWORD *)this + 42) - 8] &= v31;
  }
  v34 = *((_QWORD *)this + 31);
  v35 = *((_QWORD *)this + 52);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *((_QWORD *)this + 52) = v34;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::VertexCacheSystem *)((char *)this + 376), v36, &v49);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *((_QWORD *)this + 52) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*((_BYTE *)this + 392) & 1) != 0)
      v39 = (char *)this + 400;
    else
      v39 = (char *)*((_QWORD *)this + 51);
    *(_QWORD *)&v39[8 * *((_QWORD *)this + 48) - 8] &= v37;
  }
  v16 = *(_QWORD *)&v66[0];
  v15 = (char *)this + 376;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((_BYTE *)this + 440))
    return;
  v40 = *((_QWORD *)this + 48);
  v41 = *((_DWORD *)this + 98);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)((char *)this + 400);
    else
      v42 = (_QWORD *)*((_QWORD *)this + 51);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        return;
    }
LABEL_65:
    v48 = (re::ecs2::System *)*((_QWORD *)this + 53);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    return;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)((char *)this + 400);
    if (!v40)
      return;
  }
  else
  {
    v43 = (uint64_t *)*((_QWORD *)this + 51);
    if (!v40)
      return;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
}

uint64_t re::ecs2::VertexCacheSystem::willRemoveSceneFromECSService(re::ecs2::VertexCacheSystem *this, re::ecs2::Scene *a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  re::ecs2::Scene *v16;

  v16 = a2;
  v3 = (uint64_t *)((char *)this + 264);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 33, &v16);
  if (result != -1)
  {
    v5 = *((_QWORD *)this + 34) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 328, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 376, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 208, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_VertexCacheComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410FCC8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410FCC8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410FD48, 0);
    *(uint64_t *)((char *)&qword_25410FD58 + 6) = 0;
    qword_25410FD58 = 0;
    qword_25410FD68 = 0;
    qword_25410FD70 = 0xFFFFFFFFLL;
    qword_25410FD48 = (uint64_t)&off_24ED7DAA8;
    qword_25410FD78 = (uint64_t)"VertexCacheComponent";
    dword_25410FD80 = 0;
    xmmword_25410FD88 = 0u;
    unk_25410FD98 = 0u;
    xmmword_25410FDA8 = 0u;
    qword_25410FDB8 = 0;
    __cxa_guard_release(&qword_25410FCC8);
  }
  return &qword_25410FD48;
}

void re::ecs2::initInfo_VertexCacheComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;

  v21[0] = 0xF2B611314067C4FELL;
  v21[1] = "VertexCacheComponent";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  v4 = atomic_load((unsigned __int8 *)&qword_25410FCD0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410FCD0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410FCE8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::IntrospectionInfo<re::DynamicArray<re::AssetHandle>>::get(1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "vertexCaches";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_25410FCF0 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "vertexCacheTimes";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x4800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25410FCF8 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      re::IntrospectionInfo<re::DynamicArray<re::Optional<BOOL>>>::get((uint64_t)v17, v18);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "interpolationOverride";
      *(_QWORD *)(v19 + 16) = &qword_25410FD08;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x7000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_25410FD00 = v19;
      __cxa_guard_release(&qword_25410FCD0);
    }
  }
  *((_QWORD *)this + 2) = 0xF800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_25410FCE8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VertexCacheComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VertexCacheComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VertexCacheComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VertexCacheComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v20 = v22;
}

void re::IntrospectionInfo<re::DynamicArray<re::Optional<BOOL>>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14[2];
  __int128 v15;
  uint64_t v16;
  char v17;
  _BYTE v18[479];

  v2 = atomic_load((unsigned __int8 *)&qword_25410FCE0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25410FCE0))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_25410FD08);
    qword_25410FD08 = (uint64_t)&off_24ED67D58;
    __cxa_guard_release(&qword_25410FCE0);
  }
  if ((_MergedGlobals_263 & 1) == 0)
  {
    v3 = re::IntrospectionInfo<re::Optional<BOOL>>::get(1, a2);
    if ((_MergedGlobals_263 & 1) == 0)
    {
      v4 = (uint64_t)v3;
      _MergedGlobals_263 = 1;
      v5 = *((_DWORD *)v3 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410FD08, 0);
      qword_25410FD18 = 0x2800000003;
      dword_25410FD20 = v5;
      word_25410FD24 = 0;
      *(_QWORD *)&xmmword_25410FD28 = 0;
      *((_QWORD *)&xmmword_25410FD28 + 1) = 0xFFFFFFFFLL;
      qword_25410FD38 = v4;
      unk_25410FD40 = 0;
      qword_25410FD08 = (uint64_t)&off_24ED67D58;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_25410FD08, (const re::IntrospectionBase *)&v16);
      if ((v17 & 1) != 0)
        v8 = *(const char **)&v18[7];
      else
        v8 = v18;
      if (v16 && (v17 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v16 + 40))();
      v13 = *(_OWORD *)(v4 + 32);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v14);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v12 + 1) = v10;
      }
      else
      {
        v15 = v13;
        re::TypeBuilder::beginListType((uint64_t)&v16, v14, 1, 0x28uLL, 8uLL, &v15);
        re::TypeBuilder::setConstructor((uint64_t)&v16, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v16, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v16, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v16, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v16, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v16, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v16, v11);
      }
      xmmword_25410FD28 = v12;
      re::StringID::destroyString((re::StringID *)v14);
    }
  }
}

uint64_t re::internal::defaultConstruct<re::ecs2::VertexCacheComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::VertexCacheComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::VertexCacheComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  re::FramePersistentPtr<re::ecs2::VertexCacheComponent::VertexCacheInputs,re::FrameManager>::~FramePersistentPtr((id *)(a3 + 192));
  re::DynamicArray<re::BindPoint>::deinit(a3 + 152);
  v4 = *(_QWORD *)(a3 + 112);
  if (v4)
  {
    if (*(_QWORD *)(a3 + 144))
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    *(_QWORD *)(a3 + 144) = 0;
    *(_QWORD *)(a3 + 120) = 0;
    *(_QWORD *)(a3 + 128) = 0;
    *(_QWORD *)(a3 + 112) = 0;
    ++*(_DWORD *)(a3 + 136);
  }
  v5 = *(_QWORD *)(a3 + 72);
  if (v5)
  {
    if (*(_QWORD *)(a3 + 104))
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    *(_QWORD *)(a3 + 104) = 0;
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    ++*(_DWORD *)(a3 + 96);
  }
  re::DynamicArray<re::AssetHandle>::deinit(a3 + 32);
  *(_QWORD *)a3 = &off_24ED426B8;
  return objc_destructInstance((id)(a3 + 8));
}

void *re::internal::defaultDestructV2<re::ecs2::VertexCacheComponent>(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  re::FramePersistentPtr<re::ecs2::VertexCacheComponent::VertexCacheInputs,re::FrameManager>::~FramePersistentPtr((id *)(a1 + 192));
  re::DynamicArray<re::BindPoint>::deinit(a1 + 152);
  v2 = *(_QWORD *)(a1 + 112);
  if (v2)
  {
    if (*(_QWORD *)(a1 + 144))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    ++*(_DWORD *)(a1 + 136);
  }
  v3 = *(_QWORD *)(a1 + 72);
  if (v3)
  {
    if (*(_QWORD *)(a1 + 104))
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    ++*(_DWORD *)(a1 + 96);
  }
  re::DynamicArray<re::AssetHandle>::deinit(a1 + 32);
  *(_QWORD *)a1 = &off_24ED426B8;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_VertexCacheComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VertexCacheComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VertexCacheComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VertexCacheComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VertexCacheComponent>, this);
}

uint64_t *re::ecs2::allocInfo_VertexCacheSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410FCD8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410FCD8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410FDC0, 0);
    *(uint64_t *)((char *)&qword_25410FDD0 + 6) = 0;
    qword_25410FDD0 = 0;
    qword_25410FDE0 = 0;
    qword_25410FDE8 = 0xFFFFFFFFLL;
    qword_25410FDC0 = (uint64_t)&off_24ED7DAA8;
    qword_25410FDF0 = (uint64_t)"VertexCacheSystem";
    dword_25410FDF8 = 0;
    xmmword_25410FE00 = 0u;
    unk_25410FE10 = 0u;
    xmmword_25410FE20 = 0u;
    qword_25410FE30 = 0;
    __cxa_guard_release(&qword_25410FCD8);
  }
  return &qword_25410FDC0;
}

void re::ecs2::initInfo_VertexCacheSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xDE383D715B7ED7DALL;
  v5[1] = "VertexCacheSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1C000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_VertexCacheSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VertexCacheSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VertexCacheSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::VertexCacheSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::VertexCacheSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VertexCacheSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VertexCacheSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::VertexCacheSystem *re::internal::defaultConstruct<re::ecs2::VertexCacheSystem>(int a1, int a2, re::ecs2::VertexCacheSystem *this)
{
  return re::ecs2::VertexCacheSystem::VertexCacheSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::VertexCacheSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 26);
  a3[21] = &off_24ED67B00;
  v4 = a3[23];
  if (v4)
  {
    if (a3[24])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[25]);
      a3[24] = 0;
      a3[25] = 0;
    }
    a3[23] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::VertexCacheSystem>(_QWORD *a1)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 26);
  a1[21] = &off_24ED67B00;
  v2 = a1[23];
  if (v2)
  {
    if (a1[24])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[25]);
      a1[24] = 0;
      a1[25] = 0;
    }
    a1[23] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_VertexCacheSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VertexCacheSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VertexCacheSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VertexCacheSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VertexCacheSystem>, this);
}

uint64_t re::ecs2::VertexCacheComponentStateImpl::dependsOnComponents(re::ecs2::VertexCacheComponentStateImpl *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::VertexCacheComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 24;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
      }
      v6 += 8;
    }
    while (v6 != 56);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::VertexCacheComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::VertexCacheSystem::~VertexCacheSystem(re::ecs2::VertexCacheSystem *this)
{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 26);
  *((_QWORD *)this + 21) = &off_24ED67B00;
  v2 = *((_QWORD *)this + 23);
  if (v2)
  {
    if (*((_QWORD *)this + 24))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 25));
      *((_QWORD *)this + 24) = 0;
      *((_QWORD *)this + 25) = 0;
    }
    *((_QWORD *)this + 23) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 26);
  *((_QWORD *)this + 21) = &off_24ED67B00;
  v2 = *((_QWORD *)this + 23);
  if (v2)
  {
    if (*((_QWORD *)this + 24))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 25));
      *((_QWORD *)this + 24) = 0;
      *((_QWORD *)this + 25) = 0;
    }
    *((_QWORD *)this + 23) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::VertexCacheSystem::typeInfo(re::ecs2::VertexCacheSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VertexCacheSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VertexCacheSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VertexCacheSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VertexCacheSystem>, 0);
}

_QWORD *re::DynamicArray<re::BindPoint>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::BindPoint>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x30uLL))
        {
          v2 = 48 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 48 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 48, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 48 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::BindPoint::BindPoint(v11, v8);
          re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)(v8 + 1));
          re::DynamicArray<re::BindPoint::BindPointData>::deinit((uint64_t)(v8 + 1));
          v8 += 6;
          v11 += 48;
          v10 -= 48;
        }
        while (v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED67BF8;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED67C50;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED67CA8;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED67D00;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED67BF8;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED67C50;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED67CA8;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED67D00;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VertexCacheComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED67BF8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED67BF8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED67C50;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED67C50;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED67CA8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED67CA8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED67D00;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED67D00;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::VertexCacheComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::IntrospectionInfo<re::Optional<BOOL>>::get(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  int v4;
  re *v5;
  std::__shared_mutex_base *v6;
  re *v7;
  std::__shared_mutex_base *v8;
  uint64_t v10;
  int v11;
  re::IntrospectionRegistry *v12;
  const re::IntrospectionBase *v13;
  const char *v14;
  __int128 v15;
  __int128 v16;
  const char *v17;
  uint64_t v18[2];

  if ((v3 & 1) == 0
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&re::IntrospectionInfo<re::Optional<BOOL>>::get(BOOL)::info);
    re::IntrospectionInfo<re::Optional<BOOL>>::get(BOOL)::info = (uint64_t)&off_24ED67DF0;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::Optional<BOOL>>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::Optional<BOOL>>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    v4 = re::IntrospectionInfo<re::Optional<BOOL>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    if (v4)
      return &re::IntrospectionInfo<re::Optional<BOOL>>::get(BOOL)::info;
    v6 = re::introspectionSharedMutex(v5);
    std::__shared_mutex_base::lock(v6);
  }
  v7 = (re *)re::introspect_BOOL((re *)1, a2);
  if (re::IntrospectionInfo<re::Optional<BOOL>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      v8 = re::introspectionSharedMutex(v7);
      std::__shared_mutex_base::unlock(v8);
    }
  }
  else
  {
    v10 = (uint64_t)v7;
    re::IntrospectionInfo<re::Optional<BOOL>>::get(BOOL)::isInitialized = 1;
    v11 = *((_DWORD *)v7 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::Optional<BOOL>>::get(BOOL)::info, 0);
    qword_255802908 = 0x20000000DLL;
    dword_255802910 = v11;
    word_255802914 = 0;
    *(_QWORD *)&xmmword_255802918 = 0;
    *((_QWORD *)&xmmword_255802918 + 1) = 0xFFFFFFFFLL;
    qword_255802928 = v10;
    unk_255802930 = 0;
    re::IntrospectionInfo<re::Optional<BOOL>>::get(BOOL)::info = (uint64_t)&off_24ED67DF0;
    re::IntrospectionRegistry::add(v12, v13);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::Optional<BOOL>>::get(BOOL)::info, (const re::IntrospectionBase *)&v16);
    if ((BYTE8(v16) & 1) != 0)
      v14 = v17;
    else
      v14 = (char *)&v16 + 9;
    if ((_QWORD)v16 && (BYTE8(v16) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v16 + 40))();
    v16 = *(_OWORD *)(v10 + 32);
    xmmword_255802918 = v15;
    re::StringID::destroyString((re::StringID *)v18);
    if ((a1 & 1) == 0)
      goto LABEL_9;
  }
  return &re::IntrospectionInfo<re::Optional<BOOL>>::get(BOOL)::info;
}

_QWORD *re::IntrospectionDynamicArray<re::Optional<BOOL>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::Optional<BOOL>>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::Optional<BOOL>>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::Optional<BOOL>>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::Optional<BOOL>>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<re::Optional<BOOL>>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::Optional<BOOL>>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::Optional<BOOL>>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::Optional<BOOL>>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::Optional<BOOL>>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::Optional<BOOL>>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  re::IntrospectionBase *v13;

  v9 = *(_QWORD *)(a4 + 8);
  v8 = *(_QWORD *)(a4 + 16);
  if (v8 >= v9)
  {
    v10 = v8 + 1;
    if (v9 < v8 + 1)
    {
      if (*(_QWORD *)a4)
      {
        v11 = 2 * v9;
        if (!v9)
          v11 = 8;
        if (v11 <= v10)
          v12 = v10;
        else
          v12 = v11;
        re::DynamicArray<re::Optional<BOOL>>::setCapacity((_QWORD *)a4, v12);
      }
      else
      {
        re::DynamicArray<re::Optional<BOOL>>::setCapacity((_QWORD *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    v8 = *(_QWORD *)(a4 + 16);
  }
  v13 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 2 * v8);
  *(_BYTE *)v13 = 0;
  *(_QWORD *)(a4 + 16) = v8 + 1;
  ++*(_DWORD *)(a4 + 24);
  re::introspectionInitElement(a2, a3, a1[6], v13);
  return v13;
}

uint64_t re::IntrospectionDynamicArray<re::Optional<BOOL>>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::Optional<BOOL>>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 2 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 2 * a3;
}

_QWORD *re::DynamicArray<re::Optional<BOOL>>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::Optional<BOOL>>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if ((a2 & 0x8000000000000000) != 0)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 2, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = 2 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 2 * a2, 1);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_17;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_17:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (char *)v7 + 1;
        v11 = 2 * v9;
        v12 = (_BYTE *)(v8 + 1);
        do
        {
          v13 = *(v12 - 1);
          *(v10 - 1) = v13;
          if (v13)
            *v10 = *v12;
          v10 += 2;
          v12 += 2;
          v11 -= 2;
        }
        while (v11);
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_17;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::Optional<BOOL>>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _BYTE *v6;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::Optional<BOOL>>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = (_BYTE *)(v3[4] + 2 * v4);
      do
      {
        *v6 = 0;
        v6 += 2;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

void re::TypeBuilderHelper::registerOptional<BOOL>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  _anonymous_namespace_ *v8;
  re::TypeRegistry *v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[488];

  v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    v11 = *a3;
    re::TypeBuilder::beginOptionalType((uint64_t)v12, a2, 2uLL, 1uLL, &v11);
    re::TypeBuilder::setOptionalAccessors((uint64_t)v12, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<BOOL>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<BOOL>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

_QWORD *re::IntrospectionOptional<BOOL>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<BOOL>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<BOOL>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<BOOL>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<BOOL>::setHasValue(uint64_t a1, _BYTE *a2, int a3)
{
  if (a3)
  {
    if (!*a2)
      *a2 = 1;
    ++a2;
  }
  else if (!*a2)
  {
    return;
  }
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<BOOL>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 1;
}

{
  return a2 + 1;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<BOOL>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 1;
  if (!v2)
    return 0;
  return result;
}

_BYTE *re::TypeBuilderHelper::registerOptional<BOOL>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(_BYTE *result, char *a2)
{
  char v2;

  if (a2)
  {
    v2 = *a2;
    if (!*result)
      *result = 1;
    result[1] = v2;
  }
  else if (*result)
  {
    *result = 0;
  }
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::Optional<BOOL>>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::Allocator *v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *(re::Allocator **)a1;
  if (v8 == a3)
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    if (v8)
    {
      if (*(_QWORD *)(a1 + 32))
        (*(void (**)(re::Allocator *))(*(_QWORD *)v8 + 40))(v8);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::Optional<BOOL>>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  v9 = (_anonymous_namespace_ *)re::DynamicArray<re::Optional<BOOL>>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(char **)(a1 + 32);
      v12 = 2 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 2;
        v12 -= 2;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 2 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 2 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::Optional<BOOL>>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::VertexCacheComponent>(uint64_t a1)
{
  id *v2;
  uint64_t v3;
  re *inited;

  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  v2 = (id *)(a1 + 192);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED44218;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_DWORD *)(v3 + 96) = 0;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_DWORD *)(v3 + 136) = 0;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_DWORD *)(v3 + 176) = 0;
  inited = (re *)objc_initWeak(v2, 0);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 232) = re::globalAllocators(inited)[2];
  *(_QWORD *)(a1 + 240) = 0;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::VertexCacheSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::VertexCacheSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

void re::ecs2::accessibility::introspect_Importance(re::ecs2::accessibility *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  StringID v34;
  _QWORD v35[2];
  _QWORD v36[61];

  v2 = atomic_load((unsigned __int8 *)&qword_25410FE40);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_25410FE40);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Default";
      qword_25410FE60 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = 1;
      *(_QWORD *)(v30 + 16) = "High";
      qword_25410FE68 = v30;
      __cxa_guard_release(&qword_25410FE40);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_25410FE48);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_25410FE48))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_25410FE88, "Importance", 1, 1, 1, 1);
    qword_25410FE88 = (uint64_t)&off_24ED7D9E8;
    qword_25410FEC8 = (uint64_t)&re::ecs2::accessibility::introspect_Importance(BOOL)::enumTable;
    dword_25410FE98 = 9;
    __cxa_guard_release(&qword_25410FE48);
  }
  if ((_MergedGlobals_264 & 1) == 0)
  {
    _MergedGlobals_264 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_25410FE88, a2);
    v32 = 0xE65B5EB096D28;
    v33 = "Importance";
    v36[0] = 0x31CD534126;
    v36[1] = "uint8_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v36);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v36);
      v6 = (unsigned int *)qword_25410FEC8;
      v35[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v34.var0 = 2 * v12;
            v34.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v16, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v34.var0 = 2 * v20;
              v34.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v24, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v25);
      xmmword_25410FEA8 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "Importance", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t *re::ecs2::accessibility::allocInfo_CustomContent(re::ecs2::accessibility *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_25410FE50);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25410FE50))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410FED0, 0);
    *(uint64_t *)((char *)&qword_25410FEE0 + 6) = 0;
    qword_25410FEE0 = 0;
    qword_25410FEF0 = 0;
    qword_25410FEF8 = 0xFFFFFFFFLL;
    qword_25410FED0 = (uint64_t)&off_24ED7DAA8;
    qword_25410FF00 = (uint64_t)"CustomContent";
    dword_25410FF08 = 0;
    xmmword_25410FF10 = 0u;
    unk_25410FF20 = 0u;
    xmmword_25410FF30 = 0u;
    qword_25410FF40 = 0;
    __cxa_guard_release(&qword_25410FE50);
  }
  return &qword_25410FED0;
}

void re::ecs2::accessibility::initInfo_CustomContent(re::ecs2::accessibility *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  const re::IntrospectionBase *v11;
  void *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0xDF8C99149F5BF50;
  v18[1] = "CustomContent";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&qword_25410FE58);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410FE58);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::DynamicString>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "label";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 1;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_25410FE70 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v12 = re::IntrospectionInfo<re::DynamicString>::get(1, v11);
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "value";
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x2000000002;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_25410FE78 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      re::ecs2::accessibility::introspect_Importance((re::ecs2::accessibility *)v14, v15);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "importance";
      *(_QWORD *)(v16 + 16) = &qword_25410FE88;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x4000000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_25410FE80 = v16;
      __cxa_guard_release(&qword_25410FE58);
    }
  }
  *((_QWORD *)this + 2) = 0x4800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_25410FE70;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::accessibility::CustomContent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::accessibility::CustomContent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::accessibility::CustomContent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::accessibility::CustomContent>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

_QWORD *re::internal::defaultConstruct<re::ecs2::accessibility::CustomContent>(_anonymous_namespace_ *a1, uint64_t a2, _OWORD *a3)
{
  _OWORD *v3;
  _anonymous_namespace_ *v4;

  v3 = a3;
  *a3 = 0u;
  a3[1] = 0u;
  v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  v3[2] = 0u;
  v3[3] = 0u;
  v3 += 2;
  return re::DynamicString::setCapacity(v3, 0);
}

double re::internal::defaultDestruct<re::ecs2::accessibility::CustomContent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _OWORD *v5;
  double result;

  v5 = a3 + 4;
  v4 = a3[4];
  if (v4)
  {
    if ((a3[5] & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[6]);
    result = 0.0;
    *v5 = 0u;
    v5[1] = 0u;
  }
  if (*a3)
  {
    if ((a3[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a3 + 40))(*a3, a3[2]);
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *((_OWORD *)a3 + 1) = 0u;
  }
  return result;
}

_QWORD *re::internal::defaultConstructV2<re::ecs2::accessibility::CustomContent>(_anonymous_namespace_ *a1)
{
  _anonymous_namespace_ *v1;
  _anonymous_namespace_ *v2;

  v1 = a1;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  v2 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v1, 0);
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  v1 = (_anonymous_namespace_ *)((char *)v1 + 32);
  return re::DynamicString::setCapacity(v1, 0);
}

double re::internal::defaultDestructV2<re::ecs2::accessibility::CustomContent>(_QWORD *a1)
{
  uint64_t v2;
  _OWORD *v3;
  double result;

  v3 = a1 + 4;
  v2 = a1[4];
  if (v2)
  {
    if ((a1[5] & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[6]);
    result = 0.0;
    *v3 = 0u;
    v3[1] = 0u;
  }
  if (*a1)
  {
    if ((a1[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a1 + 40))(*a1, a1[2]);
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return result;
}

uint64_t re::ecs2::accessibility::introspect_CustomContent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CustomContent", (uint64_t (*)(re::internal *))re::ecs2::accessibility::allocInfo_CustomContent, (re::IntrospectionBase *(*)(void))re::ecs2::accessibility::initInfo_CustomContent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::accessibility::CustomContent>, this);
}

uint64_t re::audio::`anonymous namespace'::AttributesNeededForTheseModes(int a1, int a2)
{
  unsigned __int8 v2;

  if ((a1 - 2) >= 7)
    v2 = 0;
  else
    v2 = 0x10010101080204uLL >> (8 * (a1 - 2));
  switch(a2)
  {
    case 2:
      v2 |= 4u;
      break;
    case 3:
      v2 |= 2u;
      break;
    case 4:
      v2 |= 8u;
      break;
    case 5:
      v2 |= 1u;
      break;
    case 8:
      v2 |= 0x10u;
      break;
    default:
      return v2;
  }
  return v2;
}

void re::audio::MeshVisualizer::setupMaterials(re::audio::MeshVisualizer *this, re::AssetManager *a2, re::RenderManager *a3)
{
  int v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  __int128 v12;
  uint64_t v13;
  _BYTE v14[24];
  __int128 v15;
  uint64_t v16;

  v5 = *((_DWORD *)this + 26);
  if (v5 != 1)
  {
    if (v5)
      return;
    v6 = 1;
    re::AssetManager::assetHandle(a2, "engine:AudioMeshDebugVisualization.rematerialdefinition", 1, 0, (uint64_t *)&v15);
    v7 = *((_OWORD *)this + 3);
    *((_OWORD *)this + 3) = v15;
    v15 = v7;
    v8 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v16;
    v16 = v8;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v15);
    re::AssetHandle::loadAsync((re::audio::MeshVisualizer *)((char *)this + 48));
    goto LABEL_7;
  }
  v9 = *((_QWORD *)this + 7);
  if (v9)
  {
    v10 = atomic_load((unsigned int *)(v9 + 704));
    if (v10 == 2)
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v14, (re::audio::MeshVisualizer *)((char *)this + 48));
      re::MaterialAsset::makeMaterialMemoryAsset((uint64_t)a2, a3, (re::AssetHandle *)v14, 0, 0);
      v12 = *(_OWORD *)((char *)this + 72);
      *(_OWORD *)((char *)this + 72) = v15;
      v15 = v12;
      v13 = *((_QWORD *)this + 11);
      *((_QWORD *)this + 11) = v16;
      v16 = v13;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v15);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v14);
      v6 = 2;
LABEL_7:
      *((_DWORD *)this + 26) = v6;
    }
  }
}

void re::audio::MeshVisualizer::setMaterial(re::audio::MeshVisualizer *this, re::RenderManager *a2, re::PrimitiveRenderingContext *a3)
{
  size_t v6;
  unint64_t v7;
  _anonymous_namespace_ *v8;
  size_t v9;
  unint64_t v10;
  __n128 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)this + 26) == 2)
  {
    *((_QWORD *)a3 + 140) = *(_QWORD *)(re::AssetHandle::asset<re::MaterialAsset>((re::audio::MeshVisualizer *)((char *)this + 72))
                                      + 1664);
    if (*((_DWORD *)this + 24))
    {
      MurmurHash3_x64_128((uint64_t)"Transparent", 11, 0, &v12);
      v11.n128_u64[0] = (v13 - 0x61C8864680B583E9 + (v12 << 6) + (v12 >> 2)) ^ v12;
      v6 = strlen(re::audio::MeshVisualizer::setMaterial(re::RenderManager *,re::PrimitiveRenderingContext *)::solidTechniqueNames[*((int *)this + 24) - 1]);
      if (v6)
      {
        MurmurHash3_x64_128((uint64_t)re::audio::MeshVisualizer::setMaterial(re::RenderManager *,re::PrimitiveRenderingContext *)::solidTechniqueNames[*((int *)this + 24) - 1], v6, 0, &v12);
        v7 = (v13 - 0x61C8864680B583E9 + (v12 << 6) + (v12 >> 2)) ^ v12;
      }
      else
      {
        v7 = 0;
      }
      v11.n128_u64[1] = v7;
      re::DynamicArray<re::RigNodeConstraint>::add((re::PrimitiveRenderingContext *)((char *)a3 + 1136), &v11);
    }
    if (*((_DWORD *)this + 25))
    {
      v8 = (re::PrimitiveRenderingContext *)((char *)a3 + 1136);
      MurmurHash3_x64_128((uint64_t)"PrimitiveRendererWireframe", 26, 0, &v12);
      v11.n128_u64[0] = (v13 - 0x61C8864680B583E9 + (v12 << 6) + (v12 >> 2)) ^ v12;
      v9 = strlen(re::audio::MeshVisualizer::setMaterial(re::RenderManager *,re::PrimitiveRenderingContext *)::wireTechniqueNames[*((int *)this + 25) - 1]);
      if (v9)
      {
        MurmurHash3_x64_128((uint64_t)re::audio::MeshVisualizer::setMaterial(re::RenderManager *,re::PrimitiveRenderingContext *)::wireTechniqueNames[*((int *)this + 25) - 1], v9, 0, &v12);
        v10 = (v13 - 0x61C8864680B583E9 + (v12 << 6) + (v12 >> 2)) ^ v12;
      }
      else
      {
        v10 = 0;
      }
      v11.n128_u64[1] = v10;
      re::DynamicArray<re::RigNodeConstraint>::add(v8, &v11);
    }
    *((_QWORD *)this + 14) = a2;
  }
}

void re::audio::MeshVisualizer::addDebugVisMesh(uint64_t a1, const re::AssetHandle *a2, unint64_t a3)
{
  _BYTE v6[24];

  if (!re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::containsKey(a1, (uint64_t)a2))
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)v6, a2);
    re::audio::MeshVisualizer::updateDebugVisMesh(a1, (const re::AssetHandle *)v6, a3);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)v6);
  }
}

BOOL re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::containsKey(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_QWORD *)a1)
  {
    v2 = *(_QWORD *)(a2 + 8);
    if (v2)
      v3 = *(_QWORD *)(v2 + 664);
    else
      v3 = 0;
    v5 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v2 ^ (v2 >> 30))) >> 27));
    v6 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v3 ^ (v5 >> 31) ^ v5) % *(unsigned int *)(a1 + 24)));
    v4 = 0x7FFFFFFFLL;
    if ((_DWORD)v6 != 0x7FFFFFFF)
    {
      v7 = *(_QWORD *)(a1 + 16);
      v4 = 0x7FFFFFFFLL;
      while (*(_QWORD *)(v7 + 56 * v6 + 24) != v2)
      {
        v6 = *(_DWORD *)(v7 + 56 * v6 + 8) & 0x7FFFFFFF;
        if (v6 == 0x7FFFFFFF)
          return v4 != 0x7FFFFFFF;
      }
      v4 = v6;
    }
  }
  else
  {
    v4 = 0x7FFFFFFFLL;
  }
  return v4 != 0x7FFFFFFF;
}

void re::audio::MeshVisualizer::updateDebugVisMesh(uint64_t a1, const re::AssetHandle *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  int v7;
  const re::GeomMesh *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  int v26;
  uint64_t v27;
  const re::AssetHandle *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  unint64_t v35;
  BOOL v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  id v42;
  unint64_t v43;
  int v44;
  id v45;
  size_t v46;
  unint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  unint64_t v57;
  uint8x8_t v58;
  _QWORD *v59;
  uint64_t **v60;
  uint64_t *v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unint64_t v65;
  float v66;
  _BOOL8 v67;
  unint64_t v68;
  unint64_t v69;
  size_t v70;
  _QWORD *v71;
  unint64_t *v72;
  unint64_t v73;
  uint8x8_t v74;
  uint64_t **v75;
  uint64_t *i;
  unint64_t v77;
  float v78;
  _BOOL8 v79;
  unint64_t v80;
  unint64_t v81;
  size_t v82;
  _QWORD *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t v86;
  BOOL v87;
  unint64_t v88;
  unint64_t v90;
  _DWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void *v97;
  int v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  void *v103;
  void *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  unint64_t v109;
  _BOOL4 v111;
  unint64_t v112;
  uint8x8_t v113;
  void **v114;
  _QWORD *v115;
  unint64_t v116;
  float v117;
  _BOOL8 v118;
  unint64_t v119;
  unint64_t v120;
  size_t v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  unint64_t v125;
  _DWORD *v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  _DWORD *v131;
  _DWORD *v132;
  unint64_t v133;
  uint64_t v134;
  BOOL v135;
  _OWORD *v136;
  unint64_t v137;
  uint64_t v138;
  BOOL v139;
  _OWORD *v140;
  unint64_t v141;
  uint64_t v142;
  BOOL v143;
  _OWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  void *v147;
  _QWORD *v148;
  _QWORD *v149;
  void *v150;
  _QWORD *v151;
  __n128 v152;
  void *v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  uint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *p_shared_owners;
  unint64_t v167;
  int v168;
  int v169;
  void *v170;
  void *v171;
  void *v172;
  const re::AssetHandle *v173;
  void *v174;
  unsigned int v175;
  unint64_t v176;
  int v177;
  void *v178;
  void *v179;
  void *v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  int v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  void *v201[2];
  void *__p[2];
  float v203;
  void *v204[2];
  void *v205[2];
  float v206;
  __int128 v207;
  int v208;
  _QWORD v209[2];
  unint64_t v210;
  int v211;
  _DWORD *v212;
  uint64_t v213;
  _BYTE v214[28];
  __int16 v215;
  _BYTE v216[10];
  int v217;
  const char *v218;
  __int16 v219;
  int v220;
  __int16 v221;
  uint64_t v222;
  __int16 v223;
  uint64_t v224;
  __n128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  uint64_t v230;

  v4 = a3;
  v6 = a1;
  v230 = *MEMORY[0x24BDAC8D0];
  v7 = *(_DWORD *)(a1 + 96);
  if (!__PAIR64__(*(_DWORD *)(v6 + 100), v7))
    return;
  if (!*(_DWORD *)(a3 + 40))
    return;
  if ((v9 & 1) != 0)
  {
    v16 = (_BYTE *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v4 + 64), "vertexNormal");
    if (!v16
      || v16[16] != 1
      || (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v16 + 16))(v16) != *(_DWORD *)(v4 + 16))
    {
      return;
    }
  }
  if ((v9 & 2) != 0)
  {
    v17 = (_BYTE *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v4 + 64), "classification");
    if (!v17
      || v17[16] != 2
      || (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v17 + 16))(v17) != *(_DWORD *)(v4 + 40))
    {
      return;
    }
  }
  if ((v9 & 4) != 0)
  {
    v18 = (_BYTE *)re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v4 + 64), "vertexColor");
    if (!v18
      || v18[16] != 1
      || (*(unsigned int (**)(_BYTE *))(*(_QWORD *)v18 + 16))(v18) != *(_DWORD *)(v4 + 16))
    {
      return;
    }
  }
  if ((v9 & 8) != 0
    || v9 >= 0x10
  {
    return;
  }
  v10 = *(unsigned int *)(v6 + 120);
  v12 = (void *)*(unsigned int *)(v4 + 40);
  if ((v11 & 2) != 0
    && (v13 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v4 + 64), "classification")) != 0)
  {
    v14 = v13;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13))
    {
      v193 = re::internal::GeomTypedAttribute<int>::operator[](v14, 0);
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    }
    else
    {
      v193 = 0;
      v15 = 0;
    }
  }
  else
  {
    v193 = 0;
    v15 = 0xFFFFFFFFLL;
  }
  v19 = v10 << 32;
  v185 = v4;
  v175 = v10;
  if (v11 < 8)
  {
    v198 = 0;
    LODWORD(v20) = -1;
    if ((v11 & 2) == 0)
      goto LABEL_38;
LABEL_37:
    if (!*(_BYTE *)(v6 + 400))
      goto LABEL_49;
    goto LABEL_38;
  }
  v21 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v4 + 64), (const char *)re::AcousticMeshAsset::kMaterialAttributeName);
  if (v21)
  {
    v22 = v21;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21))
    {
      v198 = re::internal::GeomTypedAttribute<int>::operator[](v22, 0);
      LODWORD(v20) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
    }
    else
    {
      v198 = 0;
      LODWORD(v20) = 0;
    }
  }
  else
  {
    v198 = 0;
    LODWORD(v20) = -1;
  }
  v4 = v185;
  if ((v11 & 2) != 0)
    goto LABEL_37;
LABEL_38:
  if (((v11 & 8) == 0 || *(_BYTE *)(v6 + 401)) && (v11 < 0x10 || *(_BYTE *)(v6 + 402)))
  {
    v23 = *(unsigned int *)(v4 + 40);
    if (*(_DWORD *)(v4 + 40))
    {
      v24 = 0;
      v25 = (int *)(*(_QWORD *)(v4 + 56) + 12);
      do
      {
        v26 = *v25;
        v25 += 4;
        if (v26 == -1)
          v27 = 1;
        else
          v27 = 2;
        v24 += v27;
        --v23;
      }
      while (v23);
    }
    else
    {
      v24 = 0;
    }
    v31 = 3 * v24;
    v187 = 1;
    goto LABEL_83;
  }
LABEL_49:
  if (!v12)
  {
    v43 = v19;
    v44 = 0;
    v180 = 0;
    goto LABEL_261;
  }
  v28 = a2;
  v29 = v4;
  v30 = 0;
  v31 = 0;
  v32 = v20;
  v3 = v15;
  v33 = *(_QWORD *)(v29 + 40);
  v34 = (_DWORD *)(*(_QWORD *)(v29 + 56) + 12);
  do
  {
    if ((v11 & 2) != 0)
    {
      if (v30 >= v15)
        goto LABEL_420;
      v35 = *(int *)(v193 + 4 * v30);
      v36 = (int)v35 >= 1 && *(_QWORD *)(v6 + 376) > v35;
      if (v36 && ((*(_QWORD *)(*(_QWORD *)(v6 + 368) + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v35) & 1) != 0)
        goto LABEL_75;
    }
    if ((v11 & 8) != 0)
    {
      if (v30 >= v20)
        goto LABEL_426;
      v37 = *(int *)(v198 + 4 * v30);
      v38 = (int)v37 >= 1 && *(_QWORD *)(v6 + 296) > v37;
      if (v38 && ((*(_QWORD *)(*(_QWORD *)(v6 + 288) + ((v37 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v37) & 1) != 0)
        goto LABEL_75;
    }
    if (v11 >= 0x10)
    {
      if (v30 >= v20)
        goto LABEL_428;
      v39 = *(int *)(v198 + 4 * v30);
      v40 = (int)v39 >= 1 && *(_QWORD *)(v6 + 216) > v39;
      if (v40 && ((*(_QWORD *)(*(_QWORD *)(v6 + 208) + ((v39 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v39) & 1) != 0)
      {
LABEL_75:
        if (v33 <= v30)
          goto LABEL_427;
        if (*v34 == -1)
          v31 += 3;
        else
          v31 += 6;
      }
    }
    ++v30;
    v34 += 4;
  }
  while (v12 != (void *)v30);
  v187 = 0;
  a2 = v28;
LABEL_83:
  if (!v31)
  {
    v43 = v19;
    v44 = 0;
    v180 = 0;
    v12 = 0;
LABEL_261:
    v177 = 0;
    v181 = 0;
    v182 = 0;
    v178 = 0;
    v179 = 0;
    v102 = 0;
    v103 = 0;
    v104 = 0;
    goto LABEL_373;
  }
  v176 = v31;
  v41 = *(_QWORD *)(v6 + 112);
  if (v41)
    v42 = *(id *)(v41 + 184);
  else
    v42 = MTLCreateSystemDefaultDevice();
  v173 = a2;
  v189 = (_QWORD *)v6;
  v45 = v42;

  v174 = v45;
  v172 = (void *)objc_msgSend(v45, "newBufferWithLength:options:", 4 * v176, 0);
  v32 = objc_msgSend(v172, "contents");
  *(_OWORD *)v204 = 0u;
  *(_OWORD *)v205 = 0u;
  v206 = 1.0;
  v46 = (unint64_t)(float)v176;
  std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>((uint64_t)v204, v46);
  *(_OWORD *)v201 = 0u;
  *(_OWORD *)__p = 0u;
  v203 = 1.0;
  v47 = (unint64_t)v201;
  std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>((uint64_t)v201, v46);
  v30 = v185;
  v48 = *(_DWORD *)(v185 + 40);
  if (v48)
  {
    v49 = 0;
    v188 = 0;
    v33 = 0x9E3779B97F4A7C17;
    v183 = v32;
    v192 = v15;
    v197 = v20;
    v20 = 0;
    while (1)
    {
      if ((v187 & 1) != 0)
        goto LABEL_91;
      if ((v11 & 2) != 0)
      {
        if (v20 >= v192)
          goto LABEL_430;
        v86 = *(int *)(v193 + 4 * v20);
        v87 = (int)v86 >= 1 && v189[47] > v86;
        if (v87 && ((*(_QWORD *)(v189[46] + ((v86 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v86) & 1) != 0)
          goto LABEL_91;
      }
      if ((v11 & 8) != 0)
      {
        if (v20 >= v197)
          goto LABEL_431;
        v88 = *(int *)(v198 + 4 * v20);
        if ((int)v88 >= 1 && v189[37] > v88)
        {
          v95 = *(_QWORD *)(v189[36] + ((v88 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v88);
          if (v11 < 0x10 || v95)
          {
            if (!v95)
              goto LABEL_251;
            goto LABEL_91;
          }
        }
        else if (v11 <= 0xF)
        {
          goto LABEL_251;
        }
      }
      else if (v11 < 0x10)
      {
        goto LABEL_251;
      }
      if (v20 >= v197)
        goto LABEL_432;
      v96 = *(int *)(v198 + 4 * v20);
      if ((int)v96 < 1
        || v189[27] <= v96
        || ((*(_QWORD *)(v189[26] + ((v96 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v96) & 1) == 0)
      {
LABEL_251:
        v93 = v188;
        v32 = v49;
        goto LABEL_252;
      }
LABEL_91:
      *(_QWORD *)&v216[2] = 0;
      memset(v214, 0, sizeof(v214));
      v50 = re::internal::GeomBaseTopology::faceVertices(v185 + 16, v20, (uint64_t)v214);
      v212 = 0;
      v209[1] = 0;
      v210 = 0;
      v211 = 0;
      v199 = v50;
      re::DynamicArray<int>::setCapacity(v209, v50);
      ++v211;
      if ((_DWORD)v50)
      {
        v51 = 0;
        v195 = v20;
        while (1)
        {
          v208 = 0;
          v30 = *(_QWORD *)&v214[16];
          if (*(_QWORD *)&v214[16] <= v51)
          {
            v213 = 0;
            v228 = 0u;
            v229 = 0u;
            v226 = 0u;
            v227 = 0u;
            v225 = 0u;
            v50 = MEMORY[0x24BDACB70];
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v217 = 136315906;
            v218 = "operator[]";
            v219 = 1024;
            v220 = 789;
            v221 = 2048;
            v222 = v51;
            v223 = 2048;
            v224 = v30;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_416:
            v213 = 0;
            v228 = 0u;
            v229 = 0u;
            v226 = 0u;
            v227 = 0u;
            v225 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v217 = 136315906;
            v218 = "operator[]";
            v219 = 1024;
            v220 = 601;
            v221 = 2048;
            v222 = v20;
            v223 = 2048;
            v224 = v192;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_417:
            v213 = 0;
            v228 = 0u;
            v229 = 0u;
            v226 = 0u;
            v227 = 0u;
            v225 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v217 = 136315906;
            v218 = "operator[]";
            v219 = 1024;
            v220 = 601;
            v221 = 2048;
            v222 = v20;
            v223 = 2048;
            v224 = v197;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_418:
            v213 = 0;
            v228 = 0u;
            v229 = 0u;
            v226 = 0u;
            v227 = 0u;
            v225 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v217 = 136315906;
            v218 = "operator[]";
            v219 = 1024;
            v220 = 601;
            v221 = 2048;
            v222 = v20;
            v223 = 2048;
            v224 = v197;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_419:
            v209[0] = 0;
            v228 = 0u;
            v229 = 0u;
            v226 = 0u;
            v227 = 0u;
            v225 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v214 = 136315906;
            *(_QWORD *)&v214[4] = "operator[]";
            *(_WORD *)&v214[12] = 1024;
            *(_DWORD *)&v214[14] = 601;
            *(_WORD *)&v214[18] = 2048;
            *(_QWORD *)&v214[20] = v50;
            v215 = 2048;
            *(_QWORD *)v216 = v198;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_420:
            v209[0] = 0;
            v228 = 0u;
            v229 = 0u;
            v226 = 0u;
            v227 = 0u;
            v225 = 0u;
            v50 = (unint64_t)v214;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v214 = 136315906;
            *(_QWORD *)&v214[4] = "operator[]";
            *(_WORD *)&v214[12] = 1024;
            *(_DWORD *)&v214[14] = 601;
            *(_WORD *)&v214[18] = 2048;
            *(_QWORD *)&v214[20] = v30;
            v215 = 2048;
            *(_QWORD *)v216 = v3;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_421:
            *(_QWORD *)&v207 = 0;
            v228 = 0u;
            v229 = 0u;
            v226 = 0u;
            v227 = 0u;
            v225 = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            v217 = 136315906;
            v218 = "operator[]";
            v219 = 1024;
            v220 = 789;
            v221 = 2048;
            v222 = 0;
            v223 = 2048;
            v224 = 0;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
            goto LABEL_422;
          }
          v52 = *(unsigned int *)(*(_QWORD *)&v216[2] + 4 * v51);
          LODWORD(v207) = *(_DWORD *)(*(_QWORD *)&v216[2] + 4 * v51);
          if ((v11 & 2) != 0)
          {
            if (v20 >= v192)
              goto LABEL_416;
            v53 = *(_DWORD *)(v193 + 4 * v20);
          }
          else
          {
            v53 = -1;
          }
          DWORD1(v207) = v53;
          if ((v11 & 8) == 0)
            break;
          if (v20 >= v197)
            goto LABEL_417;
          v54 = *(_DWORD *)(v198 + 4 * v20);
          DWORD2(v207) = v54;
          if (v11 > 0xF)
          {
            v55 = v54;
LABEL_105:
            v56 = v54;
            v54 = v55;
            goto LABEL_107;
          }
          v56 = -1;
LABEL_107:
          HIDWORD(v207) = v56;
          LOBYTE(v208) = v11;
          v57 = v52 - 0x61C8864680B583E9;
          v225.n128_u32[0] = 0;
          if ((v11 & 2) != 0)
            v57 ^= (v57 << 6) - 0x61C8864680B583E9 + (v57 >> 2) + v53;
          if ((v11 & 8) != 0)
            v57 ^= v54 - 0x61C8864680B583E9 + (v57 << 6) + (v57 >> 2);
          if (v11 >= 0x10)
            v30 = (v56 - 0x61C8864680B583E9 + (v57 << 6) + (v57 >> 2)) ^ v57;
          else
            v30 = v57;
          v3 = (unint64_t)v204[1];
          if (v204[1])
          {
            v58 = (uint8x8_t)vcnt_s8((int8x8_t)v204[1]);
            v58.i16[0] = vaddlv_u8(v58);
            v50 = v58.u32[0];
            if (v58.u32[0] > 1uLL)
            {
              v47 = v30;
              if ((void *)v30 >= v204[1])
                v47 = v30 % (unint64_t)v204[1];
            }
            else
            {
              v47 = ((unint64_t)v204[1] - 1) & v30;
            }
            v59 = v204[0];
            v60 = (uint64_t **)*((_QWORD *)v204[0] + v47);
            if (!v60 || (v61 = *v60) == 0)
            {
LABEL_131:
              v225.n128_u32[0] = v49;
              if (v50 > 1)
              {
                v47 = v30;
                v33 = 0x9E3779B97F4A7C17;
                if (v30 >= v3)
                  v47 = v30 % v3;
              }
              else
              {
                v47 = (v3 - 1) & v30;
                v33 = 0x9E3779B97F4A7C17;
              }
              v32 = (v49 + 1);
              v63 = (_QWORD *)v59[v47];
              if (!v63 || (v64 = (_QWORD *)*v63) == 0)
              {
                v20 = v195;
                goto LABEL_148;
              }
              while (1)
              {
                v65 = v64[1];
                if (v65 == v30)
                {
                  {
                    v20 = v195;
                    v33 = 0x9E3779B97F4A7C17;
                    goto LABEL_171;
                  }
                }
                else
                {
                  if (v50 > 1)
                  {
                    if (v65 >= v3)
                      v65 %= v3;
                  }
                  else
                  {
                    v65 &= v3 - 1;
                  }
                  if (v65 != v47)
                  {
LABEL_146:
                    v20 = v195;
                    v33 = 0x9E3779B97F4A7C17;
                    goto LABEL_148;
                  }
                }
                v64 = (_QWORD *)*v64;
                if (!v64)
                  goto LABEL_146;
              }
            }
            while (1)
            {
              v62 = v61[1];
              if (v62 == v30)
              {
                {
                  v225.n128_u32[0] = *((_DWORD *)v61 + 9);
                  v32 = v49;
                  v20 = v195;
                  v33 = 0x9E3779B97F4A7C17;
                  goto LABEL_209;
                }
              }
              else
              {
                if (v50 > 1)
                {
                  if (v62 >= v3)
                    v62 %= v3;
                }
                else
                {
                  v62 &= v3 - 1;
                }
                if (v62 != v47)
                  goto LABEL_131;
              }
              v61 = (uint64_t *)*v61;
              if (!v61)
                goto LABEL_131;
            }
          }
          v32 = (v49 + 1);
          v225.n128_u32[0] = v49;
LABEL_148:
          v50 = (unint64_t)operator new(0x28uLL);
          *(_QWORD *)v50 = 0;
          *(_QWORD *)(v50 + 8) = v30;
          *(_OWORD *)(v50 + 16) = v207;
          *(_DWORD *)(v50 + 32) = v208;
          *(_DWORD *)(v50 + 36) = v49;
          v66 = (float)((unint64_t)v205[1] + 1);
          if (!v3 || (float)(v206 * (float)v3) < v66)
          {
            v67 = v3 < 3 || (v3 & (v3 - 1)) != 0;
            v68 = v67 | (2 * v3);
            v69 = vcvtps_u32_f32(v66 / v206);
            if (v68 <= v69)
              v70 = v69;
            else
              v70 = v68;
            std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>((uint64_t)v204, v70);
            v3 = (unint64_t)v204[1];
            if (((unint64_t)v204[1] & ((unint64_t)v204[1] - 1)) != 0)
            {
              if ((void *)v30 >= v204[1])
                v47 = v30 % (unint64_t)v204[1];
              else
                v47 = v30;
            }
            else
            {
              v47 = ((unint64_t)v204[1] - 1) & v30;
            }
          }
          v71 = v204[0];
          v72 = (unint64_t *)*((_QWORD *)v204[0] + v47);
          if (v72)
          {
            *(_QWORD *)v50 = *v72;
LABEL_169:
            *v72 = v50;
            goto LABEL_170;
          }
          *(void **)v50 = v205[0];
          v205[0] = (void *)v50;
          v71[v47] = v205;
          if (*(_QWORD *)v50)
          {
            v73 = *(_QWORD *)(*(_QWORD *)v50 + 8);
            if ((v3 & (v3 - 1)) != 0)
            {
              if (v73 >= v3)
                v73 %= v3;
            }
            else
            {
              v73 &= v3 - 1;
            }
            v72 = (unint64_t *)((char *)v204[0] + 8 * v73);
            goto LABEL_169;
          }
LABEL_170:
          ++v205[1];
          LODWORD(v49) = v225.n128_u32[0];
LABEL_171:
          v3 = v49;
          v30 = (unint64_t)v201[1];
          if (v201[1])
          {
            v74 = (uint8x8_t)vcnt_s8((int8x8_t)v201[1]);
            v74.i16[0] = vaddlv_u8(v74);
            if (v74.u32[0] > 1uLL)
            {
              v47 = v49;
              if (v201[1] <= (void *)v49)
                v47 = v49 % (unint64_t)v201[1];
            }
            else
            {
              v47 = (LODWORD(v201[1]) - 1) & v49;
            }
            v75 = (uint64_t **)*((_QWORD *)v201[0] + v47);
            if (v75)
            {
              for (i = *v75; i; i = (uint64_t *)*i)
              {
                v77 = i[1];
                if (v77 == v49)
                {
                  if (*((_DWORD *)i + 4) == (_DWORD)v49)
                    goto LABEL_209;
                }
                else
                {
                  if (v74.u32[0] > 1uLL)
                  {
                    if ((void *)v77 >= v201[1])
                      v77 %= (unint64_t)v201[1];
                  }
                  else
                  {
                    v77 &= (unint64_t)v201[1] - 1;
                  }
                  if (v77 != v47)
                    break;
                }
              }
            }
          }
          v50 = (unint64_t)operator new(0x28uLL);
          *(_QWORD *)v50 = 0;
          *(_QWORD *)(v50 + 8) = v49;
          *(_DWORD *)(v50 + 16) = v49;
          *(_OWORD *)(v50 + 20) = v207;
          *(_DWORD *)(v50 + 36) = v208;
          v78 = (float)((unint64_t)__p[1] + 1);
          if (!v30 || (float)(v203 * (float)v30) < v78)
          {
            v79 = (v30 & (v30 - 1)) != 0;
            if (v30 < 3)
              v79 = 1;
            v80 = v79 | (2 * v30);
            v81 = vcvtps_u32_f32(v78 / v203);
            if (v80 <= v81)
              v82 = v81;
            else
              v82 = v80;
            std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>((uint64_t)v201, v82);
            v30 = (unint64_t)v201[1];
            if (((unint64_t)v201[1] & ((unint64_t)v201[1] - 1)) != 0)
            {
              if (v201[1] <= (void *)v49)
                v47 = v49 % (unint64_t)v201[1];
              else
                v47 = v49;
            }
            else
            {
              v47 = (LODWORD(v201[1]) - 1) & v49;
            }
          }
          v83 = v201[0];
          v84 = (unint64_t *)*((_QWORD *)v201[0] + v47);
          if (v84)
          {
            *(_QWORD *)v50 = *v84;
          }
          else
          {
            *(void **)v50 = __p[0];
            __p[0] = (void *)v50;
            v83[v47] = __p;
            if (!*(_QWORD *)v50)
              goto LABEL_208;
            v85 = *(_QWORD *)(*(_QWORD *)v50 + 8);
            if ((v30 & (v30 - 1)) != 0)
            {
              if (v85 >= v30)
                v85 %= v30;
            }
            else
            {
              v85 &= v30 - 1;
            }
            v84 = (unint64_t *)((char *)v201[0] + 8 * v85);
          }
          *v84 = v50;
LABEL_208:
          ++__p[1];
LABEL_209:
          re::DynamicArray<int>::add(v209, &v225);
          ++v51;
          v49 = v32;
          if (v51 == v199)
            goto LABEL_228;
        }
        v54 = -1;
        DWORD2(v207) = -1;
        v56 = -1;
        if (v11 <= 0xF)
          goto LABEL_107;
        if (v20 >= v197)
          goto LABEL_418;
        v54 = *(_DWORD *)(v198 + 4 * v20);
        v55 = -1;
        goto LABEL_105;
      }
      v32 = v49;
LABEL_228:
      v90 = v210;
      if (!v210)
        goto LABEL_421;
      v91 = v212;
      *(_DWORD *)(v183 + 4 * v188) = *v212;
      if (v90 == 1)
      {
LABEL_422:
        *(_QWORD *)&v207 = 0;
        v228 = 0u;
        v229 = 0u;
        v226 = 0u;
        v227 = 0u;
        v225 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v217 = 136315906;
        v218 = "operator[]";
        v219 = 1024;
        v220 = 789;
        v221 = 2048;
        v222 = 1;
        v223 = 2048;
        v224 = 1;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_423:
        *(_QWORD *)&v207 = 0;
        v228 = 0u;
        v229 = 0u;
        v226 = 0u;
        v227 = 0u;
        v225 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v217 = 136315906;
        v218 = "operator[]";
        v219 = 1024;
        v220 = 789;
        v221 = 2048;
        v222 = 2;
        v223 = 2048;
        v224 = 2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_424:
        v209[0] = 0;
        v228 = 0u;
        v229 = 0u;
        v226 = 0u;
        v227 = 0u;
        v225 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v214 = 136315906;
        *(_QWORD *)&v214[4] = "operator[]";
        *(_WORD *)&v214[12] = 1024;
        *(_DWORD *)&v214[14] = 601;
        *(_WORD *)&v214[18] = 2048;
        *(_QWORD *)&v214[20] = v50;
        v215 = 2048;
        *(_QWORD *)v216 = v188;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_425:
        v209[0] = 0;
        v228 = 0u;
        v229 = 0u;
        v226 = 0u;
        v227 = 0u;
        v225 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v214 = 136315906;
        *(_QWORD *)&v214[4] = "operator[]";
        *(_WORD *)&v214[12] = 1024;
        *(_DWORD *)&v214[14] = 601;
        *(_WORD *)&v214[18] = 2048;
        *(_QWORD *)&v214[20] = v50;
        v215 = 2048;
        *(_QWORD *)v216 = v187;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_426:
        v209[0] = 0;
        v228 = 0u;
        v229 = 0u;
        v226 = 0u;
        v227 = 0u;
        v225 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v214 = 136315906;
        *(_QWORD *)&v214[4] = "operator[]";
        *(_WORD *)&v214[12] = 1024;
        *(_DWORD *)&v214[14] = 601;
        *(_WORD *)&v214[18] = 2048;
        *(_QWORD *)&v214[20] = v30;
        v215 = 2048;
        *(_QWORD *)v216 = v32;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_427:
        v209[0] = 0;
        v228 = 0u;
        v229 = 0u;
        v226 = 0u;
        v227 = 0u;
        v225 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v214 = 136315906;
        *(_QWORD *)&v214[4] = "operator[]";
        *(_WORD *)&v214[12] = 1024;
        *(_DWORD *)&v214[14] = 797;
        *(_WORD *)&v214[18] = 2048;
        *(_QWORD *)&v214[20] = v30;
        v215 = 2048;
        *(_QWORD *)v216 = v33;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_428:
        v209[0] = 0;
        v228 = 0u;
        v229 = 0u;
        v226 = 0u;
        v227 = 0u;
        v225 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v214 = 136315906;
        *(_QWORD *)&v214[4] = "operator[]";
        *(_WORD *)&v214[12] = 1024;
        *(_DWORD *)&v214[14] = 601;
        *(_WORD *)&v214[18] = 2048;
        *(_QWORD *)&v214[20] = v30;
        v215 = 2048;
        *(_QWORD *)v216 = v32;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_429:
        *(_QWORD *)&v207 = 0;
        v228 = 0u;
        v229 = 0u;
        v226 = 0u;
        v227 = 0u;
        v225 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        v217 = 136315906;
        v218 = "operator[]";
        v219 = 1024;
        v220 = 789;
        v221 = 2048;
        v222 = 3;
        v223 = 2048;
        v224 = 3;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_430:
        v209[0] = 0;
        v228 = 0u;
        v229 = 0u;
        v226 = 0u;
        v227 = 0u;
        v225 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v214 = 136315906;
        *(_QWORD *)&v214[4] = "operator[]";
        *(_WORD *)&v214[12] = 1024;
        *(_DWORD *)&v214[14] = 601;
        *(_WORD *)&v214[18] = 2048;
        *(_QWORD *)&v214[20] = v20;
        v215 = 2048;
        *(_QWORD *)v216 = v192;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_431:
        v209[0] = 0;
        v228 = 0u;
        v229 = 0u;
        v226 = 0u;
        v227 = 0u;
        v225 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v214 = 136315906;
        *(_QWORD *)&v214[4] = "operator[]";
        *(_WORD *)&v214[12] = 1024;
        *(_DWORD *)&v214[14] = 601;
        *(_WORD *)&v214[18] = 2048;
        *(_QWORD *)&v214[20] = v20;
        v215 = 2048;
        *(_QWORD *)v216 = v197;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_432:
        v209[0] = 0;
        v228 = 0u;
        v229 = 0u;
        v226 = 0u;
        v227 = 0u;
        v225 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v214 = 136315906;
        *(_QWORD *)&v214[4] = "operator[]";
        *(_WORD *)&v214[12] = 1024;
        *(_DWORD *)&v214[14] = 601;
        *(_WORD *)&v214[18] = 2048;
        *(_QWORD *)&v214[20] = v20;
        v215 = 2048;
        *(_QWORD *)v216 = v197;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      v92 = v183 + 4 * v188;
      *(_DWORD *)(v92 + 4) = v91[1];
      if (v90 <= 2)
        goto LABEL_423;
      v93 = v188 + 3;
      *(_DWORD *)(v92 + 8) = v91[2];
      if ((_DWORD)v199 == 4)
      {
        *(_DWORD *)(v183 + 4 * v93) = v91[2];
        v30 = v185;
        if (v90 <= 3)
          goto LABEL_429;
        v94 = v183 + 4 * v188;
        *(_DWORD *)(v94 + 16) = v91[3];
        v93 = v188 + 6;
        *(_DWORD *)(v94 + 20) = *v91;
      }
      else
      {
        v30 = v185;
      }
      if (v209[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v209[0] + 40))(v209[0]);
      if (*(_QWORD *)v214 && *(_QWORD *)&v216[2])
        (*(void (**)(void))(**(_QWORD **)v214 + 40))();
      v48 = *(_DWORD *)(v30 + 40);
LABEL_252:
      ++v20;
      v49 = v32;
      v188 = v93;
      if (v20 >= v48)
        goto LABEL_255;
    }
  }
  LODWORD(v32) = 0;
LABEL_255:
  v200 = v32;
  v50 = 12 * v32;
  v97 = (void *)objc_msgSend(v174, "newBufferWithLength:options:", v50, 0);
  v197 = re::GeomMesh::accessVertexPositions((re::GeomMesh *)v30);
  LODWORD(v198) = v98;
  v33 = objc_msgSend(v97, "contents");
  if ((v11 & 1) != 0)
  {
    v99 = (void *)objc_msgSend(v174, "newBufferWithLength:options:", v50, 0);
    v100 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v30 + 64), "vertexNormal");
    if (v100)
    {
      v101 = v100;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v100 + 16))(v100))
      {
        v184 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v101, 0);
        LODWORD(v188) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v101 + 16))(v101);
      }
      else
      {
        LODWORD(v188) = 0;
        v184 = 0;
      }
      v30 = v185;
      v190 = objc_msgSend(v99, "contents");
      v169 = 1;
    }
    else
    {
      v184 = 0;
      v190 = 0;
      LODWORD(v188) = -1;
      v169 = 1;
      v30 = v185;
    }
  }
  else
  {
    v169 = 0;
    v99 = 0;
    v184 = 0;
    v190 = 0;
    LODWORD(v188) = -1;
  }
  v181 = v99;
  v170 = v97;
  if ((v11 & 4) != 0)
  {
    v105 = (void *)objc_msgSend(v174, "newBufferWithLength:options:", v50, 0);
    v106 = re::internal::GeomAttributeManager::attributeByName((re::internal::GeomAttributeManager *)(v30 + 64), "vertexColor");
    v171 = v105;
    if (v106)
    {
      v50 = v106;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v106 + 16))(v106))
      {
        v186 = re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](v50, 0);
        v187 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v50 + 16))(v50);
      }
      else
      {
        v187 = 0;
        v186 = 0;
      }
      v30 = objc_msgSend(v105, "contents");
    }
    else
    {
      v186 = 0;
      v30 = 0;
      v187 = -1;
    }
    v168 = 1;
  }
  else
  {
    v168 = 0;
    v171 = 0;
    v186 = 0;
    v30 = 0;
    v187 = -1;
  }
  v107 = 16 * v200;
  if ((v11 & 2) != 0)
  {
    v178 = (void *)objc_msgSend(v174, "newBufferWithLength:options:", 16 * v200, 0);
    v194 = objc_msgSend(v178, "contents");
    v177 = 1;
  }
  else
  {
    v177 = 0;
    v178 = 0;
    v194 = 0;
  }
  if ((v11 & 8) != 0)
  {
    v180 = (void *)objc_msgSend(v174, "newBufferWithLength:options:", v107, 0);
    v192 = objc_msgSend(v180, "contents");
    HIDWORD(v182) = 1;
  }
  else
  {
    v180 = 0;
    HIDWORD(v182) = 0;
    v192 = 0;
  }
  if (v11 < 0x10)
  {
    v179 = 0;
    LODWORD(v182) = 0;
    v191 = 0;
  }
  else
  {
    v179 = (void *)objc_msgSend(v174, "newBufferWithLength:options:", v107, 0);
    v191 = objc_msgSend(v179, "contents");
    LODWORD(v182) = 1;
  }
  v108 = (void *)v200;
  if ((_DWORD)v200)
  {
    v109 = 0;
    v196 = v11 & (v190 != 0);
    v3 = (v30 != 0) & (v11 >> 2);
    LODWORD(v20) = (v194 != 0) & (v11 >> 1);
    v32 = (v192 != 0) & (v11 >> 3);
    v111 = v11 > 0xF && v191 != 0;
    v112 = (unint64_t)v201[1];
    while (1)
    {
      if (v112)
      {
        v113 = (uint8x8_t)vcnt_s8((int8x8_t)v112);
        v113.i16[0] = vaddlv_u8(v113);
        if (v113.u32[0] > 1uLL)
        {
          v50 = v109;
          if (v112 <= v109)
            v50 = v109 % v112;
        }
        else
        {
          v50 = (v112 + 0xFFFFFFFF) & v109;
        }
        v114 = (void **)*((_QWORD *)v201[0] + v50);
        if (v114)
        {
          v115 = *v114;
          if (*v114)
          {
            do
            {
              v116 = v115[1];
              if (v116 == v109)
              {
                if (v109 == *((_DWORD *)v115 + 4))
                  goto LABEL_330;
              }
              else
              {
                if (v113.u32[0] > 1uLL)
                {
                  if (v116 >= v112)
                    v116 %= v112;
                }
                else
                {
                  v116 &= v112 - 1;
                }
                if (v116 != v50)
                  break;
              }
              v115 = (_QWORD *)*v115;
            }
            while (v115);
          }
        }
      }
      v115 = operator new(0x28uLL);
      v115[1] = v109;
      *((_DWORD *)v115 + 4) = v109;
      *(_QWORD *)((char *)v115 + 28) = 0;
      *(_QWORD *)((char *)v115 + 20) = 0;
      *((_DWORD *)v115 + 9) = 0;
      v117 = (float)((unint64_t)__p[1] + 1);
      if (v112 && (float)(v203 * (float)v112) >= v117)
        goto LABEL_316;
      v118 = (v112 & (v112 - 1)) != 0;
      if (v112 < 3)
        v118 = 1;
      v119 = v118 | (2 * v112);
      v120 = vcvtps_u32_f32(v117 / v203);
      v121 = v119 <= v120 ? v120 : v119;
      std::__hash_table<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,re::ProfilerProcessor *>>>::__rehash<true>((uint64_t)v201, v121);
      v112 = (unint64_t)v201[1];
      if (((unint64_t)v201[1] & ((unint64_t)v201[1] - 1)) == 0)
        break;
      v108 = (void *)v200;
      if (v201[1] <= (void *)v109)
        v50 = v109 % (unint64_t)v201[1];
      else
        v50 = v109;
LABEL_317:
      v122 = v201[0];
      v123 = (_QWORD *)*((_QWORD *)v201[0] + v50);
      if (v123)
      {
        *v115 = *v123;
LABEL_328:
        *v123 = v115;
        goto LABEL_329;
      }
      v124 = __p[0];
      *v115 = __p[0];
      __p[0] = v115;
      v122[v50] = __p;
      if (v124)
      {
        v125 = v124[1];
        if ((v112 & (v112 - 1)) != 0)
        {
          if (v125 >= v112)
            v125 %= v112;
        }
        else
        {
          v125 &= v112 - 1;
        }
        v123 = (char *)v201[0] + 8 * v125;
        goto LABEL_328;
      }
LABEL_329:
      ++__p[1];
LABEL_330:
      v50 = *((unsigned int *)v115 + 5);
      if (v50 >= v198)
        goto LABEL_419;
      v126 = (_DWORD *)(v197 + 16 * v50);
      v127 = (3 * v109);
      *(_DWORD *)(v33 + 4 * v127) = *v126;
      v128 = (v127 + 1);
      *(_DWORD *)(v33 + 4 * v128) = v126[1];
      v129 = v126[2];
      v130 = (v127 + 2);
      *(_DWORD *)(v33 + 4 * v130) = v129;
      if (v196)
      {
        if (v188 <= v50)
          goto LABEL_424;
        v131 = (_DWORD *)(v184 + 16 * v50);
        *(_DWORD *)(v190 + 4 * v127) = *v131;
        *(_DWORD *)(v190 + 4 * v128) = v131[1];
        *(_DWORD *)(v190 + 4 * v130) = v131[2];
      }
      if ((_DWORD)v3)
      {
        if (v187 <= v50)
          goto LABEL_425;
        v132 = (_DWORD *)(v186 + 16 * v50);
        *(_DWORD *)(v30 + 4 * v127) = *v132;
        *(_DWORD *)(v30 + 4 * v128) = v132[1];
        *(_DWORD *)(v30 + 4 * v130) = v132[2];
      }
      if ((_DWORD)v20)
      {
        v137 = *((int *)v115 + 6);
        v138 = v189[40];
        v139 = (v189[41] - v138) >> 4 <= v137 || (uint64_t)v137 <= 0;
        v140 = (_OWORD *)(v138 + 16 * v137);
        if (v139)
          v140 = v189 + 44;
        *(_OWORD *)(v194 + 4 * (4 * v109)) = *v140;
        if ((_DWORD)v32)
        {
LABEL_356:
          v141 = *((int *)v115 + 7);
          v142 = v189[30];
          v143 = (v189[31] - v142) >> 4 <= v141 || (uint64_t)v141 <= 0;
          v144 = (_OWORD *)(v142 + 16 * v141);
          if (v143)
            v144 = v189 + 34;
          *(_OWORD *)(v192 + 4 * (4 * v109)) = *v144;
          if (!v111)
            goto LABEL_347;
LABEL_340:
          v133 = *((int *)v115 + 8);
          v134 = v189[20];
          v135 = (v189[21] - v134) >> 4 <= v133 || (uint64_t)v133 <= 0;
          v136 = (_OWORD *)(v134 + 16 * v133);
          if (v135)
            v136 = v189 + 24;
          *(_OWORD *)(v191 + 4 * (4 * v109)) = *v136;
          goto LABEL_347;
        }
      }
      else if ((_DWORD)v32)
      {
        goto LABEL_356;
      }
      if (v111)
        goto LABEL_340;
LABEL_347:
      if ((void *)++v109 == v108)
        goto LABEL_364;
    }
    v50 = ((unint64_t)v201[1] + 0xFFFFFFFF) & v109;
LABEL_316:
    v108 = (void *)v200;
    goto LABEL_317;
  }
LABEL_364:
  v145 = __p[0];
  if (__p[0])
  {
    do
    {
      v146 = (_QWORD *)*v145;
      operator delete(v145);
      v145 = v146;
    }
    while (v146);
  }
  v147 = v201[0];
  v201[0] = 0;
  v6 = (uint64_t)v189;
  a2 = v173;
  v44 = v168;
  v102 = v169;
  v12 = v171;
  if (v147)
    operator delete(v147);
  v148 = v205[0];
  if (v205[0])
  {
    do
    {
      v149 = (_QWORD *)*v148;
      operator delete(v148);
      v148 = v149;
    }
    while (v149);
  }
  v43 = ((unint64_t)v175 << 32) | 1;
  v150 = v204[0];
  v204[0] = 0;
  if (v150)
    operator delete(v150);

  v15 = v176;
  v103 = v172;
  v3 = v200;
  v104 = v170;
LABEL_373:
  v151 = operator new(0xF0uLL);
  v151[1] = 0;
  v151[2] = 0;
  *v151 = &off_24ED67EF0;
  v151[3] = v104;
  v151[4] = 30;
  v151[5] = v3;
  v151[6] = v103;
  v151[7] = 36;
  v151[8] = v15;
  *((_BYTE *)v151 + 72) = 0;
  *((_BYTE *)v151 + 96) = 0;
  if (v102)
  {
    v151[9] = v181;
    v151[10] = 30;
    v151[11] = v3;
    *((_BYTE *)v151 + 96) = 1;
    v181 = 0;
  }
  v153 = v178;
  *((_BYTE *)v151 + 104) = 0;
  *((_BYTE *)v151 + 128) = 0;
  if (v177)
  {
    v151[13] = v178;
    v151[14] = 31;
    v151[15] = v3;
    *((_BYTE *)v151 + 128) = 1;
    v153 = 0;
  }
  *((_BYTE *)v151 + 136) = 0;
  *((_BYTE *)v151 + 160) = 0;
  if (v44)
  {
    v151[17] = v12;
    v151[18] = 30;
    v151[19] = v3;
    *((_BYTE *)v151 + 160) = 1;
    v12 = 0;
  }
  *((_BYTE *)v151 + 168) = 0;
  *((_BYTE *)v151 + 192) = 0;
  if (HIDWORD(v182))
  {
    v151[21] = v180;
    v151[22] = 31;
    v151[23] = v3;
    *((_BYTE *)v151 + 192) = 1;
    v180 = 0;
  }
  *((_BYTE *)v151 + 200) = 0;
  *((_BYTE *)v151 + 224) = 0;
  if ((_DWORD)v182)
  {
    v151[25] = v179;
    v151[26] = 31;
    v151[27] = v3;
    *((_BYTE *)v151 + 224) = 1;
    v179 = 0;
  }
  v151[29] = v43;
  v225.n128_u64[0] = (unint64_t)(v151 + 3);
  v225.n128_u64[1] = (unint64_t)v151;
  v154 = *((_QWORD *)a2 + 1);
  if (v154)
    v155 = *(_QWORD *)(v154 + 664);
  else
    v155 = 0;
  v156 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (v154 ^ (v154 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v154 ^ (v154 >> 30))) >> 27));
  v157 = v155 ^ (v156 >> 31) ^ v156;
  if (*(_QWORD *)v6)
  {
    v158 = v157 % *(unsigned int *)(v6 + 24);
    v159 = *(unsigned int *)(*(_QWORD *)(v6 + 8) + 4 * v158);
    if ((_DWORD)v159 != 0x7FFFFFFF)
    {
      v160 = *(_QWORD *)(v6 + 16);
      while (*(_QWORD *)(v160 + 56 * v159 + 24) != v154)
      {
        v159 = *(_DWORD *)(v160 + 56 * v159 + 8) & 0x7FFFFFFF;
        if (v159 == 0x7FFFFFFF)
          goto LABEL_393;
      }
      v164 = v160 + 56 * v159;
      v225 = 0uLL;
      v165 = *(std::__shared_weak_count **)(v164 + 48);
      *(_QWORD *)(v164 + 40) = v151 + 3;
      *(_QWORD *)(v164 + 48) = v151;
      if (v165)
      {
        p_shared_owners = (unint64_t *)&v165->__shared_owners_;
        do
          v167 = __ldaxr(p_shared_owners);
        while (__stlxr(v167 - 1, p_shared_owners));
        if (!v167)
        {
          ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
          std::__shared_weak_count::__release_weak(v165);
        }
      }
      goto LABEL_394;
    }
  }
  else
  {
    LODWORD(v158) = 0;
  }
LABEL_393:
  v152 = re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsMove(v6, v158, v157, a2, &v225);
LABEL_394:
  ++*(_DWORD *)(v6 + 40);
  v161 = (std::__shared_weak_count *)v225.n128_u64[1];
  if (v225.n128_u64[1])
  {
    v162 = (unint64_t *)(v225.n128_u64[1] + 8);
    do
      v163 = __ldaxr(v162);
    while (__stlxr(v163 - 1, v162));
    if (!v163)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v161->__on_zero_shared)(v161, v152);
      std::__shared_weak_count::__release_weak(v161);
    }
  }
  if ((_DWORD)v182)

  if (HIDWORD(v182))
  if (v44)

  if (v177)
  if (v102)

}

double re::audio::MeshVisualizer::removeDebugVisMeshesNotInUse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  double result;
  uint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  uint64_t v18;
  int *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  char v33[8];
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  unsigned int v37;
  uint64_t v38;

  if (!*(_DWORD *)(a1 + 28))
    return result;
  if (!*(_DWORD *)(a2 + 28))
  {
    v8 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v8)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v8);
    if (*(_DWORD *)(a1 + 32))
    {
      v10 = 0;
      v11 = 0;
      do
      {
        re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 16) + v10);
        ++v11;
        v10 += 56;
      }
      while (v11 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v12 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v12;
    return result;
  }
  v37 = 0;
  v35 = 0u;
  v36 = 0u;
  v38 = 0x7FFFFFFFLL;
  v4 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*(_QWORD *)(a1 + 16) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 14;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a1 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 == (_DWORD)v5)
  {
    v13 = 0;
  }
  else
  {
    v14 = v5;
    do
    {
      if (!re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::containsKey(a2, *(_QWORD *)(a1 + 16) + 56 * v14 + 16))re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::add((uint64_t)&v35, (re::AssetHandle *)(*(_QWORD *)(a1 + 16) + 56 * v14 + 16));
      v15 = *(_DWORD *)(a1 + 32);
      if (v15 <= (int)v5 + 1)
        v16 = v5 + 1;
      else
        v16 = *(_DWORD *)(a1 + 32);
      while (1)
      {
        v14 = (v5 + 1);
        if (v16 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v17 = v14;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v14 + 8) & 0x80000000) != 0)
          goto LABEL_27;
      }
      v17 = v16;
LABEL_27:
      LODWORD(v5) = v17;
    }
    while (v15 != v17);
    v13 = v37;
    if (v37)
    {
      v18 = 0;
      v19 = (int *)(v36 + 8);
      while (1)
      {
        v20 = *v19;
        v19 += 10;
        if (v20 < 0)
          goto LABEL_34;
        if (v37 == ++v18)
        {
          LODWORD(v18) = v37;
          goto LABEL_34;
        }
      }
    }
  }
  LODWORD(v18) = 0;
LABEL_34:
  if (v13 != (_DWORD)v18)
  {
    v21 = v18;
    v22 = v36;
    do
    {
      re::AssetHandle::AssetHandle((re::AssetHandle *)v33, (const re::AssetHandle *)(v22 + 40 * v21 + 16));
      if (*(_QWORD *)a1)
      {
        v23 = v34 ? *(_QWORD *)(v34 + 664) : 0;
        v24 = 0x94D049BB133111EBLL
            * ((0xBF58476D1CE4E5B9 * (v34 ^ (v34 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v34 ^ (v34 >> 30))) >> 27));
        v25 = (v23 ^ (v24 >> 31) ^ v24) % *(unsigned int *)(a1 + 24);
        v26 = *(_QWORD *)(a1 + 8);
        v27 = *(unsigned int *)(v26 + 4 * v25);
        if ((_DWORD)v27 != 0x7FFFFFFF)
        {
          v28 = *(_QWORD *)(a1 + 16);
          if (*(_QWORD *)(v28 + 56 * v27 + 24) == v34)
          {
            *(_DWORD *)(v26 + 4 * v25) = *(_DWORD *)(v28 + 56 * v27 + 8) & 0x7FFFFFFF;
LABEL_46:
            re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 16) + 56 * v27);
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v27 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v27 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
            --*(_DWORD *)(a1 + 28);
            v30 = *(_DWORD *)(a1 + 40) + 1;
            *(_DWORD *)(a1 + 36) = v27;
            *(_DWORD *)(a1 + 40) = v30;
          }
          else
          {
            while (1)
            {
              v29 = v27;
              v27 = *(_DWORD *)(v28 + 56 * v27 + 8) & 0x7FFFFFFF;
              if (v27 == 0x7FFFFFFF)
                break;
              if (*(_QWORD *)(v28 + 56 * v27 + 24) == v34)
              {
                *(_DWORD *)(v28 + 56 * v29 + 8) = *(_DWORD *)(v28 + 56 * v29 + 8) & 0x80000000 | *(_DWORD *)(v28 + 56 * v27 + 8) & 0x7FFFFFFF;
                goto LABEL_46;
              }
            }
          }
        }
      }
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v33);
      v22 = v36;
      if (v37 <= (int)v18 + 1)
        v31 = v18 + 1;
      else
        v31 = v37;
      while (1)
      {
        v21 = (v18 + 1);
        if (v31 - 1 == (_DWORD)v18)
          break;
        LODWORD(v18) = v18 + 1;
        v32 = v21;
        if ((*(_DWORD *)(v36 + 40 * v21 + 8) & 0x80000000) != 0)
          goto LABEL_54;
      }
      v32 = v31;
LABEL_54:
      LODWORD(v18) = v32;
    }
    while (v13 != v32);
  }
  return re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)&v35);
}

void re::audio::MeshVisualizer::addMeshAttributes(uint64_t a1, id **a2, uint64_t a3, _OWORD *a4)
{
  id v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  _anonymous_namespace_ *v14;
  id v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  unint64_t v20;
  _anonymous_namespace_ *v21;
  id *v22;
  id v23;
  id v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 v27;
  unint64_t v28;
  id v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int8 v33;
  unint64_t v34;
  id v35;
  id v36;
  unint64_t v37;
  unint64_t v38;
  unsigned __int8 v39;
  unint64_t v40;
  id v41;
  id v42;
  unint64_t v43;
  unint64_t v44;
  unsigned __int8 v45;
  unint64_t v46;
  id v47;
  id v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int8 v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unsigned __int8 v55;
  unint64_t v56;
  _anonymous_namespace_ *v57;
  unint64_t v58;
  unint64_t v59;
  unsigned __int8 v60;
  unint64_t v61;
  _anonymous_namespace_ *v62;
  unint64_t v63;
  unint64_t v64;
  unsigned __int8 v65;
  unint64_t v66;
  _anonymous_namespace_ *v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unsigned __int8 v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unsigned __int8 v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unsigned __int8 v79;
  unint64_t v80;
  id *v81;
  float v88[6];
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  uint64_t v96;
  void *v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  void *v101;
  __int16 v102;
  char v103;
  id v104;
  __int128 v105;
  __int128 v106;
  __n128 v107;
  __int16 v108;
  char v109;
  void *v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;

  v113 = *MEMORY[0x24BDAC8D0];
  v107.n128_u64[0] = 0;
  v107.n128_u64[1] = (unint64_t)&str_110;
  v110 = 0;
  LODWORD(v111) = 0;
  LODWORD(v112) = 0;
  v96 = 0;
  v97 = &str_110;
  v8 = (*a2)[1];
  v95 = **a2;
  v9 = v95;
  v100 = 0;
  v101 = &str_110;
  v104 = 0;
  LODWORD(v105) = 0;
  LODWORD(v106) = 0;
  re::StringID::operator=(&v100, &v96);
  v102 = 1;
  v103 = (char)v8;
  NS::SharedPtr<MTL::Texture>::operator=(&v104, &v95);
  v10 = v100;
  v11 = (unint64_t)v101;
  v100 = 0;
  v101 = &str_110;
  v12 = v107.n128_u8[0];
  v13 = v107.n128_u64[1];
  v107.n128_u64[0] = v10;
  v107.n128_u64[1] = v11;
  v98 = v10 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
  v99 = v13;
  re::StringID::destroyString((re::StringID *)&v98);
  v108 = v102;
  v109 = v103;
  NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
  v111 = v105;
  v112 = v106;
  if (v104)
  {

    v104 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v100);
  if (v95)
  {

    v95 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v96);
  re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
  v96 = 0;
  v97 = &str_110;
  v15 = (*a2)[4];
  v94 = (*a2)[3];
  v16 = v94;
  v100 = 0;
  v101 = &str_110;
  v104 = 0;
  LODWORD(v105) = 0;
  LODWORD(v106) = 0;
  re::StringID::operator=(&v100, &v96);
  v102 = 1;
  v103 = (char)v15;
  NS::SharedPtr<MTL::Texture>::operator=(&v104, &v94);
  v17 = v100;
  v18 = (unint64_t)v101;
  v100 = 0;
  v101 = &str_110;
  v19 = v107.n128_u8[0];
  v20 = v107.n128_u64[1];
  v107.n128_u64[0] = v17;
  v107.n128_u64[1] = v18;
  v98 = v17 & 0xFFFFFFFFFFFFFFFELL | v19 & 1;
  v99 = v20;
  re::StringID::destroyString((re::StringID *)&v98);
  v108 = v102;
  v109 = v103;
  NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
  v111 = v105;
  v112 = v106;
  if (v104)
  {

    v104 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v100);
  if (v94)
  {

    v94 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v96);
  re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
  v22 = *a2;
  if (*((_BYTE *)*a2 + 72))
  {
    v96 = 0;
    v97 = &str_110;
    v23 = (*a2)[7];
    v93 = (*a2)[6];
    v24 = v93;
    v100 = 0;
    v101 = &str_110;
    v104 = 0;
    LODWORD(v105) = 0;
    LODWORD(v106) = 0;
    re::StringID::operator=(&v100, &v96);
    v102 = 1;
    v103 = (char)v23;
    NS::SharedPtr<MTL::Texture>::operator=(&v104, &v93);
    v25 = v100;
    v26 = (unint64_t)v101;
    v100 = 0;
    v101 = &str_110;
    v27 = v107.n128_u8[0];
    v28 = v107.n128_u64[1];
    v107.n128_u64[0] = v25;
    v107.n128_u64[1] = v26;
    v98 = v25 & 0xFFFFFFFFFFFFFFFELL | v27 & 1;
    v99 = v28;
    re::StringID::destroyString((re::StringID *)&v98);
    v108 = v102;
    v109 = v103;
    NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
    v111 = v105;
    v112 = v106;
    if (v104)
    {

      v104 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v100);
    if (v93)
    {

      v93 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v96);
    re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
    v22 = *a2;
  }
  if (*((_BYTE *)v22 + 136))
  {
    v96 = 0;
    v97 = &str_110;
    v29 = (*a2)[15];
    v92 = (*a2)[14];
    v30 = v92;
    v100 = 0;
    v101 = &str_110;
    v104 = 0;
    LODWORD(v105) = 0;
    LODWORD(v106) = 0;
    re::StringID::operator=(&v100, &v96);
    v102 = 1;
    v103 = (char)v29;
    NS::SharedPtr<MTL::Texture>::operator=(&v104, &v92);
    v31 = v100;
    v32 = (unint64_t)v101;
    v100 = 0;
    v101 = &str_110;
    v33 = v107.n128_u8[0];
    v34 = v107.n128_u64[1];
    v107.n128_u64[0] = v31;
    v107.n128_u64[1] = v32;
    v98 = v31 & 0xFFFFFFFFFFFFFFFELL | v33 & 1;
    v99 = v34;
    re::StringID::destroyString((re::StringID *)&v98);
    v108 = v102;
    v109 = v103;
    NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
    v111 = v105;
    v112 = v106;
    if (v104)
    {

      v104 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v100);
    if (v92)
    {

      v92 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v96);
    re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
    v22 = *a2;
  }
  if (*((_BYTE *)v22 + 104))
  {
    v96 = 0;
    v97 = &str_110;
    v35 = (*a2)[11];
    v91 = (*a2)[10];
    v36 = v91;
    v100 = 0;
    v101 = &str_110;
    v104 = 0;
    LODWORD(v105) = 0;
    LODWORD(v106) = 0;
    re::StringID::operator=(&v100, &v96);
    v102 = 1;
    v103 = (char)v35;
    NS::SharedPtr<MTL::Texture>::operator=(&v104, &v91);
    v37 = v100;
    v38 = (unint64_t)v101;
    v100 = 0;
    v101 = &str_110;
    v39 = v107.n128_u8[0];
    v40 = v107.n128_u64[1];
    v107.n128_u64[0] = v37;
    v107.n128_u64[1] = v38;
    v98 = v37 & 0xFFFFFFFFFFFFFFFELL | v39 & 1;
    v99 = v40;
    re::StringID::destroyString((re::StringID *)&v98);
    v108 = v102;
    v109 = v103;
    NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
    v111 = v105;
    v112 = v106;
    if (v104)
    {

      v104 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v100);
    if (v91)
    {

      v91 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v96);
    re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
    v22 = *a2;
  }
  if (*((_BYTE *)v22 + 168))
  {
    v96 = 0;
    v97 = &str_110;
    v41 = (*a2)[19];
    v90 = (*a2)[18];
    v42 = v90;
    v100 = 0;
    v101 = &str_110;
    v104 = 0;
    LODWORD(v105) = 0;
    LODWORD(v106) = 0;
    re::StringID::operator=(&v100, &v96);
    v102 = 1;
    v103 = (char)v41;
    NS::SharedPtr<MTL::Texture>::operator=(&v104, &v90);
    v43 = v100;
    v44 = (unint64_t)v101;
    v100 = 0;
    v101 = &str_110;
    v45 = v107.n128_u8[0];
    v46 = v107.n128_u64[1];
    v107.n128_u64[0] = v43;
    v107.n128_u64[1] = v44;
    v98 = v43 & 0xFFFFFFFFFFFFFFFELL | v45 & 1;
    v99 = v46;
    re::StringID::destroyString((re::StringID *)&v98);
    v108 = v102;
    v109 = v103;
    NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
    v111 = v105;
    v112 = v106;
    if (v104)
    {

      v104 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v100);
    if (v90)
    {

      v90 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v96);
    re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
    v22 = *a2;
  }
  if (*((_BYTE *)v22 + 200))
  {
    v96 = 0;
    v97 = &str_110;
    v47 = (*a2)[23];
    v89 = (*a2)[22];
    v48 = v89;
    v100 = 0;
    v101 = &str_110;
    v104 = 0;
    LODWORD(v105) = 0;
    LODWORD(v106) = 0;
    re::StringID::operator=(&v100, &v96);
    v102 = 1;
    v103 = (char)v47;
    NS::SharedPtr<MTL::Texture>::operator=(&v104, &v89);
    v49 = v100;
    v50 = (unint64_t)v101;
    v100 = 0;
    v101 = &str_110;
    v51 = v107.n128_u8[0];
    v52 = v107.n128_u64[1];
    v107.n128_u64[0] = v49;
    v107.n128_u64[1] = v50;
    v98 = v49 & 0xFFFFFFFFFFFFFFFELL | v51 & 1;
    v99 = v52;
    re::StringID::destroyString((re::StringID *)&v98);
    v108 = v102;
    v109 = v103;
    NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
    v111 = v105;
    v112 = v106;
    if (v104)
    {

      v104 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v100);
    if (v89)
    {

      v89 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v96);
    re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
  }
  v96 = 0;
  v97 = &str_110;
  *(_OWORD *)v88 = a4[2];
  re::PrimitiveMeshAttribute::uniformCustomAttribute<re::Vector3<float>>(&v96, v88, (uint64_t)&v100);
  v53 = v100;
  v54 = (unint64_t)v101;
  v100 = 0;
  v101 = &str_110;
  v55 = v107.n128_u8[0];
  v56 = v107.n128_u64[1];
  v107.n128_u64[0] = v53;
  v107.n128_u64[1] = v54;
  v98 = v53 & 0xFFFFFFFFFFFFFFFELL | v55 & 1;
  v99 = v56;
  re::StringID::destroyString((re::StringID *)&v98);
  v108 = v102;
  v109 = v103;
  NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
  v111 = v105;
  v112 = v106;
  if (v104)
  {

    v104 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v100);
  re::StringID::destroyString((re::StringID *)&v96);
  re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
  v96 = 0;
  v97 = &str_110;
  *(_OWORD *)v88 = a4[1];
  re::PrimitiveMeshAttribute::uniformCustomAttribute<re::Vector4<float>>(&v96, v88, (uint64_t)&v100);
  v58 = v100;
  v59 = (unint64_t)v101;
  v100 = 0;
  v101 = &str_110;
  v60 = v107.n128_u8[0];
  v61 = v107.n128_u64[1];
  v107.n128_u64[0] = v58;
  v107.n128_u64[1] = v59;
  v98 = v58 & 0xFFFFFFFFFFFFFFFELL | v60 & 1;
  v99 = v61;
  re::StringID::destroyString((re::StringID *)&v98);
  v108 = v102;
  v109 = v103;
  NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
  v111 = v105;
  v112 = v106;
  if (v104)
  {

    v104 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v100);
  re::StringID::destroyString((re::StringID *)&v96);
  re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
  v96 = 0;
  v97 = &str_110;
  *(_OWORD *)v88 = *a4;
  re::PrimitiveMeshAttribute::uniformCustomAttribute<re::Vector3<float>>(&v96, v88, (uint64_t)&v100);
  v63 = v100;
  v64 = (unint64_t)v101;
  v100 = 0;
  v101 = &str_110;
  v65 = v107.n128_u8[0];
  v66 = v107.n128_u64[1];
  v107.n128_u64[0] = v63;
  v107.n128_u64[1] = v64;
  v98 = v63 & 0xFFFFFFFFFFFFFFFELL | v65 & 1;
  v99 = v66;
  re::StringID::destroyString((re::StringID *)&v98);
  v108 = v102;
  v109 = v103;
  NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
  v111 = v105;
  v112 = v106;
  if (v104)
  {

    v104 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v100);
  re::StringID::destroyString((re::StringID *)&v96);
  re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
  v68 = *(_DWORD *)(a1 + 96);
  if (v68 == 6 || *(_DWORD *)(a1 + 100) == 6)
  {
    v88[0] = 1.0 / (float)((float)((float)(*(_DWORD *)(a1 + 120) - *((_DWORD *)*a2 + 53)) / 50.0) + 1.0);
    v96 = 0;
    v97 = &str_110;
    re::PrimitiveMeshAttribute::uniformCustomAttribute<float>(&v96, (int *)v88, (uint64_t)&v100);
    v69 = v100;
    v70 = (unint64_t)v101;
    v100 = 0;
    v101 = &str_110;
    v71 = v107.n128_u8[0];
    v72 = v107.n128_u64[1];
    v107.n128_u64[0] = v69;
    v107.n128_u64[1] = v70;
    v98 = v69 & 0xFFFFFFFFFFFFFFFELL | v71 & 1;
    v99 = v72;
    re::StringID::destroyString((re::StringID *)&v98);
    v108 = v102;
    v109 = v103;
    NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
    v111 = v105;
    v112 = v106;
    if (v104)
    {

      v104 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v100);
    re::StringID::destroyString((re::StringID *)&v96);
    re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
    v68 = *(_DWORD *)(a1 + 96);
  }
  if (v68 == 7)
  {
    v96 = 0;
    v97 = &str_110;
    *(_OWORD *)v88 = *(_OWORD *)(a1 + 128);
    re::PrimitiveMeshAttribute::uniformCustomAttribute<re::Vector4<float>>(&v96, v88, (uint64_t)&v100);
    v73 = v100;
    v74 = (unint64_t)v101;
    v100 = 0;
    v101 = &str_110;
    v75 = v107.n128_u8[0];
    v76 = v107.n128_u64[1];
    v107.n128_u64[0] = v73;
    v107.n128_u64[1] = v74;
    v98 = v73 & 0xFFFFFFFFFFFFFFFELL | v75 & 1;
    v99 = v76;
    re::StringID::destroyString((re::StringID *)&v98);
    v108 = v102;
    v109 = v103;
    NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
    v111 = v105;
    v112 = v106;
    if (v104)
    {

      v104 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v100);
    re::StringID::destroyString((re::StringID *)&v96);
    re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
  }
  if (*(_DWORD *)(a1 + 100) == 7)
  {
    v96 = 0;
    v97 = &str_110;
    *(_OWORD *)v88 = *(_OWORD *)(a1 + 144);
    re::PrimitiveMeshAttribute::uniformCustomAttribute<re::Vector4<float>>(&v96, v88, (uint64_t)&v100);
    v77 = v100;
    v78 = (unint64_t)v101;
    v100 = 0;
    v101 = &str_110;
    v79 = v107.n128_u8[0];
    v80 = v107.n128_u64[1];
    v107.n128_u64[0] = v77;
    v107.n128_u64[1] = v78;
    v98 = v77 & 0xFFFFFFFFFFFFFFFELL | v79 & 1;
    v99 = v80;
    re::StringID::destroyString((re::StringID *)&v98);
    v108 = v102;
    v109 = v103;
    NS::SharedPtr<MTL::Texture>::operator=(&v110, &v104);
    v111 = v105;
    v112 = v106;
    if (v104)
    {

      v104 = 0;
    }
    re::StringID::destroyString((re::StringID *)&v100);
    re::StringID::destroyString((re::StringID *)&v96);
    re::DynamicArray<re::PrimitiveMeshAttribute>::add((_anonymous_namespace_ *)a3, &v107);
  }
  v81 = *a2;
  *(_QWORD *)(a3 + 80) = (*a2)[2];
  *(_QWORD *)(a3 + 88) = v81[5];
  __asm
  {
    FMOV            V0.4S, #-25.0
    FMOV            V1.4S, #25.0
  }
  *(_OWORD *)(a3 + 48) = _Q0;
  *(_OWORD *)(a3 + 64) = _Q1;
  if (v110)
  {

    v110 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v107);
}

__n128 re::DynamicArray<re::PrimitiveMeshAttribute>::add(_anonymous_namespace_ *this, __n128 *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 result;
  __n128 v8;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::PrimitiveMeshAttribute>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + (v4 << 6);
  v6 = a2->n128_u64[0];
  *(_QWORD *)v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL | a2->n128_u64[0] & 1;
  *(_QWORD *)v5 = a2->n128_u64[0] & 0xFFFFFFFFFFFFFFFELL | v6 & 1;
  *(_QWORD *)(v5 + 8) = a2->n128_u64[1];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = (unint64_t)&str_110;
  LOWORD(v6) = a2[1].n128_u16[0];
  *(_BYTE *)(v5 + 18) = a2[1].n128_u8[2];
  *(_WORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 24) = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = 0;
  result = a2[2];
  v8 = a2[3];
  *(__n128 *)(v5 + 32) = result;
  *(__n128 *)(v5 + 48) = v8;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::audio::MeshVisualizer::drawDebugVisMesh(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unsigned int v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  id *v27[2];
  _QWORD v28[3];
  int v29;
  uint64_t v30;
  int32x4_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;

  if ((*(_DWORD *)(a1 + 96) || *(_DWORD *)(a1 + 100))
    && re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::containsKey(a1, a2))
  {
    if (*(_QWORD *)a1)
    {
      v8 = *(_QWORD *)(a2 + 8);
      if (v8)
        v9 = *(_QWORD *)(v8 + 664);
      else
        v9 = 0;
      v11 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v8 ^ (v8 >> 30))) >> 27));
      v12 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v9 ^ (v11 >> 31) ^ v11) % *(unsigned int *)(a1 + 24)));
      v10 = 0x7FFFFFFFLL;
      if ((_DWORD)v12 != 0x7FFFFFFF)
      {
        v13 = *(_QWORD *)(a1 + 16);
        v10 = 0x7FFFFFFFLL;
        while (*(_QWORD *)(v13 + 56 * v12 + 24) != v8)
        {
          v12 = *(_DWORD *)(v13 + 56 * v12 + 8) & 0x7FFFFFFF;
          if (v12 == 0x7FFFFFFF)
            goto LABEL_15;
        }
        v10 = v12;
      }
    }
    else
    {
      v10 = 0x7FFFFFFFLL;
    }
LABEL_15:
    v14 = *(_QWORD *)(a1 + 16) + 56 * v10;
    v16 = *(_QWORD *)(v14 + 40);
    v15 = *(std::__shared_weak_count **)(v14 + 48);
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    if (*(_BYTE *)(v16 + 208))
    {
      if (*(_QWORD *)(v16 + 16) && *(_QWORD *)(v16 + 40) != 0)
      {
        if (((v20 & 1) == 0 || *(_BYTE *)(v16 + 72))
          && ((v20 & 2) == 0 || *(_BYTE *)(v16 + 104))
          && ((v20 & 4) == 0 || *(_BYTE *)(v16 + 136))
          && ((v20 & 8) == 0 || *(_BYTE *)(v16 + 168))
          && (v20 < 0x10 || *(_BYTE *)(v16 + 200)))
        {
          v30 = 0;
          v27[1] = (id *)&v15->__vftable;
          memset(v28, 0, sizeof(v28));
          v29 = 0;
          *(_QWORD *)&v21 = 0x7F0000007FLL;
          *((_QWORD *)&v21 + 1) = 0x7F0000007FLL;
          v31 = vdupq_n_s32(0x7F800000u);
          v32 = v21;
          v33 = 0;
          v34 = 0;
          v27[0] = (id *)v16;
          if (v15)
          {
            v22 = (unint64_t *)&v15->__shared_owners_;
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
            re::audio::MeshVisualizer::addMeshAttributes(a1, v27, (uint64_t)v28, a3);
            do
              v24 = __ldaxr(v22);
            while (__stlxr(v24 - 1, v22));
            if (!v24)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          else
          {
            re::audio::MeshVisualizer::addMeshAttributes(a1, v27, (uint64_t)v28, a3);
          }
          re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::add((_anonymous_namespace_ *)(a4 + 1056), (uint64_t)v28);
          re::DynamicArray<re::PrimitiveMeshAttribute>::deinit((uint64_t)v28);
        }
      }
    }
    if (v15)
    {
      v25 = (unint64_t *)&v15->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
}

__n128 re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 result;
  __int128 v10;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 96 * v4;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = 0;
  *(_DWORD *)(v5 + 24) = 0;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)v5 = *(_QWORD *)a2;
  *(_QWORD *)(v5 + 8) = v6;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v7 = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v7;
  v8 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = v8;
  ++*(_DWORD *)(a2 + 24);
  ++*(_DWORD *)(v5 + 24);
  result = *(__n128 *)(a2 + 48);
  v10 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v5 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v5 + 80) = v10;
  *(__n128 *)(v5 + 48) = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::internal::GeomBaseTopology::faceVertices(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(a1 + 24) <= (unint64_t)a2)
  {
LABEL_10:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v4 = *(_QWORD *)(a1 + 40) + 16 * a2;
  if (*(_DWORD *)(v4 + 12) == -1)
    v5 = 3;
  else
    v5 = 4;
  re::DynamicArray<float>::resize(a3, v5);
  v6 = 0;
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(a3 + 32);
  do
  {
    if (v7 == v6)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_10;
    }
    *(_DWORD *)(v8 + 4 * v6) = *(_DWORD *)(v4 + 4 * v6);
    ++v6;
  }
  while (v5 != v6);
  return v5;
}

BOOL std::__unordered_map_equal<re::audio::`anonymous namespace'::DebugVertexForHashing,std::__hash_value_type<re::audio::`anonymous namespace'::DebugVertexForHashing,unsigned int>,re::audio::`anonymous namespace'::DebugVertexForHashing::Equality,re::audio::`anonymous namespace'::DebugVertexForHashing::Hash,true>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  int v2;

  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 != *(unsigned __int8 *)(a2 + 16) || (v2 & 2) != 0 && *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
    return 0;
  if ((v2 & 8) != 0 && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8))
    return 0;
  if ((v2 & 0x10) != 0)
    return *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12);
  return 1;
}

_BYTE *re::audio::`anonymous namespace'::meshHasMaterials(re::audio::_anonymous_namespace_ *this, const re::GeomMesh *a2)
{
  _BYTE *result;

  result = (_BYTE *)re::internal::GeomAttributeManager::attributeByName((re::audio::_anonymous_namespace_ *)((char *)this + 64), (const char *)re::AcousticMeshAsset::kMaterialAttributeName);
  if (result)
  {
    if (result[16] == 2)
      return (_BYTE *)((*(unsigned int (**)(_BYTE *))(*(_QWORD *)result + 16))(result) == *((_DWORD *)this + 10));
    else
      return 0;
  }
  return result;
}

uint64_t re::internal::GeomTypedAttribute<int>::operator[](uint64_t a1, unsigned int a2)
{
  if (*(_QWORD *)(a1 + 40) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 56) + 4 * a2;
}

uint64_t re::internal::GeomTypedAttribute<re::Vector3<float>>::operator[](uint64_t a1, unsigned int a2)
{
  if (*(_QWORD *)(a1 + 40) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 56) + 16 * a2;
}

{
  if (*(_QWORD *)(a1 + 40) <= (unint64_t)a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 56) + 16 * a2;
}

void std::__shared_ptr_emplace<re::audio::DebugVisMesh>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED67EF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<re::audio::DebugVisMesh>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24ED67EF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2276933B8);
}

void std::__shared_ptr_emplace<re::audio::DebugVisMesh>::__on_zero_shared(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 224))

  if (*(_BYTE *)(a1 + 192))
  if (*(_BYTE *)(a1 + 160))

  if (*(_BYTE *)(a1 + 128))
  if (*(_BYTE *)(a1 + 96))

}

__n128 re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, const re::AssetHandle *a4, __n128 *a5)
{
  uint64_t v10;
  int v11;
  int v12;
  signed int v13;
  uint64_t v14;
  BOOL v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  signed int v26;
  __n128 result;
  _BYTE v28[44];

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      v12 = *(_DWORD *)(a1 + 28);
      v13 = 2 * v12;
      v14 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v13)
          v15 = (_DWORD)v10 == v13;
        else
          v15 = 1;
        if (!v15 && (v12 & 0x80000000) == 0)
        {
          memset(v28, 0, 36);
          *(_QWORD *)&v28[36] = 0x7FFFFFFFLL;
          re::HashTable<re::Pair<re::StringSlice,re::StringSlice,true>,unsigned long,re::Hash<re::Pair<re::StringSlice,re::StringSlice,true>>,re::EqualTo<re::Pair<re::StringSlice,re::StringSlice,true>>,true,false>::init((uint64_t)v28, v14, v13);
          v16 = *(_OWORD *)v28;
          *(_OWORD *)v28 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v16;
          v17 = *(_QWORD *)&v28[16];
          v18 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v28[16] = v18;
          *(_QWORD *)(a1 + 16) = v17;
          v20 = *(_OWORD *)&v28[24];
          *(_OWORD *)&v28[24] = *(_OWORD *)(a1 + 24);
          v19 = *(_DWORD *)&v28[32];
          *(_OWORD *)(a1 + 24) = v20;
          v21 = v19;
          if (v19)
          {
            v22 = 0;
            v23 = v18 + 40;
            do
            {
              if ((*(_DWORD *)(v23 - 32) & 0x80000000) != 0)
                re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::addAsMove(a1, *(_QWORD *)(v23 - 40) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v23 - 40), v23 - 24, v23);
              ++v22;
              v23 += 56;
            }
            while (v22 < v21);
          }
          re::HashTable<re::AssetHandle,std::shared_ptr<re::audio::DebugVisMesh>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::deinit((uint64_t *)v28);
        }
      }
      else
      {
        if (v13)
          v26 = 2 * v12;
        else
          v26 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(_DWORD *)(v24 + 56 * v10 + 8);
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(_DWORD *)(v24 + 56 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v25 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v24 + 56 * v10 + 8) = v25 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 56 * v10) = a3;
  re::AssetHandle::AssetHandle((re::AssetHandle *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 16), a4);
  result = *a5;
  *(__n128 *)(*(_QWORD *)(a1 + 16) + 56 * v10 + 40) = *a5;
  a5->n128_u64[0] = 0;
  a5->n128_u64[1] = 0;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

_QWORD *re::DynamicArray<re::PrimitiveMeshAttribute>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::PrimitiveMeshAttribute>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::PrimitiveMeshAttribute>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::PrimitiveMeshAttribute>::setCapacity(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  __int128 v13;
  void *v14;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::PrimitiveMeshAttribute>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (a2 >> 58)
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 64, a2);
          _os_crash();
          __break(1u);
        }
        else
        {
          v2 = a2 << 6;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, a2 << 6, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_18;
            goto LABEL_11;
          }
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_18:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = (uint64_t *)v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v9 << 6;
        v11 = v7;
        do
        {
          v12 = *v8;
          *v11 = *v11 & 0xFFFFFFFFFFFFFFFELL | *v8 & 1;
          *v11 = *v8 & 0xFFFFFFFFFFFFFFFELL | v12 & 1;
          v11[1] = v8[1];
          *v8 = 0;
          v8[1] = (uint64_t)&str_110;
          LOWORD(v12) = *((_WORD *)v8 + 8);
          *((_BYTE *)v11 + 18) = *((_BYTE *)v8 + 18);
          *((_WORD *)v11 + 8) = v12;
          v11[3] = v8[3];
          v8[3] = 0;
          v13 = *((_OWORD *)v8 + 3);
          *((_OWORD *)v11 + 2) = *((_OWORD *)v8 + 2);
          *((_OWORD *)v11 + 3) = v13;
          v14 = (void *)v8[3];
          if (v14)
          {

            v8[3] = 0;
          }
          re::StringID::destroyString((re::StringID *)v8);
          v8 += 8;
          v11 += 8;
          v10 -= 64;
        }
        while (v10);
        v8 = (uint64_t *)v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_18;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::PrimitiveRenderingContext::PrimitiveMesh>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x60uLL))
        {
          v2 = 96 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 96 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 96, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = v8 + 96 * v9;
        v11 = v7 + 3;
        do
        {
          v11[1] = 0;
          *(v11 - 2) = 0;
          *(v11 - 1) = 0;
          *(v11 - 3) = 0;
          *(_DWORD *)v11 = 0;
          v12 = *(_QWORD *)(v8 + 8);
          *(v11 - 3) = *(_QWORD *)v8;
          *(v11 - 2) = v12;
          *(_QWORD *)v8 = 0;
          *(_QWORD *)(v8 + 8) = 0;
          v13 = *(v11 - 1);
          *(v11 - 1) = *(_QWORD *)(v8 + 16);
          *(_QWORD *)(v8 + 16) = v13;
          v14 = v11[1];
          v11[1] = *(_QWORD *)(v8 + 32);
          *(_QWORD *)(v8 + 32) = v14;
          ++*(_DWORD *)(v8 + 24);
          ++*(_DWORD *)v11;
          v15 = *(_OWORD *)(v8 + 48);
          v16 = *(_OWORD *)(v8 + 64);
          *(_OWORD *)(v11 + 7) = *(_OWORD *)(v8 + 80);
          *(_OWORD *)(v11 + 5) = v16;
          *(_OWORD *)(v11 + 3) = v15;
          re::DynamicArray<re::PrimitiveMeshAttribute>::deinit(v8);
          v11 += 12;
          v8 += 96;
        }
        while (v8 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_ConstraintListComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_265);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_265))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410FF60, 0);
    *(uint64_t *)((char *)&qword_25410FF70 + 6) = 0;
    qword_25410FF70 = 0;
    qword_25410FF80 = 0;
    qword_25410FF88 = 0xFFFFFFFFLL;
    qword_25410FF60 = (uint64_t)&off_24ED7DAA8;
    qword_25410FF90 = (uint64_t)"ConstraintListComponent";
    dword_25410FF98 = 0;
    unk_25410FFA0 = 0u;
    unk_25410FFB0 = 0u;
    unk_25410FFC0 = 0u;
    qword_25410FFD0 = 0;
    __cxa_guard_release(&_MergedGlobals_265);
  }
  return &qword_25410FF60;
}

void re::ecs2::initInfo_ConstraintListComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x4DF95D33529CFE04;
  v10[1] = "ConstraintListComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_25410FF58);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_25410FF58);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_25410FF50 = v8;
      __cxa_guard_release(&qword_25410FF58);
    }
  }
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_25410FF50;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ConstraintListComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ConstraintListComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ConstraintListComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ConstraintListComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

double re::internal::defaultConstruct<re::ecs2::ConstraintListComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED580B8;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_DWORD *)(v3 + 96) = 0;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::ConstraintListComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit((uint64_t)(a3 + 9));
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit((uint64_t)(a3 + 4));
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::ConstraintListComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED580B8;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_DWORD *)(v1 + 96) = 0;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::ConstraintListComponent>(_QWORD *a1)
{
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit((uint64_t)(a1 + 9));
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit((uint64_t)(a1 + 4));
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ConstraintListComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ConstraintListComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ConstraintListComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ConstraintListComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ConstraintListComponent>, this);
}

uint64_t *re::ecs2::allocInfo_LightService(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_266);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_266))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_25410FFE0, 0);
    *(uint64_t *)((char *)&qword_25410FFF0 + 6) = 0;
    qword_25410FFF0 = 0;
    qword_254110000 = 0;
    qword_254110008 = 0xFFFFFFFFLL;
    qword_25410FFE0 = (uint64_t)&off_24ED7DAA8;
    qword_254110010 = (uint64_t)"LightService";
    dword_254110018 = 0;
    unk_254110020 = 0u;
    unk_254110030 = 0u;
    unk_254110040 = 0u;
    qword_254110050 = 0;
    __cxa_guard_release(&_MergedGlobals_266);
  }
  return &qword_25410FFE0;
}

void re::ecs2::initInfo_LightService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x381065EB96D171BELL;
  v5[1] = "LightService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_LightService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::ecs2::introspect_LightService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"LightService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_LightService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_LightService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::LightService>, this);
}

uint64_t *re::ecs2::allocInfo_ClientAnchorSyncComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_267);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_267))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254110088, 0);
    *(uint64_t *)((char *)&qword_254110098 + 6) = 0;
    qword_254110098 = 0;
    qword_2541100A8 = 0;
    qword_2541100B0 = 0xFFFFFFFFLL;
    qword_254110088 = (uint64_t)&off_24ED7DAA8;
    qword_2541100B8 = (uint64_t)"ClientAnchorSyncComponent";
    dword_2541100C0 = 0;
    xmmword_2541100C8 = 0u;
    unk_2541100D8 = 0u;
    xmmword_2541100E8 = 0u;
    qword_2541100F8 = 0;
    __cxa_guard_release(&_MergedGlobals_267);
  }
  return &qword_254110088;
}

void re::ecs2::initInfo_ClientAnchorSyncComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _QWORD v21[2];
  __int128 v22;

  v21[0] = 0x876CF2DECCC0DC04;
  v21[1] = "ClientAnchorSyncComponent";
  re::StringID::destroyString((re::StringID *)v21);
  *((_OWORD *)this + 2) = v22;
  v4 = atomic_load((unsigned __int8 *)&qword_254110060);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254110060);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254110068 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "isAnchored";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1900000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254110070 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_BOOL((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "isExternal";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x1A00000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254110078 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v18 = re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "anchorTransform";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x2000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254110080 = v19;
      __cxa_guard_release(&qword_254110060);
    }
  }
  *((_QWORD *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254110068;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ClientAnchorSyncComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ClientAnchorSyncComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ClientAnchorSyncComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ClientAnchorSyncComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v20 = v22;
}

double re::internal::defaultConstruct<re::ecs2::ClientAnchorSyncComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED58138;
  *(_WORD *)(v3 + 25) = 0;
  *(_OWORD *)(v3 + 32) = xmmword_2260E5F10;
  *(_OWORD *)(v3 + 48) = xmmword_2260E5F20;
  result = 0.0;
  *(_OWORD *)(v3 + 64) = xmmword_2260E5F40;
  *(_OWORD *)(v3 + 80) = xmmword_2260E5D70;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::ClientAnchorSyncComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::ClientAnchorSyncComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED58138;
  *(_WORD *)(v1 + 25) = 0;
  *(_OWORD *)(v1 + 32) = xmmword_2260E5F10;
  *(_OWORD *)(v1 + 48) = xmmword_2260E5F20;
  result = 0.0;
  *(_OWORD *)(v1 + 64) = xmmword_2260E5F40;
  *(_OWORD *)(v1 + 80) = xmmword_2260E5D70;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::ClientAnchorSyncComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ClientAnchorSyncComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ClientAnchorSyncComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ClientAnchorSyncComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ClientAnchorSyncComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ClientAnchorSyncComponent>, this);
}

uint64_t *re::ecs2::allocInfo_SelectableSceneContentIdentifierComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254110108);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254110108))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254110120, 0);
    *(uint64_t *)((char *)&qword_254110130 + 6) = 0;
    qword_254110130 = 0;
    qword_254110140 = 0;
    qword_254110148 = 0xFFFFFFFFLL;
    qword_254110120 = (uint64_t)&off_24ED7DAA8;
    qword_254110150 = (uint64_t)"SelectableSceneContentIdentifierComponent";
    dword_254110158 = 0;
    unk_254110160 = 0u;
    unk_254110170 = 0u;
    unk_254110180 = 0u;
    qword_254110190 = 0;
    __cxa_guard_release(&qword_254110108);
  }
  return &qword_254110120;
}

void re::ecs2::initInfo_SelectableSceneContentIdentifierComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x7D285A8B2F4746E2;
  v14[1] = "SelectableSceneContentIdentifierComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_268);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&_MergedGlobals_268);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254110110 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_uint32_t((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "m_displayListItemIdentifier";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1C00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254110118 = v12;
      __cxa_guard_release(&_MergedGlobals_268);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254110110;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SelectableSceneContentIdentifierComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SelectableSceneContentIdentifierComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SelectableSceneContentIdentifierComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SelectableSceneContentIdentifierComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::ecs2::SelectableSceneContentIdentifierComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED581B8;
}

void *re::internal::defaultDestruct<re::ecs2::SelectableSceneContentIdentifierComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::SelectableSceneContentIdentifierComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED581B8;
}

void *re::internal::defaultDestructV2<re::ecs2::SelectableSceneContentIdentifierComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_SelectableSceneContentIdentifierComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SelectableSceneContentIdentifierComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SelectableSceneContentIdentifierComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SelectableSceneContentIdentifierComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SelectableSceneContentIdentifierComponent>, this);
}

uint64_t *re::ecs2::allocInfo_RenderOptionsComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_269);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_269))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541101C0, 0);
    *(uint64_t *)((char *)&qword_2541101D0 + 6) = 0;
    qword_2541101D0 = 0;
    qword_2541101E0 = 0;
    qword_2541101E8 = 0xFFFFFFFFLL;
    qword_2541101C0 = (uint64_t)&off_24ED7DAA8;
    qword_2541101F0 = (uint64_t)"RenderOptionsComponent";
    dword_2541101F8 = 0;
    unk_254110200 = 0u;
    unk_254110210 = 0u;
    unk_254110220 = 0u;
    qword_254110230 = 0;
    __cxa_guard_release(&_MergedGlobals_269);
  }
  return &qword_2541101C0;
}

void re::ecs2::initInfo_RenderOptionsComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v17[2];
  __int128 v18;

  v17[0] = 0x2852AFBB60071BAALL;
  v17[1] = "RenderOptionsComponent";
  re::StringID::destroyString((re::StringID *)v17);
  *((_OWORD *)this + 2) = v18;
  v4 = atomic_load((unsigned __int8 *)&qword_2541101A0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541101A0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541101A8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = introspect_REVisibilityMode(1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "mode";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1900000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_2541101B0 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v14 = re::introspect_HierarchicalMeshOverrideFlags((re::IntrospectionBase **)1);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "overrideFlags";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x1A00000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_2541101B8 = v15;
      __cxa_guard_release(&qword_2541101A0);
    }
  }
  *((_QWORD *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_2541101A8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::RenderOptionsComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::RenderOptionsComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RenderOptionsComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RenderOptionsComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v16 = v18;
}

void re::internal::defaultConstruct<re::ecs2::RenderOptionsComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::make::shared::unsafelyInplace<re::ecs2::RenderOptionsComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::RenderOptionsComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::RenderOptionsComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_RenderOptionsComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RenderOptionsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RenderOptionsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RenderOptionsComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RenderOptionsComponent>, this);
}

BOOL re::ecs2::RenderOptionsComponent::calculateVisibilityAgainstHierarchy(re::ecs2::RenderOptionsComponent *this, const re::ecs2::Entity *a2, uint64_t a3, uint64_t a4, BOOL *a5)
{
  BOOL *v6;
  uint64_t v7;
  char v8;
  char v9;
  BOOL v11;

  v11 = 1;
  if (re::ecs2::RenderOptionsComponent::mixVisibility(this, (const re::ecs2::Entity *)1, &v11, 0, a5))
  {
    v7 = *((_QWORD *)this + 3);
    if (v7)
    {
      if ((*(_BYTE *)(v7 + 288) & 0x80) == 0)
      {
        do
        {
          v8 = re::ecs2::RenderOptionsComponent::mixVisibility((re::ecs2::RenderOptionsComponent *)v7, (const re::ecs2::Entity *)1, 0, &v11, v6);
          v7 = *(_QWORD *)(v7 + 24);
          if (!v7)
            break;
          v9 = (*(_BYTE *)(v7 + 288) & 0x80) != 0 ? 0 : v8;
        }
        while ((v9 & 1) != 0);
      }
    }
  }
  return v11;
}

uint64_t re::ecs2::RenderOptionsComponent::mixVisibility(re::ecs2::RenderOptionsComponent *this, const re::ecs2::Entity *a2, _BYTE *a3, BOOL *a4, BOOL *a5)
{
  char *v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  char v15;
  uint64_t v16;
  int v17;

  v8 = (char *)*((_QWORD *)this + 27);
  if (v8)
  {
    if (v8[36] && !v8[37])
    {
      if (v8[48])
      {
        if (a4)
        {
          v15 = 0;
          result = 0;
          *a4 = 0;
          goto LABEL_36;
        }
        goto LABEL_25;
      }
      v9 = 1;
    }
    else
    {
      v9 = 0;
    }
    v10 = v8[25];
    if (v10 == 2)
    {
      v16 = *((_QWORD *)this + 25);
      if (v16 && *(_QWORD *)(v16 + 32))
      {
        LODWORD(a2) = RESyncableIsAuthoritative() ^ 1;
        goto LABEL_22;
      }
    }
    else if (v10 != 1)
    {
      if (v10)
      {
        LOBYTE(a2) = 0;
        v12 = 0;
        if ((v9 & 1) != 0)
          goto LABEL_25;
LABEL_27:
        v17 = *((_DWORD *)this + 72) & 0x41;
        if (v17)
          v15 = (char)a2;
        else
          v15 = 0;
        if ((*((_DWORD *)this + 72) & 0x41) != 0)
          result = v12;
        else
          result = 0;
        if (a4 && v17)
        {
          v15 = *a4;
          result = v12;
        }
        goto LABEL_36;
      }
      v11 = 1;
      v12 = 1;
      if (!a4)
      {
LABEL_24:
        if ((v9 & 1) != 0)
        {
LABEL_25:
          v15 = 0;
          result = 0;
          goto LABEL_36;
        }
        goto LABEL_27;
      }
LABEL_23:
      *a4 = (char)a2;
      v12 = v11;
      LOBYTE(a2) = 0;
      goto LABEL_24;
    }
    LOBYTE(a2) = 0;
LABEL_22:
    v11 = 0;
    v12 = 0;
    if (!a4)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (a4)
    *a4 = (char)a2;
  v13 = *((_BYTE *)this + 288);
  result = (v13 & 0x41) != 0;
  if ((v13 & 0x41) != 0)
    v15 = (char)a2;
  else
    v15 = 0;
LABEL_36:
  if (a3)
    *a3 = v15;
  return result;
}

uint64_t re::ecs2::RenderOptionsComponent::mixMeshFlags(uint64_t result, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned __int8 v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  _BYTE *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  _BYTE *v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  __int16 v41;
  __int16 v42;
  int v43;
  int v44;
  unsigned __int8 v45;
  __int16 v46;
  unsigned __int8 v47;

  v13 = *(_QWORD *)(result + 216);
  if (v13)
  {
    v14 = *(unsigned __int8 *)(v13 + 26);
    if (*(_BYTE *)(v13 + 26))
      v12 = *(_BYTE *)(v13 + 27);
    v23 = *(unsigned __int8 *)(v13 + 28);
    if (*(_BYTE *)(v13 + 28))
      v11 = *(_BYTE *)(v13 + 29);
    v22 = *(unsigned __int8 *)(v13 + 30);
    if (*(_BYTE *)(v13 + 30))
      v8 = *(_BYTE *)(v13 + 31);
    v21 = *(_BYTE *)(v13 + 32);
    v46 = *(_WORD *)(v13 + 33);
    v15 = *(unsigned __int8 *)(v13 + 35);
    v47 = *(_BYTE *)(v13 + 35);
    v20 = *(unsigned __int8 *)(v13 + 36);
    if (*(_BYTE *)(v13 + 36))
      a8 = *(_BYTE *)(v13 + 37);
    v19 = *(unsigned __int8 *)(v13 + 38);
    if (*(_BYTE *)(v13 + 38))
      a5 = *(_BYTE *)(v13 + 39);
    v18 = *(unsigned __int8 *)(v13 + 40);
    if (*(_BYTE *)(v13 + 40))
      v10 = *(_BYTE *)(v13 + 41);
    v17 = *(unsigned __int8 *)(v13 + 42);
    if (*(_BYTE *)(v13 + 42))
      v9 = *(_BYTE *)(v13 + 43);
    v16 = *(unsigned __int8 *)(v13 + 44);
    if (*(_BYTE *)(v13 + 44))
      v15 = *(_WORD *)(v13 + 46);
    v44 = *(_DWORD *)(v13 + 48);
    v45 = *(_BYTE *)(v13 + 52);
  }
  else
  {
    v15 = 0;
    v16 = 0;
    v9 = 0;
    v17 = 0;
    v10 = 0;
    v18 = 0;
    a5 = 0;
    v19 = 0;
    a8 = 0;
    v20 = 0;
    v21 = 0;
    v8 = 0;
    v22 = 0;
    v11 = 0;
    v23 = 0;
    v12 = 0;
    v14 = 0;
    v47 = 0;
    v46 = 0;
    v44 = 0;
    v45 = 0;
  }
  v24 = *a4;
  if (v24 | v14)
  {
    if (v14 || !*a4)
    {
      if (v14 && !*a4)
      {
        v24 = 1;
        *a4 = 1;
      }
      a4[1] = v12;
    }
    else
    {
      v24 = 0;
      *a4 = 0;
    }
  }
  v25 = a4[2];
  if (v25 | v23)
  {
    if (v23 || !a4[2])
    {
      if (v23 && !a4[2])
      {
        v25 = 1;
        a4[2] = 1;
      }
      a4[3] = v11;
    }
    else
    {
      v25 = 0;
      a4[2] = 0;
    }
  }
  v26 = a4[4];
  if (v26 | v22)
  {
    if (v22 || !a4[4])
    {
      if (v22 && !a4[4])
      {
        v26 = 1;
        a4[4] = 1;
      }
      a4[5] = v8;
    }
    else
    {
      v26 = 0;
      a4[4] = 0;
    }
  }
  *(_WORD *)(a4 + 7) = v46;
  v27 = a4 + 7;
  a4[6] = v21;
  a4[9] = v47;
  v28 = a4[10];
  if (v28 | v20)
  {
    if (v20 || !a4[10])
    {
      if (v20 && !a4[10])
      {
        v28 = 1;
        a4[10] = 1;
      }
      a4[11] = a8;
    }
    else
    {
      v28 = 0;
      a4[10] = 0;
    }
  }
  v29 = a4[12];
  if (v29 | v19)
  {
    if (v19 || !a4[12])
    {
      if (v19 && !a4[12])
      {
        v29 = 1;
        a4[12] = 1;
      }
      a4[13] = a5;
    }
    else
    {
      v29 = 0;
      a4[12] = 0;
    }
  }
  v30 = a4[14];
  if (v30 | v18)
  {
    if (v18 || !a4[14])
    {
      if (v18 && !a4[14])
      {
        v30 = 1;
        a4[14] = 1;
      }
      a4[15] = v10;
    }
    else
    {
      v30 = 0;
      a4[14] = 0;
    }
  }
  v31 = a4[16];
  if (v31 | v17)
  {
    if (v17 || !a4[16])
    {
      if (v17 && !a4[16])
      {
        v31 = 1;
        a4[16] = 1;
      }
      a4[17] = v9;
    }
    else
    {
      v31 = 0;
      a4[16] = 0;
    }
  }
  v32 = a4[18];
  if (v32 | v16)
  {
    if (v16 || !a4[18])
    {
      if (v16 && !a4[18])
      {
        v32 = 1;
        a4[18] = 1;
      }
      *((_WORD *)a4 + 10) = v15;
    }
    else
    {
      v32 = 0;
      a4[18] = 0;
    }
  }
  *(_DWORD *)(a4 + 22) = v44;
  v33 = a4 + 22;
  a4[26] = v45;
  if (*(_BYTE *)(a2 + 8))
  {
    if (*(_BYTE *)(a2 + 6))
    {
      a4[8] = 1;
      a4[6] = 1;
      if (v25)
        a4[2] = 0;
    }
    else if (*(_BYTE *)(a2 + 2))
    {
      a4[8] = 1;
      a4[6] = 0;
      v34 = *(_BYTE *)(a2 + 3);
      if (!v25)
        a4[2] = 1;
      a4[3] = v34;
    }
  }
  if (*(_BYTE *)a2 && *(_BYTE *)(a2 + 7))
  {
    *v27 = 1;
    v35 = *(_BYTE *)(a2 + 1);
    if (!v24)
      *a4 = 1;
    a4[1] = v35;
    v24 = 1;
  }
  if (*(_BYTE *)(a2 + 4) && *(_BYTE *)(a2 + 9))
  {
    a4[9] = 1;
    v36 = *(_BYTE *)(a2 + 5);
    if (!v26)
      a4[4] = 1;
    a4[5] = v36;
  }
  if (*(_BYTE *)(a2 + 10) && *(_BYTE *)(a2 + 22))
  {
    *v33 = 1;
    v37 = *(_BYTE *)(a2 + 11);
    if (!v28)
      a4[10] = 1;
    a4[11] = v37;
  }
  if (*(_BYTE *)(a2 + 12) && *(_BYTE *)(a2 + 23))
  {
    a4[23] = 1;
    v38 = *(_BYTE *)(a2 + 13);
    if (!v29)
      a4[12] = 1;
    a4[13] = v38;
  }
  if (*(_BYTE *)(a2 + 14) && *(_BYTE *)(a2 + 24))
  {
    a4[24] = 1;
    v39 = *(_BYTE *)(a2 + 15);
    if (!v30)
      a4[14] = 1;
    a4[15] = v39;
  }
  if (*(_BYTE *)(a2 + 16) && *(_BYTE *)(a2 + 25))
  {
    a4[25] = 1;
    v40 = *(_BYTE *)(a2 + 17);
    if (!v31)
      a4[16] = 1;
    a4[17] = v40;
  }
  if (*(_BYTE *)(a2 + 18) && *(_BYTE *)(a2 + 26))
  {
    a4[26] = 1;
    v41 = *(_WORD *)(a2 + 20);
    if (!v32)
      a4[18] = 1;
    *((_WORD *)a4 + 10) = v41;
  }
  if ((*(_BYTE *)(result + 288) & 0x41) != 0)
  {
    if (*a3 | v24)
    {
      if (!*a3 || v24)
      {
        if (!*a3 && v24)
          *a3 = 1;
        a3[1] = a4[1];
      }
      else
      {
        *a3 = 0;
      }
    }
    if (a3[2] || a4[2])
    {
      if (!a3[2] || a4[2])
      {
        if (!a3[2] && a4[2])
          a3[2] = 1;
        a3[3] = a4[3];
      }
      else
      {
        a3[2] = 0;
      }
    }
    if (a3[4] || a4[4])
    {
      if (!a3[4] || a4[4])
      {
        if (!a3[4] && a4[4])
          a3[4] = 1;
        a3[5] = a4[5];
      }
      else
      {
        a3[4] = 0;
      }
    }
    a3[6] = a4[6];
    v42 = *(_WORD *)v27;
    a3[9] = a4[9];
    *(_WORD *)(a3 + 7) = v42;
    if (a3[10] || a4[10])
    {
      if (!a3[10] || a4[10])
      {
        if (!a3[10] && a4[10])
          a3[10] = 1;
        a3[11] = a4[11];
      }
      else
      {
        a3[10] = 0;
      }
    }
    if (a3[12] || a4[12])
    {
      if (!a3[12] || a4[12])
      {
        if (!a3[12] && a4[12])
          a3[12] = 1;
        a3[13] = a4[13];
      }
      else
      {
        a3[12] = 0;
      }
    }
    if (a3[14] || a4[14])
    {
      if (!a3[14] || a4[14])
      {
        if (!a3[14] && a4[14])
          a3[14] = 1;
        a3[15] = a4[15];
      }
      else
      {
        a3[14] = 0;
      }
    }
    if (a3[16] || a4[16])
    {
      if (!a3[16] || a4[16])
      {
        if (!a3[16] && a4[16])
          a3[16] = 1;
        a3[17] = a4[17];
      }
      else
      {
        a3[16] = 0;
      }
    }
    if (a3[18] || a4[18])
    {
      if (!a3[18] || a4[18])
      {
        if (!a3[18])
        {
          if (a4[18])
            a3[18] = 1;
        }
        *((_WORD *)a3 + 10) = *((_WORD *)a4 + 10);
      }
      else
      {
        a3[18] = 0;
      }
    }
    v43 = *(_DWORD *)v33;
    a3[26] = a4[26];
    *(_DWORD *)(a3 + 22) = v43;
  }
  else
  {
    if (*a3)
      *a3 = 0;
    if (a3[2])
      a3[2] = 0;
    if (a3[4])
      a3[4] = 0;
    *(_DWORD *)(a3 + 6) = 0;
    if (!a3[10])
      a3[10] = 1;
    a3[11] = 0;
    if (a3[12])
      a3[12] = 0;
    if (a3[14])
      a3[14] = 0;
    if (a3[16])
      a3[16] = 0;
    if (a3[18])
      a3[18] = 0;
    a3[26] = 0;
    *(_DWORD *)(a3 + 22) = 0;
  }
  return result;
}

void re::make::shared::unsafelyInplace<re::ecs2::RenderOptionsComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED58238;
  *(_WORD *)(v1 + 25) = 0;
  *(_BYTE *)(v1 + 28) = 0;
  *(_BYTE *)(v1 + 30) = 0;
  *(_BYTE *)(v1 + 38) = 0;
  *(_BYTE *)(v1 + 40) = 0;
  *(_BYTE *)(v1 + 42) = 0;
  *(_BYTE *)(v1 + 44) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 36) = 0;
  *(_DWORD *)(v1 + 48) = 0;
  *(_BYTE *)(v1 + 52) = 0;
}

uint64_t re::ecs2::DynamicBoundingBoxComponent::setMeshPartEstimatedBoundingBox(_anonymous_namespace_ *a1, uint64_t a2, unsigned int a3, _OWORD *a4)
{
  _OWORD *v8;
  __int128 v9;

  re::ecs2::DynamicBoundingBoxComponent::ensureMeshPartCount(a1, a3 + 1);
  if (*((_QWORD *)a1 + 27) <= (unint64_t)a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_5:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v8 = (_OWORD *)(*((_QWORD *)a1 + 29) + 32 * a3);
  v9 = a4[1];
  *v8 = *a4;
  v8[1] = v9;
  if (*((_QWORD *)a1 + 32) <= (unint64_t)a3)
    goto LABEL_5;
  *(_QWORD *)(*((_QWORD *)a1 + 34) + 8 * a3) = a2;
  return re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)a1 + 280, a3);
}

_anonymous_namespace_ *re::ecs2::DynamicBoundingBoxComponent::ensureMeshPartCount(_anonymous_namespace_ *this, unint64_t a2)
{
  unint64_t v2;
  _anonymous_namespace_ *v4;
  uint64_t v5;
  int32x4_t *v6;
  uint64_t v7;
  unint64_t v8;
  int32x4_t v9;
  int32x4_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v2 = *((_QWORD *)this + 27);
  if (v2 >= a2)
    return this;
  v4 = this;
  if (*((_QWORD *)this + 26) < a2)
  {
    re::DynamicArray<re::AABB>::setCapacity((_QWORD *)this + 25, a2);
    v2 = *((_QWORD *)v4 + 27);
  }
  if (v2 < a2)
  {
    v5 = *((_QWORD *)v4 + 29);
    v6 = (int32x4_t *)(v5 + 32 * v2);
    v7 = v5 + 32 * a2 - (_QWORD)v6;
    if (v7 >= 1)
    {
      v8 = ((unint64_t)v7 >> 5) + 1;
      v9 = vdupq_n_s32(0x7F800000u);
      v10.i64[0] = 0x7F0000007FLL;
      v10.i64[1] = 0x7F0000007FLL;
      do
      {
        *v6 = v9;
        v6[1] = v10;
        v6 += 2;
        --v8;
      }
      while (v8 > 1);
    }
  }
  *((_QWORD *)v4 + 27) = a2;
  ++*((_DWORD *)v4 + 56);
  v11 = *((_QWORD *)v4 + 32);
  if (v11 >= a2)
  {
    if (v11 <= a2)
      goto LABEL_16;
  }
  else
  {
    if (*((_QWORD *)v4 + 31) < a2)
    {
      re::DynamicArray<float *>::setCapacity((_QWORD *)v4 + 30, a2);
      v11 = *((_QWORD *)v4 + 32);
    }
    if (v11 < a2)
    {
      v12 = (void *)(*((_QWORD *)v4 + 34) + 8 * v11);
      v13 = 8 * a2 - 8 * v11;
      if (v13 >= 1)
        memset_pattern16(v12, &unk_22610D490, 8 * (((unint64_t)v13 >> 3) - ((unint64_t)v13 > 7)) + 8);
    }
  }
  *((_QWORD *)v4 + 32) = a2;
  ++*((_DWORD *)v4 + 66);
LABEL_16:
  v14 = *((_QWORD *)v4 + 41);
  if ((a2 & 0x3F) != 0)
    v15 = (a2 >> 6) + 1;
  else
    v15 = a2 >> 6;
  *((_QWORD *)v4 + 41) = a2;
  v21 = 0;
  this = re::DynamicOverflowArray<unsigned long long,3ul>::resize((_anonymous_namespace_ *)((char *)v4 + 280), v15, &v21);
  if (v14 > a2)
  {
    v16 = 63;
    v17 = *((_QWORD *)v4 + 41) & 0x3FLL;
    if (v17)
    {
      v18 = v17 == 63;
      v19 = -1 << v17;
      if (!v18)
        v16 = ~v19;
    }
    if ((*((_BYTE *)v4 + 296) & 1) != 0)
      v20 = (char *)v4 + 304;
    else
      v20 = (char *)*((_QWORD *)v4 + 39);
    *(_QWORD *)&v20[8 * *((_QWORD *)v4 + 36) - 8] &= v16;
  }
  return this;
}

void re::ecs2::DynamicBoundingBoxComponent::resetDynamicBoundingBoxData(re::ecs2::DynamicBoundingBoxComponent *this)
{
  id *v1;
  re *inited;
  id location;
  _QWORD v4[3];
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = (id *)((char *)this + 88);
  inited = (re *)objc_initWeak(&location, 0);
  memset(v4, 0, sizeof(v4));
  v5 = re::globalAllocators(inited)[2];
  v6 = 0;
  re::FramePersistentPtr<re::ecs2::DynamicBoundingBoxComponent::DynamicBoundingBoxData,re::FrameManager>::reset(v1, &location, 0, (uint64_t)v4);
  if (v6)
  {
    (*(void (**)(_QWORD *))*v6)(v6);
    if (v6 != v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
  }
  objc_destroyWeak(&location);
}

void re::ecs2::DynamicBoundingBoxComponentStateImpl::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v8 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
  if (v8)
  {
    if (re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType == a4
      || re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType == a4)
    {
      *(_QWORD *)(v8 + 216) = 0;
      ++*(_DWORD *)(v8 + 224);
      v10 = *(_DWORD *)(v8 + 296);
      if ((v10 & 1) != 0)
        v11 = (_QWORD *)(v8 + 304);
      else
        v11 = *(_QWORD **)(v8 + 312);
      v12 = *(_QWORD *)(v8 + 288);
      while (1)
      {
        v13 = v8 + 304;
        if ((v10 & 1) == 0)
          v13 = *(_QWORD *)(v8 + 312);
        if (v11 == (_QWORD *)(v13 + 8 * v12))
          break;
        *v11++ = 0;
        v10 = *(_DWORD *)(v8 + 296);
      }
    }
  }
  re::ecs2::BasicComponentStateImpl<re::ecs2::MeshDeformationComponent>::didDependentComponentChange(a1, a2, a3);
}

BOOL re::ecs2::DynamicBoundingBoxComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  re::ecs2::DynamicBoundingBoxComponent *v17;
  re::ecs2::DynamicBoundingBoxComponent *v18;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD v26[2];
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v27, a5, 0);
  v8 = v27;
  v9 = v28;
  v27 = a4;
  v28 = v8;
  v29 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v28);
      v15 = *(_QWORD *)v14;
      v16 = *(_QWORD *)(*(_QWORD *)v14 + 16);
      v17 = (re::ecs2::DynamicBoundingBoxComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v16 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
      v18 = v17;
      if (v17)
        re::ecs2::DynamicBoundingBoxComponent::resetDynamicBoundingBoxData(v17);
      v19 = *(_QWORD *)(v16 + 176);
      if (*(_QWORD *)(v15 + 240))
        v20 = *(_QWORD *)(v15 + 392) == 0;
      else
        v20 = 1;
      v21 = v20 || v19 == 0;
      v22 = (unint64_t *)(a3 + 32);
      if (!v21)
      {
        v22 = (unint64_t *)(a3 + 32);
        if (*(_QWORD *)(v19 + 40))
        {
          if (v18
            || (v26[0] = v15 + 232,
                v26[1] = 4,
                v22 = (unint64_t *)(a3 + 32),
                !re::MeshDeformationRuntimeData::MeshDeformationIteration::isEmpty((re::MeshDeformationRuntimeData::MeshDeformationIteration *)v26)))
          {
            v22 = (unint64_t *)(a3 + 40);
          }
        }
      }
      v23 = v27;
      v24 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v28);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v23, v24, *v22);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v28);
    }
    while (v28 != a5 || (unsigned __int16)v29 != 0xFFFF || WORD1(v29) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::DynamicBoundingBoxComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id *v18;
  re *inited;
  uint64_t v20;
  unint64_t *v21;
  const __int16 *v22;
  int16x8_t *v23;
  int16x8_t v24;
  int v25;
  uint16x8_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  re::MeshNameMap *v34;
  uint64_t v35;
  void *v36;
  re *v37;
  uint64_t *v38;
  unsigned int *v39;
  __int128 v40;
  unint64_t v41;
  unsigned int *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  unint64_t v54;
  unint64_t v55;
  unsigned int v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  re::MeshNameMap *v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v73;
  id v74;
  _QWORD *v75;
  uint64_t v76;
  id location;
  unint64_t v78;
  __int128 v79;
  _QWORD *v80;
  uint64_t v81;
  unsigned __int16 v82;
  _QWORD v83[2];
  uint64_t v84;
  int v85;
  const char *v86;
  __int16 v87;
  int v88;
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  unsigned int *v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  v73 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v93, a5, 0);
  v78 = a4;
  v79 = v93;
  if ((_QWORD)v93 != a5 || WORD4(v93) != 0xFFFFLL || (DWORD2(v93) & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v9 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v79);
      v10 = *(_QWORD **)v9;
      v11 = *(_QWORD *)(*(_QWORD *)v9 + 16);
      v12 = *(_QWORD *)(v11 + 176);
      v13 = re::AssetHandle::loadedAsset<re::MeshAsset>((re::MeshAsset *)(v12 + 32));
      if (!v13)
      {
        v27 = *(_QWORD *)(v12 + 40);
        if (v27 && (v28 = atomic_load((unsigned int *)(v27 + 704)), v28 == 3))
        {
          v29 = v78;
          v30 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v79);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v29, v30, *(_QWORD *)(a3 + 32));
        }
        else
        {
          re::AssetHandle::loadAsync((re::AssetHandle *)(v12 + 32));
        }
        goto LABEL_49;
      }
      v14 = v13;
      v15 = v10[31];
      v16 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v11 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
      if (v16)
      {
        v17 = *(_QWORD **)(v16 + 40);
        if (v17)
        {
          if (v15 != *v17)
          {
            v18 = (id *)(v16 + 32);
            inited = (re *)objc_initWeak(&location, 0);
            *(_QWORD *)&v95 = 0;
            v93 = 0u;
            v94 = 0u;
            *((_QWORD *)&v94 + 1) = re::globalAllocators(inited)[2];
            *(_QWORD *)&v95 = 0;
            re::FramePersistentPtr<re::ecs2::DynamicBoundingBoxComponent::BoundingBoxBufferInputs,re::FrameManager>::reset(v18, &location, 0, (uint64_t)&v93);
            if ((_QWORD)v95)
            {
              (**(void (***)(_QWORD))v95)(v95);
              if ((__int128 *)v95 != &v93)
                (*(void (**)(_QWORD))(**((_QWORD **)&v94 + 1) + 40))(*((_QWORD *)&v94 + 1));
            }
            objc_destroyWeak(&location);
            location = 0;
          }
        }
      }
      v75 = v10 + 29;
      v76 = 4;
      if (re::MeshDeformationRuntimeData::MeshDeformationIteration::isEmpty((re::MeshDeformationRuntimeData::MeshDeformationIteration *)&v75))
      {
        v20 = *(unsigned __int16 *)(v11 + 82);
        v21 = (unint64_t *)(a3 + 32);
        if (!*(_WORD *)(v11 + 82))
          goto LABEL_48;
        v22 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType
                              + 16);
        v23 = *(int16x8_t **)(v11 + 88);
        v24 = vld1q_dup_s16(v22);
        v25 = 1;
        while (1)
        {
          v26 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v24, *v23), (int8x16_t)xmmword_2260F1E80);
          v26.i16[0] = vmaxvq_u16(v26);
          if (v26.i32[0])
            break;
          v25 -= 8;
          ++v23;
          if (!--v20)
          {
            v21 = (unint64_t *)(a3 + 32);
            goto LABEL_48;
          }
        }
        v21 = (unint64_t *)(a3 + 32);
        if (v26.u16[0] - v25 >= *(unsigned __int16 *)(v11 + 80))
          goto LABEL_48;
      }
      else
      {
        v31 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v11 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
        if (!*(_QWORD *)(v31 + 40))
        {
          v32 = v31;
          v33 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v11 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          if (v33)
            v34 = (re::MeshNameMap *)(v33 + 216);
          else
            v34 = (re::MeshNameMap *)(v14 + 448);
          v35 = *(_QWORD *)(v73 + 136);
          if (v35)
            v36 = (void *)(v35 + 8);
          else
            v36 = 0;
          v37 = (re *)objc_initWeak(&v74, v36);
          v38 = re::globalAllocators(v37);
          v39 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38[2] + 32))(v38[2], 56, 8);
          *(_QWORD *)v39 = v10[31];
          v40 = 0uLL;
          *(_OWORD *)(v39 + 10) = 0u;
          *(_OWORD *)(v39 + 6) = 0u;
          *(_OWORD *)(v39 + 2) = 0u;
          v83[0] = v10 + 29;
          v83[1] = 4;
          v41 = v10[46];
          if (v41 <= 4)
            goto LABEL_83;
          v42 = v39;
          v41 = *(_QWORD *)(v10[47] + 440);
          if (!v41)
            goto LABEL_68;
          *((_QWORD *)v42 + 2) = v41;
          if (v41 >> 61)
          {
LABEL_84:
            re::internal::assertLog((re::internal *)6, v43, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 8, v41);
            _os_crash();
            __break(1u);
          }
          else
          {
            *((_QWORD *)v42 + 3) = v44;
            if (v44)
            {
              v46 = v44;
              if (v41 != 1)
              {
                bzero(v44, 8 * v41 - 8);
                v46 += v41 - 1;
              }
              *v46 = 0;
              v47 = *((_QWORD *)v34 + 42);
              if (v47)
              {
                v48 = *(unsigned int *)(*((_QWORD *)v34 + 43) + 4 * v47 - 4);
                *((_QWORD *)v42 + 5) = v48;
                if ((_DWORD)v48)
                {
                  *((_QWORD *)v42 + 6) = v49;
                  if (v49)
                  {
                    v51 = v49;
                    v52 = v48 - 1;
                    if (v52)
                    {
                      v53 = 0uLL;
                      do
                      {
                        *(_QWORD *)(v51 + 64) = 0;
                        *(_OWORD *)(v51 + 32) = v53;
                        *(_OWORD *)(v51 + 48) = v53;
                        *(_OWORD *)v51 = v53;
                        *(_OWORD *)(v51 + 16) = v53;
                        memset_pattern16((void *)(v51 + 8), &unk_22610D490, 0x40uLL);
                        v53 = 0uLL;
                        *(_OWORD *)(v51 + 120) = 0u;
                        *(_OWORD *)(v51 + 104) = 0u;
                        *(_OWORD *)(v51 + 88) = 0u;
                        *(_OWORD *)(v51 + 72) = 0u;
                        v51 += 136;
                        --v52;
                      }
                      while (v52);
                    }
                    *(_QWORD *)v51 = 0;
                    memset_pattern16((void *)(v51 + 8), &unk_22610D490, 0x40uLL);
                    *(_OWORD *)(v51 + 120) = 0u;
                    *(_OWORD *)(v51 + 104) = 0u;
                    *(_OWORD *)(v51 + 88) = 0u;
                    *(_OWORD *)(v51 + 72) = 0u;
                    goto LABEL_55;
                  }
LABEL_86:
                  re::internal::assertLog((re::internal *)4, v50, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
                  _os_crash();
                  __break(1u);
                }
              }
              else
              {
                *((_QWORD *)v42 + 5) = 0;
              }
LABEL_55:
              v56 = 0;
              v80 = v10 + 29;
              v81 = 4;
              v82 = 0;
              while (1)
              {
                v39 = re::MeshDeformationRuntimeData::MeshDeformationIteration::end((unsigned int *)v83, (uint64_t)&v93);
                if (HIDWORD(v81) == HIDWORD(v93) && v82 == (unsigned __int16)v94)
                  break;
                v57 = re::MeshDeformationRuntimeData::MeshDeformationIterator::originalMeshInstanceAndPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)&v80);
                v58 = re::MeshNameMap::meshPartStartIndexForInstance(v34, v57) + WORD2(v57);
                v59 = *((_QWORD *)v42 + 5);
                if (v59 <= v58)
                  goto LABEL_80;
                v60 = v34;
                v61 = *((_QWORD *)v42 + 6);
                v62 = *(id *)(v73 + 184);
                v63 = 0;
                v34 = (re::MeshNameMap *)(v61 + 136 * v58 + 72);
                do
                {
                  if (objc_msgSend(*(id *)((char *)v34 + v63), sel_length) != (id)32)
                  {
                    *(_QWORD *)&v93 = objc_msgSend(v62, sel_newBufferWithLength_options_, 32, 0);
                    NS::SharedPtr<MTL::Texture>::operator=((void **)((char *)v34 + v63), (void **)&v93);
                    if ((_QWORD)v93)

                  }
                  v63 += 8;
                }
                while (v63 != 64);

                v59 = *((_QWORD *)v42 + 5);
                if (v59 <= v58)
                  goto LABEL_81;
                v59 = v56;
                v34 = (re::MeshNameMap *)*((_QWORD *)v42 + 2);
                if ((unint64_t)v34 <= v56)
                  goto LABEL_82;
                *(_QWORD *)(*((_QWORD *)v42 + 3) + 8 * v56) = *((_QWORD *)v42 + 6) + 136 * v58;
                re::MeshDeformationRuntimeData::MeshDeformationIterator::operator++((uint64_t)&v80);
                ++v56;
                v34 = v60;
              }
              v40 = 0uLL;
LABEL_68:
              *(_QWORD *)&v95 = 0;
              v93 = v40;
              v94 = v40;
              *((_QWORD *)&v94 + 1) = re::globalAllocators((re *)v39)[2];
              *(_QWORD *)&v95 = 0;
              re::FramePersistentPtr<re::ecs2::DynamicBoundingBoxComponent::BoundingBoxBufferInputs,re::FrameManager>::reset((id *)(v32 + 32), &v74, v42, (uint64_t)&v93);
              if ((_QWORD)v95)
              {
                (**(void (***)(_QWORD))v95)(v95);
                if ((__int128 *)v95 != &v93)
                  (*(void (**)(_QWORD))(**((_QWORD **)&v94 + 1) + 40))(*((_QWORD *)&v94 + 1));
              }
              objc_destroyWeak(&v74);
              v58 = 0;
              v64 = 0;
              v74 = 0;
              v65 = v10[49];
              v59 = *(_QWORD *)(v65 + 88);
              v34 = *(re::MeshNameMap **)(v65 + 96);
              v80 = v75;
              v81 = v76;
              v82 = 0;
              while (1)
              {
                re::MeshDeformationRuntimeData::MeshDeformationIteration::end((unsigned int *)&v75, (uint64_t)&v93);
                if (HIDWORD(v81) == HIDWORD(v93) && v82 == (unsigned __int16)v94)
                  goto LABEL_47;
                v66 = re::MeshDeformationRuntimeData::MeshDeformationIterator::absoluteDeformedMeshPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)&v80);
                if (v59 <= v66)
                  break;
                v68 = *(_QWORD *)(v32 + 40);
                v42 = *(unsigned int **)(v68 + 16);
                if ((unint64_t)v42 <= v64)
                  goto LABEL_79;
                v69 = *(_QWORD *)(v68 + 24) + v58;
                v70 = (_QWORD *)((char *)v34 + 168 * v66);
                ++*((_BYTE *)v70 + 4);
                v70[7] = v69;
                re::MeshDeformationRuntimeData::MeshDeformationIterator::operator++((uint64_t)&v80);
                ++v64;
                v58 += 8;
              }
              re::internal::assertLog((re::internal *)6, v67, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v66, v59);
              _os_crash();
              __break(1u);
LABEL_79:
              v83[0] = 0;
              v96 = 0u;
              v97 = 0u;
              v94 = 0u;
              v95 = 0u;
              v93 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v85 = 136315906;
              v86 = "operator[]";
              v87 = 1024;
              v88 = 468;
              v89 = 2048;
              v90 = v64;
              v91 = 2048;
              v92 = v42;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_80:
              v84 = 0;
              v96 = 0u;
              v97 = 0u;
              v94 = 0u;
              v95 = 0u;
              v93 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v85 = 136315906;
              v86 = "operator[]";
              v87 = 1024;
              v88 = 468;
              v89 = 2048;
              v90 = v58;
              v91 = 2048;
              v92 = (unsigned int *)v59;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_81:
              v84 = 0;
              v96 = 0u;
              v97 = 0u;
              v94 = 0u;
              v95 = 0u;
              v93 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v85 = 136315906;
              v86 = "operator[]";
              v87 = 1024;
              v88 = 468;
              v89 = 2048;
              v90 = v58;
              v91 = 2048;
              v92 = (unsigned int *)v59;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_82:
              v84 = 0;
              v41 = (unint64_t)&v85;
              v96 = 0u;
              v97 = 0u;
              v94 = 0u;
              v95 = 0u;
              v93 = 0u;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v85 = 136315906;
              v86 = "operator[]";
              v87 = 1024;
              v88 = 468;
              v89 = 2048;
              v90 = v59;
              v91 = 2048;
              v92 = (unsigned int *)v34;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_83:
              v80 = 0;
              v96 = v40;
              v97 = v40;
              v94 = v40;
              v95 = v40;
              v93 = v40;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              v85 = 136315906;
              v86 = "operator[]";
              v87 = 1024;
              v88 = 476;
              v89 = 2048;
              v90 = 4;
              v91 = 2048;
              v92 = (unsigned int *)v41;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_84;
            }
          }
          re::internal::assertLog((re::internal *)4, v45, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
          _os_crash();
          __break(1u);
          goto LABEL_86;
        }
      }
LABEL_47:
      v21 = (unint64_t *)(a3 + 48);
LABEL_48:
      v54 = v78;
      v55 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v79);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v54, v55, *v21);
LABEL_49:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v79);
    }
    while ((_QWORD)v79 != a5 || WORD4(v79) != 0xFFFF || WORD5(v79) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::DynamicBoundingBoxComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::EntityComponentCollection *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _anonymous_namespace_ *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t started;
  unint64_t v36;
  _OWORD *v38;
  _OWORD *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t *v42;
  int32x2_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  re *inited;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _anonymous_namespace_ *v56;
  _anonymous_namespace_ *v57;
  _anonymous_namespace_ *v58;
  unint64_t v59;
  _anonymous_namespace_ *v60;
  uint64_t v61;
  void *v62;
  re *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _anonymous_namespace_ *FirstBitSet;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  float32x4_t *v72;
  uint64_t v73;
  unint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  re *v79;
  unint64_t v80;
  unint64_t v81;
  unsigned int v82;
  float32x4_t v83;
  uint64_t v84;
  float32x4_t *v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  float32x4_t *v93;
  float32x4_t *v94;
  float32x4_t v95;
  float32x4_t v96;
  uint64_t v97;
  float32x4_t *v98;
  float32x4_t *v99;
  float32x4_t v100;
  float32x4_t v101;
  unint64_t v102;
  _anonymous_namespace_ *v103;
  uint64_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t *v107;
  uint64_t v108;
  uint64_t v109;
  float32x4_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  float32x4_t *v114;
  unint64_t v115;
  float32x4_t *v116;
  uint64_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  uint64_t v122;
  float32x4_t *v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t *v128;
  uint64_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v142;
  char v144;
  uint64_t v145;
  _QWORD *v146;
  float32x4_t *v147;
  _QWORD *v148;
  _QWORD *v149;
  int32x4_t v150;
  uint64_t v151;
  float32x4_t v152;
  uint64_t v153;
  float32x4_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  int32x2_t v159;
  float32x4_t v160;
  float32x4_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  id v168;
  id location;
  _QWORD v170[2];
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  _BYTE v174[20];
  _BYTE v175[20];
  unint64_t v176;
  _BYTE v177[18];
  __int16 v178;
  unint64_t v179;
  __int16 v180;
  unint64_t v181;
  float32x4_t v182;
  float32x4_t v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;

  v5 = a5;
  v187 = *MEMORY[0x24BDAC8D0];
  v156 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 112);
  v7 = *(_QWORD *)(*(_QWORD *)(v156 + 136) + 32);
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v182, a5, 0);
  v164 = a4;
  v165 = v182;
  if (v182.i64[0] != v5 || v182.u16[4] != 0xFFFFLL || (v182.i32[2] & 0xFFFF0000) != 4294901760)
  {
    v10 = v7 & 0xFFFFFFFFFFFFFFFLL;
    v145 = v7 & 0xFFFFFFFFFFFFFFFLL;
    v150 = vdupq_n_s32(0x7F800000u);
    v142 = v5;
    do
    {
      v11 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v165);
      v12 = *(_QWORD *)v11;
      v13 = *(_QWORD *)(*(_QWORD *)v11 + 16);
      v14 = (re::ecs2::EntityComponentCollection *)(v13 + 32);
      v15 = *(_QWORD *)(v13 + 176);
      v16 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(v15 + 32));
      v17 = *(_QWORD **)(v16 + 392);
      v18 = *(_QWORD *)(v16 + 376);
      v19 = re::ecs2::EntityComponentCollection::get(v14, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v19)
      {
        v20 = v19 + 216;
        v148 = *(_QWORD **)(v19 + 208);
        v153 = *(_QWORD *)(v19 + 192);
      }
      else
      {
        v153 = v18;
        v148 = v17;
        v20 = v16 + 448;
      }
      v21 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::getOrAdd(v14, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
      v22 = (uint64_t)v21;
      v162 = v12 + 232;
      v163 = 4;
      v23 = *((_QWORD *)v21 + 5);
      if (v23)
      {
        v24 = *(_QWORD *)(v20 + 336);
        if (v24)
          v25 = *(unsigned int *)(*(_QWORD *)(v20 + 344) + 4 * v24 - 4);
        else
          v25 = 0;
        re::ecs2::DynamicBoundingBoxComponent::ensureMeshPartCount(v21, v25);
        v27 = 0;
        *(_QWORD *)v177 = v162;
        *(_QWORD *)&v177[8] = v163;
        *(_WORD *)&v177[16] = 0;
        while (1)
        {
          re::MeshDeformationRuntimeData::MeshDeformationIteration::end((unsigned int *)&v162, (uint64_t)&v182);
          if (*(_DWORD *)&v177[12] == v182.i32[3] && *(unsigned __int16 *)&v177[16] == v183.u16[0])
            break;
          v28 = re::MeshDeformationRuntimeData::MeshDeformationIterator::originalMeshInstanceAndPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)v177);
          v29 = re::MeshNameMap::meshPartStartIndexForInstance((re::MeshNameMap *)v20, v28) + WORD2(v28);
          if (*(_QWORD *)(v23 + 40) <= v29)
            break;
          v30 = *(_QWORD *)(v23 + 48);
          v31 = *(_QWORD *)(v30 + 136 * v29);
          v32 = 8;
          if (v31 > 8)
            v32 = *(_QWORD *)(v30 + 136 * v29);
          v33 = v32 - 8;
          do
          {
            if (v31 <= v33)
              goto LABEL_34;
            v34 = --v31 & 7;
          }
          while ((*(_QWORD *)(v30 + 136 * v29 + 8 * v34 + 8) & 0xFFFFFFFFFFFFFFFuLL) > v10);
          started = *(_QWORD *)(v22 + 256);
          if (started <= v29)
            goto LABEL_141;
          v36 = *(_QWORD *)(*(_QWORD *)(v22 + 272) + 8 * v29) & 0xFFFFFFFFFFFFFFFLL;
          if (v36 == 0xFFFFFFFFFFFFFFFLL || v10 >= v36)
          {
            v38 = objc_msgSend(*(id *)(v30 + 136 * v29 + 8 * v34 + 72), sel_contents);
            started = *(_QWORD *)(v22 + 216);
            if (started <= v29)
              goto LABEL_142;
            v39 = (_OWORD *)(*(_QWORD *)(v22 + 232) + 32 * v29);
            v40 = v38[1];
            *v39 = *v38;
            v39[1] = v40;
            re::DynamicBitset<unsigned long long,256ul>::setBit(v22 + 280, v29);
          }
          else
          {
            v27 = 1;
          }
LABEL_34:
          re::MeshDeformationRuntimeData::MeshDeformationIterator::operator++((uint64_t)v177);
        }
        v26 = v27 & 1;
      }
      else
      {
        v26 = 1;
      }
      re::ecs2::MeshComponent::updateStaticBoundingBoxData((_QWORD *)v15, *(const re::ecs2::Entity **)(v15 + 16), 0);
      v41 = *(_QWORD *)(v15 + 288);
      if (v41)
        v42 = (uint64_t *)(v41 + 80);
      else
        v42 = 0;
      re::ecs2::MeshComponent::updateStaticBoundingBoxData((_QWORD *)v15, *(const re::ecs2::Entity **)(v15 + 16), 0);
      v44 = *(_QWORD *)(v15 + 288);
      if (v44)
        v45 = (uint64_t *)(v44 + 152);
      else
        v45 = 0;
      v46 = v42[3];
      v47 = *v45;
      v48 = v45[3];
      v43.i32[0] = *(_DWORD *)(v15 + 96);
      v159 = v43;
      v171 = *v42;
      v172 = v46;
      v170[0] = v47;
      v170[1] = v48;
      if (*(_DWORD *)(v20 + 216))
      {
        v157 = *(_QWORD *)(v22 + 152);
        v49 = *(_QWORD *)(v156 + 136);
        if (v49)
          v50 = (void *)(v49 + 8);
        else
          v50 = 0;
        inited = (re *)objc_initWeak(&location, v50);
        v52 = re::globalAllocators(inited);
        v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v52[2] + 32))(v52[2], 224, 8);
        *(_OWORD *)(v53 + 160) = 0u;
        *(_OWORD *)(v53 + 176) = 0u;
        *(_OWORD *)(v53 + 128) = 0u;
        *(_OWORD *)(v53 + 144) = 0u;
        *(_OWORD *)v53 = 0u;
        *(_OWORD *)(v53 + 16) = 0u;
        *(_OWORD *)(v53 + 32) = 0u;
        *(_OWORD *)(v53 + 48) = 0u;
        *(_OWORD *)(v53 + 64) = 0u;
        *(_OWORD *)(v53 + 80) = 0u;
        *(_OWORD *)(v53 + 96) = 0u;
        *(_OWORD *)(v53 + 112) = 0u;
        *(_OWORD *)(v53 + 192) = 0u;
        *(_OWORD *)(v53 + 208) = 0u;
        *(_DWORD *)(v53 + 112) = 1;
        *(_QWORD *)(v53 + 120) = 0;
        *(_QWORD *)(v53 + 128) = 0;
        *(_OWORD *)(v53 + 168) = 0u;
        *(_OWORD *)(v53 + 152) = 0u;
        *(_DWORD *)(v53 + 184) = 1;
        *(_QWORD *)(v53 + 192) = 0;
        *(_QWORD *)(v53 + 200) = 0;
        *(_QWORD *)&v184 = 0;
        v182 = 0u;
        v183 = 0u;
        v183.i64[1] = re::globalAllocators((re *)v53)[2];
        *(_QWORD *)&v184 = 0;
        re::FramePersistentPtr<re::ecs2::DynamicBoundingBoxComponent::DynamicBoundingBoxData,re::FrameManager>::reset((id *)(v22 + 88), &location, (void *)v53, (uint64_t)&v182);
        if ((_QWORD)v184)
        {
          (**(void (***)(_QWORD))v184)(v184);
          if ((float32x4_t *)v184 != &v182)
            (*(void (**)(uint64_t))(*(_QWORD *)v183.i64[1] + 40))(v183.i64[1]);
        }
        v144 = v26;
        objc_destroyWeak(&location);
        location = 0;
        v54 = *(_QWORD *)(v22 + 96);
        v55 = v172;
        v57 = (_anonymous_namespace_ *)re::DynamicArray<re::AABB>::setCapacity((_QWORD *)v54, v55);
        ++*(_DWORD *)(v54 + 24);
        *(_QWORD *)(v54 + 88) = *(_QWORD *)(v54 + 32);
        v59 = *(_QWORD *)(v22 + 216);
        v60 = (_anonymous_namespace_ *)re::DynamicArray<re::AABB>::setCapacity((_QWORD *)(v54 + 40), v59);
        ++*(_DWORD *)(v54 + 64);
        *(_QWORD *)(v54 + 160) = *(_QWORD *)(v54 + 72);
        v155 = v22;
        v61 = *(_QWORD *)(v156 + 136);
        if (v61)
          v62 = (void *)(v61 + 8);
        else
          v62 = 0;
        v63 = (re *)objc_initWeak(&v168, v62);
        v64 = re::globalAllocators(v63);
        v65 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v64[2] + 32))(v64[2], 112, 8);
        *(_OWORD *)(v65 + 64) = 0u;
        *(_OWORD *)(v65 + 80) = 0u;
        *(_OWORD *)v65 = 0u;
        *(_OWORD *)(v65 + 16) = 0u;
        *(_OWORD *)(v65 + 32) = 0u;
        *(_OWORD *)(v65 + 48) = 0u;
        *(_OWORD *)(v65 + 96) = 0u;
        *(_DWORD *)(v65 + 72) = 1;
        *(_QWORD *)(v65 + 80) = 0;
        *(_QWORD *)(v65 + 88) = 0;
        *(_QWORD *)&v184 = 0;
        v182 = 0u;
        v183 = 0u;
        v183.i64[1] = re::globalAllocators((re *)v65)[2];
        *(_QWORD *)&v184 = 0;
        re::FramePersistentPtr<re::ecs2::DynamicBoundingBoxComponent::PersistentDynamicBoundingBoxData,re::FrameManager>::reset((id *)(v22 + 144), &v168, (void *)v65, (uint64_t)&v182);
        if ((_QWORD)v184)
        {
          (**(void (***)(_QWORD))v184)(v184);
          if ((float32x4_t *)v184 != &v182)
            (*(void (**)(uint64_t))(*(_QWORD *)v183.i64[1] + 40))(v183.i64[1]);
        }
        objc_destroyWeak(&v168);
        v168 = 0;
        v66 = *(_QWORD *)(v22 + 152);
        *(_QWORD *)v174 = 0;
        *(_QWORD *)&v174[8] = 0;
        *(_DWORD *)&v174[16] = 1;
        *(_QWORD *)&v175[4] = 0;
        *(_QWORD *)&v175[12] = 0;
        if ((v172 & 0x3F) != 0)
          v67 = (v172 >> 6) + 1;
        else
          v67 = v172 >> 6;
        v176 = v172;
        v182.i64[0] = 0;
        re::DynamicOverflowArray<unsigned long long,3ul>::resize((_anonymous_namespace_ *)v174, v67, &v182);
        started = re::MeshNameMap::meshPartStartIndexForInstance((re::MeshNameMap *)v20, 1u);
        FirstBitSet = (_anonymous_namespace_ *)re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(v22 + 280, 0);
        if (FirstBitSet == (_anonymous_namespace_ *)-1)
        {
LABEL_68:
          v74 = *(unint64_t **)&v175[12];
          v10 = v145;
          if ((v174[16] & 1) != 0)
            v74 = (unint64_t *)&v175[4];
          v75 = *(_QWORD *)&v174[8];
          if ((*(_QWORD *)&v174[8] & 0x3FFFFFFFFFFFFFFLL) == 0)
            goto LABEL_89;
          v76 = 0;
          while (1)
          {
            v78 = *v74++;
            v77 = v78;
            if (v78)
              break;
            v76 -= 64;
            if (!--v75)
              goto LABEL_89;
          }
          v80 = __clz(__rbit64(v77));
          if (v80 + 1 == v76)
          {
LABEL_89:
            v91 = v148;
            if (fabsf(*(float *)v159.i32) > 0.00000011921)
            {
              v92 = *(_QWORD *)(v54 + 16);
              if (v92)
              {
                v93 = *(float32x4_t **)(v54 + 32);
                v94 = &v93[2 * v92];
                v95 = (float32x4_t)vdupq_lane_s32(v159, 0);
                do
                {
                  v96 = vaddq_f32(v95, v93[1]);
                  *v93 = vsubq_f32(*v93, v95);
                  v93[1] = v96;
                  v93 += 2;
                }
                while (v93 != v94);
              }
              v97 = *(_QWORD *)(v54 + 56);
              if (v97)
              {
                v98 = *(float32x4_t **)(v54 + 72);
                v99 = &v98[2 * v97];
                v100 = (float32x4_t)vdupq_lane_s32(v159, 0);
                do
                {
                  v101 = vaddq_f32(v100, v98[1]);
                  *v98 = vsubq_f32(*v98, v100);
                  v98[1] = v101;
                  v98 += 2;
                }
                while (v98 != v99);
              }
            }
            v102 = *(_QWORD *)(v22 + 216);
            v103 = (_anonymous_namespace_ *)re::DynamicArray<re::AABB>::setCapacity((_QWORD *)v66, v102);
            ++*(_DWORD *)(v66 + 24);
            *(_QWORD *)(v66 + 48) = *(_QWORD *)(v66 + 32);
            if (v157)
            {
              if (*(_QWORD *)(v157 + 64) == *(_QWORD *)(v22 + 216))
                v104 = v157 + 40;
              else
                v104 = 0;
            }
            else
            {
              v104 = 0;
            }
            if (!v153)
            {
              v105.i64[0] = 0x7F0000007FLL;
              v105.i64[1] = 0x7F0000007FLL;
              v106 = (float32x4_t)v150;
              goto LABEL_126;
            }
            v158 = 0;
            v105.i64[0] = 0x7F0000007FLL;
            v105.i64[1] = 0x7F0000007FLL;
            v106 = (float32x4_t)v150;
            v146 = &v148[v153];
            while (1)
            {
              v152 = v106;
              v154 = v105;
              v107 = (float32x4_t *)re::DataArray<re::MeshInstance>::get(*(_QWORD *)(v156 + 32) + 72, *v91);
              v108 = re::DataArray<re::MeshModel>::get(*(_QWORD *)(v156 + 32) + 8, v107[1].i64[0]);
              v109 = *(_QWORD *)(v108 + 56);
              v110.i64[0] = 0x7F0000007FLL;
              v110.i64[1] = 0x7F0000007FLL;
              v166 = (float32x4_t)v150;
              v167 = v110;
              if (!v109)
                goto LABEL_123;
              v151 = v108;
              v147 = v107;
              v149 = v91;
              v111 = 0;
              v72 = v107 + 2;
              v112 = 4 * v158;
              v160 = (float32x4_t)v150;
              v161 = v110;
              started = 448;
              do
              {
                v113 = v158 + v111;
                v114 = (float32x4_t *)re::ecs2::DynamicBoundingBoxComponent::boundingBoxForMeshPartForFrame(v22, *(_QWORD *)(*(_QWORD *)(v156 + 136) + 32) & 0xFFFFFFFFFFFFFFFLL | ((unint64_t)*(_QWORD *)(*(_QWORD *)(v156 + 136) + 16) << 60), v158 + v111);
                if (v114)
                {
                  v115 = *(_QWORD *)(v66 + 64);
                  if (v115 <= v113)
                  {
                    v173 = 0;
                    v29 = (unint64_t)v174;
                    v185 = 0u;
                    v186 = 0u;
                    v183 = 0u;
                    v184 = 0u;
                    v182 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v177 = 136315906;
                    *(_QWORD *)&v177[4] = "operator[]";
                    *(_WORD *)&v177[12] = 1024;
                    *(_DWORD *)&v177[14] = 858;
                    v178 = 2048;
                    v179 = v158 + v111;
                    v180 = 2048;
                    v181 = v115;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_136:
                    v173 = 0;
                    v185 = 0u;
                    v186 = 0u;
                    v183 = 0u;
                    v184 = 0u;
                    v182 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v177 = 136315906;
                    *(_QWORD *)&v177[4] = "operator[]";
                    *(_WORD *)&v177[12] = 1024;
                    *(_DWORD *)&v177[14] = 476;
                    v178 = 2048;
                    v179 = v111;
                    v180 = 2048;
                    v181 = v29;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_137:
                    v173 = 0;
                    v185 = 0u;
                    v186 = 0u;
                    v183 = 0u;
                    v184 = 0u;
                    v182 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v177 = 136315906;
                    *(_QWORD *)&v177[4] = "operator[]";
                    *(_WORD *)&v177[12] = 1024;
                    *(_DWORD *)&v177[14] = 866;
                    v178 = 2048;
                    v179 = v158 + v111;
                    v180 = 2048;
                    v181 = v29;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_138:
                    v173 = 0;
                    v185 = 0u;
                    v186 = 0u;
                    v183 = 0u;
                    v184 = 0u;
                    v182 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v177 = 136315906;
                    *(_QWORD *)&v177[4] = "operator[]";
                    *(_WORD *)&v177[12] = 1024;
                    *(_DWORD *)&v177[14] = 858;
                    v178 = 2048;
                    v179 = v158 + v111;
                    v180 = 2048;
                    v181 = v29;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
LABEL_139:
                    v166.i64[0] = 0;
                    v185 = 0u;
                    v186 = 0u;
                    v183 = 0u;
                    v184 = 0u;
                    v182 = 0u;
                    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                    *(_DWORD *)v177 = 136315906;
                    *(_QWORD *)&v177[4] = "operator[]";
                    *(_WORD *)&v177[12] = 1024;
                    *(_DWORD *)&v177[14] = 858;
                    v178 = 2048;
                    v179 = v29;
                    v180 = 2048;
                    v181 = (unint64_t)v72;
                    _os_log_send_and_compose_impl();
                    _os_crash_msg();
                    __break(1u);
                    goto LABEL_140;
                  }
                  v116 = v114;
                  v117 = v66 + 80;
                  if ((*(_BYTE *)(v66 + 72) & 1) == 0)
                    v117 = *(_QWORD *)(v66 + 88);
                  *(_DWORD *)(v117 + v112 + 4 * v111) = (2 * *(_DWORD *)(v66 + 16)) | 1;
                  re::AABB::transform(v114, v72, (uint64_t)&v182);
                  re::DynamicArray<re::AABB>::add((_anonymous_namespace_ *)v66, (uint64_t)&v182);
                  v119 = v160;
                  v118 = v161;
                  v119.i32[3] = 0;
                  v120 = *v116;
                  v121 = v116[1];
                  v120.i32[3] = 0;
                  v118.i32[3] = 0;
                  v121.i32[3] = 0;
                  v160 = vminnmq_f32(v119, v120);
                  v161 = vmaxnmq_f32(v118, v121);
                  v166 = v160;
                  v167 = v161;
                  v22 = v155;
                }
                else
                {
                  if (!v104)
                    goto LABEL_115;
                  v29 = *(_QWORD *)(v104 + 24);
                  if (v29 <= v113)
                    goto LABEL_137;
                  v122 = v104 + 40;
                  if ((*(_BYTE *)(v104 + 32) & 1) == 0)
                    v122 = *(_QWORD *)(v104 + 48);
                  if ((*(_DWORD *)(v122 + v112 + 4 * v111) & 1) != 0)
                  {
                    v128 = (float32x4_t *)re::MeshBoundingBoxes::boundingBox((re::MeshBoundingBoxes *)v104, v113);
                    v29 = *(_QWORD *)(v66 + 64);
                    if (v29 <= v113)
                      goto LABEL_138;
                    v129 = v66 + 80;
                    if ((*(_BYTE *)(v66 + 72) & 1) == 0)
                      v129 = *(_QWORD *)(v66 + 88);
                    v130 = v152;
                    v130.i32[3] = 0;
                    v131 = *v128;
                    v132 = v128[1];
                    v131.i32[3] = 0;
                    v133 = vminnmq_f32(v130, v131);
                    v134 = v154;
                    v134.i32[3] = 0;
                    v132.i32[3] = 0;
                    v152 = v133;
                    v154 = vmaxnmq_f32(v134, v132);
                    *(_DWORD *)(v129 + v112 + 4 * v111) = (2 * *(_DWORD *)(v66 + 16)) | 1;
                    re::DynamicArray<re::AABB>::add((_anonymous_namespace_ *)v66, (uint64_t)v128);
                  }
                  else
                  {
LABEL_115:
                    v29 = *(_QWORD *)(v151 + 56);
                    if (v29 <= v111)
                      goto LABEL_136;
                    v123 = (float32x4_t *)(*(_QWORD *)(v151 + 64) + started);
                    v124 = v160;
                    v124.i32[3] = 0;
                    v125 = v123[-1];
                    v125.i32[3] = 0;
                    v160 = vminnmq_f32(v124, v125);
                    v166 = v160;
                    v126 = *v123;
                    v127 = v161;
                    v127.i32[3] = 0;
                    v126.i32[3] = 0;
                    v161 = vmaxnmq_f32(v127, v126);
                    v167 = v161;
                  }
                }
                ++v111;
                started += 560;
              }
              while (v109 != v111);
              v158 += v111;
              v10 = v145;
              v107 = v147;
              v91 = v149;
LABEL_123:
              re::AABB::transform(&v166, v107 + 2, (uint64_t)&v182);
              v136 = v152;
              v135 = v154;
              v136.i32[3] = 0;
              v137 = v182;
              v138 = v183;
              v137.i32[3] = 0;
              v135.i32[3] = 0;
              v106 = vminnmq_f32(v136, v137);
              v138.i32[3] = 0;
              v105 = vmaxnmq_f32(v135, v138);
              if (++v91 == v146)
              {
LABEL_126:
                *(float32x4_t *)(v22 + 336) = v106;
                *(float32x4_t *)(v22 + 352) = v105;
                if (*(_QWORD *)v174 && (v174[16] & 1) == 0)
                  (*(void (**)(void))(**(_QWORD **)v174 + 40))();
                v5 = v142;
                if ((v144 & 1) == 0)
                  goto LABEL_130;
                goto LABEL_131;
              }
            }
          }
          v29 = v80 - v76;
          while (1)
          {
            LODWORD(v81) = re::MeshNameMap::meshPartStartIndexForInstance((re::MeshNameMap *)v20, v29);
            v82 = re::MeshNameMap::meshPartStartIndexForInstance((re::MeshNameMap *)v20, (int)v29 + 1);
            v83.i64[0] = 0x7F0000007FLL;
            v83.i64[1] = 0x7F0000007FLL;
            v166 = (float32x4_t)v150;
            v167 = v83;
            if (v81 < v82)
            {
              v81 = v81;
              v84 = v82;
              do
              {
                v85 = (float32x4_t *)re::MeshBoundingBoxes::boundingBox((re::MeshBoundingBoxes *)(v54 + 152), v81);
                v86 = v166;
                v87 = v167;
                v86.i32[3] = 0;
                v88 = *v85;
                v89 = v85[1];
                v88.i32[3] = 0;
                v87.i32[3] = 0;
                v89.i32[3] = 0;
                v166 = vminnmq_f32(v86, v88);
                v167 = vmaxnmq_f32(v87, v89);
                ++v81;
              }
              while (v84 != v81);
            }
            started = *(_QWORD *)(v54 + 104);
            if (started <= v29)
              break;
            v90 = v54 + 120;
            if ((*(_BYTE *)(v54 + 112) & 1) == 0)
              v90 = *(_QWORD *)(v54 + 128);
            *(_DWORD *)(v90 + 4 * v29) = (2 * *(_DWORD *)(v54 + 16)) | 1;
            re::DynamicArray<re::AABB>::add((_anonymous_namespace_ *)v54, (uint64_t)&v166);
            FirstBitSet = (_anonymous_namespace_ *)re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)v174, v29 + 1);
            v29 = (unint64_t)FirstBitSet;
            if (FirstBitSet == (_anonymous_namespace_ *)-1)
              goto LABEL_89;
          }
        }
        else
        {
          v29 = (unint64_t)FirstBitSet;
          v69 = 0;
          while (1)
          {
            if (v29 >= started)
            {
              do
              {
                v70 = v69 + 2;
                ++v69;
                v71 = re::MeshNameMap::meshPartStartIndexForInstance((re::MeshNameMap *)v20, v70);
              }
              while (v29 >= v71);
              started = v71;
            }
            re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v174, v69);
            v72 = *(float32x4_t **)(v54 + 176);
            if ((unint64_t)v72 <= v29)
              goto LABEL_139;
            v73 = v54 + 192;
            if ((*(_BYTE *)(v54 + 184) & 1) == 0)
              v73 = *(_QWORD *)(v54 + 200);
            *(_DWORD *)(v73 + 4 * v29) = (2 * *(_DWORD *)(v54 + 56)) | 1;
            v72 = *(float32x4_t **)(v22 + 216);
            if ((unint64_t)v72 <= v29)
              break;
            re::DynamicArray<re::AABB>::add((_anonymous_namespace_ *)(v54 + 40), *(_QWORD *)(v22 + 232) + 32 * v29);
            FirstBitSet = (_anonymous_namespace_ *)re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(v22 + 280, v29 + 1);
            v29 = (unint64_t)FirstBitSet;
            if (FirstBitSet == (_anonymous_namespace_ *)-1)
              goto LABEL_68;
          }
LABEL_140:
          v166.i64[0] = 0;
          v185 = 0u;
          v186 = 0u;
          v183 = 0u;
          v184 = 0u;
          v182 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v177 = 136315906;
          *(_QWORD *)&v177[4] = "operator[]";
          *(_WORD *)&v177[12] = 1024;
          *(_DWORD *)&v177[14] = 789;
          v178 = 2048;
          v179 = v29;
          v180 = 2048;
          v181 = (unint64_t)v72;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_141:
          v166.i64[0] = 0;
          v185 = 0u;
          v186 = 0u;
          v183 = 0u;
          v184 = 0u;
          v182 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v174 = 136315906;
          *(_QWORD *)&v174[4] = "operator[]";
          *(_WORD *)&v174[12] = 1024;
          *(_DWORD *)&v174[14] = 789;
          *(_WORD *)&v174[18] = 2048;
          *(_QWORD *)v175 = v29;
          *(_WORD *)&v175[8] = 2048;
          *(_QWORD *)&v175[10] = started;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_142:
          v166.i64[0] = 0;
          v185 = 0u;
          v186 = 0u;
          v183 = 0u;
          v184 = 0u;
          v182 = 0u;
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v174 = 136315906;
          *(_QWORD *)&v174[4] = "operator[]";
          *(_WORD *)&v174[12] = 1024;
          *(_DWORD *)&v174[14] = 789;
          *(_WORD *)&v174[18] = 2048;
          *(_QWORD *)v175 = v29;
          *(_WORD *)&v175[8] = 2048;
          *(_QWORD *)&v175[10] = started;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v173 = 0;
        v185 = 0u;
        v186 = 0u;
        v183 = 0u;
        v184 = 0u;
        v182 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v177 = 136315906;
        *(_QWORD *)&v177[4] = "operator[]";
        *(_WORD *)&v177[12] = 1024;
        *(_DWORD *)&v177[14] = 858;
        v178 = 2048;
        v179 = v29;
        v180 = 2048;
        v181 = started;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
      }
      re::ecs2::DynamicBoundingBoxComponent::resetDynamicBoundingBoxData((re::ecs2::DynamicBoundingBoxComponent *)v22);
      v79 = (re *)objc_initWeak((id *)v174, 0);
      v182 = 0uLL;
      v183.i64[0] = 0;
      v183.i64[1] = re::globalAllocators(v79)[2];
      *(_QWORD *)&v184 = 0;
      re::FramePersistentPtr<re::ecs2::DynamicBoundingBoxComponent::PersistentDynamicBoundingBoxData,re::FrameManager>::reset((id *)(v22 + 144), (id *)v174, 0, (uint64_t)&v182);
      if ((_QWORD)v184)
      {
        (**(void (***)(_QWORD))v184)(v184);
        if ((float32x4_t *)v184 != &v182)
          (*(void (**)(uint64_t))(*(_QWORD *)v183.i64[1] + 40))(v183.i64[1]);
      }
      objc_destroyWeak((id *)v174);
      if ((v26 & 1) == 0)
      {
LABEL_130:
        v139 = v164;
        v140 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v165);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v139, v140, *(_QWORD *)(a3 + 32));
      }
LABEL_131:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v165);
    }
    while (v165.i64[0] != v5 || v165.u16[4] != 0xFFFF || v165.u16[5] != 0xFFFF);
  }
  return *(_DWORD *)(v5 + 40) != 0;
}

uint64_t re::ecs2::DynamicBoundingBoxSystem::updateScenes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[2];
  _QWORD v13[2];

  v13[0] = a3;
  v13[1] = a4;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v12);
  if (*(_QWORD *)(a1 + 112))
  {
    v6 = *(_QWORD *)(a2 + 8);
    if (v6)
    {
      v7 = *(uint64_t **)a2;
      v8 = a1 + 200;
      v9 = 8 * v6;
      do
      {
        v10 = *v7++;
        re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene(v8, v10, (uint64_t)v13, 0);
        v9 -= 8;
      }
      while (v9);
    }
  }
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v12);
}

void re::ecs2::DynamicBoundingBoxSystem::willAddSceneToECSService(re::ecs2::DynamicBoundingBoxSystem *this, re::EventBus **a2)
{
  re::EventBus *v3;
  uint64_t v4;
  __int128 v5;
  re::ecs2::Scene *v6;

  v6 = (re::ecs2::Scene *)a2;
  v3 = a2[36];
  if (v3)
  {
    *((_QWORD *)&v5 + 1) = v4;
    re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 440, (uint64_t *)&v6, &v5);
    a2 = (re::EventBus **)v6;
  }
  re::ecs2::BasicComponentStates<re::ecs2::MeshDeformationComponent>::addScene((uint64_t)this + 200, (uint64_t)a2);
}

uint64_t re::ecs2::`anonymous namespace'::meshDeformationComponentWillDeactivateHandler(uint64_t a1)
{
  re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::DynamicBoundingBoxComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
  return 0;
}

uint64_t re::ecs2::DynamicBoundingBoxSystem::willRemoveSceneFromECSService(re::ecs2::DynamicBoundingBoxSystem *this, re::ecs2::Scene *a2)
{
  char *v3;
  uint64_t result;
  re::ecs2::Scene *v5;

  v5 = a2;
  re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene((uint64_t)this + 200, (uint64_t)a2);
  v3 = (char *)this + 440;
  result = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet((uint64_t)v3, (uint64_t *)&v5);
  if (result)
  {
    if (*((_QWORD *)v5 + 36))
      re::EventBus::unsubscribe(*((_QWORD *)v5 + 36), *(_QWORD *)result, *(_QWORD *)(result + 8));
    return re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v3, (uint64_t *)&v5);
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_DynamicBoundingBoxComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_270);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_270))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254110258, 0);
    *(uint64_t *)((char *)&qword_254110268 + 6) = 0;
    qword_254110268 = 0;
    qword_254110278 = 0;
    qword_254110280 = 0xFFFFFFFFLL;
    qword_254110258 = (uint64_t)&off_24ED7DAA8;
    qword_254110288 = (uint64_t)"DynamicBoundingBoxComponent";
    dword_254110290 = 0;
    xmmword_254110298 = 0u;
    unk_2541102A8 = 0u;
    xmmword_2541102B8 = 0u;
    qword_2541102C8 = 0;
    __cxa_guard_release(&_MergedGlobals_270);
  }
  return &qword_254110258;
}

void re::ecs2::initInfo_DynamicBoundingBoxComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0xB01568A72EB9FBEALL;
  v10[1] = "DynamicBoundingBoxComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254110248);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254110248);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254110240 = v8;
      __cxa_guard_release(&qword_254110248);
    }
  }
  *((_QWORD *)this + 2) = 0x17000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254110240;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::DynamicBoundingBoxComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::DynamicBoundingBoxComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DynamicBoundingBoxComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DynamicBoundingBoxComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

uint64_t re::internal::defaultConstruct<re::ecs2::DynamicBoundingBoxComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::DynamicBoundingBoxComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::DynamicBoundingBoxComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::DynamicBoundingBoxComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_DynamicBoundingBoxComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DynamicBoundingBoxComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DynamicBoundingBoxComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DynamicBoundingBoxComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DynamicBoundingBoxComponent>, this);
}

uint64_t *re::ecs2::allocInfo_DynamicBoundingBoxSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254110250);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254110250))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541102D0, 0);
    *(uint64_t *)((char *)&qword_2541102E0 + 6) = 0;
    qword_2541102E0 = 0;
    qword_2541102F0 = 0;
    qword_2541102F8 = 0xFFFFFFFFLL;
    qword_2541102D0 = (uint64_t)&off_24ED7DAA8;
    qword_254110300 = (uint64_t)"DynamicBoundingBoxSystem";
    dword_254110308 = 0;
    xmmword_254110310 = 0u;
    unk_254110320 = 0u;
    xmmword_254110330 = 0u;
    qword_254110340 = 0;
    __cxa_guard_release(&qword_254110250);
  }
  return &qword_2541102D0;
}

void re::ecs2::initInfo_DynamicBoundingBoxSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xFA9333C51155E86ELL;
  v5[1] = "DynamicBoundingBoxSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1E800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_DynamicBoundingBoxSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::DynamicBoundingBoxSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::DynamicBoundingBoxSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::DynamicBoundingBoxSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::DynamicBoundingBoxSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DynamicBoundingBoxSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DynamicBoundingBoxSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::DynamicBoundingBoxSystem *re::internal::defaultConstruct<re::ecs2::DynamicBoundingBoxSystem>(int a1, int a2, re::ecs2::DynamicBoundingBoxSystem *this)
{
  return re::ecs2::DynamicBoundingBoxSystem::DynamicBoundingBoxSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::DynamicBoundingBoxSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;

  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a3 + 55);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 25);
  a3[20] = &off_24ED67F40;
  v4 = a3[22];
  if (v4)
  {
    if (a3[23])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[24]);
      a3[23] = 0;
      a3[24] = 0;
    }
    a3[22] = 0;
  }
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::DynamicBoundingBoxSystem>(_QWORD *a1)
{
  uint64_t v2;

  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a1 + 55);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 25);
  a1[20] = &off_24ED67F40;
  v2 = a1[22];
  if (v2)
  {
    if (a1[23])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[24]);
      a1[23] = 0;
      a1[24] = 0;
    }
    a1[22] = 0;
  }
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_DynamicBoundingBoxSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DynamicBoundingBoxSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DynamicBoundingBoxSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DynamicBoundingBoxSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DynamicBoundingBoxSystem>, this);
}

uint64_t re::ecs2::DynamicBoundingBoxComponentStateImpl::dependsOnComponents(re::ecs2::DynamicBoundingBoxComponentStateImpl *this)
{
  return *((_QWORD *)this + 4);
}

void re::ecs2::DynamicBoundingBoxSystem::~DynamicBoundingBoxSystem(re::ecs2::DynamicBoundingBoxSystem *this)
{
  uint64_t v2;

  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 55);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 25);
  *((_QWORD *)this + 20) = &off_24ED67F40;
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    if (*((_QWORD *)this + 23))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 24));
      *((_QWORD *)this + 23) = 0;
      *((_QWORD *)this + 24) = 0;
    }
    *((_QWORD *)this + 22) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 55);
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 25);
  *((_QWORD *)this + 20) = &off_24ED67F40;
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    if (*((_QWORD *)this + 23))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 24));
      *((_QWORD *)this + 23) = 0;
      *((_QWORD *)this + 24) = 0;
    }
    *((_QWORD *)this + 22) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::DynamicBoundingBoxSystem::typeInfo(re::ecs2::DynamicBoundingBoxSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DynamicBoundingBoxSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DynamicBoundingBoxSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DynamicBoundingBoxSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DynamicBoundingBoxSystem>, 0);
}

void re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a1 + 8))(*a2, a3);
}

_QWORD *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED68028;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED68028;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<REEventHandlerResult (*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 16;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::DynamicBoundingBoxComponent>(uint64_t a1)
{
  id *v2;
  id *v3;
  uint64_t v4;
  re *inited;
  re *v6;
  re *v7;
  __int128 v8;

  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  v2 = (id *)(a1 + 144);
  *(_OWORD *)(a1 + 32) = 0u;
  v3 = (id *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 24) = 0;
  *(_QWORD *)v4 = &off_24ED583C0;
  inited = (re *)objc_initWeak(v3, 0);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 72) = re::globalAllocators(inited)[2];
  *(_QWORD *)(a1 + 80) = 0;
  v6 = (re *)objc_initWeak((id *)(a1 + 88), 0);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 128) = re::globalAllocators(v6)[2];
  *(_QWORD *)(a1 + 136) = 0;
  v7 = (re *)objc_initWeak(v2, 0);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 184) = re::globalAllocators(v7)[2];
  *(_DWORD *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 296) = 1;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)&v8 = 0x7F0000007FLL;
  *((_QWORD *)&v8 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(a1 + 336) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(a1 + 352) = v8;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::DynamicBoundingBoxSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::DynamicBoundingBoxSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_PhysicsSimulationComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254110350);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254110350))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254110390, 0);
    *(uint64_t *)((char *)&qword_2541103A0 + 6) = 0;
    qword_2541103A0 = 0;
    qword_2541103B0 = 0;
    qword_2541103B8 = 0xFFFFFFFFLL;
    qword_254110390 = (uint64_t)&off_24ED7DAA8;
    qword_2541103C0 = (uint64_t)"PhysicsSimulationComponent";
    dword_2541103C8 = 0;
    xmmword_2541103D0 = 0u;
    unk_2541103E0 = 0u;
    xmmword_2541103F0 = 0u;
    qword_254110400 = 0;
    __cxa_guard_release(&qword_254110350);
  }
  return &qword_254110390;
}

void re::ecs2::initInfo_PhysicsSimulationComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  const re::IntrospectionBase *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  _QWORD v32[2];
  __int128 v33;

  v32[0] = 0x3A8A6133E7C4421ELL;
  v32[1] = "PhysicsSimulationComponent";
  re::StringID::destroyString((re::StringID *)v32);
  *((_OWORD *)this + 2) = v33;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_271);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&_MergedGlobals_271);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254110358 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "reportKinematicStaticCollisions";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1900000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254110360 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_BOOL((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "reportKinematicKinematicCollisions";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x1A00000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254110368 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v18 = re::IntrospectionInfo<re::Optional<re::Vector3<float>>>::get(1);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "gravity";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x2000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254110370 = v19;
      v20 = re::introspectionAllocator((re *)v19);
      v22 = re::IntrospectionInfo<re::Optional<float>>::get(1, v21);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "fixedTimeStep";
      *(_QWORD *)(v23 + 16) = v22;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0x4000000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_254110378 = v23;
      v24 = re::introspectionAllocator((re *)v23);
      v26 = re::introspect_uint64_t((re *)1, v25);
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "m_parentTimebaseID";
      *(_QWORD *)(v27 + 16) = v26;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0x5800000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_254110380 = v27;
      v28 = re::introspectionAllocator((re *)v27);
      v29 = re::introspect_PhysicsSolverIterations((re::IntrospectionBase **)1);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "solverIterations";
      *(_QWORD *)(v30 + 16) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x4800000006;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_254110388 = v30;
      __cxa_guard_release(&_MergedGlobals_271);
    }
  }
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_254110358;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PhysicsSimulationComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PhysicsSimulationComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PhysicsSimulationComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PhysicsSimulationComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v31 = v33;
}

uint64_t re::internal::defaultConstruct<re::ecs2::PhysicsSimulationComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::PhysicsSimulationComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::PhysicsSimulationComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PhysicsSimulationComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PhysicsSimulationComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsSimulationComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsSimulationComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsSimulationComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsSimulationComponent>, this);
}

void re::ecs2::PhysicsSimulationComponent::~PhysicsSimulationComponent(re::ecs2::PhysicsSimulationComponent *this)
{
  const void *v2;
  const void *v3;

  *(_QWORD *)this = &off_24ED68080;
  v2 = (const void *)*((_QWORD *)this + 12);
  if (v2)
  {
    CFRelease(v2);
    *((_QWORD *)this + 12) = 0;
  }
  v3 = (const void *)*((_QWORD *)this + 13);
  if (v3)
  {
    CFRelease(v3);
    *((_QWORD *)this + 13) = 0;
  }
  objc_destroyWeak((id *)this + 10);
  *((_QWORD *)this + 10) = 0;
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::ecs2::PhysicsSimulationComponent::~PhysicsSimulationComponent(this);
  JUMPOUT(0x2276933B8);
}

void re::ecs2::PhysicsSimulationComponent::removeFromSimulation(re::ecs2::PhysicsSimulationComponent *this)
{
  id *v2;
  _QWORD *WeakRetained;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  re::ecs2::Entity *SceneDataEntity;
  uint64_t v12;
  char v13[16];

  v2 = (id *)((char *)this + 80);
  WeakRetained = objc_loadWeakRetained((id *)this + 10);
  if (WeakRetained)
  {
    v4 = WeakRetained;
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)WeakRetained[6] + 144))(WeakRetained[6], 0);
    if (*((_QWORD *)this + 13) && *((_QWORD *)this + 11))
    {
      v5 = (*(uint64_t (**)(_QWORD *))(*(v4 - 1) + 56))(v4 - 1);
      v6 = re::ServiceLocator::serviceOrNull<re::TimebaseService>(v5);
      if (v6)
      {
        v7 = *((_QWORD *)this + 2);
        if (v7)
        {
          v8 = v6;
          do
          {
            v9 = v7;
            v7 = *(_QWORD *)(v7 + 24);
          }
          while (v7);
          v10 = *(_QWORD *)(v9 + 16);
          if (v10)
          {
            v13[0] = 0;
            SceneDataEntity = makeSceneDataEntity(v10, (uint64_t)v13, 0, re::ecs2::Scene::kSharedSceneDataEntityID, 1);
            if (SceneDataEntity)
            {
              v12 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
              if (v12)
                (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v8 + 72))(v8, *((_QWORD *)this + 13), v12 + 32);
            }
          }
        }
      }
      *((_QWORD *)this + 11) = 0;
      CFRelease(*((CFTypeRef *)this + 13));
      *((_QWORD *)this + 13) = 0;
    }
    objc_destroyWeak(v2);
    *v2 = 0;

  }
}

void re::ecs2::PhysicsSimulationComponent::setLocallyManagedParentTimebase(re::ecs2::PhysicsSimulationComponent *this, CFTypeRef cf)
{
  CFTypeRef v3;
  char *WeakRetained;
  void *v6;

  v3 = (CFTypeRef)*((_QWORD *)this + 12);
  if (v3 != cf)
  {
    if (v3)
    {
      CFRelease(v3);
      *((_QWORD *)this + 12) = 0;
    }
    if (cf)
    {
      CFRetain(cf);
      *((_QWORD *)this + 12) = cf;
    }
    WeakRetained = (char *)objc_loadWeakRetained((id *)this + 10);
    if (WeakRetained)
    {
      v6 = WeakRetained;
      re::PhysicsSimulation::setParentClockOrTimebase((re::PhysicsSimulation *)(WeakRetained - 8), *((void **)this + 12));

    }
  }
}

BOOL re::ecs2::PhysicsSimulationComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  re::ecs2::PhysicsSimulationData *v19;
  uint64_t v20;
  uint64_t v21;
  char *WeakRetained;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  re::ecs2::Entity *SceneDataEntity;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  const void *v36;
  re::ecs2::NetworkComponent *v37;
  re::ecs2::NetworkComponent *v38;
  void *v39;
  void *v40;
  const void *v41;
  const void *v42;
  unint64_t v43;
  unint64_t v44;
  _BOOL8 v45;
  re::ecs2::Component *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51[2];
  _BYTE v52[16];
  char v53[16];

  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v52, 3047, a1);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a3 + 8) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 56));
  v9 = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v8);
  if (v9
    && (v10 = v9,
        v11 = *(_QWORD *)(a3 + 8),
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9),
        v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, v11),
        v51[0] = v12,
        (v51[1] = v13) != 0))
  {
    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v48, a5, 0);
    v15 = v48;
    v14 = v49;
    v48 = a4;
    v49 = v15;
    v50 = v14;
    if (v15 != a5 || (unsigned __int16)v14 != 0xFFFFLL || (v14 & 0xFFFF0000) != 0xFFFF0000)
    {
      while (1)
      {
        v16 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v49);
        v17 = *(_QWORD *)v16;
        v18 = *(_QWORD *)(*(_QWORD *)v16 + 16);
        v19 = (re::ecs2::PhysicsSimulationData *)re::ecs2::PhysicsSimulationMapping::physicsSimulationDataForEntity(v51, v18);
        if ((*(_BYTE *)(v18 + 288) & 1) == 0 || (v20 = (uint64_t)v19) == 0)
        {
          v34 = v48;
          v35 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v49);
          re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v34, v35, *(_QWORD *)(a3 + 32));
          re::ecs2::PhysicsSimulationComponent::removeFromSimulation((re::ecs2::PhysicsSimulationComponent *)v17);
          goto LABEL_43;
        }
        v21 = re::ecs2::PhysicsSimulationData::ensurePhysicsSimulation(v19);
        WeakRetained = (char *)objc_loadWeakRetained((id *)(v17 + 80));
        if (WeakRetained)
          v23 = WeakRetained - 8;
        else
          v23 = 0;
        if (WeakRetained)

        if (v23 != (char *)v21)
          re::ecs2::PhysicsSimulationComponent::removeFromSimulation((re::ecs2::PhysicsSimulationComponent *)v17);
        v24 = *(_BYTE *)(v17 + 26) ? *(unsigned __int8 *)(v17 + 25) | 2u : *(unsigned __int8 *)(v17 + 25);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v21 + 56) + 144))(*(_QWORD *)(v21 + 56), v24);
        re::ecs2::PhysicsSimulationData::setGravityOverride(v20, (unsigned __int8 *)(v17 + 32));
        re::ecs2::PhysicsSimulationData::setFixedTimeStepOverride(v20, (unsigned __int8 *)(v17 + 64));
        re::RigidBodyCollection::setSolverIterations(v21 + 80, v17 + 72);
        v25 = re::ServiceLocator::serviceOrNull<re::TimebaseService>(v8);
        if (v25)
          break;
LABEL_42:
        objc_storeWeak((id *)(v17 + 80), (id)(v21 + 8));
        v43 = v48;
        v44 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v49);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v43, v44, *(_QWORD *)(a3 + 48));
LABEL_43:
        re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v49);
        if (v49 == a5 && (unsigned __int16)v50 == 0xFFFF && WORD1(v50) == 0xFFFF)
          goto LABEL_46;
      }
      v26 = v25;
      v27 = *(_QWORD *)(v17 + 16);
      if (v27)
      {
        v28 = *(_QWORD *)(v17 + 16);
        do
        {
          v29 = v28;
          v28 = *(_QWORD *)(v28 + 24);
        }
        while (v28);
        v30 = *(_QWORD *)(v29 + 16);
        if (v30)
        {
          v53[0] = 0;
          SceneDataEntity = makeSceneDataEntity(v30, (uint64_t)v53, 1, re::ecs2::Scene::kSharedSceneDataEntityID, 1);
          v47 = (re::ecs2::Component *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::TimebaseComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
          v32 = *(_QWORD *)(v17 + 96);
          v33 = *(_QWORD *)(v17 + 104);
          if (v32 != v33)
          {
            if (v33)
            {
              (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v26 + 72))(v26, *(_QWORD *)(v17 + 104), (uint64_t)v47 + 32);
              CFRelease(*(CFTypeRef *)(v17 + 104));
              *(_QWORD *)(v17 + 104) = 0;
              v32 = *(_QWORD *)(v17 + 96);
              if (!v32)
              {
LABEL_31:
                v38 = (re::ecs2::NetworkComponent *)*((_QWORD *)SceneDataEntity + 25);
                if (!v38)
                  v38 = (re::ecs2::NetworkComponent *)re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)SceneDataEntity + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
                re::ecs2::NetworkComponent::markDirty(v38, v47);
                goto LABEL_34;
              }
LABEL_29:
              *(_QWORD *)(v17 + 88) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v26 + 64))(v26, v32, (uint64_t)v47 + 32, 0);
              v36 = *(const void **)(v17 + 96);
              *(_QWORD *)(v17 + 104) = v36;
              CFRetain(v36);
              v37 = *(re::ecs2::NetworkComponent **)(v27 + 200);
              if (v37)
                re::ecs2::NetworkComponent::markDirty(v37, (const re::ecs2::Component *)v17);
              goto LABEL_31;
            }
            if (v32)
              goto LABEL_29;
          }
        }
      }
LABEL_34:
      v39 = *(void **)(v17 + 96);
      if (v39)
      {
        if (*(void **)(v21 + 872) != v39)
          re::PhysicsSimulation::setParentClockOrTimebase((re::PhysicsSimulation *)v21, v39);
      }
      else if (*(_QWORD *)(v17 + 88))
      {
        v40 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 96))(v26);
        if (v40)
        {
          v41 = v40;
          re::PhysicsSimulation::setParentClockOrTimebase((re::PhysicsSimulation *)v21, v40);
          CFRelease(v41);
        }
      }
      else
      {
        v42 = *(const void **)(v21 + 872);
        if (v42)
        {
          CFRelease(v42);
          *(_QWORD *)(v21 + 872) = 0;
        }
      }
      goto LABEL_42;
    }
LABEL_46:
    v45 = *(_DWORD *)(a5 + 40) != 0;
  }
  else
  {
    v45 = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v52);
  return v45;
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PhysicsSimulationComponent>::dependsOnComponents()
{
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PhysicsSimulationComponent>::didDependentComponentChange(uint64_t a1, re::ecs2::ComponentBucketsBase **a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PhysicsSimulationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 3;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(a2[2], (unint64_t)a2[v6], v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
      }
      ++v6;
    }
    while (v6 != 7);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::PhysicsJointsComponent>::setComponentState(a2, v11, v7, 0);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PhysicsSimulationComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::PhysicsSimulationComponent>::processUpdatingComponents()
{
  return 0;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::PhysicsSimulationComponent>(uint64_t a1)
{
  id *v2;
  uint64_t v3;

  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v2 = (id *)(a1 + 80);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED68080;
  *(_WORD *)(v3 + 25) = 0;
  *(_BYTE *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0x100000006;
  objc_initWeak(v2, 0);
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  return a1;
}

void re::ecs2::Pin::~Pin(re::ecs2::Pin *this)
{
  *(_QWORD *)this = &off_24ED68168;
  if (*((_BYTE *)this + 176))
    re::StringID::destroyString((re::ecs2::Pin *)((char *)this + 184));
  re::DynamicArray<re::ecs2::PinAlignment>::deinit((uint64_t)this + 96);
  re::StringID::destroyString((re::ecs2::Pin *)((char *)this + 8));
}

{
  re::ecs2::Pin::~Pin(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::Pin::Pin(uint64_t a1, const StringID *a2, _OWORD *a3, _OWORD *a4, unsigned __int8 *a5, _OWORD *a6, uint64_t *a7)
{
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;

  *(_QWORD *)a1 = &off_24ED68168;
  re::StringID::StringID((re::StringID *)(a1 + 8), a2);
  v13 = a3[1];
  *(_OWORD *)(a1 + 32) = *a3;
  *(_OWORD *)(a1 + 48) = v13;
  v14 = a6[1];
  *(_OWORD *)(a1 + 64) = *a6;
  *(_OWORD *)(a1 + 80) = v14;
  re::DynamicArray<re::ecs2::PinAlignment>::DynamicArray(a1 + 96, a7);
  v15 = a4[1];
  *(_OWORD *)(a1 + 144) = *a4;
  *(_OWORD *)(a1 + 160) = v15;
  v16 = *a5;
  *(_BYTE *)(a1 + 176) = v16;
  if (v16)
    re::StringID::StringID((re::StringID *)(a1 + 184), (const StringID *)(a5 + 8));
  return a1;
}

uint64_t *re::ecs2::allocInfo_Pin(re::ecs2 *this)
{
  unsigned __int8 v1;
  _OWORD *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254110418);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254110418))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541104E0, 0);
    *(uint64_t *)((char *)&qword_2541104F0 + 6) = 0;
    qword_2541104F0 = 0;
    qword_254110500 = 0;
    qword_254110508 = 0xFFFFFFFFLL;
    qword_2541104E0 = (uint64_t)&off_24ED7DAA8;
    qword_254110510 = (uint64_t)"Pin";
    dword_254110518 = 0;
    v3[4] = 0u;
    v3[5] = 0u;
    v3[6] = 0u;
    qword_254110550 = 0;
    __cxa_guard_release(&qword_254110418);
  }
  return &qword_2541104E0;
}

void re::ecs2::initInfo_Pin(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  re::IntrospectionRegistry *v21;
  const re::IntrospectionBase *v22;
  const char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  const re::IntrospectionBase *v31;
  uint64_t *v32;
  unsigned __int8 v33;
  _DWORD *v34;
  _DWORD *v35;
  int v36;
  re::IntrospectionRegistry *v37;
  const re::IntrospectionBase *v38;
  const char *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48[2];
  __int128 v49;
  uint64_t v50;
  const char *v51;
  const char *v52;

  v50 = 160490;
  v51 = "Pin";
  re::StringID::destroyString((re::StringID *)&v50);
  *((_OWORD *)this + 2) = v45;
  v4 = atomic_load((unsigned __int8 *)&qword_254110410);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254110410);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v8 = re::IntrospectionInfo<re::StringID>::get(1, v7);
      v9 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v9 = 1;
      *(_QWORD *)(v9 + 8) = "m_name";
      *(_QWORD *)(v9 + 16) = v8;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0x800000001;
      *(_DWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_DWORD *)(v9 + 64) = 0;
      qword_254110430 = v9;
      v10 = re::introspectionAllocator((re *)v9);
      v11 = re::introspect_PoseF((re::IntrospectionBase **)1);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "m_pose";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254110438 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v14 = re::introspect_AABB((re::IntrospectionBase **)1);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "m_box";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x4000000003;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254110440 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v17 = atomic_load((unsigned __int8 *)&qword_254110420);
      if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_254110420))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254110460, 0);
        *(uint64_t *)((char *)&qword_254110470 + 6) = 0;
        qword_254110470 = 0;
        *(_QWORD *)&xmmword_254110480 = 0;
        *((_QWORD *)&xmmword_254110480 + 1) = 0xFFFFFFFFLL;
        qword_254110460 = (uint64_t)&off_24ED1FA08;
        qword_254110498 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_254110490);
        qword_254110460 = (uint64_t)&off_24ED68198;
        __cxa_guard_release(&qword_254110420);
      }
      if ((_MergedGlobals_272 & 1) == 0)
      {
        v18 = re::ecs2::introspect_PinAlignment((re::IntrospectionBase **)1);
        if ((_MergedGlobals_272 & 1) == 0)
        {
          v19 = v18;
          _MergedGlobals_272 = 1;
          v20 = *(_DWORD *)(v18 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254110460, 0);
          qword_254110470 = 0x2800000003;
          dword_254110478 = v20;
          word_25411047C = 0;
          *(_QWORD *)&xmmword_254110480 = 0;
          *((_QWORD *)&xmmword_254110480 + 1) = 0xFFFFFFFFLL;
          qword_254110490 = v19;
          qword_254110498 = 0;
          qword_254110460 = (uint64_t)&off_24ED68198;
          re::IntrospectionRegistry::add(v21, v22);
          re::getPrettyTypeName((re *)&qword_254110460, (const re::IntrospectionBase *)&v50);
          if ((v51 & 1) != 0)
            v23 = v52;
          else
            v23 = (char *)&v51 + 1;
          if (v50 && (v51 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v50 + 40))();
          v47 = *(_OWORD *)(v19 + 32);
          v24 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v48);
          if (v24)
          {
            v25 = *v24;
            *((_QWORD *)&v46 + 1) = v25;
          }
          else
          {
            v49 = v47;
            re::TypeBuilder::beginListType((uint64_t)&v50, v48, 1, 0x28uLL, 8uLL, &v49);
            re::TypeBuilder::setConstructor((uint64_t)&v50, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v50, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v50, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v50, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v50, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v50, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v50, v26);
          }
          xmmword_254110480 = v46;
          re::StringID::destroyString((re::StringID *)v48);
        }
      }
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "m_alignments";
      *(_QWORD *)(v27 + 16) = &qword_254110460;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0x6000000004;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_254110448 = v27;
      v28 = re::introspectionAllocator((re *)v27);
      v29 = re::introspect_PoseF((re::IntrospectionBase **)1);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "m_userOffset";
      *(_QWORD *)(v30 + 16) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x9000000005;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_254110450 = v30;
      v32 = re::introspectionAllocator((re *)v30);
      v33 = atomic_load((unsigned __int8 *)&qword_254110428);
      if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_254110428))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541104A0, 0);
        *(uint64_t *)((char *)&qword_2541104B0 + 6) = 0;
        qword_2541104B0 = 0;
        *(_QWORD *)&xmmword_2541104C0 = 0;
        *((_QWORD *)&xmmword_2541104C0 + 1) = 0xFFFFFFFFLL;
        qword_2541104A0 = (uint64_t)&off_24ED2DDF8;
        qword_2541104D8 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_2541104D0);
        qword_2541104A0 = (uint64_t)&off_24ED68230;
        __cxa_guard_release(&qword_254110428);
      }
      if ((byte_254110409 & 1) == 0)
      {
        v34 = re::IntrospectionInfo<re::StringID>::get(1, v31);
        if ((byte_254110409 & 1) == 0)
        {
          v35 = v34;
          byte_254110409 = 1;
          v36 = v34[6];
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541104A0, 0);
          qword_2541104B0 = 0x180000000DLL;
          *(_DWORD *)algn_2541104B8 = v36;
          *(_WORD *)&algn_2541104B8[4] = 0;
          *(_QWORD *)&xmmword_2541104C0 = 0;
          *((_QWORD *)&xmmword_2541104C0 + 1) = 0xFFFFFFFFLL;
          qword_2541104D0 = v35;
          qword_2541104D8 = 0;
          qword_2541104A0 = (uint64_t)&off_24ED68230;
          re::IntrospectionRegistry::add(v37, v38);
          re::getPrettyTypeName((re *)&qword_2541104A0, (const re::IntrospectionBase *)&v50);
          if ((v51 & 1) != 0)
            v39 = v52;
          else
            v39 = (char *)&v51 + 1;
          if (v50 && (v51 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v50 + 40))();
          v47 = *((_OWORD *)v35 + 2);
          v40 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v48);
          if (v40)
          {
            v41 = *v40;
            *((_QWORD *)&v46 + 1) = v41;
          }
          else
          {
            v49 = v47;
            re::TypeBuilder::beginOptionalType((uint64_t)&v50, v48, 0x18uLL, 8uLL, &v49);
            re::TypeBuilder::setOptionalAccessors((uint64_t)&v50, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v50, v42);
          }
          xmmword_2541104C0 = v46;
          re::StringID::destroyString((re::StringID *)v48);
        }
      }
      v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v32 + 32))(v32, 72, 8);
      *(_DWORD *)v43 = 1;
      *(_QWORD *)(v43 + 8) = "m_skeletalJointName";
      *(_QWORD *)(v43 + 16) = &qword_2541104A0;
      *(_QWORD *)(v43 + 24) = 0;
      *(_QWORD *)(v43 + 32) = 0xB000000006;
      *(_DWORD *)(v43 + 40) = 0;
      *(_QWORD *)(v43 + 48) = 0;
      *(_QWORD *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_254110458 = v43;
      __cxa_guard_release(&qword_254110410);
    }
  }
  *((_QWORD *)this + 2) = 0xD000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((_QWORD *)this + 8) = &qword_254110430;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::Pin>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::Pin>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::Pin>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::Pin>;
  re::IntrospectionRegistry::add(this, v3);
  v44 = v45;
}

double re::internal::defaultConstruct<re::ecs2::Pin>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;
  __int128 v4;

  *(_QWORD *)a3 = &off_24ED68168;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = &str_110;
  result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0x3F80000000000000;
  *(_QWORD *)&v4 = 0x7F0000007FLL;
  *((_QWORD *)&v4 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(a3 + 64) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(a3 + 80) = v4;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_DWORD *)(a3 + 120) = 0;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_QWORD *)(a3 + 160) = 0;
  *(_QWORD *)(a3 + 168) = 0x3F80000000000000;
  *(_BYTE *)(a3 + 176) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::Pin>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::Pin>(uint64_t a1)
{
  double result;
  __int128 v2;

  *(_QWORD *)a1 = &off_24ED68168;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &str_110;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0x3F80000000000000;
  *(_QWORD *)&v2 = 0x7F0000007FLL;
  *((_QWORD *)&v2 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(a1 + 64) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(a1 + 80) = v2;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0x3F80000000000000;
  *(_BYTE *)(a1 + 176) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::Pin>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_Pin(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"Pin", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_Pin, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_Pin, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::Pin>, this);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::PinAlignment>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::PinAlignment>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::PinAlignment>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::PinAlignment>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::PinAlignment>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::PinAlignment>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::ecs2::PinAlignment>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::ecs2::PinAlignment>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::PinAlignment>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::ecs2::PinAlignment>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::ecs2::PinAlignment>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::ecs2::PinAlignment>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::PinAlignment>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  re::IntrospectionBase *v11;

  v8 = *((_QWORD *)this + 2);
  if (v8 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::ecs2::PinAlignment>::growCapacity(this, v8 + 1);
    v8 = *((_QWORD *)this + 2);
  }
  v9 = *((_QWORD *)this + 4) + (v8 << 7);
  *(_BYTE *)v9 = 0;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = 0x3F80000000000000;
  *(_OWORD *)(v9 + 48) = 0u;
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 72) = 0x3F80000000000000;
  *(_BYTE *)(v9 + 80) = 1;
  *(_QWORD *)(v9 + 120) = 0;
  *(_DWORD *)(v9 + 112) = 0;
  *(_QWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 104) = 0;
  *(_QWORD *)(v9 + 88) = 0;
  *(_DWORD *)(v9 + 112) = 1;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v10 + 1;
  ++*((_DWORD *)this + 6);
  v11 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + (v10 << 7));
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v11);
  return v11;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::PinAlignment>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::PinAlignment>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + (a3 << 7);
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + (a3 << 7);
}

_QWORD *re::DynamicArray<re::ecs2::PinAlignment>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = a2 << 7;
    v9 = a2;
    do
    {
      v10 = v3[4];
      v11 = v10 + v8;
      result = *(_QWORD **)(v10 + v8 + 88);
      if (result)
      {
        if (*(_QWORD *)(v11 + 120))
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
        *(_QWORD *)(v11 + 120) = 0;
        *(_QWORD *)(v10 + v8 + 96) = 0;
        *(_QWORD *)(v10 + v8 + 104) = 0;
        *(_QWORD *)(v10 + v8 + 88) = 0;
        ++*(_DWORD *)(v10 + v8 + 112);
        v4 = v3[2];
      }
      ++v9;
      v8 += 128;
    }
    while (v9 < v4);
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::ecs2::PinAlignment>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = (v4 << 7) | 0x78;
      do
      {
        v7 = (_QWORD *)(v3[4] + v6);
        *((_BYTE *)v7 - 120) = 0;
        *(_OWORD *)(v7 - 13) = 0uLL;
        *(v7 - 11) = 0;
        *(v7 - 10) = 0x3F80000000000000;
        *(_OWORD *)(v7 - 9) = 0uLL;
        *(v7 - 7) = 0;
        *(v7 - 6) = 0x3F80000000000000;
        *((_BYTE *)v7 - 40) = 1;
        *v7 = 0;
        *(v7 - 3) = 0;
        *(v7 - 2) = 0;
        *(v7 - 4) = 0;
        v6 += 128;
        *((_DWORD *)v7 - 2) = 0;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::DynamicArray<re::ecs2::PinAlignment>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::ecs2::PinAlignment>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::PinAlignment>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::ecs2::PinAlignment>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::PinAlignment>::clear((_QWORD *)a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::PinAlignment>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::ecs2::PinAlignment>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  v8 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::PinAlignment>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = v9 << 7;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 128;
        v11 -= 128;
      }
      while (v11);
    }
  }
}

_QWORD *re::DynamicArray<re::ecs2::PinAlignment>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = result;
  v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    v3 = v2 << 7;
    v4 = (_QWORD *)(result[4] + 120);
    do
    {
      result = (_QWORD *)*(v4 - 4);
      if (result)
      {
        if (*v4)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
        *v4 = 0;
        *(v4 - 3) = 0;
        *(v4 - 2) = 0;
        *(v4 - 4) = 0;
        ++*((_DWORD *)v4 - 2);
      }
      v4 += 16;
      v3 -= 128;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + (a2 << 7);
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + ((uint64_t)v3 << 7);
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PinAlignment>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionOptional<re::StringID>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::StringID>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::StringID>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::StringID>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::StringID>::setHasValue(uint64_t a1, uint64_t a2, int a3)
{
  re::StringID *v3;
  _QWORD v4[2];
  unsigned __int8 v5[8];
  _QWORD v6[2];

  if (a3)
  {
    v5[0] = 1;
    v6[0] = 0;
    v6[1] = &str_110;
    v4[0] = 0;
    v4[1] = &str_110;
    re::Optional<re::StringID>::operator=(a2, v5);
    if (v5[0])
      re::StringID::destroyString((re::StringID *)v6);
    v3 = (re::StringID *)v4;
  }
  else
  {
    v5[0] = 0;
    re::Optional<re::StringID>::operator=(a2, v5);
    if (!v5[0])
      return;
    v3 = (re::StringID *)v6;
  }
  re::StringID::destroyString(v3);
}

uint64_t re::IntrospectionOptional<re::StringID>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 8;
}

{
  return a2 + 8;
}

uint64_t re::Optional<re::StringID>::operator=(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];

  v3 = *a2;
  if (*(_BYTE *)a1)
    v4 = 0;
  else
    v4 = v3 == 0;
  if (!v4)
  {
    if (*(_BYTE *)a1)
      v5 = v3 == 0;
    else
      v5 = 0;
    if (v5)
    {
      re::StringID::destroyString((re::StringID *)(a1 + 8));
      *(_BYTE *)a1 = 0;
    }
    else
    {
      if (*(_BYTE *)a1)
        v6 = 1;
      else
        v6 = v3 == 0;
      if (v6)
      {
        v7 = *((_QWORD *)a2 + 1);
        v8 = *((_QWORD *)a2 + 2);
        *((_QWORD *)a2 + 1) = 0;
        *((_QWORD *)a2 + 2) = &str_110;
        v9 = *(_QWORD *)(a1 + 8);
        v10 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 8) = v7;
        *(_QWORD *)(a1 + 16) = v8;
        v13[0] = v7 & 0xFFFFFFFFFFFFFFFELL | v9 & 1;
        v13[1] = v10;
        re::StringID::destroyString((re::StringID *)v13);
      }
      else
      {
        *(_BYTE *)a1 = 1;
        v11 = *((_QWORD *)a2 + 1);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
        *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1) & 0xFFFFFFFFFFFFFFFELL | v11 & 1;
        *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
        *((_QWORD *)a2 + 1) = 0;
        *((_QWORD *)a2 + 2) = &str_110;
      }
    }
  }
  return a1;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 8;
  if (!v2)
    return 0;
  return result;
}

void re::TypeBuilderHelper::registerOptional<re::StringID>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(uint64_t a1, const StringID *a2)
{
  unsigned __int8 v3[8];
  _BYTE v4[16];

  if (a2)
  {
    v3[0] = 1;
    re::StringID::StringID((re::StringID *)v4, a2);
    re::Optional<re::StringID>::operator=(a1, v3);
    if (!v3[0])
      return;
  }
  else
  {
    v3[0] = 0;
    re::Optional<re::StringID>::operator=(a1, v3);
    if (!v3[0])
      return;
  }
  re::StringID::destroyString((re::StringID *)v4);
}

void re::ecs2::VideoComponent::applyVideoAttachmentToParameterBlock(uint64_t a1, char **this, re::TextureHandle *a3, re::MaterialParameterBlock *a4, int a5, int a6)
{
  re *isTextureAttachment;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  unsigned __int8 v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  char v53;
  unint64_t v54;
  char v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  char v61;
  int v62;
  _BYTE buf[12];
  __int16 v64;
  char *v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  isTextureAttachment = (re *)re::ecs2::VideoMaterialAttachment::isTextureAttachment((re::ecs2::VideoMaterialAttachment *)this, (const re::StringID *)this);
  v13 = (unint64_t)*this >> 1;
  if (!(_DWORD)isTextureAttachment)
  {
    if (v13 == 0x32970A2E88169C84)
    {
      v21 = this[1];
      if (v21 == "REVideoAttachmentConstantImageFunction"
        || (isTextureAttachment = (re *)strcmp(v21, "REVideoAttachmentConstantImageFunction"),
            !(_DWORD)isTextureAttachment))
      {
        if (a6 == -1)
          return;
        v62 = a6;
        *(_QWORD *)buf = 0x3D3952D14E0320A8;
        v16 = &v42;
LABEL_38:
        re::MaterialParameterBlock::setConstant(a4, (uint64_t *)buf, 4uLL, &v62, 1, (uint64_t)v16);
        return;
      }
    }
    else if (v13 == 0x41C03F11B6A8BA59)
    {
      v15 = this[1];
      if (v15 == "REVideoAttachmentConstantYCbCrMatrix"
        || (isTextureAttachment = (re *)strcmp(v15, "REVideoAttachmentConstantYCbCrMatrix"), !(_DWORD)isTextureAttachment))
      {
        if (a5 == -1)
          return;
        v62 = a5;
        *(_QWORD *)buf = 0x3C8C0FE134EC625DLL;
        v16 = (uint64_t *)&v43;
        goto LABEL_38;
      }
    }
    do
      v22 = __ldaxr((unsigned __int8 *)&re::ecs2::VideoComponent::applyVideoAttachmentToParameterBlock(re::ecs2::Entity *,re::ecs2::VideoMaterialAttachment const&,re::VideoTextureHandles &,re::MaterialParameterBlock &,unsigned int,unsigned int)::__FILE____LINE___logged);
    while (__stlxr(1u, (unsigned __int8 *)&re::ecs2::VideoComponent::applyVideoAttachmentToParameterBlock(re::ecs2::Entity *,re::ecs2::VideoMaterialAttachment const&,re::VideoTextureHandles &,re::MaterialParameterBlock &,unsigned int,unsigned int)::__FILE____LINE___logged));
    if ((v22 & 1) != 0)
      return;
    v23 = *re::graphicsLogObjects(isTextureAttachment);
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      return;
LABEL_26:
    v24 = v23;
    v25 = *(_QWORD *)(a1 + 280);
    v26 = this[1];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v25;
    v64 = 2080;
    v65 = v26;
    _os_log_impl(&dword_224FE9000, v24, OS_LOG_TYPE_DEFAULT, "(%s) Unknown video component attachment \"%s\" encountered; skipping...",
      buf,
      0x16u);

    return;
  }
  if ((unint64_t)*this >> 1 <= 0x52B9782D83821E4FLL)
  {
    if ((unint64_t)*this >> 1 <= 0x489DE5C589B580C7)
    {
      if (v13 == 0x3B652FEC02A9004)
      {
        v34 = *((_QWORD *)a3 + 8);
        v35 = *((_QWORD *)a3 + 9);
        a3 = (re::TextureHandle *)((char *)a3 + 64);
        if (v35 && v34)
        {
          v44 = (unint64_t)this[2] >> 1;
          v19 = &v45;
          v20 = (uint64_t *)&v44;
          goto LABEL_63;
        }
        return;
      }
      if (v13 == 0xAED356CD2DDD3B0)
      {
        v36 = *((_QWORD *)a3 + 21);
        v37 = *((_QWORD *)a3 + 22);
        a3 = (re::TextureHandle *)((char *)a3 + 168);
        if (v37 && v36)
        {
          v46 = (unint64_t)this[2] >> 1;
          v19 = &v47;
          v20 = (uint64_t *)&v46;
          goto LABEL_63;
        }
        return;
      }
      v14 = 0x18BB8A89E24827A1;
LABEL_17:
      if (v13 == v14)
      {
        v17 = *((_QWORD *)a3 + 2);
        v18 = *((_QWORD *)a3 + 3);
        a3 = (re::TextureHandle *)((char *)a3 + 16);
        if (v18 && v17)
        {
          v58 = (unint64_t)this[2] >> 1;
          v19 = &v59;
          v20 = (uint64_t *)&v58;
LABEL_63:
          re::MaterialParameterBlock::setTextureHandle(a4, v20, a3, (uint64_t)v19);
          return;
        }
        return;
      }
      goto LABEL_65;
    }
    if (v13 == 0x489DE5C589B580C8)
    {
LABEL_45:
      if (*((_QWORD *)a3 + 1) && *(_QWORD *)a3)
      {
        v60 = (unint64_t)this[2] >> 1;
        v19 = &v61;
        v20 = (uint64_t *)&v60;
        goto LABEL_63;
      }
      return;
    }
    if (v13 != 0x4B1ED2EBAC5B8AD3)
    {
      v29 = 0x4B1ED2EBAD5AE9A1;
      goto LABEL_41;
    }
LABEL_48:
    v32 = *((_QWORD *)a3 + 4);
    v33 = *((_QWORD *)a3 + 5);
    a3 = (re::TextureHandle *)((char *)a3 + 32);
    if (v33 && v32)
    {
      v56 = (unint64_t)this[2] >> 1;
      v19 = &v57;
      v20 = (uint64_t *)&v56;
      goto LABEL_63;
    }
    return;
  }
  if ((unint64_t)*this >> 1 > 0x7FDCEB30A1A454B0)
  {
    if ((unint64_t)*this >> 1 <= 0x7FDCEB30A1A454B2)
    {
      if (v13 != 0x7FDCEB30A1A454B1)
      {
        v14 = 0x7FDCEB30A1A454B2;
        goto LABEL_17;
      }
      goto LABEL_45;
    }
    if (v13 != 0x7FDCEB30A1A454B3)
    {
      v29 = 0x7FFEDE4BE45ACD2FLL;
LABEL_41:
      if (v13 == v29)
      {
        v30 = *((_QWORD *)a3 + 6);
        v31 = *((_QWORD *)a3 + 7);
        a3 = (re::TextureHandle *)((char *)a3 + 48);
        if (v31 && v30)
        {
          v48 = (unint64_t)this[2] >> 1;
          v19 = &v49;
          v20 = (uint64_t *)&v48;
          goto LABEL_63;
        }
        return;
      }
      goto LABEL_65;
    }
    goto LABEL_48;
  }
  if (v13 == 0x52B9782D83821E50)
  {
    v38 = *((_QWORD *)a3 + 15);
    v39 = *((_QWORD *)a3 + 16);
    a3 = (re::TextureHandle *)((char *)a3 + 120);
    if (v39 && v38)
    {
      v54 = (unint64_t)this[2] >> 1;
      v19 = &v55;
      v20 = (uint64_t *)&v54;
      goto LABEL_63;
    }
    return;
  }
  if (v13 == 0x52B9782D83821E51)
  {
    v40 = *((_QWORD *)a3 + 17);
    v41 = *((_QWORD *)a3 + 18);
    a3 = (re::TextureHandle *)((char *)a3 + 136);
    if (v41 && v40)
    {
      v52 = (unint64_t)this[2] >> 1;
      v19 = &v53;
      v20 = (uint64_t *)&v52;
      goto LABEL_63;
    }
    return;
  }
  if (v13 != 0x52B9782D83821E52)
  {
LABEL_65:
    v23 = *re::graphicsLogObjects(isTextureAttachment);
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      return;
    goto LABEL_26;
  }
  v27 = *((_QWORD *)a3 + 19);
  v28 = *((_QWORD *)a3 + 20);
  a3 = (re::TextureHandle *)((char *)a3 + 152);
  if (v28 && v27)
  {
    v50 = (unint64_t)this[2] >> 1;
    v19 = &v51;
    v20 = (uint64_t *)&v50;
    goto LABEL_63;
  }
}

double re::ecs2::VideoComponent::applyVideoTextureArrayAttachmentToParameterBlock(uint64_t a1, _QWORD *a2, re::TextureHandle *a3, re::MaterialParameterBlock *a4)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  double result;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;

  v4 = *a2 >> 1;
  if (v4 > 0x52B9782D83821E50)
  {
    if (*a2 >> 1 <= 0x7FDCEB30A1A454B0uLL)
    {
      if (v4 == 0x52B9782D83821E51)
      {
        v18 = *((_QWORD *)a3 + 17);
        v19 = *((_QWORD *)a3 + 18);
        a3 = (re::TextureHandle *)((char *)a3 + 136);
        if (v19)
          v20 = v18 == 0;
        else
          v20 = 1;
        if (!v20)
        {
          v24 = 0x434F49B34064CA32;
          v6 = &v25;
          v7 = &v24;
          return re::MaterialParameterBlock::setTextureHandle(a4, v7, a3, (uint64_t)v6);
        }
      }
      else if (v4 == 0x52B9782D83821E52)
      {
        v10 = *((_QWORD *)a3 + 19);
        v11 = *((_QWORD *)a3 + 20);
        a3 = (re::TextureHandle *)((char *)a3 + 152);
        if (v11)
        {
          if (v10)
          {
            v22 = 0x434F49B340653E91;
            v6 = &v23;
            v7 = &v22;
            return re::MaterialParameterBlock::setTextureHandle(a4, v7, a3, (uint64_t)v6);
          }
        }
      }
      return result;
    }
    if (v4 != 0x7FDCEB30A1A454B3)
    {
      if (v4 != 0x7FDCEB30A1A454B2)
      {
        v5 = 0x7FDCEB30A1A454B1;
LABEL_9:
        if (v4 == v5 && *((_QWORD *)a3 + 1) && *(_QWORD *)a3)
        {
          v32 = 0x434F49B3406455B4;
          v6 = &v33;
          v7 = &v32;
          return re::MaterialParameterBlock::setTextureHandle(a4, v7, a3, (uint64_t)v6);
        }
        return result;
      }
      goto LABEL_28;
    }
    goto LABEL_23;
  }
  if (*a2 >> 1 <= 0x4B1ED2EBAC5B8AD2uLL)
  {
    if (v4 != 0x18BB8A89E24827A1)
    {
      v5 = 0x489DE5C589B580C8;
      goto LABEL_9;
    }
LABEL_28:
    v15 = *((_QWORD *)a3 + 2);
    v16 = *((_QWORD *)a3 + 3);
    a3 = (re::TextureHandle *)((char *)a3 + 16);
    if (v16)
      v17 = v15 == 0;
    else
      v17 = 1;
    if (!v17)
    {
      v30 = 0x434F49B34064CA13;
      v6 = &v31;
      v7 = &v30;
      return re::MaterialParameterBlock::setTextureHandle(a4, v7, a3, (uint64_t)v6);
    }
    return result;
  }
  if (v4 == 0x4B1ED2EBAC5B8AD3)
  {
LABEL_23:
    v12 = *((_QWORD *)a3 + 4);
    v13 = *((_QWORD *)a3 + 5);
    a3 = (re::TextureHandle *)((char *)a3 + 32);
    if (v13)
      v14 = v12 == 0;
    else
      v14 = 1;
    if (!v14)
    {
      v28 = 0x434F49B340653E72;
      v6 = &v29;
      v7 = &v28;
      return re::MaterialParameterBlock::setTextureHandle(a4, v7, a3, (uint64_t)v6);
    }
    return result;
  }
  if (v4 == 0x52B9782D83821E50)
  {
    v8 = *((_QWORD *)a3 + 15);
    v9 = *((_QWORD *)a3 + 16);
    a3 = (re::TextureHandle *)((char *)a3 + 120);
    if (v9)
    {
      if (v8)
      {
        v26 = 0x434F49B3406455D3;
        v6 = &v27;
        v7 = &v26;
        return re::MaterialParameterBlock::setTextureHandle(a4, v7, a3, (uint64_t)v6);
      }
    }
  }
  return result;
}

void re::ecs2::VideoComponent::removeVideoAttachmentFromParameterBlock(char **this, const re::ecs2::VideoMaterialAttachment *a2, re::MaterialParameterBlock *a3)
{
  re *isTextureAttachment;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unsigned __int8 v10;
  NSObject *v11;
  NSObject *v12;
  char *v13;
  unint64_t v14;
  _BYTE buf[24];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  isTextureAttachment = (re *)re::ecs2::VideoMaterialAttachment::isTextureAttachment((re::ecs2::VideoMaterialAttachment *)this, a2);
  if ((_DWORD)isTextureAttachment)
  {
    v14 = (unint64_t)this[2] >> 1;
    re::MaterialParameterBlock::removeTexture((uint64_t)a2, (uint64_t *)&v14);
    return;
  }
  v6 = (unint64_t)*this >> 1;
  if (v6 == 0x32970A2E88169C84)
  {
    v9 = this[1];
    if (v9 == "REVideoAttachmentConstantImageFunction"
      || (isTextureAttachment = (re *)strcmp(v9, "REVideoAttachmentConstantImageFunction"), !(_DWORD)isTextureAttachment))
    {
      v8 = 0x3D3952D14E0320A8;
      goto LABEL_15;
    }
  }
  else if (v6 == 0x41C03F11B6A8BA59)
  {
    v7 = this[1];
    if (v7 == "REVideoAttachmentConstantYCbCrMatrix"
      || (isTextureAttachment = (re *)strcmp(v7, "REVideoAttachmentConstantYCbCrMatrix"), !(_DWORD)isTextureAttachment))
    {
      v8 = 0x3C8C0FE134EC625DLL;
LABEL_15:
      *(_QWORD *)buf = v8;
      re::MaterialParameterBlock::removeConstant((uint64_t *)a2, (uint64_t *)buf, 4);
      return;
    }
  }
  do
    v10 = __ldaxr(re::ecs2::VideoComponent::removeVideoAttachmentFromParameterBlock(re::ecs2::VideoMaterialAttachment const&,re::MaterialParameterBlock &)::__FILE____LINE___logged);
  while (__stlxr(1u, re::ecs2::VideoComponent::removeVideoAttachmentFromParameterBlock(re::ecs2::VideoMaterialAttachment const&,re::MaterialParameterBlock &)::__FILE____LINE___logged));
  if ((v10 & 1) == 0)
  {
    v11 = *re::graphicsLogObjects(isTextureAttachment);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v12 = v11;
      v13 = this[1];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v13;
      _os_log_impl(&dword_224FE9000, v12, OS_LOG_TYPE_DEFAULT, "removeVideoAttachmentFromParameterBlock: Unknown video component attachment \"%s\" encountered; skipping...",
        buf,
        0xCu);

    }
  }
}

uint64_t re::ecs2::RemoteEffectsSystemEnabled(re::ecs2 *this)
{
  if (qword_254110560 != -1)
    dispatch_once(&qword_254110560, &__block_literal_global_22);
  return _MergedGlobals_273;
}

void ___ZN2re4ecs226RemoteEffectsSystemEnabledEv_block_invoke(uint64_t a1, const char *a2)
{
  char v2;
  char v3[2];

  re::Defaults::BOOLValue((re::Defaults *)"RemoteEffectsSystemEnabled", a2, v3);
  if (v3[0])
    v2 = v3[1];
  else
    v2 = 1;
  _MergedGlobals_273 = v2;
}

_QWORD *re::ecs2::RemoteEffectsService::cleanUpHoverEffectData(re::ecs2::RemoteEffectsService *this, re::ecs2::Entity *a2)
{
  _QWORD *result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5[3];

  v5[2] = *MEMORY[0x24BDAC8D0];
  result = (_QWORD *)re::ecs2::EntityComponentCollection::get((re::ecs2::RemoteEffectsService *)((char *)this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::EntityFunctionConstantComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v3 = result;
    v4 = (uint64_t)(result + 4);
    MurmurHash3_x64_128((uint64_t)"EnableGlow", 10, 0, (unint64_t *)v5);
    v5[0] ^= v5[1] + (v5[0] << 6) + ((unint64_t)v5[0] >> 2) - 0x61C8864680B583E9;
    re::HashTable<unsigned long long,re::PeerAttributionContext *,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(v4, v5);
    return re::ecs2::Component::markDirty(v3);
  }
  return result;
}

void re::ecs2::RemoteEffectsService::updateAutoFade(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, double a5)
{
  char v7;
  double v9;
  double v10;

  if (*(unsigned __int8 *)(a2 + 129) != a3)
  {
    v7 = a3;
    re::DynamicArray<re::SharedPtr<re::AssetLoadRequest>>::add((_anonymous_namespace_ *)(a1 + 40), a4);
    *(double *)(*a4 + 32) = a5;
    v9 = 0.0;
    if (*(_BYTE *)(a2 + 129))
      v10 = 0.0;
    else
      v10 = 1.0;
    if (*(_BYTE *)(a2 + 129))
      v9 = 1.0;
    re::ecs2::addAnimation(a4, a2 + 136, v10, v9);
    *(_BYTE *)(a2 + 129) = v7;
  }
}

void re::ecs2::addAnimation(uint64_t *a1, uint64_t a2, double a3, double a4)
{
  double v7;
  uint64_t v8;

  v7 = a4 - a3 + *(double *)(a2 + 8);
  *(double *)(a2 + 8) = v7;
  v8 = *a1;
  *(double *)(v8 + 64) = v7;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(v8 + 24), *(_QWORD *)a2);
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)a2, *a1);
  *(double *)(a2 + 24) = a4;
}

double re::ecs2::RemoteEffectsService::updateAnimator(re::ecs2::RemoteEffectsService *a1, double *a2, double a3)
{
  re::ecs2::RemoteEffectAnimationNode *v4;
  BOOL updated;
  uint64_t v7;
  double result;

  v4 = *(re::ecs2::RemoteEffectAnimationNode **)a2;
  if (v4)
  {
    updated = re::ecs2::RemoteEffectsService::updateAnimationNode(a1, a3, v4);
    v7 = *(_QWORD *)a2;
    result = a2[3] + *(double *)(*(_QWORD *)a2 + 80) - a2[1];
    a2[2] = result;
    if (!updated)
    {
      re::DynamicArray<re::SharedPtr<re::ecs2::RemoteEffectAnimationNode>>::remove((uint64_t)a1 + 40, v7);
      if (*(_QWORD *)a2)
      {

        *a2 = 0.0;
      }
      v7 = 0;
      a2[1] = 0.0;
    }
    *((_BYTE *)a2 + 32) = v7 != 0;
  }
  else
  {
    result = a2[3];
    a2[2] = result;
  }
  return result;
}

BOOL re::ecs2::RemoteEffectsService::updateAnimationNode(re::ecs2::RemoteEffectsService *this, double a2, re::ecs2::RemoteEffectAnimationNode *a3)
{
  re::ecs2::RemoteEffectAnimationNode *v5;
  char updated;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float v15;
  _BOOL8 result;

  v5 = (re::ecs2::RemoteEffectAnimationNode *)*((_QWORD *)a3 + 3);
  if (v5)
  {
    updated = re::ecs2::RemoteEffectsService::updateAnimationNode(this, a2, v5);
    v8 = *((_QWORD *)a3 + 3);
    *((_QWORD *)a3 + 7) = *(_QWORD *)(v8 + 80);
    if ((updated & 1) == 0)
    {
      re::DynamicArray<re::SharedPtr<re::ecs2::RemoteEffectAnimationNode>>::remove((uint64_t)this + 40, v8);
      v9 = *((_QWORD *)a3 + 3);
      if (v9)
      {

        *((_QWORD *)a3 + 3) = 0;
      }
    }
  }
  v10 = a2 - *((double *)a3 + 4) - *((double *)a3 + 5);
  v11 = *((double *)a3 + 8);
  v12 = *((double *)a3 + 6);
  if (v10 <= v12)
  {
    v13 = v10 / v12;
    if (v10 / v12 < 1.0)
    {
      v14 = *((double *)a3 + 7);
      if (v13 <= 0.0)
      {
        v11 = *((double *)a3 + 7);
      }
      else
      {
        v15 = re::internal::evaluateCubicBezierEase<double>(**((_QWORD **)a3 + 9), *(_QWORD *)(*((_QWORD *)a3 + 9) + 8), *(_QWORD *)(*((_QWORD *)a3 + 9) + 16), *(_QWORD *)(*((_QWORD *)a3 + 9) + 24), v13, 0.00001);
        v11 = v11 * v15 + v14 * (float)(1.0 - v15);
      }
    }
  }
  result = v10 <= v12;
  *((double *)a3 + 10) = v11;
  return result;
}

void re::DynamicArray<re::SharedPtr<re::ecs2::RemoteEffectAnimationNode>>::remove(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v3 = *(_QWORD **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = &v3[v4];
  v6 = v3;
  if (v4)
  {
    v7 = 8 * v4;
    v6 = *(_QWORD **)(a1 + 32);
    while (*v6 != a2)
    {
      ++v6;
      v7 -= 8;
      if (!v7)
      {
        v6 = &v3[v4];
        break;
      }
    }
  }
  v8 = v6 - v3;
  if (v8 != v4)
  {
    if (v4 <= v8)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v9 = v4 - 1;
    if (v4 - 1 > v8)
    {
      v10 = v3[v8];
      v3[v8] = *(v5 - 1);
      *(v5 - 1) = v10;
      v3 = *(_QWORD **)(a1 + 32);
    }
    v11 = &v3[v4];
    v12 = *(v11 - 1);
    if (v12)
    {

      *(v11 - 1) = 0;
      v9 = *(_QWORD *)(a1 + 16) - 1;
    }
    *(_QWORD *)(a1 + 16) = v9;
    ++*(_DWORD *)(a1 + 24);
  }
}

void re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::remove(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  if (*(_QWORD *)a1)
  {
    v3 = 0x94D049BB133111EBLL
       * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    v4 = (v3 ^ (v3 >> 31)) % *(unsigned int *)(a1 + 24);
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(unsigned int *)(v5 + 4 * v4);
    if ((_DWORD)v6 != 0x7FFFFFFF)
    {
      v7 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v7 + 1536 * v6 + 16) == a2)
      {
        *(_DWORD *)(v5 + 4 * v4) = *(_DWORD *)(v7 + 1536 * v6 + 8) & 0x7FFFFFFF;
LABEL_8:
        v10 = *(_QWORD *)(a1 + 16);
        v11 = v10 + 1536 * v6;
        v14 = *(_DWORD *)(v11 + 8);
        v12 = (int *)(v11 + 8);
        v13 = v14;
        if (v14 < 0)
        {
          *v12 = v13 & 0x7FFFFFFF;
          v15 = v10 + 1536 * v6;
          v18 = *(_QWORD *)(v15 + 16);
          v17 = (_QWORD *)(v15 + 16);
          v16 = v18;
          if (v18)
          {

            *v17 = 0;
          }
        }
        v19 = *(_QWORD *)(a1 + 16) + 1536 * v6;
        v20 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)(v19 + 8) = *(_DWORD *)(v19 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
        --*(_DWORD *)(a1 + 28);
        *(_DWORD *)(a1 + 36) = v6;
        *(_DWORD *)(a1 + 40) = v20 + 1;
      }
      else
      {
        while (1)
        {
          v8 = v6;
          v9 = *(_DWORD *)(v7 + 1536 * v6 + 8);
          v6 = v9 & 0x7FFFFFFF;
          if ((v9 & 0x7FFFFFFF) == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v7 + 1536 * v6 + 16) == a2)
          {
            *(_DWORD *)(v7 + 1536 * v8 + 8) = *(_DWORD *)(v7 + 1536 * v8 + 8) & 0x80000000 | *(_DWORD *)(v7 + 1536 * v6 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
}

void ___ZN2re4ecs220RemoteEffectsService20setUpHoverEffectDataERNS0_22RemoteEffectHoverStateE_block_invoke(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t i;
  _BYTE *v13;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  float v34;
  const double *v35;
  float64x2_t v36;
  float64x2_t v37;
  uint64_t v38;
  int v39;
  double v40;
  float v41;
  int v42;
  char v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  int v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  unint64_t v62;
  _BYTE v63[1432];
  int v64;
  char v65;
  int v66;
  __int128 v67;
  uint64_t v68;
  int v69;
  __int16 v70;
  char v71;
  int v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a2 + 176))
    return;
  v4 = *(_QWORD *)(a1 + 208);
  v62 = a2;
  v5 = (void *)(a2 + 8);
  v6 = (id)(a2 + 8);
  v7 = *(_QWORD *)(v4 + 80);
  v8 = a2 ^ (a2 >> 30);
  if (v7)
  {
    v9 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v8) ^ ((0xBF58476D1CE4E5B9 * v8) >> 27));
    v10 = *(unsigned int *)(*(_QWORD *)(v4 + 88) + 4 * ((v9 ^ (v9 >> 31)) % *(unsigned int *)(v4 + 104)));
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v24 = *(_QWORD *)(v4 + 96);
      v25 = *(_QWORD *)(v24 + 1536 * v10 + 16);
      if (v25 == a2)
      {
LABEL_31:
        v31 = v24 + 1536 * v10 + 32;
        goto LABEL_32;
      }
      v26 = v10;
      while (1)
      {
        LODWORD(v26) = *(_DWORD *)(v24 + 1536 * v26 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v26 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v24 + 1536 * v26 + 16) == a2)
        {
          if (v25 != a2)
          {
            while (1)
            {
              LODWORD(v10) = *(_DWORD *)(v24 + 1536 * v10 + 8) & 0x7FFFFFFF;
              if ((_DWORD)v10 == 0x7FFFFFFF)
                break;
              if (*(_QWORD *)(v24 + 1536 * v10 + 16) == a2)
                goto LABEL_31;
            }
            LODWORD(v10) = 0x7FFFFFFF;
          }
          goto LABEL_31;
        }
      }
    }
  }
  v11 = *(_DWORD *)(*(_QWORD *)(a1 + 216) + 488);
  bzero(v63, 0x5E0uLL);
  for (i = 0; i != 1408; i += 176)
  {
    v13 = &v63[i];
    *((_DWORD *)v13 + 16) = 0;
    *((_OWORD *)v13 + 7) = xmmword_226127D60;
    v13[128] = 0;
    *((_DWORD *)v13 + 33) = 0;
    v13[136] = 0;
    v13[160] = 0;
  }
  v64 = 0;
  v65 = 1;
  v66 = 0;
  __asm { FMOV            V0.4S, #1.0 }
  v67 = _Q0;
  v68 = 0;
  v69 = 0;
  v70 = 1;
  v71 = 0;
  v72 = v11;
  v73 = 0;
  v19 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v8) ^ ((0xBF58476D1CE4E5B9 * v8) >> 27));
  v20 = v19 ^ (v19 >> 31);
  if (v7)
  {
    v21 = v20 % *(unsigned int *)(v4 + 104);
    v22 = *(unsigned int *)(*(_QWORD *)(v4 + 88) + 4 * v21);
    if ((_DWORD)v22 != 0x7FFFFFFF)
    {
      v23 = *(_QWORD *)(v4 + 96);
      if (*(_QWORD *)(v23 + 1536 * v22 + 16) == a2)
        goto LABEL_22;
      while (1)
      {
        LODWORD(v22) = *(_DWORD *)(v23 + 1536 * v22 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v22 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v23 + 1536 * v22 + 16) == a2)
          goto LABEL_22;
      }
    }
  }
  else
  {
    LODWORD(v21) = 0;
  }
  re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::addAsMove(v4 + 80, v21, v20, (uint64_t *)&v62, v63);
  ++*(_DWORD *)(v4 + 120);
  if (!*(_QWORD *)(v4 + 80))
  {
LABEL_27:
    v28 = 0x7FFFFFFF;
    goto LABEL_29;
  }
LABEL_22:
  v27 = *(_DWORD *)(*(_QWORD *)(v4 + 88) + 4 * (v20 % *(unsigned int *)(v4 + 104)));
  v28 = 0x7FFFFFFF;
  if (v27 != 0x7FFFFFFF)
  {
    v29 = *(_QWORD *)(v4 + 96);
    if (*(_QWORD *)(v29 + 1536 * v27 + 16) == a2)
    {
      v28 = *(_DWORD *)(*(_QWORD *)(v4 + 88) + 4 * (v20 % *(unsigned int *)(v4 + 104)));
      goto LABEL_29;
    }
    do
    {
      v28 = *(_DWORD *)(v29
                      + 1536 * *(unsigned int *)(*(_QWORD *)(v4 + 88) + 4 * (v20 % *(unsigned int *)(v4 + 104)))
                      + 8) & 0x7FFFFFFF;
      if (v28 == 0x7FFFFFFF)
        goto LABEL_27;
    }
    while (*(_QWORD *)(v29 + 1536 * v28 + 16) != a2);
  }
LABEL_29:
  v30 = *(_QWORD *)(v4 + 96) + 1536 * v28;
  v31 = v30 + 32;
  *(_BYTE *)(v30 + 1468) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(v30 + 1456) = _D0;
  *(_OWORD *)(v30 + 1440) = xmmword_22610BC10;
LABEL_32:
  if (!*(_BYTE *)(v31 + 1492))
    *(_DWORD *)(v31 + 1432) = 0;
  v33 = *(_QWORD *)(a1 + 216);
  v34 = *(double *)(v33 + 112) * *(float *)(v33 + 492);
  *(float *)(v31 + 1440) = v34;
  v35 = (const double *)(v4 + 184);
  v36 = vld1q_dup_f64(v35);
  v37 = vsubq_f64(v36, *(float64x2_t *)(v33 + 72));
  *(float32x2_t *)(v31 + 1472) = vcvt_f32_f64(v37);
  v37.f64[0] = *(float64_t *)(v33 + 320);
  LODWORD(v37.f64[1]) = *(_DWORD *)(v33 + 328);
  *(float64x2_t *)(v31 + 1456) = v37;
  v38 = *(_QWORD *)(a1 + 216);
  v39 = *(_DWORD *)(v38 + 488);
  v40 = 0.100000001;
  if (v39 != 2)
    v40 = 0.0;
  v41 = v40 * v34;
  *(float *)(v31 + 1480) = v41;
  *(_BYTE *)(v31 + 1484) = v39 != 1;
  v42 = *(unsigned __int8 *)(v38 + 512);
  if (v42 == 2)
    v43 = 2;
  else
    v43 = v42 == 1;
  *(_BYTE *)(v31 + 1486) = v43;
  if (*(_DWORD *)(v31 + 1488) == 1)
  {
    v44 = *(_OWORD *)(a1 + 32);
    v45 = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v31 + 16) = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v31 + 32) = v45;
    *(_OWORD *)v31 = v44;
    v46 = *(_OWORD *)(a1 + 80);
    v47 = *(_OWORD *)(a1 + 96);
    v48 = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(v31 + 80) = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(v31 + 96) = v48;
    *(_OWORD *)(v31 + 48) = v46;
    *(_OWORD *)(v31 + 64) = v47;
    v49 = *(_OWORD *)(a1 + 144);
    v50 = *(_OWORD *)(a1 + 160);
    v51 = *(_OWORD *)(a1 + 176);
    *(_BYTE *)(v31 + 160) = *(_BYTE *)(a1 + 192);
    *(_OWORD *)(v31 + 128) = v50;
    *(_OWORD *)(v31 + 144) = v51;
    *(_OWORD *)(v31 + 112) = v49;
    *(_DWORD *)(v31 + 1432) = 1;
  }
  else
  {
    v52 = *(_DWORD *)(v31 + 1432);
    if (v52 <= 7)
    {
      *(_DWORD *)(v31 + 1432) = v52 + 1;
      v53 = v31 + 176 * v52;
      v54 = *(_OWORD *)(a1 + 32);
      v55 = *(_OWORD *)(a1 + 64);
      *(_OWORD *)(v53 + 16) = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(v53 + 32) = v55;
      *(_OWORD *)v53 = v54;
      v56 = *(_OWORD *)(a1 + 80);
      v57 = *(_OWORD *)(a1 + 96);
      v58 = *(_OWORD *)(a1 + 128);
      *(_OWORD *)(v53 + 80) = *(_OWORD *)(a1 + 112);
      *(_OWORD *)(v53 + 96) = v58;
      *(_OWORD *)(v53 + 48) = v56;
      *(_OWORD *)(v53 + 64) = v57;
      v59 = *(_OWORD *)(a1 + 144);
      v60 = *(_OWORD *)(a1 + 160);
      v61 = *(_OWORD *)(a1 + 176);
      *(_BYTE *)(v53 + 160) = *(_BYTE *)(a1 + 192);
      *(_OWORD *)(v53 + 128) = v60;
      *(_OWORD *)(v53 + 144) = v61;
      *(_OWORD *)(v53 + 112) = v59;
    }
  }
  *(_BYTE *)(v31 + 1492) = 1;
  if (a2)

}

void re::ecs2::RemoteEffectsService::applyHitTestData(re *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  _BOOL4 v12;
  const char *v13;
  uint64_t v14;
  NSObject *v16;
  _QWORD *v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  _anonymous_namespace_ *v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  int v29;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  double v38;
  int v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  NSObject *v48;
  double v49;
  int v50;
  _QWORD *v51;
  uint8_t buf[4];
  _QWORD *v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a2 + 16))
    goto LABEL_14;
  if (qword_254110560 != -1)
    dispatch_once(&qword_254110560, &__block_literal_global_22);
  if (!_MergedGlobals_273)
  {
LABEL_14:
    if (qword_254110578 != -1)
      dispatch_once(&qword_254110578, &__block_literal_global_10);
    if (!byte_254110559)
      return;
    if (qword_254110560 != -1)
      dispatch_once(&qword_254110560, &__block_literal_global_22);
    v10 = _MergedGlobals_273;
    v11 = *re::remoteEffectsLogObjects(a1);
    v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (!v12)
        return;
      *(_WORD *)buf = 0;
      v13 = "applyHitTestData() early out - targetEntity is null";
    }
    else
    {
      if (!v12)
        return;
      *(_WORD *)buf = 0;
      v13 = "applyHitTestData() early out - RemoteEffectsSystem disabled";
    }
LABEL_62:
    _os_log_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEFAULT, v13, buf, 2u);
    return;
  }
  v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(_QWORD *)(a2 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (!v4)
    goto LABEL_22;
  v5 = v4;
  if (qword_254110578 != -1)
    dispatch_once(&qword_254110578, &__block_literal_global_10);
  if (byte_254110559)
  {
    v6 = *re::remoteEffectsLogObjects((re *)v4);
    v4 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v4)
    {
      v7 = v6;
      v8 = *(_DWORD *)(v5 + 104);
      *(_DWORD *)buf = 67109120;
      LODWORD(v53) = v8;
      _os_log_impl(&dword_224FE9000, v7, OS_LOG_TYPE_DEFAULT, "applyHitTestData() - component version: %d", buf, 8u);

    }
  }
  if (!*(_DWORD *)(v5 + 104))
  {
LABEL_22:
    v14 = *(_QWORD *)(a2 + 16);
    if (v14)
    {
      v9 = 0;
      while (1)
      {
        v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v14 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v4)
        {
          if (*(_BYTE *)(v4 + 46))
            v9 = v14;
          if (*(_DWORD *)(v4 + 104) && v9 != 0)
            goto LABEL_35;
        }
        v14 = *(_QWORD *)(v14 + 24);
        if (!v14 || (*(_BYTE *)(v14 + 288) & 0x80) != 0)
          goto LABEL_34;
      }
    }
    goto LABEL_55;
  }
  if (!*(_BYTE *)(v5 + 46))
    goto LABEL_55;
  v9 = *(_QWORD *)(a2 + 16);
LABEL_34:
  if (!v9)
  {
LABEL_55:
    if (qword_254110578 != -1)
      dispatch_once(&qword_254110578, &__block_literal_global_10);
    if (!byte_254110559)
      return;
    v11 = *re::remoteEffectsLogObjects((re *)v4);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v13 = "applyHitTestData() early out - did not find activeEntity";
    goto LABEL_62;
  }
LABEL_35:
  if (qword_254110578 != -1)
    dispatch_once(&qword_254110578, &__block_literal_global_10);
  if (byte_254110559)
  {
    v16 = *re::remoteEffectsLogObjects((re *)v4);
    v4 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if ((_DWORD)v4)
    {
      v17 = *(_QWORD **)(v9 + 296);
      v18 = *(float *)a2;
      v19 = *(float *)(a2 + 4);
      v20 = *(float *)(a2 + 8);
      *(_DWORD *)buf = 134218752;
      v53 = v17;
      v54 = 2048;
      v55 = v18;
      v56 = 2048;
      v57 = v19;
      v58 = 2048;
      v59 = v20;
      _os_log_impl(&dword_224FE9000, v16, OS_LOG_TYPE_DEFAULT, "applyHitTestData() - found activeEntity %llu - position: %f, %f, %f", buf, 0x2Au);
    }
  }
  v21 = *((_QWORD *)a1 + 2);
  if (v21)
  {
    v22 = *((_QWORD *)a1 + 4);
    while (1)
    {
      v23 = *(_QWORD **)v22;
      if (*(_QWORD *)(*(_QWORD *)v22 + 480) == v9 && *((unsigned __int8 *)v23 + 513) == *(unsigned __int8 *)(a2 + 96))
        break;
      v22 += 8;
      if (!--v21)
        goto LABEL_45;
    }
    if (qword_254110578 != -1)
      dispatch_once(&qword_254110578, &__block_literal_global_10);
    if (byte_254110559)
    {
      v48 = *re::remoteEffectsLogObjects((re *)v4);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        v49 = *(double *)(v9 + 296);
        v50 = *(unsigned __int8 *)(a2 + 96);
        *(_DWORD *)buf = 134218496;
        v53 = v23;
        v54 = 2048;
        v55 = v49;
        v56 = 1024;
        LODWORD(v57) = v50;
        _os_log_impl(&dword_224FE9000, v48, OS_LOG_TYPE_DEFAULT, "findOrCreateHoverStateAndUpdateHitTestData() - found existing state %p for entity: %llu; source: %d",
          buf,
          0x1Cu);
      }
    }
  }
  else
  {
LABEL_45:
    v24 = re::globalAllocators((re *)v4);
    v23 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24[2] + 32))(v24[2], 528, 16);
    bzero(v23, 0x210uLL);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v23, 0);
    *v23 = &off_24ED68438;
    v23[6] = 0;
    v23[7] = 0;
    *((_BYTE *)v23 + 64) = 0;
    v23[9] = 0;
    v23[10] = 0;
    *((_OWORD *)v23 + 6) = 0u;
    *((_WORD *)v23 + 64) = 0;
    *((_BYTE *)v23 + 130) = 0;
    v23[17] = 0;
    *((_BYTE *)v23 + 168) = 0;
    v23[22] = 0;
    *((_BYTE *)v23 + 208) = 0;
    *((_BYTE *)v23 + 216) = 0;
    *((_BYTE *)v23 + 224) = 0;
    *((_BYTE *)v23 + 232) = 0;
    *((_BYTE *)v23 + 240) = 0;
    *((_BYTE *)v23 + 313) = 0;
    *(_QWORD *)((char *)v23 + 325) = 0;
    v23[40] = 0;
    *(_QWORD *)&v26 = 0x7F0000007FLL;
    *((_QWORD *)&v26 + 1) = 0x7F0000007FLL;
    *((int32x4_t *)v23 + 21) = vdupq_n_s32(0x7F800000u);
    *((_OWORD *)v23 + 22) = v26;
    *((_OWORD *)v23 + 23) = 0u;
    *((_BYTE *)v23 + 457) = 0;
    *((_BYTE *)v23 + 465) = 0;
    v51 = v23;
    re::DynamicArray<re::SharedPtr<re::AssetLoadRequest>>::add(a1, (uint64_t *)&v51);
    v27 = *(_BYTE *)(a2 + 96);
    v23[60] = v9;
    *((_BYTE *)v23 + 513) = v27;
    *((_BYTE *)v23 + 120) = 1;
    *((_DWORD *)v23 + 122) = 0;
    *(_WORD *)((char *)v23 + 129) = 0;
    v23[24] = 0;
    v23[25] = 0;
    v28 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v9 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RemoteEffectsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v28)
    {
      v29 = *(_DWORD *)(v28 + 40);
      *((_DWORD *)v23 + 122) = v29;
      *((_DWORD *)v23 + 123) = *(_DWORD *)(v28 + 64);
      __asm { FMOV            V0.2S, #1.0 }
      v23[40] = _D0;
      *((_DWORD *)v23 + 82) = 1065353216;
      *((_BYTE *)v23 + 332) = 0;
      *((_BYTE *)v23 + 496) = *(_BYTE *)(v28 + 45);
      *((_BYTE *)v23 + 512) = *(_BYTE *)(v28 + 44);
      *((_BYTE *)v23 + 128) = *(_BYTE *)(v28 + 47);
      v34 = *(_QWORD *)(v28 + 80);
      v23[27] = *(_QWORD *)(v28 + 72);
      *((_BYTE *)v23 + 224) = v34;
      v35 = *(_QWORD *)(v28 + 96);
      v23[29] = *(_QWORD *)(v28 + 88);
      *((_BYTE *)v23 + 240) = v35;
      if ((v29 | 2) == 2)
      {
        v36 = *(_QWORD *)(v28 + 56);
        v23[40] = *(_QWORD *)(v28 + 48);
        *((_DWORD *)v23 + 82) = v36;
        *((_BYTE *)v23 + 332) = BYTE4(v36);
      }
    }
    if (qword_254110578 != -1)
      dispatch_once(&qword_254110578, &__block_literal_global_10);
    if (byte_254110559)
    {
      v37 = *re::remoteEffectsLogObjects((re *)v28);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        v38 = *(double *)(v9 + 296);
        v39 = *(unsigned __int8 *)(a2 + 96);
        *(_DWORD *)buf = 134218496;
        v53 = v23;
        v54 = 2048;
        v55 = v38;
        v56 = 1024;
        LODWORD(v57) = v39;
        _os_log_impl(&dword_224FE9000, v37, OS_LOG_TYPE_DEFAULT, "findOrCreateHoverStateAndUpdateHitTestData() - initializing new state %p for entity: %llu; source: %d",
          buf,
          0x1Cu);
      }
    }

  }
  v40 = *(_OWORD *)(a2 + 48);
  v41 = *(_OWORD *)(a2 + 64);
  v42 = *(_OWORD *)(a2 + 80);
  *((_WORD *)v23 + 232) = *(_WORD *)(a2 + 96);
  v43 = *(_OWORD *)(a2 + 16);
  v44 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v23 + 23) = *(_OWORD *)a2;
  *((_OWORD *)v23 + 24) = v43;
  *((_OWORD *)v23 + 27) = v41;
  *((_OWORD *)v23 + 28) = v42;
  *((_OWORD *)v23 + 25) = v44;
  *((_OWORD *)v23 + 26) = v40;
  *((_BYTE *)v23 + 465) = 1;
  v45 = *(_OWORD *)(a2 + 32);
  v46 = *(_OWORD *)(a2 + 48);
  v47 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)((char *)v23 + 298) = *(_OWORD *)(a2 + 74);
  *((_OWORD *)v23 + 17) = v46;
  *((_OWORD *)v23 + 18) = v47;
  *((_OWORD *)v23 + 16) = v45;
}

void re::ecs2::RemoteEffectsService::invalidateHitTestData(re::ecs2::RemoteEffectsService *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  if (qword_254110560 != -1)
    dispatch_once(&qword_254110560, &__block_literal_global_22);
  if (_MergedGlobals_273)
  {
    v2 = *((_QWORD *)this + 2);
    if (v2)
    {
      v3 = (uint64_t *)*((_QWORD *)this + 4);
      do
      {
        v4 = *v3++;
        *(_BYTE *)(v4 + 465) = 0;
        --v2;
      }
      while (v2);
    }
  }
}

uint64_t re::ecs2::RemoteEffectsService::onEntityRemoved(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  int v19;
  uint64_t *v20;

  v20 = 0;
  v17[1] = 0;
  v18 = 0;
  v17[0] = 0;
  v19 = 0;
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *(uint64_t **)(a1 + 32);
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      v16 = v7;
      v8 = (id)(v7 + 8);
      if (*(_QWORD *)(v7 + 480) == a2)
        re::DynamicArray<re::SharedPtr<re::AssetLoadRequest>>::add((_anonymous_namespace_ *)v17, &v16);

      ++v5;
      v6 -= 8;
    }
    while (v6);
    if (v18)
    {
      v9 = v20;
      v10 = 8 * v18;
      do
      {
        v11 = *v9;
        if (*v9)
        {
          v12 = (id)(v11 + 8);
          re::DynamicArray<re::SharedPtr<re::ecs2::RemoteEffectAnimationNode>>::remove(a1, v11);

        }
        else
        {
          re::DynamicArray<re::SharedPtr<re::ecs2::RemoteEffectAnimationNode>>::remove(a1, 0);
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
  }
  v13 = a1 + 80;
  if (a2)
  {
    v14 = (id)(a2 + 8);
    re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::remove(v13, a2);

  }
  else
  {
    re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::remove(v13, 0);
  }
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v17);
  return 0;
}

uint64_t re::ecs2::RemoteEffectsSystem::willAddSystemToECSService(re::ecs2::RemoteEffectsSystem *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::ecs2::RemoteEffectsService>(v2);
  *((_QWORD *)this + 13) = result;
  return result;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ecs2::RemoteEffectsService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ecs2::RemoteEffectsService>(void)::info = re::internal::getOrCreateInfo((re::internal *)"RemoteEffectsService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RemoteEffectsService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RemoteEffectsService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RemoteEffectsService>, 0);
  }
  v3 = re::introspect<re::ecs2::RemoteEffectsService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

void re::ecs2::RemoteEffectsSystem::willRemoveSystemFromECSService(re::ecs2::RemoteEffectsSystem *this, re::ecs2::Entity *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    v4 = *(unsigned int *)(v2 + 112);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = (_DWORD *)(*(_QWORD *)(v2 + 96) + 8);
      while ((*v6 & 0x80000000) == 0)
      {
        v6 += 384;
        if (v4 == ++v5)
        {
          LODWORD(v5) = *(_DWORD *)(v2 + 112);
          break;
        }
      }
    }
    else
    {
      LODWORD(v5) = 0;
    }
    if ((_DWORD)v4 != (_DWORD)v5)
    {
      v7 = v5;
      do
      {
        re::ecs2::RemoteEffectsService::cleanUpHoverEffectData(*(re::ecs2::RemoteEffectsService **)(*(_QWORD *)(v2 + 96) + 1536 * v7 + 16), a2);
        v8 = *(_DWORD *)(v2 + 112);
        if (v8 <= (int)v5 + 1)
          v9 = v5 + 1;
        else
          v9 = *(_DWORD *)(v2 + 112);
        v10 = v5;
        while (1)
        {
          v7 = (v10 + 1);
          if (v9 - 1 == v10)
            break;
          ++v10;
          LODWORD(v5) = v7;
          if ((*(_DWORD *)(*(_QWORD *)(v2 + 96) + 1536 * v7 + 8) & 0x80000000) != 0)
            goto LABEL_18;
        }
        LODWORD(v5) = v9;
LABEL_18:
        ;
      }
      while (v8 != (_DWORD)v5);
    }
    v11 = *(_QWORD *)(v2 + 56);
    *(_QWORD *)(v2 + 56) = 0;
    if (v11)
    {
      v12 = *(_QWORD *)(v2 + 72);
      v13 = 8 * v11;
      do
      {
        if (*(_QWORD *)v12)
        {

          *(_QWORD *)v12 = 0;
        }
        v12 += 8;
        v13 -= 8;
      }
      while (v13);
    }
    ++*(_DWORD *)(v2 + 64);
    *((_QWORD *)this + 13) = 0;
  }
}

_anonymous_namespace_ *re::ecs2::RemoteEffectsSystem::willAddSceneToECSService(_anonymous_namespace_ *this, unint64_t a2)
{
  uint64_t v2;
  re::EventBus *v4;
  re *v5;
  _QWORD *v6;
  unint64_t v7;
  __n128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  _QWORD v15[3];
  int v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE v19[24];
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 13);
  if (!v2)
    return this;
  v17 = 0;
  v18 = a2;
  v4 = *(re::EventBus **)(a2 + 288);
  v15[1] = 0;
  v15[2] = 0;
  v16 = 0;
  v5 = (re *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(v15, 8uLL);
  ++v16;
  v20 = re::globalAllocators(v5)[2];
  v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v20 + 32))(v20, 32, 0);
  *v6 = &off_24ED68398;
  v6[1] = v2;
  v6[2] = re::ecs2::RemoteEffectsService::onEntityRemoved;
  v6[3] = 0;
  v21 = v6;
  v14.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v4, (uint64_t)v19, 0, 0);
  v14.n128_u64[1] = v7;
  v8 = re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v15, &v14);
  if (v21)
  {
    (**(void (***)(_BYTE *, __n128))v21)(v21, v8);
    if (v21 != v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 40))(v20);
    v21 = 0;
  }
  v9 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v10 = v9 ^ (v9 >> 31);
  if (*(_QWORD *)(v2 + 128))
  {
    v11 = v10 % *(unsigned int *)(v2 + 152);
    v12 = *(unsigned int *)(*(_QWORD *)(v2 + 136) + 4 * v11);
    if ((_DWORD)v12 != 0x7FFFFFFF)
    {
      v13 = *(_QWORD *)(v2 + 144);
      if (*(_QWORD *)(v13 + (v12 << 6) + 16) == a2)
        goto LABEL_14;
      while (1)
      {
        v12 = *(_DWORD *)(v13 + (v12 << 6) + 8) & 0x7FFFFFFF;
        if ((_DWORD)v12 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v13 + (v12 << 6) + 16) == a2)
          goto LABEL_14;
      }
    }
  }
  else
  {
    LODWORD(v11) = 0;
  }
  re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addAsMove(v2 + 128, v11, v10, &v18, (uint64_t)v15);
  ++*(_DWORD *)(v2 + 168);
LABEL_14:
  this = (_anonymous_namespace_ *)v15[0];
  if (v15[0])
  {
    if (v17)
      return (_anonymous_namespace_ *)(*(uint64_t (**)(__n128))(*(_QWORD *)v15[0] + 40))(v8);
  }
  return this;
}

uint64_t re::ecs2::RemoteEffectsSystem::willRemoveSceneFromECSService(uint64_t this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v2 = *(_QWORD *)(this + 104);
  if (v2)
  {
    v14 = a2;
    v3 = v2 + 128;
    if (*(_QWORD *)(v2 + 128))
    {
      v4 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
      v5 = *(unsigned int *)(*(_QWORD *)(v2 + 136) + 4 * ((v4 ^ (v4 >> 31)) % *(unsigned int *)(v2 + 152)));
      if ((_DWORD)v5 != 0x7FFFFFFF)
      {
        v6 = *(_QWORD *)(a2 + 288);
        v7 = *(_QWORD *)(v2 + 144);
        if (*(_QWORD *)(v7 + (v5 << 6) + 16) == a2)
        {
LABEL_7:
          v8 = v7 + (v5 << 6);
          v9 = *(_QWORD *)(v8 + 40);
          if (v9)
          {
            v10 = *(uint64_t **)(v8 + 56);
            v11 = &v10[2 * v9];
            do
            {
              v12 = *v10;
              v13 = v10[1];
              v10 += 2;
              re::EventBus::unsubscribe(v6, v12, v13);
            }
            while (v10 != v11);
          }
          return re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(v3, (uint64_t *)&v14);
        }
        else
        {
          while (1)
          {
            v5 = *(_DWORD *)(v7 + (v5 << 6) + 8) & 0x7FFFFFFF;
            if ((_DWORD)v5 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v7 + (v5 << 6) + 16) == a2)
              goto LABEL_7;
          }
        }
      }
    }
  }
  return this;
}

void re::ecs2::RemoteEffectsSystem::update(_anonymous_namespace_ *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  re *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  __int32 v24;
  uint64_t v25;
  double v26;
  int v27;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  uint64_t *v32;
  uint64_t v33;
  double v34;
  _QWORD *v35;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  _BOOL8 v39;
  double v40;
  float32x4_t v41;
  NSObject *v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  re *v47;
  __int128 v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float32x4_t v53;
  double v54;
  unsigned int v55;
  unsigned int v56;
  float32x4_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  __guard *v67;
  __guard *v68;
  uint64_t v69;
  _QWORD **v70;
  _QWORD *v71;
  uint64_t v72;
  re::ecs2::Component *v73;
  re::ecs2::Component *v74;
  re::ecs2::Entity *v75;
  BOOL v76;
  uint64_t v78;
  re *v79;
  uint64_t v80;
  unint64_t i;
  uint64_t v82;
  uint64_t *v83;
  _anonymous_namespace_ *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  id v90;
  unsigned int v91;
  int v92;
  int v93;
  unint64_t *v94;
  uint64_t v95;
  unint64_t v96;
  id v97;
  re::ecs2::Entity *v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  uint64_t v103;
  _QWORD v104[2];
  uint64_t v105;
  int v106;
  unint64_t *v107;
  _QWORD v108[2];
  uint64_t v109;
  int v110;
  uint64_t *v111;
  uint64_t v112;
  _QWORD v113[4];
  float32x4_t buf[94];
  _OWORD __dst[93];
  uint64_t v116;
  simd_float4x4 v117;
  simd_float4x4 v118;

  v116 = *MEMORY[0x24BDAC8D0];
  if (qword_254110560 != -1)
    dispatch_once(&qword_254110560, &__block_literal_global_22);
  if (_MergedGlobals_273)
  {
    v5 = *((_QWORD *)a1 + 13);
    if (v5)
    {
      *(double *)(v5 + 184) = *(double *)(v5 + 184) + *(float *)&a3;
      v6 = *(unsigned int *)(v5 + 112);
      if ((_DWORD)v6)
      {
        v7 = 0;
        v8 = (_DWORD *)(*(_QWORD *)(v5 + 96) + 8);
        while ((*v8 & 0x80000000) == 0)
        {
          v8 += 384;
          if (v6 == ++v7)
          {
            LODWORD(v7) = *(_DWORD *)(v5 + 112);
            break;
          }
        }
      }
      else
      {
        LODWORD(v7) = 0;
      }
      if ((_DWORD)v6 != (_DWORD)v7)
      {
        v9 = v7;
        do
        {
          *(_BYTE *)(*(_QWORD *)(v5 + 96) + 1536 * v9 + 1524) = 0;
          if (v6 <= (int)v7 + 1)
            v10 = v7 + 1;
          else
            v10 = v6;
          v11 = v7;
          while (1)
          {
            v9 = (v11 + 1);
            if (v10 - 1 == v11)
              break;
            ++v11;
            LODWORD(v7) = v9;
            if ((*(_DWORD *)(*(_QWORD *)(v5 + 96) + 1536 * v9 + 8) & 0x80000000) != 0)
              goto LABEL_21;
          }
          LODWORD(v7) = v10;
LABEL_21:
          ;
        }
        while ((_DWORD)v6 != (_DWORD)v7);
      }
      v12 = *(_QWORD *)(v5 + 16);
      v111 = 0;
      v108[1] = 0;
      v109 = 0;
      v110 = 0;
      v13 = (re *)re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity(v108, v12);
      ++v110;
      v14 = *(_QWORD *)(v5 + 16);
      if (v14)
      {
        v15 = *(uint64_t **)(v5 + 32);
        v16 = 8 * v14;
        __asm { FMOV            V12.2S, #1.0 }
        do
        {
          if (qword_254110578 != -1)
            dispatch_once(&qword_254110578, &__block_literal_global_10);
          if (byte_254110559)
          {
            v21 = *re::remoteEffectsLogObjects(v13);
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              v22 = *v15;
              v23 = *(_QWORD *)(*v15 + 480);
              if (v23)
                v23 = *(_QWORD *)(v23 + 296);
              v24 = *(unsigned __int8 *)(v22 + 465);
              buf[0].i32[0] = 134218496;
              *(uint64_t *)((char *)buf[0].i64 + 4) = v22;
              buf[0].i16[6] = 2048;
              *(uint64_t *)((char *)&buf[0].i64[1] + 6) = v23;
              buf[1].i16[3] = 1024;
              buf[1].i32[2] = v24;
              _os_log_impl(&dword_224FE9000, v21, OS_LOG_TYPE_DEFAULT, "HoverState %p - updating for entity %llu - hitTestData.valid: %d", (uint8_t *)buf, 0x1Cu);
            }
          }
          v25 = *v15;
          v26 = *(double *)(v5 + 184);
          if (v26 - *(double *)(*v15 + 72) > 3600.0)
            *(double *)(v25 + 72) = v26;
          v27 = *(unsigned __int8 *)(v25 + 465);
          if (*(unsigned __int8 *)(v25 + 64) != v27)
          {
            if (*(_BYTE *)(v25 + 465))
              *(double *)(v25 + 72) = v26;
            else
              *(double *)(v25 + 80) = v26;
          }
          *(_BYTE *)(v25 + 64) = v27;
          if (*(unsigned __int8 *)(v25 + 497) != v27 && *(_BYTE *)(v25 + 272) != 0)
          {
            re::make::shared::object<re::ecs2::RemoteEffectAnimationNode>((re *)buf);
            re::DynamicArray<re::SharedPtr<re::AssetLoadRequest>>::add((_anonymous_namespace_ *)(v5 + 40), (uint64_t *)buf);
            if (v27)
            {
              v29 = (uint64_t *)(v25 + 280);
              if (*(_BYTE *)(v25 + 224))
                v29 = (uint64_t *)(v25 + 216);
              v30 = *v29;
            }
            else
            {
              v32 = (uint64_t *)(v25 + 288);
              if (*(_BYTE *)(v25 + 240))
                v32 = (uint64_t *)(v25 + 232);
              v30 = *v32;
            }
            v33 = buf[0].i64[0];
            *(_QWORD *)(buf[0].i64[0] + 48) = v30;
            *(_QWORD *)(v33 + 72) = v31;
            *(double *)(v33 + 32) = v26;
            if (*(_BYTE *)(v25 + 497))
              v34 = 0.0;
            else
              v34 = 1.0;
            re::ecs2::addAnimation((uint64_t *)buf, v25 + 176, (double)*(unsigned __int8 *)(v25 + 497), v34);
            *(double *)(v25 + 504) = v26;
            if (v27)
            {
              re::make::shared::object<re::ecs2::RemoteEffectAnimationNode>((re *)__dst);
              v35 = *(_QWORD **)&__dst[0];
              *(_QWORD *)(*(_QWORD *)&__dst[0] + 48) = *(_QWORD *)(v33 + 48);
              v35[9] = *(_QWORD *)(v33 + 72);
              v35[4] = *(_QWORD *)(v33 + 32);
              re::ecs2::RemoteEffectsService::updateAutoFade(v5, v25, 0, (uint64_t *)__dst, v26);

            }
          }
          *(_BYTE *)(v25 + 497) = v27;
          if (v27)
            v36 = *(_BYTE *)(v25 + 129) == 0;
          else
            v36 = 0;
          v37 = !v36 || *(_BYTE *)(v25 + 128) == 0;
          if (!v37 && v26 - *(double *)(v25 + 504) >= 0.5)
          {
            re::make::shared::object<re::ecs2::RemoteEffectAnimationNode>((re *)buf);
            v38 = buf[0].i64[0];
            *(_QWORD *)(buf[0].i64[0] + 48) = 0x3FF8000000000000;
            re::ecs2::RemoteEffectsService::updateAutoFade(v5, v25, 1, (uint64_t *)buf, v26);
            *(_BYTE *)(v25 + 130) = 1;

          }
          re::ecs2::RemoteEffectsService::updateAnimator((re::ecs2::RemoteEffectsService *)v5, (double *)(v25 + 176), v26);
          re::ecs2::RemoteEffectsService::updateAnimator((re::ecs2::RemoteEffectsService *)v5, (double *)(v25 + 136), v26);
          if (*(_QWORD *)(v25 + 176) || *(_QWORD *)(v25 + 136) || *(_BYTE *)(v25 + 497))
          {
            v40 = *(double *)(v25 + 192);
            *(double *)(v25 + 112) = v40;
            if (*(_BYTE *)(v25 + 130))
              *(double *)(v25 + 112) = v40 * *(double *)(v25 + 152);
            if (*(_BYTE *)(v25 + 465))
            {
              if (*(_BYTE *)(v25 + 496))
              {
                re::ecs2::TransformComponent::worldMatrix4x4F(*(re::ecs2::TransformComponent ***)(v25 + 480), (const re::ecs2::Entity *)1, buf);
                v117.columns[0] = (simd_float4)buf[0];
                v117.columns[1] = (simd_float4)buf[1];
                v117.columns[2] = (simd_float4)buf[2];
                v99 = buf[0];
                v100 = buf[1];
                v117.columns[3] = (simd_float4)buf[3];
                v101 = buf[3];
                v102 = buf[2];
                v118 = __invert_f4(v117);
                v118.columns[0] = (simd_float4)vaddq_f32((float32x4_t)v118.columns[3], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v118.columns[0], COERCE_FLOAT(*(_OWORD *)(v25 + 368))), (float32x4_t)v118.columns[1], *(float32x2_t *)(v25 + 368), 1), (float32x4_t)v118.columns[2], *(float32x4_t *)(v25 + 368), 2));
                v118.columns[0].i64[0] = vdivq_f32((float32x4_t)v118.columns[0], (float32x4_t)vdupq_laneq_s32((int32x4_t)v118.columns[0], 3)).u64[0];
                v118.columns[0] = (simd_float4)vaddq_f32(v101, vmlaq_f32(vmlaq_lane_f32(vmulq_n_f32(v99, v118.columns[0].f32[0]), v100, *(float32x2_t *)v118.columns[0].f32, 1), (float32x4_t)0, v102));
                v41 = vdivq_f32((float32x4_t)v118.columns[0], (float32x4_t)vdupq_laneq_s32((int32x4_t)v118.columns[0], 3));
              }
              else
              {
                v41 = *(float32x4_t *)(v25 + 368);
              }
              *(float32x4_t *)(v25 + 48) = v41;
            }
            if (*(_BYTE *)(v25 + 120))
            {
              *(_OWORD *)(v25 + 96) = *(_OWORD *)(v25 + 48);
              *(_BYTE *)(v25 + 120) = 0;
            }
            else
            {
              *(float32x4_t *)(v25 + 96) = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v25 + 48), *(float *)(v25 + 308)), *(float32x4_t *)(v25 + 96), 1.0 - *(float *)(v25 + 308));
            }
            v46 = *(_QWORD *)(v25 + 480);
            buf[0] = (float32x4_t)xmmword_2260E5F10;
            buf[1] = (float32x4_t)xmmword_2260E5F20;
            buf[2] = (float32x4_t)xmmword_2260E5F40;
            buf[3] = (float32x4_t)xmmword_2260E5D70;
            re::ecs2::MeshComponentHelper::computeEntityMeshBounds(v46, 1, buf, 0, (uint64_t)__dst);
            v48 = __dst[1];
            *(_OWORD *)(v25 + 336) = __dst[0];
            *(_OWORD *)(v25 + 352) = v48;
            if (qword_254110578 != -1)
              dispatch_once(&qword_254110578, &__block_literal_global_10);
            if (byte_254110559)
            {
              v49 = *re::remoteEffectsLogObjects(v47);
              if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
              {
                v50 = *v15;
                v51 = *(_QWORD *)(*v15 + 112);
                buf[0].i32[0] = 134218240;
                *(uint64_t *)((char *)buf[0].i64 + 4) = v50;
                buf[0].i16[6] = 2048;
                *(uint64_t *)((char *)&buf[0].i64[1] + 6) = v51;
                _os_log_impl(&dword_224FE9000, v49, OS_LOG_TYPE_DEFAULT, "HoverState %p - progress: %f", (uint8_t *)buf, 0x16u);
              }
            }
            v52 = *v15;
            v53 = *(float32x4_t *)(*v15 + 96);
            v54 = *(double *)(*v15 + 112);
            *(float *)&v55 = (*(float *)(*v15 + 276) + v54 * (float)(1.0 - *(float *)(*v15 + 276)))
                           * *(float *)(*v15 + 296);
            *(float *)&v56 = *(float *)(*v15 + 304) * *(float *)&v55;
            memset(&buf[2], 0, 56);
            *(float *)&v54 = v54;
            v57 = vmulq_n_f32(vmulq_n_f32(*(float32x4_t *)(v52 + 256), *(float *)&v54), COERCE_FLOAT(*(_OWORD *)(v52 + 492)));
            LODWORD(v54) = *(_DWORD *)(v52 + 300);
            v58 = *(_QWORD *)(v52 + 480);
            buf[0].i64[0] = MEMORY[0x24BDAC760];
            buf[0].i64[1] = 3221225472;
            buf[1].i64[0] = (uint64_t)___ZN2re4ecs220RemoteEffectsService20setUpHoverEffectDataERNS0_22RemoteEffectHoverStateE_block_invoke;
            buf[1].i64[1] = (uint64_t)&__block_descriptor_224_e13_v24__0_v8_B16l;
            buf[13].i64[0] = v5;
            buf[13].i64[1] = v52;
            buf[5].i64[1] = _D12;
            buf[6].i32[0] = 0;
            buf[7] = v57;
            buf[8] = v53;
            buf[9].i64[0] = v55;
            buf[9].i64[1] = __PAIR64__(v56, LODWORD(v54));
            buf[10].i8[0] = 1;
            buf[10].i32[1] = 0;
            buf[10].i8[8] = 0;
            buf[11].i64[0] = 0;
            buf[11].i64[1] = _D12;
            buf[12].i8[0] = 0;
            LOBYTE(v104[0]) = 0;
            *(_QWORD *)&__dst[0] = 0;
            re::ecs2::entityAndDescendantsRecurse(v58, (unint64_t *)__dst, v104, buf);
          }
          else
          {
            if (qword_254110578 != -1)
              dispatch_once(&qword_254110578, &__block_literal_global_10);
            if (byte_254110559)
            {
              v42 = *re::remoteEffectsLogObjects((re *)v39);
              v39 = os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
              if (v39)
              {
                buf[0].i32[0] = 134217984;
                *(uint64_t *)((char *)buf[0].i64 + 4) = v25;
                _os_log_impl(&dword_224FE9000, v42, OS_LOG_TYPE_DEFAULT, "HoverState %p - updateGlowState returning false", (uint8_t *)buf, 0xCu);
              }
              if (qword_254110578 != -1)
                dispatch_once(&qword_254110578, &__block_literal_global_10);
            }
            if (byte_254110559)
            {
              v43 = *re::remoteEffectsLogObjects((re *)v39);
              if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
              {
                v44 = *v15;
                v45 = *(_QWORD *)(*v15 + 480);
                if (v45)
                  v45 = *(_QWORD *)(v45 + 296);
                buf[0].i32[0] = 134218240;
                *(uint64_t *)((char *)buf[0].i64 + 4) = v44;
                buf[0].i16[6] = 2048;
                *(uint64_t *)((char *)&buf[0].i64[1] + 6) = v45;
                _os_log_impl(&dword_224FE9000, v43, OS_LOG_TYPE_DEFAULT, "HoverState %p - Removing for entity %llu", (uint8_t *)buf, 0x16u);
              }
            }
            v13 = re::DynamicArray<re::SharedPtr<re::AssetLoadRequest>>::add((_anonymous_namespace_ *)v108, v15);
          }
          ++v15;
          v16 -= 8;
        }
        while (v16);
      }
      if (v109)
      {
        v59 = v111;
        v60 = 8 * v109;
        do
        {
          v61 = *v59;
          if (*v59)
          {
            v62 = (id)(v61 + 8);
            re::DynamicArray<re::SharedPtr<re::ecs2::RemoteEffectAnimationNode>>::remove(v5, v61);

          }
          else
          {
            re::DynamicArray<re::SharedPtr<re::ecs2::RemoteEffectAnimationNode>>::remove(v5, 0);
          }
          ++v59;
          v60 -= 8;
        }
        while (v60);
      }
      v107 = 0;
      v104[1] = 0;
      v105 = 0;
      v104[0] = 0;
      v106 = 0;
      v63 = *(unsigned int *)(v5 + 112);
      if ((_DWORD)v63)
      {
        v64 = 0;
        v65 = (_DWORD *)(*(_QWORD *)(v5 + 96) + 8);
        while ((*v65 & 0x80000000) == 0)
        {
          v65 += 384;
          if (v63 == ++v64)
          {
            LODWORD(v64) = *(_DWORD *)(v5 + 112);
            break;
          }
        }
      }
      else
      {
        LODWORD(v64) = 0;
      }
      if ((_DWORD)v63 != (_DWORD)v64)
      {
        v103 = v5 + 80;
        v66 = v64;
        do
        {
          v69 = *(_QWORD *)(v5 + 96) + 1536 * v66;
          v70 = (_QWORD **)(v69 + 16);
          memcpy(buf, (const void *)(v69 + 32), 0x5D4uLL);
          if (*(_BYTE *)(v69 + 1524))
          {
            v71 = *v70;
            v72 = (*v70)[22];
            v73 = re::CAREUtil::GetOrAddCAREComponent(*v70, (re::ecs2::ComponentTypeBase *)v67[1], 0, 0, 0);
            v74 = re::CAREUtil::GetOrAddCAREComponent(v71, (re::ecs2::ComponentTypeBase *)v68[362], 0, 0, 0);
            if (v72)
              v76 = v73 == 0;
            else
              v76 = 1;
            if (!v76 && v74 != 0)
            {
              v78 = (uint64_t)v74 + 32;
              MurmurHash3_x64_128((uint64_t)"EnableGlow", 10, 0, (unint64_t *)__dst);
              *(_QWORD *)&__dst[0] ^= *((_QWORD *)&__dst[0] + 1)
                                    + (*(_QWORD *)&__dst[0] << 6)
                                    + (*(_QWORD *)&__dst[0] >> 2)
                                    - 0x61C8864680B583E9;
              LODWORD(v113[0]) = 1;
              re::HashTable<unsigned long long,int,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addOrReplace(v78, (uint64_t *)__dst, v113);
              v79 = (re *)memcpy(__dst, buf, sizeof(__dst));
              v80 = *(_QWORD *)(v72 + 72);
              if (v80)
              {
                for (i = 0; i != v80; ++i)
                {
                  if (i >= *((_QWORD *)v73 + 11) || (v82 = *(_QWORD *)(*((_QWORD *)v73 + 13) + 8 * i)) == 0)
                  {
                    v83 = re::globalAllocators(v79);
                    v82 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v83[2] + 32))(v83[2], 1008, 8);
                    v84 = re::MaterialParameterBlock::MaterialParameterBlock((re::MaterialParameterBlock *)v82, *(re::RenderManager **)(v5 + 176));
                    v86 = *((_QWORD *)v73 + 10);
                    v85 = *((_QWORD *)v73 + 11);
                    if (v85 >= v86)
                    {
                      v87 = v85 + 1;
                      if (v86 < v85 + 1)
                      {
                        if (*((_QWORD *)v73 + 9))
                        {
                          v88 = 2 * v86;
                          if (!v86)
                            v88 = 8;
                          if (v88 <= v87)
                            v89 = v87;
                          else
                            v89 = v88;
                          re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((_QWORD *)v73 + 9, v89);
                        }
                        else
                        {
                          re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::setCapacity((_QWORD *)v73 + 9, v87);
                          ++*((_DWORD *)v73 + 24);
                        }
                      }
                      v85 = *((_QWORD *)v73 + 11);
                    }
                    *(_QWORD *)(*((_QWORD *)v73 + 13) + 8 * v85) = v82;
                    if (v82)
                    {
                      v90 = (id)(v82 + 8);
                      ++*((_QWORD *)v73 + 11);
                      ++*((_DWORD *)v73 + 24);

                    }
                    else
                    {
                      *((_QWORD *)v73 + 11) = v85 + 1;
                      ++*((_DWORD *)v73 + 24);
                    }
                  }
                  v112 = 0x1366B488040B2B5;
                  re::MaterialParameterBlock::setBufferWithBytes((re::MaterialParameterBlock *)v82, &v112, (uint64_t)__dst, 1488, (uint64_t)v113);
                  v112 = 0;
                  v113[0] = 0;
                }
              }
              re::ecs2::Component::markDirty(v73);
            }
          }
          else
          {
            re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add(v104, (uint64_t *)(v69 + 16));
          }
          v91 = *(_DWORD *)(v5 + 112);
          if (v91 <= (int)v64 + 1)
            v92 = v64 + 1;
          else
            v92 = *(_DWORD *)(v5 + 112);
          while (1)
          {
            v66 = (v64 + 1);
            if (v92 - 1 == (_DWORD)v64)
              break;
            LODWORD(v64) = v64 + 1;
            v93 = v66;
            if ((*(_DWORD *)(*(_QWORD *)(v5 + 96) + 1536 * v66 + 8) & 0x80000000) != 0)
              goto LABEL_146;
          }
          v93 = v92;
LABEL_146:
          LODWORD(v64) = v93;
        }
        while (v91 != v93);
        if (v105)
        {
          v94 = v107;
          v95 = 8 * v105;
          do
          {
            v96 = *v94;
            if (*v94)
            {
              v97 = (id)(v96 + 8);
              re::ecs2::RemoteEffectsService::cleanUpHoverEffectData((re::ecs2::RemoteEffectsService *)v96, v98);
              re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::remove(v103, v96);

            }
            else
            {
              re::ecs2::RemoteEffectsService::cleanUpHoverEffectData(0, v75);
              re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::remove(v103, 0);
            }
            ++v94;
            v95 -= 8;
          }
          while (v95);
        }
      }
      re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v104);
      re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v108);
    }
  }
}

uint64_t *re::ecs2::allocInfo_RemoteEffectsService(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254110568);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254110568))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254110580, 0);
    *(uint64_t *)((char *)&qword_254110590 + 6) = 0;
    qword_254110590 = 0;
    qword_2541105A0 = 0;
    qword_2541105A8 = 0xFFFFFFFFLL;
    qword_254110580 = (uint64_t)&off_24ED7DAA8;
    qword_2541105B0 = (uint64_t)"RemoteEffectsService";
    dword_2541105B8 = 0;
    unk_2541105C0 = 0u;
    unk_2541105D0 = 0u;
    unk_2541105E0 = 0u;
    qword_2541105F0 = 0;
    __cxa_guard_release(&qword_254110568);
  }
  return &qword_254110580;
}

void re::ecs2::initInfo_RemoteEffectsService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x1E3DEFFD1D104AB2;
  v5[1] = "RemoteEffectsService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xC000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_RemoteEffectsService(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::RemoteEffectsService>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::RemoteEffectsService>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RemoteEffectsService>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RemoteEffectsService>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::RemoteEffectsService>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_DWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 100) = 0u;
  *(_QWORD *)(a3 + 116) = 0x7FFFFFFFLL;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_DWORD *)(a3 + 160) = 0;
  *(_QWORD *)(a3 + 164) = 0x7FFFFFFFLL;
  *(_QWORD *)(a3 + 176) = 0;
  *(_QWORD *)(a3 + 184) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::RemoteEffectsService>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)(a3 + 128));
  re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::deinit((uint64_t *)(a3 + 80));
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(a3 + 40);
  return re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(a3);
}

double re::internal::defaultConstructV2<re::ecs2::RemoteEffectsService>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 100) = 0u;
  *(_QWORD *)(a1 + 116) = 0x7FFFFFFFLL;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 164) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::RemoteEffectsService>(uint64_t a1)
{
  re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)(a1 + 128));
  re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::deinit((uint64_t *)(a1 + 80));
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(a1 + 40);
  return re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(a1);
}

uint64_t re::ecs2::introspect_RemoteEffectsService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RemoteEffectsService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RemoteEffectsService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RemoteEffectsService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RemoteEffectsService>, this);
}

uint64_t *re::ecs2::allocInfo_RemoteEffectsSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254110570);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254110570))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541105F8, 0);
    *(uint64_t *)((char *)&qword_254110608 + 6) = 0;
    qword_254110608 = 0;
    qword_254110618 = 0;
    qword_254110620 = 0xFFFFFFFFLL;
    qword_2541105F8 = (uint64_t)&off_24ED7DAA8;
    qword_254110628 = (uint64_t)"RemoteEffectsSystem";
    dword_254110630 = 0;
    unk_254110638 = 0u;
    unk_254110648 = 0u;
    unk_254110658 = 0u;
    qword_254110668 = 0;
    __cxa_guard_release(&qword_254110570);
  }
  return &qword_2541105F8;
}

void re::ecs2::initInfo_RemoteEffectsSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x4B4C52106E7F5E16;
  v5[1] = "RemoteEffectsSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_RemoteEffectsSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::RemoteEffectsSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::RemoteEffectsSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::RemoteEffectsSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::RemoteEffectsSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RemoteEffectsSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RemoteEffectsSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::RemoteEffectsSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  re::ecs2::System::System(a3, 1, 1);
  *v3 = &off_24ED682F0;
  v3[13] = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::RemoteEffectsSystem>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::RemoteEffectsSystem>(uint64_t a1)
{
  _QWORD *v1;

  re::ecs2::System::System(a1, 1, 1);
  *v1 = &off_24ED682F0;
  v1[13] = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::RemoteEffectsSystem>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_RemoteEffectsSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RemoteEffectsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RemoteEffectsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RemoteEffectsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RemoteEffectsSystem>, this);
}

void re::ecs2::RemoteEffectsSystem::~RemoteEffectsSystem(re::ecs2::RemoteEffectsSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::RemoteEffectsSystem::typeInfo(re::ecs2::RemoteEffectsSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RemoteEffectsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RemoteEffectsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RemoteEffectsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RemoteEffectsSystem>, 0);
}

void ___ZN12_GLOBAL__N_131remoteEffectsSystemDebugEnabledEv_block_invoke(uint64_t a1, const char *a2)
{
  char v2;
  char v3[2];

  re::Defaults::BOOLValue((re::Defaults *)"RemoteEffectsDebugEnabled", a2, v3);
  if (v3[0])
    v2 = v3[1];
  else
    v2 = 0;
  byte_254110559 = v2;
}

void re::ecs2::entityAndDescendantsRecurse(uint64_t a1, unint64_t *a2, _BYTE *a3, void *a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  int v14;
  void (**v15)(id, uint64_t, _BYTE *);

  v15 = a4;
  if (a1)
  {
    v15[2](v15, a1, a3);
    v7 = *a2 + 1;
    *a2 = v7;
    if (!*a3 && v7 <= 0x80)
    {
      v8 = *(_QWORD *)(a1 + 328);
      if (v8)
      {
        v9 = 0;
        v10 = a1 + 304;
        do
        {
          v11 = *(_QWORD *)re::ecs2::EntityComponentCollection::operator[](v10, v9);
          if (v11)
          {
            v12 = (void *)(v11 + 8);
            v13 = (id)(v11 + 8);
            re::ecs2::entityAndDescendantsRecurse(v11, a2, a3, v15);
            v14 = *a3;

            if (v14)
              break;
          }
          else
          {

            if (*a3)
              break;
          }
          ++v9;
        }
        while (v8 != v9);
      }
    }
  }

}

void re::internal::CallableMemFn<re::ecs2::RemoteEffectsService,REEventHandlerResult (re::ecs2::RemoteEffectsService::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::RemoteEffectsService,REEventHandlerResult (re::ecs2::RemoteEffectsService::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::RemoteEffectsService,REEventHandlerResult (re::ecs2::RemoteEffectsService::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED68398;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::RemoteEffectsService,REEventHandlerResult (re::ecs2::RemoteEffectsService::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED68398;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::RemoteEffectsService,REEventHandlerResult (re::ecs2::RemoteEffectsService::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

void re::make::shared::object<re::ecs2::RemoteEffectAnimationNode>(re *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = re::globalAllocators(a1);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2[2] + 32))(v2[2], 88, 8);
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_QWORD *)(v3 + 80) = 0;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)v3, 0);
  *(_QWORD *)v3 = &off_24ED683F0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)a1 = v3;
}

void re::ecs2::RemoteEffectAnimationNode::~RemoteEffectAnimationNode(re::ecs2::RemoteEffectAnimationNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED683F0;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {

    *((_QWORD *)this + 3) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED683F0;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {

    *((_QWORD *)this + 3) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

void *re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t *a4, const void *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  signed int v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *result;
  _BYTE v30[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v30, 0, 36);
          *(_QWORD *)&v30[36] = 0x7FFFFFFFLL;
          re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::init((uint64_t)v30, v13, v12);
          v15 = *(_OWORD *)v30;
          *(_OWORD *)v30 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v30[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v30[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v30[24];
          *(_OWORD *)&v30[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v30[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = 0;
            v22 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v22 - 8) & 0x80000000) != 0)
                re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::addAsMove(a1, *(_QWORD *)(v22 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v22 - 16), v22, v22 + 16);
              ++v21;
              v22 += 1536;
            }
            while (v21 < v20);
          }
          re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::deinit((uint64_t *)v30);
        }
      }
      else
      {
        if (v12)
          v25 = 2 * v11;
        else
          v25 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 1536 * v9 + 8);
  }
  else
  {
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_DWORD *)(v23 + 1536 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v24 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v23 + 1536 * v9 + 8) = v24 | 0x80000000;
  v26 = a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 1536 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 1536 * v9 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 1536 * v9) = a3;
  v27 = *a4;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 1536 * v9 + 16) = *a4;
  if (v27)
    v28 = (id)(v27 + 8);
  result = memcpy((void *)(*(_QWORD *)(a1 + 16) + 1536 * v9 + 32), a5, 0x5E0uLL);
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v26) = v9;
  ++*(_DWORD *)(a1 + 28);
  return result;
}

void re::HashTable<re::SharedPtr<re::ecs2::Entity>,re::ecs2::RemoteEffectHoverData,re::Hash<re::SharedPtr<re::ecs2::Entity>>,re::EqualTo<re::SharedPtr<re::ecs2::Entity>>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 1536 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &unk_2260EB7B0, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::ecs2::RemoteEffectHoverState::~RemoteEffectHoverState(re::ecs2::RemoteEffectHoverState *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24ED68438;
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {

    *((_QWORD *)this + 22) = 0;
  }
  v3 = *((_QWORD *)this + 17);
  if (v3)
  {

    *((_QWORD *)this + 17) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24ED68438;
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {

    *((_QWORD *)this + 22) = 0;
  }
  v3 = *((_QWORD *)this + 17);
  if (v3)
  {

    *((_QWORD *)this + 17) = 0;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

id re::internal::defaultRetain<re::ecs2::RemoteEffectsSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::RemoteEffectsSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_DeferredActivationComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_274);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_274))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254110688, 0);
    *(uint64_t *)((char *)&qword_254110698 + 6) = 0;
    qword_254110698 = 0;
    qword_2541106A8 = 0;
    qword_2541106B0 = 0xFFFFFFFFLL;
    qword_254110688 = (uint64_t)&off_24ED7DAA8;
    qword_2541106B8 = (uint64_t)"DeferredActivationComponent";
    dword_2541106C0 = 0;
    unk_2541106C8 = 0u;
    unk_2541106D8 = 0u;
    unk_2541106E8 = 0u;
    qword_2541106F8 = 0;
    __cxa_guard_release(&_MergedGlobals_274);
  }
  return &qword_254110688;
}

void re::ecs2::initInfo_DeferredActivationComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x1A4B35CD4BE33410;
  v10[1] = "DeferredActivationComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254110680);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254110680);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254110678 = v8;
      __cxa_guard_release(&qword_254110680);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254110678;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::DeferredActivationComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::DeferredActivationComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DeferredActivationComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DeferredActivationComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::DeferredActivationComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED58440;
  *(_QWORD *)(v3 + 32) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::DeferredActivationComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::DeferredActivationComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED58440;
  *(_QWORD *)(v1 + 32) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::DeferredActivationComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_DeferredActivationComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DeferredActivationComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DeferredActivationComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DeferredActivationComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DeferredActivationComponent>, this);
}

uint64_t *re::ecs2::allocInfo_RayCastSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_275);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_275))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254110708, 0);
    *(uint64_t *)((char *)&qword_254110718 + 6) = 0;
    qword_254110718 = 0;
    qword_254110728 = 0;
    qword_254110730 = 0xFFFFFFFFLL;
    qword_254110708 = (uint64_t)&off_24ED7DAA8;
    qword_254110738 = (uint64_t)"RayCastSystem";
    dword_254110740 = 0;
    unk_254110748 = 0u;
    unk_254110758 = 0u;
    unk_254110768 = 0u;
    qword_254110778 = 0;
    __cxa_guard_release(&_MergedGlobals_275);
  }
  return &qword_254110708;
}

void re::ecs2::initInfo_RayCastSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x47E5E3E009048BF0;
  v5[1] = "RayCastSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x7000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_RayCastSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::RayCastSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::RayCastSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::RayCastSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::RayCastSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RayCastSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RayCastSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::RayCastSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  _QWORD *v3;

  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  re::ecs2::System::System((uint64_t)a3, 1);
  *v3 = &off_24ED68480;
  v3[13] = 0;
}

void *re::internal::defaultDestruct<re::ecs2::RayCastSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::RayCastSystem>(_OWORD *a1)
{
  _QWORD *v1;

  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  re::ecs2::System::System((uint64_t)a1, 1);
  *v1 = &off_24ED68480;
  v1[13] = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::RayCastSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_RayCastSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RayCastSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RayCastSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RayCastSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RayCastSystem>, this);
}

uint64_t re::ecs2::RayCastSystem::willAddSystemToECSService(re::ecs2::RayCastSystem *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::ecs2::PhysicsSimulationService>(v2);
  *((_QWORD *)this + 13) = result;
  return result;
}

uint64_t re::ecs2::RayCastSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(_QWORD *)(this + 104) = 0;
  return this;
}

uint64_t re::ecs2::RayCastSystem::update(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _anonymous_namespace_ *v4;
  uint64_t v5;
  uint64_t v6;
  float32x4_t **v7;
  float32x4_t **v8;
  float32x4_t *v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t *v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  float32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint32x4_t v46;
  int v47;
  _BOOL4 v48;
  _QWORD *v49;
  _OWORD *v50;
  float32x4_t v51;
  uint32x4_t v52;
  uint64_t v53;
  uint64_t v54;
  re::ecs2::NetworkComponent *v55;
  uint64_t v56;
  uint64_t v57;
  float32x4_t **v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[2];
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  _BYTE v84[16];
  uint64_t v85[2];
  _OWORD v86[2];
  float v87;
  uint64_t v88;
  simd_float3x3 v89;

  v88 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    v2 = a2;
    v3 = result;
    re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v85);
    re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RayCastComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
    v4 = re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v84, 3049, v3);
    v57 = v3;
    if (*(_QWORD *)(v3 + 104))
    {
      v5 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RayCastComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 24);
        if (v6)
        {
          v7 = *(float32x4_t ***)(v5 + 40);
          v8 = &v7[v6];
          v56 = v2;
          v58 = v8;
          do
          {
            v9 = *v7;
            v10 = (*v7)[1].i64[0];
            if ((*(_BYTE *)(v10 + 288) & 1) != 0 && v9[5].i32[0])
            {
              re::ecs2::TransformComponent::worldMatrix4x4F((re::ecs2::TransformComponent **)(*v7)[1].i64[0], (const re::ecs2::Entity *)1, &v80);
              v11 = v9[2];
              v12 = vaddq_f32(v83, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v80, v11.f32[0]), v81, *(float32x2_t *)v11.f32, 1), v82, v11, 2));
              v64 = vdivq_f32(v12, (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3));
              v13 = vaddq_f32(v11, vmulq_n_f32(v9[3], v9[4].f32[0]));
              v14 = vaddq_f32(v83, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v80, v13.f32[0]), v81, *(float32x2_t *)v13.f32, 1), v82, v13, 2));
              v63 = vdivq_f32(v14, (float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3));
              v74[0] = 0;
              v74[1] = 0;
              v75 = 1;
              v77 = 0;
              v78 = 0;
              v76 = 0;
              v79 = 0;
              v15 = vsubq_f32(v63, v64);
              v16 = vmulq_f32(v15, v15);
              if (fabsf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0]) >= 0.00001)
              {
                v17 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v57 + 104) + 32))(*(_QWORD *)(v57 + 104), v2);
                if (v17)
                {
                  v18 = v17;
                  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v65, v17, 0);
                  v72 = v65;
                  v73 = v66;
                  if (v18 != v65 || (unsigned __int16)v66 != 0xFFFFLL || (v66 & 0xFFFF0000) != 0xFFFF0000)
                  {
                    v61 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v64, 2);
                    v62 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.f32, 1);
                    v59 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v63, 2);
                    v60 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 1);
                    do
                    {
                      v19 = re::DataArray<re::ecs2::PhysicsSimulationData>::DataArrayIterator<re::ecs2::PhysicsSimulationData,re::ecs2::PhysicsSimulationData&>::operator*((unsigned __int16 *)&v72);
                      if (*(_QWORD *)(v19 + 8))
                      {
                        v20 = (float32x4_t *)v19;
                        v21 = *(float32x4_t *)(v19 + 176);
                        v22 = *(float32x4_t *)(v19 + 192);
                        v23 = *(float32x4_t *)(v19 + 208);
                        v24 = *(float32x4_t *)(v19 + 224);
                        v25 = vaddq_f32(v24, vmlaq_f32(vmlaq_f32(vmulq_n_f32(v21, v64.f32[0]), v62, v22), v61, v23));
                        v26 = vdivq_f32(v25, (float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 3));
                        v27 = vaddq_f32(v24, vmlaq_f32(vmlaq_f32(vmulq_n_f32(v21, v63.f32[0]), v60, v22), v59, v23));
                        v28 = vsubq_f32(vdivq_f32(v27, (float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 3)), v26);
                        v29 = vmulq_f32(v28, v28);
                        v29.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).u32[0];
                        *(float32x2_t *)v24.f32 = vrsqrte_f32((float32x2_t)v29.u32[0]);
                        *(float32x2_t *)v24.f32 = vmul_f32(*(float32x2_t *)v24.f32, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32)));
                        v86[0] = v26;
                        v86[1] = vmulq_n_f32(v28, vmul_f32(*(float32x2_t *)v24.f32, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v24.f32))).f32[0]);
                        v87 = sqrtf(v29.f32[0]);
                        v65 = 0;
                        v66 = 0;
                        v67 = 1;
                        v69 = 0;
                        v70 = 0;
                        v68 = 0;
                        v71 = 0;
                        (*(void (**)(_QWORD, _OWORD *, float32x4_t *, uint64_t *))(**(_QWORD **)(v20->i64[1] + 56)
                                                                                           + 56))(*(_QWORD *)(v20->i64[1] + 56), v86, v9 + 6, &v65);
                        v30 = v70;
                        if (v70)
                        {
                          v31 = 0;
                          do
                          {
                            v32 = re::BucketArray<re::CollisionCastHit,10ul>::operator[]((uint64_t)&v65, v31);
                            v33 = vaddq_f32(v20[10], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20[7], COERCE_FLOAT(*(_OWORD *)(v32 + 16))), v20[8], *(float32x2_t *)(v32 + 16), 1), v20[9], *(float32x4_t *)(v32 + 16), 2));
                            *(float32x4_t *)(v32 + 16) = vdivq_f32(v33, (float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 3));
                            v89 = __invert_f3(*(simd_float3x3 *)v20[7].f32);
                            v34 = vzip2q_s32((int32x4_t)v89.columns[0], (int32x4_t)v89.columns[2]);
                            v35 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v89.columns[0], (int32x4_t)v89.columns[2]), (int32x4_t)v89.columns[1]);
                            v89.columns[0] = (simd_float3)vtrn2q_s32((int32x4_t)v89.columns[0], (int32x4_t)v89.columns[1]);
                            v89.columns[0].i32[2] = v89.columns[2].i32[1];
                            *(float32x4_t *)(v32 + 32) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, COERCE_FLOAT(*(_OWORD *)(v32 + 32))), (float32x4_t)v89.columns[0], *(float32x2_t *)(v32 + 32), 1), (float32x4_t)vzip1q_s32(v34, vdupq_laneq_s32((int32x4_t)v89.columns[1], 2)), *(float32x4_t *)(v32 + 32), 2);
                            v36 = (_OWORD *)re::BucketArray<re::CollisionCastHit,10ul>::addUninitialized((uint64_t)v74);
                            *v36 = *(_OWORD *)v32;
                            v37 = *(_OWORD *)(v32 + 64);
                            v39 = *(_OWORD *)(v32 + 16);
                            v38 = *(_OWORD *)(v32 + 32);
                            v36[3] = *(_OWORD *)(v32 + 48);
                            v36[4] = v37;
                            v36[1] = v39;
                            v36[2] = v38;
                            ++v31;
                          }
                          while (v30 != v31);
                        }
                        re::BucketArray<re::CollisionCastHit,10ul>::deinit((uint64_t)&v65);
                        if (v65 && (v67 & 1) == 0)
                          (*(void (**)(void))(*(_QWORD *)v65 + 40))();
                      }
                      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v72);
                    }
                    while (v72 != v18 || (unsigned __int16)v73 != 0xFFFF || WORD1(v73) != 0xFFFF);
                  }
                  v2 = v56;
                }
              }
              v42 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v10 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RayCastResultComponent,(re::ecs2::ComponentTypeBase::Flags)1>::s_componentType);
              v43 = v42;
              if (v78)
              {
                v44 = re::BucketArray<re::CollisionCastHit,10ul>::operator[]((uint64_t)v74, 0);
                v45 = *(_QWORD *)(*(_QWORD *)v44 + 40);
                v46 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v43 + 32), *(float32x4_t *)(v44 + 16)));
                v46.i32[3] = v46.i32[2];
                if ((vmaxvq_u32(v46) & 0x80000000) != 0)
                {
                  *(_OWORD *)(v43 + 32) = *(_OWORD *)(v44 + 16);
                  v47 = 1;
                }
                else
                {
                  v47 = 0;
                }
                v51 = *(float32x4_t *)(v44 + 32);
                v50 = (_OWORD *)(v44 + 32);
                v52 = (uint32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(v43 + 48), v51));
                v52.i32[3] = v52.i32[2];
                if ((vmaxvq_u32(v52) & 0x80000000) != 0)
                {
                  *(_OWORD *)(v43 + 48) = *v50;
                  v47 = 1;
                }
                v53 = *(_QWORD *)(v43 + 64);
                if (!v53)
                  goto LABEL_42;
                v54 = v45 + 8;
                if (!v45)
                  v54 = 0;
                if (v53 != v54)
                {
LABEL_42:
                  re::ecs2::EntityHandle::operator=(v43 + 64, v45);
                  v47 = 1;
                }
                v48 = v47 != 0;
              }
              else
              {
                *(_QWORD *)(v42 + 32) = 0x7FC000007FC00000;
                *(_QWORD *)(v42 + 40) = 2143289344;
                *(_QWORD *)(v42 + 48) = 0x7FC000007FC00000;
                *(_QWORD *)(v42 + 56) = 2143289344;
                v48 = 1;
                v49 = (_QWORD *)(v42 + 64);
                if (!re::ecs2::EntityHandle::isNull((id *)(v42 + 64)))
                {
                  re::ecs2::EntityHandle::reset((id *)(v43 + 64));
                  objc_destroyWeak((id *)(v43 + 64));
                  *v49 = 0;
                  v48 = 1;
                }
              }
              v55 = *(re::ecs2::NetworkComponent **)(v10 + 200);
              if (v48 && v55)
                re::ecs2::NetworkComponent::markDirty(v55, (const re::ecs2::Component *)v43);
              if (v9[5].i32[0] == 1)
              {
                v9[5].i32[0] = 0;
                if (v55)
                  re::ecs2::NetworkComponent::markDirty(v55, (const re::ecs2::Component *)v43);
              }
              re::BucketArray<re::CollisionCastHit,10ul>::deinit((uint64_t)v74);
              if (v74[0])
              {
                if ((v75 & 1) == 0)
                  (*(void (**)(void))(*(_QWORD *)v74[0] + 40))();
              }
              v8 = v58;
            }
            ++v7;
          }
          while (v7 != v8);
        }
      }
    }
    re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v84);
    return re::ProfilerTimeGuard<(re::ProfilerStatistic)121>::end((uint64_t)v85);
  }
  return result;
}

void re::ecs2::RayCastSystem::~RayCastSystem(re::ecs2::RayCastSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::RayCastSystem::typeInfo(re::ecs2::RayCastSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RayCastSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RayCastSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RayCastSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RayCastSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::RayCastSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::RayCastSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_AudioLibraryComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254110788);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254110788))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254110800, 0);
    *(uint64_t *)((char *)&qword_254110810 + 6) = 0;
    qword_254110810 = 0;
    qword_254110820 = 0;
    qword_254110828 = 0xFFFFFFFFLL;
    qword_254110800 = (uint64_t)&off_24ED7DAA8;
    qword_254110830 = (uint64_t)"AudioLibraryComponent";
    dword_254110838 = 0;
    unk_254110840 = 0u;
    unk_254110850 = 0u;
    unk_254110860 = 0u;
    qword_254110870 = 0;
    __cxa_guard_release(&qword_254110788);
  }
  return &qword_254110800;
}

void re::ecs2::initInfo_AudioLibraryComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[2];
  __int128 v14;

  v13[0] = 0xFBB6D340A487FCB0;
  v13[1] = "AudioLibraryComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  v4 = atomic_load((unsigned __int8 *)&qword_254110790);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254110790);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541107A0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get((uint64_t)v9, v10);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "resources";
      *(_QWORD *)(v11 + 16) = &qword_2541107B0;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_2541107A8 = v11;
      __cxa_guard_release(&qword_254110790);
    }
  }
  *((_QWORD *)this + 2) = 0x5000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2541107A0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AudioLibraryComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AudioLibraryComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AudioLibraryComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AudioLibraryComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v12 = v14;
}

void re::IntrospectionInfo<re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _OWORD *v3;
  const re::IntrospectionBase *v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  re::IntrospectionRegistry *v8;
  const re::IntrospectionBase *v9;
  const char *v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  _anonymous_namespace_ *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23[2];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  _QWORD v29[2];
  __int128 v30;
  StringID v31;
  const char **v32;

  v2 = atomic_load((unsigned __int8 *)&qword_254110798);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254110798))
  {
    re::IntrospectionHashTableBase::IntrospectionHashTableBase((re::IntrospectionHashTableBase *)&qword_2541107B0);
    qword_2541107B0 = (uint64_t)&off_24ED68508;
    __cxa_guard_release(&qword_254110798);
  }
  if ((_MergedGlobals_276 & 1) == 0)
  {
    v3 = re::IntrospectionInfo<re::DynamicString>::get(1, a2);
    v5 = re::introspect_AssetHandle((re *)1, v4);
    if ((_MergedGlobals_276 & 1) == 0)
    {
      v6 = (uint64_t)v5;
      _MergedGlobals_276 = 1;
      v7 = v5[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541107B0, 0);
      qword_2541107C0 = 0x3000000007;
      dword_2541107C8 = v7;
      word_2541107CC = 0;
      *(_QWORD *)&xmmword_2541107D0 = 0;
      *((_QWORD *)&xmmword_2541107D0 + 1) = 0xFFFFFFFFLL;
      qword_2541107E0 = (uint64_t)v3;
      unk_2541107E8 = 0;
      qword_2541107F0 = v6;
      unk_2541107F8 = 0;
      qword_2541107B0 = (uint64_t)&off_24ED68508;
      re::IntrospectionRegistry::add(v8, v9);
      re::getPrettyTypeName((re *)&qword_2541107B0, (const re::IntrospectionBase *)&v26);
      if ((v27 & 1) != 0)
        v10 = v28;
      else
        v10 = (char *)&v27 + 1;
      if (v26 && (v27 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v26 + 40))();
      v11 = v3[2];
      v21 = *(_OWORD *)(v6 + 32);
      v22 = v11;
      v12 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v23);
      if (v12)
      {
        v13 = *v12;
        *((_QWORD *)&v20 + 1) = v13;
      }
      else
      {
        v26 = 0x449AD97C4B77BED4;
        v27 = "_CompareFunc";
        v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v26);
        if (v14)
        {
          v15 = *v14;
          re::StringID::destroyString((re::StringID *)&v26);
        }
        else
        {
          re::StringID::destroyString((re::StringID *)&v26);
          *(_QWORD *)&v31.var0 = 0x449AD97C4B77BED4;
          v31.var1 = "_CompareFunc";
          v16 = (void *)v26;
          v15 = (uint64_t)v27;
          re::StringID::destroyString((re::StringID *)&v31);
        }
        re::TypeInfo::TypeInfo((uint64_t)&v31, (uint64_t)&v27);
        if (!v16
          || (v17 = *v32,
              v26 = v15,
              v27 = v17,
              LODWORD(v28) = -1,
              (v18 = (_anonymous_namespace_ *)re::HashTable<re::internal::TypeAttributeKey,re::internal::TypeAttributeData,re::Hash<re::internal::TypeAttributeKey>,re::EqualTo<re::internal::TypeAttributeKey>,true,false>::tryGet(*(_QWORD *)&v31.var0 + 768, &v26)) == 0)|| !*(_QWORD *)v18)
        {
          v30 = v22;
          v29[0] = v16;
          v29[1] = v15;
        }
        v24 = v21;
        v25 = v22;
        re::TypeBuilder::beginDictionaryType((uint64_t)&v26, v23, 1, 0x30uLL, 8uLL, &v25, &v24);
        re::TypeBuilder::setConstructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setDictionaryAccessors((uint64_t)&v26, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke, (uint64_t)re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
        re::TypeBuilder::setDictionaryIterator((uint64_t)&v26, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (BOOL (*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (const void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v26, v19);
      }
      xmmword_2541107D0 = v20;
      re::StringID::destroyString((re::StringID *)v23);
    }
  }
}

double re::internal::defaultConstruct<re::ecs2::AudioLibraryComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED584C0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_DWORD *)(v3 + 64) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v3 + 68) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::AudioLibraryComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::AudioLibraryComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED584C0;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_DWORD *)(v1 + 64) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v1 + 68) = 0x7FFFFFFFLL;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AudioLibraryComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AudioLibraryComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AudioLibraryComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AudioLibraryComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AudioLibraryComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AudioLibraryComponent>, this);
}

void re::ecs2::AudioLibraryComponent::registerAudioAsset(uint64_t a1, const re::AssetHandle *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  re *v15;
  NSObject *v16;
  NSObject *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v22, a3);
  v7 = v6;
  if (!*(_QWORD *)(a1 + 32))
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 56);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = *(unsigned int *)(a1 + 68);
    if ((_DWORD)v11 == 0x7FFFFFFF)
    {
      v11 = *(unsigned int *)(a1 + 64);
      v12 = v11;
      if ((_DWORD)v11 == *(_DWORD *)(a1 + 56))
      {
        re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1 + 32, 2 * *(_DWORD *)(a1 + 60));
        LODWORD(v8) = v7 % *(unsigned int *)(a1 + 56);
        v12 = *(_DWORD *)(a1 + 64);
      }
      *(_DWORD *)(a1 + 64) = v12 + 1;
      v13 = *(_QWORD *)(a1 + 48);
      v14 = *(_DWORD *)(v13 + 72 * v11 + 8);
    }
    else
    {
      v13 = *(_QWORD *)(a1 + 48);
      v14 = *(_DWORD *)(v13 + 72 * v11 + 8);
      *(_DWORD *)(a1 + 68) = v14 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v13 + 72 * v11 + 8) = v14 | 0x80000000;
    *(_DWORD *)(*(_QWORD *)(a1 + 48) + 72 * v11 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 72 * v11 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v8);
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 72 * v11) = v7;
    re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 48) + 72 * v11 + 16), (const re::DynamicString *)a3);
    v15 = re::AssetHandle::AssetHandle((re::AssetHandle *)(*(_QWORD *)(a1 + 48) + 72 * v11 + 48), a2);
    *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v8) = v11;
    ++*(_DWORD *)(a1 + 60);
    goto LABEL_14;
  }
  v10 = *(_QWORD *)(a1 + 48);
  while (!re::DynamicString::operator==(v10 + 72 * v9 + 16, a3))
  {
    v9 = *(_DWORD *)(v10 + 72 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(v10 + 72 * v9 + 48));
  v15 = re::AssetHandle::AssetHandle((re::AssetHandle *)(*(_QWORD *)(a1 + 48) + 72 * v9 + 48), a2);
LABEL_14:
  ++*(_DWORD *)(a1 + 72);
  v16 = *re::audioLogObjects(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    v17 = v16;
    v18 = re::AssetHandle::assetInfo(a2);
    v19 = (char *)v18[18];
    if ((v18[17] & 1) == 0)
      v19 = (char *)v18 + 137;
    if ((*(_BYTE *)(a3 + 8) & 1) != 0)
      v20 = *(_QWORD *)(a3 + 16);
    else
      v20 = a3 + 9;
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 296);
    v22 = 136315650;
    v23 = v19;
    v24 = 2080;
    v25 = v20;
    v26 = 2048;
    v27 = v21;
    _os_log_impl(&dword_224FE9000, v17, OS_LOG_TYPE_INFO, "[CoreRE] [AudioLibraryComponent] registered asset='%s' with name %s (entityID=%llu).", (uint8_t *)&v22, 0x20u);

  }
}

void re::ecs2::AudioLibraryComponent::unregisterAudioAsset(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v15, a2);
  if (*(_QWORD *)(a1 + 32))
  {
    v5 = v4 % *(unsigned int *)(a1 + 56);
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(unsigned int *)(v6 + 4 * v5);
    if ((_DWORD)v7 != 0x7FFFFFFF)
    {
      v8 = *(_QWORD *)(a1 + 48);
      v4 = re::DynamicString::operator==(v8 + 72 * v7 + 16, a2);
      if ((v4 & 1) != 0)
      {
        *(_DWORD *)(v6 + 4 * v5) = *(_DWORD *)(v8 + 72 * v7 + 8) & 0x7FFFFFFF;
LABEL_8:
        re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 48) + 72 * v7);
        *(_DWORD *)(*(_QWORD *)(a1 + 48) + 72 * v7 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 72 * v7 + 8) & 0x80000000 | *(_DWORD *)(a1 + 68);
        --*(_DWORD *)(a1 + 60);
        v11 = *(_DWORD *)(a1 + 72) + 1;
        *(_DWORD *)(a1 + 68) = v7;
        *(_DWORD *)(a1 + 72) = v11;
      }
      else
      {
        while (1)
        {
          v9 = v7;
          v10 = *(_DWORD *)(v8 + 72 * v7 + 8);
          v7 = v10 & 0x7FFFFFFF;
          if ((v10 & 0x7FFFFFFF) == 0x7FFFFFFF)
            break;
          v4 = re::DynamicString::operator==(v8 + 72 * v7 + 16, a2);
          if ((v4 & 1) != 0)
          {
            *(_DWORD *)(v8 + 72 * v9 + 8) = *(_DWORD *)(v8 + 72 * v9 + 8) & 0x80000000 | *(_DWORD *)(v8 + 72 * v7 + 8) & 0x7FFFFFFF;
            goto LABEL_8;
          }
        }
      }
    }
  }
  v12 = *re::audioLogObjects((re *)v4);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    if ((*(_BYTE *)(a2 + 8) & 1) != 0)
      v13 = *(_QWORD *)(a2 + 16);
    else
      v13 = a2 + 9;
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 296);
    v15 = 136315394;
    v16 = v13;
    v17 = 2048;
    v18 = v14;
    _os_log_impl(&dword_224FE9000, v12, OS_LOG_TYPE_INFO, "[CoreRE] [AudioLibraryComponent] unregistered asset with name %s (entityID=%llu).", (uint8_t *)&v15, 0x16u);
  }
}

const re::AssetHandle *re::ecs2::AudioLibraryComponent::getAsset@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, re::AssetHandle *a3@<X8>)
{
  const re::AssetHandle *result;
  char v5;

  result = (const re::AssetHandle *)re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(a1 + 32, a2);
  if (result)
  {
    result = re::AssetHandle::AssetHandle(a3, result);
    v5 = 1;
  }
  else
  {
    v5 = 0;
    *(_BYTE *)a3 = 0;
  }
  *((_BYTE *)a3 + 24) = v5;
  return result;
}

uint64_t re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::tryGet(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v4 = re::Hash<re::DynamicString>::operator()((uint64_t)&v8, a2);
  if (!*(_QWORD *)a1)
    return 0;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v4 % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v6 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v6 + 72 * v5 + 16, a2))
  {
    v5 = *(_DWORD *)(v6 + 72 * v5 + 8) & 0x7FFFFFFF;
    if (v5 == 0x7FFFFFFF)
      return 0;
  }
  return v6 + 72 * v5 + 48;
}

_QWORD *re::IntrospectionHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::~IntrospectionHashTable(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_24ED202D8;
  v2 = a1 + 6;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 8);
  re::SerializedReference<re::IntrospectionBase const*>::reset(v2);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

double re::IntrospectionHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::construct(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 36) = 0x7FFFFFFF;
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroy(uint64_t a1, uint64_t *a2)
{
  return re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
}

void re::IntrospectionHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::init(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int a4)
{
  signed int v7;

  re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a2);
  if (a4 <= 3)
    v7 = 3;
  else
    v7 = a4;
  re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)a2, a3, v7);
}

void re::IntrospectionHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a2, a3);
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 28);
}

void re::IntrospectionHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1, uint64_t a2)
{
  re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(a2);
}

re::IntrospectionBase *re::IntrospectionHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4, re::DynamicString *a5)
{
  re::IntrospectionBase *v8;
  _QWORD v10[3];

  memset(v10, 0, sizeof(v10));
  v8 = (re::IntrospectionBase *)re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a4, a5, v10);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 64), v8);
  return v8;
}

uint64_t re::IntrospectionHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::iterate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;

  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (int *)(*(_QWORD *)(a2 + 16) + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 18;
      if (v8 < 0)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a2 + 32);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  if ((_DWORD)v5 == (_DWORD)v6)
    return 1;
  v10 = v6;
  do
  {
    result = std::function<BOOL ()(void const*,void *)>::operator()(a3, *(_QWORD *)(a2 + 16) + 72 * v10 + 16, *(_QWORD *)(a2 + 16) + 72 * v10 + 48);
    if (!(_DWORD)result)
      break;
    v11 = *(_DWORD *)(a2 + 32) <= (v6 + 1) ? v6 + 1 : *(_DWORD *)(a2 + 32);
    while (1)
    {
      v10 = (v6 + 1);
      if (v11 - 1 == (_DWORD)v6)
        break;
      LODWORD(v6) = v6 + 1;
      v12 = v10;
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 16) + 72 * v10 + 8) & 0x80000000) != 0)
        goto LABEL_18;
    }
    v12 = v11;
LABEL_18:
    LODWORD(v6) = v12;
  }
  while ((_DWORD)v5 != v12);
  return result;
}

double re::IntrospectionHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::destroyKey(uint64_t a1, _QWORD *a2)
{
  double result;

  if (*a2)
  {
    if ((a2[1] & 1) != 0)
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 40))(*a2, a2[2]);
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
  }
  return result;
}

void re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), (re::DynamicString *)(*(_QWORD *)&v13[16] + v10 + 16));
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 72;
        }
        while (v11 < v9);
      }
      re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, re::DynamicString *a4, _QWORD *a5)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v10 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v10 == 0x7FFFFFFF)
  {
    v10 = *(unsigned int *)(a1 + 32);
    v11 = v10;
    if ((_DWORD)v10 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v11 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(_DWORD *)(v12 + 72 * v10 + 8);
    *(_DWORD *)(a1 + 36) = v13 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v12 + 72 * v10 + 8) = v13 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10) = a3;
  re::DynamicString::DynamicString((re::DynamicString *)(*(_QWORD *)(a1 + 16) + 72 * v10 + 16), a4);
  v14 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v10);
  v14[6] = 0;
  v14[7] = 0;
  v14[8] = 0;
  v14[7] = a5[1];
  a5[1] = 0;
  v15 = v14[6];
  v14[6] = 0;
  v14[6] = *a5;
  *a5 = v15;
  v16 = v14[8];
  v14[8] = a5[2];
  a5[2] = v16;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v10;
  ++*(_DWORD *)(a1 + 28);
  return v10;
}

void re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int v5;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    if (*(_DWORD *)(a1 + 32))
    {
      v3 = 0;
      v4 = 0;
      do
      {
        re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::EntryWithHash::free(*(_QWORD *)(a1 + 16) + v3);
        ++v4;
        v3 += 72;
      }
      while (v4 < *(unsigned int *)(a1 + 32));
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v5 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v5;
  }
}

uint64_t re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(uint64_t a1, re::DynamicString *a2, _QWORD *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v6 = re::Hash<re::DynamicString>::operator()((uint64_t)&v18, (uint64_t)a2);
  v7 = v6;
  if (!*(_QWORD *)a1)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % *(unsigned int *)(a1 + 24);
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v8);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v11 = re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addAsMove(a1, v8, v7, a2, a3);
    ++*(_DWORD *)(a1 + 40);
    v12 = *(_QWORD *)(a1 + 16) + 72 * v11;
    return v12 + 48;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (!re::DynamicString::operator==(v10 + 72 * v9 + 16, (uint64_t)a2))
  {
    v9 = *(_DWORD *)(v10 + 72 * v9 + 8) & 0x7FFFFFFF;
    if (v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v14 = (_QWORD *)(v10 + 72 * v9);
  v15 = v14[7];
  v14[7] = a3[1];
  a3[1] = v15;
  v16 = v14[6];
  v14[6] = 0;
  v14[6] = *a3;
  *a3 = v16;
  v17 = v14[8];
  v14[8] = a3[2];
  a3[2] = v17;
  ++*(_DWORD *)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 16) + 72 * v9;
  return v12 + 48;
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
  re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init(a1, a3, 3);
}

double re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t *a1)
{
  re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
  return re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

void re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1 == a3)
  {
    re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::clear((uint64_t)a1);
  }
  else
  {
    re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit(a1);
    re::HashTable<char const*,re::AssetLoadRequest::LoadStatistics::AssetTypeStats,re::Hash<char const*>,re::EqualTo<char const*>,true,false>::init((uint64_t)a1, a3, 3);
  }
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#3}::__invoke(uint64_t a1, _QWORD **a2, re::Allocator *a3, re::DynamicString *a4)
{
  void **Instance;
  uint64_t v9;
  _BYTE v11[32];
  _BYTE v12[8];
  _BYTE v13[32];

  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  Instance = re::TypeInfo::createInstance((re::TypeInfo *)v11, a3, 0);
  v9 = re::HashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::addOrReplace(a1, a4, Instance);
  re::TypeRegistry::typeInfo(*a2, a2[2][10], v12);
  re::TypeInfo::TypeInfo((uint64_t)v11, (uint64_t)v13);
  re::TypeInfo::releaseInstance((re::TypeInfo *)v11, Instance, a3, 0);
  return v9;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 40, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 40);
  *(_BYTE *)(result + 16) = 0;
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t result;

  v2 = *a1;
  if (*((_DWORD *)a1 + 2) == *(_DWORD *)(*a1 + 40))
  {
    v3 = *(unsigned int *)(v2 + 32);
    if (*((_BYTE *)a1 + 16))
    {
      v4 = *((_DWORD *)a1 + 8);
      if (v4 == (_DWORD)v3)
      {
        LODWORD(v5) = *(_DWORD *)(v2 + 32);
      }
      else
      {
        v8 = a1[3];
        v9 = *(_DWORD *)(v8 + 32);
        v10 = v4 + 1;
        do
        {
          LODWORD(v5) = v10;
          *((_DWORD *)a1 + 8) = v10;
          if (v10 >= v9)
            break;
          v11 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 72 * v10++ + 8);
        }
        while ((v11 & 0x80000000) == 0);
      }
    }
    else
    {
      v5 = 0;
      if ((_DWORD)v3)
      {
        v6 = (int *)(*(_QWORD *)(v2 + 16) + 8);
        while (1)
        {
          v7 = *v6;
          v6 += 18;
          if (v7 < 0)
            break;
          if (v3 == ++v5)
          {
            LODWORD(v5) = *(_DWORD *)(v2 + 32);
            break;
          }
        }
      }
      *((_BYTE *)a1 + 16) = 1;
      a1[3] = v2;
      a1[4] = v5;
      LODWORD(v3) = *(_DWORD *)(v2 + 32);
    }
    return (_DWORD)v5 != (_DWORD)v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 583);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#3}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 72 * *(unsigned int *)(a1 + 32) + 16;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 598);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *)#4}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 72 * *(unsigned int *)(a1 + 32) + 48;
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 607);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t re::TypeBuilderHelper::registerHashTable<re::DynamicString,re::AssetHandle,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>(re::TypeRegistry *,re::StringID const&,re::TypeID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t result;

  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 40))
    return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 40))(a2, a1);
  re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) HashTable entries may not be added or removed during iteration.", "iter->originalVersion == iter->hashTable->version()", "operator()", 616);
  result = _os_crash();
  __break(1u);
  return result;
}

uint64_t *re::ecs2::allocInfo_SpatialSceneClassificationComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254110880);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254110880))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541108A0, 0);
    *(uint64_t *)((char *)&qword_2541108B0 + 6) = 0;
    qword_2541108B0 = 0;
    qword_2541108C0 = 0;
    qword_2541108C8 = 0xFFFFFFFFLL;
    qword_2541108A0 = (uint64_t)&off_24ED7DAA8;
    qword_2541108D0 = (uint64_t)"SpatialSceneClassificationComponent";
    dword_2541108D8 = 0;
    xmmword_2541108E0 = 0u;
    unk_2541108F0 = 0u;
    xmmword_254110900 = 0u;
    qword_254110910 = 0;
    __cxa_guard_release(&qword_254110880);
  }
  return &qword_2541108A0;
}

void re::ecs2::initInfo_SpatialSceneClassificationComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0x70160EC3AACD711ELL;
  v18[1] = "SpatialSceneClassificationComponent";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_277);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&_MergedGlobals_277);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254110888 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_SpatialSceneClassificationType((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "m_spatialSceneClassification";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1900000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254110890 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::IntrospectionInfo<unsigned char [16]>::get(1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "m_spatialSceneRoomIdentifier";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x1A00000003;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254110898 = v16;
      __cxa_guard_release(&_MergedGlobals_277);
    }
  }
  *((_QWORD *)this + 2) = 0x3000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254110888;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SpatialSceneClassificationComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SpatialSceneClassificationComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SpatialSceneClassificationComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SpatialSceneClassificationComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

void re::internal::defaultConstruct<re::ecs2::SpatialSceneClassificationComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED685A8;
  *(_QWORD *)(v3 + 33) = 0;
  *(_QWORD *)(v3 + 25) = 0;
  *(_DWORD *)(v3 + 40) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::SpatialSceneClassificationComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::SpatialSceneClassificationComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED685A8;
  *(_QWORD *)(v1 + 33) = 0;
  *(_QWORD *)(v1 + 25) = 0;
  *(_DWORD *)(v1 + 40) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::SpatialSceneClassificationComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_SpatialSceneClassificationComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SpatialSceneClassificationComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SpatialSceneClassificationComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SpatialSceneClassificationComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SpatialSceneClassificationComponent>, this);
}

void re::ecs2::SpatialSceneClassificationComponent::setSpatialSceneClassification(uint64_t a1, int a2)
{
  int v4;
  _DWORD v5[2];
  __int16 v6;
  int v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(unsigned __int8 *)(a1 + 25);
    v5[0] = 67109376;
    v5[1] = v4;
    v6 = 1024;
    v7 = a2;
    _os_log_impl(&dword_224FE9000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "[RE/ECS] [SpatialScene] SpatialSceneClassificationComponent: Classification changed from [%hhu] -> [%hhu].", (uint8_t *)v5, 0xEu);
  }
  *(_BYTE *)(a1 + 25) = a2;
  *(_BYTE *)(a1 + 42) = 0;
}

void re::ecs2::SpatialSceneClassificationComponent::setSpatialSceneRoomIdentifier(re::ecs2::SpatialSceneClassificationComponent *this, const unsigned __int8 *a2)
{
  const unsigned __int8 *v4;
  int v5;
  char *v6;
  __int16 v7;
  char *v8;
  char v9[48];
  char out[40];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  memset(out, 0, 37);
  v4 = (const unsigned __int8 *)this + 26;
  uuid_unparse((const unsigned __int8 *)this + 26, out);
  *(_OWORD *)((char *)this + 26) = *(_OWORD *)a2;
  memset(v9, 0, 37);
  uuid_unparse(v4, v9);
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
  {
    v5 = 136315394;
    v6 = out;
    v7 = 2080;
    v8 = v9;
    _os_log_impl(&dword_224FE9000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "[RE/ECS] [SpatialScene] SpatialSceneClassificationComponent: Room UUID changed from [%s] -> [%s]", (uint8_t *)&v5, 0x16u);
  }
  *((_BYTE *)this + 43) = 0;
}

void re::ecs2::SpatialSceneClassificationComponent::~SpatialSceneClassificationComponent(re::ecs2::SpatialSceneClassificationComponent *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::SpatialSceneClassificationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::allocator()
{
  return *((_QWORD *)re::ecs2::ComponentImpl<re::ecs2::SpatialSceneClassificationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
         + 7);
}

uint64_t re::ecs2::ComponentImpl<re::ecs2::SpatialSceneClassificationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::commonComponentIndex()
{
  return -1;
}

void *re::ecs2::ComponentImpl<re::ecs2::SpatialSceneClassificationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::componentType()
{
  return re::ecs2::ComponentImpl<re::ecs2::SpatialSceneClassificationComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
}

double re::ecs2::MeshOffsetsAttributes::add(re::ecs2::MeshOffsetsAttributes *this, const re::MeshAsset *a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  double result;

  v4 = *((_QWORD *)a2 + 55);
  if (v4)
  {
    if (*((_QWORD *)a2 + 47) <= (unint64_t)a3)
    {
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    else
    {
      v8 = re::DataArray<re::MeshInstance>::get(v4 + 72, *(_QWORD *)(*((_QWORD *)a2 + 49) + 8 * a3));
      v9 = re::DataArray<re::MeshModel>::get(*((_QWORD *)a2 + 55) + 8, *(_QWORD *)(v8 + 16));
      if (*(_QWORD *)(v9 + 56) > (unint64_t)a4)
      {
        v10 = *(_DWORD *)(*(_QWORD *)(v9 + 64) + 560 * a4 + 468);
        re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::resize(this, *((_QWORD *)this + 2) + 1);
        v11 = *((_QWORD *)this + 4) + 192 * *((_QWORD *)this + 2);
        re::DynamicArray<float>::resize(v11 - 192, (3 * v10));
        *(_DWORD *)(v11 - 16) = 0;
        *(_QWORD *)&result = 1065353216;
        *(_OWORD *)(v11 - 144) = xmmword_2260E5F10;
        *(_OWORD *)(v11 - 128) = xmmword_2260E5F20;
        *(_OWORD *)(v11 - 112) = xmmword_2260E5F40;
        *(_OWORD *)(v11 - 96) = xmmword_2260E5D70;
        *(_OWORD *)(v11 - 80) = xmmword_2260E5F10;
        *(_OWORD *)(v11 - 64) = xmmword_2260E5F20;
        *(_OWORD *)(v11 - 48) = xmmword_2260E5F40;
        *(_OWORD *)(v11 - 32) = xmmword_2260E5D70;
        return result;
      }
    }
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return result;
}

_QWORD *re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v8 = 192 * a2;
    v9 = a2;
    do
    {
      v10 = v3[4];
      v11 = (_QWORD *)(v10 + v8);
      result = *(_QWORD **)(v10 + v8);
      if (result)
      {
        if (v11[4])
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
        v11[4] = 0;
        v11[1] = 0;
        v11[2] = 0;
        *v11 = 0;
        ++*(_DWORD *)(v10 + v8 + 24);
        v4 = v3[2];
      }
      ++v9;
      v8 += 192;
    }
    while (v9 < v4);
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 192 * v4 + 176;
      do
      {
        v7 = (_DWORD *)(v3[4] + v6);
        *((_QWORD *)v7 - 18) = 0;
        *((_QWORD *)v7 - 21) = 0;
        *((_QWORD *)v7 - 20) = 0;
        *((_QWORD *)v7 - 22) = 0;
        *(v7 - 38) = 0;
        *((_OWORD *)v7 - 8) = xmmword_2260E5F10;
        *((_OWORD *)v7 - 7) = xmmword_2260E5F20;
        *((_OWORD *)v7 - 6) = xmmword_2260E5F40;
        *((_OWORD *)v7 - 5) = xmmword_2260E5D70;
        *((_OWORD *)v7 - 4) = xmmword_2260E5F10;
        *((_OWORD *)v7 - 3) = xmmword_2260E5F20;
        *((_OWORD *)v7 - 2) = xmmword_2260E5F40;
        *((_OWORD *)v7 - 1) = xmmword_2260E5D70;
        v6 += 192;
        *v7 = 0;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

uint64_t re::AssetHandle::asset<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>(re::AssetHandle *a1)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>::assetType();
  v3 = re::AssetHandle::assetWithType(a1, (const re::AssetType *)v2, 0);
  if (!v3)
  {
    v4 = *re::assetsLogObjects(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v6 = re::AssetHandle::assetInfo(a1);
      if ((v6[17] & 1) != 0)
        v7 = (char *)v6[18];
      else
        v7 = (char *)v6 + 137;
      v8 = 136315138;
      v9 = v7;
      _os_log_error_impl(&dword_224FE9000, v4, OS_LOG_TYPE_ERROR, "Invalid asset: '%s'", (uint8_t *)&v8, 0xCu);
    }
  }
  return v3;
}

void re::ecs2::MeshOffsetsComponent::resetDeformerInputs(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id *v8;
  void *v9;
  re *inited;
  uint64_t v11;
  _QWORD *v12;
  id location;
  _QWORD v14[3];
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v8 = (id *)(a1 + 160);
  if (a2)
    v9 = (void *)(a2 + 8);
  else
    v9 = 0;
  inited = (re *)objc_initWeak(&location, v9);
  memset(v14, 0, sizeof(v14));
  v15 = re::globalAllocators(inited)[2];
  v16 = 0;
  re::FramePersistentPtr<re::ecs2::MeshOffsetsComponent::OffsetsDeformerInputs,re::FrameManager>::reset(v8, &location, a3, (uint64_t)v14);
  if (v16)
  {
    (*(void (**)(_QWORD *))*v16)(v16);
    if (v16 != v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
  }
  objc_destroyWeak(&location);
  if (a5)
  {
    v11 = 168 * a5;
    v12 = (_QWORD *)(a4 + 104);
    do
    {
      ++*((_BYTE *)v12 - 94);
      *v12 = 0;
      v12 += 21;
      v11 -= 168;
    }
    while (v11);
  }
}

re::ecs2::MeshOffsetsComponentStateImpl *re::ecs2::MeshOffsetsComponentStateImpl::MeshOffsetsComponentStateImpl(re::ecs2::MeshOffsetsComponentStateImpl *this)
{
  uint64_t *v2;
  uint64_t v4[2];
  _QWORD v5[2];
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24ED68628;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 7) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  v2 = (uint64_t *)((char *)this + 40);
  v6[0] = re::ecs2::ComponentImpl<re::ecs2::MeshComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v6[1] = re::ecs2::ComponentImpl<re::ecs2::MeshDeformationComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v6[2] = re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  v5[0] = v6;
  v5[1] = 3;
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::FixedArray((_anonymous_namespace_ *)v4, (uint64_t)v5);
  re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=(v2, v4);
  if (v4[0] && v4[1])
    (*(void (**)(void))(*(_QWORD *)v4[0] + 40))();
  return this;
}

uint64_t re::ecs2::MeshOffsetsComponentStateImpl::dependsOnComponents(re::ecs2::MeshOffsetsComponentStateImpl *this)
{
  return *((_QWORD *)this + 7);
}

BOOL re::ecs2::MeshOffsetsComponentStateImpl::processDirtyComponents(_QWORD *a1, uint64_t a2, _QWORD *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  re::ecs2::ComponentBucketsBase *v39;
  unint64_t v40;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;

  v9 = a1[1];
  if (v9)
    v10 = (*(_BYTE *)(v9 + 424) & 0x10) == 0;
  else
    v10 = 0;
  v11 = a1[4];
  if (v11)
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 104))(v11);
  else
    v12 = 0;
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v44, a5, 0);
  v13 = v44;
  v14 = v45;
  v44 = a4;
  v45 = v13;
  v46 = v14;
  v15 = (unsigned __int16)v14;
  v16 = v14 & 0xFFFF0000;
  if (v13 != a5 || v15 != 0xFFFF || v16 != 4294901760)
  {
    while (1)
    {
      v19 = (uint64_t *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v45);
      v20 = *v19;
      v21 = *(_QWORD *)(*v19 + 16);
      v22 = *(_QWORD *)(v21 + 184);
      v23 = *(_QWORD **)(*v19 + 168);
      if (v23)
      {
        if (v22)
        {
          v24 = *(_QWORD *)(v22 + 248) != *v23 || v12 == 0;
          if (!v24 && v23[1] == v12)
            goto LABEL_40;
          v25 = *(_QWORD *)(v22 + 392);
          v27 = *(_QWORD *)(v25 + 88);
          v26 = *(_QWORD *)(v25 + 96);
        }
        else
        {
          v27 = 0;
          v26 = 0;
        }
        re::ecs2::MeshOffsetsComponent::resetDeformerInputs(*v19, *(_QWORD *)(a1[2] + 136), 0, v26, v27);
      }
      v28 = *(_QWORD *)(v21 + 176);
      v29 = !v28 || v22 == 0;
      if (v29 || !*(_QWORD *)(v28 + 40))
        break;
      if (!*(_QWORD *)(v20 + 80) && a1[3])
      {
        v30 = re::globalAllocators((re *)v19);
        v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30[2] + 32))(v30[2], 40, 8);
        *(_OWORD *)v31 = 0u;
        *(_OWORD *)(v31 + 16) = 0u;
        *(_QWORD *)(v31 + 32) = 0;
        re::DynamicArray<re::MeshIdentifierAsset>::setCapacity((_QWORD *)v31, 0);
        ++*(_DWORD *)(v31 + 24);
        v32 = a1[3];
        v33 = re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>::assetType();
        (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v32 + 416))(&v42, v32, v31, v33, 0, 0, 0);
        v34 = *(_OWORD *)(v20 + 72);
        *(_OWORD *)(v20 + 72) = v42;
        v42 = v34;
        v35 = *(_QWORD *)(v20 + 88);
        *(_QWORD *)(v20 + 88) = v43;
        v43 = v35;
        re::AssetHandle::~AssetHandle((re::AssetHandle *)&v42);
      }
      if (a1[2])
        v36 = v10;
      else
        v36 = 1;
      v37 = v44;
      v38 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v45);
      v39 = (re::ecs2::ComponentBucketsBase *)a3[2];
      if (v36 == 1)
        goto LABEL_38;
      v40 = a3[5];
LABEL_39:
      re::ecs2::ComponentBucketsBase::moveComponent(v39, v37, v38, v40);
LABEL_40:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v45);
      if (v45 == a5 && (unsigned __int16)v46 == 0xFFFF && WORD1(v46) == 0xFFFF)
        return *(_DWORD *)(a5 + 40) != 0;
    }
    v37 = v44;
    v38 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v45);
    v39 = (re::ecs2::ComponentBucketsBase *)a3[2];
LABEL_38:
    v40 = a3[4];
    goto LABEL_39;
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

BOOL re::ecs2::MeshOffsetsComponentStateImpl::processPreparingComponents(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t v19;
  _QWORD *v20;
  re::ecs2::EntityComponentCollection *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned __int8 *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  re::ecs2::EntityComponentCollection *v40;
  _QWORD *v41;
  re *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _anonymous_namespace_ *v51;
  uint64_t *v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  int started;
  re::ecs2::MeshDeformationComponent *v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  re::ecs2::ComponentBucketsBase *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  _anonymous_namespace_ *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unsigned int v78;
  unsigned int v79;
  re *v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  id v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  unint64_t v98;
  NSObject *v99;
  uint64_t v100;
  uint64_t v102;
  unsigned __int8 *v105;
  unsigned __int8 *v106;
  unint64_t v108;
  unint64_t v109;
  re::MeshNameMap *v110;
  uint64_t v111;
  re::ecs2::MeshComponent *v112;
  re::ecs2::MeshComponent *v113;
  _QWORD *v114;
  uint64_t v115;
  unsigned __int16 v116;
  _QWORD v117[2];
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint8_t buf[32];
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  int v129;
  id v130;
  uint64_t v131;
  _QWORD v132[6];
  __int128 v133;
  __int128 v134;
  _BYTE v135[12];
  __int16 v136;
  int v137;
  __int16 v138;
  unint64_t v139;
  __int16 v140;
  uint64_t **v141;
  uint64_t v142;

  v142 = *MEMORY[0x24BDAC8D0];
  v111 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 32);
  if (v9)
    v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 104))(v9);
  else
    v102 = 0;
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)buf, a5, 0);
  v118 = a4;
  v119 = *(_QWORD *)buf;
  v120 = *(_QWORD *)&buf[8];
  if (*(_QWORD *)buf != a5
    || *(unsigned __int16 *)&buf[8] != 0xFFFFLL
    || (*(_DWORD *)&buf[8] & 0xFFFF0000) != 4294901760)
  {
    do
    {
      v12 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v119);
      v13 = *(uint64_t **)v12;
      v14 = *(_QWORD *)(*(_QWORD *)v12 + 16);
      if (*(_QWORD *)(*(_QWORD *)v12 + 80))
      {
        v15 = re::AssetHandle::asset<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>((re::AssetHandle *)(v13 + 9));
        if (v15)
        {
          v16 = v13[2];
          if (v16)
          {
            v17 = *(_QWORD *)(v16 + 176);
            if (v17)
            {
              v18 = (uint64_t **)v15;
              v19 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(v17 + 32));
              if (v19)
              {
                v20 = (_QWORD *)v19;
                if (*(_QWORD *)(v19 + 440))
                {
                  v21 = (re::ecs2::EntityComponentCollection *)(v16 + 32);
                  v22 = v20[49];
                  v23 = v20[47];
                  v24 = re::ecs2::EntityComponentCollection::get(v21, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
                  if (v24)
                  {
                    v110 = (re::MeshNameMap *)(v24 + 216);
                    v22 = *(_QWORD *)(v24 + 208);
                    v23 = *(_QWORD *)(v24 + 192);
                  }
                  else
                  {
                    v110 = (re::MeshNameMap *)(v20 + 56);
                  }
                  v25 = v18[2];
                  if (v25)
                  {
                    v6 = v14;
                    LODWORD(v26) = 0;
                    v7 = (unint64_t)v18[4];
                    v27 = 40 * (_QWORD)v25;
                    do
                    {
                      re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)v110, (unsigned __int8 *)v7, buf);
                      v5 = *(unsigned int *)buf;
                      if (*((_QWORD *)&v123 + 1))
                      {
                        (***((void (****)(_QWORD))&v123 + 1))(*((_QWORD *)&v123 + 1));
                        if (*((uint8_t **)&v123 + 1) != &buf[8])
                          (*(void (**)(_QWORD))(*(_QWORD *)v123 + 40))(v123);
                      }
                      v26 = (v26 + v5);
                      v7 += 40;
                      v27 -= 40;
                    }
                    while (v27);
                    v14 = v6;
                  }
                  else
                  {
                    v26 = 0;
                  }
                  re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::resize(v13 + 4, v26);
                  v28 = v18[2];
                  if (v28)
                  {
                    v112 = 0;
                    v29 = (unsigned __int8 *)v18[4];
                    v105 = &v29[40 * (_QWORD)v28];
                    v108 = v14;
                    do
                    {
                      v106 = v29;
                      re::MeshNameMap::meshInstancePartsForIdentifier((uint64_t)v110, v29, v132);
                      if (v132[0])
                      {
                        v30 = 0;
                        do
                        {
                          *(_QWORD *)buf = v30;
                          v32 = (*(unsigned int (**)(_QWORD, uint8_t *))(*(_QWORD *)v132[5] + 16))(v132[5], buf);
                          if (v23 <= v32)
                            goto LABEL_108;
                          v18 = (uint64_t **)((char *)v112 + v30);
                          v33 = re::DataArray<re::MeshInstance>::tryGet(v20[55] + 72, *(_QWORD *)(v22 + 8 * v32));
                          v34 = re::DataArray<re::MeshModel>::tryGet(v20[55] + 8, *(_QWORD *)(v33 + 16));
                          v5 = ((_DWORD)v112 + v30);
                          v6 = v13[6];
                          if (v6 <= v5)
                            goto LABEL_109;
                          v35 = v34;
                          v7 = v23;
                          v36 = v22;
                          v37 = v13[8];
                          *(_QWORD *)buf = v30;
                          v6 = (unsigned __int16)((unint64_t)(*(uint64_t (**)(_QWORD, uint8_t *))(*(_QWORD *)v132[5] + 16))(v132[5], buf) >> 32);
                          v18 = *(uint64_t ***)(v35 + 56);
                          if ((unint64_t)v18 <= v6)
                            goto LABEL_110;
                          re::DynamicArray<float>::resize(v37 + 192 * v5, (3 * *(_DWORD *)(*(_QWORD *)(v35 + 64) + 560 * v6 + 468)));
                          ++v30;
                          v22 = v36;
                          v23 = v7;
                        }
                        while (v30 != v132[0]);
                        v112 = (re::ecs2::MeshComponent *)((_DWORD)v112 + v30);
                        v14 = v108;
                      }
                      if (v132[5])
                      {
                        (**(void (***)(_QWORD))v132[5])(v132[5]);
                        if ((_QWORD *)v132[5] != &v132[1])
                          (*(void (**)(_QWORD))(*(_QWORD *)v132[4] + 40))(v132[4]);
                      }
                      v29 = v106 + 40;
                    }
                    while (v106 + 40 != v105);
                  }
                }
              }
            }
          }
        }
      }
      v38 = re::AssetHandle::loadedAsset<re::BasicAsset<re::AssignedMeshDeformation,&re::kAssignedMeshDeformationAssetName,&re::kAssignedMeshDeformationAssetExtension>>((re::AssetHandle *)(v13 + 9));
      if (!v38)
      {
        re::AssetHandle::loadAsync((re::AssetHandle *)(v13 + 9));
        goto LABEL_103;
      }
      v39 = v38;
      v40 = (re::ecs2::EntityComponentCollection *)(v14 + 32);
      v109 = v14;
      v41 = *(_QWORD **)(v14 + 176);
      v30 = re::AssetHandle::asset<re::MeshAsset>((re::MeshAsset *)(v41 + 4)) + 448;
      v42 = (re *)re::ecs2::EntityComponentCollection::get(v40, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshSceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v42)
        v30 = (unint64_t)v42 + 216;
      v43 = v41[5];
      if (v43)
        v44 = *(_QWORD *)(v43 + 664);
      else
        v44 = 0;
      v45 = v13[10];
      v113 = (re::ecs2::MeshComponent *)v41;
      if (v45)
        v46 = *(_QWORD *)(v45 + 664);
      else
        v46 = 0;
      v47 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v43 ^ (v43 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v43 ^ (v43 >> 30))) >> 27));
      v48 = v44 ^ (v47 >> 31) ^ v47;
      v49 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v45 ^ (v45 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v45 ^ (v45 >> 30))) >> 27));
      v50 = ((v48 << 6)
           - 0x61C8864680B583E9
           + (v48 >> 2)
           + ((*(_QWORD *)(v30 + 8)
             - 0x61C8864680B583E9
             + ((v46 ^ (v49 >> 31) ^ v49) << 6)
             + ((v46 ^ (v49 >> 31) ^ v49) >> 2)) ^ v46 ^ (v49 >> 31) ^ v49)) ^ v48;
      v18 = (uint64_t **)(v13 + 12);
      if (v13[13] != v50)
      {
        v51 = (_anonymous_namespace_ *)re::DeformedMeshAssetsMap::clear((re::DeformedMeshAssetsMap *)(v13 + 12));
        v52 = *v18;
        if (!*v18)
        {
          v13[13] = -1;
        }
        re::FixedArray<int>::init<>(v13 + 17, (uint64_t)v52, *(unsigned int *)(v30 + 216));
        if (*(_DWORD *)(v30 + 216))
        {
          v53 = 0;
          v7 = 0;
          do
          {
            v5 = v13[18];
            if (v5 <= v7)
              goto LABEL_111;
            *(_DWORD *)(v13[19] + 4 * v7) = v53;
            v53 += re::MeshNameMap::meshPartInstanceCount((re::MeshNameMap *)v30, v7++);
          }
          while (v7 < *(unsigned int *)(v30 + 216));
        }
        v54 = *(_QWORD *)(v30 + 336);
        if (v54)
          v55 = *(unsigned int *)(*(_QWORD *)(v30 + 344) + 4 * v54 - 4);
        else
          v55 = 0;
        v56 = v13[12];
        *(_DWORD *)buf = -1;
        v42 = (re *)re::FixedArray<unsigned int>::init<int>(v13 + 14, v56, v55, buf);
        if (*(_QWORD *)(v39 + 16))
        {
          v7 = 0;
          v57 = 0;
          while (1)
          {
            re::MeshNameMap::meshInstancePartsForIdentifier(v30, (unsigned __int8 *)(*(_QWORD *)(v39 + 32) + 40 * v57), v132);
            if (v132[0])
              break;
LABEL_68:
            v42 = (re *)v132[5];
            if (v132[5])
            {
              v42 = (re *)(**(uint64_t (***)(_QWORD))v132[5])(v132[5]);
              if ((_QWORD *)v132[5] != &v132[1])
                v42 = (re *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v132[4] + 40))(v132[4]);
            }
            if ((unint64_t)++v57 >= *(_QWORD *)(v39 + 16))
              goto LABEL_72;
          }
          v5 = 0;
          while (1)
          {
            *(_QWORD *)buf = v5;
            v58 = (*(uint64_t (**)(_QWORD, uint8_t *))(*(_QWORD *)v132[5] + 16))(v132[5], buf);
            started = re::MeshNameMap::meshPartStartIndexForInstance((re::MeshNameMap *)v30, v58);
            *(_QWORD *)buf = v5;
            v6 = started
               + (unsigned __int16)((unint64_t)(*(uint64_t (**)(_QWORD, uint8_t *))(*(_QWORD *)v132[5] + 16))(v132[5], buf) >> 32);
            v23 = v13[15];
            if (v23 <= v6)
              break;
            *(_DWORD *)(v13[16] + 4 * v6) = v7 + v5++;
            if (v5 == v132[0])
            {
              v7 = (v7 + v5);
              goto LABEL_68;
            }
          }
          v114 = 0;
          v125 = 0u;
          v123 = 0u;
          v124 = 0u;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v135 = 136315906;
          *(_QWORD *)&v135[4] = "operator[]";
          v136 = 1024;
          v137 = 468;
          v138 = 2048;
          v139 = v6;
          v140 = 2048;
          v141 = (uint64_t **)v23;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_108:
          re::internal::assertLog((re::internal *)6, v31, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v32, v23);
          _os_crash();
          __break(1u);
LABEL_109:
          v114 = 0;
          v125 = 0u;
          v123 = 0u;
          v124 = 0u;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v135 = 136315906;
          *(_QWORD *)&v135[4] = "operator[]";
          v136 = 1024;
          v137 = 789;
          v138 = 2048;
          v139 = v5;
          v140 = 2048;
          v141 = (uint64_t **)v6;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_110:
          v114 = 0;
          v125 = 0u;
          v123 = 0u;
          v124 = 0u;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v135 = 136315906;
          *(_QWORD *)&v135[4] = "operator[]";
          v136 = 1024;
          v137 = 476;
          v138 = 2048;
          v139 = v6;
          v140 = 2048;
          v141 = v18;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_111:
          *(_QWORD *)v135 = 0;
          v125 = 0u;
          v123 = 0u;
          v124 = 0u;
          memset(buf, 0, sizeof(buf));
          v71 = MEMORY[0x24BDACB70];
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v132[0]) = 136315906;
          *(_QWORD *)((char *)v132 + 4) = "operator[]";
          WORD2(v132[1]) = 1024;
          *(_DWORD *)((char *)&v132[1] + 6) = 468;
          WORD1(v132[2]) = 2048;
          *(_QWORD *)((char *)&v132[2] + 4) = v7;
          WORD2(v132[3]) = 2048;
          *(_QWORD *)((char *)&v132[3] + 6) = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_112:
          re::internal::assertLog((re::internal *)6, v81, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 658, v71, v30);
          _os_crash();
          __break(1u);
LABEL_113:
          v121 = 0;
          v133 = 0u;
          v134 = 0u;
          memset(v132, 0, sizeof(v132));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          *(_DWORD *)v135 = 136315906;
          *(_QWORD *)&v135[4] = "operator[]";
          v136 = 1024;
          v137 = 468;
          v138 = 2048;
          v139 = v71;
          v140 = 2048;
          v141 = (uint64_t **)v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_114:
          *(_QWORD *)v135 = 0;
          v125 = 0u;
          v123 = 0u;
          v124 = 0u;
          memset(buf, 0, sizeof(buf));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          LODWORD(v132[0]) = 136315906;
          *(_QWORD *)((char *)v132 + 4) = "operator[]";
          WORD2(v132[1]) = 1024;
          *(_DWORD *)((char *)&v132[1] + 6) = 468;
          WORD1(v132[2]) = 2048;
          *(_QWORD *)((char *)&v132[2] + 4) = v71;
          WORD2(v132[3]) = 2048;
          *(_QWORD *)((char *)&v132[3] + 6) = v5;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
LABEL_115:
          re::internal::assertLog((re::internal *)6, v73, "assertion failure: '%s' (%s:line %i) Size overflow in FixedArray<T>::init(). Element size = %zu, count = %zu", "!overflow", "init", 324, 160, v71);
          _os_crash();
          __break(1u);
LABEL_116:
          re::internal::assertLog((re::internal *)4, v75, "assertion failure: '%s' (%s:line %i) Out of memory.", "m_data", "init", 327);
          _os_crash();
          __break(1u);
        }
LABEL_72:
        v13[13] = v50;
      }
      v60 = *(re::ecs2::MeshDeformationComponent **)(v109 + 184);
      if (*((_QWORD *)v60 + 30))
      {
        if (!v13[6])
        {
          v62 = v118;
          v63 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v119);
          v64 = (re::ecs2::ComponentBucketsBase *)a3[2];
          v65 = a3[4];
          goto LABEL_102;
        }
        v61 = (_QWORD *)v13[21];
        if (!v61 || *v61 != *((_QWORD *)v60 + 31))
        {
          v66 = *((_QWORD *)v60 + 49);
          v30 = *(_QWORD *)(v66 + 88);
          v7 = *(_QWORD *)(v66 + 96);
          v67 = *(_QWORD *)(a1 + 16);
          v68 = re::globalAllocators(v42);
          v69 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v68[2] + 32))(v68[2], 40, 8);
          *v69 = *((_QWORD *)v60 + 31);
          v69[1] = v102;
          v69[3] = 0;
          v69[4] = 0;
          v69[2] = 0;
          re::ecs2::MeshOffsetsComponent::resetDeformerInputs((uint64_t)v13, *(_QWORD *)(v67 + 136), v69, v7, v30);
          v70 = (_QWORD *)v13[21];
          v71 = *((_QWORD *)v60 + 32);
          v70[3] = v71;
          if (v71)
          {
            if (v71 >= 0x19999999999999ALL)
              goto LABEL_115;
            v70[4] = v74;
            if (!v74)
              goto LABEL_116;
            v76 = v71 - 1;
            if (v71 != 1)
            {
              do
              {
                *(_DWORD *)(v74 + 128) = 0;
                *(_OWORD *)(v74 + 96) = 0uLL;
                *(_OWORD *)(v74 + 112) = 0uLL;
                *(_OWORD *)(v74 + 64) = 0uLL;
                *(_OWORD *)(v74 + 80) = 0uLL;
                *(_OWORD *)(v74 + 32) = 0uLL;
                *(_OWORD *)(v74 + 48) = 0uLL;
                *(_OWORD *)v74 = 0uLL;
                *(_OWORD *)(v74 + 16) = 0uLL;
                *(_QWORD *)(v74 + 136) = 0;
                *(_QWORD *)(v74 + 144) = 0;
                v74 += 160;
                --v76;
              }
              while (v76);
            }
            *(_DWORD *)(v74 + 128) = 0;
            *(_OWORD *)(v74 + 96) = 0uLL;
            *(_OWORD *)(v74 + 112) = 0uLL;
            *(_OWORD *)(v74 + 64) = 0uLL;
            *(_OWORD *)(v74 + 80) = 0uLL;
            *(_OWORD *)(v74 + 32) = 0uLL;
            *(_OWORD *)(v74 + 48) = 0uLL;
            *(_OWORD *)v74 = 0uLL;
            *(_OWORD *)(v74 + 16) = 0uLL;
            *(_QWORD *)(v74 + 136) = 0;
            *(_QWORD *)(v74 + 144) = 0;
          }
          v117[0] = (char *)v60 + 232;
          v117[1] = 10;
          v114 = (_QWORD *)((char *)v60 + 232);
          v115 = 10;
          v116 = 0;
          while (1)
          {
            re::MeshDeformationRuntimeData::MeshDeformationIteration::end((unsigned int *)v117, (uint64_t)buf);
            if (HIDWORD(v115) == *(_DWORD *)&buf[12] && v116 == *(unsigned __int16 *)&buf[16])
              break;
            v77 = re::MeshDeformationRuntimeData::MeshDeformationIterator::originalMeshInstanceAndPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)&v114);
            v78 = re::DeformedMeshAssetsMap::deformedIndex((re::DeformedMeshAssetsMap *)(v13 + 12), v77, WORD2(v77));
            if (v78 != -1)
            {
              v79 = v78;
              v80 = (re *)re::MeshDeformationRuntimeData::MeshDeformationIterator::absoluteDeformedMeshPartIndex((re::MeshDeformationRuntimeData::MeshDeformationIterator *)&v114);
              v71 = v80;
              if (v30 <= v80)
                goto LABEL_112;
              if (v13[6] <= (unint64_t)v79)
              {
                v99 = *re::graphicsLogObjects(v80);
                if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
                {
                  v100 = v13[6];
                  *(_DWORD *)buf = 67109376;
                  *(_DWORD *)&buf[4] = v79;
                  *(_WORD *)&buf[8] = 2048;
                  *(_QWORD *)&buf[10] = v100;
                  _os_log_impl(&dword_224FE9000, v99, OS_LOG_TYPE_DEFAULT, "Missing attributes for some parts of assigned mesh (deformed index %u, but only %zu attributes have been added). Skipping.", buf, 0x12u);
                }
              }
              else
              {
                v82 = v13[8] + 192 * v79;
                v83 = *(_OWORD *)(v82 + 48);
                v84 = *(_OWORD *)(v82 + 64);
                v85 = *(_OWORD *)(v82 + 96);
                v123 = *(_OWORD *)(v82 + 80);
                v124 = v85;
                *(_OWORD *)buf = v83;
                *(_OWORD *)&buf[16] = v84;
                v86 = *(_OWORD *)(v82 + 112);
                v87 = *(_OWORD *)(v82 + 128);
                v88 = *(_OWORD *)(v82 + 160);
                v127 = *(_OWORD *)(v82 + 144);
                v128 = v88;
                v125 = v86;
                v126 = v87;
                v129 = *(_DWORD *)(v82 + 176);
                v89 = objc_msgSend(*(id *)(v111 + 184), sel_newBufferWithBytes_length_options_, *(_QWORD *)(v82 + 32), 4 * *(_QWORD *)(v82 + 16), 0);
                v130 = v89;
                LODWORD(v131) = 0;
                HIDWORD(v131) = objc_msgSend(v89, sel_length);
                v5 = v70[3];
                if (v5 <= v71)
                  goto LABEL_113;
                v90 = v70[4] + 160 * v71;
                *(_OWORD *)v90 = *(_OWORD *)buf;
                v91 = *(_OWORD *)&buf[16];
                v92 = v123;
                v93 = v125;
                *(_OWORD *)(v90 + 48) = v124;
                *(_OWORD *)(v90 + 64) = v93;
                *(_OWORD *)(v90 + 16) = v91;
                *(_OWORD *)(v90 + 32) = v92;
                v94 = v126;
                v95 = v127;
                v96 = v128;
                *(_DWORD *)(v90 + 128) = v129;
                *(_OWORD *)(v90 + 96) = v95;
                *(_OWORD *)(v90 + 112) = v96;
                *(_OWORD *)(v90 + 80) = v94;
                NS::SharedPtr<MTL::Texture>::operator=((void **)(v90 + 136), &v130);
                *(_QWORD *)(v90 + 144) = v131;
                if (v130)
                {

                  v130 = 0;
                }
                if (v89)

                v5 = v70[3];
                if (v5 <= v71)
                  goto LABEL_114;
                v97 = v70[4] + 160 * v71;
                v98 = v7 + 168 * v71;
                ++*(_BYTE *)(v98 + 10);
                *(_QWORD *)(v98 + 104) = v97;
              }
            }
            re::MeshDeformationRuntimeData::MeshDeformationIterator::operator++((uint64_t)&v114);
          }
        }
        if (re::ecs2::MeshDeformationComponent::areRequiredAssetsLoaded(v60, v113))
        {
          v62 = v118;
          v63 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v119);
          v64 = (re::ecs2::ComponentBucketsBase *)a3[2];
          v65 = a3[6];
LABEL_102:
          re::ecs2::ComponentBucketsBase::moveComponent(v64, v62, v63, v65);
        }
      }
LABEL_103:
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v119);
    }
    while (v119 != a5 || (unsigned __int16)v120 != 0xFFFF || WORD1(v120) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::MeshOffsetsSystem::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *WeakRetained;
  uint64_t v5;
  id *v6;
  unint64_t v7;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  uint64_t v11;
  re *isStatisticCollectionEnabled;
  uint64_t v13;
  int64x2_t *v14;
  unint64_t v15;
  unint64_t v16;
  int64x2_t v17;
  _anonymous_namespace_ *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t FirstBitSet;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  _BYTE v50[16];
  uint64_t v51[2];
  _QWORD v52[2];
  _QWORD v53[2];
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  _QWORD v61[3];
  uint64_t v62;

  v52[0] = a2;
  v52[1] = a3;
  re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v51);
  WeakRetained = (id *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 120))(*(_QWORD *)(a1 + 40));
  if (v5)
  {
    v6 = WeakRetained;
    v7 = 0;
    v8 = 8 * v5;
    do
    {
      WeakRetained = (id *)objc_loadWeakRetained(v6);
      if (WeakRetained)
      {
        v9 = WeakRetained;
        v10 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(WeakRetained + 24), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v10)
          v11 = *(_QWORD *)(v10 + 24);
        else
          v11 = 0;
        v7 += v11;

      }
      ++v6;
      v8 -= 8;
    }
    while (v8);
  }
  else
  {
    v7 = 0;
  }
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)WeakRetained);
  if ((isStatisticCollectionEnabled & 1) != 0)
  {
    v13 = re::profilerThreadContext(isStatisticCollectionEnabled);
    v14 = *(int64x2_t **)(v13 + 152);
    if (v14)
    {
      v15 = v14[456].u64[0];
      if (v15 >= v7)
        v15 = v7;
      v14[456].i64[0] = v15;
      v16 = v14[456].u64[1];
      if (v16 <= v7)
        v16 = v7;
      v14[456].i64[1] = v16;
      v17 = vdupq_n_s64(1uLL);
      v17.i64[0] = v7;
      v14[457] = vaddq_s64(v14[457], v17);
      *(_BYTE *)(v13 + 184) = 0;
    }
  }
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v50, 3069, a1);
  v18 = (_anonymous_namespace_ *)re::DynamicOverflowArray<unsigned long long,2ul>::DynamicOverflowArray((uint64_t)&v58, (uint64_t *)(a1 + 272));
  v61[2] = *(_QWORD *)(a1 + 312);
  v54 = 1;
  v55 = 0;
  v56 = 0;
  v53[1] = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v53, 0);
  v54 += 2;
  v19 = *(_QWORD *)(a1 + 312);
  if ((v19 & 0x3F) != 0)
    v20 = (v19 >> 6) + 1;
  else
    v20 = v19 >> 6;
  v57 = *(_QWORD *)(a1 + 312);
  v62 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)v53, v20, &v62);
  v21 = *(_DWORD *)(a1 + 288);
  if ((v21 & 1) != 0)
    v22 = (_QWORD *)(a1 + 296);
  else
    v22 = *(_QWORD **)(a1 + 304);
  v23 = *(_QWORD *)(a1 + 280);
  v24 = (uint64_t *)(a1 + 296);
  while (1)
  {
    v25 = a1 + 296;
    if ((v21 & 1) == 0)
      v25 = *(_QWORD *)(a1 + 304);
    if (v22 == (_QWORD *)(v25 + 8 * v23))
      break;
    *v22++ = 0;
    v21 = *(_DWORD *)(a1 + 288);
  }
  v26 = v61;
  if ((v60 & 1) == 0)
    v26 = (unint64_t *)v61[1];
  v27 = v59;
  if ((v59 & 0x3FFFFFFFFFFFFFFLL) != 0)
  {
    v28 = 0;
    while (1)
    {
      v30 = *v26++;
      v29 = v30;
      if (v30)
        break;
      v28 -= 64;
      if (!--v27)
        goto LABEL_49;
    }
    v31 = __clz(__rbit64(v29));
    if (v31 + 1 != v28)
    {
      FirstBitSet = v31 - v28;
      do
      {
        v33 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 104, FirstBitSet);
        v34 = *(_QWORD *)(*v33 + 224);
        v35 = v33[3];
        v36 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v33[2] + 8, v35);
        if (*(_DWORD *)(v36 + 40))
          v37 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v34 + 24))(v34, v52, v33, v35, v36, 0);
        else
          v37 = 0;
        v38 = v33[5];
        v39 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v33[2] + 8, v38);
        if (*(_DWORD *)(v39 + 40))
          v37 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v34 + 32))(v34, v52, v33, v38, v39, 0);
        v40 = v33[6];
        v41 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v33[2] + 8, v40);
        if (*(_DWORD *)(v41 + 40))
        {
          if (((v37 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v34 + 40))(v34, v52, v33, v40, v41, 0)) & 1) == 0)goto LABEL_47;
        }
        else if (!v37)
        {
LABEL_47:
          re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v53, FirstBitSet);
          goto LABEL_48;
        }
        re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v53, FirstBitSet);
LABEL_48:
        FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)&v58, FirstBitSet + 1);
      }
      while (FirstBitSet != -1);
    }
  }
LABEL_49:
  re::DynamicBitset<unsigned long long,64ul>::orWithBitSet(a1 + 272, (uint64_t)v53);
  if (*(_BYTE *)(a1 + 336))
  {
    v42 = *(_QWORD *)(a1 + 280);
    v43 = *(_DWORD *)(a1 + 288);
    if (v42 >= 0xB)
    {
      if ((v43 & 1) == 0)
        v24 = *(uint64_t **)(a1 + 304);
      v44 = 8 * v42;
      while (!*v24)
      {
        ++v24;
        v44 -= 8;
        if (!v44)
          goto LABEL_65;
      }
      goto LABEL_63;
    }
    if ((v43 & 1) == 0)
      v24 = *(uint64_t **)(a1 + 304);
    if (v42)
    {
      v45 = 0;
      v46 = 8 * v42;
      do
      {
        v47 = *v24++;
        v45 |= v47;
        v46 -= 8;
      }
      while (v46);
      if (v45)
      {
LABEL_63:
        v48 = *(re::ecs2::System **)(a1 + 320);
        if (!*((_BYTE *)v48 + 86))
          re::ecs2::System::queueToRun(v48, 0.0);
      }
    }
  }
LABEL_65:
  if (v53[0] && (v54 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v53[0] + 40))();
  if (v58 && (v60 & 1) == 0)
    (*(void (**)(void))(*(_QWORD *)v58 + 40))();
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v50);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v51);
}

uint64_t re::ecs2::MeshOffsetsSystem::update(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  re *isStatisticCollectionEnabled;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64x2_t *v11;
  unint64_t v12;
  unint64_t v13;
  int64x2_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  re::ecs2::System *v33;
  _BYTE v35[16];
  uint64_t v36[2];
  _QWORD v37[2];
  uint64_t v38;

  v37[0] = a3;
  v37[1] = a4;
  v6 = re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v36);
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    v8 = re::profilerThreadContext(isStatisticCollectionEnabled);
    v9 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    v10 = v9 ? *(_QWORD *)(v9 + 24) : 0;
    v11 = *(int64x2_t **)(v8 + 152);
    if (v11)
    {
      v12 = v11[456].u64[0];
      if (v12 >= v10)
        v12 = v10;
      v11[456].i64[0] = v12;
      v13 = v11[456].u64[1];
      if (v13 <= v10)
        v13 = v10;
      v11[456].i64[1] = v13;
      v14 = vdupq_n_s64(1uLL);
      v14.i64[0] = v10;
      v11[457] = vaddq_s64(v11[457], v14);
      *(_BYTE *)(v8 + 184) = 0;
    }
  }
  re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v35, 3069, a1);
  v38 = a2;
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 168)
                  + 16
                  * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(a1 + 160), &v38)+ 8);
  re::DynamicBitset<unsigned long long,64ul>::clearBit(a1 + 272, v15);
  v16 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](a1 + 104, v15);
  v17 = *(_QWORD *)(*v16 + 224);
  v18 = v16[3];
  v19 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v18);
  if (*(_DWORD *)(v19 + 40))
    v20 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v17 + 24))(v17, v37, v16, v18, v19, 0);
  else
    v20 = 0;
  v21 = v16[5];
  v22 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v21);
  if (*(_DWORD *)(v22 + 40))
    v20 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, v37, v16, v21, v22, 0);
  v23 = v16[6];
  v24 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v16[2] + 8, v23);
  if (*(_DWORD *)(v24 + 40))
  {
    if (((v20 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v17 + 40))(v17, v37, v16, v23, v24, 0)) & 1) == 0)goto LABEL_19;
    goto LABEL_18;
  }
  if (v20)
LABEL_18:
    re::DynamicBitset<unsigned long long,256ul>::setBit(a1 + 272, v15);
LABEL_19:
  if (!*(_BYTE *)(a1 + 336))
    goto LABEL_39;
  v25 = *(_QWORD *)(a1 + 280);
  v26 = *(_DWORD *)(a1 + 288);
  if (v25 >= 0xB)
  {
    if ((v26 & 1) != 0)
      v27 = (_QWORD *)(a1 + 296);
    else
      v27 = *(_QWORD **)(a1 + 304);
    v29 = 8 * v25;
    while (!*v27)
    {
      ++v27;
      v29 -= 8;
      if (!v29)
        goto LABEL_39;
    }
LABEL_37:
    v33 = *(re::ecs2::System **)(a1 + 320);
    if (!*((_BYTE *)v33 + 86))
      re::ecs2::System::queueToRun(v33, 0.0);
    goto LABEL_39;
  }
  if ((v26 & 1) != 0)
  {
    v28 = (uint64_t *)(a1 + 296);
    if (!v25)
      goto LABEL_39;
  }
  else
  {
    v28 = *(uint64_t **)(a1 + 304);
    if (!v25)
      goto LABEL_39;
  }
  v30 = 0;
  v31 = 8 * v25;
  do
  {
    v32 = *v28++;
    v30 |= v32;
    v31 -= 8;
  }
  while (v31);
  if (v30)
    goto LABEL_37;
LABEL_39:
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v35);
  return re::ProfilerTimeGuard<(re::ProfilerStatistic)125>::end((uint64_t)v36);
}

uint64_t re::ecs2::MeshOffsetsSystem::willAddSystemToECSService(re::ecs2::MeshOffsetsSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  v3 = re::ServiceLocator::serviceOrNull<re::Engine>(v2);
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  v5 = re::ServiceLocator::serviceOrNull<re::RenderManager>(v4);
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  v7 = re::ServiceLocator::serviceOrNull<re::AssetService>(v6);
  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::ecs2::ThrottleService>(v8);
  *((_QWORD *)this + 44) = v3;
  *((_QWORD *)this + 45) = v5;
  *((_QWORD *)this + 46) = v7;
  *((_QWORD *)this + 47) = result;
  return result;
}

double re::ecs2::MeshOffsetsSystem::willRemoveSystemFromECSService(re::ecs2::MeshOffsetsSystem *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  return result;
}

void re::ecs2::MeshOffsetsSystem::willAddSceneToECSService(re::ecs2::MeshOffsetsSystem *this, re::ecs2::Scene *a2)
{
  char *v4;
  _anonymous_namespace_ *v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  re::ecs2::System *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57[2];
  int v58;
  const char *v59;
  __int16 v60;
  int v61;
  __int16 v62;
  unint64_t v63;
  __int16 v64;
  unint64_t v65;
  _OWORD v66[5];
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v4 = (char *)this + 104;
  v57[0] = (uint64_t)a2;
  v5 = (re::ecs2::MeshOffsetsSystem *)((char *)this + 224);
  v6 = *((_QWORD *)this + 29);
  v7 = *((_DWORD *)this + 60);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)((char *)this + 248);
    else
      v8 = (_QWORD *)*((_QWORD *)this + 32);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_17;
    }
    goto LABEL_16;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)((char *)this + 248);
    if (!v6)
      goto LABEL_17;
  }
  else
  {
    v9 = (uint64_t *)*((_QWORD *)this + 32);
    if (!v6)
      goto LABEL_17;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
  {
LABEL_16:
    *(_QWORD *)&v49 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)this + 224, 0);
    v14 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v49);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::init(v14, (uint64_t)v4, (uint64_t)a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::MeshOffsetsSystem *)((char *)this + 160), v57, (uint64_t *)&v49);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)v5, v49);
    v15 = (char *)this + 272;
    v16 = v49;
    goto LABEL_49;
  }
LABEL_17:
  v56 = 0u;
  v49 = 0u;
  *(_QWORD *)&v50 = 0;
  *((_QWORD *)&v50 + 1) = -1;
  v51 = 0u;
  v52 = 0u;
  v53 = 0;
  v54 = 1;
  v55 = 0uLL;
  v17 = *((_QWORD *)this + 18);
  *(_QWORD *)&v56 = 0;
  v18 = *((_QWORD *)this + 14);
  DWORD2(v56) = 0;
  if (v17 + 1 > 4 * v18)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,4ul>::setBucketsCapacity((uint64_t *)this + 13, (v17 + 4) >> 2);
    v18 = *((_QWORD *)this + 14);
  }
  if (v18 <= v17 >> 2)
  {
    v57[1] = 0;
    memset(v66, 0, sizeof(v66));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v58 = 136315906;
    v59 = "operator[]";
    v60 = 1024;
    v61 = 858;
    v62 = 2048;
    v63 = v17 >> 2;
    v64 = 2048;
    v65 = v18;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_69;
  }
  if ((*((_BYTE *)this + 120) & 1) != 0)
    v19 = (char *)this + 128;
  else
    v19 = (char *)*((_QWORD *)this + 17);
  v20 = *(_QWORD *)&v19[8 * (v17 >> 2)];
  ++*((_QWORD *)this + 18);
  ++*((_DWORD *)this + 38);
  v21 = v20 + 112 * (v17 & 3);
  v22 = v49;
  v23 = v50;
  v24 = v51;
  *(_QWORD *)(v21 + 48) = v52;
  *(_OWORD *)(v21 + 16) = v23;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)v21 = v22;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v21 + 56, (uint64_t)&v52 + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v49);
  v26 = *((_QWORD *)this + 18);
  if (!v26)
  {
LABEL_69:
    re::internal::assertLog((re::internal *)4, v25, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
  }
  v27 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)v4, v26 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::init(v27, (uint64_t)v4, v57[0]);
  *(_QWORD *)&v66[0] = *((_QWORD *)this + 18) - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((re::ecs2::MeshOffsetsSystem *)((char *)this + 160), v57, (uint64_t *)v66);
  v28 = *((_QWORD *)this + 18);
  v29 = *((_QWORD *)this + 33);
  if ((v28 & 0x3F) != 0)
    v30 = (v28 >> 6) + 1;
  else
    v30 = v28 >> 6;
  *((_QWORD *)this + 33) = v28;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize(v5, v30, &v49);
  if (v28 && v29 > v28)
  {
    v31 = 63;
    v32 = *((_QWORD *)this + 33) & 0x3FLL;
    if (v32 && v32 != 63)
      v31 = ~(-1 << v32);
    if ((*((_BYTE *)this + 240) & 1) != 0)
      v33 = (char *)this + 248;
    else
      v33 = (char *)*((_QWORD *)this + 32);
    *(_QWORD *)&v33[8 * *((_QWORD *)this + 29) - 8] &= v31;
  }
  v34 = *((_QWORD *)this + 18);
  v35 = *((_QWORD *)this + 39);
  if ((v34 & 0x3F) != 0)
    v36 = (v34 >> 6) + 1;
  else
    v36 = v34 >> 6;
  *((_QWORD *)this + 39) = v34;
  *(_QWORD *)&v49 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::MeshOffsetsSystem *)((char *)this + 272), v36, &v49);
  if (v34 && v35 > v34)
  {
    v37 = 63;
    v38 = *((_QWORD *)this + 39) & 0x3FLL;
    if (v38 && v38 != 63)
      v37 = ~(-1 << v38);
    if ((*((_BYTE *)this + 288) & 1) != 0)
      v39 = (char *)this + 296;
    else
      v39 = (char *)*((_QWORD *)this + 38);
    *(_QWORD *)&v39[8 * *((_QWORD *)this + 35) - 8] &= v37;
  }
  v16 = *(_QWORD *)&v66[0];
  v15 = (char *)this + 272;
LABEL_49:
  re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v15, v16);
  if (!*((_BYTE *)this + 336))
    return;
  v40 = *((_QWORD *)this + 35);
  v41 = *((_DWORD *)this + 72);
  if (v40 >= 0xB)
  {
    if ((v41 & 1) != 0)
      v42 = (_QWORD *)((char *)this + 296);
    else
      v42 = (_QWORD *)*((_QWORD *)this + 38);
    v44 = 8 * v40;
    while (!*v42)
    {
      ++v42;
      v44 -= 8;
      if (!v44)
        return;
    }
LABEL_65:
    v48 = (re::ecs2::System *)*((_QWORD *)this + 40);
    if (!*((_BYTE *)v48 + 86))
      re::ecs2::System::queueToRun(v48, 0.0);
    return;
  }
  if ((v41 & 1) != 0)
  {
    v43 = (uint64_t *)((char *)this + 296);
    if (!v40)
      return;
  }
  else
  {
    v43 = (uint64_t *)*((_QWORD *)this + 38);
    if (!v40)
      return;
  }
  v45 = 0;
  v46 = 8 * v40;
  do
  {
    v47 = *v43++;
    v45 |= v47;
    v46 -= 8;
  }
  while (v46);
  if (v45)
    goto LABEL_65;
}

uint64_t re::ecs2::MeshOffsetsSystem::willRemoveSceneFromECSService(re::ecs2::MeshOffsetsSystem *this, re::ecs2::Scene *a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re::ecs2::ComponentBucketsBase *v15;
  re::ecs2::Scene *v16;

  v16 = a2;
  v3 = (uint64_t *)((char *)this + 160);
  result = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 20, &v16);
  if (result != -1)
  {
    v5 = *((_QWORD *)this + 21) + 16 * result;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 224, *(_QWORD *)(v5 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 272, *(_QWORD *)(v5 + 8));
    v6 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 104, *(_QWORD *)(v5 + 8));
    if (*v6)
    {
      v7 = v6;
      *v6 = 0;
      v8 = v6 + 1;
      v9 = *(_QWORD *)(v6[1] + 288);
      if (v9)
      {
        v10 = v6[12];
        if (v10)
        {
          for (i = 0; i != v10; ++i)
          {
            v12 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v7 + 7), i);
            re::EventBus::unsubscribe(v9, *(_QWORD *)v12, *(_QWORD *)(v12 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v7 + 7));
      v13 = 0;
      v14 = v7 + 3;
      do
      {
        v15 = (re::ecs2::ComponentBucketsBase *)v7[2];
        if (*(_QWORD *)v15)
          re::ecs2::ComponentBucketsBase::removeBucket(v15, v14[v13]);
        v14[v13++] = -1;
      }
      while (v13 != 4);
      *v8 = 0;
      v8[1] = 0;
    }
    return re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove(v3, &v16);
  }
  return result;
}

double re::internal::defaultConstruct<re::ecs2::AssignedMeshOffsetsAttributes>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)&result = 1065353216;
  *(_OWORD *)(a3 + 48) = xmmword_2260E5F10;
  *(_OWORD *)(a3 + 64) = xmmword_2260E5F20;
  *(_OWORD *)(a3 + 80) = xmmword_2260E5F40;
  *(_OWORD *)(a3 + 96) = xmmword_2260E5D70;
  *(_OWORD *)(a3 + 112) = xmmword_2260E5F10;
  *(_OWORD *)(a3 + 128) = xmmword_2260E5F20;
  *(_OWORD *)(a3 + 144) = xmmword_2260E5F40;
  *(_OWORD *)(a3 + 160) = xmmword_2260E5D70;
  *(_DWORD *)(a3 + 176) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::AssignedMeshOffsetsAttributes>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    if (*(_QWORD *)(a3 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    ++*(_DWORD *)(a3 + 24);
  }
  return result;
}

double re::internal::defaultConstructV2<re::ecs2::AssignedMeshOffsetsAttributes>(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)&result = 1065353216;
  *(_OWORD *)(a1 + 48) = xmmword_2260E5F10;
  *(_OWORD *)(a1 + 64) = xmmword_2260E5F20;
  *(_OWORD *)(a1 + 80) = xmmword_2260E5F40;
  *(_OWORD *)(a1 + 96) = xmmword_2260E5D70;
  *(_OWORD *)(a1 + 112) = xmmword_2260E5F10;
  *(_OWORD *)(a1 + 128) = xmmword_2260E5F20;
  *(_OWORD *)(a1 + 144) = xmmword_2260E5F40;
  *(_OWORD *)(a1 + 160) = xmmword_2260E5D70;
  *(_DWORD *)(a1 + 176) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AssignedMeshOffsetsAttributes>(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_MeshOffsetsAttributes(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254110938);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254110938))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254110A68, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254110A78 = 0;
    qword_254110A88 = 0;
    qword_254110A90 = 0xFFFFFFFFLL;
    qword_254110A68 = (uint64_t)&off_24ED7DAA8;
    qword_254110A98 = (uint64_t)"MeshOffsetsAttributes";
    dword_254110AA0 = 0;
    xmmword_254110AA8 = 0u;
    unk_254110AB8 = 0u;
    xmmword_254110AC8 = 0u;
    qword_254110AD8 = 0;
    __cxa_guard_release(&qword_254110938);
  }
  return &qword_254110A68;
}

void re::ecs2::initInfo_MeshOffsetsAttributes(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  __int128 v8;
  _QWORD v9[2];
  __int128 v10;

  v9[0] = 0x594BC986F85AAA54;
  v9[1] = "MeshOffsetsAttributes";
  re::StringID::destroyString((re::StringID *)v9);
  *((_OWORD *)this + 2) = v10;
  v4 = atomic_load((unsigned __int8 *)&qword_254110948);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254110948);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::IntrospectionInfo<re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>>::get();
      v7 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v7 = 1;
      *(_QWORD *)(v7 + 8) = "perAssignedMeshAttributes";
      *(_QWORD *)(v7 + 16) = &qword_2541109B0;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 1;
      *(_DWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      *(_DWORD *)(v7 + 64) = 0;
      qword_254110940 = v7;
      __cxa_guard_release(&qword_254110948);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254110940;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshOffsetsAttributes>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::MeshOffsetsAttributes>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshOffsetsAttributes>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshOffsetsAttributes>;
  re::IntrospectionRegistry::add(this, v3);
  v8 = v10;
}

void re::IntrospectionInfo<re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>>::get()
{
  unsigned __int8 v0;
  uint64_t *v1;
  unsigned __int8 v2;
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  re *v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  void *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29[2];
  __int128 v30;
  const char *v31;
  __int128 v32;

  v0 = atomic_load((unsigned __int8 *)&qword_254110970);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254110970))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2541109B0);
    qword_2541109B0 = (uint64_t)&off_24ED68878;
    __cxa_guard_release(&qword_254110970);
  }
  if ((_MergedGlobals_278 & 1) == 0)
  {
    v1 = (uint64_t *)qword_254110930;
    if (qword_254110930)
      goto LABEL_7;
    v2 = atomic_load((unsigned __int8 *)&qword_254110920);
    if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254110920))
    {
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541109F0, 0);
      *(uint64_t *)((char *)&qword_254110A00 + 6) = 0;
      qword_254110A00 = 0;
      *(_QWORD *)&xmmword_254110A10 = 0;
      *((_QWORD *)&xmmword_254110A10 + 1) = 0xFFFFFFFFLL;
      qword_2541109F0 = (uint64_t)&off_24ED7DAA8;
      qword_254110A20 = (uint64_t)"AssignedMeshOffsetsAttributes";
      dword_254110A28 = 0;
      xmmword_254110A30 = 0u;
      *(_OWORD *)&qword_254110A40 = 0u;
      xmmword_254110A50 = 0u;
      qword_254110A60 = 0;
      __cxa_guard_release(&qword_254110920);
    }
    qword_254110930 = (uint64_t)&qword_2541109F0;
    *(_QWORD *)&v32 = 0x8D01A139E5A607F8;
    *((_QWORD *)&v32 + 1) = "AssignedMeshOffsetsAttributes";
    re::StringID::destroyString((re::StringID *)&v32);
    xmmword_254110A10 = v30;
    v4 = atomic_load((unsigned __int8 *)&qword_254110928);
    if ((v4 & 1) == 0)
    {
      v12 = (re *)__cxa_guard_acquire(&qword_254110928);
      if ((_DWORD)v12)
      {
        v13 = re::introspectionAllocator(v12);
        v15 = re::IntrospectionInfo<re::DynamicArray<float>>::get(1, v14);
        v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
        *(_DWORD *)v16 = 1;
        *(_QWORD *)(v16 + 8) = "offsets";
        *(_QWORD *)(v16 + 16) = v15;
        *(_QWORD *)(v16 + 24) = 0;
        *(_QWORD *)(v16 + 32) = 1;
        *(_DWORD *)(v16 + 40) = 0;
        *(_QWORD *)(v16 + 48) = 0;
        *(_QWORD *)(v16 + 56) = 0;
        *(_DWORD *)(v16 + 64) = 0;
        qword_254110990 = v16;
        v17 = re::introspectionAllocator((re *)v16);
        v18 = re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
        v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
        *(_DWORD *)v19 = 1;
        *(_QWORD *)(v19 + 8) = "preTransform";
        *(_QWORD *)(v19 + 16) = v18;
        *(_QWORD *)(v19 + 24) = 0;
        *(_QWORD *)(v19 + 32) = 0x3000000002;
        *(_DWORD *)(v19 + 40) = 0;
        *(_QWORD *)(v19 + 48) = 0;
        *(_QWORD *)(v19 + 56) = 0;
        *(_DWORD *)(v19 + 64) = 0;
        qword_254110998 = v19;
        v20 = re::introspectionAllocator((re *)v19);
        v21 = re::introspect_Matrix4x4F((re::IntrospectionBase **)1);
        v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
        *(_DWORD *)v22 = 1;
        *(_QWORD *)(v22 + 8) = "postTransform";
        *(_QWORD *)(v22 + 16) = v21;
        *(_QWORD *)(v22 + 24) = 0;
        *(_QWORD *)(v22 + 32) = 0x7000000003;
        *(_DWORD *)(v22 + 40) = 0;
        *(_QWORD *)(v22 + 48) = 0;
        *(_QWORD *)(v22 + 56) = 0;
        *(_DWORD *)(v22 + 64) = 0;
        qword_2541109A0 = v22;
        v23 = re::introspectionAllocator((re *)v22);
        v25 = re::introspect_REMeshOffsetsBlendingMode((re *)1, v24);
        v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
        *(_DWORD *)v26 = 1;
        *(_QWORD *)(v26 + 8) = "blendingMode";
        *(_QWORD *)(v26 + 16) = v25;
        *(_QWORD *)(v26 + 24) = 0;
        *(_QWORD *)(v26 + 32) = 0xB000000004;
        *(_DWORD *)(v26 + 40) = 0;
        *(_QWORD *)(v26 + 48) = 0;
        *(_QWORD *)(v26 + 56) = 0;
        *(_DWORD *)(v26 + 64) = 0;
        qword_2541109A8 = v26;
        __cxa_guard_release(&qword_254110928);
      }
    }
    qword_254110A00 = 0xC000000008;
    v1 = &qword_2541109F0;
    dword_254110A08 = 16;
    word_254110A0C = 0;
    dword_254110A28 = 4;
    *(_QWORD *)&xmmword_254110A30 = &qword_254110990;
    *((_QWORD *)&xmmword_254110A30 + 1) = re::internal::defaultConstruct<re::ecs2::AssignedMeshOffsetsAttributes>;
    qword_254110A40 = (uint64_t)re::internal::defaultDestruct<re::ecs2::AssignedMeshOffsetsAttributes>;
    unk_254110A48 = 0;
    *(_QWORD *)&xmmword_254110A50 = 0;
    *((_QWORD *)&xmmword_254110A50 + 1) = re::internal::defaultConstructV2<re::ecs2::AssignedMeshOffsetsAttributes>;
    qword_254110A60 = (uint64_t)re::internal::defaultDestructV2<re::ecs2::AssignedMeshOffsetsAttributes>;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541109F0, v3);
    v32 = v30;
    if ((_MergedGlobals_278 & 1) == 0)
    {
LABEL_7:
      _MergedGlobals_278 = 1;
      v5 = *((_DWORD *)v1 + 6);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541109B0, 0);
      qword_2541109C0 = 0x2800000003;
      dword_2541109C8 = v5;
      word_2541109CC = 0;
      *(_QWORD *)&xmmword_2541109D0 = 0;
      *((_QWORD *)&xmmword_2541109D0 + 1) = 0xFFFFFFFFLL;
      qword_2541109E0 = (uint64_t)v1;
      unk_2541109E8 = 0;
      qword_2541109B0 = (uint64_t)&off_24ED68878;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)&qword_2541109B0, (const re::IntrospectionBase *)&v30);
      if ((BYTE8(v30) & 1) != 0)
        v8 = v31;
      else
        v8 = (char *)&v30 + 9;
      if ((_QWORD)v30 && (BYTE8(v30) & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v30 + 40))();
      v28 = *((_OWORD *)v1 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v29);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v27 + 1) = v10;
      }
      else
      {
        v32 = v28;
        re::TypeBuilder::beginListType((uint64_t)&v30, v29, 1, 0x28uLL, 8uLL, &v32);
        re::TypeBuilder::setConstructor((uint64_t)&v30, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v30, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v30, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v30, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v30, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v30, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v30, v11);
      }
      xmmword_2541109D0 = v27;
      re::StringID::destroyString((re::StringID *)v29);
    }
  }
}

void re::internal::defaultConstruct<re::ecs2::MeshOffsetsAttributes>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::MeshOffsetsAttributes>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::deinit(a3);
}

uint64_t re::internal::defaultConstructV2<re::ecs2::MeshOffsetsAttributes>(uint64_t result)
{
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

uint64_t *re::ecs2::allocInfo_MeshOffsetsComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254110958);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254110958))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254110AE0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254110AF0 = 0;
    qword_254110B00 = 0;
    qword_254110B08 = 0xFFFFFFFFLL;
    qword_254110AE0 = (uint64_t)&off_24ED7DAA8;
    qword_254110B10 = (uint64_t)"MeshOffsetsComponent";
    dword_254110B18 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254110B50 = 0;
    __cxa_guard_release(&qword_254110958);
  }
  return &qword_254110AE0;
}

void re::ecs2::initInfo_MeshOffsetsComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  re::IntrospectionBase *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;

  v19[0] = 0x55761199A1A25594;
  v19[1] = "MeshOffsetsComponent";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  v4 = atomic_load((unsigned __int8 *)&qword_254110960);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254110960);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254110978 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = v9;
      v11 = (uint64_t *)qword_254110950;
      if (!qword_254110950)
      {
        v11 = re::ecs2::allocInfo_MeshOffsetsAttributes((re::ecs2 *)v9);
        qword_254110950 = (uint64_t)v11;
        re::ecs2::initInfo_MeshOffsetsAttributes((re::ecs2 *)v11, v12);
      }
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "attributes";
      *(_QWORD *)(v13 + 16) = v11;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x2000000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254110980 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_AssetHandle((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "assignedMeshDeformation";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x4800000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254110988 = v17;
      __cxa_guard_release(&qword_254110960);
    }
  }
  *((_QWORD *)this + 2) = 0xD800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254110978;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshOffsetsComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::MeshOffsetsComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshOffsetsComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshOffsetsComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v18 = v20;
}

uint64_t re::internal::defaultConstruct<re::ecs2::MeshOffsetsComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::MeshOffsetsComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::MeshOffsetsComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::MeshOffsetsComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_MeshOffsetsComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshOffsetsComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshOffsetsComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshOffsetsComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshOffsetsComponent>, this);
}

uint64_t *re::ecs2::allocInfo_MeshOffsetsSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254110968);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254110968))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254110B58, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254110B68 = 0;
    qword_254110B78 = 0;
    qword_254110B80 = 0xFFFFFFFFLL;
    qword_254110B58 = (uint64_t)&off_24ED7DAA8;
    qword_254110B88 = (uint64_t)"MeshOffsetsSystem";
    dword_254110B90 = 0;
    xmmword_254110B98 = 0u;
    unk_254110BA8 = 0u;
    xmmword_254110BB8 = 0u;
    qword_254110BC8 = 0;
    __cxa_guard_release(&qword_254110968);
  }
  return &qword_254110B58;
}

void re::ecs2::initInfo_MeshOffsetsSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xE2F769280B31FF04;
  v5[1] = "MeshOffsetsSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x19800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_MeshOffsetsSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::MeshOffsetsSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::MeshOffsetsSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::MeshOffsetsSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::MeshOffsetsSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MeshOffsetsSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MeshOffsetsSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::MeshOffsetsSystem *re::internal::defaultConstruct<re::ecs2::MeshOffsetsSystem>(int a1, int a2, re::ecs2::MeshOffsetsSystem *this)
{
  return re::ecs2::MeshOffsetsSystem::MeshOffsetsSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::MeshOffsetsSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;

  a3[43] = &off_24ED68628;
  v4 = a3[48];
  if (v4)
  {
    if (a3[49])
    {
      v5 = a3 + 49;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, a3[50]);
      *v5 = 0;
      a3[50] = 0;
    }
    a3[48] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 13);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::MeshOffsetsSystem>(_QWORD *a1)
{
  uint64_t v2;

  a1[43] = &off_24ED68628;
  v2 = a1[48];
  if (v2)
  {
    if (a1[49])
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, a1[50]);
      a1[49] = 0;
      a1[50] = 0;
    }
    a1[48] = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 13);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_MeshOffsetsSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshOffsetsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshOffsetsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshOffsetsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshOffsetsSystem>, this);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::MeshOffsetsComponent>::didDependentComponentChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  re::ecs2::Component *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a3 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
  {
    v5 = (re::ecs2::Component *)result;
    v6 = 24;
    v7 = 0xFFFFFFFFLL;
    do
    {
      v8 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a2 + 16), *(_QWORD *)(a2 + v6), v5);
      if (v8 != -1 && (v9 & 0xFFFFFF00000000) != 0)
      {
        v11 = v8;
        v7 = v9;
        return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
      }
      v6 += 8;
    }
    while (v6 != 56);
    v11 = -1;
    return re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a2, v11, v7);
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::MeshOffsetsComponent>::processUpdatingComponents()
{
  return 0;
}

void re::ecs2::MeshOffsetsSystem::~MeshOffsetsSystem(re::ecs2::MeshOffsetsSystem *this)
{
  uint64_t v2;

  *((_QWORD *)this + 43) = &off_24ED68628;
  v2 = *((_QWORD *)this + 48);
  if (v2)
  {
    if (*((_QWORD *)this + 49))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 50));
      *((_QWORD *)this + 49) = 0;
      *((_QWORD *)this + 50) = 0;
    }
    *((_QWORD *)this + 48) = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 13);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  *((_QWORD *)this + 43) = &off_24ED68628;
  v2 = *((_QWORD *)this + 48);
  if (v2)
  {
    if (*((_QWORD *)this + 49))
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 50));
      *((_QWORD *)this + 49) = 0;
      *((_QWORD *)this + 50) = 0;
    }
    *((_QWORD *)this + 48) = 0;
  }
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 13);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::MeshOffsetsSystem::typeInfo(re::ecs2::MeshOffsetsSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MeshOffsetsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MeshOffsetsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MeshOffsetsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MeshOffsetsSystem>, 0);
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED68718;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED68770;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED687C8;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED68820;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED68718;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED68770;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED687C8;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED68820;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::MeshOffsetsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED68718;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED68718;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED68770;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED68770;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED687C8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED687C8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED68820;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED68820;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::MeshOffsetsComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  re::IntrospectionBase *v11;

  v8 = *((_QWORD *)this + 2);
  if (v8 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::growCapacity(this, v8 + 1);
    v8 = *((_QWORD *)this + 2);
  }
  v9 = *((_QWORD *)this + 4) + 192 * v8;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = 0;
  *(_DWORD *)(v9 + 24) = 1;
  *(_OWORD *)(v9 + 48) = xmmword_2260E5F10;
  *(_OWORD *)(v9 + 64) = xmmword_2260E5F20;
  *(_OWORD *)(v9 + 80) = xmmword_2260E5F40;
  *(_OWORD *)(v9 + 96) = xmmword_2260E5D70;
  *(_OWORD *)(v9 + 112) = xmmword_2260E5F10;
  *(_OWORD *)(v9 + 128) = xmmword_2260E5F20;
  *(_OWORD *)(v9 + 144) = xmmword_2260E5F40;
  *(_OWORD *)(v9 + 160) = xmmword_2260E5D70;
  *(_DWORD *)(v9 + 176) = 0;
  v10 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v10 + 1;
  ++*((_DWORD *)this + 6);
  v11 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 192 * v10);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v11);
  return v11;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 192 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 192 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::clear((_QWORD *)a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  v8 = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 192 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 192;
        v11 -= 192;
      }
      while (v11);
    }
  }
}

_QWORD *re::DynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = result;
  v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    v3 = 192 * v2;
    v4 = (_QWORD *)(result[4] + 32);
    do
    {
      result = (_QWORD *)*(v4 - 4);
      if (result)
      {
        if (*v4)
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 40))(result);
        *v4 = 0;
        *(v4 - 3) = 0;
        *(v4 - 2) = 0;
        *(v4 - 4) = 0;
        ++*((_DWORD *)v4 - 2);
      }
      v4 += 24;
      v3 -= 192;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 192 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 192 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::AssignedMeshOffsetsAttributes>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::MeshOffsetsComponent>(uint64_t a1)
{
  id *v2;
  uint64_t v3;
  re *inited;

  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  v2 = (id *)(a1 + 160);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED439B8;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = -1;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  inited = (re *)objc_initWeak(v2, 0);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 200) = re::globalAllocators(inited)[2];
  *(_QWORD *)(a1 + 208) = 0;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::MeshOffsetsSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::MeshOffsetsSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

float re::ecs2::downgradeLightComponentFromFall2023@<S0>(re::ecs2 *this@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  float v8;
  float result;
  __int128 v10;
  char v11;
  uint64_t v12[2];

  v6 = *((unsigned int *)this + 214) | ((unint64_t)*((unsigned __int8 *)this + 864) << 32);
  v12[0] = *((_QWORD *)this + 106);
  v12[1] = v6;
  v7 = re::ColorGamut3F::as(v12, 0, 3);
  result = v8;
  *(_QWORD *)&v10 = v7;
  *((float *)&v10 + 2) = v8;
  *((_OWORD *)this + 53) = v10;
  *((_BYTE *)this + 864) = v11;
  *a2 = 1;
  return result;
}

uint64_t *re::ecs2::allocInfo_LightComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254110BF0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254110BF0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254110FA0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254110FB0 = 0;
    qword_254110FC0 = 0;
    qword_254110FC8 = 0xFFFFFFFFLL;
    qword_254110FA0 = (uint64_t)&off_24ED7DAA8;
    qword_254110FD0 = (uint64_t)"LightComponent";
    dword_254110FD8 = 0;
    xmmword_254110FE0 = 0u;
    unk_254110FF0 = 0u;
    xmmword_254111000 = 0u;
    qword_254111010 = 0;
    __cxa_guard_release(&qword_254110BF0);
  }
  return &qword_254110FA0;
}

void re::ecs2::initInfo_LightComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  const re::IntrospectionBase *v12;
  uint64_t *v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int *v18;
  _anonymous_namespace_ *v19;
  unint64_t v20;
  unint64_t i;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  unint64_t j;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  const re::IntrospectionBase *v40;
  void *v41;
  uint64_t v42;
  uint64_t *v43;
  const re::IntrospectionBase *v44;
  void *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  const re::IntrospectionBase *v51;
  void *v52;
  uint64_t v53;
  uint64_t *v54;
  const re::IntrospectionBase *v55;
  void *v56;
  uint64_t v57;
  uint64_t *v58;
  const re::IntrospectionBase *v59;
  void *v60;
  uint64_t v61;
  uint64_t *v62;
  const re::IntrospectionBase *v63;
  void *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  re *v68;
  uint64_t *v69;
  re *v70;
  uint64_t *v71;
  re *v72;
  uint64_t *v73;
  re *v74;
  uint64_t *v75;
  re *v76;
  uint64_t *v77;
  re *v78;
  uint64_t *v79;
  re *v80;
  uint64_t *v81;
  re *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88[2];
  StringID v89;
  _QWORD v90[2];
  uint64_t v91;
  const char *v92;

  v91 = 0x758E810C9880594ELL;
  v92 = "LightComponent";
  re::StringID::destroyString((re::StringID *)&v91);
  *((_OWORD *)this + 2) = v87;
  v4 = atomic_load((unsigned __int8 *)&qword_254110BE8);
  if ((v4 & 1) != 0)
    goto LABEL_2;
  v5 = (re *)__cxa_guard_acquire(&qword_254110BE8);
  if (!(_DWORD)v5)
    goto LABEL_2;
  v6 = re::introspectionAllocator(v5);
  v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
  v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = "Component";
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_DWORD *)(v8 + 40) = 3;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_DWORD *)(v8 + 64) = 0;
  qword_254110F48 = v8;
  v9 = re::introspectionAllocator((re *)v8);
  v10 = re::introspect_Vector3F((re::IntrospectionBase **)1);
  v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
  *(_DWORD *)v11 = 1;
  *(_QWORD *)(v11 + 8) = "color";
  *(_QWORD *)(v11 + 16) = v10;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0x35000000001;
  *(_DWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 56) = 0;
  *(_DWORD *)(v11 + 64) = 0;
  qword_254110F50 = v11;
  v13 = re::introspectionAllocator((re *)v11);
  v14 = atomic_load((unsigned __int8 *)&qword_254110BD8);
  if ((v14 & 1) == 0)
  {
    v68 = (re *)__cxa_guard_acquire(&qword_254110BD8);
    if ((_DWORD)v68)
    {
      v69 = re::introspectionAllocator(v68);
      v70 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v69 + 32))(v69, 24, 8);
      *(_DWORD *)v70 = 1;
      *((_QWORD *)v70 + 1) = 0;
      *((_QWORD *)v70 + 2) = "Directional";
      qword_254110DE8 = (uint64_t)v70;
      v71 = re::introspectionAllocator(v70);
      v72 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v71 + 32))(v71, 24, 8);
      *(_DWORD *)v72 = 1;
      *((_QWORD *)v72 + 1) = 1;
      *((_QWORD *)v72 + 2) = "DirectionalUnshadowed";
      qword_254110DF0 = (uint64_t)v72;
      v73 = re::introspectionAllocator(v72);
      v74 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v73 + 32))(v73, 24, 8);
      *(_DWORD *)v74 = 1;
      *((_QWORD *)v74 + 1) = 2;
      *((_QWORD *)v74 + 2) = "Point";
      qword_254110DF8 = (uint64_t)v74;
      v75 = re::introspectionAllocator(v74);
      v76 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v75 + 32))(v75, 24, 8);
      *(_DWORD *)v76 = 1;
      *((_QWORD *)v76 + 1) = 3;
      *((_QWORD *)v76 + 2) = "PointUnshadowed";
      qword_254110E00 = (uint64_t)v76;
      v77 = re::introspectionAllocator(v76);
      v78 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v77 + 32))(v77, 24, 8);
      *(_DWORD *)v78 = 1;
      *((_QWORD *)v78 + 1) = 4;
      *((_QWORD *)v78 + 2) = "Spot";
      qword_254110E08 = (uint64_t)v78;
      v79 = re::introspectionAllocator(v78);
      v80 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v79 + 32))(v79, 24, 8);
      *(_DWORD *)v80 = 1;
      *((_QWORD *)v80 + 1) = 5;
      *((_QWORD *)v80 + 2) = "SpotUnshadowed";
      qword_254110E10 = (uint64_t)v80;
      v81 = re::introspectionAllocator(v80);
      v82 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v81 + 32))(v81, 24, 8);
      *(_DWORD *)v82 = 1;
      *((_QWORD *)v82 + 1) = 6;
      *((_QWORD *)v82 + 2) = "Ambient";
      qword_254110E18 = (uint64_t)v82;
      v83 = re::introspectionAllocator(v82);
      v84 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v83 + 32))(v83, 24, 8);
      *(_DWORD *)v84 = 1;
      *(_QWORD *)(v84 + 8) = 7;
      *(_QWORD *)(v84 + 16) = "RectangleUnshadowed";
      qword_254110E20 = v84;
      __cxa_guard_release(&qword_254110BD8);
    }
  }
  v15 = atomic_load((unsigned __int8 *)&qword_254110BE0);
  if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254110BE0))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254110E28, "LightType", 4, 4, 1, 1);
    qword_254110E28 = (uint64_t)&off_24ED7D9E8;
    qword_254110E68 = (uint64_t)&re::introspect_LightType(BOOL)::enumTable;
    dword_254110E38 = 9;
    __cxa_guard_release(&qword_254110BE0);
  }
  if ((_MergedGlobals_279 & 1) != 0)
  {
LABEL_33:
    v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
    *(_DWORD *)v38 = 1;
    *(_QWORD *)(v38 + 8) = "type";
    *(_QWORD *)(v38 + 16) = &qword_254110E28;
    *(_QWORD *)(v38 + 24) = 0;
    *(_QWORD *)(v38 + 32) = 0x1C00000002;
    *(_DWORD *)(v38 + 40) = 0;
    *(_QWORD *)(v38 + 48) = 0;
    *(_QWORD *)(v38 + 56) = 0;
    *(_DWORD *)(v38 + 64) = 0;
    qword_254110F58 = v38;
    v39 = re::introspectionAllocator((re *)v38);
    v41 = re::introspect_float((re *)1, v40);
    v42 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 72, 8);
    *(_DWORD *)v42 = 1;
    *(_QWORD *)(v42 + 8) = "intensity";
    *(_QWORD *)(v42 + 16) = v41;
    *(_QWORD *)(v42 + 24) = 0;
    *(_QWORD *)(v42 + 32) = 0x2000000003;
    *(_DWORD *)(v42 + 40) = 0;
    *(_QWORD *)(v42 + 48) = 0;
    *(_QWORD *)(v42 + 56) = 0;
    *(_DWORD *)(v42 + 64) = 0;
    qword_254110F60 = v42;
    v43 = re::introspectionAllocator((re *)v42);
    v45 = re::introspect_float((re *)1, v44);
    v46 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v43 + 32))(v43, 72, 8);
    *(_DWORD *)v46 = 1;
    *(_QWORD *)(v46 + 8) = "angle";
    *(_QWORD *)(v46 + 16) = v45;
    *(_QWORD *)(v46 + 24) = 0;
    *(_QWORD *)(v46 + 32) = 0x2400000004;
    *(_DWORD *)(v46 + 40) = 0;
    *(_QWORD *)(v46 + 48) = 0;
    *(_QWORD *)(v46 + 56) = 0;
    *(_DWORD *)(v46 + 64) = 0;
    qword_254110F68 = v46;
    v47 = re::introspectionAllocator((re *)v46);
    v48 = re::introspect_Vector2F((re::IntrospectionBase **)1);
    v49 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v47 + 32))(v47, 72, 8);
    *(_DWORD *)v49 = 1;
    *(_QWORD *)(v49 + 8) = "rectangleArea";
    *(_QWORD *)(v49 + 16) = v48;
    *(_QWORD *)(v49 + 24) = 0;
    *(_QWORD *)(v49 + 32) = 0x3000000005;
    *(_DWORD *)(v49 + 40) = 0;
    *(_QWORD *)(v49 + 48) = 0;
    *(_QWORD *)(v49 + 56) = 0;
    *(_DWORD *)(v49 + 64) = 0;
    qword_254110F70 = v49;
    v50 = re::introspectionAllocator((re *)v49);
    v52 = re::introspect_BOOL((re *)1, v51);
    v53 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v50 + 32))(v50, 72, 8);
    *(_DWORD *)v53 = 1;
    *(_QWORD *)(v53 + 8) = "rectDoubleSided";
    *(_QWORD *)(v53 + 16) = v52;
    *(_QWORD *)(v53 + 24) = 0;
    *(_QWORD *)(v53 + 32) = 0x3800000006;
    *(_DWORD *)(v53 + 40) = 0;
    *(_QWORD *)(v53 + 48) = 0;
    *(_QWORD *)(v53 + 56) = 0;
    *(_DWORD *)(v53 + 64) = 0;
    qword_254110F78 = v53;
    v54 = re::introspectionAllocator((re *)v53);
    v56 = re::introspect_float((re *)1, v55);
    v57 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v54 + 32))(v54, 72, 8);
    *(_DWORD *)v57 = 1;
    *(_QWORD *)(v57 + 8) = "radius";
    *(_QWORD *)(v57 + 16) = v56;
    *(_QWORD *)(v57 + 24) = 0;
    *(_QWORD *)(v57 + 32) = 0x2800000007;
    *(_DWORD *)(v57 + 40) = 0;
    *(_QWORD *)(v57 + 48) = 0;
    *(_QWORD *)(v57 + 56) = 0;
    *(_DWORD *)(v57 + 64) = 0;
    qword_254110F80 = v57;
    v58 = re::introspectionAllocator((re *)v57);
    v60 = re::introspect_float((re *)1, v59);
    v61 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v58 + 32))(v58, 72, 8);
    *(_DWORD *)v61 = 1;
    *(_QWORD *)(v61 + 8) = "shadowBias";
    *(_QWORD *)(v61 + 16) = v60;
    *(_QWORD *)(v61 + 24) = 0;
    *(_QWORD *)(v61 + 32) = 0x3C00000008;
    *(_DWORD *)(v61 + 40) = 0;
    *(_QWORD *)(v61 + 48) = 0;
    *(_QWORD *)(v61 + 56) = 0;
    *(_DWORD *)(v61 + 64) = 0;
    qword_254110F88 = v61;
    v62 = re::introspectionAllocator((re *)v61);
    v64 = re::introspect_ColorGamut((re *)1, v63);
    v65 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v62 + 32))(v62, 72, 8);
    *(_DWORD *)v65 = 1;
    *(_QWORD *)(v65 + 8) = "colorGamut";
    *(_QWORD *)(v65 + 16) = v64;
    *(_QWORD *)(v65 + 24) = 0;
    *(_QWORD *)(v65 + 32) = 0x36000000009;
    *(_DWORD *)(v65 + 40) = 0;
    *(_QWORD *)(v65 + 48) = 0;
    *(_QWORD *)(v65 + 56) = 0;
    *(_DWORD *)(v65 + 64) = 0;
    qword_254110F90 = v65;
    v66 = re::introspectionAllocator((re *)v65);
    v67 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v66 + 32))(v66, 64, 8);
    *(_DWORD *)v67 = 6;
    *(_QWORD *)(v67 + 8) = 1;
    *(_QWORD *)(v67 + 16) = 0;
    *(_QWORD *)(v67 + 24) = 0;
    *(_QWORD *)(v67 + 32) = 0;
    *(_BYTE *)(v67 + 40) = 1;
    *(_QWORD *)(v67 + 48) = re::ecs2::downgradeLightComponentFromFall2023;
    *(_DWORD *)(v67 + 56) = 2;
    qword_254110F98 = v67;
    __cxa_guard_release(&qword_254110BE8);
LABEL_2:
    *((_QWORD *)this + 2) = 0x37000000008;
    *((_DWORD *)this + 6) = 16;
    *((_WORD *)this + 14) = 0;
    *((_DWORD *)this + 14) = 11;
    *((_QWORD *)this + 8) = &qword_254110F48;
    *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::LightComponent>;
    *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::LightComponent>;
    *((_QWORD *)this + 11) = 0;
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::LightComponent>;
    *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::LightComponent>;
    re::IntrospectionRegistry::add(this, v3);
    v86 = v87;
    return;
  }
  _MergedGlobals_279 = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254110E28, v12);
  v88[0] = 0x7B5540A1BAA0;
  v88[1] = (uint64_t)"LightType";
  v91 = 208862;
  v92 = "int";
  v16 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, &v91);
  if (v16)
  {
    v17 = *v16;
    re::StringID::destroyString((re::StringID *)&v91);
    v18 = (unsigned int *)qword_254110E68;
    v90[1] = v17;
    re::TypeBuilder::beginEnumType((uint64_t)&v91, v88, 1, 1, (uint64_t)v90);
    v20 = *v18;
    if ((_DWORD)v20)
    {
      for (i = 0; i < v20; ++i)
      {
        v22 = *(_QWORD *)(*((_QWORD *)v18 + 1) + 8 * i);
        if (*(_DWORD *)v22 == 1)
        {
          v23 = *(char **)(v22 + 16);
          if (v23)
          {
            v24 = *v23;
            if (*v23)
            {
              v25 = v23[1];
              if (v25)
              {
                v26 = (unsigned __int8 *)(v23 + 2);
                do
                {
                  v24 = 31 * v24 + v25;
                  v27 = *v26++;
                  v25 = v27;
                }
                while (v27);
              }
            }
          }
          else
          {
            v24 = 0;
          }
          v28 = *(_QWORD *)(v22 + 8);
          *(_QWORD *)&v89.var0 = 2 * v24;
          v89.var1 = v23;
          re::TypeBuilder::addEnumConstant((re::TypeBuilder *)&v91, v28, &v89);
          re::StringID::destroyString((re::StringID *)&v89);
          v20 = *v18;
        }
      }
      if (v20)
      {
        for (j = 0; j < v20; ++j)
        {
          v30 = *(_QWORD *)(*((_QWORD *)v18 + 1) + 8 * j);
          if (*(_DWORD *)v30 == 2)
          {
            v31 = *(char **)(v30 + 16);
            if (v31)
            {
              v32 = *v31;
              if (*v31)
              {
                v33 = v31[1];
                if (v33)
                {
                  v34 = (unsigned __int8 *)(v31 + 2);
                  do
                  {
                    v32 = 31 * v32 + v33;
                    v35 = *v34++;
                    v33 = v35;
                  }
                  while (v35);
                }
              }
            }
            else
            {
              v32 = 0;
            }
            v36 = *(_QWORD *)(v30 + 8);
            *(_QWORD *)&v89.var0 = 2 * v32;
            v89.var1 = v31;
            re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)&v91, v36, &v89);
            re::StringID::destroyString((re::StringID *)&v89);
            v20 = *v18;
          }
        }
      }
    }
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v91, v37);
    xmmword_254110E48 = (__int128)v89;
    re::StringID::destroyString((re::StringID *)v88);
    goto LABEL_33;
  }
  re::StringID::destroyString((re::StringID *)&v91);
  re::internal::assertLog((re::internal *)5, v85, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "LightType");
  _os_crash();
  __break(1u);
}

_QWORD *re::internal::defaultConstruct<re::ecs2::LightComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::LightComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::LightComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::LightComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_LightComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"LightComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_LightComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_LightComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::LightComponent>, this);
}

float re::ecs2::downgradeAmbientLightComponentFromFall2023@<S0>(re::ecs2 *this@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  float v8;
  float result;
  __int128 v10;
  char v11;
  uint64_t v12[2];

  v6 = *((unsigned int *)this + 18) | ((unint64_t)*((unsigned __int8 *)this + 80) << 32);
  v12[0] = *((_QWORD *)this + 8);
  v12[1] = v6;
  v7 = re::ColorGamut3F::as(v12, 0, 3);
  result = v8;
  *(_QWORD *)&v10 = v7;
  *((float *)&v10 + 2) = v8;
  *((_OWORD *)this + 4) = v10;
  *((_BYTE *)this + 80) = v11;
  *a2 = 1;
  return result;
}

uint64_t *re::ecs2::allocInfo_AmbientLightComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254110C00);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254110C00))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254111018, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254111028 = 0;
    qword_254111038 = 0;
    qword_254111040 = 0xFFFFFFFFLL;
    qword_254111018 = (uint64_t)&off_24ED7DAA8;
    qword_254111048 = (uint64_t)"AmbientLightComponent";
    dword_254111050 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254111088 = 0;
    __cxa_guard_release(&qword_254110C00);
  }
  return &qword_254111018;
}

void re::ecs2::initInfo_AmbientLightComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 v22;
  _QWORD v23[2];
  __int128 v24;

  v23[0] = 0x895FF577E2580A3ELL;
  v23[1] = "AmbientLightComponent";
  re::StringID::destroyString((re::StringID *)v23);
  *((_OWORD *)this + 2) = v24;
  v4 = atomic_load((unsigned __int8 *)&qword_254110BF8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254110BF8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254110CD0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "color";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x4000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254110CD8 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::introspect_float((re *)1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "intensity";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x1C00000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254110CE0 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_ColorGamut((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "colorGamut";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x5000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254110CE8 = v19;
      v20 = re::introspectionAllocator((re *)v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 64, 8);
      *(_DWORD *)v21 = 6;
      *(_QWORD *)(v21 + 8) = 1;
      *(_QWORD *)(v21 + 16) = 0;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0;
      *(_BYTE *)(v21 + 40) = 1;
      *(_QWORD *)(v21 + 48) = re::ecs2::downgradeAmbientLightComponentFromFall2023;
      *(_DWORD *)(v21 + 56) = 2;
      qword_254110CF0 = v21;
      __cxa_guard_release(&qword_254110BF8);
    }
  }
  *((_QWORD *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_254110CD0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AmbientLightComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AmbientLightComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AmbientLightComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AmbientLightComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v22 = v24;
}

__n128 re::internal::defaultConstruct<re::ecs2::AmbientLightComponent>(int a1, int a2, ArcSharedObject *this)
{
  __n128 *v3;
  __n128 result;

  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  v3[1].n128_u64[0] = 0;
  v3[1].n128_u8[8] = 0;
  v3->n128_u64[0] = (unint64_t)&off_24ED585C0;
  v3[1].n128_u32[3] = 1143652352;
  v3[2].n128_u64[0] = 0;
  v3[2].n128_u64[1] = 0;
  v3[3].n128_u32[0] = 0;
  __asm { FMOV            V0.4S, #1.0 }
  v3[4] = result;
  v3[5].n128_u8[0] = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::AmbientLightComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

__n128 re::internal::defaultConstructV2<re::ecs2::AmbientLightComponent>(ArcSharedObject *a1)
{
  __n128 *v1;
  __n128 result;

  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  v1[1].n128_u64[0] = 0;
  v1[1].n128_u8[8] = 0;
  v1->n128_u64[0] = (unint64_t)&off_24ED585C0;
  v1[1].n128_u32[3] = 1143652352;
  v1[2].n128_u64[0] = 0;
  v1[2].n128_u64[1] = 0;
  v1[3].n128_u32[0] = 0;
  __asm { FMOV            V0.4S, #1.0 }
  v1[4] = result;
  v1[5].n128_u8[0] = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::AmbientLightComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_AmbientLightComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AmbientLightComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AmbientLightComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AmbientLightComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AmbientLightComponent>, this);
}

float re::ecs2::downgradeDirectionalLightComponentFromFall2023@<S0>(re::ecs2 *this@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  float v8;
  float result;
  __int128 v10;
  char v11;
  uint64_t v12[2];

  v6 = *((unsigned int *)this + 86) | ((unint64_t)*((unsigned __int8 *)this + 352) << 32);
  v12[0] = *((_QWORD *)this + 42);
  v12[1] = v6;
  v7 = re::ColorGamut3F::as(v12, 0, 3);
  result = v8;
  *(_QWORD *)&v10 = v7;
  *((float *)&v10 + 2) = v8;
  *((_OWORD *)this + 21) = v10;
  *((_BYTE *)this + 352) = v11;
  *a2 = 1;
  return result;
}

uint64_t *re::ecs2::allocInfo_DirectionalLightComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254110C10);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254110C10))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254111090, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541110A0 = 0;
    qword_2541110B0 = 0;
    qword_2541110B8 = 0xFFFFFFFFLL;
    qword_254111090 = (uint64_t)&off_24ED7DAA8;
    qword_2541110C0 = (uint64_t)"DirectionalLightComponent";
    dword_2541110C8 = 0;
    xmmword_2541110D0 = 0u;
    xmmword_2541110E0 = 0u;
    xmmword_2541110F0 = 0u;
    qword_254111100 = 0;
    __cxa_guard_release(&qword_254110C10);
  }
  return &qword_254111090;
}

void re::ecs2::initInfo_DirectionalLightComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  const re::IntrospectionBase *v21;
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  __int128 v26;
  _QWORD v27[2];
  __int128 v28;

  v27[0] = 0x661AEDCCAE0735E2;
  v27[1] = "DirectionalLightComponent";
  re::StringID::destroyString((re::StringID *)v27);
  *((_OWORD *)this + 2) = v28;
  v4 = atomic_load((unsigned __int8 *)&qword_254110C08);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254110C08);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254110D48 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "color";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x15000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254110D50 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::introspect_float((re *)1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "intensity";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x1C00000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254110D58 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_BOOL((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "isProxy";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x2000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254110D60 = v19;
      v20 = re::introspectionAllocator((re *)v19);
      v22 = re::introspect_ColorGamut((re *)1, v21);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "colorGamut";
      *(_QWORD *)(v23 + 16) = v22;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0x16000000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_254110D68 = v23;
      v24 = re::introspectionAllocator((re *)v23);
      v25 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 64, 8);
      *(_DWORD *)v25 = 6;
      *(_QWORD *)(v25 + 8) = 1;
      *(_QWORD *)(v25 + 16) = 0;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0;
      *(_BYTE *)(v25 + 40) = 1;
      *(_QWORD *)(v25 + 48) = re::ecs2::downgradeDirectionalLightComponentFromFall2023;
      *(_DWORD *)(v25 + 56) = 2;
      qword_254110D70 = v25;
      __cxa_guard_release(&qword_254110C08);
    }
  }
  *((_QWORD *)this + 2) = 0x17000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((_QWORD *)this + 8) = &qword_254110D48;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::DirectionalLightComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::DirectionalLightComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DirectionalLightComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DirectionalLightComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v26 = v28;
}

re::ecs2::DirectionalLightComponent *re::internal::defaultConstruct<re::ecs2::DirectionalLightComponent>(int a1, int a2, re::ecs2::DirectionalLightComponent *this)
{
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return re::ecs2::DirectionalLightComponent::DirectionalLightComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::DirectionalLightComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

re::ecs2::DirectionalLightComponent *re::internal::defaultConstructV2<re::ecs2::DirectionalLightComponent>(re::ecs2::DirectionalLightComponent *this)
{
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return re::ecs2::DirectionalLightComponent::DirectionalLightComponent(this);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::DirectionalLightComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_DirectionalLightComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DirectionalLightComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DirectionalLightComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DirectionalLightComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DirectionalLightComponent>, this);
}

float re::ecs2::downgradeSpotLightComponentFromFall2023@<S0>(re::ecs2 *this@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  float v8;
  float result;
  __int128 v10;
  char v11;
  uint64_t v12[2];

  v6 = *((unsigned int *)this + 74) | ((unint64_t)*((unsigned __int8 *)this + 304) << 32);
  v12[0] = *((_QWORD *)this + 36);
  v12[1] = v6;
  v7 = re::ColorGamut3F::as(v12, 0, 3);
  result = v8;
  *(_QWORD *)&v10 = v7;
  *((float *)&v10 + 2) = v8;
  *((_OWORD *)this + 18) = v10;
  *((_BYTE *)this + 304) = v11;
  *a2 = 1;
  return result;
}

uint64_t *re::ecs2::allocInfo_SpotLightComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254110C20);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254110C20))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254111108, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254111118 = 0;
    qword_254111128 = 0;
    qword_254111130 = 0xFFFFFFFFLL;
    qword_254111108 = (uint64_t)&off_24ED7DAA8;
    qword_254111138 = (uint64_t)"SpotLightComponent";
    dword_254111140 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254111178 = 0;
    __cxa_guard_release(&qword_254110C20);
  }
  return &qword_254111108;
}

void re::ecs2::initInfo_SpotLightComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  const re::IntrospectionBase *v21;
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  const re::IntrospectionBase *v29;
  void *v30;
  uint64_t v31;
  uint64_t *v32;
  const re::IntrospectionBase *v33;
  void *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  __int128 v38;
  _QWORD v39[2];
  __int128 v40;

  v39[0] = 0xA41086BFAF11EC92;
  v39[1] = "SpotLightComponent";
  re::StringID::destroyString((re::StringID *)v39);
  *((_OWORD *)this + 2) = v40;
  v4 = atomic_load((unsigned __int8 *)&qword_254110C18);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254110C18);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254110E70 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "color";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x12000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254110E78 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::introspect_float((re *)1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "intensity";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x1C00000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254110E80 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_float((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "outerAngle";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x2000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254110E88 = v19;
      v20 = re::introspectionAllocator((re *)v19);
      v22 = re::introspect_float((re *)1, v21);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "innerAngle";
      *(_QWORD *)(v23 + 16) = v22;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0x2400000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_254110E90 = v23;
      v24 = re::introspectionAllocator((re *)v23);
      v26 = re::introspect_float((re *)1, v25);
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "attenuationRadius";
      *(_QWORD *)(v27 + 16) = v26;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0x2800000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_254110E98 = v27;
      v28 = re::introspectionAllocator((re *)v27);
      v30 = re::introspect_ColorGamut((re *)1, v29);
      v31 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
      *(_DWORD *)v31 = 1;
      *(_QWORD *)(v31 + 8) = "colorGamut";
      *(_QWORD *)(v31 + 16) = v30;
      *(_QWORD *)(v31 + 24) = 0;
      *(_QWORD *)(v31 + 32) = 0x13000000006;
      *(_DWORD *)(v31 + 40) = 0;
      *(_QWORD *)(v31 + 48) = 0;
      *(_QWORD *)(v31 + 56) = 0;
      *(_DWORD *)(v31 + 64) = 0;
      qword_254110EA0 = v31;
      v32 = re::introspectionAllocator((re *)v31);
      v34 = re::introspect_float((re *)1, v33);
      v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v32 + 32))(v32, 72, 8);
      *(_DWORD *)v35 = 1;
      *(_QWORD *)(v35 + 8) = "attenuationFalloffExponent";
      *(_QWORD *)(v35 + 16) = v34;
      *(_QWORD *)(v35 + 24) = 0;
      *(_QWORD *)(v35 + 32) = 0x2C00000007;
      *(_DWORD *)(v35 + 40) = 0;
      *(_QWORD *)(v35 + 48) = 0;
      *(_QWORD *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_254110EA8 = v35;
      v36 = re::introspectionAllocator((re *)v35);
      v37 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 64, 8);
      *(_DWORD *)v37 = 6;
      *(_QWORD *)(v37 + 8) = 1;
      *(_QWORD *)(v37 + 16) = 0;
      *(_QWORD *)(v37 + 24) = 0;
      *(_QWORD *)(v37 + 32) = 0;
      *(_BYTE *)(v37 + 40) = 1;
      *(_QWORD *)(v37 + 48) = re::ecs2::downgradeSpotLightComponentFromFall2023;
      *(_DWORD *)(v37 + 56) = 2;
      qword_254110EB0 = v37;
      __cxa_guard_release(&qword_254110C18);
    }
  }
  *((_QWORD *)this + 2) = 0x14000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 9;
  *((_QWORD *)this + 8) = &qword_254110E70;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SpotLightComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SpotLightComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SpotLightComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SpotLightComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v38 = v40;
}

re::ecs2::SpotLightComponent *re::internal::defaultConstruct<re::ecs2::SpotLightComponent>(int a1, int a2, re::ecs2::SpotLightComponent *this)
{
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return re::ecs2::SpotLightComponent::SpotLightComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::SpotLightComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

re::ecs2::SpotLightComponent *re::internal::defaultConstructV2<re::ecs2::SpotLightComponent>(re::ecs2::SpotLightComponent *this)
{
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return re::ecs2::SpotLightComponent::SpotLightComponent(this);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::SpotLightComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_SpotLightComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SpotLightComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SpotLightComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SpotLightComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SpotLightComponent>, this);
}

float re::ecs2::downgradePointLightComponentFromFall2023@<S0>(re::ecs2 *this@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  float v8;
  float result;
  __int128 v10;
  char v11;
  uint64_t v12[2];

  v6 = *((unsigned int *)this + 70) | ((unint64_t)*((unsigned __int8 *)this + 288) << 32);
  v12[0] = *((_QWORD *)this + 34);
  v12[1] = v6;
  v7 = re::ColorGamut3F::as(v12, 0, 3);
  result = v8;
  *(_QWORD *)&v10 = v7;
  *((float *)&v10 + 2) = v8;
  *((_OWORD *)this + 17) = v10;
  *((_BYTE *)this + 288) = v11;
  *a2 = 1;
  return result;
}

uint64_t *re::ecs2::allocInfo_PointLightComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254110C30);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254110C30))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254111180, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254111190 = 0;
    qword_2541111A0 = 0;
    qword_2541111A8 = 0xFFFFFFFFLL;
    qword_254111180 = (uint64_t)&off_24ED7DAA8;
    qword_2541111B0 = (uint64_t)"PointLightComponent";
    dword_2541111B8 = 0;
    xmmword_2541111C0 = 0u;
    xmmword_2541111D0 = 0u;
    xmmword_2541111E0 = 0u;
    qword_2541111F0 = 0;
    __cxa_guard_release(&qword_254110C30);
  }
  return &qword_254111180;
}

void re::ecs2::initInfo_PointLightComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  const re::IntrospectionBase *v21;
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  __int128 v30;
  _QWORD v31[2];
  __int128 v32;

  v31[0] = 0x7C7634670D0A9C2ELL;
  v31[1] = "PointLightComponent";
  re::StringID::destroyString((re::StringID *)v31);
  *((_OWORD *)this + 2) = v32;
  v4 = atomic_load((unsigned __int8 *)&qword_254110C28);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254110C28);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254110D78 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "color";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x11000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254110D80 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::introspect_float((re *)1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "intensity";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x1C00000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254110D88 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_float((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "attenuationRadius";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x2000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254110D90 = v19;
      v20 = re::introspectionAllocator((re *)v19);
      v22 = re::introspect_ColorGamut((re *)1, v21);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "colorGamut";
      *(_QWORD *)(v23 + 16) = v22;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0x12000000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_254110D98 = v23;
      v24 = re::introspectionAllocator((re *)v23);
      v26 = re::introspect_float((re *)1, v25);
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "attenuationFalloffExponent";
      *(_QWORD *)(v27 + 16) = v26;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0x2400000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_254110DA0 = v27;
      v28 = re::introspectionAllocator((re *)v27);
      v29 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 64, 8);
      *(_DWORD *)v29 = 6;
      *(_QWORD *)(v29 + 8) = 1;
      *(_QWORD *)(v29 + 16) = 0;
      *(_QWORD *)(v29 + 24) = 0;
      *(_QWORD *)(v29 + 32) = 0;
      *(_BYTE *)(v29 + 40) = 1;
      *(_QWORD *)(v29 + 48) = re::ecs2::downgradePointLightComponentFromFall2023;
      *(_DWORD *)(v29 + 56) = 2;
      qword_254110DA8 = v29;
      __cxa_guard_release(&qword_254110C28);
    }
  }
  *((_QWORD *)this + 2) = 0x13000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_254110D78;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PointLightComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PointLightComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PointLightComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PointLightComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v30 = v32;
}

re::ecs2::PointLightComponent *re::internal::defaultConstruct<re::ecs2::PointLightComponent>(int a1, int a2, re::ecs2::PointLightComponent *this)
{
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return re::ecs2::PointLightComponent::PointLightComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::PointLightComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

re::ecs2::PointLightComponent *re::internal::defaultConstructV2<re::ecs2::PointLightComponent>(re::ecs2::PointLightComponent *this)
{
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return re::ecs2::PointLightComponent::PointLightComponent(this);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PointLightComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PointLightComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PointLightComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PointLightComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PointLightComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PointLightComponent>, this);
}

float re::ecs2::downgradeRectAreaLightComponentFromFall2023@<S0>(re::ecs2 *this@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  float v8;
  float result;
  __int128 v10;
  char v11;
  uint64_t v12[2];

  v6 = *((unsigned int *)this + 50) | ((unint64_t)*((unsigned __int8 *)this + 208) << 32);
  v12[0] = *((_QWORD *)this + 24);
  v12[1] = v6;
  v7 = re::ColorGamut3F::as(v12, 0, 3);
  result = v8;
  *(_QWORD *)&v10 = v7;
  *((float *)&v10 + 2) = v8;
  *((_OWORD *)this + 12) = v10;
  *((_BYTE *)this + 208) = v11;
  *a2 = 1;
  return result;
}

uint64_t *re::ecs2::allocInfo_RectAreaLightComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254110C40);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254110C40))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541111F8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254111208 = 0;
    qword_254111218 = 0;
    qword_254111220 = 0xFFFFFFFFLL;
    qword_2541111F8 = (uint64_t)&off_24ED7DAA8;
    qword_254111228 = (uint64_t)"RectAreaLightComponent";
    dword_254111230 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254111268 = 0;
    __cxa_guard_release(&qword_254110C40);
  }
  return &qword_2541111F8;
}

void re::ecs2::initInfo_RectAreaLightComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  _QWORD v30[2];
  __int128 v31;

  v30[0] = 0x253CA3D5FF302730;
  v30[1] = "RectAreaLightComponent";
  re::StringID::destroyString((re::StringID *)v30);
  *((_OWORD *)this + 2) = v31;
  v4 = atomic_load((unsigned __int8 *)&qword_254110C38);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254110C38);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254110DB0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "color";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0xC000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254110DB8 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::introspect_float((re *)1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "intensity";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x1C00000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254110DC0 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v17 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "extents";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x2000000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_254110DC8 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::introspect_BOOL((re *)1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "emitsDoubleSided";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x2800000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_254110DD0 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v25 = re::introspect_ColorGamut((re *)1, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "colorGamut";
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0xD000000005;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_254110DD8 = v26;
      v27 = re::introspectionAllocator((re *)v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 64, 8);
      *(_DWORD *)v28 = 6;
      *(_QWORD *)(v28 + 8) = 1;
      *(_QWORD *)(v28 + 16) = 0;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0;
      *(_BYTE *)(v28 + 40) = 1;
      *(_QWORD *)(v28 + 48) = re::ecs2::downgradeRectAreaLightComponentFromFall2023;
      *(_DWORD *)(v28 + 56) = 2;
      qword_254110DE0 = v28;
      __cxa_guard_release(&qword_254110C38);
    }
  }
  *((_QWORD *)this + 2) = 0xE000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 7;
  *((_QWORD *)this + 8) = &qword_254110DB0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::RectAreaLightComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::RectAreaLightComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RectAreaLightComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RectAreaLightComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v29 = v31;
}

re::ecs2::RectAreaLightComponent *re::internal::defaultConstruct<re::ecs2::RectAreaLightComponent>(int a1, int a2, re::ecs2::RectAreaLightComponent *this)
{
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return re::ecs2::RectAreaLightComponent::RectAreaLightComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::RectAreaLightComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

re::ecs2::RectAreaLightComponent *re::internal::defaultConstructV2<re::ecs2::RectAreaLightComponent>(re::ecs2::RectAreaLightComponent *this)
{
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return re::ecs2::RectAreaLightComponent::RectAreaLightComponent(this);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::RectAreaLightComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_RectAreaLightComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RectAreaLightComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RectAreaLightComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RectAreaLightComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RectAreaLightComponent>, this);
}

float re::ecs2::downgradeFrustumLightComponentFromFall2023@<S0>(re::ecs2 *this@<X0>, _BYTE *a2@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  float v8;
  float result;
  __int128 v10;
  char v11;
  uint64_t v12[2];

  v6 = *((unsigned int *)this + 78) | ((unint64_t)*((unsigned __int8 *)this + 320) << 32);
  v12[0] = *((_QWORD *)this + 38);
  v12[1] = v6;
  v7 = re::ColorGamut3F::as(v12, 0, 3);
  result = v8;
  *(_QWORD *)&v10 = v7;
  *((float *)&v10 + 2) = v8;
  *((_OWORD *)this + 19) = v10;
  *((_BYTE *)this + 320) = v11;
  *a2 = 1;
  return result;
}

uint64_t *re::ecs2::allocInfo_FrustumLightComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254110C50);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254110C50))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254111270, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254111280 = 0;
    qword_254111290 = 0;
    qword_254111298 = 0xFFFFFFFFLL;
    qword_254111270 = (uint64_t)&off_24ED7DAA8;
    qword_2541112A0 = (uint64_t)"FrustumLightComponent";
    dword_2541112A8 = 0;
    xmmword_2541112B0 = 0u;
    xmmword_2541112C0 = 0u;
    xmmword_2541112D0 = 0u;
    qword_2541112E0 = 0;
    __cxa_guard_release(&qword_254110C50);
  }
  return &qword_254111270;
}

void re::ecs2::initInfo_FrustumLightComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  const re::IntrospectionBase *v13;
  void *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  void *v18;
  uint64_t v19;
  uint64_t *v20;
  const re::IntrospectionBase *v21;
  void *v22;
  uint64_t v23;
  uint64_t *v24;
  const re::IntrospectionBase *v25;
  void *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  const re::IntrospectionBase *v32;
  void *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  __int128 v37;
  _QWORD v38[2];
  __int128 v39;

  v38[0] = 0x199383482F3684D2;
  v38[1] = "FrustumLightComponent";
  re::StringID::destroyString((re::StringID *)v38);
  *((_OWORD *)this + 2) = v39;
  v4 = atomic_load((unsigned __int8 *)&qword_254110C48);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254110C48);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254110EB8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "color";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x13000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254110EC0 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v14 = re::introspect_float((re *)1, v13);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "intensity";
      *(_QWORD *)(v15 + 16) = v14;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x1C00000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254110EC8 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      v18 = re::introspect_float((re *)1, v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = "outerAngle";
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = 0;
      *(_QWORD *)(v19 + 32) = 0x2000000003;
      *(_DWORD *)(v19 + 40) = 0;
      *(_QWORD *)(v19 + 48) = 0;
      *(_QWORD *)(v19 + 56) = 0;
      *(_DWORD *)(v19 + 64) = 0;
      qword_254110ED0 = v19;
      v20 = re::introspectionAllocator((re *)v19);
      v22 = re::introspect_float((re *)1, v21);
      v23 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v20 + 32))(v20, 72, 8);
      *(_DWORD *)v23 = 1;
      *(_QWORD *)(v23 + 8) = "innerAngle";
      *(_QWORD *)(v23 + 16) = v22;
      *(_QWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 32) = 0x2400000004;
      *(_DWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 56) = 0;
      *(_DWORD *)(v23 + 64) = 0;
      qword_254110ED8 = v23;
      v24 = re::introspectionAllocator((re *)v23);
      v26 = re::introspect_float((re *)1, v25);
      v27 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v24 + 32))(v24, 72, 8);
      *(_DWORD *)v27 = 1;
      *(_QWORD *)(v27 + 8) = "attenuationRadius";
      *(_QWORD *)(v27 + 16) = v26;
      *(_QWORD *)(v27 + 24) = 0;
      *(_QWORD *)(v27 + 32) = 0x2800000005;
      *(_DWORD *)(v27 + 40) = 0;
      *(_QWORD *)(v27 + 48) = 0;
      *(_QWORD *)(v27 + 56) = 0;
      *(_DWORD *)(v27 + 64) = 0;
      qword_254110EE0 = v27;
      v28 = re::introspectionAllocator((re *)v27);
      v29 = re::introspect_Vector2F((re::IntrospectionBase **)1);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v28 + 32))(v28, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "extents";
      *(_QWORD *)(v30 + 16) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x3000000006;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_254110EE8 = v30;
      v31 = re::introspectionAllocator((re *)v30);
      v33 = re::introspect_ColorGamut((re *)1, v32);
      v34 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 72, 8);
      *(_DWORD *)v34 = 1;
      *(_QWORD *)(v34 + 8) = "colorGamut";
      *(_QWORD *)(v34 + 16) = v33;
      *(_QWORD *)(v34 + 24) = 0;
      *(_QWORD *)(v34 + 32) = 0x14000000007;
      *(_DWORD *)(v34 + 40) = 0;
      *(_QWORD *)(v34 + 48) = 0;
      *(_QWORD *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_254110EF0 = v34;
      v35 = re::introspectionAllocator((re *)v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 64, 8);
      *(_DWORD *)v36 = 6;
      *(_QWORD *)(v36 + 8) = 1;
      *(_QWORD *)(v36 + 16) = 0;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0;
      *(_BYTE *)(v36 + 40) = 1;
      *(_QWORD *)(v36 + 48) = re::ecs2::downgradeFrustumLightComponentFromFall2023;
      *(_DWORD *)(v36 + 56) = 2;
      qword_254110EF8 = v36;
      __cxa_guard_release(&qword_254110C48);
    }
  }
  *((_QWORD *)this + 2) = 0x15000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 9;
  *((_QWORD *)this + 8) = &qword_254110EB8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::FrustumLightComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::FrustumLightComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::FrustumLightComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::FrustumLightComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v37 = v39;
}

re::ecs2::FrustumLightComponent *re::internal::defaultConstruct<re::ecs2::FrustumLightComponent>(int a1, int a2, re::ecs2::FrustumLightComponent *this)
{
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return re::ecs2::FrustumLightComponent::FrustumLightComponent(this);
}

uint64_t re::internal::defaultDestruct<re::ecs2::FrustumLightComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

re::ecs2::FrustumLightComponent *re::internal::defaultConstructV2<re::ecs2::FrustumLightComponent>(re::ecs2::FrustumLightComponent *this)
{
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return re::ecs2::FrustumLightComponent::FrustumLightComponent(this);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::FrustumLightComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_FrustumLightComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FrustumLightComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_FrustumLightComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_FrustumLightComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::FrustumLightComponent>, this);
}

uint64_t *re::ecs2::allocInfo_FilterMapComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254110C58);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254110C58))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541112E8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541112F8 = 0;
    qword_254111308 = 0;
    qword_254111310 = 0xFFFFFFFFLL;
    qword_2541112E8 = (uint64_t)&off_24ED7DAA8;
    qword_254111318 = (uint64_t)"FilterMapComponent";
    dword_254111320 = 0;
    xmmword_254111328 = 0u;
    xmmword_254111338 = 0u;
    xmmword_254111348 = 0u;
    qword_254111358 = 0;
    __cxa_guard_release(&qword_254110C58);
  }
  return &qword_2541112E8;
}

void re::ecs2::initInfo_FilterMapComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x4F276BC591308D72;
  v14[1] = "FilterMapComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_254110C60);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254110C60);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254110CA8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_AssetHandle((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "material";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254110CB0 = v12;
      __cxa_guard_release(&qword_254110C60);
    }
  }
  *((_QWORD *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254110CA8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::FilterMapComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::FilterMapComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::FilterMapComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::FilterMapComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::ecs2::FilterMapComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED588C0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::FilterMapComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::FilterMapComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED588C0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 32) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::FilterMapComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_FilterMapComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"FilterMapComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_FilterMapComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_FilterMapComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::FilterMapComponent>, this);
}

uint64_t *re::ecs2::allocInfo_ShadowMapComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254110C68);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254110C68))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254111360, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254111370 = 0;
    qword_254111380 = 0;
    qword_254111388 = 0xFFFFFFFFLL;
    qword_254111360 = (uint64_t)&off_24ED7DAA8;
    qword_254111390 = (uint64_t)"ShadowMapComponent";
    dword_254111398 = 0;
    xmmword_2541113A0 = 0u;
    xmmword_2541113B0 = 0u;
    xmmword_2541113C0 = 0u;
    qword_2541113D0 = 0;
    __cxa_guard_release(&qword_254110C68);
  }
  return &qword_254111360;
}

void re::ecs2::initInfo_ShadowMapComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0xD3AD1E1D3F2970C2;
  v18[1] = "ShadowMapComponent";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&qword_254110C70);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254110C70);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254110CB8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_float((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "depthBias";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1C00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254110CC0 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_float((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "distance";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x2000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254110CC8 = v16;
      __cxa_guard_release(&qword_254110C70);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254110CB8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ShadowMapComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ShadowMapComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ShadowMapComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ShadowMapComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

double re::internal::defaultConstruct<re::ecs2::ShadowMapComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED58940;
  result = 2048.00048;
  *(_QWORD *)(v3 + 28) = 0x40A000003F800000;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::ShadowMapComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::ShadowMapComponent>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED58940;
  result = 2048.00048;
  *(_QWORD *)(v1 + 28) = 0x40A000003F800000;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::ShadowMapComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_ShadowMapComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ShadowMapComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ShadowMapComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ShadowMapComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ShadowMapComponent>, this);
}

uint64_t *re::ecs2::allocInfo_PointLightShadowMapComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254110C78);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254110C78))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541113D8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541113E8 = 0;
    qword_2541113F8 = 0;
    qword_254111400 = 0xFFFFFFFFLL;
    qword_2541113D8 = (uint64_t)&off_24ED7DAA8;
    qword_254111408 = (uint64_t)"PointLightShadowMapComponent";
    dword_254111410 = 0;
    xmmword_254111418 = 0u;
    xmmword_254111428 = 0u;
    xmmword_254111438 = 0u;
    qword_254111448 = 0;
    __cxa_guard_release(&qword_254110C78);
  }
  return &qword_2541113D8;
}

void re::ecs2::initInfo_PointLightShadowMapComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  _QWORD v26[2];
  __int128 v27;

  v26[0] = 0xE3B8089A156ED0CELL;
  v26[1] = "PointLightShadowMapComponent";
  re::StringID::destroyString((re::StringID *)v26);
  *((_OWORD *)this + 2) = v27;
  v4 = atomic_load((unsigned __int8 *)&qword_254110C80);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254110C80);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254110CF8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_float((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "depthBias";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1C00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254110D00 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "cullMode";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x2000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254110D08 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::IntrospectionInfo<re::Optional<float>>::get(1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "zNear";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x2400000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254110D10 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::IntrospectionInfo<re::Optional<float>>::get(1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "zFar";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x2C00000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_254110D18 = v24;
      __cxa_guard_release(&qword_254110C80);
    }
  }
  *((_QWORD *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_254110CF8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PointLightShadowMapComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PointLightShadowMapComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PointLightShadowMapComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PointLightShadowMapComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v25 = v27;
}

uint64_t *re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(int a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v3;
  int v4;
  re *v5;
  std::__shared_mutex_base *v6;
  re *v7;
  std::__shared_mutex_base *v8;
  uint64_t v10;
  int v11;
  re::IntrospectionRegistry *v12;
  const re::IntrospectionBase *v13;
  const char *v14;
  __int128 v15;
  __int128 v16;
  const char *v17;
  uint64_t v18[2];

  if ((v3 & 1) == 0
  {
    re::IntrospectionOptionalBase::IntrospectionOptionalBase((re::IntrospectionOptionalBase *)&re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(BOOL)::info);
    re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(BOOL)::info = (uint64_t)&off_24ED68910;
  }
  if (a1)
  {
    if (re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(BOOL)::isInitialized)
      return &re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    v4 = re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v16);
    if (v4)
      return &re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(BOOL)::info;
    v6 = re::introspectionSharedMutex(v5);
    std::__shared_mutex_base::lock(v6);
  }
  v7 = (re *)re::mtl::introspect_CullMode((re::mtl *)1, a2);
  if (re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(BOOL)::isInitialized)
  {
    if ((a1 & 1) == 0)
    {
LABEL_9:
      v8 = re::introspectionSharedMutex(v7);
      std::__shared_mutex_base::unlock(v8);
    }
  }
  else
  {
    v10 = (uint64_t)v7;
    re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(BOOL)::isInitialized = 1;
    v11 = *((_DWORD *)v7 + 6);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(BOOL)::info, 0);
    qword_255802A68 = 0x20000000DLL;
    dword_255802A70 = v11;
    word_255802A74 = 0;
    *(_QWORD *)&xmmword_255802A78 = 0;
    *((_QWORD *)&xmmword_255802A78 + 1) = 0xFFFFFFFFLL;
    qword_255802A88 = v10;
    unk_255802A90 = 0;
    re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(BOOL)::info = (uint64_t)&off_24ED68910;
    re::IntrospectionRegistry::add(v12, v13);
    re::getPrettyTypeName((re *)&re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(BOOL)::info, (const re::IntrospectionBase *)&v16);
    if ((BYTE8(v16) & 1) != 0)
      v14 = v17;
    else
      v14 = (char *)&v16 + 9;
    if ((_QWORD)v16 && (BYTE8(v16) & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v16 + 40))();
    v16 = *(_OWORD *)(v10 + 32);
    xmmword_255802A78 = v15;
    re::StringID::destroyString((re::StringID *)v18);
    if ((a1 & 1) == 0)
      goto LABEL_9;
  }
  return &re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(BOOL)::info;
}

void re::internal::defaultConstruct<re::ecs2::PointLightShadowMapComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED589C0;
  *(_DWORD *)(v3 + 28) = 1065353216;
  *(_BYTE *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 36) = 0;
  *(_BYTE *)(v3 + 44) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::PointLightShadowMapComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::PointLightShadowMapComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED589C0;
  *(_DWORD *)(v1 + 28) = 1065353216;
  *(_BYTE *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 36) = 0;
  *(_BYTE *)(v1 + 44) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PointLightShadowMapComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PointLightShadowMapComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PointLightShadowMapComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PointLightShadowMapComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PointLightShadowMapComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PointLightShadowMapComponent>, this);
}

uint64_t *re::ecs2::allocInfo_DirectionalLightShadowMapComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254110C88);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254110C88))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254111450, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254111460 = 0;
    qword_254111470 = 0;
    qword_254111478 = 0xFFFFFFFFLL;
    qword_254111450 = (uint64_t)&off_24ED7DAA8;
    qword_254111480 = (uint64_t)"DirectionalLightShadowMapComponent";
    dword_254111488 = 0;
    xmmword_254111490 = 0u;
    xmmword_2541114A0 = 0u;
    xmmword_2541114B0 = 0u;
    qword_2541114C0 = 0;
    __cxa_guard_release(&qword_254110C88);
  }
  return &qword_254111450;
}

void re::ecs2::initInfo_DirectionalLightShadowMapComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  const re::IntrospectionBase *v34;
  void *v35;
  uint64_t v36;
  uint64_t *v37;
  const re::IntrospectionBase *v38;
  void *v39;
  uint64_t v40;
  __int128 v41;
  _QWORD v42[2];
  __int128 v43;

  v42[0] = 0x392F7D3B7831E19ALL;
  v42[1] = "DirectionalLightShadowMapComponent";
  re::StringID::destroyString((re::StringID *)v42);
  *((_OWORD *)this + 2) = v43;
  v4 = atomic_load((unsigned __int8 *)&qword_254110C90);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254110C90);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254110F00 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_float((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "depthBias";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1C00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254110F08 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_float((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "distance";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x2000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254110F10 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "cullMode";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x2400000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254110F18 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_BOOL((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "automaticallyAdjustsShadowProjection";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x2600000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_254110F20 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_float((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "zNear";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x2800000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_254110F28 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_float((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "zFar";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x2C00000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_254110F30 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v35 = re::introspect_float((re *)1, v34);
      v36 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v36 = 1;
      *(_QWORD *)(v36 + 8) = "orthographicScale";
      *(_QWORD *)(v36 + 16) = v35;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0x3000000007;
      *(_DWORD *)(v36 + 40) = 0;
      *(_QWORD *)(v36 + 48) = 0;
      *(_QWORD *)(v36 + 56) = 0;
      *(_DWORD *)(v36 + 64) = 0;
      qword_254110F38 = v36;
      v37 = re::introspectionAllocator((re *)v36);
      v39 = re::introspect_BOOL((re *)1, v38);
      v40 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v37 + 32))(v37, 72, 8);
      *(_DWORD *)v40 = 1;
      *(_QWORD *)(v40 + 8) = "useDiameterBounds";
      *(_QWORD *)(v40 + 16) = v39;
      *(_QWORD *)(v40 + 24) = 0;
      *(_QWORD *)(v40 + 32) = 0x3400000008;
      *(_DWORD *)(v40 + 40) = 0;
      *(_QWORD *)(v40 + 48) = 0;
      *(_QWORD *)(v40 + 56) = 0;
      *(_DWORD *)(v40 + 64) = 0;
      qword_254110F40 = v40;
      __cxa_guard_release(&qword_254110C90);
    }
  }
  *((_QWORD *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 9;
  *((_QWORD *)this + 8) = &qword_254110F00;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::DirectionalLightShadowMapComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::DirectionalLightShadowMapComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::DirectionalLightShadowMapComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::DirectionalLightShadowMapComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v41 = v43;
}

double re::internal::defaultConstruct<re::ecs2::DirectionalLightShadowMapComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  double result;

  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED58A40;
  *(_QWORD *)(v3 + 28) = 0x40A000003F800000;
  *(_BYTE *)(v3 + 36) = 0;
  *(_BYTE *)(v3 + 38) = 1;
  result = 524288.117;
  *(_QWORD *)(v3 + 40) = 0x412000003C23D70ALL;
  *(_DWORD *)(v3 + 48) = 1065353216;
  *(_BYTE *)(v3 + 52) = 1;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::DirectionalLightShadowMapComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::DirectionalLightShadowMapComponent>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED58A40;
  *(_QWORD *)(v1 + 28) = 0x40A000003F800000;
  *(_BYTE *)(v1 + 36) = 0;
  *(_BYTE *)(v1 + 38) = 1;
  result = 524288.117;
  *(_QWORD *)(v1 + 40) = 0x412000003C23D70ALL;
  *(_DWORD *)(v1 + 48) = 1065353216;
  *(_BYTE *)(v1 + 52) = 1;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::DirectionalLightShadowMapComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_DirectionalLightShadowMapComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"DirectionalLightShadowMapComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_DirectionalLightShadowMapComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_DirectionalLightShadowMapComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::DirectionalLightShadowMapComponent>, this);
}

uint64_t *re::ecs2::allocInfo_SpotLightShadowMapComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254110C98);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254110C98))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541114C8, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541114D8 = 0;
    qword_2541114E8 = 0;
    qword_2541114F0 = 0xFFFFFFFFLL;
    qword_2541114C8 = (uint64_t)&off_24ED7DAA8;
    qword_2541114F8 = (uint64_t)"SpotLightShadowMapComponent";
    dword_254111500 = 0;
    xmmword_254111508 = 0u;
    xmmword_254111518 = 0u;
    xmmword_254111528 = 0u;
    qword_254111538 = 0;
    __cxa_guard_release(&qword_254110C98);
  }
  return &qword_2541114C8;
}

void re::ecs2::initInfo_SpotLightShadowMapComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  _QWORD v26[2];
  __int128 v27;

  v26[0] = 0x695021DC2B51B0EALL;
  v26[1] = "SpotLightShadowMapComponent";
  re::StringID::destroyString((re::StringID *)v26);
  *((_OWORD *)this + 2) = v27;
  v4 = atomic_load((unsigned __int8 *)&qword_254110CA0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254110CA0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254110D20 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_float((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "depthBias";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1C00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254110D28 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::IntrospectionInfo<re::Optional<re::mtl::CullMode>>::get(1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "cullMode";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x2000000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254110D30 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::IntrospectionInfo<re::Optional<float>>::get(1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "zNear";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x2400000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254110D38 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::IntrospectionInfo<re::Optional<float>>::get(1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "zFar";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x2C00000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_254110D40 = v24;
      __cxa_guard_release(&qword_254110CA0);
    }
  }
  *((_QWORD *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 5;
  *((_QWORD *)this + 8) = &qword_254110D20;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SpotLightShadowMapComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SpotLightShadowMapComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SpotLightShadowMapComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SpotLightShadowMapComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v25 = v27;
}

void re::internal::defaultConstruct<re::ecs2::SpotLightShadowMapComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED58AC0;
  *(_DWORD *)(v3 + 28) = 1065353216;
  *(_BYTE *)(v3 + 32) = 0;
  *(_BYTE *)(v3 + 36) = 0;
  *(_BYTE *)(v3 + 44) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::SpotLightShadowMapComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::SpotLightShadowMapComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED58AC0;
  *(_DWORD *)(v1 + 28) = 1065353216;
  *(_BYTE *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 36) = 0;
  *(_BYTE *)(v1 + 44) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::SpotLightShadowMapComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_SpotLightShadowMapComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SpotLightShadowMapComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SpotLightShadowMapComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SpotLightShadowMapComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SpotLightShadowMapComponent>, this);
}

_QWORD *re::make::shared::unsafelyInplace<re::ecs2::LightComponent>(_QWORD *a1)
{
  _anonymous_namespace_ *v2;
  _anonymous_namespace_ *v3;
  _anonymous_namespace_ *v4;
  _anonymous_namespace_ *v5;

  bzero(a1, 0x370uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  a1[2] = 0;
  *((_BYTE *)a1 + 24) = 0;
  *a1 = off_24ED58540;
  *((_DWORD *)a1 + 7) = 3;
  a1[4] = 0x42B4000046D2A785;
  *((_DWORD *)a1 + 10) = 1120403456;
  a1[6] = 0;
  *((_BYTE *)a1 + 56) = 0;
  *((_DWORD *)a1 + 15) = 1008981770;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  v3 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(a1 + 8, 0);
  *((_DWORD *)a1 + 44) = 0;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *(_QWORD *)((char *)a1 + 180) = 0x412000003C23D70ALL;
  *(_QWORD *)((char *)a1 + 188) = 0;
  *((_BYTE *)a1 + 196) = 0;
  *(_DWORD *)((char *)a1 + 198) = 16842752;
  *((_DWORD *)a1 + 51) = 1065353216;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  v4 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(a1 + 26, 0);
  *((_DWORD *)a1 + 80) = 0;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *(_QWORD *)((char *)a1 + 324) = 0x412000003C23D70ALL;
  *((_WORD *)a1 + 215) = 0;
  *((_BYTE *)a1 + 432) = 0;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 23) = 0u;
  *((_OWORD *)a1 + 24) = 0u;
  *((_OWORD *)a1 + 25) = 0u;
  *(_OWORD *)((char *)a1 + 413) = 0u;
  *((_OWORD *)a1 + 28) = 0u;
  *((_OWORD *)a1 + 29) = 0u;
  v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(a1 + 56, 0);
  *((_DWORD *)a1 + 140) = 0;
  *((_OWORD *)a1 + 33) = 0u;
  *((_OWORD *)a1 + 34) = 0u;
  *((_OWORD *)a1 + 31) = 0u;
  *((_OWORD *)a1 + 32) = 0u;
  *((_OWORD *)a1 + 30) = 0u;
  *(_QWORD *)((char *)a1 + 564) = 0x412000003C23D70ALL;
  *((_WORD *)a1 + 331) = 0;
  *((_OWORD *)a1 + 36) = 0u;
  *((_OWORD *)a1 + 37) = 0u;
  *((_OWORD *)a1 + 38) = 0u;
  *((_OWORD *)a1 + 39) = 0u;
  *((_OWORD *)a1 + 40) = 0u;
  *(_QWORD *)((char *)a1 + 653) = 0;
  *((_OWORD *)a1 + 42) = 0u;
  *((_OWORD *)a1 + 43) = 0u;
  re::DynamicString::setCapacity(a1 + 84, 0);
  *((_OWORD *)a1 + 47) = 0u;
  *((_OWORD *)a1 + 48) = 0u;
  *((_OWORD *)a1 + 45) = 0u;
  *((_OWORD *)a1 + 46) = 0u;
  *((_OWORD *)a1 + 44) = 0u;
  a1[98] = 0x3C23D70A00000000;
  *((_DWORD *)a1 + 198) = 1092616192;
  a1[100] = 0;
  *((_BYTE *)a1 + 808) = 0;
  *((_OWORD *)a1 + 51) = 0u;
  *((_DWORD *)a1 + 208) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *((_OWORD *)a1 + 53) = _Q0;
  *((_BYTE *)a1 + 864) = 0;
  return a1;
}

void re::TypeBuilderHelper::registerOptional<re::mtl::CullMode>(re::TypeRegistry *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, re::TypeRegistry **a4@<X8>)
{
  _anonymous_namespace_ *v8;
  re::TypeRegistry *v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[488];

  v8 = (_anonymous_namespace_ *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)a1 + 200, a2);
  if (a1 && v8)
  {
    v9 = *(re::TypeRegistry **)v8;
    *a4 = a1;
    a4[1] = v9;
  }
  else
  {
    v11 = *a3;
    re::TypeBuilder::beginOptionalType((uint64_t)v12, a2, 2uLL, 1uLL, &v11);
    re::TypeBuilder::setOptionalAccessors((uint64_t)v12, (void *(*)(void *))re::TypeBuilderHelper::registerOptional<re::mtl::CullMode>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (void (*)(void *, const void *))re::TypeBuilderHelper::registerOptional<re::mtl::CullMode>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke);
    re::TypeBuilder::commitTo((re::TypeBuilder *)v12, a1, a4);
    re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v12, v10);
  }
}

_QWORD *re::IntrospectionOptional<re::mtl::CullMode>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionOptional<re::mtl::CullMode>::~IntrospectionOptional(_QWORD *a1)
{
  *a1 = &off_24ED2DDF8;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionOptional<re::mtl::CullMode>::construct(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::mtl::CullMode>::hasValue(uint64_t a1, unsigned __int8 *a2)
{
  return *a2;
}

void re::IntrospectionOptional<re::mtl::CullMode>::setHasValue(uint64_t a1, _BYTE *a2, int a3)
{
  if (a3)
  {
    if (!*a2)
      *a2 = 1;
    ++a2;
  }
  else if (!*a2)
  {
    return;
  }
  *a2 = 0;
}

uint64_t re::IntrospectionOptional<re::mtl::CullMode>::value(uint64_t a1, uint64_t a2)
{
  return a2 + 1;
}

{
  return a2 + 1;
}

unsigned __int8 *re::TypeBuilderHelper::registerOptional<re::mtl::CullMode>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(unsigned __int8 *a1)
{
  unsigned __int8 *result;
  int v2;

  v2 = *a1;
  result = a1 + 1;
  if (!v2)
    return 0;
  return result;
}

_BYTE *re::TypeBuilderHelper::registerOptional<re::mtl::CullMode>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,void const*)#1}::__invoke(_BYTE *result, char *a2)
{
  char v2;

  if (a2)
  {
    v2 = *a2;
    if (!*result)
      *result = 1;
    result[1] = v2;
  }
  else if (*result)
  {
    *result = 0;
  }
  return result;
}

uint64_t re::ecs2::VisualProxyCaptureHelper::visualProxyStartCapturing(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  id *v17;
  _BOOL4 v18;
  int v19;
  id *v20;
  int v21;
  const void *v22;
  const void *v23;
  _BYTE *v24;
  id v25;
  id v26;
  char v27;
  _BYTE v28[23];
  id v29;

  v8 = a2;
  do
  {
    v9 = v8;
    v8 = *(_QWORD *)(v8 + 24);
  }
  while (v8);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v9 + 16) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(v9 + 16) + 56));
  v11 = re::ServiceLocator::serviceOrNull<re::RenderManager>(v10);
  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if (result)
    return result;
  v13 = re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyCaptureComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v14 = *a3;
  if (*(unsigned __int8 *)(a1 + 48) != v14)
  {
    LOBYTE(v15) = a3[1];
    goto LABEL_11;
  }
  v15 = a3[1];
  if (*(unsigned __int8 *)(a1 + 49) != v15)
  {
LABEL_11:
    *(_BYTE *)(a1 + 48) = v14;
    *(_BYTE *)(a1 + 49) = v15;
    re::Optional<re::ArcWeakPtr<re::ecs2::Entity>>::operator=((unsigned __int8 *)(a1 + 56), (id *)a3 + 1);
    v16 = 1;
    goto LABEL_12;
  }
  LOBYTE(v15) = *(_BYTE *)(a1 + 49);
  if (*(_BYTE *)(a1 + 56) && a3[8])
  {
    if (*(_QWORD *)(a1 + 64) == *((_QWORD *)a3 + 2))
      goto LABEL_36;
    goto LABEL_11;
  }
  if (a3[8] | *(unsigned __int8 *)(a1 + 56))
    goto LABEL_11;
LABEL_36:
  v16 = 0;
LABEL_12:
  v17 = (id *)(a3 + 40);
  if (*((_QWORD *)a3 + 5))
  {
    re::TextureHandle::metalTexture((os_unfair_lock_s **)(a1 + 32), &v26);
    v18 = *v17 != v26;
    if (v26)

  }
  else
  {
    v18 = 0;
  }
  if (*a3 || *(_QWORD *)(a1 + 40) && (!*(_QWORD *)(a1 + 32) ? (v19 = 1) : (v19 = v18), v19 != 1))
  {
    if (!v16)
      goto LABEL_29;
  }
  else
  {
    v20 = *(id **)(v11 + 64);
    v29 = 0;
    if (*v17)
    {
      NS::SharedPtr<MTL::Texture>::operator=(&v29, (void **)a3 + 5);
    }
    else
    {
      re::DynamicString::format((re::DynamicString *)"rootEntity-%s_scope", (re::DynamicString *)&v26, *(_QWORD *)(a2 + 280));
      if ((v27 & 1) != 0)
        v24 = *(_BYTE **)&v28[7];
      else
        v24 = v28;
      re::TextureManager::createRenderTarget(v20, *((_DWORD *)a3 + 6), *((_DWORD *)a3 + 7), *((_DWORD *)a3 + 8), 1u, (uint64_t)v24, 5, 0xFFFF, &v25);
      NS::SharedPtr<MTL::Texture>::operator=(&v29, &v25);
      if (v25)

      if (v26 && (v27 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v26 + 40))();
    }
    re::TextureManager::registerTexture((os_unfair_lock_s *)v20, &v29, (os_unfair_lock_s **)&v26);
    re::TextureHandle::operator=((re::TextureHandle *)(a1 + 32), (re::TextureHandle *)&v26);
    re::TextureHandle::invalidate((re::TextureHandle *)&v26);
    if (v29)

  }
  re::ecs2::Component::markDirty((_QWORD *)a1);
LABEL_29:
  *(_QWORD *)(v13 + 176) = a1;
  *(_WORD *)(v13 + 32) = *(_WORD *)a3;
  re::Optional<re::ArcWeakPtr<re::ecs2::Entity>>::operator=((unsigned __int8 *)(v13 + 40), (id *)a3 + 1);
  v21 = *((_DWORD *)a3 + 8);
  *(_QWORD *)(v13 + 56) = *((_QWORD *)a3 + 3);
  *(_DWORD *)(v13 + 64) = v21;
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v13 + 72), (void **)a3 + 5);
  v22 = *(const void **)(v13 + 80);
  v23 = (const void *)*((_QWORD *)a3 + 6);
  *(_QWORD *)(v13 + 80) = v23;
  if (v23)
    CFRetain(v23);
  if (v22)
    CFRelease(v22);
  re::HashSetBase<re::ecs2::ComponentTypeBase *,re::ecs2::ComponentTypeBase *,re::internal::ValueAsKey<re::ecs2::ComponentTypeBase *>,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::operator=(v13 + 88, (uint64_t)(a3 + 56));
  return re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>(v13 + 136, a4);
}

unsigned __int8 *re::Optional<re::ArcWeakPtr<re::ecs2::Entity>>::operator=(unsigned __int8 *a1, id *a2)
{
  int v3;
  int v4;
  BOOL v5;
  id *v6;
  BOOL v7;
  BOOL v8;

  v3 = *a1;
  v4 = *(unsigned __int8 *)a2;
  if (*a1)
    v5 = 0;
  else
    v5 = v4 == 0;
  if (!v5)
  {
    v6 = (id *)(a1 + 8);
    if (v3)
      v7 = v4 == 0;
    else
      v7 = 0;
    if (v7)
    {
      objc_destroyWeak(v6);
      *((_QWORD *)a1 + 1) = 0;
      *a1 = 0;
    }
    else
    {
      if (v3)
        v8 = 1;
      else
        v8 = v4 == 0;
      if (v8)
      {
        re::ArcWeakPtr<re::ecs2::Entity>::operator=(v6, a2 + 1);
      }
      else
      {
        *a1 = 1;
        *((_QWORD *)a1 + 1) = 0;
        objc_copyWeak(v6, a2 + 1);
      }
    }
  }
  return a1;
}

BOOL re::ecs2::VisualProxyCaptureHelper::isUnderHighFidelityVisualProxyTree(_BOOL8 this, const re::ecs2::Entity *a2)
{
  uint64_t v2;
  uint64_t v3;

  if (this)
  {
    v2 = this;
    while (1)
    {
      v3 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (v3)
        break;
      v2 = *(_QWORD *)(v2 + 24);
      if (!v2 || (*(_BYTE *)(v2 + 288) & 0x80) != 0)
        return 0;
    }
    return *(_BYTE *)(v3 + 48) != 0;
  }
  return this;
}

_QWORD *re::ecs2::VisualProxyCaptureHelper::markVisualProxyScope(re::ecs2::VisualProxyCaptureHelper *this, re::ecs2::Entity *a2)
{
  char v2;
  _QWORD *result;
  uint64_t v4;

  v2 = (char)a2;
  result = (_QWORD *)re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::VisualProxyCaptureHelper *)((char *)this + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VisualProxyScopeComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  v4 = *((unsigned int *)result + 7);
  if (((1 << v2) & v4) == 0)
  {
    *((_DWORD *)result + 7) = v4 | (1 << v2);
    return re::ecs2::Component::markDirty(result);
  }
  return result;
}

uint64_t re::HashSetBase<re::ecs2::ComponentTypeBase *,re::ecs2::ComponentTypeBase *,re::internal::ValueAsKey<re::ecs2::ComponentTypeBase *>,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
      {
        re::HashSetBase<re::ecs2::ComponentTypeBase *,re::ecs2::ComponentTypeBase *,re::internal::ValueAsKey<re::ecs2::ComponentTypeBase *>,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::copy(a1, a2);
        ++*(_DWORD *)(a1 + 40);
      }
      else
      {
        re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(a1);
      }
    }
    else if (v4)
    {
      if (*(_DWORD *)(a2 + 28) <= 3u)
        v5 = 3;
      else
        v5 = *(_DWORD *)(a2 + 28);
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init(a1, v4, v5);
      re::HashSetBase<re::ecs2::ComponentTypeBase *,re::ecs2::ComponentTypeBase *,re::internal::ValueAsKey<re::ecs2::ComponentTypeBase *>,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::copy(a1, a2);
    }
  }
  return a1;
}

void re::HashSetBase<re::ecs2::ComponentTypeBase *,re::ecs2::ComponentTypeBase *,re::internal::ValueAsKey<re::ecs2::ComponentTypeBase *>,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::copy(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t i;
  uint64_t v8;

  re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::clear(a1);
  v4 = *(_DWORD *)(a2 + 28);
  if (*(_DWORD *)(a1 + 24) < v4)
    re::HashSetBase<re::ecs2::ComponentTypeBase *,re::ecs2::ComponentTypeBase *,re::internal::ValueAsKey<re::ecs2::ComponentTypeBase *>,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::setCapacity(a1, v4);
  v5 = *(unsigned int *)(a2 + 32);
  if ((_DWORD)v5)
  {
    v6 = 0;
    for (i = 0; i < v5; ++i)
    {
      v8 = *(_QWORD *)(a2 + 16) + v6;
      if ((*(_DWORD *)(v8 + 8) & 0x80000000) != 0)
      {
        re::HashSetBase<re::ecs2::ComponentTypeBase *,re::ecs2::ComponentTypeBase *,re::internal::ValueAsKey<re::ecs2::ComponentTypeBase *>,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::addAsCopy(a1, *(_QWORD *)v8 % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)v8, v8 + 16, (_QWORD *)(v8 + 16));
        v5 = *(unsigned int *)(a2 + 32);
      }
      v6 += 24;
    }
  }
}

void re::HashSetBase<re::ecs2::ComponentTypeBase *,re::ecs2::ComponentTypeBase *,re::internal::ValueAsKey<re::ecs2::ComponentTypeBase *>,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  _BYTE v13[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v13, 0, 36);
      *(_QWORD *)&v13[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)v13, v4, a2);
      v5 = *(_OWORD *)v13;
      *(_OWORD *)v13 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v13[16];
      *(_QWORD *)&v13[16] = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v6;
      v8 = *(_OWORD *)&v13[24];
      *(_OWORD *)&v13[24] = *(_OWORD *)(a1 + 24);
      v7 = *(_DWORD *)&v13[32];
      *(_OWORD *)(a1 + 24) = v8;
      v9 = v7;
      if (v7)
      {
        v10 = 0;
        v11 = 0;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)&v13[16] + v10 + 8) & 0x80000000) != 0)
          {
            re::HashSetBase<re::ecs2::ComponentTypeBase *,re::ecs2::ComponentTypeBase *,re::internal::ValueAsKey<re::ecs2::ComponentTypeBase *>,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::addAsCopy(a1, *(_QWORD *)(*(_QWORD *)&v13[16] + v10) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(*(_QWORD *)&v13[16] + v10), *(_QWORD *)&v13[16] + v10 + 16, *(_QWORD *)&v13[16] + v10 + 16);
            v9 = *(_DWORD *)&v13[32];
          }
          ++v11;
          v10 += 24;
        }
        while (v11 < v9);
      }
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)v13);
    }
  }
  else
  {
    if (a2)
      v12 = a2;
    else
      v12 = 3;
  }
}

uint64_t re::HashSetBase<re::ecs2::ComponentTypeBase *,re::ecs2::ComponentTypeBase *,re::internal::ValueAsKey<re::ecs2::ComponentTypeBase *>,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::addAsCopy(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<re::ecs2::ComponentTypeBase *,re::ecs2::ComponentTypeBase *,re::internal::ValueAsKey<re::ecs2::ComponentTypeBase *>,re::Hash<re::ecs2::ComponentTypeBase *>,re::EqualTo<re::ecs2::ComponentTypeBase *>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v10 + 24 * v8 + 8) = v11 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

uint64_t *re::ecs2::allocInfo_RayCastResultComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_280);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_280))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254111570, 0);
    *(uint64_t *)((char *)&qword_254111580 + 6) = 0;
    qword_254111580 = 0;
    qword_254111590 = 0;
    qword_254111598 = 0xFFFFFFFFLL;
    qword_254111570 = (uint64_t)&off_24ED7DAA8;
    qword_2541115A0 = (uint64_t)"RayCastResultComponent";
    dword_2541115A8 = 0;
    xmmword_2541115B0 = 0u;
    unk_2541115C0 = 0u;
    xmmword_2541115D0 = 0u;
    qword_2541115E0 = 0;
    __cxa_guard_release(&_MergedGlobals_280);
  }
  return &qword_254111570;
}

void re::ecs2::initInfo_RayCastResultComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  const re::IntrospectionBase *v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[2];
  __int128 v21;

  v20[0] = 0x7F36C6B09A4F476ELL;
  v20[1] = "RayCastResultComponent";
  re::StringID::destroyString((re::StringID *)v20);
  *((_OWORD *)this + 2) = v21;
  v4 = atomic_load((unsigned __int8 *)&qword_254111548);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254111548);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254111550 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "hitWorldPosition";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254111558 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v13 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "hitWorldNormal";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x3000000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_254111560 = v14;
      v15 = re::introspectionAllocator((re *)v14);
      v17 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, v16);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v15 + 32))(v15, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "hitEntity";
      *(_QWORD *)(v18 + 16) = v17;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x4000000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_254111568 = v18;
      __cxa_guard_release(&qword_254111548);
    }
  }
  *((_QWORD *)this + 2) = 0x6000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 4;
  *((_QWORD *)this + 8) = &qword_254111550;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::RayCastResultComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::RayCastResultComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::RayCastResultComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::RayCastResultComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v19 = v21;
}

void re::internal::defaultConstruct<re::ecs2::RayCastResultComponent>(int a1, int a2, ArcSharedObject *this)
{
  id *v4;

  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 4) = 0u;
  v4 = (id *)((char *)this + 64);
  ArcSharedObject::ArcSharedObject(this, 0);
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 0;
  *(_QWORD *)this = &off_24ED58B40;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  objc_initWeak(v4, 0);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  re::ecs2::EntityHandle::reset(v4);
}

uint64_t re::internal::defaultDestruct<re::ecs2::RayCastResultComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::RayCastResultComponent>(uint64_t a1)
{
  id *v2;
  uint64_t v3;

  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v2 = (id *)(a1 + 64);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED58B40;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  objc_initWeak(v2, 0);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  re::ecs2::EntityHandle::reset(v2);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::RayCastResultComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_RayCastResultComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"RayCastResultComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_RayCastResultComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_RayCastResultComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::RayCastResultComponent>, this);
}

void re::ecs2::introspect_ReferenceLoadingPolicy(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  StringID v34;
  _QWORD v35[2];
  _QWORD v36[61];

  v2 = atomic_load((unsigned __int8 *)&qword_2541115F0);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_2541115F0);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Immediate";
      qword_254111620 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = 1;
      *(_QWORD *)(v30 + 16) = "OnDemand";
      qword_254111628 = v30;
      __cxa_guard_release(&qword_2541115F0);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2541115F8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2541115F8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254111678, "ReferenceLoadingPolicy", 1, 1, 1, 1);
    qword_254111678 = (uint64_t)&off_24ED7D9E8;
    qword_2541116B8 = (uint64_t)&re::ecs2::introspect_ReferenceLoadingPolicy(BOOL)::enumTable;
    dword_254111688 = 9;
    __cxa_guard_release(&qword_2541115F8);
  }
  if ((_MergedGlobals_281 & 1) == 0)
  {
    _MergedGlobals_281 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254111678, a2);
    v32 = 0xC2DBD2F3D2E34846;
    v33 = "ReferenceLoadingPolicy";
    v36[0] = 0x31CD534126;
    v36[1] = "uint8_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v36);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v36);
      v6 = (unsigned int *)qword_2541116B8;
      v35[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v34.var0 = 2 * v12;
            v34.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v16, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v34.var0 = 2 * v20;
              v34.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v24, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v25);
      xmmword_254111698 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "ReferenceLoadingPolicy", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::introspect_ReferenceLoadingState(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  re *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  StringID v36;
  _QWORD v37[2];
  _QWORD v38[61];

  v2 = atomic_load((unsigned __int8 *)&qword_254111600);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_254111600);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "NotLoaded";
      qword_254111630 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *((_QWORD *)v30 + 1) = 1;
      *((_QWORD *)v30 + 2) = "Loading";
      qword_254111638 = (uint64_t)v30;
      v31 = re::introspectionAllocator(v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 24, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = 2;
      *(_QWORD *)(v32 + 16) = "Loaded";
      qword_254111640 = v32;
      __cxa_guard_release(&qword_254111600);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254111608);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254111608))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_2541116C0, "ReferenceLoadingState", 1, 1, 1, 1);
    qword_2541116C0 = (uint64_t)&off_24ED7D9E8;
    qword_254111700 = (uint64_t)&re::ecs2::introspect_ReferenceLoadingState(BOOL)::enumTable;
    dword_2541116D0 = 9;
    __cxa_guard_release(&qword_254111608);
  }
  if ((byte_2541115E9 & 1) == 0)
  {
    byte_2541115E9 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_2541116C0, a2);
    v34 = 0x92AC409C83054700;
    v35 = "ReferenceLoadingState";
    v38[0] = 0x31CD534126;
    v38[1] = "uint8_t";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v38);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v38);
      v6 = (unsigned int *)qword_254111700;
      v37[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v38, &v34, 1, 1, (uint64_t)v37);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v36.var0 = 2 * v12;
            v36.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v38, v16, &v36);
            re::StringID::destroyString((re::StringID *)&v36);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v36.var0 = 2 * v20;
              v36.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v38, v24, &v36);
              re::StringID::destroyString((re::StringID *)&v36);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v38, v25);
      xmmword_2541116E0 = (__int128)v36;
      re::StringID::destroyString((re::StringID *)&v34);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v38);
      re::internal::assertLog((re::internal *)5, v33, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "ReferenceLoadingState", v34, v35);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t *re::ecs2::allocInfo_ReferenceComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254111610);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254111610))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254111708, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254111718 = 0;
    qword_254111728 = 0;
    qword_254111730 = 0xFFFFFFFFLL;
    qword_254111708 = (uint64_t)&off_24ED7DAA8;
    qword_254111738 = (uint64_t)"ReferenceComponent";
    dword_254111740 = 0;
    xmmword_254111748 = 0u;
    unk_254111758 = 0u;
    xmmword_254111768 = 0u;
    qword_254111778 = 0;
    __cxa_guard_release(&qword_254111610);
  }
  return &qword_254111708;
}

void re::ecs2::initInfo_ReferenceComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  uint64_t v15;
  uint64_t *v16;
  const re::IntrospectionBase *v17;
  uint64_t v18;
  uint64_t *v19;
  const re::IntrospectionBase *v20;
  void *v21;
  uint64_t v22;
  uint64_t *v23;
  const re::IntrospectionBase *v24;
  void *v25;
  uint64_t v26;
  __int128 v27;
  _QWORD v28[2];
  __int128 v29;

  v28[0] = 0x41AC874E67497C24;
  v28[1] = "ReferenceComponent";
  re::StringID::destroyString((re::StringID *)v28);
  *((_OWORD *)this + 2) = v29;
  v4 = atomic_load((unsigned __int8 *)&qword_254111618);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254111618);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254111648 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::IntrospectionInfo<re::DynamicString>::get(1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "entityName";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254111650 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      re::ecs2::introspect_ReferenceLoadingPolicy((re::ecs2 *)v13, v14);
      v15 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v15 = 1;
      *(_QWORD *)(v15 + 8) = "policy";
      *(_QWORD *)(v15 + 16) = &qword_254111678;
      *(_QWORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0x6100000002;
      *(_DWORD *)(v15 + 40) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_DWORD *)(v15 + 64) = 0;
      qword_254111658 = v15;
      v16 = re::introspectionAllocator((re *)v15);
      re::ecs2::introspect_ReferenceLoadingState((re::ecs2 *)v16, v17);
      v18 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 72, 8);
      *(_DWORD *)v18 = 1;
      *(_QWORD *)(v18 + 8) = "state";
      *(_QWORD *)(v18 + 16) = &qword_2541116C0;
      *(_QWORD *)(v18 + 24) = 0;
      *(_QWORD *)(v18 + 32) = 0x6200000003;
      *(_DWORD *)(v18 + 40) = 0;
      *(_QWORD *)(v18 + 48) = 0;
      *(_QWORD *)(v18 + 56) = 0;
      *(_DWORD *)(v18 + 64) = 0;
      qword_254111660 = v18;
      v19 = re::introspectionAllocator((re *)v18);
      v21 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, v20);
      v22 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v19 + 32))(v19, 72, 8);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 8) = "subscene";
      *(_QWORD *)(v22 + 16) = v21;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0x6800000004;
      *(_DWORD *)(v22 + 40) = 0;
      *(_QWORD *)(v22 + 48) = 0;
      *(_QWORD *)(v22 + 56) = 0;
      *(_DWORD *)(v22 + 64) = 0;
      qword_254111668 = v22;
      v23 = re::introspectionAllocator((re *)v22);
      v25 = re::IntrospectionInfo<re::DynamicString>::get(1, v24);
      v26 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v23 + 32))(v23, 72, 8);
      *(_DWORD *)v26 = 1;
      *(_QWORD *)(v26 + 8) = "bundlePath";
      *(_QWORD *)(v26 + 16) = v25;
      *(_QWORD *)(v26 + 24) = 0;
      *(_QWORD *)(v26 + 32) = 0x4000000005;
      *(_DWORD *)(v26 + 40) = 0;
      *(_QWORD *)(v26 + 48) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 64) = 0;
      qword_254111670 = v26;
      __cxa_guard_release(&qword_254111618);
    }
  }
  *((_QWORD *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 6;
  *((_QWORD *)this + 8) = &qword_254111648;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ReferenceComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ReferenceComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ReferenceComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ReferenceComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v27 = v29;
}

uint64_t re::internal::defaultConstruct<re::ecs2::ReferenceComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::ReferenceComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::ReferenceComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (id *)(a3 + 104);
  re::ecs2::EntityHandle::reset((id *)(a3 + 104));
  objc_destroyWeak(v4);
  *(_QWORD *)(a3 + 104) = 0;
  v5 = *(_QWORD *)(a3 + 64);
  if (v5)
  {
    if ((*(_BYTE *)(a3 + 72) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 40))(v5, *(_QWORD *)(a3 + 80));
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
  }
  v6 = *(_QWORD *)(a3 + 32);
  if (v6)
  {
    if ((*(_BYTE *)(a3 + 40) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 40))(v6, *(_QWORD *)(a3 + 48));
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
  }
  *(_QWORD *)a3 = &off_24ED426B8;
  return objc_destructInstance((id)(a3 + 8));
}

void *re::internal::defaultDestructV2<re::ecs2::ReferenceComponent>(uint64_t a1)
{
  id *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (id *)(a1 + 104);
  re::ecs2::EntityHandle::reset((id *)(a1 + 104));
  objc_destroyWeak(v2);
  *(_QWORD *)(a1 + 104) = 0;
  v3 = *(_QWORD *)(a1 + 64);
  if (v3)
  {
    if ((*(_BYTE *)(a1 + 72) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *(_QWORD *)(a1 + 80));
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
  }
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *(_QWORD *)(a1 + 48));
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
  }
  *(_QWORD *)a1 = &off_24ED426B8;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_ReferenceComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ReferenceComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ReferenceComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ReferenceComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ReferenceComponent>, this);
}

uint64_t re::ecs2::ReferenceComponent::makeSyncInfo(re::ecs2::ReferenceComponent *this)
{
  uint64_t v1;
  unsigned __int8 v2;
  _UNKNOWN **v3;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v1 = RESyncSyncableTypeInfoCreate();
  RESyncSyncableTypeInfoSetTypeId();
  v3 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v2 & 1) == 0)
  {
    v3 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (v5)
    {
      re::introspect<re::ecs2::ReferenceComponent>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"ReferenceComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ReferenceComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ReferenceComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ReferenceComponent>, 0);
      v3 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    }
  }
  re::getPrettyTypeName((re *)v3[12], (const re::IntrospectionBase *)&v6);
  RESyncSyncableTypeInfoSetDebugName();
  if (v6 && (v7 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v6 + 40))();
  RESyncSyncableTypeInfoSetSupportsNetworkSync();
  return v1;
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::ReferenceComponent>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _anonymous_namespace_ *v5;

  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v2 = (_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 32) = 0u;
  v3 = (_QWORD *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 24) = 0;
  *(_QWORD *)v4 = off_24ED58BC0;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  v5 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(v3, 0);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)v2 = 0u;
  re::DynamicString::setCapacity(v2, 0);
  *(_WORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 98) = 0;
  objc_initWeak((id *)(a1 + 104), 0);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  re::ecs2::EntityHandle::reset((id *)(a1 + 104));
  return a1;
}

void re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::~PhysicsJointDefinitionAndRuntimeCollection(re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *this)
{
  char *v1;

  *(_QWORD *)this = &off_24ED68990;
  v1 = (char *)this + 8;
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit((uint64_t)this + 48);
  re::DynamicArray<re::ecs2::PhysicsJointDefinition>::deinit((uint64_t)v1);
}

{
  char *v1;

  *(_QWORD *)this = &off_24ED68990;
  v1 = (char *)this + 8;
  re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::deinit((uint64_t)this + 48);
  re::DynamicArray<re::ecs2::PhysicsJointDefinition>::deinit((uint64_t)v1);
  JUMPOUT(0x2276933B8);
}

char *re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::runtimeJoint(re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *this, unint64_t a2)
{
  char *WeakRetained;
  char *v3;

  if (*((_QWORD *)this + 8) <= a2)
    return 0;
  WeakRetained = (char *)objc_loadWeakRetained((id *)(*((_QWORD *)this + 10) + 8 * a2));
  if (!WeakRetained)
    return 0;
  v3 = WeakRetained - 8;

  return v3;
}

void re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::addJoint(re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *this, const re::ecs2::PhysicsJointDefinition *a2, const re::ecs2::Scene *a3)
{
  _anonymous_namespace_ *inited;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  id *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  const char *v18;
  char *v19;
  char *v20;
  const char *v21;
  NSObject *v22;
  int v23;
  unint64_t v24;
  _BYTE v25[10];
  __int16 v26;
  char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::syncAfterExternalChange(this, 1);
  re::DynamicArray<re::ecs2::PhysicsJointDefinition>::add((re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *)((char *)this + 8), (uint64_t)a2);
  inited = (_anonymous_namespace_ *)objc_initWeak((id *)&v24, 0);
  v7 = *((_QWORD *)this + 7);
  v8 = *((_QWORD *)this + 8);
  if (v8 >= v7)
  {
    v9 = v8 + 1;
    if (v7 < v8 + 1)
    {
      if (*((_QWORD *)this + 6))
      {
        v10 = 2 * v7;
        v11 = v7 == 0;
        v12 = 8;
        if (!v11)
          v12 = v10;
        if (v12 <= v9)
          v13 = v9;
        else
          v13 = v12;
        re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::setCapacity((_QWORD *)this + 6, v13);
      }
      else
      {
        re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::setCapacity((_QWORD *)this + 6, v9);
        ++*((_DWORD *)this + 18);
      }
    }
    v8 = *((_QWORD *)this + 8);
  }
  v14 = (id *)(*((_QWORD *)this + 10) + 8 * v8);
  *v14 = 0;
  objc_moveWeak(v14, (id *)&v24);
  ++*((_QWORD *)this + 8);
  ++*((_DWORD *)this + 18);
  objc_destroyWeak((id *)&v24);
  uuid_generate_random((unsigned __int8 *)&v24);
  v15 = (*(_QWORD *)v25 + (v24 << 6) + (v24 >> 2) - 0x61C8864680B583E9) ^ v24;
  *((_QWORD *)this + 11) = v15;
  *((_QWORD *)this + 12) = v15;
  v16 = re::ecs2::EntityHandle::resolve((uint64_t)a2 + 16, (char *)a3);
  v17 = v16;
  if (v16)
    v18 = (const char *)*((_QWORD *)v16 + 35);
  else
    v18 = "null";
  v19 = re::ecs2::EntityHandle::resolve((uint64_t)a2 + 96, (char *)a3);
  v20 = v19;
  if (v19)
    v21 = (const char *)*((_QWORD *)v19 + 35);
  else
    v21 = "null";
  v22 = *re::physicsLogObjects((re *)v19);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    v23 = *((_DWORD *)this + 6) - 1;
    LODWORD(v24) = 67110146;
    HIDWORD(v24) = v23;
    *(_WORD *)v25 = 2080;
    *(_QWORD *)&v25[2] = v18;
    v26 = 2048;
    v27 = v17;
    v28 = 2080;
    v29 = v21;
    v30 = 2048;
    v31 = v20;
    _os_log_impl(&dword_224FE9000, v22, OS_LOG_TYPE_DEFAULT, "PhysicsJointDefinitionAndRuntimeCollection::addJoint(): index=%d, Entity %s (%p), Entity %s (%p)", (uint8_t *)&v24, 0x30u);
  }
}

void re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::syncAfterExternalChange(re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *this, int a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)this + 12) != *((_QWORD *)this + 11))
  {
    v4 = *re::physicsLogObjects(this);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *((_QWORD *)this + 11);
      v5 = *((_QWORD *)this + 12);
      v16 = 134218240;
      v17 = v5;
      v18 = 2048;
      v19 = v6;
      _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "PhysicsJointDefinitionAndRuntimeCollection::syncAfterExternalChange(): m_lastGuid=%llu m_guid=%llu", (uint8_t *)&v16, 0x16u);
    }
    if (*((_QWORD *)this + 8))
    {
      v7 = 0;
      do
        re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::deleteRuntimeJoint(this, v7++, a2);
      while (*((_QWORD *)this + 8) > v7);
    }
    v8 = *((_QWORD *)this + 3);
    objc_initWeak((id *)&v16, 0);
    v9 = *((_QWORD *)this + 8);
    if (v9 >= v8)
    {
      if (v9 <= v8)
      {
LABEL_18:
        objc_destroyWeak((id *)&v16);
        *((_QWORD *)this + 12) = *((_QWORD *)this + 11);
        return;
      }
      v13 = 8 * v8;
      v14 = v8;
      do
      {
        v15 = *((_QWORD *)this + 10);
        objc_destroyWeak((id *)(v15 + v13));
        *(_QWORD *)(v15 + 8 * v14++) = 0;
        v13 += 8;
      }
      while (v14 < *((_QWORD *)this + 8));
    }
    else
    {
      if (*((_QWORD *)this + 7) < v8)
      {
        re::DynamicArray<re::ArcWeakPtr<re::internal::AssetEntry>>::setCapacity((_QWORD *)this + 6, v8);
        v9 = *((_QWORD *)this + 8);
      }
      v10 = v8 - v9;
      if (v8 > v9)
      {
        v11 = 8 * v9;
        do
        {
          v12 = (id *)(*((_QWORD *)this + 10) + v11);
          *v12 = 0;
          objc_copyWeak(v12, (id *)&v16);
          v11 += 8;
          --v10;
        }
        while (v10);
      }
    }
    *((_QWORD *)this + 8) = v8;
    ++*((_DWORD *)this + 18);
    goto LABEL_18;
  }
}

__n128 re::DynamicArray<re::ecs2::PhysicsJointDefinition>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::ecs2::PhysicsJointDefinition>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 240 * v4;
  *(_DWORD *)v5 = *(_DWORD *)a2;
  re::ecs2::EntityHandle::EntityHandle((id *)(v5 + 16), (const re::ecs2::EntityHandle *)(a2 + 16));
  re::StringID::StringID((re::StringID *)(v5 + 40), (const StringID *)(a2 + 40));
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v5 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v5 + 80) = v6;
  re::ecs2::EntityHandle::EntityHandle((id *)(v5 + 96), (const re::ecs2::EntityHandle *)(a2 + 96));
  re::StringID::StringID((re::StringID *)(v5 + 120), (const StringID *)(a2 + 120));
  v7 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(v5 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v5 + 160) = v7;
  result = *(__n128 *)(a2 + 176);
  v9 = *(_OWORD *)(a2 + 192);
  v10 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(v5 + 220) = *(_OWORD *)(a2 + 220);
  *(_OWORD *)(v5 + 192) = v9;
  *(_OWORD *)(v5 + 208) = v10;
  *(__n128 *)(v5 + 176) = result;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

void re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::deleteJoint(re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *this, unint64_t a2, int a3)
{
  uint64_t v6;
  char *WeakRetained;
  char *v8;
  char *v9;
  const char *v10;
  char *v11;
  char *v12;
  char *v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id *v26;
  id *v27;
  id *v28;
  uint64_t v29;
  uint64_t v30;
  re *v31;
  NSObject *v32;
  unsigned __int8 out[48];
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::syncAfterExternalChange(this, a3);
  if (*((_QWORD *)this + 3) <= a2)
  {
    v34 = 0u;
    v35 = 0u;
    memset(out, 0, sizeof(out));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_23:
    v34 = 0u;
    v35 = 0u;
    memset(out, 0, sizeof(out));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_24;
  }
  v6 = *((_QWORD *)this + 5);
  WeakRetained = (char *)objc_loadWeakRetained((id *)(v6 + 240 * a2 + 16));
  if (WeakRetained)
  {
    v8 = WeakRetained;
    v9 = WeakRetained - 8;

    v10 = (const char *)*((_QWORD *)v8 + 34);
  }
  else
  {
    v9 = 0;
    v10 = "null";
  }
  v11 = (char *)objc_loadWeakRetained((id *)(v6 + 240 * a2 + 96));
  if (v11)
  {
    v12 = v11;
    v13 = v11 - 8;

    v14 = (const char *)*((_QWORD *)v12 + 34);
  }
  else
  {
    v13 = 0;
    v14 = "null";
  }
  re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::deleteRuntimeJoint(this, a2, a3);
  v15 = *((_QWORD *)this + 3);
  if (v15 <= a2)
    goto LABEL_23;
  v16 = *((_QWORD *)this + 5);
  if (v15 - 1 > a2 && v16 + 240 * a2 + 240 != v16 + 240 * v15)
  {
    v17 = 240 * a2;
    v18 = 240 * v15 - 240;
    do
    {
      v19 = v16 + v17;
      *(_DWORD *)(v16 + 240 * a2) = *(_DWORD *)(v16 + 240 * a2 + 240);
      re::ecs2::EntityHandle::operator=((id *)(v16 + v17 + 16), (id *)(v16 + v17 + 256));
      re::StringID::operator=((unint64_t *)(v19 + 40), (uint64_t *)(v19 + 280));
      v20 = *(_OWORD *)(v16 + v17 + 320);
      *(_OWORD *)(v19 + 64) = *(_OWORD *)(v19 + 304);
      *(_OWORD *)(v19 + 80) = v20;
      re::ecs2::EntityHandle::operator=((id *)(v19 + 96), (id *)(v19 + 336));
      re::StringID::operator=((unint64_t *)(v19 + 120), (uint64_t *)(v19 + 360));
      v21 = *(_OWORD *)(v16 + v17 + 400);
      *(_OWORD *)(v19 + 144) = *(_OWORD *)(v19 + 384);
      *(_OWORD *)(v19 + 160) = v21;
      v22 = *(_OWORD *)(v16 + v17 + 432);
      *(_OWORD *)(v19 + 176) = *(_OWORD *)(v19 + 416);
      *(_OWORD *)(v19 + 192) = v22;
      *(_OWORD *)(v19 + 208) = *(_OWORD *)(v19 + 448);
      *(_OWORD *)(v19 + 220) = *(_OWORD *)(v19 + 460);
      v16 += 240;
      v18 -= 240;
    }
    while (v17 != v18);
    v15 = *((_QWORD *)this + 3);
    v16 = *((_QWORD *)this + 5);
  }
  v23 = v16 + 240 * v15;
  re::ecs2::PinHandle::~PinHandle((id *)(v23 - 144));
  re::ecs2::PinHandle::~PinHandle((id *)(v23 - 224));
  --*((_QWORD *)this + 3);
  ++*((_DWORD *)this + 8);
  v24 = *((_QWORD *)this + 8);
  if (v24 <= a2)
  {
LABEL_24:
    v34 = 0u;
    v35 = 0u;
    memset(out, 0, sizeof(out));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (v24 - 1 > a2)
  {
    v25 = *((_QWORD *)this + 10);
    v26 = (id *)(v25 + 8 * a2);
    v27 = (id *)(v25 + 8 * v24);
    if (v26 + 1 != v27)
    {
      do
      {
        objc_destroyWeak(v26);
        *v26 = 0;
        v28 = v26 + 2;
        objc_moveWeak(v26, v26 + 1);
        ++v26;
      }
      while (v28 != v27);
      v24 = *((_QWORD *)this + 8);
    }
  }
  v29 = *((_QWORD *)this + 10) + 8 * v24;
  objc_destroyWeak((id *)(v29 - 8));
  *(_QWORD *)(v29 - 8) = 0;
  --*((_QWORD *)this + 8);
  ++*((_DWORD *)this + 18);
  uuid_generate_random(out);
  v30 = (*(_QWORD *)&out[8] + (*(_QWORD *)out << 6) + (*(_QWORD *)out >> 2) - 0x61C8864680B583E9) ^ *(_QWORD *)out;
  *((_QWORD *)this + 11) = v30;
  *((_QWORD *)this + 12) = v30;
  v32 = *re::physicsLogObjects(v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)out = 67110146;
    *(_DWORD *)&out[4] = a2;
    *(_WORD *)&out[8] = 2080;
    *(_QWORD *)&out[10] = v10;
    *(_WORD *)&out[18] = 2048;
    *(_QWORD *)&out[20] = v9;
    *(_WORD *)&out[28] = 2080;
    *(_QWORD *)&out[30] = v14;
    *(_WORD *)&out[38] = 2048;
    *(_QWORD *)&out[40] = v13;
    _os_log_impl(&dword_224FE9000, v32, OS_LOG_TYPE_DEFAULT, "PhysicsJointDefinitionAndRuntimeCollection::deleteJoint(): index=%d, Entity %s (%p), Entity %s (%p)", out, 0x30u);
  }
}

void re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::deleteRuntimeJoint(re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *this, unint64_t a2, int a3)
{
  _QWORD *WeakRetained;
  _QWORD *v7;
  uint64_t v8;
  id *v9;

  if (*((_QWORD *)this + 8) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_9;
  }
  WeakRetained = objc_loadWeakRetained((id *)(*((_QWORD *)this + 10) + 8 * a2));
  if (!WeakRetained)
    return;
  v7 = WeakRetained;

  v8 = v7[5];
  if (v8)
  {
    re::PhysicsJointCollection::deleteJoint(v8 + 136, (re::Constraint *)(v7 - 1), a3);
    v7[5] = 0;
  }
  if (*((_QWORD *)this + 8) <= a2)
  {
LABEL_9:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  v9 = (id *)(*((_QWORD *)this + 10) + 8 * a2);
  objc_destroyWeak(v9);
  *v9 = 0;
}

uint64_t re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::setJoints(re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *a1, uint64_t a2, unint64_t a3, char *a4)
{
  NSObject *v4;
  unint64_t v5;
  re *v10;
  NSObject *v11;
  uint64_t v12;
  unint64_t v13;
  re *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  const char *v20;
  char *v21;
  char *v22;
  const char *v23;
  unint64_t v24;
  NSObject *v25;
  uint64_t v26;
  unint64_t v27;
  NSObject *v28;
  uint64_t v29;
  unint64_t v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t result;
  unint64_t v34;
  _QWORD v35[2];
  unint64_t v36;
  int v37;
  uint64_t v38;
  _QWORD v39[2];
  NSObject *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  const char *v45;
  __int16 v46;
  int v47;
  __int16 v48;
  unint64_t v49;
  __int16 v50;
  NSObject *v51;
  uint8_t buf[64];
  __int128 v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::syncAfterExternalChange(a1, 1);
  v11 = *re::physicsLogObjects(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *((_QWORD *)a1 + 3);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = a3;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v12;
    _os_log_impl(&dword_224FE9000, v11, OS_LOG_TYPE_DEFAULT, "PhysicsJointDefinitionAndRuntimeCollection::setJoints(): Begin, new joint count=%d, existing joint count=%d", buf, 0xEu);
  }
  v42 = 0;
  v39[1] = 0;
  v40 = 0;
  v39[0] = 0;
  v41 = 0;
  v13 = *((_QWORD *)a1 + 3);
  buf[0] = 0;
  v14 = (re *)re::DynamicArray<BOOL>::resize(v39, v13, buf);
  v38 = 0;
  v35[1] = 0;
  v36 = 0;
  v34 = 0;
  v35[0] = 0;
  v37 = 0;
  if (a3)
  {
    v16 = 0;
    do
    {
      v17 = a2 + 240 * v16;
      v18 = re::ecs2::EntityHandle::resolve(v17 + 16, a4);
      v19 = v18;
      if (v18)
        v20 = (const char *)*((_QWORD *)v18 + 35);
      else
        v20 = "null";
      v21 = re::ecs2::EntityHandle::resolve(a2 + 240 * v16 + 96, a4);
      v22 = v21;
      if (v21)
        v23 = (const char *)*((_QWORD *)v21 + 35);
      else
        v23 = "null";
      if (!*((_QWORD *)a1 + 3))
        goto LABEL_24;
      v5 = 0;
      while (1)
      {
        v24 = re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::joint(a1, v5);
        v21 = (char *)re::ecs2::PhysicsJointDefinition::operator==(v17, v24);
        if ((_DWORD)v21)
          break;
        if (++v5 >= *((_QWORD *)a1 + 3))
          goto LABEL_24;
      }
      v4 = v40;
      if ((unint64_t)v40 <= v5)
        goto LABEL_49;
      if (*(_BYTE *)(v42 + v5))
      {
        v25 = *re::physicsLogObjects((re *)v21);
        v21 = (char *)os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v21)
        {
          *(_DWORD *)buf = 67110402;
          *(_DWORD *)&buf[4] = v34;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v5;
          *(_WORD *)&buf[14] = 2080;
          *(_QWORD *)&buf[16] = v20;
          *(_WORD *)&buf[24] = 2048;
          *(_QWORD *)&buf[26] = v19;
          *(_WORD *)&buf[34] = 2080;
          *(_QWORD *)&buf[36] = v23;
          *(_WORD *)&buf[44] = 2048;
          *(_QWORD *)&buf[46] = v22;
          _os_log_impl(&dword_224FE9000, v25, OS_LOG_TYPE_DEFAULT, "PhysicsJointDefinitionAndRuntimeCollection::setJoints(: New joint %d matches an already matched existing joint %d, Entity %s (%p), Entity %s (%p)", buf, 0x36u);
        }
      }
      v4 = v40;
      if ((unint64_t)v40 <= v5)
        goto LABEL_50;
      *(_BYTE *)(v42 + v5) = 1;
      if ((_DWORD)v5 == -1)
      {
LABEL_24:
        v4 = *re::physicsLogObjects((re *)v21);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67110146;
          *(_DWORD *)&buf[4] = v34;
          *(_WORD *)&buf[8] = 2080;
          *(_QWORD *)&buf[10] = v20;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v19;
          *(_WORD *)&buf[28] = 2080;
          *(_QWORD *)&buf[30] = v23;
          *(_WORD *)&buf[38] = 2048;
          *(_QWORD *)&buf[40] = v22;
          _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "PhysicsJointDefinitionAndRuntimeCollection::setJoints(: New joint %d does not match any existing joint, Entity %s (%p), Entity %s (%p)", buf, 0x30u);
        }
        v14 = (re *)re::DynamicArray<unsigned long>::add(v35, &v34);
      }
      else
      {
        v4 = *re::physicsLogObjects((re *)v21);
        v14 = (re *)os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)v14)
        {
          *(_DWORD *)buf = 67110402;
          *(_DWORD *)&buf[4] = v34;
          *(_WORD *)&buf[8] = 1024;
          *(_DWORD *)&buf[10] = v5;
          *(_WORD *)&buf[14] = 2080;
          *(_QWORD *)&buf[16] = v20;
          *(_WORD *)&buf[24] = 2048;
          *(_QWORD *)&buf[26] = v19;
          *(_WORD *)&buf[34] = 2080;
          *(_QWORD *)&buf[36] = v23;
          *(_WORD *)&buf[44] = 2048;
          *(_QWORD *)&buf[46] = v22;
          _os_log_impl(&dword_224FE9000, v4, OS_LOG_TYPE_DEFAULT, "PhysicsJointDefinitionAndRuntimeCollection::setJoints(: New joint %d matches an existing joint %d, Entity %s (%p), Entity %s (%p)", buf, 0x36u);
        }
      }
      v16 = v34 + 1;
      v34 = v16;
    }
    while (v16 < a3);
  }
  if ((int)*((_QWORD *)a1 + 3) >= 1)
  {
    v26 = *((_QWORD *)a1 + 3) + 1;
    while (1)
    {
      v27 = (v26 - 2);
      v28 = v40;
      if ((unint64_t)v40 <= v27)
        break;
      if (!*(_BYTE *)(v42 + v27))
        re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::deleteJoint(a1, (v26 - 2), 1);
      if ((unint64_t)--v26 <= 1)
        goto LABEL_34;
    }
    v43 = 0;
    v53 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v44 = 136315906;
    v45 = "operator[]";
    v46 = 1024;
    v47 = 789;
    v48 = 2048;
    v49 = (v26 - 2);
    v50 = 2048;
    v51 = v28;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_48;
  }
LABEL_34:
  if (v36)
  {
    v29 = 0;
    while (1)
    {
      v30 = *(_QWORD *)(v38 + 8 * v29);
      if (a3 <= v30)
        break;
      re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::addJoint(a1, (const re::ecs2::PhysicsJointDefinition *)(a2 + 240 * v30), (const re::ecs2::Scene *)a4);
      if (++v29 >= v36)
        goto LABEL_38;
    }
LABEL_48:
    re::internal::assertLog((re::internal *)6, v15, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < size()", "operator[]", 251, v30, a3);
    _os_crash();
    __break(1u);
LABEL_49:
    v43 = 0;
    v53 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v44 = 136315906;
    v45 = "operator[]";
    v46 = 1024;
    v47 = 789;
    v48 = 2048;
    v49 = v5;
    v50 = 2048;
    v51 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_50:
    v43 = 0;
    v53 = 0u;
    memset(buf, 0, sizeof(buf));
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v44 = 136315906;
    v45 = "operator[]";
    v46 = 1024;
    v47 = 789;
    v48 = 2048;
    v49 = v5;
    v50 = 2048;
    v51 = v4;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
LABEL_38:
  v31 = *re::physicsLogObjects(v14);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    v32 = *((_QWORD *)a1 + 3);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v32;
    _os_log_impl(&dword_224FE9000, v31, OS_LOG_TYPE_DEFAULT, "PhysicsJointDefinitionAndRuntimeCollection::setJoints(): End, resulting joint count=%d", buf, 8u);
  }
  if (v35[0] && v38)
    (*(void (**)(void))(*(_QWORD *)v35[0] + 40))();
  result = v39[0];
  if (v39[0])
  {
    if (v42)
      return (*(uint64_t (**)(void))(*(_QWORD *)v39[0] + 40))();
  }
  return result;
}

_QWORD *re::DynamicArray<BOOL>::resize(_QWORD *result, unint64_t a2, _BYTE *a3)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v7;
  _BYTE *v8;

  v4 = result;
  v5 = result[2];
  if (v5 >= a2)
  {
    if (v5 <= a2)
      return result;
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<BOOL>::setCapacity(result, a2);
      v5 = v4[2];
    }
    v7 = a2 - v5;
    if (a2 > v5)
    {
      v8 = (_BYTE *)(v4[4] + v5);
      do
      {
        *v8++ = *a3;
        --v7;
      }
      while (v7);
    }
  }
  v4[2] = a2;
  ++*((_DWORD *)v4 + 6);
  return result;
}

unint64_t re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::joint(re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *this, unint64_t a2)
{
  if (*((_QWORD *)this + 3) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *((_QWORD *)this + 5) + 240 * a2;
}

void re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::auditAndSyncRuntimeJoints(re::ecs2::PhysicsJointDefinitionAndRuntimeCollection *this, int a2, re::PhysicsSimulation *a3, re::ecs2::Scene *a4)
{
  re *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unsigned int DataToCreateRuntimeJoint;
  re::ecs2::Scene *v15;
  unsigned int v16;
  unint64_t v17;
  re::Constraint *RuntimeJoint;
  void *v19;
  unint64_t v20;
  NSObject *v21;
  re *v22;
  uint64_t v23;
  _BYTE v24[38];
  uint8_t buf[16];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::syncAfterExternalChange(this, 0);
  if ((a2 & 1) == 0 && *((_QWORD *)this + 8))
  {
    v9 = 0;
    do
      re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::deleteRuntimeJoint(this, v9++, 0);
    while (*((_QWORD *)this + 8) > v9);
  }
  if (a3 && a4)
  {
    if ((int)*((_QWORD *)this + 3) >= 1)
    {
      v10 = *((_QWORD *)this + 3) + 1;
      do
      {
        v11 = (v10 - 2);
        v12 = re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::joint(this, v11);
        v13 = re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::runtimeJoint(this, v11);
        v22 = 0;
        v23 = 0;
        memset(buf, 0, sizeof(buf));
        *(_QWORD *)&v26 = 0;
        *((_QWORD *)&v26 + 1) = 0x3F80000000000000;
        memset(v24, 0, 24);
        *(_QWORD *)&v24[24] = 0x3F80000000000000;
        DataToCreateRuntimeJoint = re::ecs2::PhysicsJointDefinition::getDataToCreateRuntimeJoint(v12, (uint64_t)a3, (uint64_t)a4, (uint64_t)v13, &v23, (float32x4_t *)buf, &v22, (float32x4_t *)v24);
        if (DataToCreateRuntimeJoint == 3)
        {
          re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::deleteJoint(this, (v10 - 2), 0);
        }
        else
        {
          v16 = DataToCreateRuntimeJoint;
          if (DataToCreateRuntimeJoint == 2)
          {
            if (v13)
              re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::deleteRuntimeJoint(this, (v10 - 2), 0);
          }
          else
          {
            if (DataToCreateRuntimeJoint == 1 && v13)
            {
              re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::deleteRuntimeJoint(this, (v10 - 2), 0);
              v13 = 0;
            }
            if (v16 <= 1 && !v13 && a2)
            {
              v17 = *((_QWORD *)this + 3);
              if (v17 <= v11)
              {
                v23 = 0;
                v28 = 0u;
                v29 = 0u;
                v26 = 0u;
                v27 = 0u;
                *(_OWORD *)buf = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v24 = 136315906;
                *(_QWORD *)&v24[4] = "operator[]";
                *(_WORD *)&v24[12] = 1024;
                *(_DWORD *)&v24[14] = 789;
                *(_WORD *)&v24[18] = 2048;
                *(_QWORD *)&v24[20] = (v10 - 2);
                *(_WORD *)&v24[28] = 2048;
                *(_QWORD *)&v24[30] = v17;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
LABEL_35:
                v23 = 0;
                v28 = 0u;
                v29 = 0u;
                v26 = 0u;
                v27 = 0u;
                *(_OWORD *)buf = 0u;
                os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
                *(_DWORD *)v24 = 136315906;
                *(_QWORD *)&v24[4] = "operator[]";
                *(_WORD *)&v24[12] = 1024;
                *(_DWORD *)&v24[14] = 789;
                *(_WORD *)&v24[18] = 2048;
                *(_QWORD *)&v24[20] = (v10 - 2);
                *(_WORD *)&v24[28] = 2048;
                *(_QWORD *)&v24[30] = v17;
                _os_log_send_and_compose_impl();
                _os_crash_msg();
                __break(1u);
              }
              RuntimeJoint = re::ecs2::PhysicsRuntimeJointFactory::createRuntimeJoint((re::ecs2::PhysicsRuntimeJointFactory *)(*((_QWORD *)this + 5) + 240* v11), a3, a4, v15);
              v17 = *((_QWORD *)this + 8);
              if (v17 <= v11)
                goto LABEL_35;
              if (RuntimeJoint)
                v19 = (char *)RuntimeJoint + 8;
              else
                v19 = 0;
              objc_storeWeak((id *)(*((_QWORD *)this + 10) + 8 * v11), v19);
            }
          }
        }
        --v10;
      }
      while (v10 > 1);
    }
  }
  else
  {
    if (*((_QWORD *)this + 8))
    {
      v20 = 0;
      do
        re::ecs2::PhysicsJointDefinitionAndRuntimeCollection::deleteRuntimeJoint(this, v20++, 0);
      while (*((_QWORD *)this + 8) > v20);
    }
    v21 = *re::physicsLogObjects(v8);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v21, OS_LOG_TYPE_DEFAULT, "PhysicsJointDefinitionAndRuntimeCollection::auditAndSyncRuntimeJoints(): Simulation or scene is null", buf, 2u);
    }
  }
}

uint64_t *re::ecs2::allocInfo_PhysicsJointDefinitionAndRuntimeCollection(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254111790);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254111790))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541117F0, 0);
    *(uint64_t *)((char *)&qword_254111800 + 6) = 0;
    qword_254111800 = 0;
    qword_254111810 = 0;
    qword_254111818 = 0xFFFFFFFFLL;
    qword_2541117F0 = (uint64_t)&off_24ED7DAA8;
    qword_254111820 = (uint64_t)"PhysicsJointDefinitionAndRuntimeCollection";
    dword_254111828 = 0;
    xmmword_254111830 = 0u;
    unk_254111840 = 0u;
    xmmword_254111850 = 0u;
    qword_254111860 = 0;
    __cxa_guard_release(&qword_254111790);
  }
  return &qword_2541117F0;
}

void re::ecs2::initInfo_PhysicsJointDefinitionAndRuntimeCollection(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  re::IntrospectionRegistry *v11;
  const re::IntrospectionBase *v12;
  const char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  const re::IntrospectionBase *v19;
  void *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26[2];
  __int128 v27;
  uint64_t v28;
  _QWORD v29[60];

  v28 = 0x6B0B6CA5207AC9EALL;
  v29[0] = "PhysicsJointDefinitionAndRuntimeCollection";
  re::StringID::destroyString((re::StringID *)&v28);
  *((_OWORD *)this + 2) = v23;
  v4 = atomic_load((unsigned __int8 *)&qword_254111788);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254111788);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = atomic_load((unsigned __int8 *)&qword_254111798);
      if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_254111798))
      {
        ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541117B0, 0);
        *(uint64_t *)((char *)&qword_2541117C0 + 6) = 0;
        qword_2541117C0 = 0;
        *(_QWORD *)&xmmword_2541117D0 = 0;
        *((_QWORD *)&xmmword_2541117D0 + 1) = 0xFFFFFFFFLL;
        qword_2541117B0 = (uint64_t)&off_24ED1FA08;
        qword_2541117E8 = 0;
        re::SerializedReference<re::IntrospectionBase const*>::reset(&qword_2541117E0);
        qword_2541117B0 = (uint64_t)&off_24ED689C0;
        __cxa_guard_release(&qword_254111798);
      }
      if ((_MergedGlobals_282 & 1) == 0)
      {
        v8 = re::ecs2::introspect_PhysicsJointDefinition((re::IntrospectionBase **)1);
        if ((_MergedGlobals_282 & 1) == 0)
        {
          v9 = v8;
          _MergedGlobals_282 = 1;
          v10 = *(_DWORD *)(v8 + 24);
          ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541117B0, 0);
          qword_2541117C0 = 0x2800000003;
          dword_2541117C8 = v10;
          word_2541117CC = 0;
          *(_QWORD *)&xmmword_2541117D0 = 0;
          *((_QWORD *)&xmmword_2541117D0 + 1) = 0xFFFFFFFFLL;
          qword_2541117E0 = v9;
          qword_2541117E8 = 0;
          qword_2541117B0 = (uint64_t)&off_24ED689C0;
          re::IntrospectionRegistry::add(v11, v12);
          re::getPrettyTypeName((re *)&qword_2541117B0, (const re::IntrospectionBase *)&v28);
          if ((v29[0] & 1) != 0)
            v13 = (const char *)v29[1];
          else
            v13 = (char *)v29 + 1;
          if (v28 && (v29[0] & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v28 + 40))();
          v25 = *(_OWORD *)(v9 + 32);
          v14 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v26);
          if (v14)
          {
            v15 = *v14;
            *((_QWORD *)&v24 + 1) = v15;
          }
          else
          {
            v27 = v25;
            re::TypeBuilder::beginListType((uint64_t)&v28, v26, 1, 0x28uLL, 8uLL, &v27);
            re::TypeBuilder::setConstructor((uint64_t)&v28, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
            re::TypeBuilder::setDestructor((uint64_t)&v28, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
            re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v28, 1);
            re::TypeBuilder::setListAccessors((uint64_t)&v28, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIndexer((uint64_t)&v28, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
            re::TypeBuilder::setListIterator((uint64_t)&v28, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
            re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v28, v16);
          }
          xmmword_2541117D0 = v24;
          re::StringID::destroyString((re::StringID *)v26);
        }
      }
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "m_joints";
      *(_QWORD *)(v17 + 16) = &qword_2541117B0;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x800000001;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_2541117A0 = v17;
      v18 = re::introspectionAllocator((re *)v17);
      v20 = re::introspect_uint64_t((re *)1, v19);
      v21 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 72, 8);
      *(_DWORD *)v21 = 1;
      *(_QWORD *)(v21 + 8) = "m_guid";
      *(_QWORD *)(v21 + 16) = v20;
      *(_QWORD *)(v21 + 24) = 0;
      *(_QWORD *)(v21 + 32) = 0x5800000002;
      *(_DWORD *)(v21 + 40) = 0;
      *(_QWORD *)(v21 + 48) = 0;
      *(_QWORD *)(v21 + 56) = 0;
      *(_DWORD *)(v21 + 64) = 0;
      qword_2541117A8 = v21;
      __cxa_guard_release(&qword_254111788);
    }
  }
  *((_QWORD *)this + 2) = 0x6800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2541117A0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::PhysicsJointDefinitionAndRuntimeCollection>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::PhysicsJointDefinitionAndRuntimeCollection>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::PhysicsJointDefinitionAndRuntimeCollection>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::PhysicsJointDefinitionAndRuntimeCollection>;
  re::IntrospectionRegistry::add(this, v3);
  v22 = v23;
}

double re::internal::defaultConstruct<re::ecs2::PhysicsJointDefinitionAndRuntimeCollection>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)a3 = &off_24ED68990;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  result = 0.0;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_DWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::PhysicsJointDefinitionAndRuntimeCollection>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::PhysicsJointDefinitionAndRuntimeCollection>(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_24ED68990;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::PhysicsJointDefinitionAndRuntimeCollection>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_PhysicsJointDefinitionAndRuntimeCollection(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"PhysicsJointDefinitionAndRuntimeCollection", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_PhysicsJointDefinitionAndRuntimeCollection, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_PhysicsJointDefinitionAndRuntimeCollection, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::PhysicsJointDefinitionAndRuntimeCollection>, this);
}

uint64_t re::DynamicArray<re::ecs2::PhysicsJointDefinition>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id *v6;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 240 * v4;
        v6 = (id *)(v3 + 96);
        do
        {
          re::ecs2::PinHandle::~PinHandle(v6);
          re::ecs2::PinHandle::~PinHandle(v6 - 10);
          v6 += 30;
          v5 -= 240;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

_QWORD *re::DynamicArray<re::ecs2::PhysicsJointDefinition>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::ecs2::PhysicsJointDefinition>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::PhysicsJointDefinition>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::DynamicArray<re::ecs2::PhysicsJointDefinition>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::PhysicsJointDefinition>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xF0uLL))
        {
          v2 = 240 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 240 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 240, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = v8 + 240 * v9;
        do
        {
          v12 = &v7[v10 / 8];
          v13 = v8 + v10;
          LODWORD(v7[v10 / 8]) = *(_DWORD *)(v8 + v10);
          re::ecs2::EntityHandle::EntityHandle((id *)&v7[v10 / 8 + 2], (const re::ecs2::EntityHandle *)(v8 + v10 + 16));
          re::StringID::StringID((re::StringID *)&v7[v10 / 8 + 5], (const StringID *)(v8 + v10 + 40));
          v14 = *(_OWORD *)(v8 + v10 + 80);
          v12[4] = *(_OWORD *)(v8 + v10 + 64);
          v12[5] = v14;
          re::ecs2::EntityHandle::EntityHandle((id *)&v7[v10 / 8 + 12], (const re::ecs2::EntityHandle *)(v8 + v10 + 96));
          re::StringID::StringID((re::StringID *)&v7[v10 / 8 + 15], (const StringID *)(v8 + v10 + 120));
          v15 = *(_OWORD *)(v8 + v10 + 160);
          v12[9] = *(_OWORD *)(v8 + v10 + 144);
          v12[10] = v15;
          v16 = *(_OWORD *)(v8 + v10 + 176);
          v17 = *(_OWORD *)(v8 + v10 + 192);
          v18 = *(_OWORD *)(v8 + v10 + 208);
          *(_OWORD *)((char *)v12 + 220) = *(_OWORD *)(v8 + v10 + 220);
          v12[12] = v17;
          v12[13] = v18;
          v12[11] = v16;
          re::ecs2::PinHandle::~PinHandle((id *)(v8 + v10 + 96));
          re::ecs2::PinHandle::~PinHandle((id *)(v8 + v10 + 16));
          v10 += 240;
        }
        while (v13 + 240 != v11);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::PhysicsJointDefinition>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::PhysicsJointDefinition>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::PhysicsJointDefinition>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::PhysicsJointDefinition>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::PhysicsJointDefinition>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::PhysicsJointDefinition>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::ecs2::PhysicsJointDefinition>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::ecs2::PhysicsJointDefinition>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

void re::IntrospectionDynamicArray<re::ecs2::PhysicsJointDefinition>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<re::ecs2::PhysicsJointDefinition>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<re::ecs2::PhysicsJointDefinition>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<re::ecs2::PhysicsJointDefinition>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::PhysicsJointDefinition>::addElement(uint64_t a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  re::IntrospectionBase *v15;
  id v17;
  id v18[3];
  _QWORD v19[7];
  id v20[3];
  _QWORD v21[11];
  _OWORD v22[2];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  re::ecs2::PhysicsJointDefinition::PhysicsJointDefinition(&v17);
  v8 = *(_QWORD *)(a4 + 16);
  if (v8 >= *(_QWORD *)(a4 + 8))
  {
    re::DynamicArray<re::ecs2::PhysicsJointDefinition>::growCapacity((_QWORD *)a4, v8 + 1);
    v8 = *(_QWORD *)(a4 + 16);
  }
  v9 = *(_QWORD *)(a4 + 32) + 240 * v8;
  *(_DWORD *)v9 = (_DWORD)v17;
  re::ecs2::EntityHandle::EntityHandle((id *)(v9 + 16), (const re::ecs2::EntityHandle *)v18);
  re::StringID::StringID((re::StringID *)(v9 + 40), (const StringID *)v19);
  v10 = *(_OWORD *)&v19[5];
  *(_OWORD *)(v9 + 64) = *(_OWORD *)&v19[3];
  *(_OWORD *)(v9 + 80) = v10;
  re::ecs2::EntityHandle::EntityHandle((id *)(v9 + 96), (const re::ecs2::EntityHandle *)v20);
  re::StringID::StringID((re::StringID *)(v9 + 120), (const StringID *)v21);
  v11 = *(_OWORD *)&v21[5];
  *(_OWORD *)(v9 + 144) = *(_OWORD *)&v21[3];
  *(_OWORD *)(v9 + 160) = v11;
  v12 = *(_OWORD *)&v21[7];
  v13 = *(_OWORD *)&v21[9];
  v14 = v22[0];
  *(_OWORD *)(v9 + 220) = *(_OWORD *)((char *)v22 + 12);
  *(_OWORD *)(v9 + 192) = v13;
  *(_OWORD *)(v9 + 208) = v14;
  *(_OWORD *)(v9 + 176) = v12;
  ++*(_QWORD *)(a4 + 16);
  ++*(_DWORD *)(a4 + 24);
  re::ecs2::PinHandle::~PinHandle(v20);
  re::ecs2::PinHandle::~PinHandle(v18);
  v15 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 240 * *(_QWORD *)(a4 + 16) - 240);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v15);
  return v15;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::PhysicsJointDefinition>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::PhysicsJointDefinition>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 240 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 240 * a3;
}

void re::DynamicArray<re::ecs2::PhysicsJointDefinition>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return;
    v7 = 240 * a2 + 96;
    v8 = a2;
    do
    {
      re::ecs2::PinHandle::~PinHandle((id *)(*(_QWORD *)(a1 + 32) + v7));
      re::ecs2::PinHandle::~PinHandle((id *)(v9 - 80));
      ++v8;
      v7 += 240;
    }
    while (v8 < *(_QWORD *)(a1 + 16));
  }
  else
  {
    if (*(_QWORD *)(a1 + 8) < a2)
    {
      re::DynamicArray<re::ecs2::PhysicsJointDefinition>::setCapacity((_QWORD *)a1, a2);
      v4 = *(_QWORD *)(a1 + 16);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 240 * v4;
      do
      {
        re::ecs2::PhysicsJointDefinition::PhysicsJointDefinition((id *)(*(_QWORD *)(a1 + 32) + v6));
        v6 += 240;
        --v5;
      }
      while (v5);
    }
  }
  *(_QWORD *)(a1 + 16) = a2;
  ++*(_DWORD *)(a1 + 24);
}

id *re::ecs2::PhysicsJointDefinition::PhysicsJointDefinition(id *this)
{
  id *v2;
  uint64_t i;

  *(_DWORD *)this = 0;
  v2 = this + 2;
  objc_initWeak(this + 2, 0);
  this[3] = 0;
  this[4] = 0;
  re::ecs2::EntityHandle::reset(v2);
  this[5] = 0;
  this[6] = &str_110;
  this[8] = 0;
  this[9] = 0;
  this[10] = 0;
  this[11] = (id)0x3F80000000000000;
  objc_initWeak(this + 12, 0);
  this[13] = 0;
  this[14] = 0;
  re::ecs2::EntityHandle::reset(this + 12);
  this[15] = 0;
  this[16] = &str_110;
  this[18] = 0;
  this[19] = 0;
  this[20] = 0;
  this[21] = (id)0x3F80000000000000;
  *((_BYTE *)this + 176) = 0;
  for (i = 180; i != 204; i += 8)
    *(id *)((char *)this + i) = (id)0xBF8000003F800000;
  do
  {
    *(id *)((char *)this + i) = (id)0xBF8000003F800000;
    i += 8;
  }
  while (i != 228);
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::ecs2::PhysicsJointDefinition>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  id *v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _BYTE v15[32];
  _BYTE v16[8];
  uint64_t v17;

  if (*(re::Allocator **)a1 == a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v8)
    {
      v9 = 240 * v8;
      v10 = (id *)(*(_QWORD *)(a1 + 32) + 96);
      do
      {
        re::ecs2::PinHandle::~PinHandle(v10);
        re::ecs2::PinHandle::~PinHandle(v10 - 10);
        v10 += 30;
        v9 -= 240;
      }
      while (v9);
    }
  }
  else
  {
    re::DynamicArray<re::ecs2::PhysicsJointDefinition>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::ecs2::PhysicsJointDefinition>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<re::ecs2::PhysicsJointDefinition>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v16);
    re::TypeInfo::TypeInfo((uint64_t)v15, (uint64_t)&v17);
    v12 = *(_QWORD *)(a1 + 16);
    if (v12)
    {
      v13 = *(char **)(a1 + 32);
      v14 = 240 * v12;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v15, v13, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v15, (void **)v13, a3, 0);
        v13 += 240;
        v14 -= 240;
      }
      while (v14);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 240 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 240 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::PhysicsJointDefinition>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

uint64_t *re::ecs2::allocInfo_SceneUnderstandingMeshSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_283);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_283))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254111870, 0);
    *(uint64_t *)((char *)&qword_254111880 + 6) = 0;
    qword_254111880 = 0;
    qword_254111890 = 0;
    qword_254111898 = 0xFFFFFFFFLL;
    qword_254111870 = (uint64_t)&off_24ED7DAA8;
    qword_2541118A0 = (uint64_t)"SceneUnderstandingMeshSystem";
    dword_2541118A8 = 0;
    unk_2541118B0 = 0u;
    unk_2541118C0 = 0u;
    unk_2541118D0 = 0u;
    qword_2541118E0 = 0;
    __cxa_guard_release(&_MergedGlobals_283);
  }
  return &qword_254111870;
}

void re::ecs2::initInfo_SceneUnderstandingMeshSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x3CF52F60DF61D568;
  v5[1] = "SceneUnderstandingMeshSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xA800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_SceneUnderstandingMeshSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::SceneUnderstandingMeshSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::SceneUnderstandingMeshSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::SceneUnderstandingMeshSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::SceneUnderstandingMeshSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::SceneUnderstandingMeshSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::SceneUnderstandingMeshSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::SceneUnderstandingMeshSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  *(_QWORD *)(a3 + 160) = 0;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::ecs2::System::System(a3, 1, 1);
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)v3 = &off_24ED68A58;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::SceneUnderstandingMeshSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::SceneUnderstandingMeshSystem>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::ecs2::System::System(a1, 1, 1);
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)v1 = &off_24ED68A58;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::SceneUnderstandingMeshSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_SceneUnderstandingMeshSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneUnderstandingMeshSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneUnderstandingMeshSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneUnderstandingMeshSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SceneUnderstandingMeshSystem>, this);
}

uint64_t re::ecs2::SceneUnderstandingMeshSystem::willAddSystemToECSService(re::ecs2::SceneUnderstandingMeshSystem *this)
{
  uint64_t v2;
  uint64_t result;

  re::ecs2::RenderingSubsystem::willAddSystemToECSService(this);
  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::SceneUnderstandingService>(v2);
  *((_QWORD *)this + 20) = result;
  return result;
}

uint64_t re::ServiceLocator::serviceOrNull<re::SceneUnderstandingService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::SceneUnderstandingService>(void)::info = re::introspect_SceneUnderstandingService(0);
  }
  v3 = re::introspect<re::SceneUnderstandingService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

double re::ecs2::SceneUnderstandingMeshSystem::willRemoveSystemFromECSService(re::ecs2::SceneUnderstandingMeshSystem *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void re::ecs2::SceneUnderstandingMeshSystem::updateScenes(re::ProfilerConfig *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  re *isStatisticCollectionEnabled;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t (**v23)(uint64_t, _QWORD, _QWORD, void *, void *);
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64x2_t *v33;
  char *v34;
  char *v35;
  int64x2_t v36;
  uint64_t v37;
  uint64_t v38;
  re *v39;
  uint64_t v40;
  __int128 v41;
  int64x2_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[17];
  char v46;
  __int16 v47;
  char v48;
  char v49;
  char v50;
  BOOL v51;
  _QWORD v52[2];
  _BYTE v53[16];
  void *v54;
  uint64_t v55;
  char v56;
  id v57[2];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _OWORD v66[2];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _OWORD v75[2];
  _BYTE v76[12];
  __int16 v77;
  int v78;
  __int16 v79;
  __guard *v80;
  __int16 v81;
  unint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;

  v3 = (uint64_t)a1;
  v88 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a1 + 13);
  if (!v4 || (*(_BYTE *)(v4 + 424) & 0x10) != 0)
  {
    if (*((_QWORD *)a1 + 20))
    {
      v5 = *(_QWORD *)(a2 + 8);
      if (v5)
      {
        v6 = *(uint64_t **)a2;
        v7 = 8 * v5;
        v42 = vdupq_n_s64(1uLL);
        v9 = &unk_255829000;
        while (1)
        {
          v10 = *v6;
          isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(a1);
          if ((_DWORD)isStatisticCollectionEnabled)
          {
            v12 = re::profilerThreadContext(isStatisticCollectionEnabled);
            if (*(_QWORD *)(v12 + 152))
              v43 = mach_absolute_time();
          }
          else
          {
            v12 = 0;
          }
          re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v53, 3093, v3);
          v14 = *(_QWORD *)(v3 + 112);
          if (!v14)
            break;
          v15 = *(_QWORD *)(v14 + 104);
          if (v15)
            v2 = re::RenderFrameBox::get(v15 + 344, 0xFFFFFFFFFFFFFFFuLL);
          else
            v2 = 0;
          re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot((re::ecs2::RenderingSubsystem *)v10, 0, (re::DynamicString **)v2, v52);
          v16 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v10 + 200), *(const re::ecs2::ComponentTypeBase **)(v8 + 3208));
          if (v16 && *(_QWORD *)(v16 + 24))
          {
            v17 = v9[2200];
            v18 = **(_QWORD **)(v16 + 40);
            v46 = *(_BYTE *)(v18 + 25);
            v47 = *(_WORD *)(v18 + 26);
            v50 = v17;
            if (*(_BYTE *)(v18 + 30))
            {
              v19 = 1;
            }
            else
            {
              if (re::ecs2::ShadowHelper::forceEnableMeshProjectiveShadows(void)::onceToken != -1)
                dispatch_once(&re::ecs2::ShadowHelper::forceEnableMeshProjectiveShadows(void)::onceToken, &__block_literal_global_15);
              v19 = re::ecs2::ShadowHelper::forceEnableMeshProjectiveShadows(void)::g_forceEnableMeshProjectiveShadows != 0;
            }
            v51 = v19;
            re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v45, 7502, v3);
            v48 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 56))(*(_QWORD *)(v3 + 160));
            v49 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 160) + 72))(*(_QWORD *)(v3 + 160));
            v55 = v52[0] >> 1;
            v20 = re::RenderFrameData::stream((re::RenderFrameData *)(v2 + 264), (const re::WeakStringID *)&v55);
            (*(void (**)(_QWORD, char *))(**(_QWORD **)(v20 + 48) + 1008))(*(_QWORD *)(v20 + 48), &v46);
            (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v3 + 160) + 120))(&v55);
            v21 = v57[1];
            if (v56 && v57[0] && v57[1])
            {
              v44 = v52[0] >> 1;
              v22 = re::RenderFrameData::stream((re::RenderFrameData *)(v2 + 264), (const re::WeakStringID *)&v44);
              v23 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::tryGet(v22, (uint64_t *)&v54);
              if (!v23)
              {
                v37 = *(_QWORD *)(*(_QWORD *)(v22 + 48) + 8);
                v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v37 + 32))(v37, 56, 8);
                *(_QWORD *)v38 = 0;
                *(_QWORD *)(v38 + 8) = 0;
                *(_DWORD *)(v38 + 16) = 1;
                *(_QWORD *)(v38 + 32) = 0;
                *(_QWORD *)(v38 + 40) = 0;
                *(_QWORD *)(v38 + 24) = 0;
                *(_DWORD *)(v38 + 48) = 0;
                v39 = (re *)re::BucketArray<re::SceneUnderstandingGuidedFilterOcclusionData,4ul>::init(v38, v37, 1uLL);
                v40 = re::globalAllocators(v39)[2];
                *(_QWORD *)&v83 = &off_24ED68B30;
                *((_QWORD *)&v83 + 1) = v37;
                *((_QWORD *)&v84 + 1) = v40;
                *(_QWORD *)&v85 = &v83;
                *(_QWORD *)&v67 = std::__any_imp::_SmallHandler<re::BucketArray<re::SceneUnderstandingGuidedFilterOcclusionData,4ul> *>::__handle[abi:nn180100];
                *((_QWORD *)&v67 + 1) = v38;
                *((_QWORD *)&v70 + 1) = v40;
                *(_QWORD *)&v71 = 0;
                re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)&v69, (uint64_t)&v83);
                v23 = (uint64_t (**)(uint64_t, _QWORD, _QWORD, void *, void *))re::HashTable<std::type_index,re::RenderFrameDataArrayWrapper,re::Hash<std::type_index>,re::EqualTo<std::type_index>,true,false>::addNew(v22, (uint64_t *)&v54, (re *)&v67);
                if ((_QWORD)v71)
                {
                  *(_QWORD *)v76 = &v67;
                  (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)v71 + 16))(v71, v76);
                  if ((_QWORD)v71)
                  {
                    (**(void (***)(_QWORD))v71)(v71);
                    if ((__int128 *)v71 != &v69)
                      (*(void (**)(_QWORD))(**((_QWORD **)&v70 + 1) + 40))(*((_QWORD *)&v70 + 1));
                    *(_QWORD *)&v71 = 0;
                  }
                }
                if ((_QWORD)v67)
                  ((void (*)(_QWORD, __int128 *, _QWORD, _QWORD, _QWORD))v67)(0, &v67, 0, 0, 0);
                if ((_QWORD)v85)
                {
                  (**(void (***)(_QWORD))v85)(v85);
                  if ((__int128 *)v85 != &v83)
                    (*(void (**)(_QWORD))(**((_QWORD **)&v84 + 1) + 40))(*((_QWORD *)&v84 + 1));
                }
              }
              v26 = *(_OWORD *)v57;
              v57[0] = 0;
              v57[1] = 0;
              v73 = v64;
              v74 = v65;
              v75[0] = v66[0];
              *(_OWORD *)((char *)v75 + 10) = *(_OWORD *)((char *)v66 + 10);
              v69 = v60;
              v70 = v61;
              v71 = v62;
              v72 = v63;
              v27 = *(_QWORD *)(v25 + 40);
              v67 = v58;
              v68 = v59;
              v2 = *(_QWORD *)(v25 + 8);
              v28 = v56;
              if (v27 + 1 > 4 * v2)
              {
                v41 = v26;
                re::BucketArray<re::SceneUnderstandingGuidedFilterOcclusionData,4ul>::setBucketsCapacity((_QWORD *)v25, (v27 + 4) >> 2);
                v26 = v41;
                v2 = *(_QWORD *)(v25 + 8);
              }
              v8 = v27 >> 2;
              if (v2 <= v27 >> 2)
                goto LABEL_60;
              if ((*(_BYTE *)(v25 + 16) & 1) != 0)
                v29 = v25 + 24;
              else
                v29 = *(_QWORD *)(v25 + 32);
              v30 = *(_QWORD *)(v29 + 8 * v8);
              ++*(_QWORD *)(v25 + 40);
              ++*(_DWORD *)(v25 + 48);
              v31 = v30 + 192 * (v27 & 3);
              *(_QWORD *)v31 = &off_24ED68B88;
              *(_BYTE *)(v31 + 8) = v28;
              *(_OWORD *)(v31 + 16) = v26;
              *(_OWORD *)(v31 + 128) = v73;
              *(_OWORD *)(v31 + 144) = v74;
              *(_OWORD *)(v31 + 160) = v75[0];
              *(_OWORD *)(v31 + 170) = *(_OWORD *)((char *)v75 + 10);
              *(_OWORD *)(v31 + 64) = v69;
              *(_OWORD *)(v31 + 80) = v70;
              *(_OWORD *)(v31 + 96) = v71;
              *(_OWORD *)(v31 + 112) = v72;
              *(_OWORD *)(v31 + 32) = v67;
              *(_OWORD *)(v31 + 48) = v68;
              v32 = *(_QWORD *)(v25 + 40);
              if (!v32)
                goto LABEL_61;
              re::BucketArray<re::SceneUnderstandingGuidedFilterOcclusionData,4ul>::operator[](v25, v32 - 1);
              v21 = v57[1];
              v8 = 0x255801000;
              v9 = (_BYTE *)&unk_255829000;
            }
            if (v21)
            {

              v57[1] = 0;
            }
            if (v57[0])

            re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v45);
          }
          re::StringID::destroyString((re::StringID *)v52);
          re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v53);
          if (v12)
          {
            if (*(_QWORD *)(v12 + 152))
            {
              a1 = (re::ProfilerConfig *)mach_absolute_time();
              v33 = *(int64x2_t **)(v12 + 152);
              if (v33)
              {
                v34 = (char *)v33[520].i64[0];
                if (v34 >= (char *)a1 - v43)
                  v34 = (char *)a1 - v43;
                v33[520].i64[0] = (uint64_t)v34;
                v35 = (char *)v33[520].i64[1];
                if (v35 <= (char *)a1 - v43)
                  v35 = (char *)a1 - v43;
                v33[520].i64[1] = (uint64_t)v35;
                v36.i64[1] = v42.i64[1];
                v36.i64[0] = (uint64_t)a1 - v43;
                v33[521] = vaddq_s64(v33[521], v36);
                *(_BYTE *)(v12 + 184) = 0;
              }
            }
          }
          ++v6;
          v7 -= 8;
          if (!v7)
            return;
        }
        re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateSceneInternal", 61);
        _os_crash();
        __break(1u);
LABEL_60:
        v54 = 0;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v83 = 0u;
        os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
        *(_DWORD *)v76 = 136315906;
        *(_QWORD *)&v76[4] = "operator[]";
        v77 = 1024;
        v78 = 858;
        v79 = 2048;
        v80 = (__guard *)v8;
        v81 = 2048;
        v82 = v2;
        _os_log_send_and_compose_impl();
        _os_crash_msg();
        __break(1u);
LABEL_61:
        re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
        _os_crash();
        __break(1u);
      }
    }
  }
}

void re::SceneUnderstandingGuidedFilterOcclusionData::~SceneUnderstandingGuidedFilterOcclusionData(re::SceneUnderstandingGuidedFilterOcclusionData *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {

    *((_QWORD *)this + 3) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {

    *((_QWORD *)this + 2) = 0;
  }
}

{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {

    *((_QWORD *)this + 3) = 0;
  }
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {

    *((_QWORD *)this + 2) = 0;
  }
  JUMPOUT(0x2276933B8);
}

void re::ecs2::SceneUnderstandingMeshSystem::~SceneUnderstandingMeshSystem(re::ecs2::SceneUnderstandingMeshSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::SceneUnderstandingMeshSystem::typeInfo(re::ecs2::SceneUnderstandingMeshSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"SceneUnderstandingMeshSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_SceneUnderstandingMeshSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_SceneUnderstandingMeshSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::SceneUnderstandingMeshSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::SceneUnderstandingMeshSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::SceneUnderstandingMeshSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

_QWORD *re::BucketArray<re::SceneUnderstandingGuidedFilterOcclusionData,4ul>::init(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)a1 = a2;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity((_QWORD *)a1, a3);
  *(_DWORD *)(a1 + 16) += 2;
  *(_QWORD *)(a1 + 40) = 0;
  result = re::BucketArray<re::SceneUnderstandingGuidedFilterOcclusionData,4ul>::setBucketsCapacity((_QWORD *)a1, a3);
  ++*(_DWORD *)(a1 + 48);
  return result;
}

_QWORD *re::BucketArray<re::SceneUnderstandingGuidedFilterOcclusionData,4ul>::setBucketsCapacity(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t *v5;
  _QWORD *v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;

  v3 = result;
  if (*result)
  {
    if (result[5] < 4 * a2)
    {
      while (1)
      {
        v4 = v3[1];
        if (v4 <= a2)
          break;
        result = (_QWORD *)re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket(v3);
      }
      if (v4 < a2)
      {
        v5 = v3 + 3;
        do
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v3 + 32))(*v3, 768, 0);
          v6 = result;
          if (*v3)
          {
            v7 = v3[1];
            v8 = *((_DWORD *)v3 + 4);
            if ((v8 & 1) == 0)
            {
              v9 = *v5;
              v11 = v7 >= *v5;
              v10 = v7 + 1;
              v11 = !v11 || v9 >= v10;
              if (v11)
                goto LABEL_22;
              v12 = 2 * v9;
              goto LABEL_18;
            }
            v10 = v7 + 1;
            if (v10 >= 3)
            {
              v12 = 4;
LABEL_18:
              if (v12 <= v10)
                v14 = v10;
              else
                v14 = v12;
              result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v14);
              v8 = *((_DWORD *)v3 + 4);
            }
          }
          else
          {
            v13 = v3[1] + 1;
            result = re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v13);
            v8 = *((_DWORD *)v3 + 4) + 2;
            *((_DWORD *)v3 + 4) = v8;
          }
LABEL_22:
          v15 = v3 + 3;
          if ((v8 & 1) == 0)
            v15 = (_QWORD *)v3[4];
          v16 = v3[1];
          v15[v16++] = v6;
          v3[1] = v16;
          *((_DWORD *)v3 + 4) += 2;
        }
        while (v16 < a2);
      }
    }
  }
  else
  {
  }
  return result;
}

void std::__any_imp::_SmallHandler<re::BucketArray<re::SceneUnderstandingGuidedFilterOcclusionData,4ul> *>::__handle[abi:nn180100](int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_22576694C()
{
  _QWORD *v0;
  uint64_t result;

  result = 0;
  *v0 = 0;
  return result;
}

void re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::SceneUnderstandingGuidedFilterOcclusionData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::~Callable()
{
  JUMPOUT(0x2276933B8);
}

uint64_t *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::SceneUnderstandingGuidedFilterOcclusionData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::operator()(uint64_t a1, uint64_t (***a2)(uint64_t))
{
  uint64_t v2;
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v7;
  void *v8;
  void *v9;

  v2 = *(_QWORD *)(a1 + 8);
  result = (uint64_t *)(**a2)(3);
  v4 = *result;
  if (*result)
  {
    v5 = *(_QWORD *)(v4 + 40);
    if (v5)
    {
      for (i = 0; i != v5; ++i)
      {
        v7 = re::BucketArray<re::SceneUnderstandingGuidedFilterOcclusionData,4ul>::operator[](v4, i);
        v8 = *(void **)(v7 + 24);
        if (v8)
        {

          *(_QWORD *)(v7 + 24) = 0;
        }
        v9 = *(void **)(v7 + 16);
        if (v9)
        {

          *(_QWORD *)(v7 + 16) = 0;
        }
      }
    }
    while (*(_QWORD *)(v4 + 8))
      re::BucketArray<re::CollisionCastHit,10ul>::freeElementBucket((uint64_t *)v4);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    *(_QWORD *)(v4 + 40) = 0;
    ++*(_DWORD *)(v4 + 48);
    re::DynamicOverflowArray<re::CollisionCastHit *,2ul>::deinit(v4);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, v4);
  }
  return result;
}

_QWORD *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::SceneUnderstandingGuidedFilterOcclusionData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::cloneInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED68B30;
  a2[1] = v2;
  return a2;
}

_QWORD *re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::SceneUnderstandingGuidedFilterOcclusionData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::moveInto(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24ED68B30;
  a2[1] = v2;
  return a2;
}

uint64_t re::internal::Callable<re::RenderFrameDataArrayWrapper & re::RenderFrameDataStream::getOrAddDataArrayWrapper<re::SceneUnderstandingGuidedFilterOcclusionData>(void)::{lambda(re::RenderFrameDataArrayWrapper*)#1},void ()(re::RenderFrameDataArrayWrapper*)>::size()
{
  return 16;
}

uint64_t re::BucketArray<re::SceneUnderstandingGuidedFilterOcclusionData,4ul>::operator[](uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2 <= a2)
  {
    re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Index out of range. index = %zu, size = %zu", "index < m_size", "operator[]", 1011, a2, v2);
    _os_crash();
    __break(1u);
LABEL_8:
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if (*(_QWORD *)(a1 + 8) <= a2 >> 2)
    goto LABEL_8;
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    v3 = a1 + 24;
  else
    v3 = *(_QWORD *)(a1 + 32);
  return *(_QWORD *)(v3 + 8 * (a2 >> 2)) + 192 * (a2 & 3);
}

uint64_t *re::allocInfo_ShadowService(re *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_284);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_284))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541118F0, 0);
    *(uint64_t *)((char *)&qword_254111900 + 6) = 0;
    qword_254111900 = 0;
    qword_254111910 = 0;
    qword_254111918 = 0xFFFFFFFFLL;
    qword_2541118F0 = (uint64_t)&off_24ED7DAA8;
    qword_254111920 = (uint64_t)"ShadowService";
    dword_254111928 = 0;
    unk_254111930 = 0u;
    unk_254111940 = 0u;
    unk_254111950 = 0u;
    qword_254111960 = 0;
    __cxa_guard_release(&_MergedGlobals_284);
  }
  return &qword_2541118F0;
}

void re::initInfo_ShadowService(re *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x622CD9D971A522AALL;
  v5[1] = "ShadowService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::initInfo_ShadowService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::introspect_ShadowService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ShadowService", (uint64_t (*)(re::internal *))re::allocInfo_ShadowService, (re::IntrospectionBase *(*)(void))re::initInfo_ShadowService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ShadowService>, this);
}

uint64_t *re::ecs2::allocInfo_AccessibilityComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254111970);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254111970))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254111A78, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254111A88 = 0;
    qword_254111A98 = 0;
    qword_254111AA0 = 0xFFFFFFFFLL;
    qword_254111A78 = (uint64_t)&off_24ED7DAA8;
    qword_254111AA8 = (uint64_t)"AccessibilityComponent";
    dword_254111AB0 = 0;
    xmmword_254111AB8 = 0u;
    unk_254111AC8 = 0u;
    xmmword_254111AD8 = 0u;
    qword_254111AE8 = 0;
    __cxa_guard_release(&qword_254111970);
  }
  return &qword_254111A78;
}

void re::ecs2::initInfo_AccessibilityComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  const re::IntrospectionBase *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  const re::IntrospectionBase *v36;
  void *v37;
  uint64_t v38;
  uint64_t *v39;
  const re::IntrospectionBase *v40;
  uint64_t v41;
  uint64_t *v42;
  const re::IntrospectionBase *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  const re::IntrospectionBase *v47;
  void *v48;
  uint64_t v49;
  uint64_t *v50;
  const re::IntrospectionBase *v51;
  uint64_t *v52;
  uint64_t v53;
  __int128 v54;
  _QWORD v55[2];
  __int128 v56;

  v55[0] = 0xA4CC9857620F7EDELL;
  v55[1] = "AccessibilityComponent";
  re::StringID::destroyString((re::StringID *)v55);
  *((_OWORD *)this + 2) = v56;
  v4 = atomic_load((unsigned __int8 *)&qword_254111978);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254111978);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254111A10 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_BOOL((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "isRoot";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1900000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254111A18 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_BOOL((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "isEnabled";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x1A00000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254111A20 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "identifier";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x2000000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254111A28 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "label";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x4800000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_254111A30 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "description";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x7000000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_254111A38 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      re::IntrospectionInfo<re::DynamicArray<re::ecs2::accessibility::CustomContent>>::get();
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = "customContent";
      *(_QWORD *)(v30 + 16) = &qword_254111990;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0x9800000006;
      *(_DWORD *)(v30 + 40) = 0;
      *(_QWORD *)(v30 + 48) = 0;
      *(_QWORD *)(v30 + 56) = 0;
      *(_DWORD *)(v30 + 64) = 0;
      qword_254111A40 = v30;
      v31 = re::introspectionAllocator((re *)v30);
      v33 = re::IntrospectionInfo<re::Optional<re::DynamicString>>::get(1, v32);
      v34 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v31 + 32))(v31, 72, 8);
      *(_DWORD *)v34 = 1;
      *(_QWORD *)(v34 + 8) = "value";
      *(_QWORD *)(v34 + 16) = v33;
      *(_QWORD *)(v34 + 24) = 0;
      *(_QWORD *)(v34 + 32) = 0xC000000007;
      *(_DWORD *)(v34 + 40) = 0;
      *(_QWORD *)(v34 + 48) = 0;
      *(_QWORD *)(v34 + 56) = 0;
      *(_DWORD *)(v34 + 64) = 0;
      qword_254111A48 = v34;
      v35 = re::introspectionAllocator((re *)v34);
      v37 = re::introspect_uint64_t((re *)1, v36);
      v38 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v35 + 32))(v35, 72, 8);
      *(_DWORD *)v38 = 1;
      *(_QWORD *)(v38 + 8) = "traits";
      *(_QWORD *)(v38 + 16) = v37;
      *(_QWORD *)(v38 + 24) = 0;
      *(_QWORD *)(v38 + 32) = 0xE800000008;
      *(_DWORD *)(v38 + 40) = 0;
      *(_QWORD *)(v38 + 48) = 0;
      *(_QWORD *)(v38 + 56) = 0;
      *(_DWORD *)(v38 + 64) = 0;
      qword_254111A50 = v38;
      v39 = re::introspectionAllocator((re *)v38);
      re::IntrospectionInfo<re::DynamicArray<long>>::get((uint64_t)v39, v40);
      v41 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v39 + 32))(v39, 72, 8);
      *(_DWORD *)v41 = 1;
      *(_QWORD *)(v41 + 8) = "systemRotors";
      *(_QWORD *)(v41 + 16) = qword_2541119D0;
      *(_QWORD *)(v41 + 24) = 0;
      *(_QWORD *)(v41 + 32) = 0xF000000009;
      *(_DWORD *)(v41 + 40) = 0;
      *(_QWORD *)(v41 + 48) = 0;
      *(_QWORD *)(v41 + 56) = 0;
      *(_DWORD *)(v41 + 64) = 0;
      qword_254111A58 = v41;
      v42 = re::introspectionAllocator((re *)v41);
      v44 = re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(1, v43);
      v45 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v42 + 32))(v42, 72, 8);
      *(_DWORD *)v45 = 1;
      *(_QWORD *)(v45 + 8) = "customRotors";
      *(_QWORD *)(v45 + 16) = v44;
      *(_QWORD *)(v45 + 24) = 0;
      *(_QWORD *)(v45 + 32) = 0x1180000000ALL;
      *(_DWORD *)(v45 + 40) = 0;
      *(_QWORD *)(v45 + 48) = 0;
      *(_QWORD *)(v45 + 56) = 0;
      *(_DWORD *)(v45 + 64) = 0;
      qword_254111A60 = v45;
      v46 = re::introspectionAllocator((re *)v45);
      v48 = re::introspect_uint64_t((re *)1, v47);
      v49 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v46 + 32))(v46, 72, 8);
      *(_DWORD *)v49 = 1;
      *(_QWORD *)(v49 + 8) = "systemActions";
      *(_QWORD *)(v49 + 16) = v48;
      *(_QWORD *)(v49 + 24) = 0;
      *(_QWORD *)(v49 + 32) = 0x1400000000BLL;
      *(_DWORD *)(v49 + 40) = 0;
      *(_QWORD *)(v49 + 48) = 0;
      *(_QWORD *)(v49 + 56) = 0;
      *(_DWORD *)(v49 + 64) = 0;
      qword_254111A68 = v49;
      v50 = re::introspectionAllocator((re *)v49);
      v52 = re::IntrospectionInfo<re::DynamicArray<re::DynamicString>>::get(1, v51);
      v53 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v50 + 32))(v50, 72, 8);
      *(_DWORD *)v53 = 1;
      *(_QWORD *)(v53 + 8) = "customActions";
      *(_QWORD *)(v53 + 16) = v52;
      *(_QWORD *)(v53 + 24) = 0;
      *(_QWORD *)(v53 + 32) = 0x1480000000CLL;
      *(_DWORD *)(v53 + 40) = 0;
      *(_QWORD *)(v53 + 48) = 0;
      *(_QWORD *)(v53 + 56) = 0;
      *(_DWORD *)(v53 + 64) = 0;
      qword_254111A70 = v53;
      __cxa_guard_release(&qword_254111978);
    }
  }
  *((_QWORD *)this + 2) = 0x17000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 13;
  *((_QWORD *)this + 8) = &qword_254111A10;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::AccessibilityComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::AccessibilityComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::AccessibilityComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::AccessibilityComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v54 = v56;
}

void re::IntrospectionInfo<re::DynamicArray<re::ecs2::accessibility::CustomContent>>::get()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  re::IntrospectionRegistry *v4;
  const re::IntrospectionBase *v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  _BYTE v16[479];

  v0 = atomic_load((unsigned __int8 *)&qword_254111980);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254111980))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_254111990);
    qword_254111990 = (uint64_t)&off_24ED68BB0;
    __cxa_guard_release(&qword_254111980);
  }
  if ((_MergedGlobals_285 & 1) == 0)
  {
    v1 = re::ecs2::accessibility::introspect_CustomContent((re::IntrospectionBase **)1);
    if ((_MergedGlobals_285 & 1) == 0)
    {
      v2 = v1;
      _MergedGlobals_285 = 1;
      v3 = *(_DWORD *)(v1 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254111990, 0);
      qword_2541119A0 = 0x2800000003;
      dword_2541119A8 = v3;
      word_2541119AC = 0;
      *(_QWORD *)&xmmword_2541119B0 = 0;
      *((_QWORD *)&xmmword_2541119B0 + 1) = 0xFFFFFFFFLL;
      qword_2541119C0 = v2;
      unk_2541119C8 = 0;
      qword_254111990 = (uint64_t)&off_24ED68BB0;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_254111990, (const re::IntrospectionBase *)&v14);
      if ((v15 & 1) != 0)
        v6 = *(const char **)&v16[7];
      else
        v6 = v16;
      if (v14 && (v15 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      v11 = *(_OWORD *)(v2 + 32);
      v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v12);
      if (v7)
      {
        v8 = *v7;
        *((_QWORD *)&v10 + 1) = v8;
      }
      else
      {
        v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_2541119B0 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::IntrospectionInfo<re::DynamicArray<long>>::get(uint64_t a1, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  _DWORD *v3;
  _DWORD *v4;
  int v5;
  re::IntrospectionRegistry *v6;
  const re::IntrospectionBase *v7;
  const char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14[2];
  __int128 v15;
  uint64_t v16;
  char v17;
  _BYTE v18[479];

  v2 = atomic_load((unsigned __int8 *)&qword_254111988);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254111988))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)qword_2541119D0);
    qword_2541119D0[0] = (uint64_t)&off_24ED68C48;
    __cxa_guard_release(&qword_254111988);
  }
  if ((byte_254111969 & 1) == 0)
  {
    v3 = re::introspect_long((re *)1, a2);
    if ((byte_254111969 & 1) == 0)
    {
      v4 = v3;
      byte_254111969 = 1;
      v5 = v3[6];
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)qword_2541119D0, 0);
      unk_2541119E0 = 0x2800000003;
      unk_2541119E8 = v5;
      unk_2541119EC = 0;
      *(_QWORD *)&xmmword_2541119F0 = 0;
      *((_QWORD *)&xmmword_2541119F0 + 1) = 0xFFFFFFFFLL;
      unk_254111A00 = v4;
      unk_254111A08 = 0;
      qword_2541119D0[0] = (uint64_t)&off_24ED68C48;
      re::IntrospectionRegistry::add(v6, v7);
      re::getPrettyTypeName((re *)qword_2541119D0, (const re::IntrospectionBase *)&v16);
      if ((v17 & 1) != 0)
        v8 = *(const char **)&v18[7];
      else
        v8 = v18;
      if (v16 && (v17 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v16 + 40))();
      v13 = *((_OWORD *)v4 + 2);
      v9 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v14);
      if (v9)
      {
        v10 = *v9;
        *((_QWORD *)&v12 + 1) = v10;
      }
      else
      {
        v15 = v13;
        re::TypeBuilder::beginListType((uint64_t)&v16, v14, 1, 0x28uLL, 8uLL, &v15);
        re::TypeBuilder::setConstructor((uint64_t)&v16, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v16, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v16, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v16, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v16, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v16, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v16, v11);
      }
      xmmword_2541119F0 = v12;
      re::StringID::destroyString((re::StringID *)v14);
    }
  }
}

double re::internal::defaultConstruct<re::ecs2::AccessibilityComponent>(uint64_t a1, uint64_t a2, ArcSharedObject *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::AccessibilityComponent>(a3);
}

void re::internal::defaultDestruct<re::ecs2::AccessibilityComponent>(int a1, int a2, re::ecs2::AccessibilityComponent *this)
{
  re::ecs2::AccessibilityComponent::~AccessibilityComponent(this);
}

uint64_t re::ecs2::introspect_AccessibilityComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"AccessibilityComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_AccessibilityComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_AccessibilityComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::AccessibilityComponent>, this);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::accessibility::CustomContent>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::ecs2::accessibility::CustomContent>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::ecs2::accessibility::CustomContent>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::accessibility::CustomContent>::destroy(uint64_t a1, uint64_t a2)
{
  return re::DynamicArray<re::ecs2::accessibility::CustomContent>::deinit(a2);
}

_QWORD *re::IntrospectionDynamicArray<re::ecs2::accessibility::CustomContent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  re::DynamicArray<re::ecs2::accessibility::CustomContent>::deinit(a2);
  *(_QWORD *)a2 = a3;
  result = re::DynamicArray<re::ecs2::accessibility::CustomContent>::setCapacity((_QWORD *)a2, 0);
  ++*(_DWORD *)(a2 + 24);
  return result;
}

_anonymous_namespace_ *re::IntrospectionDynamicArray<re::ecs2::accessibility::CustomContent>::resize(_anonymous_namespace_ *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::accessibility::CustomContent>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::ecs2::accessibility::CustomContent>::resize((_anonymous_namespace_ *)a4, a5);
  }
  else
  {
    result = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::accessibility::CustomContent>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::ecs2::accessibility::CustomContent>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  _anonymous_namespace_ *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  re::IntrospectionBase *v13;
  uint64_t *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity(&v15, 0);
  v18 = 0uLL;
  *(_QWORD *)&v19 = 0;
  re::DynamicString::setCapacity((_QWORD *)&v17 + 1, 0);
  v9 = *(_QWORD *)(a4 + 16);
  if (v9 >= *(_QWORD *)(a4 + 8))
  {
    re::DynamicArray<re::ecs2::accessibility::CustomContent>::growCapacity((_QWORD *)a4, v9 + 1);
    v9 = *(_QWORD *)(a4 + 16);
  }
  v10 = *(_QWORD *)(a4 + 32) + 72 * v9;
  *(_QWORD *)v10 = v15;
  *(_OWORD *)(v10 + 8) = v16;
  v11 = *((_QWORD *)&v17 + 1);
  *(_QWORD *)(v10 + 24) = v17;
  *(_QWORD *)(v10 + 32) = v11;
  *(_QWORD *)(v10 + 56) = v19;
  *(_OWORD *)(v10 + 40) = v18;
  *(_BYTE *)(v10 + 64) = BYTE8(v19);
  v12 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = v12 + 1;
  ++*(_DWORD *)(a4 + 24);
  v13 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 72 * v12);
  re::introspectionInitElement(a2, a3, a1[6], v13);
  return v13;
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::accessibility::CustomContent>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::ecs2::accessibility::CustomContent>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 72 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 72 * a3;
}

_QWORD *re::DynamicArray<re::ecs2::accessibility::CustomContent>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::ecs2::accessibility::CustomContent>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x48uLL))
        {
          v2 = 72 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 72 * a2, 8);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_24;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 72, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_24:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 0;
        v11 = 72 * v9;
        v12 = 0uLL;
        do
        {
          v13 = &v7[v10 / 8];
          v14 = (_QWORD *)(v8 + v10);
          *(_OWORD *)v13 = v12;
          *((_OWORD *)v13 + 1) = v12;
          v13[3] = *(_QWORD *)(v8 + v10 + 24);
          v15 = *(_QWORD *)(v8 + v10 + 8);
          *v13 = *(_QWORD *)(v8 + v10);
          *v14 = 0;
          v16 = *(_QWORD *)(v8 + v10 + 16);
          v14[3] = 0;
          v18 = v7[v10 / 8 + 1];
          v17 = v7[v10 / 8 + 2];
          v13[1] = v15;
          v13[2] = v16;
          v14[1] = v18;
          v14[2] = v17;
          *((_OWORD *)v13 + 2) = v12;
          *((_OWORD *)v13 + 3) = v12;
          v19 = (_QWORD *)(v8 + v10 + 32);
          v13[4] = *v19;
          *v19 = 0;
          v13[7] = *(_QWORD *)(v8 + v10 + 56);
          v14[7] = 0;
          v21 = v7[v10 / 8 + 5];
          v20 = v7[v10 / 8 + 6];
          v22 = *(_QWORD *)(v8 + v10 + 48);
          v13[5] = *(_QWORD *)(v8 + v10 + 40);
          v13[6] = v22;
          v14[5] = v21;
          v14[6] = v20;
          *((_BYTE *)v13 + 64) = *(_BYTE *)(v8 + v10 + 64);
          if (*v19)
          {
            if ((v14[5] & 1) != 0)
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v19 + 40))(*v19, v14[6]);
              v12 = 0uLL;
            }
            *(_OWORD *)v19 = v12;
            *(_OWORD *)(v8 + v10 + 48) = v12;
          }
          if (*v14)
          {
            if ((v14[1] & 1) != 0)
            {
              (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v14 + 40))(*v14, v14[2]);
              v12 = 0uLL;
            }
            *(_OWORD *)v14 = v12;
            *((_OWORD *)v14 + 1) = v12;
          }
          v10 += 72;
        }
        while (v11 != v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_24;
    }
  }
  return result;
}

_anonymous_namespace_ *re::DynamicArray<re::ecs2::accessibility::CustomContent>::resize(_anonymous_namespace_ *result, unint64_t a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _anonymous_namespace_ *v8;
  uint64_t v9;
  __n128 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = result;
  v4 = *((_QWORD *)result + 2);
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
    v9 = 72 * a2;
    v10 = 0uLL;
    v11 = a2;
    do
    {
      v12 = *((_QWORD *)v3 + 4);
      v13 = v12 + v9;
      v14 = *(_QWORD *)(v12 + v9 + 32);
      if (v14)
      {
        if ((*(_BYTE *)(v13 + 40) & 1) != 0)
        {
          (*(void (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v14 + 40))(v14, *(_QWORD *)(v12 + v9 + 48), v10);
          v10 = 0uLL;
        }
        *(__n128 *)(v12 + v9 + 32) = v10;
        *(__n128 *)(v12 + v9 + 48) = v10;
      }
      result = *(_anonymous_namespace_ **)v13;
      if (*(_QWORD *)v13)
      {
        if ((*(_BYTE *)(v12 + v9 + 8) & 1) != 0)
        {
          result = (_anonymous_namespace_ *)(*(uint64_t (**)(_anonymous_namespace_ *, _QWORD, __n128))(*(_QWORD *)result + 40))(result, *(_QWORD *)(v12 + v9 + 16), v10);
          v10 = 0uLL;
        }
        *(__n128 *)v13 = v10;
        *(__n128 *)(v13 + 16) = v10;
      }
      ++v11;
      v9 += 72;
    }
    while (v11 < *((_QWORD *)v3 + 2));
  }
  else
  {
    if (*((_QWORD *)result + 1) < a2)
    {
      result = (_anonymous_namespace_ *)re::DynamicArray<re::ecs2::accessibility::CustomContent>::setCapacity(result, a2);
      v4 = *((_QWORD *)v3 + 2);
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = 72 * v4;
      do
      {
        v7 = *((_QWORD *)v3 + 4) + v6;
        *(_OWORD *)v7 = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        v8 = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v7, 0);
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)(v7 + 48) = 0u;
        v7 += 32;
        result = (_anonymous_namespace_ *)re::DynamicString::setCapacity((_QWORD *)v7, 0);
        *(_BYTE *)(v7 + 32) = 0;
        v6 += 72;
        --v5;
      }
      while (v5);
    }
  }
  *((_QWORD *)v3 + 2) = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::DynamicArray<re::ecs2::accessibility::CustomContent>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::ecs2::accessibility::CustomContent>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::ecs2::accessibility::CustomContent>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::ecs2::accessibility::CustomContent>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  _anonymous_namespace_ *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE v12[32];
  _BYTE v13[8];
  uint64_t v14;

  if (*(re::Allocator **)a1 == a3)
  {
    re::DynamicArray<re::ecs2::accessibility::CustomContent>::clear((_QWORD *)a1);
  }
  else
  {
    re::DynamicArray<re::ecs2::accessibility::CustomContent>::deinit(a1);
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::ecs2::accessibility::CustomContent>::setCapacity((_QWORD *)a1, a4);
    ++*(_DWORD *)(a1 + 24);
  }
  v8 = re::DynamicArray<re::ecs2::accessibility::CustomContent>::resize((_anonymous_namespace_ *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v13);
    re::TypeInfo::TypeInfo((uint64_t)v12, (uint64_t)&v14);
    v9 = *(_QWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(char **)(a1 + 32);
      v11 = 72 * v9;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v12, v10, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v12, (void **)v10, a3, 0);
        v10 += 72;
        v11 -= 72;
      }
      while (v11);
    }
  }
}

_QWORD *re::DynamicArray<re::ecs2::accessibility::CustomContent>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 *v4;
  __n128 v5;
  __n128 *v6;

  v1 = result;
  v2 = result[2];
  result[2] = 0;
  if (v2)
  {
    v3 = 72 * v2;
    v4 = (__n128 *)(result[4] + 32);
    v5 = 0uLL;
    do
    {
      v6 = v4 - 2;
      if (v4->n128_u64[0])
      {
        if ((v4->n128_u8[8] & 1) != 0)
        {
          (*(void (**)(unint64_t, unint64_t, __n128))(*(_QWORD *)v4->n128_u64[0] + 40))(v4->n128_u64[0], v4[1].n128_u64[0], v5);
          v5 = 0uLL;
        }
        *v4 = v5;
        v4[1] = v5;
      }
      result = (_QWORD *)v6->n128_u64[0];
      if (v6->n128_u64[0])
      {
        if ((v4[-2].n128_u8[8] & 1) != 0)
        {
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, __n128))(*result + 40))(result, v4[-1].n128_u64[0], v5);
          v5 = 0uLL;
        }
        *v6 = v5;
        v4[-1] = v5;
      }
      v4 = (__n128 *)((char *)v4 + 72);
      v3 -= 72;
    }
    while (v3);
  }
  ++*((_DWORD *)v1 + 6);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 72 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 72 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::ecs2::accessibility::CustomContent>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<long>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<long>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<long>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<long>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<long>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<float *>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

void re::IntrospectionDynamicArray<long>::resize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v10;
  unint64_t i;

  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    re::DynamicArray<float *>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      re::DynamicArray<double>::resize(a4, a5);
  }
  else
  {
    re::DynamicArray<float *>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, a2, a3, a4);
  }
}

re::IntrospectionBase *re::IntrospectionDynamicArray<long>::addElement(uint64_t a1, re *a2, int a3, _anonymous_namespace_ *this)
{
  re::IntrospectionBase *v8;
  uint64_t v10;

  v10 = 0;
  re::DynamicArray<re::DataArrayHandle<re::MeshModel>>::add(this, &v10);
  v8 = (re::IntrospectionBase *)(*((_QWORD *)this + 4) + 8 * *((_QWORD *)this + 2) - 8);
  re::introspectionInitElement(a2, a3, *(re::Allocator **)(a1 + 48), v8);
  return v8;
}

uint64_t re::IntrospectionDynamicArray<long>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<long>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 8 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 8 * a3;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<float *>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::Allocator *v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *(re::Allocator **)a1;
  if (v8 == a3)
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    if (v8)
    {
      if (*(_QWORD *)(a1 + 32))
        (*(void (**)(re::Allocator *))(*(_QWORD *)v8 + 40))(v8);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)a1 = a3;
    re::DynamicArray<float *>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  re::DynamicArray<double>::resize(a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(char **)(a1 + 32);
      v12 = 8 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 8;
        v12 -= 8;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 8 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 8 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<long>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

double re::make::shared::unsafelyInplace<re::ecs2::AccessibilityComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  double result;

  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_OWORD *)a1 + 19) = 0u;
  *((_OWORD *)a1 + 20) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_OWORD *)a1 + 18) = 0u;
  *((_OWORD *)a1 + 15) = 0u;
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 13) = 0u;
  *((_OWORD *)a1 + 14) = 0u;
  *((_OWORD *)a1 + 11) = 0u;
  *((_OWORD *)a1 + 12) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED58C40;
  *(_WORD *)(v1 + 25) = 0;
  *(_BYTE *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 72) = 0;
  *(_BYTE *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 184) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  *(_QWORD *)(v1 + 168) = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_DWORD *)(v1 + 176) = 0;
  *(_BYTE *)(v1 + 192) = 0;
  *(_QWORD *)(v1 + 360) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_OWORD *)(v1 + 248) = 0u;
  *(_DWORD *)(v1 + 264) = 0;
  *(_DWORD *)(v1 + 304) = 0;
  *(_OWORD *)(v1 + 272) = 0u;
  *(_OWORD *)(v1 + 288) = 0u;
  *(_OWORD *)(v1 + 340) = 0u;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  return result;
}

uint64_t *re::ecs2::HierarchicalFadeComponent::snapshotMapFields<re::snapshot::Reader<re::snapshot::DecoderRaw>>(uint64_t a1, uint64_t a2)
{
  uint64_t *result;

  re::snapshot::Reader<re::snapshot::DecoderRaw>::field<0,re::ecs2::Component>(a2, (_BYTE *)a1);
  re::snapshot::DecoderRaw::operator>><float>((uint64_t *)a2, (_DWORD *)(a1 + 28));
  *(_DWORD *)(a2 + 32) = 0;
  result = re::snapshot::DecoderRaw::operator>><BOOL>((uint64_t *)a2, (_BYTE *)(a1 + 32));
  *(_DWORD *)(a2 + 32) = 0;
  return result;
}

uint64_t re::ecs2::HierarchicalFadeComponent::snapshotMapFields<re::snapshot::Reader<re::snapshot::DecoderOPACK>>(uint64_t a1, uint64_t a2)
{
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<0,re::ecs2::Component>(a2, (float *)a1);
  re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<1,float>(a2, (float *)(a1 + 28));
  return re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<4,BOOL>(a2, (_BYTE *)(a1 + 32));
}

unsigned int *re::ecs2::HierarchicalFadeComponent::snapshotMapFields<re::snapshot::Writer<re::snapshot::EncoderRaw>>(uint64_t a1, unsigned int *a2)
{
  int __src;
  char v6;

  re::snapshot::Writer<re::snapshot::EncoderRaw>::field<0,re::ecs2::Component>(a2, a1);
  __src = *(_DWORD *)(a1 + 28);
  re::snapshot::Encoder::writeRaw<true>(a2, &__src, 4uLL);
  v6 = *(_BYTE *)(a1 + 32);
  return re::snapshot::Encoder::writeRaw<true>(a2, &v6, 1uLL);
}

unsigned int *re::ecs2::HierarchicalFadeComponent::snapshotMapFields<re::snapshot::Writer<re::snapshot::EncoderOPACK>>(uint64_t a1, re::snapshot::EncoderOPACK *a2)
{
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<0,re::ecs2::Component>(a2, a1);
  re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<1,float>(a2, (float *)(a1 + 28));
  return re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<4,BOOL>(a2, (unsigned __int8 *)(a1 + 32));
}

BOOL re::ecs2::HierarchicalFadeComponent::getUseDepthPrePass(re::ecs2::HierarchicalFadeComponent *this)
{
  unsigned __int8 v1;
  _BYTE *v2;
  int v4;
  const char *v5;
  char v6;
  char v7[2];

  if (!*((_BYTE *)this + 32))
    return 0;
  v2 = &unk_255828000;
  if ((v1 & 1) == 0)
  {
    v2 = (_BYTE *)&unk_255828000;
    if (v4)
    {
      re::Defaults::BOOLValue((re::Defaults *)"disableDepthPrepassForFade", v5, v7);
      v6 = v7[1] ^ 1;
      if (!v7[0])
        v6 = 1;
      useDepthPrePassForFade(void)::kUseDepthPrePassForFade = v6;
      v2 = (_BYTE *)&unk_255828000;
    }
  }
  return v2[1880] != 0;
}

uint64_t re::ecs2::HierarchicalFadeComponent::getFadeGroupID@<X0>(re::ecs2::HierarchicalFadeComponent *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*((_QWORD *)this + 2) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::RenderPassGroupComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  if ((!result || *(_BYTE *)(result + 25) == 1)
    && (result = re::ecs2::HierarchicalFadeComponent::getUseDepthPrePass(this), (_DWORD)result))
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 2) + 296);
    *(_BYTE *)a2 = 1;
    *(_QWORD *)(a2 + 8) = v5;
  }
  else
  {
    *(_BYTE *)a2 = 0;
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_HierarchicalFadeComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254111AF8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254111AF8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254111B30, 0);
    *(uint64_t *)((char *)&qword_254111B40 + 6) = 0;
    qword_254111B40 = 0;
    qword_254111B50 = 0;
    qword_254111B58 = 0xFFFFFFFFLL;
    qword_254111B30 = (uint64_t)&off_24ED7DAA8;
    qword_254111B60 = (uint64_t)"HierarchicalFadeComponent";
    dword_254111B68 = 0;
    unk_254111B70 = 0u;
    unk_254111B80 = 0u;
    unk_254111B90 = 0u;
    qword_254111BA0 = 0;
    __cxa_guard_release(&qword_254111AF8);
  }
  return &qword_254111B30;
}

void re::ecs2::initInfo_HierarchicalFadeComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;

  v18[0] = 0x54B04082FD869170;
  v18[1] = "HierarchicalFadeComponent";
  re::StringID::destroyString((re::StringID *)v18);
  *((_OWORD *)this + 2) = v19;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_286);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&_MergedGlobals_286);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254111B18 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_float((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "opacity";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1C00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254111B20 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_BOOL((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "useDepthPrePass";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x2000000004;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254111B28 = v16;
      __cxa_guard_release(&_MergedGlobals_286);
    }
  }
  *((_QWORD *)this + 2) = 0x2800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254111B18;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::HierarchicalFadeComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::HierarchicalFadeComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::HierarchicalFadeComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::HierarchicalFadeComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v17 = v19;
}

void re::internal::defaultConstruct<re::ecs2::HierarchicalFadeComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED58CC0;
  *(_DWORD *)(v3 + 28) = 1065353216;
  *(_BYTE *)(v3 + 32) = 1;
}

uint64_t re::internal::defaultDestruct<re::ecs2::HierarchicalFadeComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::HierarchicalFadeComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED58CC0;
  *(_DWORD *)(v1 + 28) = 1065353216;
  *(_BYTE *)(v1 + 32) = 1;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::HierarchicalFadeComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_HierarchicalFadeComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"HierarchicalFadeComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_HierarchicalFadeComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_HierarchicalFadeComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::HierarchicalFadeComponent>, this);
}

uint64_t *re::ecs2::allocInfo_HierarchicalFadeSecondaryOpacityMarkerComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254111B00);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254111B00))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254111BA8, 0);
    *(uint64_t *)((char *)&qword_254111BB8 + 6) = 0;
    qword_254111BB8 = 0;
    qword_254111BC8 = 0;
    qword_254111BD0 = 0xFFFFFFFFLL;
    qword_254111BA8 = (uint64_t)&off_24ED7DAA8;
    qword_254111BD8 = (uint64_t)"HierarchicalFadeSecondaryOpacityMarkerComponent";
    dword_254111BE0 = 0;
    unk_254111BE8 = 0u;
    unk_254111BF8 = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254111C18 = 0;
    __cxa_guard_release(&qword_254111B00);
  }
  return &qword_254111BA8;
}

void re::ecs2::initInfo_HierarchicalFadeSecondaryOpacityMarkerComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x9018DAA3288F7CCELL;
  v10[1] = "HierarchicalFadeSecondaryOpacityMarkerComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_254111B10);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254111B10);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254111B08 = v8;
      __cxa_guard_release(&qword_254111B10);
    }
  }
  *((_QWORD *)this + 2) = 0x2000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_254111B08;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

void re::internal::defaultConstruct<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED58D40;
}

uint64_t re::internal::defaultDestruct<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent>(ArcSharedObject *a1)
{
  uint64_t v1;

  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED58D40;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_HierarchicalFadeSecondaryOpacityMarkerComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"HierarchicalFadeSecondaryOpacityMarkerComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_HierarchicalFadeSecondaryOpacityMarkerComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_HierarchicalFadeSecondaryOpacityMarkerComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::HierarchicalFadeSecondaryOpacityMarkerComponent>, this);
}

void re::snapshot::Reader<re::snapshot::DecoderRaw>::field<0,re::ecs2::Component>(uint64_t a1, _BYTE *a2)
{
  unsigned __int8 v3;
  _UNKNOWN **v4;
  int v5;
  BOOL v6[8];

  v4 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v3 & 1) == 0)
  {
    *(_QWORD *)v6 = a2;
    v4 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    a2 = *(_BYTE **)v6;
    if (v5)
    {
      re::introspect<re::ecs2::Component>(void)::info = (_UNKNOWN *)re::ecs2::introspect_Component(0);
      v4 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
      a2 = *(_BYTE **)v6;
    }
  }
  re::snapshot::Reader<re::snapshot::DecoderRaw>::read((uint64_t *)a1, a2, (uint64_t)v4[64]);
  *(_DWORD *)(a1 + 32) = 0;
}

uint64_t *re::snapshot::DecoderRaw::operator>><float>(uint64_t *result, _DWORD *a2)
{
  _DWORD *v2;
  unint64_t v3;

  v2 = (_DWORD *)result[2];
  v3 = result[3] - (_QWORD)v2;
  if (v3 <= 3)
    return re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining", 4uLL, v3);
  *a2 = *v2;
  result[2] += 4;
  return result;
}

uint64_t *re::snapshot::DecoderRaw::operator>><BOOL>(uint64_t *result, _BYTE *a2)
{
  _BYTE *v2;

  v2 = (_BYTE *)result[2];
  if ((_BYTE *)result[3] == v2)
    return re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining", 1uLL, 0);
  *a2 = *v2;
  ++result[2];
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<0,re::ecs2::Component>(uint64_t a1, float *a2)
{
  uint64_t result;
  unsigned __int8 v5;
  _UNKNOWN **v6;
  unsigned __int8 *v7;
  int v8;
  int v9;

  result = re::snapshot::DecoderOPACK::advanceTo<0>(a1);
  if ((_DWORD)result)
  {
    v6 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if ((v5 & 1) == 0)
    {
      v6 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
      if (v9)
      {
        re::introspect<re::ecs2::Component>(void)::info = (_UNKNOWN *)re::ecs2::introspect_Component(0);
        v6 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
      }
    }
    re::snapshot::Reader<re::snapshot::DecoderOPACK>::read((uint64_t *)a1, a2, (uint64_t)v6[64]);
    v7 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v7 >= *(_QWORD *)(a1 + 24) || (v8 = *v7, v8 == 3))
    {
      result = 0x7FFFFFFFLL;
    }
    else if ((v8 - 7) > 0x28)
    {
      result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v7 + 1;
      result = (v8 - 8);
    }
    *(_DWORD *)(a1 + 32) = result;
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<1,float>(uint64_t a1, float *a2)
{
  uint64_t result;
  unsigned __int8 *v5;
  int v6;

  result = re::snapshot::DecoderOPACK::advanceTo<1>(a1);
  if ((_DWORD)result)
  {
    re::snapshot::DecoderOPACK::operator>>((uint64_t *)a1, a2);
    v5 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 24) || (v6 = *v5, v6 == 3))
    {
      result = 0x7FFFFFFFLL;
    }
    else if ((v6 - 7) > 0x28)
    {
      result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v5 + 1;
      result = (v6 - 8);
    }
    *(_DWORD *)(a1 + 32) = result;
  }
  return result;
}

uint64_t re::snapshot::Reader<re::snapshot::DecoderOPACK>::field<4,BOOL>(uint64_t a1, _BYTE *a2)
{
  uint64_t result;
  unsigned __int8 *v5;
  int v6;

  result = re::snapshot::DecoderOPACK::advanceTo<4>(a1);
  if ((_DWORD)result)
  {
    re::snapshot::DecoderOPACK::operator>>((uint64_t *)a1, a2);
    v5 = *(unsigned __int8 **)(a1 + 16);
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 24) || (v6 = *v5, v6 == 3))
    {
      result = 0x7FFFFFFFLL;
    }
    else if ((v6 - 7) > 0x28)
    {
      result = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
    }
    else
    {
      *(_QWORD *)(a1 + 16) = v5 + 1;
      result = (v6 - 8);
    }
    *(_DWORD *)(a1 + 32) = result;
  }
  return result;
}

BOOL re::snapshot::DecoderOPACK::advanceTo<0>(uint64_t a1)
{
  int Integer;
  int v3;
  int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  Integer = *(_DWORD *)(a1 + 32);
  if (Integer < 0)
  {
    while (1)
    {
      v5 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v5 >= *(_QWORD *)(a1 + 24))
      {
        v4 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 16) = v5 + 1;
        v4 = *v5;
      }
      re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v4);
      v6 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v6 >= *(_QWORD *)(a1 + 24))
        break;
      v3 = *v6;
      if (v3 == 3)
        break;
      if ((v3 - 7) > 0x28)
      {
        Integer = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
      }
      else
      {
        *(_QWORD *)(a1 + 16) = v6 + 1;
        Integer = v3 - 8;
      }
      *(_DWORD *)(a1 + 32) = Integer;
      if ((Integer & 0x80000000) == 0)
        return Integer == 0;
    }
    Integer = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 32) = 0x7FFFFFFF;
  }
  return Integer == 0;
}

BOOL re::snapshot::DecoderOPACK::advanceTo<4>(uint64_t a1)
{
  int Integer;
  unsigned __int8 *v3;
  int v4;
  unsigned __int8 *v5;
  int v6;

  Integer = *(_DWORD *)(a1 + 32);
  if (Integer <= 3)
  {
    while (1)
    {
      v3 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v3 >= *(_QWORD *)(a1 + 24))
      {
        v4 = 0;
      }
      else
      {
        *(_QWORD *)(a1 + 16) = v3 + 1;
        v4 = *v3;
      }
      re::snapshot::DecoderOPACK::skip((uint64_t *)a1, v4);
      v5 = *(unsigned __int8 **)(a1 + 16);
      if ((unint64_t)v5 >= *(_QWORD *)(a1 + 24))
        break;
      v6 = *v5;
      if (v6 == 3)
        break;
      if ((v6 - 7) > 0x28)
      {
        Integer = re::snapshot::DecoderOPACK::readInteger((re::snapshot::DecoderOPACK *)a1, 0x7FFFFFFFLL);
      }
      else
      {
        *(_QWORD *)(a1 + 16) = v5 + 1;
        Integer = v6 - 8;
      }
      *(_DWORD *)(a1 + 32) = Integer;
      if (Integer >= 4)
        return Integer == 4;
    }
    Integer = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 32) = 0x7FFFFFFF;
  }
  return Integer == 4;
}

void re::snapshot::Writer<re::snapshot::EncoderRaw>::field<0,re::ecs2::Component>(unsigned int *a1, uint64_t a2)
{
  unsigned __int8 v2;
  _UNKNOWN **v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;

  v3 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v2 & 1) == 0)
  {
    v6 = a2;
    v7 = a1;
    v3 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    v5 = v4;
    a2 = v6;
    a1 = v7;
    if (v5)
    {
      re::introspect<re::ecs2::Component>(void)::info = (_UNKNOWN *)re::ecs2::introspect_Component(0);
      v3 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
      a2 = v6;
      a1 = v7;
    }
  }
  re::snapshot::Writer<re::snapshot::EncoderRaw>::write(a1, a2, (uint64_t)v3[64]);
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<0,re::ecs2::Component>(re::snapshot::EncoderOPACK *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  _UNKNOWN **v7;
  int v9;

  v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 0);
  }
  else
  {
    v5 = *(_QWORD *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(_BYTE *)(v5 + v4) = 8;
  }
  v7 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
  if ((v6 & 1) == 0)
  {
    v7 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    if (v9)
    {
      re::introspect<re::ecs2::Component>(void)::info = (_UNKNOWN *)re::ecs2::introspect_Component(0);
      v7 = &re::ecs2::ComponentImpl<re::ecs2::PlanarReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType;
    }
  }
  return re::snapshot::Writer<re::snapshot::EncoderOPACK>::write((unsigned int *)this, a2, (uint64_t)v7[64]);
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<1,float>(re::snapshot::EncoderOPACK *this, float *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 1);
  }
  else
  {
    v5 = *(_QWORD *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(_BYTE *)(v5 + v4) = 9;
  }
  return re::snapshot::EncoderOPACK::operator<<((unsigned int *)this, *a2);
}

unsigned int *re::snapshot::Writer<re::snapshot::EncoderOPACK>::field<4,BOOL>(re::snapshot::EncoderOPACK *this, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *((unsigned int *)this + 2);
  if (v4 >= *((_DWORD *)this + 3))
  {
    re::snapshot::EncoderOPACK::writeInteger((unsigned int *)this, 4);
  }
  else
  {
    v5 = *(_QWORD *)this;
    *((_DWORD *)this + 2) = v4 + 1;
    *(_BYTE *)(v5 + v4) = 12;
  }
  return re::snapshot::EncoderOPACK::operator<<((unsigned int *)this, *a2);
}

re::ecs2::LoadTraceSystem *re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceSystem *this, re::ecs2::LoadTraceComponent *a2, re::ecs2::Entity *a3)
{
  re::ecs2::Entity *v4;
  uint64_t v5;
  uint64_t v6;
  re::ecs2::LoadTraceComponent **v7;
  uint64_t v8;
  re::ecs2::LoadTraceSystem *v9;
  _QWORD v10[3];
  re::ecs2::LoadTraceSystem *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v9 = this;
  if (!this || !a2)
    return this;
  v10[0] = &off_24ED68DA8;
  v10[1] = &v9;
  v11 = (re::ecs2::LoadTraceSystem *)v10;
  re::ecs2::ComponentHelper::findAssetHandles(a2, (uint64_t)v10);
  this = v11;
  if (v11 == (re::ecs2::LoadTraceSystem *)v10)
  {
    v5 = 4;
    this = (re::ecs2::LoadTraceSystem *)v10;
  }
  else
  {
    if (!v11)
      goto LABEL_8;
    v5 = 5;
  }
  this = (re::ecs2::LoadTraceSystem *)(*(uint64_t (**)(re::ecs2::LoadTraceSystem *))(*(_QWORD *)this + 8 * v5))(this);
LABEL_8:
  v6 = *((_QWORD *)a2 + 41);
  if (v6)
  {
    v7 = (re::ecs2::LoadTraceComponent **)*((_QWORD *)a2 + 43);
    v8 = 8 * v6;
    do
    {
      if (*v7)
        this = (re::ecs2::LoadTraceSystem *)re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(v9, *v7, v4);
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  return this;
}

void re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  v9 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v9 = v8 % *(unsigned int *)(a1 + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v16 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v16 + 32 * v10 + 16) == v6)
        return;
      while (1)
      {
        v10 = *(_DWORD *)(v16 + 32 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v16 + 32 * v10 + 16) == v6)
          return;
      }
    }
  }
  v11 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v11 == 0x7FFFFFFF)
  {
    v11 = *(unsigned int *)(a1 + 32);
    v12 = v11;
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      v12 = *(_DWORD *)(a1 + 32);
      v6 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v12 + 1;
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
    *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v13 + 32 * v11 + 8) = v14 | 0x80000000;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v9);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11) = v8;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 16) = v6;
  v15 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 24) = *a3;
  *(_DWORD *)(v15 + 4 * v9) = v11;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
}

void re::ecs2::LoadTraceSystem::willAddSystemToECSService(re::ecs2::LoadTraceSystem *this)
{
  uint64_t v2;
  re::MeshAsset *v3;
  char *v4;
  re::TextureAsset *v5;
  re::RenderGraphAsset *v6;
  re::SceneAsset *v7;
  re::ShaderLibraryAsset *v8;
  re::ShaderGraphAsset *v9;
  re::MeshDeformationAsset *v10;
  re::RenderGraphEmitterAsset *v11;
  re::FontAsset *v12;
  re::ImageBasedLightAsset *v13;
  re::FontLayoutAsset *v14;
  re::CGPerspectiveContextAsset *v15;
  re::VideoAsset *v16;
  re::VideoFileAsset *v17;
  re::VFXAsset *v18;
  re::VertexCacheAsset *v19;
  re::MaterialDefinitionAsset *v20;
  re::MaterialAsset *v21;
  re::AcousticMeshAsset *v22;
  re::AnimationLibraryAsset *v23;
  re::AudioFileAsset *v24;
  re::AudioFileGroupAsset *v25;
  re::AudioGeneratorAsset *v26;
  re::BlendShapeWeightsDefinitionAsset *v27;
  re::IKRigAsset *v28;
  re::RigAsset *v29;
  re::RigGraphAsset *v30;
  re::SkeletalPoseDefinitionAsset *v31;
  re::SkeletonAsset *v32;
  re::StateMachineAsset *v33;
  re::StateParameterBlackboardAsset *v34;
  re::TimelineAsset *v35;
  int v36;
  uint64_t *v37;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  v3 = (re::MeshAsset *)re::ServiceLocator::serviceOrNull<re::AssetService>(v2);
  *((_QWORD *)this + 20) = v3;
  if (v3)
  {
    if (*((_BYTE *)v3 + 1458))
    {
      v37 = re::MeshAsset::assetType(v3);
      v36 = 1;
      v4 = (char *)this + 112;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::TextureAsset::assetType(v5);
      v36 = 2;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::RenderGraphAsset::assetType(v6);
      v36 = 3;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::SceneAsset::assetType(v7);
      v36 = 4;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::ShaderLibraryAsset::assetType(v8);
      v36 = 5;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::ShaderGraphAsset::assetType(v9);
      v36 = 6;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::MeshDeformationAsset::assetType(v10);
      v36 = 7;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::RenderGraphEmitterAsset::assetType(v11);
      v36 = 8;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::FontAsset::assetType(v12);
      v36 = 9;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::ImageBasedLightAsset::assetType(v13);
      v36 = 10;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::FontLayoutAsset::assetType(v14);
      v36 = 11;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::CGPerspectiveContextAsset::assetType(v15);
      v36 = 12;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::VideoAsset::assetType(v16);
      v36 = 13;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::VideoFileAsset::assetType(v17);
      v36 = 14;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::VFXAsset::assetType(v18);
      v36 = 15;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::VertexCacheAsset::assetType(v19);
      v36 = 16;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::MaterialDefinitionAsset::assetType(v20);
      v36 = 17;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::MaterialAsset::assetType(v21);
      v36 = 18;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::AcousticMeshAsset::assetType(v22);
      v36 = 19;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::AnimationLibraryAsset::assetType(v23);
      v36 = 20;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::AudioFileAsset::assetType(v24);
      v36 = 21;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::AudioFileGroupAsset::assetType(v25);
      v36 = 22;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::AudioGeneratorAsset::assetType(v26);
      v36 = 23;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::BlendShapeWeightsDefinitionAsset::assetType(v27);
      v36 = 24;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::IKRigAsset::assetType(v28);
      v36 = 25;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::RigAsset::assetType(v29);
      v36 = 26;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::RigGraphAsset::assetType(v30);
      v36 = 27;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::SkeletalPoseDefinitionAsset::assetType(v31);
      v36 = 28;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::SkeletonAsset::assetType(v32);
      v36 = 29;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::StateMachineAsset::assetType(v33);
      v36 = 30;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::StateParameterBlackboardAsset::assetType(v34);
      v36 = 31;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
      v37 = re::TimelineAsset::assetType(v35);
      v36 = 32;
      re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::addNew<unsigned int &>((uint64_t)v4, (uint64_t *)&v37, &v36);
    }
  }
}

uint64_t re::ecs2::LoadTraceSystem::willRemoveSystemFromECSService(uint64_t this)
{
  *(_QWORD *)(this + 160) = 0;
  return this;
}

_QWORD *re::ecs2::LoadTraceSystem::willAddSceneToECSService(_QWORD *this, re::EventBus **a2)
{
  uint64_t v2;
  re::EventBus *v3;
  _QWORD *v4;
  re *v5;
  uint64_t v6;
  re *v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  re::ecs2::Scene *v12;
  _BYTE v13[24];
  uint64_t v14;
  _BYTE *v15;
  _BYTE v16[24];
  uint64_t v17;
  re *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v12 = (re::ecs2::Scene *)a2;
  v2 = this[20];
  if (v2)
  {
    if (*(_BYTE *)(v2 + 1458))
    {
      v3 = a2[36];
      if (v3)
      {
        v4 = this;
        v17 = re::globalAllocators((re *)this)[2];
        v5 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v17 + 32))(v17, 32, 0);
        *(_QWORD *)v5 = &off_24ED68CF8;
        *((_QWORD *)v5 + 1) = v4;
        *((_QWORD *)v5 + 2) = re::ecs2::LoadTraceSystem::onEntityAdded;
        *((_QWORD *)v5 + 3) = 0;
        v18 = v5;
        *(_QWORD *)&v11 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidAddEvent>(v3, 0, (uint64_t)v16, 0, 0);
        *((_QWORD *)&v11 + 1) = v6;
        v7 = v18;
        if (v18)
        {
          v7 = (re *)(**(uint64_t (***)(re *))v18)(v18);
          if (v18 != (re *)v16)
            v7 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
          v18 = 0;
        }
        v14 = re::globalAllocators(v7)[2];
        v8 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, 32, 0);
        *v8 = &off_24ED68D50;
        v8[1] = v4;
        v8[2] = re::ecs2::LoadTraceSystem::onEntityWillRemove;
        v8[3] = 0;
        v15 = v8;
        *(_QWORD *)&v10 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityWillRemoveEvent>(v3, 0, (uint64_t)v13, 0, 0);
        *((_QWORD *)&v10 + 1) = v9;
        if (v15)
        {
          (**(void (***)(_BYTE *))v15)(v15);
          if (v15 != v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
          v15 = 0;
        }
        re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)(v4 + 21), (uint64_t *)&v12, &v11);
        return (_QWORD *)re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)(v4 + 27), (uint64_t *)&v12, &v10);
      }
    }
  }
  return this;
}

uint64_t re::ecs2::LoadTraceSystem::onEntityAdded(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  re::ecs2::LoadTraceComponent *v5;
  re::ecs2::LoadTraceSystem *v6;
  re::ecs2::Entity *v7;

  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    if (a2)
    {
      if (*(_BYTE *)(v2 + 1458))
      {
        v5 = (re::ecs2::LoadTraceComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LoadTraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v5)
        {
          v6 = v5;
          re::ecs2::LoadTraceComponent::emitLoadTraceSignpost(v5);
          re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::clear((uint64_t)v6 + 136);
          re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(v6, (re::ecs2::LoadTraceComponent *)a2, v7);
          re::ecs2::LoadTraceComponent::updateTrackedAssets((uint64_t)v6, 2020, 2024, a1 + 112);
        }
      }
    }
  }
  return 0;
}

uint64_t re::ecs2::LoadTraceSystem::onEntityWillRemove(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  re::ecs2::LoadTraceComponent *v3;

  v2 = *(_QWORD *)(a1 + 160);
  if (v2)
  {
    if (a2)
    {
      if (*(_BYTE *)(v2 + 1458))
      {
        v3 = (re::ecs2::LoadTraceComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LoadTraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
        if (v3)
          re::ecs2::LoadTraceComponent::emitLoadTraceSignpost(v3);
      }
    }
  }
  return 0;
}

uint64_t re::ecs2::LoadTraceSystem::willRemoveSceneFromECSService(uint64_t this, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v16 = a2;
  v2 = *(_QWORD *)(this + 160);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 1458))
    {
      v3 = *(_QWORD *)(a2 + 288);
      if (v3)
      {
        v4 = this;
        v5 = this + 168;
        LODWORD(v6) = 0x7FFFFFFF;
        if (*(_QWORD *)(this + 168))
        {
          v7 = 0x94D049BB133111EBLL
             * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
          v8 = *(unsigned int *)(*(_QWORD *)(this + 176) + 4 * ((v7 ^ (v7 >> 31)) % *(unsigned int *)(this + 192)));
          if ((_DWORD)v8 != 0x7FFFFFFF)
          {
            v9 = *(_QWORD *)(this + 184);
            if (*(_QWORD *)(v9 + 40 * v8 + 16) == a2)
            {
              LODWORD(v6) = v8;
            }
            else
            {
              v6 = v8;
              while (1)
              {
                LODWORD(v6) = *(_DWORD *)(v9 + 40 * v6 + 8) & 0x7FFFFFFF;
                if ((_DWORD)v6 == 0x7FFFFFFF)
                  break;
                if (*(_QWORD *)(v9 + 40 * v6 + 16) == a2)
                  goto LABEL_13;
              }
              LODWORD(v6) = 0x7FFFFFFF;
            }
          }
        }
LABEL_13:
        v10 = *(_QWORD *)(this + 184) + 40 * v6;
        re::EventBus::unsubscribe(v3, *(_QWORD *)(v10 + 24), *(_QWORD *)(v10 + 32));
        re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(v5, (uint64_t *)&v16);
        LODWORD(v11) = 0x7FFFFFFF;
        if (*(_QWORD *)(v4 + 216))
        {
          v12 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v16 ^ (v16 >> 30))) >> 27));
          v13 = *(unsigned int *)(*(_QWORD *)(v4 + 224) + 4 * ((v12 ^ (v12 >> 31)) % *(unsigned int *)(v4 + 240)));
          if ((_DWORD)v13 != 0x7FFFFFFF)
          {
            v14 = *(_QWORD *)(v4 + 232);
            if (*(_QWORD *)(v14 + 40 * v13 + 16) == v16)
            {
              LODWORD(v11) = v13;
            }
            else
            {
              v11 = v13;
              while (1)
              {
                LODWORD(v11) = *(_DWORD *)(v14 + 40 * v11 + 8) & 0x7FFFFFFF;
                if ((_DWORD)v11 == 0x7FFFFFFF)
                  break;
                if (*(_QWORD *)(v14 + 40 * v11 + 16) == v16)
                  goto LABEL_22;
              }
              LODWORD(v11) = 0x7FFFFFFF;
            }
          }
        }
LABEL_22:
        v15 = *(_QWORD *)(v4 + 232) + 40 * v11;
        re::EventBus::unsubscribe(v3, *(_QWORD *)(v15 + 24), *(_QWORD *)(v15 + 32));
        return re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove(v4 + 216, (uint64_t *)&v16);
      }
    }
  }
  return this;
}

void re::ecs2::LoadTraceSystem::update(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  re::ecs2::LoadTraceComponent ***v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  re::ecs2::LoadTraceComponent **v21;
  re::ecs2::Entity *v22;
  _DWORD v23[2];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 160);
  if (v2 && *(_BYTE *)(v2 + 1458))
  {
    v5 = *(unsigned int *)(a1 + 144);
    if ((_DWORD)v5)
    {
      v6 = 0;
      v7 = (int *)(*(_QWORD *)(a1 + 128) + 8);
      while (1)
      {
        v8 = *v7;
        v7 += 8;
        if (v8 < 0)
          break;
        if (v5 == ++v6)
        {
          LODWORD(v6) = *(_DWORD *)(a1 + 144);
          break;
        }
      }
    }
    else
    {
      LODWORD(v6) = 0;
    }
    if ((_DWORD)v5 != (_DWORD)v6)
    {
      while (1)
      {
        v9 = *(_QWORD *)(a1 + 128);
        if (v5 <= (int)v6 + 1)
          v10 = v6 + 1;
        else
          v10 = v5;
        while (v10 - 1 != (_DWORD)v6)
        {
          v6 = (v6 + 1);
          if ((*(_DWORD *)(v9 + 32 * v6 + 8) & 0x80000000) != 0)
            goto LABEL_17;
        }
        LODWORD(v6) = v10;
LABEL_17:
        if ((_DWORD)v6 == (_DWORD)v5)
        {
          if (!re::internal::enableSignposts(0, 0))
            goto LABEL_42;
          goto LABEL_41;
        }
        v11 = v5 <= (int)v6 + 1 ? v6 + 1 : v5;
        LODWORD(v12) = v6;
        while (v11 - 1 != (_DWORD)v12)
        {
          v12 = (v12 + 1);
          if ((*(_DWORD *)(v9 + 32 * v12 + 8) & 0x80000000) != 0)
            goto LABEL_26;
        }
        LODWORD(v12) = v11;
LABEL_26:
        if ((_DWORD)v12 == (_DWORD)v5)
          break;
        if (re::internal::enableSignposts(0, 0))
          kdebug_trace();
        LODWORD(v5) = *(_DWORD *)(a1 + 144);
        if (v5 <= (int)v12 + 1)
          v13 = v12 + 1;
        else
          v13 = *(_DWORD *)(a1 + 144);
        while (1)
        {
          v14 = (v12 + 1);
          if (v13 - 1 == (_DWORD)v12)
            break;
          LODWORD(v12) = v12 + 1;
          LODWORD(v6) = v14;
          if ((*(_DWORD *)(*(_QWORD *)(a1 + 128) + 32 * v14 + 8) & 0x80000000) != 0)
            goto LABEL_36;
        }
        LODWORD(v6) = v13;
LABEL_36:
        if ((_DWORD)v5 == (_DWORD)v6)
          goto LABEL_42;
      }
      if (!re::internal::enableSignposts(0, 0))
        goto LABEL_42;
LABEL_41:
      kdebug_trace();
    }
LABEL_42:
    v15 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::LoadTraceComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 24);
      if (v16)
      {
        v17 = *(re::ecs2::LoadTraceComponent ****)(v15 + 40);
        if (re::ecs2::LoadTraceComponent::log(void)::onceToken != -1)
          dispatch_once(&re::ecs2::LoadTraceComponent::log(void)::onceToken, &__block_literal_global_18);
        v18 = a1 + 112;
        v19 = re::ecs2::LoadTraceComponent::log(void)::log;
        if (os_log_type_enabled((os_log_t)re::ecs2::LoadTraceComponent::log(void)::log, OS_LOG_TYPE_DEBUG))
        {
          v23[0] = 67109120;
          v23[1] = v16;
          _os_log_debug_impl(&dword_224FE9000, v19, OS_LOG_TYPE_DEBUG, "Load trace components in scene: %d", (uint8_t *)v23, 8u);
        }
        v20 = 8 * v16;
        do
        {
          v21 = *v17++;
          re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::clear((uint64_t)(v21 + 17));
          re::ecs2::LoadTraceSystem::findAssetHandlesRecursively((re::ecs2::LoadTraceSystem *)v21, v21[2], v22);
          re::ecs2::LoadTraceComponent::updateTrackedAssets((uint64_t)v21, 2020, 2024, v18);
          re::ecs2::LoadTraceComponent::checkAssetLoadStates((uint64_t)v21, 2021, 2022, 2023, v18);
          v20 -= 8;
        }
        while (v20);
      }
    }
  }
}

uint64_t *re::ecs2::allocInfo_LoadTraceSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_287);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_287))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254111C28, 0);
    *(uint64_t *)((char *)&qword_254111C38 + 6) = 0;
    qword_254111C38 = 0;
    qword_254111C48 = 0;
    qword_254111C50 = 0xFFFFFFFFLL;
    qword_254111C28 = (uint64_t)&off_24ED7DAA8;
    qword_254111C58 = (uint64_t)"LoadTraceSystem";
    dword_254111C60 = 0;
    unk_254111C68 = 0u;
    unk_254111C78 = 0u;
    unk_254111C88 = 0u;
    qword_254111C98 = 0;
    __cxa_guard_release(&_MergedGlobals_287);
  }
  return &qword_254111C28;
}

void re::ecs2::initInfo_LoadTraceSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x97E86156DCE06DDCLL;
  v5[1] = "LoadTraceSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x10800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_LoadTraceSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::LoadTraceSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::LoadTraceSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::LoadTraceSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::LoadTraceSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::LoadTraceSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::LoadTraceSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::LoadTraceSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  *(_QWORD *)(a3 + 256) = 0;
  *(_OWORD *)(a3 + 224) = 0u;
  *(_OWORD *)(a3 + 240) = 0u;
  *(_OWORD *)(a3 + 192) = 0u;
  *(_OWORD *)(a3 + 208) = 0u;
  *(_OWORD *)(a3 + 160) = 0u;
  *(_OWORD *)(a3 + 176) = 0u;
  *(_OWORD *)(a3 + 128) = 0u;
  *(_OWORD *)(a3 + 144) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(_OWORD *)(a3 + 112) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  re::ecs2::System::System(a3, 1);
  *(_QWORD *)v3 = &off_24ED68E28;
  *(_QWORD *)(v3 + 104) = 2;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_DWORD *)(v3 + 144) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v3 + 148) = 0x7FFFFFFFLL;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 188) = 0u;
  *(_QWORD *)(v3 + 204) = 0x7FFFFFFFLL;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_OWORD *)(v3 + 232) = 0u;
  *(_DWORD *)(v3 + 248) = 0;
  *(_QWORD *)(v3 + 252) = 0x7FFFFFFFLL;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::LoadTraceSystem>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a3 + 27);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a3 + 21);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a3 + 14);
  *a3 = (uint64_t)&off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::LoadTraceSystem>(uint64_t a1)
{
  uint64_t v1;
  double result;

  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  re::ecs2::System::System(a1, 1);
  *(_QWORD *)v1 = &off_24ED68E28;
  *(_QWORD *)(v1 + 104) = 2;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_DWORD *)(v1 + 144) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v1 + 148) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 188) = 0u;
  *(_QWORD *)(v1 + 204) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 216) = 0u;
  *(_OWORD *)(v1 + 232) = 0u;
  *(_DWORD *)(v1 + 248) = 0;
  *(_QWORD *)(v1 + 252) = 0x7FFFFFFFLL;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::LoadTraceSystem>(uint64_t *a1)
{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a1 + 27);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a1 + 21);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit(a1 + 14);
  *a1 = (uint64_t)&off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_LoadTraceSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"LoadTraceSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_LoadTraceSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_LoadTraceSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::LoadTraceSystem>, this);
}

void re::ecs2::LoadTraceSystem::~LoadTraceSystem(re::ecs2::LoadTraceSystem *this)
{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 27);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 21);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 27);
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 21);
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)this + 14);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::LoadTraceSystem::typeInfo(re::ecs2::LoadTraceSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"LoadTraceSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_LoadTraceSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_LoadTraceSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::LoadTraceSystem>, 0);
}

void re::internal::CallableMemFn<re::ecs2::LoadTraceSystem,REEventHandlerResult (re::ecs2::LoadTraceSystem::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::LoadTraceSystem,REEventHandlerResult (re::ecs2::LoadTraceSystem::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::LoadTraceSystem,REEventHandlerResult (re::ecs2::LoadTraceSystem::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED68CF8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::LoadTraceSystem,REEventHandlerResult (re::ecs2::LoadTraceSystem::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED68CF8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::LoadTraceSystem,REEventHandlerResult (re::ecs2::LoadTraceSystem::*)(re::ecs2::Entity *,RESceneEntityDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidAddEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::LoadTraceSystem,REEventHandlerResult (re::ecs2::LoadTraceSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::LoadTraceSystem,REEventHandlerResult (re::ecs2::LoadTraceSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::LoadTraceSystem,REEventHandlerResult (re::ecs2::LoadTraceSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED68D50;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::LoadTraceSystem,REEventHandlerResult (re::ecs2::LoadTraceSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED68D50;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::LoadTraceSystem,REEventHandlerResult (re::ecs2::LoadTraceSystem::*)(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityWillRemoveEvent const&)>::size()
{
  return 32;
}

void std::__function::__func<re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceComponent *,re::ecs2::Entity *)::$_0,std::allocator<re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceComponent *,re::ecs2::Entity *)::$_0>,void ()(re::AssetHandle *)>::~__func()
{
  JUMPOUT(0x2276933B8);
}

_QWORD *std::__function::__func<re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceComponent *,re::ecs2::Entity *)::$_0,std::allocator<re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceComponent *,re::ecs2::Entity *)::$_0>,void ()(re::AssetHandle *)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24ED68DA8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceComponent *,re::ecs2::Entity *)::$_0,std::allocator<re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceComponent *,re::ecs2::Entity *)::$_0>,void ()(re::AssetHandle *)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24ED68DA8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceComponent *,re::ecs2::Entity *)::$_0,std::allocator<re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceComponent *,re::ecs2::Entity *)::$_0>,void ()(re::AssetHandle *)>::operator()(uint64_t a1, const re::AssetHandle **a2)
{
  const re::AssetHandle *v2;
  uint64_t v3;
  _BYTE v4[24];

  v2 = *a2;
  if (v2)
  {
    if (*((_QWORD *)v2 + 1))
    {
      v3 = **(_QWORD **)(a1 + 8);
      re::AssetHandle::AssetHandle((re::AssetHandle *)v4, v2);
      re::HashSetBase<re::AssetHandle,re::AssetHandle,re::internal::ValueAsKey<re::AssetHandle>,re::Hash<re::AssetHandle>,re::EqualTo<re::AssetHandle>,true,false>::add(v3 + 136, (re::AssetHandle *)v4);
      re::AssetHandle::~AssetHandle((re::AssetHandle *)v4);
    }
  }
}

uint64_t std::__function::__func<re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceComponent *,re::ecs2::Entity *)::$_0,std::allocator<re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceComponent *,re::ecs2::Entity *)::$_0>,void ()(re::AssetHandle *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceComponent *,re::ecs2::Entity *)::$_0,std::allocator<re::ecs2::LoadTraceSystem::findAssetHandlesRecursively(re::ecs2::LoadTraceComponent *,re::ecs2::Entity *)::$_0>,void ()(re::AssetHandle *)>::target_type()
{
}

void re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  signed int v21;
  _BYTE v22[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v22, 0, 36);
      *(_QWORD *)&v22[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v22, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v22;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v22[8];
      *(_OWORD *)v22 = v5;
      *(_QWORD *)&v22[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v22[24];
      *(_OWORD *)&v22[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v22[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = v6 + 16;
        do
        {
          if ((*(_DWORD *)(v13 - 8) & 0x80000000) != 0)
          {
            v14 = *(_QWORD *)(v13 - 16);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<re::AssetType const*,unsigned int,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 32 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17) = v14;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 16) = *(_QWORD *)v13;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 24) = *(_DWORD *)(v13 + 8);
            v12 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 32;
          --v10;
        }
        while (v10);
      }
      re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)v22);
    }
  }
  else
  {
    if (a2)
      v21 = a2;
    else
      v21 = 3;
  }
}

id re::internal::defaultRetain<re::ecs2::LoadTraceSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::LoadTraceSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_ClippingService(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_288);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_288))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254111CA8, 0);
    *(uint64_t *)((char *)&qword_254111CB8 + 6) = 0;
    qword_254111CB8 = 0;
    qword_254111CC8 = 0;
    qword_254111CD0 = 0xFFFFFFFFLL;
    qword_254111CA8 = (uint64_t)&off_24ED7DAA8;
    qword_254111CD8 = (uint64_t)"ClippingService";
    dword_254111CE0 = 0;
    unk_254111CE8 = 0u;
    unk_254111CF8 = 0u;
    unk_254111D08 = 0u;
    qword_254111D18 = 0;
    __cxa_guard_release(&_MergedGlobals_288);
  }
  return &qword_254111CA8;
}

void re::ecs2::initInfo_ClippingService(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xC1FF1FD5603D36E6;
  v5[1] = "ClippingService";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_ClippingService(re::IntrospectionBase *)::structureAttributes;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

uint64_t re::ecs2::introspect_ClippingService(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ClippingService", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ClippingService, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ClippingService, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ClippingService>, this);
}

void re::MaterialParametersManager::~MaterialParametersManager(re::MaterialParametersManager *this)
{
  uint64_t v2;

  re::HashTable<unsigned long long,re::MaterialInstanceHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)this + 4);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {

    *((_QWORD *)this + 3) = 0;
  }
}

{
  re::MaterialParametersManager::~MaterialParametersManager(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::MaterialParametersManager::willAddScene(uint64_t result, uint64_t a2)
{
  if (!*(_QWORD *)(result + 16))
    *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t re::MaterialParametersManager::willRemoveScene(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(result + 16) == a2)
    *(_QWORD *)(result + 16) = 0;
  return result;
}

void re::MaterialParametersManager::ensureRootEntityExists(re::MaterialParametersManager *this)
{
  uint64_t *v2;
  uint64_t *v3;
  re::ecs2::Entity *v4;
  re::ecs2::Entity *v5;
  uint64_t v6;
  re::ecs2::Entity *v7[2];

  v2 = (uint64_t *)((char *)this + 24);
  if (!*((_QWORD *)this + 3))
  {
    v3 = re::ecs2::EntityFactory::instance(this);
    re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v3, 4uLL, v7);
    v4 = (re::ecs2::Entity *)*v2;
    v5 = v7[0];
    *v2 = (uint64_t)v7[0];
    if (v4)
    {

      v5 = (re::ecs2::Entity *)*v2;
    }
    *((_DWORD *)v5 + 72) |= 0x1400u;
    v7[0] = (re::ecs2::Entity *)0xB0FDF3493E2CFA72;
    v7[1] = (re::ecs2::Entity *)"MaterialInstanceSyncRoot";
    re::StringID::operator=((unint64_t *)v5 + 34, (uint64_t *)v7);
    re::StringID::destroyString((re::StringID *)v7);
    re::ecs2::EntityComponentCollection::add((re::ecs2::EntityComponentCollection *)(*v2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
    re::Collection<re::SharedPtr<re::ecs2::Scene>>::add((_QWORD *)(*(_QWORD *)(v6 + 104) + 304), v2);
}

void re::MaterialParametersManager::createPbrMaterialParametersEntity(_anonymous_namespace_ *a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, re::ecs2::Entity **a6@<X8>)
{
  char v9;
  _anonymous_namespace_ *v10;
  uint64_t *v12;
  uint64_t *v13;
  re::MaterialAsset *v14;
  uint64_t v15;
  uint64_t *v16;
  re::ecs2::EntityFactory *v17;
  uint64_t *v18;
  re::ecs2::Entity *v19;
  uint64_t v20;
  uint64_t v21[2];
  const char *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  v9 = a2;
  v10 = a1;
  v28 = 0uLL;
  v29 = 0;
  switch(a2)
  {
    case 2:
      goto LABEL_4;
    case 1:
      (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)a1 + 1) + 8))(&v24);
      goto LABEL_7;
    case 0:
LABEL_4:
      (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)a1 + 1) + 8))(&v24);
LABEL_7:
      v28 = v24;
      v24 = 0uLL;
      v29 = v25;
      *(_QWORD *)&v25 = 0;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v24);
      break;
  }
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v27 = 0x7FFFFFFFLL;
  if (a3)
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<char const(&)[5]>((uint64_t)&v24, (re::DynamicString *)&v22, "true");
    a1 = (_anonymous_namespace_ *)v22;
    if (v22)
    {
      if ((v23 & 1) != 0)
        a1 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v22 + 40))();
    }
  }
  if (a4)
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<char const(&)[5]>((uint64_t)&v24, (re::DynamicString *)&v22, "true");
    a1 = (_anonymous_namespace_ *)v22;
    if (v22)
    {
      if ((v23 & 1) != 0)
        a1 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v22 + 40))();
    }
  }
  if (a5)
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<char const(&)[5]>((uint64_t)&v24, (re::DynamicString *)&v22, "true");
    a1 = (_anonymous_namespace_ *)v22;
    if (v22)
    {
      if ((v23 & 1) != 0)
        a1 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v22 + 40))();
    }
  }
  v12 = re::globalAllocators(a1);
  v13 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12[2] + 32))(v12[2], 1896, 8);
  bzero(v13, 0x768uLL);
  re::MaterialAsset::MaterialAsset((re::MaterialAsset *)v13);
  v22 = "PhysicallyBasedMaterialResource";
  v23 = 31;
  re::DynamicString::operator=((re::DynamicString *)(v13 + 1), (uint64_t)&v22);
  re::AssetHandle::operator=(v13 + 5, (uint64_t *)&v28);
  v14 = (re::MaterialAsset *)re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)(v13 + 38), (uint64_t)&v24);
  v15 = *((_QWORD *)v10 + 1);
  v16 = re::MaterialAsset::assetType(v14);
  (*(void (**)(const char **__return_ptr, uint64_t, uint64_t *, uint64_t *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v15 + 416))(&v22, v15, v13, v16, 0, 0, 1);
  re::MaterialParametersManager::ensureRootEntityExists(v10);
  v18 = re::ecs2::EntityFactory::instance(v17);
  re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v18, 4uLL, a6);
  v19 = *a6;
  *((_DWORD *)v19 + 72) |= 0x1400u;
  v21[0] = 0xCEA8EA11163BE4E8;
  v21[1] = (uint64_t)"PbrMaterialParametersEntity";
  re::StringID::operator=((unint64_t *)v19 + 34, v21);
  re::StringID::destroyString((re::StringID *)v21);
  re::ecs2::Entity::setParentInternal(v19, *((re::ecs2::Entity **)v10 + 3), 0xFFFFFFFFFFFFFFFFLL);
  v20 = re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v19 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::PbrMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(_BYTE *)(v20 + 512) = v9;
  *(_BYTE *)(v20 + 513) = a3;
  *(_BYTE *)(v20 + 515) = a5;
  *(_BYTE *)(v20 + 514) = a4;
  re::AssetHandle::operator=((uint64_t *)(v20 + 528), (uint64_t *)&v22);
  re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v19 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v22);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v24);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v28);
}

void re::MaterialParametersManager::addOrUpdatePbrMaterialInstanceHandle(uint64_t a1, re::RenderManager *a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  re *v10;
  unsigned __int8 v11;
  NSObject *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t v30[8];
  char v31[8];
  uint64_t v32;
  unint64_t v33;

  v32 = 0;
  v33 = a3;
  v8 = a1 + 32;
  v9 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a1 + 32, a3);
  if (!v9)
  {
    v13 = re::globalAllocators(0);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13[2] + 32))(v13[2], 592, 16);
    re::PbrMaterial::PbrMaterial(v14, 0);
    v31[0] = 2;
    v32 = v15;
    re::HashTable<unsigned long long,re::MaterialInstanceHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<re::MaterialInstanceHandle&>(v8, (uint64_t *)&v33, (uint64_t)v31);
LABEL_8:
    v16 = v32;
    if (v32)
    {
      v17 = (id)(v32 + 8);
      *(_OWORD *)(v16 + 368) = *(_OWORD *)(a4 + 336);
      v18 = *(_OWORD *)(a4 + 400);
      v20 = *(_OWORD *)(a4 + 352);
      v19 = *(_OWORD *)(a4 + 368);
      *(_OWORD *)(v16 + 416) = *(_OWORD *)(a4 + 384);
      *(_OWORD *)(v16 + 432) = v18;
      *(_OWORD *)(v16 + 384) = v20;
      *(_OWORD *)(v16 + 400) = v19;
      v21 = *(_OWORD *)(a4 + 464);
      v23 = *(_OWORD *)(a4 + 416);
      v22 = *(_OWORD *)(a4 + 432);
      *(_OWORD *)(v16 + 480) = *(_OWORD *)(a4 + 448);
      *(_OWORD *)(v16 + 496) = v21;
      *(_OWORD *)(v16 + 448) = v23;
      *(_OWORD *)(v16 + 464) = v22;
      re::PbrMaterialTextures::operator=((uint64_t *)(v16 + 32), (uint64_t *)a4);
      *(_DWORD *)(v16 + 512) = *(_DWORD *)(a4 + 480);
      *(_DWORD *)(v16 + 516) = *(_DWORD *)(a4 + 484);
      *(_DWORD *)(v16 + 520) = *(_DWORD *)(a4 + 488);
      re::AssetHandle::operator=((uint64_t *)(v16 + 528), a5);
      re::PbrMaterial::commitConstantChanges((re::PbrMaterial *)v16, a2);
      re::PbrMaterial::commitTextureChanges((re::PbrMaterial *)v16, a2);

    }
    else
    {
      MEMORY[0x170] = *(_OWORD *)(a4 + 336);
      v24 = *(_OWORD *)(a4 + 352);
      v25 = *(_OWORD *)(a4 + 368);
      v26 = *(_OWORD *)(a4 + 384);
      MEMORY[0x1B0] = *(_OWORD *)(a4 + 400);
      MEMORY[0x1A0] = v26;
      MEMORY[0x190] = v25;
      MEMORY[0x180] = v24;
      v27 = *(_OWORD *)(a4 + 416);
      v28 = *(_OWORD *)(a4 + 432);
      v29 = *(_OWORD *)(a4 + 448);
      MEMORY[0x1F0] = *(_OWORD *)(a4 + 464);
      MEMORY[0x1E0] = v29;
      MEMORY[0x1D0] = v28;
      MEMORY[0x1C0] = v27;
      re::PbrMaterialTextures::operator=((uint64_t *)0x20, (uint64_t *)a4);
      MEMORY[0x200] = *(_DWORD *)(a4 + 480);
      MEMORY[0x204] = *(_DWORD *)(a4 + 484);
      MEMORY[0x208] = *(_DWORD *)(a4 + 488);
      re::AssetHandle::operator=((uint64_t *)0x210, a5);
      re::PbrMaterial::commitConstantChanges(0, a2);
      re::PbrMaterial::commitTextureChanges(0, a2);
    }
    goto LABEL_11;
  }
  v31[0] = *(_BYTE *)v9;
  re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(&v32, *(_QWORD *)(v9 + 8));
  if (v31[0] == 2)
    goto LABEL_8;
  do
    v11 = __ldaxr(re::MaterialParametersManager::addOrUpdatePbrMaterialInstanceHandle(re::RenderManager *,unsigned long long,re::PbrMaterialParameters const&,re::AssetHandle)::__FILE____LINE___logged);
  while (__stlxr(1u, re::MaterialParametersManager::addOrUpdatePbrMaterialInstanceHandle(re::RenderManager *,unsigned long long,re::PbrMaterialParameters const&,re::AssetHandle)::__FILE____LINE___logged));
  if ((v11 & 1) == 0)
  {
    v12 = *re::graphicsLogObjects(v10);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_224FE9000, v12, OS_LOG_TYPE_DEFAULT, "MaterialInstanceHandle is not expected type", v30, 2u);
    }
  }
LABEL_11:
  if (v32)

}

void re::HashTable<unsigned long long,re::MaterialInstanceHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<re::MaterialInstanceHandle&>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;

  v6 = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  v9 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v9 = v8 % *(unsigned int *)(a1 + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v20 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v20 + 40 * v10 + 16) == v6)
        return;
      while (1)
      {
        LODWORD(v10) = *(_DWORD *)(v20 + 40 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v20 + 40 * v10 + 16) == v6)
          return;
      }
    }
  }
  v11 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v11 == 0x7FFFFFFF)
  {
    v11 = *(unsigned int *)(a1 + 32);
    v12 = v11;
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<unsigned long long,re::MaterialInstanceHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      v12 = *(_DWORD *)(a1 + 32);
      v6 = *a2;
    }
    *(_DWORD *)(a1 + 32) = v12 + 1;
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 40 * v11 + 8);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 40 * v11 + 8);
    *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v13 + 40 * v11 + 8) = v14 | 0x80000000;
  v15 = *(_QWORD *)(a1 + 8);
  v16 = v9;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v11 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v11 + 8) & 0x80000000 | *(_DWORD *)(v15 + 4 * v9);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v11) = v8;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v11 + 16) = v6;
  v17 = *(_QWORD *)(a1 + 16) + 40 * v11;
  *(_BYTE *)(v17 + 24) = *(_BYTE *)a3;
  v18 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(v17 + 32) = v18;
  if (v18)
  {
    v19 = (id)(v18 + 8);
    v15 = *(_QWORD *)(a1 + 8);
  }
  *(_DWORD *)(v15 + 4 * v16) = v11;
  ++*(_DWORD *)(a1 + 28);
  ++*(_DWORD *)(a1 + 40);
}

__n128 re::PbrMaterial::commitConstantChanges(re::PbrMaterial *this, re::RenderManager *a2)
{
  uint64_t v4;
  __n128 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[9];

  if (*((_DWORD *)this + 130))
  {
    v4 = re::PbrMaterial::addRenderFrameParameterDelta(this, a2);
    if (v4)
    {
      v6 = v4;
      *(_BYTE *)(v4 + 16) = 1;
      re::PbrMaterialConstants::asPbrConstants((re::PbrMaterial *)((char *)this + 368), a2, (uint64_t)v10);
      v7 = v10[7];
      *(_OWORD *)(v6 + 128) = v10[6];
      *(_OWORD *)(v6 + 144) = v7;
      *(_OWORD *)(v6 + 160) = v10[8];
      v8 = v10[3];
      *(_OWORD *)(v6 + 64) = v10[2];
      *(_OWORD *)(v6 + 80) = v8;
      v9 = v10[5];
      *(_OWORD *)(v6 + 96) = v10[4];
      *(_OWORD *)(v6 + 112) = v9;
      result = (__n128)v10[1];
      *(_OWORD *)(v6 + 32) = v10[0];
      *(__n128 *)(v6 + 48) = result;
      *(_DWORD *)(v6 + 20) = *((_DWORD *)this + 129);
      *((_DWORD *)this + 130) = 0;
    }
  }
  return result;
}

void re::PbrMaterial::commitTextureChanges(re::PbrMaterial *this, re::RenderManager *a2)
{
  uint64_t v3;
  uint64_t v4;
  re::PbrMaterial *v5;
  uint64_t v6;
  _BYTE v7[16];

  v3 = re::PbrMaterial::addRenderFrameParameterDelta(this, a2);
  if (v3)
  {
    v4 = 0;
    *(_BYTE *)(v3 + 17) = 1;
    v5 = (re::PbrMaterial *)((char *)this + 32);
    v6 = v3 + 176;
    do
    {
      re::PbrMaterial::makeTextureHandle(v5, (re::TextureHandle *)v7);
      re::TextureHandle::operator=((re::TextureHandle *)(v6 + v4), (re::TextureHandle *)v7);
      re::TextureHandle::invalidate((re::TextureHandle *)v7);
      v4 += 16;
      v5 = (re::PbrMaterial *)((char *)v5 + 24);
    }
    while (v4 != 224);
  }
}

void re::MaterialParametersManager::createUnlitMaterialParametersEntity(_anonymous_namespace_ *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, re::ecs2::Entity **a6@<X8>, float a7@<S0>)
{
  char v11;
  _anonymous_namespace_ *v12;
  uint64_t *v14;
  uint64_t *v15;
  re::MaterialAsset *v16;
  uint64_t v17;
  uint64_t *v18;
  re::ecs2::EntityFactory *v19;
  uint64_t *v20;
  re::ecs2::Entity *v21;
  re::ecs2::EntityComponentCollection *v22;
  uint64_t v23;
  char v24;
  uint64_t v25[2];
  const char *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  v11 = a2;
  v12 = a1;
  v32 = 0uLL;
  v33 = 0;
  switch(a2)
  {
    case 2:
      goto LABEL_4;
    case 1:
      (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)a1 + 1) + 8))(&v28);
      goto LABEL_7;
    case 0:
LABEL_4:
      (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)a1 + 1) + 8))(&v28);
LABEL_7:
      v32 = v28;
      v28 = 0uLL;
      v33 = v29;
      *(_QWORD *)&v29 = 0;
      re::AssetHandle::~AssetHandle((re::AssetHandle *)&v28);
      break;
  }
  v30 = 0;
  v28 = 0u;
  v29 = 0u;
  v31 = 0x7FFFFFFFLL;
  if (a3)
  {
    re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::add<char const(&)[5]>((uint64_t)&v28, (re::DynamicString *)&v26, "true");
    a1 = (_anonymous_namespace_ *)v26;
    if (v26)
    {
      if ((v27 & 1) != 0)
        a1 = (_anonymous_namespace_ *)(*(uint64_t (**)(void))(*(_QWORD *)v26 + 40))();
    }
  }
  v14 = re::globalAllocators(a1);
  v15 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14[2] + 32))(v14[2], 1896, 8);
  bzero(v15, 0x768uLL);
  re::MaterialAsset::MaterialAsset((re::MaterialAsset *)v15);
  v26 = "UnlitMaterialResource";
  v27 = 21;
  re::DynamicString::operator=((re::DynamicString *)(v15 + 1), (uint64_t)&v26);
  re::AssetHandle::operator=(v15 + 5, (uint64_t *)&v32);
  v16 = (re::MaterialAsset *)re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::operator=((uint64_t)(v15 + 38), (uint64_t)&v28);
  v17 = *((_QWORD *)v12 + 1);
  v18 = re::MaterialAsset::assetType(v16);
  (*(void (**)(const char **__return_ptr, uint64_t, uint64_t *, uint64_t *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v17 + 416))(&v26, v17, v15, v18, 0, 0, 1);
  re::MaterialParametersManager::ensureRootEntityExists(v12);
  v20 = re::ecs2::EntityFactory::instance(v19);
  re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v20, 4uLL, a6);
  v21 = *a6;
  *((_DWORD *)v21 + 72) |= 0x1400u;
  v25[0] = 0x942092D10A3FF97ALL;
  v25[1] = (uint64_t)"UnlitMaterialInstanceEntity";
  re::StringID::operator=((unint64_t *)v21 + 34, v25);
  re::StringID::destroyString((re::StringID *)v25);
  re::ecs2::Entity::setParentInternal(v21, *((re::ecs2::Entity **)v12 + 3), 0xFFFFFFFFFFFFFFFFLL);
  v22 = (re::ecs2::Entity *)((char *)v21 + 32);
  v23 = re::ecs2::EntityComponentCollection::add((re::ecs2::Entity *)((char *)v21 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::UnlitMaterialParametersComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  *(_BYTE *)(v23 + 76) = v11;
  *(_BYTE *)(v23 + 77) = a3;
  v24 = *(_BYTE *)(a4 + 16);
  *(_OWORD *)(v23 + 28) = *(_OWORD *)a4;
  *(_BYTE *)(v23 + 44) = v24;
  *(float *)(v23 + 72) = a7;
  re::AssetHandle::operator=((uint64_t *)(v23 + 48), a5);
  re::AssetHandle::operator=((uint64_t *)(v23 + 80), (uint64_t *)&v26);
  re::ecs2::EntityComponentCollection::add(v22, (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v26);
  re::HashTable<re::DynamicString,re::DynamicString,re::Hash<re::DynamicString>,re::EqualTo<re::DynamicString>,true,false>::deinit((uint64_t *)&v28);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v32);
}

uint64_t re::MaterialParametersManager::findMaterialParametersEntityByID(re::MaterialParametersManager *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *((_QWORD *)this + 2);
  if (!v2)
    return 0;
  v5 = a2;
  v3 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v2 + 152, &v5);
  if (v3)
    return *(_QWORD *)(v3 + 8);
  if (*(_QWORD *)(*(_QWORD *)(v2 + 104) + 296) == v5)
    return *(_QWORD *)(v2 + 104);
  return 0;
}

void re::MaterialParametersManager::addOrUpdateUnlitMaterialInstanceHandle(uint64_t a1, re::RenderManager *a2, unint64_t a3, char a4, char a5, __int128 *a6, uint64_t *a7, uint64_t *a8, float a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  id v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30[8];
  uint64_t v31;
  unint64_t v32;
  _BYTE v33[16];

  v31 = 0;
  v32 = a3;
  v16 = a1 + 32;
  v17 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a1 + 32, a3);
  if (v17)
  {
    v30[0] = *(_BYTE *)v17;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(&v31, *(_QWORD *)(v17 + 8));
    if (v30[0] != 1)
    {
      v18 = 0;
      goto LABEL_7;
    }
  }
  else
  {
    v19 = re::globalAllocators(0);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19[2] + 32))(v19[2], 136, 8);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v20, 0);
    *(_QWORD *)v20 = &off_24ED68F20;
    __asm { FMOV            V0.4S, #1.0 }
    *(_OWORD *)(v20 + 24) = _Q0;
    *(_BYTE *)(v20 + 40) = 0;
    *(_DWORD *)(v20 + 44) = 1065353216;
    *(_QWORD *)(v20 + 56) = 0;
    *(_QWORD *)(v20 + 64) = 0;
    *(_QWORD *)(v20 + 48) = 0;
    *(_OWORD *)(v20 + 80) = 0u;
    *(_OWORD *)(v20 + 96) = 0u;
    *(_WORD *)(v20 + 72) = 0;
    *(int64x2_t *)(v20 + 112) = vdupq_n_s64(0xFFFFFFFFFFFFFFFuLL);
    *(_QWORD *)(v20 + 128) = 0;
    v30[0] = 1;
    v31 = v20;
    re::HashTable<unsigned long long,re::MaterialInstanceHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::add<re::MaterialInstanceHandle&>(v16, (uint64_t *)&v32, (uint64_t)v30);
  }
  v18 = v31;
  if (v31)
    v26 = (id)(v31 + 8);
LABEL_7:
  v27 = *a6;
  *(_BYTE *)(v18 + 40) = *((_BYTE *)a6 + 16);
  *(_OWORD *)(v18 + 24) = v27;
  *(float *)(v18 + 44) = a9;
  *(_BYTE *)(v18 + 72) = a4;
  re::AssetHandle::operator=((uint64_t *)(v18 + 48), a7);
  *(_BYTE *)(v18 + 73) = a5;
  re::AssetHandle::operator=((uint64_t *)(v18 + 80), a8);
  re::UnlitMaterial::commitConstantChanges((re::UnlitMaterial *)v18, a2);
  v28 = re::UnlitMaterial::addRenderFrameParameterDelta((re::UnlitMaterial *)v18, a2);
  if (v28)
  {
    v29 = v28;
    *(_BYTE *)(v28 + 17) = 1;
    re::PbrMaterial::makeTextureHandle((re::PbrMaterial *)(v18 + 48), (re::TextureHandle *)v33);
    re::TextureHandle::operator=((re::TextureHandle *)(v29 + 64), (re::TextureHandle *)v33);
    re::TextureHandle::invalidate((re::TextureHandle *)v33);
  }

  if (v31)
}

uint64_t re::MaterialParametersManager::materialInstanceHandle(re::MaterialParametersManager *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*((_QWORD *)this + 4))
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*((_QWORD *)this + 5) + 4 * ((v2 ^ (v2 >> 31)) % *((unsigned int *)this + 14)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *((_QWORD *)this + 6);
  if (*(_QWORD *)(v5 + 40 * v3 + 16) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 40 * v3 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v5 + 40 * v3 + 16) == a2)
        return v5 + 40 * v3 + 24;
    }
    return 0;
  }
  return v5 + 40 * v3 + 24;
}

double re::HashTable<unsigned long long,re::MaterialInstanceHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  uint64_t v8;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          v8 = *(_QWORD *)(v6 + 32);
          if (v8)
          {

            *(_QWORD *)(v6 + 32) = 0;
            v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 40;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::HashTable<unsigned long long,re::MaterialInstanceHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  signed int v23;
  _BYTE v24[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v24, 0, 36);
      *(_QWORD *)&v24[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v24, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v24;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v24[8];
      *(_OWORD *)v24 = v5;
      *(_QWORD *)&v24[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v24[24];
      *(_OWORD *)&v24[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v24[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = v7;
        v13 = DWORD1(v9);
        v14 = (_QWORD *)(v6 + 32);
        do
        {
          if ((*(_DWORD *)(v14 - 3) & 0x80000000) != 0)
          {
            v15 = *(v14 - 4);
            v16 = *(unsigned int *)(a1 + 24);
            v17 = v15 % v16;
            v18 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v18 == 0x7FFFFFFF)
            {
              v18 = *(unsigned int *)(a1 + 32);
              v19 = v18;
              if ((_DWORD)v18 == (_DWORD)v16)
              {
                re::HashTable<unsigned long long,re::MaterialInstanceHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity(a1, (2 * v13));
                v17 = v15 % *(unsigned int *)(a1 + 24);
                v19 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v19 + 1;
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 40 * v18 + 8);
            }
            else
            {
              v20 = *(_QWORD *)(a1 + 16);
              v21 = *(_DWORD *)(v20 + 40 * v18 + 8);
              *(_DWORD *)(a1 + 36) = v21 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v20 + 40 * v18 + 8) = v21 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v17);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18) = v15;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v18 + 16) = *(v14 - 2);
            v22 = *(_QWORD *)(a1 + 16) + 40 * v18;
            *(_BYTE *)(v22 + 24) = *((_BYTE *)v14 - 8);
            *(_QWORD *)(v22 + 32) = *v14;
            *v14 = 0;
            *(_DWORD *)(v12 + 4 * v17) = v18;
            v13 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v13;
            v10 = *(_DWORD *)&v24[32];
          }
          ++v11;
          v14 += 5;
        }
        while (v11 < v10);
      }
      re::HashTable<unsigned long long,re::MaterialInstanceHandle,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v24);
    }
  }
  else
  {
    if (a2)
      v23 = a2;
    else
      v23 = 3;
  }
}

void re::UnlitMaterial::~UnlitMaterial(re::UnlitMaterial *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED68F20;
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {

    *((_QWORD *)this + 13) = 0;
  }
  re::AssetHandle::~AssetHandle((re::UnlitMaterial *)((char *)this + 80));
  re::AssetHandle::~AssetHandle((re::UnlitMaterial *)((char *)this + 48));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24ED68F20;
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {

    *((_QWORD *)this + 13) = 0;
  }
  re::AssetHandle::~AssetHandle((re::UnlitMaterial *)((char *)this + 80));
  re::AssetHandle::~AssetHandle((re::UnlitMaterial *)((char *)this + 48));
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t *re::ecs2::allocInfo_ImageBasedLightComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254111D30);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254111D30))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254111D68, 0);
    *(uint64_t *)((char *)&qword_254111D78 + 6) = 0;
    qword_254111D78 = 0;
    qword_254111D88 = 0;
    qword_254111D90 = 0xFFFFFFFFLL;
    qword_254111D68 = (uint64_t)&off_24ED7DAA8;
    qword_254111D98 = (uint64_t)"ImageBasedLightComponent";
    dword_254111DA0 = 0;
    unk_254111DA8 = 0u;
    unk_254111DB8 = 0u;
    unk_254111DC8 = 0u;
    qword_254111DD8 = 0;
    __cxa_guard_release(&qword_254111D30);
  }
  return &qword_254111D68;
}

void re::ecs2::initInfo_ImageBasedLightComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  const re::IntrospectionBase *v14;
  void *v15;
  uint64_t v16;
  uint64_t *v17;
  const re::IntrospectionBase *v18;
  void *v19;
  uint64_t v20;
  uint64_t *v21;
  const re::IntrospectionBase *v22;
  void *v23;
  uint64_t v24;
  uint64_t *v25;
  const re::IntrospectionBase *v26;
  void *v27;
  uint64_t v28;
  uint64_t *v29;
  const re::IntrospectionBase *v30;
  void *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  const re::IntrospectionBase *v37;
  void *v38;
  uint64_t v39;
  uint64_t *v40;
  const re::IntrospectionBase *v41;
  void *v42;
  uint64_t v43;
  uint64_t *v44;
  const re::IntrospectionBase *v45;
  void *v46;
  uint64_t v47;
  uint64_t *v48;
  const re::IntrospectionBase *v49;
  void *v50;
  uint64_t v51;
  uint64_t *v52;
  const re::IntrospectionBase *v53;
  void *v54;
  uint64_t v55;
  uint64_t *v56;
  const re::IntrospectionBase *v57;
  void *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  const re::IntrospectionBase *v64;
  void *v65;
  uint64_t v66;
  __int128 v67;
  _QWORD v68[2];
  __int128 v69;

  v68[0] = 0x54A3D8680549C3BELL;
  v68[1] = "ImageBasedLightComponent";
  re::StringID::destroyString((re::StringID *)v68);
  *((_OWORD *)this + 2) = v69;
  v4 = atomic_load((unsigned __int8 *)&qword_254111D28);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254111D28);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254111ED0 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::introspect_float((re *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "intensityExponent";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x1C00000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254111ED8 = v12;
      v13 = re::introspectionAllocator((re *)v12);
      v15 = re::introspect_AssetHandle((re *)1, v14);
      v16 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v13 + 32))(v13, 72, 8);
      *(_DWORD *)v16 = 1;
      *(_QWORD *)(v16 + 8) = "ibl";
      *(_QWORD *)(v16 + 16) = v15;
      *(_QWORD *)(v16 + 24) = 0;
      *(_QWORD *)(v16 + 32) = 0x5800000002;
      *(_DWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = 0;
      *(_DWORD *)(v16 + 64) = 0;
      qword_254111EE0 = v16;
      v17 = re::introspectionAllocator((re *)v16);
      v19 = re::introspect_AssetHandle((re *)1, v18);
      v20 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v17 + 32))(v17, 72, 8);
      *(_DWORD *)v20 = 1;
      *(_QWORD *)(v20 + 8) = "diffuseTexture";
      *(_QWORD *)(v20 + 16) = v19;
      *(_QWORD *)(v20 + 24) = 0;
      *(_QWORD *)(v20 + 32) = 0x2800000003;
      *(_DWORD *)(v20 + 40) = 0;
      *(_QWORD *)(v20 + 48) = 0;
      *(_QWORD *)(v20 + 56) = 0;
      *(_DWORD *)(v20 + 64) = 0;
      qword_254111EE8 = v20;
      v21 = re::introspectionAllocator((re *)v20);
      v23 = re::introspect_AssetHandle((re *)1, v22);
      v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v21 + 32))(v21, 72, 8);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = "specularTexture";
      *(_QWORD *)(v24 + 16) = v23;
      *(_QWORD *)(v24 + 24) = 0;
      *(_QWORD *)(v24 + 32) = 0x4000000004;
      *(_DWORD *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      *(_QWORD *)(v24 + 56) = 0;
      *(_DWORD *)(v24 + 64) = 0;
      qword_254111EF0 = v24;
      v25 = re::introspectionAllocator((re *)v24);
      v27 = re::introspect_BOOL((re *)1, v26);
      v28 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v25 + 32))(v25, 72, 8);
      *(_DWORD *)v28 = 1;
      *(_QWORD *)(v28 + 8) = "isGlobalIBL";
      *(_QWORD *)(v28 + 16) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0x9400000005;
      *(_DWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_DWORD *)(v28 + 64) = 0;
      qword_254111EF8 = v28;
      v29 = re::introspectionAllocator((re *)v28);
      v31 = re::introspect_float((re *)1, v30);
      v32 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 72, 8);
      *(_DWORD *)v32 = 1;
      *(_QWORD *)(v32 + 8) = "mixFactor";
      *(_QWORD *)(v32 + 16) = v31;
      *(_QWORD *)(v32 + 24) = 0;
      *(_QWORD *)(v32 + 32) = 0x4B000000006;
      *(_DWORD *)(v32 + 40) = 0;
      *(_QWORD *)(v32 + 48) = 0;
      *(_QWORD *)(v32 + 56) = 0;
      *(_DWORD *)(v32 + 64) = 0;
      qword_254111F00 = v32;
      v33 = re::introspectionAllocator((re *)v32);
      v34 = re::introspect_Vector3F((re::IntrospectionBase **)1);
      v35 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v33 + 32))(v33, 72, 8);
      *(_DWORD *)v35 = 1;
      *(_QWORD *)(v35 + 8) = "mixColor";
      *(_QWORD *)(v35 + 16) = v34;
      *(_QWORD *)(v35 + 24) = 0;
      *(_QWORD *)(v35 + 32) = 0x50000000007;
      *(_DWORD *)(v35 + 40) = 0;
      *(_QWORD *)(v35 + 48) = 0;
      *(_QWORD *)(v35 + 56) = 0;
      *(_DWORD *)(v35 + 64) = 0;
      qword_254111F08 = v35;
      v36 = re::introspectionAllocator((re *)v35);
      v38 = re::introspect_ColorGamut((re *)1, v37);
      v39 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v36 + 32))(v36, 72, 8);
      *(_DWORD *)v39 = 1;
      *(_QWORD *)(v39 + 8) = "mixColorGamut";
      *(_QWORD *)(v39 + 16) = v38;
      *(_QWORD *)(v39 + 24) = 0;
      *(_QWORD *)(v39 + 32) = 0x51000000008;
      *(_DWORD *)(v39 + 40) = 0;
      *(_QWORD *)(v39 + 48) = 0;
      *(_QWORD *)(v39 + 56) = 0;
      *(_DWORD *)(v39 + 64) = 0;
      qword_254111F10 = v39;
      v40 = re::introspectionAllocator((re *)v39);
      v42 = re::introspect_AssetHandle((re *)1, v41);
      v43 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v40 + 32))(v40, 72, 8);
      *(_DWORD *)v43 = 1;
      *(_QWORD *)(v43 + 8) = "iblBlend";
      *(_QWORD *)(v43 + 16) = v42;
      *(_QWORD *)(v43 + 24) = 0;
      *(_QWORD *)(v43 + 32) = 0x7000000009;
      *(_DWORD *)(v43 + 40) = 0;
      *(_QWORD *)(v43 + 48) = 0;
      *(_QWORD *)(v43 + 56) = 0;
      *(_DWORD *)(v43 + 64) = 0;
      qword_254111F18 = v43;
      v44 = re::introspectionAllocator((re *)v43);
      v46 = re::introspect_BOOL((re *)1, v45);
      v47 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v44 + 32))(v44, 72, 8);
      *(_DWORD *)v47 = 1;
      *(_QWORD *)(v47 + 8) = "enableBlend";
      *(_QWORD *)(v47 + 16) = v46;
      *(_QWORD *)(v47 + 24) = 0;
      *(_QWORD *)(v47 + 32) = 0x880000000ALL;
      *(_DWORD *)(v47 + 40) = 0;
      *(_QWORD *)(v47 + 48) = 0;
      *(_QWORD *)(v47 + 56) = 0;
      *(_DWORD *)(v47 + 64) = 0;
      qword_254111F20 = v47;
      v48 = re::introspectionAllocator((re *)v47);
      v50 = re::introspect_float((re *)1, v49);
      v51 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v48 + 32))(v48, 72, 8);
      *(_DWORD *)v51 = 1;
      *(_QWORD *)(v51 + 8) = "blendIBLsFactor";
      *(_QWORD *)(v51 + 16) = v50;
      *(_QWORD *)(v51 + 24) = 0;
      *(_QWORD *)(v51 + 32) = 0x8C0000000BLL;
      *(_DWORD *)(v51 + 40) = 0;
      *(_QWORD *)(v51 + 48) = 0;
      *(_QWORD *)(v51 + 56) = 0;
      *(_DWORD *)(v51 + 64) = 0;
      qword_254111F28 = v51;
      v52 = re::introspectionAllocator((re *)v51);
      v54 = re::introspect_BOOL((re *)1, v53);
      v55 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v52 + 32))(v52, 72, 8);
      *(_DWORD *)v55 = 1;
      *(_QWORD *)(v55 + 8) = "enableRotation";
      *(_QWORD *)(v55 + 16) = v54;
      *(_QWORD *)(v55 + 24) = 0;
      *(_QWORD *)(v55 + 32) = 0x4B80000000CLL;
      *(_DWORD *)(v55 + 40) = 0;
      *(_QWORD *)(v55 + 48) = 0;
      *(_QWORD *)(v55 + 56) = 0;
      *(_DWORD *)(v55 + 64) = 0;
      qword_254111F30 = v55;
      v56 = re::introspectionAllocator((re *)v55);
      v58 = re::introspect_BOOL((re *)1, v57);
      v59 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v56 + 32))(v56, 72, 8);
      *(_DWORD *)v59 = 1;
      *(_QWORD *)(v59 + 8) = "enableRotationBlend";
      *(_QWORD *)(v59 + 16) = v58;
      *(_QWORD *)(v59 + 24) = 0;
      *(_QWORD *)(v59 + 32) = 0x4B90000000DLL;
      *(_DWORD *)(v59 + 40) = 0;
      *(_QWORD *)(v59 + 48) = 0;
      *(_QWORD *)(v59 + 56) = 0;
      *(_DWORD *)(v59 + 64) = 0;
      qword_254111F38 = v59;
      v60 = re::introspectionAllocator((re *)v59);
      v61 = re::introspect_Matrix3x3F((re::IntrospectionBase **)1);
      v62 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v60 + 32))(v60, 72, 8);
      *(_DWORD *)v62 = 1;
      *(_QWORD *)(v62 + 8) = "rotationBlendIBL";
      *(_QWORD *)(v62 + 16) = v61;
      *(_QWORD *)(v62 + 24) = 0;
      *(_QWORD *)(v62 + 32) = 0x4C00000000ELL;
      *(_DWORD *)(v62 + 40) = 0;
      *(_QWORD *)(v62 + 48) = 0;
      *(_QWORD *)(v62 + 56) = 0;
      *(_DWORD *)(v62 + 64) = 0;
      qword_254111F40 = v62;
      v63 = re::introspectionAllocator((re *)v62);
      v65 = re::introspect_uint64_t((re *)1, v64);
      v66 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v63 + 32))(v63, 72, 8);
      *(_DWORD *)v66 = 1;
      *(_QWORD *)(v66 + 8) = "textureContentUpdateTimestamp";
      *(_QWORD *)(v66 + 16) = v65;
      *(_QWORD *)(v66 + 24) = 0;
      *(_QWORD *)(v66 + 32) = 0x4F00000000FLL;
      *(_DWORD *)(v66 + 40) = 0;
      *(_QWORD *)(v66 + 48) = 0;
      *(_QWORD *)(v66 + 56) = 0;
      *(_DWORD *)(v66 + 64) = 0;
      qword_254111F48 = v66;
      __cxa_guard_release(&qword_254111D28);
    }
  }
  *((_QWORD *)this + 2) = 0x55000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 16;
  *((_QWORD *)this + 8) = &qword_254111ED0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ImageBasedLightComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ImageBasedLightComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ImageBasedLightComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ImageBasedLightComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v67 = v69;
}

_QWORD *re::internal::defaultConstruct<re::ecs2::ImageBasedLightComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::ImageBasedLightComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::ImageBasedLightComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::ImageBasedLightComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_ImageBasedLightComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImageBasedLightComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ImageBasedLightComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ImageBasedLightComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ImageBasedLightComponent>, this);
}

uint64_t *re::ecs2::allocInfo_ImageBasedLightReceiverComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254111D38);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254111D38))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254111DE0, 0);
    *(uint64_t *)((char *)&qword_254111DF0 + 6) = 0;
    qword_254111DF0 = 0;
    qword_254111E00 = 0;
    qword_254111E08 = 0xFFFFFFFFLL;
    qword_254111DE0 = (uint64_t)&off_24ED7DAA8;
    qword_254111E10 = (uint64_t)"ImageBasedLightReceiverComponent";
    dword_254111E18 = 0;
    *(_OWORD *)&algn_254111E1C[4] = 0u;
    *(_OWORD *)&algn_254111E1C[20] = 0u;
    xmmword_254111E40 = 0u;
    qword_254111E50 = 0;
    __cxa_guard_release(&qword_254111D38);
  }
  return &qword_254111DE0;
}

void re::ecs2::initInfo_ImageBasedLightReceiverComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0x4BF3A083172FA560;
  v14[1] = "ImageBasedLightReceiverComponent";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_254111D40);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254111D40);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254111D58 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::ecs2::introspect_EntityHandle((re::ecs2 *)1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "iblEntity";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x2000000001;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254111D60 = v12;
      __cxa_guard_release(&qword_254111D40);
    }
  }
  *((_QWORD *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254111D58;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ImageBasedLightReceiverComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ImageBasedLightReceiverComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ImageBasedLightReceiverComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ImageBasedLightReceiverComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::ecs2::ImageBasedLightReceiverComponent>(int a1, int a2, ArcSharedObject *this)
{
  id *v4;

  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  v4 = (id *)((char *)this + 32);
  ArcSharedObject::ArcSharedObject(this, 0);
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 0;
  *(_QWORD *)this = &off_24ED58E40;
  objc_initWeak(v4, 0);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  re::ecs2::EntityHandle::reset(v4);
  *((_QWORD *)this + 7) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::ImageBasedLightReceiverComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::ImageBasedLightReceiverComponent>(uint64_t a1)
{
  id *v2;
  uint64_t v3;

  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v2 = (id *)(a1 + 32);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED58E40;
  objc_initWeak(v2, 0);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  re::ecs2::EntityHandle::reset(v2);
  *(_QWORD *)(a1 + 56) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::ImageBasedLightReceiverComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_ImageBasedLightReceiverComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImageBasedLightReceiverComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ImageBasedLightReceiverComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ImageBasedLightReceiverComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ImageBasedLightReceiverComponent>, this);
}

uint64_t *re::ecs2::allocInfo_ImageBasedLightSystem(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254111D48);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254111D48))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254111E58, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254111E68 = 0;
    qword_254111E78 = 0;
    qword_254111E80 = 0xFFFFFFFFLL;
    qword_254111E58 = (uint64_t)&off_24ED7DAA8;
    qword_254111E88 = (uint64_t)"ImageBasedLightSystem";
    dword_254111E90 = 0;
    xmmword_254111E98 = 0u;
    unk_254111EA8 = 0u;
    xmmword_254111EB8 = 0u;
    qword_254111EC8 = 0;
    __cxa_guard_release(&qword_254111D48);
  }
  return &qword_254111E58;
}

void re::ecs2::initInfo_ImageBasedLightSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x8D1ECFE7443B511ALL;
  v5[1] = "ImageBasedLightSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x4F000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_ImageBasedLightSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ImageBasedLightSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ImageBasedLightSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::ImageBasedLightSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::ImageBasedLightSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ImageBasedLightSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ImageBasedLightSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::ImageBasedLightSystem *re::internal::defaultConstruct<re::ecs2::ImageBasedLightSystem>(int a1, int a2, re::ecs2::ImageBasedLightSystem *this)
{
  return re::ecs2::ImageBasedLightSystem::ImageBasedLightSystem(this);
}

void *re::internal::defaultDestruct<re::ecs2::ImageBasedLightSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a3 + 155));
  re::ecs2::ImageBasedLightComponentStateImpl::~ImageBasedLightComponentStateImpl((re::ecs2::ImageBasedLightComponentStateImpl *)(a3 + 50));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 20);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::ImageBasedLightSystem>(_QWORD *a1)
{
  re::AssetHandle::~AssetHandle((re::AssetHandle *)(a1 + 155));
  re::ecs2::ImageBasedLightComponentStateImpl::~ImageBasedLightComponentStateImpl((re::ecs2::ImageBasedLightComponentStateImpl *)(a1 + 50));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 20);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ImageBasedLightSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImageBasedLightSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ImageBasedLightSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ImageBasedLightSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ImageBasedLightSystem>, this);
}

uint64_t re::ecs2::ImageBasedLightComponent::mainIBLForScene(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;

  v1 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
       + 8);
  if (*(_QWORD *)(a1 + 224) <= v1)
    return 0;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * v1);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
    return 0;
  v4 = *(uint64_t **)(v2 + 40);
  v5 = 8 * v3;
  while (1)
  {
    result = *v4;
    if ((*(_BYTE *)(*(_QWORD *)(*v4 + 16) + 288) & 1) != 0)
      break;
    ++v4;
    v5 -= 8;
    if (!v5)
      return 0;
  }
  return result;
}

re::ecs2::ImageBasedLightComponentStateImpl *re::ecs2::ImageBasedLightComponentStateImpl::ImageBasedLightComponentStateImpl(re::ecs2::ImageBasedLightComponentStateImpl *this, re::ecs2::ImageBasedLightSystem *a2)
{
  _QWORD *v3;
  _anonymous_namespace_ *v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v7[1] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24ED68F68;
  *((_QWORD *)this + 1) = a2;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)((char *)this + 60) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_QWORD *)((char *)this + 76) = 0x7FFFFFFFLL;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  *((_QWORD *)this + 11) = 0;
  v3 = (_QWORD *)((char *)this + 88);
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_DWORD *)this + 34) = 0;
  *(_QWORD *)((char *)this + 140) = 0x1FFFFFFFFLL;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_BYTE *)this + 280) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_DWORD *)this + 92) = 0;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 24) = xmmword_2260E5F10;
  *((_OWORD *)this + 25) = xmmword_2260E5F20;
  *((_OWORD *)this + 26) = xmmword_2260E5F40;
  *((_DWORD *)this + 108) = 0;
  *((_OWORD *)this + 28) = xmmword_226128A40;
  *((_DWORD *)this + 116) = 0;
  *((_WORD *)this + 234) = 0;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *((_QWORD *)this + 63) = 0;
  *((_OWORD *)this + 32) = xmmword_2260E5F10;
  *((_OWORD *)this + 33) = xmmword_2260E5F20;
  *((_OWORD *)this + 34) = xmmword_2260E5F40;
  *((_WORD *)this + 280) = 256;
  *((_BYTE *)this + 576) = 0;
  *((_DWORD *)this + 152) = 0;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 39) = xmmword_2260E5F10;
  *((_OWORD *)this + 40) = xmmword_2260E5F20;
  *((_OWORD *)this + 41) = xmmword_2260E5F40;
  *((_DWORD *)this + 168) = 0;
  *((_OWORD *)this + 43) = xmmword_226128A40;
  *((_DWORD *)this + 176) = 0;
  *((_WORD *)this + 354) = 0;
  *((_QWORD *)this + 93) = 0;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *((_OWORD *)this + 47) = xmmword_2260E5F10;
  *((_OWORD *)this + 48) = xmmword_2260E5F20;
  *((_OWORD *)this + 49) = xmmword_2260E5F40;
  *((_WORD *)this + 400) = 256;
  *((_BYTE *)this + 816) = 0;
  v6[0] = v7;
  v6[1] = 1;
  v7[0] = re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType;
  v4 = re::FixedArray<re::ecs2::ComponentTypeBase const*>::operator=((re::ecs2::ImageBasedLightComponentStateImpl *)((char *)this + 16), (uint64_t)v6);
  re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)this + 11, 0);
  ++*((_DWORD *)this + 28);
  *((_DWORD *)this + 33) = 4;
  re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerSceneData>::allocBlock((_QWORD *)this + 11);
  return this;
}

uint64_t re::ecs2::ImageBasedLightComponentStateImpl::deactivateImageBasedLightComponentHandler(re::ecs2::ImageBasedLightComponentStateImpl *a1, const re::ecs2::Entity *a2)
{
  re::ecs2::ImageBasedLightComponentStateImpl::clearDataForEntity(a1, a2);
  return 0;
}

uint64_t re::ecs2::ImageBasedLightComponentStateImpl::removeImageBasedLightComponentHandler(re::ecs2::ImageBasedLightComponentStateImpl *a1, const re::ecs2::Entity *a2)
{
  re::ecs2::ImageBasedLightComponentStateImpl::clearDataForEntity(a1, a2);
  return 0;
}

uint64_t re::ecs2::ImageBasedLightComponentStateImpl::didReparentEntityHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v4 = a2;
  do
  {
    v5 = v4;
    v4 = *(_QWORD *)(v4 + 24);
  }
  while (v4);
  v6 = *(_QWORD *)(v5 + 16);
  v7 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(v6 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::WorldRootComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v7 && *(_QWORD *)(v7 + 24))
  {
    v8 = *(_QWORD *)(a1 + 8);
    v12 = v6;
    v9 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v8 + 216), &v12);
    if (v9 == -1)
      v10 = 0;
    else
      v10 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v8 + 160, *(_QWORD *)(*(_QWORD *)(v8 + 224) + 16 * v9 + 8));
    re::ecs2::ImageBasedLightComponentStateImpl::processWorldIdChangeInEntityHierarchy(v10, a2);
    *(_BYTE *)(a1 + 280) = 1;
  }
  return 0;
}

_QWORD *re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerSceneData>::destroy(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _OWORD *v18;

  v2 = WORD1(a2);
  v3 = result[2];
  if (WORD1(a2) < v3)
  {
    v4 = a2;
    v5 = result;
    v6 = (unsigned __int16)(v3 - 1) == WORD1(a2) ? *((_DWORD *)result + 12) : *((_DWORD *)result + 11);
    if ((unsigned __int16)a2 < v6)
    {
      v7 = (unsigned __int16)a2;
      v8 = result[4];
      v9 = *(_DWORD *)(*(_QWORD *)(v8 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2);
      if (v9 && v9 == (HIDWORD(a2) & 0xFFFFFF))
      {
        v11 = *(_QWORD *)(v8 + 16 * WORD1(a2));
        if (v11)
        {
          v12 = v11 + ((unint64_t)(unsigned __int16)a2 << 7);
          v13 = *(_QWORD *)(v12 + 120);
          if (v13)
          {
            v14 = (_QWORD *)(v12 + 64);
            v15 = v11 + ((unint64_t)(unsigned __int16)a2 << 7);
            v17 = *(_QWORD *)(v15 + 72);
            v16 = (_QWORD *)(v15 + 72);
            if (v17)
              *v16 = 0;
            if (*v14)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
              *v14 = 0;
            }
            v18 = (_OWORD *)(v11 + (v7 << 7));
            v18[6] = 0u;
            v18[7] = 0u;
            v18[5] = 0u;
          }
          result = re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::~DataArray((uint64_t *)(v11 + (v7 << 7)));
          if (v5[2] <= v2)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(_DWORD *)(*(_QWORD *)(v5[4] + 16 * v2 + 8) + 4 * v7) = 0;
          *(_DWORD *)v12 = *((_DWORD *)v5 + 13);
          *((_DWORD *)v5 + 13) = v4;
          --*((_DWORD *)v5 + 10);
        }
      }
    }
  }
  return result;
}

double re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::remove(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  double result;
  uint64_t v5;
  int8x16_t *v6;
  int8x16_t v7;
  int8x8_t v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v3 = re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(a1, a2);
  if (v3 != -1)
  {
    v5 = v3;
    v6 = (int8x16_t *)(*a1 + (v3 & 0xFFFFFFFFFFFFFFF0));
    v7.i64[0] = -1;
    v7.i64[1] = -1;
    v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v6, v7), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    if (v8)
      v9 = -1;
    else
      v9 = 0x80;
    v6->i8[v3 & 0xF] = v9;
    v10 = a1[1];
    v11 = (_QWORD *)(v10 + 72 * v3);
    v12 = 0xBF58476D1CE4E5B9 * (*v11 ^ (*v11 >> 30));
    a1[5] ^= ((0x94D049BB133111EBLL * (v12 ^ (v12 >> 27))) >> 31) ^ (0x94D049BB133111EBLL * (v12 ^ (v12 >> 27)));
    v15 = (void *)v11[7];
    v14 = v11 + 7;
    v13 = v15;
    if (v15)
    {

      *v14 = 0;
    }
    re::DynamicArray<re::IBL>::deinit(v10 + 72 * v5 + 16);
    v16 = a1[2];
    v17 = a1[3] - 1;
    v18 = a1[4];
    if (v8)
      ++v18;
    a1[3] = v17;
    a1[4] = v18;
    if (v16 >= 0x11 && v17 < v16 >> 2)
      return re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(a1, 0);
  }
  return result;
}

unint64_t re::ecs2::ImageBasedLightComponentStateImpl::didDependentComponentChange(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t result;

  result = re::ecs2::ImageBasedLightComponentStateImpl::processWorldIdChangeInEntityHierarchy(a2, a3);
  *(_BYTE *)(a1 + 280) = 1;
  return result;
}

unint64_t re::ecs2::ImageBasedLightComponentStateImpl::processWorldIdChangeInEntityHierarchy(unint64_t result, uint64_t a2)
{
  uint64_t v3;
  re::ecs2::Component *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  if ((*(_BYTE *)(a2 + 288) & 1) != 0)
  {
    v3 = result;
    result = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (result)
    {
      v4 = (re::ecs2::Component *)result;
      v5 = 24;
      v6 = 0xFFFFFFFFLL;
      do
      {
        v7 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(v3 + 16), *(_QWORD *)(v3 + v5), v4);
        if (v7 != -1 && (v8 & 0xFFFFFF00000000) != 0)
        {
          v10 = v7;
          v6 = v8;
          goto LABEL_11;
        }
        v5 += 8;
      }
      while (v5 != 56);
      v10 = -1;
LABEL_11:
      result = re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(v3, v10, v6);
    }
    v11 = *(_QWORD *)(a2 + 328);
    if (v11)
    {
      v12 = *(uint64_t **)(a2 + 344);
      v13 = 8 * v11;
      do
      {
        v14 = *v12++;
        result = re::ecs2::ImageBasedLightComponentStateImpl::processWorldIdChangeInEntityHierarchy(v3, v14);
        v13 -= 8;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t re::ecs2::ImageBasedLightComponentStateImpl::clearDataForEntity(re::ecs2::ImageBasedLightComponentStateImpl *this, const re::ecs2::Entity *a2)
{
  uint64_t *v4;
  uint64_t result;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  unint64_t v37;
  int8x16_t *v38;
  int8x16_t v39;
  int8x8_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int8x16_t *v50;
  int8x16_t v51;
  int8x8_t v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  re *v60;
  uint64_t DefaultIBLData;
  const re::ecs2::Entity *v62;
  const re::ecs2::Entity *v63;
  NSObject *v64;
  uint64_t v65;
  _BYTE v66[28];
  __int16 v67;
  _BYTE v68[18];
  int v69;
  uint8_t buf[16];
  __int128 v71;
  _OWORD v72[2];
  __int128 v73;
  uint64_t v74;

  v74 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)((char *)this + 216);
  result = re::HashBrown<re::ecs2::Entity const*,re::ecs2::ImageBasedLightComponentStateImpl::EntityDataHandle,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find((_QWORD *)this + 27, (unint64_t)a2);
  if (result == -1)
    return result;
  v6 = (unint64_t *)result;
  v7 = 0x94D049BB133111EBLL;
  v65 = *((_QWORD *)this + 28);
  v8 = v65 + 32 * result;
  v9 = (_QWORD *)re::DataArray<re::ecs2::ShadowPlaneInfo>::get((uint64_t)this + 88, *(_QWORD *)(v8 + 8));
  v11 = *(_QWORD *)(v8 + 16);
  v10 = (uint64_t *)(v8 + 16);
  v12 = re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::get(v9[2], v9[4], v11);
  v13 = re::ecs2::EntityComponentCollection::get((const re::ecs2::Entity *)((char *)a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v13)
    goto LABEL_29;
  v14 = *(_QWORD *)(v12 + 88);
  v15 = *(_QWORD *)(v12 + 72);
  if (v15)
  {
    v16 = 8 * v15;
    v17 = *(_QWORD **)(v12 + 88);
    while (*v17 != v13)
    {
      ++v17;
      v16 -= 8;
      if (!v16)
      {
        v17 = (_QWORD *)(v14 + 8 * v15);
        break;
      }
    }
  }
  else
  {
    v17 = *(_QWORD **)(v12 + 88);
  }
  v18 = ((uint64_t)v17 - v14) >> 3;
  if (v18 == v15)
    goto LABEL_29;
  v7 = *(_QWORD *)(v12 + 16);
  if (v7 <= v18)
  {
    v73 = 0u;
    memset(v72, 0, sizeof(v72));
    *(_OWORD *)buf = 0u;
    v71 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v66 = 136315906;
    *(_QWORD *)&v66[4] = "removeAt";
    *(_WORD *)&v66[12] = 1024;
    *(_DWORD *)&v66[14] = 931;
    *(_WORD *)&v66[18] = 2048;
    *(_QWORD *)&v66[20] = v18;
    v67 = 2048;
    *(_QWORD *)v68 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_60:
    v73 = 0u;
    memset(v72, 0, sizeof(v72));
    *(_OWORD *)buf = 0u;
    v71 = 0u;
    v4 = (uint64_t *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    *(_DWORD *)v66 = 136315906;
    *(_QWORD *)&v66[4] = "removeAt";
    *(_WORD *)&v66[12] = 1024;
    *(_DWORD *)&v66[14] = 931;
    *(_WORD *)&v66[18] = 2048;
    *(_QWORD *)&v66[20] = v18;
    v67 = 2048;
    *(_QWORD *)v68 = v7;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_61;
  }
  if (v7 - 1 > v18)
  {
    v19 = *(_QWORD *)(v12 + 32);
    v20 = v19 + 224 * v7;
    v21 = v19 + 224 * v18;
    NS::SharedPtr<MTL::Texture>::operator=((void **)v21, (void **)(v20 - 224));
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v21 + 8), (void **)(v20 - 216));
    v23 = *(_OWORD *)(v20 - 192);
    v22 = *(_OWORD *)(v20 - 176);
    *(_OWORD *)(v21 + 16) = *(_OWORD *)(v20 - 208);
    *(_OWORD *)(v21 + 32) = v23;
    *(_OWORD *)(v21 + 48) = v22;
    v25 = *(_OWORD *)(v20 - 144);
    v24 = *(_OWORD *)(v20 - 128);
    v26 = *(_OWORD *)(v20 - 160);
    *(_QWORD *)(v21 + 110) = *(_QWORD *)(v20 - 114);
    *(_OWORD *)(v21 + 80) = v25;
    *(_OWORD *)(v21 + 96) = v24;
    *(_OWORD *)(v21 + 64) = v26;
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v21 + 120), (void **)(v20 - 104));
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v21 + 128), (void **)(v20 - 96));
    *(_QWORD *)(v21 + 136) = *(_QWORD *)(v20 - 88);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v21 + 144), (void **)(v20 - 80));
    NS::SharedPtr<MTL::Texture>::operator=((void **)(v21 + 152), (void **)(v20 - 72));
    v27 = *(_OWORD *)(v20 - 64);
    v28 = *(_OWORD *)(v20 - 48);
    v29 = *(_OWORD *)(v20 - 32);
    *(_WORD *)(v21 + 208) = *(_WORD *)(v20 - 16);
    *(_OWORD *)(v21 + 176) = v28;
    *(_OWORD *)(v21 + 192) = v29;
    *(_OWORD *)(v21 + 160) = v27;
    v7 = *(_QWORD *)(v12 + 16);
  }
  v30 = *(_QWORD *)(v12 + 32) + 224 * v7;
  v31 = *(void **)(v30 - 72);
  if (v31)
  {

    *(_QWORD *)(v30 - 72) = 0;
  }
  v32 = *(void **)(v30 - 80);
  if (v32)
  {

    *(_QWORD *)(v30 - 80) = 0;
  }
  v33 = *(void **)(v30 - 96);
  if (v33)
  {

    *(_QWORD *)(v30 - 96) = 0;
  }
  v34 = *(void **)(v30 - 104);
  if (v34)
  {

    *(_QWORD *)(v30 - 104) = 0;
  }
  v35 = *(void **)(v30 - 216);
  if (v35)
  {

    *(_QWORD *)(v30 - 216) = 0;
  }
  v36 = *(void **)(v30 - 224);
  if (v36)
  {

    *(_QWORD *)(v30 - 224) = 0;
  }
  --*(_QWORD *)(v12 + 16);
  ++*(_DWORD *)(v12 + 24);
  v7 = *(_QWORD *)(v12 + 72);
  if (v7 <= v18)
    goto LABEL_60;
  v37 = v7 - 1;
  if (v7 - 1 > v18)
  {
    *(_QWORD *)(*(_QWORD *)(v12 + 88) + 8 * v18) = *(_QWORD *)(*(_QWORD *)(v12 + 88) + 8 * v7 - 8);
    *(_QWORD *)(v12 + 72) = v37;
    ++*(_DWORD *)(v12 + 80);
    v7 = 0x94D049BB133111EBLL;
    goto LABEL_29;
  }
  *(_QWORD *)(v12 + 72) = v37;
  ++*(_DWORD *)(v12 + 80);
  v7 = 0x94D049BB133111EBLL;
  if (!v37)
  {
    re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::destroy((uint64_t)v9, *v10);
    v12 = (uint64_t)(v9 + 8);
    v47 = v65 + 32 * (_QWORD)v6;
    v48 = *(_QWORD *)(v47 + 24);
    v6 = (unint64_t *)(v47 + 24);
    v49 = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v9 + 8, v48);
    if (v49 == -1)
      goto LABEL_47;
    v50 = (int8x16_t *)(v9[8] + (v49 & 0xFFFFFFFFFFFFFFF0));
    v51.i64[0] = -1;
    v51.i64[1] = -1;
    v52 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v50, v51), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    if (v52)
      v53 = -1;
    else
      v53 = 0x80;
    v50->i8[v49 & 0xF] = v53;
    v54 = v9[10];
    v55 = *(_QWORD *)(v9[9] + 16 * v49);
    v56 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v55 ^ (v55 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v55 ^ (v55 >> 30))) >> 27));
    v9[13] ^= (v56 >> 31) ^ v56;
    v57 = v9[12];
    if (v52)
      ++v57;
    v58 = v9[11] - 1;
    v9[11] = v58;
    v9[12] = v57;
    if (v54 < 0x11 || v58 >= v54 >> 2)
    {
LABEL_47:
      re::AssetHandle::AssetHandle((re::AssetHandle *)buf, (const re::AssetHandle *)(*((_QWORD *)this + 1) + 1240));
      if (*(_QWORD *)&buf[8])
      {
        v59 = atomic_load((unsigned int *)(*(_QWORD *)&buf[8] + 704));
        re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
        if (v59 == 2)
        {
          memset(v66, 0, sizeof(v66));
          *(_QWORD *)&v68[2] = 0;
          *(_QWORD *)&v68[10] = 0;
          v69 = 0;
          DefaultIBLData = re::ecs2::ImageBasedLightComponentStateImpl::getDefaultIBLData(this);
          re::DynamicArray<re::IBL>::add((_anonymous_namespace_ *)v66, DefaultIBLData);
          v62 = a2;
          do
          {
            v63 = v62;
            v62 = (const re::ecs2::Entity *)*((_QWORD *)v62 + 3);
          }
          while (v62);
          *(_QWORD *)buf = *((_QWORD *)v63 + 2);
          *(_QWORD *)&buf[8] = *(_QWORD *)v66;
          memset(v66, 0, 24);
          v71 = *(_OWORD *)&v66[8];
          ++*(_DWORD *)&v66[24];
          LODWORD(v72[0]) = 1;
          *(_OWORD *)((char *)v72 + 8) = *(_OWORD *)&v68[2];
          *(_OWORD *)&v68[2] = 0u;
          DWORD2(v72[1]) = v69;
          re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::addOrReplace((re::ecs2::ImageBasedLightComponentStateImpl *)((char *)this + 288), v6, (uint64_t)buf);
          if (*(_QWORD *)&v72[1])
          {

            *(_QWORD *)&v72[1] = 0;
          }
          re::DynamicArray<re::IBL>::deinit((uint64_t)&buf[8]);
          if (*(_QWORD *)&v68[10])
          {

            *(_QWORD *)&v68[10] = 0;
          }
          re::DynamicArray<re::IBL>::deinit((uint64_t)v66);
          goto LABEL_29;
        }
      }
      else
      {
        re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
      }
      v64 = *re::graphicsLogObjects(v60);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_224FE9000, v64, OS_LOG_TYPE_DEFAULT, "Failed to add default IBL data to the world upon IBLComponent removal because the default IBL asset hasn't been loaded yet.", buf, 2u);
      }
      goto LABEL_29;
    }
LABEL_61:
    re::HashBrown<unsigned long long,re::DataArrayHandle<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize((uint64_t *)v12, 0);
    goto LABEL_47;
  }
LABEL_29:
  result = re::HashBrown<re::ecs2::Entity const*,re::ecs2::ImageBasedLightComponentStateImpl::EntityDataHandle,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(v4, (unint64_t)a2);
  if (result != -1)
  {
    v38 = (int8x16_t *)(*((_QWORD *)this + 27) + (result & 0xFFFFFFFFFFFFFFF0));
    v39.i64[0] = -1;
    v39.i64[1] = -1;
    v40 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v38, v39), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    if (v40)
      v41 = -1;
    else
      v41 = 0x80;
    v38->i8[result & 0xF] = v41;
    v42 = *((_QWORD *)this + 29);
    v43 = *(_QWORD *)(*((_QWORD *)this + 28) + 32 * result);
    v44 = ((0xBF58476D1CE4E5B9 * (v43 ^ (v43 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v43 ^ (v43 >> 30))) >> 27)) * v7;
    *((_QWORD *)this + 32) ^= (v44 >> 31) ^ v44;
    v45 = *((_QWORD *)this + 31);
    if (v40)
      ++v45;
    v46 = *((_QWORD *)this + 30) - 1;
    *((_QWORD *)this + 30) = v46;
    *((_QWORD *)this + 31) = v45;
    if (v42 >= 0x11 && v46 < v42 >> 2)
      return re::HashBrown<re::ecs2::Entity const*,re::ecs2::ImageBasedLightComponentStateImpl::EntityDataHandle,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::resize(v4, 0);
  }
  return result;
}

uint64_t re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::get(unint64_t a1, uint64_t a2, int a3)
{
  if (HIWORD(a3) >= a1)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 16 * HIWORD(a3)) + 96 * (unsigned __int16)a3;
}

uint64_t re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::destroy(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;

  v2 = WORD1(a2);
  v3 = *(_QWORD *)(result + 16);
  if (WORD1(a2) < v3)
  {
    v4 = a2;
    v5 = result;
    v6 = (unsigned __int16)(v3 - 1) == WORD1(a2) ? *(_DWORD *)(result + 48) : *(_DWORD *)(result + 44);
    if ((unsigned __int16)a2 < v6)
    {
      v7 = (unsigned __int16)a2;
      v8 = *(_QWORD *)(result + 32);
      v9 = *(_DWORD *)(*(_QWORD *)(v8 + 16 * WORD1(a2) + 8) + 4 * (unsigned __int16)a2);
      if (v9 && v9 == (HIDWORD(a2) & 0xFFFFFF))
      {
        v11 = *(_QWORD *)(v8 + 16 * WORD1(a2));
        if (v11)
        {
          v12 = v11 + 96 * (unsigned __int16)a2;
          v13 = *(_QWORD *)(v12 + 56);
          if (v13)
          {
            v14 = v11 + 96 * (unsigned __int16)a2;
            v16 = *(_QWORD *)(v14 + 88);
            v15 = (_QWORD *)(v14 + 88);
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
            *v15 = 0;
            *(_QWORD *)(v12 + 64) = 0;
            *(_QWORD *)(v12 + 72) = 0;
            *(_QWORD *)(v12 + 56) = 0;
            ++*(_DWORD *)(v11 + 96 * v7 + 80);
          }
          v17 = *(void **)(v12 + 40);
          if (v17)
          {

            *(_QWORD *)(v12 + 40) = 0;
          }
          result = re::DynamicArray<re::IBL>::deinit(v11 + 96 * v7);
          if (*(_QWORD *)(v5 + 16) <= v2)
          {
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
          }
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 16 * v2 + 8) + 4 * v7) = 0;
          *(_DWORD *)v12 = *(_DWORD *)(v5 + 52);
          *(_DWORD *)(v5 + 52) = v4;
          --*(_DWORD *)(v5 + 40);
        }
      }
    }
  }
  return result;
}

__n128 re::DynamicArray<re::IBL>::add(_anonymous_namespace_ *this, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v4 = *((_QWORD *)this + 2);
  if (v4 >= *((_QWORD *)this + 1))
  {
    re::DynamicArray<re::IBL>::growCapacity(this, v4 + 1);
    v4 = *((_QWORD *)this + 2);
  }
  v5 = *((_QWORD *)this + 4) + 224 * v4;
  *(_QWORD *)v5 = *(id *)a2;
  *(_QWORD *)(v5 + 8) = *(id *)(a2 + 8);
  v7 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 32) = v7;
  *(_OWORD *)(v5 + 48) = v6;
  v9 = *(_OWORD *)(a2 + 80);
  v8 = *(_OWORD *)(a2 + 96);
  v10 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(v5 + 110) = *(_QWORD *)(a2 + 110);
  *(_OWORD *)(v5 + 80) = v9;
  *(_OWORD *)(v5 + 96) = v8;
  *(_OWORD *)(v5 + 64) = v10;
  *(_QWORD *)(v5 + 120) = *(id *)(a2 + 120);
  *(_QWORD *)(v5 + 128) = *(id *)(a2 + 128);
  *(_QWORD *)(v5 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(v5 + 144) = *(id *)(a2 + 144);
  *(_QWORD *)(v5 + 152) = *(id *)(a2 + 152);
  v12 = *(_OWORD *)(a2 + 176);
  result = *(__n128 *)(a2 + 192);
  v13 = *(_OWORD *)(a2 + 160);
  *(_WORD *)(v5 + 208) = *(_WORD *)(a2 + 208);
  *(_OWORD *)(v5 + 176) = v12;
  *(__n128 *)(v5 + 192) = result;
  *(_OWORD *)(v5 + 160) = v13;
  ++*((_QWORD *)this + 2);
  ++*((_DWORD *)this + 6);
  return result;
}

uint64_t re::ecs2::ImageBasedLightComponentStateImpl::getDefaultIBLData(re::ecs2::ImageBasedLightComponentStateImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void **v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  id v13;
  id v14;
  id v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[22];
  __int128 v22;
  __int128 v23;
  id v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int16 v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 576))
    return (uint64_t)this + 352;
  re::AssetHandle::AssetHandle((re::AssetHandle *)&v14, (const re::AssetHandle *)(*((_QWORD *)this + 1) + 1240));
  v2 = re::AssetHandle::loadedAsset<re::ImageBasedLightAsset>((re::ImageBasedLightAsset *)&v14);
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v14);
  v13 = *(id *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 112) + 64) + 88);
  v3 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)(v2 + 24));
  v4 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)(v2 + 48));
  v14 = 0;
  v15 = 0;
  LODWORD(v16) = 0;
  v17 = xmmword_2260E5F10;
  v18 = xmmword_2260E5F20;
  v19 = xmmword_2260E5F40;
  LODWORD(v20) = 0;
  *(_OWORD *)v21 = xmmword_226128A40;
  *(_DWORD *)&v21[16] = 0;
  *(_WORD *)&v21[20] = 0;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  v25 = xmmword_2260E5F10;
  v26 = xmmword_2260E5F20;
  v27 = xmmword_2260E5F40;
  v28 = 256;
  if (*(_DWORD *)(v3 + 240))
    goto LABEL_10;
  v5 = v4;
  v6 = (void **)(v3 + 160);
  if (objc_msgSend(*(id *)(v3 + 160), sel_textureType) == (id)5)
  {
    if (*(_DWORD *)(v3 + 240))
      goto LABEL_10;
  }
  else
  {
    v6 = &v13;
  }
  v3 = (uint64_t)&v15;
  NS::SharedPtr<MTL::Texture>::operator=(&v15, v6);
  if (*(_DWORD *)(v5 + 240))
    goto LABEL_10;
  v7 = (void **)(v5 + 160);
  if (objc_msgSend(*(id *)(v5 + 160), sel_textureType) != (id)5)
  {
LABEL_11:
    v7 = &v13;
    goto LABEL_12;
  }
  if (*(_DWORD *)(v5 + 240))
  {
LABEL_10:
    std::__throw_bad_variant_access[abi:nn180100]();
    goto LABEL_11;
  }
LABEL_12:
  NS::SharedPtr<MTL::Texture>::operator=(&v14, v7);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 44, &v14);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 45, (void **)v3);
  v8 = *(_OWORD *)v21;
  *((_OWORD *)this + 27) = v20;
  *((_OWORD *)this + 28) = v8;
  *(_QWORD *)((char *)this + 462) = *(_QWORD *)&v21[14];
  v9 = v17;
  *((_OWORD *)this + 23) = v16;
  *((_OWORD *)this + 24) = v9;
  v10 = v19;
  *((_OWORD *)this + 25) = v18;
  *((_OWORD *)this + 26) = v10;
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 59, (void **)&v22);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 60, (void **)&v22 + 1);
  *((_QWORD *)this + 61) = v23;
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 62, (void **)&v23 + 1);
  NS::SharedPtr<MTL::Texture>::operator=((void **)this + 63, &v24);
  v11 = v26;
  *((_OWORD *)this + 32) = v25;
  *((_OWORD *)this + 33) = v11;
  *((_OWORD *)this + 34) = v27;
  *((_WORD *)this + 280) = v28;
  *((_BYTE *)this + 576) = 1;
  if (v24)
  {

    v24 = 0;
  }
  if (*((_QWORD *)&v23 + 1))
  {

    *((_QWORD *)&v23 + 1) = 0;
  }
  if (*((_QWORD *)&v22 + 1))
  {

    *((_QWORD *)&v22 + 1) = 0;
  }
  if ((_QWORD)v22)
  {

    *(_QWORD *)&v22 = 0;
  }
  if (v15)
  {

    v15 = 0;
  }
  if (v14)

  if (v13)
  return (uint64_t)this + 352;
}

void **re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::addOrReplace(_anonymous_namespace_ *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void **result;

  v6 = re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(a1, *a2);
  if (v6 == -1)
    return (void **)re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(a1, (uint64_t *)a2, a3);
  v7 = *((_QWORD *)a1 + 1) + 72 * v6;
  *(_QWORD *)(v7 + 8) = *(_QWORD *)a3;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v7 + 16, a3 + 8);
  result = NS::SharedPtr<MTL::Texture>::operator=((void **)(v7 + 56), (void **)(a3 + 48));
  *(_DWORD *)(v7 + 64) = *(_DWORD *)(a3 + 56);
  return result;
}

uint64_t re::ecs2::ImageBasedLightComponentStateImpl::getDefaultIBLDataForWorld(re::ecs2::ImageBasedLightComponentStateImpl *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t DefaultIBLData;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unsigned __int8 v14;
  const char *v16;
  float v17;
  _BYTE v18[4];
  float v19;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 1) + 136) + 24))(*(_QWORD *)(*((_QWORD *)this + 1) + 136));
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, a2) != 1)
    return re::ecs2::ImageBasedLightComponentStateImpl::getDefaultIBLData(this);
  if (!*((_BYTE *)this + 816))
  {
    DefaultIBLData = re::ecs2::ImageBasedLightComponentStateImpl::getDefaultIBLData(this);
    NS::SharedPtr<MTL::Texture>::operator=((void **)this + 74, (void **)DefaultIBLData);
    NS::SharedPtr<MTL::Texture>::operator=((void **)this + 75, (void **)(DefaultIBLData + 8));
    v7 = *(_OWORD *)(DefaultIBLData + 32);
    v6 = *(_OWORD *)(DefaultIBLData + 48);
    *((_OWORD *)this + 38) = *(_OWORD *)(DefaultIBLData + 16);
    *((_OWORD *)this + 39) = v7;
    *((_OWORD *)this + 40) = v6;
    v9 = *(_OWORD *)(DefaultIBLData + 80);
    v8 = *(_OWORD *)(DefaultIBLData + 96);
    v10 = *(_OWORD *)(DefaultIBLData + 64);
    *(_QWORD *)((char *)this + 702) = *(_QWORD *)(DefaultIBLData + 110);
    *((_OWORD *)this + 42) = v9;
    *((_OWORD *)this + 43) = v8;
    *((_OWORD *)this + 41) = v10;
    NS::SharedPtr<MTL::Texture>::operator=((void **)this + 89, (void **)(DefaultIBLData + 120));
    NS::SharedPtr<MTL::Texture>::operator=((void **)this + 90, (void **)(DefaultIBLData + 128));
    *((_QWORD *)this + 91) = *(_QWORD *)(DefaultIBLData + 136);
    NS::SharedPtr<MTL::Texture>::operator=((void **)this + 92, (void **)(DefaultIBLData + 144));
    NS::SharedPtr<MTL::Texture>::operator=((void **)this + 93, (void **)(DefaultIBLData + 152));
    v12 = *(_OWORD *)(DefaultIBLData + 176);
    v11 = *(_OWORD *)(DefaultIBLData + 192);
    v13 = *(_OWORD *)(DefaultIBLData + 160);
    *((_WORD *)this + 400) = *(_WORD *)(DefaultIBLData + 208);
    *((_OWORD *)this + 48) = v12;
    *((_OWORD *)this + 49) = v11;
    *((_OWORD *)this + 47) = v13;
    v14 = atomic_load((unsigned __int8 *)&qword_254111D50);
    if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_254111D50))
    {
      re::Defaults::floatValue((re::Defaults *)"stencilPortalDefaultIBLIntensityLV", v16, (uint64_t)v18);
      v17 = v19;
      if (!v18[0])
        v17 = 3.0;
      _MergedGlobals_289 = LODWORD(v17);
      __cxa_guard_release(&qword_254111D50);
    }
    *((_DWORD *)this + 152) = _MergedGlobals_289;
    *((_BYTE *)this + 816) = 1;
  }
  return (uint64_t)this + 592;
}

BOOL re::ecs2::ImageBasedLightComponentStateImpl::processDirtyComponents(re::ecs2::ImageBasedLightComponentStateImpl *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const re::ecs2::Entity *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v23, a5, 0);
  v9 = v23;
  v10 = v24;
  v23 = a4;
  v24 = v9;
  v25 = v10;
  v11 = (unsigned __int16)v10;
  v12 = v10 & 0xFFFF0000;
  if (v9 != a5 || v11 != 0xFFFF || v12 != 4294901760)
  {
    do
    {
      v15 = *(const re::ecs2::Entity **)(*(_QWORD *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v24)
                                       + 16);
      re::ecs2::ImageBasedLightComponentStateImpl::clearDataForEntity(a1, v15);
      v16 = *((_DWORD *)v15 + 72);
      v17 = v23;
      v18 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v24);
      if ((v16 & 1) != 0)
        v19 = 40;
      else
        v19 = 32;
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v17, v18, *(_QWORD *)(a3 + v19));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v24);
    }
    while (v24 != a5 || (unsigned __int16)v25 != 0xFFFF || WORD1(v25) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::ImageBasedLightComponentStateImpl::processPreparingComponents(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _DWORD *a5, uint64_t a6)
{
  unint64_t v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  void **v17;
  id v18;
  unsigned int *v19;
  re::AssetHandle *v20;
  unsigned int v21;
  uint64_t v22;
  re::AssetHandle *v23;
  void **v24;
  re *v25;
  uint64_t v26;
  size_t v27;
  int v28;
  NSObject *v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  const re::TextureAsset *v33;
  void **v34;
  re *v35;
  const re::TextureAsset *v36;
  NSObject *v37;
  _QWORD *v38;
  char *v39;
  char *v40;
  char *v41;
  re::ImageBasedLightAsset *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  re *v46;
  void **v47;
  re::TextureAsset *v48;
  uint64_t v49;
  uint64_t v50;
  re *v51;
  NSObject *v52;
  _QWORD *v53;
  char *v54;
  NSObject *v55;
  const char *v56;
  void **v57;
  NSObject *v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  re *v63;
  const re::TextureAsset *v64;
  NSObject *v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  size_t v72;
  void **v73;
  NSObject *v74;
  _QWORD *v75;
  char *v76;
  NSObject *v77;
  const char *v78;
  NSObject *v79;
  _QWORD *v80;
  char *v81;
  re::AssetHandle *v82;
  uint64_t v83;
  uint64_t v84;
  re *v85;
  NSObject *v86;
  _QWORD *v87;
  char *v88;
  unint64_t v89;
  unsigned int v90;
  unint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t i;
  __int128 *v102;
  __int128 *v103;
  __int128 *v104;
  unint64_t v105;
  int v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  void **v112;
  id v113;
  int v114;
  unint64_t v115;
  __int128 v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  unint64_t v121;
  int v122;
  int v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  void ***v135;
  void ***v136;
  void **v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  _anonymous_namespace_ *v141;
  unint64_t v142;
  _anonymous_namespace_ *v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  int v166;
  unint64_t v167;
  unint64_t *v168;
  uint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  _anonymous_namespace_ *v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  re::ecs2::ImageBasedLightComponent *v195;
  re::AssetHandle *v196;
  re::AssetHandle *v197;
  int v198;
  _QWORD *v199;
  unsigned int v200;
  uint64_t v201;
  unint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  size_t v206;
  void **v207;
  uint64_t v208;
  _QWORD *v209;
  re::AssetHandle *v210;
  int v211;
  unint64_t v212;
  void **v213;
  unint64_t v214;
  unint64_t v215;
  _DWORD *v216;
  id v217;
  id v218;
  uint64_t v219;
  id v220;
  id v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  _BYTE v227[22];
  __int128 v228;
  __int128 v229;
  id v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int16 v234;
  _BYTE v235[12];
  __int16 v236;
  int v237;
  __int16 v238;
  unint64_t v239;
  __int16 v240;
  unint64_t v241;
  uint8_t buf[16];
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;

  v247 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a3 + 8);
  v9 = *(_QWORD **)(a1[1] + 112);
  v10 = (unsigned __int8 *)v9[19];
  if (v10)
    v200 = *v10;
  else
    v200 = 0;
  v11 = v9[13];
  if (v11)
  {
    re::RenderFrameBox::get(v11 + 344, 0xFFFFFFFFFFFFFFFuLL);
    v9 = *(_QWORD **)(a1[1] + 112);
  }
  v218 = *(id *)(v9[8] + 88);
  v199 = (_QWORD *)(a1[20]
                  + 16
                  * re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(a1 + 19, v8)+ 8);
  v203 = re::DataArray<re::ecs2::ShadowPlaneInfo>::get((uint64_t)(a1 + 11), *v199);
  v201 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[1] + 136) + 24))(*(_QWORD *)(a1[1] + 136));
  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v220, (uint64_t)a5, 0);
  v215 = a4;
  v216 = v220;
  v217 = v221;
  if (v220 == a5 && (unsigned __int16)v221 == 0xFFFFLL && (v221 & 0xFFFF0000) == 0xFFFF0000)
    goto LABEL_9;
  v204 = (uint64_t *)(v203 + 64);
  do
  {
    v16 = re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v216);
    v17 = *(void ***)v16;
    v214 = *(_QWORD *)(*(_QWORD *)v16 + 16);
    (*(void (**)(id *__return_ptr))(*(_QWORD *)v201 + 8))(&v220);
    if ((_BYTE)v220)
      v18 = v221;
    else
      v18 = 0;
    v212 = (unint64_t)v18;
    v220 = 0;
    v221 = 0;
    LODWORD(v222) = 0;
    v223 = xmmword_2260E5F10;
    v224 = xmmword_2260E5F20;
    v225 = xmmword_2260E5F40;
    LODWORD(v226) = 0;
    *(_OWORD *)v227 = xmmword_226128A40;
    *(_DWORD *)&v227[16] = 0;
    *(_WORD *)&v227[20] = 0;
    v230 = 0;
    v228 = 0u;
    v229 = 0u;
    v231 = xmmword_2260E5F10;
    v232 = xmmword_2260E5F20;
    v233 = xmmword_2260E5F40;
    v234 = 256;
    v213 = v17;
    if (!*((_BYTE *)v17 + 136))
      goto LABEL_27;
    v19 = (unsigned int *)v17[15];
    if (!v19)
    {
      NS::SharedPtr<MTL::Texture>::operator=((void **)&v228 + 1, &v218);
      NS::SharedPtr<MTL::Texture>::operator=((void **)&v228, &v218);
      NS::SharedPtr<MTL::Texture>::operator=((void **)&v229 + 1, &v218);
      NS::SharedPtr<MTL::Texture>::operator=(&v230, &v218);
LABEL_27:
      v27 = 0;
      goto LABEL_47;
    }
    v20 = (re::AssetHandle *)(v17 + 14);
    v21 = atomic_load(v19 + 176);
    if (v21 != 2)
    {
      re::AssetHandle::loadAsync(v20);
      NS::SharedPtr<MTL::Texture>::operator=((void **)&v228 + 1, &v218);
      NS::SharedPtr<MTL::Texture>::operator=((void **)&v228, &v218);
      NS::SharedPtr<MTL::Texture>::operator=((void **)&v229 + 1, &v218);
      NS::SharedPtr<MTL::Texture>::operator=(&v230, &v218);
      v27 = 0;
      v28 = 0;
      goto LABEL_48;
    }
    v210 = (re::AssetHandle *)(v17 + 14);
    v205 = re::AssetHandle::loadedAsset<re::ImageBasedLightAsset>(v20);
    v22 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)(v205 + 24));
    if (*(_DWORD *)(v22 + 240))
      goto LABEL_231;
    v23 = (re::AssetHandle *)v22;
    v24 = (void **)(v22 + 160);
    v25 = (re *)objc_msgSend(*(id *)(v22 + 160), sel_textureType);
    v196 = v23;
    if (v25 == (re *)5)
    {
      if (*((_DWORD *)v23 + 60))
        goto LABEL_231;
      NS::SharedPtr<MTL::Texture>::operator=((void **)&v228 + 1, v24);
      v26 = v205;
    }
    else
    {
      v29 = *re::ecsComponentsLogObjects(v25);
      v26 = v205;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        v30 = re::AssetHandle::assetInfo(v210);
        if ((v30[17] & 1) != 0)
          v31 = (char *)v30[18];
        else
          v31 = (char *)v30 + 137;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v31;
        _os_log_impl(&dword_224FE9000, v29, OS_LOG_TYPE_DEFAULT, "Wrong diffuse IBL texture type [%s]. Diffuse IBL texture must be cubemap.", buf, 0xCu);
      }
    }
    v32 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)(v26 + 48));
    if (*(_DWORD *)(v32 + 240))
LABEL_231:
      std::__throw_bad_variant_access[abi:nn180100]();
    v33 = (const re::TextureAsset *)v32;
    v34 = (void **)(v32 + 160);
    v35 = (re *)objc_msgSend(*(id *)(v32 + 160), sel_textureType);
    if (v35 == (re *)5)
    {
      if (*((_DWORD *)v33 + 60))
        goto LABEL_231;
      NS::SharedPtr<MTL::Texture>::operator=((void **)&v228, v34);
    }
    else
    {
      v37 = *re::ecsComponentsLogObjects(v35);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        v38 = re::AssetHandle::assetInfo(v210);
        if ((v38[17] & 1) != 0)
          v39 = (char *)v38[18];
        else
          v39 = (char *)v38 + 137;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v39;
        _os_log_impl(&dword_224FE9000, v37, OS_LOG_TYPE_DEFAULT, "Wrong specular IBL texture type [%s]. Specular IBL texture must be cubemap.", buf, 0xCu);
      }
    }
    v17 = v213;
    re::ecs2::ImageBasedLightingHelper::checkIBLAssetVersion((re::ecs2::ImageBasedLightingHelper *)v213, v196, v33, v36);
    v40 = (char *)re::AssetHandle::assetInfo(v210);
    if ((*((_QWORD *)v40 + 13) & 1) != 0)
      v41 = (char *)*((_QWORD *)v40 + 14);
    else
      v41 = v40 + 105;
    v27 = re::RigEvaluation::HashString::operator()((int)buf, v41);
LABEL_47:
    v28 = 1;
LABEL_48:
    v206 = v27;
    if (!v17[12])
    {
      v211 = v28;
      if (!v17[6] && !v17[9])
      {
        NS::SharedPtr<MTL::Texture>::operator=(&v221, &v218);
        NS::SharedPtr<MTL::Texture>::operator=(&v220, &v218);
        v69 = (unint64_t)v213;
        goto LABEL_116;
      }
      v48 = (re::TextureAsset *)(v17 + 5);
      v49 = re::AssetHandle::loadedAsset<re::TextureAsset>(v48);
      if (v49)
      {
        v50 = v49;
        if (*(_DWORD *)(v49 + 240))
          goto LABEL_231;
        v51 = (re *)objc_msgSend(*(id *)(v49 + 160), sel_textureType);
        if (v51 == (re *)5)
        {
          if (*(_DWORD *)(v50 + 240))
            goto LABEL_231;
          NS::SharedPtr<MTL::Texture>::operator=(&v221, (void **)(v50 + 160));
        }
        else
        {
          v79 = *re::ecsComponentsLogObjects(v51);
          if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
          {
            v80 = re::AssetHandle::assetInfo(v48);
            if ((v80[17] & 1) != 0)
              v81 = (char *)v80[18];
            else
              v81 = (char *)v80 + 137;
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v81;
            _os_log_impl(&dword_224FE9000, v79, OS_LOG_TYPE_DEFAULT, "Wrong diffuse IBL texture type [%s]. Diffuse IBL texture must be cubemap.", buf, 0xCu);
          }
        }
      }
      else
      {
        re::AssetHandle::loadAsync(v48);
        NS::SharedPtr<MTL::Texture>::operator=(&v221, &v218);
        v211 = 0;
      }
      v82 = (re::AssetHandle *)(v213 + 8);
      v83 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)(v213 + 8));
      if (v83)
      {
        v84 = v83;
        if (*(_DWORD *)(v83 + 240))
          goto LABEL_231;
        v85 = (re *)objc_msgSend(*(id *)(v83 + 160), sel_textureType);
        if (v85 == (re *)5)
        {
          if (*(_DWORD *)(v84 + 240))
            goto LABEL_231;
          NS::SharedPtr<MTL::Texture>::operator=(&v220, (void **)(v84 + 160));
          goto LABEL_115;
        }
        v86 = *re::ecsComponentsLogObjects(v85);
        if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
        {
          v87 = re::AssetHandle::assetInfo(v82);
          if ((v87[17] & 1) != 0)
            v88 = (char *)v87[18];
          else
            v88 = (char *)v87 + 137;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)&buf[4] = v88;
          v77 = v86;
          v78 = "Wrong specular IBL texture type [%s]. Specular IBL texture must be cubemap.";
          goto LABEL_114;
        }
LABEL_115:
        v69 = (unint64_t)v213;
LABEL_116:
        v72 = v206;
        goto LABEL_117;
      }
      re::AssetHandle::loadAsync(v82);
LABEL_108:
      NS::SharedPtr<MTL::Texture>::operator=(&v220, &v218);
      v211 = 0;
      goto LABEL_115;
    }
    v42 = (re::ImageBasedLightAsset *)(v17 + 11);
    v43 = re::AssetHandle::loadedAsset<re::ImageBasedLightAsset>(v42);
    if (!v43)
    {
      re::AssetHandle::loadAsync(v42);
      NS::SharedPtr<MTL::Texture>::operator=(&v221, &v218);
      goto LABEL_108;
    }
    v197 = v42;
    v44 = v43;
    v45 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)(v43 + 24));
    v211 = v28;
    v195 = (re::ecs2::ImageBasedLightComponent *)v45;
    if (!v45)
    {
      v57 = NS::SharedPtr<MTL::Texture>::operator=(&v221, &v218);
      v58 = *re::ecsComponentsLogObjects((re *)v57);
      if (!os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
        goto LABEL_75;
      v59 = re::AssetHandle::assetInfo(v197);
      if ((v59[17] & 1) != 0)
        v60 = (char *)v59[18];
      else
        v60 = (char *)v59 + 137;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v60;
      v55 = v58;
      v56 = "Null diffuse texture encountered for IBL texture type [%s].";
      goto LABEL_74;
    }
    if (*(_DWORD *)(v45 + 240))
      goto LABEL_231;
    v47 = (void **)(v45 + 160);
    v46 = *(re **)(v45 + 160);
    if (!v46 || (v46 = (re *)-[re textureType](v46, sel_textureType), v46 != (re *)5))
    {
      v52 = *re::ecsComponentsLogObjects(v46);
      if (!os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        goto LABEL_75;
      v53 = re::AssetHandle::assetInfo(v197);
      if ((v53[17] & 1) != 0)
        v54 = (char *)v53[18];
      else
        v54 = (char *)v53 + 137;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v54;
      v55 = v52;
      v56 = "Wrong diffuse IBL texture type [%s]. Diffuse IBL texture must be cubemap.";
LABEL_74:
      _os_log_impl(&dword_224FE9000, v55, OS_LOG_TYPE_DEFAULT, v56, buf, 0xCu);
      goto LABEL_75;
    }
    if (*((_DWORD *)v195 + 60))
      goto LABEL_231;
    NS::SharedPtr<MTL::Texture>::operator=(&v221, v47);
LABEL_75:
    v61 = re::AssetHandle::loadedAsset<re::TextureAsset>((re::TextureAsset *)(v44 + 48));
    if (!v61)
    {
      v73 = NS::SharedPtr<MTL::Texture>::operator=(&v220, &v218);
      v74 = *re::ecsComponentsLogObjects((re *)v73);
      if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
      {
        v75 = re::AssetHandle::assetInfo(v197);
        if ((v75[17] & 1) != 0)
          v76 = (char *)v75[18];
        else
          v76 = (char *)v75 + 137;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v76;
        v77 = v74;
        v78 = "Null specular texture encountered for IBL texture type [%s].";
LABEL_114:
        _os_log_impl(&dword_224FE9000, v77, OS_LOG_TYPE_DEFAULT, v78, buf, 0xCu);
        goto LABEL_115;
      }
      goto LABEL_115;
    }
    v62 = v61;
    if (*(_DWORD *)(v61 + 240))
      goto LABEL_231;
    v63 = *(re **)(v61 + 160);
    if (v63 && (v63 = (re *)-[re textureType](v63, sel_textureType), v63 == (re *)5))
    {
      if (*(_DWORD *)(v62 + 240))
        goto LABEL_231;
      NS::SharedPtr<MTL::Texture>::operator=(&v220, (void **)(v62 + 160));
    }
    else
    {
      v65 = *re::ecsComponentsLogObjects(v63);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
      {
        v66 = re::AssetHandle::assetInfo(v197);
        if ((v66[17] & 1) != 0)
          v67 = (char *)v66[18];
        else
          v67 = (char *)v66 + 137;
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v67;
        _os_log_impl(&dword_224FE9000, v65, OS_LOG_TYPE_DEFAULT, "Wrong specular IBL texture type [%s]. Specular IBL texture must be cubemap.", buf, 0xCu);
      }
    }
    v68 = (uint64_t)v195;
    if (!v195)
      goto LABEL_115;
    v69 = (unint64_t)v213;
    re::ecs2::ImageBasedLightingHelper::checkIBLAssetVersion((re::ecs2::ImageBasedLightingHelper *)v213, v195, (const re::TextureAsset *)v62, v64);
    v70 = (char *)re::AssetHandle::assetInfo(v197);
    if ((*((_QWORD *)v70 + 13) & 1) != 0)
      v71 = (char *)*((_QWORD *)v70 + 14);
    else
      v71 = v70 + 105;
    v72 = re::RigEvaluation::HashString::operator()((int)buf, v71) + v206;
LABEL_117:
    v89 = *(_QWORD *)(v69 + 1264);
    v90 = *(unsigned __int8 *)(v69 + 136);
    if (*(_BYTE *)(v69 + 1208))
    {
      v227[20] = 1;
      v227[21] = v90;
    }
    else
    {
      if (!*(_BYTE *)(v69 + 136))
      {
        v91 = 0;
        *(_WORD *)&v227[20] = 0;
        goto LABEL_120;
      }
      v227[20] = *(_BYTE *)(v69 + 1209);
      v90 = 1;
      v227[21] = 1;
      if (!v227[20])
      {
        v91 = 0;
        goto LABEL_120;
      }
    }
    v91 = 0xBF58476D1CE4E5B9;
LABEL_120:
    v92 = *(unsigned __int8 *)(v69 + 1209);
    if (*(_BYTE *)(v69 + 1209))
    {
      v93 = *(_OWORD *)(v69 + 1232);
      v231 = *(_OWORD *)(v69 + 1216);
      v232 = v93;
      v94 = *(_OWORD *)(v69 + 1248);
      v233 = v94;
    }
    else
    {
      v231 = xmmword_2260E5F10;
      v232 = xmmword_2260E5F20;
      HIDWORD(v94) = 0;
      v233 = xmmword_2260E5F40;
    }
    v95 = 0;
    v96 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v89 ^ (v89 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v89 ^ (v89 >> 30))) >> 27));
    v97 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v90) ^ ((0xBF58476D1CE4E5B9 * v90) >> 27));
    v98 = (v96 ^ (v96 >> 31))
        + v72
        + ((0x94D049BB133111EBLL * (v91 ^ (v91 >> 27))) ^ ((0x94D049BB133111EBLL * (v91 ^ (v91 >> 27))) >> 31))
        + (v97 ^ (v97 >> 31));
    v99 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v92) ^ ((0xBF58476D1CE4E5B9 * v92) >> 27));
    v100 = v98 + (v99 ^ (v99 >> 31));
    do
    {
      for (i = 0; i != 12; i += 4)
      {
        v102 = &v231;
        v103 = &v232;
        v104 = &v233;
        if ((_DWORD)v95)
        {
          v102 = (__int128 *)((char *)&v231 + 8);
          v103 = (__int128 *)((char *)&v232 + 8);
          v104 = (__int128 *)((char *)&v233 + 8);
          if ((_DWORD)v95 != 2)
          {
            v102 = (__int128 *)((char *)&v231 + 4);
            v103 = (__int128 *)((char *)&v232 + 4);
            v104 = (__int128 *)((char *)&v233 + 4);
            if ((_DWORD)v95 != 1)
            {
              re::internal::assertLog((re::internal *)4, v68, "assertion failure: '%s' (%s:line %i) The row index is out of range. Allowed values are 0 to 2.", "!\"Unreachable code\"", "row", 549);
              _os_crash();
              __break(1u);
LABEL_226:
              v219 = 0;
              v245 = 0u;
              v246 = 0u;
              v243 = 0u;
              v244 = 0u;
              *(_OWORD *)buf = 0u;
              v188 = v139;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v235 = 136315906;
              *(_QWORD *)&v235[4] = "operator[]";
              v236 = 1024;
              v237 = 789;
              v238 = 2048;
              v239 = v188;
              v240 = 2048;
              v241 = v69;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
LABEL_227:
              v219 = 0;
              v245 = 0u;
              v246 = 0u;
              v243 = 0u;
              v244 = 0u;
              *(_OWORD *)buf = 0u;
              v189 = v139;
              os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
              *(_DWORD *)v235 = 136315906;
              *(_QWORD *)&v235[4] = "operator[]";
              v236 = 1024;
              v237 = 789;
              v238 = 2048;
              v239 = v189;
              v240 = 2048;
              v241 = v69;
              _os_log_send_and_compose_impl();
              _os_crash_msg();
              __break(1u);
              goto LABEL_228;
            }
          }
        }
        LODWORD(v94) = *(_DWORD *)v102;
        DWORD1(v94) = *(_DWORD *)v103;
        DWORD2(v94) = *(_DWORD *)v104;
        *(_OWORD *)buf = v94;
        v105 = 0xBF58476D1CE4E5B9 * (*(unsigned int *)&buf[i] ^ ((unint64_t)*(unsigned int *)&buf[i] >> 30));
        v100 += ((0x94D049BB133111EBLL * (v105 ^ (v105 >> 27))) ^ ((0x94D049BB133111EBLL * (v105 ^ (v105 >> 27))) >> 31))
              * v95;
      }
      ++v95;
    }
    while (v95 != 3);
    v106 = *(unsigned __int8 *)(v69 + 136);
    if (*(_BYTE *)(v69 + 136))
      v107 = *(unsigned int *)(v69 + 140);
    else
      v107 = 0;
    LODWORD(v229) = v107;
    if (v106 && *(_BYTE *)(v69 + 137))
      v108 = *(unsigned int *)(v69 + 144);
    else
      v108 = 0;
    v109 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v107 ^ (v107 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v107 ^ (v107 >> 30))) >> 27));
    v110 = (v109 ^ (v109 >> 31)) + v100;
    DWORD1(v229) = v108;
    v111 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v108 ^ (v108 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v108 ^ (v108 >> 30))) >> 27));
    *(_QWORD *)(v69 + 1328) = v110 + (v111 ^ (v111 >> 31));
    v112 = (void **)(v69 + 1320);
    if (!*(_QWORD *)(v69 + 1320) || !*(_QWORD *)(v69 + 1312))
    {
      *(_QWORD *)buf = *(id *)(*(_QWORD *)(a1[1] + 112) + 184);
      v113 = objc_msgSend(objc_msgSend(MEMORY[0x24BDDD740], sel_alloc), sel_init);
      objc_msgSend(v113, sel_setStorageMode_, 2);
      objc_msgSend(v113, sel_setPixelFormat_, 115);
      objc_msgSend(v113, sel_setWidth_, 256);
      objc_msgSend(v113, sel_setHeight_, 256);
      objc_msgSend(v113, sel_setUsage_, 7);
      objc_msgSend(v113, sel_setMipmapLevelCount_, 8);
      objc_msgSend(v113, sel_setSampleCount_, 1);
      objc_msgSend(v113, sel_setTextureType_, 5);
      re::mtl::Device::makeTexture(v113, (id *)buf, v235);
      v207 = (void **)(v69 + 1320);
      NS::SharedPtr<MTL::Texture>::operator=((void **)(v69 + 1320), (void **)v235);
      if (*(_QWORD *)v235)

      objc_msgSend(v113, sel_setWidth_, 64);
      objc_msgSend(v113, sel_setHeight_, 64);
      objc_msgSend(v113, sel_setMipmapLevelCount_, 1);
      re::mtl::Device::makeTexture(v113, (id *)buf, v235);
      NS::SharedPtr<MTL::Texture>::operator=(v213 + 164, (void **)v235);
      if (*(_QWORD *)v235)

      if (v113)
      v69 = (unint64_t)v213;
      v112 = v207;
    }
    NS::SharedPtr<MTL::Texture>::operator=((void **)&v229 + 1, v112);
    NS::SharedPtr<MTL::Texture>::operator=(&v230, (void **)(v69 + 1312));
    v114 = *(_DWORD *)(v69 + 1200);
    LODWORD(v222) = *(_DWORD *)(v69 + 28);
    LODWORD(v226) = v114;
    v115 = *(unsigned int *)(v69 + 1288) | ((unint64_t)*(unsigned __int8 *)(v69 + 1296) << 32);
    *(_QWORD *)buf = *(_QWORD *)(v69 + 1280);
    *(_QWORD *)&buf[8] = v115;
    *(_QWORD *)&v116 = re::ColorGamut3F::as((uint64_t *)buf, v200, 1);
    DWORD2(v116) = v117;
    *(_OWORD *)v227 = v116;
    *(_DWORD *)&v227[16] = *(_DWORD *)(v69 + 1204);
    HIBYTE(v234) = *(_BYTE *)(v69 + 148);
    v118 = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v204, v212);
    if (v118 != -1)
    {
      v120 = (_QWORD *)v203;
      goto LABEL_164;
    }
    v121 = v203;
    v122 = *(_DWORD *)(v203 + 56);
    if ((v122 + 1) >> 24)
      v123 = 1;
    else
      v123 = v122 + 1;
    *(_DWORD *)(v203 + 56) = v123;
    v124 = *(unsigned __int16 *)(v203 + 52);
    v125 = *(unsigned __int16 *)(v203 + 54);
    if (v124 == 0xFFFF && (_DWORD)v125 == 0xFFFF)
    {
      if (*(_DWORD *)(v203 + 48) >= *(_DWORD *)(v203 + 44))
      {
        re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::allocBlock((_QWORD *)v203);
        v121 = v203;
      }
      v126 = *(_QWORD *)(v121 + 16);
      v127 = (unsigned __int16)(v126 - 1);
      if (v126)
      {
        v124 = *(unsigned int *)(v121 + 48);
        if (v124 < 0x10000)
        {
          v208 = (unsigned __int16)(v126 - 1);
          v128 = (_QWORD *)(*(_QWORD *)(v121 + 32) + 16 * v127);
          *(_DWORD *)(v121 + 48) = v124 + 1;
          *(_DWORD *)(v128[1] + 4 * v124) = *(_DWORD *)(v121 + 56);
          v129 = *v128 + 96 * v124;
          goto LABEL_163;
        }
LABEL_230:
        re::internal::assertLog((re::internal *)5, v119, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v124);
        _os_crash();
        __break(1u);
        goto LABEL_231;
      }
LABEL_228:
      v219 = 0;
      v245 = 0u;
      v246 = 0u;
      v243 = 0u;
      v244 = 0u;
      *(_OWORD *)buf = 0u;
      v190 = v127;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v235 = 136315906;
      *(_QWORD *)&v235[4] = "operator[]";
      v236 = 1024;
      v237 = 789;
      v238 = 2048;
      v239 = v190;
      v240 = 2048;
      v241 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_229:
      v219 = 0;
      v245 = 0u;
      v246 = 0u;
      v243 = 0u;
      v244 = 0u;
      *(_OWORD *)buf = 0u;
      v124 = MEMORY[0x24BDACB70];
      v191 = v125;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      *(_DWORD *)v235 = 136315906;
      *(_QWORD *)&v235[4] = "operator[]";
      v236 = 1024;
      v237 = 789;
      v238 = 2048;
      v239 = v191;
      v240 = 2048;
      v241 = v69;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
      goto LABEL_230;
    }
    v69 = *(_QWORD *)(v203 + 16);
    if (v69 <= v125)
      goto LABEL_229;
    v208 = *(unsigned __int16 *)(v203 + 54);
    v130 = (_QWORD *)(*(_QWORD *)(v203 + 32) + 16 * v125);
    *(_DWORD *)(v130[1] + 4 * v124) = v123;
    v129 = *v130 + 96 * v124;
    *(_DWORD *)(v203 + 52) = *(_DWORD *)v129;
LABEL_163:
    ++*(_DWORD *)(v121 + 40);
    *(_OWORD *)(v129 + 64) = 0u;
    *(_OWORD *)(v129 + 80) = 0u;
    *(_OWORD *)(v129 + 32) = 0u;
    *(_OWORD *)(v129 + 48) = 0u;
    *(_OWORD *)v129 = 0u;
    *(_OWORD *)(v129 + 16) = 0u;
    v198 = *(_DWORD *)(v121 + 56);
    v120 = (_QWORD *)v121;
    v118 = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v204, v212);
    if (v118 == -1)
    {
      v155 = v120;
      if (!v120[15])
      {
        v155 = (_QWORD *)v203;
      }
      v156 = v155[12];
      if (!v156 || (v157 = v155[10], v157 > 8 * v156))
      {
        re::HashBrown<unsigned long long,re::DataArrayHandle<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(v204, 1u);
        v155 = (_QWORD *)v203;
        v157 = *(_QWORD *)(v203 + 80);
      }
      v158 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v212 ^ (v212 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v212 ^ (v212 >> 30))) >> 27));
      v159 = v158 ^ (v158 >> 31);
      v160 = v157 >> 4;
      v161 = v159 % (v157 >> 4);
      v162 = *v204;
      v163 = v161;
      while (1)
      {
        v164 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v162 + 16 * v163)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
        if (v164 < 0x40)
          break;
        if (v163 + 1 == v160)
          v163 = 0;
        else
          ++v163;
        if (v163 == v161)
        {
          re::internal::assertLog((re::internal *)4, v131, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
          result = _os_crash();
          __break(1u);
          return result;
        }
      }
      v165 = v162 + 16 * v163;
      v166 = *(unsigned __int8 *)(v165 + v164);
      *(_BYTE *)(v165 + v164) = v159 & 0x7F;
      v167 = v164 + 16 * v163;
      v168 = (unint64_t *)(v155[9] + 16 * v167);
      *v168 = v212;
      v168[1] = (v208 << 16) | ((unint64_t)(v198 & 0xFFFFFF) << 32) | v124;
      v169 = v155[12];
      ++v155[11];
      v155[12] = v169 - (v166 == 255);
      v170 = (unint64_t *)(v155[9] + 16 * v167);
      v171 = *v170;
      v132 = v170 + 1;
      v172 = 0x94D049BB133111EBLL
           * ((0xBF58476D1CE4E5B9 * (v171 ^ (v171 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v171 ^ (v171 >> 30))) >> 27));
      v155[13] ^= (v172 >> 31) ^ v172;
      v120 = v155;
    }
    else
    {
LABEL_164:
      v132 = (_QWORD *)(v120[9] + 16 * v118 + 8);
    }
    re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::remove(a1 + 36, v212);
    v209 = v132;
    v133 = (_QWORD *)re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::get(v120[2], v120[4], *v132);
    v134 = v133;
    v135 = (void ***)v133[11];
    v69 = v133[9];
    v136 = v135;
    v137 = v213;
    if (v69)
    {
      v138 = 8 * v69;
      v136 = (void ***)v133[11];
      while (*v136 != v213)
      {
        ++v136;
        v138 -= 8;
        if (!v138)
        {
          v136 = &v135[v69];
          break;
        }
      }
    }
    v139 = v136 - v135;
    if (v139 != v69)
    {
      if (v69 <= v139)
        goto LABEL_226;
      v135[v139] = v213;
      v69 = v133[2];
      if (v69 > v139)
      {
        v146 = v133[4] + 224 * v139;
        NS::SharedPtr<MTL::Texture>::operator=((void **)v146, &v220);
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v146 + 8), &v221);
        v148 = v223;
        v147 = v224;
        *(_OWORD *)(v146 + 16) = v222;
        *(_OWORD *)(v146 + 32) = v148;
        *(_OWORD *)(v146 + 48) = v147;
        v150 = v226;
        v149 = *(_OWORD *)v227;
        v151 = v225;
        *(_QWORD *)(v146 + 110) = *(_QWORD *)&v227[14];
        *(_OWORD *)(v146 + 80) = v150;
        *(_OWORD *)(v146 + 96) = v149;
        *(_OWORD *)(v146 + 64) = v151;
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v146 + 120), (void **)&v228);
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v146 + 128), (void **)&v228 + 1);
        *(_QWORD *)(v146 + 136) = v229;
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v146 + 144), (void **)&v229 + 1);
        NS::SharedPtr<MTL::Texture>::operator=((void **)(v146 + 152), &v230);
        v141 = (_anonymous_namespace_ *)(a1 + 27);
        v153 = v232;
        v152 = v233;
        v154 = v231;
        *(_WORD *)(v146 + 208) = v234;
        *(_OWORD *)(v146 + 176) = v153;
        *(_OWORD *)(v146 + 192) = v152;
        *(_OWORD *)(v146 + 160) = v154;
        goto LABEL_203;
      }
      goto LABEL_227;
    }
    v140 = v133[8];
    v141 = (_anonymous_namespace_ *)(a1 + 27);
    if (v69 >= v140)
    {
      v142 = v69 + 1;
      if (v140 < v142)
      {
        v143 = (_anonymous_namespace_ *)(v134 + 7);
        if (v134[7])
        {
          v144 = 2 * v140;
          if (!v140)
            v144 = 8;
          if (v144 <= v142)
            v145 = v142;
          else
            v145 = v144;
          re::DynamicArray<float *>::setCapacity(v143, v145);
        }
        else
        {
          re::DynamicArray<float *>::setCapacity(v134 + 7, v142);
          ++*((_DWORD *)v134 + 20);
        }
        v141 = (_anonymous_namespace_ *)(a1 + 27);
        v137 = v213;
      }
      v69 = v134[9];
      v135 = (void ***)v134[11];
    }
    v135[v69] = v137;
    v134[9] = v69 + 1;
    ++*((_DWORD *)v134 + 20);
    v173 = v134[2];
    if (v173 >= v134[1])
    {
      re::DynamicArray<re::IBL>::growCapacity(v134, v173 + 1);
      v141 = (_anonymous_namespace_ *)(a1 + 27);
      v173 = v134[2];
    }
    v174 = v134[4] + 224 * v173;
    *(_QWORD *)v174 = v220;
    v220 = 0;
    *(_QWORD *)(v174 + 8) = v221;
    v221 = 0;
    v175 = v225;
    v176 = v226;
    v177 = *(_OWORD *)v227;
    *(_QWORD *)(v174 + 110) = *(_QWORD *)&v227[14];
    *(_OWORD *)(v174 + 80) = v176;
    *(_OWORD *)(v174 + 96) = v177;
    *(_OWORD *)(v174 + 64) = v175;
    v178 = v222;
    v179 = v224;
    *(_OWORD *)(v174 + 32) = v223;
    *(_OWORD *)(v174 + 48) = v179;
    *(_OWORD *)(v174 + 16) = v178;
    *(_QWORD *)(v174 + 120) = v228;
    *(_QWORD *)&v228 = 0;
    *(_QWORD *)(v174 + 128) = *((_QWORD *)&v228 + 1);
    *((_QWORD *)&v228 + 1) = 0;
    *(_OWORD *)(v174 + 136) = v229;
    *((_QWORD *)&v229 + 1) = 0;
    *(_QWORD *)(v174 + 152) = v230;
    v230 = 0;
    v180 = v231;
    v181 = v232;
    v182 = v233;
    *(_WORD *)(v174 + 208) = v234;
    *(_OWORD *)(v174 + 176) = v181;
    *(_OWORD *)(v174 + 192) = v182;
    *(_OWORD *)(v174 + 160) = v180;
    ++v134[2];
    ++*((_DWORD *)v134 + 6);
LABEL_203:
    *(_QWORD *)buf = *v199;
    *(_QWORD *)&buf[8] = *v209;
    *(_QWORD *)&v243 = v212;
    v183 = v141;
    v184 = re::HashBrown<re::ecs2::Entity const*,re::ecs2::ImageBasedLightComponentStateImpl::EntityDataHandle,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(v141, v214);
    if (v184 == -1)
    {
      re::HashBrown<re::ecs2::Entity const*,re::ecs2::ImageBasedLightComponentStateImpl::EntityDataHandle,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::internalAdd(v183, &v214, (__n128 *)buf);
      if (v211)
      {
LABEL_205:
        v186 = v215;
        v187 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v216);
        re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v186, v187, *(_QWORD *)(a3 + 48));
      }
    }
    else
    {
      v185 = a1[28] + 32 * v184;
      *(_OWORD *)(v185 + 8) = *(_OWORD *)buf;
      *(_QWORD *)(v185 + 24) = v243;
      if (v211)
        goto LABEL_205;
    }
    if (v230)
    {

      v230 = 0;
    }
    if (*((_QWORD *)&v229 + 1))
    {

      *((_QWORD *)&v229 + 1) = 0;
    }
    if (*((_QWORD *)&v228 + 1))
    {

      *((_QWORD *)&v228 + 1) = 0;
    }
    if ((_QWORD)v228)
    {

      *(_QWORD *)&v228 = 0;
    }
    if (v221)
    {

      v221 = 0;
    }
    if (v220)

    re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v216);
  }
  while (v216 != a5 || (unsigned __int16)v217 != 0xFFFF || WORD1(v217) != 0xFFFF);
LABEL_9:
  v12 = *(_QWORD *)(a3 + 48);
  v13 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](*(_QWORD *)(a3 + 16) + 8, v12);
  v14 = a5[10];
  if (v14 && !*(_DWORD *)(v13 + 40))
  {
    (*(void (**)(uint64_t *, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t))(*a1 + 40))(a1, a2, a3, v12, v13, a6);
    v14 = a5[10];
  }
  if (v218)

  return v14 != 0;
}

re *re::ecs2::ImageBasedLightingHelper::checkIBLAssetVersion(re::ecs2::ImageBasedLightingHelper *this, re::ecs2::ImageBasedLightComponent *a2, const re::TextureAsset *a3, const re::TextureAsset *a4)
{
  re::AssetHandle *v7;
  char *v8;
  const char *v9;
  const char *v10;
  re *result;
  re::DynamicString *v12;
  BOOL v13;
  NSObject *v14;
  _QWORD *v15;
  char *v16;
  NSObject *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  const char *v21;
  size_t v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v7 = (re::ecs2::ImageBasedLightingHelper *)((char *)this + 88);
  v8 = (char *)re::AssetHandle::assetInfo((re::ecs2::ImageBasedLightingHelper *)((char *)this + 88));
  if ((*((_QWORD *)v8 + 17) & 1) != 0)
    v9 = (const char *)*((_QWORD *)v8 + 18);
  else
    v9 = v8 + 137;
  if ((*((_QWORD *)this + 147) & 1) != 0)
    v10 = (const char *)*((_QWORD *)this + 148);
  else
    v10 = (char *)this + 1177;
  result = (re *)strcmp(v9, v10);
  if ((_DWORD)result)
  {
    v12 = (re::ecs2::ImageBasedLightingHelper *)((char *)this + 1168);
    if (*((_BYTE *)a2 + 126))
      v13 = *((unsigned __int16 *)a2 + 64) == 0;
    else
      v13 = 1;
    if (v13)
    {
      v14 = *re::ecsComponentsLogObjects(result);
      result = (re *)os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)result)
      {
        v15 = re::AssetHandle::assetInfo(v7);
        if ((v15[17] & 1) != 0)
          v16 = (char *)v15[18];
        else
          v16 = (char *)v15 + 137;
        LODWORD(v23) = 136315138;
        *(_QWORD *)((char *)&v23 + 4) = v16;
        _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEFAULT, "Diffuse IBL texture [%s] generated by old tool, please update it. For .skybox assets, please rebuild with newer xcode.", (uint8_t *)&v23, 0xCu);
      }
    }
    if (!*((_BYTE *)a3 + 126) || !*((_WORD *)a3 + 64))
    {
      v17 = *re::ecsComponentsLogObjects(result);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v18 = re::AssetHandle::assetInfo(v7);
        if ((v18[17] & 1) != 0)
          v19 = (char *)v18[18];
        else
          v19 = (char *)v18 + 137;
        LODWORD(v23) = 136315138;
        *(_QWORD *)((char *)&v23 + 4) = v19;
        _os_log_impl(&dword_224FE9000, v17, OS_LOG_TYPE_DEFAULT, "Specular IBL texture [%s] generated by old tool, please update it. For .skybox assets, please rebuild with newer xcode.", (uint8_t *)&v23, 0xCu);
      }
    }
    v20 = (char *)re::AssetHandle::assetInfo(v7);
    if ((*((_QWORD *)v20 + 17) & 1) != 0)
      v21 = (const char *)*((_QWORD *)v20 + 18);
    else
      v21 = v20 + 137;
    v22 = strlen(v21);
    *(_QWORD *)&v23 = v21;
    *((_QWORD *)&v23 + 1) = v22;
    return re::DynamicString::operator=(v12, (uint64_t)&v23);
  }
  return result;
}

BOOL re::ecs2::ImageBasedLightComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  id *v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  int *v19;
  int v20;
  uint64_t *v21;
  _BOOL4 v22;
  uint64_t *v23;
  unsigned int v24;
  int v25;
  uint64_t DefaultIBLDataForWorld;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int16 v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  BOOL v42;
  re *OwnerPeerID;
  NSObject *v44;
  uint64_t v45;
  BOOL v46;
  int v47;
  re *v48;
  uint64_t v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  float32x4_t v62;
  int32x2_t v63;
  int32x4_t v64;
  int32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int32x4_t v68;
  uint64_t v69;
  float32x4_t v70;
  uint32x4_t v71;
  NSObject *v72;
  uint64_t v73;
  _OWORD *v74;
  uint64_t v75;
  _OWORD *v76;
  float32x4_t *v77;
  uint64_t v78;
  __int32 *v79;
  __int32 *v80;
  __int32 *v81;
  __int32 *v82;
  __int32 *v83;
  __int32 *v84;
  __int32 *v85;
  __int32 *v86;
  __int32 *v87;
  __int32 *v88;
  uint64_t j;
  __int32 *v90;
  __int32 *v91;
  __int32 *v92;
  unint64_t v93;
  uint64_t v94;
  unsigned int v95;
  BOOL *v96;
  uint64_t v97;
  uint64_t v98;
  _anonymous_namespace_ *v99;
  uint64_t v100;
  re::DynamicString **v103;
  _QWORD *v104;
  uint64_t v105;
  re::ecs2::RenderingSubsystem *v106;
  re::ecs2::ImageBasedLightComponentStateImpl *v107;
  BOOL v108;
  _QWORD v109[2];
  uint64_t i;
  uint64_t v111;
  __int128 v112;
  _BYTE v113[32];
  id v114[2];
  int v115;
  _BYTE v116[56];
  int v117;
  uint8_t buf[16];
  __int128 v119;
  _OWORD v120[4];
  _QWORD v121[3];
  int v122;
  int v123;
  uint64_t v124;

  v124 = *MEMORY[0x24BDAC8D0];
  v106 = *(re::ecs2::RenderingSubsystem **)(a3 + 8);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112) + 104);
  if (v8)
    v103 = (re::DynamicString **)re::RenderFrameBox::get(v8 + 344, 0xFFFFFFFFFFFFFFFuLL);
  else
    v103 = 0;
  v9 = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find((_QWORD *)(a1 + 152), (unint64_t)v106);
  v104 = (_QWORD *)re::DataArray<re::ecs2::ShadowPlaneInfo>::get(a1 + 88, *(_QWORD *)(*(_QWORD *)(a1 + 160) + 16 * v9 + 8));
  v111 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 136) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 136));
  if (*(_BYTE *)(a1 + 280))
  {
    re::AssetHandle::AssetHandle((re::AssetHandle *)buf, (const re::AssetHandle *)(*(_QWORD *)(a1 + 8) + 1240));
    v10 = re::AssetHandle::loadedAsset<re::ImageBasedLightAsset>((re::ImageBasedLightAsset *)buf);
    re::AssetHandle::~AssetHandle((re::AssetHandle *)buf);
    if (v10)
    {
      *(_QWORD *)(a1 + 328) = 0;
      *(_QWORD *)(a1 + 336) = 0;
      v11 = *(_QWORD *)(a1 + 304);
      *(_QWORD *)(a1 + 312) = 0;
      *(_QWORD *)(a1 + 320) = v11;
      if (v11 >= 0x10)
      {
        v12 = 0;
        *(_QWORD *)&v13 = -1;
        *((_QWORD *)&v13 + 1) = -1;
        do
        {
          *(_OWORD *)(*(_QWORD *)(a1 + 288) + 16 * v12++) = v13;
          v11 = *(_QWORD *)(a1 + 304);
        }
        while (v12 < v11 >> 4);
      }
      if (v11)
      {
        v14 = 72 * v11;
        v15 = (id *)(*(_QWORD *)(a1 + 296) + 56);
        do
        {
          if (*v15)
          {

            *v15 = 0;
          }
          re::DynamicArray<re::IBL>::deinit((uint64_t)(v15 - 5));
          v15 += 9;
          v14 -= 72;
        }
        while (v14);
      }
      re::ecs2::WorldRootProvider::worldIds((re::ecs2::WorldRootProvider *)&v111, (uint64_t)buf);
      v16 = v122;
      if (v122)
      {
        v17 = v121;
        v5 = v123;
        if (v123)
        {
          v18 = 0;
          v19 = (int *)v121[2];
          while (1)
          {
            v20 = *v19;
            v19 += 4;
            if (v20 < 0)
              break;
            if (v123 == ++v18)
            {
              LODWORD(v18) = v123;
              break;
            }
          }
          v6 = v18;
        }
        else
        {
          v6 = 0;
        }
        v21 = v121;
      }
      else
      {
        v17 = (uint64_t *)v120;
        v21 = (uint64_t *)v120 + v119;
      }
      v22 = v17 != v21;
      if (v122)
        v22 = v5 != v6;
      if (v22)
      {
        do
        {
          v23 = v17;
          if (v16)
            v23 = (uint64_t *)(v17[2] + 16 * v6 + 8);
          if (re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v104 + 8, *v23) == -1)
          {
            memset(v113, 0, 28);
            *(_OWORD *)v114 = 0u;
            v115 = 0;
            DefaultIBLDataForWorld = re::ecs2::ImageBasedLightComponentStateImpl::getDefaultIBLDataForWorld((re::ecs2::ImageBasedLightComponentStateImpl *)a1, *v23);
            re::DynamicArray<re::IBL>::add((_anonymous_namespace_ *)v113, DefaultIBLDataForWorld);
            *(_QWORD *)v116 = v106;
            *(_QWORD *)&v116[8] = *(_QWORD *)v113;
            memset(v113, 0, 24);
            *(_OWORD *)&v116[16] = *(_OWORD *)&v113[8];
            ++*(_DWORD *)&v113[24];
            *(_DWORD *)&v116[32] = 1;
            *(_OWORD *)&v116[40] = *(_OWORD *)v114;
            *(_OWORD *)v114 = 0u;
            v117 = v115;
            re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::addOrReplace((_anonymous_namespace_ *)(a1 + 288), (unint64_t *)v23, (uint64_t)v116);
            if (*(_QWORD *)&v116[48])
            {

              *(_QWORD *)&v116[48] = 0;
            }
            re::DynamicArray<re::IBL>::deinit((uint64_t)&v116[8]);
            if (v114[1])
            {

              v114[1] = 0;
            }
            re::DynamicArray<re::IBL>::deinit((uint64_t)v113);
            if (v16)
            {
LABEL_31:
              v24 = v6 + 1;
              do
              {
                v6 = v24;
                if (v24 >= *((_DWORD *)v17 + 8))
                  break;
                v25 = *(_DWORD *)(v17[2] + 16 * v24++);
              }
              while ((v25 & 0x80000000) == 0);
              goto LABEL_41;
            }
          }
          else if (v16)
          {
            goto LABEL_31;
          }
          ++v17;
LABEL_41:
          v27 = v17 != v21;
          if (v16)
            v27 = v5 != v6;
        }
        while (v27);
      }
      re::SmallHashSet<unsigned long long,8ul,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,false>::~SmallHashSet((uint64_t)buf);
      *(_BYTE *)(a1 + 280) = 0;
    }
  }
  v107 = (re::ecs2::ImageBasedLightComponentStateImpl *)a1;
  v109[0] = v104 + 8;
  v28 = v104[10];
  if (v28 >= 0x10)
  {
    v29 = 0;
    v30 = v104[8];
    v31 = v28 >> 4;
    while (1)
    {
      v32 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v30 + v29)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v109[1] = (unsigned __int16)~v32;
      if (v32 != 0xFFFF)
        break;
      v29 += 16;
      if (!--v31)
        return *(_DWORD *)(a5 + 40) != 0;
    }
    v33 = __clz(__rbit64((unsigned __int16)~v32)) + v29;
    for (i = v33; i != -1; v33 = i)
    {
      v105 = *(_QWORD *)(v109[0] + 8) + 16 * v33;
      v34 = (_QWORD *)re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::get(v104[2], v104[4], *(_QWORD *)(v105 + 8));
      if (v34[9])
      {
        v35 = 0;
        v36 = 0;
        do
        {
          v37 = v34[2];
          if (v37 <= v36)
          {
            *(_QWORD *)v113 = 0;
            v119 = 0u;
            memset(v120, 0, 48);
            *(_OWORD *)buf = 0u;
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)v116 = 136315906;
            *(_QWORD *)&v116[4] = "operator[]";
            *(_WORD *)&v116[12] = 1024;
            *(_DWORD *)&v116[14] = 789;
            *(_WORD *)&v116[18] = 2048;
            *(_QWORD *)&v116[20] = v36;
            *(_WORD *)&v116[28] = 2048;
            *(_QWORD *)&v116[30] = v37;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_93:
            re::internal::assertLog((re::internal *)4, j, v90, v91, v92, "assertion failure: '%s' (%s:line %i) The row index is out of range. Allowed values are 0 to 2.", "!\"Unreachable code\"", "row", 549);
            _os_crash();
            __break(1u);
          }
          v38 = v34[4];
          v39 = *(_QWORD *)(v34[11] + 8 * v36);
          v40 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)v107 + 1) + 112) + 272);
          v41 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(_QWORD *)(v39 + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
          if (v40)
            v42 = v41 == 0;
          else
            v42 = 1;
          if (!v42)
          {
            if (*(_QWORD *)(v41 + 32))
            {
              OwnerPeerID = (re *)RESyncableGetOwnerPeerID();
              if (OwnerPeerID)
              {
                v44 = *re::ecsComponentsLogObjects(OwnerPeerID);
                if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_224FE9000, v44, OS_LOG_TYPE_DEFAULT, "Ill-formed IBL with isGlobalIBL flag set to true. Settings isGLobalIBL to false.", buf, 2u);
                }
                *(_BYTE *)(v38 + 224 * v36 + 209) = 0;
              }
            }
          }
          v45 = v38 + 224 * v36;
          v46 = *(_BYTE *)(v45 + 209) != 0;
          v47 = *(unsigned __int8 *)(v39 + 1208);
          *(_BYTE *)(v45 + 116) |= v47;
          if (v47)
          {
            v108 = v46;
            re::ecs2::TransformComponent::worldMatrix4x4F(*(re::ecs2::TransformComponent ***)(v39 + 16), (const re::ecs2::Entity *)1, buf);
            *(_OWORD *)v116 = 0u;
            v112 = 0u;
            *(_OWORD *)v113 = xmmword_2260E5D70;
            v48 = (re *)re::decomposeScaleRotationTranslation<float>((uint64_t)buf, (int32x4_t *)v116, v113, &v112);
            v49 = 0;
            v60.i32[0] = *(_DWORD *)v113;
            v67.i32[0] = *(_DWORD *)&v113[8];
            v50 = *(float *)v60.i32 * (float)(*(float *)v60.i32 + *(float *)v60.i32);
            v51 = *(float *)&v113[4] * (float)(*(float *)&v113[4] + *(float *)&v113[4]);
            v52 = v67.f32[0] * (float)(v67.f32[0] + v67.f32[0]);
            v53 = (float)(*(float *)v60.i32 + *(float *)v60.i32) * *(float *)&v113[4];
            v54 = (float)(*(float *)v60.i32 + *(float *)v60.i32) * *(float *)&v113[8];
            v55 = (float)(*(float *)&v113[4] + *(float *)&v113[4]) * *(float *)&v113[8];
            v56 = (float)(*(float *)v60.i32 + *(float *)v60.i32) * *(float *)&v113[12];
            v57 = (float)(*(float *)&v113[4] + *(float *)&v113[4]) * *(float *)&v113[12];
            v67.f32[0] = (float)(v67.f32[0] + v67.f32[0]) * *(float *)&v113[12];
            *(float *)v60.i32 = 1.0 - (float)(v51 + v52);
            v58 = v60;
            *(float *)&v58.i32[1] = v53 + v67.f32[0];
            *(float *)v59.i32 = v53 - v67.f32[0];
            v67.f32[0] = v54 + v57;
            v60.i32[1] = v59.i32[0];
            *(float *)&v60.i32[2] = v54 + v57;
            v67.f32[1] = v55 - v56;
            *(float *)&v69 = v54 - v57;
            v61 = vzip1q_s32(v58, (int32x4_t)v67);
            v62 = (float32x4_t)v58;
            v62.i32[2] = v69;
            *(float *)v63.i32 = 1.0 - (float)(v50 + v52);
            *(float *)v64.i32 = v55 + v56;
            v65 = vzip1q_s32(v61, v59);
            v66 = (float32x4_t)v59;
            v66.i32[1] = v63.i32[0];
            v66.i32[2] = v64.i32[0];
            v67.f32[2] = 1.0 - (float)(v50 + v51);
            v68 = vzip2q_s32(v61, vdupq_lane_s32(v63, 0));
            HIDWORD(v69) = v64.i32[0];
            *(int32x4_t *)v113 = v65;
            *(int32x4_t *)&v113[16] = v68;
            *(int32x4_t *)v114 = vzip1q_s32(vzip2q_s32((int32x4_t)v62, (int32x4_t)v67), v64);
            do
            {
              *(float32x4_t *)&v116[v49] = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v62, COERCE_FLOAT(*(_OWORD *)&v113[v49])), v66, *(float32x2_t *)&v113[v49], 1), v67, *(float32x4_t *)&v113[v49], 2);
              v49 += 16;
            }
            while (v49 != 48);
            v70 = (float32x4_t)vdupq_n_s32(0x38D1B717u);
            v71 = (uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v70, vabdq_f32((float32x4_t)xmmword_2260E5F20, *(float32x4_t *)&v116[16])), (int8x16_t)vcgeq_f32(v70, vabdq_f32((float32x4_t)xmmword_2260E5F10, *(float32x4_t *)v116))), (int8x16_t)vcgeq_f32(v70, vabdq_f32((float32x4_t)xmmword_2260E5F40, *(float32x4_t *)&v116[32])));
            v71.i32[3] = v71.i32[2];
            if ((vminvq_u32(v71) & 0x80000000) != 0)
            {
              v77 = (float32x4_t *)(v38 + 224 * v36);
              v77[2] = v62;
              v77[3] = v66;
              v77[4] = v67;
              v77[2].i32[2] = v60.i32[2];
              v77[3].i32[2] = v68.i32[2];
              v77[2].i64[0] = v60.i64[0];
              v77[3].i64[0] = v68.i64[0];
              v77[4].i32[2] = v67.i32[2];
              v77[4].i64[0] = v69;
            }
            else
            {
              v72 = *re::ecsComponentsLogObjects(v48);
              if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
              {
                v73 = *(_QWORD *)(*(_QWORD *)(v39 + 16) + 280);
                *(_DWORD *)v116 = 136315138;
                *(_QWORD *)&v116[4] = v73;
                _os_log_impl(&dword_224FE9000, v72, OS_LOG_TYPE_DEFAULT, "The world transform of the entity [%s] includes non-uniform scaling.                                    Set the rotation of its IBL component to identity.", v116, 0xCu);
              }
              v74 = (_OWORD *)(v38 + 224 * v36);
              v74[2] = xmmword_2260E5F10;
              v74[3] = xmmword_2260E5F20;
              v60.i32[3] = 0;
              v74[4] = xmmword_2260E5F40;
            }
            v78 = 0;
            v75 = 0;
            v79 = (__int32 *)(v38 + 224 * v36);
            v80 = v79 + 8;
            v81 = v79 + 10;
            v82 = v79 + 14;
            v83 = v79 + 18;
            v84 = v79 + 9;
            v85 = v79 + 13;
            v86 = v79 + 17;
            v87 = v79 + 12;
            v88 = v79 + 16;
            do
            {
              for (j = 0; j != 12; j += 4)
              {
                v90 = v80;
                v91 = v87;
                v92 = v88;
                if ((_DWORD)v78)
                {
                  v90 = v81;
                  v91 = v82;
                  v92 = v83;
                  if ((_DWORD)v78 != 2)
                  {
                    v90 = v84;
                    v91 = v85;
                    v92 = v86;
                    if ((_DWORD)v78 != 1)
                      goto LABEL_93;
                  }
                }
                v60.i32[0] = *v90;
                v60.i32[1] = *v91;
                v60.i32[2] = *v92;
                *(int32x4_t *)v116 = v60;
                v93 = 0xBF58476D1CE4E5B9
                    * (*(unsigned int *)&v116[j] ^ ((unint64_t)*(unsigned int *)&v116[j] >> 30));
                v75 += ((0x94D049BB133111EBLL * (v93 ^ (v93 >> 27))) ^ ((0x94D049BB133111EBLL * (v93 ^ (v93 >> 27))) >> 31))
                     * v78;
              }
              ++v78;
            }
            while (v78 != 3);
            v46 = v108;
          }
          else
          {
            v75 = 0;
            v76 = (_OWORD *)(v38 + 224 * v36);
            v76[2] = xmmword_2260E5F10;
            v76[3] = xmmword_2260E5F20;
            v76[4] = xmmword_2260E5F40;
          }
          v94 = *(_QWORD *)(v39 + 1328) + v75;
          if (v94 == *(_QWORD *)(v39 + 1336))
          {
            v95 = *(_DWORD *)(v39 + 1344) + 1;
            *(_DWORD *)(v39 + 1344) = v95;
            v96 = (BOOL *)(v38 + 224 * v36 + 208);
            *v96 = v95 < 3;
          }
          else
          {
            *(_QWORD *)(v39 + 1336) = v94;
            *(_BYTE *)(v38 + 224 * v36 + 208) = 1;
            *(_DWORD *)(v39 + 1344) = 0;
          }
          v35 |= v46;
          ++v36;
        }
        while (v36 < v34[9]);
      }
      else
      {
        v35 = 0;
      }
      re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v106, *(const re::ecs2::Scene **)v105, v103, buf);
      *(_QWORD *)v116 = *(_QWORD *)buf >> 1;
      v97 = re::RenderFrameData::stream((re::RenderFrameData *)(v103 + 33), (const re::WeakStringID *)v116);
      v98 = (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(v97 + 48) + 432))(*(_QWORD *)(v97 + 48), v34);
      if ((v35 & 1) == 0)
      {
        v99 = (_anonymous_namespace_ *)v98;
        v100 = re::ecs2::ImageBasedLightComponentStateImpl::getDefaultIBLDataForWorld(v107, *(_QWORD *)v105);
        re::DynamicArray<re::IBL>::add(v99, v100);
      }
      re::StringID::destroyString((re::StringID *)buf);
      re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v109);
    }
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

uint64_t re::ecs2::ImageBasedLightSystem::updateScenes(uint64_t result, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  const re::ecs2::Scene **v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  re::ecs2::System *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned __int16 v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  re::DynamicString **v49;
  uint64_t **v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[2];
  const re::ecs2::Scene *v54;
  re::ecs2::RenderingSubsystem *v55;
  _BYTE v56[40];
  id v57;
  int v58;
  _BYTE v59[16];
  uint64_t v60[2];
  _QWORD v61[3];

  v5 = result;
  v61[0] = a3;
  v61[1] = a4;
  v6 = *(_QWORD *)(result + 104);
  if (!v6 || (*(_BYTE *)(v6 + 424) & 0x10) != 0)
  {
    re::ProfilerTimeGuard<(re::ProfilerStatistic)20>::ProfilerTimeGuard(v60);
    re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v59, 3015, v5);
    v8 = *(_QWORD *)(v5 + 112);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 104);
      if (v9)
        v49 = (re::DynamicString **)re::RenderFrameBox::get(v9 + 344, 0xFFFFFFFFFFFFFFFuLL);
      else
        v49 = 0;
      v50 = a2;
      v10 = a2[1];
      if (v10)
      {
        v11 = (const re::ecs2::Scene **)*a2;
        v51 = (uint64_t)&(*v50)[(_QWORD)v10];
        while (1)
        {
          v54 = *v11;
          v12 = *(_QWORD *)(*(_QWORD *)(v5 + 224)
                          + 16
                          * re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v5 + 216), &v54)+ 8);
          re::DynamicBitset<unsigned long long,64ul>::clearBit(v5 + 328, v12);
          v13 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[](v5 + 160, v12);
          v14 = *(_QWORD *)(*v13 + 224);
          v15 = v13[3];
          v16 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v13[2] + 8, v15);
          if (*(_DWORD *)(v16 + 40))
            v17 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v14 + 24))(v14, v61, v13, v15, v16, 0);
          else
            v17 = 0;
          v18 = v13[5];
          v19 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v13[2] + 8, v18);
          if (*(_DWORD *)(v19 + 40))
            v17 |= (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v14 + 32))(v14, v61, v13, v18, v19, 0);
          v20 = v13[6];
          v21 = re::BucketArray<re::Matrix4x4<float>,8ul>::operator[](v13[2] + 8, v20);
          if (*(_DWORD *)(v21 + 40))
            break;
          if (v17)
            goto LABEL_16;
LABEL_17:
          if (*(_BYTE *)(v5 + 392))
          {
            v22 = *(_QWORD *)(v5 + 336);
            v23 = *(_DWORD *)(v5 + 344);
            if (v22 < 0xB)
            {
              v26 = (uint64_t *)(v5 + 352);
              if ((v23 & 1) == 0)
                v26 = *(uint64_t **)(v5 + 360);
              if (!v22)
                goto LABEL_35;
              v27 = 0;
              v28 = 8 * v22;
              do
              {
                v29 = *v26++;
                v27 |= v29;
                v28 -= 8;
              }
              while (v28);
              if (!v27)
                goto LABEL_35;
            }
            else
            {
              v24 = (_QWORD *)(v5 + 352);
              if ((v23 & 1) == 0)
                v24 = *(_QWORD **)(v5 + 360);
              v25 = 8 * v22;
              while (!*v24)
              {
                ++v24;
                v25 -= 8;
                if (!v25)
                  goto LABEL_35;
              }
            }
            v30 = *(re::ecs2::System **)(v5 + 376);
            if (!*((_BYTE *)v30 + 86))
              re::ecs2::System::queueToRun(v30, 0.0);
          }
LABEL_35:
          if (++v11 == (const re::ecs2::Scene **)v51)
            goto LABEL_36;
        }
        if (((v17 | (*(unsigned int (**)(uint64_t, _QWORD *, _QWORD *, unint64_t, unint64_t, _QWORD))(*(_QWORD *)v14 + 40))(v14, v61, v13, v20, v21, 0)) & 1) == 0)goto LABEL_17;
LABEL_16:
        re::DynamicBitset<unsigned long long,256ul>::setBit(v5 + 328, v12);
        goto LABEL_17;
      }
LABEL_36:
      v31 = *(_QWORD *)(v5 + 704);
      if (v31 >= 0x10)
      {
        v32 = 0;
        v33 = v31 >> 4;
        while (1)
        {
          v34 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)(v5 + 688) + v32)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
          v35 = (unsigned __int16)~v34;
          if (v34 != 0xFFFF)
            break;
          v32 += 16;
          if (!--v33)
            goto LABEL_42;
        }
        v36 = __clz(__rbit64(v35)) + v32;
        if (v36 != -1)
        {
          do
          {
            v41 = *(_QWORD *)(v5 + 696) + 72 * v36;
            v54 = *(const re::ecs2::Scene **)v41;
            v55 = *(re::ecs2::RenderingSubsystem **)(v41 + 8);
            re::DynamicArray<re::IBL>::DynamicArray((uint64_t)v56, (uint64_t *)(v41 + 16));
            v57 = *(id *)(v41 + 56);
            v58 = *(_DWORD *)(v41 + 64);
            re::ecs2::RenderingSubsystem::nonOwningStreamNameForWorldRoot(v55, v54, v49, v53);
            v52 = v53[0] >> 1;
            v42 = re::RenderFrameData::stream((re::RenderFrameData *)(v49 + 33), (const re::WeakStringID *)&v52);
            (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v42 + 48) + 432))(*(_QWORD *)(v42 + 48), v56);
            re::StringID::destroyString((re::StringID *)v53);
            if (v57)
            {

              v57 = 0;
            }
            re::DynamicArray<re::IBL>::deinit((uint64_t)v56);
            v43 = v36 >> 4;
            v44 = *(_QWORD *)(v5 + 704);
            if (v36 >> 4 >= v44 >> 4)
              break;
            v45 = __clz(__rbit64((-2 << (v36 & 0xF)) & v35));
            if (v45 >= 0x40)
            {
              v47 = v44 >> 4;
              v46 = 16 * v43;
              v48 = ~v43 + v47;
              while (v48)
              {
                v35 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)(v5 + 688) + v46 + 16)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
                v45 = __clz(__rbit64(v35));
                v46 += 16;
                --v48;
                if (v45 <= 0x3F)
                  goto LABEL_56;
              }
              break;
            }
            v46 = v36 & 0xFFFFFFFFFFFFFFF0;
LABEL_56:
            v36 = v45 + v46;
          }
          while (v45 + v46 != -1);
        }
      }
LABEL_42:
      if (*(_QWORD *)(v5 + 1232))
      {
        v37 = v50[1];
        if (v37)
        {
          v38 = *v50;
          v39 = 8 * (_QWORD)v37;
          do
          {
            v40 = *v38++;
            (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v5 + 1232) + 16))(*(_QWORD *)(v5 + 1232), v40, *(_QWORD *)(v5 + 112));
            v39 -= 8;
          }
          while (v39);
        }
      }
      re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v59);
      return re::ProfilerTimeGuard<(re::ProfilerStatistic)122>::end((uint64_t)v60);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateScenes", 732);
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

void re::ecs2::ImageBasedLightSystem::willAddSystemToECSService(re::AssetHelper **this)
{
  uint64_t v2;
  id *v3;
  __int128 v4;
  re::AssetHelper *v5;
  __int128 v6;
  re::AssetHelper *v7;

  re::ecs2::RenderingSubsystem::willAddSystemToECSService((re::ecs2::RenderingSubsystem *)this);
  v2 = (*(uint64_t (**)(re::AssetHelper *))(*(_QWORD *)this[5] + 32))(this[5]);
  this[154] = (re::AssetHelper *)re::ServiceLocator::serviceOrNull<re::ecs2::ImageBasedLightService>(v2);
  v3 = (id *)this[14];
  if (v3)
  {
    re::AssetHelper::createDefaultImageBasedLightEngineAsset(this[15], v3, (const re::AssetHandle *)&v6);
    v4 = *(_OWORD *)(this + 155);
    *(_OWORD *)(this + 155) = v6;
    v6 = v4;
    v5 = this[157];
    this[157] = v7;
    v7 = v5;
    re::AssetHandle::~AssetHandle((re::AssetHandle *)&v6);
    re::AssetHandle::loadAsync((re::AssetHandle *)(this + 155));
  }
}

double re::ecs2::ImageBasedLightSystem::willRemoveSystemFromECSService(re::ecs2::ImageBasedLightSystem *this)
{
  __int128 v2;
  uint64_t v3;
  double result;
  __int128 v5;
  uint64_t v6;

  v2 = *(_OWORD *)((char *)this + 1240);
  v3 = *((_QWORD *)this + 157);
  *((_OWORD *)this + 78) = 0u;
  *((_OWORD *)this + 77) = 0u;
  v5 = v2;
  v6 = v3;
  re::AssetHandle::~AssetHandle((re::AssetHandle *)&v5);
  *((_QWORD *)this + 19) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

_QWORD *re::ecs2::ImageBasedLightSystem::willAddSceneToECSService(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  re::ecs2::System *v44;
  unint64_t v45;
  int v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  __int128 v60;
  int v61;
  unint64_t v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  int v66;
  _anonymous_namespace_ *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t *v88;
  re::EventBus *v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  re *v96;
  re *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  re *v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  __int128 v108;
  __int128 v109;
  _OWORD v110[2];
  __int128 v111;
  _OWORD v112[2];
  __int128 v113;
  unint64_t v114;
  uint64_t v115[3];
  uint64_t v116;
  uint64_t *v117;
  _QWORD v118[3];
  uint64_t v119;
  re *v120;
  int v121;
  const char *v122;
  __int16 v123;
  int v124;
  __int16 v125;
  _BYTE v126[20];
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;

  v4 = this;
  v132 = *MEMORY[0x24BDAC8D0];
  v5 = this[13];
  if (v5 && (*(_BYTE *)(v5 + 424) & 0x10) == 0)
    return this;
  v6 = this[154];
  if (v6)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v6 + 32))(v6, a2);
  v7 = &v121;
  v8 = (unint64_t)(v4 + 20);
  v115[0] = a2;
  v9 = v4 + 35;
  v10 = v4[36];
  v11 = *((_DWORD *)v4 + 74);
  if (v10 >= 0xB)
  {
    if ((v11 & 1) != 0)
      v12 = v4 + 38;
    else
      v12 = (_QWORD *)v4[39];
    v14 = 8 * v10;
    while (!*v12)
    {
      ++v12;
      v14 -= 8;
      if (!v14)
        goto LABEL_21;
    }
    goto LABEL_20;
  }
  if ((v11 & 1) != 0)
  {
    v13 = v4 + 38;
    if (!v10)
      goto LABEL_21;
  }
  else
  {
    v13 = (uint64_t *)v4[39];
    if (!v10)
      goto LABEL_21;
  }
  v15 = 0;
  v16 = 8 * v10;
  do
  {
    v17 = *v13++;
    v15 |= v17;
    v16 -= 8;
  }
  while (v16);
  if (v15)
  {
LABEL_20:
    *(_QWORD *)&v108 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet((uint64_t)(v4 + 35), 0);
    v18 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)(v4 + 20), v108);
    re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::init(v18, (uint64_t)(v4 + 20), a2);
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(v4 + 27), v115, (uint64_t *)&v108);
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)(v4 + 35), v108);
    v19 = (uint64_t)(v4 + 41);
    v20 = v108;
    goto LABEL_53;
  }
LABEL_21:
  v108 = 0u;
  *(_QWORD *)&v109 = 0;
  *((_QWORD *)&v109 + 1) = -1;
  memset(v110, 0, sizeof(v110));
  *(_QWORD *)&v111 = 0;
  *((_QWORD *)&v111 + 1) = 1;
  memset(v112, 0, sizeof(v112));
  v21 = v4[25];
  v2 = v4[21];
  if (v21 + 1 > 4 * v2)
  {
    re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,4ul>::setBucketsCapacity(v4 + 20, (v21 + 4) >> 2);
    v2 = v4[21];
  }
  v22 = v21 >> 2;
  if (v2 <= v21 >> 2)
  {
    v118[0] = 0;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v127 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v121 = 136315906;
    v122 = "operator[]";
    v123 = 1024;
    v124 = 858;
    v125 = 2048;
    *(_QWORD *)v126 = v21 >> 2;
    *(_WORD *)&v126[8] = 2048;
    *(_QWORD *)&v126[10] = v2;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_124:
    re::internal::assertLog((re::internal *)4, v29, "assertion failure: '%s' (%s:line %i) Array is empty", "m_size > 0", "last", 768);
    _os_crash();
    __break(1u);
    goto LABEL_125;
  }
  if ((v4[22] & 1) != 0)
    v23 = v4 + 23;
  else
    v23 = (_QWORD *)v4[24];
  v24 = v23[v22];
  ++v4[25];
  ++*((_DWORD *)v4 + 52);
  v25 = v24 + 112 * (v21 & 3);
  v26 = v108;
  v27 = v109;
  v28 = v110[0];
  *(_QWORD *)(v25 + 48) = *(_QWORD *)&v110[1];
  *(_OWORD *)(v25 + 16) = v27;
  *(_OWORD *)(v25 + 32) = v28;
  *(_OWORD *)v25 = v26;
  re::BucketArray<RESubscriptionHandle,8ul>::BucketArray(v25 + 56, (uint64_t)&v110[1] + 8);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStateSceneData(&v108);
  v30 = v4[25];
  if (!v30)
    goto LABEL_124;
  v31 = re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)(v4 + 20), v30 - 1);
  re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::init(v31, (uint64_t)(v4 + 20), v115[0]);
  *(_QWORD *)&v127 = v4[25] - 1;
  re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::addNew((_anonymous_namespace_ *)(v4 + 27), v115, (uint64_t *)&v127);
  v32 = v4[25];
  v33 = v4[40];
  if ((v32 & 0x3F) != 0)
    v34 = (v32 >> 6) + 1;
  else
    v34 = v32 >> 6;
  v4[40] = v32;
  *(_QWORD *)&v108 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(v4 + 35), v34, &v108);
  if (v32 && v33 > v32)
  {
    v35 = 63;
    v36 = v4[40] & 0x3FLL;
    if (v36 && v36 != 63)
      v35 = ~(-1 << v36);
    if ((v4[37] & 1) != 0)
      v37 = v4 + 38;
    else
      v37 = (_QWORD *)v4[39];
    v37[v4[36] - 1] &= v35;
  }
  v9 = v4 + 41;
  v38 = v4[25];
  v39 = v4[46];
  if ((v38 & 0x3F) != 0)
    v40 = (v38 >> 6) + 1;
  else
    v40 = v38 >> 6;
  v4[46] = v38;
  *(_QWORD *)&v108 = 0;
  re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(v4 + 41), v40, &v108);
  if (v38 && v39 > v38)
  {
    v41 = 63;
    v42 = v4[46] & 0x3FLL;
    if (v42 && v42 != 63)
      v41 = ~(-1 << v42);
    if ((v4[43] & 1) != 0)
      v43 = v4 + 44;
    else
      v43 = (_QWORD *)v4[45];
    v43[v4[42] - 1] &= v41;
  }
  v20 = v127;
  v19 = (uint64_t)(v4 + 41);
LABEL_53:
  v44 = (re::ecs2::System *)re::DynamicBitset<unsigned long long,256ul>::setBit(v19, v20);
  if (!*((_BYTE *)v4 + 392))
    goto LABEL_71;
  v45 = v4[42];
  v46 = *((_DWORD *)v4 + 86);
  if (v45 < 0xB)
  {
    if ((v46 & 1) != 0)
    {
      v48 = v4 + 44;
      if (!v45)
        goto LABEL_71;
    }
    else
    {
      v48 = (uint64_t *)v4[45];
      if (!v45)
        goto LABEL_71;
    }
    v50 = 0;
    v51 = 8 * v45;
    do
    {
      v52 = *v48++;
      v50 |= v52;
      v51 -= 8;
    }
    while (v51);
    if (!v50)
      goto LABEL_71;
  }
  else
  {
    if ((v46 & 1) != 0)
      v47 = v4 + 44;
    else
      v47 = (_QWORD *)v4[45];
    v49 = 8 * v45;
    while (!*v47)
    {
      ++v47;
      v49 -= 8;
      if (!v49)
        goto LABEL_71;
    }
  }
  v44 = (re::ecs2::System *)v4[47];
  if (!*((_BYTE *)v44 + 86))
    re::ecs2::System::queueToRun(v44, 0.0);
LABEL_71:
  v114 = a2;
  *((_QWORD *)&v108 + 1) = 0;
  *(_QWORD *)&v109 = 0;
  DWORD2(v109) = 0;
  memset(v110, 0, 20);
  *(_QWORD *)((char *)&v110[1] + 4) = 0x1FFFFFFFFLL;
  v111 = 0u;
  memset(v112, 0, sizeof(v112));
  v113 = 0u;
  re::DynamicArray<re::RigNodeConstraint>::setCapacity(&v108, 0);
  ++DWORD2(v109);
  HIDWORD(v110[0]) = 4;
  re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::allocBlock(&v108);
  v54 = *((_DWORD *)v4 + 136);
  if ((v54 + 1) >> 24)
    v55 = 1;
  else
    v55 = v54 + 1;
  *((_DWORD *)v4 + 136) = v55;
  v22 = *((unsigned __int16 *)v4 + 270);
  v8 = *((unsigned __int16 *)v4 + 271);
  if (v22 != 0xFFFF || (_DWORD)v8 != 0xFFFF)
  {
    v9 = (uint64_t *)v4[63];
    if ((unint64_t)v9 > v8)
    {
      v59 = (_QWORD *)(v4[65] + 16 * v8);
      *(_DWORD *)(v59[1] + 4 * v22) = v55;
      v58 = *v59 + (v22 << 7);
      *((_DWORD *)v4 + 135) = *(_DWORD *)v58;
      goto LABEL_83;
    }
    goto LABEL_126;
  }
  if (*((_DWORD *)v4 + 134) >= *((_DWORD *)v4 + 133))
    re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerSceneData>::allocBlock(v4 + 61);
  v56 = v4[63];
  v8 = (unsigned __int16)(v56 - 1);
  if (!v56)
  {
LABEL_125:
    v118[0] = 0;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v127 = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v121 = 136315906;
    v122 = "operator[]";
    v123 = 1024;
    v124 = 789;
    v125 = 2048;
    *(_QWORD *)v126 = v8;
    *(_WORD *)&v126[8] = 2048;
    *(_QWORD *)&v126[10] = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_126:
    v118[0] = 0;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v127 = 0u;
    v4 = (_QWORD *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v121 = 136315906;
    v122 = "operator[]";
    v123 = 1024;
    v124 = 789;
    v125 = 2048;
    *(_QWORD *)v126 = v8;
    *(_WORD *)&v126[8] = 2048;
    *(_QWORD *)&v126[10] = v9;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
    goto LABEL_127;
  }
  v22 = *((unsigned int *)v4 + 134);
  if (v22 >= 0x10000)
  {
LABEL_127:
    re::internal::assertLog((re::internal *)5, v53, "assertion failure: '%s' (%s:line %i) m_tailBlockLinearAllocationCount (%u) is too large for a 16-bit unsigned integer", "!overflow", "create", 601, v22);
    v67 = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    goto LABEL_128;
  }
  v57 = (_QWORD *)(v4[65] + 16 * v8);
  *((_DWORD *)v4 + 134) = v22 + 1;
  *(_DWORD *)(v57[1] + 4 * v22) = *((_DWORD *)v4 + 136);
  v58 = *v57 + (v22 << 7);
LABEL_83:
  ++*((_DWORD *)v4 + 132);
  *(_DWORD *)(v58 + 48) = 0;
  *(_QWORD *)(v58 + 52) = 0x1FFFFFFFFLL;
  v127 = 0u;
  *(_OWORD *)v58 = 0u;
  *(_QWORD *)&v128 = 0;
  *(_QWORD *)(v58 + 16) = 0;
  *(_QWORD *)&v129 = 0;
  *(_QWORD *)(v58 + 32) = 0;
  *(_QWORD *)(v58 + 40) = 0;
  *(_DWORD *)(v58 + 24) = 1;
  DWORD2(v128) = 1;
  v7 = (int *)&v108;
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v58, (uint64_t)&v108);
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=((uint64_t)&v108, (uint64_t)&v127);
  if ((_QWORD)v127 && (_QWORD)v129)
    (*(void (**)(_QWORD))(*(_QWORD *)v127 + 40))(v127);
  v60 = *(_OWORD *)(v58 + 40);
  *(_QWORD *)(v58 + 40) = *((_QWORD *)&v110[0] + 1);
  *(_QWORD *)(v58 + 48) = *(_QWORD *)&v110[1];
  *(_OWORD *)((char *)v110 + 8) = v60;
  v61 = *(_DWORD *)(v58 + 56);
  *(_DWORD *)(v58 + 56) = DWORD2(v110[1]);
  DWORD2(v110[1]) = v61;
  *(_OWORD *)(v58 + 64) = 0u;
  *(_OWORD *)(v58 + 80) = 0u;
  *(_OWORD *)(v58 + 96) = 0u;
  *(_OWORD *)(v58 + 112) = 0u;
  v62 = v111;
  *(_QWORD *)(v58 + 120) = *((_QWORD *)&v113 + 1);
  *((_QWORD *)&v113 + 1) = 0;
  v63 = *(_OWORD *)(v58 + 64);
  *(_OWORD *)(v58 + 64) = __PAIR128__(*((unint64_t *)&v111 + 1), v62);
  v111 = v63;
  *(_QWORD *)(v58 + 80) = *(_QWORD *)&v112[0];
  *(_QWORD *)&v112[0] = 0;
  v64 = *((_QWORD *)&v112[0] + 1);
  *(_QWORD *)(v58 + 104) = *((_QWORD *)&v112[1] + 1);
  *(_QWORD *)(v58 + 112) = v113;
  *((_QWORD *)&v112[1] + 1) = 0;
  *(_QWORD *)&v113 = 0;
  v65 = *(_OWORD *)(v58 + 88);
  *(_QWORD *)(v58 + 88) = v64;
  *(_QWORD *)(v58 + 96) = *(_QWORD *)&v112[1];
  *(_OWORD *)((char *)v112 + 8) = v65;
  v66 = *((_DWORD *)v4 + 136);
  v9 = v4 + 69;
  v67 = (_anonymous_namespace_ *)re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find(v4 + 69, a2);
  if (v67 == (_anonymous_namespace_ *)-1)
  {
    v2 = v66 & 0xFFFFFF;
    v8 <<= 16;
    if (v4[76])
    {
LABEL_88:
      v69 = v8 | (v2 << 32);
      v70 = v4[73];
      if (!v70 || (v71 = v4[71], v71 > 8 * v70))
      {
        v67 = (_anonymous_namespace_ *)re::HashBrown<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::ImageBasedLightComponentStateImpl::PerSceneData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::resize(v9, 1u);
        v71 = v4[71];
      }
      v72 = v69 | v22;
      v73 = 0xBF58476D1CE4E5B9;
      v74 = 0x94D049BB133111EBLL;
      v75 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
      v76 = v75 ^ (v75 >> 31);
      v77 = v71 >> 4;
      v78 = *v9;
      v79 = v76 % v77;
      while (1)
      {
        v80 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v78 + 16 * v79)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
        if (v80 < 0x40)
          break;
        if (v79 + 1 == v77)
          v79 = 0;
        else
          ++v79;
        if (v79 == v76 % v77)
        {
          re::internal::assertLog((re::internal *)4, v68, -1.79399301e-307, 4.74803907e-38, "assertion failure: '%s' (%s:line %i) Unexpected full hash-table", "blockIndex != h1(key) % blockCount()", "internalAdd", 656);
          v67 = (_anonymous_namespace_ *)_os_crash();
          __break(1u);
          break;
        }
      }
      v81 = v78 + 16 * v79;
      v82 = *(unsigned __int8 *)(v81 + v80);
      *(_BYTE *)(v81 + v80) = v76 & 0x7F;
      v83 = v82 == 255;
      v84 = 16 * (v80 + 16 * v79);
      v85 = (unint64_t *)(v4[70] + v84);
      *v85 = a2;
      v85[1] = v72;
      ++v4[72];
      v4[73] -= v83;
      v86 = *(_QWORD *)(v4[70] + v84) ^ (*(_QWORD *)(v4[70] + v84) >> 30);
      v87 = ((v86 * v73) ^ ((v86 * v73) >> 27)) * v74;
      v4[74] ^= (v87 >> 31) ^ v87;
      goto LABEL_98;
    }
LABEL_128:
    goto LABEL_88;
  }
LABEL_98:
  v127 = 0uLL;
  LODWORD(v128) = 1;
  v129 = 0uLL;
  *((_QWORD *)&v128 + 1) = 0;
  LODWORD(v130) = 0;
  v89 = *(re::EventBus **)(a2 + 288);
  if (v89)
  {
    v90 = v4 + 50;
    *(_QWORD *)&v126[4] = re::globalAllocators((re *)v88)[2];
    v91 = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)&v126[4] + 32))(*(_QWORD *)&v126[4], 32, 0);
    *v91 = &off_24ED69060;
    v91[1] = v4 + 50;
    v91[2] = re::ecs2::ImageBasedLightComponentStateImpl::deactivateImageBasedLightComponentHandler;
    v91[3] = 0;
    *(_QWORD *)&v126[12] = v91;
    v92 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v89, (uint64_t)&v121, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v94 = v93;
    v95 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v127);
    *v95 = v92;
    v95[1] = v94;
    v96 = *(re **)&v126[12];
    if (*(_QWORD *)&v126[12])
    {
      v96 = (re *)(***(uint64_t (****)(_QWORD))&v126[12])(*(_QWORD *)&v126[12]);
      if (*(int **)&v126[12] != &v121)
        v96 = (re *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)&v126[4] + 40))(*(_QWORD *)&v126[4]);
      *(_QWORD *)&v126[12] = 0;
    }
    v119 = re::globalAllocators(v96)[2];
    v97 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v119 + 32))(v119, 32, 0);
    *(_QWORD *)v97 = &off_24ED690B8;
    *((_QWORD *)v97 + 1) = v90;
    *((_QWORD *)v97 + 2) = re::ecs2::ImageBasedLightComponentStateImpl::removeImageBasedLightComponentHandler;
    *((_QWORD *)v97 + 3) = 0;
    v120 = v97;
    v98 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v89, (uint64_t)v118, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v100 = v99;
    v101 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v127);
    *v101 = v98;
    v101[1] = v100;
    v102 = v120;
    if (v120)
    {
      v102 = (re *)(**(uint64_t (***)(re *))v120)(v120);
      if (v120 != (re *)v118)
        v102 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v119 + 40))(v119);
      v120 = 0;
    }
    v116 = re::globalAllocators(v102)[2];
    v103 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v116 + 32))(v116, 32, 0);
    *v103 = (uint64_t)&off_24ED69110;
    v103[1] = (uint64_t)v90;
    v103[2] = (uint64_t)re::ecs2::ImageBasedLightComponentStateImpl::didReparentEntityHandler;
    v103[3] = 0;
    v117 = v103;
    v104 = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v89, (uint64_t)v115, 0, 0);
    v106 = v105;
    v107 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized((uint64_t)&v127);
    *v107 = v104;
    v107[1] = v106;
    if (v117)
    {
      (*(void (**)(uint64_t *))*v117)(v117);
      if (v117 != v115)
        (*(void (**)(uint64_t))(*(_QWORD *)v116 + 40))(v116);
      v117 = 0;
    }
  }
  re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)(v4 + 55), (uint64_t *)&v114, (uint64_t)&v127);
  re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)&v127);
  if ((_QWORD)v127 && (v128 & 1) == 0)
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)v127 + 40))(v127, v129);
  if (*((_QWORD *)&v113 + 1))
  {
    if (*((_QWORD *)&v111 + 1))
      *((_QWORD *)&v111 + 1) = 0;
    if ((_QWORD)v111)
    {
      (*(void (**)(void))(**((_QWORD **)&v113 + 1) + 40))();
      *(_QWORD *)&v111 = 0;
    }
    *((_OWORD *)v7 + 6) = 0u;
    *((_OWORD *)v7 + 7) = 0u;
    *((_OWORD *)v7 + 5) = 0u;
  }
  return re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::~DataArray((uint64_t *)&v108);
}

uint64_t re::ecs2::ImageBasedLightSystem::willRemoveSceneFromECSService(re::ecs2::ImageBasedLightSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  re::ecs2::ComponentBucketsBase *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t j;
  uint64_t v22;
  uint64_t result;
  int8x16_t *v24;
  int8x16_t v25;
  int8x8_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int16 v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  uint64_t k;
  re::ecs2::Scene *v43;

  v4 = *((_QWORD *)this + 154);
  if (v4)
    (*(void (**)(uint64_t, re::ecs2::Scene *))(*(_QWORD *)v4 + 40))(v4, a2);
  v41[0] = a2;
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)this + 27, v41);
  if (v5 != -1)
  {
    v6 = *((_QWORD *)this + 28) + 16 * v5;
    re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 280, *(_QWORD *)(v6 + 8));
    re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 328, *(_QWORD *)(v6 + 8));
    v7 = (_QWORD *)re::BucketArray<re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>,4ul>::operator[]((uint64_t)this + 160, *(_QWORD *)(v6 + 8));
    if (*v7)
    {
      v8 = v7;
      *v7 = 0;
      v9 = v7 + 1;
      v10 = *(_QWORD *)(v7[1] + 288);
      if (v10)
      {
        v11 = v7[12];
        if (v11)
        {
          for (i = 0; i != v11; ++i)
          {
            v13 = re::BucketArray<RESubscriptionHandle,8ul>::operator[]((uint64_t)(v8 + 7), i);
            re::EventBus::unsubscribe(v10, *(_QWORD *)v13, *(_QWORD *)(v13 + 8));
          }
        }
      }
      re::BucketArray<RESubscriptionHandle,8ul>::deinit((uint64_t)(v8 + 7));
      v14 = 0;
      v15 = v8 + 3;
      do
      {
        v16 = (re::ecs2::ComponentBucketsBase *)v8[2];
        if (*(_QWORD *)v16)
          re::ecs2::ComponentBucketsBase::removeBucket(v16, v15[v14]);
        v15[v14++] = -1;
      }
      while (v14 != 4);
      *v9 = 0;
      v9[1] = 0;
    }
    re::HashBrown<re::ecs2::Scene const*,unsigned long,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::remove((uint64_t *)this + 27, v41);
  }
  v43 = a2;
  v17 = re::HashTable<re::ecs2::Scene const*,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::tryGet((uint64_t)this + 440, (uint64_t *)&v43);
  if (v17)
  {
    v18 = *((_QWORD *)v43 + 36);
    if (v18)
    {
      v19 = v17;
      v20 = *(_QWORD *)(v17 + 40);
      if (v20)
      {
        for (j = 0; j != v20; ++j)
        {
          v22 = re::BucketArray<RESubscriptionHandle,8ul>::operator[](v19, j);
          re::EventBus::unsubscribe(v18, *(_QWORD *)v22, *(_QWORD *)(v22 + 8));
        }
      }
    }
    re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)this + 440, (uint64_t *)&v43);
  }
  result = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find((_QWORD *)this + 69, (unint64_t)v43);
  if (result != -1)
  {
    re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerSceneData>::destroy((_QWORD *)this + 61, *(_QWORD *)(*((_QWORD *)this + 70) + 16 * result + 8));
    result = re::HashBrown<void const*,unsigned long,re::Hash<void const*>,re::EqualTo<void const*>,void,false>::find((_QWORD *)this + 69, (unint64_t)v43);
    if (result != -1)
    {
      v24 = (int8x16_t *)(*((_QWORD *)this + 69) + (result & 0xFFFFFFFFFFFFFFF0));
      v25.i64[0] = -1;
      v25.i64[1] = -1;
      v26 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v24, v25), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
      if (v26)
        v27 = -1;
      else
        v27 = 0x80;
      v24->i8[result & 0xF] = v27;
      v28 = *(_QWORD *)(*((_QWORD *)this + 70) + 16 * result);
      v29 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v28 ^ (v28 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v28 ^ (v28 >> 30))) >> 27));
      *((_QWORD *)this + 74) ^= (v29 >> 31) ^ v29;
      v30 = *((_QWORD *)this + 73);
      if (v26)
        ++v30;
      v31 = *((_QWORD *)this + 72) - 1;
      *((_QWORD *)this + 72) = v31;
      *((_QWORD *)this + 73) = v30;
      v32 = *((_QWORD *)this + 71);
      if (v32 >= 0x11 && v31 < v32 >> 2)
        result = re::HashBrown<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::ImageBasedLightComponentStateImpl::PerSceneData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::resize((uint64_t *)this + 69, 0);
    }
  }
  v33 = (uint64_t *)((char *)this + 688);
  v41[0] = (char *)this + 688;
  v34 = *((_QWORD *)this + 88);
  if (v34 >= 0x10)
  {
    v35 = 0;
    v36 = *v33;
    v37 = v34 >> 4;
    while (1)
    {
      v38 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v36 + v35)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v41[1] = (unsigned __int16)~v38;
      if (v38 != 0xFFFF)
        break;
      v35 += 16;
      if (!--v37)
        return result;
    }
    v39 = __clz(__rbit64((unsigned __int16)~v38)) + v35;
    for (k = v39; k != -1; v39 = k)
    {
      v40 = *(_QWORD *)(v41[0] + 8);
      if (re::StringID::operator==((_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 72 * v39 + 8) + 104) + 272), (_QWORD *)(*((_QWORD *)v43 + 13) + 272)))
      {
        re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::remove(v33, *(_QWORD *)(v40 + 72 * v39));
      }
      result = (uint64_t)re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v41);
    }
  }
  return result;
}

uint64_t re::ecs2::ImageBasedLightComponentStateImpl::dependsOnComponents(re::ecs2::ImageBasedLightComponentStateImpl *this)
{
  return *((_QWORD *)this + 4);
}

void re::ecs2::ImageBasedLightSystem::~ImageBasedLightSystem(re::ecs2::ImageBasedLightSystem *this)
{
  re::AssetHandle::~AssetHandle((re::ecs2::ImageBasedLightSystem *)((char *)this + 1240));
  re::ecs2::ImageBasedLightComponentStateImpl::~ImageBasedLightComponentStateImpl((re::ecs2::ImageBasedLightSystem *)((char *)this + 400));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 20);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::AssetHandle::~AssetHandle((re::ecs2::ImageBasedLightSystem *)((char *)this + 1240));
  re::ecs2::ImageBasedLightComponentStateImpl::~ImageBasedLightComponentStateImpl((re::ecs2::ImageBasedLightSystem *)((char *)this + 400));
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 20);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ImageBasedLightSystem::typeInfo(re::ecs2::ImageBasedLightSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImageBasedLightSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ImageBasedLightSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ImageBasedLightSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ImageBasedLightSystem>, 0);
}

void re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED69060;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED69060;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED690B8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED690B8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED69110;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED69110;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedLightComponentStateImpl,REEventHandlerResult (re::ecs2::ImageBasedLightComponentStateImpl::*)(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,RESceneEntityDidReparentEvent const&)>::size()
{
  return 32;
}

_QWORD *re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::~DataArray(uint64_t *a1)
{
  unint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  unint64_t v21;
  __int16 v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v2 = a1;
  v29 = *MEMORY[0x24BDAC8D0];
  if (!*((_DWORD *)a1 + 11))
  {
    v4 = *a1;
    if (*v2)
    {
      if (v2[4])
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      v2[4] = 0;
      v2[1] = 0;
      v2[2] = 0;
      *v2 = 0;
      ++*((_DWORD *)v2 + 6);
    }
    return v2;
  }
  v13 = a1;
  if (*((_DWORD *)a1 + 10))
  {
    LODWORD(v14) = 0;
    if (!a1[2])
      goto LABEL_40;
    v3 = a1;
    if (!**(_DWORD **)(a1[4] + 8))
    {
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v13);
      v3 = v13;
    }
  }
  else
  {
    LODWORD(v14) = -1;
    v3 = a1;
  }
  v13 = v3;
  v5 = (unsigned __int16)v14;
  if (v3 != v2 || ((unsigned __int16)v14 == 0xFFFFLL ? (v6 = (v14 & 0xFFFF0000) == 4294901760) : (v6 = 0), !v6))
  {
    v7 = WORD1(v14);
    do
    {
      v8 = v3[2];
      if (v8 <= v7)
        goto LABEL_39;
      re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::destroy((uint64_t)v2, ((unint64_t)(*(_DWORD *)(*(_QWORD *)(v3[4] + 16 * v7 + 8) + 4 * v5) & 0xFFFFFF) << 32) | (v7 << 16) | v5);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v13);
      v3 = v13;
      v5 = (unsigned __int16)v14;
      v7 = WORD1(v14);
    }
    while (v13 != v2 || (unsigned __int16)v14 != 0xFFFFLL || WORD1(v14) != 0xFFFFLL);
  }
  v9 = v2[2];
  v7 = v9 - 1;
  if (v9 == 1)
    goto LABEL_30;
  v8 = 16 * v9 - 16;
  do
  {
    if (v9 <= v7)
    {
      v13 = 0;
      v28 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v16 = 136315906;
      v17 = "operator[]";
      v18 = 1024;
      v19 = 789;
      v20 = 2048;
      v21 = v7;
      v22 = 2048;
      v23 = v9;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_38:
      v13 = 0;
      v28 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v16 = 136315906;
      v17 = "removeAt";
      v18 = 1024;
      v19 = 931;
      v20 = 2048;
      v21 = v7;
      v22 = 2048;
      v23 = v1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_39:
      v15 = 0;
      v28 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v16 = 136315906;
      v17 = "operator[]";
      v18 = 1024;
      v19 = 797;
      v20 = 2048;
      v21 = v7;
      v22 = 2048;
      v23 = v8;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_40:
      v15 = 0;
      v28 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v16 = 136315906;
      v17 = "operator[]";
      v18 = 1024;
      v19 = 797;
      v20 = 2048;
      v21 = 0;
      v22 = 2048;
      v23 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v10 = (_QWORD *)(v2[4] + v8);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v2 + 40))(*v2, *v10);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v2 + 40))(*v2, v10[1]);
    v1 = v2[2];
    if (v1 <= v7)
      goto LABEL_38;
    v9 = v1 - 1;
    if (v1 - 1 > v7)
    {
      *(_OWORD *)(v2[4] + v8) = *(_OWORD *)(v2[4] + 16 * v1 - 16);
      v9 = v2[2] - 1;
    }
    v2[2] = v9;
    ++*((_DWORD *)v2 + 6);
    v8 -= 16;
    --v7;
  }
  while (v7);
  v2[6] = 0xFFFFFFFF00000000;
  if (!v9)
  {
    v13 = 0;
    v28 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v2 = (_QWORD *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v16 = 136315906;
    v17 = "operator[]";
    v18 = 1024;
    v19 = 789;
    v20 = 2048;
    v21 = 0;
    v22 = 2048;
    v23 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_30:
    v2[6] = 0xFFFFFFFF00000000;
  }
  v11 = (_QWORD *)v2[4];
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v2 + 40))(*v2, *v11);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v2 + 40))(*v2, v11[1]);
  if (*v2)
  {
    if (v2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 40))(*v2);
    v2[4] = 0;
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    ++*((_DWORD *)v2 + 6);
  }
  *((_DWORD *)v2 + 11) = 0;
  return v2;
}

uint64_t re::DynamicArray<re::IBL>::deinit(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  result = *(_QWORD *)a1;
  if (result)
  {
    v3 = *(_QWORD *)(a1 + 32);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (v4)
      {
        v5 = 224 * v4;
        v6 = v3 + 120;
        do
        {
          v7 = *(void **)(v6 + 32);
          if (v7)
          {

            *(_QWORD *)(v6 + 32) = 0;
          }
          v8 = *(void **)(v6 + 24);
          if (v8)
          {

            *(_QWORD *)(v6 + 24) = 0;
          }
          v9 = *(void **)(v6 + 8);
          if (v9)
          {

            *(_QWORD *)(v6 + 8) = 0;
          }
          if (*(_QWORD *)v6)
          {

            *(_QWORD *)v6 = 0;
          }
          v10 = *(void **)(v6 - 112);
          if (v10)
          {

            *(_QWORD *)(v6 - 112) = 0;
          }
          v11 = *(void **)(v6 - 120);
          if (v11)
          {

            *(_QWORD *)(v6 - 120) = 0;
          }
          v6 += 224;
          v5 -= 224;
        }
        while (v5);
        result = *(_QWORD *)a1;
        v3 = *(_QWORD *)(a1 + 32);
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 40))(result, v3);
    }
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::DynamicArray<re::IBL>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::IBL>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::IBL>::copy((_QWORD *)a1, (uint64_t)a2);
  }
  return a1;
}

void re::DynamicArray<re::IBL>::copy(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;
  char v28;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= a1[2])
  {
    re::DynamicArray<re::IBL>::setCapacity(a1, *(_QWORD *)(a2 + 16));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::IBL *,re::IBL *,re::IBL *>((uint64_t)&v28, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 224 * a1[2], a1[4]);
    v13 = a1[2];
    if (v13 != v4)
    {
      v14 = *(_QWORD *)(a2 + 32);
      v15 = v14 + 224 * v4;
      v16 = 224 * v13;
      v17 = v14 + v16;
      v18 = a1[4] + v16;
      do
      {
        *(_QWORD *)v18 = *(id *)v17;
        *(_QWORD *)(v18 + 8) = *(id *)(v17 + 8);
        v20 = *(_OWORD *)(v17 + 32);
        v19 = *(_OWORD *)(v17 + 48);
        *(_OWORD *)(v18 + 16) = *(_OWORD *)(v17 + 16);
        *(_OWORD *)(v18 + 32) = v20;
        *(_OWORD *)(v18 + 48) = v19;
        v22 = *(_OWORD *)(v17 + 80);
        v21 = *(_OWORD *)(v17 + 96);
        v23 = *(_OWORD *)(v17 + 64);
        *(_QWORD *)(v18 + 110) = *(_QWORD *)(v17 + 110);
        *(_OWORD *)(v18 + 80) = v22;
        *(_OWORD *)(v18 + 96) = v21;
        *(_OWORD *)(v18 + 64) = v23;
        *(_QWORD *)(v18 + 120) = *(id *)(v17 + 120);
        *(_QWORD *)(v18 + 128) = *(id *)(v17 + 128);
        *(_QWORD *)(v18 + 136) = *(_QWORD *)(v17 + 136);
        *(_QWORD *)(v18 + 144) = *(id *)(v17 + 144);
        *(_QWORD *)(v18 + 152) = *(id *)(v17 + 152);
        v25 = *(_OWORD *)(v17 + 176);
        v24 = *(_OWORD *)(v17 + 192);
        v26 = *(_OWORD *)(v17 + 160);
        *(_WORD *)(v18 + 208) = *(_WORD *)(v17 + 208);
        *(_OWORD *)(v18 + 176) = v25;
        *(_OWORD *)(v18 + 192) = v24;
        *(_OWORD *)(v18 + 160) = v26;
        v17 += 224;
        v18 += 224;
      }
      while (v17 != v15);
    }
  }
  else
  {
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::IBL *,re::IBL *,re::IBL *>((uint64_t)&v27, *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 32) + 224 * v4, a1[4]);
    v5 = a1[2];
    if (v4 != v5)
    {
      v6 = -224 * v4 + 224 * v5;
      v7 = 224 * v4 + a1[4] + 120;
      do
      {
        v8 = *(void **)(v7 + 32);
        if (v8)
        {

          *(_QWORD *)(v7 + 32) = 0;
        }
        v9 = *(void **)(v7 + 24);
        if (v9)
        {

          *(_QWORD *)(v7 + 24) = 0;
        }
        v10 = *(void **)(v7 + 8);
        if (v10)
        {

          *(_QWORD *)(v7 + 8) = 0;
        }
        if (*(_QWORD *)v7)
        {

          *(_QWORD *)v7 = 0;
        }
        v11 = *(void **)(v7 - 112);
        if (v11)
        {

          *(_QWORD *)(v7 - 112) = 0;
        }
        v12 = *(void **)(v7 - 120);
        if (v12)
        {

          *(_QWORD *)(v7 - 120) = 0;
        }
        v7 += 224;
        v6 -= 224;
      }
      while (v6);
    }
  }
  a1[2] = v4;
}

_QWORD *re::DynamicArray<re::IBL>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::IBL>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0xE0uLL))
        {
          v2 = 224 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 224 * a2, 16);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_16;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 224, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_16:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = 224 * v9;
        v11 = (uint64_t)v7;
        do
        {
          re::ObjectHelper::move<re::IBL>(v8, v11);
          v8 += 224;
          v11 += 224;
          v10 -= 224;
        }
        while (v10);
        v8 = v5[4];
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_16;
    }
  }
  return result;
}

void re::ObjectHelper::move<re::IBL>(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 16) = v3;
  v5 = *(_OWORD *)(a1 + 64);
  v6 = *(_OWORD *)(a1 + 80);
  v7 = *(_OWORD *)(a1 + 96);
  *(_QWORD *)(a2 + 110) = *(_QWORD *)(a1 + 110);
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 96) = v7;
  *(_OWORD *)(a2 + 64) = v5;
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a2 + 136) = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a2 + 144) = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a2 + 152) = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  v8 = *(_OWORD *)(a1 + 160);
  v9 = *(_OWORD *)(a1 + 176);
  v10 = *(_OWORD *)(a1 + 192);
  *(_WORD *)(a2 + 208) = *(_WORD *)(a1 + 208);
  *(_OWORD *)(a2 + 176) = v9;
  *(_OWORD *)(a2 + 192) = v10;
  *(_OWORD *)(a2 + 160) = v8;
  v11 = *(void **)(a1 + 152);
  if (v11)
  {

    *(_QWORD *)(a1 + 152) = 0;
  }
  v12 = *(void **)(a1 + 144);
  if (v12)
  {

    *(_QWORD *)(a1 + 144) = 0;
  }
  v13 = *(void **)(a1 + 128);
  if (v13)
  {

    *(_QWORD *)(a1 + 128) = 0;
  }
  v14 = *(void **)(a1 + 120);
  if (v14)
  {

    *(_QWORD *)(a1 + 120) = 0;
  }
  v15 = *(void **)(a1 + 8);
  if (v15)
  {

    *(_QWORD *)(a1 + 8) = 0;
  }
  if (*(_QWORD *)a1)
  {

    *(_QWORD *)a1 = 0;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::IBL *,re::IBL *,re::IBL *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    NS::SharedPtr<MTL::Texture>::operator=((void **)a4, (void **)v5);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a4 + 8), (void **)(v5 + 8));
    v8 = *(_OWORD *)(v5 + 32);
    v7 = *(_OWORD *)(v5 + 48);
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(v5 + 16);
    *(_OWORD *)(a4 + 32) = v8;
    *(_OWORD *)(a4 + 48) = v7;
    v10 = *(_OWORD *)(v5 + 80);
    v9 = *(_OWORD *)(v5 + 96);
    v11 = *(_OWORD *)(v5 + 64);
    *(_QWORD *)(a4 + 110) = *(_QWORD *)(v5 + 110);
    *(_OWORD *)(a4 + 80) = v10;
    *(_OWORD *)(a4 + 96) = v9;
    *(_OWORD *)(a4 + 64) = v11;
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a4 + 120), (void **)(v5 + 120));
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a4 + 128), (void **)(v5 + 128));
    *(_QWORD *)(a4 + 136) = *(_QWORD *)(v5 + 136);
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a4 + 144), (void **)(v5 + 144));
    NS::SharedPtr<MTL::Texture>::operator=((void **)(a4 + 152), (void **)(v5 + 152));
    v13 = *(_OWORD *)(v5 + 176);
    v12 = *(_OWORD *)(v5 + 192);
    v14 = *(_OWORD *)(v5 + 160);
    *(_WORD *)(a4 + 208) = *(_WORD *)(v5 + 208);
    *(_OWORD *)(a4 + 176) = v13;
    *(_OWORD *)(a4 + 192) = v12;
    *(_OWORD *)(a4 + 160) = v14;
    a4 += 224;
    v5 += 224;
  }
  while (v5 != v6);
  return v6;
}

void re::ecs2::ImageBasedLightComponentStateImpl::~ImageBasedLightComponentStateImpl(re::ecs2::ImageBasedLightComponentStateImpl *this)
{
  unint64_t v1;
  re::ecs2::ImageBasedLightComponentStateImpl *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  unint64_t v38;
  __int16 v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v2 = this;
  v46 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24ED68F68;
  v3 = (void *)*((_QWORD *)this + 93);
  if (v3)
  {

    *((_QWORD *)v2 + 93) = 0;
  }
  v4 = (void *)*((_QWORD *)v2 + 92);
  if (v4)
  {

    *((_QWORD *)v2 + 92) = 0;
  }
  v5 = (void *)*((_QWORD *)v2 + 90);
  if (v5)
  {

    *((_QWORD *)v2 + 90) = 0;
  }
  v6 = (void *)*((_QWORD *)v2 + 89);
  if (v6)
  {

    *((_QWORD *)v2 + 89) = 0;
  }
  v7 = (void *)*((_QWORD *)v2 + 75);
  if (v7)
  {

    *((_QWORD *)v2 + 75) = 0;
  }
  v8 = (void *)*((_QWORD *)v2 + 74);
  if (v8)
  {

    *((_QWORD *)v2 + 74) = 0;
  }
  v9 = (void *)*((_QWORD *)v2 + 63);
  if (v9)
  {

    *((_QWORD *)v2 + 63) = 0;
  }
  v10 = (void *)*((_QWORD *)v2 + 62);
  if (v10)
  {

    *((_QWORD *)v2 + 62) = 0;
  }
  v11 = (void *)*((_QWORD *)v2 + 60);
  if (v11)
  {

    *((_QWORD *)v2 + 60) = 0;
  }
  v12 = (void *)*((_QWORD *)v2 + 59);
  if (v12)
  {

    *((_QWORD *)v2 + 59) = 0;
  }
  v13 = (void *)*((_QWORD *)v2 + 45);
  if (v13)
  {

    *((_QWORD *)v2 + 45) = 0;
  }
  v14 = (void *)*((_QWORD *)v2 + 44);
  if (v14)
  {

    *((_QWORD *)v2 + 44) = 0;
  }
  v15.n128_f64[0] = re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)v2 + 288);
  v16 = *((_QWORD *)v2 + 34);
  if (v16)
  {
    if (*((_QWORD *)v2 + 28))
      *((_QWORD *)v2 + 28) = 0;
    if (*((_QWORD *)v2 + 27))
    {
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v16 + 40))(v16, v15);
      *((_QWORD *)v2 + 27) = 0;
    }
    v15 = 0uLL;
    *(_OWORD *)((char *)v2 + 248) = 0u;
    *(_OWORD *)((char *)v2 + 232) = 0u;
    *(_OWORD *)((char *)v2 + 264) = 0u;
  }
  v17 = *((_QWORD *)v2 + 26);
  if (v17)
  {
    if (*((_QWORD *)v2 + 20))
      *((_QWORD *)v2 + 20) = 0;
    if (*((_QWORD *)v2 + 19))
    {
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v17 + 40))(v17, v15);
      *((_QWORD *)v2 + 19) = 0;
    }
    v15 = 0uLL;
    *(_OWORD *)((char *)v2 + 200) = 0u;
    *(_OWORD *)((char *)v2 + 184) = 0u;
    *(_OWORD *)((char *)v2 + 168) = 0u;
  }
  v18 = (_QWORD *)((char *)v2 + 88);
  if (!*((_DWORD *)v2 + 33))
  {
    if (*v18)
    {
      if (*((_QWORD *)v2 + 15))
        (*(void (**)(_QWORD, __n128))(*(_QWORD *)*v18 + 40))(*v18, v15);
      *((_QWORD *)v2 + 15) = 0;
      *((_QWORD *)v2 + 12) = 0;
      *((_QWORD *)v2 + 13) = 0;
      *v18 = 0;
      ++*((_DWORD *)v2 + 28);
    }
    goto LABEL_70;
  }
  v30 = (_QWORD *)((char *)v2 + 88);
  if (*((_DWORD *)v2 + 32))
  {
    LODWORD(v31) = 0;
    if (!*((_QWORD *)v2 + 13))
      goto LABEL_78;
    v19 = (_QWORD *)((char *)v2 + 88);
    if (!**(_DWORD **)(*((_QWORD *)v2 + 15) + 8))
    {
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v30);
      v19 = v30;
    }
  }
  else
  {
    LODWORD(v31) = -1;
    v19 = (_QWORD *)((char *)v2 + 88);
  }
  v30 = v19;
  v20 = (unsigned __int16)v31;
  if (v18 != v19 || (unsigned __int16)v31 != 0xFFFFLL || (v31 & 0xFFFF0000) != 0xFFFF0000)
  {
    v21 = WORD1(v31);
    do
    {
      v22 = v19[2];
      if (v22 <= v21)
        goto LABEL_77;
      re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerSceneData>::destroy((_QWORD *)v2 + 11, ((unint64_t)(*(_DWORD *)(*(_QWORD *)(v19[4] + 16 * v21 + 8) + 4 * v20) & 0xFFFFFF) << 32) | (v21 << 16) | v20);
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v30);
      v19 = v30;
      v20 = (unsigned __int16)v31;
      v21 = WORD1(v31);
    }
    while (v30 != v18 || (unsigned __int16)v31 != 0xFFFFLL || WORD1(v31) != 0xFFFFLL);
  }
  v23 = *((_QWORD *)v2 + 13);
  v21 = v23 - 1;
  if (v23 == 1)
    goto LABEL_64;
  v22 = 16 * v23 - 16;
  do
  {
    if (v23 <= v21)
    {
      v30 = 0;
      v45 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v33 = 136315906;
      v34 = "operator[]";
      v35 = 1024;
      v36 = 789;
      v37 = 2048;
      v38 = v21;
      v39 = 2048;
      v40 = v23;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_76:
      v30 = 0;
      v45 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v33 = 136315906;
      v34 = "removeAt";
      v35 = 1024;
      v36 = 931;
      v37 = 2048;
      v38 = v21;
      v39 = 2048;
      v40 = v1;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_77:
      v32 = 0;
      v45 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v33 = 136315906;
      v34 = "operator[]";
      v35 = 1024;
      v36 = 797;
      v37 = 2048;
      v38 = v21;
      v39 = 2048;
      v40 = v22;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
LABEL_78:
      v32 = 0;
      v45 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v33 = 136315906;
      v34 = "operator[]";
      v35 = 1024;
      v36 = 797;
      v37 = 2048;
      v38 = 0;
      v39 = 2048;
      v40 = 0;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v24 = (_QWORD *)(*((_QWORD *)v2 + 15) + v22);
    (*(void (**)(_QWORD, _QWORD, __n128))(**((_QWORD **)v2 + 11) + 40))(*((_QWORD *)v2 + 11), *v24, v15);
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v2 + 11) + 40))(*((_QWORD *)v2 + 11), v24[1]);
    v1 = *((_QWORD *)v2 + 13);
    if (v1 <= v21)
      goto LABEL_76;
    v23 = v1 - 1;
    if (v1 - 1 > v21)
    {
      v25 = *((_QWORD *)v2 + 15);
      v15 = *(__n128 *)(v25 + 16 * v1 - 16);
      *(__n128 *)(v25 + v22) = v15;
      v23 = *((_QWORD *)v2 + 13) - 1;
    }
    *((_QWORD *)v2 + 13) = v23;
    ++*((_DWORD *)v2 + 28);
    v22 -= 16;
    --v21;
  }
  while (v21);
  *((_QWORD *)v2 + 17) = 0xFFFFFFFF00000000;
  if (!v23)
  {
    v30 = 0;
    v45 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v2 = (re::ecs2::ImageBasedLightComponentStateImpl *)MEMORY[0x24BDACB70];
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    v33 = 136315906;
    v34 = "operator[]";
    v35 = 1024;
    v36 = 789;
    v37 = 2048;
    v38 = 0;
    v39 = 2048;
    v40 = 0;
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
LABEL_64:
    *((_QWORD *)v2 + 17) = 0xFFFFFFFF00000000;
  }
  v26 = (_QWORD *)*((_QWORD *)v2 + 15);
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v2 + 11) + 40))(*((_QWORD *)v2 + 11), *v26);
  (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)v2 + 11) + 40))(*((_QWORD *)v2 + 11), v26[1]);
  v27 = *((_QWORD *)v2 + 11);
  if (v27)
  {
    if (*((_QWORD *)v2 + 15))
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
    *((_QWORD *)v2 + 15) = 0;
    v18[1] = 0;
    v18[2] = 0;
    *v18 = 0;
    ++*((_DWORD *)v2 + 28);
  }
  *((_DWORD *)v2 + 33) = 0;
LABEL_70:
  v28 = re::HashTable<re::ecs2::Scene *,re::BucketArray<RESubscriptionHandle,8ul>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)v2 + 5);
  v29 = *((_QWORD *)v2 + 2);
  if (v29)
  {
    if (*((_QWORD *)v2 + 3))
    {
      (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v29 + 40))(v29, *((_QWORD *)v2 + 4), v28);
      *((_QWORD *)v2 + 3) = 0;
      *((_QWORD *)v2 + 4) = 0;
    }
    *((_QWORD *)v2 + 2) = 0;
  }
}

double re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id *v5;
  double result;

  if (*(_QWORD *)(a1 + 56))
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 16);
      if (v3)
      {
        v4 = 72 * v3;
        v5 = (id *)(v2 + 56);
        do
        {
          if (*v5)
          {

            *v5 = 0;
          }
          re::DynamicArray<re::IBL>::deinit((uint64_t)(v5 - 5));
          v5 += 9;
          v4 -= 72;
        }
        while (v4);
      }
      *(_QWORD *)(a1 + 8) = 0;
    }
    if (*(_QWORD *)a1)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56));
      *(_QWORD *)a1 = 0;
    }
    result = 0.0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

_QWORD *re::make::shared::unsafelyInplace<re::ecs2::ImageBasedLightComponent>(_QWORD *a1)
{
  _anonymous_namespace_ *v2;

  bzero(a1, 0x550uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  a1[2] = 0;
  *((_BYTE *)a1 + 24) = 0;
  *a1 = &off_24ED58DC0;
  *(_QWORD *)((char *)a1 + 28) = 0;
  *(_QWORD *)((char *)a1 + 140) = 0;
  *(_OWORD *)(a1 + 5) = 0u;
  *(_OWORD *)(a1 + 7) = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  *(_OWORD *)(a1 + 11) = 0u;
  *(_OWORD *)(a1 + 13) = 0u;
  *(_OWORD *)(a1 + 15) = 0u;
  *((_WORD *)a1 + 68) = 0;
  *((_BYTE *)a1 + 148) = 1;
  *((_BYTE *)a1 + 152) = 0;
  *((_OWORD *)a1 + 73) = 0u;
  *((_OWORD *)a1 + 74) = 0u;
  re::DynamicString::setCapacity(a1 + 146, 0);
  *((_WORD *)a1 + 604) = 0;
  a1[150] = 0;
  *((_OWORD *)a1 + 76) = xmmword_2260E5F10;
  *((_OWORD *)a1 + 77) = xmmword_2260E5F20;
  *((_OWORD *)a1 + 78) = xmmword_2260E5F40;
  a1[158] = 0;
  *((_OWORD *)a1 + 80) = 0u;
  *((_BYTE *)a1 + 1296) = 0;
  *(_OWORD *)(a1 + 163) = 0u;
  *(_OWORD *)(a1 + 165) = 0u;
  *(_OWORD *)((char *)a1 + 1332) = 0u;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::ImageBasedLightSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::ImageBasedLightSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

_anonymous_namespace_ *re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerSceneData>::allocBlock(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _anonymous_namespace_ *result;
  uint64_t v8;
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;

  v3 = (unint64_t)*((unsigned int *)a1 + 11) << 7;
  v4 = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v3, 0);
  if (!v4)
  {
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v3, *(_QWORD *)(*a1 + 8));
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  v6 = v4;
  v1 = 4 * *((unsigned int *)a1 + 11);
  result = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v1, 0);
  if (!result)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v1, *(_QWORD *)(*a1 + 8));
    result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    return result;
  }
  v9 = result;
  v11 = a1[1];
  v10 = a1[2];
  if (v10 >= v11)
  {
    v12 = v10 + 1;
    if (v11 < v10 + 1)
    {
      if (*a1)
      {
        v13 = 2 * v11;
        if (!v11)
          v13 = 8;
        if (v13 <= v12)
          v14 = v12;
        else
          v14 = v13;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v14);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v12);
        ++*((_DWORD *)a1 + 6);
      }
    }
    v10 = a1[2];
  }
  v15 = (uint64_t *)(a1[4] + 16 * v10);
  *v15 = v6;
  v15[1] = (uint64_t)v9;
  a1[2] = v10 + 1;
  ++*((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 12) = 0;
  return result;
}

_anonymous_namespace_ *re::DataArray<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>::allocBlock(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _anonymous_namespace_ *result;
  uint64_t v8;
  _anonymous_namespace_ *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;

  v3 = 96 * *((unsigned int *)a1 + 11);
  v4 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v3, 0);
  if (!v4)
  {
    re::internal::assertLog((re::internal *)6, v5, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.elements", "allocBlock", 520, v3, *(_QWORD *)(*a1 + 8));
    _os_crash();
    __break(1u);
    goto LABEL_16;
  }
  v6 = v4;
  v1 = 4 * *((unsigned int *)a1 + 11);
  result = (_anonymous_namespace_ *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(*a1, v1, 0);
  if (!result)
  {
LABEL_16:
    re::internal::assertLog((re::internal *)6, v8, "assertion failure: '%s' (%s:line %i) DataArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "block.allocationCounters", "allocBlock", 528, v1, *(_QWORD *)(*a1 + 8));
    result = (_anonymous_namespace_ *)_os_crash();
    __break(1u);
    return result;
  }
  v9 = result;
  v11 = a1[1];
  v10 = a1[2];
  if (v10 >= v11)
  {
    v12 = v10 + 1;
    if (v11 < v10 + 1)
    {
      if (*a1)
      {
        v13 = 2 * v11;
        if (!v11)
          v13 = 8;
        if (v13 <= v12)
          v14 = v12;
        else
          v14 = v13;
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v14);
      }
      else
      {
        result = (_anonymous_namespace_ *)re::DynamicArray<re::RigNodeConstraint>::setCapacity(a1, v12);
        ++*((_DWORD *)a1 + 6);
      }
    }
    v10 = a1[2];
  }
  v15 = (uint64_t *)(a1[4] + 16 * v10);
  *v15 = v6;
  v15[1] = (uint64_t)v9;
  a1[2] = v10 + 1;
  ++*((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 12) = 0;
  return result;
}

uint64_t re::HashBrown<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::ImageBasedLightComponentStateImpl::PerSceneData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::resize(uint64_t *a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int8x16_t v14;
  unsigned __int16 v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  __int128 v50;
  _BYTE v51[48];

  v3 = a1[2];
  v4 = a1[3] + a2;
  v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7)
    v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v7 = (v6 << 7) / 0x97;
  v8 = a1[7];
  v50 = 0u;
  *(_OWORD *)v51 = 0u;
  if (v5 > v3)
    v9 = v7;
  else
    v9 = v4;
  memset(&v51[16], 0, 32);
  v10 = (_anonymous_namespace_ *)re::HashBrown<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::ImageBasedLightComponentStateImpl::PerSceneData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(&v50, v8, v9);
  v11 = a1[2];
  if (v11 >= 0x10)
  {
    v12 = 0;
    v13 = v11 >> 4;
    v14 = (int8x16_t)xmmword_2260EE390;
    while (1)
    {
      v15 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v12)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v16 = (unsigned __int16)~v15;
      if (v15 != 0xFFFF)
        break;
      v12 += 16;
      if (!--v13)
        goto LABEL_12;
    }
    v17 = __clz(__rbit64(v16)) + v12;
    while (v17 != -1)
    {
      v27 = a1[1];
      if (!*(_QWORD *)&v51[40])
      {
        v49 = v14;
        v14 = v49;
      }
      if (!*(_QWORD *)&v51[16]
        || (v28 = *(_QWORD *)v51, *(_QWORD *)v51 > (unint64_t)(8 * *(_QWORD *)&v51[16])))
      {
        v48 = v14;
        v10 = (_anonymous_namespace_ *)re::HashBrown<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::ImageBasedLightComponentStateImpl::PerSceneData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::resize(&v50, 1);
        v14 = v48;
        v28 = *(_QWORD *)v51;
      }
      v29 = (unint64_t *)(v27 + 16 * v17);
      v30 = 0xBF58476D1CE4E5B9 * (*v29 ^ (*v29 >> 30));
      v31 = (0x94D049BB133111EBLL * (v30 ^ (v30 >> 27))) ^ ((0x94D049BB133111EBLL * (v30 ^ (v30 >> 27))) >> 31);
      v32 = v28 >> 4;
      v33 = v31 % (v28 >> 4);
      v34 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v50 + 16 * v33)), v14)))), (int8x8_t)0x3830282018100800)));
      if (v34 >= 0x40)
      {
        do
        {
          if (v33 + 1 == v32)
            v33 = 0;
          else
            ++v33;
          v34 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v50 + 16 * v33)), v14)))), (int8x8_t)0x3830282018100800)));
        }
        while (v34 > 0x3F);
      }
      v35 = (uint64_t *)(v29 + 1);
      v36 = v50 + 16 * v33;
      v37 = *(unsigned __int8 *)(v36 + v34) == 255;
      *(_BYTE *)(v36 + v34) = v31 & 0x7F;
      v38 = *v29;
      v39 = *v35;
      v40 = *(_QWORD *)&v51[8];
      v41 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 16 * (v34 + 16 * v33));
      *v41 = v38;
      v41[1] = v39;
      *(_QWORD *)&v51[8] = v40 + 1;
      *(_QWORD *)&v51[16] -= v37;
      v42 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v38 ^ (v38 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v38 ^ (v38 >> 30))) >> 27));
      *(_QWORD *)&v51[24] ^= (v42 >> 31) ^ v42;
      v43 = v17 >> 4;
      v11 = a1[2];
      if (v17 >> 4 >= v11 >> 4)
        break;
      v44 = __clz(__rbit64((-2 << (v17 & 0xF)) & v16));
      if (v44 >= 0x40)
      {
        v45 = 16 * v43;
        v46 = ~v43 + (v11 >> 4);
        while (v46)
        {
          v16 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v45 + 16)), v14)))), (int8x8_t)0x3830282018100800);
          v47 = __clz(__rbit64(v16));
          v45 += 16;
          --v46;
          if (v47 <= 0x3F)
          {
            v17 = v47 + v45;
            goto LABEL_30;
          }
        }
        break;
      }
      v17 = v44 + (v17 & 0xFFFFFFFFFFFFFFF0);
LABEL_30:
      ;
    }
  }
LABEL_12:
  v19 = *(_QWORD *)&v51[40];
  *(_QWORD *)&v51[40] = a1[7];
  result = *(_QWORD *)&v51[40];
  v20 = v50;
  v21 = *(_OWORD *)v51;
  *(_QWORD *)v51 = v11;
  v22 = *a1;
  v23 = a1[1];
  *(_QWORD *)&v50 = *a1;
  *((_QWORD *)&v50 + 1) = v23;
  v24 = *(_OWORD *)&v51[16];
  v25 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v51[32];
  a1[7] = v19;
  *(_OWORD *)&v51[24] = v25;
  v26 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v20;
  *((_OWORD *)a1 + 1) = v21;
  *((_OWORD *)a1 + 2) = v24;
  *(_OWORD *)&v51[8] = v26;
  if (result)
  {
    if (v23)
      *((_QWORD *)&v50 + 1) = 0;
    if (v22)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

_QWORD *re::HashBrown<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::ImageBasedLightComponentStateImpl::PerSceneData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t i;
  _QWORD *v12;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v6 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 17 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v7 = 0;
      *(_QWORD *)&v8 = -1;
      *((_QWORD *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      result = (_QWORD *)*v3;
    }
    v3[1] = &result[2 * v6];
    v9 = v3[2];
    if (v9)
    {
      v10 = 0;
      for (i = 0; i < v9; ++i)
      {
        v12 = (_QWORD *)(v3[1] + v10);
        *v12 = 0;
        v12[1] = 0xFFFFFFFFLL;
        v9 = v3[2];
        v10 += 16;
      }
    }
  }
  else
  {
    v9 = 0;
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v9;
  return result;
}

uint64_t re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::find(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  unint64_t v9;
  int8x16_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a1[7])
    return -1;
  v2 = a1[2];
  if (v2 < 0x10 || !a1[3])
    return -1;
  v3 = v2 >> 4;
  v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v5 = v4 ^ (v4 >> 31);
  v6 = v5 % v3;
  v7 = vdupq_n_s8(v5 & 0x7F);
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  v9 = v5 % v3;
  while (1)
  {
    v10 = *(int8x16_t *)(*a1 + 16 * v9);
    v11 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v7, v10), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    v12 = __clz(__rbit64(v11));
    if (v12 <= 0x3F)
      break;
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v10, v8), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v9 + 1 == v3)
      v9 = 0;
    else
      ++v9;
    v14 = -1;
    if (v9 == v6)
      return v14;
  }
  v13 = 16 * v9;
  while (1)
  {
    v14 = v12 + v13;
    if (*(_QWORD *)(a1[1] + 72 * (v12 + v13)) == a2)
      return v14;
    if (v12 <= 0x3E)
    {
      v12 = __clz(__rbit64((-2 << v12) & v11));
      if (v12 < 0x40)
        continue;
    }
    goto LABEL_10;
  }
}

double re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(uint64_t *a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __n128 v15;
  unsigned __int16 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _QWORD v25[2];
  uint64_t v26;
  __int128 v27;
  _BYTE v28[48];

  v3 = a1[2];
  v4 = a1[3] + a2;
  v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7)
    v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v7 = (v6 << 7) / 0x97;
  v8 = a1[7];
  v27 = 0u;
  *(_OWORD *)v28 = 0u;
  if (v5 > v3)
    v9 = v7;
  else
    v9 = v4;
  memset(&v28[16], 0, 32);
  re::HashBrown<unsigned long,re::HashBrown<unsigned long,unsigned short,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>,re::Hash<unsigned long>,re::EqualTo<unsigned long>,void,false>::init(&v27, v8, v9);
  v25[0] = a1;
  v11 = a1[2];
  if (v11 >= 0x10)
  {
    v12 = 0;
    v13 = *a1;
    v14 = v11 >> 4;
    v15 = (__n128)xmmword_2260EE390;
    v10.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      v16 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v13 + v12)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v25[1] = (unsigned __int16)~v16;
      if (v16 != 0xFFFF)
        break;
      v12 += 16;
      if (!--v14)
        goto LABEL_14;
    }
    v17 = __clz(__rbit64((unsigned __int16)~v16)) + v12;
    v26 = v17;
    if (v17 != -1)
    {
      do
      {
        re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(&v27, *(_QWORD *)(v25[0] + 8) + 72 * v17, *(_QWORD *)(v25[0] + 8) + 72 * v17 + 8, v15, v10);
        re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v25);
        v17 = v26;
      }
      while (v26 != -1);
      v11 = a1[2];
    }
  }
LABEL_14:
  v18 = *(_QWORD *)&v28[40];
  *(_QWORD *)&v28[40] = a1[7];
  v19 = v27;
  v20 = *(_OWORD *)v28;
  v27 = *(_OWORD *)a1;
  *(_QWORD *)v28 = v11;
  v21 = *(_OWORD *)&v28[16];
  v22 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v28[32];
  a1[7] = v18;
  *(_OWORD *)&v28[24] = v22;
  v23 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v19;
  *((_OWORD *)a1 + 1) = v20;
  *((_OWORD *)a1 + 2) = v21;
  *(_OWORD *)&v28[8] = v23;
  return re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::deinit((uint64_t)&v27);
}

_QWORD *re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::internalAdd(_anonymous_namespace_ *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  _QWORD *result;
  unint64_t v23;
  unint64_t v24;
  _OWORD v25[2];
  int v26;
  id v27[2];
  int v28;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<unsigned long long,std::pair<re::ecs2::Scene *,re::IBLContext>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize((uint64_t *)a1, 1u);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13);
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  v16 = v13 + 16 * v11;
  v17 = *a2;
  v18 = *(_OWORD *)(a3 + 16);
  v25[0] = *(_OWORD *)a3;
  v25[1] = v18;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  ++*(_DWORD *)(a3 + 32);
  v26 = 1;
  *(_OWORD *)v27 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a3 + 40) = 0u;
  v28 = *(_DWORD *)(a3 + 56);
  v19 = *((_QWORD *)a1 + 1) + 72 * v16;
  *(_QWORD *)v19 = v17;
  *(_QWORD *)(v19 + 8) = *(_QWORD *)&v25[0];
  re::DynamicArray<re::DataArray<re::RigGraphNode>::ElementBlock>::operator=(v19 + 16, (uint64_t)v25 + 8);
  NS::SharedPtr<MTL::Texture>::operator=((void **)(v19 + 56), &v27[1]);
  *(_DWORD *)(v19 + 64) = v28;
  if (v27[1])
  {

    v27[1] = 0;
  }
  re::DynamicArray<re::IBL>::deinit((uint64_t)v25 + 8);
  v20 = *((_QWORD *)a1 + 4) - (v15 == 255);
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v20;
  v21 = (unint64_t *)(*((_QWORD *)a1 + 1) + 72 * v16);
  v23 = *v21;
  result = v21 + 1;
  v24 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (v23 ^ (v23 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v23 ^ (v23 >> 30))) >> 27));
  *((_QWORD *)a1 + 5) ^= (v24 >> 31) ^ v24;
  return result;
}

uint64_t re::HashBrown<re::ecs2::Entity const*,re::ecs2::ImageBasedLightComponentStateImpl::EntityDataHandle,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::find(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  unint64_t v9;
  int8x16_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a1[7])
    return -1;
  v2 = a1[2];
  if (v2 < 0x10 || !a1[3])
    return -1;
  v3 = v2 >> 4;
  v4 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v5 = v4 ^ (v4 >> 31);
  v6 = v5 % v3;
  v7 = vdupq_n_s8(v5 & 0x7F);
  v8.i64[0] = -1;
  v8.i64[1] = -1;
  v9 = v5 % v3;
  while (1)
  {
    v10 = *(int8x16_t *)(*a1 + 16 * v9);
    v11 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v7, v10), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
    v12 = __clz(__rbit64(v11));
    if (v12 <= 0x3F)
      break;
LABEL_10:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v10, v8), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v9 + 1 == v3)
      v9 = 0;
    else
      ++v9;
    v14 = -1;
    if (v9 == v6)
      return v14;
  }
  v13 = 16 * v9;
  while (1)
  {
    v14 = v12 + v13;
    if (*(_QWORD *)(a1[1] + 32 * (v12 + v13)) == a2)
      return v14;
    if (v12 <= 0x3E)
    {
      v12 = __clz(__rbit64((-2 << v12) & v11));
      if (v12 < 0x40)
        continue;
    }
    goto LABEL_10;
  }
}

uint64_t re::HashBrown<unsigned long long,re::DataArrayHandle<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(uint64_t *a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int8x16_t v15;
  unsigned __int16 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t result;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _QWORD v39[2];
  uint64_t v40;
  __int128 v41;
  _BYTE v42[48];

  v3 = a1[2];
  v4 = a1[3] + a2;
  v5 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v6 = ((3 * v3) >> 1) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 > (192 * v3) >> 7)
    v6 = (((unint64_t)(151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  v7 = (v6 << 7) / 0x97;
  v8 = a1[7];
  v41 = 0u;
  *(_OWORD *)v42 = 0u;
  if (v5 > v3)
    v9 = v7;
  else
    v9 = v4;
  memset(&v42[16], 0, 32);
  v10 = (_anonymous_namespace_ *)re::HashBrown<re::ecs2::Scene const*,re::DataArrayHandle<re::ecs2::ImageBasedLightComponentStateImpl::PerSceneData>,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,void,false>::init(&v41, v8, v9);
  v39[0] = a1;
  v11 = a1[2];
  if (v11 >= 0x10)
  {
    v12 = 0;
    v13 = *a1;
    v14 = v11 >> 4;
    v15 = (int8x16_t)xmmword_2260EE390;
    while (1)
    {
      v16 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v13 + v12)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v39[1] = (unsigned __int16)~v16;
      if (v16 != 0xFFFF)
        break;
      v12 += 16;
      if (!--v14)
        goto LABEL_25;
    }
    v17 = __clz(__rbit64((unsigned __int16)~v16)) + v12;
    v40 = v17;
    if (v17 != -1)
    {
      do
      {
        v18 = *(_QWORD *)(v39[0] + 8);
        if (!*(_QWORD *)&v42[40])
        {
          v15 = (int8x16_t)xmmword_2260EE390;
        }
        if (!*(_QWORD *)&v42[16]
          || (v19 = *(_QWORD *)v42, *(_QWORD *)v42 > (unint64_t)(8 * *(_QWORD *)&v42[16])))
        {
          re::HashBrown<unsigned long long,re::DataArrayHandle<re::ecs2::ImageBasedLightComponentStateImpl::PerWorldData>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::resize(&v41, 1);
          v15 = (int8x16_t)xmmword_2260EE390;
          v19 = *(_QWORD *)v42;
        }
        v20 = (_QWORD *)(v18 + 16 * v17);
        v21 = 0xBF58476D1CE4E5B9 * (*v20 ^ (*v20 >> 30));
        v22 = (0x94D049BB133111EBLL * (v21 ^ (v21 >> 27))) ^ ((0x94D049BB133111EBLL * (v21 ^ (v21 >> 27))) >> 31);
        v23 = v19 >> 4;
        v24 = v22 % (v19 >> 4);
        v25 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v41 + 16 * v24)), v15)))), (int8x8_t)0x3830282018100800)));
        if (v25 >= 0x40)
        {
          do
          {
            if (v24 + 1 == v23)
              v24 = 0;
            else
              ++v24;
            v25 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v41 + 16 * v24)), v15)))), (int8x8_t)0x3830282018100800)));
          }
          while (v25 > 0x3F);
        }
        v26 = v41 + 16 * v24;
        v27 = *(unsigned __int8 *)(v26 + v25);
        *(_BYTE *)(v26 + v25) = v22 & 0x7F;
        v28 = v25 + 16 * v24;
        *(_OWORD *)(*((_QWORD *)&v41 + 1) + 16 * v28) = *(_OWORD *)v20;
        ++*(_QWORD *)&v42[8];
        *(_QWORD *)&v42[16] -= v27 == 255;
        v29 = 0xBF58476D1CE4E5B9
            * (*(_QWORD *)(*((_QWORD *)&v41 + 1) + 16 * v28) ^ (*(_QWORD *)(*((_QWORD *)&v41 + 1) + 16 * v28) >> 30));
        *(_QWORD *)&v42[24] ^= ((0x94D049BB133111EBLL * (v29 ^ (v29 >> 27))) >> 31) ^ (0x94D049BB133111EBLL
                                                                                     * (v29 ^ (v29 >> 27)));
        v10 = (_anonymous_namespace_ *)re::HashBrown<unsigned long long,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,void,false>::HashBrownIterator<re::KeyValuePair<unsigned long long const&,std::unique_ptr<re::EventBus::EventInfo,std::function<void ()(re::EventBus::EventInfo*)>>&>>::operator++(v39);
        v15 = (int8x16_t)xmmword_2260EE390;
        v17 = v40;
      }
      while (v40 != -1);
      v11 = a1[2];
    }
  }
LABEL_25:
  v31 = *(_QWORD *)&v42[40];
  *(_QWORD *)&v42[40] = a1[7];
  result = *(_QWORD *)&v42[40];
  v32 = v41;
  v33 = *(_OWORD *)v42;
  *(_QWORD *)v42 = v11;
  v34 = *a1;
  v35 = a1[1];
  *(_QWORD *)&v41 = *a1;
  *((_QWORD *)&v41 + 1) = v35;
  v36 = *(_OWORD *)&v42[16];
  v37 = *(_OWORD *)(a1 + 5);
  a1[6] = *(_QWORD *)&v42[32];
  a1[7] = v31;
  *(_OWORD *)&v42[24] = v37;
  v38 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)a1 = v32;
  *((_OWORD *)a1 + 1) = v33;
  *((_OWORD *)a1 + 2) = v36;
  *(_OWORD *)&v42[8] = v38;
  if (result)
  {
    if (v35)
      *((_QWORD *)&v41 + 1) = 0;
    if (v34)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

_QWORD *re::DynamicArray<re::IBL>::growCapacity(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = this[1];
  if (v2 < a2)
  {
    v3 = a2;
    v4 = this;
    if (*this)
    {
      v5 = 2 * v2;
      v6 = v2 == 0;
      v7 = 8;
      if (!v6)
        v7 = v5;
      if (v7 > a2)
        a2 = v7;
      return re::DynamicArray<re::IBL>::setCapacity(this, a2);
    }
    else
    {
      this = re::DynamicArray<re::IBL>::setCapacity(v4, v3);
      ++*((_DWORD *)v4 + 6);
    }
  }
  return this;
}

uint64_t re::HashBrown<re::ecs2::Entity const*,re::ecs2::ImageBasedLightComponentStateImpl::EntityDataHandle,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::resize(uint64_t *a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int16 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  v3 = a1[2];
  v4 = a1[3] + a2;
  v5 = (((151 * v4) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v5 > v3)
  {
    v6 = 3 * v3;
    v7 = v6 << 6;
    v8 = (v6 >> 1) & 0x1FFFFFFFFFFFFFFLL;
    if (v5 <= v7 >> 7)
      v5 = v8;
    v4 = (v5 << 7) / 0x97;
  }
  v9 = a1[7];
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  re::HashBrown<re::ecs2::Entity const*,re::ecs2::ImageBasedLightComponentStateImpl::EntityDataHandle,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::init(&v26, v9, v4);
  v10 = a1[2];
  if (v10 >= 0x10)
  {
    v11 = 0;
    v12 = v10 >> 4;
    while (1)
    {
      v13 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800).u16[0];
      v14 = (unsigned __int16)~v13;
      if (v13 != 0xFFFF)
        break;
      v11 += 16;
      if (!--v12)
        goto LABEL_11;
    }
    v15 = __clz(__rbit64(v14)) + v11;
    if (v15 != -1)
    {
      do
      {
        re::HashBrown<re::ecs2::Entity const*,re::ecs2::ImageBasedLightComponentStateImpl::EntityDataHandle,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::internalAdd((_anonymous_namespace_ *)&v26, (_QWORD *)(a1[1] + 32 * v15), (__n128 *)(a1[1] + 32 * v15 + 8));
        v20 = v15 >> 4;
        v21 = a1[2];
        if (v15 >> 4 >= v21 >> 4)
          break;
        v22 = __clz(__rbit64((-2 << (v15 & 0xF)) & v14));
        if (v22 >= 0x40)
        {
          v24 = v21 >> 4;
          v23 = 16 * v20;
          v25 = ~v20 + v24;
          while (v25)
          {
            v14 = (unsigned __int16)~*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + v23 + 16)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800);
            v22 = __clz(__rbit64(v14));
            v23 += 16;
            --v25;
            if (v22 <= 0x3F)
              goto LABEL_21;
          }
          break;
        }
        v23 = v15 & 0xFFFFFFFFFFFFFFF0;
LABEL_21:
        v15 = v22 + v23;
      }
      while (v22 + v23 != -1);
    }
  }
LABEL_11:
  result = a1[7];
  v17 = *a1;
  v18 = *((_QWORD *)&v29 + 1);
  a1[6] = v29;
  a1[7] = v18;
  v19 = v27;
  *(_OWORD *)a1 = v26;
  *((_OWORD *)a1 + 1) = v19;
  *((_OWORD *)a1 + 2) = v28;
  if (result)
  {
    if (v17)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  }
  return result;
}

__n128 re::HashBrown<re::ecs2::Entity const*,re::ecs2::ImageBasedLightComponentStateImpl::EntityDataHandle,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::internalAdd(_anonymous_namespace_ *a1, _QWORD *a2, __n128 *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  __n128 result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  if (!*((_QWORD *)a1 + 7))
  {
  }
  v6 = *((_QWORD *)a1 + 4);
  if (!v6 || (v7 = *((_QWORD *)a1 + 2), v7 > 8 * v6))
  {
    re::HashBrown<re::ecs2::Entity const*,re::ecs2::ImageBasedLightComponentStateImpl::EntityDataHandle,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::resize(a1, 1);
    v7 = *((_QWORD *)a1 + 2);
  }
  v8 = 0xBF58476D1CE4E5B9 * (*a2 ^ (*a2 >> 30));
  v9 = (0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) ^ ((0x94D049BB133111EBLL * (v8 ^ (v8 >> 27))) >> 31);
  v10 = v7 >> 4;
  v11 = v9 % (v7 >> 4);
  v12 = *(_QWORD *)a1;
  v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(_QWORD *)a1 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
  if (v13 >= 0x40)
  {
    do
    {
      if (v11 + 1 == v10)
        v11 = 0;
      else
        ++v11;
      v13 = __clz(__rbit64(*(_QWORD *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v12 + 16 * v11)), (int8x16_t)xmmword_2260EE390)))), (int8x8_t)0x3830282018100800)));
    }
    while (v13 > 0x3F);
  }
  v14 = v12 + 16 * v11;
  v15 = *(unsigned __int8 *)(v14 + v13) == 255;
  *(_BYTE *)(v14 + v13) = v9 & 0x7F;
  result = *a3;
  v17 = a3[1].n128_u64[0];
  v18 = 32 * (v13 + 16 * v11);
  v19 = *((_QWORD *)a1 + 1) + v18;
  *(_QWORD *)v19 = *a2;
  *(_QWORD *)(v19 + 24) = v17;
  *(__n128 *)(v19 + 8) = result;
  v20 = *((_QWORD *)a1 + 4) - v15;
  ++*((_QWORD *)a1 + 3);
  *((_QWORD *)a1 + 4) = v20;
  v21 = *(_QWORD *)(*((_QWORD *)a1 + 1) + v18) ^ (*(_QWORD *)(*((_QWORD *)a1 + 1) + v18) >> 30);
  v22 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v21) ^ ((0xBF58476D1CE4E5B9 * v21) >> 27));
  *((_QWORD *)a1 + 5) ^= (v22 >> 31) ^ v22;
  return result;
}

_QWORD *re::HashBrown<re::ecs2::Entity const*,re::ecs2::ImageBasedLightComponentStateImpl::EntityDataHandle,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,void,false>::init(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = result;
  result[7] = a2;
  v4 = 151 * a3;
  v5 = ((unint64_t)(151 * a3) >> 7) + 15;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) != 0)
  {
    v6 = v5 >> 4;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 33 * (v5 & 0x3FFFFFFFFFFFFF0), 16);
    *v3 = result;
    if (v4 >= 0x80)
    {
      v7 = 0;
      *(_QWORD *)&v8 = -1;
      *((_QWORD *)&v8 + 1) = -1;
      do
        *(_OWORD *)(*v3 + 16 * v7++) = v8;
      while (v6 != v7);
      result = (_QWORD *)*v3;
    }
    v3[1] = &result[2 * v6];
    if (v3[2])
    {
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = v3[1] + v9;
        *(_OWORD *)v11 = 0uLL;
        *(_OWORD *)(v11 + 16) = 0uLL;
        *(_DWORD *)(v11 + 8) = -1;
        *(_DWORD *)(v11 + 16) = -1;
        ++v10;
        v12 = v3[2];
        v9 += 32;
      }
      while (v10 < v12);
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    v12 = 0;
    *result = 0;
    result[1] = 0;
  }
  v3[5] = 0;
  v3[6] = 0;
  v3[3] = 0;
  v3[4] = v12;
  return result;
}

uint64_t *re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  _anonymous_namespace_ *v7;
  uint64_t *result;
  re::EventBus *v9;
  re *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  re *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  re *v21;
  re *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  re *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  re *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  re *v42;
  re *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  re *v48;
  re *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  re *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _BYTE v60[24];
  uint64_t v61;
  uint64_t *v62;
  _BYTE v63[24];
  uint64_t v64;
  re *v65;
  _BYTE v66[24];
  uint64_t v67;
  re *v68;
  _BYTE v69[24];
  uint64_t v70;
  re *v71;
  _BYTE v72[24];
  uint64_t v73;
  _BYTE *v74;
  _BYTE v75[24];
  uint64_t v76;
  re *v77;
  _BYTE v78[24];
  uint64_t v79;
  re *v80;
  _BYTE v81[24];
  uint64_t v82;
  re *v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a3 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)+ 480;
  for (i = 24; i != 56; i += 8)
  {
    v7 = (_anonymous_namespace_ *)re::ecs2::ComponentBucketsBase::addBucket(*(re::ecs2::ComponentBucketsBase **)(a1 + 16));
    *(_QWORD *)(a1 + i) = v7;
  }
  v9 = *(re::EventBus **)(a3 + 288);
  if (v9)
  {
    v82 = re::globalAllocators((re *)result)[2];
    v10 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v82 + 32))(v82, 32, 0);
    *(_QWORD *)v10 = &off_24ED69168;
    *((_QWORD *)v10 + 1) = a1;
    *((_QWORD *)v10 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::componentChangedHandler<REComponentDidChangeEvent>;
    *((_QWORD *)v10 + 3) = 0;
    v83 = v10;
    v11 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v81, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v13 = v12;
    v14 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v14 = v11;
    v14[1] = v13;
    v15 = v83;
    if (v83)
    {
      v15 = (re *)(**(uint64_t (***)(re *))v83)(v83);
      if (v83 != (re *)v81)
        v15 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v82 + 40))(v82);
      v83 = 0;
    }
    v79 = re::globalAllocators(v15)[2];
    v16 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v79 + 32))(v79, 32, 0);
    *(_QWORD *)v16 = &off_24ED691C0;
    *((_QWORD *)v16 + 1) = a1;
    *((_QWORD *)v16 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::componentChangedHandler<REComponentDidActivateEvent>;
    *((_QWORD *)v16 + 3) = 0;
    v80 = v16;
    v17 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v78, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v19 = v18;
    v20 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v20 = v17;
    v20[1] = v19;
    v21 = v80;
    if (v80)
    {
      v21 = (re *)(**(uint64_t (***)(re *))v80)(v80);
      if (v80 != (re *)v78)
        v21 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v79 + 40))(v79);
      v80 = 0;
    }
    v76 = re::globalAllocators(v21)[2];
    v22 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v76 + 32))(v76, 32, 0);
    *(_QWORD *)v22 = &off_24ED69218;
    *((_QWORD *)v22 + 1) = a1;
    *((_QWORD *)v22 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>;
    *((_QWORD *)v22 + 3) = 0;
    v77 = v22;
    v23 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v75, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v25 = v24;
    v26 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v26 = v23;
    v26[1] = v25;
    v27 = v77;
    if (v77)
    {
      v27 = (re *)(**(uint64_t (***)(re *))v77)(v77);
      if (v77 != (re *)v75)
        v27 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v76 + 40))(v76);
      v77 = 0;
    }
    v73 = re::globalAllocators(v27)[2];
    v28 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v73 + 32))(v73, 32, 0);
    *v28 = &off_24ED69270;
    v28[1] = a1;
    v28[2] = re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::componentChangedHandler<REComponentDidAddEvent>;
    v28[3] = 0;
    v74 = v28;
    v29 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v72, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
    v31 = v30;
    v32 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
    *v32 = v29;
    v32[1] = v31;
    if (v74)
    {
      (**(void (***)(_BYTE *))v74)(v74);
      if (v74 != v72)
        (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
      v74 = 0;
    }
    result = (uint64_t *)(***(uint64_t (****)(_QWORD))(a2 + 224))(*(_QWORD *)(a2 + 224));
    if (v33)
    {
      v34 = result;
      v35 = 8 * v33;
      do
      {
        v36 = *v34;
        v70 = re::globalAllocators((re *)result)[2];
        v71 = 0;
        v37 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v70 + 32))(v70, 32, 0);
        *(_QWORD *)v37 = &off_24ED69168;
        *((_QWORD *)v37 + 1) = a1;
        *((_QWORD *)v37 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>;
        *((_QWORD *)v37 + 3) = 0;
        v71 = v37;
        v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v9, (uint64_t)v69, v36, 0);
        v40 = v39;
        v41 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v41 = v38;
        v41[1] = v40;
        v42 = v71;
        if (v71)
        {
          v42 = (re *)(**(uint64_t (***)(re *))v71)(v71);
          if (v71 != (re *)v69)
            v42 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 40))(v70);
          v71 = 0;
        }
        v67 = re::globalAllocators(v42)[2];
        v68 = 0;
        v43 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v67 + 32))(v67, 32, 0);
        *(_QWORD *)v43 = &off_24ED691C0;
        *((_QWORD *)v43 + 1) = a1;
        *((_QWORD *)v43 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>;
        *((_QWORD *)v43 + 3) = 0;
        v68 = v43;
        v44 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidActivateEvent>(v9, (uint64_t)v66, v36, 0);
        v46 = v45;
        v47 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v47 = v44;
        v47[1] = v46;
        v48 = v68;
        if (v68)
        {
          v48 = (re *)(**(uint64_t (***)(re *))v68)(v68);
          if (v68 != (re *)v66)
            v48 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67);
          v68 = 0;
        }
        v64 = re::globalAllocators(v48)[2];
        v65 = 0;
        v49 = (re *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v64 + 32))(v64, 32, 0);
        *(_QWORD *)v49 = &off_24ED69218;
        *((_QWORD *)v49 + 1) = a1;
        *((_QWORD *)v49 + 2) = re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>;
        *((_QWORD *)v49 + 3) = 0;
        v65 = v49;
        v50 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v9, (uint64_t)v63, v36, 0);
        v52 = v51;
        v53 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v53 = v50;
        v53[1] = v52;
        v54 = v65;
        if (v65)
        {
          v54 = (re *)(**(uint64_t (***)(re *))v65)(v65);
          if (v65 != (re *)v63)
            v54 = (re *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
          v65 = 0;
        }
        v61 = re::globalAllocators(v54)[2];
        v62 = 0;
        v55 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v61 + 32))(v61, 32, 0);
        *v55 = (uint64_t)&off_24ED69270;
        v55[1] = a1;
        v55[2] = (uint64_t)re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>;
        v55[3] = 0;
        v62 = v55;
        v56 = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v9, (uint64_t)v60, v36, 0);
        v58 = v57;
        v59 = (_QWORD *)re::BucketArray<RESubscriptionHandle,8ul>::addUninitialized(a1 + 56);
        *v59 = v56;
        v59[1] = v58;
        result = v62;
        if (v62)
        {
          result = (uint64_t *)(*(uint64_t (**)(uint64_t *))*v62)(v62);
          if (v62 != (uint64_t *)v60)
            result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v61 + 40))(v61);
          v62 = 0;
        }
        ++v34;
        v35 -= 8;
      }
      while (v35);
    }
  }
  return result;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::componentChangedHandler<REComponentDidChangeEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::componentChangedHandler<REComponentDidActivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::componentChangedHandler<REComponentWillDeactivateEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::componentChangedHandler<REComponentDidAddEvent>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  re::ecs2::System *v14;
  uint64_t v15;
  re::ecs2::Component *v16;
  uint64_t i;
  unint64_t v18;
  unint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = *(_QWORD *)a1;
  v24 = *(_QWORD *)(a1 + 8);
  v5 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v4 + 56), &v24);
  if (v5 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v4 + 168, *(_QWORD *)(*(_QWORD *)(v4 + 64) + 16 * v5 + 8));
  if (!*(_BYTE *)(v4 + 232))
    goto LABEL_20;
  v6 = *(_QWORD *)(v4 + 176);
  v7 = *(_DWORD *)(v4 + 184);
  if (v6 >= 0xB)
  {
    if ((v7 & 1) != 0)
      v8 = (_QWORD *)(v4 + 192);
    else
      v8 = *(_QWORD **)(v4 + 200);
    v10 = 8 * v6;
    while (!*v8)
    {
      ++v8;
      v10 -= 8;
      if (!v10)
        goto LABEL_20;
    }
LABEL_18:
    v14 = *(re::ecs2::System **)(v4 + 216);
    if (!*((_BYTE *)v14 + 86))
      re::ecs2::System::queueToRun(v14, 0.0);
    goto LABEL_20;
  }
  if ((v7 & 1) != 0)
  {
    v9 = (uint64_t *)(v4 + 192);
    if (!v6)
      goto LABEL_20;
  }
  else
  {
    v9 = *(uint64_t **)(v4 + 200);
    if (!v6)
      goto LABEL_20;
  }
  v11 = 0;
  v12 = 8 * v6;
  do
  {
    v13 = *v9++;
    v11 |= v13;
    v12 -= 8;
  }
  while (v12);
  if (v11)
    goto LABEL_18;
LABEL_20:
  v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedLightComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v15)
  {
    v16 = (re::ecs2::Component *)v15;
    for (i = 24; i != 56; i += 8)
    {
      v18 = re::ecs2::ComponentBucketsBase::componentHandle(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + i), v16);
      if (v18 != -1 && (v19 & 0xFFFFFF00000000) != 0)
      {
        re::ecs2::BasicComponentStateSceneData<re::ecs2::BlendShapeWeightsBufferComponent>::setComponentState(a1, v18, v19);
        return 0;
      }
    }
    v21 = re::ecs2::ComponentBucketsBase::addComponent(*(re::ecs2::ComponentBucketsBase **)(a1 + 16), *(_QWORD *)(a1 + 24), v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)a1 + 224) + 16))(*(_QWORD *)(*(_QWORD *)a1 + 224), a1, v21, v22);
  }
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::dependentComponentChangedHandler<REComponentDidChangeEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::dependentComponentChangedHandler<REComponentDidActivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::dependentComponentChangedHandler<REComponentWillDeactivateEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

uint64_t re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::dependentComponentChangedHandler<REComponentDidAddEvent>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  re::ecs2::System *v16;
  uint64_t v18;

  v6 = *a1;
  v18 = a1[1];
  v7 = re::HashBrown<re::WeakStringID,re::IndexAndProtectionOptions,re::Hash<re::WeakStringID>,re::EqualTo<re::WeakStringID>,re::Hash<re::IndexAndProtectionOptions>,false>::find((_QWORD *)(v6 + 56), &v18);
  if (v7 == -1)
    goto LABEL_20;
  re::DynamicBitset<unsigned long long,256ul>::setBit(v6 + 168, *(_QWORD *)(*(_QWORD *)(v6 + 64) + 16 * v7 + 8));
  if (!*(_BYTE *)(v6 + 232))
    goto LABEL_20;
  v8 = *(_QWORD *)(v6 + 176);
  v9 = *(_DWORD *)(v6 + 184);
  if (v8 >= 0xB)
  {
    if ((v9 & 1) != 0)
      v10 = (_QWORD *)(v6 + 192);
    else
      v10 = *(_QWORD **)(v6 + 200);
    v12 = 8 * v8;
    while (!*v10)
    {
      ++v10;
      v12 -= 8;
      if (!v12)
        goto LABEL_20;
    }
LABEL_18:
    v16 = *(re::ecs2::System **)(v6 + 216);
    if (!*((_BYTE *)v16 + 86))
      re::ecs2::System::queueToRun(v16, 0.0);
    goto LABEL_20;
  }
  if ((v9 & 1) != 0)
  {
    v11 = (uint64_t *)(v6 + 192);
    if (!v8)
      goto LABEL_20;
  }
  else
  {
    v11 = *(uint64_t **)(v6 + 200);
    if (!v8)
      goto LABEL_20;
  }
  v13 = 0;
  v14 = 8 * v8;
  do
  {
    v15 = *v11++;
    v13 |= v15;
    v14 -= 8;
  }
  while (v14);
  if (v13)
    goto LABEL_18;
LABEL_20:
  (*(void (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(*a1 + 224) + 8))(*(_QWORD *)(*a1 + 224), a1, a2, *(_QWORD *)(a3 + 8));
  return 0;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED69168;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED69168;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED691C0;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED691C0;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidActivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidActivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED69218;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED69218;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED69270;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED69270;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>,REEventHandlerResult (re::ecs2::BasicComponentStateSceneData<re::ecs2::ImageBasedLightComponent>::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

uint64_t *re::ecs2::allocInfo_CARETraceComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254111F58);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254111F58))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254111F70, 0);
    *(uint64_t *)((char *)&qword_254111F80 + 6) = 0;
    qword_254111F80 = 0;
    qword_254111F90 = 0;
    qword_254111F98 = 0xFFFFFFFFLL;
    qword_254111F70 = (uint64_t)&off_24ED7DAA8;
    qword_254111FA0 = (uint64_t)"CARETraceComponent";
    dword_254111FA8 = 0;
    unk_254111FB0 = 0u;
    unk_254111FC0 = 0u;
    unk_254111FD0 = 0u;
    qword_254111FE0 = 0;
    __cxa_guard_release(&qword_254111F58);
  }
  return &qword_254111F70;
}

void re::ecs2::initInfo_CARETraceComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _QWORD v13[2];
  __int128 v14;

  v13[0] = 0xBD1DADD37A0DED52;
  v13[1] = "CARETraceComponent";
  re::StringID::destroyString((re::StringID *)v13);
  *((_OWORD *)this + 2) = v14;
  v4 = atomic_load((unsigned __int8 *)&_MergedGlobals_290);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&_MergedGlobals_290);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254111F60 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = re::introspect_AABB((re::IntrospectionBase **)1);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "m_bbox";
      *(_QWORD *)(v11 + 16) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x2000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254111F68 = v11;
      __cxa_guard_release(&_MergedGlobals_290);
    }
  }
  *((_QWORD *)this + 2) = 0x4000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_254111F60;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::CARETraceComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::CARETraceComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::CARETraceComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::CARETraceComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v12 = v14;
}

int32x4_t re::internal::defaultConstruct<re::ecs2::CARETraceComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;
  int32x4_t result;
  __int128 v5;

  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED58EC0;
  result = vdupq_n_s32(0x7F800000u);
  *(_QWORD *)&v5 = 0x7F0000007FLL;
  *((_QWORD *)&v5 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v3 + 32) = result;
  *(_OWORD *)(v3 + 48) = v5;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::CARETraceComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

int32x4_t re::internal::defaultConstructV2<re::ecs2::CARETraceComponent>(ArcSharedObject *a1)
{
  uint64_t v1;
  int32x4_t result;
  __int128 v3;

  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  ArcSharedObject::ArcSharedObject(a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED58EC0;
  result = vdupq_n_s32(0x7F800000u);
  *(_QWORD *)&v3 = 0x7F0000007FLL;
  *((_QWORD *)&v3 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v1 + 32) = result;
  *(_OWORD *)(v1 + 48) = v3;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::CARETraceComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_CARETraceComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"CARETraceComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_CARETraceComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_CARETraceComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::CARETraceComponent>, this);
}

uint64_t *re::ecs2::allocInfo_NetworkReceiveSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_291);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_291))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254112040, 0);
    *(uint64_t *)((char *)&qword_254112050 + 6) = 0;
    qword_254112050 = 0;
    qword_254112060 = 0;
    qword_254112068 = 0xFFFFFFFFLL;
    qword_254112040 = (uint64_t)&off_24ED7DAA8;
    qword_254112070 = (uint64_t)"NetworkReceiveSystem";
    dword_254112078 = 0;
    unk_254112080 = 0u;
    unk_254112090 = 0u;
    unk_2541120A0 = 0u;
    qword_2541120B0 = 0;
    __cxa_guard_release(&_MergedGlobals_291);
  }
  return &qword_254112040;
}

void re::ecs2::initInfo_NetworkReceiveSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0x2D555FC17D8BF08;
  v5[1] = "NetworkReceiveSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xE800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_NetworkReceiveSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::NetworkReceiveSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::NetworkReceiveSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::NetworkReceiveSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::NetworkReceiveSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::NetworkReceiveSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::NetworkReceiveSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::NetworkReceiveSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  re::ecs2::System::System(a3, 0);
  *(_QWORD *)v3 = &off_24ED692C8;
  result = 0.0;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_DWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::NetworkReceiveSystem>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::NetworkReceiveSystem>(uint64_t a1)
{
  uint64_t v1;
  double result;

  re::ecs2::System::System(a1, 0);
  *(_QWORD *)v1 = &off_24ED692C8;
  result = 0.0;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_DWORD *)(v1 + 136) = 0;
  *(_QWORD *)(v1 + 140) = 0x7FFFFFFFLL;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::NetworkReceiveSystem>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_NetworkReceiveSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkReceiveSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkReceiveSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkReceiveSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkReceiveSystem>, this);
}

uint64_t *re::ecs2::allocInfo_NetworkSendSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254111FF0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254111FF0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541120B8, 0);
    *(uint64_t *)((char *)&qword_2541120C8 + 6) = 0;
    qword_2541120C8 = 0;
    qword_2541120D8 = 0;
    qword_2541120E0 = 0xFFFFFFFFLL;
    qword_2541120B8 = (uint64_t)&off_24ED7DAA8;
    qword_2541120E8 = (uint64_t)"NetworkSendSystem";
    dword_2541120F0 = 0;
    xmmword_2541120F8 = 0u;
    unk_254112108 = 0u;
    xmmword_254112118 = 0u;
    qword_254112128 = 0;
    __cxa_guard_release(&qword_254111FF0);
  }
  return &qword_2541120B8;
}

void re::ecs2::initInfo_NetworkSendSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xCDD33CCFDEACF90ALL;
  v5[1] = "NetworkSendSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xE800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_NetworkSendSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::NetworkSendSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::NetworkSendSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::NetworkSendSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::NetworkSendSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::NetworkSendSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::NetworkSendSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::NetworkSendSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  double result;

  re::ecs2::System::System(a3, 2);
  *(_QWORD *)v3 = &off_24ED69480;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_DWORD *)(v3 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 168) = 0u;
  *(_OWORD *)(v3 + 184) = 0u;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  return result;
}

uint64_t re::internal::defaultDestruct<re::ecs2::NetworkSendSystem>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

double re::internal::defaultConstructV2<re::ecs2::NetworkSendSystem>(uint64_t a1)
{
  uint64_t v1;
  double result;

  re::ecs2::System::System(a1, 2);
  *(_QWORD *)v1 = &off_24ED69480;
  *(_QWORD *)(v1 + 112) = 0;
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_DWORD *)(v1 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 152) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = 0u;
  return result;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::NetworkSendSystem>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_NetworkSendSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkSendSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkSendSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkSendSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkSendSystem>, this);
}

void *re::ecs2::introspect_NetworkShareMode(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  int v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  char v5;
  re *v6;
  std::__shared_mutex_base *v7;
  re *v8;
  std::__shared_mutex_base *v9;
  re *v11;
  uint64_t *v12;
  re *v13;
  uint64_t *v14;
  re *v15;
  uint64_t *v16;
  re *v17;
  uint64_t *v18;
  uint64_t v19;
  re::IntrospectionBasic *v20;
  uint64_t v21[2];
  __int128 v22;

  v2 = (int)this;
  if ((v3 & 1) == 0)
  {
    if ((_DWORD)v11)
    {
      v12 = re::introspectionAllocator(v11);
      v13 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 24, 8);
      *(_DWORD *)v13 = 1;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = "Local";
      re::ecs2::introspect_NetworkShareMode(BOOL)::enumAttributes = (uint64_t)v13;
      v14 = re::introspectionAllocator(v13);
      v15 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 24, 8);
      *(_DWORD *)v15 = 1;
      *((_QWORD *)v15 + 1) = 1;
      *((_QWORD *)v15 + 2) = "Shared";
      qword_255828770 = (uint64_t)v15;
      v16 = re::introspectionAllocator(v15);
      v17 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v16 + 32))(v16, 24, 8);
      *(_DWORD *)v17 = 1;
      *((_QWORD *)v17 + 1) = 2;
      *((_QWORD *)v17 + 2) = "None";
      qword_255828778 = (uint64_t)v17;
      v18 = re::introspectionAllocator(v17);
      v19 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v18 + 32))(v18, 24, 8);
      *(_DWORD *)v19 = 1;
      *(_QWORD *)(v19 + 8) = 3;
      *(_QWORD *)(v19 + 16) = "Remote";
      qword_255828780 = v19;
    }
  }
  {
    v20 = re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&re::ecs2::introspect_NetworkShareMode(BOOL)::info, "NetworkShareMode", 1, 1, 1, 1);
    *(_QWORD *)v20 = &off_24ED7D9E8;
    *((_QWORD *)v20 + 8) = &re::ecs2::introspect_NetworkShareMode(BOOL)::enumTable;
    *((_DWORD *)v20 + 4) = 9;
  }
  if (v2)
  {
    if ((re::ecs2::introspect_NetworkShareMode(BOOL)::isInitialized & 1) != 0)
      return &re::ecs2::introspect_NetworkShareMode(BOOL)::info;
  }
  else
  {
    re::IntrospectionSharedLock::IntrospectionSharedLock((re::IntrospectionSharedLock *)&v22);
    v5 = re::ecs2::introspect_NetworkShareMode(BOOL)::isInitialized;
    re::IntrospectionSharedLock::~IntrospectionSharedLock((re::IntrospectionSharedLock *)&v22);
    if ((v5 & 1) != 0)
      return &re::ecs2::introspect_NetworkShareMode(BOOL)::info;
    v7 = re::introspectionSharedMutex(v6);
    std::__shared_mutex_base::lock(v7);
    if ((re::ecs2::introspect_NetworkShareMode(BOOL)::isInitialized & 1) != 0)
    {
LABEL_9:
      v9 = re::introspectionSharedMutex(v8);
      std::__shared_mutex_base::unlock(v9);
      return &re::ecs2::introspect_NetworkShareMode(BOOL)::info;
    }
  }
  re::ecs2::introspect_NetworkShareMode(BOOL)::isInitialized = 1;
  re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&re::ecs2::introspect_NetworkShareMode(BOOL)::info, a2);
  v21[0] = 0xEDDD86387A3B2768;
  v21[1] = (uint64_t)"NetworkShareMode";
  xmmword_2558287B0 = v22;
  re::StringID::destroyString((re::StringID *)v21);
  if ((v2 & 1) == 0)
    goto LABEL_9;
  return &re::ecs2::introspect_NetworkShareMode(BOOL)::info;
}

uint64_t *re::ecs2::allocInfo_NetworkComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254112000);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254112000))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254112130, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_254112140 = 0;
    qword_254112150 = 0;
    qword_254112158 = 0xFFFFFFFFLL;
    qword_254112130 = (uint64_t)&off_24ED7DAA8;
    qword_254112160 = (uint64_t)"NetworkComponent";
    dword_254112168 = 0;
    xmmword_254112170 = 0u;
    unk_254112180 = 0u;
    xmmword_254112190 = 0u;
    qword_2541121A0 = 0;
    __cxa_guard_release(&qword_254112000);
  }
  return &qword_254112130;
}

void re::ecs2::initInfo_NetworkComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _QWORD v16[2];
  __int128 v17;

  v16[0] = 0xEDDD6DC48FF7751ELL;
  v16[1] = "NetworkComponent";
  re::StringID::destroyString((re::StringID *)v16);
  *((_OWORD *)this + 2) = v17;
  v4 = atomic_load((unsigned __int8 *)&qword_254111FF8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_254111FF8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254112028 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      re::ecs2::introspect_NetworkShareMode((re::ecs2 *)1, v10);
      v11 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v11 = 1;
      *(_QWORD *)(v11 + 8) = "m_shareMode";
      *(_QWORD *)(v11 + 16) = &re::ecs2::introspect_NetworkShareMode(BOOL)::info;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0x23000000001;
      *(_DWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = 0;
      *(_QWORD *)(v11 + 56) = 0;
      *(_DWORD *)(v11 + 64) = 0;
      qword_254112030 = v11;
      v12 = re::introspectionAllocator((re *)v11);
      v13 = re::ecs2::introspect_SyncAccessControl((re::IntrospectionBase **)1);
      v14 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v12 + 32))(v12, 72, 8);
      *(_DWORD *)v14 = 1;
      *(_QWORD *)(v14 + 8) = "m_accessControl";
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0x23800000002;
      *(_DWORD *)(v14 + 40) = 0;
      *(_QWORD *)(v14 + 48) = 0;
      *(_QWORD *)(v14 + 56) = 0;
      *(_DWORD *)(v14 + 64) = 0;
      qword_254112038 = v14;
      __cxa_guard_release(&qword_254111FF8);
    }
  }
  *((_QWORD *)this + 2) = 0x28000000008;
  *((_DWORD *)this + 6) = 16;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254112028;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::NetworkComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::NetworkComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::NetworkComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::NetworkComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v15 = v17;
}

double re::internal::defaultConstruct<re::ecs2::NetworkComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::NetworkComponent>(a3);
}

uint64_t re::internal::defaultDestruct<re::ecs2::NetworkComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

uint64_t re::internal::defaultDestructV2<re::ecs2::NetworkComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_NetworkComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkComponent>, this);
}

void re::ecs2::NetworkReceiveSystem::~NetworkReceiveSystem(re::ecs2::NetworkReceiveSystem *this)
{
  *(_QWORD *)this = &off_24ED692C8;
  re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED692C8;
  re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::deinit((uint64_t *)this + 13);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::NetworkReceiveSystem::willAddSystemToECSService(re::ecs2::NetworkReceiveSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  re *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  unsigned __int8 v16;
  __objc2_class_ro **p_info;
  __objc2_class_ro *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v28;
  re::ecs2::NetworkReceiveSystem *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  void *v33;
  re::ecs2::NetworkReceiveSystem *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t, uint64_t, char);
  void *v38;
  re::ecs2::NetworkReceiveSystem *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v43;
  re::ecs2::NetworkReceiveSystem *v44;
  uint8_t buf[8];
  char v46;
  uint64_t v47;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  v3 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v2);
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 19) = v3;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  v6 = (re *)re::ServiceLocator::serviceOrNull<re::AssetService>(v5);
  *((_QWORD *)this + 20) = v6;
  if (*((_QWORD *)this + 19))
  {
    v7 = re::globalAllocators(v6);
    v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[2] + 32))(v7[2], 176, 8);
    re::NetworkSystem::peerIDStringForAssetSerialization(*((re::NetworkSystem **)this + 19), (re::DynamicString *)buf);
    v9 = *((_QWORD *)this + 20);
    re::DefaultAssetSerialize::DefaultAssetSerialize((re::DefaultAssetSerialize *)v8, 0);
    *(_QWORD *)v8 = off_24ED2D398;
    *(_BYTE *)(v8 + 96) = 1;
    v10 = re::DynamicString::DynamicString((re::DynamicString *)(v8 + 104), (const re::DynamicString *)buf);
    *(_QWORD *)(v8 + 136) = v9;
    *(_QWORD *)v8 = off_24ED69680;
    *(_OWORD *)(v8 + 160) = 0u;
    *(_OWORD *)(v8 + 144) = 0u;
    re::DynamicString::setCapacity((_QWORD *)(v8 + 144), 0);
    re::DynamicString::operator=((re::DynamicString *)(v8 + 144), (re::DynamicString *)buf);
    *((_QWORD *)this + 25) = v8;
    if (*(_QWORD *)buf && (v46 & 1) != 0)
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)buf + 40))(*(_QWORD *)buf, v47);
    v11 = *(_QWORD *)(*((_QWORD *)this + 19) + 2560);
    *((_QWORD *)this + 21) = v11;
    if (v11)
    {
      v12 = RESyncServiceObserverCreate();
      v13 = MEMORY[0x24BDAC760];
      *((_QWORD *)this + 22) = v12;
      v40 = v13;
      v41 = 0x40000000;
      v42 = ___ZN2re4ecs220NetworkReceiveSystem25willAddSystemToECSServiceEv_block_invoke;
      v43 = &__block_descriptor_tmp_18;
      v44 = this;
      RESyncServiceObserverOnSessionDidReceiveOwnershipRequest();
      v35 = v13;
      v36 = 0x40000000;
      v37 = ___ZN2re4ecs220NetworkReceiveSystem25willAddSystemToECSServiceEv_block_invoke_2;
      v38 = &__block_descriptor_tmp_13_0;
      v39 = this;
      RESyncServiceObserverOnSessionDidReceiveOwnershipResponse();
      v30 = v13;
      v31 = 0x40000000;
      v32 = ___ZN2re4ecs220NetworkReceiveSystem25willAddSystemToECSServiceEv_block_invoke_3;
      v33 = &__block_descriptor_tmp_15_1;
      v34 = this;
      RESyncServiceObserverOnSessionDidReceiveOwnershipHandoff();
      v25 = v13;
      v26 = 0x40000000;
      v27 = ___ZN2re4ecs220NetworkReceiveSystem25willAddSystemToECSServiceEv_block_invoke_4;
      v28 = &__block_descriptor_tmp_16_1;
      v29 = this;
      RESyncServiceObserverOnSessionDidReceiveOwnershipChange();
      RESyncServiceAddObserver();
    }
  }
  else
  {
    v14 = *re::ecsNetworkLogObjects(v6);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_224FE9000, v14, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] Attempting to init the NetworkReceiveSystem without the NetworkSystem, Ownership requests will be ignored!", buf, 2u);
    }
  }
  v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  p_info = VideoSpillMapMetalSession.info;
  if ((v16 & 1) == 0)
    goto LABEL_18;
  while (1)
  {
    v18 = p_info[474];
    re::StringID::invalid((re::StringID *)buf);
    v19 = (*(uint64_t (**)(uint64_t, __objc2_class_ro *, uint8_t *))(*(_QWORD *)v15 + 16))(v15, v18, buf);
    re::StringID::destroyString((re::StringID *)buf);
    *((_QWORD *)this + 23) = v19;
    *((_QWORD *)this + 24) = RESyncCreateSyncObjectContext();
    RESyncAddSyncObjectContextEntry();
    v20 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
    if ((v21 & 1) == 0
    {
      re::introspect<re::NetworkCompatDeserializer>(void)::info = re::introspect_NetworkCompatDeserializer(0);
    }
    p_info = (__objc2_class_ro **)re::introspect<re::NetworkCompatDeserializer>(void)::info;
    re::StringID::invalid((re::StringID *)buf);
    v15 = (*(uint64_t (**)(uint64_t, __objc2_class_ro **, uint8_t *))(*(_QWORD *)v20 + 16))(v20, p_info, buf);
    re::StringID::destroyString((re::StringID *)buf);
    *((_QWORD *)this + 26) = v15;
    v22 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
    *((_QWORD *)this + 27) = re::ServiceLocator::serviceOrNull<re::FrameManager>(v22);
    *((_QWORD *)this + 28) = RESyncCreateSyncObjectReadContext();
    RESyncAddSyncObjectReadContextEntry();
    result = RESyncAddSyncObjectReadContextEntry();
    if (!*((_QWORD *)this + 23))
    {
      re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) [NetworkComponent] Deserializer not found. Please register the NetworkOPACKDeserializer in the service locator.", "m_opackDeserializer", "willAddSystemToECSService", 318);
      _os_crash();
      __break(1u);
LABEL_16:
      re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) [NetworkComponent] Deserializer not found. Please register the NetworkCompatDeserializer in the service locator.", "m_compatDeserializer", "willAddSystemToECSService", 319, v25, v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36,
        v37,
        v38,
        v39,
        v40,
        v41,
        v42,
        v43,
        v44);
      _os_crash();
      __break(1u);
      goto LABEL_17;
    }
    if (!*((_QWORD *)this + 26))
      goto LABEL_16;
    if (*((_QWORD *)this + 27))
      return result;
LABEL_17:
    re::internal::assertLog((re::internal *)4, v24, "assertion failure: '%s' (%s:line %i) [NetworkComponent] FrameManager not found. Please register the FrameManager in the service locator.", "m_frameManager", "willAddSystemToECSService", 320);
    _os_crash();
    __break(1u);
LABEL_18:
    {
      p_info[474] = (__objc2_class_ro *)re::introspect_NetworkOPACKDeserializer(0);
    }
  }
}

void ___ZN2re4ecs220NetworkReceiveSystem25willAddSystemToECSServiceEv_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  re::EventBus *v9;
  re *EntityBoundTo;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t Guid;
  const char *v26;
  int v27;
  _QWORD *v28;
  _BYTE buf[24];
  uint64_t v30;
  uint64_t v31;

  v9 = (re::EventBus *)a3;
  v31 = *MEMORY[0x24BDAC8D0];
  EntityBoundTo = (re *)re::ecs2::NetworkComponent::getEntityBoundTo(a3, (uint64_t *)&v28);
  v11 = v28;
  if (v28)
  {
    v12 = (uint64_t)v28;
    do
    {
      v13 = v12;
      v12 = *(_QWORD *)(v12 + 24);
    }
    while (v12);
    if (!*(_QWORD *)(v13 + 16))
      goto LABEL_14;
    v14 = (uint64_t)v28;
    do
    {
      v15 = v14;
      v14 = *(_QWORD *)(v14 + 24);
    }
    while (v14);
    if (*(_QWORD *)(*(_QWORD *)(v15 + 16) + 288))
    {
      v16 = (uint64_t)v28;
      do
      {
        v17 = v16;
        v16 = *(_QWORD *)(v16 + 24);
      }
      while (v16);
      v9 = *(re::EventBus **)(*(_QWORD *)(v17 + 16) + 288);
      v18 = (uint64_t)v28;
      do
      {
        v19 = v18;
        v18 = *(_QWORD *)(v18 + 24);
      }
      while (v18);
      v20 = *(_QWORD *)(v19 + 16);
      *(_QWORD *)buf = v28;
      *(_QWORD *)&buf[8] = a4;
      *(_QWORD *)&buf[16] = a7;
      v21 = atomic_load((unsigned __int8 *)&qword_254112010);
      if ((v21 & 1) != 0)
        goto LABEL_13;
    }
    else
    {
      v22 = *re::ecsNetworkLogObjects(EntityBoundTo);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        v24 = v11[35];
        v11 = (_QWORD *)v11[37];
        Guid = RESyncableGetGuid();
        *(_DWORD *)buf = 136381187;
        *(_QWORD *)&buf[4] = v24;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v11;
        *(_WORD *)&buf[22] = 2048;
        v30 = Guid;
        _os_log_error_impl(&dword_224FE9000, v22, OS_LOG_TYPE_ERROR, "Event bus does not exist in entity:%{private}s, entity.id:%llu, syncable.guidid:%llu", buf, 0x20u);
      }
      re::internal::assertLog((re::internal *)4, v23, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "onOwnershipRequest", 386);
      _os_crash();
      __break(1u);
    }
    v26 = (const char *)v20;
    v27 = __cxa_guard_acquire(&qword_254112010);
    v20 = (uint64_t)v26;
    if (v27)
    {
      qword_254112008 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"23REOwnershipRequestEvent" & 0x7FFFFFFFFFFFFFFFLL), v26);
      __cxa_guard_release(&qword_254112010);
      v20 = (uint64_t)v26;
    }
LABEL_13:
    re::EventBus::publish(v9, v20, qword_254112008, (uint64_t)buf, 0x18uLL, 0);
LABEL_14:

  }
}

void ___ZN2re4ecs220NetworkReceiveSystem25willAddSystemToECSServiceEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  re::EventBus *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  re::EventBus *v20;
  const char *v21;
  int v22;
  int v23;
  _QWORD v24[2];
  char v25;
  uint64_t v26;

  re::ecs2::NetworkComponent::getEntityBoundTo(a3, &v26);
  v8 = v26;
  if (v26)
  {
    v9 = v26;
    do
    {
      v10 = v9;
      v9 = *(_QWORD *)(v9 + 24);
    }
    while (v9);
    if (!*(_QWORD *)(v10 + 16))
      goto LABEL_14;
    v11 = v26;
    do
    {
      v12 = v11;
      v11 = *(_QWORD *)(v11 + 24);
    }
    while (v11);
    if (*(_QWORD *)(*(_QWORD *)(v12 + 16) + 288))
    {
      v13 = v26;
      do
      {
        v14 = v13;
        v13 = *(_QWORD *)(v13 + 24);
      }
      while (v13);
      v15 = *(re::EventBus **)(*(_QWORD *)(v14 + 16) + 288);
      v16 = v26;
      do
      {
        v17 = v16;
        v16 = *(_QWORD *)(v16 + 24);
      }
      while (v16);
      v18 = *(_QWORD *)(v17 + 16);
      v24[0] = v26;
      v24[1] = a4;
      v25 = a5;
      v19 = atomic_load((unsigned __int8 *)&qword_254112020);
      if ((v19 & 1) != 0)
        goto LABEL_13;
    }
    else
    {
      re::internal::assertLog((re::internal *)4, v7, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "onOwnershipResponse", 408);
      v15 = (re::EventBus *)_os_crash();
      __break(1u);
    }
    v20 = v15;
    v21 = (const char *)v18;
    v22 = __cxa_guard_acquire(&qword_254112020);
    v18 = (uint64_t)v21;
    v23 = v22;
    v15 = v20;
    if (v23)
    {
      qword_254112018 = re::EventBus::typeStringToId((re::EventBus *)((unint64_t)"24REOwnershipResponseEvent" & 0x7FFFFFFFFFFFFFFFLL), v21);
      __cxa_guard_release(&qword_254112020);
      v18 = (uint64_t)v21;
      v15 = v20;
    }
LABEL_13:
    re::EventBus::publish(v15, v18, qword_254112018, (uint64_t)v24, 0x18uLL, 0);
LABEL_14:

  }
}

void ___ZN2re4ecs220NetworkReceiveSystem25willAddSystemToECSServiceEv_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  RESyncSessionGetNetSession();
  v4 = RESyncNetSessionPeerID();
  re::ecs2::NetworkReceiveSystem::onOwnershipChange(a3, v4);
}

void re::ecs2::NetworkReceiveSystem::onOwnershipChange(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  re::EventBus *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __objc2_class_ro *Type;
  _QWORD v14[2];
  uint64_t v15;

  re::ecs2::NetworkComponent::getEntityBoundTo(a1, &v15);
  v4 = v15;
  if (v15)
  {
    v5 = v15;
    do
    {
      v6 = v5;
      v5 = *(_QWORD *)(v5 + 24);
    }
    while (v5);
    if (*(_QWORD *)(v6 + 16))
    {
      v7 = v15;
      do
      {
        v8 = v7;
        v7 = *(_QWORD *)(v7 + 24);
      }
      while (v7);
      v9 = *(re::EventBus **)(*(_QWORD *)(v8 + 16) + 288);
      if (!v9)
      {
        re::internal::assertLog((re::internal *)4, v3, "assertion failure: '%s' (%s:line %i) ", "!\"Unreachable code\"", "onOwnershipChange", 429);
        _os_crash();
        __break(1u);
        return;
      }
      v10 = v15;
      do
      {
        v11 = v10;
        v10 = *(_QWORD *)(v10 + 24);
      }
      while (v10);
      v12 = *(_QWORD *)(v11 + 16);
      v14[0] = v15;
      v14[1] = a2;
      Type = re::EventBus::getTypeId<REOwnershipChangedEvent>();
      re::EventBus::publish(v9, v12, (uint64_t)Type, (uint64_t)v14, 0x10uLL, 0);
    }

  }
}

void ___ZN2re4ecs220NetworkReceiveSystem25willAddSystemToECSServiceEv_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  re::ecs2::NetworkReceiveSystem::onOwnershipChange(a3, a4);
}

uint64_t re::ecs2::NetworkReceiveSystem::willAddSceneToECSService(re::ecs2::NetworkReceiveSystem *this, re::EventBus **a2)
{
  re::ecs2::Scene *v2;
  re::EventBus *v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  re::NetworkSystem *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  _QWORD v17[3];
  int v18;
  uint64_t v19;
  re::ecs2::Scene *v20;

  v2 = (re::ecs2::Scene *)a2;
  v20 = (re::ecs2::Scene *)a2;
  v3 = a2[36];
  if (v3)
  {
    v19 = 0;
    v17[1] = 0;
    v17[2] = 0;
    v18 = 0;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity(v17, 3uLL);
    ++v18;
    v16.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,RESceneEntityDidReparentEvent>(v3, 0, (uint64_t)re::ecs2::NetworkComponent::onEntityReparented, 0, 0);
    v16.n128_u64[1] = v5;
    re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v17, &v16);
    v16.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v3, 0, (uint64_t)re::ecs2::NetworkComponent::onComponentDidAddEvent, 0, 0);
    v16.n128_u64[1] = v6;
    re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v17, &v16);
    v16.n128_u64[0] = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v3, 0, (uint64_t)re::ecs2::NetworkComponent::onComponentWillRemoveEvent, 0, 0);
    v16.n128_u64[1] = v7;
    re::DynamicArray<re::RigNodeConstraint>::add((_anonymous_namespace_ *)v17, &v16);
    re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::addNew((uint64_t)this + 104, (uint64_t *)&v20, (uint64_t)v17);
    if (v17[0] && v19)
      (*(void (**)(void))(*(_QWORD *)v17[0] + 40))();
    v2 = v20;
  }
  v8 = *((_QWORD *)v2 + 7);
  if (v8)
  {
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    v10 = (re::NetworkSystem *)re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v9);
  }
  else
  {
    v10 = 0;
  }
  result = re::ecs2::SceneComponentTable::get((re::ecs2::Scene *)((char *)v2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (result)
  {
    v12 = *(_QWORD *)(result + 24);
    if (v12)
    {
      v13 = *(uint64_t **)(result + 40);
      v14 = 8 * v12;
      do
      {
        v15 = *v13++;
        result = re::ecs2::NetworkComponent::onAdded(v15, v10);
        v14 -= 8;
      }
      while (v14);
    }
  }
  return result;
}

uint64_t re::ecs2::NetworkComponent::onEntityReparented(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  re *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(v2 + 200);
  if (v3)
  {
    if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
    {
      re::packCharArrayToUInt64ForAriadne(*(re **)(v2 + 280), 0);
      v4 = *(_QWORD *)(v2 + 24);
      if (!v4 || (*(_BYTE *)(v4 + 288) & 0x80) != 0)
        v5 = (re *)"N/A";
      else
        v5 = *(re **)(v4 + 280);
      re::packCharArrayToUInt64ForAriadne(v5, 0);
      kdebug_trace();
    }
    re::ecs2::NetworkComponent::resolveViews(v3, 0);
    if (!*(_BYTE *)(v3 + 618))
      goto LABEL_14;
    v6 = *(_QWORD *)(v2 + 24);
    if (v6 && (*(_BYTE *)(v6 + 288) & 0x80) != 0)
      v6 = 0;
    if (*(_QWORD *)(v3 + 624) != v6)
LABEL_14:
      re::ecs2::NetworkComponent::markEntityDirty((re::ecs2::NetworkComponent *)v3, (re::ecs2::NetworkComponent *)3);
  }
  return 0;
}

uint64_t re::ecs2::NetworkComponent::onComponentDidAddEvent(uint64_t a1, uint64_t a2)
{
  re **v3;
  re::NetworkSystem *v4;
  _anonymous_namespace_ *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const re::ecs2::ComponentTypeBase *v12;
  const re::ecs2::ComponentTypeBase *v13;
  re::NetworkSystemFeatureFlags *v14;
  re *v15;
  NSObject *v16;
  re *v17;
  uint64_t v18;
  uint64_t Guid;
  uint64_t v20;
  NSObject *v21;
  uint64_t v23;
  uint8_t buf[4];
  _anonymous_namespace_ *v25;
  __int16 v26;
  re *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v3 = *(re ***)(a2 + 8);
  if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
  {
    re::packCharArrayToUInt64ForAriadne(*(re **)(a1 + 280), 0);
    re::packCharArrayToUInt64ForAriadne(v3[4], 0);
    kdebug_trace();
  }
  v4 = (re::NetworkSystem *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)v3);
  if (v4)
  {
    v5 = v4;
    v6 = a1;
    do
    {
      v7 = v6;
      v6 = *(_QWORD *)(v6 + 24);
    }
    while (v6);
    v8 = *(_QWORD *)(v7 + 16);
    if (v8
      && (v4 = *(re::NetworkSystem **)(v8 + 56)) != 0
      && (v9 = (*(uint64_t (**)(re::NetworkSystem *))(*(_QWORD *)v4 + 32))(v4),
          (v4 = (re::NetworkSystem *)re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v9)) != 0))
    {
      v10 = (uint64_t)v4;
      if (v3 == (re **)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
      {
        re::ecs2::NetworkComponent::onAdded((uint64_t)v5, v4);
        return 0;
      }
      v11 = *(_QWORD *)(a1 + 200);
      if (v11)
      {
        if (!*(_QWORD *)(v11 + 32) || RESyncableIsAuthoritative())
        {
          *(_WORD *)buf = *(_WORD *)((*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)v5 + 40))(v5) + 16);
          re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::remove(v11 + 512, (unsigned __int16 *)buf);
          if (!*(_QWORD *)(v11 + 32))
          {
LABEL_23:
            re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(v10 + 792, v10);
            return 0;
          }
          v12 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)v5 + 40))(v5);
          if (!re::ecs2::NetworkComponentInfo::get((re::ecs2::NetworkComponentInfo *)(v11 + 112), v12))
          {
            re::ecs2::NetworkComponent::createSyncObjectForLocalComponent(&v23, (re::NetworkSystem **)v11, v5);
            if (v23)
            {
              v13 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)v5 + 40))(v5);
              re::ecs2::NetworkComponentInfo::markDirty((re::ecs2::NetworkComponentInfo *)(v11 + 112), v13, 3);
              v15 = (re *)re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs(v14);
              if ((_DWORD)v15)
              {
                v16 = *re::ecsNetworkLogObjects(v15);
                if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
                {
                  v17 = v3[4];
                  v18 = *(_QWORD *)(a1 + 296);
                  Guid = RESyncableGetGuid();
                  v20 = RESyncableGetGuid();
                  *(_DWORD *)buf = 134219011;
                  v25 = v5;
                  v26 = 2081;
                  v27 = v17;
                  v28 = 2048;
                  v29 = v18;
                  v30 = 2048;
                  v31 = Guid;
                  v32 = 2048;
                  v33 = v20;
                  _os_log_impl(&dword_224FE9000, v16, OS_LOG_TYPE_DEFAULT, "[NetworkComponent], Binding component %p(%{private}s) in entity %llu(%llu) to syncable %llu", buf, 0x34u);
                }
              }
              RESyncRelease();
            }
          }
        }
        if (!*(_QWORD *)(v11 + 32) || !RESyncableGetOwnerPeerID())
          goto LABEL_23;
      }
    }
    else
    {
      v21 = *re::ecsNetworkLogObjects(v4);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_224FE9000, v21, OS_LOG_TYPE_ERROR, "[NetworkComponent] NetworkSystem not available during onSceneComponentDidAddEvent event.", buf, 2u);
      }
    }
  }
  return 0;
}

uint64_t re::ecs2::NetworkComponent::onComponentWillRemoveEvent(uint64_t a1, uint64_t a2)
{
  re **v3;
  uint64_t v4;
  re::ecs2::NetworkComponent *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  _QWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const re::ecs2::ComponentTypeBase *v21;
  uint64_t v22;
  unint64_t v23;
  const re::ecs2::ComponentTypeBase *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  re::NetworkSystemFeatureFlags *IsAuthoritative;
  re *v32;
  NSObject *v33;
  re *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  re::NetworkSystemFeatureFlags *v39;
  re *v40;
  NSObject *v41;
  re *v42;
  uint64_t v43;
  uint64_t Guid;
  uint64_t v45;
  int v47;
  re::ecs2::NetworkComponent *v48;
  __int16 v49;
  re *v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v3 = *(re ***)(a2 + 8);
  if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
  {
    re::packCharArrayToUInt64ForAriadne(*(re **)(a1 + 280), 0);
    re::packCharArrayToUInt64ForAriadne(v3[4], 0);
    kdebug_trace();
  }
  v4 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a1 + 32), (const re::ecs2::ComponentTypeBase *)v3);
  if (v4)
  {
    v5 = (re::ecs2::NetworkComponent *)v4;
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
    while (1)
    {
      if ((v8 & 1) == 0)
      {
        v12 = v7;
        v7 = v12;
        if (v13)
        {
          re::introspect<re::ecs2::NetworkComponent>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"NetworkComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkComponent>, 0);
          v7 = v12;
        }
      }
      if ((_UNKNOWN *)v7 == re::introspect<re::ecs2::NetworkComponent>(void)::info)
        break;
      v9 = *(unsigned int *)(v7 + 56);
      if ((_DWORD)v9)
      {
        v10 = *(_QWORD **)(v7 + 64);
        while (1)
        {
          v11 = (_DWORD *)*v10;
          if (*(_DWORD *)*v10 == 1 && v11[10] == 3)
            break;
          ++v10;
          if (!--v9)
            goto LABEL_19;
        }
        v7 = *((_QWORD *)v11 + 2);
        if (v7)
          continue;
      }
      goto LABEL_19;
    }
    re::ecs2::NetworkComponent::onRemoved(v5, 0);
LABEL_19:
    v14 = *(_QWORD *)(a1 + 200);
    if (v14)
    {
      if (*(_QWORD *)(v14 + 56))
      {
        if (!*(_QWORD *)(v14 + 32) || !RESyncableGetOwnerPeerID())
        {
          v15 = a1;
          do
          {
            v16 = v15;
            v15 = *(_QWORD *)(v15 + 24);
          }
          while (v15);
          v17 = *(_QWORD *)(v16 + 16);
          if (v17)
          {
            v18 = *(_QWORD *)(v17 + 56);
            if (v18)
            {
              v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
              v20 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v19);
              if (v20)
                re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(v20 + 968, *(_QWORD *)(v14 + 56));
            }
          }
        }
        v21 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(re::ecs2::NetworkComponent *))(*(_QWORD *)v5 + 40))(v5);
        v22 = re::ecs2::NetworkComponentInfo::get((re::ecs2::NetworkComponentInfo *)(v14 + 112), v21);
        if (v22)
        {
          v23 = v22;
          RESyncRetain();
          RESyncableSetUserData();
          v24 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(re::ecs2::NetworkComponent *))(*(_QWORD *)v5 + 40))(v5);
          re::ecs2::NetworkComponentInfo::remove((re::ecs2::NetworkComponentInfo *)(v14 + 112), v24);
          if (!*(_QWORD *)(v14 + 32) || !RESyncableIsAuthoritative())
          {
LABEL_53:
            RESyncRelease();
            return 0;
          }
          LOWORD(v47) = *(_WORD *)((*(uint64_t (**)(re::ecs2::NetworkComponent *))(*(_QWORD *)v5 + 40))(v5)
                                 + 16);
          re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::remove(v14 + 416, (unsigned __int16 *)&v47);
          v25 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v23 ^ (v23 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v23 ^ (v23 >> 30))) >> 27));
          v26 = v25 ^ (v25 >> 31);
          v27 = *(unsigned int *)(v14 + 488);
          if ((_DWORD)v27)
          {
            v28 = v26 % v27;
            v29 = *(unsigned int *)(*(_QWORD *)(v14 + 472) + 4 * (v26 % v27));
            if ((_DWORD)v29 != 0x7FFFFFFF)
            {
              v30 = *(_QWORD *)(v14 + 480);
              if (*(_QWORD *)(v30 + 24 * v29 + 16) == v23)
              {
LABEL_50:
                LOWORD(v47) = *(_WORD *)((*(uint64_t (**)(re::ecs2::NetworkComponent *))(*(_QWORD *)v5 + 40))(v5)
                                       + 16);
                re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addNew(v14 + 512, &v47);
                v40 = (re *)re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs(v39);
                if ((_DWORD)v40)
                {
                  v41 = *re::ecsNetworkLogObjects(v40);
                  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
                  {
                    v42 = v3[4];
                    v43 = *(_QWORD *)(a1 + 296);
                    Guid = RESyncableGetGuid();
                    v45 = RESyncableGetGuid();
                    v47 = 134219011;
                    v48 = v5;
                    v49 = 2081;
                    v50 = v42;
                    v51 = 2048;
                    v52 = v43;
                    v53 = 2048;
                    v54 = Guid;
                    v55 = 2048;
                    v56 = v45;
                    _os_log_impl(&dword_224FE9000, v41, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] Unbinding component %p(%{private}s) in entity %llu(%llu) from syncable %llu", (uint8_t *)&v47, 0x34u);
                  }
                }
                goto LABEL_53;
              }
              while (1)
              {
                LODWORD(v29) = *(_DWORD *)(v30 + 24 * v29 + 8) & 0x7FFFFFFF;
                if ((_DWORD)v29 == 0x7FFFFFFF)
                  break;
                if (*(_QWORD *)(v30 + 24 * v29 + 16) == v23)
                  goto LABEL_50;
              }
            }
          }
          else
          {
            LODWORD(v28) = 0;
          }
          v35 = *(unsigned int *)(v14 + 500);
          if ((_DWORD)v35 == 0x7FFFFFFF)
          {
            v35 = *(unsigned int *)(v14 + 496);
            v36 = v35;
            if ((_DWORD)v35 == (_DWORD)v27)
            {
              re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::setCapacity(v14 + 464, 2 * *(_DWORD *)(v14 + 492));
              LODWORD(v28) = v26 % *(unsigned int *)(v14 + 488);
              v36 = *(_DWORD *)(v14 + 496);
            }
            *(_DWORD *)(v14 + 496) = v36 + 1;
            v37 = *(_QWORD *)(v14 + 480);
            v38 = *(_DWORD *)(v37 + 24 * v35 + 8);
          }
          else
          {
            v37 = *(_QWORD *)(v14 + 480);
            v38 = *(_DWORD *)(v37 + 24 * v35 + 8);
            *(_DWORD *)(v14 + 500) = v38 & 0x7FFFFFFF;
          }
          *(_DWORD *)(v37 + 24 * v35 + 8) = v38 | 0x80000000;
          *(_DWORD *)(*(_QWORD *)(v14 + 480) + 24 * v35 + 8) = *(_DWORD *)(*(_QWORD *)(v14 + 480) + 24 * v35 + 8) & 0x80000000 | *(_DWORD *)(*(_QWORD *)(v14 + 472) + 4 * v28);
          *(_QWORD *)(*(_QWORD *)(v14 + 480) + 24 * v35) = v26;
          *(_QWORD *)(*(_QWORD *)(v14 + 480) + 24 * v35 + 16) = v23;
          RESyncRetain();
          *(_DWORD *)(*(_QWORD *)(v14 + 472) + 4 * v28) = v35;
          ++*(_DWORD *)(v14 + 492);
          ++*(_DWORD *)(v14 + 504);
          goto LABEL_50;
        }
        IsAuthoritative = *(re::NetworkSystemFeatureFlags **)(v14 + 32);
        if (!IsAuthoritative
          || (IsAuthoritative = (re::NetworkSystemFeatureFlags *)RESyncableIsAuthoritative(), (_DWORD)IsAuthoritative))
        {
          v32 = (re *)re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs(IsAuthoritative);
          if ((_DWORD)v32)
          {
            v33 = *re::ecsNetworkLogObjects(v32);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              v34 = v3[4];
              v47 = 136380675;
              v48 = v34;
              _os_log_impl(&dword_224FE9000, v33, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] Component %{private}s already deleted!", (uint8_t *)&v47, 0xCu);
            }
          }
        }
      }
    }
  }
  return 0;
}

void re::ecs2::NetworkReceiveSystem::willRemoveSceneFromECSService(re::ecs2::NetworkReceiveSystem *this, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  re::ecs2::NetworkComponent **v6;
  uint64_t v7;
  re::ecs2::NetworkComponent *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v21 = a2;
  v4 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(a2 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 24);
    if (v5)
    {
      v6 = *(re::ecs2::NetworkComponent ***)(v4 + 40);
      v7 = 8 * v5;
      do
      {
        v8 = *v6++;
        re::ecs2::NetworkComponent::onRemoved(v8, 1);
        v7 -= 8;
      }
      while (v7);
    }
  }
  v9 = *(_QWORD *)(a2 + 288);
  if (v9)
  {
    v10 = (char *)this + 104;
    LODWORD(v11) = 0x7FFFFFFF;
    if (*((_QWORD *)this + 13))
    {
      v12 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
      v13 = *(unsigned int *)(*((_QWORD *)this + 14) + 4 * ((v12 ^ (v12 >> 31)) % *((unsigned int *)this + 32)));
      if ((_DWORD)v13 != 0x7FFFFFFF)
      {
        v14 = *((_QWORD *)this + 15);
        if (*(_QWORD *)(v14 + (v13 << 6) + 16) == a2)
        {
          LODWORD(v11) = v13;
        }
        else
        {
          v11 = v13;
          while (1)
          {
            v11 = *(_DWORD *)(v14 + (v11 << 6) + 8) & 0x7FFFFFFF;
            if ((_DWORD)v11 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v14 + (v11 << 6) + 16) == a2)
              goto LABEL_15;
          }
          LODWORD(v11) = 0x7FFFFFFF;
        }
      }
    }
LABEL_15:
    v15 = *((_QWORD *)this + 15) + ((unint64_t)v11 << 6);
    v16 = *(_QWORD *)(v15 + 40);
    if (v16)
    {
      v17 = *(uint64_t **)(v15 + 56);
      v18 = &v17[2 * v16];
      do
      {
        v19 = *v17;
        v20 = v17[1];
        v17 += 2;
        re::EventBus::unsubscribe(v9, v19, v20);
      }
      while (v17 != v18);
    }
    re::HashTable<re::ecs2::Scene *,re::DynamicArray<RESubscriptionHandle>,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v10, (uint64_t *)&v21);
  }
}

uint64_t re::ecs2::NetworkReceiveSystem::willRemoveSystemFromECSService(re::ecs2::NetworkReceiveSystem *this)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;
  uint64_t result;

  if (*((_QWORD *)this + 19))
  {
    RESyncServiceRemoveObserver();
    v2 = (re *)RESyncRelease();
    *((_QWORD *)this + 20) = 0;
    *((_QWORD *)this + 21) = 0;
    *((_QWORD *)this + 22) = 0;
    v3 = (void (***)(_QWORD))*((_QWORD *)this + 25);
    if (v3)
    {
      v4 = re::globalAllocators(v2)[2];
      (**v3)(v3);
      (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
    }
  }
  *((_QWORD *)this + 19) = 0;
  RESyncDestroySyncObjectReadContext();
  *((_QWORD *)this + 28) = 0;
  result = RESyncDestroySyncObjectContext();
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  return result;
}

uint64_t re::ecs2::NetworkComponent::getEntityBoundTo@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  if (result && (result = RESyncableGetUserData(), (result & 1) != 0) && (result &= ~1uLL) != 0)
  {
    result = (uint64_t)objc_loadWeakRetained((id *)result);
    v3 = result - 8;
    if (!result)
      v3 = 0;
  }
  else
  {
    v3 = 0;
  }
  *a2 = v3;
  return result;
}

_QWORD *re::ecs2::NetworkReceiveSystem::update(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *result;

  v8 = (*(uint64_t (**)(_QWORD *))(*a1[5] + 104))(a1[5]);
  result = (_QWORD *)re::ecs2::EntityComponentCollection::operator[](v8, 0);
  if (*result == a2)
    return (_QWORD *)((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[10])(a1, a3, a4);
  return result;
}

void re::ecs2::NetworkReceiveSystem::update(uint64_t *a1)
{
  re::ProfilerConfig *v2;
  re *isStatisticCollectionEnabled;
  uint64_t v4;
  uint64_t v5;
  uint64_t SessionCount;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  re::NetworkSystemFeatureFlags *IsLocal;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64x2_t *v15;
  uint64_t v16;
  uint64_t v17;
  int64x2_t v18;
  uint64_t v19;
  _QWORD v20[5];
  _QWORD v21[3];
  int v22;
  _BYTE v23[44];
  uint64_t v24;
  _QWORD v25[3];
  int v26;
  _OWORD v27[2];
  int v28;
  _BYTE v29[44];
  uint64_t v30;
  _OWORD v31[2];
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[16];
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(_anonymous_namespace_ *, uint64_t, const char *, const char *);
  void *v41;
  uint64_t *v42;
  _QWORD v43[5];

  if (a1[19])
  {
    v2 = (re::ProfilerConfig *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[5] + 136))(a1[5]);
    if ((_DWORD)v2
      || (v2 = (re::ProfilerConfig *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[5] + 104))(a1[5]),
          *((_QWORD *)v2 + 3)))
    {
      isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(v2);
      if ((_DWORD)isStatisticCollectionEnabled)
      {
        v4 = re::profilerThreadContext(isStatisticCollectionEnabled);
        if (*(_QWORD *)(v4 + 152))
          v19 = mach_absolute_time();
      }
      else
      {
        v4 = 0;
      }
      re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v37, 3051, (uint64_t)a1);
      if (a1[21])
      {
        v20[0] = 0;
        v20[1] = v20;
        v20[2] = 0x15002000000;
        v20[3] = __Block_byref_object_copy__8;
        v20[4] = __Block_byref_object_dispose__8;
        memset(v21, 0, sizeof(v21));
        v22 = 0;
        memset(v23, 0, sizeof(v23));
        v24 = 0x7FFFFFFFLL;
        memset(v25, 0, sizeof(v25));
        v26 = 0;
        v28 = 0;
        memset(v27, 0, sizeof(v27));
        memset(v29, 0, sizeof(v29));
        v30 = 0x7FFFFFFFLL;
        v32 = 0;
        memset(v31, 0, sizeof(v31));
        v33 = 0x7FFFFFFFLL;
        v34 = 0;
        v35 = 0;
        v36 = 0;
        SessionCount = RESyncServiceGetSessionCount();
        if (SessionCount)
        {
          v7 = SessionCount;
          v8 = 0;
          v9 = MEMORY[0x24BDAC760];
          do
          {
            RESyncServiceGetSession();
            IsLocal = (re::NetworkSystemFeatureFlags *)RESyncSessionIsLocal();
            if ((_DWORD)IsLocal && re::NetworkSystemFeatureFlags::enableAltSharedApp(IsLocal))
            {
              v11 = a1[23];
              v12 = a1[25];
              v43[0] = 0;
              v43[1] = re::ecs2::NetworkReceiveSystem::processLocalSession(RESyncSession *)const::$_0::__invoke;
              v43[2] = 0;
              v43[3] = 0;
              *(_QWORD *)(v11 + 456) = v12;
              *(_QWORD *)(v11 + 464) = v43;
              v38 = v9;
              v39 = 0x40000000;
              v40 = ___ZNK2re4ecs220NetworkReceiveSystem19processLocalSessionEP13RESyncSession_block_invoke;
              v41 = &__block_descriptor_tmp_40_0;
              v42 = a1;
              RESyncSessionReceiveRaw();
              v13 = a1[23];
              *(_QWORD *)(v13 + 456) = 0;
              *(_QWORD *)(v13 + 464) = 0;
            }
            else
            {
              RESyncSessionReceive();
            }
            ++v8;
          }
          while (v7 != v8);
        }
        re::Event<re::NetworkSystem>::raise(a1[19] + 1496, a1[19]);
        _Block_object_dispose(v20, 8);
        re::HashTable<unsigned long long,re::Pair<re::SharedPtr<re::ecs2::Entity>,unsigned long long,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v31);
        re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::deinit((uint64_t *)&v29[8]);
        re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v27 + 8);
        re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v25);
        re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)&v23[8]);
        re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v21);
        re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v37);
        if (v4)
        {
          if (*(_QWORD *)(v4 + 152))
          {
            v14 = mach_absolute_time();
            v15 = *(int64x2_t **)(v4 + 152);
            if (v15)
            {
              v16 = v15[500].u64[0];
              if (v16 >= v14 - v19)
                v16 = v14 - v19;
              v15[500].i64[0] = v16;
              v17 = v15[500].u64[1];
              if (v17 <= v14 - v19)
                v17 = v14 - v19;
              v15[500].i64[1] = v17;
              v18 = vdupq_n_s64(1uLL);
              v18.i64[0] = v14 - v19;
              v15[501] = vaddq_s64(v15[501], v18);
              *(_BYTE *)(v4 + 184) = 0;
            }
          }
        }
      }
      else
      {
        re::internal::assertLog((re::internal *)4, v5, "assertion failure: '%s' (%s:line %i) ", "m_syncService", "update", 467);
        _os_crash();
        __break(1u);
      }
    }
  }
}

uint64_t `anonymous namespace'::countOfNetworkComponentsInECSService(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v2 = *(_QWORD *)(v1 + 24);
  if (!v2)
    return 0;
  v3 = 0;
  v4 = *(_QWORD *)(v1 + 40);
  v5 = 8 * v2;
  do
  {
    v6 = re::ecs2::SceneComponentTable::get((re::ecs2::SceneComponentTable *)(*(_QWORD *)v4 + 200), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    if (v6)
      v7 = *(_QWORD *)(v6 + 24);
    else
      v7 = 0;
    v3 += v7;
    v4 += 8;
    v5 -= 8;
  }
  while (v5);
  return v3;
}

__n128 __Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 result;
  __int128 v18;

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v2;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = v3;
  v4 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = v4;
  ++*(_DWORD *)(a2 + 64);
  ++*(_DWORD *)(a1 + 64);
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 116) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  v5 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = v5;
  v6 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = v6;
  LODWORD(v6) = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = v6;
  LODWORD(v6) = *(_DWORD *)(a1 + 108);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = v6;
  LODWORD(v6) = *(_DWORD *)(a1 + 112);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = v6;
  LODWORD(v6) = *(_DWORD *)(a1 + 116);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a2 + 116) = v6;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  v7 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v7;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  v8 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a2 + 144) = v8;
  v9 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = v9;
  ++*(_DWORD *)(a2 + 152);
  ++*(_DWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  v10 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v10;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  v11 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = v11;
  v12 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 200) = v12;
  ++*(_DWORD *)(a2 + 192);
  ++*(_DWORD *)(a1 + 192);
  *(_DWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_QWORD *)(a1 + 244) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 208) = 0;
  v13 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a2 + 216) = v13;
  v14 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a2 + 224) = v14;
  LODWORD(v14) = *(_DWORD *)(a1 + 232);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(_DWORD *)(a2 + 232) = v14;
  LODWORD(v14) = *(_DWORD *)(a1 + 236);
  *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
  *(_DWORD *)(a2 + 236) = v14;
  LODWORD(v14) = *(_DWORD *)(a1 + 240);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_DWORD *)(a2 + 240) = v14;
  LODWORD(v14) = *(_DWORD *)(a1 + 244);
  *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
  *(_DWORD *)(a2 + 244) = v14;
  *(_QWORD *)(a1 + 288) = 0x7FFFFFFF00000000;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_DWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a2 + 256) = 0;
  v15 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a2 + 264) = v15;
  v16 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a2 + 272) = v16;
  LODWORD(v16) = *(_DWORD *)(a1 + 280);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_DWORD *)(a2 + 280) = v16;
  LODWORD(v16) = *(_DWORD *)(a1 + 284);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  *(_DWORD *)(a2 + 284) = v16;
  LODWORD(v16) = *(_DWORD *)(a1 + 288);
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  *(_DWORD *)(a2 + 288) = v16;
  LODWORD(v16) = *(_DWORD *)(a1 + 292);
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 292);
  *(_DWORD *)(a2 + 292) = v16;
  result = *(__n128 *)(a2 + 304);
  v18 = *(_OWORD *)(a2 + 320);
  *(__n128 *)(a1 + 304) = result;
  *(_OWORD *)(a1 + 320) = v18;
  return result;
}

uint64_t __Block_byref_object_dispose__8(uint64_t *a1)
{
  uint64_t v2;

  v2 = (uint64_t)(a1 + 5);
  re::HashTable<unsigned long long,re::Pair<re::SharedPtr<re::ecs2::Entity>,unsigned long long,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(a1 + 32);
  re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::deinit(a1 + 26);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)(a1 + 21));
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)(a1 + 16));
  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit(a1 + 10);
  return re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit(v2);
}

uint64_t ___ZNK2re4ecs220NetworkReceiveSystem6updateENS0_6System13UpdateContextE_block_invoke(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  char IsAtomic;
  uint64_t v5;
  uint64_t v6;
  uint64_t isStatisticCollectionEnabled;
  int64x2_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64x2_t v12;
  re *v13;
  uint64_t v14;
  int64x2_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64x2_t v19;
  re *v20;
  CFAbsoluteTime v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  re::ecs2::Entity *v31;
  re::ecs2::Entity *v32;
  int v33;
  int v34;
  re *v35;
  CFAbsoluteTime v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t i;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t j;
  uint64_t v53;
  int v54;
  int v55;
  __int128 v57;
  uint64_t (*v58)(uint64_t);
  void *v59;
  uint64_t *v60;
  uint64_t v61;
  char v62;
  uint8_t buf[4];
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v2 = *(uint64_t **)(a1 + 40);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 328) = RESyncCommitGetSourcePeerID();
  if (v2[19])
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    *(double *)(v3 + 320) = *(double *)(v3 + 320) - CFAbsoluteTimeGetCurrent();
    *(_QWORD *)(v2[23] + 456) = v2[25];
    if (re::internal::enableSignposts(0, 0))
      kdebug_trace();
    *(_QWORD *)(v3 + 304) = 0;
    *(_QWORD *)(v3 + 312) = 0;
    IsAtomic = RESyncCommitIsAtomic();
    v5 = MEMORY[0x24BDAC760];
    v62 = IsAtomic;
    RESyncCommitEnumerateForRead();
    *(_QWORD *)&v57 = v5;
    *((_QWORD *)&v57 + 1) = 0x40000000;
    v58 = ___ZNK2re4ecs220NetworkReceiveSystem25processComponentSnapshotsEPK12RESyncCommitRNS0_21NetworkReceiveContextE_block_invoke;
    v59 = &__block_descriptor_tmp_43;
    v60 = v2;
    v61 = v3 + 40;
    RESyncCommitEnumerateForRead();
    RESyncCommitEnumerateForRead();
    v6 = re::internal::enableSignposts(0, 0);
    if ((_DWORD)v6)
      v6 = kdebug_trace();
    isStatisticCollectionEnabled = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v6);
    if ((_DWORD)isStatisticCollectionEnabled)
    {
      isStatisticCollectionEnabled = re::profilerThreadContext((re *)isStatisticCollectionEnabled);
      v8 = *(int64x2_t **)(isStatisticCollectionEnabled + 152);
      if (v8)
      {
        v9 = *(_QWORD *)(v3 + 304);
        v10 = v8[192].u64[0];
        if (v10 >= v9)
          v10 = *(_QWORD *)(v3 + 304);
        v8[192].i64[0] = v10;
        v11 = v8[192].u64[1];
        if (v11 <= v9)
          v11 = v9;
        v8[192].i64[1] = v11;
        v12 = vdupq_n_s64(1uLL);
        v12.i64[0] = v9;
        v8[193] = vaddq_s64(v8[193], v12);
        *(_BYTE *)(isStatisticCollectionEnabled + 184) = 0;
      }
    }
    v13 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)isStatisticCollectionEnabled);
    if ((_DWORD)v13)
    {
      v14 = re::profilerThreadContext(v13);
      v15 = *(int64x2_t **)(v14 + 152);
      if (v15)
      {
        v16 = *(_QWORD *)(v3 + 312);
        v17 = v15[184].u64[0];
        if (v17 >= v16)
          v17 = *(_QWORD *)(v3 + 312);
        v15[184].i64[0] = v17;
        v18 = v15[184].u64[1];
        if (v18 <= v16)
          v18 = v16;
        v15[184].i64[1] = v18;
        v19 = vdupq_n_s64(1uLL);
        v19.i64[0] = v16;
        v15[185] = vaddq_s64(v15[185], v19);
        *(_BYTE *)(v14 + 184) = 0;
      }
    }
    *(_QWORD *)(v2[23] + 456) = 0;
    v21 = CFAbsoluteTimeGetCurrent() + *(double *)(v3 + 320);
    *(CFAbsoluteTime *)(v3 + 320) = v21;
    if (v21 > 0.05)
    {
      v22 = *re::ecsNetworkLogObjects(v20);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        v23 = *(_QWORD *)(v3 + 328);
        LODWORD(v57) = 134217984;
        *(_QWORD *)((char *)&v57 + 4) = v23;
        _os_log_impl(&dword_224FE9000, v22, OS_LOG_TYPE_DEFAULT, "50ms threshold crossed in NetworkReceiveSystem::processCommit for peer %llu", (uint8_t *)&v57, 0xCu);
      }
      *(_QWORD *)(v3 + 320) = 0;
    }
  }
  RESyncCommitListAddCopy();
  RESyncCommitSetForwarded();
  re::ecs2::NetworkReceiveSystem::processCreatedEntities((uint64_t)v2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  re::ecs2::NetworkReceiveSystem::processParentChanges((uint64_t)v2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  re::ecs2::NetworkReceiveSystem::processEvents((uint64_t)v2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v24 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)&v57, 6047, (uint64_t)v2);
  *(double *)(v24 + 320) = *(double *)(v24 + 320) - CFAbsoluteTimeGetCurrent();
  v25 = *(unsigned int *)(v24 + 112);
  if ((_DWORD)v25)
  {
    v26 = 0;
    v27 = (int *)(*(_QWORD *)(v24 + 96) + 8);
    while (1)
    {
      v28 = *v27;
      v27 += 6;
      if (v28 < 0)
        break;
      if (v25 == ++v26)
      {
        LODWORD(v26) = *(_DWORD *)(v24 + 112);
        break;
      }
    }
  }
  else
  {
    LODWORD(v26) = 0;
  }
  if ((_DWORD)v25 != (_DWORD)v26)
  {
    v29 = v26;
    v30 = *(_QWORD *)(v24 + 96);
    do
    {
      v31 = *(re::ecs2::Entity **)(v30 + 24 * v29 + 16);
      re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(v2[19] + 176, v2[19]);
      if ((*((_BYTE *)v31 + 288) & 0x80) != 0)
      {
        v32 = v31;
        do
          v32 = (re::ecs2::Entity *)*((_QWORD *)v32 + 3);
        while (v32);
        re::Event<re::NetworkSystem,re::ecs2::Scene *>::raise(v2[19] + 1144, v2[19]);
      }
      re::ecs2::Entity::removeFromSceneOrParent(v31);
      v30 = *(_QWORD *)(v24 + 96);
      if (*(_DWORD *)(v24 + 112) <= (v26 + 1))
        v33 = v26 + 1;
      else
        v33 = *(_DWORD *)(v24 + 112);
      while (1)
      {
        v29 = (v26 + 1);
        if (v33 - 1 == (_DWORD)v26)
          break;
        LODWORD(v26) = v26 + 1;
        v34 = v29;
        if ((*(_DWORD *)(v30 + 24 * v29 + 8) & 0x80000000) != 0)
          goto LABEL_43;
      }
      v34 = v33;
LABEL_43:
      LODWORD(v26) = v34;
    }
    while ((_DWORD)v25 != v34);
  }
  v36 = CFAbsoluteTimeGetCurrent() + *(double *)(v24 + 320);
  *(CFAbsoluteTime *)(v24 + 320) = v36;
  if (v36 > 0.05)
  {
    v37 = *re::ecsNetworkLogObjects(v35);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      v38 = *(_QWORD *)(v24 + 328);
      *(_DWORD *)buf = 134217984;
      v64 = v38;
      _os_log_impl(&dword_224FE9000, v37, OS_LOG_TYPE_DEFAULT, "50ms threshold crossed in NetworkReceiveSystem::processDestroyedEntities for peer %llu", buf, 0xCu);
    }
    *(_QWORD *)(v24 + 320) = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)&v57);
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  v39 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_DWORD *)(v39 + 108))
  {
    v40 = *(unsigned int *)(v39 + 104);
    if ((_DWORD)v40)
      memset_pattern16(*(void **)(v39 + 88), &unk_2260EB7B0, 4 * v40);
    v41 = *(unsigned int *)(v39 + 112);
    if ((_DWORD)v41)
    {
      v42 = 0;
      for (i = 0; i < v41; ++i)
      {
        v44 = *(_QWORD *)(v39 + 96) + v42;
        v45 = *(_DWORD *)(v44 + 8);
        if (v45 < 0)
        {
          *(_DWORD *)(v44 + 8) = v45 & 0x7FFFFFFF;
          v46 = *(_QWORD *)(v44 + 16);
          if (v46)
          {

            *(_QWORD *)(v44 + 16) = 0;
            v41 = *(unsigned int *)(v39 + 112);
          }
        }
        v42 += 24;
      }
    }
    *(_DWORD *)(v39 + 108) = 0;
    *(_DWORD *)(v39 + 112) = 0;
    v47 = *(_DWORD *)(v39 + 120) + 1;
    *(_DWORD *)(v39 + 116) = 0x7FFFFFFF;
    *(_DWORD *)(v39 + 120) = v47;
    v39 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  }
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear(v39 + 128);
  re::DynamicArray<re::SharedPtr<re::ResourceSharingManager::Completion>>::clear(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 168);
  v48 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_DWORD *)(v48 + 236))
  {
    v49 = *(unsigned int *)(v48 + 232);
    if ((_DWORD)v49)
      memset_pattern16(*(void **)(v48 + 216), &unk_2260EB7B0, 4 * v49);
    v50 = *(unsigned int *)(v48 + 240);
    if ((_DWORD)v50)
    {
      v51 = 0;
      for (j = 0; j < v50; ++j)
      {
        v53 = *(_QWORD *)(v48 + 224) + v51;
        v54 = *(_DWORD *)(v53 + 8);
        if (v54 < 0)
        {
          *(_DWORD *)(v53 + 8) = v54 & 0x7FFFFFFF;
          if (*(_QWORD *)(v53 + 16))
          {
            RESyncRelease();
            *(_QWORD *)(v53 + 16) = 0;
            v50 = *(unsigned int *)(v48 + 240);
          }
        }
        v51 += 32;
      }
    }
    *(_DWORD *)(v48 + 236) = 0;
    *(_DWORD *)(v48 + 240) = 0;
    v55 = *(_DWORD *)(v48 + 248) + 1;
    *(_DWORD *)(v48 + 244) = 0x7FFFFFFF;
    *(_DWORD *)(v48 + 248) = v55;
  }
  return 1;
}

void re::ecs2::NetworkReceiveSystem::processCreatedEntities(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  re *v17;
  uint64_t *v18;
  re::ecs2::Scene *v19;
  uint64_t v20;
  id v21;
  re *v22;
  CFAbsoluteTime v23;
  NSObject *v24;
  uint64_t v25;
  uint8_t v26[16];
  _BYTE buf[24];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v26, 6045, a1);
  *(double *)(a2 + 280) = *(double *)(a2 + 280) - CFAbsoluteTimeGetCurrent();
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(uint64_t **)(a2 + 32);
    v6 = &v5[v4];
    do
    {
      v7 = *v5;
      v8 = *(_QWORD *)(*v5 + 200);
      if (v8
        && *(_QWORD *)(a2 + 168)
        && (v9 = *(_QWORD *)(v8 + 32),
            v10 = 0x94D049BB133111EBLL
                * ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v9 ^ (v9 >> 30))) >> 27)),
            v11 = *(unsigned int *)(*(_QWORD *)(a2 + 176) + 4 * ((v10 ^ (v10 >> 31)) % *(unsigned int *)(a2 + 192))),
            (_DWORD)v11 != 0x7FFFFFFF))
      {
        v12 = *(_QWORD *)(a2 + 184);
        while (*(_QWORD *)(v12 + 32 * v11 + 16) != v9)
        {
          v11 = *(_DWORD *)(v12 + 32 * v11 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v11 == 0x7FFFFFFF)
            goto LABEL_9;
        }
        v13 = (_QWORD *)(v12 + 32 * v11 + 24);
      }
      else
      {
LABEL_9:
        v13 = 0;
      }
      v14 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a2 + 216, *(_QWORD *)(v7 + 296));
      v15 = v7;
      do
      {
        v16 = v15;
        v15 = *(_QWORD *)(v15 + 24);
      }
      while (v15);
      if (!*(_QWORD *)(v16 + 16) && (!v13 || !*v13) && (!v14 || !*(_QWORD *)(v14 + 8)))
      {
        if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v7 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SceneComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType))
        {
          *(_DWORD *)(v7 + 288) |= 0x480u;
          v17 = (re *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 104))(*(_QWORD *)(a1 + 40));
          v18 = re::globalAllocators(v17);
          v19 = (re::ecs2::Scene *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18[2] + 32))(v18[2], 384, 8);
          *(_QWORD *)buf = re::ecs2::Scene::Scene(v19, (re::ecs2::Entity *)v7);
        }
        else
        {
          re::Event<re::NetworkSystem,re::ecs2::Entity *,re::TLEInfo *,re::NewUnboundTLEHandlerResult *>::raise(*(_QWORD *)(a1 + 152) + 1408, *(_QWORD *)(a1 + 152));
          v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 104))(*(_QWORD *)(a1 + 40));
          v17 = (re *)(*(_QWORD *)(*(_QWORD *)re::ecs2::EntityComponentCollection::operator[](v20, 0) + 104) + 304);
          *(_QWORD *)buf = v7;
          v21 = (id)(v7 + 8);
        }
        re::Collection<re::SharedPtr<re::ecs2::Scene>>::add(v17, (uint64_t *)buf);
        if (*(_QWORD *)buf)

      }
      ++v5;
    }
    while (v5 != v6);
  }
  v23 = CFAbsoluteTimeGetCurrent() + *(double *)(a2 + 280);
  *(CFAbsoluteTime *)(a2 + 280) = v23;
  if (v23 > 0.05)
  {
    v24 = *re::ecsNetworkLogObjects(v22);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      v25 = *(_QWORD *)(a2 + 288);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v25;
      _os_log_impl(&dword_224FE9000, v24, OS_LOG_TYPE_DEFAULT, "50ms threshold crossed in NetworkReceiveSystem::processCreatedEntities for peer %llu", buf, 0xCu);
    }
    *(_QWORD *)(a2 + 280) = 0;
  }
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v26);
}

void re::ecs2::NetworkReceiveSystem::processParentChanges(uint64_t a1, uint64_t a2)
{
  uint64_t EntityBoundTo;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  re *v38;
  re::ecs2::Entity *v39;
  re::ecs2::Entity *v40;
  uint64_t v41;
  uint64_t v42;
  re::ecs2::Entity *v43;
  re::ecs2::Entity *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  re::ecs2::Entity *v66;
  uint64_t *v67;
  uint64_t SyncableWithGuid;
  _anonymous_namespace_ *v69;
  re::ecs2::Entity *v70;
  re::ecs2::Entity *v71;
  re::ecs2::Entity *v72;
  re::ecs2::Entity *v73;
  re::ecs2::Entity *v74;
  re::ecs2::Entity *v75;
  re::ecs2::Entity *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  re *v83;
  NSObject *v84;
  uint64_t Guid;
  uint64_t v86;
  uint64_t v87;
  char v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  BOOL v92;
  unint64_t *v93;
  uint64_t v94;
  re::ecs2::Entity **v95;
  int v96;
  int v97;
  uint64_t v98;
  re::ecs2::NetworkReceiveSystem **v99;
  re::ecs2::NetworkReceiveSystem **v100;
  char v101;
  re::ecs2::NetworkReceiveSystem *v102;
  re::ecs2::NetworkReceiveSystem *v103;
  NSObject *v104;
  re::ecs2::Entity *v105;
  re::ecs2::NetworkReceiveSystem *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  re::ecs2::NetworkReceiveSystem *v111;
  re::ecs2::Entity *v112;
  uint64_t v113;
  re::ecs2::Entity **v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  uint64_t v118;
  re *v119;
  uint64_t v120;
  re::ecs2::NetworkReceiveSystem **v121;
  uint64_t v122;
  NSObject *v123;
  re::ecs2::Entity *v124;
  uint64_t v125;
  uint64_t v126;
  re::ecs2::NetworkReceiveSystem *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int *v131;
  int v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  re *v136;
  re::ecs2::Entity *v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  re::ecs2::NetworkReceiveSystem **v142;
  uint64_t v143;
  NSObject *v144;
  re::ecs2::Entity *v145;
  uint64_t v146;
  uint64_t v147;
  re::ecs2::NetworkReceiveSystem *v148;
  uint64_t v149;
  uint64_t v150;
  int *v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  id v158;
  int v159;
  int v160;
  re *v161;
  CFAbsoluteTime v162;
  NSObject *v163;
  uint64_t v164;
  re::ecs2::Entity **v165;
  uint64_t v166;
  uint64_t v167;
  re::ecs2::Entity *v168;
  re::ecs2::Entity *v169;
  re::ecs2::Entity *v170;
  _BYTE v171[22];
  __int16 v172;
  uint64_t v173;
  __int16 v174;
  uint64_t v175;
  _BYTE buf[22];
  __int16 v177;
  unint64_t v178;
  _QWORD v179[18];

  v179[16] = *MEMORY[0x24BDAC8D0];
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  v166 = a1;
  *(double *)(a2 + 280) = *(double *)(a2 + 280) - CFAbsoluteTimeGetCurrent();
  while (*(_DWORD *)(a2 + 244))
  {
    v5 = *(unsigned int *)(a2 + 248);
    v6 = *(_QWORD *)(a2 + 232);
    if ((_DWORD)v5)
    {
      v7 = 0;
      v8 = (int *)(v6 + 8);
      v9 = (int *)(v6 + 8);
      while (1)
      {
        v10 = *v9;
        v9 += 10;
        if (v10 < 0)
          break;
        if (v5 == ++v7)
        {
          LODWORD(v7) = *(_DWORD *)(a2 + 248);
          break;
        }
      }
      v11 = 0;
      v12 = *(_QWORD *)(v6 + 40 * v7 + 16);
      while (1)
      {
        v13 = *v8;
        v8 += 10;
        if (v13 < 0)
          break;
        if (v5 == ++v11)
        {
          LODWORD(v11) = *(_DWORD *)(a2 + 248);
          break;
        }
      }
    }
    else
    {
      LODWORD(v11) = 0;
      v12 = *(_QWORD *)(v6 + 16);
    }
    v14 = v11;
    v15 = *(_QWORD *)(v6 + 40 * v11 + 24);
    if (v15)
    {
      v16 = (id)(v15 + 8);
      v17 = *(_QWORD *)(v6 + 40 * v14 + 32);
      *(_QWORD *)v171 = v15;
      v18 = (id)(v15 + 8);
    }
    else
    {
      v17 = *(_QWORD *)(v6 + 40 * v11 + 32);
      *(_QWORD *)v171 = 0;
    }
    v19 = re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a2 + 216, v17);
    if (v19)
    {
      v20 = (uint64_t *)v19;
      do
      {
        v12 = v17;
        re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)v171, *v20);
        v17 = v20[1];
        v20 = (uint64_t *)re::HashTable<re::ecs2::Entity const*,re::ecs2::ShadowPlaneTrackingState,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(a2 + 216, v17);
      }
      while (v20);
    }
    if (*(_QWORD *)(a2 + 216))
    {
      v21 = 0x94D049BB133111EBLL
          * ((0xBF58476D1CE4E5B9 * (v12 ^ (v12 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v12 ^ (v12 >> 30))) >> 27));
      v22 = (v21 ^ (v21 >> 31)) % *(unsigned int *)(a2 + 240);
      v23 = *(_QWORD *)(a2 + 224);
      v24 = *(unsigned int *)(v23 + 4 * v22);
      if ((_DWORD)v24 != 0x7FFFFFFF)
      {
        v25 = *(_QWORD *)(a2 + 232);
        if (*(_QWORD *)(v25 + 40 * v24 + 16) == v12)
        {
          *(_DWORD *)(v23 + 4 * v22) = *(_DWORD *)(v25 + 40 * v24 + 8) & 0x7FFFFFFF;
LABEL_27:
          v27 = *(_QWORD *)(a2 + 232);
          v28 = v27 + 40 * v24;
          v31 = *(_DWORD *)(v28 + 8);
          v29 = (int *)(v28 + 8);
          v30 = v31;
          if (v31 < 0)
          {
            *v29 = v30 & 0x7FFFFFFF;
            v32 = v27 + 40 * v24;
            v35 = *(_QWORD *)(v32 + 24);
            v34 = (_QWORD *)(v32 + 24);
            v33 = v35;
            if (v35)
            {

              *v34 = 0;
            }
          }
          v36 = *(_QWORD *)(a2 + 232) + 40 * v24;
          *(_DWORD *)(v36 + 8) = *(_DWORD *)(v36 + 8) & 0x80000000 | *(_DWORD *)(a2 + 252);
          --*(_DWORD *)(a2 + 244);
          v37 = *(_DWORD *)(a2 + 256) + 1;
          *(_DWORD *)(a2 + 252) = v24;
          *(_DWORD *)(a2 + 256) = v37;
        }
        else
        {
          while (1)
          {
            v26 = v24;
            v24 = *(_DWORD *)(v25 + 40 * v24 + 8) & 0x7FFFFFFF;
            if (v24 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v25 + 40 * v24 + 16) == v12)
            {
              *(_DWORD *)(v25 + 40 * v26 + 8) = *(_DWORD *)(v25 + 40 * v26 + 8) & 0x80000000 | *(_DWORD *)(v25 + 40 * v24 + 8) & 0x7FFFFFFF;
              goto LABEL_27;
            }
          }
        }
      }
    }
    if (v17)
    {
      re::ecs2::NetworkReceiveSystem::findEntity((re::ecs2::NetworkReceiveSystem *)&v170, *(_QWORD *)(v166 + 40), v17);
      v40 = v170;
      if (v170)
      {
        v41 = *(_QWORD *)v171;
        do
        {
          v42 = v41;
          v41 = *(_QWORD *)(v41 + 24);
        }
        while (v41);
        if (!*(_QWORD *)(v42 + 16))
          goto LABEL_39;
        v43 = v170;
        do
        {
          v44 = v43;
          v43 = (re::ecs2::Entity *)*((_QWORD *)v43 + 3);
        }
        while (v43);
        if (!*((_QWORD *)v44 + 2))
        {
          v51 = *re::ecsNetworkLogObjects(*(re **)v171);
          if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
          {
            v52 = *((_QWORD *)v40 + 37);
            v53 = *((_QWORD *)v40 + 35);
            v54 = *(_QWORD *)(*(_QWORD *)v171 + 296);
            v55 = *(_QWORD *)(*(_QWORD *)v171 + 280);
            *(_DWORD *)buf = 134218755;
            *(_QWORD *)&buf[4] = v52;
            *(_WORD *)&buf[12] = 2081;
            *(_QWORD *)&buf[14] = v53;
            v177 = 2048;
            v178 = v54;
            LOWORD(v179[0]) = 2081;
            *(_QWORD *)((char *)v179 + 2) = v55;
            _os_log_error_impl(&dword_224FE9000, v51, OS_LOG_TYPE_ERROR, "[NetworkComponent] Parent (id=%llu name=%{private}s) not in scene while reparenting Entity (id=%llu name=%{private}s)", buf, 0x2Au);
          }
        }
        else
        {
LABEL_39:
          re::ecs2::NetworkReceiveSystem::setEntityParent(*(re::ecs2::NetworkReceiveSystem **)v171, v170, v39);
        }

        v170 = 0;
      }
      else
      {
        v48 = *re::ecsNetworkLogObjects(v38);
        EntityBoundTo = os_log_type_enabled(v48, OS_LOG_TYPE_ERROR);
        if ((_DWORD)EntityBoundTo)
        {
          v49 = *(_QWORD *)(*(_QWORD *)v171 + 296);
          v50 = *(_QWORD *)(*(_QWORD *)v171 + 280);
          *(_DWORD *)buf = 134218499;
          *(_QWORD *)&buf[4] = v49;
          *(_WORD *)&buf[12] = 2081;
          *(_QWORD *)&buf[14] = v50;
          v177 = 2048;
          v178 = v17;
          _os_log_error_impl(&dword_224FE9000, v48, OS_LOG_TYPE_ERROR, "[NetworkComponent] Entity (id=%llu name=%{private}s) unable to find parent %llu.", buf, 0x20u);
        }
      }
    }
    else
    {
      v45 = *(_QWORD *)(*(_QWORD *)v171 + 24);
      if (v45 && (*(_BYTE *)(v45 + 288) & 0x80) == 0)
        re::ecs2::NetworkReceiveSystem::setEntityParent(*(re::ecs2::NetworkReceiveSystem **)v171, 0, *(re::ecs2::Entity **)v171);
      *(_DWORD *)buf = 0;
      re::Event<re::NetworkSystem,re::ecs2::Entity *,re::TLEInfo *,re::NewUnboundTLEHandlerResult *>::raise(*(_QWORD *)(v166 + 152) + 1408, *(_QWORD *)(v166 + 152));
      if (!*(_DWORD *)buf)
      {
        v46 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v166 + 40) + 104))(*(_QWORD *)(v166 + 40));
        v47 = re::ecs2::EntityComponentCollection::operator[](v46, 0);
        re::Collection<re::SharedPtr<re::ecs2::Scene>>::add((_QWORD *)(*(_QWORD *)(*(_QWORD *)v47 + 104) + 304), (uint64_t *)v171);
      }
    }
    if (*(_QWORD *)v171)

    if (v15)
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  *(_DWORD *)&buf[16] = 1;
  v178 = 0;
  v179[0] = 0;
  v56 = *(unsigned int *)(a2 + 200);
  if ((_DWORD)v56)
  {
    v57 = 0;
    v58 = (int *)(*(_QWORD *)(a2 + 184) + 8);
    while (1)
    {
      v59 = *v58;
      v58 += 8;
      if (v59 < 0)
        break;
      if (v56 == ++v57)
      {
        LODWORD(v57) = *(_DWORD *)(a2 + 200);
        break;
      }
    }
  }
  else
  {
    LODWORD(v57) = 0;
  }
  if ((_DWORD)v56 == (_DWORD)v57)
  {
    v60 = v166;
    goto LABEL_132;
  }
  v61 = v57;
  v62 = *(_QWORD *)(a2 + 184);
  do
  {
    v63 = v62 + 32 * v61;
    v65 = *(_QWORD *)(v63 + 16);
    v64 = v63 + 16;
    EntityBoundTo = re::ecs2::NetworkComponent::getEntityBoundTo(v65, (uint64_t *)&v170);
    v66 = v170;
    if (v170)
    {
      v67 = (uint64_t *)(v64 + 8);
      if (!*(_QWORD *)(v64 + 8))
      {
        v77 = *((_QWORD *)v170 + 3);
        if (v77 && (*(_BYTE *)(v77 + 288) & 0x80) == 0)
          re::ecs2::NetworkReceiveSystem::setEntityParent(v170, 0, v170);
        *(_DWORD *)v171 = 0;
        re::Event<re::NetworkSystem,re::ecs2::Entity *,re::TLEInfo *,re::NewUnboundTLEHandlerResult *>::raise(*(_QWORD *)(v166 + 152) + 1408, *(_QWORD *)(v166 + 152));
        if (!*(_DWORD *)v171)
        {
          v78 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v166 + 40) + 104))(*(_QWORD *)(v166 + 40));
          v79 = re::ecs2::EntityComponentCollection::operator[](v78, 0);
          re::Collection<re::SharedPtr<re::ecs2::Scene>>::add((_QWORD *)(*(_QWORD *)(*(_QWORD *)v79 + 104) + 304), (uint64_t *)&v170);
        }
        goto LABEL_101;
      }
      SyncableWithGuid = RESyncServiceFindSyncableWithGuid();
      v69 = (_anonymous_namespace_ *)re::ecs2::NetworkComponent::getEntityBoundTo(SyncableWithGuid, (uint64_t *)&v169);
      v71 = v169;
      if (!v169)
      {
        v80 = *(_QWORD *)(v166 + 152);
        v81 = *v67;
        v168 = v170;
        if (v170)
          v82 = (char *)v170 + 8;
        v83 = (re *)re::NetworkSystem::queueWaitForParentEntity(v80, v81, (uint64_t *)&v168);
        if (v168)
        {

          v168 = 0;
        }
        v84 = *re::ecsNetworkLogObjects(v83);
        EntityBoundTo = os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT);
        if ((_DWORD)EntityBoundTo)
        {
          Guid = RESyncableGetGuid();
          v86 = *((_QWORD *)v170 + 35);
          v87 = *v67;
          *(_DWORD *)v171 = 134218499;
          *(_QWORD *)&v171[4] = Guid;
          *(_WORD *)&v171[12] = 2081;
          *(_QWORD *)&v171[14] = v86;
          v172 = 2048;
          v173 = v87;
          _os_log_impl(&dword_224FE9000, v84, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] Entity (guid=%llu name=%{private}s) unable to find parent %llu. Postpone binding with parent.", v171, 0x20u);
        }
        goto LABEL_101;
      }
      v72 = v170;
      v73 = v170;
      do
      {
        v74 = v73;
        v73 = (re::ecs2::Entity *)*((_QWORD *)v73 + 3);
      }
      while (v73);
      if (!*((_QWORD *)v74 + 2))
        goto LABEL_73;
      v75 = v169;
      do
      {
        v76 = v75;
        v75 = (re::ecs2::Entity *)*((_QWORD *)v75 + 3);
      }
      while (v75);
      if (*((_QWORD *)v76 + 2))
      {
LABEL_73:
        re::ecs2::NetworkReceiveSystem::setEntityParent(v170, v169, v70);
LABEL_100:

LABEL_101:
        if (v170)

        goto LABEL_103;
      }
      if (*(_QWORD *)buf)
      {
        v88 = buf[16];
        if ((buf[16] & 1) != 0)
        {
          if ((unint64_t)(*(_QWORD *)&buf[8] - 8) < 0xFFFFFFFFFFFFFFF7)
          {
            v89 = *(_QWORD *)&buf[8] + 1;
            v90 = 16;
            goto LABEL_93;
          }
        }
        else if (*(_QWORD *)&buf[8] >= v178)
        {
          v89 = *(_QWORD *)&buf[8] + 1;
          if (v178 < *(_QWORD *)&buf[8] + 1)
          {
            v90 = 2 * v178;
LABEL_93:
            if (v90 <= v89)
              v91 = v89;
            else
              v91 = v90;
            re::DynamicOverflowArray<re::Pair<re::ecs2::Entity *,re::ecs2::Entity *,true>,8ul>::setCapacity(buf, v91);
            v88 = buf[16];
          }
        }
      }
      else
      {
        re::DynamicOverflowArray<re::Pair<re::ecs2::Entity *,re::ecs2::Entity *,true>,8ul>::setCapacity(buf, *(_QWORD *)&buf[8] + 1);
        v88 = buf[16] + 2;
        *(_DWORD *)&buf[16] += 2;
      }
      v92 = (v88 & 1) == 0;
      v93 = (unint64_t *)v179[0];
      v94 = *(_QWORD *)&buf[8];
      if (!v92)
        v93 = &v178;
      v95 = (re::ecs2::Entity **)&v93[2 * *(_QWORD *)&buf[8]];
      *v95 = v72;
      v95[1] = v71;
      *(_QWORD *)&buf[8] = v94 + 1;
      *(_DWORD *)&buf[16] += 2;
      goto LABEL_100;
    }
LABEL_103:
    v62 = *(_QWORD *)(a2 + 184);
    if (*(_DWORD *)(a2 + 200) <= (v57 + 1))
      v96 = v57 + 1;
    else
      v96 = *(_DWORD *)(a2 + 200);
    while (1)
    {
      v61 = (v57 + 1);
      if (v96 - 1 == (_DWORD)v57)
        break;
      LODWORD(v57) = v57 + 1;
      v97 = v61;
      if ((*(_DWORD *)(v62 + 32 * v61 + 8) & 0x80000000) != 0)
        goto LABEL_110;
    }
    v97 = v96;
LABEL_110:
    LODWORD(v57) = v97;
  }
  while ((_DWORD)v56 != v97);
  v60 = v166;
  if (*(_QWORD *)&buf[8])
  {
    v98 = 0;
    v99 = (buf[16] & 1) != 0 ? (re::ecs2::NetworkReceiveSystem **)&v178 : (re::ecs2::NetworkReceiveSystem **)v179[0];
    v100 = &v99[2 * *(_QWORD *)&buf[8]];
    do
    {
      v101 = 0;
      do
      {
        v102 = v99[1];
        do
        {
          v103 = v102;
          v102 = (re::ecs2::NetworkReceiveSystem *)*((_QWORD *)v102 + 3);
        }
        while (v102);
        if (*((_QWORD *)v103 + 2))
        {
          re::ecs2::NetworkReceiveSystem::setEntityParent(*v99, v99[1], v66);
          *(_OWORD *)v171 = *(_OWORD *)v99;
          *(_OWORD *)v99 = *((_OWORD *)v100 - 1);
          *((_OWORD *)v100 - 1) = *(_OWORD *)v171;
          v100 -= 2;
          v101 = 1;
        }
        else
        {
          v99 += 2;
        }
      }
      while (v99 != v100);
      ++v98;
      if ((buf[16] & 1) != 0)
        v99 = (re::ecs2::NetworkReceiveSystem **)&v178;
      else
        v99 = (re::ecs2::NetworkReceiveSystem **)v179[0];
    }
    while ((v101 & 1) != 0 && v99 != v100);
    while (v99 != v100)
    {
      v104 = *re::ecsNetworkLogObjects((re *)EntityBoundTo);
      if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
      {
        v106 = v99[1];
        v107 = *((_QWORD *)*v99 + 37);
        v108 = *((_QWORD *)*v99 + 35);
        v109 = *((_QWORD *)v106 + 37);
        v110 = *((_QWORD *)v106 + 35);
        *(_DWORD *)v171 = 134218755;
        *(_QWORD *)&v171[4] = v107;
        *(_WORD *)&v171[12] = 2081;
        *(_QWORD *)&v171[14] = v108;
        v172 = 2048;
        v173 = v109;
        v174 = 2081;
        v175 = v110;
        _os_log_impl(&dword_224FE9000, v104, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] Entity %llu(%{private}s) in a scene reparented to %llu(%{private}s) not in a scene", v171, 0x2Au);
      }
      v111 = *v99;
      v112 = v99[1];
      v99 += 2;
      re::ecs2::NetworkReceiveSystem::setEntityParent(v111, v112, v105);
    }
  }
LABEL_132:
  v113 = *(_QWORD *)(a2 + 16);
  if (v113)
  {
    v114 = *(re::ecs2::Entity ***)(a2 + 32);
    v165 = &v114[v113];
    do
    {
      v115 = *((_QWORD *)*v114 + 25);
      if (v115)
      {
        if (*(_QWORD *)(v115 + 32))
          v116 = RESyncableGetGuid();
        else
          v116 = 0;
        v118 = *(_QWORD *)(v60 + 152);
        *(_QWORD *)v171 = v116;
        v119 = (re *)re::HashTable<unsigned long long,re::DynamicArray<re::AssetLoadDescriptor>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v118 + 2200, (uint64_t *)v171);
        if (v119)
        {
          v120 = *((_QWORD *)v119 + 2);
          if (v120)
          {
            v121 = (re::ecs2::NetworkReceiveSystem **)*((_QWORD *)v119 + 4);
            v122 = 8 * v120;
            do
            {
              v123 = *re::ecsNetworkLogObjects(v119);
              if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
              {
                v125 = *((_QWORD *)*v121 + 35);
                v126 = *((_QWORD *)*v114 + 35);
                *(_DWORD *)v171 = 136381187;
                *(_QWORD *)&v171[4] = v125;
                *(_WORD *)&v171[12] = 2081;
                *(_QWORD *)&v171[14] = v126;
                v172 = 2048;
                v173 = v116;
                _os_log_impl(&dword_224FE9000, v123, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] Late binding entity %{private}s to parent %{private}s(guid=%llu)", v171, 0x20u);
              }
              v127 = *v121++;
              re::ecs2::NetworkReceiveSystem::setEntityParent(v127, *v114, v124);
              v122 -= 8;
            }
            while (v122);
          }
        }
        v60 = v166;
        EntityBoundTo = re::NetworkSystem::clearWaitListForParent(*(re::NetworkSystem **)(v166 + 152), v116);
      }
      else
      {
        v117 = *re::ecsNetworkLogObjects((re *)EntityBoundTo);
        EntityBoundTo = os_log_type_enabled(v117, OS_LOG_TYPE_INFO);
        if ((_DWORD)EntityBoundTo)
        {
          *(_WORD *)v171 = 0;
          _os_log_impl(&dword_224FE9000, v117, OS_LOG_TYPE_INFO, "[NetworkComponent] Entity arrived without network component.", v171, 2u);
        }
      }
      ++v114;
    }
    while (v114 != v165);
  }
  v128 = *(_QWORD *)(v60 + 152);
  v129 = *(unsigned int *)(v128 + 2232);
  if ((_DWORD)v129)
  {
    v130 = 0;
    v131 = (int *)(*(_QWORD *)(v128 + 2216) + 8);
    while (1)
    {
      v132 = *v131;
      v131 += 16;
      if (v132 < 0)
        break;
      if (v129 == ++v130)
      {
        LODWORD(v130) = *(_DWORD *)(v128 + 2232);
        break;
      }
    }
  }
  else
  {
    LODWORD(v130) = 0;
  }
  if ((_DWORD)v129 != (_DWORD)v130)
  {
    v133 = v130;
    while (1)
    {
      v134 = (_QWORD *)(*(_QWORD *)(v128 + 2216) + (v133 << 6));
      v135 = RESyncServiceFindSyncableWithGuid();
      v136 = (re *)re::ecs2::NetworkComponent::getEntityBoundTo(v135, (uint64_t *)&v170);
      v137 = v170;
      if (v170)
        break;
      if (*(_DWORD *)(v128 + 2232) <= (v130 + 1))
        v138 = v130 + 1;
      else
        v138 = *(_DWORD *)(v128 + 2232);
      while (1)
      {
        v133 = (v130 + 1);
        if (v138 - 1 == (_DWORD)v130)
          break;
        LODWORD(v130) = v130 + 1;
        v139 = v133;
        if ((*(_DWORD *)(*(_QWORD *)(v128 + 2216) + (v133 << 6) + 8) & 0x80000000) != 0)
          goto LABEL_164;
      }
      v139 = v138;
LABEL_164:
      LODWORD(v130) = v139;
      if ((_DWORD)v129 == v139)
        goto LABEL_172;
    }
    v140 = v134[2];
    v141 = v134[5];
    if (v141)
    {
      v142 = (re::ecs2::NetworkReceiveSystem **)v134[7];
      v143 = 8 * v141;
      do
      {
        v144 = *re::ecsNetworkLogObjects(v136);
        if (os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT))
        {
          v146 = *((_QWORD *)*v142 + 35);
          v147 = *((_QWORD *)v137 + 35);
          *(_DWORD *)v171 = 136381187;
          *(_QWORD *)&v171[4] = v146;
          *(_WORD *)&v171[12] = 2081;
          *(_QWORD *)&v171[14] = v147;
          v172 = 2048;
          v173 = v140;
          _os_log_impl(&dword_224FE9000, v144, OS_LOG_TYPE_DEFAULT, "DOUBLE Late binding entity %{private}s to parent %{private}s(guid=%llu)", v171, 0x20u);
        }
        v148 = *v142++;
        re::ecs2::NetworkReceiveSystem::setEntityParent(v148, v137, v145);
        v143 -= 8;
      }
      while (v143);
    }
    re::NetworkSystem::clearWaitListForParent(*(re::NetworkSystem **)(v166 + 152), v140);

  }
LABEL_172:
  v149 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v149)
  {
    v150 = 0;
    v151 = (int *)(*(_QWORD *)(a2 + 56) + 8);
    v152 = v166;
    while (1)
    {
      v153 = *v151;
      v151 += 6;
      if (v153 < 0)
        break;
      if (v149 == ++v150)
      {
        LODWORD(v150) = *(_DWORD *)(a2 + 72);
        break;
      }
    }
  }
  else
  {
    LODWORD(v150) = 0;
    v152 = v166;
  }
  if ((_DWORD)v149 != (_DWORD)v150)
  {
    v154 = v150;
    v155 = *(_QWORD *)(a2 + 56);
    do
    {
      v156 = *(_QWORD *)(v152 + 152);
      v157 = *(_QWORD *)(v155 + 24 * v154 + 16);
      v167 = v157;
      if (v157)
        v158 = (id)(v157 + 8);
      re::NetworkSystem::removeEntityFromParentWaitlist(v156, &v167);
      if (v167)
      {

        v167 = 0;
      }
      v155 = *(_QWORD *)(a2 + 56);
      if (*(_DWORD *)(a2 + 72) <= (v150 + 1))
        v159 = v150 + 1;
      else
        v159 = *(_DWORD *)(a2 + 72);
      while (1)
      {
        v154 = (v150 + 1);
        if (v159 - 1 == (_DWORD)v150)
          break;
        LODWORD(v150) = v150 + 1;
        v160 = v154;
        if ((*(_DWORD *)(v155 + 24 * v154 + 8) & 0x80000000) != 0)
          goto LABEL_191;
      }
      v160 = v159;
LABEL_191:
      LODWORD(v150) = v160;
    }
    while ((_DWORD)v149 != v160);
  }
  if (re::internal::enableSignposts(0, 0))
    kdebug_trace();
  if (*(_QWORD *)buf && (buf[16] & 1) == 0)
    (*(void (**)(void))(**(_QWORD **)buf + 40))();
  v162 = CFAbsoluteTimeGetCurrent() + *(double *)(a2 + 280);
  *(CFAbsoluteTime *)(a2 + 280) = v162;
  if (v162 > 0.05)
  {
    v163 = *re::ecsNetworkLogObjects(v161);
    if (os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT))
    {
      v164 = *(_QWORD *)(a2 + 288);
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = v164;
      _os_log_impl(&dword_224FE9000, v163, OS_LOG_TYPE_DEFAULT, "50ms threshold crossed in NetworkReceiveSystem::processParentChanges for peer %llu", buf, 0xCu);
    }
    *(_QWORD *)(a2 + 280) = 0;
  }
}

void re::ecs2::NetworkReceiveSystem::processEvents(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  re *v15;
  CFAbsoluteTime v16;
  NSObject *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(double *)(a2 + 280) = *(double *)(a2 + 280) - CFAbsoluteTimeGetCurrent();
  v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    v5 = *(uint64_t **)(a2 + 32);
    v6 = &v5[v4];
    do
    {
      v7 = *v5;
      re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(*(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 152));
      if ((*(_BYTE *)(v7 + 288) & 0x80) != 0)
      {
        do
          v7 = *(_QWORD *)(v7 + 24);
        while (v7);
        re::Event<re::NetworkSystem,re::ecs2::Scene *>::raise(*(_QWORD *)(a1 + 152) + 1056, *(_QWORD *)(a1 + 152));
      }
      ++v5;
    }
    while (v5 != v6);
  }
  v8 = *(_QWORD *)(a2 + 104);
  if (v8)
  {
    v9 = *(_QWORD *)(a2 + 120);
    v10 = 8 * v8;
    do
    {
      v9 += 8;
      re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(*(_QWORD *)(a1 + 152) + 88, *(_QWORD *)(a1 + 152));
      v10 -= 8;
    }
    while (v10);
  }
  v11 = *(_QWORD *)(a2 + 144);
  if (v11)
  {
    v12 = *(_QWORD **)(a2 + 160);
    v13 = 8 * v11;
    do
    {
      v14 = (_QWORD *)*v12;
      if (*(_QWORD *)(*v12 + 16))
      {
        if ((_UNKNOWN *)(*(uint64_t (**)(_QWORD))(*v14 + 40))(*v12) == re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
          re::ecs2::NetworkComponent::resolveViews((uint64_t)v14, 0);
        re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(*(_QWORD *)(a1 + 152) + 352, *(_QWORD *)(a1 + 152));
        re::ecs2::Component::markDirty(v14);
      }
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  v16 = CFAbsoluteTimeGetCurrent() + *(double *)(a2 + 280);
  *(CFAbsoluteTime *)(a2 + 280) = v16;
  if (v16 > 0.05)
  {
    v17 = *re::ecsNetworkLogObjects(v15);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(_QWORD *)(a2 + 288);
      v19 = 134217984;
      v20 = v18;
      _os_log_impl(&dword_224FE9000, v17, OS_LOG_TYPE_DEFAULT, "50ms threshold crossed in NetworkReceiveSystem::processEvents for peer %llu", (uint8_t *)&v19, 0xCu);
    }
    *(_QWORD *)(a2 + 280) = 0;
  }
}

void re::Event<re::NetworkSystem>::raise(uint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v5;

  v3 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v3 + 1;
  if (*(_QWORD *)(a1 + 16))
  {
    v5 = 0;
    do
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32 * v5 + 24))(a2) == 1)
        re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((_QWORD *)a1, v5);
      else
        ++v5;
    }
    while (v5 < *(_QWORD *)(a1 + 16));
    v3 = *(_DWORD *)(a1 + 80) - 1;
  }
  *(_DWORD *)(a1 + 80) = v3;
  if (!v3)
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::doDeferredActions((_anonymous_namespace_ *)a1);
}

uint64_t ___ZNK2re4ecs220NetworkReceiveSystem19processLocalSessionEP13RESyncSession_block_invoke(_anonymous_namespace_ *a1, uint64_t a2, const char *a3, const char *a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  re::ecs2::EntityFactory *v11;
  _BOOL4 v12;
  _BOOL4 v13;
  re::ecs2::Entity *v14;
  uint64_t *v15;
  re::ecs2::Entity *v16;
  uint64_t v17;
  _BOOL4 v18;
  re *IncomingSyncable;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  int v23;
  int v24;
  id v25;
  _BOOL8 v26;
  size_t v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  const char *v31;
  unint64_t v32;
  re::ecs2::Entity *v33;
  const char *v34;
  _QWORD *v35;
  re::ecs2::Entity *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t i;
  uint64_t v45;
  re *v46;
  const re::ecs2::ComponentTypeBase *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  re::ecs2::Entity *v51;
  _QWORD *v52;
  const re::ecs2::ComponentTypeBase *v53;
  NSObject *v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  re *v61;
  const re::ecs2::ComponentTypeBase *v62;
  uint64_t v63;
  uint64_t v64;
  const re::ecs2::ComponentTypeBase *v65;
  uint64_t v66;
  NSObject *v67;
  NSObject *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t j;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t isStatisticCollectionEnabled;
  uint64_t v82;
  re *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t v88;
  _BOOL4 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  re::ecs2::Entity *v95;
  uint64_t v96;
  uint64_t PeerID;
  const char *v98[2];
  const char *v99;
  unsigned __int8 *v100;
  int v101;
  char v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  _QWORD v106[3];
  int v107;
  _BYTE v108[44];
  uint64_t v109;
  _QWORD v110[3];
  int v111;
  _QWORD v112[4];
  int v113;
  _BYTE v114[44];
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  const char *v124;
  unint64_t v125;
  const char *v126;
  unint64_t v127;
  _BYTE buf[22];
  __int16 v129;
  uint64_t v130;
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  v6 = (uint64_t *)*((_QWORD *)a1 + 4);
  v123 = 0;
  v124 = (const char *)&str_110;
  memset(v106, 0, sizeof(v106));
  v107 = 0;
  memset(v108, 0, sizeof(v108));
  v109 = 0x7FFFFFFFLL;
  memset(v110, 0, sizeof(v110));
  memset(v112, 0, sizeof(v112));
  memset(v114, 0, sizeof(v114));
  v115 = 0x7FFFFFFFLL;
  v116 = 0u;
  v117 = 0u;
  v118 = 0;
  v119 = 0x7FFFFFFFLL;
  v122 = 0;
  v120 = 0;
  v121 = 0;
  v7 = v6[23] + 456;
  v111 = 0;
  v113 = 0;
  v98[0] = a3;
  v98[1] = a4;
  v101 = -1;
  v102 = 0;
  v103 = v7;
  v105 = 0;
  v99 = a3;
  v100 = (unsigned __int8 *)&a4[(_QWORD)a3];
  PeerID = RESyncParticipantGetPeerID();
  v8 = v6[19];
  *(_QWORD *)buf = PeerID;
  v87 = re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v8 + 2944, (uint64_t *)buf);
  v88 = v87 + 200;
  v96 = 0;
  re::snapshot::DecoderRaw::operator>><unsigned long long>((uint64_t *)v98, &v96);
  v9 = v96;
  if (v96)
  {
    while (1)
    {
      if (v100 == (unsigned __int8 *)v99)
      {
        re::snapshot::Decoder::error(v98, "overrun: attempted to read %zu bytes, only %zu remaining", 1uLL, 0);
        v10 = 0;
        v9 = v96;
      }
      else
      {
        v10 = *(unsigned __int8 *)v99++;
      }
      re::ecs2::NetworkReceiveSystem::findEntity((re::ecs2::NetworkReceiveSystem *)&v95, v6[5], v9);
      if (v95)
      {
        v12 = 0;
        v13 = 1;
        v14 = v95;
      }
      else
      {
        v13 = (v10 & 2) == 0;
        v15 = re::ecs2::EntityFactory::instance(v11);
        re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v15, 4uLL, (re::ecs2::Entity **)buf);
        v16 = v95;
        v14 = *(re::ecs2::Entity **)buf;
        v95 = *(re::ecs2::Entity **)buf;
        if (v16)
        {

          v14 = v95;
        }
        *((_QWORD *)v14 + 37) = v96;
        v12 = (v10 & 2) == 0;
      }
      v17 = *((_QWORD *)v14 + 25);
      if (!v17)
      {
        v18 = v13;
        (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                    + 32))(buf);
        v17 = *(_QWORD *)buf;
        *(_BYTE *)(*(_QWORD *)buf + 48) = 2;
        *(_QWORD *)(v17 + 56) = v6[19];
        IncomingSyncable = (re *)RESyncServiceCreateIncomingSyncable();
        if (*(re **)(v17 + 32) != IncomingSyncable)
          RESyncableRefRetainer::reset((uint64_t *)(v17 + 32), (uint64_t)IncomingSyncable);
        if (IncomingSyncable)
          RESyncRelease();
        re::ecs2::NetworkComponent::bindEntityTo(IncomingSyncable, (uint64_t)v95);
        v94 = v17;
        re::ecs2::EntityComponentCollection::add((uint64_t)v95 + 32, &v94, 1);
        if (v94)
        {

          v94 = 0;
        }
        re::DynamicOverflowArray<unsigned long long,2ul>::add((_anonymous_namespace_ *)(v17 + 64), &PeerID);
        *(_QWORD *)buf = *((_QWORD *)v95 + 37);
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addNew(v88, (uint64_t *)buf);
        re::ecs2::NetworkComponent::resolveViews(v17, 0);
        v14 = v95;
        v13 = v18;
      }
      v20 = *((_QWORD *)v14 + 3);
      if (!v20 || (*(_BYTE *)(v20 + 288) & 0x80) != 0)
        v21 = 0;
      else
        v21 = *(_QWORD *)(v20 + 296);
      v22 = v10 != 0;
      if (v10)
      {
        v89 = v13;
        *(_BYTE *)(v17 + 48) |= 2u;
        if (v100 == (unsigned __int8 *)v99)
        {
          re::snapshot::Decoder::error(v98, "overrun: attempted to read %zu bytes, only %zu remaining", 1uLL, 0);
          v23 = 0;
          v14 = v95;
        }
        else
        {
          v23 = *(unsigned __int8 *)v99++;
        }
        if (v23 != ((*((_DWORD *)v14 + 72) >> 3) & 1))
          re::ecs2::Entity::setSelfEnabled(v14, v23 != 0);
        v93 = 0;
        re::snapshot::DecoderRaw::operator>><unsigned long long>((uint64_t *)v98, &v93);
        if (*(_BYTE *)(v17 + 617) == 0 || v93 != 0)
          v21 = v93;
        if (v100 == (unsigned __int8 *)v99)
        {
          re::snapshot::Decoder::error(v98, "overrun: attempted to read %zu bytes, only %zu remaining", 1uLL, 0);
          v24 = 2;
        }
        else
        {
          v24 = *(unsigned __int8 *)v99++;
        }
        if (v24 != *(unsigned __int8 *)(v17 + 560))
        {
          *(_BYTE *)(v17 + 560) = v24;
          v25 = (id)(v17 + 8);
          *(_QWORD *)buf = v17;
          re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add(&v112[1], buf);
          if (*(_QWORD *)buf)

        }
        v125 = 0;
        v126 = (const char *)&str_110;
        *(_QWORD *)buf = v123 & 1;
        *(_QWORD *)&buf[8] = v124;
        v123 = 0;
        v124 = (const char *)&str_110;
        re::StringID::destroyString((re::StringID *)buf);
        re::StringID::destroyString((re::StringID *)&v125);
        v127 = 0;
        v26 = re::snapshot::DecoderRaw::beginString((re::snapshot::DecoderRaw *)v98, &v127);
        if (v26)
        {
          v27 = v127;
          v28 = v99;
          v29 = v100 - (unsigned __int8 *)v99;
          if (v100 - (unsigned __int8 *)v99 >= v127)
            v29 = v127;
          v99 += v29;
          v125 = 0;
          v126 = (const char *)&str_110;
          v30 = v125;
          v31 = v126;
          v32 = v125 & 0xFFFFFFFFFFFFFFFELL;
          v125 = 0;
          v126 = (const char *)&str_110;
          *(_QWORD *)buf = v32;
          *(_QWORD *)&buf[8] = &str_110;
          v123 = v30;
          v124 = v31;
          re::StringID::destroyString((re::StringID *)buf);
          re::StringID::destroyString((re::StringID *)&v125);
        }
        else
        {
          v30 = 0;
          v31 = (const char *)&str_110;
        }
        v33 = v95;
        if ((*((_QWORD *)v95 + 34) ^ (unint64_t)v30) > 1
          || (v34 = (const char *)*((_QWORD *)v95 + 35), v31 != v34) && strcmp(v31, v34))
        {
          re::StringID::operator=((unint64_t *)v33 + 34, &v123);
        }
        if (kdebug_is_enabled())
        {
          re::packCharArrayToUInt64ForAriadne(*((re **)v95 + 35), 0);
          kdebug_trace();
        }
        if (!v89 || !v12)
        {
          if (v89)
            v35 = v110;
          else
            v35 = v106;
          re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add(v35, (uint64_t *)&v95);
        }
      }
      if (v12)
        goto LABEL_65;
      v36 = v95;
      v37 = *((_QWORD *)v95 + 3);
      if (v37)
      {
        if ((*(_BYTE *)(v37 + 288) & 0x80) == 0)
          break;
      }
      if (v21)
        goto LABEL_58;
LABEL_65:
      v125 = 0;
      re::snapshot::DecoderRaw::operator>><unsigned long long>((uint64_t *)v98, &v125);
      for (i = v125; v125; i = v125)
      {
        v45 = v6[19];
        if (!v12)
        {
          v46 = (re *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v45 + 2760, i);
          if (v46)
          {
            v47 = *(const re::ecs2::ComponentTypeBase **)v46;
            if (*(_QWORD *)v46)
            {
              v48 = (_QWORD *)re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)v95 + 32), v47);
              if (!v48)
              {
                (*(void (**)(_BYTE *__return_ptr, const re::ecs2::ComponentTypeBase *))(*(_QWORD *)v47 + 32))(buf, v47);
                v48 = *(_QWORD **)buf;
                v49 = RESyncServiceCreateIncomingSyncable();
                MEMORY[0x227692B84](v49, *(_QWORD *)(v17 + 32));
                v92 = v49;
                re::ecs2::NetworkComponent::bindComponentToSyncable(v17, *(uint64_t *)buf, &v92);
                if (v49)
                {
                  RESyncRelease();
                  v92 = 0;
                }
                v91 = *(_QWORD *)buf;
                *(_QWORD *)buf = 0;
                re::ecs2::EntityComponentCollection::add((uint64_t)v95 + 32, &v91, 1);
                if (v91)
                {

                  v91 = 0;
                }
                re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(v6[19] + 264, v6[19]);
                if (*(_QWORD *)buf)

              }
              v50 = re::NetworkSystem::decodeComponent(v6[19], (re::snapshot::Decoder *)v98, v48);
              if ((v50 & 1) != 0)
              {
                v51 = (re::ecs2::Entity *)v48[2];
                if (v51)
                  re::ecs2::Entity::updateAfterComponentDeserialized(v51, (const re::ecs2::Component *)v48);
                *(_QWORD *)buf = v48;
                v52 = v48 + 1;
                re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add(&v112[1], buf);
                if (*(_QWORD *)buf)

                v53 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(_QWORD *))(*v48 + 40))(v48);
                re::ecs2::NetworkComponentInfo::markDirty((re::ecs2::NetworkComponentInfo *)(v17 + 112), v53, 2);
                v22 = 1;
              }
              else
              {
                v55 = *re::ecsNetworkLogObjects((re *)v50);
                if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
                {
                  v56 = *((_QWORD *)v47 + 4);
                  v57 = *((_QWORD *)v95 + 37);
                  v58 = *((_QWORD *)v95 + 35);
                  *(_DWORD *)buf = 136381187;
                  *(_QWORD *)&buf[4] = v56;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v57;
                  v129 = 2081;
                  v130 = v58;
                  _os_log_error_impl(&dword_224FE9000, v55, OS_LOG_TYPE_ERROR, "[NetworkComponent] failed to decode component %{private}s on entity (id = %llu, name = %{private}s", buf, 0x20u);
                }
              }
              goto LABEL_86;
            }
          }
          v54 = *re::ecsNetworkLogObjects(v46);
          if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            *(_QWORD *)&buf[4] = v125;
            _os_log_impl(&dword_224FE9000, v54, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] Unknown component type %llx. Skipping...", buf, 0xCu);
          }
          v45 = v6[19];
        }
        re::NetworkSystem::decodeComponent(v45, (re::snapshot::Decoder *)v98, 0);
LABEL_86:
        v125 = 0;
        re::snapshot::DecoderRaw::operator>><unsigned long long>((uint64_t *)v98, &v125);
      }
      if (v22)
      {
        v59 = v6[19];
        v90 = v17;
        if (v17)
          v60 = (id)(v17 + 8);
        re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::add(v59 + 2632, &v90);
        if (v90)
        {

          v90 = 0;
        }
      }
      do
      {
        while (1)
        {
          v125 = 0;
          re::snapshot::DecoderRaw::operator>><unsigned long long>((uint64_t *)v98, &v125);
          if (!v125 || v12)
            break;
          v61 = (re *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v6[19] + 2760, v125);
          if (v61 && (v62 = *(const re::ecs2::ComponentTypeBase **)v61) != 0)
          {
            v63 = re::ecs2::EntityComponentCollection::get((re::ecs2::Entity *)((char *)v95 + 32), v62);
            if (v63)
            {
              v64 = v63;
              re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(v6[19] + 440, v6[19]);
              v65 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 40))(v64);
              v66 = re::ecs2::NetworkComponentInfo::get((re::ecs2::NetworkComponentInfo *)(v17 + 112), v65);
              re::ecs2::NetworkComponent::unbindComponentFromSyncable(v17, v64, v66);
              re::ecs2::EntityComponentCollection::remove((re::ecs2::Entity *)((char *)v95 + 32), v62);
            }
            else
            {
              v68 = *re::ecsNetworkLogObjects(0);
              if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
              {
                v69 = *((_QWORD *)v95 + 35);
                v70 = *((_QWORD *)v95 + 37);
                v71 = *((_QWORD *)v62 + 4);
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = v69;
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v70;
                v129 = 2080;
                v130 = v71;
                _os_log_impl(&dword_224FE9000, v68, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] entity %s(%llu)doesn't have a %s component to remove.", buf, 0x20u);
              }
            }
          }
          else
          {
            v67 = *re::ecsNetworkLogObjects(v61);
            if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134217984;
              *(_QWORD *)&buf[4] = v125;
              _os_log_impl(&dword_224FE9000, v67, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] unknown component type hash during local sync: %llu", buf, 0xCu);
            }
          }
        }
      }
      while (v125);
      if (v95)

      v96 = 0;
      re::snapshot::DecoderRaw::operator>><unsigned long long>((uint64_t *)v98, &v96);
      v9 = v96;
      if (!v96)
        goto LABEL_115;
    }
    if (v21 == *(_QWORD *)(v37 + 296))
      goto LABEL_65;
LABEL_58:
    v125 = *((_QWORD *)v95 + 37);
    v38 = v125;
    *(_QWORD *)buf = v95;
    v39 = (char *)v95 + 8;
    *(_QWORD *)&buf[8] = v21;
    v40 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (v38 ^ (v38 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v38 ^ (v38 >> 30))) >> 27));
    v41 = v40 ^ (v40 >> 31);
    if ((_QWORD)v116)
    {
      v42 = v41 % DWORD2(v117);
      v43 = *(unsigned int *)(*((_QWORD *)&v116 + 1) + 4 * v42);
      if ((_DWORD)v43 != 0x7FFFFFFF)
      {
        if (*(_QWORD *)(v117 + 40 * v43 + 16) == v38)
        {
LABEL_64:

          goto LABEL_65;
        }
        while (1)
        {
          LODWORD(v43) = *(_DWORD *)(v117 + 40 * v43 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v43 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v117 + 40 * v43 + 16) == v38)
          {
            if (!v36)
              goto LABEL_65;
            goto LABEL_64;
          }
        }
      }
    }
    else
    {
      LODWORD(v42) = 0;
    }
    re::HashTable<unsigned long long,re::Pair<re::SharedPtr<re::ecs2::Entity>,unsigned long long,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove((uint64_t)&v116, v42, v41, &v125, buf);
    ++HIDWORD(v119);
    v36 = *(re::ecs2::Entity **)buf;
    if (!*(_QWORD *)buf)
      goto LABEL_65;
    goto LABEL_64;
  }
LABEL_115:
  re::ecs2::NetworkReceiveSystem::processCreatedEntities((uint64_t)v6, (uint64_t)v106);
  re::ecs2::NetworkReceiveSystem::processParentChanges((uint64_t)v6, (uint64_t)v106);
  re::ecs2::NetworkReceiveSystem::processEvents((uint64_t)v6, (uint64_t)v106);
  *(_QWORD *)buf = 0;
  re::snapshot::DecoderRaw::operator>><unsigned long long>((uint64_t *)v98, buf);
  for (j = *(_QWORD *)buf; *(_QWORD *)buf; j = *(_QWORD *)buf)
  {
    re::ecs2::NetworkReceiveSystem::findEntity((re::ecs2::NetworkReceiveSystem *)&v125, v6[5], j);
    v74 = v125;
    if (v125)
    {
      v75 = *(_QWORD *)(v125 + 200);
      if (v75)
      {
        if ((*(_BYTE *)(v75 + 176) & 1) != 0)
          v76 = (_QWORD *)(v75 + 184);
        else
          v76 = *(_QWORD **)(v75 + 192);
        v77 = *(_QWORD *)(v75 + 168);
        if (v77)
        {
          v78 = 8 * v77;
          do
          {
            if (*v76)
              RESyncableSetUserData();
            ++v76;
            v78 -= 8;
          }
          while (v78);
        }
        re::ecs2::NetworkComponentInfo::clearAll(v75 + 112);
        RESyncableSetUserData();
      }
      re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(v6[19] + 176, v6[19]);
      if ((*(_BYTE *)(v74 + 288) & 0x80) != 0)
      {
        v79 = v74;
        do
          v79 = *(_QWORD *)(v79 + 24);
        while (v79);
        re::Event<re::NetworkSystem,re::ecs2::Scene *>::raise(v6[19] + 1144, v6[19]);
      }
      if (v87)
        re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::remove(v88, (uint64_t *)buf);
      re::ecs2::Entity::removeFromSceneOrParent((re::ecs2::Entity *)v74);
      if (kdebug_is_enabled())
      {
        re::packCharArrayToUInt64ForAriadne(*(re **)(v74 + 280), 0);
        kdebug_trace();
      }

    }
    else if (kdebug_is_enabled())
    {
      re::packCharArrayToUInt64ForAriadne((re *)"<none>", 0);
      kdebug_trace();
    }
    *(_QWORD *)buf = 0;
    re::snapshot::DecoderRaw::operator>><unsigned long long>((uint64_t *)v98, buf);
  }
  v80 = re::internal::enableSignposts(0, 0);
  if ((_DWORD)v80)
    v80 = kdebug_trace();
  isStatisticCollectionEnabled = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v80);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    isStatisticCollectionEnabled = re::profilerThreadContext((re *)isStatisticCollectionEnabled);
    v82 = *(_QWORD *)(isStatisticCollectionEnabled + 152);
    if (v82)
    {
      *(_QWORD *)(v82 + 3072) = 0;
      ++*(_QWORD *)(v82 + 3096);
      *(_BYTE *)(isStatisticCollectionEnabled + 184) = 0;
    }
  }
  v83 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)isStatisticCollectionEnabled);
  if ((_DWORD)v83)
  {
    v84 = re::profilerThreadContext(v83);
    v85 = *(_QWORD *)(v84 + 152);
    if (v85)
    {
      *(_QWORD *)(v85 + 2944) = 0;
      ++*(_QWORD *)(v85 + 2968);
      *(_BYTE *)(v84 + 184) = 0;
    }
  }
  re::HashTable<unsigned long long,re::Pair<re::SharedPtr<re::ecs2::Entity>,unsigned long long,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)&v116);
  re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::deinit((uint64_t *)&v114[8]);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)&v112[1]);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v110);
  re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::deinit((uint64_t *)&v108[8]);
  re::DynamicArray<re::SharedPtr<re::ecs2::System>>::deinit((uint64_t)v106);
  re::StringID::destroyString((re::StringID *)&v123);
  return 1;
}

uint64_t *re::snapshot::DecoderRaw::operator>><unsigned long long>(uint64_t *result, _QWORD *a2)
{
  _QWORD *v2;
  unint64_t v3;

  v2 = (_QWORD *)result[2];
  v3 = result[3] - (_QWORD)v2;
  if (v3 <= 7)
    return re::snapshot::Decoder::error((const char **)result, "overrun: attempted to read %zu bytes, only %zu remaining", 8uLL, v3);
  *a2 = *v2;
  result[2] += 8;
  return result;
}

void re::ecs2::NetworkReceiveSystem::findEntity(re::ecs2::NetworkReceiveSystem *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = 0;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6)
  {
LABEL_14:
    *(_QWORD *)this = 0;
    goto LABEL_17;
  }
  v7 = *(uint64_t **)(v5 + 40);
  v8 = 8 * v6;
  while (1)
  {
    v9 = *v7;
    if (*v7)
      v10 = (id)(v9 + 8);
    v14 = a3;
    v11 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v9 + 152, &v14);
    if (v11)
      v12 = *(_QWORD *)(v11 + 8);
    else
      v12 = *(_QWORD *)(*(_QWORD *)(v9 + 104) + 296) == v14 ? *(_QWORD *)(v9 + 104) : 0;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset(&v13, v12);
    if (v13)
      break;
    if (v9)

    ++v7;
    v8 -= 8;
    if (!v8)
      goto LABEL_14;
  }
  *(_QWORD *)this = v13;
  v13 = 0;
  if (v9)
  {

LABEL_17:
    if (v13)

  }
}

uint64_t re::ecs2::NetworkComponent::bindEntityTo(re *a1, uint64_t a2)
{
  uint64_t *v3;
  id *v4;
  void *v5;

  v3 = re::globalAllocators(a1);
  v4 = (id *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3[2] + 32))(v3[2], 8, 8);
  if (a2)
    v5 = (void *)(a2 + 8);
  else
    v5 = 0;
  objc_initWeak(v4, v5);
  return RESyncableSetUserData();
}

_anonymous_namespace_ *re::DynamicOverflowArray<unsigned long long,2ul>::add(_anonymous_namespace_ *result, _QWORD *a2)
{
  _anonymous_namespace_ *v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;

  v3 = result;
  if (!*(_QWORD *)result)
  {
    v10 = *((_QWORD *)v3 + 1) + 1;
    result = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v3, v10);
    v11 = *((_DWORD *)v3 + 4) + 2;
    *((_DWORD *)v3 + 4) = v11;
    if ((v11 & 1) == 0)
      goto LABEL_12;
LABEL_18:
    v12 = (_QWORD *)((char *)v3 + 24);
    goto LABEL_19;
  }
  v4 = *((_QWORD *)result + 1);
  v5 = *((_DWORD *)result + 4);
  if ((v5 & 1) == 0)
  {
    v6 = *((_QWORD *)result + 3);
    v8 = v4 >= v6;
    v7 = v4 + 1;
    v8 = !v8 || v6 >= v7;
    if (!v8)
    {
      v9 = 2 * v6;
      goto LABEL_14;
    }
    goto LABEL_11;
  }
  v7 = v4 + 1;
  if (v7 < 3)
  {
LABEL_11:
    if ((v5 & 1) == 0)
      goto LABEL_12;
    goto LABEL_18;
  }
  v9 = 4;
LABEL_14:
  if (v9 <= v7)
    v13 = v7;
  else
    v13 = v9;
  result = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(result, v13);
  if ((*((_DWORD *)v3 + 4) & 1) != 0)
    goto LABEL_18;
LABEL_12:
  v12 = (_QWORD *)*((_QWORD *)v3 + 4);
LABEL_19:
  v14 = *((_QWORD *)v3 + 1);
  v12[v14] = *a2;
  *((_QWORD *)v3 + 1) = v14 + 1;
  *((_DWORD *)v3 + 4) += 2;
  return result;
}

void re::ecs2::NetworkComponent::resolveViews(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;

  if (a2 || (v4 = *(_QWORD *)(a1 + 56)) == 0)
  {
    if (re::ecs2::NetworkComponent::resolveSelfView(a1, a2))
      re::ecs2::NetworkComponent::resolveChildEntityViews(a1, a2);
  }
  else
  {
    v6 = a1;
    v5 = (id)(a1 + 8);
    re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::add(v4 + 2712, &v6);
    if (v6)

  }
}

uint64_t re::ecs2::NetworkComponent::bindComponentToSyncable(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int16 *v9;
  int16x8_t *v10;
  int16x8_t v11;
  int v12;
  uint16x8_t v13;
  unint64_t v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned __int16 v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  re *v42;
  uint64_t *v43;
  id *v44;
  uint64_t v46;
  uint8_t buf[16];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  if (*a3)
    RESyncRetain();
  v6 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v7 = v6[8];
  v8 = *(unsigned __int16 *)(a1 + 114);
  if (!*(_WORD *)(a1 + 114))
    goto LABEL_14;
  v9 = v6;
  v10 = *(int16x8_t **)(a1 + 120);
  v11 = vdupq_n_s16(v7);
  v12 = 1;
  while (1)
  {
    v13 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v11, *v10), (int8x16_t)xmmword_2260F1E80);
    v13.i16[0] = vmaxvq_u16(v13);
    if (v13.i32[0])
      break;
    v12 -= 8;
    ++v10;
    if (!--v8)
      goto LABEL_14;
  }
  v14 = v13.u16[0] - v12;
  if ((int)v14 >= *(unsigned __int16 *)(a1 + 112))
  {
LABEL_14:
    v18 = re::ecs2::PackedTypeIDs::ensureCapacity((unsigned __int16 *)(a1 + 112), *(unsigned __int16 *)(a1 + 112) + 1);
    v19 = *(_QWORD *)(a1 + 160);
    *(_WORD *)(*(_QWORD *)(a1 + 120) + 2 * *(unsigned __int16 *)(a1 + 112)) = v7;
    v20 = *(_WORD *)(a1 + 112) + 1;
    *(_WORD *)(a1 + 112) = v20;
    *(_WORD *)(a1 + 114) = (v20 + 7) >> 3;
    if (v19)
    {
      v21 = *(_QWORD *)(a1 + 168);
      v22 = *(_DWORD *)(a1 + 176);
      if ((v22 & 1) != 0)
      {
        if (v21 - 16 < 0xFFFFFFFFFFFFFFEFLL)
        {
          v24 = v21 + 1;
          v25 = 32;
          goto LABEL_22;
        }
      }
      else
      {
        v23 = *(_QWORD *)(a1 + 184);
        if (v21 >= v23)
        {
          v24 = v21 + 1;
          if (v23 < v24)
          {
            v25 = 2 * v23;
LABEL_22:
            if (v25 <= v24)
              v27 = v24;
            else
              v27 = v25;
            re::DynamicOverflowArray<RESyncableRefRetainer,16ul>::setCapacity((uint64_t *)(a1 + 160), v27);
            v22 = *(_DWORD *)(a1 + 176);
          }
        }
      }
    }
    else
    {
      v26 = *(_QWORD *)(a1 + 168) + 1;
      re::DynamicOverflowArray<RESyncableRefRetainer,16ul>::setCapacity((uint64_t *)(a1 + 160), v26);
      v22 = *(_DWORD *)(a1 + 176) + 2;
      *(_DWORD *)(a1 + 176) = v22;
    }
    if ((v22 & 1) != 0)
      v28 = a1 + 184;
    else
      v28 = *(_QWORD *)(a1 + 192);
    v29 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(v28 + 8 * v29) = v5;
    *(_QWORD *)(a1 + 168) = v29 + 1;
    *(_DWORD *)(a1 + 176) += 2;
    v30 = *(unsigned __int16 *)(a1 + 112);
    v31 = *(_QWORD *)(a1 + 352);
    if ((v30 & 0x3F) != 0)
      v32 = (v30 >> 6) + 1;
    else
      v32 = v30 >> 6;
    *(_QWORD *)(a1 + 352) = v30;
    *(_QWORD *)buf = 0;
    re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 312), v32, buf);
    if (v30 && v31 > v30)
    {
      v33 = 63;
      v34 = *(_QWORD *)(a1 + 352) & 0x3FLL;
      if (v34 && v34 != 63)
        v33 = ~(-1 << v34);
      if ((*(_BYTE *)(a1 + 328) & 1) != 0)
        v35 = a1 + 336;
      else
        v35 = *(_QWORD *)(a1 + 344);
      *(_QWORD *)(v35 + 8 * *(_QWORD *)(a1 + 320) - 8) &= v33;
    }
    v36 = *(unsigned __int16 *)(a1 + 112);
    v37 = *(_QWORD *)(a1 + 400);
    if ((v36 & 0x3F) != 0)
      v38 = (v36 >> 6) + 1;
    else
      v38 = v36 >> 6;
    *(_QWORD *)(a1 + 400) = v36;
    *(_QWORD *)buf = 0;
    re::DynamicOverflowArray<unsigned long long,2ul>::resize((_anonymous_namespace_ *)(a1 + 360), v38, buf);
    if (v36 && v37 > v36)
    {
      v39 = 63;
      v40 = *(_QWORD *)(a1 + 400) & 0x3FLL;
      if (v40 && v40 != 63)
        v39 = ~(-1 << v40);
      if ((*(_BYTE *)(a1 + 376) & 1) != 0)
        v41 = a1 + 384;
      else
        v41 = *(_QWORD *)(a1 + 392);
      *(_QWORD *)(v41 + 8 * *(_QWORD *)(a1 + 368) - 8) &= v39;
    }
    goto LABEL_53;
  }
  v15 = *re::ecsNetworkLogObjects((re *)v6);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *((_QWORD *)v9 + 4);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = v16;
    _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] component of type %s is already in component info table.  Re-binding?", buf, 0xCu);
  }
  if (*(_QWORD *)(a1 + 168) <= v14)
  {
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    *(_OWORD *)buf = 0u;
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*(_BYTE *)(a1 + 176) & 1) != 0)
    v17 = a1 + 184;
  else
    v17 = *(_QWORD *)(a1 + 192);
  v46 = *(_QWORD *)(v17 + 8 * v14);
  *(_QWORD *)(v17 + 8 * v14) = v5;
  if (v46)
    RESyncRelease();
LABEL_53:
  *(_WORD *)buf = *(_WORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) + 16);
  v42 = (re *)re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::remove(a1 + 512, (unsigned __int16 *)buf);
  v43 = re::globalAllocators(v42);
  v44 = (id *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v43[2] + 32))(v43[2], 8, 8);
  objc_initWeak(v44, (id)(a2 + 8));
  return RESyncableSetUserData();
}

void re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(uint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v5;

  v3 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v3 + 1;
  if (*(_QWORD *)(a1 + 16))
  {
    v5 = 0;
    do
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32 * v5 + 24))(a2) == 1)
        re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((_QWORD *)a1, v5);
      else
        ++v5;
    }
    while (v5 < *(_QWORD *)(a1 + 16));
    v3 = *(_DWORD *)(a1 + 80) - 1;
  }
  *(_DWORD *)(a1 + 80) = v3;
  if (!v3)
    re::Event<re::ecs2::SceneComponentCollection<re::ecs2::AnchorComponent>,re::Slice<re::ecs2::AnchorComponent*>>::doDeferredActions((_anonymous_namespace_ *)a1);
}

void re::ecs2::NetworkComponent::unbindComponentFromSyncable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const re::ecs2::ComponentTypeBase *v5;

  if (a3)
    RESyncableSetUserData();
  v5 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  re::ecs2::NetworkComponentInfo::remove((re::ecs2::NetworkComponentInfo *)(a1 + 112), v5);
}

uint64_t re::ecs2::NetworkComponentInfo::clearAll(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v1 = this;
  if (*(_WORD *)(this + 2))
  {
    v2 = 0;
    v3 = 16 * *(unsigned __int16 *)(this + 2);
    *(_QWORD *)&v4 = -1;
    *((_QWORD *)&v4 + 1) = -1;
    do
    {
      *(_OWORD *)(*(_QWORD *)(this + 8) + v2) = v4;
      v2 += 16;
    }
    while (v3 != v2);
  }
  *(_DWORD *)this = 0;
  v5 = *(_QWORD *)(this + 56);
  *(_QWORD *)(this + 56) = 0;
  v6 = *(_DWORD *)(this + 64);
  if ((v6 & 1) != 0)
  {
    v7 = (uint64_t *)(this + 72);
    if (!v5)
      goto LABEL_13;
  }
  else
  {
    v7 = *(uint64_t **)(this + 80);
    if (!v5)
      goto LABEL_13;
  }
  v8 = 8 * v5;
  do
  {
    this = *v7;
    if (*v7)
    {
      this = RESyncRelease();
      *v7 = 0;
    }
    ++v7;
    v8 -= 8;
  }
  while (v8);
  v6 = *(_DWORD *)(v1 + 64);
LABEL_13:
  *(_DWORD *)(v1 + 64) = v6 + 2;
  v9 = *(_DWORD *)(v1 + 216);
  if ((v9 & 1) != 0)
    v10 = (_QWORD *)(v1 + 224);
  else
    v10 = *(_QWORD **)(v1 + 232);
  v11 = *(_QWORD *)(v1 + 208);
  while (1)
  {
    v12 = v1 + 224;
    if ((v9 & 1) == 0)
      v12 = *(_QWORD *)(v1 + 232);
    if (v10 == (_QWORD *)(v12 + 8 * v11))
      break;
    *v10++ = 0;
    v9 = *(_DWORD *)(v1 + 216);
  }
  v13 = *(_DWORD *)(v1 + 264);
  if ((v13 & 1) != 0)
    v14 = (_QWORD *)(v1 + 272);
  else
    v14 = *(_QWORD **)(v1 + 280);
  v15 = *(_QWORD *)(v1 + 256);
  while (1)
  {
    v16 = v1 + 272;
    if ((v13 & 1) == 0)
      v16 = *(_QWORD *)(v1 + 280);
    if (v14 == (_QWORD *)(v16 + 8 * v15))
      break;
    *v14++ = 0;
    v13 = *(_DWORD *)(v1 + 264);
  }
  return this;
}

void re::Event<re::NetworkSystem,re::ecs2::Scene *>::raise(uint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _OWORD v13[2];
  uint64_t v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  _OWORD v23[5];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v3 + 1;
  if (*(_QWORD *)(a1 + 16))
  {
    v5 = 0;
    do
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32 * v5 + 24))(a2) == 1)
        re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((_QWORD *)a1, v5);
      else
        ++v5;
    }
    while (v5 < *(_QWORD *)(a1 + 16));
    v3 = *(_DWORD *)(a1 + 80) - 1;
  }
  *(_DWORD *)(a1 + 80) = v3;
  if (!v3)
  {
    v6 = *(_QWORD *)(a1 + 56);
    if (v6)
    {
      v7 = 0;
      for (i = 0; i != v6; ++i)
      {
        v9 = *(_QWORD *)(a1 + 56);
        if (v9 <= i)
        {
          memset(v23, 0, sizeof(v23));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v15 = 136315906;
          v16 = "operator[]";
          v17 = 1024;
          v18 = 789;
          v19 = 2048;
          v20 = i;
          v21 = 2048;
          v22 = v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v10 = *(_QWORD *)(a1 + 72) + v7;
        v11 = *(_QWORD *)(v10 + 32);
        v12 = *(_OWORD *)(v10 + 16);
        v13[0] = *(_OWORD *)v10;
        v13[1] = v12;
        v14 = v11;
        if (LOBYTE(v13[0]))
        {
          re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::indexOf(a1, (_QWORD *)v13 + 1, (uint64_t)v23);
          if (!LOBYTE(v23[0]))
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)a1, (uint64_t)v13 + 8);
        }
        else
        {
          re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::indexOf(a1, (_QWORD *)v13 + 1, (uint64_t)v23);
          if (LOBYTE(v23[0]))
            re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((_QWORD *)a1, *((unint64_t *)&v23[0] + 1));
        }
        v7 += 40;
      }
    }
  }
}

uint64_t ___ZNK2re4ecs220NetworkReceiveSystem13processCommitEPK12RESyncCommitRNS0_21NetworkReceiveContextE_block_invoke()
{
  uint64_t Syncable;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  if (RESyncReadContextIsDestroyed())
  {
    Syncable = RESyncReadContextGetSyncable();
    re::ecs2::NetworkComponent::getEntityBoundTo(Syncable, &v8);
    v1 = v8;
    if (v8)
    {
      v2 = *(_QWORD *)(v8 + 200);
      if (v2)
      {
        v3 = v2 + 112;
        if ((*(_BYTE *)(v2 + 176) & 1) != 0)
          v4 = (_QWORD *)(v2 + 184);
        else
          v4 = *(_QWORD **)(v2 + 192);
        v5 = *(_QWORD *)(v2 + 168);
        if (v5)
        {
          v6 = 8 * v5;
          do
          {
            if (*v4)
              RESyncableSetUserData();
            ++v4;
            v6 -= 8;
          }
          while (v6);
        }
        re::ecs2::NetworkComponentInfo::clearAll(v3);
      }
      RESyncableSetUserData();

    }
    else
    {
      RESyncableSetUserData();
    }
  }
  return 1;
}

uint64_t ___ZNK2re4ecs220NetworkReceiveSystem25processComponentSnapshotsEPK12RESyncCommitRNS0_21NetworkReceiveContextE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t Syncable;
  uint64_t v4;
  re::ecs2::Component *v5;
  uint64_t v6;
  uint64_t IsDataChanged;
  uint64_t SyncObjectContextEntry;
  int v9;
  uint64_t v10;
  unint64_t TypeId;
  re *v12;
  const re::ecs2::ComponentTypeBase *v13;
  uint64_t Parent;
  re *EntityBoundTo;
  re::ecs2::EntityComponentCollection *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  int IsDestroyed;
  uint64_t v25;
  uint64_t v26;
  re *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  re *isStatisticCollectionEnabled;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  char *v44;
  re *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  re::ecs2::Entity *v49;
  NSObject *v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t Guid;
  uint64_t v55;
  uint64_t DebugName;
  id v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _BYTE buf[24];
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  Syncable = RESyncReadContextGetSyncable();
  if (RESyncReadContextIsNew())
  {
    re::ecs2::NetworkComponent::getComponentBoundTo((uint64_t)buf, Syncable);
    v4 = *(_QWORD *)buf;
    if (*(_QWORD *)buf)
    {
LABEL_3:

      goto LABEL_4;
    }
    if (RESyncableGetTypeId() && (RESyncableIsOpaque() & 1) == 0 && (RESyncableIsDestroyed() & 1) == 0)
    {
      v10 = *(_QWORD *)(v2 + 152);
      TypeId = RESyncableGetTypeId();
      v12 = (re *)re::HashTable<re::ecs2::Entity const*,re::SharedPtr<re::ecs2::CAMeshCodirectionalGroup>,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v10 + 2760, TypeId);
      if (v12 && (v13 = *(const re::ecs2::ComponentTypeBase **)v12) != 0)
      {
        Parent = RESyncableGetParent();
        EntityBoundTo = (re *)re::ecs2::NetworkComponent::getEntityBoundTo(Parent, (uint64_t *)&v60);
        if (v60)
        {
          v16 = (re::ecs2::EntityComponentCollection *)(v60 + 4);
          v17 = v60[25];
          if (v17)
            v18 = (id)(v17 + 8);
          v19 = v17;
          if (v13 != (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType)
          {
            re::ecs2::EntityComponentCollection::remove(v16, v13);
            (*(void (**)(_BYTE *__return_ptr, const re::ecs2::ComponentTypeBase *))(*(_QWORD *)v13 + 32))(buf, v13);
            v19 = *(_QWORD *)buf;
            *(_QWORD *)buf = v17;
            if (v17)

          }
          *(_QWORD *)buf = Syncable;
          if (Syncable)
          {
            RESyncRetain();
            re::ecs2::NetworkComponent::bindComponentToSyncable(v17, v19, (uint64_t *)buf);
            RESyncRelease();
            *(_QWORD *)buf = 0;
          }
          else
          {
            re::ecs2::NetworkComponent::bindComponentToSyncable(v17, v19, (uint64_t *)buf);
          }
          if (v17 != v19)
          {
            v59 = v19;
            if (v19)
              v57 = (id)(v19 + 8);
            re::ecs2::EntityComponentCollection::add((uint64_t)v16, &v59, 1);
            if (v59)
            {

              v59 = 0;
            }
          }
          re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(*(_QWORD *)(v2 + 152) + 264, *(_QWORD *)(v2 + 152));
          if (v19)

        }
        else
        {
          v53 = *re::ecsNetworkLogObjects(EntityBoundTo);
          if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
          {
            Guid = RESyncableGetGuid();
            v55 = RESyncableGetTypeId();
            RESyncableGetTypeInfo();
            DebugName = RESyncSyncableTypeInfoGetDebugName();
            *(_DWORD *)buf = 134218755;
            *(_QWORD *)&buf[4] = Guid;
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v55;
            *(_WORD *)&buf[22] = 2081;
            v62 = DebugName;
            v63 = 2048;
            v64 = Parent;
            _os_log_error_impl(&dword_224FE9000, v53, OS_LOG_TYPE_ERROR, "[NetworkComponent] Cannot find component's entity (guid=%llu, typeID=%llu, type=%{private}s, entity=%p).", buf, 0x2Au);
          }
        }
        v4 = (uint64_t)v60;
        if (v60)
          goto LABEL_3;
      }
      else
      {
        v51 = *re::ecsNetworkLogObjects(v12);
        if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
        {
          v52 = RESyncableGetTypeId();
          *(_DWORD *)buf = 134217984;
          *(_QWORD *)&buf[4] = v52;
          _os_log_error_impl(&dword_224FE9000, v51, OS_LOG_TYPE_ERROR, "[NetworkComponent] Unknown component type hash (%llu)", buf, 0xCu);
        }
      }
    }
  }
LABEL_4:
  re::ecs2::NetworkComponent::getComponentBoundTo((uint64_t)&v60, Syncable);
  v5 = (re::ecs2::Component *)v60;
  if (!v60)
    return 1;
  v6 = RESyncableGetParent();
  if (!v6
    || (re::ecs2::NetworkComponent::getEntityBoundTo(v6, (uint64_t *)buf), !*(_QWORD *)buf)
    || ((id)(*(_QWORD *)buf + 8), (RESyncableIsOpaque() & 1) != 0))
  {
LABEL_80:

    return 1;
  }
  IsDataChanged = RESyncReadContextIsDataChanged();
  if (!(_DWORD)IsDataChanged)
    goto LABEL_27;
  IsDataChanged = RESyncReadContextGetStateSize();
  if (!IsDataChanged)
    goto LABEL_27;
  SyncObjectContextEntry = RESyncGetSyncObjectContextEntry();
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[16] = 0;
  v62 = 0;
  *(_QWORD *)(SyncObjectContextEntry + 464) = buf;
  IsDataChanged = RESyncableReadState();
  *(_QWORD *)(SyncObjectContextEntry + 464) = 0;
  if ((IsDataChanged & 1) == 0)
  {
    v20 = *re::ecsNetworkLogObjects((re *)IsDataChanged);
    IsDataChanged = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
    if ((_DWORD)IsDataChanged)
    {
      RESyncableGetTypeInfo();
      v58 = RESyncSyncableTypeInfoGetDebugName();
      *(_DWORD *)buf = 136380675;
      *(_QWORD *)&buf[4] = v58;
      _os_log_error_impl(&dword_224FE9000, v20, OS_LOG_TYPE_ERROR, "[NetworkComponent] Failed to deserialize component of type '%{private}s'. Ignoring state update.", buf, 0xCu);
    }
LABEL_27:
    v9 = 0;
    goto LABEL_28;
  }
  v9 = 1;
LABEL_28:
  if (!*((_QWORD *)v5 + 2))
  {
    v21 = *re::ecsNetworkLogObjects((re *)IsDataChanged);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = RESyncableGetGuid();
      v23 = RESyncableGetGuid();
      IsDestroyed = RESyncReadContextIsDestroyed();
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = v22;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v23;
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v62) = IsDestroyed;
      _os_log_impl(&dword_224FE9000, v21, OS_LOG_TYPE_DEFAULT, "Received component: {id: %llu, parent: %llu: isDestroyed: %d} with no entity", buf, 0x1Cu);
    }
  }
  if ((_UNKNOWN *)(*(uint64_t (**)(re::ecs2::Component *))(*(_QWORD *)v5 + 40))(v5) != re::ecs2::ComponentImpl<re::ecs2::LatencyEventsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType)
    goto LABEL_32;
  v25 = re::internal::enableSignposts(0, 0);
  if ((_DWORD)v25)
    v25 = kdebug_trace();
  v26 = *((_QWORD *)v5 + 5);
  if (v26 == 0x800000000)
  {
    isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v25);
    if (!(_DWORD)isStatisticCollectionEnabled)
      goto LABEL_32;
    v28 = re::profilerThreadContext(isStatisticCollectionEnabled);
    v35 = *(_QWORD **)(v28 + 152);
    if (!v35)
      goto LABEL_32;
    v36 = *((_QWORD *)v5 + 4);
    v37 = v35[432];
    if (v37 >= v36)
      v37 = *((_QWORD *)v5 + 4);
    v35[432] = v37;
    v38 = v35[433];
    if (v38 <= v36)
      v38 = v36;
    v35[433] = v38;
    v35[434] += v36;
    v33 = v35 + 435;
  }
  else
  {
    if (v26 != 1)
      goto LABEL_32;
    v27 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v25);
    if (!(_DWORD)v27)
      goto LABEL_32;
    v28 = re::profilerThreadContext(v27);
    v29 = *(_QWORD **)(v28 + 152);
    if (!v29)
      goto LABEL_32;
    v30 = *((_QWORD *)v5 + 4);
    v31 = v29[424];
    if (v31 >= v30)
      v31 = *((_QWORD *)v5 + 4);
    v29[424] = v31;
    v32 = v29[425];
    if (v32 <= v30)
      v32 = v30;
    v29[425] = v32;
    v29[426] += v30;
    v33 = v29 + 427;
  }
  ++*v33;
  *(_BYTE *)(v28 + 184) = 0;
LABEL_32:
  if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
  {
    v39 = (*(uint64_t (**)(re::ecs2::Component *))(*(_QWORD *)v5 + 40))(v5);
    re::packCharArrayToUInt64ForAriadne(*(re **)(v39 + 32), 0);
    RESyncReadContextGetStateSize();
    kdebug_trace();
  }
  if (re::internal::enableHighFrequencyNetworkTracing(0, 0))
  {
    v40 = *((_QWORD *)v5 + 2);
    v41 = *(_QWORD *)(v40 + 200);
    if (v41)
    {
      v42 = re::ecs2::NetworkComponent::owningProcessType(*(re::ecs2::NetworkComponent **)(v40 + 200));
      if (v42)
      {
        v43 = v42;
        v44 = *(_BYTE *)(v41 + 560) ? "Remote" : "Local";
        v45 = (re *)(*(_BYTE *)(v41 + 560) == 1 ? "Shared" : v44);
        re::packCharArrayToUInt64ForAriadne(v45, 0);
        if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
        {
          v46 = (*(uint64_t (**)(re::ecs2::Component *))(*(_QWORD *)v5 + 40))(v5);
          re::packCharArrayToUInt64ForAriadne(*(re **)(v46 + 32), 0);
          if (v43 == 1)
            v47 = "Local";
          else
            v47 = "Remote";
          re::packCharArrayToUInt64ForAriadne((re *)v47, 0);
          kdebug_trace();
        }
      }
    }
  }
  ++*(_QWORD *)(*(_QWORD *)(a1 + 40) + 272);
  if (RESyncReadContextIsDestroyed())
  {
    if (*((_QWORD *)v5 + 2))
    {
      re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(*(_QWORD *)(v2 + 152) + 440, *(_QWORD *)(v2 + 152));
      v48 = *(_QWORD *)(*((_QWORD *)v5 + 2) + 200);
      if (v48)
        re::ecs2::NetworkComponent::unbindComponentFromSyncable(v48, (uint64_t)v5, Syncable);
      else
        RESyncableSetUserData();
      re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(*((_QWORD *)v5 + 2) + 32), v5);
    }
    goto LABEL_80;
  }
  if (!v9)
    goto LABEL_80;
  v49 = (re::ecs2::Entity *)*((_QWORD *)v5 + 2);
  if (v49)
    re::ecs2::Entity::updateAfterComponentDeserialized(v49, v5);
  re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add((_QWORD *)(*(_QWORD *)(a1 + 40) + 128), (uint64_t *)&v60);
  v5 = (re::ecs2::Component *)v60;
  if (v60)
    goto LABEL_80;
  return 1;
}

uint64_t re::ecs2::NetworkComponent::getComponentBoundTo(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)result;
  if (a2)
  {
    result = RESyncableGetUserData();
    v3 = 0;
    if (result)
    {
      if ((result & 1) == 0)
      {
        result = (uint64_t)objc_loadWeakRetained((id *)result);
        v3 = result - 8;
        if (!result)
          v3 = 0;
      }
    }
  }
  else
  {
    v3 = 0;
  }
  *v2 = v3;
  return result;
}

uint64_t re::ecs2::NetworkComponent::owningProcessType(re::ecs2::NetworkComponent *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = *((_QWORD *)this + 2);
  if (v1)
  {
    do
    {
      v3 = v1;
      v1 = *(_QWORD *)(v1 + 24);
    }
    while (v1);
    v1 = *(_QWORD *)(v3 + 16);
    if (v1)
    {
      v4 = *(_QWORD *)(v1 + 56);
      if (v4
        && (v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4),
            re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v5))
        && *((_QWORD *)this + 4)
        && RESyncableGetOwnerPeerID())
      {
        v6 = 0;
        do
        {
          if (v6 >= RESyncServiceGetSessionCount())
          {
            LOBYTE(v1) = 3;
            return v1;
          }
          RESyncServiceGetSession();
          RESyncSessionGetNetSession();
          ++v6;
        }
        while (!RESyncNetSessionGetParticipantWithPeerID());
        if (RESyncNetSessionGetIsLocal())
          LOBYTE(v1) = 1;
        else
          LOBYTE(v1) = 2;
      }
      else
      {
        LOBYTE(v1) = 0;
      }
    }
  }
  return v1;
}

void re::ecs2::NetworkReceiveSystem::setEntityParent(re::ecs2::NetworkReceiveSystem *this, re::ecs2::Entity *a2, re::ecs2::Entity *a3)
{
  uint64_t v5;

  if (re::NetworkSystemFeatureFlags::suppressNetworkReparentMarkDirty(this)
    && (v5 = *((_QWORD *)this + 25)) != 0)
  {
    *(_BYTE *)(v5 + 618) = 1;
    *(_QWORD *)(v5 + 624) = a2;
    re::ecs2::Entity::setParentInternal(this, a2, 0xFFFFFFFFFFFFFFFFLL);
    *(_BYTE *)(v5 + 618) = 0;
    *(_QWORD *)(v5 + 624) = 0;
  }
  else
  {
    re::ecs2::Entity::setParentInternal(this, a2, 0xFFFFFFFFFFFFFFFFLL);
  }
}

void re::Event<re::NetworkSystem,re::ecs2::Entity *,re::TLEInfo *,re::NewUnboundTLEHandlerResult *>::raise(uint64_t a1, uint64_t a2)
{
  int v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _OWORD v13[2];
  uint64_t v14;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  __int16 v19;
  unint64_t v20;
  __int16 v21;
  unint64_t v22;
  _OWORD v23[5];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v3 + 1;
  if (*(_QWORD *)(a1 + 16))
  {
    v5 = 0;
    do
    {
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32 * v5 + 24))(a2) == 1)
        re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((_QWORD *)a1, v5);
      else
        ++v5;
    }
    while (v5 < *(_QWORD *)(a1 + 16));
    v3 = *(_DWORD *)(a1 + 80) - 1;
  }
  *(_DWORD *)(a1 + 80) = v3;
  if (!v3)
  {
    v6 = *(_QWORD *)(a1 + 56);
    if (v6)
    {
      v7 = 0;
      for (i = 0; i != v6; ++i)
      {
        v9 = *(_QWORD *)(a1 + 56);
        if (v9 <= i)
        {
          memset(v23, 0, sizeof(v23));
          os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
          v15 = 136315906;
          v16 = "operator[]";
          v17 = 1024;
          v18 = 789;
          v19 = 2048;
          v20 = i;
          v21 = 2048;
          v22 = v9;
          _os_log_send_and_compose_impl();
          _os_crash_msg();
          __break(1u);
        }
        v10 = *(_QWORD *)(a1 + 72) + v7;
        v11 = *(_QWORD *)(v10 + 32);
        v12 = *(_OWORD *)(v10 + 16);
        v13[0] = *(_OWORD *)v10;
        v13[1] = v12;
        v14 = v11;
        if (LOBYTE(v13[0]))
        {
          re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::indexOf(a1, (_QWORD *)v13 + 1, (uint64_t)v23);
          if (!LOBYTE(v23[0]))
            re::DynamicArray<re::EvaluationRegister>::add((_anonymous_namespace_ *)a1, (uint64_t)v13 + 8);
        }
        else
        {
          re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::indexOf(a1, (_QWORD *)v13 + 1, (uint64_t)v23);
          if (LOBYTE(v23[0]))
            re::DynamicArray<re::Event<re::SimulationTimer,re::SimulationTimerEventArgs const&>::Subscription>::removeStableAt((_QWORD *)a1, *((unint64_t *)&v23[0] + 1));
        }
        v7 += 40;
      }
    }
  }
}

uint64_t ___ZNK2re4ecs220NetworkReceiveSystem22processEntitySnapshotsEPK12RESyncCommitRNS0_21NetworkReceiveContextE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  re *Syncable;
  char IsDestroyed;
  uint64_t IsNew;
  NSObject *v6;
  uint64_t SyncObjectContextEntry;
  re *State;
  re::ecs2::Entity *v9;
  char v10;
  NSObject *v11;
  uint64_t v12;
  re::ecs2::Entity *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t HasOwnership;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  re::ecs2::Entity *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  int v46;
  uint64_t Guid;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  re::ecs2::Entity *v61;
  re::ecs2::Entity *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  id v66;
  int v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  _BOOL4 v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  re::ecs2::Entity *v79;
  char *v80;
  _QWORD *v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *__s1;
  uint64_t v91;
  uint64_t v92;
  __int16 v93;
  re::ecs2::Entity *v94;
  _BYTE buf[24];
  uint64_t v96;
  __int16 v97;
  uint64_t v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 32);
  Syncable = (re *)RESyncReadContextGetSyncable();
  if (RESyncableGetTypeId())
    return 1;
  ++*(_QWORD *)(*(_QWORD *)(a1 + 40) + 264);
  IsDestroyed = RESyncableIsDestroyed();
  re::ecs2::NetworkComponent::getEntityBoundTo((uint64_t)Syncable, (uint64_t *)&v94);
  IsNew = RESyncReadContextIsNew();
  if ((IsNew & 1) == 0 && (IsDestroyed & 1) == 0 && !v94)
  {
    v6 = *re::ecsNetworkLogObjects((re *)IsNew);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      Guid = RESyncableGetGuid();
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)&buf[4] = Guid;
      _os_log_error_impl(&dword_224FE9000, v6, OS_LOG_TYPE_ERROR, "[NetworkComponent] Trying to process with outdated syncable that has already been unbound, guid=%llu", buf, 0xCu);
    }
    if (re::internal::enableSignposts(0, 0))
    {
      RESyncableGetGuid();
      kdebug_trace();
    }
    goto LABEL_72;
  }
  v89 = 0;
  __s1 = (char *)&str_110;
  v91 = 0;
  v92 = 0;
  v93 = 512;
  SyncObjectContextEntry = RESyncGetSyncObjectContextEntry();
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[16] = 0;
  v96 = 0;
  *(_QWORD *)(SyncObjectContextEntry + 464) = buf;
  State = (re *)RESyncableReadState();
  *(_QWORD *)(SyncObjectContextEntry + 464) = 0;
  if (!(_DWORD)State)
  {
    v11 = *re::ecsNetworkLogObjects(State);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v48 = RESyncableGetGuid();
      if (v94)
      {
        v49 = *((_QWORD *)v94 + 37);
        v50 = (const char *)*((_QWORD *)v94 + 35);
      }
      else
      {
        v49 = 0;
        v50 = "N/A";
      }
      *(_DWORD *)buf = 134218499;
      *(_QWORD *)&buf[4] = v48;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v49;
      *(_WORD *)&buf[22] = 2081;
      v96 = (uint64_t)v50;
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "[NetworkComponent] Failed to deserialize entity state. (syncable=%llu, entity=%llu (%{private}s))", buf, 0x20u);
    }
    goto LABEL_17;
  }
  v9 = v94;
  if (v94)
    v10 = 1;
  else
    v10 = IsDestroyed;
  if ((v10 & 1) != 0)
  {
    if (!v94)
      goto LABEL_17;
    goto LABEL_141;
  }
  if (!*(_BYTE *)(a1 + 48))
    goto LABEL_17;
  HasOwnership = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 40) + 104))(*(_QWORD *)(v2 + 40));
  v21 = *(_QWORD *)(HasOwnership + 24);
  if (!v21)
  {
LABEL_76:
    v41 = v94;
    if (v94)
      goto LABEL_169;
    v42 = *(_QWORD *)(v2 + 152);
    v43 = *(unsigned int *)(v42 + 2280);
    if ((_DWORD)v43)
    {
      v44 = 0;
      v45 = (int *)(*(_QWORD *)(v42 + 2264) + 8);
      while (1)
      {
        v46 = *v45;
        v45 += 8;
        if (v46 < 0)
          break;
        if (v43 == ++v44)
        {
          LODWORD(v44) = *(_DWORD *)(v42 + 2280);
          break;
        }
      }
    }
    else
    {
      LODWORD(v44) = 0;
    }
    if ((_DWORD)v43 != (_DWORD)v44)
    {
      v51 = v44;
      v52 = *(_QWORD *)(v42 + 2264);
      while (1)
      {
        v53 = *(_QWORD *)(v52 + 32 * v51 + 16);
        if (*(_QWORD *)(v53 + 296) == v91)
          break;
        if (v43 <= (int)v44 + 1)
          v54 = v44 + 1;
        else
          v54 = v43;
        while (1)
        {
          v51 = (v44 + 1);
          if (v54 - 1 == (_DWORD)v44)
            break;
          LODWORD(v44) = v44 + 1;
          v55 = v51;
          if ((*(_DWORD *)(v52 + 32 * v51 + 8) & 0x80000000) != 0)
            goto LABEL_95;
        }
        v55 = v54;
LABEL_95:
        LODWORD(v44) = v55;
        if ((_DWORD)v43 == v55)
          goto LABEL_117;
      }
      re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)&v94, v53);
      v56 = *((_QWORD *)v94 + 25);
      HasOwnership = re::internal::enableSignposts(0, 0);
      if ((_DWORD)HasOwnership)
      {
        HasOwnership = re::internal::enableHighFrequencyNetworkTracing(0, 0);
        if ((_DWORD)HasOwnership)
        {
          re::packCharArrayToUInt64ForAriadne(*((re **)v94 + 35), 0);
          if (v56 && *(_QWORD *)(v56 + 32))
            RESyncableGetGuid();
          RESyncableGetGuid();
          HasOwnership = kdebug_trace();
        }
      }
      if (v56)
      {
        if ((*(_BYTE *)(v56 + 176) & 1) != 0)
          v57 = (_QWORD *)(v56 + 184);
        else
          v57 = *(_QWORD **)(v56 + 192);
        v58 = *(_QWORD *)(v56 + 168);
        if (v58)
        {
          v59 = 8 * v58;
          do
          {
            if (*v57)
              RESyncableSetUserData();
            ++v57;
            v59 -= 8;
          }
          while (v59);
        }
        HasOwnership = *(_QWORD *)(v56 + 32);
        if (HasOwnership)
        {
          RESyncableSetUserData();
          HasOwnership = *(_QWORD *)(v56 + 32);
          if (HasOwnership)
          {
            HasOwnership = RESyncRelease();
            *(_QWORD *)(v56 + 32) = 0;
          }
        }
      }
    }
LABEL_117:
    v41 = v94;
    if (v94)
    {
LABEL_169:
      while (1)
      {
        v63 = *((_QWORD *)v41 + 7);
        if (!v63)
          break;
        re::ecs2::EntityComponentCollection::removeAt((re::ecs2::Entity *)((char *)v41 + 32), v63 - 1);
        v41 = v94;
      }
      re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::remove(*(_QWORD *)(a1 + 40) + 40, (unint64_t)v41);
    }
    else
    {
      v60 = re::ecs2::EntityFactory::instance((re::ecs2::EntityFactory *)HasOwnership);
      re::ecs2::EntityFactory::make((re::ecs2::EntityFactory *)v60, 4uLL, (re::ecs2::Entity **)buf);
      v62 = v94;
      v61 = *(re::ecs2::Entity **)buf;
      v94 = *(re::ecs2::Entity **)buf;
      if (v62)
      {

        v61 = v94;
      }
      *((_QWORD *)v61 + 37) = v91;
      re::DynamicArray<re::SharedPtr<re::ecs2::Scene>>::add(*(_QWORD **)(a1 + 40), (uint64_t *)&v94);
    }
    (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)re::ecs2::ComponentImpl<re::ecs2::NetworkComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                                                + 32))(buf);
    v64 = *(_QWORD *)buf;
    *(_QWORD *)(*(_QWORD *)buf + 56) = *(_QWORD *)(v2 + 152);
    *(_BYTE *)(v64 + 560) = 2;
    if (Syncable)
      RESyncRetain();
    if (*(re **)(v64 + 32) != Syncable)
      RESyncableRefRetainer::reset((uint64_t *)(v64 + 32), (uint64_t)Syncable);
    if (Syncable)
      RESyncRelease();
    re::ecs2::NetworkComponent::bindEntityTo(Syncable, (uint64_t)v94);
    v65 = (char *)v94 + 32;
    v88 = v64;
    v66 = (id)(v64 + 8);
    re::ecs2::EntityComponentCollection::add((uint64_t)v65, &v88, 1);
    if (v88)
    {

      v88 = 0;
    }
    *(_BYTE *)(v64 + 48) &= ~2u;
    *(_BYTE *)(v64 + 50) &= ~2u;
    v67 = *(_DWORD *)(v64 + 376);
    if ((v67 & 1) != 0)
      v68 = (_QWORD *)(v64 + 384);
    else
      v68 = *(_QWORD **)(v64 + 392);
    v69 = *(_QWORD *)(v64 + 368);
    while (1)
    {
      v70 = v64 + 384;
      if ((v67 & 1) == 0)
        v70 = *(_QWORD *)(v64 + 392);
      if (v68 == (_QWORD *)(v70 + 8 * v69))
        break;
      *v68++ = 0;
      v67 = *(_DWORD *)(v64 + 376);
    }
    re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::clear(v64 + 464);

    v9 = v94;
    if (v94)
    {
LABEL_141:
      if (*((_QWORD *)v9 + 37) != v91)
      {
        v71 = *re::ecsNetworkLogObjects(State);
        v72 = os_log_type_enabled(v71, OS_LOG_TYPE_ERROR);
        v9 = v94;
        if (v72)
        {
          v83 = *((_QWORD *)v94 + 35);
          v84 = *((_QWORD *)v94 + 37);
          v85 = v91;
          v86 = RESyncableGetGuid();
          *(_DWORD *)buf = 136381443;
          *(_QWORD *)&buf[4] = v83;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v84;
          *(_WORD *)&buf[22] = 2048;
          v96 = v85;
          v97 = 2048;
          v98 = v86;
          _os_log_error_impl(&dword_224FE9000, v71, OS_LOG_TYPE_ERROR, "Trying to reassign id on pre-existing entity %{private}s entity.id:%llu, entityState.entityId:%llu, syncable.guidid:%llu", buf, 0x2Au);
          v9 = v94;
        }
      }
      v73 = (_BYTE *)*((_QWORD *)v9 + 25);
      v74 = *((_QWORD *)v9 + 3);
      if (v74 && (v75 = *(_QWORD *)(v74 + 200)) != 0)
      {
        v76 = *(_QWORD *)(v75 + 32);
        if (v76)
          v76 = RESyncableGetGuid();
      }
      else
      {
        v76 = 0;
      }
      if (v76 != v92 && (!v73 || v92 || !v73[617]))
      {
        v77 = *(_QWORD *)(a1 + 40);
        v78 = v77 + 168;
        *(_QWORD *)buf = Syncable;
        if (Syncable)
        {
          RESyncRetain();
          re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::addOrReplace<unsigned long long &>(v78, (uint64_t *)buf, &v92);
          RESyncRelease();
        }
        else
        {
          re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::addOrReplace<unsigned long long &>(v77 + 168, (uint64_t *)buf, &v92);
        }
      }
      v79 = v94;
      if (v93 != ((*((_DWORD *)v94 + 72) >> 3) & 1))
      {
        re::ecs2::Entity::setSelfEnabled(v94, v93 != 0);
        v79 = v94;
      }
      if ((*((_QWORD *)v79 + 34) ^ v89) > 1 || (v80 = (char *)*((_QWORD *)v79 + 35), __s1 != v80) && strcmp(__s1, v80))
        re::StringID::operator=((unint64_t *)v79 + 34, (uint64_t *)&v89);
      if (v73)
      {
        if (HIBYTE(v93) != v73[560])
        {
          v73[560] = HIBYTE(v93);
          v81 = (_QWORD *)(*(_QWORD *)(a1 + 40) + 128);
          v82 = v73 + 8;
          *(_QWORD *)buf = v73;
          re::DynamicArray<re::SharedPtr<re::ShareableInternal<re::GeomInstance>>>::add(v81, buf);
          if (*(_QWORD *)buf)

        }
      }
    }
LABEL_17:
    if (!v94)
      goto LABEL_71;
    if (!RESyncReadContextIsDestroyed())
      goto LABEL_69;
    v12 = *(_QWORD *)(a1 + 40);
    v13 = v94;
    v14 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * ((unint64_t)v94 ^ ((unint64_t)v94 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                                              * ((unint64_t)v94 ^ ((unint64_t)v94 >> 30))) >> 27));
    v15 = v14 ^ (v14 >> 31);
    v16 = *(unsigned int *)(v12 + 64);
    if ((_DWORD)v16)
    {
      v17 = v15 % v16;
      v18 = *(unsigned int *)(*(_QWORD *)(v12 + 48) + 4 * (v15 % v16));
      if ((_DWORD)v18 != 0x7FFFFFFF)
      {
        v19 = *(_QWORD *)(v12 + 56);
        if (*(re::ecs2::Entity **)(v19 + 24 * v18 + 16) == v94)
        {
LABEL_69:
          if (kdebug_is_enabled())
          {
            re::packCharArrayToUInt64ForAriadne(*((re **)v94 + 35), 0);
            RESyncReadContextGetStateSize();
            kdebug_trace();
          }
          goto LABEL_71;
        }
        while (1)
        {
          LODWORD(v18) = *(_DWORD *)(v19 + 24 * v18 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v18 == 0x7FFFFFFF)
            break;
          if (*(re::ecs2::Entity **)(v19 + 24 * v18 + 16) == v94)
            goto LABEL_69;
        }
      }
    }
    else
    {
      LODWORD(v17) = 0;
    }
    v33 = *(unsigned int *)(v12 + 76);
    if ((_DWORD)v33 == 0x7FFFFFFF)
    {
      v33 = *(unsigned int *)(v12 + 72);
      v34 = v33;
      if ((_DWORD)v33 == (_DWORD)v16)
      {
        re::HashSetBase<re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::SharedPtr<re::ecs2::CAMeshSortGroup>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::Hash<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,re::EqualTo<re::SharedPtr<re::ecs2::CAMeshSortGroup>>,true,false>::setCapacity(v12 + 40, 2 * *(_DWORD *)(v12 + 68));
        LODWORD(v17) = v15 % *(unsigned int *)(v12 + 64);
        v34 = *(_DWORD *)(v12 + 72);
        v13 = v94;
      }
      *(_DWORD *)(v12 + 72) = v34 + 1;
      v35 = *(_QWORD *)(v12 + 56);
      v36 = *(_DWORD *)(v35 + 24 * v33 + 8);
    }
    else
    {
      v35 = *(_QWORD *)(v12 + 56);
      v36 = *(_DWORD *)(v35 + 24 * v33 + 8);
      *(_DWORD *)(v12 + 76) = v36 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v35 + 24 * v33 + 8) = v36 | 0x80000000;
    v37 = *(_QWORD *)(v12 + 48);
    v38 = v17;
    *(_DWORD *)(*(_QWORD *)(v12 + 56) + 24 * v33 + 8) = *(_DWORD *)(*(_QWORD *)(v12 + 56) + 24 * v33 + 8) & 0x80000000 | *(_DWORD *)(v37 + 4 * v17);
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 24 * v33) = v15;
    *(_QWORD *)(*(_QWORD *)(v12 + 56) + 24 * v33 + 16) = v13;
    if (v13)
    {
      v39 = (char *)v13 + 8;
      v37 = *(_QWORD *)(v12 + 48);
    }
    *(_DWORD *)(v37 + 4 * v38) = v33;
    ++*(_DWORD *)(v12 + 68);
    ++*(_DWORD *)(v12 + 80);
    goto LABEL_69;
  }
  v22 = *(uint64_t **)(HasOwnership + 40);
  v23 = 8 * v21;
  while (1)
  {
    v24 = *v22;
    if (*v22)
      v25 = (id)(v24 + 8);
    *(_QWORD *)buf = v91;
    v26 = re::HashTable<re::ecs2::Entity const*,re::ecs2::RenderPassGroup,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::tryGet(v24 + 152, (uint64_t *)buf);
    if (v26)
      v27 = *(_QWORD *)(v26 + 8);
    else
      v27 = *(_QWORD *)(*(_QWORD *)(v24 + 104) + 296) == *(_QWORD *)buf ? *(_QWORD *)(v24 + 104) : 0;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)&v94, v27);
    if (v94)
    {
      v28 = *((_QWORD *)v94 + 25);
      if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
      {
        re::packCharArrayToUInt64ForAriadne(*((re **)v94 + 35), 0);
        if (v28 && *(_QWORD *)(v28 + 32))
          RESyncableGetGuid();
        RESyncableGetGuid();
        kdebug_trace();
      }
      if (v28 && (HasOwnership = RESyncableHasOwnership(), !(_DWORD)HasOwnership)
        || (HasOwnership = RESyncableHasOwnership(), (HasOwnership & 1) != 0))
      {
        v29 = 4;
        if (!v24)
          goto LABEL_49;
LABEL_48:

        goto LABEL_49;
      }
      v30 = *re::ecsNetworkLogObjects((re *)HasOwnership);
      HasOwnership = os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
      if ((_DWORD)HasOwnership)
      {
        v31 = *((_QWORD *)v94 + 35);
        v87 = *((_QWORD *)v94 + 37);
        if (v28)
        {
          if (*(_QWORD *)(v28 + 32))
            v28 = RESyncableGetGuid();
          else
            v28 = 0;
        }
        v32 = RESyncableGetGuid();
        *(_DWORD *)buf = 134218755;
        *(_QWORD *)&buf[4] = v87;
        *(_WORD *)&buf[12] = 2081;
        *(_QWORD *)&buf[14] = v31;
        *(_WORD *)&buf[22] = 2048;
        v96 = v28;
        v97 = 2048;
        v98 = v32;
        _os_log_error_impl(&dword_224FE9000, v30, OS_LOG_TYPE_ERROR, "[NetworkComponent] Trying to rebind entity (id=%llu name=%{private}s) from owned syncable (%llu) to an unowned syncable (%llu)", buf, 0x2Au);
      }
      v29 = 1;
      if (v24)
        goto LABEL_48;
    }
    else
    {
      v29 = 0;
      if (v24)
        goto LABEL_48;
    }
LABEL_49:
    if (v29)
      break;
    ++v22;
    v23 -= 8;
    if (!v23)
      goto LABEL_76;
  }
  if (v29 == 4)
    goto LABEL_76;
LABEL_71:
  re::StringID::destroyString((re::StringID *)&v89);
LABEL_72:
  if (v94)

  return 1;
}

uint64_t re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::addOrReplace<unsigned long long &>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = *a2;
  v7 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v8 = (0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) ^ ((0x94D049BB133111EBLL * (v7 ^ (v7 >> 27))) >> 31);
  v9 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v9 = v8 % *(unsigned int *)(a1 + 24);
    v10 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * v9);
    if ((_DWORD)v10 != 0x7FFFFFFF)
    {
      v17 = *(_QWORD *)(a1 + 16);
      if (*(_QWORD *)(v17 + 32 * v10 + 16) == result)
      {
LABEL_14:
        *(_QWORD *)(v17 + 32 * v10 + 24) = *a3;
        goto LABEL_15;
      }
      while (1)
      {
        v10 = *(_DWORD *)(v17 + 32 * v10 + 8) & 0x7FFFFFFF;
        if ((_DWORD)v10 == 0x7FFFFFFF)
          break;
        if (*(_QWORD *)(v17 + 32 * v10 + 16) == result)
          goto LABEL_14;
      }
    }
  }
  v11 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v11 == 0x7FFFFFFF)
  {
    v11 = *(unsigned int *)(a1 + 32);
    v12 = v11;
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 24))
    {
      re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      LODWORD(v9) = v8 % *(unsigned int *)(a1 + 24);
      v12 = *(_DWORD *)(a1 + 32);
      result = *a2;
    }
    *(_DWORD *)(a1 + 32) = v12 + 1;
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 16);
    v14 = *(_DWORD *)(v13 + 32 * v11 + 8);
    *(_DWORD *)(a1 + 36) = v14 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v13 + 32 * v11 + 8) = v14 | 0x80000000;
  v15 = *(_QWORD *)(a1 + 8);
  v16 = v9;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 8) & 0x80000000 | *(_DWORD *)(v15 + 4 * v9);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11) = v8;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 16) = result;
  if (result)
  {
    result = RESyncRetain();
    v15 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v11 + 24) = *a3;
  *(_DWORD *)(v15 + 4 * v16) = v11;
  ++*(_DWORD *)(a1 + 28);
LABEL_15:
  ++*(_DWORD *)(a1 + 40);
  return result;
}

uint64_t re::ecs2::NetworkSendSystem::willAddSystemToECSService(re::ecs2::NetworkSendSystem *this)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  re *Request;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _DWORD *v19;
  int v20;
  int v21;
  uint64_t v22;
  char *v23;
  re::ecs2::NetworkSendSystem **v24;
  uint64_t v25;
  uint64_t v26;
  re::ecs2::NetworkSendSystem **v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  unsigned __int8 v33;
  __objc2_class_ro **p_info;
  __objc2_class_ro *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  v4 = re::ServiceLocator::serviceOrNull<re::NetworkSystem>(v3);
  v5 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 18) = v4;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  *((_QWORD *)this + 20) = re::ServiceLocator::serviceOrNull<re::AssetService>(v6);
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  Request = (re *)re::ServiceLocator::serviceOrNull<re::NetworkSendBlockingAssetLoadRequestService>(v7);
  *((_QWORD *)this + 19) = Request;
  if (Request)
    Request = (re *)(**(uint64_t (***)(re *))Request)(Request);
  if (*((_QWORD *)this + 18))
  {
    v9 = re::globalAllocators(Request);
    v1 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9[2] + 32))(v9[2], 144, 8);
    re::NetworkSystem::peerIDStringForAssetSerialization(*((re::NetworkSystem **)this + 18), (re::DynamicString *)&v43);
    v10 = *((_QWORD *)this + 20);
    re::DefaultAssetSerialize::DefaultAssetSerialize((re::DefaultAssetSerialize *)v1, 0);
    *(_QWORD *)v1 = off_24ED2D398;
    *(_BYTE *)(v1 + 96) = 0;
    re::DynamicString::DynamicString((re::DynamicString *)(v1 + 104), (const re::DynamicString *)&v43);
    *(_QWORD *)(v1 + 136) = v10;
    *((_QWORD *)this + 25) = v1;
    if (v43 && (v44 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v43 + 40))();
    v11 = *(_QWORD *)(*((_QWORD *)this + 18) + 2560);
    *((_QWORD *)this + 21) = v11;
    if (v11)
    {
      *((_QWORD *)this + 22) = RESyncServiceObserverCreate();
      RESyncServiceObserverOnSessionDidAdd();
      RESyncServiceAddObserver();
      if (RESyncServiceGetSessionCount())
      {
        v1 = 0;
        do
        {
          RESyncServiceGetSession();
          if ((RESyncSessionHasViewFilterCB() & 1) == 0)
            RESyncSessionSetViewFilterCB();
          ++v1;
        }
        while (RESyncServiceGetSessionCount() > v1);
      }
    }
  }
  v12 = *((_QWORD *)this + 5);
  if (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12) + 24))
  {
    v1 = 0;
    while (2)
    {
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      v14 = (_QWORD *)re::ecs2::EntityComponentCollection::operator[](v13, v1);
      v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v14 + 32))(*v14);
      do
      {
        if ((v16 & 1) == 0)
        {
          v42 = v15;
          v15 = v42;
          if (v20)
          {
            re::introspect<re::ecs2::NetworkReceiveSystem>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"NetworkReceiveSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkReceiveSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkReceiveSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkReceiveSystem>, 0);
            v15 = v42;
          }
        }
        if ((_UNKNOWN *)v15 == re::introspect<re::ecs2::NetworkReceiveSystem>(void)::info)
        {
          v21 = 0;
          goto LABEL_31;
        }
        v17 = *(unsigned int *)(v15 + 56);
        if (!(_DWORD)v17)
          break;
        v18 = *(_QWORD **)(v15 + 64);
        while (1)
        {
          v19 = (_DWORD *)*v18;
          if (*(_DWORD *)*v18 == 1 && v19[10] == 3)
            break;
          ++v18;
          if (!--v17)
            goto LABEL_28;
        }
        v15 = *((_QWORD *)v19 + 2);
      }
      while (v15);
LABEL_28:
      if (++v1 < *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12) + 24))
        continue;
      break;
    }
  }
  v21 = 1;
LABEL_31:
  v22 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5));
  v23 = (char *)this + 8;
  v24 = *(re::ecs2::NetworkSendSystem ***)(v22 + 40);
  v25 = *(_QWORD *)(v22 + 24);
  if (v25)
  {
    v26 = 8 * v25;
    v27 = v24;
    while (*v27 != this)
    {
      ++v27;
      v26 -= 8;
      if (!v26)
      {
        v27 = &v24[v25];
        break;
      }
    }
  }
  else
  {
    v27 = v24;
  }
  v28 = v27 - v24;
  v29 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 40))(*((_QWORD *)this + 5));
  if (v28 == v25)
    v30 = *(_QWORD *)(v29 + 24);
  else
    v30 = v28;

  if (v1 > v30)
    v31 = 1;
  else
    v31 = v21;
  if (v31 == 1)
    *((_BYTE *)this + 48) = 0;
  v32 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  p_info = VideoSpillMapMetalSession.info;
  if ((v33 & 1) == 0)
    goto LABEL_54;
  while (1)
  {
    v35 = p_info[480];
    re::StringID::invalid((re::StringID *)&v43);
    v36 = (*(uint64_t (**)(uint64_t, __objc2_class_ro *, uint64_t *))(*(_QWORD *)v32 + 16))(v32, v35, &v43);
    re::StringID::destroyString((re::StringID *)&v43);
    *((_QWORD *)this + 23) = v36;
    *((_QWORD *)this + 24) = RESyncCreateSyncObjectContext();
    RESyncAddSyncObjectContextEntry();
    v37 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
    if ((v38 & 1) == 0
    {
      re::introspect<re::NetworkCompatSerializer>(void)::info = re::introspect_NetworkCompatSerializer(0);
    }
    p_info = (__objc2_class_ro **)re::introspect<re::NetworkCompatSerializer>(void)::info;
    re::StringID::invalid((re::StringID *)&v43);
    v32 = (*(uint64_t (**)(uint64_t, __objc2_class_ro **, uint64_t *))(*(_QWORD *)v37 + 16))(v37, p_info, &v43);
    re::StringID::destroyString((re::StringID *)&v43);
    *((_QWORD *)this + 26) = v32;
    v39 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
    *((_QWORD *)this + 27) = re::ServiceLocator::serviceOrNull<re::FrameManager>(v39);
    *((_QWORD *)this + 28) = RESyncCreateSyncObjectWriteContext();
    RESyncAddSyncObjectWriteContextEntry();
    result = RESyncAddSyncObjectWriteContextEntry();
    if (!*((_QWORD *)this + 23))
    {
      re::internal::assertLog((re::internal *)4, v41, "assertion failure: '%s' (%s:line %i) [NetworkComponent] Serializer not found. Please register the NetworkOPACKSerializer in the service locator.", "m_opackSerializer", "willAddSystemToECSService", 1502);
      _os_crash();
      __break(1u);
LABEL_52:
      re::internal::assertLog((re::internal *)4, v41, "assertion failure: '%s' (%s:line %i) [NetworkComponent] Deserializer not found. Please register the NetworkCompatSerializer in the service locator.", "m_compatSerializer", "willAddSystemToECSService", 1503);
      _os_crash();
      __break(1u);
      goto LABEL_53;
    }
    if (!*((_QWORD *)this + 26))
      goto LABEL_52;
    if (*((_QWORD *)this + 27))
      return result;
LABEL_53:
    re::internal::assertLog((re::internal *)4, v41, "assertion failure: '%s' (%s:line %i) [NetworkComponent] FrameManager not found. Please register the FrameManager in the service locator.", "m_frameManager", "willAddSystemToECSService", 1504);
    _os_crash();
    __break(1u);
LABEL_54:
    {
      p_info[480] = (__objc2_class_ro *)re::introspect_NetworkOPACKSerializer(0);
    }
  }
}

void ___ZN2re4ecs217NetworkSendSystem25willAddSystemToECSServiceEv_block_invoke()
{
  NSObject *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  if (RESyncServiceGetSyncSession())
  {
    if ((RESyncSessionHasViewFilterCB() & 1) == 0)
      RESyncSessionSetViewFilterCB();
  }
  else
  {
    v0 = *re::ecsNetworkLogObjects(0);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
    {
      v1 = 134217984;
      v2 = RESyncNetSessionPeerID();
      _os_log_impl(&dword_224FE9000, v0, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] couldn't find sync session for net session %llx", (uint8_t *)&v1, 0xCu);
    }
  }
}

uint64_t ___ZN2re4ecs217NetworkSendSystem25willAddSystemToECSServiceEv_block_invoke_46(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t `anonymous namespace'::viewFilterAccessList(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  char IsLocal;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  ++re::NetworkSystem::viewFilterListCount;
  if ((RESyncSessionIsPrivileged() & 1) != 0)
    return 1;
  result = RESyncViewGetUserData();
  if (result)
  {
    v4 = result;
    if (RESyncSessionIsLocal())
    {
      if (*(unsigned __int8 *)(v4 + 104) <= 1u)
      {
        RESyncSessionGetNetSession();
        if (RESyncNetSessionGetParticipantWithPeerID())
        {
          if ((RESyncParticipantHasForceAuthorityCapability() & 1) != 0)
            return 1;
        }
      }
    }
    IsLocal = RESyncSessionIsLocal();
    v6 = *(unsigned __int8 *)(v4 + 104);
    if (v6 != 2)
    {
      if (*(_BYTE *)(v4 + 104))
      {
        if (v6 == 3)
          v11 = IsLocal;
        else
          v11 = 0;
        if ((v11 & 1) == 0)
          goto LABEL_11;
      }
      else if ((IsLocal & 1) != 0)
      {
LABEL_11:
        v7 = (_DWORD *)(v4 + 56);
        v8 = *(_QWORD *)(v4 + 80);
        if (v8)
        {
          v9 = *(_QWORD *)(v4 + 96) + 8;
          v10 = 16 * v8;
          while (*(_QWORD *)(v9 - 8) != a2)
          {
            v9 += 16;
            v10 -= 16;
            if (!v10)
              return *v7 == 0;
          }
          v7 = (_DWORD *)v9;
        }
        return *v7 == 0;
      }
    }
    return 0;
  }
  return result;
}

uint64_t ___ZN2re4ecs217NetworkSendSystem25willAddSystemToECSServiceEv_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t re::ecs2::NetworkSendSystem::willRemoveSystemFromECSService(re::ecs2::NetworkSendSystem *this)
{
  re *v2;
  void (***v3)(_QWORD);
  uint64_t v4;
  uint64_t result;

  if (*((_QWORD *)this + 18))
  {
    RESyncServiceRemoveObserver();
    v2 = (re *)RESyncRelease();
    *((_QWORD *)this + 20) = 0;
    *((_QWORD *)this + 21) = 0;
    *((_QWORD *)this + 22) = 0;
    v3 = (void (***)(_QWORD))*((_QWORD *)this + 25);
    if (v3)
    {
      v4 = re::globalAllocators(v2)[2];
      (**v3)(v3);
      (*(void (**)(uint64_t, void (***)(_QWORD)))(*(_QWORD *)v4 + 40))(v4, v3);
    }
  }
  *((_QWORD *)this + 18) = 0;
  RESyncDestroySyncObjectWriteContext();
  *((_QWORD *)this + 28) = 0;
  result = RESyncDestroySyncObjectContext();
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  return result;
}

_QWORD *re::ecs2::NetworkSendSystem::update(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *result;

  v8 = (*(uint64_t (**)(_QWORD *))(*a1[5] + 104))(a1[5]);
  result = (_QWORD *)re::ecs2::EntityComponentCollection::operator[](v8, 0);
  if (*result == a2)
    return (_QWORD *)((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[10])(a1, a3, a4);
  return result;
}

void re::ecs2::NetworkSendSystem::update(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  re::NetworkSystem *v3;
  uint64_t v4;
  re::ProfilerConfig *v5;
  re *isStatisticCollectionEnabled;
  uint64_t v7;
  re *v8;
  uint64_t v9;
  int64x2_t *v10;
  re::ProfilerConfig *v11;
  re::ProfilerConfig *v12;
  int64x2_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t Guid;
  uint64_t v33;
  uint64_t v34;
  uint64_t SyncObjectContextEntry;
  uint64_t v36;
  NSObject *v37;
  int v38;
  int8x8_t *v39;
  uint64_t *v40;
  uint64_t i;
  uint64_t v42;
  int8x8_t v43;
  uint8x8_t v44;
  unint64_t FirstBitSet;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  int v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  unsigned int v73;
  uint64_t v74;
  int *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  int v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  NSObject *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _DWORD *v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int *v129;
  unsigned int v130;
  uint64_t v131;
  int *v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  int v139;
  int v140;
  unsigned int v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int64x2_t *v147;
  unint64_t v148;
  unint64_t v149;
  int64x2_t v150;
  re *v151;
  uint64_t v152;
  int64x2_t *v153;
  unint64_t v154;
  unint64_t v155;
  int64x2_t v156;
  uint64_t EntryCount;
  uint64_t v158;
  uint64_t j;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int *v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  id v168;
  uint64_t v169;
  uint64_t v170;
  int *v171;
  int v172;
  uint64_t v173;
  int v174;
  int v175;
  int v176;
  int v177;
  uint64_t v178;
  int64x2_t *v179;
  unint64_t v180;
  unint64_t v181;
  int64x2_t v182;
  re *v183;
  uint64_t v184;
  re *v185;
  uint64_t SessionCount;
  int v187;
  uint64_t v188;
  uint64_t *v189;
  int v190;
  unint64_t v191;
  unint64_t v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD v198[5];
  _BYTE v199[16];
  _QWORD v200[6];
  _BYTE buf[38];
  uint8_t __src[32];
  __int128 v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;

  v1 = a1;
  v206 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 152);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v3 = *(re::NetworkSystem **)(v1 + 144);
  if (!v3)
    return;
  re::NetworkSystem::resolveDeferedViews(v3);
  if (!*(_QWORD *)(v1 + 168))
    goto LABEL_300;
  if (!RESyncServiceGetSessionCount())
  {
    v7 = *(_QWORD *)(v1 + 144);
    v200[0] = MEMORY[0x24BDAC760];
    v200[1] = 0x40000000;
    v200[2] = ___ZNK2re4ecs217NetworkSendSystem6updateENS0_6System13UpdateContextE_block_invoke;
    v200[3] = &__block_descriptor_tmp_63;
    v200[4] = v1;
    *(_QWORD *)__src = v200;
    re::NetworkSystem::enumerateRemoteDirtyComponents<void({block_pointer})(re::SharedPtr<re::ecs2::NetworkComponent>)>(v7, (uint64_t *)__src);
    re::NetworkSystem::clearRemoteDirty(*(re::NetworkSystem **)(v1 + 144));
    return;
  }
  isStatisticCollectionEnabled = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(v5);
  if ((_DWORD)isStatisticCollectionEnabled)
  {
    isStatisticCollectionEnabled = (re *)re::profilerThreadContext(isStatisticCollectionEnabled);
    v185 = isStatisticCollectionEnabled;
    if (*((_QWORD *)isStatisticCollectionEnabled + 19))
    {
      isStatisticCollectionEnabled = (re *)mach_absolute_time();
      v183 = isStatisticCollectionEnabled;
    }
  }
  else
  {
    v185 = 0;
  }
  v8 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled(isStatisticCollectionEnabled);
  if ((_DWORD)v8)
  {
    v9 = re::profilerThreadContext(v8);
    v10 = *(int64x2_t **)(v9 + 152);
    if (v10)
    {
      v11 = (re::ProfilerConfig *)v10[196].i64[0];
      if (v11 >= v5)
        v11 = v5;
      v10[196].i64[0] = (uint64_t)v11;
      v12 = (re::ProfilerConfig *)v10[196].i64[1];
      if (v12 <= v5)
        v12 = v5;
      v10[196].i64[1] = (uint64_t)v12;
      v13 = vdupq_n_s64(1uLL);
      v13.i64[0] = (uint64_t)v5;
      v10[197] = vaddq_s64(v10[197], v13);
      *(_BYTE *)(v9 + 184) = 0;
    }
  }
  re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v199, 3055, v1);
  SessionCount = RESyncServiceGetSessionCount();
  if (!SessionCount)
  {
    v15 = 0;
    LOBYTE(v187) = 0;
    goto LABEL_244;
  }
  v14 = 0;
  v187 = 0;
  v15 = 0;
  v184 = vdupq_n_s64(1uLL).i64[1];
  v197 = v1;
  do
  {
    v188 = v14;
    RESyncServiceGetSession();
    if (!RESyncSessionIsLocal() || (v16 = *(_QWORD *)(v1 + 144), !*(_DWORD *)(v16 + 2972)))
    {
      if (!v15)
      {
        *(_QWORD *)(v1 + 120) = 0;
        ++*(_DWORD *)(v1 + 128);
        v21 = *(_QWORD *)(v1 + 144);
        v198[0] = MEMORY[0x24BDAC760];
        v198[1] = 0x40000000;
        v198[2] = ___ZNK2re4ecs217NetworkSendSystem6updateENS0_6System13UpdateContextE_block_invoke_2;
        v198[3] = &__block_descriptor_tmp_64_0;
        v198[4] = v1;
        *(_QWORD *)__src = v198;
        re::NetworkSystem::enumerateRemoteDirtyComponents<void({block_pointer})(re::SharedPtr<re::ecs2::NetworkComponent>)>(v21, (uint64_t *)__src);
        v15 = RESyncCommitListCreate();
        if (re::internal::enableSignposts(0, 0))
          kdebug_trace();
        v23 = *(_QWORD *)(v1 + 184);
        *(_QWORD *)(v23 + 456) = *(_QWORD *)(v1 + 200);
        v24 = *(_QWORD *)(v1 + 120);
        if (v24)
        {
          v25 = 0;
          v26 = 0;
          v191 = 0;
          v27 = 0;
          v28 = *(uint64_t **)(v1 + 136);
          v189 = &v28[v24];
          v196 = v15;
          while (1)
          {
            v29 = *v28;
            v30 = *(_BYTE *)(*v28 + 50);
            if ((v30 & 2) != 0 || (*(_BYTE *)(v29 + 48) & 2) != 0)
            {
              if (!v27)
                v27 = RESyncCommitListAddNewCommit();
              if (!*(_QWORD *)(v1 + 168))
                goto LABEL_299;
              RESyncServiceGetTypeInfo();
              *(_QWORD *)__src = 0;
              *(_QWORD *)&__src[8] = &str_110;
              *(_QWORD *)&__src[16] = 0;
              *(_QWORD *)&__src[24] = 0;
              LOWORD(v203) = 512;
              v31 = *(_QWORD *)(v29 + 16);
              re::StringID::operator=((unint64_t *)__src, (uint64_t *)(v31 + 272));
              Guid = 0;
              *(_QWORD *)&__src[16] = *(_QWORD *)(v31 + 296);
              LOBYTE(v203) = (*(_BYTE *)(v31 + 288) & 8) != 0;
              if (!*(_BYTE *)(v29 + 617))
              {
                v33 = *(_QWORD *)(v31 + 24);
                if (v33 && (v34 = *(_QWORD *)(v33 + 200)) != 0)
                {
                  Guid = *(_QWORD *)(v34 + 32);
                  if (Guid)
                    Guid = RESyncableGetGuid();
                }
                else
                {
                  Guid = 0;
                }
              }
              *(_QWORD *)&__src[24] = Guid;
              BYTE1(v203) = *(_BYTE *)(v29 + 560);
              SyncObjectContextEntry = RESyncGetSyncObjectContextEntry();
              memset(&buf[8], 0, 24);
              *(_QWORD *)(SyncObjectContextEntry + 464) = buf;
              v36 = RESyncCommitCaptureSnapshot();
              *(_QWORD *)(SyncObjectContextEntry + 464) = 0;
              if ((v36 & 1) != 0)
              {
                v15 = v196;
                if (kdebug_is_enabled())
                {
                  re::packCharArrayToUInt64ForAriadne(*(re **)(*(_QWORD *)(v29 + 16) + 280), 0);
                  kdebug_trace();
                }
              }
              else
              {
                v37 = *re::ecsNetworkLogObjects((re *)v36);
                v15 = v196;
                if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT))
                {
                  v64 = *(_QWORD *)(*(_QWORD *)(v29 + 16) + 280);
                  v65 = *(_QWORD *)(v29 + 32);
                  if (v65)
                    v65 = RESyncableGetGuid();
                  *(_DWORD *)buf = 136380931;
                  *(_QWORD *)&buf[4] = v64;
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v65;
                  _os_log_fault_impl(&dword_224FE9000, v37, OS_LOG_TYPE_FAULT, "Failed to write entity state. (name=%{private}s, guid=%llu)", buf, 0x16u);
                }
              }
              re::StringID::destroyString((re::StringID *)__src);
              ++v191;
              v30 = *(_BYTE *)(v29 + 50);
              v25 = 1;
            }
            v192 = v26;
            if ((v30 & 2) == 0)
              break;
            if (*(_QWORD *)(v29 + 168))
            {
              if (!v27)
                v27 = RESyncCommitListAddNewCommit();
              if ((*(_BYTE *)(v29 + 176) & 1) != 0)
                v40 = (uint64_t *)(v29 + 184);
              else
                v40 = *(uint64_t **)(v29 + 192);
              v50 = *(_QWORD *)(v29 + 168);
              if (v50)
              {
                v51 = 8 * v50;
                do
                {
                  v52 = *v40++;
                  re::ecs2::NetworkSendSystem::buildComponentSnapshot(v197, v52);
                  v51 -= 8;
                }
                while (v51);
                i = *(_QWORD *)(v29 + 168);
              }
              else
              {
                i = 0;
              }
LABEL_82:
              v25 = 1;
              goto LABEL_83;
            }
            i = 0;
LABEL_83:
            v53 = *(unsigned int *)(v29 + 496);
            if ((_DWORD)v53)
            {
              v54 = 0;
              v55 = (int *)(*(_QWORD *)(v29 + 480) + 8);
              do
              {
                v56 = *v55;
                v55 += 6;
                if (v56 < 0)
                  goto LABEL_89;
                ++v54;
              }
              while (v53 != v54);
              LODWORD(v54) = *(_DWORD *)(v29 + 496);
            }
            else
            {
              LODWORD(v54) = 0;
            }
LABEL_89:
            if ((_DWORD)v53 != (_DWORD)v54)
            {
              do
              {
                if (!v27)
                  v27 = RESyncCommitListAddNewCommit();
                RESyncCommitMarkDestroyed();
                v57 = *(_DWORD *)(v29 + 496);
                if (v57 <= (int)v54 + 1)
                  v57 = v54 + 1;
                while (1)
                {
                  v58 = v54 + 1;
                  if (v57 - 1 == (_DWORD)v54)
                    break;
                  LODWORD(v54) = v54 + 1;
                  v59 = v58;
                  if ((*(_DWORD *)(*(_QWORD *)(v29 + 480) + 24 * v58 + 8) & 0x80000000) != 0)
                    goto LABEL_98;
                }
                v59 = v57;
LABEL_98:
                LODWORD(v54) = v59;
              }
              while ((_DWORD)v53 != v59);
              v25 = 1;
            }
            *(_BYTE *)(v29 + 48) &= ~2u;
            *(_BYTE *)(v29 + 50) &= ~2u;
            v60 = *(_DWORD *)(v29 + 376);
            v1 = v197;
            if ((v60 & 1) != 0)
              v61 = (_QWORD *)(v29 + 384);
            else
              v61 = *(_QWORD **)(v29 + 392);
            v26 = i + v192;
            v62 = *(_QWORD *)(v29 + 368);
            while (1)
            {
              v63 = v29 + 384;
              if ((v60 & 1) == 0)
                v63 = *(_QWORD *)(v29 + 392);
              if (v61 == (_QWORD *)(v63 + 8 * v62))
                break;
              *v61++ = 0;
              v60 = *(_DWORD *)(v29 + 376);
            }
            re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::clear(v29 + 464);
            if (++v28 == v189)
            {
              v23 = *(_QWORD *)(v197 + 184);
              v66 = v191;
              goto LABEL_221;
            }
          }
          v38 = *(_DWORD *)(v29 + 376);
          if ((v38 & 1) != 0)
            v39 = (int8x8_t *)(v29 + 384);
          else
            v39 = *(int8x8_t **)(v29 + 392);
          for (i = 0; ; i += v44.u32[0])
          {
            v42 = v29 + 384;
            if ((v38 & 1) == 0)
              v42 = *(_QWORD *)(v29 + 392);
            if (v39 == (int8x8_t *)(v42 + 8 * *(_QWORD *)(v29 + 368)))
              break;
            v43 = *v39++;
            v44 = (uint8x8_t)vcnt_s8(v43);
            v44.i16[0] = vaddlv_u8(v44);
          }
          if (!i)
            goto LABEL_83;
          if (!v27)
            v27 = RESyncCommitListAddNewCommit();
          FirstBitSet = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(v29 + 360, 0);
          if (FirstBitSet != -1)
          {
            v46 = FirstBitSet;
            while (1)
            {
              v47 = *(_QWORD *)(v29 + 168);
              if (v47 <= v46)
                break;
              v48 = v29 + 184;
              if ((*(_BYTE *)(v29 + 176) & 1) == 0)
                v48 = *(_QWORD *)(v29 + 192);
              v49 = *(_QWORD *)(v48 + 8 * v46);
              if (v49)
              {
                RESyncRetain();
                re::ecs2::NetworkSendSystem::buildComponentSnapshot(v197, v49);
                RESyncRelease();
              }
              else
              {
                re::ecs2::NetworkSendSystem::buildComponentSnapshot(v197, 0);
              }
              v15 = v196;
              v46 = re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(v29 + 360, v46 + 1);
              if (v46 == -1)
                goto LABEL_82;
            }
            v200[5] = 0;
            v204 = 0u;
            v205 = 0u;
            v203 = 0u;
            memset(__src, 0, sizeof(__src));
            os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136315906;
            *(_QWORD *)&buf[4] = "operator[]";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 858;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = v46;
            *(_WORD *)&buf[28] = 2048;
            *(_QWORD *)&buf[30] = v47;
            _os_log_send_and_compose_impl();
            _os_crash_msg();
            __break(1u);
LABEL_299:
            re::internal::assertLog((re::internal *)4, v22, "assertion failure: '%s' (%s:line %i) ", "m_syncService", "buildEntitySnapshot", 1789);
            _os_crash();
            __break(1u);
LABEL_300:
            re::internal::assertLog((re::internal *)4, v4, "assertion failure: '%s' (%s:line %i) ", "m_syncService", "update", 1552);
            _os_crash();
            __break(1u);
          }
          goto LABEL_82;
        }
        v66 = 0;
        v26 = 0;
        v25 = 0;
LABEL_221:
        *(_QWORD *)(v23 + 456) = 0;
        v145 = re::internal::enableSignposts(0, 0);
        if ((v145 & 1) != 0)
          v145 = kdebug_trace();
        v146 = re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v145);
        if ((_DWORD)v146)
        {
          v146 = re::profilerThreadContext((re *)v146);
          v147 = *(int64x2_t **)(v146 + 152);
          if (v147)
          {
            v148 = v147[188].u64[0];
            if (v148 >= v66)
              v148 = v66;
            v147[188].i64[0] = v148;
            v149 = v147[188].u64[1];
            if (v149 <= v66)
              v149 = v66;
            v147[188].i64[1] = v149;
            v150.i64[1] = v184;
            v150.i64[0] = v66;
            v147[189] = vaddq_s64(v147[189], v150);
            *(_BYTE *)(v146 + 184) = 0;
          }
        }
        v151 = (re *)re::ProfilerConfig::isStatisticCollectionEnabled((re::ProfilerConfig *)v146);
        if ((_DWORD)v151)
        {
          v152 = re::profilerThreadContext(v151);
          v153 = *(int64x2_t **)(v152 + 152);
          if (v153)
          {
            v154 = v153[180].u64[0];
            if (v154 >= v26)
              v154 = v26;
            v153[180].i64[0] = v154;
            v155 = v153[180].u64[1];
            if (v155 <= v26)
              v155 = v26;
            v153[180].i64[1] = v155;
            v156 = vdupq_n_s64(1uLL);
            v156.i64[0] = v26;
            v153[181] = vaddq_s64(v153[181], v156);
            *(_BYTE *)(v152 + 184) = 0;
          }
        }
        v187 |= v25;
        EntryCount = RESyncCommitListGetEntryCount();
        if (EntryCount)
        {
          v158 = EntryCount;
          for (j = 0; j != v158; ++j)
          {
            RESyncCommitListGetEntry();
            RESyncCommitListAddCopy();
          }
        }
      }
      v144 = v188;
      RESyncServiceGetSession();
      RESyncSessionSend();
      goto LABEL_241;
    }
    v195 = v15;
    *(_QWORD *)buf = re::ecs2::NetworkSendSystem::updateLocalSession(RESyncSession *)const::$_0::__invoke;
    memset(&buf[8], 0, 24);
    v17 = *(_QWORD *)(v1 + 184);
    *(_QWORD *)(v17 + 464) = buf;
    *(_QWORD *)(v17 + 456) = *(_QWORD *)(v1 + 200);
    v18 = *(unsigned int *)(v16 + 2976);
    if ((_DWORD)v18)
    {
      v19 = 0;
      v20 = (_DWORD *)(*(_QWORD *)(v16 + 2960) + 8);
      while ((*v20 & 0x80000000) == 0)
      {
        v20 += 68;
        if (v18 == ++v19)
        {
          LODWORD(v19) = *(_DWORD *)(v16 + 2976);
          break;
        }
      }
    }
    else
    {
      LODWORD(v19) = 0;
    }
    if ((_DWORD)v18 != (_DWORD)v19)
    {
      v67 = v19;
      v68 = *(_DWORD *)(v16 + 2976);
      v193 = v68;
      do
      {
        v69 = *(_QWORD *)(v16 + 2960);
        v70 = v69 + 272 * v67;
        v73 = *(_DWORD *)(v70 + 160);
        v72 = (_DWORD *)(v70 + 160);
        v71 = v73;
        *(v72 - 26) = 0;
        *((_QWORD *)v72 - 5) = *(_QWORD *)(v1 + 184) + 456;
        if (v73)
        {
          v74 = 0;
          v75 = (int *)(*(_QWORD *)(v69 + 272 * v67 + 144) + 8);
          while (1)
          {
            v76 = *v75;
            v75 += 6;
            if (v76 < 0)
              break;
            if (v71 == ++v74)
            {
              LODWORD(v74) = v71;
              break;
            }
          }
        }
        else
        {
          LODWORD(v74) = 0;
        }
        if ((_DWORD)v71 != (_DWORD)v74)
        {
          v77 = v74;
          v78 = v69 + 272 * v67;
          v81 = *(_QWORD *)(v78 + 144);
          v80 = (uint64_t *)(v78 + 144);
          v79 = v81;
          do
          {
            v82 = *(_QWORD **)(v79 + 24 * v77 + 16);
            if (v82)
              v83 = v82 + 1;
            if (!v82[4] || RESyncableIsAuthoritative())
            {
              v84 = v82[2];
              if (v84)
              {
                do
                {
                  v85 = v84;
                  v84 = *(_QWORD *)(v84 + 24);
                }
                while (v84);
                if (*(_QWORD *)(v85 + 16))
                  re::ecs2::NetworkSendSystem::writeEntity(v1, (re::snapshot::Encoder *)(v72 - 28), (uint64_t)v82);
              }
            }

            v86 = *v72;
            v79 = *v80;
            if (*v72 <= (v74 + 1))
              v86 = v74 + 1;
            while (1)
            {
              v77 = (v74 + 1);
              if (v86 - 1 == (_DWORD)v74)
                break;
              LODWORD(v74) = v74 + 1;
              v87 = v77;
              if ((*(_DWORD *)(v79 + 24 * v77 + 8) & 0x80000000) != 0)
                goto LABEL_138;
            }
            v87 = v86;
LABEL_138:
            LODWORD(v74) = v87;
          }
          while ((_DWORD)v71 != v87);
          v68 = *(_DWORD *)(v16 + 2976);
          LODWORD(v18) = v193;
        }
        if (v68 <= (int)v19 + 1)
          v88 = v19 + 1;
        else
          v88 = v68;
        while (1)
        {
          v67 = (v19 + 1);
          if (v88 - 1 == (_DWORD)v19)
            break;
          LODWORD(v19) = v19 + 1;
          v89 = v67;
          if ((*(_DWORD *)(*(_QWORD *)(v16 + 2960) + 272 * v67 + 8) & 0x80000000) != 0)
            goto LABEL_147;
        }
        v89 = v88;
LABEL_147:
        LODWORD(v19) = v89;
      }
      while ((_DWORD)v18 != v89);
      v16 = *(_QWORD *)(v1 + 144);
    }
    v90 = *(unsigned int *)(v16 + 2616);
    if ((_DWORD)v90)
    {
      v91 = 0;
      v92 = (int *)(*(_QWORD *)(v16 + 2600) + 8);
      while (1)
      {
        v93 = *v92;
        v92 += 6;
        if (v93 < 0)
          break;
        if (v90 == ++v91)
        {
          LODWORD(v91) = *(_DWORD *)(v16 + 2616);
          break;
        }
      }
    }
    else
    {
      LODWORD(v91) = 0;
    }
    if ((_DWORD)v90 == (_DWORD)v91)
      goto LABEL_184;
    v94 = v91;
    v95 = *(_DWORD *)(v16 + 2616);
    do
    {
      v96 = *(_QWORD *)(v16 + 2600) + 24 * v94;
      v99 = *(_QWORD *)(v96 + 16);
      v98 = (uint64_t *)(v96 + 16);
      v97 = (_QWORD *)v99;
      if ((*(_BYTE *)(v99 + 80) & 1) != 0)
        v100 = v97 + 11;
      else
        v100 = (uint64_t *)v97[12];
      v101 = v97[9];
      if (!v101)
        goto LABEL_175;
      v102 = &v100[v101];
      do
      {
        v103 = *v100;
        v104 = *v98;
        if (*(_QWORD *)(*v98 + 32))
        {
          if (!RESyncableIsAuthoritative())
            goto LABEL_173;
          v104 = *v98;
        }
        v105 = *(_QWORD *)(v104 + 16);
        if (v105)
        {
          do
          {
            v106 = v105;
            v105 = *(_QWORD *)(v105 + 24);
          }
          while (v105);
          if (*(_QWORD *)(v106 + 16))
          {
            v107 = *(_QWORD *)(v197 + 144);
            *(_QWORD *)__src = v103;
            v108 = re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v107 + 2944, (uint64_t *)__src);
            if (v108)
            {
              v109 = v108;
              if (!re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(v108 + 104, v98))re::ecs2::NetworkSendSystem::writeEntity(v197, (re::snapshot::Encoder *)(v109 + 24), *v98);
            }
            else
            {
              v110 = *re::ecsNetworkLogObjects(0);
              if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
              {
                v111 = *(_QWORD *)(*v98 + 16);
                v112 = *(_QWORD *)(v111 + 280);
                v113 = *(_QWORD *)(v111 + 296);
                *(_DWORD *)__src = 134218498;
                *(_QWORD *)&__src[4] = v103;
                *(_WORD *)&__src[12] = 2080;
                *(_QWORD *)&__src[14] = v112;
                *(_WORD *)&__src[22] = 2048;
                *(_QWORD *)&__src[24] = v113;
                _os_log_impl(&dword_224FE9000, v110, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] no peer found for peerID %llu on entity %s(%llu).", __src, 0x20u);
              }
            }
          }
        }
LABEL_173:
        ++v100;
      }
      while (v100 != v102);
      v95 = *(_DWORD *)(v16 + 2616);
      v1 = v197;
LABEL_175:
      if (v95 <= (int)v91 + 1)
        v114 = v91 + 1;
      else
        v114 = v95;
      while (1)
      {
        v94 = (v91 + 1);
        if (v114 - 1 == (_DWORD)v91)
          break;
        LODWORD(v91) = v91 + 1;
        v115 = v94;
        if ((*(_DWORD *)(*(_QWORD *)(v16 + 2600) + 24 * v94 + 8) & 0x80000000) != 0)
          goto LABEL_182;
      }
      v115 = v114;
LABEL_182:
      LODWORD(v91) = v115;
    }
    while ((_DWORD)v90 != v115);
    v16 = *(_QWORD *)(v1 + 144);
LABEL_184:
    re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear(v16 + 2584);
    v116 = *(_QWORD *)(v1 + 144);
    v117 = *(unsigned int *)(v116 + 2976);
    if ((_DWORD)v117)
    {
      v118 = 0;
      v119 = (_DWORD *)(*(_QWORD *)(v116 + 2960) + 8);
      while ((*v119 & 0x80000000) == 0)
      {
        v119 += 68;
        if (v117 == ++v118)
        {
          LODWORD(v118) = *(_DWORD *)(v116 + 2976);
          break;
        }
      }
    }
    else
    {
      LODWORD(v118) = 0;
    }
    if ((_DWORD)v117 == (_DWORD)v118)
    {
      v120 = 0;
    }
    else
    {
      v120 = 0;
      v121 = v118;
      v190 = *(_DWORD *)(v116 + 2976);
      do
      {
        v122 = *(_QWORD *)(v116 + 2960);
        v123 = v122 + 272 * v121;
        re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear(v123 + 128);
        v125 = *(_DWORD *)(v123 + 56);
        v124 = v123 + 56;
        if (v125 | *(_DWORD *)(v124 + 148))
        {
          *(_QWORD *)__src = 0;
          re::snapshot::Encoder::writeRaw<true>((unsigned int *)(v124 - 8), __src, 8uLL);
          v126 = v122;
          v127 = v122 + 272 * v121;
          v130 = *(_DWORD *)(v127 + 208);
          v129 = (int *)(v127 + 208);
          v128 = v130;
          v194 = v126;
          if (v130)
          {
            v131 = 0;
            v132 = (int *)(*(_QWORD *)(v126 + 272 * v121 + 192) + 8);
            while (1)
            {
              v133 = *v132;
              v132 += 6;
              if (v133 < 0)
                break;
              if (v128 == ++v131)
              {
                LODWORD(v131) = v128;
                break;
              }
            }
          }
          else
          {
            LODWORD(v131) = 0;
          }
          if ((_DWORD)v128 != (_DWORD)v131)
          {
            v134 = v131;
            v135 = v194 + 272 * v121;
            v138 = *(_QWORD *)(v135 + 192);
            v137 = (uint64_t *)(v135 + 192);
            v136 = v138;
            do
            {
              *(_QWORD *)__src = *(_QWORD *)(v136 + 24 * v134 + 16);
              re::snapshot::Encoder::writeRaw<true>((unsigned int *)(v124 - 8), __src, 8uLL);
              v136 = *v137;
              if (*v129 <= (v131 + 1))
                v139 = v131 + 1;
              else
                v139 = *v129;
              v140 = v131;
              while (1)
              {
                v134 = (v140 + 1);
                if (v139 - 1 == v140)
                  break;
                ++v140;
                LODWORD(v131) = v134;
                if ((*(_DWORD *)(v136 + 24 * v134 + 8) & 0x80000000) != 0)
                  goto LABEL_210;
              }
              LODWORD(v131) = v139;
LABEL_210:
              ;
            }
            while ((_DWORD)v128 != (_DWORD)v131);
          }
          re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear((uint64_t)(v129 - 8));
          *(_QWORD *)__src = 0;
          re::snapshot::Encoder::writeRaw<true>((unsigned int *)(v124 - 8), __src, 8uLL);
          *(_QWORD *)(v194 + 272 * v121 + 120) = 0;
          RESyncSessionSendRaw();
          v120 = 1;
          LODWORD(v117) = v190;
        }
        v141 = *(_DWORD *)(v116 + 2976);
        if (v141 <= (int)v118 + 1)
          v141 = v118 + 1;
        while (1)
        {
          v121 = (v118 + 1);
          if (v141 - 1 == (_DWORD)v118)
            break;
          LODWORD(v118) = v118 + 1;
          v142 = v121;
          if ((*(_DWORD *)(*(_QWORD *)(v116 + 2960) + 272 * v121 + 8) & 0x80000000) != 0)
            goto LABEL_218;
        }
        v142 = v141;
LABEL_218:
        LODWORD(v118) = v142;
      }
      while ((_DWORD)v117 != v142);
    }
    v15 = v195;
    v143 = *(_QWORD *)(v197 + 184);
    *(_QWORD *)(v143 + 456) = 0;
    *(_QWORD *)(v143 + 464) = 0;
    v187 |= v120;
    v1 = v197;
    v144 = v188;
LABEL_241:
    v14 = v144 + 1;
  }
  while (v144 + 1 != SessionCount);
LABEL_244:
  v160 = *(_QWORD *)(v1 + 144);
  v161 = *(unsigned int *)(v160 + 2664);
  if ((_DWORD)v161)
  {
    v162 = 0;
    v163 = (int *)(*(_QWORD *)(v160 + 2648) + 8);
    while (1)
    {
      v164 = *v163;
      v163 += 6;
      if (v164 < 0)
        break;
      if (v161 == ++v162)
      {
        LODWORD(v162) = *(_DWORD *)(v160 + 2664);
        break;
      }
    }
  }
  else
  {
    LODWORD(v162) = 0;
  }
  if ((_DWORD)v161 != (_DWORD)v162)
  {
    v165 = v162;
    do
    {
      v166 = v15;
      v167 = *(_QWORD *)(*(_QWORD *)(v160 + 2648) + 24 * v165 + 16);
      if (v167)
        v168 = (id)(v167 + 8);
      v169 = *(unsigned int *)(v167 + 496);
      if ((_DWORD)v169)
      {
        v170 = 0;
        v171 = (int *)(*(_QWORD *)(v167 + 480) + 8);
        while (1)
        {
          v172 = *v171;
          v171 += 6;
          if (v172 < 0)
            break;
          if (v169 == ++v170)
          {
            LODWORD(v170) = *(_DWORD *)(v167 + 496);
            break;
          }
        }
      }
      else
      {
        LODWORD(v170) = 0;
      }
      if ((_DWORD)v169 != (_DWORD)v170)
      {
        v173 = v170;
        do
        {
          if (*(_QWORD *)(*(_QWORD *)(v167 + 480) + 24 * v173 + 16))
          {
            RESyncRetain();
            RESyncServiceRemoveSyncable();
            RESyncRelease();
          }
          else
          {
            RESyncServiceRemoveSyncable();
          }
          if (*(_DWORD *)(v167 + 496) <= (v170 + 1))
            v174 = v170 + 1;
          else
            v174 = *(_DWORD *)(v167 + 496);
          while (1)
          {
            v173 = (v170 + 1);
            if (v174 - 1 == (_DWORD)v170)
              break;
            LODWORD(v170) = v170 + 1;
            v175 = v173;
            if ((*(_DWORD *)(*(_QWORD *)(v167 + 480) + 24 * v173 + 8) & 0x80000000) != 0)
              goto LABEL_272;
          }
          v175 = v174;
LABEL_272:
          LODWORD(v170) = v175;
        }
        while ((_DWORD)v169 != v175);
      }
      re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::clear(v167 + 464);
      if (v167)

      if (*(_DWORD *)(v160 + 2664) <= (v162 + 1))
        v176 = v162 + 1;
      else
        v176 = *(_DWORD *)(v160 + 2664);
      v15 = v166;
      while (1)
      {
        v165 = (v162 + 1);
        if (v176 - 1 == (_DWORD)v162)
          break;
        LODWORD(v162) = v162 + 1;
        v177 = v165;
        if ((*(_DWORD *)(*(_QWORD *)(v160 + 2648) + 24 * v165 + 8) & 0x80000000) != 0)
          goto LABEL_283;
      }
      v177 = v176;
LABEL_283:
      LODWORD(v162) = v177;
    }
    while ((_DWORD)v161 != v177);
    v160 = *(_QWORD *)(v1 + 144);
  }
  re::HashSetBase<unsigned long long,unsigned long long,re::internal::ValueAsKey<unsigned long long>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::clear(v160 + 2344);
  re::NetworkSystem::clearRemoteDirty(*(re::NetworkSystem **)(v1 + 144));
  if (v15)
  {
    re::HashSetBase<re::SharedPtr<re::AnimationEventDelegate>,re::SharedPtr<re::AnimationEventDelegate>,re::internal::ValueAsKey<re::SharedPtr<re::AnimationEventDelegate>>,re::Hash<re::SharedPtr<re::AnimationEventDelegate>>,re::EqualTo<re::SharedPtr<re::AnimationEventDelegate>>,true,false>::clear(*(_QWORD *)(v1 + 144) + 2632);
    RESyncRelease();
  }
  if ((v187 & 1) != 0)
    re::Event<re::NetworkSystem>::raise(*(_QWORD *)(v1 + 144) + 1848, *(_QWORD *)(v1 + 144));
  re::Event<re::NetworkSystem>::raise(*(_QWORD *)(v1 + 144) + 1584, *(_QWORD *)(v1 + 144));
  re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)v199);
  if (v185)
  {
    if (*((_QWORD *)v185 + 19))
    {
      v178 = mach_absolute_time();
      v179 = (int64x2_t *)*((_QWORD *)v185 + 19);
      if (v179)
      {
        v180 = v179[496].u64[0];
        if (v180 >= v178 - (unint64_t)v183)
          v180 = v178 - (_QWORD)v183;
        v179[496].i64[0] = v180;
        v181 = v179[496].u64[1];
        if (v181 <= v178 - (unint64_t)v183)
          v181 = v178 - (_QWORD)v183;
        v179[496].i64[1] = v181;
        v182 = vdupq_n_s64(1uLL);
        v182.i64[0] = v178 - (_QWORD)v183;
        v179[497] = vaddq_s64(v179[497], v182);
        *((_BYTE *)v185 + 184) = 0;
      }
    }
  }
}

void re::NetworkSystem::enumerateRemoteDirtyComponents<void({block_pointer})(re::SharedPtr<re::ecs2::NetworkComponent>)>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  int v12;
  int v13;
  uint64_t v14;

  v4 = *(unsigned int *)(a1 + 2664);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*(_QWORD *)(a1 + 2648) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 6;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(a1 + 2664);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v8 = v5;
    do
    {
      v9 = *a2;
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 2648) + 24 * v8 + 16);
      v14 = v10;
      if (v10)
        v11 = (id)(v10 + 8);
      (*(void (**)(uint64_t, uint64_t *))(v9 + 16))(v9, &v14);
      if (v14)
      {

        v14 = 0;
      }
      if (*(_DWORD *)(a1 + 2664) <= (v5 + 1))
        v12 = v5 + 1;
      else
        v12 = *(_DWORD *)(a1 + 2664);
      while (1)
      {
        v8 = (v5 + 1);
        if (v12 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v13 = v8;
        if ((*(_DWORD *)(*(_QWORD *)(a1 + 2648) + 24 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_20;
      }
      v13 = v12;
LABEL_20:
      LODWORD(v5) = v13;
    }
    while ((_DWORD)v4 != v13);
  }
}

void ___ZNK2re4ecs217NetworkSendSystem6updateENS0_6System13UpdateContextE_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;

  v3 = *a2;
  v4 = *(unsigned int *)(*a2 + 496);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*(_QWORD *)(v3 + 480) + 8);
    while (1)
    {
      v7 = *v6;
      v6 += 6;
      if (v7 < 0)
        break;
      if (v4 == ++v5)
      {
        LODWORD(v5) = *(_DWORD *)(*a2 + 496);
        break;
      }
    }
  }
  else
  {
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v4 != (_DWORD)v5)
  {
    v8 = v5;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(v3 + 480) + 24 * v8 + 16))
      {
        RESyncRetain();
        RESyncServiceRemoveSyncable();
        RESyncRelease();
      }
      else
      {
        RESyncServiceRemoveSyncable();
      }
      if (*(_DWORD *)(v3 + 496) <= (v5 + 1))
        v9 = v5 + 1;
      else
        v9 = *(_DWORD *)(v3 + 496);
      while (1)
      {
        v8 = (v5 + 1);
        if (v9 - 1 == (_DWORD)v5)
          break;
        LODWORD(v5) = v5 + 1;
        v10 = v8;
        if ((*(_DWORD *)(*(_QWORD *)(v3 + 480) + 24 * v8 + 8) & 0x80000000) != 0)
          goto LABEL_19;
      }
      v10 = v9;
LABEL_19:
      LODWORD(v5) = v10;
    }
    while ((_DWORD)v4 != v10);
    v3 = *a2;
  }
  re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::clear(v3 + 464);
  re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::clear(*a2 + 512);
}

void re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::clear(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  int v8;

  if (*(_DWORD *)(a1 + 28))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
      memset_pattern16(*(void **)(a1 + 8), &unk_2260EB7B0, 4 * v2);
    v3 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = *(_QWORD *)(a1 + 16) + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          if (*(_QWORD *)(v6 + 16))
          {
            RESyncRelease();
            *(_QWORD *)(v6 + 16) = 0;
            v3 = *(unsigned int *)(a1 + 32);
          }
        }
        v4 += 24;
      }
    }
    *(_DWORD *)(a1 + 28) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    v8 = *(_DWORD *)(a1 + 40) + 1;
    *(_DWORD *)(a1 + 36) = 0x7FFFFFFF;
    *(_DWORD *)(a1 + 40) = v8;
  }
}

void re::ecs2::NetworkSendSystem::writeEntity(uint64_t a1, re::snapshot::Encoder *this, uint64_t a3)
{
  uint64_t v6;
  char v7;
  int v8;
  size_t v9;
  re *FirstBitSet;
  re *v11;
  int8x16_t v12;
  unint64_t v13;
  uint64_t v14;
  const __int16 *v15;
  uint64_t v16;
  const __int16 *v17;
  int16x8_t *v18;
  int16x8_t v19;
  int v20;
  uint16x8_t v21;
  NSObject *v22;
  _anonymous_namespace_ *v23;
  const re::ecs2::Component *v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _anonymous_namespace_ **v35;
  uint64_t v36;
  const re::ecs2::Component *v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  int v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE buf[12];
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  int v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)buf = *(_QWORD *)(v6 + 296);
  re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, buf, 8uLL);
  v7 = *(_BYTE *)(a3 + 50);
  v8 = *(_BYTE *)(a3 + 48) & 1 | (2 * (v7 & 1));
  buf[0] = *(_BYTE *)(a3 + 48) & 1 | (2 * (v7 & 1));
  re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, buf, 1uLL);
  if (v8)
  {
    buf[0] = (*(_BYTE *)(v6 + 288) & 8) != 0;
    re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, buf, 1uLL);
    if (!*(_BYTE *)(a3 + 617) && (v54 = *(_QWORD *)(v6 + 24)) != 0 && *(_QWORD *)(v54 + 200))
      *(_QWORD *)buf = *(_QWORD *)(v54 + 296);
    else
      *(_QWORD *)buf = 0;
    re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, buf, 8uLL);
    buf[0] = *(_BYTE *)(a3 + 560);
    re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, buf, 1uLL);
    v9 = strlen(*(const char **)(v6 + 280));
    re::snapshot::EncoderRaw::serializeString((unsigned int *)this, *(const char **)(v6 + 280), v9);
    if (kdebug_is_enabled())
    {
      re::packCharArrayToUInt64ForAriadne(*(re **)(*(_QWORD *)(a3 + 16) + 280), 0);
      kdebug_trace();
    }
  }
  if ((*(_BYTE *)(a3 + 50) & 1) != 0)
  {
    v34 = *(_QWORD *)(v6 + 56);
    if (v34)
    {
      v35 = *(_anonymous_namespace_ ***)(v6 + 72);
      v36 = 8 * v34;
      do
      {
        *(_WORD *)buf = *(_WORD *)((*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)*v35 + 40))(*v35)
                                 + 16);
        if (!re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::contains(a3 + 416, (unsigned __int16 *)buf))
        {
          {
            *(_QWORD *)buf = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)*v35 + 40))(*v35)
                                       + 24) >> 1;
            re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, buf, 8uLL);
            v38 = re::NetworkSystem::encodeComponent(*(_QWORD *)(a1 + 144), (unsigned int *)this, *v35);
            if ((v38 & 1) == 0)
            {
              v39 = *re::ecsNetworkLogObjects((re *)v38);
              if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
              {
                v40 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)*v35 + 40))(*v35)
                                + 32);
                v41 = *(_QWORD *)(v6 + 280);
                v42 = *(_QWORD *)(v6 + 296);
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = v40;
                v56 = 2080;
                v57 = v41;
                v58 = 2048;
                v59 = v42;
                _os_log_error_impl(&dword_224FE9000, v39, OS_LOG_TYPE_ERROR, "[NetworkComponent] Failed to serialize component %s for entity %s(%llu)", buf, 0x20u);
              }
            }
          }
        }
        ++v35;
        v36 -= 8;
      }
      while (v36);
    }
  }
  else
  {
    FirstBitSet = (re *)re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a3 + 312, 0);
    if (FirstBitSet != (re *)-1)
    {
      v11 = FirstBitSet;
      v12 = (int8x16_t)xmmword_2260F1E80;
      do
      {
        v13 = *(unsigned __int16 *)(*(_QWORD *)(a3 + 120) + 2 * (_QWORD)v11);
        v14 = *(_QWORD *)(a1 + 144);
        if (*(_QWORD *)(v14 + 2824) > v13 && (v15 = *(const __int16 **)(*(_QWORD *)(v14 + 2840) + 8 * v13)) != 0)
        {
          v16 = *(unsigned __int16 *)(v6 + 82);
          if (!*(_WORD *)(v6 + 82))
            goto LABEL_24;
          v17 = v15 + 8;
          v18 = *(int16x8_t **)(v6 + 88);
          v19 = vld1q_dup_s16(v17);
          v20 = 1;
          while (1)
          {
            v21 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v19, *v18), v12);
            v21.i16[0] = vmaxvq_u16(v21);
            if (v21.i32[0])
              break;
            v20 -= 8;
            ++v18;
            if (!--v16)
              goto LABEL_24;
          }
          if (v21.u16[0] - v20 < *(unsigned __int16 *)(v6 + 80))
          {
            v23 = (_anonymous_namespace_ *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(v6 + 32), (const re::ecs2::ComponentTypeBase *)v15);
            {
              *(_WORD *)buf = *(_WORD *)((*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)v23 + 40))(v23)
                                       + 16);
              if (!re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::contains(a3 + 416, (unsigned __int16 *)buf))
              {
                *(_QWORD *)buf = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)v23 + 40))(v23)
                                           + 24) >> 1;
                re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, buf, 8uLL);
                v25 = re::NetworkSystem::encodeComponent(*(_QWORD *)(a1 + 144), (unsigned int *)this, v23);
                if ((v25 & 1) == 0)
                {
                  v26 = *re::ecsNetworkLogObjects((re *)v25);
                  if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
                  {
                    v27 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)v23 + 40))(v23)
                                    + 32);
                    v28 = *(_QWORD *)(v6 + 280);
                    v29 = *(_QWORD *)(v6 + 296);
                    *(_DWORD *)buf = 136315650;
                    *(_QWORD *)&buf[4] = v27;
                    v56 = 2080;
                    v57 = v28;
                    v58 = 2048;
                    v59 = v29;
                    _os_log_error_impl(&dword_224FE9000, v26, OS_LOG_TYPE_ERROR, "[NetworkComponent] Failed to serialize component %s for entity %s(%llu)", buf, 0x20u);
                  }
                }
              }
            }
          }
          else
          {
LABEL_24:
            v30 = *re::ecsNetworkLogObjects(FirstBitSet);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
            {
              v31 = *(_QWORD *)(v6 + 280);
              v32 = *(_QWORD *)(v6 + 296);
              v33 = *((_QWORD *)v15 + 4);
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = v31;
              v56 = 2048;
              v57 = v32;
              v58 = 2080;
              v59 = v33;
              v60 = 1024;
              v61 = v13;
              _os_log_impl(&dword_224FE9000, v30, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] Entity %s(%llu) no longer has dirty component of type %s(shortID == %d)", buf, 0x26u);
            }
          }
        }
        else
        {
          v22 = *re::ecsNetworkLogObjects(FirstBitSet);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v13;
            _os_log_fault_impl(&dword_224FE9000, v22, OS_LOG_TYPE_FAULT, "[NetworkComponent] No componentType for localID %d", buf, 8u);
          }
        }
        FirstBitSet = (re *)re::DynamicBitset<unsigned long long,64ul>::findFirstBitSet(a3 + 312, (unint64_t)v11 + 1);
        v11 = FirstBitSet;
        v12 = (int8x16_t)xmmword_2260F1E80;
      }
      while (FirstBitSet != (re *)-1);
    }
  }
  *(_QWORD *)buf = 0;
  re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, buf, 8uLL);
  v43 = *(unsigned int *)(a3 + 544);
  if ((_DWORD)v43)
  {
    v44 = 0;
    v45 = (int *)(*(_QWORD *)(a3 + 528) + 8);
    while (1)
    {
      v46 = *v45;
      v45 += 4;
      if (v46 < 0)
        break;
      if (v43 == ++v44)
      {
        LODWORD(v44) = *(_DWORD *)(a3 + 544);
        break;
      }
    }
  }
  else
  {
    LODWORD(v44) = 0;
  }
  if ((_DWORD)v43 != (_DWORD)v44)
  {
    v47 = v44;
    do
    {
      *(_QWORD *)buf = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 2840)
                                             + 8 * *(unsigned __int16 *)(*(_QWORD *)(a3 + 528) + 16 * v47 + 12))
                                 + 24) >> 1;
      re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, buf, 8uLL);
      if (*(_DWORD *)(a3 + 544) <= (v44 + 1))
        v48 = v44 + 1;
      else
        v48 = *(_DWORD *)(a3 + 544);
      v49 = v44;
      while (1)
      {
        v47 = (v49 + 1);
        if (v48 - 1 == v49)
          break;
        ++v49;
        LODWORD(v44) = v47;
        if ((*(_DWORD *)(*(_QWORD *)(a3 + 528) + 16 * v47 + 8) & 0x80000000) != 0)
          goto LABEL_52;
      }
      LODWORD(v44) = v48;
LABEL_52:
      ;
    }
    while ((_DWORD)v43 != (_DWORD)v44);
  }
  *(_QWORD *)buf = 0;
  re::snapshot::Encoder::writeRaw<true>((unsigned int *)this, buf, 8uLL);
  *(_BYTE *)(a3 + 48) &= ~1u;
  *(_BYTE *)(a3 + 50) &= ~1u;
  v50 = *(_DWORD *)(a3 + 328);
  if ((v50 & 1) != 0)
    v51 = (_QWORD *)(a3 + 336);
  else
    v51 = *(_QWORD **)(a3 + 344);
  v52 = *(_QWORD *)(a3 + 320);
  while (1)
  {
    v53 = a3 + 336;
    if ((v50 & 1) == 0)
      v53 = *(_QWORD *)(a3 + 344);
    if (v51 == (_QWORD *)(v53 + 8 * v52))
      break;
    *v51++ = 0;
    v50 = *(_DWORD *)(a3 + 328);
  }
  re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::clear(a3 + 512);
}

uint64_t `anonymous namespace'::supportsNetworkSync(_anonymous_namespace_ *this, const re::ecs2::Component *a2)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(_anonymous_namespace_ *, const re::ecs2::Component *))(*(_QWORD *)this + 40))(this, a2);
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2))
    return RESyncSyncableTypeInfoSupportsNetworkSync();
  else
    return 1;
}

void re::ecs2::NetworkSendSystem::buildComponentSnapshot(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t SyncObjectContextEntry;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  char *v10;
  re *v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 buf;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  re::ecs2::NetworkComponent::getComponentBoundTo((uint64_t)&v16, a2);
  v2 = v16;
  if (v16)
  {
    SyncObjectContextEntry = RESyncGetSyncObjectContextEntry();
    *((_QWORD *)&buf + 1) = 0;
    v18 = 0;
    v19 = 0;
    *(_QWORD *)(SyncObjectContextEntry + 464) = &buf;
    v4 = RESyncCommitCaptureSnapshot();
    *(_QWORD *)(SyncObjectContextEntry + 464) = 0;
    if ((v4 & 1) != 0)
    {
      if ((_UNKNOWN *)(*(uint64_t (**)(_QWORD *))(*v2 + 40))(v2) == re::ecs2::ComponentImpl<re::ecs2::LatencyEventsComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
        && kdebug_is_enabled())
      {
        kdebug_trace();
      }
      if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
      {
        v5 = (*(uint64_t (**)(_QWORD *))(*v2 + 40))(v2);
        re::packCharArrayToUInt64ForAriadne(*(re **)(v5 + 32), 0);
        kdebug_trace();
      }
      if (re::internal::enableHighFrequencyNetworkTracing(0, 0))
      {
        v6 = v2[2];
        v7 = *(_QWORD *)(v6 + 200);
        if (v7)
        {
          v8 = re::ecs2::NetworkComponent::owningProcessType(*(re::ecs2::NetworkComponent **)(v6 + 200));
          if (v8)
          {
            v9 = v8;
            v10 = *(_BYTE *)(v7 + 560) ? "Remote" : "Local";
            v11 = (re *)(*(_BYTE *)(v7 + 560) == 1 ? "Shared" : v10);
            re::packCharArrayToUInt64ForAriadne(v11, 0);
            if (re::internal::enableSignposts(0, 0) && re::internal::enableHighFrequencyNetworkTracing(0, 0))
            {
              v12 = (*(uint64_t (**)(_QWORD *))(*v2 + 40))(v2);
              re::packCharArrayToUInt64ForAriadne(*(re **)(v12 + 32), 0);
              if (v9 == 1)
                v13 = "Local";
              else
                v13 = "Remote";
              re::packCharArrayToUInt64ForAriadne((re *)v13, 0);
              kdebug_trace();
            }
          }
        }
      }
    }
    else
    {
      v14 = *re::ecsNetworkLogObjects((re *)v4);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
      {
        v15 = *(_QWORD *)((*(uint64_t (**)(_QWORD *))(*v2 + 40))(v2) + 32);
        LODWORD(buf) = 136380675;
        *(_QWORD *)((char *)&buf + 4) = v15;
        _os_log_fault_impl(&dword_224FE9000, v14, OS_LOG_TYPE_FAULT, "Failed to serialize component of type '%{private}s'", (uint8_t *)&buf, 0xCu);
      }
    }

  }
}

uint64_t re::ecs2::NetworkComponent::findSyncService(re::ecs2::NetworkComponent *this)
{
  uint64_t v1;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return 0;
  v3 = (void *)(v1 + 8);
  v4 = (id)(v1 + 8);
  do
  {
    v5 = v1;
    v1 = *(_QWORD *)(v1 + 24);
  }
  while (v1);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 && *(_QWORD *)(v6 + 56) && (v7 = *((_QWORD *)this + 7)) != 0)
    v8 = *(_QWORD *)(v7 + 2560);
  else
    v8 = 0;

  return v8;
}

BOOL re::ecs2::NetworkComponent::shouldCaptureForSnapshot(re::ecs2::NetworkComponent *this)
{
  int v1;
  re::ecs2::NetworkComponent *v2;
  uint64_t i;
  char *v4;
  int8x8_t v5;
  uint8x8_t v6;

  if ((*((_BYTE *)this + 48) & 2) != 0)
    return 1;
  v1 = *((_DWORD *)this + 94);
  v2 = (v1 & 1) != 0
     ? (re::ecs2::NetworkComponent *)((char *)this + 384)
     : (re::ecs2::NetworkComponent *)*((_QWORD *)this + 49);
  for (i = 0; ; i += v6.u32[0])
  {
    v4 = (char *)this + 384;
    if ((v1 & 1) == 0)
      v4 = (char *)*((_QWORD *)this + 49);
    if (v2 == (re::ecs2::NetworkComponent *)&v4[8 * *((_QWORD *)this + 46)])
      break;
    v5 = *(int8x8_t *)v2;
    v2 = (re::ecs2::NetworkComponent *)((char *)v2 + 8);
    v6 = (uint8x8_t)vcnt_s8(v5);
    v6.i16[0] = vaddlv_u8(v6);
  }
  return i || *((_DWORD *)this + 123) != 0;
}

uint64_t re::ecs2::NetworkComponent::isWritable(re::ecs2::NetworkComponent *this)
{
  if (*((_QWORD *)this + 4) && (RESyncableIsAuthoritative() & 1) == 0)
    return RESyncableIsLocked() ^ 1;
  else
    return 1;
}

re::ecs2::NetworkComponent *re::ecs2::NetworkComponent::requestOwnership(re::ecs2::NetworkComponent *this, BOOL a2, const void *a3, double a4)
{
  if (*((_QWORD *)this + 4))
  {
    this = (re::ecs2::NetworkComponent *)re::ecs2::NetworkComponent::findSyncService(this);
    if (this)
      return (re::ecs2::NetworkComponent *)RESyncServiceRequestOwnership();
  }
  return this;
}

void re::ecs2::NetworkComponent::handOff(re::ecs2::NetworkComponent *this)
{
  if (*((_QWORD *)this + 4))
  {
    RESyncableHandoffOwnership();
    re::ecs2::NetworkComponent::markEntityDirty(this, (re::ecs2::NetworkComponent *)3);
  }
}

void re::ecs2::NetworkComponent::markEntityDirty(re::ecs2::NetworkComponent *this, re::ecs2::NetworkComponent *a2)
{
  uint64_t v3;

  if (!*((_BYTE *)this + 49))
  {
    *((_BYTE *)this + 48) |= a2;
    v3 = *((_QWORD *)this + 7);
    if (v3)
      re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(v3 + 616, v3);
  }
}

void `anonymous namespace'::addToSystemDirtySet(_anonymous_namespace_ *this, re::NetworkSystem *a2, re::ecs2::NetworkComponent *a3)
{
  char v3;
  char *v6;
  char *v7;
  char *v8;
  re::NetworkSystem *v9;
  re::NetworkSystem *v10;

  if (this)
  {
    v3 = (char)a3;
    if (a2)
    {
      v6 = (char *)a2 + 8;
      if ((v3 & 1) == 0)
      {
        if ((v3 & 2) == 0)
        {
LABEL_19:

          return;
        }
        v9 = a2;
        goto LABEL_15;
      }
      v10 = a2;
      v7 = (char *)a2 + 8;
    }
    else
    {
      if ((a3 & 1) == 0)
      {
        if ((a3 & 2) == 0)
          return;
        v9 = 0;
        goto LABEL_16;
      }
      v10 = 0;
    }
    re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::add((uint64_t)this + 2584, (uint64_t *)&v10);
    if (v10)
    {

      v10 = 0;
    }
    if ((v3 & 2) == 0)
    {
LABEL_18:
      if (!a2)
        return;
      goto LABEL_19;
    }
    v9 = a2;
    if (!a2)
    {
LABEL_16:
      re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::add((uint64_t)this + 2632, (uint64_t *)&v9);
      if (v9)
      {

        v9 = 0;
      }
      goto LABEL_18;
    }
LABEL_15:
    v8 = (char *)a2 + 8;
    goto LABEL_16;
  }
}

void re::ecs2::NetworkComponent::createSyncObjectForLocalComponent(uint64_t *a1, re::NetworkSystem **a2, _anonymous_namespace_ *this)
{
  uint64_t SyncableWithTypeInfo;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
    goto LABEL_11;
  *(_WORD *)buf = *(_WORD *)((*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 40))(this) + 16);
  if (re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::contains((uint64_t)(a2 + 52), (unsigned __int16 *)buf))
  {
    goto LABEL_11;
  }
  re::ecs2::NetworkComponent::findSyncService((re::ecs2::NetworkComponent *)a2);
  (*(void (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 40))(this);
  if (!RESyncServiceGetTypeInfo())
  {
    re::NetworkSystem::prepareObjectStores(a2[7]);
    (*(void (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 40))(this);
    if (!RESyncServiceGetTypeInfo())
    {
      v7 = *re::ecsNetworkLogObjects(0);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v8 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 40))(this) + 24) >> 1;
        v9 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 40))(this) + 32);
        *(_DWORD *)buf = 134218243;
        v12 = v8;
        v13 = 2081;
        v14 = v9;
        _os_log_error_impl(&dword_224FE9000, v7, OS_LOG_TYPE_ERROR, "[NetworkComponent] No storage has been registered for component type %llu(%{private}s).", buf, 0x16u);
      }
      goto LABEL_11;
    }
  }
  if ((RESyncSyncableTypeInfoSupportsNetworkSync() & 1) == 0)
  {
LABEL_11:
    *a1 = 0;
    return;
  }
  SyncableWithTypeInfo = RESyncServiceCreateSyncableWithTypeInfo();
  *a1 = SyncableWithTypeInfo;
  MEMORY[0x227692B84]();
  v10 = SyncableWithTypeInfo;
  if (SyncableWithTypeInfo)
  {
    RESyncRetain();
    re::ecs2::NetworkComponent::bindComponentToSyncable((uint64_t)a2, (uint64_t)this, &v10);
    RESyncRelease();
  }
  else
  {
    re::ecs2::NetworkComponent::bindComponentToSyncable((uint64_t)a2, (uint64_t)this, &v10);
  }
}

void re::ecs2::NetworkComponent::markDirty(re::ecs2::NetworkComponent *this, const re::ecs2::Component *a2)
{
  const re::ecs2::ComponentTypeBase *v4;
  re::ecs2::EntityComponentCollection *v5;
  const re::ecs2::ComponentTypeBase *v6;

  {
    if (*((_QWORD *)this + 4))
    {
      v4 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(const re::ecs2::Component *))(*(_QWORD *)a2 + 40))(a2);
      re::ecs2::NetworkComponentInfo::markDirty((re::ecs2::NetworkComponent *)((char *)this + 112), v4, 3);
    }
    if (*((_QWORD *)this + 7))
    {
      v5 = (re::ecs2::EntityComponentCollection *)(*((_QWORD *)a2 + 2) + 32);
      v6 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(const re::ecs2::Component *))(*(_QWORD *)a2 + 40))(a2);
      re::ecs2::EntityComponentCollection::get(v5, v6);
      re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(*((_QWORD *)this + 7) + 880, *((_QWORD *)this + 7));
    }
  }
}

void re::ecs2::NetworkComponent::disableSyncForComponent(_anonymous_namespace_ **this, const re::ecs2::Component *a2)
{
  char *v4;
  const re::ecs2::ComponentTypeBase *v5;
  uint64_t v6;
  uint64_t v7;
  const re::ecs2::ComponentTypeBase *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;

  v4 = (char *)(this + 52);
  v11 = *(_WORD *)((*(uint64_t (**)(const re::ecs2::Component *))(*(_QWORD *)a2 + 40))(a2) + 16);
  re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addNew((uint64_t)v4, &v11);
  if (this[4])
  {
    if (RESyncableIsAuthoritative())
    {
      v5 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(const re::ecs2::Component *))(*(_QWORD *)a2 + 40))(a2);
      v6 = re::ecs2::NetworkComponentInfo::get((re::ecs2::NetworkComponentInfo *)(this + 14), v5);
      if (v6)
      {
        v7 = v6;
        RESyncableSetUserData();
        v8 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(const re::ecs2::Component *))(*(_QWORD *)a2 + 40))(a2);
        re::ecs2::NetworkComponentInfo::remove((re::ecs2::NetworkComponentInfo *)(this + 14), v8);
        v10 = v7;
        RESyncRetain();
        re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::add((uint64_t)(this + 58), &v10);
        if (v10)
          RESyncRelease();
        v9 = *(_WORD *)((*(uint64_t (**)(const re::ecs2::Component *))(*(_QWORD *)a2 + 40))(a2) + 16);
        re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::addNew((uint64_t)(this + 64), &v9);
      }
    }
  }
}

uint64_t re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::add(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;

  v4 = *a2;
  v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v6 = (0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31);
  v7 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v7)
  {
    LODWORD(v8) = 0;
    goto LABEL_8;
  }
  v8 = v6 % v7;
  v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * (v6 % v7));
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
LABEL_8:
    v12 = re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::addAsMove(a1, v8, v6, (uint64_t)a2, a2);
    ++*(_DWORD *)(a1 + 40);
    v11 = *(_QWORD *)(a1 + 16) + 24 * v12;
    return v11 + 16;
  }
  v10 = *(_QWORD *)(a1 + 16);
  while (*(_QWORD *)(v10 + 24 * v9 + 16) != v4)
  {
    LODWORD(v9) = *(_DWORD *)(v10 + 24 * v9 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v9 == 0x7FFFFFFF)
      goto LABEL_8;
  }
  v11 = v10 + 24 * v9;
  return v11 + 16;
}

BOOL re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::contains(uint64_t a1, unsigned __int16 *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;

  v2 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v2)
    return 0;
  v3 = *a2;
  v4 = 0x94D049BB133111EBLL * ((0xBF58476D1CE4E5B9 * v3) ^ ((0xBF58476D1CE4E5B9 * v3) >> 27));
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v4 ^ (v4 >> 31)) % v2));
  if ((_DWORD)v5 == 0x7FFFFFFF)
    return 0;
  v7 = *(_QWORD *)(a1 + 16);
  if (*(unsigned __int16 *)(v7 + 16 * v5 + 12) == (_DWORD)v3)
    return 1;
  do
  {
    v5 = *(_DWORD *)(v7 + 16 * v5 + 8) & 0x7FFFFFFF;
    result = (_DWORD)v5 != 0x7FFFFFFF;
  }
  while ((_DWORD)v5 != 0x7FFFFFFF && *(unsigned __int16 *)(v7 + 16 * v5 + 12) != (_DWORD)v3);
  return result;
}

void re::ecs2::NetworkComponent::setNetworkShareMode(re::ecs2::NetworkComponent *a1, int a2)
{
  if (*((unsigned __int8 *)a1 + 560) != a2)
  {
    *((_BYTE *)a1 + 560) = a2;
    re::ecs2::NetworkComponent::markEntityDirty(a1, (re::ecs2::NetworkComponent *)3);
    re::ecs2::NetworkComponent::resolveViews((uint64_t)a1, 0);
  }
}

void re::ecs2::NetworkComponent::setHost(re::ecs2::NetworkComponent *this, re::ecs2::Entity *a2)
{
  int v3;
  re::ecs2::Entity *v4;
  re::ecs2::Entity *v5;

  v3 = a2 != 0;
  v4 = (re::ecs2::Entity *)*((_QWORD *)this + 2);
  v5 = (re::ecs2::Entity *)*((_QWORD *)v4 + 3);
  if (v5 && (*((_BYTE *)v5 + 288) & 0x80) != 0)
    v5 = 0;
  if (v5 != a2 || *((unsigned __int8 *)this + 617) != v3)
  {
    *((_BYTE *)this + 617) = v3;
    re::ecs2::Entity::setParentInternal(v4, a2, 0xFFFFFFFFFFFFFFFFLL);
    re::ecs2::NetworkComponent::markEntityDirty(this, (re::ecs2::NetworkComponent *)3);
  }
}

uint64_t re::ecs2::NetworkComponent::setAccessControl(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  _QWORD v11[2];
  unint64_t v12;
  uint64_t v13;
  char v14;

  ++re::NetworkSystem::setAclCount;
  if (*(_BYTE *)(a1 + 616))
    return 0;
  v10 = *(_DWORD *)a2;
  re::DynamicArray<re::ecs2::SyncAccessControlEntry>::DynamicArray((uint64_t)v11, a2 + 1);
  v5 = 126 - 2 * __clz(v12);
  if (v12)
    v6 = v5;
  else
    v6 = 0;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,re::ecs2::SyncAccessControlEntry *,false>(v13, v13 + 16 * v12, (uint64_t)&v14, v6, 1);
  if (v10 != *(_DWORD *)(a1 + 568) || v12 != *(_QWORD *)(a1 + 592))
    goto LABEL_18;
  if (v12)
  {
    v7 = v13;
    v8 = *(_QWORD *)(a1 + 608);
    while (*(_QWORD *)v7 == *(_QWORD *)v8 && *(_DWORD *)(v7 + 8) == *(_DWORD *)(v8 + 8))
    {
      v7 += 16;
      v8 += 16;
      if (v7 == v13 + 16 * v12)
        goto LABEL_17;
    }
LABEL_18:
    *(_DWORD *)(a1 + 568) = v10;
    re::DynamicArray<re::ecs2::SyncAccessControlEntry>::operator=(a1 + 576, (uint64_t)v11);
    re::ecs2::NetworkComponent::resolveViews(a1, 0);
    v2 = 1;
    goto LABEL_19;
  }
LABEL_17:
  v2 = 0;
LABEL_19:
  if (v11[0] && v13)
    (*(void (**)(void))(*(_QWORD *)v11[0] + 40))();
  return v2;
}

uint64_t re::ecs2::NetworkComponent::onAdded(uint64_t this, re::NetworkSystem *a2)
{
  uint64_t v2;
  re *v3;
  _QWORD *v4;
  re *SyncableWithTypeId;
  re::NetworkSystemFeatureFlags *v6;
  re *v7;
  NSObject *v8;
  uint64_t v9;
  _anonymous_namespace_ *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _anonymous_namespace_ **v14;
  uint64_t v15;
  _anonymous_namespace_ *v16;
  const re::ecs2::ComponentTypeBase *v17;
  re::NetworkSystemFeatureFlags *v18;
  re *v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  re::ecs2::NetworkComponent *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t buf[4];
  _anonymous_namespace_ *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t Guid;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(this + 56) = a2;
  if (!a2)
    return this;
  v2 = this;
  if (re::internal::enableSignposts(0, 0)
    && re::internal::enableHighFrequencyNetworkTracing(0, 0)
    && re::internal::enableSignposts(0, 0))
  {
    re::packCharArrayToUInt64ForAriadne(*(re **)(*(_QWORD *)(v2 + 16) + 280), 0);
    kdebug_trace();
  }
  v4 = (_QWORD *)(v2 + 32);
  v3 = *(re **)(v2 + 32);
  if (!v3)
  {
    re::ecs2::NetworkComponent::findSyncService((re::ecs2::NetworkComponent *)v2);
    SyncableWithTypeId = (re *)RESyncServiceCreateSyncableWithTypeId();
    if (*(re **)(v2 + 32) != SyncableWithTypeId)
      RESyncableRefRetainer::reset((uint64_t *)(v2 + 32), (uint64_t)SyncableWithTypeId);
    if (SyncableWithTypeId)
      RESyncRelease();
    v6 = (re::NetworkSystemFeatureFlags *)re::ecs2::NetworkComponent::bindEntityTo(SyncableWithTypeId, *(_QWORD *)(v2 + 16));
    v7 = (re *)re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs(v6);
    if ((_DWORD)v7)
    {
      v8 = *re::ecsNetworkLogObjects(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = *(_QWORD *)(v2 + 16);
        v10 = *(_anonymous_namespace_ **)(v9 + 280);
        v11 = *(_QWORD *)(v9 + 296);
        *(_DWORD *)buf = 136381187;
        v34 = v10;
        v35 = 2048;
        v36 = v11;
        v37 = 2048;
        Guid = RESyncableGetGuid();
        _os_log_impl(&dword_224FE9000, v8, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] Binding entity '%{private}s' %llu to syncable %llu", buf, 0x20u);
      }
    }
    if (*(_BYTE *)(v2 + 51) == 1)
    {
      if (!*v4)
      {
        *(_BYTE *)(v2 + 51) = 1;
        goto LABEL_23;
      }
    }
    else
    {
      if (*(_BYTE *)(v2 + 51))
      {
LABEL_23:
        RESyncableSetMigrateWhenAbandoned();
        re::ecs2::NetworkComponent::markEntityDirty((re::ecs2::NetworkComponent *)v2, (re::ecs2::NetworkComponent *)3);
        v12 = *(_QWORD **)(v2 + 16);
        v13 = v12[7];
        if (v13)
        {
          v14 = (_anonymous_namespace_ **)v12[9];
          v15 = 8 * v13;
          do
          {
            v16 = *v14;
            re::ecs2::NetworkComponent::createSyncObjectForLocalComponent(&v32, (re::NetworkSystem **)v2, *v14);
            if (v32)
            {
              v17 = (const re::ecs2::ComponentTypeBase *)(*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)v16 + 40))(v16);
              re::ecs2::NetworkComponentInfo::markDirty((re::ecs2::NetworkComponentInfo *)(v2 + 112), v17, 3);
              v19 = (re *)re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs(v18);
              if ((_DWORD)v19)
              {
                v20 = *re::ecsNetworkLogObjects(v19);
                if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
                {
                  v21 = *(_QWORD *)((*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)v16 + 40))(v16)
                                  + 32);
                  v22 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 296);
                  v23 = RESyncableGetGuid();
                  v24 = RESyncableGetGuid();
                  *(_DWORD *)buf = 134219011;
                  v34 = v16;
                  v35 = 2081;
                  v36 = v21;
                  v37 = 2048;
                  Guid = v22;
                  v39 = 2048;
                  v40 = v23;
                  v41 = 2048;
                  v42 = v24;
                  _os_log_impl(&dword_224FE9000, v20, OS_LOG_TYPE_DEFAULT, "[NetworkComponent], Binding component %p(%{private}s) in authoritative entity %llu(%llu) to syncable %llu", buf, 0x34u);
                }
              }
              RESyncRelease();
            }
            ++v14;
            v15 -= 8;
          }
          while (v15);
          v12 = *(_QWORD **)(v2 + 16);
        }
        v25 = v12[41];
        if (v25)
        {
          v26 = v12[43];
          v27 = 8 * v25;
          do
          {
            v28 = *(re::ecs2::NetworkComponent **)(*(_QWORD *)v26 + 200);
            if (v28 && *((_QWORD *)v28 + 4))
              re::ecs2::NetworkComponent::markEntityDirty(v28, (re::ecs2::NetworkComponent *)3);
            v26 += 8;
            v27 -= 8;
          }
          while (v27);
        }
        *(_BYTE *)(v2 + 50) = 3;
        re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(*(_QWORD *)(v2 + 56) + 528, *(_QWORD *)(v2 + 56));
        re::ecs2::NetworkComponent::resolveViews(v2, 0);
        v29 = *(_QWORD *)(v2 + 56);
        v30 = *(_QWORD *)(v2 + 16);
        v31 = *(_QWORD *)(v2 + 32);
        if (v31)
          RESyncRetain();
        re::NetworkSystem::entityAddedToScene(v29, v30, &v31);
        if (v31)
        {
          RESyncRelease();
          v31 = 0;
        }
        goto LABEL_42;
      }
      if (!*v4)
      {
        *(_BYTE *)(v2 + 51) = 0;
        goto LABEL_23;
      }
    }
    RESyncableSetLocked();
    goto LABEL_23;
  }
  re::ecs2::NetworkComponent::bindEntityTo(v3, *(_QWORD *)(v2 + 16));
LABEL_42:
  this = re::internal::enableSignposts(0, 0);
  if ((_DWORD)this)
  {
    this = re::internal::enableHighFrequencyNetworkTracing(0, 0);
    if ((_DWORD)this)
    {
      this = re::internal::enableSignposts(0, 0);
      if ((_DWORD)this)
      {
        re::packCharArrayToUInt64ForAriadne(*(re **)(*(_QWORD *)(v2 + 16) + 280), 0);
        if (*(_QWORD *)(v2 + 32))
          RESyncableGetGuid();
        return kdebug_trace();
      }
    }
  }
  return this;
}

void re::ecs2::NetworkComponent::onRemoved(re::ecs2::NetworkComponent *this, int a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  re *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t Guid;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  char *v23;
  int v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _BYTE buf[12];
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    if ((*((_BYTE *)this + 176) & 1) != 0)
      v3 = (_QWORD *)((char *)this + 184);
    else
      v3 = (_QWORD *)*((_QWORD *)this + 24);
    v4 = *((_QWORD *)this + 21);
    if (v4)
    {
      v5 = 8 * v4;
      do
      {
        if (*v3)
          RESyncableSetUserData();
        ++v3;
        v5 -= 8;
      }
      while (v5);
    }
    re::ecs2::NetworkComponentInfo::clearAll((uint64_t)this + 112);
  }
  if (*((_QWORD *)this + 7))
  {
    v6 = re::internal::enableSignposts(0, 0);
    if (v6)
    {
      v6 = re::internal::enableHighFrequencyNetworkTracing(0, 0);
      if (v6)
      {
        v7 = *((_QWORD *)this + 7);
        re::packCharArrayToUInt64ForAriadne(*(re **)(*((_QWORD *)this + 2) + 280), 0);
        if (*((_QWORD *)this + 4))
          RESyncableGetGuid();
        re::internal::AriadneSignpostScopeGuard::AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)buf, 6042, v7);
        re::internal::AriadneSignpostScopeGuard::~AriadneSignpostScopeGuard((re::internal::AriadneSignpostScopeGuard *)buf);
      }
    }
    v8 = (re *)re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs((re::NetworkSystemFeatureFlags *)v6);
    if ((_DWORD)v8)
    {
      v9 = *re::ecsNetworkLogObjects(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v10 = *((_QWORD *)this + 2);
        v11 = *(_QWORD *)(v10 + 280);
        v12 = *(_QWORD *)(v10 + 296);
        Guid = RESyncableGetGuid();
        *(_DWORD *)buf = 136381187;
        *(_QWORD *)&buf[4] = v11;
        v31 = 2048;
        v32 = v12;
        v33 = 2048;
        v34 = Guid;
        _os_log_impl(&dword_224FE9000, v9, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] Unbinding entity '%{private}s' %llu from syncable %llu", buf, 0x20u);
      }
    }
    if (!*((_QWORD *)this + 4) || RESyncableIsAuthoritative())
    {
      v14 = *((_QWORD *)this + 7);
      if (v14)
      {
        v15 = *((_QWORD *)this + 2);
        v29 = *((_QWORD *)this + 4);
        if (v29)
          RESyncRetain();
        re::NetworkSystem::entityRemovedFromScene(v14, v15, &v29);
        if (v29)
        {
          RESyncRelease();
          v29 = 0;
        }
        if ((*((_BYTE *)this + 176) & 1) != 0)
          v16 = (_QWORD *)((char *)this + 184);
        else
          v16 = (_QWORD *)*((_QWORD *)this + 24);
        v17 = *((_QWORD *)this + 21);
        if (v17)
        {
          v18 = 8 * v17;
          do
          {
            if (*v16)
              RESyncableSetUserData();
            ++v16;
            v18 -= 8;
          }
          while (v18);
        }
        re::ecs2::NetworkComponentInfo::clearAll((uint64_t)this + 112);
        re::Event<re::NetworkSystem,re::ecs2::Component *>::raise(*((_QWORD *)this + 7) + 704, *((_QWORD *)this + 7));
      }
    }
    if (RESyncableGetDirectView())
    {
      RESyncRetain();
      RESyncableSetDirectView();
      if (!RESyncViewGetObjectCount() && re::ecs2::NetworkComponent::findSyncService(this))
        RESyncServiceRemoveView();
      RESyncRelease();
    }
    v19 = *((_QWORD *)this + 5);
    if (v19)
    {

      *((_QWORD *)this + 5) = 0;
    }
    if (*((_QWORD *)this + 4))
    {
      RESyncableSetUserData();
      if (*((_QWORD *)this + 4))
      {
        RESyncRelease();
        *((_QWORD *)this + 4) = 0;
      }
    }
    *((_BYTE *)this + 48) &= 0xFCu;
    *((_BYTE *)this + 50) &= 0xFCu;
    v20 = *((_DWORD *)this + 82);
    if ((v20 & 1) != 0)
      v21 = (char *)this + 336;
    else
      v21 = (char *)*((_QWORD *)this + 43);
    v22 = *((_QWORD *)this + 40);
    while (1)
    {
      v23 = (char *)this + 336;
      if ((v20 & 1) == 0)
        v23 = (char *)*((_QWORD *)this + 43);
      if (v21 == &v23[8 * v22])
        break;
      *(_QWORD *)v21 = 0;
      v21 += 8;
      v20 = *((_DWORD *)this + 82);
    }
    v24 = *((_DWORD *)this + 94);
    if ((v24 & 1) != 0)
      v25 = (char *)this + 384;
    else
      v25 = (char *)*((_QWORD *)this + 49);
    v26 = *((_QWORD *)this + 46);
    while (1)
    {
      v27 = (char *)this + 384;
      if ((v24 & 1) == 0)
        v27 = (char *)*((_QWORD *)this + 49);
      if (v25 == &v27[8 * v26])
        break;
      *(_QWORD *)v25 = 0;
      v25 += 8;
      v24 = *((_DWORD *)this + 94);
    }
    re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::clear((uint64_t)this + 464);
    re::HashSetBase<unsigned short,unsigned short,re::internal::ValueAsKey<unsigned short>,re::Hash<unsigned short>,re::EqualTo<unsigned short>,true,false>::clear((uint64_t)this + 512);
    *(_QWORD *)buf = this;
    v28 = (char *)this + 8;
    re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::remove(*((_QWORD *)this + 7) + 2584, (uint64_t *)buf);
    re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::remove(*((_QWORD *)this + 7) + 2632, (uint64_t *)buf);
    *((_QWORD *)this + 7) = 0;
    if (*(_QWORD *)buf)

  }
}

uint64_t re::ecs2::NetworkComponent::resolveSelfView(uint64_t a1, uint64_t a2)
{
  double Current;
  uint64_t v5;
  id v6;
  re *v7;
  NSObject *v8;
  re::ecs2::syncPolicy *DirectView;
  re::ecs2::syncPolicy *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  re::ecs2::syncPolicy *v15;
  re::ecs2::syncPolicy *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;
  uint64_t OwnerPeerID;
  re *v24;
  unint64_t v25;
  int v26;
  int v27;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v34;
  uint64_t v35;
  re::ecs2::syncPolicy *v37;
  uint64_t *v38;
  uint64_t v39;
  _anonymous_namespace_ *v40;
  size_t v41;
  re::ecs2::syncPolicy *v42;
  re::ecs2::syncPolicy *v43;
  uint64_t v44;
  size_t v45;
  _BYTE buf[24];
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  Current = CFAbsoluteTimeGetCurrent();
  ++re::NetworkSystem::resolveSelfViewCount;
  if (!re::ecs2::NetworkComponent::findSyncService((re::ecs2::NetworkComponent *)a1)
    || !*(_QWORD *)(a1 + 32)
    || (RESyncableIsDestroyed() & 1) != 0)
  {
    v5 = 0;
    goto LABEL_5;
  }
  DirectView = (re::ecs2::syncPolicy *)RESyncableGetDirectView();
  v11 = DirectView;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12
    && (v13 = *(_QWORD *)(v12 + 24)) != 0
    && (v14 = *(_QWORD *)(v13 + 200)) != 0
    && (DirectView = *(re::ecs2::syncPolicy **)(v14 + 32)) != 0)
  {
    DirectView = (re::ecs2::syncPolicy *)RESyncableGetDirectView();
    v15 = DirectView;
  }
  else
  {
    v15 = 0;
  }
  v43 = v11;
  if (!v11)
  {
    v16 = 0;
    if (v15)
      goto LABEL_23;
LABEL_25:
    v17 = 0;
    goto LABEL_26;
  }
  DirectView = (re::ecs2::syncPolicy *)RESyncViewGetUserData();
  v16 = DirectView;
  if (!v15)
    goto LABEL_25;
LABEL_23:
  DirectView = (re::ecs2::syncPolicy *)RESyncViewGetUserData();
  v17 = (uint64_t)DirectView;
LABEL_26:
  v18 = *(_QWORD *)(a1 + 16);
  v42 = v15;
  if (v18 && (v19 = *(_QWORD *)(v18 + 24)) != 0 && ((*(_BYTE *)(v19 + 288) & 0x80) == 0 || *(_QWORD *)(v19 + 200)))
  {
    if (v17)
    {
      v20 = (int *)(v17 + 56);
      v21 = *(unsigned __int8 *)(v17 + 104);
      v22 = *(_QWORD *)(v19 + 200);
      if (v22 && *(_QWORD *)(v22 + 32))
      {
        OwnerPeerID = RESyncableGetOwnerPeerID();
        goto LABEL_36;
      }
    }
    else
    {
      v20 = re::ecs2::syncPolicy::denyAll(DirectView);
      v21 = 0;
    }
  }
  else
  {
    v21 = 1;
    v20 = re::ecs2::syncPolicy::allowAll(DirectView);
  }
  OwnerPeerID = 0;
LABEL_36:
  *(_DWORD *)buf = 0;
  v49 = 0;
  v47 = 0;
  *(_OWORD *)&buf[8] = 0uLL;
  v48 = 0;
  re::ecs2::SyncAccessControl::inherit((uint64_t)buf, v20, (int *)(a1 + 568));
  if (*(_BYTE *)(a1 + 617))
  {
    v44 = OwnerPeerID;
    LODWORD(v45) = 0;
    re::DynamicArray<re::ecs2::SyncAccessControlEntry>::removeStable(&buf[8], (uint64_t)&v44);
    if (*(_QWORD *)(a1 + 32))
      v25 = RESyncableGetOwnerPeerID();
    else
      v25 = 0;
    re::ecs2::SyncAccessControl::addEntry(buf, v25, 0);
  }
  v26 = *(unsigned __int8 *)(a1 + 560);
  if (v26 == 1)
    v27 = v21;
  else
    v27 = 2;
  if (v21 == v26 || v21 == 1)
    v29 = *(unsigned __int8 *)(a1 + 560);
  else
    v29 = v27;
  if (v16
    && *((unsigned __int8 *)v16 + 104) == v29
    && *(_DWORD *)buf == *((_DWORD *)v16 + 14)
    && v47 == *((_QWORD *)v16 + 10))
  {
    if (!v47)
      goto LABEL_86;
    v30 = v49;
    v31 = *((_QWORD *)v16 + 12);
    v32 = 1;
    while (*(_QWORD *)v30 == *(_QWORD *)v31 && *(_DWORD *)(v30 + 8) == *(_DWORD *)(v31 + 8))
    {
      v5 = 0;
      v30 += 16;
      v31 += 16;
      if (v30 == v49 + 16 * v47)
        goto LABEL_82;
    }
  }
  if (!v17
    || *(unsigned __int8 *)(v17 + 104) != v29
    || *(_DWORD *)buf != *(_DWORD *)(v17 + 56)
    || v47 != *(_QWORD *)(v17 + 80))
  {
LABEL_77:
    v38 = re::globalAllocators(v24);
    v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38[2] + 32))(v38[2], 120, 8);
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)v39, 0);
    *(_QWORD *)v39 = &off_24ED696D0;
    *(_OWORD *)(v39 + 40) = 0u;
    *(_OWORD *)(v39 + 24) = 0u;
    re::DynamicString::setCapacity((_QWORD *)(v39 + 24), 0);
    *(_DWORD *)(v39 + 56) = 0;
    *(_QWORD *)(v39 + 96) = 0;
    *(_QWORD *)(v39 + 72) = 0;
    *(_QWORD *)(v39 + 80) = 0;
    *(_DWORD *)(v39 + 88) = 0;
    *(_QWORD *)(v39 + 64) = 0;
    *(_QWORD *)(v39 + 112) = RESyncViewCreate();
    RESyncViewSetUserData();
    v41 = strlen(*(const char **)(*(_QWORD *)(a1 + 16) + 280));
    v44 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 280);
    v45 = v41;
    re::DynamicString::operator=((re::DynamicString *)(v39 + 24), (uint64_t)&v44);
    *(_DWORD *)(v39 + 56) = *(_DWORD *)buf;
    re::DynamicArray<re::ecs2::SyncAccessControlEntry>::operator=(v39 + 64, (uint64_t *)&buf[8]);
    *(_BYTE *)(v39 + 104) = v29;
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(a1 + 40), v39);
    RESyncableGetOwnerPeerID();
    RESyncViewSetOwnerPeerID();
    RESyncableGetFromPeerID();
    RESyncViewSetFromPeerID();
    RESyncableSetDirectView();
    RESyncServiceAddView();

    v37 = v43;
LABEL_78:
    if (v37 && !RESyncViewGetObjectCount())
      RESyncServiceRemoveView();
    v32 = 0;
    v5 = 1;
    goto LABEL_82;
  }
  if (v47)
  {
    v34 = v49;
    v35 = *(_QWORD *)(v17 + 96);
    while (*(_QWORD *)v34 == *(_QWORD *)v35 && *(_DWORD *)(v34 + 8) == *(_DWORD *)(v35 + 8))
    {
      v34 += 16;
      v35 += 16;
      if (v34 == v49 + 16 * v47)
        goto LABEL_75;
    }
    goto LABEL_77;
  }
LABEL_75:
  v37 = v43;
  if (v42 != v43)
  {
    re::SharedPtr<re::SkeletalPoseJointDefinition>::reset((uint64_t *)(a1 + 40), v17);
    RESyncableSetDirectView();
    goto LABEL_78;
  }
LABEL_86:
  v5 = 0;
  v32 = 1;
LABEL_82:
  re::ecs2::NetworkComponent::resolveLocalViews(a1, a2, v29, (uint64_t)buf, v32);
  if (*(_QWORD *)&buf[8] && v49)
    (*(void (**)(void))(**(_QWORD **)&buf[8] + 40))();
LABEL_5:
  if (a2)
  {
    *(_QWORD *)buf = a1;
    if (a1)
      v6 = (id)(a1 + 8);
    re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::remove(a2, (uint64_t *)buf);
    if (*(_QWORD *)buf)

  }
  *(double *)&re::NetworkSystem::resolveSelfViewTime = *(double *)&re::NetworkSystem::resolveSelfViewTime
                                                     + CFAbsoluteTimeGetCurrent()
                                                     - Current;
  if (*(double *)&re::NetworkSystem::resolveSelfViewTime > 0.1)
  {
    v8 = *re::ecsNetworkLogObjects(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)&buf[4] = re::NetworkSystem::resolveSelfViewCount;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = re::NetworkSystem::setAclCount;
      _os_log_impl(&dword_224FE9000, v8, OS_LOG_TYPE_DEFAULT, "More than 100ms spent in NetworkComponent::resolveSelfView: resolveSelfView: %zu, setAccessControl: %zu", buf, 0x16u);
    }
    re::NetworkSystem::resolveSelfViewTime = 0;
  }
  return v5;
}

uint64_t re::ecs2::NetworkComponent::resolveChildEntityViews(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 328);
    if (v3)
    {
      v5 = *(_QWORD *)(v2 + 344);
      v6 = 8 * v3;
      do
      {
        v7 = *(_QWORD *)(*(_QWORD *)v5 + 200);
        if (v7)
        {
          result = re::ecs2::NetworkComponent::resolveSelfView(*(_QWORD *)(*(_QWORD *)v5 + 200), a2);
          if ((_DWORD)result)
            result = re::ecs2::NetworkComponent::resolveChildEntityViews(v7, a2);
        }
        v5 += 8;
        v6 -= 8;
      }
      while (v6);
    }
  }
  return result;
}

void re::ecs2::NetworkComponent::resolveLocalViews(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  unsigned int v9;
  unint64_t *v10;
  _anonymous_namespace_ *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _anonymous_namespace_ *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t i;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  re::NetworkSystem::LocalPeer *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  re::NetworkSystem::LocalPeer *v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  id v65;
  BOOL v66;
  uint64_t OwnerPeerID;
  unint64_t v68;
  int v69;
  unsigned int v70;
  uint64_t v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  __int128 v81;
  __int128 v82;
  unsigned int v83;
  _BYTE v84[12];
  unint64_t v85;
  int v86;

  if (!*(_QWORD *)(a1 + 56)
    || !re::NetworkSystemFeatureFlags::enableAltSharedApp((re::NetworkSystemFeatureFlags *)a1))
  {
    return;
  }
  v9 = *(_DWORD *)(a1 + 80);
  if (a3 > 1)
  {
    re::NetworkSystem::exitingLocalPeerView(*(re::NetworkSystem::LocalPeer **)(a1 + 56), (re::ecs2::NetworkComponent *)a1);
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) += 2;
    if (!a5)
      return;
    goto LABEL_79;
  }
  v83 = 0;
  v81 = 0u;
  v82 = 0u;
  *(_QWORD *)v84 = 0x7FFFFFFFLL;
  v75 = a3;
  if ((v9 & 1) != 0)
    v10 = (unint64_t *)(a1 + 88);
  else
    v10 = *(unint64_t **)(a1 + 96);
  v73 = v9;
  v74 = a5;
  v11 = (_anonymous_namespace_ *)(a1 + 64);
  v12 = *(_QWORD *)(a1 + 72);
  if (v12)
  {
    v78 = a4;
    v79 = 0;
    v76 = 0;
    v13 = 0;
    v77 = 0;
    v14 = 0;
    v15 = 0;
    v16 = &v10[v12];
    do
    {
      v17 = *v10;
      v18 = *(_QWORD *)(a1 + 56);
      v85 = *v10;
      v19 = re::HashTable<unsigned long long,re::NetworkSystem::LocalPeer,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::tryGet(v18 + 2944, (uint64_t *)&v85);
      v20 = v19;
      if (!v19)
        goto LABEL_19;
      if (!*(_BYTE *)(v19 + 8))
      {
        v21 = (_DWORD *)v78;
        v22 = *(_QWORD *)(v78 + 24);
        if (v22)
        {
          v21 = (_DWORD *)(*(_QWORD *)(v78 + 40) + 8);
          v23 = 16 * v22;
          while (*((_QWORD *)v21 - 1) != v17)
          {
            v21 += 4;
            v23 -= 16;
            if (!v23)
            {
              v21 = (_DWORD *)v78;
              break;
            }
          }
        }
        if (!*v21)
        {
LABEL_19:
          v24 = v11;
          v25 = 0x94D049BB133111EBLL
              * ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v17 ^ (v17 >> 30))) >> 27));
          v26 = v25 ^ (v25 >> 31);
          v27 = v81;
          if ((_QWORD)v81)
          {
            v27 = v26 % v79;
            for (i = *(unsigned int *)(v13 + 4 * v27);
                  (_DWORD)i != 0x7FFFFFFF;
                  i = *(_DWORD *)(v15 + 32 * i + 8) & 0x7FFFFFFF)
            {
              if (*(_QWORD *)(v15 + 32 * i + 16) == v17)
                goto LABEL_30;
            }
          }
          v29 = *(unsigned int *)v84;
          if (*(_DWORD *)v84 == 0x7FFFFFFF)
          {
            v30 = v14;
            v79 = DWORD2(v82);
            if ((_DWORD)v14 == DWORD2(v82))
            {
              re::HashTable<unsigned long long,re::ecs2::Scene const*,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::setCapacity((uint64_t)&v81, 2 * v77);
              v30 = v83;
              v79 = DWORD2(v82);
              v27 = v26 % DWORD2(v82);
              v15 = v82;
              v76 = *((_QWORD *)&v81 + 1);
            }
            v31 = v30 + 1;
            v83 = v31;
            v29 = v14;
            v32 = *(_DWORD *)(v15 + 32 * v14 + 8);
            v13 = v76;
          }
          else
          {
            v32 = *(_DWORD *)(v15 + 32 * *(unsigned int *)v84 + 8);
            *(_DWORD *)v84 = v32 & 0x7FFFFFFF;
            v31 = v14;
            LODWORD(v14) = v29;
          }
          *(_DWORD *)(v15 + 32 * v29 + 8) = v32 | 0x80000000;
          v15 = v82;
          v33 = v82 + 32 * v29;
          *(_DWORD *)(v33 + 8) = *(_DWORD *)(v33 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v27);
          *(_QWORD *)v33 = v26;
          *(_QWORD *)(v33 + 16) = v17;
          *(_QWORD *)(v33 + 24) = v20;
          *(_DWORD *)(v13 + 4 * v27) = v14;
          v77 = ++HIDWORD(v82);
          ++*(_DWORD *)&v84[4];
          v14 = v31;
LABEL_30:
          v11 = v24;
        }
      }
      ++v10;
    }
    while (v10 != v16);
    v34 = v83;
    a3 = v75;
    v35 = 0;
    if (v83)
    {
      v36 = (int *)(v82 + 8);
      a4 = v78;
      while (1)
      {
        v37 = *v36;
        v36 += 8;
        if (v37 < 0)
          break;
        if (v83 == ++v35)
        {
          LODWORD(v35) = v83;
          break;
        }
      }
    }
    else
    {
      a4 = v78;
    }
  }
  else
  {
    v34 = 0;
    LODWORD(v35) = 0;
    a3 = v75;
  }
  if (v34 != (_DWORD)v35)
  {
    v38 = v35;
    v39 = v82;
    do
    {
      v40 = v39 + 32 * v38;
      v41 = *(re::NetworkSystem::LocalPeer **)(v40 + 24);
      if (v41)
        re::NetworkSystem::LocalPeer::exit(v41, (re::ecs2::NetworkComponent *)a1);
      re::DynamicOverflowArray<unsigned long long,2ul>::remove((uint64_t)v11, *(_QWORD *)(v40 + 16));
      if (v83 <= (int)v35 + 1)
        v42 = v35 + 1;
      else
        v42 = v83;
      while (1)
      {
        v38 = (v35 + 1);
        if (v42 - 1 == (_DWORD)v35)
          break;
        LODWORD(v35) = v35 + 1;
        v43 = v38;
        if ((*(_DWORD *)(v39 + 32 * v38 + 8) & 0x80000000) != 0)
          goto LABEL_50;
      }
      v43 = v42;
LABEL_50:
      LODWORD(v35) = v43;
    }
    while (v34 != v43);
  }
  v44 = *(_QWORD *)(a1 + 56);
  v45 = *(unsigned int *)(v44 + 2976);
  if ((_DWORD)v45)
  {
    v46 = 0;
    v47 = (_DWORD *)(*(_QWORD *)(v44 + 2960) + 8);
    while ((*v47 & 0x80000000) == 0)
    {
      v47 += 68;
      if (v45 == ++v46)
      {
        LODWORD(v46) = *(_DWORD *)(v44 + 2976);
        break;
      }
    }
  }
  else
  {
    LODWORD(v46) = 0;
  }
  if ((_DWORD)v45 != (_DWORD)v46)
  {
    v48 = v46;
    do
    {
      v49 = *(_QWORD *)(v44 + 2960) + 272 * v48;
      v52 = *(_QWORD *)(v49 + 24);
      v51 = (re::NetworkSystem::LocalPeer *)(v49 + 24);
      v50 = v52;
      if (*((_BYTE *)v51 + 8))
        goto LABEL_60;
      v53 = *(_QWORD *)(a4 + 24);
      v54 = (_DWORD *)a4;
      if (v53)
      {
        v54 = (_DWORD *)(*(_QWORD *)(a4 + 40) + 8);
        v55 = 16 * v53;
        while (*((_QWORD *)v54 - 1) != v50)
        {
          v54 += 4;
          v55 -= 16;
          if (!v55)
          {
            v54 = (_DWORD *)a4;
            break;
          }
        }
      }
      if (!*v54)
      {
LABEL_60:
        re::DynamicOverflowArray<unsigned long long,2ul>::indexOf((uint64_t)&v85, (uint64_t)v11, v50);
        if (!(_BYTE)v85)
        {
          re::NetworkSystem::LocalPeer::enter(v51, (re::ecs2::NetworkComponent *)a1);
          re::DynamicOverflowArray<unsigned long long,2ul>::add(v11, v51);
        }
      }
      else
      {
        re::DynamicOverflowArray<unsigned long long,2ul>::indexOf((uint64_t)&v85, (uint64_t)v11, v50);
        if ((_BYTE)v85)
        {
          re::NetworkSystem::LocalPeer::exit(v51, (re::ecs2::NetworkComponent *)a1);
          re::DynamicOverflowArray<unsigned long long,2ul>::remove((uint64_t)v11, *(_QWORD *)v51);
        }
      }
      if (*(_DWORD *)(v44 + 2976) <= (v46 + 1))
        v56 = v46 + 1;
      else
        v56 = *(_DWORD *)(v44 + 2976);
      while (1)
      {
        v48 = (v46 + 1);
        if (v56 - 1 == (_DWORD)v46)
          break;
        LODWORD(v46) = v46 + 1;
        v57 = v48;
        if ((*(_DWORD *)(*(_QWORD *)(v44 + 2960) + 272 * v48 + 8) & 0x80000000) != 0)
          goto LABEL_77;
      }
      v57 = v56;
LABEL_77:
      LODWORD(v46) = v57;
    }
    while ((_DWORD)v45 != v57);
  }
  re::HashTable<void *,re::internal::AnimationCompositionChainBase *,re::Hash<void *>,re::EqualTo<void *>,true,false>::deinit((uint64_t *)&v81);
  v9 = v73;
  if (v74)
  {
LABEL_79:
    if ((*(_DWORD *)(a1 + 80) ^ v9) >= 2)
    {
      v58 = *(_QWORD *)(a1 + 16);
      v59 = *(_QWORD *)(v58 + 328);
      if (v59)
      {
        v60 = *(uint64_t **)(v58 + 344);
        v61 = 8 * v59;
        do
        {
          v62 = *v60;
          if (*v60)
            v63 = (id)(v62 + 8);
          v64 = *(_QWORD *)(v62 + 200);
          if (v64)
          {
            if (!a2)
              goto LABEL_89;
            *(_QWORD *)&v81 = *(_QWORD *)(v62 + 200);
            v65 = (id)(v64 + 8);
            v66 = re::HashSetBase<re::ecs2::Entity *,re::ecs2::Entity *,re::internal::ValueAsKey<re::ecs2::Entity *>,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::contains(a2, (uint64_t *)&v81);
            if ((_QWORD)v81)

            if (!v66)
            {
LABEL_89:
              LODWORD(v81) = 0;
              *(_QWORD *)&v84[4] = 0;
              v82 = 0uLL;
              *((_QWORD *)&v81 + 1) = 0;
              v83 = 0;
              re::ecs2::SyncAccessControl::inherit((uint64_t)&v81, (int *)a4, (int *)(v64 + 568));
              if (*(_BYTE *)(v64 + 617))
              {
                OwnerPeerID = *(_QWORD *)(a1 + 32);
                if (OwnerPeerID)
                  OwnerPeerID = RESyncableGetOwnerPeerID();
                v85 = OwnerPeerID;
                v86 = 0;
                re::DynamicArray<re::ecs2::SyncAccessControlEntry>::removeStable((_QWORD *)&v81 + 1, (uint64_t)&v85);
                if (*(_QWORD *)(v64 + 32))
                  v68 = RESyncableGetOwnerPeerID();
                else
                  v68 = 0;
                re::ecs2::SyncAccessControl::addEntry(&v81, v68, 0);
              }
              v69 = *(unsigned __int8 *)(v64 + 560);
              if (v69 == 1)
                v70 = a3;
              else
                v70 = 2;
              if (v69 == a3 || a3 == 1)
                v72 = *(unsigned __int8 *)(v64 + 560);
              else
                v72 = v70;
              re::ecs2::NetworkComponent::resolveLocalViews(v64, a2, v72, &v81, 1);
              if (*((_QWORD *)&v81 + 1))
              {
                if (*(_QWORD *)&v84[4])
                  (*(void (**)(void))(**((_QWORD **)&v81 + 1) + 40))();
              }
            }
          }

          ++v60;
          v61 -= 8;
        }
        while (v61);
      }
    }
  }
}

uint64_t re::DynamicOverflowArray<unsigned long long,2ul>::remove(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  char v8[8];
  unint64_t v9;
  uint64_t v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  unint64_t v16;
  __int16 v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  result = re::DynamicOverflowArray<unsigned long long,2ul>::indexOf((uint64_t)v8, a1, a2);
  if (v8[0])
  {
    v4 = v9;
    v5 = *(_QWORD *)(a1 + 8);
    if (v5 <= v9)
    {
      v10 = 0;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v19 = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      v11 = 136315906;
      v12 = "removeAt";
      v13 = 1024;
      v14 = 1000;
      v15 = 2048;
      v16 = v4;
      v17 = 2048;
      v18 = v5;
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    if (v5 - 1 > v9)
    {
      if ((*(_BYTE *)(a1 + 16) & 1) != 0)
        v6 = a1 + 24;
      else
        v6 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(v6 + 8 * v9) = *(_QWORD *)(v6 + 8 * v5 - 8);
    }
    v7 = *(_DWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v5 - 1;
    *(_DWORD *)(a1 + 16) = v7 + 2;
  }
  return result;
}

uint64_t re::ecs2::recursiveResolveAccessControl@<X0>(re::ecs2 *this@<X0>, int *a2@<X8>)
{
  uint64_t result;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD v10[3];
  int v11;
  uint64_t v12;
  int v13;
  _QWORD v14[5];

  *a2 = *((_DWORD *)this + 142);
  result = re::DynamicArray<re::ecs2::SyncAccessControlEntry>::DynamicArray((uint64_t)(a2 + 2), (uint64_t *)this + 72);
  for (i = *((_QWORD *)this + 2); i; i = *(_QWORD *)(v8 + 16))
  {
    v7 = *(_QWORD *)(i + 24);
    if (!v7)
      break;
    v8 = *(_QWORD *)(v7 + 200);
    if (!v8)
      break;
    v13 = *(_DWORD *)(v8 + 568);
    re::DynamicArray<re::ecs2::SyncAccessControlEntry>::DynamicArray((uint64_t)v14, (uint64_t *)(v8 + 576));
    v9 = 0;
    v12 = 0;
    memset(v10, 0, sizeof(v10));
    v11 = 0;
    re::ecs2::SyncAccessControl::inherit((uint64_t)&v9, &v13, a2);
    *a2 = v9;
    re::DynamicArray<re::ecs2::SyncAccessControlEntry>::operator=((uint64_t)(a2 + 2), (uint64_t)v10);
    if (v10[0] && v12)
      (*(void (**)(void))(*(_QWORD *)v10[0] + 40))();
    result = v14[0];
    if (v14[0])
    {
      if (v14[4])
        result = (*(uint64_t (**)(void))(*(_QWORD *)v14[0] + 40))();
    }
  }
  return result;
}

BOOL re::ecs2::NetworkComponent::isViewableByPeer(re::ecs2::NetworkComponent *this, uint64_t a2)
{
  uint64_t UserData;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  int *v9;
  uint64_t v10;
  BOOL v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*((_QWORD *)this + 4))
  {
    if (RESyncableGetHierarchicalView() && (UserData = RESyncViewGetUserData()) != 0)
    {
      v4 = (_DWORD *)(UserData + 56);
      v5 = *(_QWORD *)(UserData + 80);
      if (v5)
      {
        v6 = *(_QWORD *)(UserData + 96) + 8;
        v7 = 16 * v5;
        while (*(_QWORD *)(v6 - 8) != a2)
        {
          v6 += 16;
          v7 -= 16;
          if (!v7)
            return *v4 == 0;
        }
        v4 = (_DWORD *)v6;
      }
      return *v4 == 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v9 = &v13;
    re::ecs2::recursiveResolveAccessControl(this, &v13);
    if (v15)
    {
      v9 = (int *)(v16 + 8);
      v10 = 16 * v15;
      while (*((_QWORD *)v9 - 1) != a2)
      {
        v9 += 4;
        v10 -= 16;
        if (!v10)
        {
          v9 = &v13;
          break;
        }
      }
    }
    v8 = *v9 == 0;
    if (v14)
      v11 = v16 == 0;
    else
      v11 = 1;
    if (!v11)
      (*(void (**)(void))(*(_QWORD *)v14 + 40))();
  }
  return v8;
}

void re::ecs2::NetworkComponentInfo::remove(re::ecs2::NetworkComponentInfo *this, const re::ecs2::ComponentTypeBase *a2)
{
  uint64_t v3;
  const __int16 *v5;
  int16x8_t *v6;
  int16x8_t v7;
  int v8;
  int16x8_t *v9;
  uint16x8_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int16 v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  re *v18;
  NSObject *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  char *v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint8_t buf[16];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v3 = *((unsigned __int16 *)this + 1);
  if (!*((_WORD *)this + 1))
    goto LABEL_11;
  v5 = (const __int16 *)((char *)a2 + 16);
  v6 = (int16x8_t *)*((_QWORD *)this + 1);
  v7 = vld1q_dup_s16(v5);
  v8 = 1;
  v9 = v6;
  while (1)
  {
    v10 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v7, *v9), (int8x16_t)xmmword_2260F1E80);
    v10.i16[0] = vmaxvq_u16(v10);
    if (v10.i32[0])
      break;
    v8 -= 8;
    ++v9;
    if (!--v3)
      goto LABEL_11;
  }
  v11 = v10.u16[0] - v8;
  v12 = *(unsigned __int16 *)this;
  if ((int)v11 < (int)v12)
  {
    v13 = v12 - 1;
    v6->i16[v11] = v6->i16[v12 - 1];
    v6->i16[*(unsigned __int16 *)this - 1] = -1;
    v14 = *(_WORD *)this - 1;
    *(_WORD *)this = v14;
    *((_WORD *)this + 1) = (v14 + 7) >> 3;
    v15 = *((_QWORD *)this + 7);
    if (v15 <= v11)
    {
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      *(_OWORD *)buf = 0u;
      os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
      _os_log_send_and_compose_impl();
      _os_crash_msg();
      __break(1u);
    }
    v16 = v15 - 1;
    if (v15 - 1 > v11)
    {
      if ((*((_BYTE *)this + 64) & 1) != 0)
        v17 = (char *)this + 72;
      else
        v17 = (char *)*((_QWORD *)this + 10);
      v21 = &v17[8 * v15];
      v22 = *(_QWORD *)&v17[8 * v11];
      *(_QWORD *)&v17[8 * v11] = *((_QWORD *)v21 - 1);
      *((_QWORD *)v21 - 1) = v22;
    }
    v23 = *((_DWORD *)this + 16);
    if ((v23 & 1) != 0)
      v24 = (char *)this + 72;
    else
      v24 = (char *)*((_QWORD *)this + 10);
    v25 = &v24[8 * v15];
    if (*((_QWORD *)v25 - 1))
    {
      RESyncRelease();
      *((_QWORD *)v25 - 1) = 0;
      v23 = *((_DWORD *)this + 16);
      v16 = *((_QWORD *)this + 7) - 1;
    }
    *((_QWORD *)this + 7) = v16;
    *((_DWORD *)this + 16) = v23 + 2;
    if (re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)this + 200, v13))
      re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 200, v11);
    else
      re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 200, v11);
    v26 = *((_QWORD *)this + 30);
    if ((v13 & 0x3F) != 0)
      v27 = (v13 >> 6) + 1;
    else
      v27 = v13 >> 6;
    *((_QWORD *)this + 30) = v13;
    *(_QWORD *)buf = 0;
    re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::NetworkComponentInfo *)((char *)this + 200), v27, buf);
    if (v13 && v26 > v13)
    {
      v28 = 63;
      v29 = *((_QWORD *)this + 30) & 0x3FLL;
      if (v29 && v29 != 63)
        v28 = ~(-1 << v29);
      if ((*((_BYTE *)this + 216) & 1) != 0)
        v30 = (char *)this + 224;
      else
        v30 = (char *)*((_QWORD *)this + 29);
      *(_QWORD *)&v30[8 * *((_QWORD *)this + 26) - 8] &= v28;
    }
    if (re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)this + 248, v13))
      re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 248, v11);
    else
      re::DynamicBitset<unsigned long long,64ul>::clearBit((uint64_t)this + 248, v11);
    v31 = *((_QWORD *)this + 36);
    *((_QWORD *)this + 36) = v13;
    *(_QWORD *)buf = 0;
    re::DynamicOverflowArray<unsigned long long,2ul>::resize((re::ecs2::NetworkComponentInfo *)((char *)this + 248), v27, buf);
    if (v13 && v31 > v13)
    {
      v32 = 63;
      v33 = *((_QWORD *)this + 36) & 0x3FLL;
      if (v33 && v33 != 63)
        v32 = ~(-1 << v33);
      if ((*((_BYTE *)this + 264) & 1) != 0)
        v34 = (char *)this + 272;
      else
        v34 = (char *)*((_QWORD *)this + 35);
      *(_QWORD *)&v34[8 * *((_QWORD *)this + 32) - 8] &= v32;
    }
  }
  else
  {
LABEL_11:
    v18 = (re *)re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs(this);
    if ((_DWORD)v18)
    {
      v19 = *re::ecsNetworkLogObjects(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        v20 = *((_QWORD *)a2 + 4);
        *(_DWORD *)buf = 136315138;
        *(_QWORD *)&buf[4] = v20;
        _os_log_impl(&dword_224FE9000, v19, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] no component of type %s found in component info table", buf, 0xCu);
      }
    }
  }
}

void re::ecs2::NetworkComponentInfo::markDirty(re::ecs2::NetworkComponentInfo *this, const re::ecs2::ComponentTypeBase *a2, char a3)
{
  uint64_t v4;
  const __int16 *v7;
  int16x8_t *v8;
  int16x8_t v9;
  int v10;
  uint16x8_t v11;
  unint64_t v12;
  char *v13;
  re *v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = *((unsigned __int16 *)this + 1);
  if (!*((_WORD *)this + 1))
    goto LABEL_14;
  v7 = (const __int16 *)((char *)a2 + 16);
  v8 = (int16x8_t *)*((_QWORD *)this + 1);
  v9 = vld1q_dup_s16(v7);
  v10 = 1;
  while (1)
  {
    v11 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v9, *v8), (int8x16_t)xmmword_2260F1E80);
    v11.i16[0] = vmaxvq_u16(v11);
    if (v11.i32[0])
      break;
    v10 -= 8;
    ++v8;
    if (!--v4)
      goto LABEL_14;
  }
  v12 = v11.u16[0] - v10;
  if ((int)v12 < *(unsigned __int16 *)this)
  {
    if ((a3 & 1) != 0
      && re::NetworkSystemFeatureFlags::enableAltSharedApp(this)
      && (re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)this + 200, v12) & 1) == 0)
    {
      re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)this + 200, v12);
    }
    if ((a3 & 2) != 0)
    {
      v13 = (char *)this + 248;
      if ((re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)v13, v12) & 1) == 0)
        re::DynamicBitset<unsigned long long,256ul>::setBit((uint64_t)v13, v12);
    }
  }
  else
  {
LABEL_14:
    v14 = (re *)re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs(this);
    if ((_DWORD)v14)
    {
      v15 = *re::ecsNetworkLogObjects(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *((_QWORD *)a2 + 4);
        v17 = 136315138;
        v18 = v16;
        _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] no component of type %s found in component info table", (uint8_t *)&v17, 0xCu);
      }
    }
  }
}

uint64_t re::ecs2::NetworkComponentInfo::isDirty(re::ecs2::NetworkComponentInfo *this, const re::ecs2::ComponentTypeBase *a2, char a3)
{
  uint64_t v4;
  const __int16 *v7;
  int16x8_t *v8;
  int16x8_t v9;
  int v10;
  uint16x8_t v11;
  unint64_t v12;
  char *v13;
  re *v14;
  NSObject *v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v4 = *((unsigned __int16 *)this + 1);
  if (!*((_WORD *)this + 1))
    goto LABEL_10;
  v7 = (const __int16 *)((char *)a2 + 16);
  v8 = (int16x8_t *)*((_QWORD *)this + 1);
  v9 = vld1q_dup_s16(v7);
  v10 = 1;
  while (1)
  {
    v11 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v9, *v8), (int8x16_t)xmmword_2260F1E80);
    v11.i16[0] = vmaxvq_u16(v11);
    if (v11.i32[0])
      break;
    v10 -= 8;
    ++v8;
    if (!--v4)
      goto LABEL_10;
  }
  v12 = v11.u16[0] - v10;
  if ((int)v12 >= *(unsigned __int16 *)this)
  {
LABEL_10:
    v14 = (re *)re::NetworkSystemFeatureFlags::enableECSNetworkHFLogs(this);
    if ((_DWORD)v14)
    {
      v15 = *re::ecsNetworkLogObjects(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *((_QWORD *)a2 + 4);
        v18 = 136315138;
        v19 = v16;
        _os_log_impl(&dword_224FE9000, v15, OS_LOG_TYPE_DEFAULT, "[NetworkComponent] no component of type %s found in component info table", (uint8_t *)&v18, 0xCu);
      }
    }
    return 0;
  }
  if ((a3 & 1) == 0 || !re::NetworkSystemFeatureFlags::enableAltSharedApp(this))
  {
    if ((a3 & 2) != 0)
    {
      v13 = (char *)this + 248;
      return re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)v13, v12);
    }
    return 0;
  }
  v13 = (char *)this + 200;
  return re::DynamicBitset<unsigned long long,256ul>::getBit((uint64_t)v13, v12);
}

uint64_t re::ecs2::NetworkComponentInfo::get(re::ecs2::NetworkComponentInfo *this, const re::ecs2::ComponentTypeBase *a2)
{
  uint64_t v2;
  const __int16 *v3;
  int16x8_t *v4;
  int16x8_t v5;
  int i;
  uint16x8_t v7;
  uint64_t v8;
  char *v9;

  v2 = *((unsigned __int16 *)this + 1);
  if (!*((_WORD *)this + 1))
    return 0;
  v3 = (const __int16 *)((char *)a2 + 16);
  v4 = (int16x8_t *)*((_QWORD *)this + 1);
  v5 = vld1q_dup_s16(v3);
  for (i = 1; ; i -= 8)
  {
    v7 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v5, *v4), (int8x16_t)xmmword_2260F1E80);
    v7.i16[0] = vmaxvq_u16(v7);
    if (v7.i32[0])
      break;
    ++v4;
    if (!--v2)
      return 0;
  }
  v8 = v7.u16[0] - i;
  if ((int)v8 >= *(unsigned __int16 *)this)
    return 0;
  if (*((_QWORD *)this + 7) <= (unint64_t)v8)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  if ((*((_BYTE *)this + 64) & 1) != 0)
    v9 = (char *)this + 72;
  else
    v9 = (char *)*((_QWORD *)this + 10);
  return *(_QWORD *)&v9[8 * v8];
}

void re::ecs2::NetworkComponent::markComponentDirty(re::ecs2::NetworkComponent *this, re::ecs2::Component *a2)
{
  uint64_t v2;
  re::ecs2::NetworkComponent *v3;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    v3 = *(re::ecs2::NetworkComponent **)(v2 + 200);
    if (v3)
    {
      if (!*((_QWORD *)v3 + 4) || RESyncableIsAuthoritative())
        re::ecs2::NetworkComponent::markDirty(v3, this);
    }
  }
}

uint64_t re::ecs2::NetworkComponent::makeSyncInfo(re::ecs2::NetworkComponent *this)
{
  uint64_t v1;
  unsigned __int8 v2;
  __objc2_class_ro **p_info;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v1 = RESyncSyncableTypeInfoCreate();
  RESyncSyncableTypeInfoSetTypeId();
  p_info = VideoSpillMapMetalSession.info;
  if ((v2 & 1) == 0)
  {
    p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    if (v5)
    {
      re::introspect<re::ecs2::NetworkComponent>(void)::info = (_UNKNOWN *)re::internal::getOrCreateInfo((re::internal *)"NetworkComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkComponent>, 0);
      p_info = (__objc2_class_ro **)(VideoSpillMapMetalSession + 32);
    }
  }
  re::getPrettyTypeName((re *)p_info[297], (const re::IntrospectionBase *)&v6);
  RESyncSyncableTypeInfoSetDebugName();
  if (v6 && (v7 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)v6 + 40))();
  RESyncSyncableTypeInfoSetSupportsNetworkSync();
  return v1;
}

uint64_t re::ecs2::NetworkReceiveSystem::typeInfo(re::ecs2::NetworkReceiveSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkReceiveSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkReceiveSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkReceiveSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkReceiveSystem>, 0);
}

void re::ecs2::NetworkSendSystem::~NetworkSendSystem(re::ecs2::NetworkSendSystem *this)
{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_24ED69480;
  v3 = (_QWORD *)((char *)this + 104);
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    if (*((_QWORD *)this + 17))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 17) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 32);
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  uint64_t v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_24ED69480;
  v3 = (_QWORD *)((char *)this + 104);
  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    if (*((_QWORD *)this + 17))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 17) = 0;
    v3[1] = 0;
    v3[2] = 0;
    *v3 = 0;
    ++*((_DWORD *)this + 32);
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::NetworkSendSystem::typeInfo(re::ecs2::NetworkSendSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"NetworkSendSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_NetworkSendSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_NetworkSendSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::NetworkSendSystem>, 0);
}

void `anonymous namespace'::LocalNetworkAssetSerialization::~LocalNetworkAssetSerialization(_anonymous_namespace_::LocalNetworkAssetSerialization *this)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED69680;
  v3 = (_OWORD *)((char *)this + 144);
  v2 = *((_QWORD *)this + 18);
  if (v2)
  {
    if ((*((_BYTE *)this + 152) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 20));
    *v3 = 0u;
    v3[1] = 0u;
  }
  *(_QWORD *)this = off_24ED2D398;
  v4 = *((_QWORD *)this + 13);
  if (v4)
  {
    if ((*((_BYTE *)this + 112) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 15));
    *(_OWORD *)((char *)this + 104) = 0u;
    *(_OWORD *)((char *)this + 120) = 0u;
  }
  *(_QWORD *)this = &off_24ED2D3D0;
  re::Optional<re::AssetPath>::~Optional((uint64_t)this + 8);
}

{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;

  *(_QWORD *)this = off_24ED69680;
  v3 = (_OWORD *)((char *)this + 144);
  v2 = *((_QWORD *)this + 18);
  if (v2)
  {
    if ((*((_BYTE *)this + 152) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 40))(v2, *((_QWORD *)this + 20));
    *v3 = 0u;
    v3[1] = 0u;
  }
  *(_QWORD *)this = off_24ED2D398;
  v4 = *((_QWORD *)this + 13);
  if (v4)
  {
    if ((*((_BYTE *)this + 112) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 40))(v4, *((_QWORD *)this + 15));
    *(_OWORD *)((char *)this + 104) = 0u;
    *(_OWORD *)((char *)this + 120) = 0u;
  }
  *(_QWORD *)this = &off_24ED2D3D0;
  re::Optional<re::AssetPath>::~Optional((uint64_t)this + 8);
  JUMPOUT(0x2276933B8);
}

BOOL `anonymous namespace'::LocalNetworkAssetSerialization::isLocalPeerID(_anonymous_namespace_::LocalNetworkAssetSerialization *this, const char *a2)
{
  const char *v4;
  uint64_t v6;

  v6 = 0;
  if (sscanf(a2, "%llu", &v6) != 1)
    return 0;
  if ((*((_BYTE *)this + 152) & 1) != 0)
    v4 = (const char *)*((_QWORD *)this + 20);
  else
    v4 = (char *)this + 153;
  return strcmp(v4, a2) == 0;
}

double re::HashTable<unsigned long long,re::Pair<re::SharedPtr<re::ecs2::Entity>,unsigned long long,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  uint64_t v8;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          v8 = *(_QWORD *)(v6 + 24);
          if (v8)
          {

            *(_QWORD *)(v6 + 24) = 0;
            v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 40;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

double re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::deinit(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  int v7;
  double result;

  v2 = *a1;
  if (v2)
  {
    v3 = *((unsigned int *)a1 + 8);
    if ((_DWORD)v3)
    {
      v4 = 0;
      for (i = 0; i < v3; ++i)
      {
        v6 = a1[2] + v4;
        v7 = *(_DWORD *)(v6 + 8);
        if (v7 < 0)
        {
          *(_DWORD *)(v6 + 8) = v7 & 0x7FFFFFFF;
          if (*(_QWORD *)(v6 + 16))
          {
            RESyncRelease();
            *(_QWORD *)(v6 + 16) = 0;
            v3 = *((unsigned int *)a1 + 8);
          }
        }
        v4 += 32;
      }
      v2 = *a1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 40))(v2, a1[1]);
    *((_DWORD *)a1 + 8) = 0;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    *(_QWORD *)&result = 0x7FFFFFFFLL;
    *(uint64_t *)((char *)a1 + 36) = 0x7FFFFFFFLL;
  }
  return result;
}

void re::ecs2::NetworkReceiveSystem::processLocalSession(RESyncSession *)const::$_0::__invoke(const char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  objc_initWeak((id *)a2, 0);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  re::ecs2::EntityHandle::reset((id *)a2);
  if (a1 && *a1)
  {
    v5 = 0;
    if (sscanf(a1, "%llu", &v5) == 1)
    {
      v4 = v5;
      re::ecs2::EntityHandle::reset((id *)a2);
      *(_QWORD *)(a2 + 8) = v4;
    }
  }
}

uint64_t re::ecs2::NetworkSendSystem::updateLocalSession(RESyncSession *)const::$_0::__invoke(uint64_t a1, re::DynamicString *this)
{
  re::DynamicString::assignf(this, "%llu", *(_QWORD *)(a1 + 296));
  return 1;
}

uint64_t RESyncableRefRetainer::reset(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  if (result != a2)
  {
    if (a2)
    {
      RESyncRetain();
      result = *a1;
    }
    if (result)
      result = RESyncRelease();
    *a1 = a2;
  }
  return result;
}

uint64_t re::DynamicArray<re::ecs2::SyncAccessControlEntry>::DynamicArray(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v5;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *a2;
  if (*a2)
  {
    v5 = a2[2];
    *(_QWORD *)a1 = v3;
    re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)a1, v5);
    ++*(_DWORD *)(a1 + 24);
    re::DynamicArray<re::ecs2::SyncAccessControlEntry>::copy((void **)a1, (uint64_t)a2);
  }
  return a1;
}

void **re::DynamicArray<re::ecs2::SyncAccessControlEntry>::copy(void **result, uint64_t a2)
{
  void **v3;
  unint64_t v4;
  void *v5;

  v3 = result;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >= (unint64_t)result[2])
  {
    re::DynamicArray<re::RigNodeConstraint>::setCapacity(result, *(_QWORD *)(a2 + 16));
    v5 = v3[2];
    if (v5)
    {
      memmove(v3[4], *(const void **)(a2 + 32), 16 * (_QWORD)v5 - 4);
      v5 = v3[2];
    }
    result = (void **)memcpy((char *)v3[4] + 16 * (_QWORD)v5, (const void *)(*(_QWORD *)(a2 + 32) + 16 * (_QWORD)v5), 16 * v4 - 16 * (_QWORD)v5);
  }
  else if (v4)
  {
    result = (void **)memmove(result[4], *(const void **)(a2 + 32), 16 * v4 - 4);
  }
  v3[2] = (void *)v4;
  return result;
}

uint64_t re::DynamicArray<re::ecs2::SyncAccessControlEntry>::operator=(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (result != a2)
  {
    v2 = *(_QWORD *)result;
    v3 = *(_QWORD *)a2;
    if (*(_QWORD *)result)
      v4 = v3 == 0;
    else
      v4 = 1;
    if (v4 || v2 == v3)
    {
      v6 = *(_QWORD *)(result + 8);
      v7 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)result = v3;
      *(_QWORD *)(result + 8) = v7;
      *(_QWORD *)a2 = v2;
      *(_QWORD *)(a2 + 8) = v6;
      v8 = *(_QWORD *)(result + 16);
      *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = v8;
      v9 = *(_QWORD *)(result + 32);
      *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 32) = v9;
      ++*(_DWORD *)(a2 + 24);
      ++*(_DWORD *)(result + 24);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) ", "!isInitialized() || !other.isInitialized() || m_allocator == other.m_allocator", "operator=", 503);
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t re::DynamicArray<re::ecs2::SyncAccessControlEntry>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *a2;
    if (*(_QWORD *)a1)
    {
      if (v4)
        re::DynamicArray<re::ecs2::SyncAccessControlEntry>::copy((void **)a1, (uint64_t)a2);
      else
        *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    else if (v4)
    {
      v5 = a2[2];
      *(_QWORD *)a1 = v4;
      re::DynamicArray<re::RigNodeConstraint>::setCapacity((_QWORD *)a1, v5);
      ++*(_DWORD *)(a1 + 24);
      re::DynamicArray<re::ecs2::SyncAccessControlEntry>::copy((void **)a1, (uint64_t)a2);
    }
  }
  return a1;
}

id re::internal::defaultRetain<re::ecs2::NetworkReceiveSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::NetworkReceiveSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

id re::internal::defaultRetain<re::ecs2::NetworkSendSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::NetworkSendSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

double re::make::shared::unsafelyInplace<re::ecs2::NetworkComponent>(_QWORD *a1)
{
  __int128 v2;
  double result;

  bzero(a1, 0x280uLL);
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  a1[2] = 0;
  *((_BYTE *)a1 + 24) = 0;
  *a1 = &off_24ED58F40;
  a1[4] = 0;
  a1[5] = 0;
  *((_DWORD *)a1 + 12) = 16777471;
  *((_BYTE *)a1 + 52) = 0;
  a1[8] = 0;
  a1[9] = 0;
  a1[7] = 0;
  *((_DWORD *)a1 + 20) = 1;
  a1[11] = 0;
  a1[12] = 0;
  *((_DWORD *)a1 + 28) = 0;
  *((_WORD *)a1 + 58) = 16;
  *(_QWORD *)&v2 = -1;
  *((_QWORD *)&v2 + 1) = -1;
  *((_OWORD *)a1 + 8) = v2;
  a1[15] = a1 + 16;
  *((_OWORD *)a1 + 9) = v2;
  a1[20] = 0;
  a1[21] = 0;
  *((_DWORD *)a1 + 44) = 1;
  a1[23] = 0;
  a1[24] = 0;
  a1[39] = 0;
  a1[40] = 0;
  *((_DWORD *)a1 + 82) = 1;
  result = 0.0;
  *((_OWORD *)a1 + 21) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  a1[46] = 0;
  *((_DWORD *)a1 + 94) = 1;
  a1[49] = 0;
  a1[50] = 0;
  a1[48] = 0;
  *((_OWORD *)a1 + 26) = 0u;
  *((_OWORD *)a1 + 27) = 0u;
  *((_DWORD *)a1 + 112) = 0;
  *(_QWORD *)((char *)a1 + 452) = 0x7FFFFFFFLL;
  *((_OWORD *)a1 + 29) = 0u;
  *((_OWORD *)a1 + 30) = 0u;
  *((_DWORD *)a1 + 124) = 0;
  *(_QWORD *)((char *)a1 + 500) = 0x7FFFFFFFLL;
  *((_DWORD *)a1 + 136) = 0;
  *((_OWORD *)a1 + 32) = 0u;
  *((_OWORD *)a1 + 33) = 0u;
  *(_QWORD *)((char *)a1 + 548) = 0x7FFFFFFFLL;
  *((_BYTE *)a1 + 560) = 1;
  *((_DWORD *)a1 + 142) = 0;
  a1[73] = 0;
  a1[72] = 0;
  *((_DWORD *)a1 + 150) = 0;
  a1[74] = 0;
  a1[78] = 0;
  *(_DWORD *)((char *)a1 + 615) = 0;
  a1[76] = 0;
  return result;
}

void re::HashTable<unsigned long long,re::Pair<re::SharedPtr<re::ecs2::Entity>,unsigned long long,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  signed int v12;
  uint64_t v13;
  BOOL v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[44];

  v9 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v9 == 0x7FFFFFFF)
  {
    v9 = *(unsigned int *)(a1 + 32);
    v10 = v9;
    if ((_DWORD)v9 == *(_DWORD *)(a1 + 24))
    {
      v11 = *(_DWORD *)(a1 + 28);
      v12 = 2 * v11;
      v13 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (v12)
          v14 = (_DWORD)v9 == v12;
        else
          v14 = 1;
        if (!v14 && (v11 & 0x80000000) == 0)
        {
          memset(v27, 0, 36);
          *(_QWORD *)&v27[36] = 0x7FFFFFFFLL;
          re::HashTable<re::StringID,re::TimelineEventParameterDescription,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v27, v13, v12);
          v15 = *(_OWORD *)v27;
          *(_OWORD *)v27 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          v16 = *(_QWORD *)&v27[16];
          v17 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v27[16] = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_OWORD *)&v27[24];
          *(_OWORD *)&v27[24] = *(_OWORD *)(a1 + 24);
          v18 = *(_DWORD *)&v27[32];
          *(_OWORD *)(a1 + 24) = v19;
          v20 = v18;
          if (v18)
          {
            v21 = v17 + 16;
            do
            {
              if ((*(_DWORD *)(v21 - 8) & 0x80000000) != 0)
                re::HashTable<unsigned long long,re::Pair<re::SharedPtr<re::ecs2::Entity>,unsigned long long,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::addAsMove(a1, *(_QWORD *)(v21 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v21 - 16), v21, v21 + 8);
              v21 += 40;
              --v20;
            }
            while (v20);
          }
          re::HashTable<unsigned long long,re::Pair<re::SharedPtr<re::ecs2::Entity>,unsigned long long,true>,re::Hash<unsigned long long>,re::EqualTo<unsigned long long>,true,false>::deinit((uint64_t *)v27);
        }
      }
      else
      {
        if (v12)
          v24 = 2 * v11;
        else
          v24 = 3;
      }
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v10 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v10 + 1;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 40 * v9 + 8);
  }
  else
  {
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_DWORD *)(v22 + 40 * v9 + 8);
    *(_DWORD *)(a1 + 36) = v23 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v22 + 40 * v9 + 8) = v23 | 0x80000000;
  v25 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 8) & 0x80000000 | *(_DWORD *)(v25 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * v9 + 16) = *a4;
  v26 = *(_QWORD *)(a1 + 16) + 40 * v9;
  *(_QWORD *)(v26 + 24) = *a5;
  *a5 = 0;
  *(_QWORD *)(v26 + 32) = a5[1];
  *(_DWORD *)(v25 + 4 * a2) = v9;
  ++*(_DWORD *)(a1 + 28);
}

_QWORD *re::DynamicOverflowArray<re::Pair<re::ecs2::Entity *,re::ecs2::Entity *,true>,8ul>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  void *v14;
  uint64_t v15;
  const void *v16;
  int v17;

  v4 = result;
  v5 = *result;
  if (a2 && !v5)
  {
    result = (_QWORD *)re::DynamicOverflowArray<re::Pair<re::ecs2::Entity *,re::ecs2::Entity *,true>,8ul>::setCapacity(v4, a2);
    v6 = *((_DWORD *)v4 + 4) + 2;
LABEL_4:
    *((_DWORD *)v4 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)result + 4);
  if ((v7 & 1) != 0)
    v8 = 8;
  else
    v8 = result[3];
  if (v8 != a2)
  {
    v9 = result[1];
    if (v9 <= a2 && (a2 > 8 || (v7 & 1) == 0))
    {
      if (a2 < 9)
      {
        v14 = result + 3;
        v15 = v4[4];
        if ((v7 & 1) != 0)
          v16 = v4 + 3;
        else
          v16 = (const void *)v4[4];
        memcpy(v14, v16, 16 * v9);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 40))(v5, v15);
        v6 = *((_DWORD *)v4 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 60)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 16, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 16 * a2;
        v10 = (void *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v5 + 32))(*result, 16 * a2, 8);
        if (v10)
        {
          v12 = v10;
          if ((v4[2] & 1) != 0)
            v13 = v4 + 3;
          else
            v13 = (const void *)v4[4];
          result = memcpy(v10, v13, 16 * v4[1]);
          v17 = *((_DWORD *)v4 + 4);
          if ((v17 & 1) == 0)
          {
            result = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v4 + 40))(*v4, v4[4]);
            v17 = *((_DWORD *)v4 + 4);
          }
          *((_DWORD *)v4 + 4) = v17 & 0xFFFFFFFE;
          v4[3] = a2;
          v4[4] = v12;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v11, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*v4 + 8));
      result = (_QWORD *)_os_crash();
      __break(1u);
    }
  }
  return result;
}

void re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  signed int v22;
  _BYTE v23[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v23, 0, 36);
      *(_QWORD *)&v23[36] = 0x7FFFFFFFLL;
      re::HashTable<re::StringID,re::DataArrayHandle<re::RigGraphNode>,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::init((uint64_t)v23, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v23;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v23[8];
      *(_OWORD *)v23 = v5;
      *(_QWORD *)&v23[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v23[24];
      *(_OWORD *)&v23[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v23[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = DWORD1(v9);
        v12 = v7;
        v13 = (uint64_t *)(v6 + 16);
        do
        {
          if ((*(_DWORD *)(v13 - 1) & 0x80000000) != 0)
          {
            v14 = *(v13 - 2);
            v15 = *(unsigned int *)(a1 + 24);
            v16 = v14 % v15;
            v17 = *(unsigned int *)(a1 + 36);
            if ((_DWORD)v17 == 0x7FFFFFFF)
            {
              v17 = *(unsigned int *)(a1 + 32);
              v18 = v17;
              if ((_DWORD)v17 == (_DWORD)v15)
              {
                re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::setCapacity(a1, (2 * v11));
                v16 = v14 % *(unsigned int *)(a1 + 24);
                v18 = *(_DWORD *)(a1 + 32);
                v12 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v18 + 1;
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
            }
            else
            {
              v19 = *(_QWORD *)(a1 + 16);
              v20 = *(_DWORD *)(v19 + 32 * v17 + 8);
              *(_DWORD *)(a1 + 36) = v20 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v19 + 32 * v17 + 8) = v20 | 0x80000000;
            *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * v16);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17) = v14;
            v21 = *v13;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 16) = *v13;
            if (v21)
            {
              RESyncRetain();
              v12 = *(_QWORD *)(a1 + 8);
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 32 * v17 + 24) = v13[1];
            *(_DWORD *)(v12 + 4 * v16) = v17;
            v11 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v11;
          }
          v13 += 4;
          --v10;
        }
        while (v10);
      }
      re::HashTable<RESyncableRefRetainer,unsigned long long,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::deinit((uint64_t *)v23);
    }
  }
  else
  {
    if (a2)
      v22 = a2;
    else
      v22 = 3;
  }
}

uint64_t re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::addAsMove(uint64_t a1, unsigned int a2, unint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v8 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v8 == 0x7FFFFFFF)
  {
    v8 = *(unsigned int *)(a1 + 32);
    v9 = v8;
    if ((_DWORD)v8 == *(_DWORD *)(a1 + 24))
    {
      re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::setCapacity(a1, 2 * *(_DWORD *)(a1 + 28));
      a2 = a3 % *(unsigned int *)(a1 + 24);
      v9 = *(_DWORD *)(a1 + 32);
    }
    *(_DWORD *)(a1 + 32) = v9 + 1;
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_DWORD *)(v10 + 24 * v8 + 8);
    *(_DWORD *)(a1 + 36) = v11 & 0x7FFFFFFF;
  }
  *(_DWORD *)(v10 + 24 * v8 + 8) = v11 | 0x80000000;
  v12 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 8) & 0x80000000 | *(_DWORD *)(v12 + 4 * a2);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24 * v8 + 16) = *a5;
  *a5 = 0;
  *(_DWORD *)(v12 + 4 * a2) = v8;
  ++*(_DWORD *)(a1 + 28);
  return v8;
}

void re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  signed int v13;
  _BYTE v14[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v14, 0, 36);
      *(_QWORD *)&v14[36] = 0x7FFFFFFFLL;
      re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::init((uint64_t)v14, v4, a2);
      v5 = *(_OWORD *)v14;
      *(_OWORD *)v14 = *(_OWORD *)a1;
      *(_OWORD *)a1 = v5;
      v6 = *(_QWORD *)&v14[16];
      v7 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)&v14[16] = v7;
      *(_QWORD *)(a1 + 16) = v6;
      v9 = *(_OWORD *)&v14[24];
      *(_OWORD *)&v14[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v14[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = v7 + 16;
        do
        {
          if ((*(_DWORD *)(v12 - 8) & 0x80000000) != 0)
            re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::addAsMove(a1, *(_QWORD *)(v12 - 16) % (unint64_t)*(unsigned int *)(a1 + 24), *(_QWORD *)(v12 - 16), v12, v12);
          ++v11;
          v12 += 24;
        }
        while (v11 < v10);
      }
      re::HashSetBase<RESyncableRefRetainer,RESyncableRefRetainer,re::internal::ValueAsKey<RESyncableRefRetainer>,re::ecs2::NetworkComponent::RESyncableRefRetainerHash,re::EqualTo<RESyncableRefRetainer>,true,false>::deinit((uint64_t *)v14);
    }
  }
  else
  {
    if (a2)
      v13 = a2;
    else
      v13 = 3;
  }
}

uint64_t re::DynamicOverflowArray<unsigned long long,2ul>::indexOf(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v3 = *(_DWORD *)(a2 + 16);
  if ((v3 & 1) != 0)
    v4 = (_QWORD *)(a2 + 24);
  else
    v4 = *(_QWORD **)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    v6 = 8 * v5;
    v7 = &v4[v5];
    while (*v4 != a3)
    {
      ++v4;
      v6 -= 8;
      if (!v6)
      {
        v4 = v7;
        break;
      }
    }
  }
  if ((v3 & 1) != 0)
    v8 = a2 + 24;
  else
    v8 = *(_QWORD *)(a2 + 32);
  if (v4 == (_QWORD *)(v8 + 8 * v5))
  {
    *(_BYTE *)result = 0;
  }
  else
  {
    *(_BYTE *)result = 1;
    *(_QWORD *)(result + 8) = ((uint64_t)v4 - v8) >> 3;
  }
  return result;
}

uint64_t re::HashSetBase<re::SharedPtr<re::ecs2::NetworkComponent>,re::SharedPtr<re::ecs2::NetworkComponent>,re::internal::ValueAsKey<re::SharedPtr<re::ecs2::NetworkComponent>>,re::Hash<re::SharedPtr<re::ecs2::NetworkComponent>>,re::EqualTo<re::SharedPtr<re::ecs2::NetworkComponent>>,true,false>::remove(uint64_t a1, uint64_t *a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;

  v2 = *(unsigned int *)(a1 + 24);
  if (!(_DWORD)v2)
    return 0;
  v4 = *a2;
  v5 = 0xBF58476D1CE4E5B9 * (*a2 ^ ((unint64_t)*a2 >> 30));
  v6 = ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31)) % v2;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(unsigned int *)(v7 + 4 * v6);
  if ((_DWORD)v8 == 0x7FFFFFFF)
    return 0;
  v10 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v10 + 24 * v8 + 16) != v4)
  {
    while (1)
    {
      v11 = v8;
      v12 = *(_DWORD *)(v10 + 24 * v8 + 8);
      v8 = v12 & 0x7FFFFFFF;
      if ((v12 & 0x7FFFFFFF) == 0x7FFFFFFF)
        return 0;
      if (*(_QWORD *)(v10 + 24 * v8 + 16) == v4)
      {
        *(_DWORD *)(v10 + 24 * v11 + 8) = *(_DWORD *)(v10 + 24 * v11 + 8) & 0x80000000 | *(_DWORD *)(v10 + 24 * v8 + 8) & 0x7FFFFFFF;
        goto LABEL_9;
      }
    }
  }
  *(_DWORD *)(v7 + 4 * v6) = *(_DWORD *)(v10 + 24 * v8 + 8) & 0x7FFFFFFF;
LABEL_9:
  v13 = *(_QWORD *)(a1 + 16);
  v14 = v13 + 24 * v8;
  v17 = *(_DWORD *)(v14 + 8);
  v15 = (int *)(v14 + 8);
  v16 = v17;
  if (v17 < 0)
  {
    *v15 = v16 & 0x7FFFFFFF;
    v18 = v13 + 24 * v8;
    v21 = *(_QWORD *)(v18 + 16);
    v20 = (_QWORD *)(v18 + 16);
    v19 = v21;
    if (v21)
    {

      *v20 = 0;
    }
  }
  v22 = *(_QWORD *)(a1 + 16) + 24 * v8;
  v23 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(v22 + 8) = *(_DWORD *)(v22 + 8) & 0x80000000 | *(_DWORD *)(a1 + 36);
  --*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 36) = v8;
  *(_DWORD *)(a1 + 40) = v23 + 1;
  return 1;
}

void `anonymous namespace'::SyncViewAccessList::~SyncViewAccessList(_anonymous_namespace_::SyncViewAccessList *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24ED696D0;
  if (*((_QWORD *)this + 14))
  {
    RESyncViewSetUserData();
    RESyncRelease();
  }
  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    if (*((_QWORD *)this + 12))
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    *((_QWORD *)this + 12) = 0;
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 10) = 0;
    *((_QWORD *)this + 8) = 0;
    ++*((_DWORD *)this + 22);
  }
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    if ((*((_BYTE *)this + 32) & 1) != 0)
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 40))(v3, *((_QWORD *)this + 5));
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
  }
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  JUMPOUT(0x2276933B8);
}

uint64_t re::DynamicOverflowArray<RESyncableRefRetainer,16ul>::setCapacity(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  result = *a1;
  if (a2 && !result)
  {
    result = re::DynamicOverflowArray<RESyncableRefRetainer,16ul>::setCapacity(a1, a2);
    v6 = *((_DWORD *)a1 + 4) + 2;
LABEL_4:
    *((_DWORD *)a1 + 4) = v6;
    return result;
  }
  v7 = *((_DWORD *)a1 + 4);
  if ((v7 & 1) != 0)
    v8 = 16;
  else
    v8 = a1[3];
  if (v8 != a2)
  {
    v9 = a1[1];
    if (v9 <= a2 && (a2 > 0x10 || (v7 & 1) == 0))
    {
      if (a2 < 0x11)
      {
        v14 = a1 + 3;
        if ((v7 & 1) != 0)
          v15 = a1 + 3;
        else
          v15 = (_QWORD *)a1[4];
        if (v9)
        {
          v16 = 8 * v9;
          do
          {
            *v14++ = *v15;
            *v15++ = 0;
            v16 -= 8;
          }
          while (v16);
        }
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
        v6 = *((_DWORD *)a1 + 4) | 1;
        goto LABEL_4;
      }
      if (a2 >> 61)
      {
        re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicOverflowArray<T, N>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 646, 8, a2);
        _os_crash();
        __break(1u);
      }
      else
      {
        v2 = 8 * a2;
        result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)result + 32))(result, 8 * a2, 8);
        if (result)
        {
          v11 = result;
          v12 = *((_DWORD *)a1 + 4);
          if ((v12 & 1) != 0)
            v13 = a1 + 3;
          else
            v13 = (_QWORD *)a1[4];
          v17 = a1[1];
          if (v17)
          {
            v18 = 8 * v17;
            v19 = (_QWORD *)result;
            do
            {
              *v19++ = *v13;
              *v13++ = 0;
              v18 -= 8;
            }
            while (v18);
            v12 = *((_DWORD *)a1 + 4);
          }
          if ((v12 & 1) == 0)
          {
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, a1[4]);
            v12 = *((_DWORD *)a1 + 4);
          }
          *((_DWORD *)a1 + 4) = v12 & 0xFFFFFFFE;
          a1[3] = a2;
          a1[4] = v11;
          return result;
        }
      }
      re::internal::assertLog((re::internal *)6, v10, "assertion failure: '%s' (%s:line %i) DynamicOverflowArray<T, N> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 650, v2, *(_QWORD *)(*a1 + 8));
      result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t *re::ecs2::allocInfo_MaterialRenderStateArrayComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2541121B0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541121B0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254112218, 0);
    *(uint64_t *)((char *)&qword_254112228 + 6) = 0;
    qword_254112228 = 0;
    qword_254112238 = 0;
    qword_254112240 = 0xFFFFFFFFLL;
    qword_254112218 = (uint64_t)&off_24ED7DAA8;
    qword_254112248 = (uint64_t)"MaterialRenderStateArrayComponent";
    dword_254112250 = 0;
    unk_254112258 = 0u;
    unk_254112268 = 0u;
    unk_254112278 = 0u;
    qword_254112288 = 0;
    __cxa_guard_release(&qword_2541121B0);
  }
  return &qword_254112218;
}

void re::ecs2::initInfo_MaterialRenderStateArrayComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD v12[2];
  __int128 v13;

  v12[0] = 0x5C89C1565218C930;
  v12[1] = "MaterialRenderStateArrayComponent";
  re::StringID::destroyString((re::StringID *)v12);
  *((_OWORD *)this + 2) = v13;
  v4 = atomic_load((unsigned __int8 *)&qword_2541121B8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541121B8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "ecs2::Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541121C8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      re::IntrospectionInfo<re::DynamicArray<re::MaterialRenderFlags>>::get();
      v10 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v10 = 1;
      *(_QWORD *)(v10 + 8) = "renderState";
      *(_QWORD *)(v10 + 16) = &qword_2541121D8;
      *(_QWORD *)(v10 + 24) = 0;
      *(_QWORD *)(v10 + 32) = 0x2000000001;
      *(_DWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 56) = 0;
      *(_DWORD *)(v10 + 64) = 0;
      qword_2541121D0 = v10;
      __cxa_guard_release(&qword_2541121B8);
    }
  }
  *((_QWORD *)this + 2) = 0x4800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2541121C8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::MaterialRenderStateArrayComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::MaterialRenderStateArrayComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::MaterialRenderStateArrayComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::MaterialRenderStateArrayComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v11 = v13;
}

void re::IntrospectionInfo<re::DynamicArray<re::MaterialRenderFlags>>::get()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  re::IntrospectionRegistry *v4;
  const re::IntrospectionBase *v5;
  const char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12[2];
  __int128 v13;
  uint64_t v14;
  char v15;
  _BYTE v16[479];

  v0 = atomic_load((unsigned __int8 *)&qword_2541121C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2541121C0))
  {
    re::IntrospectionDynamicArrayBase::IntrospectionDynamicArrayBase((re::IntrospectionDynamicArrayBase *)&qword_2541121D8);
    qword_2541121D8 = (uint64_t)&off_24ED69718;
    __cxa_guard_release(&qword_2541121C0);
  }
  if ((_MergedGlobals_292 & 1) == 0)
  {
    v1 = re::introspect_MaterialRenderFlags((re::IntrospectionBase **)1);
    if ((_MergedGlobals_292 & 1) == 0)
    {
      v2 = v1;
      _MergedGlobals_292 = 1;
      v3 = *(_DWORD *)(v1 + 24);
      ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541121D8, 0);
      qword_2541121E8 = 0x2800000003;
      dword_2541121F0 = v3;
      word_2541121F4 = 0;
      *(_QWORD *)&xmmword_2541121F8 = 0;
      *((_QWORD *)&xmmword_2541121F8 + 1) = 0xFFFFFFFFLL;
      qword_254112208 = v2;
      unk_254112210 = 0;
      qword_2541121D8 = (uint64_t)&off_24ED69718;
      re::IntrospectionRegistry::add(v4, v5);
      re::getPrettyTypeName((re *)&qword_2541121D8, (const re::IntrospectionBase *)&v14);
      if ((v15 & 1) != 0)
        v6 = *(const char **)&v16[7];
      else
        v6 = v16;
      if (v14 && (v15 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v14 + 40))();
      v11 = *(_OWORD *)(v2 + 32);
      v7 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v12);
      if (v7)
      {
        v8 = *v7;
        *((_QWORD *)&v10 + 1) = v8;
      }
      else
      {
        v13 = v11;
        re::TypeBuilder::beginListType((uint64_t)&v14, v12, 1, 0x28uLL, 8uLL, &v13);
        re::TypeBuilder::setConstructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke);
        re::TypeBuilder::setDestructor((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke);
        re::TypeBuilder::setListUsesContiguousStorage((uint64_t)&v14, 1);
        re::TypeBuilder::setListAccessors((uint64_t)&v14, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke, (uint64_t)re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIndexer((uint64_t)&v14, (void *(*)(void *, unint64_t))re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke);
        re::TypeBuilder::setListIterator((uint64_t)&v14, (void *(*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke, (void *(*)(void *))re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke, (void (*)(void *, re::Allocator *))re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke);
        re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)&v14, v9);
      }
      xmmword_2541121F8 = v10;
      re::StringID::destroyString((re::StringID *)v12);
    }
  }
}

void re::internal::defaultConstruct<re::ecs2::MaterialRenderStateArrayComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED58FC0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_DWORD *)(v3 + 56) = 0;
}

uint64_t re::internal::defaultDestruct<re::ecs2::MaterialRenderStateArrayComponent>(uint64_t a1, uint64_t a2, uint64_t (***a3)(_QWORD))
{
  return (**a3)(a3);
}

void re::internal::defaultConstructV2<re::ecs2::MaterialRenderStateArrayComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED58FC0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 40) = 0;
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 32) = 0;
  *(_DWORD *)(v1 + 56) = 0;
}

uint64_t re::internal::defaultDestructV2<re::ecs2::MaterialRenderStateArrayComponent>(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

uint64_t re::ecs2::introspect_MaterialRenderStateArrayComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"MaterialRenderStateArrayComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_MaterialRenderStateArrayComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_MaterialRenderStateArrayComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::MaterialRenderStateArrayComponent>, this);
}

_QWORD *re::IntrospectionDynamicArray<re::MaterialRenderFlags>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  return a1;
}

void re::IntrospectionDynamicArray<re::MaterialRenderFlags>::~IntrospectionDynamicArray(_QWORD *a1)
{
  *a1 = &off_24ED1FA08;
  re::SerializedReference<re::IntrospectionBase const*>::reset(a1 + 6);
  *a1 = &off_24ED426B8;
  objc_destructInstance(a1 + 1);
  JUMPOUT(0x2276933B8);
}

void re::IntrospectionDynamicArray<re::MaterialRenderFlags>::construct(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 24) = 0;
}

uint64_t re::IntrospectionDynamicArray<re::MaterialRenderFlags>::destroy(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    ++*(_DWORD *)(a2 + 24);
  }
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MaterialRenderFlags>::init(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;

  if (*a2)
  {
    if (a2[4])
      (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
    a2[4] = 0;
    a2[1] = 0;
    a2[2] = 0;
    ++*((_DWORD *)a2 + 6);
  }
  *a2 = a3;
  result = re::DynamicArray<re::MaterialRenderFlags>::setCapacity(a2, 0);
  ++*((_DWORD *)a2 + 6);
  return result;
}

_QWORD *re::IntrospectionDynamicArray<re::MaterialRenderFlags>::resize(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;

  v9 = result;
  if (!*(_QWORD *)a4)
  {
    *(_QWORD *)a4 = a2;
    result = re::DynamicArray<re::MaterialRenderFlags>::setCapacity((_QWORD *)a4, a5);
    ++*(_DWORD *)(a4 + 24);
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v10 >= a5)
  {
    if (v10 > a5)
      return re::DynamicArray<re::MaterialRenderFlags>::resize((_QWORD *)a4, a5);
  }
  else
  {
    result = re::DynamicArray<re::MaterialRenderFlags>::setCapacity((_QWORD *)a4, a5);
    for (i = a5 - *(_QWORD *)(a4 + 16); i; --i)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*v9 + 80))(v9, a2, a3, a4);
  }
  return result;
}

re::IntrospectionBase *re::IntrospectionDynamicArray<re::MaterialRenderFlags>::addElement(re::Allocator **a1, re *a2, int a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  re::IntrospectionBase *v13;

  v9 = *(_QWORD *)(a4 + 8);
  v8 = *(_QWORD *)(a4 + 16);
  if (v8 >= v9)
  {
    v10 = v8 + 1;
    if (v9 < v8 + 1)
    {
      if (*(_QWORD *)a4)
      {
        v11 = 2 * v9;
        if (!v9)
          v11 = 8;
        if (v11 <= v10)
          v12 = v10;
        else
          v12 = v11;
        re::DynamicArray<re::MaterialRenderFlags>::setCapacity((_QWORD *)a4, v12);
      }
      else
      {
        re::DynamicArray<re::MaterialRenderFlags>::setCapacity((_QWORD *)a4, v10);
        ++*(_DWORD *)(a4 + 24);
      }
    }
    v8 = *(_QWORD *)(a4 + 16);
  }
  v13 = (re::IntrospectionBase *)(*(_QWORD *)(a4 + 32) + 18 * v8);
  *(_BYTE *)v13 = 0;
  *((_BYTE *)v13 + 2) = 0;
  *((_BYTE *)v13 + 4) = 0;
  *((_BYTE *)v13 + 6) = 0;
  *((_BYTE *)v13 + 8) = 0;
  *((_BYTE *)v13 + 10) = 0;
  *((_BYTE *)v13 + 12) = 0;
  *((_BYTE *)v13 + 14) = 0;
  *((_BYTE *)v13 + 16) = 0;
  *(_QWORD *)(a4 + 16) = v8 + 1;
  ++*(_DWORD *)(a4 + 24);
  re::introspectionInitElement(a2, a3, a1[6], v13);
  return v13;
}

uint64_t re::IntrospectionDynamicArray<re::MaterialRenderFlags>::size(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16);
}

uint64_t re::IntrospectionDynamicArray<re::MaterialRenderFlags>::elementAt(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 18 * a3;
}

{
  if (*(_QWORD *)(a2 + 16) <= a3)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a2 + 32) + 18 * a3;
}

_QWORD *re::DynamicArray<re::MaterialRenderFlags>::setCapacity(_QWORD *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;

  v3 = result[1];
  if (v3 != a2)
  {
    v5 = result;
    if (result[2] <= a2)
    {
      result = (_QWORD *)*result;
      if (!*v5)
      {
        result = (_QWORD *)re::DynamicArray<re::MaterialRenderFlags>::setCapacity(v5, a2);
        ++*((_DWORD *)v5 + 6);
        return result;
      }
      if (a2)
      {
        if (is_mul_ok(a2, 0x12uLL))
        {
          v2 = 18 * a2;
          result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t, uint64_t))(*result + 32))(result, 18 * a2, 1);
          if (result)
          {
            v7 = result;
            if (!v5[1])
              goto LABEL_33;
            goto LABEL_11;
          }
        }
        else
        {
          re::internal::assertLog((re::internal *)6, a2, "assertion failure: '%s' (%s:line %i) Size overflow in DynamicArray<T>::setCapacity(). Element size = %zu, capacity = %zu", "!overflow", "setCapacity", 615, 18, a2);
          _os_crash();
          __break(1u);
        }
        re::internal::assertLog((re::internal *)6, v6, "assertion failure: '%s' (%s:line %i) DynamicArray<T> is out of memory (tried to allocate %zu bytes from allocator '%s').", "newData", "setCapacity", 619, v2, *(_QWORD *)(*v5 + 8));
        result = (_QWORD *)_os_crash();
        __break(1u);
        return result;
      }
      v7 = 0;
      if (!v3)
      {
LABEL_33:
        v5[4] = v7;
        v5[1] = a2;
        return result;
      }
LABEL_11:
      v8 = v5[4];
      v9 = v5[2];
      if (v9)
      {
        v10 = (_BYTE *)(v8 + 18 * v9);
        v11 = (_BYTE *)(v8 + 9);
        v12 = (char *)v7 + 9;
        do
        {
          v13 = v11 - 9;
          v14 = *(v11 - 9);
          *(v12 - 9) = v14;
          if (v14)
            *(v12 - 8) = *(v11 - 8);
          v15 = *(v11 - 7);
          *(v12 - 7) = v15;
          if (v15)
            *(v12 - 6) = *(v11 - 6);
          v16 = *(v11 - 5);
          *(v12 - 5) = v16;
          if (v16)
            *(v12 - 4) = *(v11 - 4);
          v17 = *(v11 - 3);
          *(v12 - 3) = v17;
          if (v17)
            *(v12 - 2) = *(v11 - 2);
          v18 = *(v11 - 1);
          *(v12 - 1) = v18;
          if (v18)
            *v12 = *v11;
          v19 = v11[1];
          v12[1] = v19;
          if (v19)
            v12[2] = v11[2];
          v20 = v11[3];
          v12[3] = v20;
          if (v20)
            v12[4] = v11[4];
          v21 = v11[5];
          v12[5] = v21;
          if (v21)
            v12[6] = v11[6];
          v22 = v11[7];
          v12[7] = v22;
          if (v22)
            v12[8] = v11[8];
          v11 += 18;
          v12 += 18;
        }
        while (v13 + 18 != v10);
      }
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v5 + 40))(*v5, v8);
      goto LABEL_33;
    }
  }
  return result;
}

_QWORD *re::DynamicArray<re::MaterialRenderFlags>::resize(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _BYTE *v6;

  v3 = result;
  v4 = result[2];
  if (v4 >= a2)
  {
    if (v4 <= a2)
      return result;
  }
  else
  {
    if (result[1] < a2)
    {
      result = re::DynamicArray<re::MaterialRenderFlags>::setCapacity(result, a2);
      v4 = v3[2];
    }
    v5 = a2 - v4;
    if (a2 > v4)
    {
      v6 = (_BYTE *)(v3[4] + 18 * v4 + 8);
      do
      {
        *(v6 - 8) = 0;
        *(v6 - 6) = 0;
        *(v6 - 4) = 0;
        *(v6 - 2) = 0;
        *v6 = 0;
        v6[2] = 0;
        v6[4] = 0;
        v6[6] = 0;
        v6[8] = 0;
        v6 += 18;
        --v5;
      }
      while (v5);
    }
  }
  v3[2] = a2;
  ++*((_DWORD *)v3 + 6);
  return result;
}

_QWORD *re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#1}::__invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = a3;
  result = re::DynamicArray<re::MaterialRenderFlags>::setCapacity((_QWORD *)a1, 0);
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,void *)#2}::__invoke(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)a1;
  if (result)
  {
    if (*(_QWORD *)(a1 + 32))
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    ++*(_DWORD *)(a1 + 24);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::TypeInfo const&,re::Allocator *,unsigned long)#1}::__invoke(uint64_t a1, uint64_t a2, re::Allocator *a3, unint64_t a4)
{
  re::Allocator *v8;
  _anonymous_namespace_ *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _BYTE v13[32];
  _BYTE v14[8];
  uint64_t v15;

  v8 = *(re::Allocator **)a1;
  if (v8 == a3)
  {
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    if (v8)
    {
      if (*(_QWORD *)(a1 + 32))
        (*(void (**)(re::Allocator *))(*(_QWORD *)v8 + 40))(v8);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      ++*(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)a1 = a3;
    re::DynamicArray<re::MaterialRenderFlags>::setCapacity((_QWORD *)a1, a4);
  }
  ++*(_DWORD *)(a1 + 24);
  v9 = (_anonymous_namespace_ *)re::DynamicArray<re::MaterialRenderFlags>::resize((_QWORD *)a1, a4);
  {
    re::TypeRegistry::typeInfo(*(_QWORD **)a2, *(_QWORD *)(*(_QWORD *)(a2 + 16) + 72), v14);
    re::TypeInfo::TypeInfo((uint64_t)v13, (uint64_t)&v15);
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(char **)(a1 + 32);
      v12 = 18 * v10;
      do
      {
        re::TypeInfo::destruct((re::TypeInfo *)v13, v11, a3, 0);
        re::TypeInfo::construct((re::TypeInfo *)v13, (void **)v11, a3, 0);
        v11 += 18;
        v12 -= 18;
      }
      while (v12);
    }
  }
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,unsigned long)#1}::__invoke(uint64_t a1, unint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) <= a2)
  {
    os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR);
    _os_log_send_and_compose_impl();
    _os_crash_msg();
    __break(1u);
  }
  return *(_QWORD *)(a1 + 32) + 18 * a2;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#1}::__invoke(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, 16, 8);
  *(_QWORD *)result = a1;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(result + 12) = -1;
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *)#2}::__invoke(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)a1;
  if (a1[2] == *(_DWORD *)(*(_QWORD *)a1 + 24))
  {
    v3 = a1[3];
    v4 = *(_QWORD *)(v2 + 16);
    if (v3 < (int)v4)
      a1[3] = ++v3;
    if (v4 <= v3)
      return 0;
    else
      return *(_QWORD *)(v2 + 32) + 18 * v3;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, a2, "assertion failure: '%s' (%s:line %i) DynamicArray elements may not be added or removed during iteration.", "iter->originalVersion == iter->array->version()", "operator()", 313);
    result = _os_crash();
    __break(1u);
  }
  return result;
}

uint64_t re::TypeBuilderHelper::registerDynamicArray<re::MaterialRenderFlags>(re::TypeRegistry *,re::StringID const&,re::TypeID const&)::{lambda(void *,re::Allocator *)#2}::__invoke(uint64_t result, uint64_t a2)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, result);
  return result;
}

uint64_t *re::ecs2::allocInfo_ProtectionOptionsSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_293);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_293))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254112298, 0);
    *(uint64_t *)((char *)&qword_2541122A8 + 6) = 0;
    qword_2541122A8 = 0;
    qword_2541122B8 = 0;
    qword_2541122C0 = 0xFFFFFFFFLL;
    qword_254112298 = (uint64_t)&off_24ED7DAA8;
    qword_2541122C8 = (uint64_t)"ProtectionOptionsSystem";
    dword_2541122D0 = 0;
    unk_2541122D8 = 0u;
    unk_2541122E8 = 0u;
    unk_2541122F8 = 0u;
    qword_254112308 = 0;
    __cxa_guard_release(&_MergedGlobals_293);
  }
  return &qword_254112298;
}

void re::ecs2::initInfo_ProtectionOptionsSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xE76AB3F74DAE17E8;
  v5[1] = "ProtectionOptionsSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x8000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_ProtectionOptionsSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ProtectionOptionsSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ProtectionOptionsSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::ProtectionOptionsSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::ProtectionOptionsSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ProtectionOptionsSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ProtectionOptionsSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

void re::internal::defaultConstruct<re::ecs2::ProtectionOptionsSystem>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  re::ecs2::System::System(a3, 1, 1);
  *v3 = &off_24ED697B0;
  v3[14] = 0;
  v3[15] = 0;
  v3[13] = 0;
}

void *re::internal::defaultDestruct<re::ecs2::ProtectionOptionsSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::ProtectionOptionsSystem>(uint64_t a1)
{
  _QWORD *v1;

  re::ecs2::System::System(a1, 1, 1);
  *v1 = &off_24ED697B0;
  v1[14] = 0;
  v1[15] = 0;
  v1[13] = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::ProtectionOptionsSystem>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ProtectionOptionsSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ProtectionOptionsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ProtectionOptionsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ProtectionOptionsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ProtectionOptionsSystem>, this);
}

uint64_t re::ecs2::ProtectionOptionsSystem::willAddSystemToECSService(re::ecs2::ProtectionOptionsSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 13) = re::ServiceLocator::serviceOrNull<re::Engine>(v2);
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  *((_QWORD *)this + 14) = re::ServiceLocator::serviceOrNull<re::RenderManager>(v3);
  result = re::ServiceLocator::serviceOrNull<re::ProtectionOptionsService>(*(_QWORD *)(*((_QWORD *)this + 13) + 648));
  *((_QWORD *)this + 15) = result;
  return result;
}

uint64_t re::ServiceLocator::serviceOrNull<re::ProtectionOptionsService>(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[16];

  if ((v2 & 1) == 0
  {
    re::introspect<re::ProtectionOptionsService>(void)::info = re::introspect_ProtectionOptionsService(0);
  }
  v3 = re::introspect<re::ProtectionOptionsService>(void)::info;
  re::StringID::invalid((re::StringID *)v6);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v3, v6);
  re::StringID::destroyString((re::StringID *)v6);
  return v4;
}

_QWORD *re::ecs2::ProtectionOptionsSystem::willRemoveSystemFromECSService(_QWORD *this)
{
  this[13] = 0;
  this[14] = 0;
  this[15] = 0;
  return this;
}

_QWORD *re::ecs2::ProtectionOptionsSystem::update(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v3 = result;
  v4 = result[13];
  if (!v4 || (*(_BYTE *)(v4 + 424) & 0x10) != 0)
  {
    if (result[14])
    {
      result = (_QWORD *)result[15];
      if (result && a3 == 1)
      {
        (*(void (**)(_QWORD *))(*result + 48))(result);
        v6 = *(_QWORD *)(v3[14] + 104);
        if (v6)
          v7 = re::RenderFrameBox::get(v6 + 344, 0xFFFFFFFFFFFFFFFuLL);
        else
          v7 = 0;
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[15] + 24))(v3[15]);
        *(_QWORD *)(v7 + 416) = result;
      }
    }
  }
  return result;
}

void re::ecs2::ProtectionOptionsSystem::update(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  id *v9;
  uint64_t v10;
  char *WeakRetained;
  char *v12;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 120))(*(_QWORD *)(a1 + 40));
  if (v8)
  {
    v9 = (id *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 120))(*(_QWORD *)(a1 + 40));
    if (v10)
    {
      WeakRetained = (char *)objc_loadWeakRetained(v9);
      if (WeakRetained)
        v12 = WeakRetained - 8;
      else
        v12 = 0;
      if (WeakRetained)

      if (v12 == a2)
        re::ecs2::ProtectionOptionsSystem::update((_QWORD *)a1, a3, a4);
    }
    else
    {
      re::internal::assertLog((re::internal *)4, 0, "assertion failure: '%s' (%s:line %i) Array is empty.", "!isEmpty()", "first", 225);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::ProtectionOptionsSystem::~ProtectionOptionsSystem(re::ecs2::ProtectionOptionsSystem *this)
{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ProtectionOptionsSystem::typeInfo(re::ecs2::ProtectionOptionsSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ProtectionOptionsSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ProtectionOptionsSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ProtectionOptionsSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ProtectionOptionsSystem>, 0);
}

id re::internal::defaultRetain<re::ecs2::ProtectionOptionsSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::ProtectionOptionsSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_ImageBasedReflectionSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254112318);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254112318))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254112320, 0);
    *(uint64_t *)((char *)&qword_254112330 + 6) = 0;
    qword_254112330 = 0;
    qword_254112340 = 0;
    qword_254112348 = 0xFFFFFFFFLL;
    qword_254112320 = (uint64_t)&off_24ED7DAA8;
    qword_254112350 = (uint64_t)"ImageBasedReflectionSystem";
    dword_254112358 = 0;
    unk_254112360 = 0u;
    unk_254112370 = 0u;
    unk_254112380 = 0u;
    qword_254112390 = 0;
    __cxa_guard_release(&qword_254112318);
  }
  return &qword_254112320;
}

void re::ecs2::initInfo_ImageBasedReflectionSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xC466ACB6F5D99324;
  v5[1] = "ImageBasedReflectionSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0xD000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_ImageBasedReflectionSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::ImageBasedReflectionSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::ImageBasedReflectionSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::ImageBasedReflectionSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::ImageBasedReflectionSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::ImageBasedReflectionSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::ImageBasedReflectionSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

double re::internal::defaultConstruct<re::ecs2::ImageBasedReflectionSystem>(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v3;
  double result;

  a3[11] = 0u;
  a3[12] = 0u;
  a3[9] = 0u;
  a3[10] = 0u;
  a3[7] = 0u;
  a3[8] = 0u;
  a3[5] = 0u;
  a3[6] = 0u;
  a3[3] = 0u;
  a3[4] = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  re::ecs2::System::System((uint64_t)a3, 1, 1);
  *(_QWORD *)(v3 + 152) = 0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)v3 = &off_24ED69838;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_DWORD *)(v3 + 192) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v3 + 196) = 0x7FFFFFFFLL;
  return result;
}

void *re::internal::defaultDestruct<re::ecs2::ImageBasedReflectionSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a3 + 20);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

double re::internal::defaultConstructV2<re::ecs2::ImageBasedReflectionSystem>(_OWORD *a1)
{
  uint64_t v1;
  double result;

  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  re::ecs2::System::System((uint64_t)a1, 1, 1);
  *(_QWORD *)(v1 + 152) = 0;
  *(_OWORD *)(v1 + 136) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)v1 = &off_24ED69838;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_DWORD *)(v1 + 192) = 0;
  *(_QWORD *)&result = 0x7FFFFFFFLL;
  *(_QWORD *)(v1 + 196) = 0x7FFFFFFFLL;
  return result;
}

void *re::internal::defaultDestructV2<re::ecs2::ImageBasedReflectionSystem>(_QWORD *a1)
{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit(a1 + 20);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_ImageBasedReflectionSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImageBasedReflectionSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ImageBasedReflectionSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ImageBasedReflectionSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ImageBasedReflectionSystem>, this);
}

uint64_t re::ecs2::ImageBasedReflectionSystem::willAddSystemToECSService(re::ecs2::ImageBasedReflectionSystem *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 5) + 32))(*((_QWORD *)this + 5));
  result = re::ServiceLocator::serviceOrNull<re::RenderManager>(v2);
  *((_QWORD *)this + 14) = result;
  return result;
}

_BYTE *re::ecs2::ImageBasedReflectionSystem::willAddSceneToECSService(re::ecs2::ImageBasedReflectionSystem *this, re::EventBus **a2)
{
  re::EventBus *v2;
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE *result;
  __int128 v8;
  re::ecs2::Scene *v9;
  _BYTE v10[24];
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v9 = (re::ecs2::Scene *)a2;
  v2 = a2[36];
  if (!v2)
  {
    re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) An event bus is expected for ImageBasedReflectionSystem to track parameter changes.", "eventBus", "willAddSceneToECSService", 33);
    _os_crash();
    __break(1u);
  }
  v4 = (char *)this + 160;
  v11 = re::globalAllocators(this)[2];
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v11 + 32))(v11, 32, 0);
  *v5 = &off_24ED698C8;
  v5[1] = this;
  v5[2] = re::ecs2::ImageBasedReflectionSystem::componentWillDeactivateEventHandler;
  v5[3] = 0;
  v12 = v5;
  *(_QWORD *)&v8 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillDeactivateEvent>(v2, (uint64_t)v10, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType, 0);
  *((_QWORD *)&v8 + 1) = v6;
  re::HashTable<re::ecs2::Scene const*,RESubscriptionHandle,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::addNew((uint64_t)v4, (uint64_t *)&v9, &v8);
  result = v12;
  if (v12)
  {
    result = (_BYTE *)(**(uint64_t (***)(_BYTE *))v12)(v12);
    if (v12 != v10)
      return (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  }
  return result;
}

uint64_t re::ecs2::ImageBasedReflectionSystem::componentWillDeactivateEventHandler(uint64_t a1, uint64_t a2)
{
  re::MaterialManager *v2;
  re::ecs2::ImageBasedReflectionReceiverComponent *v3;

  v2 = *(re::MaterialManager **)(*(_QWORD *)(a1 + 112) + 24);
  v3 = (re::ecs2::ImageBasedReflectionReceiverComponent *)re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
  re::ecs2::ImageBasedReflectionReceiverComponent::removeParamsFromSystemParameterBlock(v3, v2, 1);
  return 0;
}

uint64_t re::ecs2::ImageBasedReflectionSystem::willRemoveSceneFromECSService(re::ecs2::ImageBasedReflectionSystem *this, re::ecs2::Scene *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v11 = (unint64_t)a2;
  v3 = *((_QWORD *)a2 + 36);
  v4 = (_QWORD *)((char *)this + 160);
  result = re::HashTable<re::ecs2::Scene const*,RESubscriptionHandle,re::Hash<re::ecs2::Scene const*>,re::EqualTo<re::ecs2::Scene const*>,true,false>::containsKey((uint64_t)this + 160, (uint64_t *)&v11);
  if ((_DWORD)result)
  {
    LODWORD(v6) = 0x7FFFFFFF;
    if (*v4)
    {
      v7 = 0x94D049BB133111EBLL
         * ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (v11 ^ (v11 >> 30))) >> 27));
      v8 = *(unsigned int *)(*((_QWORD *)this + 21) + 4 * ((v7 ^ (v7 >> 31)) % *((unsigned int *)this + 46)));
      if ((_DWORD)v8 != 0x7FFFFFFF)
      {
        v9 = *((_QWORD *)this + 22);
        if (*(_QWORD *)(v9 + 40 * v8 + 16) == v11)
        {
          LODWORD(v6) = v8;
        }
        else
        {
          v6 = v8;
          while (1)
          {
            LODWORD(v6) = *(_DWORD *)(v9 + 40 * v6 + 8) & 0x7FFFFFFF;
            if ((_DWORD)v6 == 0x7FFFFFFF)
              break;
            if (*(_QWORD *)(v9 + 40 * v6 + 16) == v11)
              goto LABEL_11;
          }
          LODWORD(v6) = 0x7FFFFFFF;
        }
      }
    }
LABEL_11:
    v10 = *((_QWORD *)this + 22) + 40 * v6;
    re::EventBus::unsubscribe(v3, *(_QWORD *)(v10 + 24), *(_QWORD *)(v10 + 32));
    return re::HashTable<re::ecs2::Scene *,RESubscriptionHandle,re::Hash<re::ecs2::Scene *>,re::EqualTo<re::ecs2::Scene *>,true,false>::remove((uint64_t)v4, (uint64_t *)&v11);
  }
  return result;
}

void re::ecs2::ImageBasedReflectionSystem::updateScenes(re::ecs2::ImageBasedReflectionSystem *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _anonymous_namespace_ *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  const re::DynamicString *v12;
  unint64_t v13;
  const char *v14;
  char v15;

  v2 = *((_QWORD *)a1 + 14);
  if (v2)
  {
    _MergedGlobals_294 = 0;
    v5 = *(_QWORD *)(v2 + 88);
    if (v5)
    {
      v15 = 0;
      v13 = 0xE15535833B0F11F2;
      v14 = "imageBasedReflectionSystem:debugLog";
      re::DebugSettingsManager::getWithErrorCode<BOOL>(v5, &v13, &v15);
      re::StringID::destroyString((re::StringID *)&v13);
      _MergedGlobals_294 = v15;
      if (v15)
      {
        re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)&v13, v12);
        if (v13)
        {
          if ((v14 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v13 + 40))();
        }
      }
    }
    v7 = *(_QWORD *)(a2 + 8);
    if (v7)
    {
      v8 = *(uint64_t **)a2;
      v9 = 8 * v7;
      do
      {
        v10 = *v8;
        if (*v8)
        {
          v11 = (id)(v10 + 8);
          re::ecs2::ImageBasedReflectionSystem::applyAttachmentsForScene(a1, (const re::ecs2::Scene *)v10);

        }
        else
        {
          re::ecs2::ImageBasedReflectionSystem::applyAttachmentsForScene(a1, 0);
        }
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
  }
}

void re::ecs2::ImageBasedReflectionSystem::log(re::ecs2::ImageBasedReflectionSystem *this, const re::DynamicString *a2)
{
  NSObject *v3;
  char *v4;
  int v5;
  char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = *re::graphicsLogObjects(this);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if ((*((_QWORD *)this + 1) & 1) != 0)
      v4 = (char *)*((_QWORD *)this + 2);
    else
      v4 = (char *)this + 9;
    v5 = 136315138;
    v6 = v4;
    _os_log_impl(&dword_224FE9000, v3, OS_LOG_TYPE_DEFAULT, "ImageBasedReflectionSystem: %s", (uint8_t *)&v5, 0xCu);
  }
}

void re::ecs2::ImageBasedReflectionSystem::applyAttachmentsForScene(re::ecs2::ImageBasedReflectionSystem *this, const re::ecs2::Scene *a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  re::ecs2::ImageBasedReflectionReceiverComponent **v8;
  uint64_t v9;
  re::ecs2::ImageBasedReflectionReceiverComponent *v10;
  uint64_t ReflectionContentComponent;
  const re::ecs2::Entity *v12;
  uint64_t v13;
  float32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t CustomDockingRegionComponentFromScene;
  unsigned __int8 v18;
  NSObject *v19;
  const re::DynamicString *v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t *v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t i;
  char *v36;
  int v37;
  int v38;
  float v39;
  uint64_t v40;
  int32x2_t v41;
  int v42;
  uint64_t j;
  char *v44;
  uint64_t k;
  uint8_t *v46;
  uint64_t v47;
  const re::DynamicString *v48;
  char *v49;
  const re::DynamicString *v50;
  const re::DynamicString *v51;
  unint64_t v52;
  uint64_t v53;
  const re::DynamicString *v54;
  const re::DynamicString *v55;
  __int128 v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  re::RenderManager **v60;
  _OWORD v61[15];
  int v62;
  __int128 v63;
  char *v64;
  uint8_t buf[16];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[120];
  int v70[3];
  char v71;
  _OWORD v72[4];
  float v73;
  float v74;
  uint64_t v75;

  v75 = *MEMORY[0x24BDAC8D0];
  v2 = *((_QWORD *)this + 14);
  if (v2 && (v60 = *(re::RenderManager ***)(v2 + 24)) != 0)
  {
    if (re::GraphicsFeatureFlags::systemMaterialParametersDirtyTracking(void)::onceToken != -1)
      dispatch_once(&re::GraphicsFeatureFlags::systemMaterialParametersDirtyTracking(void)::onceToken, &__block_literal_global_35);
    if (re::GraphicsFeatureFlags::systemMaterialParametersDirtyTracking(void)::gSystemMaterialParametersDirtyTracking)
    {
      v5 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
           + 8);
      if (*((_QWORD *)a2 + 28) > v5)
      {
        v6 = *(_QWORD *)(*((_QWORD *)a2 + 30) + 8 * v5);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 24);
          if (v7)
          {
            v8 = *(re::ecs2::ImageBasedReflectionReceiverComponent ***)(v6 + 40);
            v9 = 8 * v7;
            do
            {
              v10 = *v8++;
              re::ecs2::ImageBasedReflectionReceiverComponent::removeParamsFromSystemParameterBlock(v10, *(re::MaterialManager **)(*((_QWORD *)this + 14) + 24), 0);
              v9 -= 8;
            }
            while (v9);
          }
        }
      }
    }
    ReflectionContentComponent = re::ecs2::ImageBasedReflectionSystem::findReflectionContentComponent(a2, (const re::ecs2::Scene *)1);
    v13 = ReflectionContentComponent;
    v14 = 0uLL;
    v58 = 0u;
    if (ReflectionContentComponent)
    {
      v15 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(*(_QWORD *)(ReflectionContentComponent + 16) + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::VideoComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType);
      if (!v15)
      {
        if (_MergedGlobals_294)
        {
          re::DynamicString::format((re::DynamicString *)"Warning! Encountered entity %llu with a ImageBasedReflectionContentComponent but no video component", (re::DynamicString *)buf, *(_QWORD *)(*(_QWORD *)(v13 + 16) + 296));
          re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)buf, v20);
          if (*(_QWORD *)buf)
          {
            if ((buf[8] & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)buf + 40))();
          }
        }
        return;
      }
      v16 = v15;
      CustomDockingRegionComponentFromScene = re::ecs2::CustomDockingRegionComponent::getCustomDockingRegionComponentFromScene((uint64_t)a2);
      if (CustomDockingRegionComponentFromScene)
      {
        v58 = *(float32x4_t *)(CustomDockingRegionComponentFromScene + 32);
        v14 = *(float32x4_t *)(CustomDockingRegionComponentFromScene + 48);
      }
      else
      {
        if (_MergedGlobals_294)
        {
          re::DynamicString::format((re::DynamicString *)"Warning! Encountered entity %llu with a ImageBasedReflectionContentComponent but no docking region component", (re::DynamicString *)buf, *(_QWORD *)(*(_QWORD *)(v13 + 16) + 296));
          re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)buf, v55);
          if (*(_QWORD *)buf)
          {
            if ((buf[8] & 1) != 0)
              (*(void (**)(void))(**(_QWORD **)buf + 40))();
          }
        }
        v14 = 0uLL;
      }
    }
    else
    {
      v16 = 0;
    }
    v57 = v14;
    v21 = *(_QWORD *)(*((_QWORD *)this + 14) + 288);
    v22 = *(_QWORD *)(v21 + 1312);
    if (v22)
    {
      v23 = (*(float (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
      if (!v13)
        return;
    }
    else
    {
      v23 = *(float *)(v21 + 1320);
      if (!v13)
        return;
    }
    if (v16)
    {
      re::ecs2::ibrutils::inferContentPlaneGeometry(*(re::ecs2::ibrutils **)(v13 + 16), v12, (uint64_t)v72);
      if (_MergedGlobals_294)
      {
        *(_OWORD *)buf = v72[0];
        v66 = v72[1];
        v67 = v72[2];
        v68 = v72[3];
        re::GraphicsLoggingUtilities::toStr((float *)buf, (re::DynamicString *)&v63);
        if ((BYTE8(v63) & 1) != 0)
          v49 = v64;
        else
          v49 = (char *)&v63 + 9;
        re::DynamicString::format((re::DynamicString *)"Content worldToPlaneUVsTransformMatrix: %s", (re::DynamicString *)v61, v49);
        re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)v61, v50);
        if (*(_QWORD *)&v61[0])
        {
          if ((BYTE8(v61[0]) & 1) != 0)
            (*(void (**)(void))(**(_QWORD **)&v61[0] + 40))();
          memset(v61, 0, 32);
        }
        if ((_QWORD)v63 && (BYTE8(v63) & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v63 + 40))();
        re::DynamicString::format((re::DynamicString *)"Content planeWidth: %g planeHeight: %g", (re::DynamicString *)v61, v73, v74);
        re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)v61, v51);
        if (*(_QWORD *)&v61[0] && (BYTE8(v61[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v61[0] + 40))();
        v52 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
              + 8);
        if (*((_QWORD *)a2 + 28) <= v52)
        {
          v53 = 0;
        }
        else
        {
          v53 = *(_QWORD *)(*((_QWORD *)a2 + 30) + 8 * v52);
          if (v53)
            v53 = *(_QWORD *)(v53 + 24);
        }
        re::DynamicString::format((re::DynamicString *)"Content will be applied to %zu receiver(s)", (re::DynamicString *)v61, v53);
        re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)v61, v54);
        if (*(_QWORD *)&v61[0] && (BYTE8(v61[0]) & 1) != 0)
          (*(void (**)(void))(**(_QWORD **)&v61[0] + 40))();
      }
      v24 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionReceiverComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
            + 8);
      if (*((_QWORD *)a2 + 28) > v24)
      {
        v25 = *(_QWORD *)(*((_QWORD *)a2 + 30) + 8 * v24);
        if (v25)
        {
          v26 = *(_QWORD *)(v25 + 24);
          if (v26)
          {
            v59.i64[0] = vsubq_f32(v57, v58).u64[0];
            v27 = *(uint64_t ***)(v25 + 40);
            v28 = &v27[v26];
            do
            {
              v29 = *v27;
              v30 = v73;
              v31 = v74;
              v32 = *(float *)(v16 + 280);
              re::ecs2::VideoComponent::getVideoTextureHandles((re::ecs2::VideoComponent *)v16, (uint64_t)buf);
              re::ecs2::VideoComponent::calculateColorSpaceTransformationMatrix(v16, (uint64_t)buf, &v63);
              v33 = *(float *)(v16 + 272) / (float)(v23 * v32);
              if (_MergedGlobals_294)
              {
                v34 = v29[2];
                if (v34)
                {
                  v47 = *(_QWORD *)(v34 + 280);
                  if (v47)
                  {
                    re::DynamicString::format((re::DynamicString *)"Applying video attachments for receiver entity %llu [%s] (videoBrightnessScale: %g)", (re::DynamicString *)v61, *(_QWORD *)(v34 + 296), v47, v33);
                    re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)v61, v48);
                    if (*(_QWORD *)&v61[0])
                    {
                      if ((BYTE8(v61[0]) & 1) != 0)
                        (*(void (**)(void))(**(_QWORD **)&v61[0] + 40))();
                    }
                  }
                }
              }
              for (i = 0; i != 240; i += 120)
              {
                v36 = (char *)v61 + i;
                *((_DWORD *)v36 + 27) = 0;
                *(_QWORD *)(v36 + 100) = 0;
                *(_OWORD *)v36 = 0uLL;
                *((_OWORD *)v36 + 1) = 0uLL;
                *((_OWORD *)v36 + 2) = 0uLL;
                *((_OWORD *)v36 + 3) = 0uLL;
                *((_OWORD *)v36 + 4) = 0uLL;
                *(_OWORD *)(v36 + 76) = 0uLL;
              }
              std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles const*,re::VideoChannelTextureHandles*>((uint64_t)&v71, (uint64_t)buf, (uint64_t)v70, (uint64_t)v61);
              v62 = v70[0];
              v37 = re::ecs2::VideoComponent::YCbCrMatrix((re::ecs2::VideoComponent *)v16);
              v38 = re::ecs2::VideoComponent::imageFunction((re::ecs2::VideoComponent *)v16);
              v39 = *(float *)(v16 + 276);
              *(_QWORD *)&v56 = re::ecs2::VideoComponent::getAverageColor((re::ecs2::VideoComponent *)v16);
              *((_QWORD *)&v56 + 1) = v40;
              v41.i32[0] = v59.i32[1];
              re::ecs2::ImageBasedReflectionReceiverComponent::applyAttachments(v29, v60, (re::TextureHandle *)v61, v37, v38, (int)&v63, v72, v42, v30, v31, v33, v39, v41, *(int32x2_t *)v59.f32, v56);
              for (j = 0; j != -240; j -= 120)
              {
                v44 = (char *)v61 + j;
                if (*(_QWORD *)((char *)&v61[14] + j))
                  re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)((char *)&v61[14] + j));
                *(_QWORD *)((char *)&v61[14] + j) = 0;
                re::TextureHandle::invalidate((re::TextureHandle *)(v44 + 184));
                re::TextureHandle::invalidate((re::TextureHandle *)(v44 + 168));
                re::TextureHandle::invalidate((re::TextureHandle *)(v44 + 152));
                re::TextureHandle::invalidate((re::TextureHandle *)(v44 + 136));
                re::TextureHandle::invalidate((re::TextureHandle *)((char *)&v61[7] + j + 8));
              }
              for (k = 0; k != -240; k -= 120)
              {
                v46 = &buf[k];
                if (*(_QWORD *)&v69[k + 104])
                  re::VideoObjectBase<re::VideoColorTransformBase,__CFArray const*>::release((const void **)&v69[k + 104]);
                *(_QWORD *)&v69[k + 104] = 0;
                re::TextureHandle::invalidate((re::TextureHandle *)(v46 + 184));
                re::TextureHandle::invalidate((re::TextureHandle *)(v46 + 168));
                re::TextureHandle::invalidate((re::TextureHandle *)(v46 + 152));
                re::TextureHandle::invalidate((re::TextureHandle *)(v46 + 136));
                re::TextureHandle::invalidate((re::TextureHandle *)&v69[k]);
              }
              ++v27;
            }
            while (v27 != v28);
          }
        }
      }
    }
  }
  else
  {
    do
      v18 = __ldaxr(byte_254112311);
    while (__stlxr(1u, byte_254112311));
    if ((v18 & 1) == 0)
    {
      v19 = *re::graphicsLogObjects(this);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_224FE9000, v19, OS_LOG_TYPE_DEFAULT, "ImageBasedReflection: ImageBasedReflectionSystem failed -- can't access MaterialManager", buf, 2u);
      }
    }
  }
}

uint64_t re::ecs2::ImageBasedReflectionSystem::findReflectionContentComponent(re::ecs2::ImageBasedReflectionSystem *this, const re::ecs2::Scene *a2)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  _QWORD *v17;
  int8x16_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const __int16 *v23;
  int16x8_t *v24;
  int16x8_t v25;
  int v26;
  uint16x8_t v27;
  const re::DynamicString *v28;
  const re::DynamicString *v29;
  const re::DynamicString *v30;
  const re::DynamicString *v32;
  const re::DynamicString *v33;
  const re::DynamicString *v34;
  int8x16_t v35;
  uint64_t v36;
  char v37;

  v3 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionContentComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
       + 8);
  if (*((_QWORD *)this + 28) > v3 && (v4 = *(_QWORD *)(*((_QWORD *)this + 30) + 8 * v3)) != 0)
  {
    v5 = *(_QWORD **)(v4 + 40);
    v6 = *(_QWORD *)(v4 + 24);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  if (_MergedGlobals_294)
    v7 = (int)a2;
  else
    v7 = 0;
  if (v7 == 1)
  {
    re::DynamicString::format((re::DynamicString *)"Found %zu content component(s)", (re::DynamicString *)&v36, v6);
    re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)&v36, v32);
    if (v36)
    {
      if ((v37 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v36 + 40))();
    }
  }
  if (!v6)
    return 0;
  v8 = *((unsigned __int16 *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
       + 8);
  if (*((_QWORD *)this + 28) <= v8 || (v9 = *(_QWORD *)(*((_QWORD *)this + 30) + 8 * v8)) == 0)
  {
    if (!v7)
    {
LABEL_16:
      v11 = 8 * v6;
      v12 = v5;
      while (1)
      {
        v13 = *v12;
        v14 = *(_QWORD *)(*v12 + 16);
        if (v14)
        {
          v15 = *(_DWORD *)(v14 + 288);
          v16 = v7 ^ 1;
          if ((v15 & 1) == 0)
            v16 = 1;
          if ((v16 & 1) == 0)
          {
            re::DynamicString::format((re::DynamicString *)"Chose arbitrary content component from entity %llu", (re::DynamicString *)&v36, *(_QWORD *)(v14 + 296));
LABEL_45:
            re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)&v36, v29);
            if (v36 && (v37 & 1) != 0)
              (*(void (**)(void))(*(_QWORD *)v36 + 40))();
            return v13;
          }
          if ((v15 & 1) != 0)
            return v13;
        }
        ++v12;
        v11 -= 8;
        if (!v11)
          goto LABEL_23;
      }
    }
    v10 = 0;
    goto LABEL_59;
  }
  v10 = *(_QWORD *)(v9 + 24);
  if ((v7 & 1) != 0)
  {
LABEL_59:
    re::DynamicString::format((re::DynamicString *)"Found %zu root component(s)", (re::DynamicString *)&v36, v10);
    re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)&v36, v33);
    if (v36 && (v37 & 1) != 0)
      (*(void (**)(void))(*(_QWORD *)v36 + 40))();
    if (!v10)
    {
      re::DynamicString::format((re::DynamicString *)"Warning! No root component found; results are undefined",
        (re::DynamicString *)&v36);
      re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)&v36, v34);
      if (v36 && (v37 & 1) != 0)
        (*(void (**)(void))(*(_QWORD *)v36 + 40))();
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  if (!v10)
    goto LABEL_16;
LABEL_23:
  v17 = &v5[v6];
  v18 = (int8x16_t)xmmword_2260F1E80;
  while (1)
  {
    v13 = *v5;
    if (v7)
    {
      v19 = *(_QWORD *)(v13 + 16);
      if (v19)
      {
        v35 = v18;
        re::DynamicString::format((re::DynamicString *)"Checking whether content component on entity %llu is parented by a root component...", (re::DynamicString *)&v36, *(_QWORD *)(v19 + 296));
        re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)&v36, v28);
        if (v36 && (v37 & 1) != 0)
          (*(void (**)(void))(*(_QWORD *)v36 + 40))();
        v18 = v35;
      }
    }
    v20 = *(_QWORD *)(v13 + 16);
    if (v20)
    {
      if ((*(_BYTE *)(v20 + 288) & 1) != 0)
        break;
    }
LABEL_37:
    if (++v5 == v17)
    {
      if (v7)
      {
        re::DynamicString::format((re::DynamicString *)"No valid content component was found", (re::DynamicString *)&v36);
        re::ecs2::ImageBasedReflectionSystem::log((re::ecs2::ImageBasedReflectionSystem *)&v36, v30);
        if (v36)
        {
          if ((v37 & 1) != 0)
            (*(void (**)(void))(*(_QWORD *)v36 + 40))();
        }
      }
      return 0;
    }
  }
  v21 = *(_QWORD *)(v13 + 16);
  while (1)
  {
    v22 = *(unsigned __int16 *)(v21 + 82);
    if (*(_WORD *)(v21 + 82))
    {
      v23 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::ImageBasedReflectionRootComponent,(re::ecs2::ComponentTypeBase::Flags)2>::s_componentType
                            + 16);
      v24 = *(int16x8_t **)(v21 + 88);
      v25 = vld1q_dup_s16(v23);
      v26 = 1;
      while (1)
      {
        v27 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v25, *v24), v18);
        v27.i16[0] = vmaxvq_u16(v27);
        if (v27.i32[0])
          break;
        v26 -= 8;
        ++v24;
        if (!--v22)
          goto LABEL_35;
      }
      if (v27.u16[0] - v26 < *(unsigned __int16 *)(v21 + 80))
        break;
    }
LABEL_35:
    v21 = *(_QWORD *)(v21 + 24);
    if (!v21 || (*(_BYTE *)(v21 + 288) & 0x80) != 0)
      goto LABEL_37;
  }
  if (v7)
  {
    re::DynamicString::format((re::DynamicString *)"Found root component parenting content from entity %llu, will use this content", (re::DynamicString *)&v36, *(_QWORD *)(v20 + 296));
    goto LABEL_45;
  }
  return v13;
}

void re::ecs2::ImageBasedReflectionSystem::~ImageBasedReflectionSystem(re::ecs2::ImageBasedReflectionSystem *this)
{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::HashTable<re::AssetType const*,std::pair<unsigned long,unsigned long>,re::Hash<re::AssetType const*>,re::EqualTo<re::AssetType const*>,true,false>::deinit((uint64_t *)this + 20);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::ImageBasedReflectionSystem::typeInfo(re::ecs2::ImageBasedReflectionSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"ImageBasedReflectionSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_ImageBasedReflectionSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_ImageBasedReflectionSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::ImageBasedReflectionSystem>, 0);
}

void re::internal::CallableMemFn<re::ecs2::ImageBasedReflectionSystem,REEventHandlerResult (re::ecs2::ImageBasedReflectionSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedReflectionSystem,REEventHandlerResult (re::ecs2::ImageBasedReflectionSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedReflectionSystem,REEventHandlerResult (re::ecs2::ImageBasedReflectionSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED698C8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedReflectionSystem,REEventHandlerResult (re::ecs2::ImageBasedReflectionSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED698C8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::ImageBasedReflectionSystem,REEventHandlerResult (re::ecs2::ImageBasedReflectionSystem::*)(re::ecs2::Entity *,REComponentWillDeactivateEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillDeactivateEvent const&)>::size()
{
  return 32;
}

id re::internal::defaultRetain<re::ecs2::ImageBasedReflectionSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::ImageBasedReflectionSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

uint64_t *re::ecs2::allocInfo_VisualProxyCaptureComponent(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&_MergedGlobals_295);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_295))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541123B8, 0);
    *(uint64_t *)((char *)&qword_2541123C8 + 6) = 0;
    qword_2541123C8 = 0;
    qword_2541123D8 = 0;
    qword_2541123E0 = 0xFFFFFFFFLL;
    qword_2541123B8 = (uint64_t)&off_24ED7DAA8;
    qword_2541123E8 = (uint64_t)"VisualProxyCaptureComponent";
    dword_2541123F0 = 0;
    xmmword_2541123F8 = 0u;
    unk_254112408 = 0u;
    xmmword_254112418 = 0u;
    qword_254112428 = 0;
    __cxa_guard_release(&_MergedGlobals_295);
  }
  return &qword_2541123B8;
}

void re::ecs2::initInfo_VisualProxyCaptureComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[2];
  __int128 v11;

  v10[0] = 0x12371EF08E44DECALL;
  v10[1] = "VisualProxyCaptureComponent";
  re::StringID::destroyString((re::StringID *)v10);
  *((_OWORD *)this + 2) = v11;
  v4 = atomic_load((unsigned __int8 *)&qword_2541123A8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541123A8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541123A0 = v8;
      __cxa_guard_release(&qword_2541123A8);
    }
  }
  *((_QWORD *)this + 2) = 0xC000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 1;
  *((_QWORD *)this + 8) = &qword_2541123A0;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VisualProxyCaptureComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VisualProxyCaptureComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VisualProxyCaptureComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VisualProxyCaptureComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v9 = v11;
}

uint64_t re::internal::defaultConstruct<re::ecs2::VisualProxyCaptureComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return re::make::shared::unsafelyInplace<re::ecs2::VisualProxyCaptureComponent>(a3);
}

void *re::internal::defaultDestruct<re::ecs2::VisualProxyCaptureComponent>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v4;
  void *v5;

  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a3 + 136);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(a3 + 88));
  v4 = *(const void **)(a3 + 80);
  if (v4)
    CFRelease(v4);
  v5 = *(void **)(a3 + 72);
  if (v5)
  {

    *(_QWORD *)(a3 + 72) = 0;
  }
  if (*(_BYTE *)(a3 + 40))
  {
    objc_destroyWeak((id *)(a3 + 48));
    *(_QWORD *)(a3 + 48) = 0;
  }
  *(_QWORD *)a3 = &off_24ED426B8;
  return objc_destructInstance((id)(a3 + 8));
}

void *re::internal::defaultDestructV2<re::ecs2::VisualProxyCaptureComponent>(uint64_t a1)
{
  const void *v2;
  void *v3;

  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::destroyCallable(a1 + 136);
  re::HashSetBase<re::RigGraphSystem::BuildTask *,re::RigGraphSystem::BuildTask *,re::internal::ValueAsKey<re::RigGraphSystem::BuildTask *>,re::Hash<re::RigGraphSystem::BuildTask *>,re::EqualTo<re::RigGraphSystem::BuildTask *>,true,false>::deinit((uint64_t *)(a1 + 88));
  v2 = *(const void **)(a1 + 80);
  if (v2)
    CFRelease(v2);
  v3 = *(void **)(a1 + 72);
  if (v3)
  {

    *(_QWORD *)(a1 + 72) = 0;
  }
  if (*(_BYTE *)(a1 + 40))
  {
    objc_destroyWeak((id *)(a1 + 48));
    *(_QWORD *)(a1 + 48) = 0;
  }
  *(_QWORD *)a1 = &off_24ED426B8;
  return objc_destructInstance((id)(a1 + 8));
}

uint64_t re::ecs2::introspect_VisualProxyCaptureComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VisualProxyCaptureComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VisualProxyCaptureComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VisualProxyCaptureComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VisualProxyCaptureComponent>, this);
}

uint64_t *re::ecs2::allocInfo_VisualProxyCaptureSystem(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2541123B0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541123B0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254112430, 0);
    *(uint64_t *)((char *)&qword_254112440 + 6) = 0;
    qword_254112440 = 0;
    qword_254112450 = 0;
    qword_254112458 = 0xFFFFFFFFLL;
    qword_254112430 = (uint64_t)&off_24ED7DAA8;
    qword_254112460 = (uint64_t)"VisualProxyCaptureSystem";
    dword_254112468 = 0;
    xmmword_254112470 = 0u;
    unk_254112480 = 0u;
    xmmword_254112490 = 0u;
    qword_2541124A0 = 0;
    __cxa_guard_release(&qword_2541123B0);
  }
  return &qword_254112430;
}

void re::ecs2::initInfo_VisualProxyCaptureSystem(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  __int128 v4;
  _QWORD v5[2];
  __int128 v6;

  v5[0] = 0xB32037BEF810F18ELL;
  v5[1] = "VisualProxyCaptureSystem";
  re::StringID::destroyString((re::StringID *)v5);
  *((_OWORD *)this + 2) = v6;
  *((_QWORD *)this + 2) = 0x1A000000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = &re::ecs2::initInfo_VisualProxyCaptureSystem(re::IntrospectionBase *)::structureAttributes;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::VisualProxyCaptureSystem>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::VisualProxyCaptureSystem>;
  *((_QWORD *)this + 11) = re::internal::defaultRetain<re::ecs2::VisualProxyCaptureSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = re::internal::defaultRelease<re::ecs2::VisualProxyCaptureSystem>(void)::{lambda(void *)#1}::__invoke;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::VisualProxyCaptureSystem>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::VisualProxyCaptureSystem>;
  re::IntrospectionRegistry::add(this, v3);
  v4 = v6;
}

re::ecs2::VisualProxyCaptureSystem *re::internal::defaultConstruct<re::ecs2::VisualProxyCaptureSystem>(uint64_t a1, uint64_t a2, re::ecs2::VisualProxyCaptureSystem *a3)
{
  return re::ecs2::VisualProxyCaptureSystem::VisualProxyCaptureSystem(a3);
}

void *re::internal::defaultDestruct<re::ecs2::VisualProxyCaptureSystem>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a3 + 22);
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void *re::internal::defaultDestructV2<re::ecs2::VisualProxyCaptureSystem>(_QWORD *a1)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates(a1 + 22);
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_VisualProxyCaptureSystem(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VisualProxyCaptureSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VisualProxyCaptureSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VisualProxyCaptureSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VisualProxyCaptureSystem>, this);
}

BOOL re::ecs2::VisualProxyCaptureComponentStateImpl::processDirtyComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v21, a5, 0);
  v8 = v21;
  v9 = v22;
  v21 = a4;
  v22 = v8;
  v23 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = *(unsigned __int8 *)(*(_QWORD *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v22)
                               + 32);
      v15 = v21;
      v16 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v22);
      if (v14)
        v17 = 32;
      else
        v17 = 48;
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v15, v16, *(_QWORD *)(a3 + v17));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v22);
    }
    while (v22 != a5 || (unsigned __int16)v23 != 0xFFFF || WORD1(v23) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) == 0;
}

BOOL re::ecs2::VisualProxyCaptureComponentStateImpl::processUpdatingComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  int v16;
  re::ecs2::Entity *v17;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v21, a5, 0);
  v8 = v21;
  v9 = v22;
  v21 = a4;
  v22 = v8;
  v23 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = *(_QWORD *)re::DataArray<re::ecs2::Component *>::DataArrayIterator<re::ecs2::Component *,re::ecs2::Component * const&>::operator*((unsigned __int16 *)&v22);
      v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112) + 104);
      if (v15 && (v16 = *(_DWORD *)(v15 + 1764), v16 < 32))
      {
        v17 = (re::ecs2::Entity *)(v16 + 1);
        *(_DWORD *)(v15 + 1764) = (_DWORD)v17;
        *(_DWORD *)(v14 + 184) = (_DWORD)v17;
        if (v16 != -2)
          re::ecs2::VisualProxyCaptureHelper::markVisualProxyScope(*(re::ecs2::VisualProxyCaptureHelper **)(v14 + 16), v17);
      }
      else
      {
        *(_DWORD *)(v14 + 184) = -1;
      }
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v22);
    }
    while (v22 != a5 || (unsigned __int16)v23 != 0xFFFF || WORD1(v23) != 0xFFFF);
  }
  return *(_DWORD *)(a5 + 40) != 0;
}

re::ecs2::VisualProxyCaptureSystem *re::ecs2::VisualProxyCaptureSystem::VisualProxyCaptureSystem(re::ecs2::VisualProxyCaptureSystem *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _anonymous_namespace_ *v8;
  _anonymous_namespace_ *v9;
  _anonymous_namespace_ *v10;
  uint64_t v12;
  char v13;

  re::ecs2::System::System((uint64_t)this, 1, 1);
  *(_QWORD *)(v2 + 152) = 0;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)v2 = &off_24ED69960;
  *(_QWORD *)(v2 + 160) = off_24ED69920;
  v3 = v2 + 160;
  *(_QWORD *)(v2 + 168) = v2;
  *(_QWORD *)(v2 + 176) = 0;
  v4 = v2 + 176;
  *(_QWORD *)(v2 + 184) = 0;
  *(_DWORD *)(v2 + 192) = 1;
  *(_QWORD *)(v2 + 208) = 0;
  *(_QWORD *)(v2 + 216) = 0;
  *(_QWORD *)(v2 + 200) = 0;
  *(_DWORD *)(v2 + 224) = 0;
  *(_OWORD *)(v2 + 248) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  v5 = (_QWORD *)(v2 + 296);
  *(_OWORD *)(v2 + 232) = 0u;
  v6 = (_QWORD *)(v2 + 232);
  *(_DWORD *)(v2 + 312) = 1;
  v7 = (_QWORD *)(v2 + 344);
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_QWORD *)(v2 + 352) = 0;
  *(_DWORD *)(v2 + 360) = 1;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 384) = 0u;
  *(_OWORD *)(v2 + 393) = 0u;
  v10 = (_anonymous_namespace_ *)re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v5, 0);
  *((_DWORD *)this + 78) += 2;
  *((_QWORD *)this + 42) = 0;
  re::DynamicOverflowArray<std::unique_ptr<void,std::function<void ()(void *)>> *,2ul>::setCapacity(v7, 0);
  *((_DWORD *)this + 90) += 2;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = this;
  *((_QWORD *)this + 50) = v3;
  *((_BYTE *)this + 408) = 1;
  LOWORD(v12) = 257;
  HIDWORD(v12) = 1023969417;
  v13 = 0;
  re::ecs2::System::setTaskOptions(this, &v12);
  return this;
}

void re::ecs2::VisualProxyCaptureSystem::updateScenes(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = a3;
  v11 = a4;
  v5 = *(_QWORD *)(a1 + 104);
  if (!v5 || (*(_BYTE *)(v5 + 424) & 0x10) != 0)
  {
    v6 = a2[1];
    if (v6)
    {
      v7 = *a2;
      v8 = 8 * (_QWORD)v6;
      while (*(_QWORD *)(a1 + 112))
      {
        v9 = *v7++;
        re::ecs2::BasicComponentStates<re::ecs2::PhysicsJointsComponent>::updateForScene(a1 + 176, v9, (uint64_t)&v10, 0);
        v8 -= 8;
        if (!v8)
          return;
      }
      re::internal::assertLog((re::internal *)4, (uint64_t)a2, "assertion failure: '%s' (%s:line %i) ", "m_renderManager", "updateScenes", 98, v10, v11);
      _os_crash();
      __break(1u);
    }
  }
}

void re::ecs2::VisualProxyCaptureSystem::willAddSceneToECSService(re::ecs2::VisualProxyCaptureSystem *this, re::ecs2::Scene *a2)
{
  re::ecs2::BasicComponentStates<re::ecs2::VisualProxyCaptureComponent>::addScene((uint64_t)this + 176, (uint64_t)a2);
}

uint64_t re::ecs2::VisualProxyCaptureSystem::willRemoveSceneFromECSService(re::ecs2::VisualProxyCaptureSystem *this, re::ecs2::Scene *a2)
{
  return re::ecs2::BasicComponentStates<re::ecs2::CharacterControllerComponent>::removeScene((uint64_t)this + 176, (uint64_t)a2);
}

uint64_t re::ecs2::BasicComponentStateImpl<re::ecs2::VisualProxyCaptureComponent>::processPreparingComponents(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v14;
  unint64_t v15;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::DataArrayIterator((uint64_t)&v19, a5, 0);
  v8 = v19;
  v9 = v20;
  v19 = a4;
  v20 = v8;
  v21 = v9;
  v10 = (unsigned __int16)v9;
  v11 = v9 & 0xFFFF0000;
  if (v8 != a5 || v10 != 0xFFFF || v11 != 4294901760)
  {
    do
    {
      v14 = v19;
      v15 = re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::handle((unsigned __int16 *)&v20);
      re::ecs2::ComponentBucketsBase::moveComponent(*(re::ecs2::ComponentBucketsBase **)(a3 + 16), v14, v15, *(_QWORD *)(a3 + 48));
      re::DataArray<re::RigGraphOperatorDefinition>::DataArrayIterator<re::RigGraphOperatorDefinition,re::RigGraphOperatorDefinition&>::increment(&v20);
    }
    while (v20 != a5 || (unsigned __int16)v21 != 0xFFFF || WORD1(v21) != 0xFFFF);
  }
  return 0;
}

void re::ecs2::VisualProxyCaptureSystem::~VisualProxyCaptureSystem(re::ecs2::VisualProxyCaptureSystem *this)
{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 22);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
}

{
  re::ecs2::BasicComponentStates<re::ecs2::BlendShapeWeightsBufferComponent>::~BasicComponentStates((_QWORD *)this + 22);
  *(_QWORD *)this = &off_24ED426B8;
  objc_destructInstance((char *)this + 8);
  JUMPOUT(0x2276933B8);
}

uint64_t re::ecs2::VisualProxyCaptureSystem::typeInfo(re::ecs2::VisualProxyCaptureSystem *this)
{
  return re::internal::getOrCreateInfo((re::internal *)"VisualProxyCaptureSystem", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_VisualProxyCaptureSystem, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_VisualProxyCaptureSystem, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::VisualProxyCaptureSystem>, 0);
}

uint64_t re::make::shared::unsafelyInplace<re::ecs2::VisualProxyCaptureComponent>(uint64_t a1)
{
  uint64_t v2;

  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v2 + 16) = 0;
  *(_BYTE *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_24ED59040;
  *(_WORD *)(v2 + 32) = 256;
  *(_BYTE *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 56) = 0x20000000200;
  *(_DWORD *)(v2 + 64) = 71;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_DWORD *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 124) = 0x7FFFFFFFLL;
  *(_QWORD *)(a1 + 160) = re::globalAllocators((re *)v2)[2];
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = -1;
  return a1;
}

id re::internal::defaultRetain<re::ecs2::VisualProxyCaptureSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  return (id)(a1 + 8);
}

void re::internal::defaultRelease<re::ecs2::VisualProxyCaptureSystem>(void)::{lambda(void *)#1}::__invoke(uint64_t a1)
{

}

void re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::init(uint64_t a1, uint64_t a2, signed int a3)
{
  unint64_t v4;
  unsigned int *v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  signed int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;

  v4 = 245;
  v5 = (unsigned int *)&re::internal::PrimeHelper::s_primes;
  do
  {
    v6 = v4 >> 1;
    v7 = &v5[v4 >> 1];
    v9 = *v7;
    v8 = v7 + 1;
    v4 += ~(v4 >> 1);
    if (v9 < a3)
      v5 = v8;
    else
      v4 = v6;
  }
  while (v4);
  v10 = *v5;
  *(_QWORD *)a1 = a2;
  v11 = (4 * v10 + 15) & 0x7FFFFFFF0;
  v12 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v11 + 176 * v10, 16);
  if (v12)
  {
    v14 = v12;
    *(_QWORD *)(a1 + 8) = v12;
    if ((_DWORD)v10)
      memset_pattern16(v12, &memset_pattern_14, 4 * v10);
    *(_QWORD *)(a1 + 16) = &v14[v11];
    *(_DWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 40) = 0;
  }
  else
  {
    re::internal::assertLog((re::internal *)4, v13, "assertion failure: '%s' (%s:line %i) Out of memory.", "temp", "init", 575);
    _os_crash();
    __break(1u);
  }
}

void re::ecs2::AudioComponentForwarder::forwardAudioComponentState(re::ecs2::AudioComponentForwarder *this, uint64_t a2, re::ecs2::Entity *a3)
{
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  re::EventBus *v11;
  _QWORD *v12;
  re *v13;
  uint64_t v14;
  _QWORD *v15;
  re *v16;
  uint64_t v17;
  _QWORD *v18;
  re *v19;
  uint64_t v20;
  _QWORD *v21;
  re *v22;
  uint64_t v23;
  _QWORD *v24;
  re *v25;
  uint64_t v26;
  _QWORD *v27;
  re *v28;
  uint64_t v29;
  _QWORD *v30;
  re *v31;
  uint64_t v32;
  _QWORD *v33;
  re *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  NSObject *v49;
  const char *v50;
  NSObject *v51;
  uint32_t v52;
  NSObject *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  re *v59;
  uint64_t v60;
  re *v61;
  uint64_t v62;
  re *v63;
  uint64_t v64;
  re *v65;
  uint64_t v66;
  re *v67;
  uint64_t v68;
  re *v69;
  _BYTE v70[24];
  uint64_t v71;
  _BYTE *v72;
  _BYTE v73[24];
  uint64_t v74;
  _BYTE *v75;
  _BYTE v76[24];
  uint64_t v77;
  _BYTE *v78;
  _BYTE v79[24];
  uint64_t v80;
  _BYTE *v81;
  _BYTE v82[24];
  uint64_t v83;
  _BYTE *v84;
  _BYTE v85[24];
  uint64_t v86;
  _BYTE *v87;
  _BYTE v88[24];
  uint64_t v89;
  _BYTE *v90;
  _BYTE v91[24];
  uint64_t v92;
  _BYTE *v93;
  _BYTE v94[24];
  uint64_t v95;
  _BYTE *v96;
  uint8_t buf[4];
  uint64_t v98;
  __int16 v99;
  re::ecs2::Entity *v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  if (!a2 || !a3)
  {
    v7 = *re::audioLogObjects(this);
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 134218240;
    v98 = a2;
    v99 = 2048;
    v100 = a3;
    v50 = "Cannot set up audio component forwarding with source entity %p, destination entity %p";
    v51 = v7;
    v52 = 22;
    goto LABEL_64;
  }
  v6 = (_QWORD *)re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::tryGet((uint64_t)this, a2);
  if (v6)
  {
    *v6 = a3;
    goto LABEL_5;
  }
  v8 = a2;
  do
  {
    v9 = v8;
    v8 = *(_QWORD *)(v8 + 24);
  }
  while (v8);
  v10 = *(_QWORD *)(v9 + 16);
  if (!v10)
  {
    v49 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 134217984;
    v98 = a2;
    v50 = "Cannot set up audio component forwarding b/c entity %p has no scene";
    v51 = v49;
    v52 = 12;
    goto LABEL_64;
  }
  v11 = *(re::EventBus **)(v10 + 288);
  if (!v11)
  {
    v53 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      return;
    *(_WORD *)buf = 0;
    v50 = "Cannot set up audio component forwarding b/c entity's scene has no event bus";
    v51 = v53;
    v52 = 2;
LABEL_64:
    _os_log_error_impl(&dword_224FE9000, v51, OS_LOG_TYPE_ERROR, v50, buf, v52);
    return;
  }
  v95 = re::globalAllocators(0)[2];
  v96 = 0;
  v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v95 + 32))(v95, 32, 0);
  *v12 = &off_24ED69A08;
  v12[1] = this;
  v12[2] = re::ecs2::AudioComponentForwarder::didChangeComponent<re::ecs2::SpatialAudioComponent>;
  v12[3] = 0;
  v96 = v12;
  v13 = (re *)re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v11, a2, (uint64_t)v94, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v68 = v14;
  v69 = v13;
  v92 = re::globalAllocators(v13)[2];
  v93 = 0;
  v15 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v92 + 32))(v92, 32, 0);
  *v15 = &off_24ED69A08;
  v15[1] = this;
  v15[2] = re::ecs2::AudioComponentForwarder::didChangeComponent<re::ecs2::AmbientAudioComponent>;
  v15[3] = 0;
  v93 = v15;
  v16 = (re *)re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v11, a2, (uint64_t)v91, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v66 = v17;
  v67 = v16;
  v89 = re::globalAllocators(v16)[2];
  v90 = 0;
  v18 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v89 + 32))(v89, 32, 0);
  *v18 = &off_24ED69A08;
  v18[1] = this;
  v18[2] = re::ecs2::AudioComponentForwarder::didChangeComponent<re::ecs2::ChannelAudioComponent>;
  v18[3] = 0;
  v90 = v18;
  v19 = (re *)re::EventBus::subscribe<re::ecs2::Entity,REComponentDidChangeEvent>(v11, a2, (uint64_t)v88, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v64 = v20;
  v65 = v19;
  v86 = re::globalAllocators(v19)[2];
  v87 = 0;
  v21 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v86 + 32))(v86, 32, 0);
  *v21 = &off_24ED69A60;
  v21[1] = this;
  v21[2] = re::ecs2::AudioComponentForwarder::didAddComponent<re::ecs2::SpatialAudioComponent>;
  v21[3] = 0;
  v87 = v21;
  v22 = (re *)re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v11, a2, (uint64_t)v85, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v62 = v23;
  v63 = v22;
  v83 = re::globalAllocators(v22)[2];
  v84 = 0;
  v24 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v83 + 32))(v83, 32, 0);
  *v24 = &off_24ED69A60;
  v24[1] = this;
  v24[2] = re::ecs2::AudioComponentForwarder::didAddComponent<re::ecs2::AmbientAudioComponent>;
  v24[3] = 0;
  v84 = v24;
  v25 = (re *)re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v11, a2, (uint64_t)v82, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v60 = v26;
  v61 = v25;
  v80 = re::globalAllocators(v25)[2];
  v81 = 0;
  v27 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v80 + 32))(v80, 32, 0);
  *v27 = &off_24ED69A60;
  v27[1] = this;
  v27[2] = re::ecs2::AudioComponentForwarder::didAddComponent<re::ecs2::ChannelAudioComponent>;
  v27[3] = 0;
  v81 = v27;
  v28 = (re *)re::EventBus::subscribe<re::ecs2::Entity,REComponentDidAddEvent>(v11, a2, (uint64_t)v79, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v58 = v29;
  v59 = v28;
  v77 = re::globalAllocators(v28)[2];
  v78 = 0;
  v30 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v77 + 32))(v77, 32, 0);
  *v30 = &off_24ED69AB8;
  v30[1] = this;
  v30[2] = re::ecs2::AudioComponentForwarder::willRemoveComponent<re::ecs2::SpatialAudioComponent>;
  v30[3] = 0;
  v78 = v30;
  v31 = (re *)re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v11, a2, (uint64_t)v76, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v57 = v32;
  v74 = re::globalAllocators(v31)[2];
  v75 = 0;
  v33 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v74 + 32))(v74, 32, 0);
  *v33 = &off_24ED69AB8;
  v33[1] = this;
  v33[2] = re::ecs2::AudioComponentForwarder::willRemoveComponent<re::ecs2::AmbientAudioComponent>;
  v33[3] = 0;
  v75 = v33;
  v34 = (re *)re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v11, a2, (uint64_t)v73, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v36 = v35;
  v71 = re::globalAllocators(v34)[2];
  v72 = 0;
  v37 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v71 + 32))(v71, 32, 0);
  *v37 = &off_24ED69AB8;
  v37[1] = this;
  v37[2] = re::ecs2::AudioComponentForwarder::willRemoveComponent<re::ecs2::ChannelAudioComponent>;
  v37[3] = 0;
  v72 = v37;
  v38 = re::EventBus::subscribe<re::ecs2::Entity,REComponentWillRemoveEvent>(v11, a2, (uint64_t)v70, (uint64_t)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType, 0);
  v40 = v39;
  if (v72)
  {
    (**(void (***)(_BYTE *))v72)(v72);
    if (v72 != v70)
      (*(void (**)(uint64_t))(*(_QWORD *)v71 + 40))(v71);
    v72 = 0;
  }
  if (v75)
  {
    (**(void (***)(_BYTE *))v75)(v75);
    if (v75 != v73)
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 40))(v74);
    v75 = 0;
  }
  if (v78)
  {
    (**(void (***)(_BYTE *))v78)(v78);
    if (v78 != v76)
      (*(void (**)(uint64_t))(*(_QWORD *)v77 + 40))(v77);
    v78 = 0;
  }
  if (v81)
  {
    (**(void (***)(_BYTE *))v81)(v81);
    if (v81 != v79)
      (*(void (**)(uint64_t))(*(_QWORD *)v80 + 40))(v80);
    v81 = 0;
  }
  if (v84)
  {
    (**(void (***)(_BYTE *))v84)(v84);
    if (v84 != v82)
      (*(void (**)(uint64_t))(*(_QWORD *)v83 + 40))(v83);
    v84 = 0;
  }
  if (v87)
  {
    (**(void (***)(_BYTE *))v87)(v87);
    if (v87 != v85)
      (*(void (**)(uint64_t))(*(_QWORD *)v86 + 40))(v86);
    v87 = 0;
  }
  if (v90)
  {
    (**(void (***)(_BYTE *))v90)(v90);
    if (v90 != v88)
      (*(void (**)(uint64_t))(*(_QWORD *)v89 + 40))(v89);
    v90 = 0;
  }
  if (v93)
  {
    (**(void (***)(_BYTE *))v93)(v93);
    if (v93 != v91)
      (*(void (**)(uint64_t))(*(_QWORD *)v92 + 40))(v92);
    v93 = 0;
  }
  if (v96)
  {
    (**(void (***)(_BYTE *))v96)(v96);
    if (v96 != v94)
      (*(void (**)(uint64_t))(*(_QWORD *)v95 + 40))(v95);
    v96 = 0;
  }
  v41 = 0x94D049BB133111EBLL
      * ((0xBF58476D1CE4E5B9 * (a2 ^ ((unint64_t)a2 >> 30))) ^ ((0xBF58476D1CE4E5B9
                                                                        * (a2 ^ ((unint64_t)a2 >> 30))) >> 27));
  v42 = v41 ^ (v41 >> 31);
  v43 = *(_QWORD *)this;
  if (!*(_QWORD *)this
    || (v43 = v42 % *((unsigned int *)this + 6),
        v44 = *(unsigned int *)(*((_QWORD *)this + 1) + 4 * v43),
        (_DWORD)v44 == 0x7FFFFFFF))
  {
LABEL_51:
    v45 = *((_DWORD *)this + 9);
    if (v45 == 0x7FFFFFFF)
    {
      v45 = *((_DWORD *)this + 8);
      v46 = v45;
      if (v45 == *((_DWORD *)this + 6))
      {
        re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity((uint64_t)this, 2 * *((_DWORD *)this + 7));
        LODWORD(v43) = v42 % *((unsigned int *)this + 6);
        v46 = *((_DWORD *)this + 8);
      }
      *((_DWORD *)this + 8) = v46 + 1;
      v47 = *((_QWORD *)this + 2);
      v48 = *(_DWORD *)(v47 + 176 * v45 + 8);
    }
    else
    {
      v47 = *((_QWORD *)this + 2);
      v48 = *(_DWORD *)(v47 + 176 * v45 + 8);
      *((_DWORD *)this + 9) = v48 & 0x7FFFFFFF;
    }
    *(_DWORD *)(v47 + 176 * v45 + 8) = v48 | 0x80000000;
    v54 = 176 * v45;
    *(_DWORD *)(*((_QWORD *)this + 2) + v54 + 8) = *(_DWORD *)(*((_QWORD *)this + 2) + v54 + 8) & 0x80000000 | *(_DWORD *)(*((_QWORD *)this + 1) + 4 * v43);
    *(_QWORD *)(*((_QWORD *)this + 2) + v54) = v42;
    *(_QWORD *)(*((_QWORD *)this + 2) + v54 + 16) = a2;
    v55 = (_QWORD *)(*((_QWORD *)this + 2) + v54);
    v55[3] = a3;
    v55[4] = v69;
    v55[5] = v68;
    v55[6] = v67;
    v55[7] = v66;
    v55[8] = v65;
    v55[9] = v64;
    v55[10] = v63;
    v55[11] = v62;
    v55[12] = v61;
    v55[13] = v60;
    v55[14] = v59;
    v55[15] = v58;
    v55[16] = v31;
    v55[17] = v57;
    v55[18] = v34;
    v55[19] = v36;
    v55[20] = v38;
    v55[21] = v40;
    *(_DWORD *)(*((_QWORD *)this + 1) + 4 * v43) = v45;
    ++*((_DWORD *)this + 7);
    ++*((_DWORD *)this + 10);
    goto LABEL_5;
  }
  v56 = *((_QWORD *)this + 2);
  while (*(_QWORD *)(v56 + 176 * v44 + 16) != a2)
  {
    LODWORD(v44) = *(_DWORD *)(v56 + 176 * v44 + 8) & 0x7FFFFFFF;
    if ((_DWORD)v44 == 0x7FFFFFFF)
      goto LABEL_51;
  }
LABEL_5:
  if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType))
  {
    re::ecs2::AudioComponentForwarder::didChangeOrAddComponent<re::ecs2::SpatialAudioComponent>((uint64_t)this, a2);
  }
  else if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType))
  {
    re::ecs2::AudioComponentForwarder::didChangeOrAddComponent<re::ecs2::AmbientAudioComponent>((uint64_t)this, a2);
  }
  else if (re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType))
  {
    re::ecs2::AudioComponentForwarder::didChangeOrAddComponent<re::ecs2::ChannelAudioComponent>((uint64_t)this, a2);
  }
}

uint64_t re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::tryGet(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = 0x94D049BB133111EBLL
     * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * ((v2 ^ (v2 >> 31)) % *(unsigned int *)(a1 + 24)));
  if ((_DWORD)v3 == 0x7FFFFFFF)
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v5 + 176 * v3 + 16) != a2)
  {
    while (1)
    {
      LODWORD(v3) = *(_DWORD *)(v5 + 176 * v3 + 8) & 0x7FFFFFFF;
      if ((_DWORD)v3 == 0x7FFFFFFF)
        break;
      if (*(_QWORD *)(v5 + 176 * v3 + 16) == a2)
        return v5 + 176 * v3 + 24;
    }
    return 0;
  }
  return v5 + 176 * v3 + 24;
}

uint64_t re::ecs2::AudioComponentForwarder::didChangeComponent<re::ecs2::SpatialAudioComponent>(uint64_t a1, unint64_t a2)
{
  re::ecs2::AudioComponentForwarder::didChangeOrAddComponent<re::ecs2::SpatialAudioComponent>(a1, a2);
  return 0;
}

uint64_t re::ecs2::AudioComponentForwarder::didChangeComponent<re::ecs2::AmbientAudioComponent>(uint64_t a1, unint64_t a2)
{
  re::ecs2::AudioComponentForwarder::didChangeOrAddComponent<re::ecs2::AmbientAudioComponent>(a1, a2);
  return 0;
}

uint64_t re::ecs2::AudioComponentForwarder::didChangeComponent<re::ecs2::ChannelAudioComponent>(uint64_t a1, unint64_t a2)
{
  re::ecs2::AudioComponentForwarder::didChangeOrAddComponent<re::ecs2::ChannelAudioComponent>(a1, a2);
  return 0;
}

uint64_t re::ecs2::AudioComponentForwarder::didAddComponent<re::ecs2::SpatialAudioComponent>(uint64_t a1, unint64_t a2)
{
  re::ecs2::AudioComponentForwarder::didChangeOrAddComponent<re::ecs2::SpatialAudioComponent>(a1, a2);
  return 0;
}

uint64_t re::ecs2::AudioComponentForwarder::didAddComponent<re::ecs2::AmbientAudioComponent>(uint64_t a1, unint64_t a2)
{
  re::ecs2::AudioComponentForwarder::didChangeOrAddComponent<re::ecs2::AmbientAudioComponent>(a1, a2);
  return 0;
}

uint64_t re::ecs2::AudioComponentForwarder::didAddComponent<re::ecs2::ChannelAudioComponent>(uint64_t a1, unint64_t a2)
{
  re::ecs2::AudioComponentForwarder::didChangeOrAddComponent<re::ecs2::ChannelAudioComponent>(a1, a2);
  return 0;
}

uint64_t re::ecs2::AudioComponentForwarder::willRemoveComponent<re::ecs2::SpatialAudioComponent>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __int16 *v6;
  int16x8_t *v7;
  int16x8_t v8;
  int i;
  uint16x8_t v10;
  NSObject *v11;
  int v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::tryGet(a1, a2);
  if (v3)
  {
    v4 = *(_QWORD *)v3;
    v5 = *(unsigned __int16 *)(*(_QWORD *)v3 + 82);
    if (*(_WORD *)(*(_QWORD *)v3 + 82))
    {
      v6 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                           + 16);
      v7 = *(int16x8_t **)(v4 + 88);
      v8 = vld1q_dup_s16(v6);
      for (i = 1; ; i -= 8)
      {
        v10 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v8, *v7), (int8x16_t)xmmword_2260F1E80);
        v10.i16[0] = vmaxvq_u16(v10);
        if (v10.i32[0])
          break;
        ++v7;
        if (!--v5)
          return 0;
      }
      if (v10.u16[0] - i < *(unsigned __int16 *)(v4 + 80))
        re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(v4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    }
  }
  else
  {
    v11 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v13 = 134217984;
      v14 = a2;
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "willRemoveComponent for unknown entity %p", (uint8_t *)&v13, 0xCu);
    }
  }
  return 0;
}

uint64_t re::ecs2::AudioComponentForwarder::willRemoveComponent<re::ecs2::AmbientAudioComponent>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __int16 *v6;
  int16x8_t *v7;
  int16x8_t v8;
  int i;
  uint16x8_t v10;
  NSObject *v11;
  int v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::tryGet(a1, a2);
  if (v3)
  {
    v4 = *(_QWORD *)v3;
    v5 = *(unsigned __int16 *)(*(_QWORD *)v3 + 82);
    if (*(_WORD *)(*(_QWORD *)v3 + 82))
    {
      v6 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                           + 16);
      v7 = *(int16x8_t **)(v4 + 88);
      v8 = vld1q_dup_s16(v6);
      for (i = 1; ; i -= 8)
      {
        v10 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v8, *v7), (int8x16_t)xmmword_2260F1E80);
        v10.i16[0] = vmaxvq_u16(v10);
        if (v10.i32[0])
          break;
        ++v7;
        if (!--v5)
          return 0;
      }
      if (v10.u16[0] - i < *(unsigned __int16 *)(v4 + 80))
        re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(v4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    }
  }
  else
  {
    v11 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v13 = 134217984;
      v14 = a2;
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "willRemoveComponent for unknown entity %p", (uint8_t *)&v13, 0xCu);
    }
  }
  return 0;
}

uint64_t re::ecs2::AudioComponentForwarder::willRemoveComponent<re::ecs2::ChannelAudioComponent>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const __int16 *v6;
  int16x8_t *v7;
  int16x8_t v8;
  int i;
  uint16x8_t v10;
  NSObject *v11;
  int v13;
  unint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v3 = re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::tryGet(a1, a2);
  if (v3)
  {
    v4 = *(_QWORD *)v3;
    v5 = *(unsigned __int16 *)(*(_QWORD *)v3 + 82);
    if (*(_WORD *)(*(_QWORD *)v3 + 82))
    {
      v6 = (const __int16 *)((char *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType
                           + 16);
      v7 = *(int16x8_t **)(v4 + 88);
      v8 = vld1q_dup_s16(v6);
      for (i = 1; ; i -= 8)
      {
        v10 = (uint16x8_t)vandq_s8((int8x16_t)vceqq_s16(v8, *v7), (int8x16_t)xmmword_2260F1E80);
        v10.i16[0] = vmaxvq_u16(v10);
        if (v10.i32[0])
          break;
        ++v7;
        if (!--v5)
          return 0;
      }
      if (v10.u16[0] - i < *(unsigned __int16 *)(v4 + 80))
        re::ecs2::EntityComponentCollection::remove((re::ecs2::EntityComponentCollection *)(v4 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
    }
  }
  else
  {
    v11 = *re::audioLogObjects(0);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v13 = 134217984;
      v14 = a2;
      _os_log_error_impl(&dword_224FE9000, v11, OS_LOG_TYPE_ERROR, "willRemoveComponent for unknown entity %p", (uint8_t *)&v13, 0xCu);
    }
  }
  return 0;
}

void re::ecs2::AudioComponentForwarder::didChangeOrAddComponent<re::ecs2::SpatialAudioComponent>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  re::ecs2::NetworkComponent *v9;
  NSObject *v10;
  const char *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::tryGet(a1, a2);
  if (!v3)
  {
    v10 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      return;
    v12 = 134217984;
    v13 = a2;
    v11 = "didChangeOrAddComponent for unknown entity %p";
    goto LABEL_10;
  }
  v4 = (uint64_t *)v3;
  v5 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v5)
  {
    v10 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      return;
    v12 = 134217984;
    v13 = a2;
    v11 = "Audio component for entity %p is unexpectedly nil";
LABEL_10:
    _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v12, 0xCu);
    return;
  }
  v6 = v5;
  v7 = *v4;
  v8 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v7 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::SpatialAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  *(_QWORD *)(v8 + 28) = *(_QWORD *)(v6 + 28);
  *(_DWORD *)(v8 + 40) = *(_DWORD *)(v6 + 40);
  *(_OWORD *)(v8 + 44) = *(_OWORD *)(v6 + 44);
  re::ecs2::Component::markDirty((_QWORD *)v8);
  v9 = *(re::ecs2::NetworkComponent **)(v7 + 200);
  if (v9)
    re::ecs2::NetworkComponent::markDirty(v9, (const re::ecs2::Component *)v8);
}

void re::ecs2::AudioComponentForwarder::didChangeOrAddComponent<re::ecs2::AmbientAudioComponent>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  re::ecs2::NetworkComponent *v9;
  NSObject *v10;
  const char *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::tryGet(a1, a2);
  if (!v3)
  {
    v10 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      return;
    v12 = 134217984;
    v13 = a2;
    v11 = "didChangeOrAddComponent for unknown entity %p";
    goto LABEL_10;
  }
  v4 = (uint64_t *)v3;
  v5 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v5)
  {
    v10 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      return;
    v12 = 134217984;
    v13 = a2;
    v11 = "Audio component for entity %p is unexpectedly nil";
LABEL_10:
    _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v12, 0xCu);
    return;
  }
  v6 = v5;
  v7 = *v4;
  v8 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v7 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::AmbientAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  *(_DWORD *)(v8 + 28) = *(_DWORD *)(v6 + 28);
  re::ecs2::Component::markDirty((_QWORD *)v8);
  v9 = *(re::ecs2::NetworkComponent **)(v7 + 200);
  if (v9)
    re::ecs2::NetworkComponent::markDirty(v9, (const re::ecs2::Component *)v8);
}

void re::ecs2::AudioComponentForwarder::didChangeOrAddComponent<re::ecs2::ChannelAudioComponent>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  re::ecs2::NetworkComponent *v9;
  NSObject *v10;
  const char *v11;
  int v12;
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::tryGet(a1, a2);
  if (!v3)
  {
    v10 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      return;
    v12 = 134217984;
    v13 = a2;
    v11 = "didChangeOrAddComponent for unknown entity %p";
    goto LABEL_10;
  }
  v4 = (uint64_t *)v3;
  v5 = re::ecs2::EntityComponentCollection::get((re::ecs2::EntityComponentCollection *)(a2 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  if (!v5)
  {
    v10 = *re::audioLogObjects(0);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      return;
    v12 = 134217984;
    v13 = a2;
    v11 = "Audio component for entity %p is unexpectedly nil";
LABEL_10:
    _os_log_error_impl(&dword_224FE9000, v10, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v12, 0xCu);
    return;
  }
  v6 = v5;
  v7 = *v4;
  v8 = re::ecs2::EntityComponentCollection::getOrAdd((re::ecs2::EntityComponentCollection *)(v7 + 32), (const re::ecs2::ComponentTypeBase *)re::ecs2::ComponentImpl<re::ecs2::ChannelAudioComponent,(re::ecs2::ComponentTypeBase::Flags)4>::s_componentType);
  *(_DWORD *)(v8 + 28) = *(_DWORD *)(v6 + 28);
  re::ecs2::Component::markDirty((_QWORD *)v8);
  v9 = *(re::ecs2::NetworkComponent **)(v7 + 200);
  if (v9)
    re::ecs2::NetworkComponent::markDirty(v9, (const re::ecs2::Component *)v8);
}

void re::ecs2::AudioComponentForwarder::stopForwardingAudioComponentState(re::ecs2::AudioComponentForwarder *this, unint64_t a2, re::ecs2::Entity *a3)
{
  uint64_t v6;
  uint64_t v7;
  re::ecs2::Entity *v8;
  re::ecs2::Entity *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  NSObject *v18;
  const char *v19;
  NSObject *v20;
  uint32_t v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int *v26;
  int v27;
  int v28;
  int v29;
  unint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v6 = re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::tryGet((uint64_t)this, a2);
  if (!v6)
    return;
  v7 = v6;
  if (*(re::ecs2::Entity **)v6 != a3)
    return;
  v8 = (re::ecs2::Entity *)a2;
  do
  {
    v9 = v8;
    v8 = (re::ecs2::Entity *)*((_QWORD *)v8 + 3);
  }
  while (v8);
  v10 = *((_QWORD *)v9 + 2);
  if (!v10)
  {
    v18 = *re::audioLogObjects((re *)v6);
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      return;
    v29 = 134217984;
    v30 = a2;
    v19 = "Cannot clean up audio component forwarding b/c entity %p has no scene";
    v20 = v18;
    v21 = 12;
    goto LABEL_18;
  }
  v11 = *(_QWORD *)(v10 + 288);
  if (!v11)
  {
    v22 = *re::audioLogObjects((re *)v6);
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      return;
    LOWORD(v29) = 0;
    v19 = "Cannot clean up audio component forwarding b/c entity's scene has no event bus";
    v20 = v22;
    v21 = 2;
LABEL_18:
    _os_log_error_impl(&dword_224FE9000, v20, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&v29, v21);
    return;
  }
  re::EventBus::unsubscribe(*(_QWORD *)(v10 + 288), *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16));
  re::EventBus::unsubscribe(v11, *(_QWORD *)(v7 + 24), *(_QWORD *)(v7 + 32));
  re::EventBus::unsubscribe(v11, *(_QWORD *)(v7 + 40), *(_QWORD *)(v7 + 48));
  re::EventBus::unsubscribe(v11, *(_QWORD *)(v7 + 56), *(_QWORD *)(v7 + 64));
  re::EventBus::unsubscribe(v11, *(_QWORD *)(v7 + 72), *(_QWORD *)(v7 + 80));
  re::EventBus::unsubscribe(v11, *(_QWORD *)(v7 + 88), *(_QWORD *)(v7 + 96));
  re::EventBus::unsubscribe(v11, *(_QWORD *)(v7 + 104), *(_QWORD *)(v7 + 112));
  re::EventBus::unsubscribe(v11, *(_QWORD *)(v7 + 120), *(_QWORD *)(v7 + 128));
  re::EventBus::unsubscribe(v11, *(_QWORD *)(v7 + 136), *(_QWORD *)(v7 + 144));
  if (*(_QWORD *)this)
  {
    v12 = 0x94D049BB133111EBLL
        * ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) ^ ((0xBF58476D1CE4E5B9 * (a2 ^ (a2 >> 30))) >> 27));
    v13 = (v12 ^ (v12 >> 31)) % *((unsigned int *)this + 6);
    v14 = *((_QWORD *)this + 1);
    v15 = *(unsigned int *)(v14 + 4 * v13);
    if ((_DWORD)v15 != 0x7FFFFFFF)
    {
      v16 = *((_QWORD *)this + 2);
      if (*(_QWORD *)(v16 + 176 * v15 + 16) == a2)
      {
        *(_DWORD *)(v14 + 4 * v13) = *(_DWORD *)(v16 + 176 * v15 + 8) & 0x7FFFFFFF;
LABEL_20:
        v23 = *((_QWORD *)this + 2);
        v24 = v23 + 176 * v15;
        v27 = *(_DWORD *)(v24 + 8);
        v26 = (int *)(v24 + 8);
        v25 = v27;
        if (v27 < 0)
        {
          *v26 = v25 & 0x7FFFFFFF;
          v23 = *((_QWORD *)this + 2);
          v25 = *(_DWORD *)(v23 + 176 * v15 + 8);
        }
        *(_DWORD *)(v23 + 176 * v15 + 8) = *((_DWORD *)this + 9) | v25 & 0x80000000;
        --*((_DWORD *)this + 7);
        v28 = *((_DWORD *)this + 10) + 1;
        *((_DWORD *)this + 9) = v15;
        *((_DWORD *)this + 10) = v28;
      }
      else
      {
        while (1)
        {
          v17 = v15;
          LODWORD(v15) = *(_DWORD *)(v16 + 176 * v15 + 8) & 0x7FFFFFFF;
          if ((_DWORD)v15 == 0x7FFFFFFF)
            break;
          if (*(_QWORD *)(v16 + 176 * v15 + 16) == a2)
          {
            *(_DWORD *)(v16 + 176 * v17 + 8) = *(_DWORD *)(v16 + 176 * v17 + 8) & 0x80000000 | *(_DWORD *)(v16 + 176 * v15 + 8) & 0x7FFFFFFF;
            goto LABEL_20;
          }
        }
      }
    }
  }
}

void re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED69A08;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED69A08;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentDidChangeEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidChangeEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED69A60;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED69A60;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentDidAddEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentDidAddEvent const&)>::size()
{
  return 32;
}

void re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::~CallableMemFn()
{
  JUMPOUT(0x2276933B8);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::operator()(_QWORD *a1, _QWORD *a2)
{
  uint64_t (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;

  v2 = (uint64_t (*)(_QWORD *, _QWORD))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _QWORD))(*v4 + v2);
  return v2(v4, *a2);
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::cloneInto(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  *(_QWORD *)a2 = &off_24ED69AB8;
  v2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v2;
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::moveInto(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a2 = &off_24ED69AB8;
  *(_QWORD *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  return a2;
}

uint64_t re::internal::CallableMemFn<re::ecs2::AudioComponentForwarder,REEventHandlerResult (re::ecs2::AudioComponentForwarder::*)(re::ecs2::Entity *,REComponentWillRemoveEvent const&),REEventHandlerResult ()(re::ecs2::Entity *,REComponentWillRemoveEvent const&)>::size()
{
  return 32;
}

void re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  unsigned int v8;
  __int128 v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  signed int v32;
  _BYTE v33[44];

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a2 && *(_DWORD *)(a1 + 24) != a2 && *(_DWORD *)(a1 + 28) <= a2)
    {
      memset(v33, 0, 36);
      *(_QWORD *)&v33[36] = 0x7FFFFFFFLL;
      re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::init((uint64_t)v33, v4, a2);
      v5 = *(_OWORD *)a1;
      *(_QWORD *)a1 = *(_QWORD *)v33;
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_OWORD *)&v33[8];
      *(_OWORD *)v33 = v5;
      *(_QWORD *)&v33[16] = v6;
      *(_OWORD *)(a1 + 8) = v7;
      v9 = *(_OWORD *)&v33[24];
      *(_OWORD *)&v33[24] = *(_OWORD *)(a1 + 24);
      v8 = *(_DWORD *)&v33[32];
      *(_OWORD *)(a1 + 24) = v9;
      v10 = v8;
      if (v8)
      {
        v11 = 0;
        v12 = 0;
        v13 = v7;
        v14 = DWORD1(v9);
        do
        {
          v15 = (uint64_t *)(*(_QWORD *)&v33[16] + v11);
          if ((*(_DWORD *)(*(_QWORD *)&v33[16] + v11 + 8) & 0x80000000) != 0)
          {
            v16 = *v15;
            v17 = *(unsigned int *)(a1 + 24);
            v18 = *v15 % v17;
            v19 = *(_DWORD *)(a1 + 36);
            if (v19 == 0x7FFFFFFF)
            {
              v19 = *(_DWORD *)(a1 + 32);
              v20 = v19;
              if (v19 == (_DWORD)v17)
              {
                re::HashTable<re::ecs2::Entity *,re::ecs2::AudioComponentForwarder::ForwardingState,re::Hash<re::ecs2::Entity *>,re::EqualTo<re::ecs2::Entity *>,true,false>::setCapacity(a1, (2 * v14));
                v18 = v16 % *(unsigned int *)(a1 + 24);
                v20 = *(_DWORD *)(a1 + 32);
                v13 = *(_QWORD *)(a1 + 8);
              }
              *(_DWORD *)(a1 + 32) = v20 + 1;
              v21 = *(_QWORD *)(a1 + 16);
              v22 = *(_DWORD *)(v21 + 176 * v19 + 8);
            }
            else
            {
              v21 = *(_QWORD *)(a1 + 16);
              v22 = *(_DWORD *)(v21 + 176 * v19 + 8);
              *(_DWORD *)(a1 + 36) = v22 & 0x7FFFFFFF;
            }
            *(_DWORD *)(v21 + 176 * v19 + 8) = v22 | 0x80000000;
            v23 = *(_QWORD *)(a1 + 16) + 176 * v19;
            *(_DWORD *)(v23 + 8) = *(_DWORD *)(v23 + 8) & 0x80000000 | *(_DWORD *)(v13 + 4 * v18);
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 176 * v19) = v16;
            *(_QWORD *)(*(_QWORD *)(a1 + 16) + 176 * v19 + 16) = v15[2];
            v24 = *(_QWORD *)(a1 + 16) + 176 * v19;
            v25 = *(_OWORD *)(v15 + 3);
            *(_OWORD *)(v24 + 40) = *(_OWORD *)(v15 + 5);
            *(_OWORD *)(v24 + 24) = v25;
            v26 = *(_OWORD *)(v15 + 7);
            v27 = *(_OWORD *)(v15 + 9);
            v28 = *(_OWORD *)(v15 + 11);
            *(_OWORD *)(v24 + 104) = *(_OWORD *)(v15 + 13);
            *(_OWORD *)(v24 + 88) = v28;
            *(_OWORD *)(v24 + 72) = v27;
            *(_OWORD *)(v24 + 56) = v26;
            v29 = *(_OWORD *)(v15 + 15);
            v30 = *(_OWORD *)(v15 + 17);
            v31 = *(_OWORD *)(v15 + 19);
            *(_QWORD *)(v24 + 168) = v15[21];
            *(_OWORD *)(v24 + 152) = v31;
            *(_OWORD *)(v24 + 136) = v30;
            *(_OWORD *)(v24 + 120) = v29;
            v13 = *(_QWORD *)(a1 + 8);
            *(_DWORD *)(v13 + 4 * v18) = v19;
            v14 = *(_DWORD *)(a1 + 28) + 1;
            *(_DWORD *)(a1 + 28) = v14;
            v10 = *(_DWORD *)&v33[32];
          }
          ++v12;
          v11 += 176;
        }
        while (v12 < v10);
      }
      re::HashTable<re::ecs2::Entity const*,re::ecs2::BillboardData,re::Hash<re::ecs2::Entity const*>,re::EqualTo<re::ecs2::Entity const*>,true,false>::deinit((uint64_t *)v33);
    }
  }
  else
  {
    if (a2)
      v32 = a2;
    else
      v32 = 3;
  }
}

void re::ecs2::introspect_BodyTrackingTargetType(re::ecs2 *this, const re::IntrospectionBase *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  _anonymous_namespace_ *v7;
  unint64_t v8;
  unint64_t i;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  re *v26;
  uint64_t *v27;
  re *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  StringID v34;
  _QWORD v35[2];
  _QWORD v36[61];

  v2 = atomic_load((unsigned __int8 *)&qword_2541124B0);
  if ((v2 & 1) == 0)
  {
    v26 = (re *)__cxa_guard_acquire(&qword_2541124B0);
    if ((_DWORD)v26)
    {
      v27 = re::introspectionAllocator(v26);
      v28 = (re *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v27 + 32))(v27, 24, 8);
      *(_DWORD *)v28 = 1;
      *((_QWORD *)v28 + 1) = 0;
      *((_QWORD *)v28 + 2) = "Any";
      qword_2541124E8 = (uint64_t)v28;
      v29 = re::introspectionAllocator(v28);
      v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v29 + 32))(v29, 24, 8);
      *(_DWORD *)v30 = 1;
      *(_QWORD *)(v30 + 8) = 1;
      *(_QWORD *)(v30 + 16) = "Body";
      qword_2541124F0 = v30;
      __cxa_guard_release(&qword_2541124B0);
    }
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2541124B8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2541124B8))
  {
    re::IntrospectionBasic::IntrospectionBasic((re::IntrospectionBasic *)&qword_254112520, "BodyTrackingTargetType", 4, 4, 1, 1);
    qword_254112520 = (uint64_t)&off_24ED7D9E8;
    qword_254112560 = (uint64_t)&re::ecs2::introspect_BodyTrackingTargetType(BOOL)::enumTable;
    dword_254112530 = 9;
    __cxa_guard_release(&qword_2541124B8);
  }
  if ((_MergedGlobals_296 & 1) == 0)
  {
    _MergedGlobals_296 = 1;
    re::IntrospectionRegistry::add((re::IntrospectionRegistry *)&qword_254112520, a2);
    v32 = 0x8B297CF4FD9787C8;
    v33 = "BodyTrackingTargetType";
    v36[0] = 208862;
    v36[1] = "int";
    v4 = (uint64_t *)re::HashTable<re::StringID,re::StateParameterInt *,re::Hash<re::StringID>,re::EqualTo<re::StringID>,false,false>::tryGet((uint64_t)&unk_25582A358, v36);
    if (v4)
    {
      v5 = *v4;
      re::StringID::destroyString((re::StringID *)v36);
      v6 = (unsigned int *)qword_254112560;
      v35[1] = v5;
      re::TypeBuilder::beginEnumType((uint64_t)v36, &v32, 1, 1, (uint64_t)v35);
      v8 = *v6;
      if ((_DWORD)v8)
      {
        for (i = 0; i < v8; ++i)
        {
          v10 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * i);
          if (*(_DWORD *)v10 == 1)
          {
            v11 = *(char **)(v10 + 16);
            if (v11)
            {
              v12 = *v11;
              if (*v11)
              {
                v13 = v11[1];
                if (v13)
                {
                  v14 = (unsigned __int8 *)(v11 + 2);
                  do
                  {
                    v12 = 31 * v12 + v13;
                    v15 = *v14++;
                    v13 = v15;
                  }
                  while (v15);
                }
              }
            }
            else
            {
              v12 = 0;
            }
            v16 = *(_QWORD *)(v10 + 8);
            *(_QWORD *)&v34.var0 = 2 * v12;
            v34.var1 = v11;
            re::TypeBuilder::addEnumConstant((re::TypeBuilder *)v36, v16, &v34);
            re::StringID::destroyString((re::StringID *)&v34);
            v8 = *v6;
          }
        }
        if (v8)
        {
          for (j = 0; j < v8; ++j)
          {
            v18 = *(_QWORD *)(*((_QWORD *)v6 + 1) + 8 * j);
            if (*(_DWORD *)v18 == 2)
            {
              v19 = *(char **)(v18 + 16);
              if (v19)
              {
                v20 = *v19;
                if (*v19)
                {
                  v21 = v19[1];
                  if (v21)
                  {
                    v22 = (unsigned __int8 *)(v19 + 2);
                    do
                    {
                      v20 = 31 * v20 + v21;
                      v23 = *v22++;
                      v21 = v23;
                    }
                    while (v23);
                  }
                }
              }
              else
              {
                v20 = 0;
              }
              v24 = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v34.var0 = 2 * v20;
              v34.var1 = v19;
              re::TypeBuilder::addEnumConstantRenaming((re::TypeBuilder *)v36, v24, &v34);
              re::StringID::destroyString((re::StringID *)&v34);
              v8 = *v6;
            }
          }
        }
      }
      re::TypeBuilder::~TypeBuilder((re::TypeBuilder *)v36, v25);
      xmmword_254112540 = (__int128)v34;
      re::StringID::destroyString((re::StringID *)&v32);
    }
    else
    {
      re::StringID::destroyString((re::StringID *)v36);
      re::internal::assertLog((re::internal *)5, v31, "assertion failure: '%s' (%s:line %i) Failed to determine underlying type of enum %s.", "valueID.isValid()", "registerEnumType", 2796, "BodyTrackingTargetType", v32, v33);
      _os_crash();
      __break(1u);
    }
  }
}

uint64_t *re::ecs2::allocInfo_BodyTrackingTarget(re::ecs2 *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2541124C0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541124C0))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_254112568, 0);
    *(uint64_t *)((char *)&qword_254112578 + 6) = 0;
    qword_254112578 = 0;
    qword_254112588 = 0;
    qword_254112590 = 0xFFFFFFFFLL;
    qword_254112568 = (uint64_t)&off_24ED7DAA8;
    qword_254112598 = (uint64_t)"BodyTrackingTarget";
    dword_2541125A0 = 0;
    unk_2541125A8 = 0u;
    unk_2541125B8 = 0u;
    xmmword_2541125C8 = 0u;
    qword_2541125D8 = 0;
    __cxa_guard_release(&qword_2541124C0);
  }
  return &qword_254112568;
}

void re::ecs2::initInfo_BodyTrackingTarget(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  const re::IntrospectionBase *v7;
  uint64_t v8;
  uint64_t *v9;
  const re::IntrospectionBase *v10;
  void *v11;
  uint64_t v12;
  __int128 v13;
  _QWORD v14[2];
  __int128 v15;

  v14[0] = 0xD3F2FE58F3BB2B14;
  v14[1] = "BodyTrackingTarget";
  re::StringID::destroyString((re::StringID *)v14);
  *((_OWORD *)this + 2) = v15;
  v4 = atomic_load((unsigned __int8 *)&qword_2541124C8);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541124C8);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      re::ecs2::introspect_BodyTrackingTargetType((re::ecs2 *)v6, v7);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "type";
      *(_QWORD *)(v8 + 16) = &qword_254112520;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 1;
      *(_DWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_2541124F8 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v11 = re::IntrospectionInfo<unsigned char [16]>::get(1, v10);
      v12 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 32))(v9, 72, 8);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = "bodyIdentifier";
      *(_QWORD *)(v12 + 16) = v11;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0x400000002;
      *(_DWORD *)(v12 + 40) = 0;
      *(_QWORD *)(v12 + 48) = 0;
      *(_QWORD *)(v12 + 56) = 0;
      *(_DWORD *)(v12 + 64) = 0;
      qword_254112500 = v12;
      __cxa_guard_release(&qword_2541124C8);
    }
  }
  *((_QWORD *)this + 2) = 0x1400000008;
  *((_DWORD *)this + 6) = 4;
  *((_WORD *)this + 14) = 1;
  *((_DWORD *)this + 14) = 2;
  *((_QWORD *)this + 8) = &qword_2541124F8;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::BodyTrackingTarget>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::BodyTrackingTarget>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::BodyTrackingTarget>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::BodyTrackingTarget>;
  re::IntrospectionRegistry::add(this, v3);
  v13 = v15;
}

void re::internal::defaultConstruct<re::ecs2::BodyTrackingTarget>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
}

uint64_t re::internal::defaultConstructV2<re::ecs2::BodyTrackingTarget>(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

uint64_t *re::ecs2::allocInfo_BodyTrackingComponent(re::ecs2 *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  v1 = atomic_load((unsigned __int8 *)&qword_2541124D8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2541124D8))
  {
    ArcSharedObject::ArcSharedObject((ArcSharedObject *)&qword_2541125E0, 0);
    *(_QWORD *)(v3 + 22) = 0;
    qword_2541125F0 = 0;
    qword_254112600 = 0;
    qword_254112608 = 0xFFFFFFFFLL;
    qword_2541125E0 = (uint64_t)&off_24ED7DAA8;
    qword_254112610 = (uint64_t)"BodyTrackingComponent";
    dword_254112618 = 0;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_OWORD *)(v3 + 80) = 0u;
    *(_OWORD *)(v3 + 96) = 0u;
    qword_254112650 = 0;
    __cxa_guard_release(&qword_2541124D8);
  }
  return &qword_2541125E0;
}

void re::ecs2::initInfo_BodyTrackingComponent(re::ecs2 *this, re::IntrospectionBase *a2)
{
  const re::IntrospectionBase *v3;
  unsigned __int8 v4;
  re *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  re::IntrospectionBase *v12;
  uint64_t v13;
  uint64_t *v14;
  const re::IntrospectionBase *v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  _QWORD v19[2];
  __int128 v20;

  v19[0] = 0xC26C97C4FC5494C8;
  v19[1] = "BodyTrackingComponent";
  re::StringID::destroyString((re::StringID *)v19);
  *((_OWORD *)this + 2) = v20;
  v4 = atomic_load((unsigned __int8 *)&qword_2541124E0);
  if ((v4 & 1) == 0)
  {
    v5 = (re *)__cxa_guard_acquire(&qword_2541124E0);
    if ((_DWORD)v5)
    {
      v6 = re::introspectionAllocator(v5);
      v7 = re::ecs2::introspect_Component((re::IntrospectionBase **)1);
      v8 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v6 + 32))(v6, 72, 8);
      *(_DWORD *)v8 = 1;
      *(_QWORD *)(v8 + 8) = "Component";
      *(_QWORD *)(v8 + 16) = v7;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_DWORD *)(v8 + 40) = 3;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_DWORD *)(v8 + 64) = 0;
      qword_254112508 = v8;
      v9 = re::introspectionAllocator((re *)v8);
      v10 = v9;
      v11 = (uint64_t *)qword_2541124D0;
      if (!qword_2541124D0)
      {
        v11 = re::ecs2::allocInfo_BodyTrackingTarget((re::ecs2 *)v9);
        qword_2541124D0 = (uint64_t)v11;
        re::ecs2::initInfo_BodyTrackingTarget((re::ecs2 *)v11, v12);
      }
      v13 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v10 + 32))(v10, 72, 8);
      *(_DWORD *)v13 = 1;
      *(_QWORD *)(v13 + 8) = "target";
      *(_QWORD *)(v13 + 16) = v11;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 32) = 0x1C00000001;
      *(_DWORD *)(v13 + 40) = 0;
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = 0;
      *(_DWORD *)(v13 + 64) = 0;
      qword_254112510 = v13;
      v14 = re::introspectionAllocator((re *)v13);
      v16 = re::introspect_BOOL((re *)1, v15);
      v17 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v14 + 32))(v14, 72, 8);
      *(_DWORD *)v17 = 1;
      *(_QWORD *)(v17 + 8) = "isPaused";
      *(_QWORD *)(v17 + 16) = v16;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0x3000000002;
      *(_DWORD *)(v17 + 40) = 0;
      *(_QWORD *)(v17 + 48) = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)(v17 + 64) = 0;
      qword_254112518 = v17;
      __cxa_guard_release(&qword_2541124E0);
    }
  }
  *((_QWORD *)this + 2) = 0x3800000008;
  *((_DWORD *)this + 6) = 8;
  *((_WORD *)this + 14) = 0;
  *((_DWORD *)this + 14) = 3;
  *((_QWORD *)this + 8) = &qword_254112508;
  *((_QWORD *)this + 9) = re::internal::defaultConstruct<re::ecs2::BodyTrackingComponent>;
  *((_QWORD *)this + 10) = re::internal::defaultDestruct<re::ecs2::BodyTrackingComponent>;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = re::internal::defaultConstructV2<re::ecs2::BodyTrackingComponent>;
  *((_QWORD *)this + 14) = re::internal::defaultDestructV2<re::ecs2::BodyTrackingComponent>;
  re::IntrospectionRegistry::add(this, v3);
  v18 = v20;
}

void re::internal::defaultConstruct<re::ecs2::BodyTrackingComponent>(int a1, int a2, ArcSharedObject *this)
{
  uint64_t v3;

  *((_QWORD *)this + 6) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  ArcSharedObject::ArcSharedObject(this, 0);
  *(_QWORD *)(v3 + 16) = 0;
  *(_BYTE *)(v3 + 24) = 0;
  *(_QWORD *)v3 = &off_24ED590C0;
  *(_QWORD *)(v3 + 36) = 0;
  *(_QWORD *)(v3 + 28) = 0;
  *(_QWORD *)(v3 + 41) = 0;
}

void *re::internal::defaultDestruct<re::ecs2::BodyTrackingComponent>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  *a3 = &off_24ED426B8;
  return objc_destructInstance(a3 + 1);
}

void re::internal::defaultConstructV2<re::ecs2::BodyTrackingComponent>(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  ArcSharedObject::ArcSharedObject((ArcSharedObject *)a1, 0);
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 24) = 0;
  *(_QWORD *)v1 = &off_24ED590C0;
  *(_QWORD *)(v1 + 36) = 0;
  *(_QWORD *)(v1 + 28) = 0;
  *(_QWORD *)(v1 + 41) = 0;
}

void *re::internal::defaultDestructV2<re::ecs2::BodyTrackingComponent>(_QWORD *a1)
{
  *a1 = &off_24ED426B8;
  return objc_destructInstance(a1 + 1);
}

uint64_t re::ecs2::introspect_BodyTrackingComponent(re::IntrospectionBase **this)
{
  return re::internal::getOrCreateInfo((re::internal *)"BodyTrackingComponent", (uint64_t (*)(re::internal *))re::ecs2::allocInfo_BodyTrackingComponent, (re::IntrospectionBase *(*)(void))re::ecs2::initInfo_BodyTrackingComponent, (void (*)(re::IntrospectionBase *))&re::internal::introspectionInfoStorage<re::ecs2::BodyTrackingComponent>, this);
}

re::AudioSharedSceneManager *re::AudioSharedSceneManager::AudioSharedSceneManager(re::AudioSharedSceneManager *this)
{
  REAudioManagerNotificationListener *v2;
  void *v3;

  *(_QWORD *)this = &off_24ED69B10;
  *((_QWORD *)this + 1) = 0;
  re::AudioManager_PHASE::AudioManager_PHASE((id **)this + 2);
  *((_DWORD *)this + 228) = 0;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *((_DWORD *)this + 238) = 1065353216;
  v2 = -[REAudioManagerNotificationListener initWithOwner:]([REAudioManagerNotificationListener alloc], "initWithOwner:", this);
  v3 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v2;

  return this;
}

void re::AudioSharedSceneManager::~AudioSharedSceneManager(re::AudioSharedSceneManager *this)
{
  void *v2;

  *(_QWORD *)this = &off_24ED69B10;
  objc_msgSend(*((id *)this + 1), "stop");
  v2 = (void *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;

  objc_msgSend(**((id **)this + 41), "cancel");
  std::__hash_table<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,true>,std::__unordered_map_equal<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,true>,std::allocator<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>>>::clear((uint64_t)this + 336);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::shared_ptr<re::PersistedAssetData>>>>::~__hash_table((uint64_t)this + 920);
  re::AudioManager_PHASE::~AudioManager_PHASE((re::AudioSharedSceneManager *)((char *)this + 16));

}

{
  re::AudioSharedSceneManager::~AudioSharedSceneManager(this);
  JUMPOUT(0x2276933B8);
}

uint64_t re::AudioSharedSceneManager::audioService(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
}

uint64_t re::AudioSharedSceneManager::audioService(re::AudioSharedSceneManager *this)
{
  return (uint64_t)this + 16;
}

void re::AudioSharedSceneManager::setEngineQueue(uint64_t a1, void *a2)
{
  re::AudioManager_PHASE::setEngineQueue(a1 + 16, a2);
}

id re::AudioSharedSceneManager::getEngineQueue(id *this)
{
  return this[3];
}

void re::AudioSharedSceneManager::configureEnterFramePhase(re *a1, uint64_t *a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[16];
  _BYTE v10[21];
  _BYTE v11[24];
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD v15[3];
  int v16;
  uint64_t v17;
  StringID v18;
  _BYTE v19[21];
  _QWORD v20[3];
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v18.var0 = 0x4BF9C6AA1E4AE526;
  v18.var1 = "Audio Before Frame Update";
  *(_WORD *)v19 = 1;
  v5 = (char *)a1 + 16;
  *(_DWORD *)&v19[4] = 0;
  v19[8] = 0;
  *(_WORD *)&v19[12] = 260;
  *(_DWORD *)&v19[16] = 1023969417;
  v19[20] = 0;
  v6 = re::globalAllocators(a1)[2];
  v20[0] = &off_24ED69C00;
  v20[1] = v5;
  v21 = v6;
  v22 = v20;
  v7 = *a2;
  v28 = 0;
  v27 = 0;
  v25 = 0;
  v26 = 0;
  v23 = v7;
  v24 = 0;
  re::StringID::StringID((re::StringID *)v9, &v18);
  *(_OWORD *)v10 = *(_OWORD *)v19;
  *(_QWORD *)&v10[13] = *(_QWORD *)&v19[13];
  v12 = v21;
  v13 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v11, (uint64_t)v20);
  v14 = v23;
  re::DynamicArray<unsigned long>::DynamicArray((uint64_t)v15, &v24);
  v8 = *(_QWORD *)(a3 + 24);
  if (!v8)
    std::__throw_bad_function_call[abi:nn180100]();
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 48))(v8, v9);
  if (v15[0])
  {
    if (v17)
      (*(void (**)(void))(*(_QWORD *)v15[0] + 40))();
    v17 = 0;
    memset(v15, 0, sizeof(v15));
    ++v16;
  }
  if (v13)
  {
    (**(void (***)(_BYTE *))v13)(v13);
    if (v13 != v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    v13 = 0;
  }
  re::StringID::destroyString((re::StringID *)v9);
  if (v24)
  {
    if (v28)
      (*(void (**)(void))(*(_QWORD *)v24 + 40))();
    v28 = 0;
    v25 = 0;
    v26 = 0;
    v24 = 0;
    ++v27;
  }
  if (v22)
  {
    (*(void (**)(_QWORD *))*v22)(v22);
    if (v22 != v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
    v22 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v18);
}

void re::AudioSharedSceneManager::configureCommitPhase(re *a1, uint64_t *a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[16];
  _BYTE v10[21];
  _BYTE v11[24];
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _QWORD v15[3];
  int v16;
  uint64_t v17;
  StringID v18;
  _BYTE v19[21];
  _QWORD v20[3];
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v18.var0 = 0xEA0359364ADC6754;
  v18.var1 = "Audio After Frame Update";
  *(_WORD *)v19 = 1;
  v5 = (char *)a1 + 16;
  *(_DWORD *)&v19[4] = 0;
  v19[8] = 0;
  *(_WORD *)&v19[12] = 260;
  *(_DWORD *)&v19[16] = 1023969417;
  v19[20] = 0;
  v6 = re::globalAllocators(a1)[2];
  v20[0] = &off_24ED69C58;
  v20[1] = v5;
  v21 = v6;
  v22 = v20;
  v7 = *a2;
  v28 = 0;
  v27 = 0;
  v25 = 0;
  v26 = 0;
  v23 = v7;
  v24 = 0;
  re::StringID::StringID((re::StringID *)v9, &v18);
  *(_OWORD *)v10 = *(_OWORD *)v19;
  *(_QWORD *)&v10[13] = *(_QWORD *)&v19[13];
  v12 = v21;
  v13 = 0;
  re::FunctionBase<24ul,REEventHandlerResult ()(re::ecs2::Scene *,RESceneDidAddEvent const&)>::operator=<24ul>((uint64_t)v11, (uint64_t)v20);
  v14 = v23;
  re::DynamicArray<unsigned long>::DynamicArray((uint64_t)v15, &v24);
  v8 = *(_QWORD *)(a3 + 24);
  if (!v8)
    std::__throw_bad_function_call[abi:nn180100]();
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v8 + 48))(v8, v9);
  if (v15[0])
  {
    if (v17)
      (*(void (**)(void))(*(_QWORD *)v15[0] + 40))();
    v17 = 0;
    memset(v15, 0, sizeof(v15));
    ++v16;
  }
  if (v13)
  {
    (**(void (***)(_BYTE *))v13)(v13);
    if (v13 != v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    v13 = 0;
  }
  re::StringID::destroyString((re::StringID *)v9);
  if (v24)
  {
    if (v28)
      (*(void (**)(void))(*(_QWORD *)v24 + 40))();
    v28 = 0;
    v25 = 0;
    v26 = 0;
    v24 = 0;
    ++v27;
  }
  if (v22)
  {
    (*(void (**)(_QWORD *))*v22)(v22);
    if (v22 != v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
    v22 = 0;
  }
  re::StringID::destroyString((re::StringID *)&v18);
}

void re::AudioSharedSceneManager::setIsExternalSourceControl(re::AudioSharedSceneManager *this, char a2)
{
  char *v2;
  NSObject *v3;
  _QWORD v4[5];
  char v5;

  v2 = (char *)this + 16;
  *((_BYTE *)this + 288) = a2;
  v3 = *((_QWORD *)this + 69);
  v4[0] = MEMORY[0x24BDAC760];
  v4[1] = 3221225472;
  v4[2] = ___ZN2re18AudioManager_PHASE24setExternalSourceControlEb_block_invoke;
  v4[3] = &__block_descriptor_41_e5_v8__0l;
  v4[4] = v2;
  v5 = a2;
  dispatch_async(v3, v4);
}

uint64_t re::AudioSharedSceneManager::getIsExternalSourceControl(re::AudioSharedSceneManager *this)
{
  return *((unsigned __int8 *)this + 288);
}

void re::AudioSharedSceneManager::setIsSTSControl(re::AudioSharedSceneManager *this, int a2)
{
  uint64_t v2;

  *((_BYTE *)this + 72) = a2;
  v2 = *((_QWORD *)this + 10);
  if (a2)
  {
    if (v2)
      return;
LABEL_5:
    re::AudioManager::configureSTS((re::AudioSharedSceneManager *)((char *)this + 16));
    return;
  }
  if (v2)
    goto LABEL_5;
}

uint64_t re::AudioSharedSceneManager::getIsSTSControl(re::AudioSharedSceneManager *this)
{
  return *((unsigned __int8 *)this + 72);
}

uint64_t re::AudioSharedSceneManager::setIsHostingSharedAudioSimulation(uint64_t this, char a2)
{
  *(_BYTE *)(this + 568) = a2;
  return this;
}

uint64_t re::AudioSharedSceneManager::getIsHostingSharedAudioSimulation(re::AudioSharedSceneManager *this)
{
  return *((unsigned __int8 *)this + 568);
}

void re::AudioSharedSceneManager::triggerNotification(uint64_t a1, int a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  re::AudioManager_PHASE::triggerNotification((re::AudioManager *)(a1 + 16), a2);
  if (a2 == 3)
  {
    v7[0] = &off_24ED69CB0;
    v7[1] = a1;
    v8 = v7;
    re::AudioManager_PHASE::loadAssetsOnReset(v4, (uint64_t)v7);
    v5 = v8;
    if (v8 == v7)
    {
      v6 = 4;
      v5 = v7;
    }
    else
    {
      if (!v8)
        return;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
}

void re::AudioSharedSceneManager::forceShutdown(id **this)
{
  objc_msgSend(*this[41], "cancel");
  std::__hash_table<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::__unordered_map_hasher<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,true>,std::__unordered_map_equal<REAudioServicesNotificationCallbackConfiguration,std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>,std::equal_to<REAudioServicesNotificationCallbackConfiguration>,REAudioServicesNotificationCallbackRegistry::ConfigHasher,true>,std::allocator<std::__hash_value_type<REAudioServicesNotificationCallbackConfiguration,void({block_pointer} {__strong})(void)>>>::clear((uint64_t)(this + 42));
}

uint64_t re::AudioSharedSceneManager::updateEngine(re::AudioSharedSceneManager *this)
{
  return re::AudioManager_PHASE::updateEngine((re::AudioSharedSceneManager *)((char *)this + 16));
}

void re::AudioSharedSceneManager::simulateMediaServicesLostNotification(re::AudioSharedSceneManager *this)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  v2 = (void *)*((_QWORD *)this + 1);
  v3 = objc_alloc(MEMORY[0x24BDD16C8]);
  objc_msgSend(*((id *)this + 1), "audioSessionToFollow");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v3, "initWithName:object:userInfo:", CFSTR("AVAudioSessionMediaServicesWereLostNotification"), v5, MEMORY[0x24BDBD1B8]);
  objc_msgSend(v2, "servicesLost:", v4);

}

void re::AudioSharedSceneManager::simulateMediaServicesResetNotification(re::AudioSharedSceneManager *this)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  v2 = (void *)*((_QWORD *)this + 1);
  v3 = objc_alloc(MEMORY[0x24BDD16C8]);
  objc_msgSend(*((id *)this + 1), "audioSessionToFollow");
  v5 = (id)objc_claimAutoreleasedReturnValue();
  v4 = (void *)objc_msgSend(v3, "initWithName:object:userInfo:", CFSTR("AVAudioSessionMediaServicesWereResetNotification"), v5, MEMORY[0x24BDBD1B8]);
  objc_msgSend(v2, "servicesReset:", v4);

}

void re::AudioSharedSceneManager::loadAudio(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 16;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v17 = v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v17 = 0;
  }
  v16 = v4;
  v18[0] = &off_24ED69D30;
  v18[1] = a1;
  v19 = v18;
  re::AudioManager_PHASE::loadAudio(v3, &v16, (uint64_t)v18);
  v9 = v19;
  if (v19 == v18)
  {
    v10 = 4;
    v9 = v18;
    goto LABEL_12;
  }
  if (v19)
  {
    v10 = 5;
LABEL_12:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v5)
  {
    v14 = (unint64_t *)&v5->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

